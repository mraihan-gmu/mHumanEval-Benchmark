task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,tso_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Kamba loko ku ri na tinomboro timbirhi leti nga ekusuhi ku tlula mpimo lowu nga kona. Xikombiso: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Mavunwa >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) I ntiyiso """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,tso_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Xikombiso: >>> separate_paren_groups' ((() (() (() ) ) ) ' ('), ' ('), ' (') ' ()) ' (""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,tso_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Loko ku nyiketiwa nomboro ya positive ya floating point, yi nga avanyisiwa hi xiphemu xa integer (nomboro leyikulu leyinga hansi ka nomboro leyi nyikiweke) na decimals (leftover part leyi yi nga hansi ka 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,tso_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""U nyikiwa nxaxamelo wa ku nghenisa na ku humesa eka akhawunti ya bangi leyi sungulaka hi ku va na nkwama wa zero. Ntirho wa wena i ku vona loko eka nkarhi wun'wana na wun'wana nkwama wa akhawunti wu wela ehansi ka zero, naswona eka nkarhi wolowo ntirho wu fanele ku vuyela eka ntiyiso. Loko swi nga ri tano wu fanele ku vuyela eka mavunwa. Xikombiso: >>> below_zero([1, 2, 3]) mavunwa >>> below_zero([1, 2, -4, 5]) ntiyiso """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,tso_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Eka nxaxamelo wa tinomboro ta tinhlayo, hlayela Mean Absolute Deviation ku rhendzela avhareji ya dataset leyi. Mean Absolute Deviation i avhareji ya ku hambana exikarhi ka yinhla yin'wana na yin'wana na yinhla ya le xikarhi (leyi nga laha): MAD = avhareji. x - x_mean. Xikombiso: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,tso_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Nghenisa nomboro ya 'delimeter' exikarhi ka swilo swimbirhi leswi landzelanaka swa nxaxamelo wa tinomboro ta input '`numbers' >>> intersperse (([], 4) [] >>> intersperse (([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,tso_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Xitirhisiwa lexi i nketani leyi yimelaka mintlawa yo tala ya mahlanganisi ya xirhendzevutana leyi hambanisiweke hi swivandla. Eka ntlawa wun'wana na wun'wana, humesa mpimo wa le hansi wa mahlanganisi ya xirhendzevutana. Xikombiso: (() (()) yi na mpimo wa le henhla wa mahlanganisi loko ((())) yi ri na manharhu.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,tso_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter a input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,tso_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Eka nxaxamelo wa tinhlayo to hetiseka, vuyisela nhlayo leyi nga na ntsengo na nkatsakanyo wa tinhlayo hinkwato eka nxaxamelo. Nhlayo leyi nga hava nchumu yi fanele ku ringana na 0 na nkatsakanyo lowu nga hava nchumu wu fanele ku ringana na 1. >>> ntsengo_wa nkatsakanyo ([]) (0, 1) >>> ntsengo_wa nkatsakanyo ([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,tso_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Ku suka eka nxaxamelo wa tinomboro leti heleleke, vumba nxaxamelo wa swiaki swa nkoka leswi kumekaka ku fikela eka nkarhi lowu nga nyikiwa eka nxaxamelo. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,tso_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Kuma palindrome yo koma leyi sungulaka hi nketani leyi nyiketiweke. Mfungho wa algorithm wu olovile: - Kuma postfix yo leha ya nketani leyi nyiketiweke leyi nga palindrome. - Nghenisa emakumu ka nketani ya nketani ya nketani ya nketani leyi taka emahlweni ka nketani ya palindromic. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Kambela loko nketani leyi nyikiweke yi ri palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,tso_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Ku nghenisa i ti string timbirhi a na b leti nga na 1 na 0 ntsena. Endla binary XOR eka ti input leti kutani u vuya na vuyelo bya string. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,tso_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Ku suka eka nxaxamelo wa ti string, vuyisela le'ri leheke ngopfu. Vuyisela le'ri nga ta sungula loko ku ri na ti string to tala ta ku leha loku fanaka. Vuyela None loko nxaxamelo wa le ndzeni wu nga ri na nchumu. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,tso_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Return a greatest common divisor of two integers a and b >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,tso_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Ku tlherisa nxaxamelo wa swirhangi hinkwaswo ku suka eka xo koma ku ya eka xo leha xa nketani ya ku nghenisa >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,tso_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Return a string containing space-delimited numbers starting from 0 upto n inclusive. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,tso_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ku nyiketiwa string, kuma leswaku i tingani ti karatekete leti hambaneke (ku nga khatariseki leswaku i case) leti yi nga na tona >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,tso_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Ku nghenisa eka ntirho lowu i ntambhu leyi yimelaka tinoto ta vuyimbeleri hi xivumbeko xo hlawuleka xa ASCII. Ntirho wa wena i ku hlahluva nxaxamelo wa ntambhu ya tinoto leti heleleke leti fambelanaka ni ku ba ko tala. Hi lowu ntsalo: 'o' - n'weti, wu ba 'o' - hafu ya n'weti, wu ba 'quater' - quater, wu ba 'parse_music'.""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,tso_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Kuma leswaku ku na nhlayo ya minkarhi leyi nga kona eka nketani ya le hansi. Hlayela minkarhi leyi nga kona. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,tso_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Ku nghenisa i nxaxamelo wa tinomboro leti pimiweke hi xivandla ku suka eka 'zero' ku fika eka 'kaye'. Ku hlawula loku nga kona i 'zero', 'un', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' na 'nine'. Yi tlherisa nxaxamelo wa tinomboro leti hleriweke ku suka eka letitsongo ku ya eka letikulu >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,tso_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Eka nxaxamelo lowu nyikeriweke wa tinomboro (ta ku leha ka kwalomu ka timbirhi) hlawula ni ku tlherisa timbirhi leti nga ekusuhi swinene na yin'wana kutani u ti tlherisa hi ku landzelelana (nomboro leyitsongo, nomboro leyikulu). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,tso_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Ku nyiketiwa nxaxamelo wa tinomboro (ta kwalomu ka swiaki swimbirhi), tirhisa ku cinca ka ntila eka nxaxamelo wolowo, leswaku nomboro leyitsongo yi va 0 naswona leyikulu yi va 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,tso_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,tso_Latn,python,"

def strlen(string: str) -> int:
    """"""Ku vuyela ka ntila lowu nyikiweke >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,tso_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Eka nomboro leyi nyikiweke n, kuma nomboro leyikulu leyi avaka n hi ku ringana, leyitsongo eka n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,tso_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Ku tlherisela nxaxamelo wa tihakelo ta nhlayo leyi nga vekiwa ku suka eka leyitsongo ku ya eka leyikulu. Nhlayo ya tihakelo yi fanele ku longoloxiwa minkarhi leyi yi fambelanaka na minkarhi leyi yi humelelaka eka ku avanyisa. Nhlayo ya ku nghenisa yi fanele ku ringana na nkatsakanyo wa tihakelo hinkwato >>> factorise ((8) [2, 2, 2] >>> factorise ((25) [5, 5] >>> factorise ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,tso_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Ku suka eka nxaxamelo wa tinomboro, susa swilo hinkwaswo leswi humelelaka ku tlula kan'we. Hlayisa nxaxamelo wa swilo leswi saleke wu fana na lowu nga eka input. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,tso_Latn,python,"

def flip_case(string: str) -> str:
    """"""Eka nxaxamelo lowu nyikeriweke, cinca maletere ya maletere lamatsongo ya ya eka lamakulu ni lamakulu ya ya eka lamatsongo. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,tso_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Ku hlanganisa nxaxamelo wa ti string eka string yin'we >>> ku hlanganisa (([]) '' >>> ku hlanganisa ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,tso_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,tso_Latn,python,"

def get_positive(l: list):
    """"""Vuyisa tinomboro leti nga na ti-positive ntsena eka nxaxamelo. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,tso_Latn,python,"

def is_prime(n):
    """"""Vuyisa ntiyiso loko nomboro leyi nyikiweke yi ri ya nkoka, na mavunwa loko yi nga ri ya nkoka. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,tso_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs i ti-coefficients ta polynomial. find_zero kuma x ku endlela leswaku poly ((x) = 0. find_zero yi tlherisa ntsena nomboro ya zero, hambi loko ku ri na tin'wana to tala. Ku tlula kwalaho, find_zero yi teka ntsena nxaxamelo wa xs lowu nga na nhlayo ya ti-coefficients na ti-coefficient letikulu leti nga riki na zero tanihi leswi yi tiyisisaka leswaku ku na nhlamulo. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Hlahluva polynomial na coefficients xs eka x. vuyela xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,tso_Latn,python,"

def sort_third(l: list):
    """"""Ntirho lowu wu teka nxaxamelo wa l kutani wu tlherisa nxaxamelo wa l' lowu fanaka na l eka ti-indices leti nga avanyisiwiki hi nharhu, kasi nkoka wa yona eka ti-indices leti avanyisiwaka hi nharhu wu ringana na nkoka wa ti-indices leti fambelanaka ta l, kambe ti hleriwe. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,tso_Latn,python,"

def unique(l: list):
    """"""Return sorted unique elements in a list >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,tso_Latn,python,"

def max_element(l: list):
    """"""Vuyisa nhlayo ya le henhla ya swilo leswi nga eka nxaxamelo. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,tso_Latn,python,"

def fizz_buzz(n: int):
    """"""Tlhelela eka nhlayo ya minkarhi leyi nomboro ya 7 yi humelelaka eka tinhlayo leti heleleke leti nga ehansi ka n leti avanyisiwaka hi 11 kumbe 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,tso_Latn,python,"

def sort_even(l: list):
    """"""Ntirho lowu wu teka nxaxamelo wa l kutani wu tlherisa nxaxamelo wa l' lowu fanaka na l eka ti-indices leti nga hlangani, kasi nkoka wa yona eka ti-indices leti nga hlangani ti ringana na nkoka wa ti-indices leti nga hlangani ta l, kambe ti hleriwile. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,tso_Latn,python,"

def encode_cyclic(s: str):
    """"""yi teka tanihi input string leyi encoded hi encode_cyclic function. Yi tlherisa string leyi nga encoded.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""yi tlherisa ti string leti khodiweke hi mintlawa ya ti cycling ta tinomboro tinharhu. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,tso_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib yi tlherisa nomboro ya n-th leyi nga nomboro ya Fibonacci naswona yi nga ya nkoka. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,tso_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero yi teka nxaxamelo wa tinomboro to hetiseka tanihi input. yi tlherisa ntiyiso loko ku ri na swilo swinharhu swo hambana eka nxaxamelo lowu leswi hlanganisaka na zero, na mavunwa loko swi nga ri tano. >>> triple_sum_to_zero (([1, 3, 5, 0]) mavunwa >>> triple_sum_to_zero (([1, 3, -2, 1]) ntiyiso >>> triple_sum_to_zero (([1, 2, 3, 7]) mavunwa >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) ntiyiso >>> triple_sum_to_zero [1]) mavunwa """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,tso_Latn,python,"

def car_race_collision(n: int):
    """"""Anakanya hi gondzo leri nga ni ntila wo leha swinene. mimovha ya n yi famba hi tlhelo ra ximatsi ku ya exineneni; hi nkarhi wun'we, ntlawa wun'wana wa mimovha ya n wu famba hi tlhelo ra ximatsi. Mintlawa leyi mimbirhi ya mimovha yi sungula yi ri kule swinene. Mimovha hinkwayo yi famba hi rivilo leri fanaka. Ku vuriwa leswaku mimovha mimbirhi ya tlumbana loko movha lowu fambaka hi tlhelo ra ximatsi ku ya exineneni wu tlumbana ni lowu fambaka hi tlhelo ra ximatsi. Hambiswiritano, mimovha leyi yi tiyile swinene naswona yi tiyile; hikwalaho, yi ya emahlweni yi famba hi ndlela leyi yi fambaka ha yona onge hiloko yi nga tlumbani.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,tso_Latn,python,"

def incr_list(l: list):
    """"""Ku tlhelela eka nxaxamelo wa swilo leswi engeteriweke hi 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,tso_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero yi teka nxaxamelo wa tinomboro to helela tanihi input. yi tlherisa ntiyiso loko ku ri na swilo swimbirhi swo hambana eka nxaxamelo lowu leswi hlanganisaka na zero, na mavunwa loko swi nga ri tano. >>> pairs_sum_to_zero (([1, 3, 5, 0]) mavunwa >>> pairs_sum_to_zero (([1, 3, -2, 1]) mavunwa >>> pairs_sum_to_zero (([1, 2, 3, 7]) mavunwa >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) ntiyiso >>> pairs_sum_to_zero (([1]) mavunwa """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,tso_Latn,python,"

def change_base(x: int, base: int):
    """"""Cinca nomboro ya masungulo ya nomboro ya ku nghenisa x ku ya eka masungulo. vuyela eka nongonoko wa ku yimela endzhaku ka ku cinca. tinomboro ta masungulo ti le hansi ka 10. >>> cinca_masungulo(8, 3) '22' >>> cinca_masungulo(8, 2) '1000' >>> cinca_masungulo(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,tso_Latn,python,"

def triangle_area(a, h):
    """"""Ku nyikiwa ku leha ka tlhelo ni ndhawu ya ku vuyela ka le henhla ka xikhongolotwana. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,tso_Latn,python,"

def fib4(n: int):
    """"""Nxaxamelo wa tinomboro ta Fib4 i nxaxamelo lowu fanaka na wa Fibbonacci lowu hlamuseriwaka hi ndlela leyi landzelaka: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Hi kombela u tsala fambiselo ro hlayela hi ndlela leyi humelelaka eka xiphemu xa n xa nxaxamelo wa tinomboro ta fib4. U nga tirhisi ku tlhelela endzhaku. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,tso_Latn,python,"

def median(l: list):
    """"""Ku vuyela ka swilo leswi nga eka nxaxamelo l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,tso_Latn,python,"

def is_palindrome(text: str):
    """"""Yi kambela loko string leyi nyikiweke yi ri palindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,tso_Latn,python,"

def modp(n: int, p: int):
    """"""Vuyisa 2^n modulo p (tsundzuka tinomboro). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,tso_Latn,python,"

def encode_shift(s: str):
    """"""yi teka tanihi input string leyi encoded hi encode_shift function. Yi tlherisa string leyi nga encoded.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""yi tlherisa khodi ya nketana hi ku cinca-cinca maletere hi 5 eka alfabeti.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,tso_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels i ntirho lowu tekaka string kutani wu vuyisela string handle ka switatisi. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,tso_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True loko tinomboro hinkwato eka nxaxamelo ti ri ehansi ka threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,tso_Latn,python,"

def add(x: int, y: int):
    """"""Tsala tinomboro timbirhi x na y >>> engetela ((2, 3) 5 >>> engetela ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,tso_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Vona loko marito mambirhi ya ri na switatisi leswi fanaka. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Ntiyiso >>> same_chars (('abcd', 'dddddddabc') Ntiyiso >>> same_chars (('dddddddabc', 'abcd') Ntiyiso >>> same_chars (('eabcd', 'dddddddddabc') Ntiyiso >>> same_chars (('eabcd', 'dddddddabc') Ntiyiso >>> same_chars ((('abcd', 'dddddddabddce') Ntiyiso >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Ntiyiso """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,tso_Latn,python,"

def fib(n: int):
    """"""Vuyisa nomboro ya n-th ya Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,tso_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets i nxaxamelo wa ""<"" na "">"". return True loko bracket yin'wana na yin'wana yo pfula yi ri na bracket yo pfala leyi fambelanaka na yona. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,tso_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,tso_Latn,python,"

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,tso_Latn,python,"

def largest_prime_factor(n: int):
    """"""Vuyisa nhlayo leyikulu ya n. A hi nge n > 1 naswona a hi nhlayo leyikulu. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,tso_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n i ntirho lowu hlanganisaka tinomboro ku suka eka 1 ku ya eka n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,tso_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets i nxaxamelo wa ""("" na "")"". return True loko bracket yin'wana na yin'wana yo pfula yi ri na bracket yo pfala leyi fambelanaka na yona. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""() False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,tso_Latn,python,"

def derivative(xs: list):
    """"""xs yi yimela ti coefficients ta polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,tso_Latn,python,"

def fibfib(n: int):
    """"""Nxaxamelo wa tinomboro ta FibFib i nxaxamelo lowu fanaka na wa Fibbonacci lowu hlamuseriwaka hi ndlela leyi landzelaka: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Hi kombela u tsala fambiselo ro hlayela hi ndlela leyi humelelaka eka xiphemu xa n xa nxaxamelo wa tinomboro ta fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,tso_Latn,python,"
FIX = """"""Tsala xivulwa vowels_count lexi tekaka nketani leyi yimelaka rito tanihi input kutani yi tlherisa nhlayo ya switatisi eka nketani. Switatisi eka mhaka leyi i 'a', 'e', 'i', 'o', 'u'. Laha, 'y' na yona i xivulwa, kambe ntsena loko yi ri emakumu ka rito leri nyikiweke. Xikombiso: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Engetela minkambisiso yin'wana. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,tso_Latn,python,"
def circular_shift(x, shift):
    """"""Ku cinca ka ndzhendzeleko wa tinomboro ta nhlayo x, cinca ka ndzhendzeleko wa tinomboro ku ya exineneni kutani u tlherisa mbuyelo tanihi nxanxamelo. Loko ku cinca > nhlayo ya tinomboro, ku cinca ka ndzhendzeleko ku tlherisiwa. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,tso_Latn,python,"
def digitSum(s):
    """"""Ntirho Tsala ntirho lowu tekaka nketani tanihi input kutani wu tlherisa ntsengo wa tinomboro ta le henhla ntsena' tikhodi ta ASCII. Swikombiso: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,tso_Latn,python,"
def fruit_distribution(s,n):
    """"""Eka ntirho lowu, u ta nyikiwa nketani leyi yimelaka nhlayo ya maapula na malamula lama hangalasiweke eka xirhundzu xa mihandzu xirhundzu lexi xi na maapula, malamula na mihandzu ya mango. Ku nyiketiwa nketani leyi yimelaka nhlayo ya malamula na maapula na nhlayo leyi yimelaka nhlayo ya mihandzu eka xirhundzu vuyisela nhlayo ya mihandzu ya mango eka xirhundzu. xikombiso: fruit_distribution""5(apula na 6 lamula"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 maapula na 1 lamula"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 maapula na 3 lamula"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 maapula na 1 lamula"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,tso_Latn,python,"
def pluck(arr):
    """"""""Ku nyiketiwa ka nxaxamelo lowu yimelaka rhavi ra nsinya lowu nga hava ti integer leti nga riki na ti-negative ntirho wa wena i ku hlawula yin'we ya ti-node kutani u yi tlherisa. Nodi leyi hlawuriweke yi fanele ku va node leyi nga na nkoka lowutsongo swinene. Loko ku ri na ti-node to tala leti nga na nkoka wun'we lowutsongo, tlherisa node leyi nga na index leyitsongo. Nodi leyi hlawuriweke yi fanele ku tlherisiwa eka nxaxamelo, [smallest_value, index ya yona] Loko ku ri hava ti-value to ringana kumbe nxaxamelo lowu nyikiweke wu nga ri na nchumu, tlherisa []. Xikombiso 1: Nhlayiso: [4,2,3] Nhlayiso: [2, 1] Nhlamuselo: 2 yi na nkoka lowutsongo swinene, naswona 2 yi na index leyitsongo. Xikombiso 2: Nhlayiso: [1,2,3] Nhlayiso: [2, 1] Nhlamuselo: 2 yi na nkoka lowutsongo swinene, naswona 2 yi na index leyitsongo swinene. Xikombiso 3: Nhlayiso: [] Nhlayiso: [4: [5, 3, 4] Nhlayiso: [0, 2] Nhlayiso: 1 yi na 0 Nhlayiso: Nhlayiso lowutsongo swinene, kambe ku ni ti-node leyitsongo swinene. Xikombiso: *0=======1""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,tso_Latn,python,"
def search(lst):
    '''U nyikiwa nxaxamelo wa tinhlayo to hetiseka leti nga riki na nchumu. Vika nhlayo yo hetiseka leyikulu leyi nga ehenhla ka 0 na leyi nga na nhlayo ya ku tala ka yona yi nga ehenhla kumbe yi ringanaka na nhlayo ya tinhlayo hi toxe. Nhlayo ya tinhlayo i nhlayo ya minkarhi leyi yi humelelaka eka nxaxamelo. Loko ku ri hava nhlayo yo tano, vuyela eka -1. Swikombiso: lava: (([4, 1, 2, 2, 3, 1]) == 2 lava ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 lava ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,tso_Latn,python,"
def strange_sort_list(lst):
    '''Loko u nyikiwa nxaxamelo wa tinhlayo to hetiseka, u ta tlhela u nyika nxaxamelo lowu nga eka nxaxamelo lowu nga tolovelekangiki. Ku hleriwa ka tinhlayo to hambana, hi loko u sungula hi nxaxamelo wa tinhlayo to ka ti nga tolovelekanga, kutani ku landzela nxaxamelo wa tinhlayo to tala leti nga kona, kutani ku landzela nxaxamelo wa tinhlayo to ka ti nga tolovelekanga. Swikombiso: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,tso_Latn,python,"
def triangle_area(a, b, c):
    '''Ku nyiketiwa ku leha ka matlhelo manharhu ya xinkobyana. Ku tlherisela ndhawu ya xinkobyana yi rhendzelekisiwile ku ya eka 2 wa ti decimal loko matlhelo manharhu ya vumba xinkobyana lexi nga na nkoka. Loko swi nga ri tano, ku tlherisela -1 Matlhelo manharhu ya vumba xinkobyana lexi nga na nkoka loko ntsengo wa matlhelo mambirhi wu ri wukulu ku tlula tlhelo ra vunharhu. Xikombiso: xinkobyana_ndzhawu ({3, 4, 5) == 6.00 xinkobyana_ndzhawu ({1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,tso_Latn,python,"
def will_it_fly(q,w):
    '''Tsala ntirho lowu tlherisaka ntiyiso loko xilo xi ta haha, na mavunwa loko swi nga ri tano. Xilo xi ta haha loko xi ringaniseriwile (i nxaxamelo wa palindromic) naswona ntsengo wa swiaki swa xona wu le hansi kumbe ku ringana na ntiko wa le henhla lowu kotekaka w. Xikombiso: swi ta_haha (([1, 2], 5) â -> mavunwa # 1+2 i ntsongo eka ntiko wa le henhla lowu kotekaka, kambe a swi ringaniseriwanga. swi ta_haha (([3, 2, 3], 1) â -> mavunwa # swi ringaniseriwile, kambe 3+2+3 swi tlula ntiko wa le henhla lowu kotekaka. swi ta_haha ((([3, 2, 3], 9) â -> ntiyiso # 3+23 swi le hansi ka ntiko wa le henhla lowu kotekaka, naswona swi ringaniseriwile. swi ta_haha ((([3], â 5) -> ntiyiso # 3 swi le hansi ka ntiko wa le henhla lowu kotekaka, naswona swi ringaniseriwile.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,tso_Latn,python,"
def smallest_change(arr):
    """"""Loko ku ri na ntlhandlamano wa tinomboro leti heleleke, kuma nhlayo ya le hansi ya swiaki leswi faneleke ku cinciwa ku endla ntlhandlamano lowu wu va palindromic. Ntlhandlamano wa palindromic i ntlhandlamano lowu hlayekaka hi ndlela leyi fanaka endzhaku na le mahlweni. Eka ku cinca kun'we, u nga cinca xiaki xin'we eka xiaki xin'wana na xin'wana. Xikombiso: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,tso_Latn,python,"
def total_match(lst1, lst2):
    '''Tsala ntirho lowu amukelaka minxaxamelo mimbirhi ya ti string kutani wu tlherisa nxaxamelo lowu nga na nhlayo ya ti chars eka minxaxamelo hinkwayo ya nxaxamelo lowu nga ehansi ka lowuya wun'wana. loko minxaxamelo mimbirhi yi ri na nhlayo yo fana ya ti chars, tlherisa nxaxamelo wo sungula. Swikombiso total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,tso_Latn,python,"
def is_multiply_prime(a):
    """"""Tsala ntirho lowu tlherisaka ntiyiso loko nomboro leyi nyikiweke yi ri ku andzisiwa ka tinomboro to sungula ta 3 na mavunwa loko swi nga ri tano.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,tso_Latn,python,"
def is_simple_power(x, n):
    """"""Ntirho wa wena i ku tsala ntirho lowu vuyaka ntiyiso loko nomboro x yi ri matimba yo olova ya n na mavunwa eka swiyimo swin'wana. x i matimba yo olova ya n loko n**int=x Xikombiso: is_simple_power(1, 4) => ntiyiso is_simple_power(2, 2) => ntiyiso is_simple_power(8, 2) => ntiyiso is_simple_power(3, 2) => mavunwa is_simple_power(3, 1) mavunwa => matimba ya_simple_power(5, 3) => mavunwa """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,tso_Latn,python,"
def iscube(a):
    '''Tsala ntirho lowu tekaka nhlayo ya ntsandze a kutani wu vuyela eka ntiyiso loko nhlayo leyi yi ri na nhlayo ya ntsandze. Xiya: u nga ha teka leswaku leswi nghenisiweke swi ta va swi ri ntiyiso minkarhi hinkwayo. Swikombiso: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,tso_Latn,python,"
def hex_key(num):
    """"""U komberiwe ku tsala ntirho lowu amukelaka nomboro ya khume-tsevu tanihi nketani naswona wu hlaya nhlayo ya tinomboro ta khume-tsevu leti nga tinomboro to sungula (nomboro yo sungula, kumbe nomboro yo sungula, i nomboro ya ntumbuluko leyi nga ehenhla ka 1 leyi nga humiki eka tinomboro timbirhi letitsongo). Tinomboro ta khume-tsevu i 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Tinomboro to sungula i 2, 3, 5, 7, 11, 13, 17,... Kutani u fanele ku kuma nhlayo ya tinomboro leti landzelaka: 2, 3, 5, 7, B (=nomboro ya khume-tsevu 11), D (=nomboro ya khume-tsevu 13). Xiya: u nga teka leswaku ku nghenisa ka nomboro ku lulamile kumbe ku hava nchumu, naswona mimfungho ya A,B,C,D,E,F yi tshama yi ri eka nketani. Swikombiso: Eka ""num"" = AB, ntsengo wu fanele ku va 1. Eka ""1077E"" ntsengo wu fanele ku va 2. Eka ""num"" = AB331ED, ntsengo wu fanele ku va 4. ""num"" = ABC1234567D, ntsengo wu fanele ku va 6.02020EF. Eka ""num"" ntsengo wu fanele ku va 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,tso_Latn,python,"
def decimal_to_binary(decimal):
    """"""U ta nyikiwa nomboro ya xivumbeko xa decimal naswona ntirho wa wena i ku yi hundzuluxa yi va xivumbeko xa binary. Fambiselo ri fanele ku vuyisela nketani, laha nketani yin'wana na yin'wana yi yimelaka nomboro ya binary. Nketani yin'wana na yin'wana yi ta va '0' kumbe '1'. Ku ta va na nketani ya nketani ya 'db' eku sunguleni na le makumu ka nketani. Tikherefu leti to engetela ti kona ku pfuna hi xivumbeko. Swikombiso: decimal_to_binary ((15) # yi vuyisela ""db1111db"" decimal_to_binary32) # yi vuyisela ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,tso_Latn,python,"
def is_happy(s):
    """"""U nyikiwa string s. Ntirho wa wena i ku kambela loko string yi tsakile kumbe e-e. string yi tsakile loko ku leha ka yona ku ri 3 naswona tinhlanga tinharhu leti landzelanaka ti hambanile Xikombiso: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,tso_Latn,python,"
def numerical_letter_grade(grades):
    """"""I vhiki ro hetelela ra semester naswona mudyondzisi u fanele ku nyika vadyondzi timaraka. Mudyondzisi u endle algorithm ya yena yo nyika timaraka. Xiphiqo hi leswaku u lahlekeriwe hi khodi leyi a yi tirhiseke ku nyika timaraka. U ku nyike nxaxamelo wa ti-GPA ta vadyondzi van'wana naswona u fanele ku tsala fambiselo leri nga humesaka nxaxamelo wa timaraka ta mapapila hi ku tirhisa tafula leri landzelaka: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,tso_Latn,python,"
def prime_length(string):
    """"""Tsala ntirho lowu tekaka string kutani wu vuya na ntiyiso loko ku leha ka string ku ri prime number kumbe mavunwa loko swi nga ri tano Swikombiso prime_length{'hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == Mavunwa """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,tso_Latn,python,"
def starts_one_ends(n):
    """"""Loko ku nyiketiwa ntsengo wa kahle wa n, nyika ntsengo wa tinomboro ta n-digit leti sungulaka kumbe ku hela hi 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,tso_Latn,python,"
def solve(N):
    """"""Loko ku ri na nhlayo leyi nga na N, yi tlherisa ntsengo wa tinomboro ta yona hi binary. Xikombiso Loko N = 1000, ntsengo wa tinomboro wu ta va 1 ntsengo wu ta va ""1"". Loko N = 150, ntsengo wa tinomboro wu ta va 6 ntsengo wu ta va ""110"". Loko N = 147, ntsengo wa tinomboro wu ta va 12 ntsengo wu ta va ""1100"". Swivumbeko: @N integer Swipimelo: 0 â‰¤ N â‰¤ 10000. Ntsengo: ku nga ri na ti binary """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,tso_Latn,python,"
def add(lst):
    """"""Loko ku ri na nxaxamelo wa tinomboro leti nga helelangiki, sungula hi ku hlanganisa ti-element leti nga eka ti-indices leti nga helelangiki. Swikombiso: hlanganisa (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,tso_Latn,python,"
def anti_shuffle(s):
    """"""Tsala ntirho lowu tekaka nketani kutani wu vuyisela nketani leyi nga na swinawana. Nketani leyi nga na swinawana, i nketani leyi marito hinkwawo (lama hambanisiweke hi xivandla) ya siviwaka hi rito rintshwa laha maletere hinkwawo ya nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swinawana leswi nga na swona.""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,tso_Latn,python,"
def get_row(lst, x):
    """"""U nyikiwa 2 dimensional data, tani hi nestsed lists, leyi fanaka na matrix, kambe, ku hambana na matrix, layini yin'wana na yin'wana yi nga va na nhlayo yo hambana ya tikholomu. Loko ku nyiketiwa lst, na integer x, kuma ti integer x eka nxaxamelo, kutani u vuyela na nxaxamelo wa tuples, [(x1, y1), (x2, y2) ...] leswaku tuple yin'wana na yin'wana yi va khodi - (layini, tikholomu), ku sungula hi 0. Hlela khodi eku sunguleni hi tilayini hi ku tlhandluka. Nakambe, hlela khodi ya layini hi tikholomu hi ku ya ehansi. Swikombiso: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0, 0] get_(1), [1] == [[layini]], [1, 2, 3]], [2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,tso_Latn,python,"
def sort_array(array):
    """"""Loko u nyikiwa nxaxamelo wa tinomboro leti nga riki na ti-negative, tlherisa khopi ya nxaxamelo lowu u nyikiweke wona endzhaku ka ku hleriwa, u ta hlunga nxaxamelo lowu u nyikiweke wona hi ku tlhandluka loko ntsengo wa kona (nkoka wo sungula wa xikombo, nkoka wo hetelela wa xikombo) wu nga ri wun'we, kumbe u wu hlunga hi ku ya ehansi loko ntsengo (nkoka wo sungula wa xikombo, nkoka wo hetelela wa xikombo) wu ri wun'we. Xiya: * u nga cinci nxaxamelo lowu u nyikiweke wona. Swikombiso: * sort_array[(]) => [] * sort_array[[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,tso_Latn,python,"
def encrypt(s):
    """"""Tsala mfungho lowu nge encrypt lowu tekaka nketani tanihi nhlokomhaka kutani wu tlherisa nketani leyi nga tsariwa hi ku rhendzelekisa maletere. Maletere ya fanele ku rhendzelekisiwa hi ndlela leyi maletere ya cincaka hi le hansi hi ku andzisiwa hi mambirhi ku ya eka tindhawu timbirhi. Xikombiso: encrypt (('hi') yi tlherisa 'lm' encrypt (('asdfghjkl') yi tlherisa 'ewhjklnop' encrypt (('gf') yi tlherisa 'kj' encrypt (('et') yi tlherisa 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,tso_Latn,python,"
def next_smallest(lst):
    """"""U nyikiwa nxaxamelo wa tinomboro. Tsala ntirho lowu nge next_smallest (() lowu tlherisaka nomboro ya vumbirhi leyitsongo eka nxaxamelo.""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,tso_Latn,python,"
def is_bored(S):
    """"""U ta nyikiwa nxaxamelo wa marito, kutani ntirho wa wena i ku hlayela nhlayo ya marito lama phirhaka. Ku phirha i xivulwa lexi sungulaka hi rito ""I"". Swivulwa swi avanyisiwa hi '.', '?' kumbe '!'. Xikombiso: >>> is_bored(""Hello world"") 0 >>> is_bored(""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,tso_Latn,python,"
def any_int(x, y, z):
    '''Tumbuluxa ntirho lowu tekaka tinomboro tinharhu. Wu ta vuya wu ri ntiyiso loko yin'we ya tinomboro yi ringana na ntsengo wa tin'wana timbirhi, naswona tinomboro hinkwato i tinhlayo leti heleleke. Wu ta vuya wu ri mavunwa eka timhaka tin'wana. Swikombiso any_int{5, 2, 7} â -> True any_int{3, 2, 2} â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,tso_Latn,python,"
def encode(message):
    """"""Tsala ntirho lowu tekaka rungula, kutani wu encode hi ndlela leyi yi cincaka maletere hinkwawo, yi siva switatisi hinkwaswo eka rungula hi letere leri humelelaka eka swivandla swimbirhi emahlweni ka letere rero eka maletere ya Xinghezi.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,tso_Latn,python,"

def skjkasdkd(lst):
    """"""U nyikiwa nxaxamelo wa tinomboro. U fanele ku kuma nhlayo leyikulu ya nkoka wa nkoka kutani u tlherisa ntsengo wa tinomboro ta wona. Swikombiso: Ku lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ntsengo wu fanele ku va 10 Ku lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ntsengo wu fanele ku va 25 Ku lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ntsengo wu fanele ku va 13 Ku lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ntsengo wu fanele ku va 11 Ku lst = [0,81,12,31,21] ntsengo wu fanele ku va 3 Ku lst = [0,1,8,1,2,1,7] ntsengo wu fanele ku va 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,tso_Latn,python,"
def check_dict_case(dict):
    """"""Loko ku ri na xihlamusela marito, vuyela eka True loko swilotlelo hinkwaswo swi ri mintila ya maletere lamatsongo kumbe loko swilotlelo hinkwaswo swi ri mintila ya maletere lamakulu, handle ka swona vuyela eka False. Fungha yi fanele ku vuyela eka False loko xihlamusela marito xi nga ri na nchumu. Swikombiso: check_dict_case{""a"":""apple"", ""b"":""banana""}) yi fanele ku vuyela eka True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) yi fanele ku vuyela eka False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) yi fanele ku vuyela eka False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) yi fanele ku vuyela eka False. check_dict_case{""NC"":""STATE"", ""ZIP"":""12345""} yi fanele ku vuyela eka True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,tso_Latn,python,"
def count_up_to(n):
    """"""Tirhisa ntirho lowu tekaka nhlayo leyi nga riki na ku kayivela ivi wu vuyela na nxaxamelo wa tinhlayo to sungula leti nga na nhlayo ya le hansi ka n. xikombiso: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,tso_Latn,python,"
def multiply(a, b):
    """"""Hlamula xivutiso lexi nga laha henhla hi ku tirhisa xivulwa lexi nge: ""A hi nge u lava ku hlanganisa tinomboro timbirhi leti nga ni nhlayo leyi fanaka, kutani u endla leswaku yi va yi tele hi tinomboro leti fanaka"".""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,tso_Latn,python,"
def count_upper(s):
    """"""Loko ku ri na string s, hlaya nhlayo ya switatisi swa le henhla eka ti-indices leti nga ni ti-pair. Xikombiso: count_upper (('aBCdEf') yi vuya na 1 count_upper (('abcdefg') yi vuya na 0 count_upper (('dBBE') yi vuya na 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,tso_Latn,python,"
def closest_integer(value):
    '''Tsala xivumbeko lexi nga ta teka nkoka (string) lowu yimelaka nomboro kutani yi tlherisa nomboro leyi nga ekusuhi na yona. Loko nomboro yi ringana na nomboro leyi nga ekusuhi na yona, yi rhendzelekise ku suka eka 0 Swikombiso >>> nearest_integer ((""10"") 10 >>> nearest_integer ((""15.3"") 15 Xiya: Ku rhendzelekisiwa ku suka eka 0 swi vula leswaku loko nomboro leyi nga kona yi ringana na nomboro leyi nga ekule na yona, leyi u faneleke ku yi tlherisa hi leyi yi nga ekule na 0 hi ku helela. Xikombiso: nearest_integer "" ((14.5"") yi fanele ku tlherisa 15 na nearest_integer "" ((-14.5"") yi fanele ku tlherisa -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,tso_Latn,python,"
def make_a_pile(n):
    """"""Loko ku ri na nhlayo leyi nga na n, u fanele ku endla nhulu ya maribye ya n. Nhlayo ya maribye eka n ya le henhla i: - nhlayo ya le hansi ya le hansi loko n yi ri ya le hansi. - nhlayo ya le hansi ya le hansi loko n yi ri ya le hansi.""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,tso_Latn,python,"
def words_string(s):
    """"""U ta nyikiwa marito yo hambana hi tikhompyuta kumbe swivandla. Ntirho wa wena i ku hambanisa marito ya marito kutani u tlherisa marito yo hambana. Xikombiso: words_string ((""Hi, vito ra mina i John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,tso_Latn,python,"
def choose_num(x, y):
    """"""Ntirho lowu wu teka tinhlayo timbirhi to khomana x na y kutani wu tlherisa nhlayo ya le henhla swinene leyi nga eka ndzhawu ya [x, y] ku katsa na yona. Loko ku nga ri na nhlayo yo tano, ntirho wu fanele ku tlherisa -1. Xikombiso: hlawula_nomboro ya 12 kumbe ya 15 = 14 hlawula_nomboro ya 13 kumbe ya 12 = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,tso_Latn,python,"
def rounded_avg(n, m):
    """"""U nyikiwa tinhlayo timbirhi to hetiseka n na m, na ntirho wa wena i ku hlayela avhareji ya tinhlayo leti sukelaka eka n ku fika eka m (ku katsa na n na m). Hlanganisa nhlamulo ya wena eka nomboro leyi nga ekusuhi kutani u yi hundzuluxa yi va ya binary. Loko n yi ri nkulu eka m, vuyela eka -1. Xikombiso: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,tso_Latn,python,"
def unique_digits(x):
    """"""Loko ku nyiketiwa nxaxamelo wa tinomboro leti nga na nhlayo x, yi ta tlherisa nxaxamelo wa tinomboro leti nga na nhlayo ya x. Xiya: Nxaxamelo lowu wu tlheriseriweke wu fanele ku hleriwa hi ku tlhandlamana ka wona. Xikombiso: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,tso_Latn,python,"
def by_length(arr):
    """"""Loko u nyikiwe nxaxamelo wa tinomboro leti heleleke, hlawula tinomboro leti nga exikarhi ka 1 na 9 ku katsa, cinca nxaxamelo lowu nga kona, kutani u siva nomboro yin'wana na yin'wana hi vito ra yona leri yelanaka na ""N'we"", ""Mambirhi"", ""Tinharhu"", ""Tinharhu"", ""Tlhanu"", ""Tsevu"", ""Nkombo"", ""Nhungu"", ""Kaye"". Xikombiso: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> hlengeletani arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> hlengeletani arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Nhungu"", ""Tlhanu"", ""Tinharhu"", ""Mambirhi"", ""Mambirhi"", ""N'we"", ""N'we""] Loko nxaxamelo wu nga ri na nchumu, wu tlherise: arr = [] return [] Loko nxaxamelo wu ri na nomboro leyi nga tolovelekangiki, wu honise: arr = [1, 1 , 1-55] -> arr -> [1, 1-55] -> arr -> [55, 1] - return ['One'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,tso_Latn,python,"
def f(n):
    """"""Tirhisa f leyi tekaka n tani hi parameter, kutani yi vuyela nxaxamelo wa mpimo wa n, leswaku nkoka wa element eka index i i factor ya i loko i yi ri yimbirhi kumbe ntsengo wa tinomboro ku suka eka 1 ku ya eka i loko swi nga ri tano. i yi sungula eka 1. factor ya i i ku andzisa tinomboro ku suka eka 1 ku ya eka i (1 * 2 * ... * i). Xikombiso: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,tso_Latn,python,"
def even_odd_palindrome(n):
    """"""Loko ku nyiketiwa nhlayo ya n, vuyisela nhlayo ya ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-palindrome leti nga eka nxaxamelo wa ti-ti-palindrome.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,tso_Latn,python,"
def count_nums(arr):
    """"""Tsala ntirho wa count_nums lowu tekaka nhlayo ya tinomboro kutani wu tlherisa nhlayo ya tinomboro leti nga na ntsengo wa tinomboro > 0. Loko nomboro yi ri na mintila, kutani nomboro ya yona yo sungula yi ta va na mintila: xikombiso -123 yi na mintila leyi nga na mintila -1, 2 na 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,tso_Latn,python,"
def move_one_ball(arr):
    """"""Hi na nxaxamelo wa 'arr' wa tinomboro ta N leti heleleke arr[1], arr[2], ..., arr[N].Tinomboro eka nxaxamelo ti ta rhange hi ndlela leyi nga hlawuriwangiki. Ntirho wa wena i ku vona loko swi koteka ku kuma nxaxamelo lowu hleriweke hi ndlela leyi nga hunguteki hi ku endla ntirho lowu landzelaka eka nxaxamelo lowu nyikiweke: U pfumeleriwile ku endla ntirho wo fambisa ku ya exineneni minkarhi yo tala. Ntirho wun'we wo fambisa ku ya exineneni wu vula ku fambisa swilo hinkwaswo swa nxaxamelo hi ndhawu yin'we eka tlhelo ra xinene. Xiyenge xo hetelela xa nxaxamelo xi ta fambisiwa eka xiyimo xo sungula eka nxaxamelo i. 0th. Loko swi koteka ku kuma nxaxamelo lowu hleriweke hi ku endla ntirho lowu nga laha henhla kutani u vuyela ntiyiso, loko swi nga ri tano vuyela mavunwa. Loko nxaxamelo lowu nyikiweke wu nga ri na nchumu, vuyela ntiyiso.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,tso_Latn,python,"
def exchange(lst1, lst2):
    """"""Eka xiphiqo lexi, u ta tirhisa ntirho lowu tekaka minxaxamelo mimbirhi ya tinomboro, na ku vona loko swi koteka ku endla ku cincana ka swilo exikarhi ka vona ku endla lst1 nxaxamelo wa tinomboro leti nga na yinhla ntsena. Ku hava xipimelo eka nhlayo ya swilo leswi cincaka exikarhi ka lst1 na lst2. Loko swi koteka ku cincana ka swilo exikarhi ka lst1 na lst2 ku endla leswaku swilo hinkwaswo swa lst1 swi va na yinhla, vuyela ""YES"". Loko swi nga ri tano, vuyela ""NO"". Xikombiso: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Ku ehleketiwa leswaku minxaxamelo ya tinomboro a yi nge vi leyi nga hava nchumu. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,tso_Latn,python,"
def histogram(test):
    """"""Loko ku ri na maletere yo tala lama fanaka, tsala hinkwawo. Xikombiso: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4} histogram ' (((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,tso_Latn,python,"
def reverse_delete(s,c):
    """"""Ntirho Hi nyikiwa ti string timbirhi s na c, u fanele ku susa tinhlanga hinkwato eka s leti ringanaka na tinhlanga tin'wana eka c kutani u kambela loko nketani ya mbuyelo yi ri palindrome. Ntila wu vuriwa palindrome loko wu hlaya hi ndlela leyi fanaka endzhaku na le mahlweni. U fanele ku tlherisa tuple leyi nga na nketani ya mbuyelo na True/False ya nkambelo. Xikombiso xa s = ""abcde"", c = ""ae"", mbuyelo wu fanele ku va ('bcd',False) Eka s = ""abcdef"", c = ""b"" mbuyelo wu fanele ku va ('acdef',False) Eka s = ""abcdedcba"", c = ""ab"", mbuyelo wu fanele ku va ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,tso_Latn,python,"
def odd_count(lst):
    """"""Loko u nyikiwa nxaxamelo wa ti string, laha string yin'wana na yin'wana yi nga na tinomboro ntsena, vuyisela nxaxamelo. Xiphemu xin'wana na xin'wana i xa mbuyelo xi fanele ku va ""nhlayo ya ti odd elements eka string i ya input"". laha ti i hinkwato ti faneleke ku siviwa hi nhlayo ya ti odd digits eka i'th string ya input. >>> odd_count['1234567']) [""nhlayo ya ti odd elements 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""nhlayo ya ti odd elements 1n the str1ng 1 of the 1nput."", ""nhlayo ya ti odd elements 8n the str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,tso_Latn,python,"
def minSubArraySum(nums):
    """"""Loko ku ri na nxaxamelo wa tinomboro leti heleleke, kuma ntsengo wa le hansi wa nxaxamelo wa tinomboro lowu nga riki na nchumu. Xikombiso minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,tso_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""U nyikiwa grid ya swihlovo. Nxaxamelo wun'wana na wun'wana wu yimela xihlovo xin'we, naswona 1 eka nxaxamelo wun'wana na wun'wana wu yimela yuniti yin'we ya mati. Xihlovo xin'wana na xin'wana xi na bakiti leri fambelanaka leri nga tirhisiwaka ku humesa mati eka xona, naswona mabaketi hinkwawo ya na vuswikoti lebyi fanaka. Ntirho wa wena i ku tirhisa mabaketi ku humesa swihlovo. Humesa nhlayo ya minkarhi leyi u faneleke ku hunguta mabaketi. Xikombiso1: Nhlayiso: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Nhlayiso: 6 Nhlayiso: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 Nhlayiso: 5 Nhlayiso: [[0,0,0], [0,0]] bucket_capacity: 5 Nhlayiso: 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 2 * 2 * 2 * 3 * 2 * 2 * 2 * 3 * 2 * * 2 * * * * * * * 3 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,tso_Latn,python,"
def sort_array(arr):
    """"""Eka Kata leyi, u fanele ku hlunga nxaxamelo wa tinomboro leti nga riki na ti-negative hi ku landza nhlayo ya ti-ones eka vuyimeri bya tona bya binary hi ku tlhandluka. eka nhlayo leyi fanaka ya ti-ones, hlunga hi ku landza nkoka wa decimal. Yi fanele ku tirhisiwa hi ndlela leyi: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,tso_Latn,python,"
def select_words(s, n):
    """"""Loko u ri na string s na nomboro ya n, u komberiwe ku endla ntirho lowu tlherisaka nxaxamelo wa marito hinkwawo ya string s lama nga na n ya switatisi, leswaku marito lawa ya humelela eka string s. Loko string s yi nga ri na nchumu, kutani ntirho wu fanele ku tlherisa nxaxamelo lowu nga riki na nchumu. Xiya: u nga ha ehleketa leswaku string yo nghenisa yi na maletere na swivandla ntsena. Swikombiso: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,tso_Latn,python,"
def get_closest_vowel(word):
    """"""U nyikiwa rito. Ntirho wa wena i ku kuma ririmirimbe leri nga kusuhi swinene leri nga exikarhi ka switatisi swimbirhi ku suka eka tlhelo ra xinene ra rito (swihlawulekisi swa ntivo-marito). Ririmbe leri nga eku sunguleni na le ku heleni a ri hlayeriwi. Vuyisa ntila lowu nga hava nchumu loko u nga kumanga ririmbe leri nga fikelela xiyimo lexi nga laha henhla. U nga ha ehleketa leswaku ntila lowu nyikiweke wu na maletere ya Xinghezi ntsena. Xikombiso: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,tso_Latn,python,"
def match_parens(lst):
    '''U nyikiwa nxaxamelo wa ti string timbirhi, ti string hatimbirhi ti na swihlanganisi leswi pfulekeke '(' kumbe swihlanganisi leswi pfalekaka ') ' ntsena. Ntirho wa wena i ku kambela loko swi koteka ku hlanganisa ti string timbirhi hi ndlela yin'wana, leswaku string leyi nga ta va kona yi ta va yinene. Nxaxamelo wa S wu tekiwa wu ri wunene loko na ntsena loko swihlanganisi hinkwaswo eka S swi ringanile. Xikombiso: string '((())' yi ri yinene, kasi string '())' a yi ri yinene. Vuya na 'Yes' loko ku ri na ndlela yo endla string leyinene, kutani u vuya na 'No' loko swi nga ri tano. Swikombiso: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,tso_Latn,python,"
def maximum(arr, k):
    """"""Xikombiso1: Ku nghenisa: arr = [-3, -4, 5], k = 3 Ku humela: [-4, -3, 5] Xikombiso2: Ku nghenisa: arr = [4, -4, 4], k = 2 Ku humela: [4, 4] Xikombiso3: Ku nghenisa: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Ku humela: [2] Xiya: 1. Ku leha ka nxaxamelo ku ta va eka [1, 1000]. 2. Swiaki eka nxaxamelo swi ta va eka [-1000, 1000]. 3. 0 <= k <= len (arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,tso_Latn,python,"
def solution(lst):
    """"""Loko ku nyiketiwa nxaxamelo wa tinhlayo leti nga helelangiki, tlherisa ntsengo wa ti-elemenete hinkwato leti nga eka swiyimo leswi fanaka. Xikombiso xa xitshunxo (([5, 8, 7, 1]) ==> 12 xitshunxo (([3, 3, 3, 3]) ==> 9 xitshunxo (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,tso_Latn,python,"
def add_elements(arr, k):
    """"""Loko ku ri na ntlhandlamano wa tinomboro leti nga riki na nchumu arr na nomboro leyi heleleke k, tlherisa ntsengo wa tinomboro leti nga na tidigiti timbirhi eka tinomboro to sungula ta arr. Xikombiso: Nhlayo ya tinomboro leti nghenaka: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Nhlayo ya tinomboro leti humaka: 24 # ntsengo wa 21 + 3 Swipimelo: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,tso_Latn,python,"
def get_odd_collatz(n):
    """"""Loko ku nyiketiwa nhlayo ya n, vuyisela nxaxamelo lowu hleriweke lowu nga na tinomboro leti nga hleriwangiki hi ku landzelana ka collatz. Nhlayo ya Collatz i ntsengo wa tinhlayo lowu khumbaka ntlhandlamano lowu hlamuseriweke hi ndlela leyi: sungula hi nhlayo ya n. Kutani n'we-n'we wu kumiwa eka n'we-n'we lowu hundzeke hi ndlela leyi: loko n'we-n'we lowu hundzeke wu ri na mbirhi, n'we-n'we lowu landzelaka wu ta va hafu ya n'we-n'we lowu hundzeke. Loko n'we-n'we lowu hundzeke wu nga ri na mbirhi, n'we-n'we lowu landzelaka wu ta va wu andzisiwe hi 3 ku engetelela 1. Nhlayo ya n, ku nga khathariseki leswaku i n'we-n'we, ntlhandlamano wu ta fika eka 1. Xiya: 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,tso_Latn,python,"
def valid_date(date):
    """"""U fanele ku tsala ntirho lowu tiyisisaka nketani ya masiku kutani wu vuyela ntiyiso loko siku ri ri ntiyiso handle ka swona ri ta va mavunwa. Siku ri ta va ntiyiso loko milawu hinkwayo leyi landzelaka yi landzeleriwile: 1. Nketani ya masiku a yi na nchumu. 2. Nhlayo ya masiku a yi nge vi ehansi ka 1 kumbe ehenhla ka 31 eka tin'hweti ta 1,3,5,7,8,10,12. Naswona nhlayo ya masiku a yi nge vi ehansi ka 1 kumbe ehenhla ka 30 eka tin'hweti ta 4,6,9,11. Naswona, nhlayo ya masiku a yi nge vi ehansi ka 1 kumbe ehenhla ka 29 eka n'hweti ya 2. 3. Tin'hweti a ti fanelanga ku va ehansi ka 1 kumbe ehenhla ka 12. 4. Siku ri fanele ri va hi xivumbeko xa: mm-dd-yyyy hi xikombiso: valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-02040') => false_date ((('06-04-2020') => true_date (('06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,tso_Latn,python,"
def split_words(txt):
    '''Loko ku ri na marito, tlherisa nxaxamelo wa marito lama avanyisiweke hi swiphemu, loko ku nga ri na swiphemu eka tsalwa u fanele ku avanyisiwa hi tikhompyuta ',' loko ku nga ri na tikhompyuta u fanele ku tlherisa nhlayo ya maletere ya maletere lamatsongo hi nxaxamelo wa wona eka alfabeti, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Swikombiso split_words(""Hello world!"") â -> [""Hello"", ""world!""] split_words(""Hello,world!"") â -> [""Hello"", ""world!"" split_words(""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,tso_Latn,python,"
def is_sorted(lst):
    '''Loko ku ri na nxaxamelo wa tinomboro, vuyela loko ti hleriwe hi ku tlhandluka. Loko nxaxamelo wu ri na ku tlula 1 wa ti-duplicate ta nomboro yin'we, vuyela False. A ku na tinomboro leti nga riki na ti-negative naswona ku na ti-integer ntsena. Swikombiso is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,tso_Latn,python,"
def intersection(interval1, interval2):
    """"""U nyikiwa nkarhi wa le xikarhi, laha nkarhi wun'wana na wun'wana wu nga mpatswa wa tinhlayo to hetiseka. Xikombiso, nkarhi wa le xikarhi = (masungulo, makumu) = (1, 2). Nkarhi lowu nyikiweke wu pfalekile leswi vulaka leswaku nkarhi wa le xikarhi (masungulo, makumu) wu katsa masungulo na makumu. Eka nkarhi wun'wana na wun'wana lowu nyikiweke, ku ehleketiwa leswaku masungulo ya wona ma le hansi kumbe ya ringana ni makumu ya wona. Ntirho wa wena i ku tiva loko ku leha ka ku tsemakanya ka nkarhi lowu wa le xikarhi ku ri nomboro yo sungula. Xikombiso, ku tsemakanya ka nkarhi wa le xikarhi (1, 3), (2, 4) i (2, 3) laha ku leha ka kona ku nga 1, leswi nga riki nomboro yo sungula. Loko ku leha ka ku tsemakanya ku ri nomboro yo sungula, tlherisa ""YES"", loko swi nga ri tano, tlherisa ""NO"". Loko nkarhi lowu wu nga tsemakanyani, tlherisa ""NO"". [input/output] samples: intersection (((1, 2), (2, 3) ==> ""intersection ((-1, 1) ""NO"") === (0, 4) ""intersection (NO) ""= 5"", - (((1, 5), ""YES (<-"", -))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,tso_Latn,python,"
def prod_signs(arr):
    """"""U nyikiwa nxaxamelo wa tinomboro naswona u fanele ku tlherisa ntsengo wa tinomboro leti andzisiweke hi xandlan'wana xa tinomboro hinkwato eka nxaxamelo, leti yimeriwaka hi 1, -1 kumbe 0. Xiya: u tlherisa None eka nxaxamelo lowu nga hava nchumu. Xikombiso: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,tso_Latn,python,"
def minPath(grid, k):
    """"""Loko u ri na grid leyi nga na tilayini ta N na tikholomu ta N (N >= 2) na ti-integer to tala ta k, sele yin'wana na yin'wana ya grid yi na nkoka. Nhlayo yin'wana na yin'wana leyi nga eka [1, N * N] yi humelela kan'we eka tisele ta grid. U fanele ku kuma ndlela ya le hansi ya ku leha ka k eka grid. U nga sungula eka sele yin'wana na yin'wana, naswona eka goza rin'wana na rin'wana u nga ya eka tisele leti nga ekusuhi, hi marito man'wana, u nga ya eka tisele leti nga na makumu ya sele ya wena ya sweswi. Xiya leswaku ndlela ya ku leha ka k yi vula ku endzela tisele ta k (a hi minkarhi hinkwayo ti hambanaka). A WU NGA SUKI u huma eka grid. Ndlela ya A (ya ku leha ka k) yi tekiwa yi ri yintsongo ku tlula ndlela ya B (ya ku leha ka k) loko endzhaku ko endla nxaxamelo wa tihakelo ta tihakelo eka tisele leti A na B ti hundzaka eka tona (a hi ti vitane hi l_st na l_stA_st), lexically yi ri yintsongo ku tlula l_stA, hi ku ya lexicographically yi ri ehansi ku tlula l_stB_st, hi marito man'wana, endlelo rin'wana, u nga hundzela eka tisele leti nga na wena ta sele ya sweswi. U nga sungula eka sele yin'wana na yin'wana, hi marito man'wana, u nga hundzela eka tisele leti nga na yin'wana na yin'wana. Hi marito man'wana, u nga hundzela eka tisele leti nga na tihakelo ta sele yin'wana na yin'wana leti nga na makumu ya kona, u nga na makumu ya kona eka sele ya kona. Ku leha ku ya kona, u nga hundzela eka sele ya kona, u nga ha endzanyana na tihakela ku ya kona, u nga ha ri na tihakela ku ya kona, u nga ha: [1, u nga ha] [4, u, u=1, u=1, u=1, u=1, u=1, u=1, u=1, u=2, u=4, u=1, u=1, u=1, u=2, u=1, u=2, u=2, u=1, u=""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,tso_Latn,python,"
def tri(n):
    """"""Hinkwavo va tiva ntlhandlamano wa Fibonacci, wu dyondziwe hi vuenti hi van'watimatiki eka malembe-xidzana mambirhi lama hundzeke. Hambiswiritano, leswi vanhu va nga swi tiviki i ntlhandlamano wa Tribonacci. Nxaxamelo wa Tribonacci wu hlamuseriwa hi ku phindha-phindha: tri(1) = 3 tri(n) = 1 + n / 2, loko n yi ri yimbirhi. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), loko n yi nga ri yimbirhi. Xikombiso: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 U nyikiwa nomboro leyi nga riki na ti-negative, u fanele ku tlherisa nxaxamelo wa tinomboro to sungula ta n + 1 ta ntlhandlamano wa Tribonacci. Xikombiso: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,tso_Latn,python,"
def digits(n):
    """"""Loko ku ri na nhlayo ya n, yi ta tlherisa nhlayo ya ti-digit leti nga riki na nhlayo. Yi ta tlherisa 0 loko ti-digit hinkwato ti ri na nhlayo ya ti-digit. Xikombiso: ti-digit{}1) == 1 ti-digit{}4) == 0 ti-digit{}235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,tso_Latn,python,"
def is_nested(string):
    '''Tumbuluxa ntirho lowu tekaka nketani tanihi vuenti lebyi nga na swirhengele swa swikwere ntsena. Ntirho wu fanele ku vuyela eka ntiyiso loko ku ri na ku landzelana ka swirhengele laha ku nga na swirhengele swin'wana eka ntlhandlamano.'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,tso_Latn,python,"

def sum_squares(lst):
    """"""U nyikiwa nxaxamelo wa tinomboro. U fanele ku tlherisa ntsengo wa tinomboro leti nga eka xikwere eka nxaxamelo lowu nyikiweke, u rhendzelekisa xilo xin'wana na xin'wana eka nxaxamelo ku fika eka ntsengo wa le henhla. Swikombiso: Ku lst = [1,2,3] mbuyelo wu fanele ku va 14 Ku lst = [1,4,9] mbuyelo wu fanele ku va 98 Ku lst = [1,3,5,7] mbuyelo wu fanele ku va 84 Ku lst = [1.4,4.2,0] mbuyelo wu fanele ku va 29 Ku lst = [-2.4,1,1] mbuyelo wu fanele ku va 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,tso_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Tsala xivulwa lexi tlherisaka ntiyiso loko xirhangi xo hetelela xa nketani xi ri xirhangi xa maletere naswona xi nga ri xiphemu xa rito, na mavunwa loko swi nga ri tano. Xiya: ""rito"" i ntlawa wa swirhangi leswi hambanisiweke hi xivandla. Swikombiso: check_if_last_char_is_a_letter (((""apple pie"") â -> False check_if_last_char_is_a_letter (((apple pi e"") â -> True check_if_last_char_is_a_letter (((apple pi e "") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,tso_Latn,python,"
def can_arrange(arr):
    """"""Tumbuluxa ntirho lowu tlherisaka xikombo lexikulu xa element leyi nga kulangi kumbe ku ringana na element leyi yi yi rhangeleke. Loko ku nga ri na element yo tano yi ta vuya -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,tso_Latn,python,"
def largest_smallest_integers(lst):
    '''Tumbuluxa ntirho lowu tlherisaka nhlayo ya (a, b), laha 'a' ku nga nhlayo leyikulu ya nhlayo leyi nga riki na nkoka, naswona 'b' i nhlayo leyitsongo ya nhlayo leyi nga na nkoka. Loko ku nga ri na nhlayo leyi nga riki na nkoka kumbe leyi nga na nkoka, yi tlherise tanihi None. Swikombiso: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,tso_Latn,python,"
def compare_one(a, b):
    """"""Tsala xivumbeko lexi nga ta teka tinomboro leti heleleke, leti nga ni tilayini kumbe tilayini leti yimelaka tinomboro ta xiviri, kutani u tlherisela tilayini letikulu eka muxaka wa tona lowu nga kona. Loko tilayini ti ringana, a ku tlheriseriwi tilayini.""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,tso_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Hlela loko nomboro leyi nyikiweke n yi nga tsariwa tanihi ntsengo wa tinomboro ta mune leti nga na nhlayo ya mune leti nga na nhlayo ya mune. Xikombiso i_ku ringana_na ntsengo wa mune (even) Xikombiso i_ku ringana_na ntsengo wa mune (even) Xikombiso i_ku ringana_na ntsengo wa mune (even) Xikombiso i_ku ringana_na ntsengo wa mune (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even) Xikombiso i_ku ringana_na ntsengo wa nhungu (even)""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,tso_Latn,python,"
def special_factorial(n):
    """"""Xiphato xa Brazil xi hlamuseriwa hi ndlela leyi: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! laha n > 0 Xikombiso: >>> special_factorial(4) 288 Fambiselo ri ta amukela nomboro hinkwayo tanihi input naswona ri fanele ku tlherisela factor ya nkoka ya nomboro leyi. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,tso_Latn,python,"
def fix_spaces(text):
    """"""_Xikombiso-3ntila wa tsalwa, siva swivandla hinkwaswo hi ku tsala ehansi, naswona loko ntila wu ri na swivandla swo tlula 2 leswi landzelelanaka, siva swivandla hinkwaswo leswi landzelelanaka hi - fix_spaces ((""Xikombiso"") == ""Xikombiso"" fix_spaces ((""Xikombiso1"") == ""Xikombiso1"" fix_spaces ((""Xikombiso2"") == ""Xikombiso2"" fix_spaces ((""Xikombiso 3"") == ""Xikombiso-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,tso_Latn,python,"
def file_name_check(file_name):
    """"""Tumbuluxa ntirho lowu tekaka nketani leyi yimelaka vito ra fayili, kutani wu tlherisa 'Ina' loko vito ra fayili ri ri ra ntiyiso, kutani wu tlherisa 'E-e' loko swi nga ri tano. Vito ra fayili ri tekiwa ri ri ra ntiyiso loko na ntsena loko swiyimo leswi landzelaka hinkwaswo swi fikeleriwile: - A ku fanelanga ku va na tinomboro to tlula tinharhu ('0'-'9') eka vito ra fayili. - Vito ra fayili ri na 'dot' yin'we. - Nxaxamelo wa le hansi ka dot a wu fanelanga ku va na nchumu, naswona wu fanele ku sungula hi letere ra le Latin alphapet ('a'-'z' na 'A'-Z'). - Nxaxamelo wa le hansi ka dot wu fanele ku va wun'wana wa lowu landzelaka: ['txt', 'exe', 'lld'] Swikombiso: file_name_check""{example.txt.t"") # => 'Ina' file_name_check""{example.dll1} => 'E-e' (vito ri fanele ku sungula hi letere ra le Latin alphapet) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,tso_Latn,python,"


def sum_squares(lst):
    """""""" Ntirho lowu wu ta teka nxaxamelo wa tinomboro. Eka hinkwaswo leswi nghenisiweke eka nxaxamelo, ntirho wu ta endla leswaku ku va na nomboro leyi nga eka nxaxamelo loko xikombo xa yona xi ri xilo xo tala xa 3 naswona wu ta endla leswaku ku va na nomboro leyi nga eka nxaxamelo loko xikombo xa yona xi ri xilo xo tala xa 4 naswona ku nga ri xilo xo tala xa 3. Ntirho a wu nge cinci swilo leswi nghenisiweke eka nxaxamelo leswi swikombo swa swona swi nga riki xilo xo tala xa 3 kumbe 4. Ntirho wu ta tlhela wu tlherisa ntsengo wa swilo hinkwaswo leswi nghenisiweke. Swikombiso: Ku lst = [1,2,3] mbuyelo wu fanele ku va 6 Ku lst = [] mbuyelo wu fanele ku va 0 Ku lst = [-1,-5,2,-1,-5] mbuyelo wu fanele ku va -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,tso_Latn,python,"
def words_in_sentence(sentence):
    """"""U nyikiwa string leyi yimelaka xivulwa, xivulwa xi na marito yo hambana hi xivandla, naswona u fanele ku tlherisa string leyi nga na marito ya xivulwa xo sungula, lawa ku leha ka wona ku nga tinomboro to sungula, nxaxamelo wa marito eka string leyintshwa wu fanele ku fana na lowo sungula. Xikombiso1: Ku nghenisa: xivulwa = ""Lexi i xikambelo"" Ku humela: ""i"" Xikombiso2: Ku nghenisa: xivulwa = ""a hi ye eku hlambeleni"" Ku humela: ""a hi ye eku hlambeleni"" Swipimelo: * 1 <= len(xivulwa) <= 100 * xivulwa xi na maletere ntsena """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,tso_Latn,python,"
def simplify(x, n):
    """"""Ntirho wa wena i ku endla ntirho lowu nga ta olovisa xivulwa x * n. Ntirho lowu wu ta vuyela eka ntiyiso loko x * n yi ri nhlayo hinkwayo naswona wu ta vuyela eka mavunwa loko swi nga ri tano. X na n, i mintila ya ku yimela ka ku avanyisa, naswona swi na xivumbeko lexi landzelaka, <nomboro>/<nomboro> laha nomboro na nomboro swi nga tinomboro hinkwato leti nga na nkoka. U nga ha ehleketa leswaku x na n i swiphemu leswi nga na nkoka, naswona a swi na na na na nomboro ya ziro. olovisa ""1/5"", ""5/1"") = Ntiyiso olovisa ""1/6"", ""2/1"") = mavunwa olovisa ""7/10"", ""10/2"") = mavunwa """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,tso_Latn,python,"
def order_by_points(nums):
    """"""Tsala ntirho lowu hlengeletaka nxaxamelo wa tinomboro leti nga kona hi ku tlhandluka hi ku ya hi ntsengo wa tinomboro ta tona. Xiya: loko ku ri na tinomboro to tala leti nga ni ntsengo lowu fanaka wa tinomboro ta tona, ti hlele hi ku ya hi nxaxamelo wa tona wa le ku sunguleni. Xikombiso: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,tso_Latn,python,"
def specialFilter(nums):
    """"""Tsala ntirho lowu tekaka nhlayo ya tinomboro tani hi input kutani wu tlherisa nhlayo ya swilo eka nxaxamelo lowu nga henhla ka 10 naswona tinomboro to sungula na to hetelela ta nomboro ti nga talangi (1, 3, 5, 7, 9). Xikombiso: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,tso_Latn,python,"
def get_max_triples(n):
    """"""U nyikiwa nhlayo yo hetiseka ya n. U fanele ku endla nxaxamelo wa tinhlayo to hetiseka ta ku leha ka n. Eka i yin'wana na yin'wana (1 â‰¤ i â‰¤ n), nkoka wa a[i] = i * i - i + 1. Vika nhlayo ya ti-triple (a[i], a[j], a[k]) ta a laha i < j < k, na a[i] + a[j] + a[k] i swiphemu swa 3. Xikombiso: Nhlayo ya ku nghenisa: n = 5 Nhlayo ya ku humesela: 1 Nhlamuselo: a = [1, 3, 7, 13, 21] Nhlayo ya ku va na ti-triple yi nga va (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,tso_Latn,python,"
def bf(planet1, planet2):
    '''Ku na tipulanete ta nhungu eka dyambu ra hina: leyi nga kusuhi na dyambu i Mercury, leyi landzelaka i Venus, kutani ku landzela Misava, Mars, Jupiter, Saturn, Uranus, Neptune. Tsala ntirho lowu tekaka mavito ya tipulanete timbirhi tanihi mintila planet1 na planet2. Ntirho wu fanele ku vuyela na tuple leyi nga na tipulanete hinkwato leti ti rhendzelekaka leti nga exikarhi ka orbit ya planet1 na orbit ya planet2, ti hleriwe hi ku va ekusuhi na dyambu. Ntirho wu fanele ku vuyela na tuple leyi nga hava nchumu loko planet1 kumbe planet2 ku nga ri mavito ya tipulanete lama faneleke. Swikombiso bf""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf(""Earth"", ""Mercury"") ==> (""Venus"") bf""(Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,tso_Latn,python,"
def sorted_list_sum(lst):
    """"""Tsala ntirho lowu amukelaka nxaxamelo wa ti string tani hi parameter, wu susa ti string leti nga na ku leha loku nga ringaniki, kutani wu tlherisa nxaxamelo lowu nga kona hi nxaxamelo lowu hleriweke, Nxaxamelo lowu wu tshama wu ri nxaxamelo wa ti string naswona a wu na nxaxamelo wa tinomboro, naswona wu nga va na ti duplicates. Nxaxamelo wa nxaxamelo wu fanele ku tlakuka hi ku leha ka rito rin'wana na rin'wana, naswona u fanele ku tlherisa nxaxamelo lowu hleriweke hi nawu wolowo. Loko marito mambirhi ya ri na ku leha loku fanaka, hlantswa nxaxamelo hi ku landza maletere. Ntirho wu fanele ku tlherisa nxaxamelo wa ti string hi nxaxamelo lowu hleriweke. U nga ha ehleketa leswaku marito hinkwawo ya ta va na ku leha loku fanaka. Xikombiso: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,tso_Latn,python,"
def x_or_y(n, x, y):
    """"""Nongonoko wo olova lowu faneleke ku vuyisela nkoka wa x loko n ri nhlayo yo sungula naswona wu fanele ku vuyisela nkoka wa y loko swi nga ri tano. Swikombiso: eka x_or_y{7, 34, 12) == 34 eka x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,tso_Latn,python,"
def double_the_difference(lst):
    '''Loko u nyikiwa nxaxamelo wa tinomboro, tlherisa ntsengo wa ti kwadara ta tinomboro leti nga eka nxaxamelo leti nga riki na nhlayo. U nga languti tinomboro leti nga riki na nhlayo kumbe leti nga riki tinhlayo leti heleleke. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Loko nxaxamelo wa tinomboro wu nga ri na nchumu, tlherisa 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,tso_Latn,python,"
def compare(game,guess):
    """"""Ndzi ehleketa leswaku hinkwerhu ha tsundzuka leswaku loko mbuyelo wa xiendlakalo lexi a xi rindzeriwile wu tiviwa. Mintlhaveko na miehleketo leyi u nga na yona hi nkarhi wolowo swa fanela ku swi tsala ehansi no swi pimanisa. Ntirho wa wena i ku vona loko munhu a ehlekete mbuyelo wa nhlayo ya mintlangu hi ndlela leyi faneleke. U nyikiwa mihlanganiso mimbirhi ya minxavo na ku ehleketelela ka ku leha ko ringana, laha xikombo xin'wana na xin'wana xi kombisaka ku yelana. Vuya na nxaxamelo wa ku leha loku fanaka ku kombisa leswaku ku ehleketelela kun'wana a ku ri kule ku fikela kwihi. Loko va ehlekete kahle, nkoka i 0, naswona loko swi nga ri tano, nkoka i ku hambana loku heleleke exikarhi ka ku ehleketelela na mbuyelo. xikombiso: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,2,4]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,tso_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""U ta nyikiwa vito ra ntlawa (nxaxamelo) na nxaxamelo wa swandzisiso. Swandzisiso swi ta tirhisiwa ku nghenisa swandzisiso swin'wana eka ntlawa. Matimba ya ndlandlamuxo ya fana na lawa: A ku ve CAP ku va nhlayo ya maletere lamakulu eka vito ra ndlandlamuxo, naswona a ku ve SM ku va nhlayo ya maletere lamatsongo eka vito ra ndlandlamuxo, matimba ya nyikiwa hi ku avanyisiwa ka CAP - SM. U fanele ku kuma ndlandlamuxo wa matimba kutani u tlherisa nxanxamelo hi xivumbeko lexi: ClassName.StrongestExtensionName. Loko ku ri na swandzisiso swimbirhi kumbe ku tlula leswi nga ni matimba yo fana, u fanele ku hlawula lexi xi nga xo sungula eka nxaxamelo. Xikombiso, loko u nyikiwa ""Slices"" tanihi ntlawa na nxaxamelo wa swandzisiso: ['SEviviSliNGCes', 'Cheese', 'StufedF'] kutani u fanele ku tlherisa 'Slices.SEviSliNGCes' tanihi leswi 'SEviSliNGCes' ku nga ndlandlamuxo wa mina, matimba ya nyikeriwa hi ku va xiphemu xa CAP - SM. U fanele ku kuma ndlandlamuxo wa ndlandlamuxo wa ndlandlamuxi lowu nga na matimba kutani u tlherisa ndlandlamuxi ndlandlamuxo wa ndlandlamuxo eka ntlawa.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,tso_Latn,python,"
def cycpattern_check(a , b):
    """"""U nyikiwa marito mambirhi. U fanele ku tlherisela ntiyiso loko rito ra vumbirhi kumbe rin'wana ra ku rhendzelekisiwa ka rona ri ri riengeteri eka rito ro sungula cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,tso_Latn,python,"
def even_odd_count(num):
    """"""Loko ku nyiketiwa integer. yi tlherisa tuple leyi nga na nhlayo ya tinomboro leti nga ringanaka na leti nga ringanaka. Xikombiso: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,tso_Latn,python,"
def int_to_mini_roman(number):
    """"""Loko ku nyiketiwa nomboro leyi nga na nkoka, kuma nomboro ya yona ya Xirhoma tanihi nketani, kutani u yi tlherisa hi maletere lamatsongo. Swipimelo: 1 <= num <= 1000 Swikombiso: >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,tso_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Ku nyiketiwa ku leha ka matlhelo manharhu ya xinkobyana. Yiva ntiyiso loko matlhelo manharhu ya endla xinkobyana xa xikwere, mavunwa loko swi nga ri tano. Xinkobyana xa xinkobyana i xinkobyana lexi yinhla yin'we yi nga xinkobyana kumbe 90 degrees. Xikombiso: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,tso_Latn,python,"
def find_max(words):
    """"""Tsala ntirho lowu amukelaka nxaxamelo wa mintila. Nxaxamelo wu na marito yo hambana. Vuyisa rito leri nga na nhlayo ya le henhla ya maletere yo hlawuleka. Loko mintila yo tala yi ri na nhlayo ya le henhla ya maletere yo hlawuleka, vuyisela leri ri nga ta sungula hi nxaxamelo wa lexicographical.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,tso_Latn,python,"
def eat(number, need, remaining):
    """"""U mpfundla wo twa ndlala, naswona se u dyile nhlayo yo karhi ya tikherotsi, kambe sweswi u fanele ku dya tikherotsi to tala ku hetisa swakudya swa siku. u fanele ku tlherisa nhlayo ya [nhlayo ya tikherotsi leti dyiweke endzhaku ka swakudya swa wena, nhlayo ya tikherotsi leti saleke endzhaku ka swakudya swa wena ] loko ku nga ri na tikherotsi to tala leti saleke, u ta dya tikherotsi hinkwato leti saleke, kambe u ta tama u twa ndlala. Xikombiso: * dya ((5, 6, 10) -> [11, 4] * dya ((4, 8, 9) -> [12, 1] * dya ((1, 10, 10) -> [11, 0] * dya ((2, 11, 5) -> [7, 0] Swivumbeko: @nomboro: ntsengo wa tikherotsi leti u ti dyeke. @nomboro ya tikherotsi leti u faneleke ku ti dya. @nomboro ya tikherotsi leti saleke: ntsengo wa tikherotsi leti saleke eka nkwama wa tikherotsi: * Nomboro ya nkani= 0 = <= 0 * <= 1000 * 0 = <= 1000""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,tso_Latn,python,"
def do_algebra(operator, operand):
    """"""Ku nyiketiwa nxaxamelo wa tioperator na tioperand. Nxaxamelo wo sungula wu na mintirho ya algebra ya masungulo, na nxaxamelo wa vumbirhi i nxaxamelo wa tinhlayo leti heleleke. Tirhisa nxaxamelo lowu wu nyiketiweke ku aka xivulwa xa algebra na ku vuyisela nhlelelo wa xivulwa lexi. Mintirho ya algebra ya masungulo: Ku engetela (+) Ku hunguta (-)) Ku andzisa (*) Ku avanyisa (//) Ku andzisa (**) Xikombiso: operator['+', '*', '-'] array = [2, 3, 4, 5] vuyelo = 2 + 3 * 4 - 5 => vuyelo = 9 Xiya: Ku leha ka nxaxamelo wa tioperator ku ringana na ku leha ka nxaxamelo wa tioperand ku susiwa yin'we. Tioperand i nxaxamelo wa tinhlayo leti nga riki na tiperand. Operator yi na nxaxamelo wa tioperator wun'we, naswona nxaxamelo wa tioperand wu na tioperand timbirhi. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,tso_Latn,python,"
def solve(s):
    """"""U nyikiwa string s. loko s[i] ri ri na letere, cinca khasi ra rona ku suka ehansi ku ya ehenhla kumbe vice versa, loko swi nga ri tano ri hlayise ri ri tano. Loko string yi ri hava maletere, cinca string. Fungha yi fanele ku vuyisela string leyi nga kona. Swikombiso solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,tso_Latn,python,"
def string_to_md5(text):
    """"""Loko ku ri na 'text' yi ri na string, yi tlherise yi ri na md5 hash equivalent string. Loko 'text' yi ri na string leyi nga riki na nchumu, yi tlherise None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,tso_Latn,python,"
def generate_integers(a, b):
    """"""Loko ku ri na tinhlayo timbirhi to hetiseka a na b, tlherisa tinhlayo leti nga exikarhi ka a na b, hi ku tlhandluka. Xikombiso: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
