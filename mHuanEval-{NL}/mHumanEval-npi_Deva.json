[
    {
        "task_id": "HumanEval/0",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"यदि दिइएको संख्याहरूको सूचीमा, दिइएको थ्रेसहोल्ड भन्दा कुनै दुई नम्बरहरू एक अर्कासँग नजिक छन् भने जाँच गर्नुहोस्। उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) गलत >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) सही \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"यो प्रकार्यको इनपुट एउटा स्ट्रिङ हो जसमा नेस्टेड कोष्ठकहरूको बहु समूहहरू छन्। तपाईँको लक्ष्य ती समूहहरूलाई अलग-अलग स्ट्रिङहरूमा अलग गर्नु र ती सूची फर्काउनु हो। अलग-अलग समूहहरू सन्तुलित छन् (प्रत्येक खुला कोष्ठक राम्ररी बन्द छ) र एक अर्का भित्र नेस्टेड छैनन्। इनपुट स्ट्रिङमा कुनै पनि खाली स्थानहरूलाई बेवास्ता गर्नुहोस्। उदाहरणः >>> separate_paren_groups'(()) (() (()))))))) ['() ', '(()) ', '((() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"सकारात्मक फ्लोटिंग प्वाइन्ट नम्बर दिइएको छ, यसलाई पूर्णांक भाग (दिइएको संख्या भन्दा ठूलो पूर्णांक) र दशमलव (बाँकी भाग सधैं १ भन्दा सानो) मा विघटन गर्न सकिन्छ। संख्याको दशमलव भाग फिर्ता गर्नुहोस्। उदाहरणः >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"तपाईँलाई बैंक खातामा जम्मा गर्ने र निकाल्ने कार्यहरूको सूची दिइएको छ जुन शून्य ब्यालेन्सबाट सुरु हुन्छ। तपाईँको कार्य भनेको कुनै पनि बिन्दुमा खाताको ब्यालेन्स शून्यभन्दा तल झर्छ भने पत्ता लगाउनु हो, र त्यस बिन्दुमा फंक्शनले True फर्काउनुपर्छ। अन्यथा यसले False फर्काउनुपर्छ। उदाहरणः >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"इनपुट नम्बरहरूको दिइएको सूचीको लागि, यस डाटासेटको औसतको वरिपरि औसत निरपेक्ष विचलन गणना गर्नुहोस्। औसत निरपेक्ष विचलन प्रत्येक तत्व र केन्द्रबिन्दु बीचको औसत निरपेक्ष भिन्नता हो (यस अवस्थामा औसत): MAD = औसत । x - x_mean । उदाहरणः >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) १.० \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"इनपुट सूचीको प्रत्येक दुई लगातार तत्वहरू बीच एउटा नम्बर 'डिलिमिटर' घुसाउनुहोस् `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"यो प्रकार्यको इनपुट एउटा स्ट्रिङ हो जुन अन्तरिक्षद्वारा अलग गरिएका कण्ठस्थ कण्ठस्थहरूको लागि बहु समूहहरूको प्रतिनिधित्व गर्दछ। प्रत्येक समूहको लागि, कण्ठस्थहरूको घोंसलेको सबैभन्दा गहिरो स्तर आउटपुट गर्नुहोस्। उदाहरणका लागि (() (()) को घोंसलेको अधिकतम दुई स्तरहरू छन् जबकि ((())) को तीन छ। >>> parse_nested_parens('((()) ((())) () ((()) ((()))) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"एउटा इनपुट सूचीमा दिइएको सबस्ट्रिंगको लागि मात्र फिल्टर गर्नुहोस् >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"पूर्णांकहरूको दिइएको सूचीको लागि, एक सूचीमा सबै पूर्णांकहरूको योग र एक उत्पाद समावेश भएको टपल फर्काउनुहोस्। खाली योग ० बराबर हुनुपर्दछ र खाली उत्पाद १ बराबर हुनुपर्दछ। >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) ।\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांकहरूको दिइएको सूचीबाट, अनुक्रममा दिइएको क्षण सम्म भेटिएको रोलिंग अधिकतम तत्वहरूको सूची उत्पन्न गर्नुहोस्। >>> रोलिंग_मैक्स (([१, २, ३, २, ३, ४, २]) [१, २, ३, ३, ४, ४] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"पालिन्ड्रोमको सबैभन्दा छोटो पालिन्ड्रोम खोज्नुहोस् जुन दिइएको स्ट्रिङबाट सुरु हुन्छ। एल्गोरिथ्म विचार सरल छः - दिइएको स्ट्रिङको सबैभन्दा लामो पोस्टफिक्स खोज्नुहोस् जुन पालिन्ड्रोम हो। - स्ट्रिङको अन्त्यमा स्ट्रिङ प्रिफेक्सको रिभर्स थप्नुहोस् जुन पालिन्ड्रोमिक प्रत्यय भन्दा पहिले आउँछ। >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"यदि दिइएको स्ट्रिङ पालिन्ड्रोम हो भने परीक्षण गर्नुहोस् ।\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इनपुट दुई स्ट्रिंगहरू a र b हुन् जसमा केवल 1s र 0s समावेश हुन्छ। यी इनपुटहरूमा बाइनरी XOR प्रदर्शन गर्नुहोस् र परिणामलाई स्ट्रिंगको रूपमा पनि फर्काउनुहोस्। >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"string सूचीबाट, सबैभन्दा लामो फिर्ता गर्नुहोस्। एउटै लम्बाइको बहु string को मामला मा पहिलो फिर्ता गर्नुहोस्। इनपुट सूची खाली छ भने कुनै पनि फिर्ता नगर्नुहोस्। >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"दुई पूर्णांक a र b को सबैभन्दा ठूलो साझा विभाजकलाई फर्काउँदछ >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"सबै उपसर्गहरूको सूची छोटो देखि लामो इनपुट स्ट्रिङको >>> all_prefixes (('abc') ['a', 'ab', 'abc'] बाट फर्काउँछ\"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"एउटा string फर्काउँदछ जसमा स्पेस-सीमित संख्याहरू ० देखि n सम्म समावेशी हुन्छ। >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"दिइएको स्ट्रिङ, पत्ता लगाउनुहोस् कि कति फरक अक्षरहरू (केसको पर्वाह नगरी) यो >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 बाट बनेको छ।\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"यो प्रकार्यमा इनपुट एक विशेष ASCII ढाँचामा संगीत नोटहरू प्रतिनिधित्व string छ। तपाईंको कार्य धेरै धडकन गर्न अनुरूप पूर्णांक को तार सूची पार्स छ यहाँ एक लिजेन्ड छः 'o' नोट, अन्तिम चार धड्कन 'o' - एक आधा नोट, अन्तिम दुई धड्कन 'o' - एक quater नोट, अन्तिम एक धड्कन >>> parse_music 'o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . o' . on",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"मूल स्ट्रिङमा दिइएको सबस्ट्रिंग कति पटक फेला पार्न सकिन्छ पत्ता लगाउनुहोस्। ओभरल्यापि cases केसहरू गणना गर्नुहोस्। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"इनपुट 'शून्य' देखि 'नौ' सम्म संख्याहरूको अन्तरिक्ष-सीमित स्ट्रिङ हो। मान्य विकल्पहरू 'शून्य', 'एक', 'दुई', 'तीन', 'चार', 'पाँच', 'छ, 'सात', 'आठ' र 'नौ' हुन्। साना देखि ठूलामा क्रमबद्ध संख्याहरूको साथ स्ट्रिङ फर्काउनुहोस् >>> sort_numbers (('तीन एक पाँच') 'एक तीन पाँच' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"संख्याहरूको आपूर्ति गरिएको सूचीबाट (कम्तिमा दुईको लम्बाई) दुई छनौट गर्नुहोस् र दुई फिर्ता गर्नुहोस् जुन एक अर्कासँग नजिक छन् र तिनीहरूलाई क्रमबद्ध रूपमा फिर्ता गर्नुहोस् (सानो संख्या, ठूलो संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"संख्याहरूको सूची दिइएको छ (कम्तिमा दुई तत्वहरूको), त्यो सूचीमा एक रैखिक रूपान्तरण लागू गर्नुहोस्, यस्तो कि सबैभन्दा सानो संख्या ० हुनेछ र सबैभन्दा ठूलो १ >>> rescale_to_unit (([१.०, २.०, ३.०, ४.०, ५.०]) [०.०, ०.२५, ०.५, ०.७५, १.०] हुनेछ।\"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"फिल्टर दिइएको सूचीमा कुनै पनि पाइथन मानहरू पूर्णांकहरूको लागि मात्र >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"दिइएको स्ट्रिंगको लम्बाई >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"दिइएको संख्या n को लागि, n लाई समान रूपले विभाजित गर्ने सबैभन्दा ठूलो संख्या खोज्नुहोस्, n >>> largest_divisor ((15) 5 भन्दा सानो\"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"दिइएको पूर्णांकको अभाज्य गुणनफलहरूको सूची सानोदेखि ठूलोसम्म क्रमबद्ध गरेर फर्काउनुहोस्। प्रत्येक कारकलाई गुणनफलमा कति पटक देखा पर्दछ भन्ने संख्याको अनुरूप सूचीबद्ध गर्नुपर्दछ। इनपुट नम्बर सबै कारकहरूको गुणनफल बराबर हुनुपर्दछ >>> कारक बनाउनुहोस् ((8) [२, २, २] >>> कारक बनाउनुहोस् ((२)) [५, ५] >>> कारक बनाउनुहोस् ((70) [२, ५, ७] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांकहरूको सूचीबाट, सबै तत्वहरू हटाउनुहोस् जुन एक पटक भन्दा बढी देखा पर्दछ। तत्वहरूको क्रम बायाँ राख्नुहोस् जस्तै इनपुटमा। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"दिइएको स्ट्रिङका लागि, सानो अक्षरलाई ठूलो अक्षरमा र ठूलो अक्षरलाई सानो अक्षरमा फ्लिप गर्नुहोस्। >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"string को सूचीलाई एउटा string मा जोड्नुहोस >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"दिइएको उपसर्गबाट सुरु हुने stringहरूको इनपुट सूची मात्र फिल्टर गर्नुहोस्। >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"सूचीमा केवल सकारात्मक संख्याहरू फर्काउनुहोस्। >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"यदि दिइएको संख्या प्राइम हो भने सही फर्काउनुहोस्, र अन्यथा गलत। >>> is_prime (१०१) गलत >>> is_prime (११) सही >>> is_prime (११) सही >>> is_prime (१३४४१) सही >>> is_prime (१६१) सही >>> is_prime (१४) गलत >>> is_prime (१) गलत \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs बहुपदको गुणांक हो। find_zero find x यस्तो कि poly ((x) = ० find_zero फर्काउँछ केवल शून्य बिन्दु मात्र, यदि त्यहाँ धेरै छन् भने पनि। यसबाहेक, find_zero ले केवल सूची xs लिन्छ जुन गुणांकहरूको संख्या र सबैभन्दा ठूलो गैर शून्य गुणांकको समाधानको ग्यारेन्टी गर्दछ। >>> गोल ((find_zero[(1, 2]), 2) # f ((x) = १ + २x -०.।5 >>> गोल ((find_zero([-6, 11, -6, 1]), 2) # (x - १) * (x - २) * (x - 3) = -6 + 11x - 6x ^ २ + x ^ 3  १.०\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"बहुपदको मूल्यांकन गर्दछ गुणांक xs बिन्दु x मा। फिर्ती xs [०] + xs [१] * x + xs [१] * x ^ २ + .... xs [n] * x ^ n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"यो प्रकार्यले सूची l लिन्छ र सूची l' फर्काउँछ जुन l' को साथ समान छ जुन तीन द्वारा विभाजित हुँदैन, जबकि यसको मानहरू सूचकांकमा तीन द्वारा विभाजित हुन्छन् l को सम्बन्धित सूचकांकको मानहरू बराबर हुन्छ, तर क्रमबद्ध हुन्छ। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"सूचीमा क्रमबद्ध अद्वितीय तत्वहरू फर्काउनुहोस् >>> अद्वितीय (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"सूचीमा अधिकतम तत्व फर्काउनुहोस्। >>> max_element (([१, २, ३]) 3 >>> max_element (([५, ३, -५, २, -३, ३, ९, ०, १२३, १, -१०)) १२३ \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"अंक 7 को संख्या फिर्ता गर्नुहोस् जुन पूर्णांकमा n भन्दा कम हुन्छ जुन 11 वा 13 द्वारा विभाजित हुन्छ। >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"यो प्रकार्यले सूची l लिन्छ र सूची l' फर्काउँछ, यस्तो कि l' अनौठो सूचकांकमा l सँग मिल्दोजुल्दो छ, जबकि यसको मानहरू जोडी सूचकांकमा l को जोडी सूचकांकको मानहरू बराबर छन्, तर क्रमबद्ध छन्। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"इनपुट स्ट्रिंगको रूपमा एन्कोड गरिएको एन्कोड_साइक्लिक प्रकार्यको साथ लिन्छ। डिकोड गरिएको स्ट्रिंग फर्काउँछ।\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"तीन वर्णको चक्र समूह द्वारा एन्कोडेड स्ट्रिंग फर्काउँछ।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib फर्काउँछ n-th नम्बर जुन फिबोनैचि नम्बर हो र यो पनि प्राइम हो। >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero पूर्णांकहरूको सूचीलाई इनपुटको रूपमा लिन्छ। यो सही फर्काउँछ यदि सूचीमा तीन भिन्न तत्वहरू छन् जुन शून्यमा योग छ, र अन्यथा गलत। >>> triples_sum_to_zero([1, 3, 5, 0]) गलत >>> triples_sum_to_zero[(1, 3, -2, 1]) सही >>> triples_sum_to_zero([1, 2, 3, 7]) गलत >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) सही >>> triples_sum_to_zero[1]) गलत \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"एउटा सडक कल्पना गर्नुहोस् जुन एक पूर्ण रूपमा सीधा असीम लामो लाइन हो। n कारहरू बायाँबाट दायाँ ड्राइभ गर्दैछन्; एकै साथ, n कारहरूको फरक सेट दायाँबाट बायाँ ड्राइभ गर्दैछ। कारहरूको दुई सेट एक अर्काबाट धेरै टाढाबाट सुरू हुन्छ। सबै कारहरू समान गतिमा हिंड्छन्। दुई कारहरू टकराउँछन् जब बायाँबाट दायाँ हिँड्ने कारले दायाँबाट बायाँ हिँड्ने कारलाई ठक्कर दिन्छ। तथापि, कारहरू असीम रूपमा बलियो र बलियो हुन्छन्; नतिजाको रूपमा, तिनीहरू आफ्नो ट्र्याजेक्टरीमा हिंड्न जारी राख्छन् जस्तो कि तिनीहरू टकराएनन्। यो प्रकार्यले यस्ता टक्करहरूको संख्या आउटपुट गर्दछ।\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"१ द्वारा वृद्धि गरिएको तत्वहरूको साथ सूची फिर्ता गर्नुहोस्। >>> incr_list (([१, २, ३]) [२, ३, ४] >>> incr_list (([५, ३, ५, २, ३, ९, ०, १२३)) [६, ४, ६, ३, ४, १०, १, १२४] ।\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero पूर्णांकहरूको सूचीलाई इनपुटको रूपमा लिन्छ। यो सत्य फर्काउँछ यदि सूचीमा दुई भिन्न तत्वहरू छन् जुन शून्यमा योग छ, र अन्यथा गलत। >>> pairs_sum_to_zero([1, 3, 5, 0]) गलत >>> pairs_sum_to_zero[(1, 3, -2, 1]) गलत >>> pairs_sum_to_zero([1, 2, 3, 7]) गलत >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) सही >>> pairs_sum_to_zero[1]) गलत \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"इनपुट नम्बर x को संख्यात्मक आधार आधारमा परिवर्तन गर्नुहोस्। रूपान्तरण पछि स्ट्रिंग प्रतिनिधित्व फिर्ता गर्नुहोस्। आधार संख्या १० भन्दा कम छ। >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"त्रिकोणको लागि एक पक्षको लम्बाई र उच्च रिटर्न क्षेत्र दिइएको छ। >>> त्रिकोण_क्षेत्र\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 संख्या अनुक्रम निम्नानुसार परिभाषित गरिएको Fibbonacci अनुक्रम जस्तै एक अनुक्रम हो: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 संख्या अनुक्रमको n-th तत्वको कुशलतापूर्वक गणना गर्न एउटा प्रकार्य लेख्नुहोस्। पुनरावृत्ति प्रयोग नगर्नुहोस्। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"सूचीमा तत्वहरूको फिर्ती मध्यमा l. >>> मध्यमा (([3, 1, 2, 4, 5]) 3 >>> मध्यमा (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"दिइएको स्ट्रिङ पालिन्ड्रोम हो कि होइन जाँच गर्छ >>> is_palindrome('') True >>> is_palindrome('aba') True >>> is_palindrome('aaaaa') True >>> is_palindrome('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"फर्काउनुहोस् 2^n मोडुलो p (संख्याको बारेमा सचेत हुनुहोस्) । >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"एन्कोड_शिफ्ट प्रकार्यको साथ इनपुट स्ट्रि asको रूपमा लिन्छ। डिकोड गरिएको स्ट्रि return फर्काउँछ।\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"अक्षरमा प्रत्येक वर्णलाई ५ ले सार्दै एन्कोड गरिएको स्ट्रिङ फर्काउँछ ।\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels एक प्रकार्य हो जसले स्ट्रिंग लिन्छ र स्वर बिनाको स्ट्रिंग फर्काउँछ। >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"यदि सूची l मा सबै संख्याहरू थ्रेसहोल्ड t भन्दा तल छन् भने True फर्काउनुहोस्। >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"दुई नम्बर x र y जोड्नुहोस् >>> जोड्नुहोस् ((२, ३) ५ >>> जोड्नुहोस् ((५, ७) १२ \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"यदि दुई शब्दहरूसँग समान वर्णहरू छन् भने जाँच गर्नुहोस्। >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcd', 'dddddddabddce') False >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"फिबोनाचीको n-औं नम्बर फर्काउँदछ। >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"<\" र \">\" को स्ट्रिङ हो. यदि हरेक खुल्ने ब्र्याकेटमा सम्बन्धित बन्द हुने ब्र्याकेट छ भने True फर्काउनुहोस्. >>> correct_bracketing (((\"<\") False >>> correct_bracketing ((\"<>\") True >>> correct_bracketing ((\"<><>>\") True >>> correct_bracketing ((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"फर्काउनुहोस् सही हो यदि सूची तत्वहरू मोनोटोनिक रूपमा बढ्दै वा घट्दै छन्। >>> मोनोटोनिक (([१, २, ४, २०]) सही >>> मोनोटोनिक (([१, २०, ४, १०]) गलत >>> मोनोटोनिक (([४, १, ०, -१०]) सही \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"दुई सूचीहरूको लागि क्रमबद्ध अद्वितीय साझा तत्वहरू फर्काउनुहोस्। >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n को सबैभन्दा ठूलो प्राइम कारक फर्काउनुहोस्। मानौं n > 1 र प्राइम होइन। >>> largest_prime_factor ((१३१९५) २९ >>> largest_prime_factor ((२०४८) २ \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n एउटा यस्तो प्रकार्य हो जसले १ देखि n सम्मका संख्याहरूको योगफल दिन्छ। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"(\" र \"\") को स्ट्रिङ हो। यदि हरेक खुल्ने ब्र्याकेटमा सम्बन्धित बन्द हुने ब्र्याकेट छ भने True फर्काउनुहोस्। >>> correct_bracketing (((\"(\") False >>> correct_bracketing (((\")) True >>> correct_bracketing (((()) True >>> correct_bracketing (((()) False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs बहुपदको गुणांकहरू प्रतिनिधित्व गर्दछ। xs[0] + xs[1] * x + xs[2] * x^2 + .... यो बहुपदको व्युत्पन्नलाई उही रूपमा फर्काउनुहोस्। >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"फिबफिब नम्बर अनुक्रम फिबोनैकी अनुक्रमसँग मिल्दोजुल्दो अनुक्रम हो जुन निम्नानुसार परिभाषित गरिएको छः fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया fibfib नम्बर अनुक्रमको n-th तत्वको कुशलतापूर्वक गणना गर्न एउटा प्रकार्य लेख्नुहोस्। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"एउटा फंक्शन vowels_count लेख्नुहोस् जसले शब्दलाई प्रतिनिधित्व गर्ने स्ट्रिङलाई इनपुटको रूपमा लिन्छ र स्ट्रिङमा स्वरहरूको संख्या फर्काउँछ। यस अवस्थामा स्वरहरू 'a', 'e', 'i', 'o', 'u' हुन्। यहाँ, 'y' पनि स्वर हो, तर जब यो दिइएको शब्दको अन्त्यमा हुन्छ। उदाहरणः >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"थप परीक्षण केसहरू थप्नुहोस्।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"परिपत्रले पूर्णांक x को अंकहरू सार्छ, अंकहरू दायाँ सार्दै र परिणामलाई स्ट्रिङको रूपमा फर्काउँछ। यदि सार्ने > अंकहरूको संख्या, अंकहरू उल्टो फर्काउनुहोस्। >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"कार्य एउटा यस्तो प्रकार्य लेख्नुहोस् जसले एउटा स्ट्रिङलाई इनपुटको रूपमा लिन्छ र माथिल्लो अक्षरहरूको योग मात्र ASCII कोडहरू फर्काउँछ। उदाहरणहरूः digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"यो कार्यमा, तपाईँलाई एउटा स्ट्रिङ दिइएको छ जसले स्याउ र सुन्तलाहरूको संख्यालाई प्रतिनिधित्व गर्छ जुन फलहरूको टोकरीमा वितरण गरिन्छ यो टोकरीमा स्याउ, सुन्तला र आमोको फलहरू समावेश छन्। स्ट्रिंग दिइएको छ जसले कुल संख्याको प्रतिनिधित्व गर्दछ सुन्तला र स्याउ र एक पूर्णांक जसले टोकरीमा फलहरूको कुल संख्या प्रतिनिधित्व गर्दछ टोकरीमा आमोको फलहरूको संख्या फिर्ता गर्नुहोस्। उदाहरणका लागिः fruit_distribution\"5(स्याउ र 6 सुन्तला\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 स्याउ र 1 सुन्तला\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 स्याउ र 3 सुन्तला\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 स्याउ र 120) सुन्तला\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"एक एर्रे दिइएको छ जसले गैर-नकारात्मक पूर्णांक नोडहरू भएको रूखको शाखालाई प्रतिनिधित्व गर्दछ तपाईंको कार्य नोडहरू मध्ये एउटा टिप्न र फर्काउनु हो। टिपिएको नोड सबैभन्दा सानो पनि मानको नोड हुनुपर्दछ। यदि उही सानो पनि मानको साथ धेरै नोडहरू फेला परेमा सबैभन्दा सानो सूचकांक भएको नोड फर्काउनुहोस्। टिपिएको नोड सूचीमा फर्काउनुपर्दछ, [smallest_value, यसको अनुक्रमणिका], यदि त्यहाँ कुनै पनि मानहरू छैनन् वा दिइएको एर्रे खाली छ भने, फिर्ता गर्नुहोस् []। उदाहरण १ः इनपुटः [4,2,3] आउटपुटः [2, १] स्पष्टीकरणः २ को सबैभन्दा सानो पनि मान छ, र २ को सबैभन्दा सानो अनुक्रमणिका छ। उदाहरण २ः इनपुटः [१,२,३] आउटपुटः [२, १] स्पष्टीकरणः २ को सबैभन्दा सानो मान छ, र २ को सबैभन्दा सानो पनि अनुक्रमणिका छ। उदाहरण ३ः इनपुटः [] आउटपुटः [४] इनपुटः [५,३,४] आउटपुटः १, ० आउटपुटः ० नोडः सबैभन्दा सानो सूचकांक मान छ, तर त्यहाँ दुई शून्य मानहरू छन्। उदाहरण १ः सबैभन्दा सानो नोडको लागि हामी पहिलो नोड चयन गर्नेछौं, तर यसको अनुक्रमणिका शून्य हो। * लम्बाई = ०।\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''यदि तपाईँलाई सकारात्मक पूर्णांकहरूको एउटा गैर-खाली सूची दिइएको छ भने, तपाईँले शून्य भन्दा ठूलो र पूर्णांकको मानभन्दा ठूलो वा बराबर आवृत्ति भएको सबैभन्दा ठूलो पूर्णांक फर्काउनु पर्छ। पूर्णांकको आवृत्ति सूचीमा देखा पर्ने पटकको संख्या हो। यदि त्यस्तो मान अवस्थित छैन भने, -१ फर्काउनुहोस्। उदाहरणः खोज ([४, १, २, २, ३, १]) == २ खोज ([१, २, २, ३, ३, ४, ४]) == ३ खोज ([५, ५, ४, ४, ४]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''पूर्णांकहरूको सूची दिइएको छ, अनौंठो क्रममा सूची फिर्ता गर्नुहोस्। अनौंठो क्रमबद्धता, जब तपाईं न्यूनतम मानबाट सुरू गर्नुहुन्छ, त्यसपछि बाँकी पूर्णांकहरूको अधिकतम, त्यसपछि न्यूनतम र यस्तै। उदाहरणहरूः strange_sort_list (([१, २, ३, ४]) == [१, ४, २, ३] strange_sort_list (([५, ५, ५, ५]) == [५, ५, ५, ५] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''त्रिकोणको तीन पक्षको लम्बाई दिइएको छ। यदि तीन पक्षले मान्य त्रिकोण बनाउँछ भने त्रिकोणको क्षेत्रफल २ दशमलव बिन्दुमा गोल गरी फर्काउनुहोस्। अन्यथा फिर्ता गर्नुहोस् -१ तीन पक्षले मान्य त्रिकोण बनाउँदछ जब कुनै दुई पक्षको योग तेस्रो पक्ष भन्दा ठूलो हुन्छ। उदाहरणः त्रिकोण_क्षेत्र ((3, 4, 5) == 6.00 त्रिकोण_क्षेत्र ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''एउटा प्रकार्य लेख्नुहोस् जुन सही फर्काउँछ यदि वस्तु q उड्छ, र गलत अन्यथा। वस्तु q उड्छ यदि यो सन्तुलित छ (यो एक पालिन्ड्रोमिक सूची हो) र यसको तत्वहरूको योग अधिकतम सम्भावित वजन w भन्दा कम वा बराबर छ। उदाहरणः will_it_fly (([१, २], ५) â -> False # १+२ अधिकतम सम्भावित वजन भन्दा कम छ, तर यो असंतुलित छ। will_it_fly (([३, २, ३], १) â -> False # यो सन्तुलित छ, तर ३+२+३ अधिकतम सम्भावित वजन भन्दा बढी छ। will_it_fly (([३, २, ३], ९) â -> True # ३+२३ अधिकतम सम्भावित वजन भन्दा कम छ, र यो सन्तुलित छ। will_it_fly ((([3], â 5) -> True # ३ अधिकतम सम्भावित वजन भन्दा कम छ, र यो सन्तुलित छ।'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"पूर्णांकहरूको एर एर दिइएको छ, एरलाई पालिन्ड्रोमिक बनाउनको लागि परिवर्तन गर्न आवश्यक तत्वहरूको न्यूनतम संख्या फेला पार्नुहोस्। पालिन्ड्रोमिक एर्रे एक एर्रे हो जुन पछाडि र अगाडि पढिन्छ। एक परिवर्तनमा, तपाईं एक तत्वलाई कुनै पनि अन्य तत्वमा परिवर्तन गर्न सक्नुहुनेछ। उदाहरणका लागिः smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''एउटा प्रकार्य लेख्नुहोस् जसले दुईवटा स्ट्रिङ सूचीहरू स्वीकार गर्दछ र सूचीको सबै स्ट्रिङहरूमा अन्य सूची भन्दा कम क्यारेक्टरहरूको कुल संख्या भएको सूची फर्काउँछ। यदि दुई सूचीहरूमा क्यारेक्टरहरूको समान संख्या छ भने, पहिलो सूची फिर्ता गर्नुहोस्। उदाहरणहरू total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['i', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'], '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् जुन दिइएको संख्या 3 प्राइम नम्बरहरूको गुणन हो र अन्यथा गलत हो भने सही फर्काउँछ। (a) १०० भन्दा कम छ भनेर जान्दै उदाहरणः is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"तपाईंको कार्य भनेको एउटा प्रकार्य लेख्नु हो जुन सत्य फर्काउँछ यदि संख्या x n को साधारण शक्ति हो र अन्य अवस्थामा गलत छ। x n को साधारण शक्ति हो यदि n**int=x उदाहरणका लागिः is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''एउटा यस्तो प्रकार्य लेख्नुहोस् जसले पूर्णांक a लिन्छ र यदि यो इन्जेगर कुनै पूर्णांकको घन हो भने सत्य फर्काउँछ। नोटः तपाईँले इनपुट सधैँ मान्य छ भन्ने मान्न सक्नुहुन्छ। उदाहरणः iscube (१) ==> True (२) ==> False (१) ==> True (६४) ==> True (०) ==> True (१८०) ==> False (१) ==> True (१८०) ==> False (१) ==> True (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१८०) ==> False (१) ==> False'''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"तपाईँलाई एउटा फंक्शन लेख्ने काम दिइएको छ जसले हेक्जाडेसिमल नम्बरलाई स्ट्रिङको रूपमा प्राप्त गर्दछ र हेक्जाडेसिमल अंकहरूको संख्या गणना गर्दछ जुन प्राइमहरू हुन् (प्राइम नम्बर, वा प्राइम, १ भन्दा ठूलो प्राकृतिक संख्या हो जुन दुई साना प्राकृतिक संख्याहरूको उत्पादन होइन) । हेक्जाडेसिमल अंकहरू ०, १, २, ३, ४, ५, ६, ७, ८, ९, ए, बी, सी, डी, ई, एफ हुन्। प्राइम नम्बरहरू २, ३, ५, ७, ११, १३, १७,... हुन्। त्यसैले तपाईँले निम्न अंकहरूको संख्या निर्धारण गर्नुपर्दछ: २, ३, ५, ७, बी (=डेसिमल ११), डी (=डेसिमल १३) । नोटः तपाईँले इनपुट सँधै सही वा खाली स्ट्रिंग मान्न सक्नुहुन्छ, र प्रतीकहरू ए, बी, सी, डी, ई, एफ सधैं ठूला अक्षरहरूमा हुन्छन्। उदाहरणः \"एबी\" को लागि आउटपुट १ हुनुपर्छ। \"एबी\" को लागि आउटपुट १ हुनुपर्छ। \"एबी\" को लागि आउटपुट २ हुनुपर्छ। \"एबी\" को लागि आउटपुट २ हुनुपर्छ। \"एबी\" को लागि आउटपुट २ हुनुपर्छ। \"एबी\" को लागि आउटपुट २.० हुनुपर्छ। \"एएफ\" को लागि आउटपुट २.० हुनुपर्छ।\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"तपाईँलाई दशमलव ढाँचामा एउटा नम्बर दिइएको छ र तपाईँको कार्य यसलाई बाइनरी ढाँचामा रूपान्तरण गर्नु हो। फंक्शनले एउटा स्ट्रिङ फर्काउनु पर्छ, जहाँ प्रत्येक वर्णले बाइनरी नम्बर प्रतिनिधित्व गर्छ। स्ट्रिङमा प्रत्येक वर्ण '०' वा '१' हुनेछ। स्ट्रिङको सुरु र अन्त्यमा अतिरिक्त दुई अक्षर 'db' हुनेछ। अतिरिक्त वर्णहरू ढाँचामा मद्दत गर्नका लागि छन्। उदाहरणः दशमलव_देखि_बाइनरी (१५) # फर्काउँछ \"db1111db\" दशमलव_देखि_बाइनरी (३२) # फर्काउँछ \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"तपाईँलाई एउटा स्ट्रिङ s दिइएको छ। तपाईँको काम भनेको स्ट्रिङ खुसी छ कि छैन जाँच गर्नु हो। यदि यसको लम्बाइ कम्तिमा ३ छ र हरेक ३ लगातार अक्षरहरू फरक छन् भने स्ट्रिङ खुसी हुन्छ उदाहरणका लागि: is_happy (a) => False is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (a) => False is_happy (a) => False is_happy (b) => False is_happy (a) => False is_happy (a) => False is_happy (b) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"यो सेमेस्टरको अन्तिम हप्ता हो र शिक्षकले विद्यार्थीहरूलाई ग्रेड दिनुपर्छ। शिक्षकले ग्रेडिङका लागि आफ्नै एल्गोरिथ्म बनाउँदैछिन्। समस्या के हो भने उनले ग्रेडिङका लागि प्रयोग गर्ने कोड हराएकी छिन्। उनले केही विद्यार्थीहरूको ग्रेडको सूची दिइसकेकी छिन् र तपाईंले एउटा फंक्शन लेख्नुपर्छ जसले निम्न तालिका प्रयोग गरेर अक्षर ग्रेडको सूची आउटपुट गर्न सक्छ: GPA । अक्षर ग्रेड 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् जसले एउटा स्ट्रिङ लिन्छ र यदि स्ट्रिङ लम्बाई अभाज्य संख्या हो भने वा फर्काउँछ भने True अन्यथा उदाहरण prime_length (('हेलो') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('सुन्तला') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"सकारात्मक पूर्णांक n दिइएको छ, n-अंक सकारात्मक पूर्णांकहरूको संख्याको गणना फर्काउनुहोस् जुन 1 बाट सुरु हुन्छ वा समाप्त हुन्छ।\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"उदाहरणका लागि, N = 1000 को लागि, अंकहरूको योगफल 1 हुनेछ आउटपुट \"1\" हुनुपर्छ। N = 150 को लागि, अंकहरूको योगफल 6 हुनेछ आउटपुट \"110\" हुनुपर्छ। N = 147 को लागि, अंकहरूको योगफल 12 हुनेछ आउटपुट \"1100\" हुनुपर्छ। चरहरूः @N पूर्णांक प्रतिबन्धहरूः 0 â‰¤ N â‰¤ 10000. आउटपुटः बाइनरी नम्बरको स्ट्रिङ \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"पूर्णांकहरूको गैर-खाली सूची दिइएको छ lst. जोडी तत्वहरू जो अनौंठो सूचकांकमा छन् जोड्नुहोस्। उदाहरणहरूः add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् जसले स्ट्रिङ लिन्छ र यसको क्रमबद्ध संस्करण फर्काउँछ। स्ट्रिङको क्रमबद्ध संस्करण, एउटा स्ट्रिङ हो जहाँ सबै शब्दहरू (स्पेसद्वारा विभाजित) नयाँ शब्दद्वारा प्रतिस्थापित हुन्छन् जहाँ सबै वर्णहरू एस्सीआई मानको आधारमा आरोही क्रममा व्यवस्थित हुन्छन्। नोटः तपाईंले वाक्यमा शब्दहरू र खाली ठाउँहरूको क्रम राख्नुपर्दछ। उदाहरणका लागिः anti_shuffle ((('Hi') फर्काउँछ 'Hi' anti_shuffle ((('hello') फर्काउँछ 'ehllo' anti_shuffle (('Hello World!!!') फर्काउँछ 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"तपाईँलाई २ आयामिक डेटा दिइएको छ, नेस्टेड सूचीको रूपमा, जुन म्याट्रिक्ससँग मिल्दोजुल्दो छ, तथापि, म्याट्रिक्सको विपरीत, प्रत्येक पङ्क्तिमा स्तम्भहरूको फरक संख्या हुन सक्छ। lst, र पूर्णांक x दिइएको छ, सूचीमा पूर्णांक x फेला पार्नुहोस्, र ट्यूपलहरूको सूची फिर्ता गर्नुहोस्, [(x1, y1), (x2, y2) ...] यस्तो कि प्रत्येक टपल एक समन्वय हो - (पङ्क्ति, स्तम्भहरू), ० बाट सुरू हुन्छ। क्रमबद्ध गर्नुहोस् निर्देशांकहरू क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः क्रमशः\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"गैर-ऋणात्मक पूर्णांकहरूको एरे दिइएको छ, क्रमबद्ध गरेपछि दिइएको एरेको प्रतिलिपि फिर्ता गर्नुहोस्, यदि योग ((पहिलो अनुक्रमणिका मान, अन्तिम अनुक्रमणिका मान) अनौठो छ भने तपाईले दिइएको एरेलाई आरोही क्रममा क्रमबद्ध गर्नुहुनेछ, वा यदि योग ((पहिलो अनुक्रमणिका मान, अन्तिम अनुक्रमणिका मान) पनि छ भने यसलाई अवरोही क्रममा क्रमबद्ध गर्नुहोस्। नोटः * दिइएको एरे परिवर्तन नगर्नुहोस्। उदाहरणहरूः * sort_array[(]) => [] * sort_array[]] => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"एउटा फंक्शन एन्क्रिप्ट बनाउनुहोस् जसले एउटा स्ट्रिङलाई आर्गुमेन्टको रूपमा लिन्छ र वर्णमाला घुमाएर एउटा एन्क्रिप्टेड स्ट्रिङ फर्काउँछ। वर्णमालालाई यस्तो तरिकाले घुमाउनु पर्छ कि अक्षरहरू दुई स्थानमा दुई गुणा तल सार्न सकिन्छ। उदाहरणका लागि: एन्क्रिप्ट (http://en.wikipedia.org/wiki/Encrypt) फर्काउँछ 'lm' एन्क्रिप्ट (http://en.wikipedia.org/wiki/Encrypt) फर्काउँछ 'ewhjklnop' एन्क्रिप्ट (http://en.wikipedia.org/wiki/Ewhjklnop) फर्काउँछ 'kj' एन्क्रिप्ट (http://en.wikipedia.org/wiki/Ewhjklnop) फर्काउँछ 'ix' फर्काउँछ 'ix'\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"तपाईँलाई पूर्णांकहरूको सूची दिइएको छ। एउटा प्रकार्य next_smallest ({}) लेख्नुहोस् जसले सूचीको दोस्रो सबैभन्दा सानो तत्व फर्काउँछ। यदि त्यस्तो कुनै तत्व छैन भने None फर्काउनुहोस्। next_smallest ({}[१,२,३,४,५]) == 2 next_smallest ({}[५,१,४,३,२]) == 2 next_smallest ({}[]) == None next_smallest ({}[१,१]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"तपाईँलाई शब्दहरूको एउटा शृङ्खला दिइनेछ, र तपाईँको काम बोरडमहरूको संख्या गणना गर्नु हो। बोरडम भनेको \"I\" शब्दबाट सुरु हुने वाक्य हो। वाक्यहरू '.', '?' वा '! 'द्वारा सीमित हुन्छन्। उदाहरणका लागि: >>> is_bored ((\"हेलो वर्ल्ड\") 0 >>> is_bored ((\"आकाश नीलो छ। सूर्य चम्किरहेको छ। मलाई यो मौसम मन पर्छ\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''एउटा प्रकार्य सिर्जना गर्नुहोस् जसले ३ वटा संख्या लिन्छ। यदि एउटा संख्या अन्य दुईको योग बराबर छ भने यो सही फर्काउँछ, र सबै संख्याहरू पूर्णांक हुन्। अन्य कुनै पनि अवस्थामा यो गलत फर्काउँछ। उदाहरण any_int{5, 2, 7} -> True any_int{3, 2, 2}) -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"एउटा यस्तो प्रकार्य लेख्नुहोस् जसले सन्देश लिन्छ, र यस्तो प्रकारले एन्कोड गर्दछ कि यसले सबै अक्षरहरूको केस स्वैप गर्दछ, सन्देशमा सबै स्वरहरूलाई अक्षरको साथ बदल्छ जुन अंग्रेजी वर्णमालामा त्यो स्वरको अगाडि २ स्थानमा देखा पर्दछ। केवल अक्षरहरू मान्नुहोस्। उदाहरणहरूः >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"तपाईँलाई पूर्णांकहरूको सूची दिइएको छ। तपाईँले सबैभन्दा ठूलो अभाज्य मान खोज्नुपर्छ र त्यसको अंकहरूको योग फर्काउनुपर्छ। उदाहरणः lst = [०,३,२,१,३,५,७,४,५,५,२,१८१,३२,४,३२,३२,३२,४,३] को लागि आउटपुट १० हुनुपर्दछ lst = [१,०,१,८,२,४५९७,२,१,३,४०,१,२,१,२,४,२,५,१] को लागि आउटपुट २५ हुनुपर्दछ lst = [१,३,१,३२,५१०,३४,८३२७,१०,१६,२३,२३३,३०,१,९,३] को लागि आउटपुट १३ हुनुपर्दछ lst = [०,७२,३२,७१,९,३२,६,५,९१,८३,५,६] को लागि आउटपुट ११ हुनुपर्दछ lst = [०,८,१,२,१,७] को लागि आउटपुट ३ हुनुपर्दछ lst = [१,८,१,२,१,७] को लागि आउटपुट ७ हुनुपर्दछ \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"दिइएको शब्दकोश, फर्काउँछ True यदि सबै कुञ्जीहरू सानो अक्षरमा स्ट्रिङहरू छन् वा सबै कुञ्जीहरू ठूलो अक्षरमा स्ट्रिङहरू छन्, अन्यथा फर्काउँछ False। प्रकार्य फर्काउनु पर्छ False दिइएको शब्दकोश खाली छ। उदाहरणहरूः check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) फर्काउनु पर्छ True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) फर्काउनु पर्छ False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) फर्काउनु पर्छ False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) फर्काउनु पर्छ False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) फर्काउनु पर्छ True.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"एउटा फंक्शन लागू गर्नुहोस् जसले गैर-नकारात्मक पूर्णांक लिन्छ र पहिलो n पूर्णांकहरूको एर्रे फर्काउँछ जुन प्राइम नम्बरहरू हुन् र n भन्दा कम छन्। उदाहरणका लागिः count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"उदाहरण: गुणा गर्नु (१४८, ४१२) ले १६ फर्काउनु पर्छ। गुणा गर्नु (१९, २८) ले ७२ फर्काउनु पर्छ। गुणा गर्नु (२०२०, १८५१) ले ० फर्काउनु पर्छ। गुणा गर्नु (१४, १५) ले २० फर्काउनु पर्छ।\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"दिइएको string s, सम सूचकांकमा ठूला स्वरहरूको संख्या गणना गर्नुहोस्। उदाहरणका लागिः count_upper (('aBCdEf') फर्काउँछ 1 count_upper (('abcdefg') फर्काउँछ 0 count_upper (('dBBE') फर्काउँछ 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''एउटा प्रकार्य सिर्जना गर्नुहोस् जसले एउटा संख्याको प्रतिनिधित्व गर्ने मान (स्ट्रिंग) लिन्छ र त्यससँग नजिकको पूर्णांक फर्काउँछ। यदि संख्या दुई पूर्णांकबाट समान दूरीमा छ भने, यसलाई शून्यबाट टाढा राउन्ड गर्नुहोस्। उदाहरण >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 नोटः शून्यबाट टाढा राउन्ड गर्नुको अर्थ यो हो कि यदि दिइएको संख्या दुई पूर्णांकबाट समान दूरीमा छ भने, तपाईले फर्काउनु पर्ने संख्या शून्यबाट टाढाको हो। उदाहरणका लागि closest_integer \" ((14.5\") ले १५ फर्काउनु पर्छ र closest_integer \" ((-14.5\") ले -१५ फर्काउनु पर्छ। '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"सकारात्मक पूर्णांक n दिइएको छ, तपाईं पत्थर को n स्तर को एक ढेर बनाउन छ। पहिलो स्तर n पत्थर छ। अर्को स्तर मा पत्थर को संख्या होः - अर्को विषम नम्बर यदि n विषम छ भने - अर्को पनि नम्बर यदि n छ भने। एक सूची मा प्रत्येक स्तर मा पत्थर को संख्या फिर्ता, जहाँ सूचकांक मा तत्व म स्तर मा पत्थर को संख्या प्रतिनिधित्व गर्दछ (i+1) । उदाहरणः >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"तपाईँलाई कम्पा वा स्पेसद्वारा अलग गरिएका शब्दहरूको स्ट्रिङ दिइनेछ। तपाईँको कार्य भनेको शब्दहरूमा स्ट्रिङ विभाजन गर्नु र शब्दहरूको एरे फर्काउनु हो। उदाहरणका लागिः words_string ((\"हेलो, मेरो नाम जोन हो\") == [\"हेलो\", \"मेरो\", \"नाम\", \"हो\", \"जोन\"] words_string ((\"एक, दुई, तीन, चार, पाँच, छ\") == [\"एक\", \"दुई\", \"तीन\", \"चार\", \"पाँच\", \"छ\"\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"यो फंक्शनले दुई सकारात्मक संख्या x र y लिन्छ र सबैभन्दा ठूलो सम पूर्णांक संख्या फर्काउँछ जुन दायरा [x, y] समावेशीमा छ। यदि त्यस्तो कुनै संख्या छैन भने, तब फंक्शनले -१ फर्काउनु पर्छ। उदाहरणका लागिः choose_num ((१२, १५) = १४ choose_num ((१३, १२) = -१ \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"यदि n m भन्दा ठूलो छ भने, -१ फर्काउनुहोस्। उदाहरणः rounded_avg ((१, ५) => \"0b11\" rounded_avg ((७, ५) => -1 rounded_avg ((१०), २०) => \"0b1111\" rounded_avg ((२०, ३३) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"सकारात्मक पूर्णांक x को सूची दिइएको छ। सबै तत्वहरूको क्रमबद्ध सूची फर्काउनुहोस् जुन कुनै पनि अंक छैन। नोटः फर्काइएको सूची बढ्दो क्रममा क्रमबद्ध गर्नुपर्दछ। उदाहरणका लागिः >>> unique_digits (([१५, ३३, १४२२, १]) [१, १५, ३३] >>> unique_digits (([१५२, ३२३, १४२२, १०]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"पूर्णांकहरूको एरे दिइएको छ, पूर्णांकहरू क्रमबद्ध गर्नुहोस् जुन १ र including सम्मको बीचमा छन्, परिणामस्वरूप एरे उल्टाउनुहोस्, र त्यसपछि प्रत्येक अंकलाई यसको सम्बन्धित नामबाट \"एक\", \"दुई\", \"तीन\", \"चार\", \"पाँच\", \"छ\", \"सात\", \"आठ\", \"नौ\" बाट प्रतिस्थापन गर्नुहोस्। उदाहरणका लागिः arr = [२, १, १, ४, ५, ८, २, ३] -> क्रमबद्ध गर्नुहोस् arr -> [१, १, २, २, ३, ४, ५, ८] -> रिभर्स arr -> [८, ५, ४, ३, २, २, १, १] फिर्ता गर्नुहोस् [\"आठ\", \"पाँच\", \"दुई\", \"दुई\", \"तीन\", \"दुई\", \"एक\", \"एक\"] यदि एरे खाली छ भने, एरे फिर्ता गर्नुहोस्ः arr = [] फिर्ता गर्नुहोस् [] यदि एरेमा कुनै अनौंठो नम्बर छ भने यसलाई बेवास्ता गर्नुहोस्ः arr = [१, १, ५५] -> arr -> [१, १, ५५] -> रिभर्स arr = [५, १] - [' एक' फिर्ता गर्नुहोस्] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"फंक्शन f लागू गर्नुहोस् जसले n लाई प्यारामिटरको रूपमा लिन्छ, र आकार n को सूची फर्काउँछ, यस्तो कि यदि i सम छ भने सूचकांक i मा तत्वको मान i को कारक हो वा अन्यथा १ देखि i सम्मका संख्याहरूको योग हो। i १ बाट सुरु हुन्छ। i को कारक १ बाट १ सम्मका संख्याहरूको गुणन हो (1 * २ * ... * i) उदाहरणः f (((5) == [१, २, ६, २४, १५] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"सकारात्मक पूर्णांक n दिईएको, एक टपल फर्काउनुहोस् जुन दायरा भित्र पनी र अनियमित पूर्णांक पालिन्ड्रोमहरूको संख्या छ। उदाहरण १ः इनपुटः 3 आउटपुटः (१, २) स्पष्टीकरणः पूर्णांक पालिन्ड्रोम १, २, are हुन्। ती मध्ये एक जोडी हो, र ती मध्ये दुई अनियमित छन्। उदाहरण २ः इनपुटः १२ आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिन्ड्रोम १, २, ३, ४, ५, ६, ७, ८, ९, ११ हुन्। ती मध्ये चार जोडी छन्, र ती मध्ये 6 अनियमित छन्। नोटः १. १ <= n <= १० ^ ३ २। टपलले क्रमशः जोडी र अनियमित पूर्णांक पालिन्ड्रोमहरूको संख्या फर्काएको छ। \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् count_nums जसले पूर्णांकहरूको एरे लिन्छ र तत्वहरूको संख्या फर्काउँछ जसको अंकहरूको योगफल > ० छ। यदि संख्या नकारात्मक छ भने, तब यसको पहिलो हस्ताक्षरित अंक नकारात्मक हुनेछः उदाहरणका लागि -१२३ अंकहरू -१, २, र ३ को हस्ताक्षरित छ। >>> count_nums (([]) == ० >>> count_nums ([-1, 11, -11]) == १ >>> count_nums ([(1, 1, 2]) == ३ \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"हामीसँग एन पूर्णांकको एर (arr) छ arr[1], arr[2], ..., arr[N]। एर्रेमा संख्याहरू अनियमित रूपमा क्रमबद्ध हुनेछन्। तपाईंको कार्य भनेको यो निर्धारण गर्नु हो कि यदि दिइएको एर्रेमा निम्न अपरेशन गरेर गैर-घट्ने क्रममा एर्रे क्रमबद्ध गर्न सम्भव छ भनेः तपाईंलाई दिइएको एर्रेमा कुनै पनि संख्यामा दायाँ पछाडि सर्ने अपरेशन गर्न अनुमति छ। एक दायाँ पछाडि सर्ने अपरेशनको अर्थ एर्रेका सबै तत्वहरू दायाँ दिशामा एक स्थानमा सार्नु हो। एर्रेको अन्तिम तत्व एर्रेमा सुरूवात स्थितिमा सार्नेछ अर्थात् ० औं सूचकांक। यदि माथिको अपरेशन गरेर क्रमबद्ध एर्रे प्राप्त गर्न सम्भव छ भने फिर्ता सत्य अन्यथा फिर्ता गलत। यदि दिइएको एर्रे खाली छ भने फिर्ता सत्य। नोटः दिइएको सूचीमा अद्वितीय तत्वहरू हुन ग्यारेन्टी गरिएको छ। उदाहरणका लागिः move_one_{},===[[[[]4,===[]5,===[][]]][]][]][][][]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"यो समस्यामा, तपाईँले एउटा प्रकार्य लागू गर्नुहुनेछ जसले दुईवटा संख्याहरूको सूची लिन्छ, र निर्धारण गर्दछ कि के यो सम्भव छ कि ती बीचमा तत्वहरूको आदान प्रदान गर्न lst1 लाई केवल सम संख्याहरूको सूची बनाउनको लागि। lst1 र lst2 बीच आदान प्रदान गरिएको तत्वहरूको संख्यामा कुनै सीमा छैन। यदि lst1 र lst2 बीचमा तत्वहरू आदान प्रदान गर्न सम्भव छ भने lst1 का सबै तत्वहरू सम बनाउनको लागि, \"YES\" फर्काउनुहोस्। अन्यथा, \"NO\" फर्काउनुहोस्। उदाहरणका लागिः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" यो मानिएको छ कि इनपुट सूचीहरू गैर-खाली हुनेछन्। \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"यदि अक्षरहरूको संख्या धेरै भएमा, सबै अक्षरहरू फिर्ता गर्नुहोस्। उदाहरणः हिस्टोग्राम (a): १, b: १, c: १) हिस्टोग्राम (a: b: a) हिस्टोग्राम (a: a: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b) हिस्टोग्राम (a: b: b: b) हिस्टोग्राम (a: b: b: b) हिस्टोग्राम (a: b: b: b) हिस्टोग्राम (a: b: b: b) हिस्टोग्राम (a: b: b: b: b) हिस्टोग्राम (a: b: b: b: b) हिस्टोग्राम (a: b: b: b: b) हिस्टोग्राम (a: b: b: b: b: b) हिस्टोग्राम ())\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"कार्य हामीलाई दुईवटा स्ट्रिङ s र c दिइएको छ, तपाईले s मा भएका सबै अक्षरहरु मेटाउनु पर्छ जुन c मा कुनै पनि अक्षरको बराबर छ र त्यसपछि जाँच गर्नुहोस् कि परिणाम स्ट्रिङ पालिन्ड्रोम हो कि होइन। यदि यो पछाडि पछाडि पढ्छ भने स्ट्रिङलाई पालिन्ड्रोम भनिन्छ। तपाईले जाँचको लागि परिणाम स्ट्रिङ र True/False समावेश गरेको टपल फर्काउनु पर्छ। उदाहरणका लागि s = \"abcde\", c = \"ae\", परिणाम ('bcd',False) हुनुपर्दछ। s = \"abcdef\", c = \"b\" को परिणाम ('acdef',False) हुनुपर्दछ। s = \"abcdedcba\", c = \"ab\", परिणाम ('cdedc',True) हुनुपर्दछ।\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"स्ट्रिंगहरूको सूची दिइएको छ, जहाँ प्रत्येक स्ट्रिंगमा केवल अंकहरू हुन्छन्, सूची फिर्ता गर्नुहोस्। आउटपुटको प्रत्येक तत्व i \"इनपुटको स्ट्रिंग i मा अनौंठो तत्वहरूको संख्या\" हुनुपर्दछ। जहाँ सबै i हरू इनपुटको i'th स्ट्रिंगमा अनौंठो अंकहरूको संख्याले प्रतिस्थापित गर्नुपर्दछ। >>> अनौंठो_क count्क ['1234567']) [\"अनौंठो तत्वहरूको संख्या 4n 4nput को str4ng 4।\"] >>> अनौंठो_क count्क ['3','11111111']) [\"अनौंठो तत्वहरूको संख्या 1n 1n 1nput को str1ng 1\", \"अनौंठो तत्वहरूको संख्या 8n 8nput को str8ng 8।\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"पूर्णांक n को एरे दिइएको छ, कुनै पनि खाली उप-एर्रेको न्यूनतम योगफल फेला पार्नुहोस्। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"तपाईँलाई कुवाहरूको आयताकार ग्रिड दिइएको छ। प्रत्येक पङ्क्तिले एकल कुवाको प्रतिनिधित्व गर्छ, र पङ्क्तिमा प्रत्येक १ ले पानीको एकल एकाइको प्रतिनिधित्व गर्छ। प्रत्येक कुवामा एउटा सम्बन्धित बाल्टिन छ जसबाट पानी निकाल्न सकिन्छ, र सबै बाल्टिनको क्षमता बराबर छ। तपाईँको कार्य भनेको बाल्टिनहरू प्रयोग गरेर कुवाहरू खाली गर्नु हो। तपाईँले बाल्टिनहरू तल झार्न आवश्यक पर्ने पटकहरूको संख्या आउटपुट गर्नुहोस्। उदाहरण १ः इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] बाल्टिन_ क्षमताः १ आउटपुटः ६ उदाहरण २ः इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] बाल्टिन_ क्षमताः २ आउटपुटः ५ उदाहरण ३ः इनपुटः [[:0,0,0], [0,0,0]] बाल्टिन_ क्षमताः ५ आउटपुटः ० * * कन्स्ट्र्याक्ट्सः १ * आउटपुटः १ * सबै बाल्टिनहरूको लम्बाई बराबर छ, १० * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"यस काटामा, तपाईंले गैर-नकारात्मक पूर्णांकहरूको एर्रेलाई तिनीहरूको बाइनरी प्रतिनिधित्वमा बढ्दो क्रममा संख्याको आधारमा क्रमबद्ध गर्नुपर्दछ। समान संख्याको लागि, दशमलव मानको आधारमा क्रमबद्ध गर्नुहोस्। यसलाई निम्नानुसार कार्यान्वयन गर्नुपर्दछः >>> sort_array (([१, ५, २, ३, ४]) == [१, २, ३, ४, ५] >>> sort_array (([२, ३, ४, -५, -६)) == [-६, -५, -४, -३, -२] >>> sort_array (([१, ०, २, ३, ४]) [०, १, २, ३, ४] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"string s र एक प्राकृतिक संख्या n दिईएको छ, तपाईं एक समारोह कार्यान्वयन गर्न को लागी जिम्मेवार गरिएको छ कि string s बाट सबै शब्दहरु को एक सूची फर्काउँछ कि ठीक n व्यंजनहरु समावेश गर्दछ, क्रम मा यी शब्दहरु string s मा देखा पर्दछ। यदि string s खाली छ भने समारोह खाली सूची फर्काउनु पर्छ। नोटः तपाईं इनपुट स्ट्रिंग मात्र अक्षर र रिक्त स्थान समावेश गर्दछ मान्न सक्छ। उदाहरणः select_words (((\"मेरी एक सानो भेडा थियो\", 4) ==> [\"little\"] select_words (((\"मेरी एक सानो भेडा थियो\", 3) ==> [\"मेरी\", \"भेडा\"] select_words\" सरल सेतो ठाउँ\", 2) ==> [] select_words ((\"नमस्कार संसार\", 4) ==> [\"world\"] select_words (((\"दाजु sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"तपाईँलाई एउटा शब्द दिइएको छ। तपाईँको काम भनेको शब्दको दाहिने तर्फबाट दुई स्वरहरूको बीचमा रहेको सबैभन्दा नजिकको स्वर पत्ता लगाउनु हो (केस सेन्सिटिभ) । सुरु र अन्त्यमा रहेका स्वरहरू गणना गरिने छैन। यदि तपाईँले माथिको अवस्था पूरा गर्ने स्वर फेला पार्नुभएन भने खाली स्ट्रिङ फर्काउनुहोस्। तपाईँले दिइएको स्ट्रिङमा अङ्ग्रेजी अक्षर मात्र भएको मान्न सक्नुहुन्छ। उदाहरणः get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''तपाईँलाई दुईवटा स्ट्रिङको सूची दिइएको छ, दुवै स्ट्रिङमा खुला कोष्ठक '(' वा बन्द कोष्ठक ') ' मात्र हुन्छ। तपाईँको काम भनेको दुईवटा स्ट्रिङलाई कुनै क्रममा जोड्न सम्भव छ कि छैन जाँच गर्नु हो, कि नतिजा स्ट्रिङ राम्रो हुन्छ। एउटा स्ट्रिङ S तब मात्र राम्रो मानिन्छ जब S मा सबै कोष्ठकहरू सन्तुलित हुन्छन्। उदाहरणका लागिः स्ट्रिङ '((()) ' राम्रो हुन्छ, जबकि स्ट्रिङ '()) ' छैन। यदि राम्रो स्ट्रिङ बनाउने तरिका छ भने 'Yes' फर्काउनुहोस्, र अन्यथा 'No' फर्काउनुहोस्। उदाहरणः match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"उदाहरण १ः इनपुट: arr = [-3, -4, 5], k = 3 आउटपुट: [-4, -3, 5] उदाहरण २ः इनपुट: arr = [4, -4, 4], k = 2 आउटपुट: [4, 4] उदाहरण ३ः इनपुट: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुट: [२] नोटः १. एर्रेको लम्बाई [१, १०००] को दायरामा हुनेछ। २. एर्रेमा एलिमेन्टहरू [-1000, १०००] को दायरामा हुनेछन्। ३. ० <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"पूर्णांकहरूको गैर-खाली सूची दिइएको छ, सबै अनौठो तत्वहरूको योग फिर्ता गर्नुहोस् जुन पनि स्थानहरूमा छन्। उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"पूर्णांक arr र पूर्णांक k को गैर-खाली एर्रे दिइएको छ, arr को पहिलो k तत्वहरूबाट अधिकतम दुई अंकको साथ तत्वहरूको योग फिर्ता गर्नुहोस्। उदाहरणः इनपुटः arr = [111,21,3,4000,5,6,7,8,9], k = 4 आउटपुटः 24 # sum of 21 + 3 constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"कोलाट्ज अनुमान गणितमा एक अनुमान हो जुन निम्नानुसार परिभाषित गरिएको अनुक्रमसँग सम्बन्धित छः कुनै पनि सकारात्मक पूर्णांक n बाट सुरु गर्नुहोस्। त्यसपछि प्रत्येक पद अघिल्लो पदबाट निम्नानुसार प्राप्त हुन्छः यदि अघिल्लो पद जोडी छ भने, अर्को पद अघिल्लो पदको आधा हो। यदि अघिल्लो पद अनियमित छ भने, अर्को पद अघिल्लो पदको 3 गुणा हो प्लस १। अनुमान यो हो कि n को कुनै पनि मानको फरक पर्दैन, अनुक्रम सधैं १ मा पुग्नेछ। नोटः १। कोलाट्ज ((१) १ हो। २। फर्काइएको सूची क्रमबद्ध क्रममा क्रमबद्ध हुन्छ। उदाहरणका लागिः get_odd_collatz ((५) १, ५ फर्काउँछ। ५ को लागि कोलाट्ज अनुक्रम [५, ८, १६, ४, २, १] हो, त्यसैले अनियमित संख्याहरू केवल १ र ५ हुन्।\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"तपाईँले एउटा प्रकार्य लेख्नु पर्छ जसले दिइएको मिति स्ट्रिंगलाई मान्य गर्दछ र यदि मिति मान्य छ भने सत्य फर्काउँछ अन्यथा गलत. मिति मान्य छ यदि निम्न सबै नियमहरू पूरा भएमा: १. मिति स्ट्रिंग खाली छैन. २. दिनहरूको संख्या महिना १,३,५,७,८,१०,१२ को लागि १ भन्दा कम वा ३१ दिन भन्दा बढी छैन र महिना ४,६,९,११ को लागि दिनहरूको संख्या १ भन्दा कम वा ३० दिन भन्दा बढी छैन। र, महिना २ को लागि दिनहरूको संख्या १ भन्दा कम वा २९ भन्दा बढी छैन। ३. महिनाहरू १ भन्दा कम वा १२ भन्दा बढी हुनु हुँदैन। ४. मिति ढाँचामा हुनुपर्दछः mm-dd-yyyy उदाहरणका लागिः valid_date (१०-१-१-२०००) => मान्य_मिति (१५-०१-२०१२) => मान्य_मिति (२०-०४-२०४०) => मान्य_मिति (०६-०४-२०२०) => मान्य_मिति (०६-०४-२०२०) => गलत\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''शब्दहरूको एक स्ट्रिंग दिईएको, खाली स्थानमा विभाजित शब्दहरूको सूची फिर्ता गर्नुहोस्, यदि पाठमा कुनै खाली ठाउँहरू अवस्थित छैन भने तपाईंले अल्पविराममा विभाजन गर्नुपर्दछ ',' यदि अल्पविराम अवस्थित छैन भने तपाईंले वर्णमालामा अनौंठो क्रममा सानो अक्षरहरूको संख्या फिर्ता गर्नुपर्दछ, अर्ड (('a') = ०, अर्ड (b') = १, ... अर्ड (z) = २ 25 उदाहरणहरू विभाजित_शब्दहरू ((\"हेलो विश्व! \") â -> [\"हेलो\", \"विश्व! \") विभाजित_शब्दहरू ((\"हेलो, विश्व! \") â -> [\"हेलो\", \"विश्व! \") विभाजित_शब्दहरू ((\"abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''यदि सूचीमा एउटै नम्बरको १ भन्दा बढी डुप्लिकेटहरू छन् भने, फर्काउनुहोस् गलत. कुनै नकारात्मक संख्याहरू र केवल पूर्णांकहरू मान्नुहोस्। उदाहरणहरू is_sorted (१, २, ३, ४, ५) हो -> True is_sorted (१, २, ३, ४, ५) हो -> True is_sorted (१, २, ३, ४, ५) हो -> False is_sorted (१, २, ३, ४, ५, ६)) हो -> True is_sorted (१, २, ३, ४, ५, ६)) हो -> True is_sorted (१, २, ३, ४, ६, ७) हो -> True is_sorted (१, ३, ४, ५, ६, ७) हो -> False is_sorted (१, ३, २, ४, ५, ७) हो -> False is_sorted (१, २, २, ३, ४) हो -> True is_sorted (१, २, २, ३, ४) हो -> False (१) हो'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"उदाहरणका लागि, यदि अन्तरालको लम्बाइ १ हो भने, जुन अभाज्य संख्या होइन। यदि अन्तरालको लम्बाइ अभाज्य संख्या हो भने, \"हो\" फर्काउनुहोस्, अन्यथा, \"होइन\" फर्काउनुहोस्। यदि दुई अन्तरालहरू अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्तरालमा अन्त\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"तपाईँलाई पूर्णांकहरूको एउटा एर दिइएको छ र तपाईँले पूर्णांकहरूको परिमाणको योगफल फर्काउनु पर्छ जुन एर्रेमा प्रत्येक नम्बरको सबै चिन्हहरूको गुणनफलद्वारा गुणन गरिएको छ, जुन १, -१ वा ० द्वारा प्रतिनिधित्व गरिएको छ। नोटः खाली एरको लागि कुनै पनि फर्काउँदैन। उदाहरणः >>> prod_signs (([१, २, २, -४]) == -९ >>> prod_signs (([०, १]) == ० >>> prod_signs (([]) == कुनै पनि होइन\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"यदि तपाईँले ग्रिडमा एन पंक्ति र एन स्तम्भहरू (एन >= 2) भएको ग्रिड र k सकारात्मक पूर्णांक भएको कक्षलाई दिनुभयो भने, ग्रिडको प्रत्येक कक्षमा एउटा मान हुन्छ। [१, एन * एन] समावेशी दायरामा प्रत्येक पूर्णांक ग्रिडको कक्षहरूमा ठीक एक पटक देखा पर्दछ। तपाईँले ग्रिडमा लम्बाइ k को न्यूनतम पथ खोज्नुपर्छ। तपाईँ कुनै पनि कक्षबाट सुरु गर्न सक्नुहुन्छ, र प्रत्येक चरणमा तपाईँ कुनै पनि छिमेकी कक्षहरूमा जान सक्नुहुन्छ, अर्को शब्दमा, तपाईँ हालको कक्षसँग किनारा साझा गर्ने कक्षहरूमा जान सक्नुहुन्छ। कृपया ध्यान दिनुहोस् कि k को लम्बाइको पथको अर्थ k को कक्षहरू (अनिवार्य रूपमा भिन्न छैन) भ्रमण गर्नु हो। तपाईँ ग्रिडबाट बाहिर जान सक्नुहुन्न। A (k को लम्बाइ) को मार्ग B (k को लम्बाइ) भन्दा कम मानिन्छ यदि A र B (हामी तिनीहरूलाई l_st र l_stB) को कक्षहरूमा मानहरूको क्रमबद्ध सूची बनाउँदा, l_stB शब्दकोषात्मक रूपमा l_stB भन्दा कम हुन्छ, अर्को शब्दमा, तपाईँ कुनै पनि कक्षमा लम्बाइ k को न्यूनतम पथ खोज्नुपर्छ, अर्को शब्दमा तपाईँ कुनै पनि कक्षमा जान सक्नुहुन्छ, अर्को शब्दमा तपाईँले कुनै पनि कक्षको किनारामा जान सक्नुहुन्छ। कृपया ध्यान दिनुहोस् कि k को लम्बाइको पथको लम्बाइको अर्थ k कोटि (अनिवारि) हो (अनिवारि) (अनिवारि) हो (अनिवारि) (अनिवारि) k (अनिवारि) k (अनिवारि) k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, j[j, j[j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,j,\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"फिबोनाकी अनुक्रमलाई सबैले चिन्छन्, यो विगत दुई शताब्दीमा गणितज्ञहरूले गहिरो अध्ययन गरेका थिए। तथापि, मानिसहरूलाई थाहा छैन कि ट्राइबोनाकी अनुक्रम हो। ट्राइबोनाकी अनुक्रम पुनरावृत्ति द्वारा परिभाषित गरिएको छः tri(1) = 3 tri(n) = 1 + n / 2, यदि n जोडी छ भने। tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n अनौठो छ भने। उदाहरणका लागिः tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 तपाईंलाई एक गैर-ऋणात्मक पूर्णांक संख्या n दिइन्छ, तपाईंले ट्राइबोनाकी अनुक्रमको पहिलो n + 1 संख्याहरूको सूची फिर्ता गर्नुपर्नेछ। उदाहरणः tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"सकारात्मक पूर्णांक n दिइएको छ भने, अनौठो अंकहरूको गुणनफल फर्काउनुहोस्। यदि सबै अंकहरू सम छन् भने ० फर्काउनुहोस्। उदाहरणका लागि: अंकहरू ((१) == १ अंकहरू ((४) == ० अंकहरू ((२३५) == १५ \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''एउटा प्रकार्य सिर्जना गर्नुहोस् जसले केवल वर्ग कोष्ठकहरू समावेश गरेको स्ट्रिङलाई इनपुटको रूपमा लिन्छ। फंक्शनले True फर्काउनु पर्छ यदि र केवल यदि त्यहाँ कोष्ठकहरूको वैध उपक्रम छ जहाँ कम्तिमा एउटा कोष्ठक उपक्रममा नेस्टेड छ। is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"तपाईँलाई संख्याहरूको सूची दिइएको छ। तपाईँले दिइएको सूचीमा भएको संख्याहरूको वर्गको योग फर्काउनु पर्छ, सूचीमा प्रत्येक तत्वलाई माथिल्लो int ((छत) मा राउन्ड गर्नुहोस्। उदाहरणहरू: lst = [१,२,३] को लागि आउटपुट १४ हुनुपर्दछ lst = [१,४,९] को लागि आउटपुट ९८ हुनुपर्दछ lst = [१,३,५,७] को लागि आउटपुट ८४ हुनुपर्दछ lst = [१,४,२,०] को लागि आउटपुट २९ हुनुपर्दछ lst = [२,४,१] को लागि आउटपुट ६ हुनुपर्दछ \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''एउटा प्रकार्य सिर्जना गर्नुहोस् जुन फर्काउँछ True यदि दिइएको स्ट्रिङको अन्तिम क्यारेक्टर वर्णमाला क्यारेक्टर हो र शब्दको भाग होइन, र अन्यथा False। नोटः \"शब्द\" वर्णहरूको समूह हो जुन स्पेसद्वारा अलग गरिएको छ। उदाहरणहरूः check_if_last_char_is_a_letter ((\"apple pie\") â -> False check_if_last_char_is_a_letter ((\"apple pi e\") â -> True check_if_last_char_is_a_letter ((\"apple pi e\") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"एउटा प्रकार्य सिर्जना गर्नुहोस् जुन एउटा तत्वको सबैभन्दा ठूलो अनुक्रमणिका फर्काउँछ जुन त्यसभन्दा तुरुन्त अघिल्लो तत्व भन्दा ठूलो वा बराबर हुँदैन। यदि त्यस्तो कुनै तत्व अवस्थित छैन भने फिर्ता -१। दिइएको एर्रेमा दोहोर्याइएको मानहरू समावेश हुँदैन। उदाहरणहरूः can_arrange (([१,२,४,३,५)) = can_arrange ([१,२,३,३)) = -१ \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''एउटा फंक्शन सिर्जना गर्नुहोस् जसले टपल (a, b) फर्काउँछ, जहाँ 'a' नकारात्मक पूर्णांकहरूको सबैभन्दा ठूलो हो, र 'b' सूचीमा सकारात्मक पूर्णांकहरूको सबैभन्दा सानो हो। यदि त्यहाँ कुनै नकारात्मक वा सकारात्मक पूर्णांकहरू छैनन् भने, तिनीहरूलाई None को रूपमा फर्काउनुहोस्। उदाहरणहरूः largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"एक प्रकार्य बनाउनुहोस् जसले पूर्णांकहरू, फ्लोट्स, वा स्ट्रिंगहरू वास्तविक संख्याहरूको प्रतिनिधित्व गर्दछ र यसको दिइएको चर प्रकारमा ठूलो चर फिर्ता गर्दछ। यदि मानहरू बराबर छन् भने कुनै पनि फर्काउँदैन। नोटः यदि वास्तविक संख्या स्ट्रिंगको रूपमा प्रतिनिधित्व गरिएको छ भने, फ्लोटिंग पोइन्ट हुन सक्छ . वा , तुलना_एक, २.५) â -> २.५ तुलना_एक, \"२,३\") â -> \"२,३\" तुलना_एक, \"५,१\", \"६\") â -> \"६\" तुलना_एक, \"१\", १) â -> कुनै पनि छैन \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"दिइएको संख्या n लाई ठीक 4 सकारात्मक सम संख्याहरूको योगको रूपमा लेख्न सकिन्छ कि भनेर मूल्याङ्कन गर्नुहोस् उदाहरण is_equal_to_sum_even (४) == गलत is_equal_to_sum_even (६) == गलत is_equal_to_sum_even (८) == सत्य \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राजिलियन फ्याक्टोरियललाई परिभाषित गरिएको छः ब्राजिलियन_फ्याक्टोरियल ((n) = n! * (n-1)! * (n-2)! * ... * 1! जहाँ n > 0 उदाहरणका लागि: >>> विशेष_फ्याक्टोरियल ((4) 288 फंक्शनले इनपुटको रूपमा पूर्णांक प्राप्त गर्दछ र यस पूर्णांकको विशेष फ्याक्टोरियल फर्काउनुपर्दछ। \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_उदाहरण-3दिइएको छ, यसमा सबै खाली स्थानहरू अण्डरस्कोरहरूसँग बदल्नुहोस्, र यदि स्ट्रिङमा २ भन्दा बढी लगातार खाली स्थानहरू छन् भने, त्यसपछि सबै लगातार खाली स्थानहरूसँग बदल्नुहोस् - fix_spaces ((\"उदाहरण\") == \"उदाहरण\" fix_spaces ((\"उदाहरण१\") == \"उदाहरण१\" fix_spaces (((\"उदाहरण२\") == \"_उदाहरण२\" fix_spaces ((\"उदाहरण ३\") == \"_उदाहरण-३\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"एउटा प्रकार्य सिर्जना गर्नुहोस् जसले फाइलको नाम प्रतिनिधित्व गर्ने स्ट्रिङ लिन्छ, र यदि फाइलको नाम मान्य छ भने 'हो' फर्काउँछ, र अन्यथा 'होइन' फर्काउँछ। फाइलको नाम मान्य मानिन्छ यदि र केवल यदि निम्न सबै सर्तहरू पूरा भएमा मात्रः - फाइलको नाममा तीन भन्दा बढी अंकहरू ('0'-'9') हुनु हुँदैन। - फाइलको नाममा ठ्याक्कै एउटा डट '.' हुनु हुँदैन। - डट अघि सबस्ट्रिंग खाली हुनु हुँदैन, र यो ल्याटिन अल्फापेटको अक्षरबाट सुरु हुन्छ ('a'-'z' र 'A'Z'). - डट पछि सबस्ट्रिंग यी मध्ये एक हुनुपर्दछः ['txt', 'exe', 'll'] उदाहरणहरूः file_name_check\"{example.txt.txt\") # => 'हो' file_name_check\"{example.txt.tll\") => 'होइन' (नाम ल्याटिन अल्फापेटको अक्षरबाट सुरु हुनुपर्दछ) # => 'होइन' (नाम ल्याटिन अल्फापेटको अक्षरबाट सुरु हुनुपर्दछ)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" यो फंक्शनले पूर्णांकहरूको सूची लिनेछ। सूचीमा सबै प्रविष्टिहरूको लागि, फंक्शनले पूर्णांक प्रविष्टिलाई वर्गमा राख्नुपर्दछ यदि यसको अनुक्रमणिका 3 को गुणक हो र पूर्णांक प्रविष्टिलाई घन बनाउँदछ यदि यसको अनुक्रमणिका 4 को गुणक हो र 3 को गुणक होइन। फंक्शनले सूचीमा प्रविष्टिहरू परिवर्तन गर्दैन जसको अनुक्रमणिका 3 वा 4 को गुणक होइन। फंक्शनले सबै प्रविष्टिहरूको योगफल फर्काउँछ। उदाहरणः lst = [1,2,3] को लागि आउटपुट 6 हुनुपर्दछ lst = [] को लागि आउटपुट 0 हुनुपर्दछ lst = [-1,-5,2,-1,-5] को लागि आउटपुट -126 हुनुपर्दछ \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"तपाईँलाई एउटा वाक्यको प्रतिनिधित्व गर्ने स्ट्रिङ दिइएको छ, वाक्यमा केही शब्दहरू स्पेसद्वारा अलग गरिएको छ, र तपाईँले मूल वाक्यका शब्दहरू समावेश गरेको स्ट्रिङ फर्काउनु पर्छ, जसको लम्बाइहरू अभाज्य संख्याहरू हुन्, नयाँ स्ट्रिङमा शब्दहरूको क्रम मूलको जस्तै हुनुपर्छ। उदाहरण १ः इनपुटः वाक्य = \"यो एउटा परीक्षण हो\" आउटपुटः \"हो\" उदाहरण २ः इनपुटः वाक्य = \"स्विमिङका लागि जान्छ\" आउटपुटः \"जाओ\" प्रतिबन्धहरूः * १ <= len(sentence) <= १०० * वाक्यमा अक्षरहरू मात्र समावेश छन् \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"तपाईँको कार्य भनेको एउटा यस्तो प्रकार्य कार्यान्वयन गर्नु हो जसले x * n अभिव्यक्तिलाई सरल बनाउनेछ। यदि x * n को मान पूर्णाङ्क हो भने यो प्रकार्यले True फर्काउँछ र अन्यथा False फर्काउँछ। x र n दुवै भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न भिन्न\"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"एक प्रकार्य लेख्नुहोस् जसले दिइएको पूर्णांकहरूको सूचीलाई तिनीहरूको अंकहरूको योग अनुसार आरोही क्रममा क्रमबद्ध गर्दछ। नोटः यदि त्यहाँ धेरै वस्तुहरू छन् भने तिनीहरूको अंकहरूको समान योगको साथ, तिनीहरूलाई मूल सूचीमा तिनीहरूको अनुक्रमणिकाको आधारमा क्रमबद्ध गर्नुहोस्। उदाहरणका लागिः >>> order_by_points (([१, ११, -१, -११, -१२)) == [१, -११, १, -१२, ११] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् जसले संख्याहरूको एर्रेलाई इनपुटको रूपमा लिन्छ र एर्रेमा एलिमेन्टहरूको संख्या फर्काउँछ जुन १० भन्दा ठूलो छ र संख्याको पहिलो र अन्तिम अंक दुबै अनौंठो (१, ३, ५, ७, ९) हो। उदाहरणका लागिः specialFilter (([१५, -७३, १४, -१५]) => १ specialFilter (([33, -२, -३, ४५, २१, १०९)) => २ \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"तपाईंलाई सकारात्मक पूर्णांक n दिइएको छ। तपाईंले लम्बाई n को पूर्णांक एरे सिर्जना गर्नुपर्नेछ। प्रत्येक i (1 ‰¤ i ‰¤ n) को लागि, a[i] = i * i - i + 1 को मान। a को ट्रिपलहरूको संख्या (a[i], a[j], a[k]) फर्काउनुहोस् जहाँ i < j < k, र a[i] + a[j] + a[k] 3 को गुणक हो। उदाहरणः इनपुटः n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] मात्र मान्य ट्रिपल (1, 7, 13) हो।\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''सौर्यमण्डलमा आठ ग्रहहरू छन्: सूर्यको सबैभन्दा नजिकको ग्रह बुध, अर्को शुक्र, त्यसपछि पृथ्वी, मंगल, बृहस्पति, शनि, युरेनस, नेप्च्युन। एउटा यस्तो प्रकार्य लेख्नुहोस् जसले ग्रह १ र ग्रह २ को तारको रूपमा दुई ग्रहको नाम लिन्छ। फंक्शनले सूर्यको नजिकको कक्षा र ग्रह १ को कक्षा बीचमा अवस्थित सबै ग्रहहरू समावेश गरेको टपल फिर्ता गर्नुपर्दछ। यदि ग्रह १ वा ग्रह २ सही ग्रह नामहरू होइन भने फंक्शनले खाली टपल फिर्ता गर्नुपर्दछ। उदाहरणहरू bf \"(जुपिटर\", \"नेप्च्यून\") ==> (\"शनि\", \"युरेनस\") bf \"(पृथ्वी\", \"मेर्क्व्यू\") ==> (\"शुक्र\") bf \"(मेर्क्व्यू\", \"युरेनस\") ==> (\"शुक्र\", \"पृथ्वी\", \"मंगल\", \"जुपिटर\", \"शनि\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् जसले स्ट्रिंगहरूको सूचीलाई प्यारामिटरको रूपमा स्वीकार गर्दछ, त्यसबाट अनौठो लम्बाई भएका स्ट्रिंगहरू मेटाउँछ, र क्रमबद्ध क्रमको साथ परिणाम सूची फर्काउँछ। सूची सँधै स्ट्रिंगहरूको सूची हो र कहिले पनि संख्याहरूको एरे हुँदैन, र यसले डुप्लिकेटहरू समावेश गर्न सक्छ। सूचीको क्रम प्रत्येक शब्दको लम्बाई द्वारा आरोही हुनुपर्दछ, र तपाईंले त्यो नियम द्वारा क्रमबद्ध सूची फर्काउनु पर्छ। यदि दुई शब्दहरूको लम्बाई समान छ भने, सूचीलाई वर्णमाला क्रमबद्ध गर्नुहोस्। प्रकार्यले क्रमबद्ध क्रममा स्ट्रिंगहरूको सूची फर्काउनुपर्दछ। तपाईं मान्न सक्नुहुन्छ कि सबै शब्दहरूको लम्बाई समान हुनेछ। उदाहरणका लागिः assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"एउटा साधारण कार्यक्रम जसले x को मान फर्काउनु पर्छ यदि n एक अभाज्य संख्या हो र y को मान फर्काउनु पर्छ अन्यथा। उदाहरणः x_or_y ((7, 34, 12) == 34 x_or_y ((15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''संख्याहरूको सूची दिइएको छ, सूचीमा संख्याहरूको वर्गहरूको योग फर्काउनुहोस् जुन अनौंठो छन्। नकारात्मक वा पूर्णांक नभएका संख्याहरूलाई वेवास्ता गर्नुहोस्। double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 यदि इनपुट सूची खाली छ भने, ० फर्काउनुहोस्। '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"मलाई लाग्छ हामी सबैलाई त्यो भावना याद छ जब कुनै लामो समयदेखि प्रतिक्षा गरिएको घटनाको परिणाम अन्ततः थाहा हुन्छ। त्यस क्षणमा तपाईसँग भएका भावना र विचारहरू निश्चित रूपमा नोट गर्न र तुलना गर्न लायक छन्। तपाईंको कार्य भनेको एक व्यक्तिले धेरै संख्यामा मेल खाने परिणामहरू सही अनुमान गरेको छ कि छैन भनेर निर्धारण गर्नु हो। तपाईंलाई दुईवटा स्कोर र अनुमानको समान लम्बाई दिइन्छ, जहाँ प्रत्येक अनुक्रमणिकाले मेल खान्छ। समान लम्बाईको एरे फिर्ता गर्नुहोस् जुन प्रत्येक अनुमान कति टाढा छ भनेर दर्साउँछ। यदि उनीहरूले सही अनुमान गरेका छन् भने मान ० हो, र यदि होईन भने मान अनुमान र स्कोर बीचको निरपेक्ष भिन्नता हो। उदाहरणः (([१,२,३,४,५,१], [१,२,३,४,२,२]) -> [०,०,०,०,३,३] तुलना गर्नुहोस् [०,५,०,०४,०,१,०,२]) -> [४,०,१,०,०,६]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"तपाईँलाई एउटा वर्गको नाम (एक स्ट्रिङ) र विस्तारहरूको सूची दिइएको छ। विस्तारहरू वर्गमा थप वर्गहरू लोड गर्न प्रयोग गरिनेछ। विस्तारको शक्ति निम्नानुसार छ: CAP विस्तारको नाममा ठूला अक्षरहरूको संख्या होस्, र SM विस्तारको नाममा सानो अक्षरहरूको संख्या होस्, शक्ति अंश CAP - SM द्वारा दिइएको छ। तपाईँले सबैभन्दा बलियो विस्तार खोज्नुपर्छ र यो ढाँचामा एउटा स्ट्रिङ फर्काउनुपर्छ: ClassName.StrongestExtensionName. यदि एउटै शक्ति भएका दुई वा बढी विस्तारहरू छन् भने तपाईँले सूचीमा पहिलो हुने एउटा चयन गर्नुपर्छ। उदाहरणका लागि, यदि तपाईँलाई \"Slices\" वर्गको रूपमा दिइएको छ र विस्तारहरूको सूचीः ['SEvirNGliSCes', 'Cheese', 'StuFfed' त्यसपछि तपाईँले 'Slices.SEvirNGliCes' फर्काउनुपर्छ किनकि 'SvirNGliCes' 'mySvirNGliCes' (MySvirNGliCes') 'को विस्तार बलियो छ', उदाहरणका लागि 'AA' = 'Strongest_Class' (अन्तर्गत) ।\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"तपाईँलाई २ शब्द दिइएको छ। तपाईँले True फर्काउनु पर्छ यदि दोस्रो शब्द वा यसको कुनै पनि घुमाव पहिलो शब्दमा सबस्ट्रिंग हो भने cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"एक पूर्णांक दिइएको छ. एक टपल फर्काउँछ जुन क्रमशः सम र विषम अंकहरूको संख्या छ। उदाहरणः even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"सकारात्मक पूर्णांक दिइएको छ, यसको रोमन अंक बराबर स्ट्रिंगको रूपमा प्राप्त गर्नुहोस्, र यसलाई सानो अक्षरमा फर्काउनुहोस्। प्रतिबन्धहरूः १ <= संख्या <= १००० उदाहरणहरूः >>> int_to_mini_roman ((१)) == 'xix' >>> int_to_mini_roman ((१)) == 'clii' >>> int_to_mini_roman ((२)) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''त्रिकोणको तीन पक्षको लम्बाई दिइएको छ। यदि तीन पक्षले दायाँ कोणको त्रिकोण बनाउँछ भने सही फर्काउनुहोस्, अन्यथा गलत। दायाँ कोणको त्रिकोण एक त्रिकोण हो जसमा एक कोण दायाँ कोण वा 90 डिग्री हो। उदाहरणः right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"एउटा प्रकार्य लेख्नुहोस् जसले स्ट्रिङहरूको सूची स्वीकार गर्दछ। सूचीमा विभिन्न शब्दहरू छन्। अधिकतम संख्यामा अद्वितीय वर्णहरूको साथ शब्द फिर्ता गर्नुहोस्। यदि बहु स्ट्रिंगहरूमा अधिकतम संख्यामा अद्वितीय वर्णहरू छन् भने, लेक्सिकोग्राफिक क्रममा पहिलो आउँछ। find_max (([\"नाम\", \"को\", \"स्ट्रिंग\"]) == \"स्ट्रिंग\" find_max (([\"नाम\", \"enam\", \"खेल\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"तपाईं एक भोक खरगोश हुनुहुन्छ, र तपाईंले पहिले नै गाजरको एक निश्चित संख्या खाएको छ, तर अब तपाईं दिनको भोजन पूरा गर्न थप गाजर खान आवश्यक छ. तपाईं एक एरे फिर्ता गर्नुपर्छ [तपाईंको भोजन पछि खाएको गाजरको कुल संख्या, तपाईंको भोजन पछि बाँकी गाजरको संख्या ] यदि त्यहाँ पर्याप्त बाँकी गाजर छैन भने, तपाईं सबै बाँकी गाजर खानुहुनेछ, तर अझै पनि भोका हुनेछ। उदाहरणः * खाओ ((5, 6, 10) -> [11, 4] * खाओ ((4, 8, 9) -> [12, 1] * खाओ ((1, 10, 10) -> [11, 0] * खाओ ((2, 11, 5) -> [7, 0] भेरिएबलः @number: पूर्णांक तपाईंले खाएको गाजरको संख्या. @need:: पूर्णांक तपाईंले खानुपर्ने गाजरको संख्या. @remaining:: पूर्णांक स्टकमा बाँकी गाजरको संख्याः * constrain = 0 = <= 0 * 1000 = <= 1000 = 0 * बाँकी <= 1000 = <= 1000 = मजा लिनुहोस्:)\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"दुई सूचीहरू अपरेटर र अपरेन्ड दिइएको छ। पहिलो सूचीमा आधारभूत बीजगणित अपरेसनहरू छन्, र दोस्रो सूची पूर्णांकहरूको सूची हो। बीजगणित अभिव्यक्ति निर्माण गर्न दुई दिइएको सूचीहरू प्रयोग गर्नुहोस् र यस अभिव्यक्तिको मूल्यांकन फिर्ता गर्नुहोस्। आधारभूत बीजगणित अपरेसनहरूः थप (+) घटाउने (-)) गुणा (*) फ्लोर डिभिजन ( //) एक्सपोनन्टि ( ** उदाहरण) अपरेटर ['+', '*', '-'] एर्रे = [२, ३, ४, ५] परिणाम = २ + ३ * ४ - ५ => परिणाम = ९ नोटः अपरेटरहरूको सूचीको लम्बाई अपरेन्ड सूचीको लम्बाई बराबर हुन्छ। अपरेन्ड गैर-नकारात्मक पूर्णांकहरूको सूची हो। अपरेटर सूचीमा कम्तिमा एक अपरेटर हुन्छ, र अपरेन्ड सूचीमा कम्तिमा दुई अपरेन्डहरू हुन्छन्। \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"यदि string मा कुनै अक्षर छैन भने string लाई उल्टाउनुहोस। फंक्शनले नतिजा string फर्काउनु पर्छ। उदाहरण solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"यदि 'text' खाली string हो भने, None फर्काउनुहोस्. >>> string_to_md5 (('हेलो संसार') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "npi_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"दुई सकारात्मक पूर्णांक a र b दिइएको छ, a र b बीचको सम अंकहरू, बढ्दो क्रममा फर्काउनुहोस्। उदाहरणका लागिः generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]