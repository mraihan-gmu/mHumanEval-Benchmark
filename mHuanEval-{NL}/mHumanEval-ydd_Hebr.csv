task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ydd_Hebr,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""טשעק אויב אין געגעבן רשימה פון נומערן, זענען קיין צוויי נומערן נעענטער צו יעדער אנדערע ווי געגעבן טהרעשאָלד. בייַשפּיל: >>> האט_קליוז_עלעמענטן (([1.0, 2.0, 3.0], 0.5) פאַלש >>> האט_קליוז_עלעמענטן (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) אמת """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ydd_Hebr,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""יפּוט צו דעם פונקציע איז אַ שטריקל קאַנטיינד קייפל גרופּעס פון נעסטעד פּאַראַנטהעזעס. דיין ציל איז צו צעשיידט די גרופּע אין באַזונדער סטרינגס און צוריקקומען די רשימה פון יענע. באַזונדער גרופּעס זענען באַלאַנסט (יעדע עפענען בראַקעס איז ריכטיק פארמאכט) און ניט נעסטעד ין יעדער אנדערע איגנאָרירן קיין ספּייסאַז אין די ינפּוט שטריקל. בייַשפּיל: >>> separate_paren_groups'(( ) (() (( ) ) ) ) '['() ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ydd_Hebr,python,"

def truncate_number(number: float) -> float:
    """"""געגעבן אַ positive פלאָוטינג פונט נומער, עס קענען זיין דיקאַמפּאָוזד אין און ינטאַדזשער טייל (גרעסטער ינטאַדזשער קלענערער ווי געגעבן נומער) און דעצימאַלס (לעפט איבער טייל שטענדיק קלענערער ווי 1). צוריקקומען די דעצימאַל טייל פון די נומער. בייַשפּיל: >>> טרונקאַייט_נומער ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ydd_Hebr,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""איר זענט געגעבן אַ רשימה פון אַוועקלייגן און ווידדראָאַל אַפּעריישאַנז אויף אַ באַנק חשבון אַז הייבט מיט נול וואָג. דיין אַרבעט איז צו דעטעקט אויב אין קיין פונט די וואָג פון חשבון פאלס אונטער נול, און אין אַז פונט פונקציע זאָל צוריקקומען אמת. אַנדערש עס זאָל צוריקקומען פאַלש. בייַשפּיל: >>> אונטער_נול (([1, 2, 3]) פאַלש >>> אונטער_נול (([1, 2, -4, 5]) אמת """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ydd_Hebr,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""פֿאַר אַ געגעבן רשימה פון ינפּוט נומערן, רעכענען מיטל אַבסאָלוט דעוויאַישאַן אַרום די מיטל פון דעם דאַטאַסעט. מיטל אַבסאָלוט דעוויאַישאַן איז די דורכשניטלעך אַבסאָלוט חילוק צווישן יעדער עלעמענט און אַ צענטערפּונקט (מאָס אין דעם פאַל): MAD = דורכשניטלעך. x - x_מעאַן. בייַשפּיל: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ydd_Hebr,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""אַרייַנלייגן אַ נומער 'דילימעטער' צווישן יעדער צוויי קאָנסעקוטיווע עלעמענטן פון ינפּוט רשימה `numbers' >>> ינטערספּערסע([], 4) [] >>> ינטערספּערסע([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ydd_Hebr,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""אין דעם פונקציע איז א סטרינג וואס רעפרעזענטירט מערערע גרופעס פאר נעסטעד קארענטעז אפגעשיידט דורך ספעיסעס. פאר יעדע פון די גרופעס, לייגט ארויס די טיפעסטע לעוועל פון נעסטעד קארענטעז. למשל (() (()) האט מאקסימום צוויי לעוועלס פון נעסטעד, בשעת ((())) האט דריי. >>> parse_nested_parens (('((()) ((())) () (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ydd_Hebr,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""פילטער אַ ינפּוט רשימה פון סטרינגס בלויז פֿאַר די וואָס אַנטהאַלטן געגעבן סאַבסטררינג >>> filter_by_substring([], 'אַ') [] >>> filter_by_substring(['אַבק', 'באַקד', 'קדע', 'אַררייַ'], 'אַ') ['אַבק', 'באַקד', 'אַררייַ'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ydd_Hebr,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""פֿאַר אַ געגעבן רשימה פון ינטיידזשערז, צוריקקומען אַ טופּל קאַנסיסטינג פון אַ סומע און אַ פּראָדוקט פון אַלע די ינטיידזשערז אין אַ רשימה. ליידיק סומע זאָל זיין גלייַך צו 0 און ליידיק פּראָדוקט זאָל זיין גלייַך צו 1. >>> סומע_פּראָדוקט (([]) (0, 1) >>> סומע_פּראָדוקט (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ydd_Hebr,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""פֿון אַ געגעבן רשימה פון ינטיידזשערז, דזשענערייט אַ רשימה פון ראָולינג מאַקסימום עלעמענט געפֿונען ביז געגעבן מאָמענט אין די סיקוואַנס. >>> ראָולינג_מאַקס (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ydd_Hebr,python,"

def is_palindrome(string: str) -> bool:
    """"""געפינען די שאָרטיסט פּאַלינדראָם וואָס הייבט מיט אַ סאַפּלייד שטריקל. אַלגערידאַם געדאַנק איז פּשוט: - געפינען די לאָנגעסט פּאָסטפיקס פון סאַפּלייד שטריקל וואָס איז אַ פּאַלינדראָם. - צוטשעפּען צו די סוף פון די שטריקל פאַרקערט פון אַ שטריקל פּרעפיקס וואָס קומט איידער די פּאַלינדראָמיק סאַפיקס. >>> מאַכן_פּאַלינדראָם ((('') ' ' >>> מאַכן_פּאַלינדראָם ((('קאַטאַק') 'קאַטאַק' >>> מאַכן_פּאַלינדראָם ((('קאַטאַק') 'קאַטאַק' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""פּרובירן אויב געגעבן שטריקל איז אַ פּאַלינדראָם """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ydd_Hebr,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""אַרייַנפיר זענען צוויי סטרינגס אַ און ב קאַנסיסטינג בלויז פון 1 ס און 0 ס. דורכפירן ביינערי קסאָר אויף די ינפּוץ און צוריקקומען רעזולטאַט אויך ווי אַ שטריקל. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ydd_Hebr,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""אויס פון ליסטע פון סטרינגס, צוריקקומען די לענגסטע. צוריקקומען די ערשטע אין פאל פון מערערע סטרינגס פון די זעלבע לענג. צוריקקומען קיין אויב די ינפּוט ליסטע איז ליידיק. >>> לענגסטע([]) >>> לענגסטע(['א', 'ב', 'ג']) 'א' >>> לענגסטע(['א', 'ב', 'קק']) 'קק' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ydd_Hebr,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""צוריקקומען אַ גרעסטע פּראָסט דיוויזאָר פון צוויי ינטעדזשערז אַ און ב >>> גרעסטע_פֿאַרשפּרייט_דיוויזאָר ((3, 5) 1 >>> גרעסטע_פֿאַרשפּרייט_דיוויזאָר ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ydd_Hebr,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""צוריקקומען רשימה פון אַלע פּרעפיקסעס פון שאָרטיסט צו לאָנגעסט פון די ינפּוט שטריקל >>> all_prefixes('abc') ['אַ', 'אַב', 'אַבק'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ydd_Hebr,python,"

def string_sequence(n: int) -> str:
    """"""צוריקקומען אַ שטריקל וואָס כּולל ספּייס-דילימעד נומערן סטאַרטינג פון 0 אַרויף צו n ינקלוסיוו. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ydd_Hebr,python,"

def count_distinct_characters(string: str) -> int:
    """"""געגעבן אַ שטריקל, געפינען אויס ווי פילע באַזונדער אותיות (אָפֿרויס פון פאַל) טוט עס באשטייט פון >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('גערי') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ydd_Hebr,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""ינטאַפּ צו דעם פונקציע איז אַ שטריקל רעפּריזענטינג מוזיקאַליש הערות אין אַ ספּעציעל אַסקי פֿאָרמאַט. דיין אַרבעט איז צו פּאַרס שטריקל רשימה פון ינטעגרעס קאָראַספּאַנדינג צו פילע ביץ טוט. דאָ איז אַ לעגענדע: 'אָ' טאָן, לעצט ביץ 'אָ' - ראָש - האַלב טאָן, לעצט צוויי ביץ 'א' - קוואַטער טאָן, לעצט איין באַט >>> פּאַרסע_מוזיק. 'אָ' אָ .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ydd_Hebr,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""געפינען ווי פילע מאל אַ געגעבן סאַבסטראַנג קענען זיין געפֿונען אין דער אָריגינעל שטריקל. ציילן אָוווערלאַפּינג פאלן. >>> ווי_פיל_צייטן('', 'אַ') 0 >>> ווי_פיל_צייטן('אַאַ', 'אַ') 3 >>> ווי_פיל_צייטן('אַאַ', 'אַאַ') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ydd_Hebr,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""אַרייַנפיר איז אַ פּלאַץ-דילימאַטעד שטריקל פון נומעראַלס פון 'נול' צו 'ניין'. גילטיק ברירות זענען 'נול', 'איין', 'צוויי', 'דרייַ', 'פיר', 'פופֿץ', 'זעקס', 'זיבן', 'אכט' און 'ניין'. צוריקקומען די שטריקל מיט נומערן סאָרטיד פון קלענסטער צו גרעסטער >>> sort_numbers (('דרייַ איין פינף') 'איין דריי פינף' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ydd_Hebr,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""פֿון אַ צוגעשטעלטע רשימה פון נומערן (פון לענג בייַ מינדסטער צוויי) אויסקלייַבן און צוריקקומען צוויי וואָס זענען די קלאָוסאַסט צו יעדער אנדערע און צוריקקומען זיי אין סדר (מינער נומער, גרעסערע נומער). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ydd_Hebr,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""געגעבן ליסטע פון נומערן (פון כאטש צוויי עלעמענטן), לייג אן א לינעארע טראנספארמאציע צו יענע ליסטע, אזוי אז די קלענסטע נומער וועט ווערן 0 און די גרעסטע וועט ווערן 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ydd_Hebr,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""פילטער געגעבן ליסטע פון קיין פּיטהאָן וואַלועס בלויז פֿאַר ינטעדזשערז >>> filter_integers(['אַ', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'אַבק', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ydd_Hebr,python,"

def strlen(string: str) -> int:
    """"""צוריקקומען לענג פון געגעבן שטריקל >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ydd_Hebr,python,"

def largest_divisor(n: int) -> int:
    """"""פֿאַר אַ געגעבן נומער n, געפֿינען די גרעסטע נומער וואָס דיווידז n יוואַנלי, קלענערער ווי n >>> גרעסטע_דיוויזאָר ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ydd_Hebr,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""צוריקקומען רשימה פון פריים פאַקטאָריסעס פון געגעבן ינטייגער אין סדר פון קלענסטער צו גרעסטער. יעדער פון די פאַקטאָרס זאָל זיין ליסטעד נומער פון מאל קאָראַספּאַנדינג צו ווי פילע מאל עס ערשיינט אין פאַקטאָריזאַטיאָן. ינפּוט נומער זאָל זיין גלייַך צו די פּראָדוקט פון אַלע פאַקטאָרס >>> פאַקטאָריזע ((8) [2, 2, 2] >>> פאַקטאָריזע ((25) [5, 5] >>> פאַקטאָריזע ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ydd_Hebr,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""פון א ליסטע פון אינטעדזשערס, נעמט אוועק אלע עלעמענטן וואס קומען פאר מער ווי איינמאל. האלט סדר פון עלעמענטן לינקס די זעלבע ווי אין די אינפּוט. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ydd_Hebr,python,"

def flip_case(string: str) -> str:
    """"""פֿאַר אַ געגעבן שטריקל, פליפּ קליינע אותיות צו הויך און הויך צו קליינע אותיות. >>> flip_case ((('העלא') 'העלא' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ydd_Hebr,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""קאָנקאַטענאַטע רשימה פון סטרינגס אין אַ איין סטרינג >>> קאָנקאַטענאַטע (([]) '' >>> קאָנקאַטענאַטע ((['אַ', 'ב', 'ג']) 'אַבק' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ydd_Hebr,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""פילטערן אַן ינפּוט רשימה פון סטרינגס בלויז פֿאַר די וואָס אָנהייבן מיט אַ געגעבן פּרעפיקס. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ydd_Hebr,python,"

def get_positive(l: list):
    """"""צוריקקומען בלויז positive נומערן אין דער רשימה. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ydd_Hebr,python,"

def is_prime(n):
    """"""צוריקקומען אמת אויב אַ געגעבן נומער איז פּריים, און פאַלש אַנדערש. >>> איז_פּרימע (א) (6) פאַלש >>> איז_פּרימע (א) 101) אמת >>> איז_פּרימע (א) 11 אמת >>> איז_פּרימע (א) 13441) אמת >>> איז_פּרימע (א) 61 אמת >>> איז_פּרימע (א) 4) פאַלש >>> איז_פּרימע (א) פאַלש """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ydd_Hebr,python,"import math


def poly(xs: list, x: float):
    """"""xs זענען קאָעפיסיענטן פון אַ פּאַלינאָמיאַל. find_zero געפינען x אַזאַ אַז poly(x) = 0. find_zero ריטורנס בלויז בלויז נול פונט, אַפֿילו אויב עס זענען פילע. דערצו, find_zero נאָר נעמט רשימה xs מיט אַ פּאַר נומער פון קאָעפיסיענטן און גרעסטע ניט-נול קאָעפיסיענט ווי עס געראַנטיז אַ לייזונג. >>> קייַלעכיק ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> קייַלעכיק ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""עוואַלואַטעס פּאַלינאָמיאַל מיט קאָעפיסיענטן xs אין פונט x. צוריקקומען xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ydd_Hebr,python,"

def sort_third(l: list):
    """"""די פונקציע נעמט אַ רשימה ל' און גיט צוריק אַ רשימה ל' אַזאַ אַז ל' איז יידעניקאַל צו ל אין די ינדעסיז וואָס זענען נישט דיוויידזשאַבאַל דורך דרייַ, בשעת זייַן וואַלועס אין די ינדעסיז וואָס זענען דיוויידזשאַבאַל דורך דרייַ זענען גלייַך צו די וואַלועס פון די קאָראַספּאַנדינג ינדעסיז פון ל, אָבער סאָרטעד. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ydd_Hebr,python,"

def unique(l: list):
    """"""צוריקקומען סאָרטעד יינציק עלעמענטן אין אַ רשימה >>> יינציק (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ydd_Hebr,python,"

def max_element(l: list):
    """"""צוריקקומען מאַקסימום עלעמענט אין דער רשימה. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ydd_Hebr,python,"

def fizz_buzz(n: int):
    """"""צוריקקומען די נומער פון מאל די ציפער 7 ערשיינט אין ינטיידזשערז ווייניקער ווי n וואָס זענען דיוויידזשאַבאַל דורך 11 אָדער 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ydd_Hebr,python,"

def sort_even(l: list):
    """"""די פונקציע נעמט א ליסטע l און גיט צוריק א ליסטע l' אז l' איז אידענטישע צו l אין די אומגעלייגטע אינדעסיעס, בשעת די ווערטען ביי די פּערדיגע אינדעסיעס זענען גלייך צו די ווערטען פון די פּערדיגע אינדעסיעס פון l, אבער סארטירט. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ydd_Hebr,python,"

def encode_cyclic(s: str):
    """"""נעמט ווי ינפּוט שטריקל ענקאָדעד מיט ענקאָדע_סיקלאַק פונקציע. ריטורנס דיקאָדעד שטריקל. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""קערט ענקאָדעד שטריקל דורך סייקלינג גרופּעס פון דרייַ אותיות. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ydd_Hebr,python,"

def prime_fib(n: int):
    """"""prime_fib גיט צוריק די n-טע נומער וואס איז א פיבאנאצקי נומער און עס איז אויך א פריים. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ydd_Hebr,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero נעמט אַ רשימה פון ינטיידזשערז ווי אַן אַרייַנפיר. עס קערט אמת אויב עס זענען דריי באַזונדער עלעמענטן אין דער רשימה אַז סומע צו נול, און פאַלש אַנדערש. >>> triples_sum_to_zero([1, 3, 5, 0]) פאַלש >>> triples_sum_to_zero[(1, 3, -2, 1]) אמת >>> triples_sum_to_zero([1, 2, 3, 7]) פאַלש >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) אמת >>> triples_sum_to_zero[1]) פאַלש """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ydd_Hebr,python,"

def car_race_collision(n: int):
    """"""פֿאַרשטייט זיך אַ וועג וואָס איז אַ פּערפעקטלי גלייַך ינפיניטלי לאַנג שורה. n קאַרס זענען דרייווינג לינקס צו רעכט; סיימאַלטייניאַסלי, אַ אַנדערש שטעלן פון n קאַרס זענען דרייווינג רעכט צו לינקס. די צוויי שטעלט פון קאַרס אָנהייבן אויס זייַענדיק זייער ווייַט פון יעדער אנדערע. אַלע קאַרס מאַך אין דער זעלביקער גיכקייַט. צוויי קאַרס זענען געזאָגט צו קאַליידז ווען אַ מאַשין וואָס איז מאָווינג לינקס צו רעכט כאַץ אַ מאַשין וואָס איז מאָווינג רעכט צו לינקס. אָבער, די קאַרס זענען ינפיניטלי סטראָובאַל און שטאַרק; ווי אַ רעזולטאַט, זיי פאָרזעצן צו מאַך אין זייער טראַקטאָריע ווי אויב זיי האבן נישט קאַליידז. דעם פונקציע אויסגעט די נומער פון אַזאַ קאַלאַזיאַנז. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ydd_Hebr,python,"

def incr_list(l: list):
    """"""צוריקקומען רשימה מיט עלעמענטן ינקרימענטיד דורך 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ydd_Hebr,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero נעמט אַ רשימה פון ינטיידזשערז ווי אַ ינפּוט. עס קערט אמת אויב עס זענען צוויי באַזונדער עלעמענטן אין דער רשימה אַז סומע צו נול, און פאַלש אַנדערש. >>> pairs_sum_to_zero([1, 3, 5, 0]) פאַלש >>> pairs_sum_to_zero[(1, 3, -2, 1]) פאַלש >>> pairs_sum_to_zero([1, 2, 3, 7]) פאַלש >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) אמת >>> pairs_sum_to_zero[1]) פאַלש """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ydd_Hebr,python,"

def change_base(x: int, base: int):
    """"""טוישן נומעריש באַזע פון ינפּוט נומער קס צו באַזע. צוריקקומען שטריקל רעפּראַזענץ נאָך די קאַנווערזשאַן. באַזע נומערן זענען ווייניקער ווי 10. >>> טוישן_באַזע(8, 3) '22' >>> טוישן_באַזע(8, 2) '1000' >>> טוישן_באַזע(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ydd_Hebr,python,"

def triangle_area(a, h):
    """"""געגעבן לענג פון אַ זייַט און הויך צוריקקומען געגנט פֿאַר אַ דרייַעק. >>> דרייַעק_אַריאַ""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ydd_Hebr,python,"

def fib4(n: int):
    """"""די פיב 4 נומערן סיקוואַנס איז אַ סיקוואַנס ענלעך צו די פיבאָנאַצקי סיקוואַנס וואָס איז דיפיינד ווי גייט: פיב 4 ((0) -> 0 פיב 4 ((1) -> 0 פיב 4 ((2) -> 2 פיב 4 ((3) -> 0 פיב 4 ((n) -> פיב 4 ((n-1) + פיב 4 ((n-2) + פיב 4 ((n-3) + פיב 4 ((n-4). ביטע שרייַבן אַ פונקציע צו יפישאַנטלי רעכענען די n-טע עלעמענט פון די פיב 4 נומערן סיקוואַנס. טאָן ניט נוצן רעקורסיאָן. >>> פיב 4 ((5) 4 >>> פיב 4 ((6) >>> 8 פיב 4 ((7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ydd_Hebr,python,"

def median(l: list):
    """"""צוריקקומען מעדיאַן פון עלעמענטן אין דער רשימה ל. >>> מעדיאַן (([3, 1, 2, 4, 5]) 3 >>> מעדיאַן (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ydd_Hebr,python,"

def is_palindrome(text: str):
    """"""טשעקס אויב געגעבן שטריקל איז אַ פּאַלינדראָם >>> איז_פּאַלינדראָם (('') אמת >>> איז_פּאַלינדראָם (('aba') אמת >>> איז_פּאַלינדראָם (('aaaaa') אמת >>> איז_פּאַלינדראָם (('zbcd') פאַלש """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ydd_Hebr,python,"

def modp(n: int, p: int):
    """"""צוריקקומען 2^n מאָדולאָ פּ (זאָל זיין אַווער פון נומעריקס). >>> מאָדולאָ פּ (א) 3, 5) 3 >>> מאָדולאָ פּ (א) 1, 101) 2 >>> מאָדולאָ פּ (א), 0, 101) 1 >>> מאָדולאָ פּ (א), 3, 11) 8 >>> מאָדולאָ פּ (א) 1, 100 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ydd_Hebr,python,"

def encode_shift(s: str):
    """"""נעמט ווי ינפּוט שטריקל ענקאָדעד מיט ענקאָדע_שיפט פונקציע. ריטורנס דיקאָדעד שטריקל. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""קערט ענקאָדעד שטריקל דורך יבעררוק יעדער כאַראַקטער דורך 5 אין די אַלפאַבע. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ydd_Hebr,python,"

def remove_vowels(text):
    """"""remove_vowels איז א פונקציע וואס נעמט סטרינג און ריטורנז סטרינג אן וואקאלן. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ydd_Hebr,python,"

def below_threshold(l: list, t: int):
    """"""צוריקקומען אמת אויב אַלע נומערן אין דער רשימה ל זענען אונטער טהרעשאָלד ט. >>> below_threshold([1, 2, 4, 10], 100) אמת >>> below_threshold([1, 20, 4, 10], 5) פאַלש """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ydd_Hebr,python,"

def add(x: int, y: int):
    """"""לייג צו צוויי נומערן x און y >>> לייג צו ((2, 3) 5 >>> לייג צו ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ydd_Hebr,python,"

def same_chars(s0: str, s1: str):
    """"""קאָנטראָלירן אויב צוויי ווערטער האָבן די זעלבע אותיות. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') אמת >>> same_chars('abcd', 'dddddddabc') אמת >>> same_chars('dddddddabc', 'abcd') אמת >>> same_chars('eabcd', 'dddddddddabc') פאַלש >>> same_chars('abcd', 'dddddddabddce') פאַלש >>> same_chars'(abcdzzzz', 'dddzzzzzzzddabc') פאַלש """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ydd_Hebr,python,"

def fib(n: int):
    """"""צוריקקומען n-טה פיבאָנאַצקי נומער. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ydd_Hebr,python,"

def correct_bracketing(brackets: str):
    """"""brackets איז א סטרינג פון ""<"" און "">"". return True אויב יעדער עפן בראַקעט האט אַ קאָראַספּאַנדינג קלאָוזינג בראַקעט. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ydd_Hebr,python,"

def monotonic(l: list):
    """"""צוריקקומען אמת איז רשימה עלעמענטן זענען מאָנאָטאָניקלי ינקריסינג אָדער דיקריסינג. >>> מאָנאָטאָניק (([1, 2, 4, 20]) אמת >>> מאָנאָטאָניק (([1, 20, 4, 10]) פאַלש >>> מאָנאָטאָניק (([4, 1, 0, -10]) אמת """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ydd_Hebr,python,"

def common(l1: list, l2: list):
    """"""צוריקקומען סאָרטעד יינציק פּראָסט עלעמענטן פֿאַר צוויי רשימות. >>> פּראָסט (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> פּראָסט (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ydd_Hebr,python,"

def largest_prime_factor(n: int):
    """"""צוריקקומען די גרעסטע פריים פאַקטאָר פון n. נעמט n > 1 און איז נישט אַ פריים. >>> גרעסטע_פריים_פאַקטאָר ((13195) 29 >>> גרעסטע_פריים_פאַקטאָר ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ydd_Hebr,python,"

def sum_to_n(n: int):
    """"""sum_to_n איז א פונקציע וואס סומז נומערן פון 1 ביז n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ydd_Hebr,python,"

def correct_bracketing(brackets: str):
    """"""brackets איז א סטרינג פון ""("" און "")"". צוריקקומען אמת אויב יעדער עפן בראַקעט האט אַ קאָראַספּאַנדינג קלאָוזינג בראַקעט. >>> correct_bracketing(""("") פאַלש >>> correct_bracketing(""() אמת >>> correct_bracketing(""(()) אמת >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ydd_Hebr,python,"

def derivative(xs: list):
    """"""xs רעפּריזענץ קאָעפֿיציענטן פון אַ פּאַלינאָמיאַל. xs[0] + xs[1] * x + xs[2] * x^2 + .... צוריקקומען דעריוואַטיוו פון דעם פּאַלינאָמיאַל אין דער זעלביקער פאָרעם. >>> דעריוואַטיוו (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> דעריוואַטיוו [(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ydd_Hebr,python,"

def fibfib(n: int):
    """"""די פיבפיב נומערן סיקוואַנס איז אַ סיקוואַנס ענלעך צו די פיבבאָנאַצקי סיקוואַנס וואָס איז דיפיינד ווי גייט: פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן)) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן) == 0 פיבפיב (באַהעפטן)) == 1 פיבפיב (באַהעפטן)) == 1 פיבפיבפיב (באַהעפטן)) + פיבפיבפיב (נ) + פיבאַהעפטן)) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ydd_Hebr,python,"
FIX = """"""שרײַבן אַ פֿונקציע וואָקאַל_קאַונט וואָס נעמט אַ שטריקל וואָס רעפּריזענץ אַ וואָרט ווי ינפּוט און צוריקגעגעבן די נומער פון וואָקאַלס אין דעם שטריקל. וואָקאַלס אין דעם פאַל זענען 'אַ', 'ע', 'י', 'אָ', 'ו'. דאָ, 'י' איז אויך אַ וואָקאַל, אָבער בלויז ווען עס איז אין די סוף פון די געגעבן וואָרט. בייַשפּיל: >>> וואָקאַלס_קאַונט (א) ""אַבקדע"") 2 >>> וואָקאַלס_קאַונט (א) ""אַסידי"") 3 """"""

def vowels_count(s):
    """"""לייג צו מער טעסט קאַסעס. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ydd_Hebr,python,"
def circular_shift(x, shift):
    """"""קרייַז פאַרוועגן די דידזשיץ פון די ינטייגער קס, פאַרוועגן די דידזשיץ רעכט דורך פאַרוועגן און צוריקקומען די רעזולטאַט ווי אַ שטריקל. אויב פאַרוועגן > נומער פון דידזשיץ, צוריקקומען דידזשיץ ריווערסט. >>> קרייַז_שיפט 12 1) ""21"" >>> קרייַז_שיפט 12 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ydd_Hebr,python,"
def digitSum(s):
    """"""אַרבעט שרייַבן אַ פונקציע וואָס נעמט אַ שטריקל ווי ינפּוט און קערט די סומע פון די אויבערשטער אותיות בלויז 'אַסקי קאָודז. ביישפילן: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ydd_Hebr,python,"
def fruit_distribution(s,n):
    """"""אין דעם אַרבעט, איר וועט זיין געגעבן אַ שטריקל אַז רעפּראַזענץ אַ נומער פון apples און apples אַז זענען פונאנדערגעטיילט אין אַ קאָרב פון פרוכט דעם קאָרב כּולל apples, apples, און מאַנגאָ פירות. געגעבן די שטריקל אַז רעפּראַזענץ די גאַנץ נומער פון די apples און apples און אַ ינטייגער אַז רעפּראַזענץ די גאַנץ נומער פון די פירות אין די קאָרב צוריקקומען די נומער פון די מאַנגאָ פירות אין די קאָרב. פֿאַר יקסאַמבאַל: fruit_distribution""5(apples און 6 apples"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples און 1 apples"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples און 3 apples"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples און 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ydd_Hebr,python,"
def pluck(arr):
    """"""""געגעבען א עריי וואס רעפרעזענטירט א צווייג פון א בוים וואס האט נישט-נעגאטיווע אינטעדזשער נאדס איז דיין אויפגאבע צו צונעמען איינע פון די נאדס און צוריקקומען עס. די צונעמען נאד זאל זיין די נאד מיט די קלענסטע אפילו ווערט. אויב מען געפינט מערערע נאדס מיט די זעלבע קלענסטע אפילו ווערט, צוריקקומען די נאד וואס האט קלענסטע אינדעקס. די צונעמען נאד זאל צוריקקומען אין א ליסטע, [smalest_value, זיין אינדעקס], אויב עס זענען נישט קיין אפילו ווערט אדער די געגעבן עריי איז ליידיג, צוריקקומען []. ביישפיל 1: אריינפיר: [4,2,3] אויספיר: [2, 1] דערקלערונג: 2 האט די קלענסטע אפילו ווערט, און 2 האט די קלענסטע אינדעקס. ביישפיל 2: אריינפיר: [1,2,3] אויספיר: [2, 1] דערקלערונג: 2 האט די קלענסטע אפילו ווערט, און 2 האט די קלענסטע אפילו אינדעקס. ביישפיל 3: אריינפיר: [1,2,3] [4,5, [4,5] [5,] [5, [0, 3, 4] [0, 2] אויספיר: 1 אויספיר: 0, [0,] דער קלענסטע נאד: 1 האט די קלענסטע נאד, אבער די קלענסטע אינדע איז ניד, וואס איז צוויי ניר, דערקלער ווערט איז ניר, [0==0], אזוי מיר וועלן אויסקלערן די ערשטע נאד, די קלענסטע נאד איז די קלענסטע נאד, אבער די לענג איז <==1""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ydd_Hebr,python,"
def search(lst):
    '''מען גיט א ליסטע פון פאזיטיווע אינטעדזשערס. צוריקקומען די גרעסטע אינטעדזשער וואס איז גרעסער ווי נול, און האט א פראקסיע גרעסער ווי אדער גלייך צו די ווערט פון די אינטעדזשער אליין. די פראקסיע פון א אינטעדזשער איז די צאל מאל וואס עס קומט ארויף אין די ליסטע. אויב עס איז נישט דא אזא ווערט, צוריקקומען -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ydd_Hebr,python,"
def strange_sort_list(lst):
    '''געגעבענע ליסטע פון אינטעדזשערס, צוריקקומען ליסטע אין אומזיסטע סדר. אומזיסטע סארטינג, איז ווען איר הייבט מיט די מינימום ווערט, דערנאך מאַקסימום פון די רעשט אינטעדזשערס, דערנאך מינימום און אַזוי ווייטער. ביישפילן: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ydd_Hebr,python,"
def triangle_area(a, b, c):
    '''געגעבען די לענג פון די דריי זייטן פון א דרייקעלע. צוריקקומען די שטח פון די דרייקעלע ארומגענומען צו 2 דעצימאל פוינטס אויב די דריי זייטן פארמאגן א גילטיגע דרייקעלע. אנדערש צוריקקומען -1 דריי זייטן מאכן א גילטיגע דרייקעלע ווען די סומע פון סיי וועלכע צוויי זייטן איז גרעסער ווי די דריטע זייט. ביישפיל: דרייקעלע_א שטח (א שטח) 3, 4, 5) == 6.00 דרייקעלע_א שטח (א שטח) 1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ydd_Hebr,python,"
def will_it_fly(q,w):
    '''שרײַבן אַ פונקציע וואָס גיט צוריק True אויב דער אָבדזשעקט q וועט פליען, און False אַנדערש. דער אָבדזשעקט q וועט פליען אויב עס איז באַלאַנסט (עס איז אַ פּאַלינדראָמיק רשימה) און די סומע פון זייַן עלעמענטן איז ווייניקער ווי אָדער גלייַך די מאַקסימום מעגלעך וואָג w. בייַשפּיל: will_it_fly([1, 2], 5) â -> False # 1+2 איז ווייניקער ווי די מאַקסימום מעגלעך וואָג, אָבער עס איז אַנבאַלאַנסט. will_it_fly([3, 2, 3], 1) â -> False # עס איז באַלאַנסט, אָבער 3+2+3 איז מער ווי די מאַקסימום מעגלעך וואָג. will_it_fly[3, 2, 3], 9) â -> True # 3+23 איז ווייניקער ווי די מאַקסימום מעגלעך וואָג, און עס איז באַלאַנסט. will_it_fly([3], â 5) -> True # 3 איז ווייניקער ווי די מאַקסימום מעגלעך וואָג, און עס איז באַלאַנסט. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ydd_Hebr,python,"
def smallest_change(arr):
    """"""א פאלינדראמישע עריי איז אן עריי וואס ווערט געליינט די זעלבע צוריק און פאראויס. אין איין טויש, קען מען טוישן איין עלעמענט צו סיי וועלכע אנדערע עלעמענט. למשל: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ydd_Hebr,python,"
def total_match(lst1, lst2):
    '''שרײַבן אַ פֿונקציע וואָס נעמט צוויי ליסטעס פון סטרינגס און ריטורנס די ליסט וואָס האט גאַנץ נומער פון טשאַרס אין די אַלע סטרינגס פון די ליסט ווייניקער ווי די אנדערע ליסט. אויב די צוויי ליסטעס האָבן די זעלבע נומער פון טשאַרס, צוריקקומען די ערשטער ליסט. ביישפילן total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'] ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ydd_Hebr,python,"
def is_multiply_prime(a):
    """"""שרײַבן אַ פֿונקציע וואָס גיט צוריק אמת אויב די געגעבן נומער איז די מאַלטאַפּליקאַציע פון 3 פּרימע נומערן און פאַלש אַנדערש. וויסנדיק אַז (אַ) איז ווייניקער ווי 100.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ydd_Hebr,python,"
def is_simple_power(x, n):
    """"""דיין אַרבעט איז צו שרייַבן אַ פונקציע וואָס ריטורנס אמת אויב אַ נומער קס איז אַ פּשוט מאַכט פון נ און פאַלש אין אנדערע קאַסעס. קס איז אַ פּשוט מאַכט פון נ אויב נ ** ינט = קס למשל: is_simple_power(1, 4) => אמת איז_simple_power(2, 2) => אמת איז_simple_power(8, 2) => אמת איז_simple_power(3, 2) => פאַלש איז_simple_power_(3, 1) פאַלש => איז_simple_power_(5, 3) => פאַלש """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ydd_Hebr,python,"
def iscube(a):
    '''שרײַבן אַ פֿונקציע וואָס נעמט אַ גאַנץ נומער און גיט צוריק True אויב דאָס איז אַ קוב פון עטלעכע גאַנץ נומער. באַמערקונג: איר קענט יבערנעמען אַז די אַרייַנפיר איז שטענדיק גילטיק. ביישפילן: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ydd_Hebr,python,"
def hex_key(num):
    """"""איר זענט געווען געבעטן צו שרייבן א פונקציע וואס באקומט א העקסאדעצימאל נומער אלס א סטרינג און ציילט די צאל פון העקסאדעצימאל ציפערן וואס זענען פריים (פריים נומער, אדער א פריים, איז א נאטירליכע נומער גרעסער ווי 1 וואס איז נישט א פראדוקט פון צוויי קלענערע נאטירליכע נומערן). העקסאדעצימאל ציפערן זענען 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. פריים נומערן זענען 2, 3, 5, 7, 11, 13, 17,... אזוי איר האָבן צו באַשליסן א נומער פון די פאלגענדע ציפערן: 2, 3, 5, 7, B (= דעצימאל 11), D (= דעצימאל 13). הערה: איר קענט אננעמען אז די אינטאוט איז שטענדיק ריכטיג אדער ליידיק, און סימבאלן A,B,C,D,E,F זענען שטענדיק גרויסע קארטערס. ביישפילן: פאר num ""AB"" דארף די אינטאוט זיין num = 1. פאר ""1077E"" דארף די אינטאוט זיין 2. פאר num ""AB"" דארף זיין num = 1.331EDA"" דארף די אינטאוט זיין num = 4.123ABC = 6.06745DEF ""2020"" דארף זיין 2.0""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ydd_Hebr,python,"
def decimal_to_binary(decimal):
    """"""די פונקציע זאָל צוריקקומען אַ שטריקל, מיט יעדער כאַראַקטער רעפּריזענטינג אַ ביינערי נומער. יעדער כאַראַקטער אין די שטריקל וועט זיין '0' אָדער '1'. עס וועט זיין אַן עקסטרע פּאָר פון אותיות 'db' אין די אָנהייב און אין די סוף פון די שטריקל. די עקסטרע אותיות זענען דאָרט צו העלפן מיט די פֿאָרמאַט. ביישפילן: דעצימאַל_צו_ביינערי""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ydd_Hebr,python,"
def is_happy(s):
    """"""איר זענט געגעבן אַ שטריקל s. דיין אַרבעט איז צו קאָנטראָלירן אויב די שטריקל איז צופרידן אָדער נישט. א שטריקל איז צופרידן אויב זייַן לענג איז בייַ מינדסטער 3 און יעדער 3 קאָנסעקוטיווע אותיות זענען באַזונדער פֿאַר בייַשפּיל: איז_האַפּי (a) => פאַלש איז_האַפּי (aa) => פאַלש איז_האַפּי (abcd) => אמת איז_האַפּי (aabb) => פאַלש איז_האַפּי (adb) => אמת איז_האַפּי (xyy) => פאַלש """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ydd_Hebr,python,"
def numerical_letter_grade(grades):
    """"""עס איז די לעצטע וואָך פון די סעמיסטער און די לערער האט צו געבן די גראַדעס צו סטודענטן. די לערער האט געמאכט איר אייגן אַלגערידאַם פֿאַר גריידינג. דער בלויז פּראָבלעם איז, זי האט פאַרפאַלן די קאָד זי געניצט פֿאַר גריידינג. זי האט געגעבן איר אַ רשימה פון גפּאַ פֿאַר עטלעכע סטודענטן און איר האָבן צו שרייַבן אַ פונקציע וואָס קענען אַרויסגעבן אַ רשימה פון בריוו גראַדעס ניצן די פאלגענדע טיש: גפּאַ.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ydd_Hebr,python,"
def prime_length(string):
    """"""שרײַבן אַ פֿונקציע וואָס נעמט אַ שטריקל און גיט צוריק אמת אויב די שטריקל לענג איז אַ פּריים נומער אָדער פאַלש אַנדערש ביישפילן פּריים_לענגטה (העלאָ) == אמת פּריים_לענגטה (אַבקדקבאַ) == אמת פּריים_לענגטה (קאַטטענס) == אמת פּריים_לענגטה (אָרינגה) == פאַלש """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ydd_Hebr,python,"
def starts_one_ends(n):
    """"""געגעבן אַ positive integer n, צוריקקומען די ציילן פון די נומערן פון n-ציפער positive integers אַז אָנהייבן אָדער סוף מיט 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ydd_Hebr,python,"
def solve(N):
    """"""געגעבן אַ positive integer N, צוריקקומען די גאַנץ סומע פון זייַן דידזשיץ אין ביינערי. בייַשפּיל פֿאַר N = 1000, די סומע פון דידזשיץ וועט זיין 1 די רעזולטאַט זאָל זיין ""1"". פֿאַר N = 150, די סומע פון דידזשיץ וועט זיין 6 די רעזולטאַט זאָל זיין ""110"". פֿאַר N = 147, די סומע פון דידזשיץ וועט זיין 12 די רעזולטאַט זאָל זיין ""1100"". וועריאַבאַלז: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. רעזולטאַט: אַ שטריקל פון ביינערי נומער """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ydd_Hebr,python,"
def add(lst):
    """"""געגעבן אַ ניט-רוקן רשימה פון ינטיידזשערז, לייגן די פּאַרע עלעמענטן וואָס זענען אין מאָדנע ינדאַקסעס.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ydd_Hebr,python,"
def anti_shuffle(s):
    """"""שרײַבן אַ פֿונקציע וואָס נעמט אַ שטריקל און גיט צוריק אַ אָרדערד ווערסיע פון אים. אָרדערד ווערסיע פון שטריקל, איז אַ שטריקל וווּ אַלע ווערטער (ספּאַרעסט דורך פּלאַץ) זענען ריפּלייסט דורך אַ נייַ וואָרט וווּ אַלע די אותיות זענען עריינדזשד אין אַסינדענדינג סדר באזירט אויף אַסקי ווערט. באַמערקונג: איר זאָל האַלטן די סדר פון ווערטער און ליידיק ספּייסאַז אין די זאַץ. למשל: anti_shuffle ((('Hi') גיט צוריק 'Hi' anti_shuffle ((('hello') גיט צוריק 'ehllo' anti_shuffle (('Hello World!!!') גיט צוריק 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ydd_Hebr,python,"
def get_row(lst, x):
    """"""איר זענט געגעבן אַ 2 דימענשאַנאַל דאַטן, ווי אַ נעסטעד רשימות, וואָס איז ענלעך צו מאַטריץ, אָבער, ניט ענלעך מאַטריץ, יעדער רודערן קען אַנטהאַלטן אַ אַנדערש נומער פון זייַלען. געגעבן לסט, און ינטייגער קס, געפֿינען ינטיידזשערז קס אין די רשימה, און צוריקקומען רשימה פון טופּלעס, [(קסנומקס, י 1), (קסנומקס, י 2) ...] אַזאַ אַז יעדער טופּלע איז אַ קאָואָרדאַנאַט - (רודערן, זייַלען), סטאַרטינג מיט 0. סאָרט קאָואָרדאַנאַץ ערשט דורך ראָוז אין אַסידענסינג סדר. אויך, סאָרט קאָואָרדאַנאַץ פון די רודערן דורך זייַלען אין דעסקרינדינג סדר. ביישפילן: געט_ראָו
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ydd_Hebr,python,"
def sort_array(array):
    """"""געגעבן אַ מענגע פון ניט-נעגאַטיוו ינטיידזשערז, צוריקקומען אַ קאָפּיע פון די געגעבן מענגע נאָך סאָרטינג, איר וועט סאָרט די געגעבן מענגע אין אַסיענדינג סדר אויב די סומע (פירסט אינדעקס ווערט, לעצט אינדעקס ווערט) איז פּאַרע, אָדער סאָרט עס אין דעסקענדינג סדר אויב די סומע (פירסט אינדעקס ווערט, לעצט אינדעקס ווערט) איז פּאַרע. באַמערקונג: * טאָן ניט טוישן די געגעבן מענגע. ביישפילן: * סאָרט_אַררייַ [(]) => [] * סאָרט_אַררייַ []] => [5] * סאָרט_אַררייַ [2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * סאָרט_אַררייַ [2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ydd_Hebr,python,"
def encrypt(s):
    """"""שאַפֿן אַ פונקציע ענקריפּט וואָס נעמט אַ שטריקל ווי אַן אַרגומענט און צוריקקומען אַ שטריקל ענקריפּטעד מיט די אַלפאַבע איז ראָוטייטיד. די אַלפאַבע זאָל זיין ראָוטייטיד אין אַזאַ אַ שטייגער אַז די אותיות יבעררוקן אַראָפּ דורך צוויי כאַפּן צו צוויי ערטער. פֿאַר בייַשפּיל: ענקריפּט (('היי') קערט 'לם' ענקריפּט (('אַסדףגגגדזשקל') קערט 'עווהקלינאָפּ' ענקריפּט (('גף') קערט 'קדזש' ענקריפּט (('עט') קערט 'יקס' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ydd_Hebr,python,"
def next_smallest(lst):
    """"""מען גיט א ליסטע פון אינטעדזשערס. שרייב א פונקציע next_smallest() וואס גיט צוריק די 2טע קלענסטע עלעמענט פון די ליסטע. גיט צוריק ניין אויב עס איז נישט דא אזא עלעמענט. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == קיין next_smallest([1, 1]) == קיין """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ydd_Hebr,python,"
def is_bored(S):
    """"""איר וועט באַקומען אַ שטריקל פון ווערטער, און דיין אַרבעט איז צו ציילן די נומער פון באָרדאַמז. אַ באָרדאַם איז אַ זאַץ וואָס הייבט מיט די וואָרט ""איך"". זאַץ זענען דילימאַטעד דורך '.', '?' אָדער '!'. למשל: >>> איז_באָרדדד ((""העלאָ וועלט"") 0 >>> איז_באָרדד ((""די הימל איז בלוי. די זון איז שיינינג. איך ליבע דעם וועטער"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ydd_Hebr,python,"
def any_int(x, y, z):
    '''שאַפֿן אַ פונקציע וואָס נעמט 3 נומערן. ריטורנס אמת אויב איינער פון די נומערן איז גלייַך צו די סומע פון די אנדערע צוויי, און אַלע נומערן זענען ינטיידזשערז. ריטורנס פאַלש אין קיין אנדערע קאַסעס. ביישפילן any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ydd_Hebr,python,"
def encode(message):
    """"""שרײַבן אַ פֿונקציע וואָס נעמט אַ אָנזאָג, און קאָדירט אויף אַזאַ א וועג אַז עס סוואַפּס פאַל פון אַלע אותיות, ריפּלייסיז אַלע וואָקאַלז אין דעם אָנזאָג מיט די בריוו וואָס איז 2 ערטער פאָרויס פון דעם וואָקאַל אין די ענגליש אַלפאַבע. נעמט בלויז אותיות. ביישפילן: >>> קאָדירן ((('טעסט') 'TGST' >>> קאָדירן ((('דאס איז אַ אָנזאָג') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ydd_Hebr,python,"

def skjkasdkd(lst):
    """"""איר זענט געגעבן אַ רשימה פון ינטיידזשערז. איר דאַרפֿן צו געפֿינען די גרעסטע פּרים ווערט און צוריקקומען די סכום פון זייַן דידזשיץ. ביישפילן: פֿאַר lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] די רעזולטאַט זאָל זיין 10 פֿאַר lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] די רעזולטאַט זאָל זיין 25 פֿאַר lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] די רעזולטאַט זאָל זיין 13 פֿאַר lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] די רעזולטאַט זאָל זיין 11 פֿאַר lst = [0,81,12,3,21,1] די רעזולטאַט זאָל זיין 3 פֿאַר lst = [0,8,1,2,1,7] די רעזולטאַט זאָל זיין 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ydd_Hebr,python,"
def check_dict_case(dict):
    """"""געגעבן אַ ווערטערבוך, צוריקקומען אמת אויב אַלע שליסלען זענען סטרינגס אין קלענערער פאַל אָדער אַלע שליסלען זענען סטרינגס אין אויבערשטער פאַל, אַנדערש צוריקקומען פאַלש. די פונקציע זאָל צוריקקומען פאַלש איז די געגעבן ווערטערבוך איז ליידיק. ביישפילן: טשעק_דיקט_קאַסע (((""אַ"":"" עפּל"", ""ב"":"" באַנאַנאַ""}) זאָל צוריקקומען אמת. טשעק_דיקט_קאַס (((""אַ"":"" עפּל"", ""אַ"":"" באַנאַנאַ"", ""ב"":"" באַנאַנאַ""}) זאָל צוריקקומען פאַלש. טשעק_דיקט_קאַס {""אַ"":"" עפּל"", 8:"" באַנאַנאַ"", ""אַ"":"" עפּל""}) זאָל צוריקקומען פאַלש. טשעק_דיקט_קאַס {""נעם"":"" יוחנן"", ""אַלט"":"" 36"", ""שטאָט"":"" האָוסטאָן""}) פאַלש זאָל צוריקקומען טשעק_דיקט_קאַס {""NC"":"" STATE"", ""Z"":"" 45123 ""IP"" }) זאָל צוריקקומען אמת.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ydd_Hebr,python,"
def count_up_to(n):
    """"""ימפּלאַמענט אַ פונקציע וואָס נעמט אַ ניט-נעגאַטיוו ינטייגער און ריטורנס אַ מענגע פון די ערשטער n ינטיידזשערז וואָס זענען פּראַמ נומערן און ווייניקער ווי n. פֿאַר בייַשפּיל: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ydd_Hebr,python,"
def multiply(a, b):
    """"""פאַרענדיקן די פונקציע וואָס נעמט צוויי ינטיידזשערז און ריטורנס די פּראָדוקט פון זייער וניט דידזשיץ. יבערנעמען די ינפּוט איז שטענדיק גילטיק. ביישפילן: פאַרגרעסערן 148, 412) זאָל צוריקקומען 16. פאַרגרעסערן 19 28 זאָל צוריקקומען 72. פאַרגרעסערן 2020 1851 זאָל צוריקקומען 0. פאַרגרעסערן 14 15 זאָל צוריקקומען 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ydd_Hebr,python,"
def count_upper(s):
    """"""געגעבן אַ שטריקל s, ציילן די נומער פון הויך-קאַסער וואָקאַלס אין פּאַרע אינדעקסן. למשל: count_upper (('aBCdEf') ריטורנס 1 count_upper (('abcdefg') ריטורנס 0 count_upper (('dBBE') ריטורנס 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ydd_Hebr,python,"
def closest_integer(value):
    '''שאַפֿן אַ פונקציע וואָס נעמט אַ ווערט (שטרינג) וואָס רעפּריזענץ אַ נומער און צוריקקומען די קלאָוסאַסט ינטיידזשער צו אים. אויב די נומער איז עקווידיסטאַנט פון צוויי ינטיידזשערז, ראָונד עס אַוועק פון נול. ביישפילן >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 באַמערקונג: ראָונדינג אַוועק פון נול מיטל אַז אויב די געגעבן נומער איז עקווידיסטאַנט פון צוויי ינטיידזשערז, די איינער איר זאָל צוריקקומען איז די וואָס איז די ווייַטאַסט פון נול. פֿאַר בייַשפּיל closest_integer "" ((14.5"") זאָל צוריקקומען 15 און closest_integer "" ((-14.5"") זאָל צוריקקומען -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ydd_Hebr,python,"
def make_a_pile(n):
    """"""געגעבן אַ positive integer n, איר האָבן צו מאַכן אַ הויפן פון n לעוועלס פון שטיינער. דער ערשטער מדרגה האט n שטיינער. די נומער פון שטיינער אין דער ווייַטער מדרגה איז: - דער ווייַטער מאָדנע נומער אויב n איז מאָדנע. - דער ווייַטער פּאַרע נומער אויב n איז פּאַרע. צוריקקומען די נומער פון שטיינער אין יעדער מדרגה אין אַ רשימה, ווו עלעמענט אין אינדעקס איך רעפּראַזענץ די נומער פון שטיינער אין די מדרגה (i + 1). ביישפילן: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ydd_Hebr,python,"
def words_string(s):
    """"""איר וועט באַקומען אַ שטריקל פון ווערטער אפגעשיידט דורך קאָמאַס אָדער ספּייסיז. דיין אַרבעט איז צו צעטיילט די שטריקל אין ווערטער און צוריקקומען אַ מענגע פון די ווערטער. למשל: words_string ((""היי, מיין נאָמען איז יוחנן"") == [""היי"", ""מיין"", ""נאָמען"", ""איז"", ""יוחנן""] words_string ((""איין, צוויי, דריי, פיר, פינף, זעקס"") == [""איין"", ""צוויי"", ""דרייַ"", ""פיר"", ""פופֿן"", ""זעקס""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ydd_Hebr,python,"
def choose_num(x, y):
    """"""די פונקציע נעמט צוויי פאזיטיווע נומערן x און y און ריטורנז די גרעסטע פּערע אינטעדזשער נומער וואס איז אין די קייט [x, y] אינקלוסיוו. אויב עס איז נישט דא אזא נומער, דעמאלטס דארף די פונקציע צוריקקומען -1. למשל: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ydd_Hebr,python,"
def rounded_avg(n, m):
    """"""איר זענט געגעבן צוויי positive ינטאַדזשערז n און m, און דיין אַרבעט איז צו רעכענען די דורכשניטלעך פון די ינטאַדזשערז פון n דורך m (אַרייַנגערעכנט n און m). ראָונד די ענטפער צו די ניראַסט ינטאַדזשער און קאָנווערט אַז צו ביינערי. אויב n איז גרעסער ווי m, צוריקקומען -1. בייַשפּיל: ראָונדאַד_אַווג (א) 1, 5) => ""0ב11"" ראָונדאַד_אַווג (א) 7, 5) => -1 ראָונדאַד_אַווג (א) 10, 20) => ""0ב11"" ראָונדאַד_אַווג (א) 20, 33) => ""0ב11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ydd_Hebr,python,"
def unique_digits(x):
    """"""געגעבן אַ רשימה פון positive integers x. צוריקקומען אַ סאָרטיד רשימה פון אַלע עלעמענטן וואָס האט ניט קיין פּאַרע ציפער. באַמערקונג: צוריקגעקומען רשימה זאָל זיין סאָרטיד אין ינקריסינג סדר. למשל: >>> יינציק_דידזשיץ (([15, 33, 1422, 1]) [1, 15, 33] >>> יינציק_דידזשיץ (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ydd_Hebr,python,"
def by_length(arr):
    """"""אראפגעלייגט א אראפשטעל פון אינטעדזשערס, סארט די אינטעדזשערס וואס זענען צווישן 1 און 9 אריינגערעכנט, פארקערט דעם רעזולטאטארן אראפשטעל, און דערנאך פארבייטשטעלט יעדע ציפער מיט איר קארעספאנדענעם נאמען פון ""איין"", ""צוויי"", ""דריי"", ""פיר"", ""פופיר"", ""שש"", ""זיבן"", ""אכט"", ""ניין"". למשל: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> סארט arr -> [1, 1, 2, 3, 4, 5, 8] -> ריווערס arr -> [8, 5, 4, 3, 2, 1, 1] צוריקקומען [""אכט"", ""פיר"", ""דריי"", ""צוויי"", ""צוויי"", ""צוויי"", ""איין"", ""איין""] אויב די אראפ איז ליידיג, צוריקקומען אן אראפשטעל: arr = [] צוריקקומען [] אויב די אראפשטעל האט סיי וועלכע מאדנע נאמען איגנארירן עס: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr -> [55, return = 1] - [איין' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ydd_Hebr,python,"
def f(n):
    """"""ימפּלאַמענט די פונקציע f וואָס נעמט n ווי אַ פּאַראַמעטער, און ריטורנס אַ רשימה פון גרייס n, אַזאַ אַז די ווערט פון די עלעמענט אין אינדעקס איך איז די פאַקטאָריאַל פון איך אויב איך איז פּער אָדער די סומע פון נומערן פון 1 צו איך אַנדערש. איך סטאַרץ פון 1. די פאַקטאָריאַל פון איך איז די מאַלטאַפּליקיישאַן פון די נומערן פון 1 צו איך (1 * 2 * ... * איך). בייַשפּיל: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ydd_Hebr,python,"
def even_odd_palindrome(n):
    """"""געגעבן אַ positive גאַנץ נומער n, צוריקקומען אַ טופּל אַז האט די נומער פון פּאַר און מאָדנע גאַנץ פּאַלינדראָמס אַז פאַלן ין די קייט ((1, n), ינקלוסיוו. בייַשפּיל1: ינפּוט: 3 רעזולטאַט: (1, 2) דערקלערונג: גאַנץ פּאַלינדראָם זענען 1, 2, 3. איינער פון זיי איז פּאַר, און צוויי פון זיי זענען מאָדנע. בייַשפּיל2: ינפּוט: 12 רעזולטאַט: (4, 6) דערקלערונג: גאַנץ פּאַלינדראָם זענען 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. פיר פון זיי זענען פּאַר, און 6 פון זיי זענען מאָדנע. באַמערקונג: 1. 1 <= n <= 10 ^ 3 2. טופּל האט צוריקגעקומען די נומער פון פּאַר און מאָדנע גאַנץ פּאַלינדראָמס ריספּעקטיוולי. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ydd_Hebr,python,"
def count_nums(arr):
    """"""שרײַבן אַ פֿונקציע count_nums וואָס נעמט אַ מענגע פון אינטעדזשערס און גיט צוריק די נומער פון עלעמענטן וואָס האט אַ סכום פון דידזשיץ > 0. אויב אַ נומער איז נעגאַטיוו, דעמאָלט זייַן ערשטער געחתמעט ציפער וועט זיין נעגאַטיוו: למשל -123 האט געחתמעט דידזשיץ -1, 2, און 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ydd_Hebr,python,"
def move_one_ball(arr):
    """"""מיר האָבן אַ 'אַרר' פון N אינטעדזשערז אַרר[1], אַרר[2], ..., אַרר[N]. די נומערן אין דער מענגע וועט זיין ראַנדאַמלי אָרדערד. דיין אַרבעט איז צו באַשליסן אויב עס איז מעגלעך צו באַקומען אַ מענגע סאָרטעד אין ניט-דעקריסינג סדר דורך דורכפירן די פאלגענדע אָפּעראַציע אויף די געגעבן מענגע: איר זענט ערלויבט צו דורכפירן רעכט שיף אָפּעראַציע קיין נומער פון מאל. איין רעכט שיף אָפּעראַציע מיטל סשיפטינג אַלע עלעמענטן פון די מענגע דורך איין שטעלע אין די רעכט ריכטונג. די לעצטע עלעמענט פון די מענגע וועט זיין אריבערגעפארן צו די אָנהייב שטעלע אין די מענגע ד""ה 0th אינדעקס. אויב עס איז מעגלעך צו באַקומען די סאָרטעד מענגע דורך דורכפירן די אויבן אָפּעראַציע דעמאָלט צוריקקומען אמת אַנדערש צוריקקומען פאַלש. אויב די געגעבן מענגע איז ליידיק דעמאָלט צוריקקומען אמת. באַמערקונג: די געגעבן רשימה איז געראַנטיד צו האָבן יינציקלעדיק עלעמענטן. פֿאַר בייַשפּאָד: מאַך_אנע_און_און_און[3, 4, 5, 2] דערקלערונג: אמת דערקלערונג: דורך פּערפערן 2 רעכט אָפּעריישאַנז, ניט-דעקריסינג אָרענגינג אָרענגעס קענען זיין אַריסיסט פֿאַר די מענגע פֿאַר די מענגע מענגע.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ydd_Hebr,python,"
def exchange(lst1, lst2):
    """"""אין דעם פּראָבלעם, איר וועט ימפּלאַמענט אַ פונקציע וואָס נעמט צוויי רשימות פון נומערן, און דיטערמענץ צי עס איז מעגלעך צו דורכפירן אַ וועקסל פון עלעמענטן צווישן זיי צו מאַכן lst1 אַ רשימה פון בלויז פּאַר נומערן. עס איז קיין שיעור אויף די נומער פון וועקסל עלעמענטן צווישן lst1 און lst2. אויב עס איז מעגלעך צו וועקסל עלעמענטן צווישן די lst1 און lst2 צו מאַכן אַלע די עלעמענטן פון lst1 צו זיין פּאַר, צוריקקומען ""יאָ"". אַנדערש, צוריקקומען ""ניין"". למשל: וועקסל [(1, 2, 3, 4], [1, 2, 3, 4]) => ""יאָ"" וועקסל [(1, 2, 3, 4], [1, 5, 3, 4]) => ""ניין"" עס איז אנגענומען אַז די ינפּוץ רשימות וועט זיין ניט-טייַער. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ydd_Hebr,python,"
def histogram(test):
    """"""געגעבען א סטרינג וואס רעפרעזענטירט א ספעיס אפגעשיידט קליינע אותיות, צוריקקומען א ווערטערבוך פון דעם אות מיט די מערסטע איבערחזרונגען און מיט די קארעספאנדענטע ציילונג. אויב עטליכע אותיות האבן די זעלבע ערשיינונג, צוריקקומען זיי אלע. ביישפיל: היסטאגרעם""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ydd_Hebr,python,"
def reverse_delete(s,c):
    """"""אַרבעט מיר זענען געגעבן צוויי סטרינגס s און c, איר האָבן צו ויסמעקן אַלע די אותיות אין s וואָס זענען גלייַך צו קיין כאַראַקטער אין c דעמאָלט קאָנטראָלירן אויב די רעזולטאַט שטריקל איז פּאַלינדראָם. א שטריקל איז גערופן פּאַלינדראָם אויב עס לייענט די זעלבע צוריק ווי פאָרויס. איר זאָל צוריקקומען אַ טופּל וואָס כּולל די רעזולטאַט שטריקל און אמת / פאַלש פֿאַר די קאָנטראָלירן. בייַשפּיל פֿאַר s = ""אַבקדע"", c = ""אַע"", די רעזולטאַט זאָל זיין ('בקד', פאַלש) פֿאַר s = ""אַבקדעף"", c = ""ב"" די רעזולטאַט זאָל זיין ('אַקדעף', פאַלש) פֿאַר s = ""אַבקדעדעד"", c = ""אַבקדעף"", די רעזולטאַט זאָל זיין ('אַקדעד', אמת) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ydd_Hebr,python,"
def odd_count(lst):
    """"""געגעבן אַ רשימה פון סטרינגס, ווו יעדער שטריקל באשטייט פון בלויז דידזשיץ, צוריקקומען אַ רשימה. יעדער עלעמענט י פון די רעזולטאַט זאָל זיין ""די נומער פון מאָדנע עלעמענטן אין די שטריקל י פון די ינפּוט. "" ווו אַלע די י זאָל זיין ריפּלייסט דורך די נומער פון מאָדנע דידזשיץ אין די י'ט שטריקל פון די ינפּוט. >>> מאָדנע_קאָונט ['1234567']) [""די נומער פון מאָדנע עלעמענטן 4n די סטר 4נג פון די 4nput.""] >>> מאָדנע_קאָונט ['3',""111111""]) [""די נומער פון מאָדנע עלעמענטן 1n די סטר 1נג פון די 1nput. "", ""די נומער פון מאָדנע עלעמענטן 8n די סטר 8נג פון די 8nput. ""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ydd_Hebr,python,"
def minSubArraySum(nums):
    """"""געגעבן אַ מענגע פון ינטיידזשערז נאַמז, געפינען די מינימום סומע פון קיין ניט-טאָף סאַב-מענגע פון נאַמז. בייַשפּיל minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ydd_Hebr,python,"
def max_fill(grid, capacity):
    import math
    """"""איר זענט געגעבן אַ רעקטאַנגגיאַלער גריד פון וועלז. יעדער רודערן רעפּראַזענץ אַ איין געזונט, און יעדער 1 אין אַ רודערן רעפּראַזענץ אַ איין אַפּאַראַט פון וואַסער. יעדער געזונט האט אַ קאָראַספּאַנדינג בעקן וואָס קענען ווערן געניצט צו עקסטראַקט וואַסער פון עס, און אַלע בעקץ האָבן די זעלבע קאַפּאַציטעט. דיין אַרבעט איז צו נוצן די בעקץ צו ליידיק די וועלז. רעזולטאַט די נומער פון מאל איר דאַרפֿן צו נידעריקער די בעקץ. בייַשפּיל 1: ינפּוט: גריד: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 רעזולטאַט: 6 בייַשפּיל: ינפּוט: גריד: [[0,0,1,1], [0,0,0,0], [1,1], [0,1,1]] bucket_capacity: 2 רעזולטאַט: 5 בייַשפּיל: ינפּוט: [[0,0,0], [0,0]] bucket_capacity: 5 געזונט: 0 * קנאַפּ
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ydd_Hebr,python,"
def sort_array(arr):
    """"""אין דעם קאַטאַ, איר האָבן צו סאָרט אַ מענגע פון ניט-נעגאַטיוו ינטיידזשערז לויט צו נומער פון אָנעס אין זייער ביינערי רעפּראַזענץ אין אַסינדענט סדר. פֿאַר ענלעך נומער פון אָנעס, סאָרט באזירט אויף דעצימאַל ווערט. עס מוזן זיין ימפּלאַמענאַד ווי דעם: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ydd_Hebr,python,"
def select_words(s, n):
    """"""געגעבן אַ שטריקל s און אַ נאַטירלעך נומער n, איר האָבן שוין טאַסקט צו ימפּלאַמענט אַ פונקציע אַז ריטורנס אַ רשימה פון אַלע ווערטער פון שטריקל s אַז אַנטהאַלטן פּונקט n קאָנסאָנאַנץ, אין סדר די ווערטער דערשייַנען אין די שטריקל s. אויב די שטריקל s איז ליידיק דעמאָלט די פונקציע זאָל צוריקקומען אַ ליידיק רשימה. באַמערקונג: איר זאל יבערנעמען די ינפּוט שטריקל כּולל בלויז אותיות און ספּייסיז. ביישפילן: select_words ""מערי האט אַ ביסל לאם"", 4) ==> [""little""] select_words ""מערי האט אַ ביסל לאם"", 3) ==> [""מערי"", ""לאַם""] select_words ""פשוט ווייַס פּלאַץ"", 2) ==> [] select_words ""העלא וועלט"", 4) ==> [""וועלט""] select_words ""אָנקל סאַם"", 3) ==> [""אָנקל""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ydd_Hebr,python,"
def get_closest_vowel(word):
    """"""איר זענט געגעבן אַ וואָרט. דיין אַרבעט איז צו געפֿינען די קלאָוסאַסט וואָקאַל אַז שטייט צווישן צוויי קאָנסאָנאַנץ פון די רעכט זייַט פון דעם וואָרט (קאַס סענסיטיוו). וואָקאַלז אין די אָנהייב און ענדיקן טוט נישט ציילן. צוריקקומען ליידיק שטריקל אויב איר האָט נישט געפונען קיין וואָקאַל באגעגנט די אויבן צושטאַנד. איר קען יבערנעמען אַז די געגעבן שטריקל כּולל ענגליש בריוו בלויז. בייַשפּיל: get_closest_vowel (((""יאָגורט"") ==> ""ו"" get_closest_vowel (((""F"") ==> ""ו"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ydd_Hebr,python,"
def match_parens(lst):
    '''איר זענט געגעבן אַ רשימה פון צוויי סטרינגס, ביידע סטרינגס באשטייט פון עפענען פּאַראַנטעזעס '(' אָדער נאָענט פּאַראַנטעזעס ') '. דיין אַרבעט איז צו קאָנטראָלירן אויב עס איז מעגלעך צו קאַנאַקאַטיין די צוויי סטרינגס אין עטלעכע סדר, אַז די ריזאַלטינג שטריקל וועט זיין גוט. א שטריקל S איז געהאלטן צו זיין גוט אויב און בלויז אויב אַלע פּאַראַנטעזעס אין S זענען באַלאַנסט. פֿאַר בייַשפּיל: די שטריקל '((()) ' איז גוט, בשעת די שטריקל '())' איז נישט. צוריקקומען 'יא' אויב עס איז אַ וועג צו מאַכן אַ גוט שטריקל, און צוריקקומען 'ניין' אַנדערש. ביישפילן: match_parens [('() ', ') ']) == 'יא' match_parens [('(']) == 'ניין' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ydd_Hebr,python,"
def maximum(arr, k):
    """"""געגעבן אַ מענגע פון ינטיידזשערז און אַ positive ינטיידזשער ק, צוריקקומען אַ סאָרטעד רשימה פון לענג ק מיט די מאַקסימום ק נומערן אין אַרר. בייַשפּיל1: אַרייַנפיר: אַרר = [-3, -4, 5], ק = 3 רעזולטאַט: [-4, -3, 5] בייַשפּיל2: אַרייַנפיר: אַרר = [4, -4, 4], ק = 2 רעזולטאַט: [4, 4] בייַשפּיל3: אַרר = [-3, 2, 1, 2, -1, -2, 1], ק = 1 רעזולטאַט: [2] באַמערקונג: 1. די לענג פון די מענגע וועט זיין אין די קייט פון [1, 1000]. 2. די עלעמענטן אין די מענגע וועט זיין אין די קייט פון [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ydd_Hebr,python,"
def solution(lst):
    """"""געגעבן אַ ניט-רוקן רשימה פון ינטיידזשערז, צוריקקומען די סומע פון אַלע פון די מאָדנע עלעמענטן וואָס זענען אין אַפֿילו שטעלעס. ביישפילן לייזונג (([5, 8, 7, 1]) ==> 12 לייזונג (([3, 3, 3, 3, 3]) ==> 9 לייזונג (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ydd_Hebr,python,"
def add_elements(arr, k):
    """"""געגעבן אַ ניט-לאָך מענגע פון ינטיידזשערז אַרר און אַ ינטיידזשער ק, צוריקקומען די סומע פון די עלעמענטן מיט בייַ רובֿ צוויי דידזשיץ פון די ערשטער ק עלעמענטן פון אַרר. בייַשפּיל: אַרט = [111,21,3,4000,5,6,7,8,9], ק = 4 רעזולטאַט: 24 # סומע פון 21 + 3 קאַנסטריינץ: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ydd_Hebr,python,"
def get_odd_collatz(n):
    """"""א פאזיטיווע אינטעגער n, צוריקקומען א סארטירטע ליסטע וואס האט די אומגעלייגטע נומערן אין קאלאץ סיקווענץ. די קאלאץ קאנעקשאן איז א קאנעקשאן אין מאטעמאטיק וואס באדארפט א סיקווענץ וואס איז דעפינירט ווי פאלגענד: אנהייבן מיט סיי וועלכע פאזיטיווע אינטעגער n. דערנאך ווערט יעדער טערם באקומען פון די פריערדיגע טערם ווי פאלגענד: אויב די פריערדיגע טערם איז זויער, איז די קומענדיגע טערם א האלב פון די פריערדיגע טערם. אויב די פריערדיגע טערם איז אומגעלייגט, איז די קומענדיגע טערם 3 מאל די פריערדיגע טערם פלוס 1. די קאנעקשאן איז אז נישט קיין חילוק וועלכע ווערט פון n, וועט די סיקווענץ אלעמאל אנקומען צו 1. נאטיץ: 1. קאלאץ(1) איז [1]. 2. צוריקגעקומען ליסטע סארטירט אין א פארגרייכענדע סדר. למשל: get_odd_collatz(5) צוריקקומען [1, 5] # די קאלאץ סיקווענץ פאר 5 איז [5, 8, 16, 4, 2, 1, 4, 2, 1], אזוי די אומגעלייטיקע נומערן זענען נאר 1, און 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ydd_Hebr,python,"
def valid_date(date):
    """"""איר האָבן צו שרייַבן אַ פונקציע וואָס וואַלאַדייץ אַ געגעבן דאַטע שטריקל און ריטורנס אמת אויב די דאַטע איז גילטיק אַנדערש פאַלש. די דאַטע איז גילטיק אויב אַלע פון די פאלגענדע כּללים זענען צופֿרידן: 1. די דאַטע שטריקל איז נישט ליידיק. 2. די נומער פון טעג איז ניט ווייניקער ווי 1 אָדער העכער ווי 31 טעג פֿאַר חדשים 1,3,5,7,8,10,12. און די נומער פון טעג איז ניט ווייניקער ווי 1 אָדער העכער ווי 30 טעג פֿאַר חדשים 4,6,9,11. און, די נומער פון טעג איז ניט ווייניקער ווי 1 אָדער העכער ווי 29 פֿאַר די חודש 2. 3. די חדשים זאָל ניט זיין ווייניקער ווי 1 אָדער העכער ווי 12. 4. די דאַטע זאָל זיין אין די פֿאָרמאַט: mm-dd-yyyy פֿאַר בייַשפּיל: גילטיק_דאַטע (('03-11-2000') => אמת_דאַטע (('15-01-2012') => פאַלש גילטיק_דאַטע (('04-040') => פאַלש_דאַטע (('06-04-2020') => אמת_דאַטע (('06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ydd_Hebr,python,"
def split_words(txt):
    '''געגעבן אַ שטריקל פון ווערטער, צוריקקומען אַ רשימה פון ווערטער שפּאַלטן אויף ווייץפּאַסעס, אויב קיין ווייץפּאַסעס עקסיסטירט אין דעם טעקסט איר זאָל שפּאַלטן אויף קאָמאַס ',' אויב קיין קאָמאַס עקסיסטירט איר זאָל צוריקקומען די נומער פון קלענערער אותיות מיט מאָדנע סדר אין די אַלפאַבע, אָרדערס 'א') = 0, אָרדערס' ב') = 1, ... אָרדערס 'ז') = 25 ביישפילן שפּאַלטן_ווערדס ((""העלאָ וועלט!"") â -> [""העלאָ"", ""וועלט!""] שפּאַלטן_ווערדס ((""העלאָ, וועלט!"") â -> [""העלאָ"", ""וועלט!"" שפּאַלטן_ווערדס))'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ydd_Hebr,python,"
def is_sorted(lst):
    '''געגעבען א ליסטע פון נומערן, צוריקקומען צי זיי זענען סארטירט אין א פארגרעסערונג. אויב ליסטע האט מער ווי 1 דאפליקאט פון די זעלבע נומער, צוריקקומען פאלש. נעמט אן קיין נעגאטיווע נומערן און בלויז אינטעדזשערס. ביישפילן is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ydd_Hebr,python,"
def intersection(interval1, interval2):
    """"""די אינטערוועלס זענען פארמאכט, וואס מיינט אז די אינטערוועל (באפאנג, סוף) איז ביידע אנהייב און סוף. פאר יעדע אינטערוועל איז אנגענומען אז די אנהייב איז ווייניגער אדער גלייך צו די ענדע. דיין אויפגאבע איז צו באשטימען אויב די לענג פון די אינטערוועלס איז א פריים נומער. למשל די אינטערוועלס (1, 3), (2, 4) איז (2, 3) וואס די לענג איז 1, וואס איז נישט א פריים נומער. אויב די לענג פון די אינטערוועל איז א פריים נומער, גיב צוריק ""יא"", אנדערש גיב צוריק ""ניין"". אויב די צוויי אינטערוועלס זענען נישט אינטערוועל, גיב צוריק ""ניין"". [input/output] סעמפלס: אינטערוועל (אנהייב, סוף) = (1, 2).""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ydd_Hebr,python,"
def prod_signs(arr):
    """"""איר זענט געגעבן אַ קייט פון ינטיידזשערז און איר דאַרפֿן צו צוריקקומען סכום פון מאַגנאַטודז פון ינטיידזשערז מאַלטאַפּיאַלייטיד דורך פּראָדוקט פון אַלע וואונדער פון יעדער נומער אין די קייט, רעפּריזענטיד דורך 1, -1 אָדער 0. באַמערקונג: צוריקקומען קיין איינער פֿאַר ליידיק קייט. בייַשפּיל: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == קיין איינער""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ydd_Hebr,python,"
def minPath(grid, k):
    """"""א גריד מיט N ראָוז און N קאָלאָמנס (N >= 2) און אַ positive integer k, יעדער צעל פון די גריד כּולל אַ ווערט. יעדער integer אין די קייט [1, N * N] ינקלוסיוו דערשייַנען פּונקט אַמאָל אויף די סעלז פון די גריד. איר האָבן צו געפֿינען די מינימום דרך פון לענג k אין די גריד. איר קענען אָנהייבן פון קיין צעל, און אין יעדער שריט איר קענען מאַך צו קיין פון די שכייניש סעלז, אין אנדערע ווערטער, איר קענען גיין צו סעלז וואָס טיילן אַ ברעג מיט איר קראַנט צעל. ביטע טאָן אַז אַ דרך פון לענג k מיטל באזוכן פּונקט k סעלז (ניט דאַווקע באַזונדער). איר קענען ניט גיין אויס פון די גריד. אַ דרך א (פון לענג ק) איז באטראכט ווייניקער ווי אַ דרך ב (פון לענג ק) אויב נאָך מאכן די אָרדערד ליסטעס פון די וואַלועס אויף די סעלז אַז A און ב גיין דורך (לאמיר רופן זיי ל_סט און ל_סט ב), ל_סט ב איז לעקסיקאַלי ווייניקער ווי ל_סט ב, אין אנדערע ווערטער, אַ גאַנץ וועג פון לענג k אין די גריד. איר קענען אָנהייבן פון קיין צעל, און אין יעדער שריט איר קענען גיין צו קיין שכיידיק צו קיין שכיידיק צו קיין שכיידיק צו קיין טעלז, אין יעדער צעלז פון די ריס, איר קענען גיין צו קיין טויק, אין קיין וועג פון לענג פון לענג k = k, אין קיין אנדערע ווערטער, אין קיין ין, אין אַ ריס, אין אַ ריס, אין אַ ריס, אין אַ ריס, אין אַ ריס, אין אַ ריס, אין אַ ריס, אין אַ ריס, אין די ריס, אין די ריס, אין די ריס, איז ין, אין די ריס, אין די ריס, אין די ריס, אין די ריס, אין די ריס, אין די ריס, אין די ריס, אין די ריס, אין די ריס, אין די איז י = [j, י = 1 [j, י = 1], איז י = 1 [4, י = 1 [j = 1] י =""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ydd_Hebr,python,"
def tri(n):
    """"""יעדער ווייסט פיבאָנאַצקי סיקוואַנס, עס איז שטארק געלערנט דורך מאַטעמאַטיקער אין די לעצטע פּאָר סענטשעריז. אָבער, וואָס מענטשן טאָן ניט וויסן איז טריבאָנאַצקי סיקוואַנס. טריבאָנאַצקי סיקוואַנס איז דיפיינד דורך די ריקעראַנס: tri(1) = 3 tri(n) = 1 + n / 2, אויב n איז פּער. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), אויב n איז מאָדנע. למשל: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 איר זענט געגעבן אַ ניט-נעגאַטיוו ינטייער נומער n, איר האָבן צו צוריקקומען אַ רשימה פון די ערשטער n + 1 נומערן פון די טריבאָנאַצקי סיקוואַנס. ביישפילן: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ydd_Hebr,python,"
def digits(n):
    """"""געגעבן אַ positive integer n, צוריקקומען די פּראָדוקט פון די פּאַר דידזשיץ. צוריקקומען 0 אויב אַלע דידזשיץ זענען פּער. למשל: דידזשיץ ((1) == 1 דידזשיץ ((4) == 0 דידזשיץ ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ydd_Hebr,python,"
def is_nested(string):
    '''שאַפֿן אַ פונקציע וואָס נעמט אַ שטריקל ווי ינפּוט וואָס כּולל בלויז קוואַדראַט בראַקאַץ. די פונקציע זאָל צוריקקומען אמת אויב און בלויז אויב עס איז אַ גילטיק סאַבסעקווענסע פון בראַקאַץ ווו בייַ מינדסטער איין בראַקאַץ אין די סאַבסעקווענסע איז נעסטעד. איז_נעסטעד '[[]]') â -> אמת איז_נעסטעד '[[]]]]]]]]]]]]]][[[[[[]]]]') â -> פאַלש איז_נעסטעד '[]]]]') â -> פאַלש איז_נעסטעד '[]') â -> פאַלש איז_נעסטעד '[[]]') â -> אמת איז_נעסטעד '[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ydd_Hebr,python,"

def sum_squares(lst):
    """"""איר זענט געגעבן אַ רשימה פון נומערן. איר דאַרפֿן צו צוריקקומען די סומע פון סקוואַדראַט נומערן אין די געגעבן רשימה, קייַלעכיק יעדער עלעמענט אין די רשימה צו די אויבערשטער ינט (קסנומקס) ערשטער. ביישפילן: פֿאַר יסט = [1,2,3] די רעזולטאַט זאָל זיין 14 פֿאַר יסט = [1,4,9] די רעזולטאַט זאָל זיין 98 פֿאַר יסט = [1,3,5,7] די רעזולטאַט זאָל זיין 84 פֿאַר יסט = [1.4,4.2,0] די רעזולטאַט זאָל זיין 29 פֿאַר יסט = [-2.4,1,1] די רעזולטאַט זאָל זיין 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ydd_Hebr,python,"
def check_if_last_char_is_a_letter(txt):
    '''שאַפֿן אַ פונקציע וואָס ריטורנס אמת אויב די לעצטע כאַראַקטער פון אַ געגעבן שטריקל איז אַן אַלפאַבעטיקאַל כאַראַקטער און איז נישט אַ טייל פון אַ וואָרט, און פאַלש אַנדערש. באַמערקונג: ""וואָרט"" איז אַ גרופּע פון אותיות אפגעשיידט דורך פּלאַץ. ביישפילן: טשעק_יף_לאַסט_טשאַרי_איז_אַ_ליטער""א""עפּל פּי"") â -> פאַלש טשעק_יף_לאַסט_טשאַרי_איז_אַ_ליטער""א""עפּל פּי"") â -> אמת טשעק_יף_לאַסט_טשאַרי_איז_אַ_ליטער""א""עפּל פּי "") â -> פאַלש טשעק_יף_לאַסט_טשאַרי_איז_אַ_ליטער""א""עפּל פּי"") â -> פאַלש '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ydd_Hebr,python,"
def can_arrange(arr):
    """"""שאַפֿן אַ פונקציע וואָס ריטורנס די גרעסטע אינדעקס פון אַן עלעמענט וואָס איז נישט גרעסער ווי אָדער גלייַך צו די עלעמענט גלייך פריערדיק עס. אויב קיין אַזאַ עלעמענט עקסיסטירט דעמאָלט צוריקקומען -1. די געגעבן מענגע וועט נישט אַנטהאַלטן דופּליקאַט וואַלועס. ביישפילן: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ydd_Hebr,python,"
def largest_smallest_integers(lst):
    '''שאַפֿן אַ פונקציע וואָס קערט אַ טופּל (אַ, ב), ווו 'אַ' איז די גרעסטע פון נעגאַטיוו ינטיידזשערז, און 'ב' איז די קלענסטער פון positive ינטיידזשערז אין אַ רשימה. אויב עס איז קיין נעגאַטיוו אָדער positive ינטיידזשערז, צוריקקומען זיי ווי ניין. ביישפילן: גרעסטע_קלענסטע_ינטיידזשערז[2, 4, 1, 3, 5, 7]) == (ניין, 1) גרעסטע_קלענסטע_ינטיידזשערז[[]] == (ניין, ניין) גרעסטע_קלענסטע_ינטיידזשערז[[0]] == (ניין, ניין) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ydd_Hebr,python,"
def compare_one(a, b):
    """"""שאַפֿן אַ פונקציע וואָס נעמט ינטיידזשערז, פלאָאַטס, אָדער סטרינגס רעפּריזענטינג רעאַל נומערן, און ריטורנס די גרעסערע בייַטעוודיק אין זייַן געגעבן בייַטעוודיק טיפּ. צוריקקומען ניין אויב די וואַלועס זענען גלייַך. באַמערקונג: אויב אַ פאַקטיש נומער איז רעפּריזענטיד ווי אַ שטריקל, די פלאָוטינג פונט קען זיין . אָדער , compare_one(1, 2.5) â -> 2.5 compare_one(1, ""2,3"") â -> ""2,3"" compare_one(""5,1"", ""6"") â -> ""6"" compare_one(""1"", 1) â -> ניין """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ydd_Hebr,python,"
def is_equal_to_sum_even(n):
    """"""אָפּשאַצן צי די געגעבן נומער n קענען זיין געשריבן ווי די סומע פון פּונקט 4 positive פּער נומערן בייַשפּיל is_equal_to_sum_even ((4) == פאַלש is_equal_to_sum_even ((6) == פאַלש is_equal_to_sum_even ((8) == אמת """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ydd_Hebr,python,"
def special_factorial(n):
    """"""דער בראַזיליאנער פאקטאריאל ווערט דעפינירט ווי: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! וואו n > 0 למשל: >>> special_factorial(4) 288 די פונקציע וועט באקומען א אינטעדזשער אלס אינפּוט און זאל צוריקקומען די ספעציעלע פאקטאריאל פון דעם אינטעדזשער. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ydd_Hebr,python,"
def fix_spaces(text):
    """"""_דוגמא-3ל טעקסט, פאַרבייַטן אַלע ספּייסאַז אין עס מיט אַנדערסקאָרז, און אויב אַ שטריקל האט מער ווי 2 קאָנסעקוטיווע ספּייסאַז, דעמאָלט פאַרבייַטן אַלע קאָנסעקוטיווע ספּייסאַז מיט - fix_spaces(""בייַשפּיל"") == ""בייַשפּיל"" fix_spaces(""בייַשפּיל1"") == ""בייַשפּיל_1"" fix_spaces(""בייַשפּיל2"") == ""_בייַשפּיל_2"" fix_spaces"" (בייַשפּיל 3"") == ""_בייַשפּיל-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ydd_Hebr,python,"
def file_name_check(file_name):
    """"""שאַפֿן אַ פונקציע וואָס נעמט אַ שטריקל וואָס רעפּריזענץ אַ טעקע ס נאָמען, און ריטורנס 'יא' אויב די טעקע ס נאָמען איז גילטיק, און ריטורנס 'ניין' אַנדערש. אַ טעקע ס נאָמען איז געהאלטן צו זיין גילטיק אויב און בלויז אויב אַלע די פאלגענדע באדינגונגען זענען באגעגנט: - עס זאָל ניט זיין מער ווי דרייַ דידזשיץ ('0'-'9') אין די טעקע ס נאָמען. - די טעקע ס נאָמען כּולל פּונקט איין פּונקט '.' - די סאַבסטראַנג איידער די פּונקט זאָל נישט זיין ליידיק, און עס הייבט מיט אַ בריוו פון די לאַטייַן אַלפאַעט ('אַ'-'ז' און 'אַ'-ז'). - די סאַבסטראַנג נאָך די פּונקט זאָל זיין איינער פון די פאלגענדע: ['טקסט', 'עקסע', 'ד'] ביישפילן: file_name_check""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""ד""""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ydd_Hebr,python,"


def sum_squares(lst):
    """""""" די פונקציע וועט נעמען א ליסטע פון אינטעדזשערס. פאר אלע אריינגערעכנטע אין די ליסטע, די פונקציע וועט קוואדראטירן די אינטעדזשער אריינגערעכנט אויב איר אינדעקס איז א מאלפעיק פון 3 און וועט קובירן די אינטעדזשער אריינגערעכנט אויב איר אינדעקס איז א מאלפעיק פון 4 און נישט א מאלפעיק פון 3. די פונקציע וועט נישט טוישן די אריינגערעכנטע אין די ליסטע וואס זייער אינדעקסן זענען נישט א מאלפעיק פון 3 אדער 4. די פונקציע וועט דאן צוריקקומען די סומע פון אלע אריינגערעכנטע. ביישפילן: פאר lst = [1,2,3] די אויסגאוט זאל זיין 6 פאר lst = [] די אויסגאוט זאל זיין 0 פאר lst = [-1,-5,2,-1,-5] די אויסגאוט זאל זיין -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ydd_Hebr,python,"
def words_in_sentence(sentence):
    """"""מען גיט א סטרינג וואס רעפרעזענטירט א זאץ, דער זאץ פארמאגט עטליכע ווערטער אפגעשיידט דורך א ספעיס, און מען דארף צוריקקומען א סטרינג וואס פארמאגט די ווערטער פון דער ארגינעלער זאץ, וואס זייער לענג זענען פריים נומערן, די סדר פון די ווערטער אין דער נייער סטרינג דארף זיין די זעלבע ווי דער ארגינעלער. ביישפיל1: איינפיר: זאץ = ""דאס איז א טעסט"" אויספיר: ""איז"" ביישפיל2: איינפיר: זאץ = ""לאזט גיין פאר שווימען"" אויספיר: ""גיין פאר"" באגרעניצונגען: * 1 <= len(סענטענס) <= 100 * זאץ פארמאגט בלויז אותיות """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ydd_Hebr,python,"
def simplify(x, n):
    """"""דיין אַרבעט איז צו ימפּלאַמענטירן אַ פונקציע וואָס וועט פאַרפּשוטן די אויסדרוק x * n. די פונקציע ריטורנס אמת אויב x * n יוואַליוייץ צו אַ גאַנץ נומער און פאַלש אַנדערש. ביידע קסנומקס און n, זענען שטריקל רעפּראַזענץ פון אַ בראָך, און האָבן די פאלגענדע פֿאָרמאַט, <נאַמעראַטאָר> / <דענאָמינאַטאָר> ווו ביידע נומעמאַטאָר און נומעמאַטאָר זענען positive גאַנץ נומערן. איר קענען יבערנעמען אַז קסנומקס, און n זענען גילטיק בראָכן, און טאָן ניט האָבן נול ווי נומעמאַטאָר. פאַרפּשוטן "" 1 / 5"", ""5 / 1"") = אמת פאַרפּשוטן "" 1/ 6"", ""2 / 1"") = פאַלש פאַרפּשוטן "" 7 / 10 "", ""10 / 2"") = פאַלש """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ydd_Hebr,python,"
def order_by_points(nums):
    """"""שרײַבן אַ פֿונקציע וואָס סאָרטירט די געגעבןע ליסטע פון אינטעדזשערס אין אַסינדענט סדר לויט די סאַמע פון זייערע ציפֿערן. באַמערקונג: אויב עס זענען עטלעכע זאכן מיט ענלעכע סאַמע פון זייערע ציפֿערן, סדר זיי באזירט אויף זייער אינדעקס אין דער אָריגינעלער ליסטע. למשל: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ydd_Hebr,python,"
def specialFilter(nums):
    """"""שרײַבן אַ פֿונקציע וואָס נעמט אַ מענגע פון נומערן ווי אַרייַנפיר און צוריקגעגעבן די נומער פון עלעמענטן אין דער מענגע וואָס זענען גרעסער ווי 10 און ביידע ערשטער און לעצטע דידזשיץ פון אַ נומער זענען פּאַרד (1, 3, 5, 7, 9). למשל: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ydd_Hebr,python,"
def get_max_triples(n):
    """"""איר זענט געגעבן אַ positive integer n. איר האָבן צו שאַפֿן אַ integer אַרייַנשייד אַ פון לענג n. פֿאַר יעדער i (1 ‰¤ i ‰¤ n), די ווערט פון a[i] = i * i - i + 1. צוריקקומען די נומער פון טריפּאַלז (a[i], a[j], a[k]) פון אַ ווו i < j < k, און a[i] + a[j] + a[k] איז אַ קייפל פון 3. בייַשפּיל: ינפּוט: n = 5 רעזולטאַט: 1 דערקלערונג: אַ = [1, 3, 7, 13, 21] די בלויז גילטיק טריפּאַל איז (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ydd_Hebr,python,"
def bf(planet1, planet2):
    '''אין אונדזער זון סיסטעם זענען אַכט פּלאַנאַץ: די נאָענטסטע צו די זון איז מערקיורי, די ווייַטער איינער איז ווענוס, דעמאָלט ערד, מאַרס, דזשיפּיטער, סאַטורן, אוראַנוס, נאַפּטונוס. שרייַבן אַ פונקציע וואָס נעמט צוויי פּלאַנעט נעמען ווי סטרינגס פּלאַנעט1 און פּלאַנעט2. די פונקציע זאָל צוריקקומען אַ טופּל וואָס כּולל אַלע פּלאַנאַץ וועמענס אָרביטעס זענען ליגן צווישן די אָרביט פון פּלאַנעט1 און די אָרביט פון פּלאַנעט2, סאָרטעד דורך די פּראַקסיסיטי צו די זון. די פונקציע זאָל צוריקקומען אַ ליידיק טופּל אויב פּלאַנעט1 אָדער פּלאַנעט2 זענען נישט ריכטיק פּלאַנעט נעמען. ביישפּילן bf "" י י "" יופּיטער "", "" נאַפּטונע "") ==> ("" סאַטורן "", "" יוראַנוס "") bf "" י "" י "" , "" ערד "", "" מאַרס "", "" דזשיפּיטער "", "" סנ "") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ydd_Hebr,python,"
def sorted_list_sum(lst):
    """"""שרײַב אַ פֿונקציע וואָס נעמט אַ רשימה פון סטרינגס ווי אַ פּאַראַמעטער, דיליץ די סטרינגס וואָס האָבן פּאַרד לענג פון עס, און ריטורנס די ריזאַלטיד רשימה מיט אַ סאָרטעד סדר, די רשימה איז שטענדיק אַ רשימה פון סטרינגס און קיינמאָל אַ מענגע פון נומערן, און עס קען אַנטהאַלטן דופּליקאַץ. די סדר פון די רשימה זאָל זיין אַסכענדינג דורך לענג פון יעדער וואָרט, און איר זאָל צוריקקומען די רשימה סאָרטעד דורך דעם הערשן. אויב צוויי ווערטער האָבן די זעלבע לענג, סאָרט די רשימה אַלפאַבעטיש. די פונקציע זאָל צוריקקומען אַ רשימה פון סטרינגס אין סאָרטעד סדר. איר קען יבערנעמען אַז אַלע ווערטער וועט האָבן די זעלבע לענג. למשל: אַסערט רשימה_סאָרט[""aa"", ""אַ"", ""aaa""]) => אַסערט רשימה_סאָרט[""ab"", ""אַ"", ""aaa"", ""cd"" => ""cd ])""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ydd_Hebr,python,"
def x_or_y(n, x, y):
    """"""א פּשוטע פּראָגראַם וואָס זאָל צוריקקומען די ווערט פון x אויב n איז אַ פּריים נומער און זאָל צוריקקומען די ווערט פון y אַנדערש. ביישפילן: פֿאַר x_or_y(7, 34, 12) == 34 פֿאַר x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ydd_Hebr,python,"
def double_the_difference(lst):
    '''געגעבן אַ רשימה פון נומערן, צוריקקומען די סומע פון סקוואַדראַץ פון די נומערן אין דער רשימה וואָס זענען פּאַרד. איגנאָרירן נומערן וואָס זענען נעגאַטיוו אָדער ניט ינטיידזשערז. טאָפּל_די_שיידן (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 טאָפּל_די_שיידן (([-1, -2, 0]) == 0 טאָפּל_די_שיידן (([9, -2]) == 81 טאָפּל_די_שיידן (([0]) == 0 אויב די ינפּוט רשימה איז ליידיק, צוריקקומען 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ydd_Hebr,python,"
def compare(game,guess):
    """"""איך מיין אז מיר אלע געדענקען דעם געפיל ווען מען ווייסט צום סוף די רעזולטאט פון א לאנג ערווארטעטע געשעעניש. די געפילן און געדאנקען וואס מען האט אין יענע מינוט זענען זיכער ווערט צו באמערקן און פארגלייכן. דיין אויפגאבע איז צו באשטימען אויב א מענטש האט ריכטיג געכאפט די רעזולטאטן פון א צאל פון שידוכים. מען גיט דיר צוויי ערייען פון סקארס און געסעס פון גלייכע לענג, וואו יעדער אינדעקס ווייזט א שידוך. צוריקקומען אן עריי פון די זעלבע לענג וואס צייגט ווי ווייט אוועק יעדער געסעס איז געווען. אויב זיי האבן ריכטיג געכאפט, איז די ווערט 0, און אויב נישט, איז די ווערט די אבסורוטע חילוק צווישן די געסעס און די סקאר. למשל:[[1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare[[0,5,0,4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ydd_Hebr,python,"
def Strongest_Extension(class_name, extensions):
    """"""איר וועט באַקומען די נאָמען פון אַ קלאַס (אַ שטריקל) און אַ רשימה פון עקסטענשאַנז. די עקסטענשאַנז זענען צו זיין געניצט צו לאָדן נאָך קלאסן צו די קלאַס. די שטאַרקייַט פון די עקסטענשאַנז איז ווי גייט: זאל קאַפּ זייַן די נומער פון די הויפּטקאַסער אותיות אין די עקסטענשאַנז נאָמען, און זאל סם זייַן די נומער פון קליינע אותיות אין די עקסטענשאַנז נאָמען, די שטאַרקייַט איז געגעבן דורך די בראָך קאַפּ - סם. איר זאָל געפֿינען די שטאַרקאַסט עקסטענשאַנז און צוריקקומען אַ שטריקל אין דעם פֿאָרמאַט: ClassName.StrongestExtensionName. אויב עס זענען צוויי אָדער מער עקסטענשאַנז מיט די זעלבע שטאַרקייַט, איר זאָל קלייַבן די איינער וואָס קומט ערשטער אין די רשימה. למשל, אויב איר זענען געגעבן ""סלייסיז"" ווי די קלאַס און אַ רשימה פון די עקסטענשאַנז: ['SEviRNGSliCes', 'Cheese', 'StuF'] דעמאָלט איר זאָל צוריקקומען 'SLICENS.SEviRNGSliCes' זינט 'SEviRNGCes' איז די שטאַרקאַסט בריוואַטער פון די עקסטענשאַנז, די שטאַרקייַט איז געגעבן דורך די בראָקייַט פון די פראַקס CAP - SM. איר זאָל געפֿינען די סטריקט די סטריקט די סטריקט די סטריקט פון די סטריקט פון די סטריקס און צוריקקומען אַ סטריקט די סטריקט פון די סטריקט פון די סטריקט אין די סטריקט פון די סטריקט פון די סטריקט.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ydd_Hebr,python,"
def cycpattern_check(a , b):
    """"""איר זענט געגעבן 2 ווערטער. איר דאַרפֿן צו צוריקקומען אמת אויב די רגע וואָרט אָדער קיין פון זייַן ראָוטיישאַנז איז אַ סאַבסטראַנג אין דער ערשטער וואָרט cycpattern_check(""abcd"",""abd"") => פאַלש cycpattern_check(""העלאָ"",""על"") => אמת cycpattern_check(""וואַסאַפּ"",""פּסוס"") => פאַלש cycpattern_check""abab"",""baa"") => אמת cycpattern_check(""עפע"",""עעף"") => פאַלש cycpattern_check""(שימענס"",""סימענ"") => אמת """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ydd_Hebr,python,"
def even_odd_count(num):
    """"""געגעבן אַ גאַנץ נומער. צוריקקומען אַ טופּל אַז האט די נומער פון פּאַרע און פּאַרע דידזשיץ ריספּעקטיוולי. בייַשפּיל: אפילו_אָד_קאָונט ((-12) ==> (1, 1) אפילו_אָד_קאָונט ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ydd_Hebr,python,"
def int_to_mini_roman(number):
    """"""געגעבן אַ positive גאַנץ נומער, באַקומען זייַן רוימישע נומעראַל עקוויוואַלענט ווי אַ שטריקל, און צוריקקומען עס אין קלענערער.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ydd_Hebr,python,"
def right_angle_triangle(a, b, c):
    '''געגעבן די לענג פון די דריי זייטן פון א דרייקעלע. צוריקקומען אמת אויב די דריי זייטן פארמאגן א ריכט-ענגל דרייקעלע, פאַלש אַנדערש. א ריכט-ענגל דרייקעלע איז א דרייקעלע אין וועלכע איין ווינקל איז ריכט ווינקל אָדער 90 גראַד. ביישפּיל: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ydd_Hebr,python,"
def find_max(words):
    """"""שרײַב אַ פֿונקציע וואָס נעמט אַ רשימה פון שטריכן. די רשימה כּולל פאַרשידענע ווערטער. צוריקקומען דעם וואָרט מיט מאַקסימום נומער פון יינציק אותיות. אויב קייפל שטריכן האָבן מאַקסימום נומער פון יינציק אותיות, צוריקקומען די וואָס קומט ערשטער אין לעקסיקאָגראַפיקאַל סדר. find_max (([""נעם"", ""פון"", ""שטריך""]) == ""שטריך"" find_max (([""נעם"", ""ענעם"", ""שפּיל""]) == ""ענעם"" find_max (([""איייייייייייי"", ""בב"" , ""ק""]) == """" ייאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַאַ""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ydd_Hebr,python,"
def eat(number, need, remaining):
    """"""איר זענט אַ הונגעריק ראַבאַט, און איר האָבן שוין געגעסן אַ זיכער נומער פון קעראַץ, אָבער איצט איר דאַרפֿן צו עסן מער קעראַץ צו פאַרענדיקן די טאָג ס מילז. איר זאָל צוריקקומען אַ מענגע פון [ גאַנץ נומער פון געגעסן קעראַץ נאָך דיין מילז, די נומער פון קעראַץ לינקס נאָך דיין מילז ] אויב עס זענען נישט גענוג רוען קעראַץ, איר וועט עסן אַלע רוען קעראַץ, אָבער וועט נאָך זיין הונגעריק. בייַשפּיל: * עסן ((5, 6, 10) -> [11, 4] * עסן ((4, 8, 9) -> [12, 1] * עסן ((1, 10, 10) -> [11, 0] * עסן ((2, 11, 5) -> [7, 0] וועריאַבאַלז: @ נומער: ינטעגער די נומער פון קעראַץ אַז איר האָבן געגעסן. @ נויט: ינטעגער די נומער פון קעראַץ אַז איר דאַרפֿן צו עסן. @ רעשט: ינטעגער די נומער פון רוען קעראַץ אַז איר דאַרפֿן צו עסן. @ רעשט: ינטעגער די נומער פון רוען קעראַץ אין לאַג: * קנע = 0 = <= <= 1000 * <= 0 = <= 1000 *""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ydd_Hebr,python,"
def do_algebra(operator, operand):
    """"""די ערשטע ליסטע האט יסודותדיקע אלגעברע אפעראציעס, און די צווייטע ליסטע איז א ליסטע פון אינטעדזשערס. ניצט די צוויי געגעבן ליסטע צו בויען די אלגעברע אויסדרוק און צוריקקומען די אפוואל פון דעם אויסדרוק. די יסודותדיקע אלגעברע אפעראציעס: צולייגן (+) אראפנעמען (-)) מאלטיפייען (*) פלאר דיוויזשן (//) עקספאנענטאציע (**) ביישפיל: אפעראטאר['+', '*', '-'] עריי = [2, 3, 4, 5] רעזולטאט = 2 + 3 * 4 - 5 => רעזולטאט = 9 נאט: די לענג פון ליסטע פון אפעראטאר איז גלייך צו די לענג פון די אפעראנט ליסטע מינוס איינס. אפעראנט איז א ליסטע פון נישט-נעגאַטיווע אינטעדזשערס. אפעראטאר האט כאטשיג איין אפעראטאר ליסטע, און אפעראנט ליסטע האט כאטשיג צוויי אפעראנטן. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ydd_Hebr,python,"
def solve(s):
    """"""אויב s[i] איז א אות, זאל מען צוריקדרייען די קאסע פון נידעריקער צו אויבערשטער אדער פארקערט, און אויב נישט זאל מען עס לאזן ווי עס איז. אויב די שטריקל אנטהאלט נישט קיין אותיות, זאל מען צוריקדרייען די שטריקל. די פונקציע זאל צוריקקומען די ריזאלטעד שטריקל. א משל סאלווען (((""1234"") = ""4321"" סאלווען (((""ab"") = ""AB"" סאלווען (((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ydd_Hebr,python,"
def string_to_md5(text):
    """"""געגעבן אַ שטריקל 'טעקסט', צוריקקומען זייַן md5 האַש עקוויוואַלענט שטריקל. אויב 'טעקסט' איז אַ ליידיק שטריקל, צוריקקומען קיין. >>> string_to_md5('העלא וועלט') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ydd_Hebr,python,"
def generate_integers(a, b):
    """"""געגעבן צוויי positive ינטאַדזשערז אַ און ב, צוריקקומען די אַפֿילו די דידזשיץ צווישן אַ און ב, אין אַסיענדינג סדר. פֿאַר בייַשפּיל: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
