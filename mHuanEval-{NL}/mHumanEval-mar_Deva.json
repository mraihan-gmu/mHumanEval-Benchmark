[
    {
        "task_id": "HumanEval/0",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"दिलेल्या क्रमांकांच्या यादीमध्ये, दिलेल्या थ्रेशोल्डपेक्षा कोणतीही दोन संख्या एकमेकांशी जवळ आहेत का ते तपासा. उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) खोटे >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) खरे \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"या फंक्शनमध्ये इनपुट केलेली स्ट्रिंग म्हणजे अनेक गटांच्या समाविष्ट केलेल्या कंसातील स्ट्रिंग. तुमचे ध्येय त्या गटांना स्वतंत्र स्ट्रिंगमध्ये वेगळे करणे आणि त्यांची यादी परत करणे आहे. स्वतंत्र गट संतुलित आहेत (प्रत्येक उघडा कंस योग्यरित्या बंद आहे) आणि एकमेकांच्या आत समाविष्ट नाहीत. इनपुट स्ट्रिंगमधील कोणत्याही स्पेसकडे दुर्लक्ष करा. उदाहरणः >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) ' ['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"एक सकारात्मक फ्लोटिंग पॉइंट नंबर दिल्यास, तो पूर्णांक भाग (दिलेल्या संख्येपेक्षा मोठा पूर्णांक लहान) आणि दशांश (बाकीचा भाग नेहमी 1 पेक्षा लहान) मध्ये विघटित केला जाऊ शकतो. संख्येचा दशांश भाग परत करा. उदाहरणः >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"तुम्हाला बँक खात्यावरील जमा आणि पैसे काढण्याच्या व्यवहारांची यादी दिली जाते जी शून्य शिल्लकाने सुरू होते. तुमचे कार्य हे शोधणे आहे की जर कोणत्याही क्षणी खात्याची शिल्लक शून्य खाली येते आणि त्या क्षणी फंक्शन True परत केले पाहिजे. अन्यथा ते False परत केले पाहिजे. उदाहरणः >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"इनपुट क्रमांकांच्या दिलेल्या यादीसाठी, या डेटासेटच्या माध्यमाच्या आसपास सरासरी निरपेक्ष विचलन गणना करा. सरासरी निरपेक्ष विचलन प्रत्येक घटक आणि केंद्रबिंदू (या प्रकरणात सरासरी) मधील सरासरी निरपेक्ष फरक आहे: एमएडी = सरासरी █ x - x_mean █ उदाहरणः >>> mean_absolute_deviation █ [1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"इनपुट सूचीच्या प्रत्येक दोन सलग घटकांमध्ये एक संख्या 'डिलिमिटर' घाला `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"या फंक्शनमध्ये इनपुट म्हणजे अंतराळाने विभक्त केलेल्या कंसातील अनेक गटांचे प्रतिनिधित्व केलेली स्ट्रिंग आहे. प्रत्येक गटासाठी, कंसातील सर्वात खोल स्तराचे आउटपुट करा. उदा. (() (()) कमाल दोन स्तरांचे नेस्टिंग आहे तर ((())) चे तीन आहेत. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"फक्त दिलेल्या सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array' ] समाविष्ट असलेल्या स्ट्रिंगची इनपुट यादी फिल्टर करा.\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"पूर्णांक सूचीसाठी, एक यादी आणि सूचीतील सर्व पूर्णांक गुणांक असलेली एक टपल परत करा. रिक्त बेरीज 0 आणि रिक्त गुणांक 1 समान असावी. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक यादीतून, अनुक्रमाच्या दिलेल्या क्षणापर्यंत सापडलेल्या रोलिंग कमाल घटकांची यादी तयार करा. >>> रोलिंग_मॅक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"पुरवठा केलेल्या स्ट्रिंगसह सुरू होणारा सर्वात लहान पॅलिंड्रोम शोधा. अल्गोरिदम कल्पना सोपी आहे: - पुरवठा केलेल्या स्ट्रिंगचा सर्वात लांब पोस्टफिक्स शोधा जो पॅलिंड्रोम आहे. - पॅलिंड्रोमिक प्रत्यय आधी येणा string्या स्ट्रिंग प्रीफिक्सच्या स्ट्रिंगच्या शेवटी जोड. >>> make_palindrome('') ' ' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"दिलेली स्ट्रिंग पॅलिंड्रोम आहे का ते तपासा.\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इनपुटमध्ये दोन स्ट्रिंग्स a आणि b आहेत ज्यात फक्त 1 आणि 0 आहेत. या इनपुटवर बायनरी XOR करा आणि परिणाम स्ट्रिंग म्हणून परत करा. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"string यादीमधून सर्वात लांब string परत करा. समान लांबीच्या अनेक स्ट्रिंग्स असल्यास प्रथम string परत करा. इनपुट सूची रिक्त असल्यास None परत करा. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"दोन पूर्णांक a आणि b >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"इनपुट स्ट्रिंगच्या सर्व उपसर्गातील सर्वात लहान ते सर्वात लांब सर्व पूर्वपदांची सूची परत करा >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 पासून n पर्यंतच्या अंतराळ-सीमित संख्येसह एक स्ट्रिंग परत करा. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"दिलेल्या स्ट्रिंगमध्ये किती भिन्न वर्ण आहेत (केसची पर्वा न करता) ते शोधा >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"या फंक्शनमध्ये इनपुट एक स्ट्रिंग आहे जी विशेष ASCII स्वरूपात संगीत नोट्स दर्शवते. आपले कार्य हे आहे की पूर्णांक स्ट्रिंग सूचीचे विश्लेषण करणे जे अनेक बीट्सशी संबंधित आहे. येथे एक आख्यायिका आहे: 'o' नोट, शेवटचे चार बीट्स 'o' क्रॉस - अर्धा नोट, शेवटचे दोन बीट्स 'o' क्रॉस - क्वार्टर नोट, शेवटचा एक बीट्स >>> parse_music. 'o' क्रॉस . o' क्रॉस . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"मूळ स्ट्रिंगमध्ये दिलेल्या सबस्ट्रिंगची किती वेळा शोधता येईल ते शोधा. आच्छादित प्रकरणे मोजा. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"इनपुट 'शून्य' ते 'नऊ' पर्यंतच्या संख्यांची जागा-सीमाबद्ध स्ट्रिंग आहे. वैध पर्याय 'शून्य', 'एक', 'दोन', 'तीन', 'चार', 'पाच', 'सहा', 'सात', 'आठ' आणि 'नऊ' आहेत. लहान ते सर्वात मोठ्या क्रमांकावर क्रमवारी लावलेल्या संख्येसह स्ट्रिंग परत करा >>> sort_numbers (('तीन एक पाच') 'एक तीन पाच' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"पुरवठा केलेल्या संख्यांच्या सूचीमधून (कमीतकमी दोन) दोन निवडा आणि परत करा जे एकमेकांशी सर्वात जवळ आहेत आणि त्यांना क्रमाने परत करा (सर्वात लहान संख्या, मोठी संख्या). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"संख्यांची (किमान दोन घटकांची) यादी दिली आहे, त्या सूचीवर एक रेषेचा रूपांतर लागू करा, जेणेकरून सर्वात लहान संख्या 0 होईल आणि सर्वात मोठी 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] होईल.\"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"फक्त पूर्णांक >>> filter_integers ((['a', 3.14, 5]) साठी कोणत्याही पायथन मूल्यांची दिलेली यादी फिल्टर करा [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"दिलेल्या स्ट्रिंगची परत येणारी लांबी >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"दिलेल्या n संख्येसाठी, n पेक्षा लहान, n ची समान रीतीने विभागणारी सर्वात मोठी संख्या शोधा >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"दिलेल्या पूर्णांकातील सर्व अभागांची यादी सर्वात लहान ते सर्वात मोठ्या क्रमाने परत करा. प्रत्येक घटकांची संख्या घटकांच्या संख्येशी संबंधित आहे. इनपुट संख्या सर्व घटकांच्या उत्पादनाइतकी असावी >>> फॅक्टोरलाइझ करा ((8) [2, 2, 2] >>> फॅक्टोरलाइझ करा ((25) [5, 5] >>> फॅक्टोरलाइझ करा ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक सूचीमधून, एकदापेक्षा जास्त वेळा येणारे सर्व घटक काढा. इनपुटमधील समान घटकांची क्रमवारी ठेवा. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"दिलेल्या स्ट्रिंगसाठी, लहान अक्षरांना मोठ्या अक्षरांमध्ये आणि मोठ्या अक्षरांना लहान अक्षरांमध्ये फ्लिप करा. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"एका स्ट्रिंगमध्ये स्ट्रिंगची सूची जोडणे >>> जोडणे (([]) '' >>> जोडणे ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"फक्त दिलेल्या उपसर्गाने सुरू होणाऱ्या स्ट्रिंग्सची इनपुट यादी फिल्टर करा. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"यादीतील फक्त सकारात्मक संख्या परत करा. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"दिलेली संख्या प्राइम असल्यास खरे आणि अन्यथा खोटे परत करा. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs हे बहुपदचे गुणांक आहेत. find_zero find x अशा प्रकारे poly ((x) = 0. find_zero फक्त शून्य बिंदू परत करते, जरी बरेच असतील. शिवाय, find_zero फक्त xs ची यादी घेते ज्यात गुणांकची संख्या आणि सर्वात मोठा शून्य गुणांक असतो कारण तो समाधानाची हमी देतो. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"पॉईंट xs येथे गुणांक xs सह बहुपद मूल्यांकन करते. xs[0] + xs [1] * x + xs [1] * x ^ 2 + .... xs [n] * x ^ n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"हे फंक्शन एक सूची l घेते आणि एक सूची l' परत करते जेणेकरून l' तीनने विभाज्य नसलेल्या निर्देशांकांमध्ये l बरोबर समान आहे, तर तिचे मूल्य तीनने विभाज्य असलेल्या निर्देशांकांवर l च्या संबंधित निर्देशांकांच्या मूल्यांसारखे आहेत, परंतु क्रमवारी लावलेले आहेत. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"एका सूचीतील क्रमवारी लावलेले अनन्य घटक परत करा >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"यादीतील कमाल घटक परत करा. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 किंवा 13 ने विभाज्य असलेल्या n पेक्षा कमी पूर्णांकात 7 ची संख्या किती वेळा येते ते दाखवते. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"हे फंक्शन एक सूची l घेते आणि एक सूची l' परत करते जेणेकरून l' हे विषम निर्देशांकांमध्ये l बरोबर असेल, तर त्याचे सम निर्देशांकांमधील मूल्य l च्या सम निर्देशांकांमधील मूल्यांसारखे असतील, परंतु क्रमवारी लावलेले असतील. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"एन्कोड_सायक्लिक फंक्शनसह इनपुट स्ट्रिंग एन्कोड केले जाते. डीकोड केलेली स्ट्रिंग परत करते.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"तीन वर्णांच्या सायकल गटांद्वारे एन्कोड केलेली स्ट्रिंग परत करते.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ही n-वी संख्या परत करते जी एक फिबोनॅकी संख्या आहे आणि ती देखील प्राइम आहे. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero पूर्णांक यादी इनपुट म्हणून घेते. जर यादीमध्ये तीन भिन्न घटक असतील तर ते शून्य पर्यंत एकत्रित केले जातात आणि अन्यथा खोटे. >>> triples_sum_to_zero (([1, 3, 5, 0]) खोटे >>> triples_sum_to_zero (([1, 3, -2, 1]) खरे >>> triples_sum_to_zero (([1, 2, 3, 7]) खोटे >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) खरे >>> triples_sum_to_zero ([1, 3, -2, 1]) खोटे \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"एका रस्त्याची कल्पना करा जी एक परिपूर्ण सरळ अंतहीन लांब रेषा आहे. n कार डावीकडून उजवीकडे चालवित आहेत; एकाच वेळी, n कारचा एक वेगळा संच उजवीकडून डावीकडे चालवित आहे. कारच्या दोन संच एकमेकांपासून खूप दूर आहेत. सर्व कार समान वेगाने चालतात. डावीकडून उजवीकडे चालणारी कार उजवीकडून डावीकडे चालणार्या कारला धडकते तेव्हा दोन कार टक्कर करतात असे म्हटले जाते. तथापि, कार अंतहीन मजबूत आणि मजबूत आहेत; परिणामी, ते टक्कर न घेतल्यासारखे त्यांच्या मार्गाने पुढे जात राहतात. हे फंक्शन अशा टक्करची संख्या दर्शवते.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]) सह घटकांसह सूची परत करा.\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero पूर्णांक यादी इनपुट म्हणून घेते. जर यादीमध्ये दोन भिन्न घटक असतील तर ते शून्य पर्यंत एकत्रित केले जातात आणि अन्यथा खोटे असतात. >>> pairs_sum_to_zero (([1, 3, 5, 0]) खोटे >>> pairs_sum_to_zero (([1, 3, -2, 1]) खोटे >>> pairs_sum_to_zero (([1, 2, 3, 7]) खोटे >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) खरे >>> pairs_sum_to_zero (([1]) खोटे \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"इनपुट क्रमांक x चे संख्यात्मक आधार बेसमध्ये बदला. रूपांतरानंतर स्ट्रिंग प्रतिनिधित्व परत करा. बेस क्रमांक 10 पेक्षा कमी आहेत. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"त्रिकोणाच्या बाजूची लांबी आणि उच्च परतावा क्षेत्र दिले. >>> त्रिकोण_क्षेत्र\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"फिबोनॅकी अनुक्रमाप्रमाणेच फिबोनॅकी अनुक्रमाप्रमाणेच एक अनुक्रम आहे. खालीलप्रमाणे परिभाषित केले आहे: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया फिबोनॅकी अनुक्रमाच्या n-व्या घटकाची कार्यक्षमतेने गणना करण्यासाठी एक फंक्शन लिहा. रिकर्शन वापरू नका. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"यादीतील घटकांची पुनरावृत्ती मध्यभागी l. >>> मध्यभागी (([3, 1, 2, 4, 5]) 3 >>> मध्यभागी (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"दिलेल्या स्ट्रिंग एक पॅलिंड्रोम आहे की नाही हे तपासते >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n मोड्युल p परत करा (संख्यांक लक्षात ठेवा). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"एन्कोड_शिफ्ट फंक्शनसह इनपुट स्ट्रिंग एन्कोड केले जाते. डीकोड केलेली स्ट्रिंग परत करते.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"अक्षरेमधील प्रत्येक वर्ण 5 ने हलवून एन्कोड केलेली स्ट्रिंग परत करते.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels हे एक फंक्शन आहे जे स्ट्रिंग घेते आणि स्वर नसलेली स्ट्रिंग परत करते. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd'\"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"जर सूची मधील सर्व संख्या थ्रेशोल्ड टी च्या खाली असतील तर सत्य परत करा. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"दोन संख्या x आणि y जोडा >>> जोडा ((2, 3) 5 >>> जोडा ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"दोन शब्दांमध्ये समान वर्ण आहेत का ते तपासा. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars ((('abcd', 'dddddddabddce') False >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-व्या फिबोनॅकी क्रमांकाची संख्या परत करा. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets हा \"<\" आणि \">\" चा स्ट्रिंग आहे. प्रत्येक उघडण्याच्या ब्रॅकेटमध्ये संबंधित बंद ब्रॅकेट असल्यास True परत करा. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"True परत करा जर यादीतील घटक एकसंधपणे वाढत किंवा कमी होत असतील. >>> एकसंध (([1, 2, 4, 20]) True >>> एकसंध (([1, 20, 4, 10]) False >>> एकसंध (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"दोन सूचींसाठी क्रमवारी लावलेले अद्वितीय सामान्य घटक परत करा. >>> सामान्य (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n चा सर्वात मोठा प्राइम फॅक्टर परत करा. n > 1 असे गृहीत धरून आणि प्राइम नाही. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n हे एक फंक्शन आहे जे 1 ते n पर्यंतच्या संख्येची बेरीज करते. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets हा \"(\" आणि \"\") चा स्ट्रिंग आहे. प्रत्येक उघडण्याच्या ब्रॅकेटमध्ये संबंधित बंद ब्रॅकेट असल्यास True परत करा. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs बहुपदातील गुणांक दर्शविते. xs[0] + xs[1] * x + xs[2] * x^2 + .... या बहुपदातील व्युत्पन्न त्याच स्वरूपात परत करा. >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न [(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"फिबफिब क्रमांक क्रम हा फिबोनॅकी अनुक्रमाप्रमाणेच एक क्रम आहे जो खालीलप्रमाणे परिभाषित केला आहे: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). कृपया fibfib क्रमांक अनुक्रमाच्या n-व्या घटकाची कार्यक्षमतेने गणना करण्यासाठी एक फंक्शन लिहा. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"एक फंक्शन vowels_count लिहा जी शब्द दर्शविणारी स्ट्रिंग इनपुट म्हणून घेते आणि स्ट्रिंगमधील स्वर संख्या परत करते. या प्रकरणात स्वर 'अ', 'ई', 'आय', 'ओ', 'यू' आहेत. येथे, 'य' देखील एक स्वर आहे, परंतु केवळ जेव्हा तो दिलेल्या शब्दाच्या शेवटी असतो. उदाहरणः >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"आणखी चाचणी प्रकरणे जोडा.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"परिपत्रक x च्या पूर्णांकातील अंक हलवा, अंक उजवीकडे हलवा आणि परिणामाची स्ट्रिंग म्हणून परत करा. जर शिफ्ट > अंकांची संख्या असेल तर अंकांची परत उलटी करा. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"कार्य एक फंक्शन लिहा जे इनपुट म्हणून स्ट्रिंग घेते आणि फक्त वरच्या वर्णांचे बेरीज परत करते. उदाहरणे: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"या कार्य, आपण सफरचंद आणि oranges एक संख्या फळे एक टोपली मध्ये वितरित केले जातात की प्रतिनिधित्व करणारी एक स्ट्रिंग दिले जाईल या टोपली सफरचंद, संत्री, आणि आंबा फळे समाविष्टीत आहे. संत्री आणि सफरचंद एकूण संख्या प्रतिनिधित्व करणारी स्ट्रिंग आणि एक पूर्णांक दिले टोपली मध्ये फळे एकूण संख्या प्रतिनिधित्व टोपली मध्ये आंबा फळे संख्या परत. उदाहरणार्थः fruit_distribution\"5(सफरचंद आणि 6 oranges\", 19) ->19 - 5 - 6 = 8 fruit_distribution\"0 apples आणि 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples आणि 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples आणि 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"नकारात्मक पूर्णांक नोड असलेल्या झाडाच्या शाखांचे प्रतिनिधित्व करणारे अॅरे दिलेले आपले कार्य नोडपैकी एक उचलणे आणि ते परत करणे आहे. उचललेला नोड सर्वात लहान सम मूल्याचा नोड असावा. जर समान सर्वात लहान सम मूल्याचे अनेक नोड आढळले तर सर्वात लहान निर्देशांक असलेला नोड परत करा. उचललेला नोड यादीमध्ये परत केला पाहिजे, [smallest_value, त्याचे निर्देशांक ], जर तेथे कोणतीही सम मूल्ये नसतील किंवा दिलेला अॅरे रिक्त असेल तर परत करा []. उदाहरणः 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 चे सर्वात लहान सम मूल्य आहे आणि 2 चे सर्वात लहान निर्देशांक आहे. उदाहरण 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 चे सर्वात लहान मूल्य आहे आणि 2 चे सर्वात लहान निर्देशांक आहे. उदाहरण 3: इनपुटः [] आउटपुटः [] [4: [5, 3, 4, 2] आउटपुटः [0, 0] आउटपुटः 1 सर्वात लहान नोड आहे, परंतु निर्देशांक शून्य आहे. उदाहरणः 1 * सर्वात लहान नोड, जेथे शून्य आहे, परंतु तेथे दोन शून्य आहे. उदाहरणः [0,0,0,0,0,0, 1] * 1 = शून्य.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''आपल्याला सकारात्मक पूर्णांकची नॉन-रिक्त यादी दिली आहे. शून्यपेक्षा मोठी आणि पूर्णांक स्वतः च्या मूल्यापेक्षा जास्त किंवा समान वारंवारता असलेली सर्वात मोठी पूर्णांक परत करा. पूर्णांकची वारंवारता ही यादीमध्ये दिसणार्या वेळाची संख्या आहे. जर असे मूल्य अस्तित्वात नसेल तर -1. उदाहरणेः शोध[4, 1, 2, 2, 3, 1]) == 2 शोध[1, 2, 2, 3, 3, 3, 4, 4]) == 3 शोध[5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''पूर्णांक सूची दिल्यास, विचित्र क्रमाने सूची परत करा. विचित्र क्रमवारी लावणे, जेव्हा आपण किमान मूल्यापासून प्रारंभ करता, नंतर उर्वरित पूर्णांकातील जास्तीत जास्त, नंतर किमान आणि असेच. उदाहरणे: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''त्रिकोणाच्या तीन बाजूंची लांबी दिली. त्रिकोणाचे क्षेत्रफळ दोन दशमलव बिंदूपर्यंत गोल करून परत करा जर तीन बाजू वैध त्रिकोण बनवतात. अन्यथा -1 परत करा तीन बाजू वैध त्रिकोण बनवतात जेव्हा कोणत्याही दोन बाजूंचा बेरीज तिसर्या बाजूपेक्षा मोठा असतो. उदाहरणः त्रिकोण_क्षेत्रफळ ((3, 4, 5) == 6.00 त्रिकोण_क्षेत्रफळ ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''एखादा फंक्शन लिहा जो ऑब्जेक्ट q उडेल तर True आणि अन्यथा False परत करतो. ऑब्जेक्ट q उडेल जर तो संतुलित असेल (तो एक पॅलिंड्रोमिक यादी आहे) आणि त्याचे घटक बेरीज जास्तीत जास्त शक्य वजनापेक्षा कमी किंवा समान असेल w. उदाहरणः will_it_fly (([1, 2], 5) â -> False # 1+2 जास्तीत जास्त शक्य वजनापेक्षा कमी आहे, परंतु तो असंतुलित आहे. will_it_fly (([3, 2, 3], 1) â -> False # तो संतुलित आहे, परंतु 3+2+3 जास्तीत जास्त शक्य वजनापेक्षा जास्त आहे. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 जास्तीत जास्त शक्य वजनापेक्षा कमी आहे, आणि तो संतुलित आहे. will_it_fly ((([3], â 5) -> True # 3 जास्तीत जास्त शक्य वजनापेक्षा कमी आहे, आणि तो संतुलित आहे.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"पूर्णांक असलेल्या अॅरेला दिलेला अॅरे पॅलिंड्रोमिक बनविण्यासाठी बदलण्याची आवश्यकता असलेल्या घटकांची किमान संख्या शोधा. पॅलिंड्रोमिक अॅरे हा एक अॅरे आहे जो मागे आणि पुढे समान वाचला जातो. एका बदलामध्ये आपण एक घटक इतर कोणत्याही घटकामध्ये बदलू शकता. उदाहरणार्थः smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''दोन स्ट्रिंग्सची यादी स्वीकारणारी आणि त्या यादीची संख्या इतर सर्व स्ट्रिंग्सपेक्षा कमी असलेली यादी परत करणारी एक फंक्शन लिहा. जर दोन्ही यादींमध्ये समान संख्या असेल तर पहिली यादी परत करा. उदाहरणे total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi'], 'hi'_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"एक फंक्शन लिहा जे दिलेली संख्या 3 प्राइम नंबरची गुणाकार असेल तर सत्य आणि अन्यथा खोटे असेल. (a) 100 पेक्षा कमी आहे हे जाणून उदाहरणः is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"तुमचे काम असे फंक्शन लिहून काढणे आहे जे जर संख्या x ही n ची एक साधी शक्ती असेल तर ते सत्य आणि इतर प्रकरणांमध्ये खोटे परत करते. x ही n ची एक साधी शक्ती आहे जर n**int=x उदाहरणार्थ: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''एक पूर्णांक a घेणारा आणि जर हा पूर्णांक काही पूर्णांक संख्याचा घन असेल तर सत्य परत करणारा एक फंक्शन लिहा. टीपः आपण इनपुट नेहमी वैध असल्याचे गृहीत धरू शकता. उदाहरणे: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"तुम्हाला हेक्साडेसिमल संख्या एक स्ट्रिंग म्हणून प्राप्त करणारी आणि हेक्साडेसिमल अंकांची संख्या मोजणारी एक फंक्शन लिहिण्याची कामगिरी देण्यात आली आहे. हेक्साडेसिमल अंकांची संख्या 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F आहे. प्राइम नंबर 2, 3, 5, 7, 11, 13, 17,. . . आहेत. त्यामुळे तुम्हाला खालील अंकांची संख्या निश्चित करावी लागेल: 2, 3, 5, 7, B (=डेसिमल 11), D (=डेसिमल 13). टीपः आपण इनपुट नेहमी बरोबर किंवा रिक्त स्ट्रिंग आहे असे गृहीत धरू शकता, आणि A,B,C,D,E,F हे प्रतीक नेहमी मोठे आहेत. उदाहरणे: \"num\" साठी आउटपुट num = 1. \"num\" साठी आउटपुट num = 1. \"num\" साठी आउटपुट num = 1077E असावे 2. \"num\" साठी num = \"num33\" साठी num = \"num1ABED\" असावे 4. \"num\" साठी num = \"num\" असावे 4. \"BCD\" साठी num = 6.0678912345 \"A\" साठी आउटपुट num = 2. \"2020\" असावे.\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"आपल्याला दशमलव स्वरूपात एक संख्या दिली जाईल आणि आपले कार्य हे बायनरी स्वरूपात रूपांतरित करणे आहे. फंक्शनने एक स्ट्रिंग परत करावी, ज्यामध्ये प्रत्येक वर्ण बायनरी संख्या दर्शवितो. स्ट्रिंगमधील प्रत्येक वर्ण '0' किंवा '1' असेल. स्ट्रिंगच्या सुरूवातीस आणि शेवटी 'db' चे अतिरिक्त दोन वर्ण असतील. अतिरिक्त वर्ण स्वरूपात मदत करण्यासाठी आहेत. उदाहरणे: decimal_to_binary(15) # \"db1111db\" decimal_to_binary32) # \"db100000db\" परत करते\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"तुम्हाला एक स्ट्रिंग s दिली आहे. तुमचे काम हे तपासणे आहे की स्ट्रिंग आनंदी आहे की नाही. स्ट्रिंग आनंदी आहे जर त्याची लांबी कमीतकमी 3 असेल आणि प्रत्येक 3 सलग अक्षरे वेगळी असतील उदाहरणार्थ: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"या सेमेस्टरचा शेवटचा आठवडा आहे आणि शिक्षकाला विद्यार्थ्यांना गुण द्यायचे आहेत. शिक्षिका स्वतःचे गुण देण्यासाठी अल्गोरिदम बनवत आहे. एकमेव समस्या अशी आहे की, तिने गुण देण्यासाठी वापरलेला कोड गमावला आहे. तिने काही विद्यार्थ्यांच्या जीपीएची यादी दिली आहे आणि तुम्हाला खालील सारणीचा वापर करून अक्षरांच्या ग्रेडची यादी आउटपुट करणारी फंक्शन लिहायची आहे: जीपीए  अक्षर ग्रेड 4.0 ए + > 3.7 ए > 3.3 ए- > 3.0 बी + > 2.7 बी > 2.3 बी- > 2.3 बी + > 2.0 सी + > 1.7 सी > 1.3 सी- > 1.0 डी + > 0.7 डी > 0.0 डी- 0.0 ई उदाहरणः grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"एक स्ट्रिंग घेणारी आणि स्ट्रिंगची लांबी एक अभाज्य संख्या असल्यास True किंवा False परत करणारी एक फंक्शन लिहा उदाहरणे prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"एक सकारात्मक पूर्णांक n दिलेला, 1 ने सुरू होणाऱ्या किंवा समाप्त होणाऱ्या n-अंकी सकारात्मक पूर्णांक संख्यांची संख्या परत करा.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"एक सकारात्मक पूर्णांक N दिलेला, बायनरीमध्ये त्याच्या अंकांचा एकूण बेरीज परत करा. उदाहरण N = 1000 साठी, अंकांची बेरीज 1 असेल तर आउटपुट \"1\" असावा. N = 150 साठी, अंकांची बेरीज 6 असेल तर आउटपुट \"110\" असावा. N = 147 साठी, अंकांची बेरीज 12 असेल तर आउटपुट \"1100\" असावा. व्हेरिएबल्स: @N पूर्णांक निर्बंधः 0 â‰¤ N â‰¤ 10000. आउटपुट: बायनरी नंबरची स्ट्रिंग \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"पूर्णांक lst ची नॉन-रिक्त यादी दिली आहे. विषम निर्देशांकावर असलेले सम घटक जोडा. उदाहरणेः जोडणे (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"एक स्ट्रिंग घेणारी आणि त्याची क्रमवारी लावलेली आवृत्ती परत करणारी एक फंक्शन लिहा. स्ट्रिंगची क्रमवारी लावलेली आवृत्ती अशी आहे की सर्व शब्द (स्पेसद्वारे विभक्त) एका नवीन शब्दाद्वारे बदलले जातात जेथे सर्व वर्ण एएससीआय मूल्यावर आधारित वाढत्या क्रमाने व्यवस्थित केले जातात. टीपः आपण वाक्यातील शब्द आणि रिक्त जागांची क्रमवारी ठेवली पाहिजे. उदाहरणार्थः anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') 'ehllo' anti_shuffle (('Hello World!!!') 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"आपल्याला 2 डी डेटा दिला जातो, एक नेस्टेड यादी म्हणून, जे मॅट्रिक्ससारखेच आहे, तथापि, मॅट्रिक्सच्या विपरीत, प्रत्येक पंक्तीमध्ये भिन्न संख्येचे स्तंभ असू शकतात. lst आणि पूर्णांक x दिले, यादीमध्ये पूर्णांक x शोधा, आणि ट्यूपल्सची सूची परत करा, [(x1, y1), (x2, y2) ...] अशा प्रकारे प्रत्येक टपल एक समन्वय आहे - (पंक्ती, स्तंभ), 0 ने प्रारंभ करणे. क्रमवारी लावा समन्वय सुरुवातीला पंक्तीनुसार चढत्या क्रमाने. तसेच, स्तंभाद्वारे स्तंभांचे समन्वय क्रमवारी लावा. उदाहरणेः get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_(], 1) [] == [[पंक्ती 1, 2, 3]], 2 == [2, 2]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"नॉन-नकारात्मक पूर्णांक असलेल्या अॅरेची प्रत परत करा, क्रमवारी लावल्यानंतर दिलेल्या अॅरेची प्रत परत करा, जर बेरीज ((प्रथम निर्देशांक मूल्य, शेवटचे निर्देशांक मूल्य) विषम असेल तर दिलेल्या अॅरेची क्रमवारी लावा, किंवा बेरीज ((प्रथम निर्देशांक मूल्य, शेवटचे निर्देशांक मूल्य) सम असेल तर ते उतरत्या क्रमाने क्रमवारी लावा. टीपः * दिलेल्या अॅरेमध्ये बदल करू नका. उदाहरणेः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"एक फंक्शन एन्क्रिप्ट तयार करा जी स्ट्रिंगला तर्क म्हणून घेते आणि वर्णमाला फिरवून एन्क्रिप्ट केलेली स्ट्रिंग परत करते. वर्णमाला अशा प्रकारे फिरवावी की अक्षरे दोन गुणांनी खाली दोन ठिकाणी हलवावीत. उदाहरणार्थः एन्क्रिप्ट (('hi') 'lm' एन्क्रिप्ट (('asdfghjkl') 'ewhjklnop' एन्क्रिप्ट (('gf') 'kj' एन्क्रिप्ट (('et') 'ix' परत करते.\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"तुम्हाला पूर्णांक यादी दिली आहे. एक फंक्शन next_smallest लिहून द्या जे यादीतील दुसरा सर्वात लहान घटक परत करते. असा घटक नसल्यास None परत करा. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"तुम्हाला शब्दांची एक स्ट्रिंग दिली जाईल आणि तुमचे काम म्हणजे कंटाळवाणांची संख्या मोजणे. कंटाळवाणे हा एक वाक्य आहे जो \"मी\" या शब्दापासून सुरू होतो. वाक्ये '.', '?' किंवा '! ' द्वारे मर्यादित आहेत. उदाहरणार्थः >>> is_bored ((\"हॅलो वर्ल्ड\") 0 >>> is_bored ((\"आकाश निळा आहे. सूर्य चमकत आहे. मला हे हवामान आवडते\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''एक फंक्शन तयार करा जे 3 संख्या घेते. जर एक संख्या इतर दोनच्या बेरीजच्या समान असेल तर ते सत्य परत करते आणि सर्व संख्या पूर्णांक आहेत. इतर कोणत्याही बाबतीत खोटे परत करते. उदाहरणे any_int{5, 2, 7} -> True any_int{3, 2, 2}) -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"एक फंक्शन लिहा जो संदेश घेतो, आणि अशा प्रकारे एन्कोड करतो की तो सर्व अक्षरांचे केस स्वॅप करतो, संदेशातील सर्व स्वर इंग्रजी वर्णमाला मध्ये त्या स्वरच्या 2 स्थानांच्या पुढे दिसणार्या अक्षरासह बदलतो. फक्त अक्षरे गृहीत धरा. उदाहरणेः >>> एन्कोड (('टेस्ट') 'टीजीएसटी' >>> एन्कोड (('हा एक संदेश आहे') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"तुम्हाला पूर्णांक यादी दिली आहे. तुम्हाला सर्वात मोठी अभाज्य संख्या शोधून काढावी लागेल आणि तिच्या अंकांचे बेरीज परत करावे लागेल. उदाहरणे: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] साठी आउटपुट 10 असावे lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] साठी आउटपुट 25 असावे lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] साठी आउटपुट 13 असावे lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] साठी आउटपुट 11 असावे lst = [0,81,12,31,21] साठी आउटपुट 3 असावे lst = [0,1,8,2,1,7] साठी आउटपुट 7 असावे \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"एखादा शब्दकोश दिल्यास, सर्व की लहान अक्षरांमध्ये स्ट्रिंग्स असतील किंवा सर्व की मोठ्या अक्षरांमध्ये स्ट्रिंग्स असतील तर True परत करा, अन्यथा False परत करा. दिलेला शब्दकोश रिकामा असेल तर फंक्शनने False परत केले पाहिजे. उदाहरणे: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) True परत केले पाहिजे. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) False परत केले पाहिजे. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) False परत केले पाहिजे. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) False परत केले पाहिजे. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) True परत केले पाहिजे.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"एक फंक्शन कार्यान्वित करा जे एक नॉन-नकारात्मक पूर्णांक घेते आणि पहिल्या n पूर्णांकातील अॅरे परत करते जे प्राइम नंबर आहेत आणि n पेक्षा कमी आहेत. उदाहरणार्थः count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"दोन पूर्णांक घेणारे आणि त्यांच्या युनिट अंकांचे गुणनफल देणारे फंक्शन पूर्ण करा. इनपुट नेहमी वैध आहे असे गृहीत धरा. उदाहरणे: गुणाकार ((148, 412) 16 परत येईल. गुणाकार ((19, 28) 72. गुणाकार ((2020, 1851) 0 परत येईल. गुणाकार ((14,-15) 20 परत येईल.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"एक स्ट्रिंग s दिल्यास, अगदी निर्देशांकांमध्ये मोठ्या अक्षरांच्या स्वर संख्या मोजा. उदाहरणार्थः count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 coun_upper (('dBBE') 0 परत करते.\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''एक फंक्शन तयार करा जी एक संख्या दर्शविणारी एक मूल्य (स्ट्रिंग) घेते आणि त्यास सर्वात जवळचा पूर्णांक परत करते. जर संख्या दोन पूर्णांकांपासून समान अंतरावर असेल तर ती शून्यापासून दूर करा. उदाहरणे >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 टीपः शून्यापासून दूर करणे म्हणजे जर दिलेली संख्या दोन पूर्णांकांपासून समान अंतरावर असेल तर आपण परत केलेली संख्या शून्यापासून सर्वात दूर आहे. उदाहरणार्थ closest_integer \" ((14.5\") 15 आणि closest_integer \" ((-14.5\") -15. परत करावी. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"एक सकारात्मक पूर्णांक n दिलेला, तुम्हाला n स्तरांच्या दगडांचा एक ढीग बनवायचा आहे. पहिल्या स्तरावर n दगड आहेत. पुढील स्तरावरील दगडांची संख्या अशी आहे: - पुढील विषम संख्या जर n विषम असेल तर - पुढील सम संख्या जर n सम असेल तर. प्रत्येक स्तरावरील दगडांची संख्या सूचीमध्ये परत करा, जिथे घटक निर्देशांक i स्तरावरील दगडांची संख्या दर्शवितो (i+1). उदाहरणे: >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"तुम्हाला कॉमा किंवा स्पेसने विभक्त केलेल्या शब्दांची एक स्ट्रिंग दिली जाईल. तुमचे काम स्ट्रिंगला शब्दांमध्ये विभाजित करणे आणि शब्दांची अॅरे परत करणे आहे. उदाहरणार्थ: words_string ((\"हाय, माझे नाव जॉन आहे\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"एक, दोन, तीन, चार, पाच, सहा\") == [\"एक\", \"दोन\", \"तीन\", \"चार\", \"पाच\", \"सहा\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"या फंक्शनमध्ये दोन सकारात्मक संख्या x आणि y असतात आणि सर्वात मोठी सम पूर्णांक संख्या मिळते जी [x, y] या श्रेणीत समाविष्ट आहे. जर अशी संख्या नसेल तर फंक्शनने -1 परत केले पाहिजे. उदाहरणार्थ: निवडा_संख्या (१२, १५) = १४ निवडा_संख्या (१३, १२) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"तुम्हाला n आणि m असे दोन सकारात्मक पूर्णांक दिले आहेत, आणि तुमचे काम n ते m (n आणि m समाविष्ट करून) पर्यंतच्या पूर्णांकातील सरासरी गणना करणे आहे. उत्तरेला जवळच्या पूर्णांकात गोळा करा आणि ते बायनरीमध्ये रुपांतरित करा. जर n m पेक्षा मोठे असेल तर -1. उदाहरणः rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"पॉझिटिव्ह पूर्णांक x ची यादी दिली. सर्व घटकांची क्रमवारी लावलेली यादी परत करा ज्यामध्ये कोणतेही सम अंक नाहीत. टीपः परत केलेली यादी वाढत्या क्रमाने क्रमवारी लावली पाहिजे. उदाहरणार्थः >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"पूर्णांक अॅरे दिलेला, 1 ते 9 या दरम्यान असलेल्या पूर्णांक क्रमवारी लावा, परिणामी अॅरे उलट करा, आणि नंतर प्रत्येक अंक त्याच्या संबंधित नावाद्वारे \"एक\", \"दोन\", \"तीन\", \"चार\", \"पाच\", \"सहा\", \"सात\", \"आठ\", \"नऊ\" पासून बदला. उदाहरणार्थः arr = [2, 1, 1, 4, 5, 8, 2, 3] -> क्रमवारी arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> उलट arr -> [8, 5, 4, 3, 2, 2, 1, 1] परत करा [\"आठ\", \"चार\", \"तीन\", \"दोन\", \"दोन\", \"एक\", \"एक\"] अॅरे रिक्त असल्यास, एक रिक्त परत कराः arr = [] परत करा [] अॅरेमध्ये कोणतीही विचित्र संख्या असल्यास त्याकडे दुर्लक्ष करा: arr = [1, -1 , 55] -> arr -> [-1, 1, 55] -> arr = [55, - return = 1] - ['One'] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"फंक्शन f ची अंमलबजावणी करा जी n ला परिमेय म्हणून घेते आणि n आकाराची यादी परत करते, जसे की निर्देशांक i मधील घटकाचे मूल्य i चे फॅक्टोरियल आहे जर i सम असेल किंवा 1 ते i पर्यंतच्या संख्येचा योग असेल. i 1 पासून सुरू होते. i चे फॅक्टोरियल 1 ते i पर्यंतच्या संख्येचा गुणाकार आहे (1 * 2 * . . . * i). उदाहरणः f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"एक सकारात्मक पूर्णांक n दिलेला, एक टपल परत करा ज्यामध्ये श्रेणीमध्ये पडणार्या अगदी आणि विषम पूर्णांक पॅलिंड्रोमची संख्या आहे. उदाहरणः इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पॅलिंड्रोम 1, 2, 3. त्यापैकी एक सम आहे, आणि त्यापैकी दोन विषम आहेत. उदाहरणः इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पॅलिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. त्यापैकी चार सम आहेत, आणि त्यापैकी 6 विषम आहेत. टीपः 1. 1 <= n <= 10 ^ 3 2. टपलने अनुक्रमे सम आणि विषम पूर्णांक पॅलिंड्रोमची संख्या परत केली आहे. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"एक फंक्शन count_nums लिहा जी पूर्णांक अॅरे घेते आणि घटकांची संख्या परत करते ज्यामध्ये अंकांची बेरीज आहे > 0. जर संख्या नकारात्मक असेल तर त्याचे पहिले स्वाक्षरी केलेले अंक नकारात्मक असेल: उदा. -123 ने -1, 2, आणि 3 अंकांची स्वाक्षरी केली आहे. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"आपल्याकडे N पूर्णांक arr[1], arr[2], ..., arr[N] चे अॅरे 'arr' आहे. अॅरेमधील संख्या यादृच्छिकपणे क्रमवारी लावली जातील. दिलेल्या अॅरेवर खालील ऑपरेशन करून अॅरे कमी न होण्याच्या क्रमाने क्रमवारी लावणे शक्य आहे का हे ठरविणे आपले कार्य आहे: आपल्याला दिलेल्या अॅरेवर कितीही वेळा उजवीकडे सरकण्याची ऑपरेशन करण्याची परवानगी आहे. उजवीकडे सरकण्याची ऑपरेशन म्हणजे अॅरेमधील सर्व घटकांना उजवीकडे एका स्थानाद्वारे हलविणे. अॅरेचा शेवटचा घटक अॅरेमधील प्रारंभिक स्थितीत म्हणजेच 0 व्या निर्देशांकावर हलविला जाईल. जर वरील ऑपरेशन करून क्रमवारी लावलेली अॅरे मिळवणे शक्य असेल तर सत्य परत करा अन्यथा खोटे परत करा. दिलेल्या अॅरे रिक्त असल्यास सत्य परत करा. टीपः दिलेल्या यादीमध्ये अनन्य घटक असणे हमी आहे. उदाहरणार्थः move_one_(ball[3, 4, 5, 2]==> खरे स्पष्टीकरणः 2 min दाबा ऑपरेशन करून, अॅरेसाठी न-कमीत क्रमवारी लावणे शक्य आहे. [1, 3, 4, 5]==> चुकीचे स्पष्टीकरणः अॅरेच्या क्रमांकाच्या क्रमांकावर कोणत्याही क्रमांकावर हलविणेद्वारे योग्य-कमीत क्रमांकाची संख्या मिळविणे शक्य नाही.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"या समस्येमध्ये, आपण एक फंक्शन अंमलात आणणार आहोत जी दोन संख्यांची यादी घेते आणि त्यांच्या दरम्यान घटकांची देवाणघेवाण करणे शक्य आहे की नाही हे निर्धारित करते जेणेकरून lst1 केवळ जोड्यांची यादी बनते. lst1 आणि lst2 दरम्यान देवाणघेवाण केलेल्या घटकांच्या संख्येवर मर्यादा नाही. lst1 चे सर्व घटक सम करण्यासाठी lst1 आणि lst2 दरम्यान घटकांची देवाणघेवाण करणे शक्य असल्यास, \"होय\" परत करा. अन्यथा, \"नाही\" परत करा. उदाहरणार्थः विनिमय [(1, 2, 3, 4], [1, 2, 3, 4]) => \"होय\" विनिमय [(1, 2, 3, 4], [1, 5, 3, 4]) => \"नाही\" हे गृहीत धरले जाते की इनपुट यादी रिक्त नसतील. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"एक स्ट्रिंग दिलेली जी स्पेस विभक्त लघुकथा अक्षरे दर्शवते, सर्वात जास्त पुनरावृत्ती असलेल्या अक्षराचे शब्दकोश परत करा आणि त्यातील संख्या परत करा. जर अनेक अक्षरे समान असतील तर त्या सर्व परत करा. उदाहरणः हिस्टोग्राम (('a b c') == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम (('a b b a') == {'a': 2, 'b': 2} हिस्टोग्राम (('a b c a b') == {'a': 2, 'b': 2} हिस्टोग्राम (('b b a') == {'b 4}': हिस्टोग्राम (('a') == {'b 4}) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"कार्य आपल्याला दोन स्ट्रिंग्स s आणि c दिले आहेत, आपल्याला s मधील सर्व वर्ण हटवावे लागतील जे c मधील कोणत्याही वर्ण बरोबर आहेत मग निकाल स्ट्रिंग पॅलिंड्रोम आहे का ते तपासा. एक स्ट्रिंग पालिंड्रोम म्हटले जाते जर ती मागे आणि पुढे सारखीच वाचते. आपण परिणाम स्ट्रिंग आणि सत्यापित करण्यासाठी सत्य / खोटे असलेले टपल परत केले पाहिजे. उदाहरणार्थ s = \"abcde\", c = \"ae\", परिणाम असावा ('bcd', खोटे) s = \"abcdef\", c = \"b\" परिणाम असावा ('acdef', खोटे) s = \"abcdedcba\", c = \"ab\", परिणाम असावा ('cdedc', खरे)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"स्ट्रिंग्सची यादी दिली, जिथे प्रत्येक स्ट्रिंगमध्ये फक्त अंक असतात, एक यादी परत करा. आउटपुटमधील प्रत्येक घटक i \"इनपुटच्या स्ट्रिंग i मधील विषम घटकांची संख्या\" असावा. जिथे सर्व i ची इनपुटच्या i'th स्ट्रिंगमधील विषम अंकांच्या संख्येने पुनर्स्थित केली पाहिजे. >>> odd_count['1234567']) [\"odd_elements 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"odd_elements 1n the str1ng 1 of the 1nput.\", \"odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"पूर्णांक संख्येच्या अॅरेला दिलेला, कोणत्याही नॉन-रिक्त सब-अॅरेचा किमान बेरीज शोधा. उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"तुम्हाला विहिरींची आयताकृती जाळी दिली आहे. प्रत्येक पंक्ती एक विहिरी दर्शवते, आणि प्रत्येक पंक्तीतील 1 पाण्याचे एकक दर्शवते. प्रत्येक विहिरीमध्ये एक संबंधित बादली आहे जी त्यातून पाणी काढण्यासाठी वापरली जाऊ शकते, आणि सर्व बादल्यांमध्ये समान क्षमता आहे. आपले कार्य विहिरी रिक्त करण्यासाठी बादल्यांचा वापर करणे आहे. बादल्या खाली आणण्यासाठी आपल्याला किती वेळा आवश्यक आहे ते आउटपुट करा. उदाहरणः 1: इनपुटः grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 आउटपुटः 6 उदाहरणः Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 आउटपुटः 5 उदाहरणः Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 आउटपुटः 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 10 * 10 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 2 * 2 * 2 * 3 * 2 * 2 * 2 * 2 * 2 * 3 * 4 * 2 * 2 * 2 * 2 * 2 * 2 * 3 * 4 * 2 * 2 * 2 * 2 * 2 * 3 * 4 * 5 * 6 * 6 * 6 * 7 * 7 * 9 * 9 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"या कातामध्ये, आपल्याला बायनरी प्रतिनिधित्वातील एकींच्या संख्येनुसार वाढत्या क्रमाने नकारात्मक नसलेल्या पूर्णांक अॅरेची क्रमवारी लावावी लागेल. समान संख्येसाठी, दशांश मूल्यावर आधारित क्रमवारी लावा. हे असे अंमलात आणले पाहिजेः >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"string s आणि natural number n दिलेला आहे, तुम्हाला एक फंक्शन कार्यान्वित करण्याचे काम दिले गेले आहे, जे string s मधून सर्व शब्दांची यादी परत करते ज्यात नक्की n व्यंजन आहेत, जेणेकरून हे शब्द string s मध्ये दिसतील. string s रिक्त असेल तर फंक्शनला रिक्त यादी परत करावी लागेल. टीपः आपण इनपुट स्ट्रिंगमध्ये फक्त अक्षरे आणि स्पेस आहेत असे गृहीत धरू शकता. उदाहरणे: select_words (((\"Mary had a little lamb\", 4) ==> [\"little\"] select_words (((\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words\" (((साधा व्हाईट स्पेस\", 2) ==> [] select_words (((\"Hello world\", 4) ==> [\"world\"] select_words (((\"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"तुम्हाला एक शब्द दिला आहे. तुमचे काम म्हणजे शब्दाच्या उजव्या बाजूला दोन व्यंजन (केस सेन्सिटिव्ह) दरम्यान असलेला सर्वात जवळचा स्वर शोधणे. सुरुवातीला आणि शेवटी असलेले स्वर मोजले जात नाहीत. जर तुम्हाला वरील अट पूर्ण केलेली कोणतीही स्वर सापडली नाहीत तर रिक्त स्ट्रिंग परत करा. आपण असे गृहीत धरू शकता की दिलेल्या स्ट्रिंगमध्ये फक्त इंग्रजी अक्षरे आहेत. उदाहरणः get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''तुम्हाला दोन स्ट्रिंग्सची यादी दिली आहे, दोन्ही स्ट्रिंग्समध्ये फक्त '(' हे उघडे कंस किंवा ') ' हे बंद कंस आहेत. तुमचे काम हे तपासणे आहे की दोन स्ट्रिंग्स काही क्रमाने जोडणे शक्य आहे का, की परिणामी स्ट्रिंग चांगली असेल. एस मधील सर्व कंस संतुलित असतील तरच आणि फक्त तरच स्ट्रिंग एस चांगली मानली जाते. उदाहरणार्थः स्ट्रिंग '((()) ' चांगली आहे, तर स्ट्रिंग '()) ' नाही. चांगली स्ट्रिंग बनवण्याचा मार्ग असल्यास 'होय' परत करा आणि अन्यथा 'नाही' परत करा. उदाहरणेः match_parens[('() ', ') ']) == 'होय' match_parens[(') ', ') ']) == 'नाही' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"पूर्णांक arr आणि सकारात्मक पूर्णांक k दिलेला अॅरे, arr मधील कमाल k संख्यांसह लांबी k ची क्रमवारी लावलेली यादी परत करा. उदाहरण 1: इनपुट: arr = [-3, -4, 5], k = 3 आउटपुट: [-4, -3, 5] उदाहरण 2: इनपुट: arr = [4, -4, 4], k = 2 आउटपुट: [4, 4] उदाहरण 3: इनपुट: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुट: [2] टीपः 1. अॅरेची लांबी [1, 1000] च्या श्रेणीत असेल. 2. अॅरेमधील घटक [-1000, 1000] च्या श्रेणीत असतील. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"पूर्णांकची नॉन-रिक्त यादी दिल्यास, सर्व विषम घटकांची बेरीज परत करा जी अगदी स्थितीत आहेत. उदाहरणे समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"पूर्णांक arr आणि पूर्णांक k ची नॉन-रिक्त अॅरे दिली, arr च्या पहिल्या k घटकांपैकी जास्तीत जास्त दोन अंकांसह घटकांची बेरीज परत करा. उदाहरणः इनपुटः arr = [111,21,3,4000,5,6,7,8,9], k = 4 आउटपुटः 24 # 21 + 3 बेरीज निर्बंधः 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"एक सकारात्मक पूर्णांक n दिलेला, एक क्रमवारी लावलेली यादी परत करा ज्यामध्ये कोलाट्झ अनुक्रमामध्ये विषम संख्या आहेत. कोलाट्झ अनुमान हे गणितातील एक अनुमान आहे जे खालीलप्रमाणे परिभाषित केलेल्या अनुक्रमाशी संबंधित आहे: कोणत्याही सकारात्मक पूर्णांक n सह प्रारंभ करा. मग प्रत्येक पद मागील पदातून खालीलप्रमाणे प्राप्त होते: जर मागील पद अगदी असेल तर पुढील पद मागील पदातील अर्धा आहे. जर मागील पद विषम असेल तर पुढील पद मागील पदातील 3 पट आहे अधिक 1. अंदाज असा आहे की n चे कोणतेही मूल्य असो, क्रम नेहमीच 1 पर्यंत पोहोचेल. टीपः 1. कोलाट्झ (((1) [1] आहे. 2. परत आलेली यादी वाढत्या क्रमाने क्रमवारी लावली आहे. उदाहरणार्थः get_odd_collatz ((5) [1, 5] परत करते 5 साठी कोलाट्झ क्रमवारी [5, 8, 16, 4, 2, 1], म्हणून विषम संख्या फक्त 1 आणि 5 आहेत.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"तुम्हाला एक फंक्शन लिहायचे आहे जे दिलेल्या तारखेची स्ट्रिंग वैध करते आणि तारीख वैध असल्यास सत्य परत करते अन्यथा खोटे. खालील सर्व नियम पूर्ण झाल्यास तारीख वैध आहे: 1. तारखेची स्ट्रिंग रिकामी नाही. 2. महिन्यांसाठी दिवसांची संख्या 1 पेक्षा कमी किंवा 31 दिवसांपेक्षा जास्त नाही 1,3,5,7,8,10,12. आणि महिन्यांसाठी दिवसांची संख्या 1 पेक्षा कमी किंवा 30 दिवसांपेक्षा जास्त नाही 4,6,9,11. आणि महिन्यासाठी दिवसांची संख्या 1 पेक्षा कमी किंवा 29 पेक्षा जास्त नाही 2. 3. महिन्यांची संख्या 1 पेक्षा कमी किंवा 12 पेक्षा जास्त असू नये 4. तारीख या स्वरूपात असावी उदाहरणार्थः valid_date ((('03-11-2000') => valid_date ((('15-01-2012') => false valid_date ((('04-02040') => false_date ((('06-04-2020') => true_date ((('06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''शब्द दिलेला स्ट्रिंग, रिक्त जागांवर विभाजित शब्दांची यादी परत करा, जर मजकूरात रिक्त जागा अस्तित्वात नसेल तर आपण कोमावर विभाजित केले पाहिजे ',' जर कोमा अस्तित्वात नसेल तर आपण वर्णमाला मध्ये विषम क्रमाने लहान अक्षरांची संख्या परत करावी, ऑर्ड (('अ') = 0, ऑर्ड (('ब') = 1, . . . ऑर्ड (('झ') = 25 उदाहरणे विभाजित_शब्द ((\"हॅलो वर्ल्ड! \") â -> [\"हॅलो\", \"वर्ल्ड! \"] विभाजित_शब्द ((\"हॅलो, वर्ल्ड! \") â -> [\"हॅलो\", \"वर्ल्ड! \"] विभाजित_शब्द ((\"abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''क्रमांकांची यादी दिल्यास, ते वाढत्या क्रमाने क्रमवारी लावलेले आहेत की नाही ते परत करा. यादीमध्ये समान संख्येची 1 पेक्षा जास्त डुप्लिकेट असल्यास, खोटे परत करा. नकारात्मक संख्या आणि फक्त पूर्णांक गृहीत धरा. उदाहरणे is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"आपल्याला दोन अंतराळ दिले आहेत, जिथे प्रत्येक अंतराळ पूर्णांक जोड आहे. उदाहरणार्थ, अंतराळ = (सुरू, शेवट) = (1, 2). दिलेल्या अंतराळ बंद आहेत ज्याचा अर्थ असा आहे की अंतराळात (सुरू, शेवट) प्रारंभ आणि शेवट दोन्ही समाविष्ट आहेत. प्रत्येक दिलेल्या अंतरासाठी, त्याची सुरुवात कमी किंवा त्याच्या समाप्तीसमान आहे असे गृहीत धरले जाते. आपले कार्य हे ठरविणे आहे की या दोन अंतराळांच्या छेदनबिंदूची लांबी एक अभाज्य संख्या आहे की नाही. उदाहरणार्थ, अंतराळांची छेदनबिंदू (1, 3), (2, 4) (2, 3) आहे, ज्याची लांबी 1 आहे, जी एक अभाज्य संख्या नाही. जर छेदनबिंदूची लांबी एक अभाज्य संख्या असेल तर \"होय\" परत करा, अन्यथा \"नाही\" परत करा. जर दोन अंतराळ एकमेकांना छेदत नाहीत तर \"नाही\" परत करा. [इनपुट / आउटपुट] नमुनेः छेदनबिंदू (((1, 2), (2, 3) ==> \"छेदनबिंदू-1, ((1), \"नाही\") ==> छेदनबिंदू (0, 4) ==\" - 5 - ((1, 5 - ((((((((((((((())\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"तुम्हाला पूर्णांक असलेली अॅरे दिली आहे आणि तुम्हाला अॅरेमधील प्रत्येक संख्येच्या सर्व चिन्हांच्या उत्पादनाद्वारे गुणाकार केलेल्या पूर्णांक परिमाणातील बेरीज परत करणे आवश्यक आहे, ज्याचे प्रतिनिधित्व 1, -1 किंवा 0 द्वारे केले जाते. टीपः रिक्त अॅरेसाठी काहीही परत करू नका. उदाहरणः >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"एन पंक्ती आणि एन स्तंभ (एन > = 2) आणि एक सकारात्मक पूर्णांक के सह ग्रीड दिले, ग्रीडच्या प्रत्येक सेलमध्ये एक मूल्य असते. [१, एन * एन] समावेशी श्रेणीतील प्रत्येक पूर्णांक ग्रीडच्या पेशींवर अचूकपणे एकदा दिसतो. आपल्याला ग्रीडमध्ये लांबी k चे किमान मार्ग शोधणे आवश्यक आहे. आपण कोणत्याही सेलमधून प्रारंभ करू शकता आणि प्रत्येक चरणात आपण शेजारच्या पेशींपैकी कोणत्याहीकडे जाऊ शकता, दुसर्या शब्दांत, आपण वर्तमान सेलसह किनार्याची शेअर करणार्या पेशींवर जाऊ शकता. कृपया लक्षात घ्या की k लांबीचा मार्ग म्हणजे नक्की k पेशी (अनिवार्यपणे भिन्न नाही) भेट देणे. आपण ग्रीडच्या बाहेर जाऊ शकत नाही. A (लांबी k) चा मार्ग B (लांबी k) पेक्षा कमी मानला जातो जर A आणि B (त्यांना lA_st आणि lA_st कॉल करा) वरच्या मूल्यांची क्रमवारीबद्ध यादी केल्यानंतर, lA_st शब्दकोषीयदृष्ट्या lA_st पेक्षा कमी आहे, दुसर्या शब्दांत, आपण वर्तमान पेशीसह कोणत्याही शेजारील पेशींवर जाऊ शकता. कृपया लक्षात घ्या की k लांबीचे मार्ग म्हणजे नक्की k पेशी (अंतरीकपणे वेगळे नाही). आपण ग्रीडच्या बाहेर जाऊ शकत नाही. A (लांबी k) चा मार्ग B (लांबी k) पेक्षा लहान मानला जातो जर A आणि B (लांबी k (आणि) वरच्या पेशी (त्यातील मूल्यांची क्रमवारी क्रमवारी क्रमवारी लांनुसार A आणि B (त्यांना lA_st कॉल केल्यानंतर) क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क क\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"फिबोनाची अनुक्रमाची माहिती सर्वांनाच आहे, गेल्या दोन शतकांपासून गणितज्ञांनी त्याचा सखोल अभ्यास केला आहे. पण लोकांना माहित नाही की, ट्रिबोनाची अनुक्रमाची माहिती नाही. ट्रिबोनाची अनुक्रमाची व्याख्या पुनरावृत्तीद्वारे केली जाते: tri(1) = 3 tri(n) = 1 + n / 2, जर n सम असेल तर. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), जर n विषम असेल तर. उदाहरणार्थ: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 तुम्हाला एक नॉन-नकारात्मक पूर्णांक संख्या n दिली आहे, तुम्हाला ट्रिबोनाची अनुक्रमाच्या पहिल्या n + 1 संख्यांची यादी परत द्यावी लागेल. उदाहरणे: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"एक सकारात्मक पूर्णांक n दिलेला, विषम अंकांचे गुणनखंड परत करा. सर्व अंक जरी असल्यास 0 परत करा. उदाहरणार्थ: अंक ((1) == 1 अंक ((4) == 0 अंक ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''एक फंक्शन तयार करा ज्यामध्ये फक्त स्क्वेअर ब्रॅकेट्स असलेली स्ट्रिंग इनपुट म्हणून घ्यावी. फंक्शनने True परत केले पाहिजे आणि फक्त जर ब्रॅकेट्सची वैध अनुक्रम असेल तर ज्यामध्ये कमीतकमी एक ब्रॅकेट नेस्टेड आहे. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]] â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"तुम्हाला संख्यांची यादी दिली आहे. तुम्हाला दिलेल्या यादीतील संख्यांच्या चौरसची बेरीज परत करावी लागेल, यादीतील प्रत्येक घटकाची प्रथम वरच्या int ((छतावर) गोळा करावी लागेल. उदाहरणे: lst = [1,2,3] साठी आउटपुट 14 असावे lst = [1,4,9] साठी आउटपुट 98 असावे lst = [1,3,5,7] साठी आउटपुट 84 असावे lst = [1.4,4.2,0] साठी आउटपुट 29 असावे lst = [-2.4,1,1] साठी आउटपुट 6 असावे \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''दिलेल्या स्ट्रिंगचा शेवटचा वर्ण वर्णमालाचा वर्ण असेल आणि तो शब्दाचा भाग नसेल तर आणि अन्यथा खोटे असेल तर सत्य परत करणारे फंक्शन तयार करा. टीपः \"शब्द\" हे स्पेसद्वारे विभक्त केलेल्या वर्णांचे एक गट आहे. उदाहरणे: check_if_last_char_is_a_letter ((\"apple pie\") â -> False check_if_last_char_is_a_letter (((apple pi e\") â -> True check_if_last_char_is_a_letter (((\"apple pi e \") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"एखादा फंक्शन तयार करा जो त्या घटकाचा सर्वात मोठा निर्देशांक परत करतो जो त्यास तत्काळ आधीच्या घटकापेक्षा मोठा किंवा समान नाही. जर असा कोणताही घटक अस्तित्वात नसेल तर परत करा -1. दिलेल्या अॅरेमध्ये डुप्लिकेट मूल्ये नसतील. उदाहरणे: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''एक फंक्शन तयार करा जे टपल (a, b) परत करते, जिथे 'a' हे नकारात्मक पूर्णांकांपैकी सर्वात मोठे आहे, आणि 'b' ही सूचीतील सकारात्मक पूर्णांकांपैकी सर्वात लहान आहे. जर नकारात्मक किंवा सकारात्मक पूर्णांक नसल्यास, त्यांना None म्हणून परत करा. उदाहरणे: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"एक फंक्शन तयार करा जे पूर्णांक, फ्लोट्स किंवा स्ट्रिंग्स घेते जे वास्तविक संख्या दर्शविते आणि दिलेल्या व्हेरिएबल प्रकारात सर्वात मोठे व्हेरिएबल परत करते. मूल्य समान असल्यास काहीही परत करू नका. टीपः जर एखादी वास्तविक संख्या स्ट्रिंग म्हणून दर्शविली गेली असेल तर फ्लोटिंग पॉईंट असू शकते . किंवा , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> काहीही नाही \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"दिलेली संख्या n बरोबर 4 सकारात्मक जोड्या संख्यांच्या बेरीज म्हणून लिहिता येईल का याचा अंदाज घ्या उदाहरण is_equal_to_sum_even ((4) == खोटे is_equal_to_sum_even ((6) == खोटे is_equal_to_sum_even ((8) == खरे \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राझिलियन फॅक्टोरियलची व्याख्या अशी आहे: ब्राझिलियन_फॅक्टोरियल ((n) = n! * (n-1)! * (n-2)! * . . . * 1! जेथे n > 0 उदाहरणार्थ: >>> special_factorial ((4) 288 फंक्शनला इनपुट म्हणून एक पूर्णांक प्राप्त होईल आणि या पूर्णांकचा विशेष फॅक्टोरियल परत करावा. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_उदाहरण-3कूर दिल्यास, त्यातील सर्व स्पेस अंडरस्कोरने बदला, आणि जर स्ट्रिंगमध्ये सलग 2 पेक्षा जास्त स्पेस असतील तर सर्व सलग स्पेस - fix_spaces ((\"उदाहरण\") == \"उदाहरण\" fix_spaces (((\"उदाहरण1\") == \"उदाहरण_1\" fix_spaces (((\"उदाहरण2\") == \"_Example_2\" fix_spaces (((\"उदाहरण 3\") == \"_Example-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"एक फंक्शन तयार करा जी फाईलचे नाव दर्शविणारी स्ट्रिंग घेते आणि फाईलचे नाव वैध असल्यास 'होय' आणि अन्यथा 'नाही' परत करते. फाईलचे नाव वैध मानले जाते आणि केवळ जर खालील सर्व अटी पूर्ण झाल्या असतील तरच. - फाईलच्या नावामध्ये तीनपेक्षा जास्त अंक ('0'-'9') नसावेत. - फाईलच्या नावामध्ये अचूकपणे एक बिंदू '.' असावा. - बिंदूच्या आधी असलेली सबस्ट्रिंग रिकामी नसावी आणि ती लॅटिन अल्फापेट ('a'-'z' आणि 'A'Z'-) पासून सुरू व्हावी. - बिंदू नंतर असलेली सबस्ट्रिंग यापैकी एक असावीः ['txt', 'exe', 'lld'] उदाहरणे: file_name_check\"(example.txt\") # => 'होय' file_name_check\"(example.lld1\") => 'नाही' # (नाव लॅटिन अल्फापेटपासून सुरू व्हावे)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" हे फंक्शन पूर्णांक यादी घेईल. यादीतील सर्व नोंदींसाठी, फंक्शन पूर्णांक प्रविष्टीचे चौरस करेल जर त्याचे निर्देशांक 3 चे गुणक असेल आणि पूर्णांक प्रविष्टीचे क्यूब करेल जर त्याचे निर्देशांक 4 चे गुणक असेल आणि 3 चा गुणक नसेल. फंक्शन यादीतील नोंदी बदलणार नाही ज्यांचे निर्देशांक 3 किंवा 4 चे गुणक नाहीत. फंक्शन नंतर सर्व नोंदींचे बेरीज परत करेल. उदाहरणे: lst = [1,2,3] साठी आउटपुट 6 असावे lst = [] साठी आउटपुट 0 असावे lst = [-1,-5,2,-1,-5] साठी आउटपुट -126 असावे \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"तुम्हाला एक वाक्य दर्शविणारी स्ट्रिंग दिली आहे, त्यामध्ये काही शब्द आहेत, ज्यांना स्पेसने वेगळे केले आहे, आणि तुम्हाला मूळ वाक्यातून शब्द असलेली एक स्ट्रिंग परत करावी लागेल, ज्याची लांबी अभाज्य संख्या आहेत, नवीन स्ट्रिंगमधील शब्दांची क्रमवारी मूळप्रमाणेच असावी. उदाहरण १ः इनपुटः वाक्य = \"ही एक चाचणी आहे\" आउटपुटः \"आहे\" उदाहरण २ः इनपुटः वाक्य = \"स्विमिंगसाठी जाऊ द्या\" आउटपुटः \"जा\" निर्बंधः * १ <= len(sentence) <= १०० * वाक्य फक्त अक्षरे समाविष्ट करते \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"तुमचे काम हे आहे की, x * n हे अभिव्यक्ती सोपे करणारे फंक्शन कार्यान्वित करा. फंक्शन True रिटर्न करते जर x * n हे एक पूर्णांक असेल तर False. x आणि n हे दोन्ही, एक भागाचे स्ट्रिंग प्रतिनिधित्व आहेत, आणि खालील स्वरूप आहे, <numerator>/<denominator> जिथे दोन्ही संख्या आणि नामकार सकारात्मक पूर्णांक आहेत. आपण असे गृहीत धरू शकता की x, आणि n वैध भिन्न आहेत, आणि नामकार म्हणून शून्य नाही. simplify{\"1/5\", \"5/1\") = True simplify{\"1/6\", \"2/1\") = False simplify{\"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"एक फंक्शन लिहा जी दिलेल्या पूर्णांक सूचीला त्यांच्या अंकांच्या बेरीजनुसार वाढत्या क्रमाने क्रमवारी लावते. टीपः जर त्यांच्या अंकांच्या समान बेरीजसह अनेक आयटम असतील तर त्यांना मूळ सूचीतील त्यांच्या निर्देशांकावर आधारित क्रमवारी लावा. उदाहरणार्थः >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"एक फंक्शन लिहा जे संख्यांचे अॅरे इनपुट म्हणून घेते आणि अॅरेमधील घटकांची संख्या 10 पेक्षा जास्त असते आणि संख्येचे पहिले आणि शेवटचे अंक दोन्ही विषम असतात (1, 3, 5, 7, 9). उदाहरणार्थः specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"तुम्हाला एक सकारात्मक पूर्णांक n दिला आहे. तुम्हाला लांबी n चा पूर्णांक अॅरे तयार करावा लागेल. प्रत्येक i (1 ‰¤ i ‰¤ n) साठी, a[i] = i * i - i + 1 चे मूल्य. a चे तिहेरी (a[i], a[j], a[k]) संख्या परत करा जिथे i < j < k, आणि a[i] + a[j] + a[k] 3 चे गुणक आहे. उदाहरण: इनपुट: n = 5 आउटपुट: 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] फक्त वैध तिहेरी (1, 7, 13) आहे.\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''आपल्या सौरमंडळात आठ ग्रह आहेत: सूर्यापासून सर्वात जवळचा बुध, पुढील शुक्र, नंतर पृथ्वी, मंगळ, बृहस्पति, शनि, युरेनस, नेपच्यून. एक फंक्शन लिहा जे दोन ग्रह नावे ग्रह1 आणि ग्रह2 म्हणून घेते. फंक्शनने सूर्यप्रकाशातील जवळच्या अंतरावर ग्रह1 आणि ग्रह2 च्या कक्षा दरम्यान असलेल्या सर्व ग्रहांचा समावेश असलेला टपल परत करावा. जर ग्रह1 किंवा ग्रह2 हे योग्य ग्रह नावे नसतील तर फंक्शनने रिक्त टपल परत करावा. उदाहरणे bf \"(जुपीटर\", \"नेपच्यून\") ==> (\"शनि\", \"युरेनस\") bf (((\"पृथ्वी\", \"बुध\") ==> (\"शुक\") bf (((\"बुध\", \"युरेनस\") ==> (\"शुक\", \"पृथ्वी\", \"मार्स\", \"शुक\", \"शनि\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"एक फंक्शन लिहा जी स्ट्रिंग्सची यादी पॅरामीटर म्हणून स्वीकारते, त्यापासून विषम लांबीची स्ट्रिंग्स हटवते आणि क्रमवारी लावलेली सूची परत करते. ही यादी नेहमीच स्ट्रिंग्सची यादी असते आणि कधीही संख्येची अॅरे नसते आणि त्यात डुप्लिकेट असू शकतात. यादीची क्रमवारी प्रत्येक शब्दाच्या लांबीनुसार वाढत असावी आणि आपण त्या नियमानुसार क्रमवारी लावलेली यादी परत करावी. जर दोन शब्दांची लांबी समान असेल तर सूची वर्णक्रमानुसार क्रमवारी लावा. फंक्शनने क्रमवारी लावलेल्या स्ट्रिंग्सची यादी परत करावी. आपण असे गृहीत धरू शकता की सर्व शब्दांची लांबी समान असेल. उदाहरणार्थः assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"एक साधा प्रोग्राम जो जर n हा एक प्राइम नंबर असेल तर x चे मूल्य परत करेल आणि अन्यथा y चे मूल्य परत करेल. उदाहरणे: x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''क्रमांकांची यादी दिल्यास, यादीतील विषम संख्यांच्या चौरसांची बेरीज परत करा. नकारात्मक किंवा पूर्णांक नसलेल्या संख्यांकडे दुर्लक्ष करा. दुप्पट_अंतर (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 दुप्पट_अंतर (([-1, -2, 0]) == 0 दुप्पट_अंतर (([9, -2]) == 81 दुप्पट_अंतर (([0]) == 0 इनपुट यादी रिक्त असल्यास, 0 परत करा. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"मला वाटते की जेव्हा एखादी लांब-प्रलंबीत घटना शेवटी ज्ञात होते तेव्हा आपण सर्वजण त्या भावना लक्षात ठेवतो. त्या क्षणी आपल्याकडे असलेली भावना आणि विचार निश्चितपणे नोंदविणे आणि तुलना करणे योग्य आहे. आपल्या कामाचे हे ठरविणे आहे की एखाद्या व्यक्तीने अनेक सामन्यांचे निकाल योग्यरित्या अंदाज लावले आहेत की नाही. आपल्याला समान लांबीचे स्कोअर आणि अंदाज दोन अॅरे दिले आहेत, जिथे प्रत्येक निर्देशांक एक सामना दर्शवितो. प्रत्येक अंदाज किती दूर आहे हे दर्शविणारी समान लांबीची अॅरे परत करा. जर त्यांनी योग्य अंदाज लावला असेल तर मूल्य 0 आहे आणि अन्यथा मूल्य अंदाज आणि स्कोअरमधील परिपूर्ण फरक आहे. उदाहरणः (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] तुलना करा (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"तुम्हाला एका वर्गाचे नाव (स्ट्रिंग) आणि विस्तार यादी दिली जाईल. विस्तार वर्गात अतिरिक्त वर्ग लोड करण्यासाठी वापरले जातील. विस्तार ताकद खालीलप्रमाणे आहे: CAP विस्तार नाव मध्ये मोठ्या अक्षरे संख्या असू द्या, आणि SM विस्तार नाव मध्ये लहान अक्षरे संख्या असू द्या, ताकद अपूर्णांक CAP द्वारे दिले जाते - SM. आपण सर्वात मजबूत विस्तार शोधू आणि या स्वरूपात एक स्ट्रिंग परत पाहिजेः ClassName.StrongestExtensionName. समान ताकद दोन किंवा अधिक विस्तार आहेत तर, आपण यादीत प्रथम येतो की एक निवडावे. उदाहरणार्थ, आपण वर्ग आणि विस्तार यादी म्हणून \"Slices\" दिले आहेत तरः ['SEvirNGliSCes', 'Cheese', 'Stufed'] नंतर आपण 'Slices.SEvirNGliS' परत पाहिजे 'SvirNGliS' पासून 'SvirNGliS' (माझे) ' (Extension: StrongestExtension' = 'AA_Class'), उदाहरणार्थ 'AA' = 'Strongest_Beats' (वर्ग ताकद = 'AA_Class'), 'AA' = 'Strongest_Extension' (वर्ग) '\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"तुम्हाला 2 शब्द दिले आहेत. तुम्हाला True परत करणे आवश्यक आहे जर दुसरा शब्द किंवा त्याच्या कोणत्याही फिरविण्यामध्ये पहिल्या शब्दामध्ये सबस्ट्रिंग असेल cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check\"(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"एक पूर्णांक दिलेला. अनुक्रमे सम आणि विषम अंकांची संख्या असलेली टपल परत करा. उदाहरण: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"एक सकारात्मक पूर्णांक दिल्यास, त्याचे रोमन अंक समतुल्य स्ट्रिंग म्हणून मिळवा आणि ते लहान अक्षरांमध्ये परत करा. निर्बंध: 1 <= num <= 1000 उदाहरणे: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''त्रिकोणाच्या तीन बाजूंची लांबी दिली. जर तीन बाजूंनी एक उजव्या कोनात त्रिकोण तयार केले तर सत्य परत करा, अन्यथा खोटे. उजव्या कोनात त्रिकोण हा त्रिकोण आहे ज्यामध्ये एक कोन उजवा कोन किंवा 90 अंश आहे. उदाहरणः right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"एक प्रकार्य लिहा जो स्ट्रिंग्सची यादी स्वीकारतो. या यादीत वेगवेगळे शब्द आहेत. जास्तीत जास्त अद्वितीय वर्णांसह शब्द परत करा. जर एकाधिक स्ट्रिंग्समध्ये जास्तीत जास्त अद्वितीय वर्णांची संख्या असेल तर, शब्दसंग्रहाच्या क्रमाने प्रथम येणारी परत करा. find_max (([\"नाव\", \"ऑफ\", \"स्ट्रिंग\"]) == \"स्ट्रिंग\" find_max (([\"नाव\", \"enam\", \"गेम\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"तुम्ही भुकेले ससा आहात, आणि तुम्ही आधीच गाजरची एक निश्चित संख्या खाल्ली आहे, पण आता तुम्हाला दिवसाचे जेवण पूर्ण करण्यासाठी आणखी गाजर खाण्याची गरज आहे. तुम्ही एक अॅरे परत करा [ जेवणानंतर खाल्लेल्या गाजरची एकूण संख्या, जेवणानंतर उरलेल्या गाजरची संख्या ] जर पुरेसे गाजर शिल्लक नसेल, तर तुम्ही सर्व उर्वरित गाजर खाल, पण तरीही तुम्हाला भूक लागेल. उदाहरणः * खाणे ((5, 6, 10) -> [11, 4] * खाणे ((4, 8, 9) -> [12, 1] * खाणे ((1, 10, 10) -> [11, 0] * खाणे ((2, 11, 5) -> [7, 0] व्हेरिएबल्स: @number: तुम्ही खाल्लेल्या गाजरची पूर्णांक संख्या. @need: तुम्हाला खाण्याची गरज असलेल्या गाजरची पूर्णांक संख्या. @remaining: शेअरमध्ये अस्तित्वात असलेल्या गाजरची पूर्णांक संख्या. Constrain: * 0= <= 0 * 1000 <= 1000 * 0 = <= 1000 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0 = 0\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"दोन सूची ऑपरेटर आणि ऑपरेन्ड. पहिल्या यादीत मूलभूत बीजगणित ऑपरेशन्स आहेत, आणि दुसरी यादी पूर्णांक यादी आहे. बीजगणित अभिव्यक्ती तयार करण्यासाठी आणि या अभिव्यक्तीचे मूल्यांकन परत करण्यासाठी दोन दिलेल्या याद्या वापरा. मूलभूत बीजगणित ऑपरेशन्सः बेरीज (+) घट (-)) गुणाकार (*) मजला विभागणी (//) घातांकीकरण (** उदाहरण) ऑपरेटर['+', '*', '-'] अॅरे = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 टीपः ऑपरेटरच्या यादीची लांबी ऑपरेंड यादीच्या लांबीच्या बरोबरी आहे वजा एक. ऑपरेंड ही नॉन-नकारात्मक पूर्णांक यादी आहे. ऑपरेटरला किमान एक ऑपरेटर यादी आहे, आणि ऑपरेंडला किमान दोन ऑपरेंड आहेत.\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"तुम्हाला एक स्ट्रिंग s दिली आहे. जर s[i] एक अक्षर असेल तर त्याचे केस कमी ते वर किंवा उलट उलट करा, अन्यथा ते जसे आहे तसे ठेवा. जर स्ट्रिंगमध्ये कोणतीही अक्षरे नसेल तर स्ट्रिंग उलट करा. फंक्शनने परिणामी स्ट्रिंग परत करावी. उदाहरणे solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"'text' ही स्ट्रिंग दिल्यास, त्याची md5 हॅश समतुल्य स्ट्रिंग परत करा. जर 'text' ही रिक्त स्ट्रिंग असेल तर, None परत करा. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "mar_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"दोन सकारात्मक पूर्णांक a आणि b दिले, a आणि b मधील अगदी अंक वाढत्या क्रमाने परत करा. उदाहरणार्थ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]