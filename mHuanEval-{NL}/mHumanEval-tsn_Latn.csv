task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,tsn_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Sekaseka gore a mo lenaneng le le neilweng la dinomoro, go na le dinomoro tse pedi tse di gaufi le tse dingwe go feta molelwane o o neilweng. Sekai: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Maaka >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Boammaaruri """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,tsn_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Go tsenya mo tirong e ke mogala o o nang le ditlhopha tse dintsi tsa dikgofa tse di kopaneng. Maikaelelo a gago ke go kgaoganya ditlhopha tseo go nna dikgofa tse di farologaneng mme o bo o busetsa lenaane la tseo. Ditlhopha tse di farologaneng di lekalekane (kgofa nngwe le nngwe e e bulegileng e tswetswe sentle) mme ga di kopane mo go tse dingwe Tlhokomologa diphatlha dipe mo mogaleng wa go tsenya. Sekai: >>> separate_paren_groups' ((( ) (() (()))))) '['() ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,tsn_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Fa go neetswe palo ya positive ya floating point, e ka kgaoganngwa ka karolo ya integer (integer e kgolo e nnye go feta palo e e neetsweng) le ya decimals (karolo e e setseng e nnye go feta 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,tsn_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""O fiwa lenane la ditsamaiso tsa go tsenya le go ntsha mo akhaontong ya banka e e simololang ka tekano ya lefela. Tiro ya gago ke go lemoga fa ka nako nngwe tekano ya akhaonto e wela ka fa tlase ga lefela, mme ka nako eo tiro e tshwanetse go busetsa Nnete. Fa go sa nna jalo e tshwanetse go busetsa Maaka. Sekai: >>> below_zero([1, 2, 3]) Maaka >>> below_zero([1, 2, -4, 5]) Nnete """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,tsn_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Go lenane le le neilweng la dipalo tsa tsenyeletso, bala Tekatekano ya Tlhokafalo ya Tlhokafalo go dikologa tekatekano ya sete ya data e. Tekatekano ya Tlhokafalo ya Tlhokafalo ke palogare ya pharologano e e feletseng magareng ga elemente nngwe le nngwe le ntlha ya bogare (tekatekano mo lebakeng le): MAD = tekatekano. x - x_mean. Sekai: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,tsn_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Tsenya nomoro ya 'delimeter' magareng ga dielemente tse pedi tse di latelanang tsa lenaane la go tsenya `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,tsn_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Go tsenya mo tirisong e ke mogala o o emetseng ditlhopha tse dintsi tsa dikgofa tse di lomaganeng tse di kgaogantsweng ke dikgala. Mo setlhopheng sengwe le sengwe, ntsha maemo a a kwa teng a go lomagana ga dikgofa. Sekai, (() (()) e na le maemo a a kwa godimo a mabedi a go lomagana fa ((())) e na le a le mararo.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,tsn_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Tsenya lenaane la dikokwane tsa go tsenya fela tse di nang le dikokwane tse di filweng >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,tsn_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Go lenane le le rileng la dipalo tse di feletseng, busetsa tuple e e nang le palogotlhe le poelo ya dipalo tsotlhe tse di feletseng mo lenaneng. Palogotlhe e e senang sepe e tshwanetse go lekana le 0 mme poelo e e senang sepe e tshwanetse go lekana le 1. >>> palogotlhe_poelo ([]) (0, 1) >>> palogotlhe_poelo ([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,tsn_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Go tswa mo lenaneng le le neilweng la dipalo tse di feletseng, dira lenane la dielemente tse di kwa godimo tse di ka fitlhelwang go fitlha ka nako e e rileng mo tatelanong. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,tsn_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Batla palindrome e khutshwane e e simololang ka mogatla o o neetsweng. Kgopolo ya algorithm e bonolo: - Batla postfix e telele go gaisa ya mogatla o o neetsweng o e leng palindrome. - Tsenya kwa bofelong jwa mogatla wa mogatla wa mogatla wa pele ga seele se se tlang pele ga palindromic. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Tlhatlhoba gore a mogala o o neilweng ke palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,tsn_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Ditsenngwateng ke dinaka tse pedi a le b tse di nang le 1 le 0 fela. Dira XOR ya binary mo ditsenngwateng tse mme o boele o bone maduo gape jaaka dinaka.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,tsn_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Go tswa mo lenaaneng la dinolo, busetsa e telele go gaisa. Busetsa ya ntlha fa go na le dinolo di le dintsi tsa boleele jo bo tshwanang. Busetsa None fa e le gore lenaane la tsenyo ga le na sepe. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,tsn_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Busetsa kgaoganyi ya kakaretso e kgolo ya dipalo tse pedi a le b >>> kgaoganyi ya kakaretso e kgolo ya dipalo tse pedi ((3, 5) 1 >>> kgaoganyi ya kakaretso e kgolo ya dipalo tse pedi ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,tsn_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Returns list of all prefixes from shortest to longest of the input string >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,tsn_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Busetsa mogala o o nang le dinomoro tse di lekanyeditsweng ka phatlha go simolola ka 0 go fitlha go n go akaretsa. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,tsn_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Fa go neetswe mogolagang, batlisisa gore ke ditlhaka di le kae tse di farologaneng (go sa kgathalesege gore ke tsa mofuta ofe) tse di nang le >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,tsn_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Go tsenya mo tirong e ke mogala o o emelang dinoto tsa mmino mo sebopegong se se kgethegileng sa ASCII. Tiro ya gago ke go sekaseka lenaane la dinoto tsa dinoto tsa di-integer tse di tsamaelanang le dipalo tse dintsi tsa go itaya. Fano go na le mokwalo wa ditlhaka: 'o' - notshe, e itaya 'o' - halofo ya notshe, e itaya 'o' - quater notshe, e itaya e le nngwe >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,tsn_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Batla gore ke makgetlho a le kae a moanelwa a ka fitlhelwang moanelwa wa ntlha. Bala makgetlho a a tshwanang. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,tsn_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Go tsenya ke nomoro ya dinomoro e e lekanyeditsweng ka sekgala go tswa go 'zero' go ya go 'senyane'. Ditlhopho tse di nepagetseng ke 'zero', 'nngwe', 'pedi', 'tharo', 'nne', 'tlhano', 'tshele', 'supa', 'seswai' le 'senyane'. Busetsa nomoro ya dinomoro e e rulagantsweng go tswa go e nnye go ya go e kgolo >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,tsn_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Go tswa mo lenaaneng le le neetsweng la dinomoro (tsa boleele jwa bonnye di le pedi) tlhopha le go busetsa tse pedi tse di leng gaufi thata le tse dingwe mme o di busetse ka tatelano (palo e nnye, palo e kgolo). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,tsn_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Fa o filwe lenane la dinomoro (tsa bonnye dilo tse pedi), dirisa phetogo ya mola mo lenaneng leo, gore palo e nnye e nne 0 mme e kgolo e nne 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,tsn_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,tsn_Latn,python,"

def strlen(string: str) -> int:
    """"""Boleele jwa go boela jwa mogolaganyane o o filweng >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,tsn_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Go lekanya palo e e rileng n, batla palo e kgolo go di feta e e arolang n ka go lekana, e nnye go feta n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,tsn_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Returns list of prime factors of given integer in order from smallest to largest. Nngwe le nngwe ya dipalo e tshwanetse go kwalwa palo ya makgetlho a a tsamaelanang le gore e tlhagelela ga kae mo go tlhamiweng ga dipalo. Palo ya go tsenya e tshwanetse go lekana le poelo ya dipalo tsotlhe tsa dipalo >>> tlhamiwa ka dipalo tse di farologaneng (factorization) [2, 2, 2] >>> tlhamiwa ka dipalo tse di farologaneng (factorization) [25], [5, 5], >>> tlhamiwa ka dipalo tse di farologaneng (factorization) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,tsn_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Go tswa mo lenaneng la dipalo tse di feletseng, tlosa dilo tsotlhe tse di tlhagelelang go feta gangwe. Boloka tatelano ya dilo tse di setseng e tshwana le ya tse di tsentsweng. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,tsn_Latn,python,"

def flip_case(string: str) -> str:
    """"""Mo moleng o o rileng, fetola ditlhaka tsa ditlhaka tse dinnye go nna tse dikgolo le tse dikgolo go nna tse dinnye. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,tsn_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,tsn_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Tsenya lenaane la dikokwane tsa go tsenya fela tse di simololang ka ketapele e e rileng. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,tsn_Latn,python,"

def get_positive(l: list):
    """"""Busetsa dinomoro tse di siameng fela mo lenaaneng. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,tsn_Latn,python,"

def is_prime(n):
    """"""Busetsa boammaaruri fa palo e e neetsweng e le ya ntlha, mme maaka fa go sa nna jalo. >>> is_prime(6) False >>> is_prime(101) Boammaaruri >>> is_prime(11) Boammaaruri >>> is_prime(13441) Boammaaruri >>> is_prime(61) Boammaaruri >>> is_prime(4) Boammaaruri >>> is_prime(1) Boammaaruri """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,tsn_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ke dikokwane tsa polynomial. find_zero find x such that poly(x) = 0. find_zero e busetsa fela ntlha ya lefela, le fa e le gore go na le tse dintsi. Mo godimo ga moo, find_zero e tsaya fela lenane la xs le le nang le palo e e lekanang ya dikokwane le kokwane e e seng lefela ka gonne e tlhomamisa tharabololo. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""E sekaseka polynomial ka dikokwane xs kwa ntlheng x. e busetsa xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,tsn_Latn,python,"

def sort_third(l: list):
    """"""Tirego e e tsaya lenane l mme e busetsa lenane l' ka tsela e l' e tshwanang le l mo di-indices tse di sa kgaoganeng ka boraro, fa boleng jwa lone mo di-indices tse di kgaoganang ka boraro bo lekana le boleng jwa di-indices tse di tsamaelanang tsa l, mme bo rulagantswe. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,tsn_Latn,python,"

def unique(l: list):
    """"""Busetsa dilo tse di tlhophilweng tse di sa tshwaneng mo lenaaneng >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,tsn_Latn,python,"

def max_element(l: list):
    """"""Busetsa tlhotlhwa e e kwa godimo mo lenaneng. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,tsn_Latn,python,"

def fizz_buzz(n: int):
    """"""Busetsa palo ya makgetlho a palo 7 e tlhagelelang ka ona mo dipalong tse di kwa tlase ga n tse di ka kgaoganngwang ka 11 kgotsa 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,tsn_Latn,python,"

def sort_even(l: list):
    """"""Tirego e e tsaya lenane l mme e busetsa lenane l' ka tsela e l' e tshwanang le l mo di-indices tse di sa tshwaneng, fa boleng jwa lone mo di-indices tse di lekanang bo lekana le boleng jwa di-indices tse di lekanang tsa l, mme bo rulagantswe. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,tsn_Latn,python,"

def encode_cyclic(s: str):
    """"""e tsaya jaaka input string e e khodilweng ka encode_cyclic function. E busetsa khoutu ya khoutu e e kgaotsweng. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""e busetsa mogala o o tsentsweng dikhoute ka ditlhopha tsa dikhoute tsa dikwalelo tsa dikwalo di le tharo. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,tsn_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib e busetsa palo ya n-th e e leng palo ya Fibonacci mme gape ke palo ya ntlha. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,tsn_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero e tsaya lenane la dipalo tse di feletseng jaaka input. e busetsa True fa go na le dilo tse tharo tse di farologaneng mo lenaneng tse di dirang gore palogotlhe ya tsone e nne zero, mme False fa go se jalo. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,tsn_Latn,python,"

def car_race_collision(n: int):
    """"""Akanya tsela e e tlhamaletseng e e sa felelang. dikoloi di le n di kgweetsa go tswa molemeng go ya mojeng; ka nako e le nngwe, setlhopha se se farologaneng sa dikoloi di le n di kgweetsa go tswa mojeng go ya molemeng. Ditlhopha tse pedi tsa dikoloi di simolola di le kgakala thata. Dikoloi tsotlhe di tsamaya ka lebelo le le tshwanang. Dikoloi tse pedi di a thulana fa koloi e e tsamayang go tswa molemeng go ya mojeng e thulana le koloi e e tsamayang go tswa mojeng go ya molemeng. Le fa go ntse jalo, dikoloi di nonofile thata; ka ntlha ya moo, di tswelela go tsamaya ka tsela ya tsone jaaka e kete ga di a thulana. Tiriso e e ntsha palo ya go thulana go go ntseng jalo. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,tsn_Latn,python,"

def incr_list(l: list):
    """"""Returns list with elements incremented by 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,tsn_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero e tsaya lenane la dipalo tse di feletseng jaaka input. e busetsa True fa go na le dilo tse pedi tse di farologaneng mo lenaneng tse di dirang palogotlhe ya zero, le False fa go se jalo. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,tsn_Latn,python,"

def change_base(x: int, base: int):
    """"""Fetola motheo wa dipalo wa palo ya go tsenya x go nna motheo. busetsa moanelwa wa dinomoro morago ga phetogo. dinomoro tsa motheo di kwa tlase ga 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,tsn_Latn,python,"

def triangle_area(a, h):
    """"""Fa go na le boleele jwa letlhakore le bogodimo jwa lefelo la go boela la khutlotharo. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,tsn_Latn,python,"

def fib4(n: int):
    """"""Motlhala wa dinomoro tsa Fib4 ke motlhala o o tshwanang le wa Fibbonacci o o tlhalosiwang jaana: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Tsweetswee kwala tiro go bala ka botswerere karolo ya n ya motlhala wa dinomoro tsa fib4. O se ka wa dirisa poeletso. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,tsn_Latn,python,"

def median(l: list):
    """"""Boemedi jwa go boela ga dielemente mo lenaneng l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,tsn_Latn,python,"

def is_palindrome(text: str):
    """"""E tlhatlhoba gore a mogala o o neilweng ke palindrome >>> is_palindrome (('') Boammaaruri >>> is_palindrome (('aba') Boammaaruri >>> is_palindrome (('aaaaa') Boammaaruri >>> is_palindrome (('zbcd') Maaka """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,tsn_Latn,python,"

def modp(n: int, p: int):
    """"""Boela kwa go 2^n modulo p (itse dipalo). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,tsn_Latn,python,"

def encode_shift(s: str):
    """"""tsaya jaaka input string e e khodilweng ka encode_shift function. E busetsa khoutu ya khoutu e e kgaotsweng. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""e busetsa mogala o o khodilweng ka go sutisa mokwalo mongwe le mongwe ka 5 mo alefabeteng. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,tsn_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ke tiro e e tsayang thaetlele mme e busetsa thaetlele e e senang ditumammogo. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,tsn_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Busetsa boammaaruri fa dinomoro tsotlhe mo lenaneng l di le kwa tlase ga tharabololo t. >>> below_threshold([1, 2, 4, 10], 100) Boammaaruri >>> below_threshold([1, 20, 4, 10], 5) Maaka """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,tsn_Latn,python,"

def add(x: int, y: int):
    """"""Oketsa dipalo tse pedi x le y >>> o oketsa ka ((2, 3) 5 >>> o oketsa ka ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,tsn_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Lebelela gore a mafoko a mabedi a na le ditlhaka tse di tshwanang. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') Boammaaruri >>> same_chars('abcd', 'dddddddddabc') Boammaaruri >>> same_chars('dddddddabc', 'abcd') Boammaaruri >>> same_chars('eabcd', 'dddddddddabc') Maaka >>> same_chars('abcd', 'dddddddabddce') Maaka >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') Maaka """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,tsn_Latn,python,"

def fib(n: int):
    """"""Busetsa palo ya Fibonacci ya n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,tsn_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ke mogala wa ""<"" le "">"". return True fa bracket nngwe le nngwe e e bulang e na le bracket e e tsenang e e tsamaelanang. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,tsn_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,tsn_Latn,python,"

def common(l1: list, l2: list):
    """"""Busetsa dilo tse di tshwanang tse di rulagantsweng tsa lenaane la dilo tse pedi. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,tsn_Latn,python,"

def largest_prime_factor(n: int):
    """"""Busetsa tlhotlhwa ya ntlha e kgolo ya n. A re re n > 1 mme ga se tlhotlhwa ya ntlha. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,tsn_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ke tiro e e kopanyang dipalo go tswa go 1 go ya go n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,tsn_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ke mogala wa ""("" le "")"". return True fa bracket nngwe le nngwe e e bulang e na le bracket e e tsenang e e tsamaelanang. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,tsn_Latn,python,"

def derivative(xs: list):
    """"""xs e emela dikokwane tsa polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Returns derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,tsn_Latn,python,"

def fibfib(n: int):
    """"""Motlhala wa dinomoro tsa FibFib ke motlhala o o tshwanang le wa Fibbonacci o o tlhalosiwang jaana: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Tsweetswee kwala tiro go bala ka botswerere karolo ya n ya motlhala wa dinomoro tsa fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,tsn_Latn,python,"
FIX = """"""Kwala tiro ya vowels_count e e tsayang mogala o o emelang lefoko jaaka input mme e busetsa palo ya ditokololo tsa mogala. Ditokololo tsa mogala mo kgannyeng e ke 'a', 'e', 'i', 'o', 'u'. Fano, 'y' le yone ke letshwao la letshwao, fela fa e le kwa bokhutlong jwa lefoko le le neilweng. Sekai: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""O ka dira jalo ka go oketsa ka diteko tse dingwe. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,tsn_Latn,python,"
def circular_shift(x, shift):
    """"""Tsamaisa dinomoro tsa palogotlhe ya x ka tsela e e kgolokwe, o di ise kwa mojeng ka go di sutisa mme o bo o busetsa maduo jaaka mogala. Fa e le gore shift > nomoro ya dinomoro, busetsa dinomoro ka tsela e e fapogileng. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,tsn_Latn,python,"
def digitSum(s):
    """"""Tiro Kwala tiro e e tsayang mogala jaaka input mme e busetsa palogotlhe ya dikhoutu tsa ASCII tsa dikwalelo tse di kwa godimo fela. Dikai: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,tsn_Latn,python,"
def fruit_distribution(s,n):
    """"""Mo tirong e, o tla fiwa mogala o o emelang palo ya diapole le dinamune tse di anamisiwang mo serotong sa maungo seroto se se na le diapole, dinamune le maungo a mango. Fa o fiwa mogala o o emelang palogotlhe ya diapole le dinamune le palo e e feletseng e e emelang palogotlhe ya maungo mo serotong busetsa palo ya maungo a mango mo serotong. sekai: fruit_distribution""5(diapole le dinamune tse 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 diapole le dinamune tse 1"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 diapole le dinamune tse 3"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 diapole le dinamune tse 120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,tsn_Latn,python,"
def pluck(arr):
    """"""""Fa o neetswe mogolagang o o emelang lekala la setlhare le le nang le dinoto tsa palogotlhe e e seng ya negative tiro ya gago ke go ntsha nngwe ya dinoto mme o e busetse. Noto e e tserweng e tshwanetse go nna ya boleng jo bo kwa tlase jo bo lekanang. Fa go ka fitlhelwa dinoto tse di farologaneng tse di nang le boleng jo bo kwa tlase jo bo lekanang busetsa noto e e nang le nomoro e e kwa tlase. Noto e e tserweng e tshwanetse go busediwa mo lenaneng, [smallest_value, its index] fa go sena dinomoro tse di lekanang kgotsa mogolagang o o neilweng o se na sepe, busetsa []. Sekai sa 1: Tsenyo: [4,2,3] Thulo: [2, 1] Tlhaloso: 2 e na le boleng jo bo kwa tlase jo bo lekanang, mme 2 e na le nomoro e e kwa tlase. Sekai sa 2: Tsenyo: [1,2,3] Thulo: [2, 1] Tlhaloso: 2 e na le boleng jo bo kwa tlase jo bo lekanang, mme 2 e na le nomoro e e e kwa tlase. Sekai sa 3: Tsenyo: [] Tsenyo: [] [4: [5,3, [4,] Tsenyo: [0, 4] Tsenyo: 1 Thulo: [0,] Thulo: 0 Tsenyo: 0 e na le nomoro e e e e e e e nnye, mme nomoro e e e le kwa tlase go feta 0; sekai sa ntlha, re tla tlhopha ntlha ntlha ya ntlha e le nngwe ya dinomoro e le nngwe, mme e na le dinomoro e le kwa tlase ga zero.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,tsn_Latn,python,"
def search(lst):
    '''O fiwa lenane le le senang lefela la dipalo tse di feletseng tse di siameng. Busetsa palo e e feletseng e e kwa godimo go feta lefela, mme e na le dipalo tse di fetang kgotsa di lekana le boleng jwa palo e e feletseng ka boyona. Dipalo tse di feletseng ke palo ya makgetlho a e tlhagelelang ka one mo lenaneng. Fa go se na boleng jo bo ntseng jalo, busetsa -1. Dikai: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,tsn_Latn,python,"
def strange_sort_list(lst):
    '''Go latelana ga dinomoro tse di sa tlwaelegang, go simolola ka boleng jo bo kwa tlase, go tswa foo go latelwe ke bontsi jwa dinomoro tse di setseng, go tswa foo go latelwe ke bonnye, jalo le jalo.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,tsn_Latn,python,"
def triangle_area(a, b, c):
    '''Go neetswe boleele jwa matlhakore a le mararo a khutlotharo. Busetsa lefelo la khutlotharo le le dikologilweng go ya go 2 ya dinomoro tsa bosome fa matlhakore a le mararo a bopa khutlotharo e e nepagetseng. Fa go sa nna jalo busetsa -1 Matlhakore a le mararo a dira khutlotharo e e nepagetseng fa palogotlhe ya matlhakore a le mabedi e le kgolo go feta letlhakore la boraro. Sekai: khutlotharo_lefelo(3, 4, 5) == 6.00 khutlotharo_lefelo(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,tsn_Latn,python,"
def will_it_fly(q,w):
    '''Kwala tiro e e tla busetsang True fa e le gore selo sa q se tla fofa, mme False fa go se jalo. Selo sa q se tla fofa fa se lekalekane (ke palindromic list) mme palogotlhe ya dielemente tsa sona e le kwa tlase ga kgotsa e lekana le bokete jo bo kgonegang jwa w. Sekai: will_it_fly([1, 2], 5) â -> False # 1+2 e kwa tlase ga bokete jo bo kgonegang jwa bokete, mme ga e lekalekane. will_it_fly([3, 2, 3], 1) â -> False # e lekalekane, mme 3+2+3 e feta bokete jo bo kgonegang jwa bokete. will_it_fly[3, 2, 3], 9) â -> True # 3+23 e kwa tlase ga bokete jo bo kgonegang jwa bokete, mme e lekalekane. will_it_fly([3], â 5) -> True # 3 e kwa tlase ga bokete jo bo kgonegang jwa bokete, mme e lekalekane '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,tsn_Latn,python,"
def smallest_change(arr):
    """"""Fa go neetswe thulaganyo ya dinomoro tse di feletseng, batla palo e e kwa tlase ya dielemente tse di tlhokang go fetolwa gore thulaganyo e nne palindromic. Thulaganyo ya palindromic ke thulaganyo e e balwang ka go tshwana kwa morago le kwa pele. Mo phetogong e le nngwe, o ka fetola dielemente tse dingwe. Sekai: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,tsn_Latn,python,"
def total_match(lst1, lst2):
    '''Kwala tiro e e amogelang manane a mabedi a dinomoro mme e busetse lenane le le nang le palogotlhe ya dinomoro mo dinomorong tsotlhe tsa lenane le le kwa tlase ga lenane le lengwe. fa manane a mabedi a na le palo e e tshwanang ya dinomoro, busetsa lenane la ntlha. Dikai total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'] ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,tsn_Latn,python,"
def is_multiply_prime(a):
    """"""Kwala tiro e e tla boelang go nna boammaaruri fa palo e e neetsweng e le go ntsifatsa ga dinomoro tsa ntlha tse 3 mme e le maaka fa go sa nna jalo.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,tsn_Latn,python,"
def is_simple_power(x, n):
    """"""Tiro ya gago ke go kwala tiro e e busang boammaaruri fa palo x e le maatla a a bonolo a n le maaka mo mabakeng a mangwe. x ke maatla a a bonolo a n fa n**int=x Sekai: is_simple_power(1, 4) => boammaaruri is_simple_power(2, 2) => boammaaruri is_simple_power(8, 2) => boammaaruri is_simple_power(3, 2) => maaka is_simple_power(3, 1) maaka => is_simple_power(5, 3) => maaka """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,tsn_Latn,python,"
def iscube(a):
    '''Kwala tiro e e tsayang palogotlhe ya a mme e bo e busetsa True fa e le gore ingeger e ke cube ya palogotlhe ya dinomoro. Ela tlhoko: o ka nna wa tsaya gore input e a dira. Dikai: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,tsn_Latn,python,"
def hex_key(num):
    """"""O ne wa kopiwa go kwala tiro e e amogelang palo ya bosomethataro jaaka mogala mme e bala palo ya dinomoro tsa bosomethataro tse e leng dipalo tsa ntlha (palo ya ntlha, kgotsa palo ya ntlha, ke palo ya tlholego e e fetang 1 e e seng poelo ya dipalo tse pedi tse dinnye tsa tlholego). Dinomoro tsa bosomethataro ke 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Dinomoro tsa ntlha ke 2, 3, 5, 7, 11, 13, 17,... Ka jalo o tshwanetse go tlhomamisa palo ya dinomoro tse di latelang: 2, 3, 5, 7, B (= bosomethataro 11), D (= bosomethataro 13). Ela tlhoko: o ka nna wa tsaya gore tswalo e siame kgotsa e se na sepe, mme matshwao A,B,C,D,E,F, ka gale a kwadilwe ka ditlhaka tse dikgolo. Dikai: Fa nomoro e le ""AB"" go tshwanetse ga ntshiwa nomoro e le 1. Fa nomoro e le ""10E"" go tshwanetse ga ntshiwa nomoro e le 2. Fa nomoro e le ""AB"" go tshwanetse ga ntshiwa nomoro e le 4.331 Fa nomoro e le ""ABC"" go tshwanetse go nna 4.67123456.0 Fa nomoro e le ""A"" e tshwanetse go nna 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,tsn_Latn,python,"
def decimal_to_binary(decimal):
    """"""O tla fiwa nomoro ka mokgwa wa bosome mme tiro ya gago ke go e fetolela mo sebopegong sa sebopedi. Tirego e tshwanetse go busetsa mogala, ka letshwao lengwe le lengwe le emetse nomoro ya sebopedi. Mogala mongwe le mongwe mo mogaleng e tla nna '0' kgotsa '1'. Go tla nna le ditlhaka di le pedi tsa tlaleletso 'db' kwa tshimologong le kwa bokhutlong jwa mogatla. Ditlhaka tse di tlaleletso di teng go thusa ka sebopego. Dikai: decimal_to_binary ((15) # e busetsa ""db1111db"" decimal_to_binary32) # e busetsa ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,tsn_Latn,python,"
def is_happy(s):
    """"""O fiwa mogatla s. Tiro ya gago ke go lekola gore a mogatla o itumetse kgotsa nnyaa. Mogatla o itumetse fa boleele jwa one bo le 3 mme ditlhaka tsotlhe tse 3 tse di latelanang di farologane Sekai: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,tsn_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ke beke ya bofelo ya semesetara mme morutabana o tshwanetse go naya baithuti maduo. Morutabana o ntse a dira thulaganyo ya gagwe ya go bala maduo. Bothata ke gore o latlhegetswe ke khoutu e a e dirisitseng go bala maduo. O go neile lenaane la maduo a GPA ya baithuti bangwe mme o tshwanetse go kwala tiro e e ka ntshang lenaane la maduo a dikwalo o dirisa tafole e e latelang: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,tsn_Latn,python,"
def prime_length(string):
    """"""Kwala tiro e e tsayang mogala mme e boele True fa boleele jwa mogala e le palo ya ntlha kgotsa False fa go se jalo Dikai prime_length{'Hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,tsn_Latn,python,"
def starts_one_ends(n):
    """"""Fa re filwe palogotlhe e e siameng n, busetsa palo ya dipalo tsa dipalo tse di siameng tsa dinomoro tsa n tse di simololang kgotsa di khutlang ka 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,tsn_Latn,python,"
def solve(N):
    """"""Go neetswe palogotlhe e e siameng ya dinomoro tsa N, busetsa palogotlhe ya dinomoro tsa yone mo binary. Sekai Fa N = 1000, palogotlhe ya dinomoro e tla nna 1 dipholo e tshwanetse go nna ""1"". Fa N = 150, palogotlhe ya dinomoro e tla nna 6 dipholo e tshwanetse go nna ""110"". Fa N = 147, palogotlhe ya dinomoro e tla nna 12 dipholo di tshwanetse go nna ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,tsn_Latn,python,"
def add(lst):
    """"""Fa go neilwe lenane le le senang sepe la dipalo tse di feletseng, pele, oketsa ka dipalo tse di sa lekalekanang.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,tsn_Latn,python,"
def anti_shuffle(s):
    """"""Kwala tiro e e tsayang mogala mme e bo e busetsa mofuta o o rulagantsweng wa one. Mogala o o rulagantsweng ke mogala o mo go ona mafoko otlhe (a kgaogantswe ka sekgala) a emisediwang ka lefoko le lesha mo ditlhaka tsotlhe di rulagantsweng ka tatelano e e tlhatlogang go ya ka boleng jwa ascii. Ela tlhoko: O tshwanetse go boloka tatelano ya mafoko le dikgala tse di sa kwalwang mo polelong. Sekai: anti_shuffle ((('Hi') e busetsa 'Hi' anti_shuffle ((('hello') e busetsa 'ehllo' anti_shuffle (('Hello World!!!') e busetsa 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,tsn_Latn,python,"
def get_row(lst, x):
    """"""O fiwa data ya dimensional tse pedi, jaaka lenaane le le kopaneng, le le tshwanang le matrix, le fa go ntse jalo, go farologana le matrix, mola mongwe le mongwe o ka nna le palo e e farologaneng ya dikholomo. Fa go neilwe lst, le palogotlhe x, batla dipalo tse di feletseng x mo lenaneng, mme o boele lenane la dipalo tse di kopaneng, [(x1, y1), (x2, y2) ...] ka jalo, mophato mongwe le mongwe ke khuduthamaga - (mola, dikholomo), go simolola ka 0. Tlhopha dikhomoreiti kwa tshimologong ka mela ka tatelano e e tlhatlogang. Gape, rulaganya dikhomoreiti tsa mola ka dikholomo ka tatelano e e fologang. Dikai: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0] get_((1), 1) [] == [[mola]], 1 , 2 , 3]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,tsn_Latn,python,"
def sort_array(array):
    """"""Fa o neetswe lenaane la dipalo tse di feletseng tse di seng tse di nang le negative, busetsa khopi ya lenaane le le neetsweng morago ga go rulaganya, o tla rulaganya lenaane le le neetsweng ka tatelano e e tlhatlogang fa palogotlhe ya lone (indice ya ntlha, last index value) e le e e sa lekalekanang, kgotsa o le rulaganya ka tatelano e e fologang fa palogotlhe ya lone (indice ya ntlha, last index value) e le e e lekanang. Ela tlhoko: * o se ka wa fetola lenaane le le neilweng. Dikai: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,tsn_Latn,python,"
def encrypt(s):
    """"""Tlhopha tiro e e tsayang mogala jaaka thitokgang mme e busetse mogala o o tsentsweng mogala ka go dikologa alefabete. Alefabete e tshwanetse go dikologa ka tsela e ditlhaka di yang kwa tlase ka bobedi go menagane gabedi. Sekai: encrypt('hi') e busetsa 'lm' encrypt('asdfghjkl') e busetsa 'ewhjklnop' encrypt('gf') e busetsa 'kj' encrypt('et') e busetsa 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,tsn_Latn,python,"
def next_smallest(lst):
    """"""O fiwa lenane la dipalo tse di feletseng. Kwala tiro next_smallest (() e e busang karolo ya bobedi e nnye ya lenane. E busetsa None fa e le gore ga go na karolo e e ntseng jalo. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,tsn_Latn,python,"
def is_bored(S):
    """"""O tla fiwa mothale wa mafoko, mme tiro ya gago ke go bala palo ya go lapisa. Go lapisa ke polelwana e e simololang ka lefoko ""I"". Dipolelwana di kgaoganngwa ka '.', '?' kgotsa '!'. Sekai: >>> is_bored(""Hello world"") 0 >>> is_bored(""Legodimo le pududu. Letsatsi le a phatsima. Ke rata maemo a bosa a"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,tsn_Latn,python,"
def any_int(x, y, z):
    '''Tlhopha tiro e e tsayang dinomoro tse 3. E busetsa boammaaruri fa nngwe ya dinomoro e lekana le palogotlhe ya tse dingwe tse pedi, mme dinomoro tsotlhe ke dipalo tse di feletseng. E busetsa maaka mo mabakeng a mangwe. Dikai any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,tsn_Latn,python,"
def encode(message):
    """"""Kwala tiro e e tsayang molaetsa, mme e o khodise ka tsela e e tla fetolang ditlhaka tsotlhe, e emisetse dinoko tsotlhe mo molaetseng ka tlhaka e e tlhagelelang kwa pele ga dinoko tseo ka mafelo a le 2 mo dialefabeteng tsa Seesimane. Tsaya fela ditlhaka. Dikai: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,tsn_Latn,python,"

def skjkasdkd(lst):
    """"""O fiwa lenane la dipalo tse di feletseng. O tlhoka go bona boleng jo bo kwa godimo jwa ntlha mme o boele le palogotlhe ya dinomoro tsa yone. Dikai: Fa lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] dipholo e tshwanetse go nna 10 Fa lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] dipholo e tshwanetse go nna 25 Fa lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] dipholo e tshwanetse go nna 13 Fa lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] dipholo e tshwanetse go nna 11 Fa lst = [0,81,12,31,21] dipholo e tshwanetse go nna 3 Fa lst = [1,0,8,1,2,1,7] dipholo e tshwanetse go nna 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,tsn_Latn,python,"
def check_dict_case(dict):
    """"""Fa go neetswe bukantswe, busetsa True fa dikopololo tsotlhe e le dinoko tse di kwadilweng ka ditlhaka tse dinnye kgotsa dinoko tsotlhe di le dinoko tse di kwadilweng ka ditlhaka tse dikgolo, go seng jalo busetsa False. Tirego e tshwanetse go busetsa False fa bukantswe e e neetsweng e se na sepe. Dikai: check_dict_case{""a"":""apple"", ""b"":""banana""}) e tshwanetse go busetsa True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) e tshwanetse go busetsa False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) e tshwanetse go busetsa False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) e tshwanetse go busetsa False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""} e tshwanetse go busetsa True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,tsn_Latn,python,"
def count_up_to(n):
    """"""Dirisa tiro e e tsayang palogotlhe e e seng ya boswa mme e boele morago ka matlhomeso a palogotlhe ya ntlha e e leng dipalo tsa ntlha mme e le kwa tlase ga n. Sekai: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,tsn_Latn,python,"
def multiply(a, b):
    """"""Tlatsa tiro e e tsayang dipalo tse pedi tse di feletseng mme e bo e busetsa poelo ya dinomoro tsa tsone tsa yuniti. Akanya gore ka gale go a kgonega. Dikai: ntsifatsa ((148, 412) e tshwanetse go busetsa 16. ntsifatsa ((19, 28) e tshwanetse go busetsa 72. ntsifatsa ((2020, 1851) e tshwanetse go busetsa 0. ntsifatsa ((14,-15) e tshwanetse go busetsa 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,tsn_Latn,python,"
def count_upper(s):
    """"""Fa go neetswe mogatla s, bala palo ya ditokololo tsa mokwalo o mogolo mo diteng tsa matshwao a a lekanang. Sekai: count_upper (('aBCdEf') e busetsa 1 count_upper (('abcdefg') e busetsa 0 count_upper (('dBBE') e busetsa 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,tsn_Latn,python,"
def closest_integer(value):
    '''Tlhopha tiro e e tsayang boleng (string) e e emelang palo mme e busetsa palogotlhe e e gaufi le yona. Fa palo e le kgakala le palogotlhe e le nngwe, e potologe go tswa go lefela. Dikai >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Ela tlhoko: Go potologa go tswa go lefela go raya gore fa palo e e neetsweng e le kgakala le palogotlhe e le nngwe, e o tshwanetseng go e busetsa ke e e leng kgakala le lefela. Sekai, closest_integer "" ((14.5"") e tshwanetse go busetsa 15 mme closest_integer "" ((-14.5"") e tshwanetse go busetsa -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,tsn_Latn,python,"
def make_a_pile(n):
    """"""Fa o filwe palogotlhe e e siameng n, o tshwanetse go dira mokoa wa mafika a maemo a le n. Mokgato wa ntlha o na le mafika a le n. Palo ya mafika mo legatong le le latelang ke: - palo e e sa lekalekanang e e latelang fa n e le e e sa lekalekanang. - palo e e lekanang e e latelang fa n e le e e lekanang. Busetsa palo ya mafika mo legatong lengwe le lengwe mo lenaaneng, fa elemente e e mo tshupamolatong i e emetse palo ya mafika mo legatong (i+1). Dikai: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,tsn_Latn,python,"
def words_string(s):
    """"""O tla fiwa mothale wa mafoko a a kgaogantsweng ke dikoma kgotsa dikgala. Tiro ya gago ke go kgaoganya mothale mo mafokong le go busetsa mothale wa mafoko. Sekai: words_string ((""Dumela, leina la me ke John"") == [""Dumela"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,tsn_Latn,python,"
def choose_num(x, y):
    """"""Tirego e e tsaya dipalo tse pedi tse di siameng x le y mme e busetsa palo e kgolo e e lekanang e e mo kgaolong ya [x, y] go akaretsa. Fa go sena palo e e jalo, tiro e tshwanetse go busetsa -1. Sekai: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,tsn_Latn,python,"
def rounded_avg(n, m):
    """"""O fiwa dipalo tse pedi tse di siameng n le m, mme tiro ya gago ke go bala palogare ya dipalo tse di feletseng go tswa n go ya go m (go akaretsa n le m). Kgabaganya karabo go ya go palogare e e gaufi mme o e fetole go ya go dipalo tsa bobedi. Fa n e le kgolo go feta m, busetsa -1. Sekai: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,tsn_Latn,python,"
def unique_digits(x):
    """"""Go neelwa lenane la dipalo tse di feletseng tse di siameng x. busetsa lenane le le rulagantsweng la dilo tsotlhe tse di senang dinomoro tse di lekanang. Ela tlhoko: Lenane le le buseditsweng le tshwanetse go rulaganywa ka tatelano e e oketsegang. Sekai: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,tsn_Latn,python,"
def by_length(arr):
    """"""Fa o neetswe lenaane la dipalo tse di feletseng, rulaganya dipalo tse di feletseng tse di magareng ga 1 le 9 go akaretsa, fetola lenaane le le tlhagelelang, mme o emisetse dinomoro tsotlhe ka leina la tsone le le tsamaelanang le la ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"". Sekai: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> rulaganya arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> rulaganya arr -> [8, 5, 4, 3, 2, 2, 1, 1] busetsa [""Eight"", ""Five"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Fa lenaane le se na sepe, busetsa lenaane: arr = [] busetsa [] Fa lenaane le na le nomoro nngwe e e sa tlwaelegang, le itlhokomolose: arr = [1, 1 , 55 -> arr - 1 , 55 -> arr - 1 , 55 -> reverse - [51] = ['One'], busetsa ['One] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,tsn_Latn,python,"
def f(n):
    """"""Dirisa tiro f e e tsayang n jaaka paramethara, mme e bo e busetsa lenane la bogolo jwa n, e e dirang gore boleng jwa elemente e e mo index i e nne factoriale ya i fa i e le e e lekanang kgotsa e le palogotlhe ya dipalo go tswa go 1 go ya go i fa go se jalo. i e simolola go tswa go 1. factoriale ya i ke go ntsifatsa dipalo go tswa go 1 go ya go i (1 * 2 * ... * i). Sekai: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,tsn_Latn,python,"
def even_odd_palindrome(n):
    """"""Go neetswe palindrome ya positive, busetsa palindrome e e nang le palindrome ya palindrome ya palindrome e e sa lekalekanang e e welang mo gare ga lefelo la ((1, n), go akarediwa. Sekai1: Tsenyo: 3 Tlhagiso: (1, 2) Tlhaloso: Palindrome ya palindrome ya palindrome e na le 1, 2, 3. nngwe ya tsone ke palindrome ya palindrome mme tse pedi tsa tsone ke palindrome ya palindrome e e sa lekalekanang. Sekai2: Tsenyo: 12 Tlhagiso: (4, 6) Tlhaloso: Palindrome ya palindrome e na le 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. di le nne tsa tsone ke palindrome ya palindrome mme tse 6 tsa tsone ke palindrome ya palindrome e e sa lekalekanang. Tlhokomela: 1. 1 <= n <= 10^3 2.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,tsn_Latn,python,"
def count_nums(arr):
    """"""Kwala tiro ya count_nums e e tsayang matshwao a dipalo tse di feletseng mme e boele morago palo ya dielemente tse di nang le palogotlhe ya dinomoro > 0. Fa palo e le e e sa siamang, dinomoro tsa yone tsa ntlha tse di saenilweng di tla nna tse di sa siamang: sekai, -123 e na le dinomoro tse di saenilweng -1, 2, le 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,tsn_Latn,python,"
def move_one_ball(arr):
    """"""Re na le 'arr' ya dinomoro tsa N tsa palogotlhe arr[1], arr[2], ..., arr[N].Dinomoro tse di mo lenaaneng di tla rulaganngwa ka go sa tlhophege. Tiro ya gago ke go tlhomamisa gore a go a kgonega go dira lenaane le le rulagantsweng ka tatelano e e sa fokotsegeng ka go dira tiro e e latelang mo lenaaneng le le filweng: O letleletswe go dira tiro ya go sutisetsa kwa mojeng ka makgetlo a le mmalwa. Tiro e le nngwe ya go sutisetsa kwa mojeng e kaya go sutisa dielemente tsotlhe tsa lenaane ka boemo bo le bongwe mo ntlheng e e siameng. Elemente ya bofelo ya lenaane e tla sutisediwa kwa maemong a tshimologo mo lenaaneng ke gore 0th. Fa go kgonega go bona lenaane le le rulagantsweng ka go dira tiro e e fa godimo foo go boela boammaaruri, fa go sa nna jalo go boela maaka. Fa lenaane le le filweng le sena sepe foo go boela boammaaruri. Ela tlhoko: Lenaane le le filweng le tlhomamisitswe go nna le dielemente tse di kgethegileng. Sekai: go huduga_le_le_le_e nngwe[[3, 4, 5, 4, 5, 2] Tlhaloso ya boammaaruri: Tlhaloso ya boammaaruri: Ka go dira ditiro tse di le 2min ya kwa mojeng, go sa fokotsegeng ga tatelano e ka fitlhelelwa mo lenaaneng le le le filweng.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,tsn_Latn,python,"
def exchange(lst1, lst2):
    """"""Mo bothateng jo, o tla tsenya tirisong tiro e e tsayang manane a dipalo a le mabedi, mme e tlhotlhomise gore a go a kgonega go dira phapanyetsano ya dielemente magareng ga tsona go dira lst1 lenane la dipalo tse di lekanang fela. Ga go na tekanyetso mo palong ya dielemente tse di fapanyetswang magareng ga lst1 le lst2. Fa go kgonega go fapanyetsanya dielemente magareng ga lst1 le lst2 go dira dielemente tsotlhe tsa lst1 go nna tse di lekanang, busetsa ""YES"". Fa go sa nna jalo, busetsa ""NO"". Sekai: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Go tsewa gore manane a a tsentsweng a tla bo a se lolea. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,tsn_Latn,python,"
def histogram(test):
    """"""Go neelwa mogatla o o emelang ditlhaka tse di kgaogantsweng ke sekgala, busetsa thanodi ya tlhaka e e boaboeletswang thata mme e na le palo e e tsamaelanang. Fa ditlhaka di le mmalwa di na le tlhagelelo e e tshwanang, busetsa tsotlhe tsa tsone. Sekai: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4} histogram ((('a') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,tsn_Latn,python,"
def reverse_delete(s,c):
    """"""Tiro Re filwe dinaka tse pedi s le c, o tshwanetse go phimola dikwalakwatsa tsotlhe mo go s tse di lekanang le dikwalakwatsa dingwe le dingwe mo go c mme o tlhatlhobe gore a dinaka tse di tlhagelelang ke palindrome. Dinaka di bidiwa palindrome fa di buiwa ka go tshwana kwa morago le kwa pele. O tshwanetse go busetsa tuple e e nang le dinaka tsa dipoelo le True/False go tlhatlhoba. Sekai sa s = ""abcde"", c = ""ae"", dipoelo e tshwanetse go nna ('bcd',False) Sa s = ""abcdef"", c = ""b"" dipoelo e tshwanetse go nna ('acdef',False) Sa s = ""abcdedcba"", c = ""ab"", dipoelo e tshwanetse go nna ('cdedc',True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,tsn_Latn,python,"
def odd_count(lst):
    """"""Fa o filwe lenane la dinomoro, fa dinomoro tsotlhe di na le dinomoro fela, busetsa lenane. Elemente nngwe le nngwe i ya dipholo e tshwanetse go nna ""palo ya dinomoro tse di sa tlwaelegang mo dinomorong i tsa dipholo"". fa dinomoro tsotlhe di tshwanetse go emisediwa ka palo ya dinomoro tse di sa tlwaelegang mo dinomorong tsa i tsa dipholo. >>> odd_count['1234567']) [""palo ya dinomoro tse di sa tlwaelegang 4n ya str4ng 4 ya 4nput.""] >>> odd_count['3',""111111""]) [""palo ya dinomoro tse di sa tlwaelegang 1n ya str1ng 1 ya 1nput."", ""palo ya dinomoro tse di sa tlwaelegang 8n ya str8ng 8 ya 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,tsn_Latn,python,"
def minSubArraySum(nums):
    """"""Go neelwa lenaane la dipalo tse di feletseng, bona palogotlhe ya dipalo tse di senang lefela. Sekai minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,tsn_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""O fiwa mogatla wa dikhutlo-nne wa didiba. Mola mongwe le mongwe o emela sediba se le sengwe, mme 1 nngwe le nngwe mo moleng e emela yuniti e le nngwe ya metsi. Sediba sengwe le sengwe se na le kgamelo e e tsamaelanang le sone e e ka dirisiwang go ntsha metsi mo go sona, mme dikgamelo tsotlhe di na le bokgoni jo bo tshwanang. Tiro ya gago ke go dirisa dikgamelo go kgarametsa didiba. Tsenya palo ya makgetlho a o tlhokang go theola dikgamelo. Sekai sa 1: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 Output: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 * 0 * 0 * 1 * 1 * * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 3 * 2 * 2 * 2 * 2 * 3 * 4 * 2 * 2 * 2 * 3 * 4 * 5 * 6 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * * * 10 * 10 * * * * * * * * * * * * * 10 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,tsn_Latn,python,"
def sort_array(arr):
    """"""Mo Kata e, o tshwanetse go rulaganya lenaane la dipalo tse di sa tseyeng letlhakore go ya ka palo ya di le nngwe mo kemedi ya tsone ya binary ka tatelano e e tlhatlogang. Mo palong e e tshwanang ya di le nngwe, rulaganya go ya ka boleng jwa bosome. E tshwanetse go tsenngwa tirisong jaaka e e latelang: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,tsn_Latn,python,"
def select_words(s, n):
    """"""Fa o neetswe mogatla s le nomoro ya tlholego n, o ne wa fiwa tiro ya go tsenya tirisong tiro e e busang lenaane la mafoko otlhe go tswa mogaleng s a a nang le ditumammogo tse n ka go nepagetse, gore mafoko a a tlhagelele mo mogaleng s. Fa mogatla s o se na sepe, tiro e tshwanetse go busetsa lenaane le le senang sepe. Ela tlhoko: o ka nna wa tsaya gore mogatla wa tsenyo o na le ditlhaka fela le dikgala. Dikai: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,tsn_Latn,python,"
def get_closest_vowel(word):
    """"""O fiwa lefoko. Tiro ya gago ke go bona segalo se se gaufi se se emeng fa gare ga ditumammogo tse pedi go tswa kwa letlhakoreng la moja la lefoko (go lemoga ditlhaka tse di potlana). Segalo sa kwa tshimologong le kwa bokhutlong ga se balege. Busetsa mogala o o senang sepe fa o sa bona segalo se se fitlhelelang maemo a a fa godimo. O ka nna wa tsaya gore mogala o o neilweng o na le ditlhaka tsa Seesimane fela. Sekai: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,tsn_Latn,python,"
def match_parens(lst):
    '''O fiwa lenane la dinomoro tse pedi, dinomoro tseo ka bobedi di na le dikgofa tse di bulegileng '(' kgotsa dikgofa tse di tswalegileng ') ' fela. Tiro ya gago ke go lekola gore a go a kgonega go golaganya dinomoro tse pedi ka tatelano nngwe, gore dinomoro tse di tlhagelelang di tla nna molemo. Dinomoro S di tsewa di le molemo fa e le gore dikgofa tsotlhe mo S di lekalekane. Sekai: dinomoro '((())' di siame, fa dinomoro '())' di sa siama. Busetsa 'Ee' fa go na le tsela ya go dira dinomoro tse di siameng, mme o busetse 'Nnyaa' fa go sa nna jalo. Dikai: match_parens[('() ', ') ']) == 'Ee' match_parens[(') ', ') ']) == 'Nnyaa' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,tsn_Latn,python,"
def maximum(arr, k):
    """"""Go neilwe lenaane la dinomoro tse di feletseng le dinomoro tse di feletseng tse di siameng k, busetsa lenaane le le rulagantsweng la boleele jwa k le dinomoro tse di kwa godimo tsa k mo lenaaneng. Sekai1: Tsenyo: arr = [-3, -4, 5], k = 3 Ditshenyegelo: [-4, -3, 5] Sekai2: Tsenyo: arr = [4, -4, 4], k = 2 Ditshenyegelo: [4, 4] Sekai3: Tsenyo: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Ditshenyegelo: [2] Tlhokomela: 1. boleele jwa lenaane bo tla nna mo lefelong la [1, 1000]. 2. dielemente tsa lenaane di tla nna mo lefelong la [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,tsn_Latn,python,"
def solution(lst):
    """"""Fa go neetswe lenane le le senang sepe la dipalo tse di feletseng, busetsa palogotlhe ya dilo tsotlhe tse di sa tlwaelegang tse di leng mo maemong a a lekanang.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,tsn_Latn,python,"
def add_elements(arr, k):
    """"""Go neilwe thulaganyo e e seng lolea ya dinomoro tse di feletseng arr le nomoro e e feletseng k, busetsa palogotlhe ya dielemente tse di nang le dinomoro tse pedi go tswa go dielemente tsa ntlha tsa k tsa arr. Sekai: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,tsn_Latn,python,"
def get_odd_collatz(n):
    """"""Fa o filwe palogotlhe e e siameng n, busetsa lenane le le rulagantsweng le le nang le dipalo tse di sa lekalekanang mo tatelanong ya collatz. Kgopolo ya Collatz ke kakanyo mo dipalong e e amang tatelano e e tlhalosiwang jaana: simolola ka palogotlhe nngwe le nngwe e e siameng n. Morago ga moo, karolo nngwe le nngwe e bonwa go tswa mo temaneng e e fetileng ka tsela e e latelang: fa e le gore karolo e e fetileng e a lekana, karolo e e latelang ke halofo ya karolo e e fetileng. Fa e le gore karolo e e fetileng ga e a lekana, karolo e e latelang ke 3 go menagane ga karolo e e fetileng go tsenyeletsa 1. Kgopolo ke gore go sa kgathalesege gore n e na le boleng bofe, tatelano e tla fitlha go 1. Ela tlhoko: 1. Collatz(1) ke [1]. 2. Lenane le le boeleditsweng le rulagantswe ka tatelano e e oketsegang. Sekai: get_odd_collatz(5) le busetsa [1, 5] # Tatelano ya collatz ya 5 ke [5, 8, 16, 4, 2, 1], ka jalo dipalo tse di sa lekalekanang ke 1, le  5.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,tsn_Latn,python,"
def valid_date(date):
    """"""O tshwanetse go kwala tiro e e netefatsang mogolagang wa letlha le le rileng mme e busetsa boammaaruri fa letlha le le teng go seng jalo maaka. Letlha le siame fa melawana yotlhe e e latelang e kgotsofaditswe: 1. Mogolagang wa letlha ga o na lefela. 2. Palo ya malatsi ga e kwa tlase ga 1 kgotsa e kwa godimo ga malatsi a le 31 mo dikgweding 1,3,5,7,8,10,12. Mme palo ya malatsi ga e kwa tlase ga 1 kgotsa e kwa godimo ga malatsi a le 30 mo dikgweding 4,6,9,11. Mme, palo ya malatsi ga e kwa tlase ga 1 kgotsa e kwa godimo ga 29 mo kgweding 2. 3. Dikgwedi ga di a tshwanela go nna kwa tlase ga 1 kgotsa di kwa godimo ga 12. 4. Letlha le tshwanetse go nna ka mokgwa wa mm-dd-yy-yy ka sekai: valid_date('03-11-2000') => True_date('15-01-2012') => False_date('04-040') => False_date ((('06-04-2020') => True_date ((('06-04/2020')  => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,tsn_Latn,python,"
def split_words(txt):
    '''Go neelwa mothale wa mafoko, busetsa lenane la mafoko a a kgaogantsweng ka dikhutlo, fa go se na dikhutlo mo mokwalong o tshwanetse go kgaoganya ka dikoma ',' fa go se na dikoma o tshwanetse go busetsa palo ya ditlhaka tse di potlana ka tatelano e e sa tlwaelegang mo sekwalweng, ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 Dikai tsa mafoko a a kgaogantsweng ka dikhutlo (""Hello world!"") â -> [""Hello"", ""world!""] split_words ({""Hello,world!"") â -> [""Hello"", ""world!"" split_words""{""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,tsn_Latn,python,"
def is_sorted(lst):
    '''Fa o neetswe lenane la dinomoro, busetsa gore a di rulagantswe ka tatelano e e tlhatlogang kgotsa nnyaa. Fa lenane le na le go feta 1 e e tshwanang ya nomoro e le nngwe, busetsa False. Akanya gore ga go na dinomoro tse di sa siamang mme ke dinomoro tsa palogotlhe fela. Dikai is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,tsn_Latn,python,"
def intersection(interval1, interval2):
    """"""O fiwa dipaka tse pedi, mo kgaoganong nngwe le nngwe e leng dipara tsa dipalo tse di feletseng. Sekai, dipaka = (tshimologo, bokhutlo) = (1, 2). Dipaka tse di filweng di tswetswe, se se rayang gore paka (tshimologo, bokhutlo) e akaretsa tshimologo le bokhutlo. Mo kgaoganong nngwe le nngwe e e filweng, go tsewa gore tshimologo ya yone e kwa tlase kgotsa e lekana le bokhutlo jwa yone. Tiro ya gago ke go tlhomamisa gore a boleele jwa kgaoganyo ya dipaka tse pedi tse ke palo ya ntlha. Sekai, kgaoganyo ya dipaka (1, 3), (2, 4) ke (2, 3) e boleele jwa yone e leng 1, e e seng palo ya ntlha. Fa boleele jwa kgaoganyo e le palo ya ntlha, busetsa ""EE"", go seng jalo, busetsa ""NYAYA"". Fa dipaka tse pedi di sa kgaoganye, busetsa ""NYAYA"". [input/output] disampole: kgaoganyo""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,tsn_Latn,python,"
def prod_signs(arr):
    """"""O fiwa lenaane la dinomoro tse di feletseng mme o tlhoka go busetsa palogotlhe ya bogolo jwa dinomoro tse di feletseng tse di atolositsweng ka poelo ya matshwao otlhe a nomoro nngwe le nngwe mo lenaaneng, e emetswe ke 1, -1 kgotsa 0. Ela tlhoko: busetsa NONE go nna lenaane le le senang sepe. Sekai: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,tsn_Latn,python,"
def minPath(grid, k):
    """"""Fa o neetswe gridi e e nang le mela le dikholomo di le N (N >= 2) le sele e e nang le palogotlhe ya k, sele nngwe le nngwe ya gridi e na le boleng. Palo nngwe le nngwe e e mo gare ga [1, N * N] go akaretsa e tlhagelela gangwe fela mo diseleng tsa gridi. O tshwanetse go bona tsela e nnye ya boleele jwa k mo gridi. O ka simolola go tswa mo seleng nngwe le nngwe, mme mo kgatong nngwe le nngwe o ka ya kwa diseleng tse di gaufi le wena, ka mafoko a mangwe, o ka ya kwa diseleng tse di nang le letlhakore le sele ya gago ya jaanong. Tsweetswee-tswee ela tlhoko gore tsela e telele ya k e raya go etela disele tse di k (e seng gore di farologane). O KA SE kgone go tswa mo gridi. Tsela A (ya boleele jwa k) e tsewa e le potlana go feta tsela B (ya boleele jwa k) fa morago ga go dira lenaane le le rulagantsweng la boleng mo diseleng tse di fetang A le B (re tla ba bitsa l_stA le l_stB), l_stA e le fa go ya ka fa go ya ka fa go ya ka fa go ya ka fa go ya fa), ke tsela e e e kwa tlase go ya lexical go feta l_stA, ka mafoko a mangwe, ka tsela e le nngwe ya boleele jwa k, ka fa gare ga k, ka tsela e le fa go ya sele e le nngwe ya fa thoko. [1, j_stA, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, [4, [1, [1, [1, j_st, j_st, j_st, j_i, j_i, j_i, j_i, j_i, j, j, j_i, j, j_i, k] [1, [1,] [1, [1, j_i, k] [1, [1, j_i, k, k, k, k, k] [8, [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] []""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,tsn_Latn,python,"
def tri(n):
    """"""Mongwe le mongwe o itse tatelano ya Fibonacci, e ithutilwe thata ke bomathematiki mo makgolong a mabedi a dingwaga a a fetileng. Le fa go ntse jalo, se batho ba sa se itseng ke tatelano ya Tribonacci. Tatelano ya Tribonacci e tlhalosiwa ke go boelediwa: tri(1) = 3 tri(n) = 1 + n / 2, fa n e le e e lekanang. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), fa n e sa lekalekanang. Sekai: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 O fiwa palo ya palogotlhe e e seng ya boswa, o tshwanetse go busetsa lenane la dinomoro tsa ntlha tsa n + 1 tsa tatelano ya Tribonacci. Sekai: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,tsn_Latn,python,"
def digits(n):
    """"""Fa go neetswe palogotlhe e e siameng n, busetsa poelo ya dinomoro tse di sa lekalekanang. Busetsa 0 fa dinomoro tsotlhe di le pedi. Sekai: dinomoro""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,tsn_Latn,python,"
def is_nested(string):
    '''Tlhopha tiro e e tsayang mogala jaaka tsenyô e e nang le dikhurumetso tsa sekwere fela. Tiro e tshwanetse go busetsa boammaaruri fa e le gore go na le tatelano e e nepagetseng ya dikhurumetso moo bonnye e le nngwe ya dikhurumetso e leng mo go yone. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,tsn_Latn,python,"

def sum_squares(lst):
    """"""O fiwa lenane la dinomoro. O tlhoka go busetsa palogotlhe ya dinomoro tsa karolwana mo lenaneng le le neilweng, go dikologa karolo nngwe le nngwe mo lenaneng go ya go int e e kwa godimo ((Lekwatla) pele. Dikai: For lst = [1,2,3] the output should be 14 For lst = [1,4,9] the output should be 98 For lst = [1,3,5,7] the output should be 84 For lst = [1.4,4.2,0] the output should be 29 For lst = [-2.4,1,1] the output should be 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,tsn_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Tlhopha tiro e e busang boammaaruri fa mokwalo wa bofelo wa mogala o o neilweng e le mokwalo wa alefabete mme e se karolo ya lefoko, le maaka fa go se jalo. Ela tlhoko: ""lefoko"" ke setlhopha sa dikwalo tse di kgaogantsweng ke sekgala. Dikai: check_if_last_char_is_a_letter""{""apple pie"") â -> False check_if_last_char_is_a_letter""{""apple pi e"") â -> True check_if_last_char_is_a_letter""{""apple pi e"") â -> False check_if_last_char_is_a_letter""{""apple pi e"") â -> False check_if_last_char_is_a_letter""{""}""{""apple pi e"") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,tsn_Latn,python,"
def can_arrange(arr):
    """"""Tlhopha tiro e e busang nomoro e kgolo ya ntlha e e sa feteng kgotsa e e lekanang le ntlha e e tlang pele ga yone. Fa go sena ntlha e e ntseng jalo e e teng, busetsa -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,tsn_Latn,python,"
def largest_smallest_integers(lst):
    '''Tlhopha tiro e e busang tuple (a, b), fa 'a' e le kgolo ya dipalo tse di feletseng tse di seng ntle, mme 'b' e le e nnye ya dipalo tse di feletseng tse di siameng mo lenaaneng. Fa go se na dipalo tse di feletseng tse di siameng kgotsa tse di seng ntle, di busetse jaaka None. Dikai: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,tsn_Latn,python,"
def compare_one(a, b):
    """"""Tlhopha tiro e e tsayang dipalo tse di feletseng, dipalopalo tse di phaphaselang, kgotsa dinomoro tse di emelang dipalo tsa nnete, mme e busetsa dipalopalo tse di kgolo mo mofuteng wa dipalopalo tse di filweng. E busetsa None fa boleng bo lekana. Ela tlhoko: Fa palo ya nnete e emetswe jaaka dinomoro tsa nnete, ntlha e e phaphaselang e ka nna . kgotsa , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,tsn_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Sekaseka gore a palo e e neetsweng n e ka kwalwa jaaka palogotlhe ya dinomoro tse di siameng tse di lekanang sentle tse 4 Sekai is_equal_to_sum_even ((4) == Maaka is_equal_to_sum_even ((6) == Maaka is_equal_to_sum_even ((8) == Boammaaruri """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,tsn_Latn,python,"
def special_factorial(n):
    """"""Factoriale ya Brazil e tlhalosiwa jaaka: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! fa n > 0 Sekai: >>> special_factorial ((4) 288 Tirego e tla amogela palogotlhe jaaka input mme e tshwanetse go busetsa palogotlhe e e kgethegileng ya palogotlhe e. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,tsn_Latn,python,"
def fix_spaces(text):
    """"""_Sekai-3lo wa mogatla, emisetsa diphatlha tsotlhe ka matshwao a a kwa tlase, mme fa mokgalo o na le diphatlha tse di fetang 2 tse di latelanang, emisetsa diphatlha tsotlhe tse di latelanang ka - fix_spaces ((""Sekai"") == ""Sekai"" fix_spaces ((""Sekai1"") == ""Sekai1"" fix_spaces ((""Sekai2"") == ""Sekai_2"" fix_spaces ((""Sekai 3"") == ""Sekai-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,tsn_Latn,python,"
def file_name_check(file_name):
    """"""Tlhopha tiro e e tsayang mogala o o emelang leina la faele, mme e busetsa 'Ee' fa leina la faele le le maleba, mme e busetsa 'Nnyaa' fa go sa nna jalo. Leina la faele le tsewa le le maleba fa fela maemo a a latelang a diragaditswe: - Ga go a tshwanela go nna le dinomoro tse di fetang tharo ('0'-'9') mo leineng la faele. - Leina la faele le na le khutlo e le nngwe fela '.' - Mogala o o fa pele ga khutlo ga o a tshwanela go nna o o se nang sepe, mme o simolola ka tlhaka go tswa mo ditlhaka tsa alfabeta ya Selatini ('a'-'z' le 'A'-Z'). - Mogala o o fa morago ga khutlo o tshwanetse go nna mongwe wa tse di latelang: ['txt', 'exe', 'lld'] Sekai: file_name_check""{example.txt.txt"") # => 'Ee' file_name_check""{example.dll1} => 'Nnyaa' (leina le tshwanetse go simolola ka tlhaka ya Selatini) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,tsn_Latn,python,"


def sum_squares(lst):
    """""""" Tiragalo e e tla tsaya lenane la dipalo tse di feletseng. Mo diteng tsotlhe mo lenaneng, tiro e tla dira karata ya diteng tsa palo e e feletseng fa tshupo ya yona e le palo e ntsi ya 3 mme e tla dira khutlotharo ya diteng tsa palo e e feletseng fa tshupo ya yone e le palo e ntsi ya 4 mme e se palo e ntsi ya 3. Tiragalo e ka se fetole diteng mo lenaneng tse di nang le diteng tse di ntsi tsa 3 kgotsa 4. Tiragalo e tla boela gape mo paloganyong ya diteng tsotlhe. Dikai: Fa lst = [1,2,3] dipholo e tshwanetse go nna 6 Fa lst = [] dipholo e tshwanetse go nna 0 Fa lst = [-1,-5,2,-1,-5] dipholo e tshwanetse go nna -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,tsn_Latn,python,"
def words_in_sentence(sentence):
    """"""O fiwa mogala o o emelang polelwana, polelwana e na le mafoko a a kgaogantsweng ke sekgala, mme o tshwanetse go busetsa mogala o o nang le mafoko a a tswang mo polelong ya ntlha, eo boleele jwa one e leng dinomoro tsa ntlha, tatelano ya mafoko mo mogaleng o mosha e tshwanetse go tshwana le ya ya ntlha. Sekai1: Tsenyo: polelwana = ""Se ke teko"" Tlhagiso: ""ke"" Sekai2: Tsenyo: polelwana = ""a re ye go thuma"" Tlhagiso: ""a re ye go thuma"" Dikgoreletsi: * 1 <= len(polelwana) <= 100 * Polelwana e na le ditlhaka fela """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,tsn_Latn,python,"
def simplify(x, n):
    """"""Tiro ya gago ke go tsenya tirisong tiro e e tla tlhofofatsang polelwana x * n. Tiro e tla bo e busetsa True fa x * n e le palo e e feletseng mme e tla bo e le False fa e le gore ga go jalo. x le n ka bobedi ke dinomoro tsa dikhutlo, mme di na le popego e e latelang, <numerator>/<denominator> fa dinomoro le dinomoro e le dipalo tse di feletseng tse di siameng. O ka tsaya gore x, le n ke dikhutlo tse di nepagetseng, mme ga di na lefela jaaka dinomoro. simplify{\displaystyle \simplify{\simplify{\simplify}\ (1/5}, ""5/1"") = True simplify{\simplify{\simplify{\simplify}\1\6}, ""2/1"") = False simplify{\simplify{\simplify{\simplify}\7\10}, ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,tsn_Latn,python,"
def order_by_points(nums):
    """"""Kwala tiro e e rulaganyang lenaane le le neilweng la dipalo tse di feletseng ka tatelano e e tlhatlogang go ya ka palogotlhe ya dinomoro tsa tsone. Ela tlhoko: fa go na le dilo di le mmalwa tse di nang le palogotlhe e e tshwanang ya dinomoro tsa tsone, di rulaganye go ya ka lenane la tsone la ntlhantlha. Ka sekai: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,tsn_Latn,python,"
def specialFilter(nums):
    """"""Kwala tiro e e tsayang matshwao a dipalo jaaka tsenyô mme e busetsa palogotlhe ya dielemente mo matshwaong tse di fetang 10 mme dinomoro tsa ntlha le tsa bofelo tsa nomoro di sephaphathi (1, 3, 5, 7, 9). Sekai: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,tsn_Latn,python,"
def get_max_triples(n):
    """"""O fiwa palogotlhe e e siameng n. O tshwanetse go dira thulaganyo ya palogotlhe a ya boleele n. Mo go nngwe le nngwe ya i (1 â‰¤ i â‰¤ n), boleng jwa a[i] = i * i - i + 1. Boela palo ya dipalo tse tharo (a[i], a[j], a[k]) tsa a fa i < j < k, mme a[i] + a[j] + a[k] ke palo e ntsi ya 3. Sekai: Input: n = 5 Output: 1 Tlhaloso: a = [1, 3, 7, 13, 21] Tharabololo e le nosi e e nepagetseng ke ya dipalo tse tharo ke (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,tsn_Latn,python,"
def bf(planet1, planet2):
    '''Go na le dipolanete di le robedi mo tsamaisong ya rona ya masedi a letsatsi: e e gaufi le letsatsi ke Mercury, e e latelang ke Venus, go tswa foo Lefatshe, Mars, Jupiter, Saturn, Uranus, Neptune. Kwala tiro e e tsayang maina a dipolanete di le pedi jaaka dinaka planet1 le planet2. Tiro e tshwanetse go busetsa tuple e e nang le dipolanete tsotlhe tse dipolanete tsa tsone di leng fa gare ga tsela ya polanete1 le tsela ya polanete2, di rulagantswe ka fa di atamalaneng le letsatsi ka teng. Tiro e tshwanetse go busetsa tuple e e se nang sepe fa e le gore planet1 kgotsa planet2 ga se maina a a siameng a dipolanete. Dikai bf""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf(""Earth"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,tsn_Latn,python,"
def sorted_list_sum(lst):
    """"""Kwala tiro e e amogelang lenaane la dinolo jaaka paramethara, e phimola dinolo tse di nang le boleele jo bo sa tshwaneng mo go lone, mme e busetsa lenaane le le tlhagelelang ka tatelano e e rulagantsweng. Lenaane le ka gale ke lenaane la dinolo mme ga le ke le nna le matshwao a dipalo, mme le ka nna la nna le tse di tshwanang. Tatelano ya lenaane e tshwanetse go tlhatloga ka boleele jwa lefoko lengwe le lengwe, mme o tshwanetse go busetsa lenaane le le rulagantsweng ka molao oo. Fa mafoko a mabedi a na le boleele jo bo tshwanang, rulaganya lenaane ka tatelano ya alefabete. Tiro e tshwanetse go busetsa lenaane la dinolo ka tatelano e e rulagantsweng. O ka nna wa tsaya gore mafoko otlhe a tla nna le boleele jo bo tshwanang. Sekai: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,tsn_Latn,python,"
def x_or_y(n, x, y):
    """"""Lenaneo le le bonolo le le tshwanetseng go busetsa boleng jwa x fa n e le palo ya ntlha mme le tshwanetse go busetsa boleng jwa y fa go sa nna jalo. Dikai: for x_or_y(7, 34, 12) == 34 for x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,tsn_Latn,python,"
def double_the_difference(lst):
    '''Fa o filwe lenane la dinomoro, busetsa palogotlhe ya dikwere tsa dinomoro tse di sa lekalekanang mo lenaneng. Tlhokomologa dinomoro tse di seng tsa nnete kgotsa tse di seng tsa nnete. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Fa lenane la tsenyo le se na sepe, busetsa 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,tsn_Latn,python,"
def compare(game,guess):
    """"""Ke akanya gore rotlhe re gakologelwa gore maikutlo a fa go nna le dipoelo tsa tiragalo nngwe e e neng e sa bolo go emelwa e itsege. Maikutlo le dikakanyo tse o nang le tsone ka nako eo di tshwanetse go kwalwa le go bapisiwa. Tiro ya gago ke go bona gore a motho o ne a fopholetsa dipoelo tsa dipapadi tse di farologaneng ka tshwanelo. O fiwa matshwao a le mabedi a maduo le dikakanyo tsa boleele jo bo lekanang, koo tshupo nngwe le nngwe e bontshang go tsamaelana. Busetsa matshwao a boleele jo bo lekanang a a supang gore go fopholediwa go ne go le kgakala go le kae. Fa ba fopholeditse sentle, boleng ke 0, mme fa go sa nna jalo, boleng ke pharologano e e feletseng magareng ga go fopholetsa le maduo. sekai: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4,0,4],[1,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,tsn_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""O tla fiwa leina la setlhopha (mogala) le lenaane la ditlaleletso. Ditlaleletso di tshwanetse go dirisiwa go tsenya ditlelase tsa tlaleletso mo setlhopheng. Nonofo ya katolosetso e ka tsela e e latelang: A CAP e nne palo ya ditlhaka tse dikgolo mo leineng la katolosetso, mme a SM e nne palo ya ditlhaka tse dinnye mo leineng la katolosetso, Nonofo e fiwa ke karolwana ya CAP - SM. O tshwanetse go bona katolosetso e e nonofileng mme o busetse mogala mo popegong e: ClassName.StrongestExtensionName. Fa go na le ditlaleletso di le pedi kgotsa go feta ka nonofo e e tshwanang, o tshwanetse go tlhopha e e tlang pele mo lenaaneng. Sekai, fa o fiwa ""Slices"" jaaka setlhopha le lenaane la ditlaleletso: ['SEviviRNGCliS', 'Cheese', 'StuFfed'] o tshwanetse go busetsa 'Slices.SEviRNGCliS' ka gonne 'SviRNGCliS' ke 'mySviRNGCliS' (mySviRNGCliS') ke katolosetso e e e nonofileng. Sekai: 'AA_Beast', 'AA' ke 'Strongest_class' => 'AA'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,tsn_Latn,python,"
def cycpattern_check(a , b):
    """"""O fiwa mafoko a le 2. O tlhoka go busetsa True fa lefoko la bobedi kgotsa nngwe ya dikologelo tsa lone e le mothale wa lefoko la ntlha cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,tsn_Latn,python,"
def even_odd_count(num):
    """"""Fa go neetswe palogotlhe ya dinomoro, e busetsa palo ya dinomoro tse di sa lekalekanang le tse di sa lekalekanang. Sekai: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,tsn_Latn,python,"
def int_to_mini_roman(number):
    """"""Go neelwa palogotlhe e e siameng, bona palo ya yone ya se-Roma e e lekanang jaaka mogala, mme o e busetse ka ditlhaka tse di potlana.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,tsn_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Go neelwa boleele jwa matlhakore a le mararo a khutlotharo. Boela True fa matlhakore a le mararo a bopa khutlotharo ya khutlotharo, False fa go sa nna jalo. khutlotharo ya khutlotharo ke khutlotharo e nngwe ya matlhakore e leng khutlotharo ya khutlotharo kgotsa 90 degree. Sekai: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,tsn_Latn,python,"
def find_max(words):
    """"""Kwala tiro e e amogelang lenaane la dinomoro. Lenaane le na le mafoko a a farologaneng. Busetsa lefoko le le nang le palo e e kwa godimo ya ditlhaka tse di sa tshwaneng. Fa dinomoro di le dintsi di na le palo e e kwa godimo ya ditlhaka tse di sa tshwaneng, busetsa e e tlang pele ka tatelano ya thutapuo.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,tsn_Latn,python,"
def eat(number, need, remaining):
    """"""O mmutla o o tshwerweng ke tlala, mme o setse o jele palo e e rileng ya dikherotse, mme jaanong o tlhoka go ja dikherotse tse dingwe go feleletsa dijo tsa letsatsi. o tshwanetse go busetsa mothale wa [ palogotlhe ya dikherotse tse di jetsweng morago ga dijo tsa gago, palo ya dikherotse tse di setseng morago ga dijo tsa gago ] fa go sena dikherotse tse di setseng tse di lekaneng, o tla ja dikherotse tsotlhe tse di setseng, mme o tla nna o ntse o tshwere ke tlala. Sekai: * ja(5, 6, 10) -> [11, 4] * ja(4, 8, 9) -> [12, 1] * ja(1, 10, 10) -> [11, 0] * ja(2, 11, 5) -> [7, 0] Dikarolo: @number: palogotlhe ya dikherotse tse o di jeleng. @need: palogotlhe ya dikherotse tse o tlhokang go di ja. @remaining: palogotlhe ya dikherotse tse di setseng mo setokong Constrain: * 0= <= 0 * 1000 <= 0 * 0 = <= 1000 <= 0""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,tsn_Latn,python,"
def do_algebra(operator, operand):
    """"""Go neetswe lenaane la diopereitara le diopereitara. Lenaane la ntlha le na le ditiro tsa motheo tsa alejebere, mme lenaane la bobedi ke lenaane la dipalo tse di feletseng. Dirisa lenaane le le neetsweng go aga polelwana ya alejebere mme o boele o duele tekanyetso ya polelwana eno. Ditiro tsa motheo tsa alejebere: Koketso (+) Kgatoloso (-)) Koketso (*) Kgaogano ya boalo (//) Kgatoloso (**) Sekai: opereitara['+', '*', '-'] matlakala = [2, 3, 4, 5] dipoelo = 2 + 3 * 4 - 5 => dipoelo = 9 Ela tlhoko: Boleele jwa lenaane la diopereitara bo lekana le boleele jwa lenaane la diopereitara go ntshitswe e le nngwe. Diopereitara ke lenaane la dipalo tse di feletseng tse di seng tsa lefela. Operetara e na le bonnye opereitara e le nngwe, mme lenaane la diopereitara le na le bonnye diopereitara tse pedi. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,tsn_Latn,python,"
def solve(s):
    """"""O fiwa mogatla s. fa s[i] e le tlhaka, fetola dikgetse tsa yone go tswa kwa tlase go ya kwa godimo kgotsa go sele, go seng jalo e tlogele jaaka e ntse. Fa mogatla o sena ditlhaka, fetola mogatla. Tiro e tshwanetse go busetsa mogatla o o tlhagisitsweng. Dikai solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,tsn_Latn,python,"
def string_to_md5(text):
    """"""Fa go neetswe mogolagwane 'text', busetsa mogolagwane wa yone wa md5 hash. Fa 'text' e le mogolagwane o o senang sepe, busetsa None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,tsn_Latn,python,"
def generate_integers(a, b):
    """"""Go neetswe dipalo tse pedi tse di siameng a le b, busetsa dipalo tse di magareng ga a le b, ka tatelano e e tlhatlogang. Sekai: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
