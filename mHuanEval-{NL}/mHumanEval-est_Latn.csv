task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,est_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Kontrollige, kas antud numbrite loendis on kaks numbrit üksteisele lähemal kui antud künnis. Näide: >>> on_lähedased_elemendid (([1.0, 2.0, 3.0], 0.5) Vale >>> on_lähedased_elemendid (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Tõsi """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,est_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""See funktsioon sisestab string, mis sisaldab mitut rühma sisseehitatud sulgedes. Teie eesmärk on eraldada need rühmad eraldi stringideks ja tagastada nende loetelu. Eraldi rühmad on tasakaalustatud (iga avatud sulg on nõuetekohaselt suletud) ja ei ole üksteise sees sisseehitatud. Eemaldage sisendite stringis olevaid ruume. Näide: >>> separate_paren_groups' ((( ) (() ((( ) ) ) ' [' ((() ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,est_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Positiivne liikuva virrusega number võib jagada tervikuna (suurim täisarv on väiksem kui antud number) ja kümnendeks (jäänud osa on alati väiksem kui 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,est_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Saate nimekirja pangakontol tehtud hoiuste ja väljavõtete kohta, mis algavad nullsaldoga. Teie ülesanne on tuvastada, kas mingil hetkel konto saldo langeb alla nulli, ja sellel hetkel peaks funktsioon tagastama True. Vastasel juhul peaks see tagastama False. Näide: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,est_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Andmetel sisendarvudest arvutame keskmise absoluutse kõrvalekalde selle andmekogumi keskmise ümber. Keskmine absoluutne kõrvalekalde on iga elemendi ja keskpunkti keskmine absoluutne erinevus (keskmine selles juhul): MAD = keskmine ∙ x - x_keskmine ∙ Näide: >>> keskmine_absoluutne_kaotus ∙ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,est_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Sisestage sisendnimekirja iga kahe järjestikuse elemendi vahele number ""piir"" `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,est_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Selle funktsiooni sisendiks on rea, mis esindab ruumidega eraldatud ümbritsevate varvaste mitut rühma. Iga rühma puhul väljastatakse varvaste kõige sügavam ümbritsevus. Näiteks (() (()) on maksimaalselt kaks ümbritsevuset, samas kui ((())) on kolm. >>> parse_nested_parens (('((()) ((())) () (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,est_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filtreerida sisendseade ainult selliste stringi jaoks, mis sisaldavad antud allstringi >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,est_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Andetud teranumbrite loendile tagastage tuple, mis koosneb loendis olevate teranumbrite summa ja korrutisest. Tühja summa peaks olema võrdne 0 ja tühi korrutis võrdne 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,est_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Andetud teraste nimekirjast genereeritakse nimekiri rullmaksimaalse elemendi kohta, mis on leitud kuni antud hetkeni järjestuses. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,est_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Leia lühike palindroom, mis algab antud stringuga. Algoritmi idee on lihtne: - Leia antud string'i pikim postfix, mis on palindroom. - Lisada string'i lõppu string prefix, mis tuleb palindroomse sufiksi ees. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Test, kas antud string on palindroom.""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,est_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Sissepääs on kaks stringit a ja b, mis koosnevad ainult 1stest ja 0st. Tehke nende sisendite puhul binaarne XOR ja tagastage tulemus ka stringina. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,est_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Sõlmides nimekirja, tagastage kõige pikem. Tagastage esimene, kui on mitu sama pikkusega rida. Tagastage null, kui sisendnimekiri on tühi. >>> kõige pikem (([]) >>> kõige pikem ((['a', 'b', 'c']) 'a' >>> kõige pikem ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,est_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Tagastab kahe täisarvu a ja b suurima ühise jaguandja >>> suurima_ühise_jaguandja ((3, 5) 1 >>> suurima_ühise_jaguandja ((25, 15) 5) """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,est_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Tagastab kõikide eelnimete nimekirja sisendjoonest kõige lühemast pikemale >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,est_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Tagastab rea, mis sisaldab ruumidega piiratud numbreid alates 0 kuni n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,est_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Andes string, leida, kui palju eristatavaid märke (sõltumata juhus) see koosneb >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,est_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Sissepääs on muusika noote esindav string spetsiaalses ASCII vormis. Teie ülesanne on analüüsida tervete stringide nimekirja, mis vastab paljudele löögidele. Siin on legend: 'o' note, lasts beats 'o, kahel viimasel löögil, lasts kaks löögil, lasts üks löögil >>> parse_music. 'o. o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o, o,""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,est_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Leia, mitu korda on antud alljoon leitud algses joonis. Loe kattuvaid juhtumeid. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,est_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Sissepääs on ruumidega piiratud numbrijoon nullist üheksa. Tõhusad valikud on null, üks, kaks, kolm, neli, viis, kuus, seitse, kaheksa ja üheksa. Tagastab numbrijoone, mis on sorteeritud väikestest suuremale >>> sort_numbers ((('kolm üks viis') 'üks kolm viis' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,est_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Vali ja anna tagasi kaks numbrit, mis on üksteisele kõige lähemal, ja anna need tagasi järjekorras (väiksem number, suurem number). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,est_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Andes nimekirja numbrid (vähemalt kaks elementi), rakendada lineaarne transformeerida, et nimekiri, nii et väikseim number muutub 0 ja suurim muutub 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,est_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter antud nimekiri mis tahes Python väärtused ainult tervikud >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,est_Latn,python,"

def strlen(string: str) -> int:
    """"""Tagasiõppeseade: antud string'i pikkus >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,est_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Andetud n-le, leia suurim number, mis jagab n võrdselt, väiksem kui n >>> suurim_jaotusnumbri ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,est_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Tagastab antud täisarvu algtegurite nimekirja järjestusest väikestest suuremale. Iga teguri arv peaks olema võrdne kõikide tegurite tootmisega >>> faktoriseerida ((8) [2, 2, 2] >>> faktoriseerida ((25) [5, 5] >>> faktoriseerida ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,est_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Eemaldage terved elemendid, mis esinevad rohkem kui üks kord. Hoidke elementide järjekord samana, nagu sisendis. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,est_Latn,python,"

def flip_case(string: str) -> str:
    """"""Andetud string, flip väike tähemärgid suureks ja suureks väike. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,est_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Konkateaatide loetelu üheks stringiks >>> konkatenaat (([]) '' >>> konkatenaat ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,est_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filtreeri sisendseade ainult nende jaoks, mis algavad antud eesliigega. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,est_Latn,python,"

def get_positive(l: list):
    """"""Tagastab ainult nimekirja positiivsed numbrid. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,est_Latn,python,"

def is_prime(n):
    """"""Tagastab vale, kui antud number on algarv, ja vale muidu. >>> on algarv ({{lang-en_algarv}}) (6) Vale >>> on algarv ({{lang-en_algarv}}) 101) Tõeline >>> on algarv ({{lang-en_algarv}}) 11) Tõeline >>> on algarv ({{lang-en_algarv}}) 13441) Tõeline >>> on algarv ({{lang-en_algarv}}) 61) Tõeline >>> on algarv ({{lang-en_algarv}}) 4) Vale >>> on algarv ({{lang-en_algarv}}) 1) Vale """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,est_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs on polinoomi koefitsiendid. find_zero leiab x selliselt, et poly ((x) = 0. find_zero annab ainult nullpunkti, isegi kui neid on palju. Lisaks võtab find_zero ainult nimekirja xs, millel on paarisarv koefitsiente ja suurim mitte-nullkoefitsient, sest see tagab lahenduse. >>> round (((find_zero[1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Arvab polinoomi koefitsientidega xs punktis x. tagastab xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,est_Latn,python,"

def sort_third(l: list):
    """"""See funktsioon võtab nimekirja l ja annab nimekirja l' nii, et l' on identne l-ga indeksides, mis ei ole jagatavad kolmega, samas kui selle väärtused indeksides, mis on jagatavad kolmega, on võrdsed vastavate l-i indekside väärtustega, kuid sorteeritud. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,est_Latn,python,"

def unique(l: list):
    """"""Tagastab sorteeritud unikaalsed elemendid loendis >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,est_Latn,python,"

def max_element(l: list):
    """"""Tagastab nimekirja maksimaalse elemendi. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,est_Latn,python,"

def fizz_buzz(n: int):
    """"""Tagastab numbri 7 esinemissageduse täisarvude hulgas, mis on väiksemad kui n ja jaguvad 11 või 13 arvuga. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,est_Latn,python,"

def sort_even(l: list):
    """"""See funktsioon võtab nimekirja l ja annab nimekirja l' nii, et l' on identsed l-le paarsete indeksite puhul, samas kui selle väärtused paarete indeksite puhul on võrdsed l-i paarete indeksite väärtustega, kuid sorteeritud. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,est_Latn,python,"

def encode_cyclic(s: str):
    """"""võtab sisendiks funktsiooni encode_cyclic kooditud stringi. Tagastab dekodeeritud stringi. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""tagastab kodeeritud string kolme tähemärgi tsükligrupite järgi. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,est_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib tagastab n-nda numbri, mis on Fibonacci number ja see on ka algarv. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,est_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero võtab sisendina teraste nimekirja. See annab tulemuse True, kui nimekirjas on kolm erinevat elementi, mille summa on null, ja False muidu. >>> triples_sum_to_zero (([1, 3, 5, 0]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,est_Latn,python,"

def car_race_collision(n: int):
    """"""Kujutage ette, et tee on lõpmatult sirge. n autot sõidavad vasakult paremale; samal ajal sõidavad n autot paremale vasakule. Kaks autot algavad üksteisest väga kaugel. Kõik autod liiguvad sama kiirusega. Kaks autot ütlevad, et kokkupõrge toimub siis, kui vasakult paremale liikuv auto lööb paremale vasakule liikuvat autot. Kuid autod on lõpmatult tugevad ja tugevad; tulemusena liiguvad nad oma trajektoori, nagu nad ei oleks kokkupõrgenud. See funktsioon väljendab selliste kokkupõrgede arvu.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,est_Latn,python,"

def incr_list(l: list):
    """"""Tagastab nimekirja, mille elemendid on suurendatud 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,est_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero võtab sisendina tervete arvide nimekirja. See annab tulemuse True, kui nimekirjas on kaks erinevat elementi, mille summa on null, ja False muidu. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,est_Latn,python,"

def change_base(x: int, base: int):
    """"""Muuda sisendnumbri x numbriline alus aluseks. tagastage string esindatus pärast ümberkujundamist. alusarvud on väiksemad kui 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,est_Latn,python,"

def triangle_area(a, h):
    """"""Triangli külje pikkus ja suur pöörde pindala. >>> triangel_pindala ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,est_Latn,python,"

def fib4(n: int):
    """"""Fib4 numbrijärjekord on sarnane Fibbonacci järjekorrale, mis on määratletud järgmiselt: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Palun kirjuta funktsioon, et arvutada fib4 numbrijärjekorra n-s element. Ärge kasutage rekurentsi. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,est_Latn,python,"

def median(l: list):
    """"""Loendi elementide tagastamise mediaan l. >>> mediaan (([3, 1, 2, 4, 5]) 3 >>> mediaan (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,est_Latn,python,"

def is_palindrome(text: str):
    """"""Kontrollib, kas antud string on palindroom >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,est_Latn,python,"

def modp(n: int, p: int):
    """"""Tagasta 2^n modulo p (ole numbrite suhtes teadlik). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,est_Latn,python,"

def encode_shift(s: str):
    """"""võtab sisendiks funktsiooni encode_shift abil kodeeritud stringi. Tagastab dekodeeritud stringi. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""tagastab kodeeritud string, liigutades iga tähemärki 5 võrra. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,est_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels on funktsioon, mis võtab string ja tagastab string ilma vokaalidega. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') ' ' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,est_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Tagastab vale, kui kõik loendis l olevad numbrid on allpool künnist t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,est_Latn,python,"

def add(x: int, y: int):
    """"""Lisage kaks numbrit x ja y >>> lisage ((2, 3) 5 >>> lisage ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,est_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Kontrollige, kas kahel sõnal on samad tähed. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Tõsi >>> same_chars (('abcd', 'dddddddabc') Tõsi >>> same_chars (('dddddddabc', 'abcd') Tõsi >>> same_chars (('eabcd', 'dddddddddabc') Vale >>> same_chars ((('abcd', 'dddddddabddce') Vale >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Vale """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,est_Latn,python,"

def fib(n: int):
    """"""Tagastab n-nda Fibonacci numbri. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,est_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets on string ""<"" ja "">"". return True kui iga avamise bracket on vastav sulgemise bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,est_Latn,python,"

def monotonic(l: list):
    """"""Tagastab True, kui loendi elemendid suurenevad või vähenevad monotooniliselt. >>> monotooniline (([1, 2, 4, 20]) True >>> monotooniline (([1, 20, 4, 10]) False >>> monotooniline (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,est_Latn,python,"

def common(l1: list, l2: list):
    """"""Tagastab sorteeritud ainulaadse ühise elemendi kahe loendi jaoks. >>> ühine (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> ühine (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,est_Latn,python,"

def largest_prime_factor(n: int):
    """"""Tagastage suurim algarf n. Oletame, et n > 1 ei ole algarf. >>> suurim algarf ((13195) 29 >>> suurim algarf ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,est_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n on funktsioon, mis summeerib numbreid 1 kuni n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,est_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets on string ""("" ja "")"". return True kui iga avamise bracket on vastav sulgemise bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,est_Latn,python,"

def derivative(xs: list):
    """"""xs esindavad polünoomi koefitsiente. xs[0] + xs[1] * x + xs[2] * x^2 + .... Tagastage polünoomi tuletis samas vormis. >>> tuletis (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> tuletis ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,est_Latn,python,"

def fibfib(n: int):
    """"""FibFib arvukorraldus on sarnane Fibbonacci järjekorrale, mida defineeritakse järgmiselt: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Kirjutage funktsioon, et tõhusalt arvutada fibfib arvukorraldus n-s element. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,est_Latn,python,"
FIX = """"""Kirjuta funktsioon vowels_count, mis võtab sisendina sõnumi esindava stringi ja annab stringi häälleheliste arvu. Sel juhul on häällehelised 'a', 'e', 'i', 'o', 'u'. Siin on 'y' ka häällehel, kuid ainult siis, kui see on antud sõna lõpus. Näide: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Lisage rohkem katsetusi. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,est_Latn,python,"
def circular_shift(x, shift):
    """"""Circular shift täisarvu x numbrid, liiguta numbreid paremale liigutades ja tagastage tulemus stringi kujul. Kui shift > numbritest, tagastage numbrid ümber. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,est_Latn,python,"
def digitSum(s):
    """"""Tehing Kirjuta funktsioon, mis võtab sissevooluna rea ja annab tagasi ainult ülemiste tähemärkide summa' ASCII koode. Näited: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,est_Latn,python,"
def fruit_distribution(s,n):
    """"""Selle ülesande puhul antakse teile string, mis esindab õunude ja apelsinide arvu, mis on jaotatud puuviljakorvi selles korvis on õunad, apelsinid ja mango puuviljad. Arvestades string, mis esindab apelsinide ja õunade koguarvu ja tervik, mis esindab korvi puuviljade koguarvu, tagastage korvi mango puuviljade arv. näiteks: fruit_distribution""5(õunad ja 6 apelsini"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 õunad ja 1 apelsin"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 õunad ja 3 apelsinid"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 õunad ja 1 apelsin"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,est_Latn,python,"
def pluck(arr):
    """"""""Antud array, mis esindab puu haru, millel on mitte-negatiivsed terved sõlmed, on teie ülesanne on valida üks sõlmed ja tagastada see. Võttud sõlm peaks olema sõlm, millel on kõige väiksem paarväärtus. Kui leidub mitu sõlmi, millel on sama kõige väiksem paarväärtus, tagastage sõlm, millel on kõige väiksem indeks. Võttud sõlm tuleks tagastada nimekirjas, [small_value, selle indeks ], Kui puudub paarväärtused või antud array on tühi, tagastage []. Näide 1: Sissepääs: [4,2,3] Väljaanne: [2, 1] Selgitus: 2 on kõige väiksem paarväärtus ja 2 on kõige väiksem indeks. Näide 2: Sissepääs: [1,2,3] Väljaanne: [2, 1] Selgitus: 2 on kõige väiksem väärtus ja 2 on kõige väiksem paarväärtus. Näide 3: Sissepääs: [] Väljaanne: [4:] Sissepääs: [5, 3, 4, 2] Väljaanne: [0, 0] Sissepääs: 1 kõige väiksem sõlm, kuid indeks on null. Näide: * = 1 * * * * Null, kuid kõige väiksem väärtus on null, kuid on <= 10000 * Null.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,est_Latn,python,"
def search(lst):
    '''Saate mitte-tühi nimekirja positiivsetest tervikarvudest. Tagastage suurim tervik, mis on suurem kui null ja mille sagedus on suurem või võrdne tervikarvu väärtusega. Tervikarvu sagedus on selle esinemissagedus nimekirjas. Kui sellist väärtust ei ole, tagastage -1. Näited: otsida: [4, 1, 2, 2, 3, 1]) == 2 otsida: [1, 2, 2, 3, 3, 3, 4, 4]) == 3 otsida: [5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,est_Latn,python,"
def strange_sort_list(lst):
    '''Võõras sortimine on see, kui alustad minimaalse väärtusega, siis ülejäänud täisarvude maksimaalse väärtusega, siis minimaalsega jne. Näited: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,est_Latn,python,"
def triangle_area(a, b, c):
    '''Kui triangel on kolm külge, siis on triangel kolm külge, mis moodustavad triangli. Kui triangel on kolm külge, siis on triangel kolm külge. Kui triangel on kolm külge, siis on triangel kolm külge.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,est_Latn,python,"
def will_it_fly(q,w):
    '''Kirjuta funktsioon, mis annab tagasiside True, kui objekt q lendab, ja False muidu. Objekt q lendab, kui see on tasakaalustatud (see on palindroomne nimekiri) ja selle elementide summa on väiksem või võrdne maksimaalse võimaliku kaaluga w. Näide: will_it_fly (([1, 2], 5) â -> False # 1+2 on väiksem kui maksimaalne võimalik kaal, kuid see on tasakaalustamata. will_it_fly (([3, 2, 3], 1) â -> False # see on tasakaalustatud, kuid 3+2+3 on rohkem kui maksimaalne võimalik kaal. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 on väiksem kui maksimaalne võimalik kaal ja see on tasakaalustatud. will_it_fly ((([3], â 5) -> True # 3 on väiksem kui maksimaalne võimalik kaal ja see on tasakaalustatud.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,est_Latn,python,"
def smallest_change(arr):
    """"""Array on array, mille puhul on vaja muuta minimaalne arv elemente, et muuta array palindroomne. Palindroomne array on array, mis loeb sama edasi-tagasi. Ühes muutuses saab ühe elemendi muuta mis tahes teise elemendile. Näiteks: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,est_Latn,python,"
def total_match(lst1, lst2):
    '''Kirjuta funktsioon, mis võtab vastu kaks stringi ja annab tagasi selle, mille stringi tegelastega on sama palju kui teise stringi tegelastega. Kui mõlemal listil on sama palju tegelastega, tagastab ta esimese. Näiteks total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,est_Latn,python,"
def is_multiply_prime(a):
    """"""Kirjuta funktsioon, mis annab vale, kui antud number on 3 algarvu korrutamine ja vale muidu. Teades, et (a) on väiksem kui 100. Näide: on_korrutada_algatuslik ((30) == Tõsi 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,est_Latn,python,"
def is_simple_power(x, n):
    """"""Teie ülesanne on kirjutada funktsioon, mis annab vale, kui number x on n lihtne võimsus ja vale muudes juhtudel. x on n lihtne võimsus, kui n**int=x Näiteks: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,est_Latn,python,"
def iscube(a):
    '''Kirjuta funktsioon, mis võtab terake a ja annab tagasiside True, kui see ingeger on mingi terake arvu kuubik. Märkus: võite eeldada, et sisend on alati kehtiv. Näited: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,est_Latn,python,"
def hex_key(num):
    """"""Teid on kutsutud üles kirjutama funktsiooni, mis võtab kuuskümmendakümne numbri rida ja loeb kuuskümne numbri numbreid, mis on algarvud (algarv on naturaalne arv, mis on suurem kui 1 ja ei ole kahe väiksemate naturaalsete numbrite korrutis). Kuuskümne numbri numbrid on 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Algarvnumbrid on 2, 3, 5, 7, 11, 13, 17,... Seega peate määrama järgmise numbri numbri: 2, 3, 5, 7, B (= kümnendakümne 11), D (= kümnendakümne 13). Märkus: võite eeldada, et sisend on alati õige või tühi rida ja sümbolid A,B,C,D,E,F on alati suurte tähtedega. Näited: Num = AB, väljund peaks olema num = 1. Num = 1077E, väljund peaks olema 2. Num = AB331ED, arv peaks olema 4.1289ABC, arv peaks olema 6.045DEF, väljund peaks olema 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,est_Latn,python,"
def decimal_to_binary(decimal):
    """"""Funktsioon peaks tagastama string, kus iga tähis esindab binaarset numbrit. Iga tähis on ""0"" või ""1"". Stringi alguses ja lõpus on lisapärased tähed ""db"". Lisatähesed on olemas, et aidata formaadis. Näited: decimal_to_binary(15) # tagastab ""db1111db"" decimal_to_binary32) # tagastab ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,est_Latn,python,"
def is_happy(s):
    """"""Saad korduva rida s. Sinu ülesanne on kontrollida, kas rida on õnnelik või mitte. Rida on õnnelik, kui selle pikkus on vähemalt 3 ja iga 3 järjestikust kirja on erinevad Näiteks: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,est_Latn,python,"
def numerical_letter_grade(grades):
    """"""See on semestri viimane nädal ja õpetaja peab andma õpilastele hindeid. Õpetaja on teinud oma hinnangute algoritmi. Ainus probleem on see, et ta on kaotanud koodi, mida ta hindamiseks kasutas. Ta on andnud teile mõne õpilase GPAde nimekirja ja peate kirjutama funktsiooni, mis saab väljendada kirja hindeid, kasutades järgmist tabelit: GPA. Kirja hinde 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: näide: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,est_Latn,python,"
def prime_length(string):
    """"""Kirjuta funktsioon, mis võtab rea ja annab tagasiside True, kui rea pikkus on algarv või False muidu Näited prime_length{""hello"") == True prime_length{""abcdcba"") == True prime_length{""kittens"") == True prime_length{""orange"") == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,est_Latn,python,"
def starts_one_ends(n):
    """"""Andes positiivse terviku n, tagasta n-kohaliste positiivsete tervikloomade arvu, mis algavad või lõpevad numbriga 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,est_Latn,python,"
def solve(N):
    """"""Kui on antud positiivne tervikarv N, siis tagastage selle numbritest kahearvulise numbri kogusumma. Näide N = 1000 puhul on numbritest 1 väljastusväärtus ""1"". N = 150 puhul on numbritest 6 väljastusväärtus ""110"". N = 147 puhul on numbritest 12 väljastusväärtus ""1100"". Muutujad: @N tervikarv Piirangud: 0 â‰¤ N â‰¤ 10000. Väljastusväärtus: kahekordse numbri string """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,est_Latn,python,"
def add(lst):
    """"""Kui on antud mittetulge teraste nimekirja, siis lisage kõigepealt paarsed elemendid, mis on paarsed indeksid.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,est_Latn,python,"
def anti_shuffle(s):
    """"""Kirjuta funktsioon, mis võtab rea ja annab selle korrastatud versiooni. Korrastatud rea versioon on rea, kus kõik sõnad (väljaolekuga eraldatud) asendatakse uue sõnaga, kus kõik tähemärgid on järjestatud ascii väärtuse alusel. Märkus: Sa peaksid hoidma sõnade ja tühjade ruumide järjekorda lauses. Näiteks: anti_shuffle ((('Hi') tagastab ""Hi' anti_shuffle ((('hello') tagastab ""ehllo' anti_shuffle (('Hello World!!!') tagastab ""Hello !!!Wdlor"" """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,est_Latn,python,"
def get_row(lst, x):
    """"""Saate 2-dimensionaalse andmete, nagu ümbritsevad nimekirjad, mis on sarnane maatriks, kuid erinevalt maatriksidest võib iga rida sisaldada erinevat arvu veerge. Andes lst ja tervik x, leidke nimekirjas terved x ja tagastage tuplite nimekiri, [(x1, y1), (x2, y2) ...] nii et iga tuple on koordinaat - (rivi, veerge), alustades 0 . Sorteerige koordinaadid algselt ridade järgi tõusvas järjekorras. Samuti sorteerige rida koordinaadid veergude järgi langusjärjekorras. Näited: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (2, 5), (2, 0), get_(1), [] == [0, 1, 2, 3, 2] == [2, 2] """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,est_Latn,python,"
def sort_array(array):
    """"""Kui on antud mittekujuliste tervikarvude array, tagastage pärast sorteerimist antud array koopia, sorteerite antud array ülespoole, kui summa ((esimene indeksväärtus, viimane indeksväärtus) on paaris, või sorteerite selle allapoole, kui summa ((esimene indeksväärtus, viimane indeksväärtus) on paaris. Märkus: * ärge muutke antud array. Näited: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,est_Latn,python,"
def encrypt(s):
    """"""Looge funktsioon encrypt, mis võtab string'i argumendina ja annab tagasi krüpteeritud string'i koos tähestikku pööratava. Tähestikku tuleks pöörata nii, et tähed liiguksid kaks korda kaks kohta. Näiteks: encrypt('hi') annab tagasi 'lm' encrypt('asdfghjkl') annab tagasi 'ewhjklnop' encrypt('gf') annab tagasi 'kj' encrypt('et') annab tagasi 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,est_Latn,python,"
def next_smallest(lst):
    """"""Saad tervearvude loendi. Kirjuta funktsioon next_smallest ((), mis tagastab loendi teise väikseima elemendi. Tagastab null, kui sellist elementi ei ole. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == Ei ole next_smallest (([1, 1]) == Ei ole """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,est_Latn,python,"
def is_bored(S):
    """"""Sõnade rida ja sinu ülesanne on lugeda igavuste arvu. Igavus on lause, mis algab sõnaga ""I"". Laused piiritakse sõnadega """"., ""?' või ""!"". Näiteks: >>> on_ igav ((""Tere maailm"") 0 >>> on_ igav ((""Taevake on sinine. Päike paistab. Mulle meeldib see ilm"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,est_Latn,python,"
def any_int(x, y, z):
    '''Looge funktsioon, mis võtab vastu 3 numbrit. Tagastab tõde, kui üks arv on võrdne kahe teise summaga ja kõik numbrid on täisarvud. Tagastab vale mis tahes muudes juhtudel. Näited any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,est_Latn,python,"
def encode(message):
    """"""Kirjuta funktsioon, mis võtab sõnumi ja kodeerib nii, et see vahetab kõigi tähtede suurusmärki, asendab sõnumi kõik vokaalid kirjaga, mis esineb inglise tähestikku 2 kohta eespool seda vokaali. Oletame ainult tähted. Näited: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,est_Latn,python,"

def skjkasdkd(lst):
    """"""Saate tervearvude loendi. Saate leida suurima algarvu ja anda selle numbrite summa. Näiteks: Kui lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] peaks tulemuseks olema 10 Kui lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] peaks tulemuseks olema 25 Kui lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] peaks tulemuseks olema 13 Kui lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] peaks tulemuseks olema 11 Kui lst = [0,81,12,31,21] peaks tulemuseks olema 3 Kui lst = [1,8,1,2,7] peaks tulemuseks olema 7 Kui lst = [1,8,1,2,7] peaks tulemuseks olema 10 Kui lst = [0,1,1,2,2,7] peaks tulemuseks olema 10,81,72,82,83,83,93,93,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,9""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,est_Latn,python,"
def check_dict_case(dict):
    """"""Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus: Vastus""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,est_Latn,python,"
def count_up_to(n):
    """"""Rakendada funktsiooni, mis võtab mittesegatiivse terviku ja annab tagasi n-st väiksemate algarvude n-i massiiv. Näiteks: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,est_Latn,python,"
def multiply(a, b):
    """"""Täitke funktsioon, mis võtab kaks täisarvu ja annab tagasi nende ühiku numbri korrutise. Oletame, et sisend on alati kehtiv. Näited: korrutada 148, 412) peaks andma 16, korrutada 19 28 peaks andma 72. korrutada 2020 1851) peaks andma 0, korrutada 14-15 peaks andma 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,est_Latn,python,"
def count_upper(s):
    """"""Andes string s, loenda suurte häälte arvu paarisindeksis. Näiteks: count_upper (('aBCdEf') tagastab 1 count_upper (('abcdefg') tagastab 0 count_upper (('dBBE') tagastab 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,est_Latn,python,"
def closest_integer(value):
    '''Looge funktsioon, mis võtab numbri esindava väärtuse (stringi) ja annab sellele lähima terviku. Kui number on võrdse kaugusega kahest tervikust, ümardake see nullist eemale. Näited >>> lähim_tervik (((""10"") 10 >>> lähim_tervik (((""15.3"") 15 Märkus: nullist eemale ümardamine tähendab, et kui antud number on võrdse kaugusega kahest tervikust, siis tuleb tagastada see, mis on nullist kaugemal. Näiteks lähim_tervik (((14.5"") peaks tagastama 15 ja lähim_tervik (((-14.5"") peaks tagastama -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,est_Latn,python,"
def make_a_pile(n):
    """"""Kui on antud positiivne täisarv n, siis tuleb teha n kiviastme kivi. Esimese taseme kivid on n. Järgmise taseme kivide arv on: - järgmine paaritu number, kui n on paaritu. - järgmine paarne number, kui n on paaritu. Tagastage iga taseme kivide arv loendis, kus element indeksi i juures esindab kivide arvu tasemel (i+1). Näited: >>> make_a_pile (n) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,est_Latn,python,"
def words_string(s):
    """"""Saad sõnade rea, mis on eraldatud virgula või vahemaaga. Sinu ülesanne on jagada rea sõnadeks ja tagastada sõnade seeriaks. Näiteks: words_string ((""Tere, minu nimi on John"") == [""Tere"", ""minu"", ""nimi"", ""on"", ""John""] words_string ((""üks, kaks, kolm, neli, viis, kuus"") == [""Üks"", ""kaks"", ""kolm"", ""neli"", ""viis"", ""kuus""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,est_Latn,python,"
def choose_num(x, y):
    """"""See funktsioon võtab kaks positiivset numbrit x ja y ja annab tagasi suurima paari täisarvu, mis on vahemikus [x, y] kaasa arvatud. Kui sellist numbrit ei ole, siis peaks funktsioon tagastama -1. Näiteks: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,est_Latn,python,"
def rounded_avg(n, m):
    """"""Saad kaks positiivset tervikarvu n ja m, ja sinu ülesanne on arvutada n-st m-ni (sealhulgas n ja m) keskmine tervikarv. Kella vastus lähima tervikarvuni ja muuta see binaarseks. Kui n on suurem kui m, tagasta -1. Näide: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b11"" rounded_avg(20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,est_Latn,python,"
def unique_digits(x):
    """"""Kui lisada positiivsed terved arvud x, siis tagastatakse kõigi elemendite sorteeritud loetelu, millel pole ühtki paari numbrit. Märkus: tagastatud loetelu tuleks sorteerida järjestuselt. Näiteks: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,est_Latn,python,"
def by_length(arr):
    """"""Andes tervearvu, sorteerige 1 ja 9 vahelised täisarved, pöörake tulemuseks olev massiiv ümber ja asendage iga numbri vastava nimega ""üks"", ""kaks"", ""kolm"", ""neli"", ""viis"", ""kuus"", ""seitse"", ""seitse"", ""kaheksa"", ""üheksa"". Näiteks: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sorteerige arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> tagurpidi arr -> [8, 5, 4, 3, 2, 2, 1, 1] tagastage [""kaheksa"", ""neli"", ""kaks"", ""kaks"", ""kaks"", ""üks""] Kui massiiv on tühi, tagastage tühi: arr = [] tagastage [] Kui massiivil on mõni kummaline number, ignoreerige seda: sorteerige arr = [1, 1 , 55 -> arr -> [1, 1 , 55 -> arr -> [55, 1] tagurpidi arr = ['One'] tagastage ['One'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,est_Latn,python,"
def f(n):
    """"""Rakenda funktsiooni f, mis võtab n parameetrina ja annab tagasi n suuruse nimekirja, nii et elemendi väärtus indeksi i juures on i faktoriil, kui i on paaris või muidu 1i ja i vaheliste numbrite summa. i algab 1. i faktoriil on 1i ja i vaheliste numbrite korrutamine (1 * 2 * ... * i). Näide: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,est_Latn,python,"
def even_odd_palindrome(n):
    """"""Kui on antud positiivne tervikloom n, tagastage tuple, millel on paari ja paarisarvu palindroomide arv, mis kuuluvad vahemikku ((1, n), kaasa arvatud. Näide1: Sissepääs: 3 Saade: (1, 2) Selgitus: tervikpalindroomid on 1, 2, 3. üks neist on paarisarvu ja kaks neist on paarisarvu. Näide2: Sissepääs: 12 Saade: (4, 6) Selgitus: tervikpalindroomid on 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Neli neist on paarsarvad ja 6 neist on paarisarvad. Märkus: 1. 1 <= n <= 10^3 2. tuple on tagastatud paarisarvu ja paarisarvarda palindroomide arv vastavalt. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,est_Latn,python,"
def count_nums(arr):
    """"""Kirjuta funktsioon count_nums, mis võtab tervikarvu ja annab tagasi elementide arvu, mille numbrite summa on > 0. Kui number on negatiivne, siis on selle esimene allkirjastatud number negatiivne: nt -123 on allkirjastatud numbrid -1, 2 ja 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,est_Latn,python,"
def move_one_ball(arr):
    """"""Meil on array 'arr' N täisarvud arr[1], arr[2], ..., arr[N].Array numbrid on juhuslikult järjestatud. Teie ülesanne on määrata, kas on võimalik saada array sortitud mitte-vähenduv järjekorras, tehes järgnevat toimingut antud array: Saate teha paremale nihke toiming mis tahes arv kordi. Üks paremale nihke toiming tähendab kõik elemendid array ühe positsiooni õiges suunas. Viimane element array liigub algkohale array ehk 0th indeks. Kui on võimalik saada sortitud array tehes eespool toimingut siis tagastada True muidu tagastada False. Kui antud array on tühi siis tagastada True. Märkus: antud nimekiri on garanteeritud, et on unikaalsed elemendid. Näiteks: move_one{(ball_[3,4,5,5,2>True selgitus: Perfumeerimine: 2min paremale operatsioonid, mitte-vähendu võib saavutada array.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,est_Latn,python,"
def exchange(lst1, lst2):
    """"""Selles probleemis rakendate funktsiooni, mis võtab kaks loendit numbreid ja määrab, kas nende vahel on võimalik elemendid vahetada, et lst1 oleks ainult paarsummad. Lst1 ja lst2 vahel ei ole vahetatavate elementide arvu piirangut. Kui on võimalik lst1 ja lst2 vahel elemendid vahetada, et lst1 kõik elemendid oleksid paarsummad, siis tagasta ""JÄR"". Muidu tagasta ""MÄR"". Näiteks: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""JÄR"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""MÄR"" Oletatakse, et sisendite loendid ei ole tühjad. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,est_Latn,python,"
def histogram(test):
    """"""Kui on antud string, mis esindab ruumidega eraldatud väikeseid tähte, tagastage kõige rohkem korduvate tähemärkide sõnaraamat, mis sisaldab vastavat arvu. Kui mitmel tähel on sama esinemine, tagastage kõik need. Näide: histogramm ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogramm ((('a b b a') == {'a': 2, 'b': 2} histogramm ((('a b c a b') == {'a': 2, 'b': 2} histogramm ((('b b a') == {'b 4}: histogramm (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,est_Latn,python,"
def reverse_delete(s,c):
    """"""Tehing Meile on antud kaks stringit s ja c, sa pead kustutama kõik s-i tähemärgid, mis on võrdsed c-i mis tahes tähemärgiga, siis kontrollima, kas tulemuse string on palindroomne. Stringi nimetatakse palindroomne, kui see loeb sama tagurpidi kui edasi. Sa peaksid tagastama tulemuse stringit ja tõsi/vale kontrollimiseks. Näiteks kui s = ""abcde"", c = ""ae"", peaks tulemus olema ('bcd', vale) kui s = ""abcdef"", c = ""b"", peaks tulemus olema ('acdef', vale) kui s = ""abcdedcba"", c = ""ab"", peaks tulemus olema ('cdedc', tõsi)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,est_Latn,python,"
def odd_count(lst):
    """"""Kui on antud stringide nimekiri, kus iga string koosneb ainult numbritest, tagastage nimekiri. Iga väljund i-element peaks olema ""i-elemente i-s stringis"". kus kõik i-d tuleks asendada i-s stringis olevate paarsete numbrite arvuga. >>> odd_count['1234567']) [""paarsete elementide arv 4n 4n-i str4ng.""] >>> odd_count['3',""111111""]) [""paarsete elementide arv 1n 1n 1n 1n 1n 1n"", ""paarsete elementide arv 8n 8n 8n 8n.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,est_Latn,python,"
def minSubArraySum(nums):
    """"""Andes tervearvu n-arve, leia n-arve mitte-tühje alamarve miinimum summa. Näide minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,est_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Saad ristkülikukujulise kaevade võrgustikku. Iga rida esindab ühte kaevust ja iga rida 1 esindab ühte veeühikut. Iga kaevul on vastav ämber, mida saab kasutada veega ekstraheerimiseks, ja kõik ämbrid on sama mahutavusega. Sinu ülesanne on kasutada ämbrid, et tühjendada kaevud. Tooge välja, mitu korda peate kaevud alla laskma. Näide 1: Sissepääs: võrgustik: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] ämber_võimsus: 1 Toode: 6 Näide 2: Sissepääs: võrgustik: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] ämber_võimsus: 2 Toode: 5 Näide 3: Sissepääs: [[:0,0,0], [0,0,0]] ämber_võimsus: 5 Toode
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,est_Latn,python,"
def sort_array(arr):
    """"""Selles Kata-s tuleb sorteerida mittekujuliste tervikarvude massiiv vastavalt nende binaarses esinduses olevate üksikute arvule tõusvas järjekorras. Sarnaste üksikute arvule sorteerida kümnendväärtuse alusel. Seda tuleb rakendada järgmiselt: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,est_Latn,python,"
def select_words(s, n):
    """"""Kui on antud string s ja naturaalne number n, on teil ülesanne rakendada funktsiooni, mis tagastab nimekirja kõik sõnadest string s, mis sisaldavad täpselt n konsonanti, et need sõnad ilmuksid string s. Kui string s on tühi, siis funktsioon peaks tagastama tühja nimekirja. Märkus: võite eeldada, et sisendjoon sisaldab ainult tähte ja vahekaarte. Näiteks: select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,est_Latn,python,"
def get_closest_vowel(word):
    """"""Saad sõna. Sinu ülesanne on leida kõige lähemal olev hääl, mis seisab kahe konsonandi vahel sõna paremalt küljest (kooskõlasõna). Algusel ja lõpus olevad hääl ei arvestata. Tagasta tühi string, kui sa ei leidnud ülaltoodud tingimustele vastavat häält. Sa võid eeldada, et antud string sisaldab ainult inglise kirja. Näiteks: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,est_Latn,python,"
def match_parens(lst):
    '''S-i stringit peetakse headeks siis ja ainult siis, kui kõik S-i paranteesid on tasakaalus. Näiteks: string '((()) ' on hea, samas kui string '()) ' ei ole. Tagastage 'Yes', kui on võimalus teha hea string, ja tagastage 'No' muidu. Näited: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,est_Latn,python,"
def maximum(arr, k):
    """"""Arvestades täisarvu arr ja positiivset täisarvu k, tagastage järjestatud nimekiri pikkusega k, kusjuures maksimaalne k arv arr. Näide1: Sissepääs: arr = [-3, -4, 5], k = 3 Väljalask: [-4, -3, 5] Näide2: Sissepääs: arr = [4, -4, 4], k = 2 Väljalask: [4, 4] Näide3: Sissepääs: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Väljalask: [2] Märkus: 1. Array pikkus on vahemikus [1, 1000]. 2. Array elemendid on vahemikus [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,est_Latn,python,"
def solution(lst):
    """"""Kui antud on mittetühi täisarvude nimekiri, tagastage kõigi paarsete elementide summa, mis on paaris asendis.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,est_Latn,python,"
def add_elements(arr, k):
    """"""Kui on antud mittetulge array täisarvud arr ja täisarv k, tagastage elementide summa, millel on kõige rohkem kaks numbrit esimesest k elementidest arr. Näide: sisend: arr = [111,21,3,4000,5,6,7,8,9], k = 4 väljund: 24 # summa 21 + 3 piirangud: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,est_Latn,python,"
def get_odd_collatz(n):
    """"""Collatzi oletus on matemaatika oletus, mis puudutab järgmisi järjekordi: alustada mis tahes positiivse terviklusega n. Siis iga termin saadakse eelmisest terminist järgmiselt: kui eelnev termin on paark, on järgmine termin pool eelmisest terminist. Kui eelnev termin on paark, on järgmine termin 3 korda eelnev termin pluss 1. Oletus on, et ükskõik millise väärtuse n, järjekord jõuab alati 1. Märkus: 1. Collatz ((1) on [1] 2. tagastatud nimekiri sorteeritud järjestus. Näiteks: get_odd_collatz ((5) annab [1, 5] # Kollatzi järjekord 5 on [5, 8, 16, 4, 2, 1], seega paarkid on ainult 1 ja 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,est_Latn,python,"
def valid_date(date):
    """"""Te peate kirjutama funktsiooni, mis valideerib antud kuupäeva string ja annab tagasiside True, kui kuupäev on kehtiv, muidu False. kuupäev on kehtiv, kui kõik järgmised reeglid on täidetud: 1. kuupäeva string ei ole tühi. 2. Päevade arv ei ole vähem kui 1 või suurem kui 31 päeva kuud 1,3,5,7,8,10,12. ja päevade arv ei ole vähem kui 1 või suurem kui 30 päeva kuud 4,6,9,11. ja päevade arv ei ole vähem kui 1 või suurem kui 29 kuu 2. 3. Kuud ei tohi olla väiksem kui 1 või suurem kui 12. 4. kuupäev peaks olema vormis: mm-dd-yyyy näiteks: valid_date (('03-11-2000') => valid_date (('15-01-2012') => False valid_date (('04-02040') => False valid_date (('06-04-2020') => True => valid_date (('06/04/2020')  => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,est_Latn,python,"
def split_words(txt):
    '''Kui on antud sõnade rida, tagastage sõnade nimekiri, mis on jagatud valgepaigast, kui tekstis pole valgepaiku, siis tuleks jagada kaardideks, kui kaardid ei ole olemas, tuleks tagastada väikeste tähtede arv, mis on alfabetis paarses järjekorras, ord ((a)) = 0, ord ((b)) = 1, ... ord ((z)) = 25 Näited split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,est_Latn,python,"
def is_sorted(lst):
    '''Kui lisasse on antud numbrid, tagastage kas need on järjestatud kasvavas järjekorras. Kui loendis on sama numbri rohkem kui üks kordus, tagastage vale. Oletame, et negatiivseid numbreid ei ole ja ainult täisarvu. Näited on_sorteeratud (**) -> Tõeline on_sorteeratud (**) -> Tõeline on_sorteeratud (**)'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,est_Latn,python,"
def intersection(interval1, interval2):
    """"""Kui intervallid on paaris täisarvu, siis tuleb tagastada ""JÄÄ"", kui ei ole, tuleb tagastada ""Ei"". [input/output] näited: lõik = ((1, 2), (2, 3) ==> ""lõik - 1"", 4) ==> ""lõik - 1"", ==> ""lõik - 5"", ==> ""lõik - 3"", (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5), (YES - 5))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,est_Latn,python,"
def prod_signs(arr):
    """"""Saad tervearvu array ja sa pead tagastama tervete arvede suuruste summa korrutatud kõigi numbri märkide toodanguga arrayis, mis on esindatud 1, -1 või 0. Märkus: tagastab tühja arvi jaoks null. Näide: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Ei """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,est_Latn,python,"
def minPath(grid, k):
    """"""Võrgus on N rida ja N veergu (N >= 2) ning iga rida k sisaldab väärtust. Iga täisarv vahemikus [1, N * N] (sealhulgas) ilmub võrgu rakkudes täpselt üks kord. Sa pead leidma minimaalse tee pikkusega k võrgus. Sa võid alustada mis tahes rakust ja igal sammul liikuda ükskõik millistele naaberrakkudele, teisisõnu, sa võid minna rakkudesse, mis jagavad sinu praeguse rakuga serva. Pange tähele, et k pikkuse tee tähendab täpselt k rakkude külastamist (mitte tingimata eristatavaid). Sa ei saa minna võrgus. Teed A (k pikkus) loetakse väiksemaks kui tee B (k pikkus) kui pärast A ja B läbivad rakud (kutse neid l_stA ja l_stB), on l_stA leksikaliselt väiksem kui l_stB, teisisõnu, iga rida on üksik, see on iga rida läbiviimise korral, näiteks: [1, 2, 4, 5, 6, 6, 7] [1, 1], [2, 1], [1, 2] [1, 2], [2, 1[1, 2], [2, 3] [4, [8, [9, ] [9, [9, [9, ] [9, [9, [9, ] [9, [9, ] [9, [9, ] [9, [1, ] [1, ] [1, [1, ] [1, ] [1, [2, ] [1, ] [1, [2, ] [1, ] [1, ] [2, ] [1, [1, ] [2, ] [1, ] [2, ] [1, [1, ] [2, ] [1, ] [2, ] [1, ] [2, ] [1, [2, ] [1, ] [2, ] [1, ] [2, ] [2, ] [2, ] [3, ]""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,est_Latn,python,"
def tri(n):
    """"""Kõik teavad Fibonacci järjekorda, seda on matemaatikud viimase paari sajandi jooksul põhjalikult uurinud. Kuid mida inimesed ei tea, on Tribonacci järjekord. Tribonacci järjekord on määratletud korduvuse järgi: tri(1) = 3 tri(n) = 1 + n / 2, kui n on paaris. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), kui n on paaris. Näiteks: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Teile antakse mittekonegatiivne tervene arv n, te peate Tribonacci järjekorra esimeste n + 1 numbrite nimekirja tagasi saatma. Näited: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,est_Latn,python,"
def digits(n):
    """"""Kui antud on positiivne täisarv n, tagastage paarsumbrite korrutis. Tagastage 0 kui kõik numbrid on paarsumbrid. Näiteks: numbrid ((1) == 1 numbrit ((4) == 0 numbrit ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,est_Latn,python,"
def is_nested(string):
    '''Looge funktsioon, mis võtab sisendina rida, mis sisaldab ainult ruudukujulised sulgused. Funktsioon peaks tagastama tõene, kui ja ainult siis, kui on olemas kehtiv sulgete järjekord, kus vähemalt üks sulg on sisseehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud. on_ehitatud.'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,est_Latn,python,"

def sum_squares(lst):
    """"""Te saate numbrite loendi. Te peate andmise loendis tagasi saama ruutväärtuse summat, ümardades iga elemendi nimekirjas kõigepealt ülemisele int ((Tehas). Näited: For lst = [1,2,3] väljund peaks olema 14 For lst = [1,4,9] väljund peaks olema 98 For lst = [1,3,5,7] väljund peaks olema 84 For lst = [1.4,4.2,0] väljund peaks olema 29 For lst = [-2.4,1,1] väljund peaks olema 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,est_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Looge funktsioon, mis tagastab True, kui antud string'i viimane tähestik on tähestik ja ei ole sõna osa, ja False muidu. Märkus: ""sõna"" on tähete grupp, mis on eraldatud ruumidega. Näited: check_if_last_char_is_a_letter"" ({{lang-en_check_if_last_char_is_a_letter}}) â -> False check_if_last_char_is_a_letter"" ({{lang-en_apple pi e}}) â -> True check_if_last_char_is_a_letter}}) â -> False check_if_last_char_is_a_letter"" ({{lang-en_apple pi e}}) â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,est_Latn,python,"
def can_arrange(arr):
    """"""Looge funktsioon, mis tagastab elemendi suurima indeksi, mis ei ole suurem ega võrdne vahetult selle eelneva elemendiga. Kui sellist elementi ei ole, tagastab -1. Andetud mastaab ei sisalda dubleeritud väärtusi. Näited: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,est_Latn,python,"
def largest_smallest_integers(lst):
    '''Looge funktsioon, mis tagastab tuple (a, b), kus a on suurim negatiivsed terved ja b on väikseim positiivsed terved loendis. Kui puudub negatiivsed või positiivsed terved, tagastab need kui None. Näited: suurimaid_väikseid_terved[2, 4, 1, 3, 5, 7]) == (Ei ole, 1) suurimaid_väikseid_terved[]) == (Ei ole, Ei ole) suurimaid_väikseid_terved[0]) == (Ei ole, Ei ole) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,est_Latn,python,"
def compare_one(a, b):
    """"""Looge funktsioon, mis võtab täisarvu, float'id või reaalsete arvide nimekirja ja annab suurema muutuja tagastuse. Tagastab null, kui väärtused on võrdsed. Märkus: kui reaalne arv on esitatud stringina, võib ujuvpunkt olla . või , compare_one{1,2,5} -> 2.5{1,2,3}) -> ""2,3""{1,5,1}"",{6} -> ""6""{1,1},{1}) -> null """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,est_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Hinnake, kas antud number n saab kirjutada täpselt 4 positiivse paari numbri summa näidis on_sama_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne_võrdne""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,est_Latn,python,"
def special_factorial(n):
    """"""Brasiilia faktorial on määratletud kui: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! kus n > 0 Näiteks: >>> special_factorial ((4) 288 Funktsioon saab sisendina terake ja peaks tagastama selle terake erifaktoriali. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,est_Latn,python,"
def fix_spaces(text):
    """"""_ Näide-3 on antud, asendatakse kõik ruumid allkirjaga ja kui stringis on rohkem kui 2 järjestikust ruumi, asendatakse kõik järjestikused ruumid - fix_spaces (((""Example"") == ""Example"" fix_spaces (((""Example1"") == ""Example_1"" fix_spaces (((""Example2"") == ""_Example_2"" fix_spaces (((""Example 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,est_Latn,python,"
def file_name_check(file_name):
    """"""Looge funktsioon, mis võtab faili nime esindava string'i ja annab tagasi ""Yes"", kui faili nimi on kehtiv, ja annab tagasi ""No"", kui see ei ole. Faili nimi loetakse kehtivaks ainult siis, kui kõik järgmised tingimused on täidetud: - Faili nimes ei tohi olla rohkem kui kolm numbrit ('0'-'9'). - Faili nimi sisaldab täpselt ühte punkti '.' - Alamstring enne punkti ei tohi olla tühi ja see algab ladinakeelse tähega ('a'-'z' ja 'A'Z'). - Alamstring pärast punkti peaks olema üks järgmistest: ['txt', 'exe', 'lld'] Näited: file_name_check""{(example.txt.t"") # => 'Yes' file_name_check""{(example.ll1"") => 'No' (# nimi peaks algama ladinakeelse tähega)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,est_Latn,python,"


def sum_squares(lst):
    """""""" See funktsioon võtab tervearvude loendi. Kõikide nimekirja sisendite puhul ruututab funktsioon teranumbri sisendit, kui selle indeks on 3-e korrutis, ja kuubitseb teranumbri sisendit, kui selle indeks on 4-e korrutis ja mitte 3-e korrutis. Funktsioon ei muuda nimekirja sisendit, mille indeksid ei ole 3-e või 4-e korrutis. Funktsioon tagastab siis kõikide sisendite summa. Näited: Kui lst = [1,2,3], peaks väljund olema 6 Kui lst = [], peaks väljund olema 0 Kui lst = [-1,-5,2,-1,-5], peaks väljund olema -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,est_Latn,python,"
def words_in_sentence(sentence):
    """"""Saad lause esindava rea, lause sisaldab vahemaaga eraldatud mõningaid sõnu ja sa pead tagastama rea, mis sisaldab algse lause sõnu, mille pikkused on algarvud, uue rea sõnade järjekord peaks olema sama kui algne. Näide1: Sisend: lause = ""See on test"" Saavutus: ""on"" Näide2: Sisend: lause = ""läheb ujumas"" Saavutus: ""läheb"" Piirangud: * 1 <= len(lause) <= 100 * Lause sisaldab ainult tähte """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,est_Latn,python,"
def simplify(x, n):
    """"""Teie ülesanne on rakendada funktsiooni, mis lihtsustab väljendit x * n. Funktsioon annab tagasiside True, kui x * n on tervene number ja False muidu. Nii x kui ka n on murde stringide esindamine ja neil on järgmine formaat, <numerator>/<denominator> kus nii numerator kui ka nimetaja on positiivsed terved arvud. Te võite eeldada, et x ja n on kehtivad murd ja nimetajana ei ole null. lihtsustada:""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,est_Latn,python,"
def order_by_points(nums):
    """"""Kirjuta funktsioon, mis sorteerib antud teranumbrite loendi nende numbrite summa järgi tõusvas järjekorras. Märkus: kui on mitu elementi, millel on sarnane numbrite summa, järjestage need nende indeksi alusel algses loendis. Näiteks: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,est_Latn,python,"
def specialFilter(nums):
    """"""Kirjuta funktsioon, mis võtab sisendina arvuti arvuti arvuti ja annab tagasi arvuti elementide arvu, mis on suurem kui 10 ja nii arvuti esimene kui ka viimane number on paarsed (1, 3, 5, 7, 9). Näiteks: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,est_Latn,python,"
def get_max_triples(n):
    """"""Saad positiivse terviku n. Sa pead looma tervikarvuti a pikkusega n. Iga i (1 ‰¤ i ‰¤ n) jaoks on väärtus a[i] = i * i - i + 1. Tagasta a kolmiku (a[i], a[j], a[k]) arv, kus i < j < k ja a[i] + a[j] + a[k] on 3. Näide: sisend: n = 5 väljund: 1 Selgitus: a = [1, 3, 7, 13, 21] Ainus kehtiv kolmik on (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,est_Latn,python,"
def bf(planet1, planet2):
    '''Meie Päikesesüsteemis on kaheksa planeeti: Päikesele lähim on Merkuur, järgmine on Veenus, siis Maa, Mars, Jupiter, Saturn, Uranus, Neptune. Kirjuta funktsioon, mis võtab kaks planeedi nime kui stringi planeedi1 ja planeedi2. Funktsioon peaks tagastama tuple, mis sisaldab kõiki planeete, mille orbiidid asuvad planeedi1 orbiidi ja planeedi2 orbiidi vahel, sorteeritud Päikese läheduse järgi. Funktsioon peaks tagastama tühja tuple, kui planeedi1 või planeedi2 ei ole õige planeedi nimed. Näited bf""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf(""Maa"", ""Merkuur"") ==> (""Venus"") bf(""Merkuur"", ""Uranus"") ==> (""Venus"", ""Maa"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,est_Latn,python,"
def sorted_list_sum(lst):
    """"""Kirjuta funktsioon, mis võtab parameetrina vastu stringide nimekirja, kustutab sellest paarsed pikkused ning tagastab tulemuse sortitud järjekorras. Loend on alati stringide nimekiri ja mitte kunagi arvutiarvuti ning see võib sisaldada dubleeritud andmeid. Loendi järjekord peaks olema iga sõna pikkuse järgi tõusuv ja loend tuleks tagastada vastavalt sellele reeglile. Kui kaks sõna on sama pikkusega, sorteerige loend alfabetiliselt. Funktsioon peaks tagastama stringide nimekirja sortitud järjekorras. Võite eeldada, et kõik sõnad on sama pikkused. Näiteks: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,est_Latn,python,"
def x_or_y(n, x, y):
    """"""Lihtne programm, mis peaks tagastama x väärtuse, kui n on algarv ja peaks tagastama y väärtuse muidu.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,est_Latn,python,"
def double_the_difference(lst):
    '''Kui lisasse on antud numbrid, siis tagastage nimekirja paaride numbrite ruutude summa. Eira negatiivsed või mitte terved numbrid. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Kui sisendnimekiri on tühi, tagastage 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,est_Latn,python,"
def compare(game,guess):
    """"""Ma arvan, et me kõik mäletame seda tunnet, kui mõne kaua oodatud sündmuse tulemus on lõpuks teada. Tunned ja mõtted, mis teil sel hetkel on, on kindlasti väärt märkida ja võrrelda. Teie ülesanne on kindlaks teha, kas inimene arvas õigesti tulemusi mitmetest matšidest. Teile antakse kaks võrdse pikkusega skoori ja oletusi, kus iga indeks näitab vastust. Tagastage sama pikkuse array, mis näitab, kui kaugel iga oletus oli. Kui nad on õigesti arvanud, on väärtus 0, ja kui mitte, on väärtus oletuse ja skoori absoluutne erinevus. Näiteks: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,est_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Kui teil on kaks või enam sama tugevuse laiendust, peaksite valima selle, mis on nimekirjas esimesena. Näiteks kui teile on antud klassiks ""Slice"" ja laienduste loetelu: ['SEviviSliCes', 'Cheese', 'StuFfed'], siis peaksite tagastama 'Slices.SEviSliCes' sest laiendus on tugevaim ({{Citeo:AA_Beats_class_Strongest}}, Strongest_Extension}}) (näiteks 'AA_Beats'), sest laiendus on ""AA_Class_Strongest}}"".""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,est_Latn,python,"
def cycpattern_check(a , b):
    """"""Saad 2 sõna. Sa pead tagastama True, kui teine sõna või mis tahes selle pöörlemised on esimese sõna substring cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,est_Latn,python,"
def even_odd_count(num):
    """"""Kui on antud täisarv, siis tagastab ta tupli, mis sisaldab vastavalt paari ja paarisummalisi numbreid. Näide: paarisummaline arv ((-12) ==> (1, 1) paarisummaline arv ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,est_Latn,python,"
def int_to_mini_roman(number):
    """"""Kui on antud positiivne täisarv, siis tuleb leida selle rooma numbrite ekvivalent ja see tuleb tagasi väikese tähega.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,est_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Kui triangel on kolm külge, siis on see õige, kui kolm külge moodustavad õige nurga kolmnurga, vastasel juhul on see vale.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,est_Latn,python,"
def find_max(words):
    """"""Kirjuta funktsioon, mis võtab vastu seeria loend. Loend sisaldab erinevaid sõnu. Tagastab sõna, millel on maksimaalne unikaalsete tähemärkide arv. Kui mitmel seerial on maksimaalne unikaalsete tähemärkide arv, tagastab see, mis on esimesena leksikograafilises järjekorras.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,est_Latn,python,"
def eat(number, need, remaining):
    """"""Sa oled näljane jänes ja sa oled juba söönud teatud arvu porgandid, kuid nüüd sa pead sööma rohkem porgandid täita päeva sööki. sa peaksid tagastama array [kokku söödud porgandid pärast sööki, arv porgandid jäetud pärast sööki ] kui ei ole piisavalt ülejäänud porgandid, siis sa sööd kõik ülejäänud porgandid, kuid ikka on näljane. Näide: * süüa ((5, 6, 10) -> [11, 4] * süüa ((4, 8, 9) -> [12, 1] * süüa ((1, 10, 10) -> [11, 0] * süüa ((2, 11, 5) -> [7, 0] Muutujad: @number: tervik arv porgandid, mida olete söönud. @need: tervik arv porgandid, mida sa pead sööma. @remaining: tervik arv ülejäänud porgandid, mis on olemas varude piirang: * 0 = <= 0 * 1000 = <= 1000 * ülejäänud vaja <= 1000 = <= 1000 Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,est_Latn,python,"
def do_algebra(operator, operand):
    """"""Algebril on kaks operandi: esimene on algte operatsioonide nimekiri ja teine on tervete arvede nimekiri. Kasuta neid kahte loetelu, et luua algebriline väljendus ja anda selle väljenduse väärtus. Põhilised algebrilised operatsioonid: lisamine (+) lahutamine (- ) korrutamine (*) põranda jagamine ( //) eksponent (**) Näide: operatsioon['+', '*', '-'] array = [2, 3, 4, 5] tulemus = 2 + 3 * 4 - 5 => tulemus = 9 Märkus: operandi nimekirja pikkus on võrdne operandi nimekirja pikkusega miinus üks. Operand on nimekiri mitte-negatiivsetest tervikust. Operandil on vähemalt üks operandi nimekiri ja operandil on vähemalt kaks operandi. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,est_Latn,python,"
def solve(s):
    """"""Kui stringis pole ühtegi tähte, siis pöörake string ümber. Funktsioon peaks tagastama saadud string. Näited solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,est_Latn,python,"
def string_to_md5(text):
    """"""Kui on antud string 'text', tagastage selle md5 hash ekvivalent string. Kui 'text' on tühi string, tagastage None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,est_Latn,python,"
def generate_integers(a, b):
    """"""Kui on antud kaks positiivset tervikarvu a ja b, siis tagastavad a ja b vahelised paarikud numbrid tõusvas järjekorras. Näiteks: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
