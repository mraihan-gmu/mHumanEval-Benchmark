[
    {
        "task_id": "HumanEval/0",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ཨང་གྲངས་ཀྱི་ཐོ་ནང་ ཨང་གྲངས་གཉིས་རེ་ བྱིན་ཡོད་པའི་ཚད་གཞི་ལས་ སྦོ་ལོགས་ཁར་ཡོད་མེད་བརྟག་དཔྱད་འབད། དཔེ་འབད་བ་ཅིན་: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) རྫུན་ཁ་བཟེད་ >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) བདེན་ཁུངས་མེད་ \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"འ་ནི་ལས་འགན་ནང་ ནང་ཐིག་འདི་ ནང་ཐིག་ནང་ཡོད་པའི་ཁྱད་ཚབ་སྡེ་ཚན་ལེ་ཤ་ཡོད་པའི་ཐིག་ཁྲམ་ཨིན། ཁྱོད་ཀྱི་དམིགས་ཡུལ་འདི་ སྡེ་ཚན་དེ་སོ་སོར་གྱི་ཐིག་ཁྲམ་ནང་ དབྱེ་བ་ཕྱེ་ནི་དང་ འདི་ཚུ་གི་ཐོ་དེ་ལོག་གཏང་ནི་ཨིན། སྡེ་ཚན་སོ་སོར་འདི་ ཚད་ལྡན་ (སྒོ་སྒྲིག་རེ་རེ་གི་སྒོ་སྒྲིག་འདི་ ལེགས་ཤོམ་སྦེ་བསྡམ་ཡོདཔ་) དང་ གཅིག་གིས་གཅིག་ལུ་ ནང་ཐིག་ནང་མ་ཚུད་དེ་ཡོད་ ཨིན་པུཊི་ཐིག་ཁྲམ་ནང་ཡོད་པའི་ས་སྟོང་ཆ་ཚུ་སྣང་མེད་སྦེ་བཞག་དགོ། དཔེ་གཞི་: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ' (,') ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' ()) ' (\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"འབྱོར་རྟགས་ཀྱི་ཆ་ཤས་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་སྦེ་ཆ་བགོས་འབད་ཚུགས། (ཨང་གྲངས་སྦོམ་ཤོས་འདི་ ཨང་གྲངས་ལས་ཆུང་བ་) དང་ཨང་གྲངས་བཅུ་ཆ་སྦེ་ཆ་བགོས་འབད་ཚུགས། (ལྷག་ལུས་ཆ་ཤས་འདི་ ཨ་རྟག་ར་ ཨང་གྲངས་ ༡ ལས་ཆུང་བ་) ཨང་གྲངས་ཀྱི་ཨང་གྲངས་བཅུ་ཆ་འདི་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་: >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ཁྱོད་ཀྱིས་དངུལ་ཁང་གི་རྩིས་ཁྲ་ནང་ དངུལ་བཙུགས་དང་བཏོན་པའི་ལཱ་གི་ཐོ་འདི་ སྐུགས་ ༠ ལས་འགོ་བཙུགསཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚོད་བལྟ་འབད་དགོཔ་ཨིན། གལ་སྲིད་ གནས་སྟངས་ཅིག་ནང་ དངུལ་རྩིས་ཁྲ་གི་གནས་སྟངས་དེ་ ༠ ལས་མར་བབས་སོང་པ་ཅིན་ ལས་འགན་འདི་གིས་ True སླར་ལོག་འབད་དགོཔ་ཨིན། དེ་མེན་པ་ཅིན་ False སླར་ལོག་འབད་དགོཔ་ཨིན། དཔེ་འབད་བ་ཅིན་: >>> below_zero([༡,༢,༣]) False >>> below_zero([༡,༢,༤,༥]) True ཨིན།\"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ནང་བསྐྱོད་ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ཅིག་གི་དོན་ལུ་ གནས་སྡུད་དེ་གི་བར་མའི་མཐའ་འཁོར་ལུ་ Mean Absolute Deviation རྩིས་སྟོནམ་ཨིན། Mean Absolute Deviation འདི་གཞི་རྟེན་རེ་རེ་དང་ལྟེ་བ་ (གནས་སྡུད་དེ་གི་བར་མའི་ནང་) གི་བར་ནའི་བར་ནའི་བར་ནའི་ཁྱད་པར་ཨིན། MAD = average ཨིན། x - x_mean ཨིན། དཔེ་འབད་བ་ཅིན་: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ནང་ཐིག་གི་ཐོ་ཡིག་ནང་ཐིག་གཉིས་རེ་གི་བར་ནའི་བར་ནའི་གྱངས་ཁ་ 'delimeter' ཟེར་བཙུགས་ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"འ་ནི་ལས་འགན་འདི་ནང་ ནང་ཐིག་གི་སྡེ་ཚན་ལེ་ཤ་ཅིག་ཡོད་པའི་ ནང་ཐིག་ནང་ཡོད་པའི་ ཕར་ཀེསི་ཚུ་ བར་སྟོང་གིས་སོ་སོར་འབད་ཡོད་པའི་ སྐུད་པ་ཅིག་ཨིན། སྡེ་ཚན་རེ་རེ་བཞིན་དུ་ལུ་ ནང་ཐིག་གི་གོ་རིམ་འདི་ སྦོམ་ཤོས་སྦེ་རང་འཐོན་འོང་། དཔེར་ན་ (() (()) ནང་ཐིག་གི་གོ་རིམ་གཉིས་ཡོདཔ་ད་ ((())) ནང་ཐིག་གསུམ་ཡོད། >>> parse_nested_parens (('((()) ((())) () (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ནང་བསྐྱོད་ཐིག་གི་ཐོ་ཡིག་འདི་ ནང་ཐིག་འོག་གི་ཐིག་ནང་ཡོད་མི་ལུ་རྐྱངམ་གཅིག་ ཕུལ་ཊར་རྐྱབས་ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ཅིག་གི་དོན་ལུ་ ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དང་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོན་རིམ་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཧྲིལ་བུའི་བསྡོམས་དེ་ ༠ དང་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོན་རིམ་དེ་ ༡ སྦེ་ཆ་མཉམ་འབད་དགོཔ་ཨིན། >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) ཨིན།\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ཅིག་ལས་ ཚུད་དེ་ཡོད་པའི་དུས་ཡུན་ཚུན་ཚོད་ལུ་ཐོབ་མི་ rolling maximum གི་ཐོ་ཡིག་ཅིག་བཟོ་དགོ། >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"གྲུབ་འབྲས་འདི་འཇམ་ཏོང་ཏོ་ཨིན། - གྲུབ་འབྲས་འདི་ palindrome སྦེ་ཡོད་པའི་ string གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། - གྲུབ་འབྲས་འདི་ palindrome གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། - གྲུབ་འབྲས་འདི་ palindromic གི་ཤུལ་མ་གི་མིང་འདི་ string གི་ཤུལ་མ་གི་མིང་འདི་འཚོལ་དགོ། >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"string འདི་ palindrome ཅིག་ཨིན་པ་ཅིན་བརྟག་དཔྱད་འབད།\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ནང་བསྐྱོད་འདི་ ཚིག་ཡིག་ཐིག་ཁྲམ་གཉིས་ a དང་ b འདི་ནང་ ༡ དང་ ༠ ཚུ་རྐྱངམ་ཅིག་ཡོདཔ་ཨིན། འ་ནི་ནང་བསྐྱོད་ནང་ གཉིས་ལྡན་ XOR འདི་ལག་ལེན་འཐབ་སྟེ་ གྲུབ་འབྲས་འདི་ ཚིག་ཡིག་ཐིག་ཁྲམ་སྦེ་ལོག་གཏང་འོང་། >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"string གི་ཐོ་ཡིག་ནང་ལས་ ཚེ་རིང་ཤོས་དེ་སླར་ལོག་འབདཝ་ཨིན། ཚེ་རིང་འདྲ་མཉམ་གྱི་ཐིག་ཁྲམ་ལེ་ཤ་ཡོད་པ་ཅིན་ དང་པ་དེ་སླར་ལོག་འབདཝ་ཨིན། ནང་བསྐྱོད་ཐོ་ཡིག་སྟོངམ་ཡོད་པ་ཅིན་ None དེ་སླར་ལོག་འབདཝ་ཨིན། >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"ཨང་གྲངས་ཧྲིལ་པོ་གཉིས་ a དང་ b གི་སྤྱིར་བཏང་ཆ་བགོས་སྦོམ་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན། >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ནང་བསྐྱོད་ཐིག་གི་སྔོན་འཇུག་ག་ར་ལས་ ཆུང་ཤོས་ལས་ སྦོམ་ཤོས་ཚུན་གྱི་ཐོ་ཡིག་སླར་ལོག་འབདཝ་ཨིན། >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"གནས་རིམ་ནང་ས་སྒོ་ནང་ཐིག་ཁྲམ་ཡོད་པའི་ ཨང་གྲངས་ཚུ་ ༠ ལས་འགོ་བཙུགས་ཏེ་ n ཚུན་ཚུད་དེ་སླར་ལོག་འབདཝ་ཨིན། >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"string ཅིག་བྱིན་པ་ཅིན་ འདི་ནང་ལུ་ཁྱད་པར་ཅན་གྱི་ཡིག་འབྲུ་ག་དེ་ཅིག་ཡོདཔ་ཨིན་ན་འཚོལ་ (ཡིག་འབྲུ་ཆེ་ཆུང་དང་ཆུང་ཆུང་ག་དེ་ཅིག་ཨིན་རུང་) །\"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"འ་ནི་ལས་འགན་འདི་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་རྣམ་པ་ནང་ལུ་ སྒྲ་དབྱངས་ཀྱི་ཐིག་ཁྲམ་ཅིག་བཙུགས་དགོ། ཁྱོད་ཀྱི་ལཱ་འདི་ ཨེས་སི་ཀི་ཨའི་རྣམ་པ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སི་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨེས་སིམནང་ལུ་ ཨེས་ཀི་ཨའི་ཐིག་ཁྲམ་ནང་ ཨེས་ཀིམནང་ལུ་ ཨེས་ཀིམནང་ ཨེས་ཀིམནང་ ཨེས་ཀིམནང་ ཨེས་ཀིམནང་ ཨེས་ཀིམནང་ ཨེས་ཀིམ\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"གཞི་རྟེན་ཐིག་ཁྲམ་ནང་ལུ་ ཚར་ག་དེ་ཅིག་རང་ འོག་གི་ཐིག་ཁྲམ་ཅིག་ཐོབ་ཚུགས་ག་འཚོལ་གི། གྱངས་ཁ་འདི་ གྱངས་ཁ་འདི་དང་ཅིག་ཁར་ཐོནམ་ཨིན། >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ནང་བསྐྱོད་འདི་ ས་སྒོ་ནང་ཐིག་ཡིག་ཡོད་པའི་ string འདི་ ' ༠' ལས་ ' ༩' ཚུན་ཨིན། གདམ་ཁ་ཚུ་ ' ༠ ' ༡ ' ༢ ' ༣ ' ༤ ' ༥ ' ༦ ' ༧ ' ༨ ' ༩ ' ཚུ་ཨིན། string འདི་ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ལུ་རིམ་སྒྲིག་འབད་ཡོད་མི་ལུ་སླར་ལོག་འབདཝ་ཨིན། >>> sort_numbers ((' ༣ ༡ ༥') ' ༡ ༣ ༥ ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ཅིག་ལས་ (ཉུང་ཤོས་ཨང་གྲངས་གཉིས་) གཅིག་དང་གཅིག་དང་ཉེ་བའི་ཨང་གྲངས་གཉིས་སེལ་འཐུ་འབད་ཞིནམ་ལས་ ལོག་གཏང་ནི་དང་རིམ་པ་བཞིན་དུ་ལོག་གཏང་ (ཨང་གྲངས་ཆུང་ཤོས་དང་སྦོམ་ཤོས་) ། >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"ཨང་གྲངས་ཀྱི་ཐོ་འདི་ (ཉུང་ཤོས་རང་ ཨང་གཉིས་ལས་) བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆུང་ཤོས་དེ་ ༠ དང་སྦོམ་ཤོས་དེ་ ༡ སྦེ་འགྱུར་ཏེ་ (ཨང་གྲངས་ཀྱི་ཐོ་འདི་ ༠ ལས་ ༠ ལུ་འགྱུར་ཏེ་) [༠.༠,༠.༠,༣.༠,༤.༠,༥.༠] [༠.༠,༠.༢༥,༠.༥,༠.༧༥,༡.༠] ཨིན།\"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་དོན་ལུ་རྐྱངམ་གཅིག་ Python གནས་གོང་ཚུ་བཙུགསཔ་ཨིན། >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ཚད་འཛིན་གྱི་ཐིག་ཁྲམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"ཨང་གྲངས་ n ཅིག་ལུ་ ཨང་གྲངས་སྦོམ་ཤོས་ཅིག་ n ལས་ཆུང་བ་ཅིག་སྦེ་ཆ་བགོས་འབད་ནིའི་ཨང་གྲངས་འདི་འཚོལ་ག >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ཨང་གྲངས་མཐའ་དག་གི་གཞི་གྲངས་ཚུ་ ཆུང་ཤོས་ལས་སྦོམ་ཤོས་ཀྱི་རིམ་པ་ལུ་ལོག་གཏང་། ཆ་ཤས་རེ་རེ་ལུ་ ཨང་གྲངས་རྩིས་སྟོན་འབད་དགོཔ་ཨིན། ཨང་གྲངས་རྩིས་སྟོན་འབད་མི་དེ་ ཆ་ཤས་ག་ར་གི་གྱངས་ཁ་དང་འདྲན་འདྲ་ཨིན། >>> ཆ་ཤས་ཚུ་དབྱེ་བ་ཕྱེ་ནི་ ((8) [༢,༢,༢] >>> ཆ་ཤས་ཚུ་དབྱེ་བ་ཕྱེ་ནི་ ((25) [༥,༥] >>> ཆ་ཤས་ཚུ་དབྱེ་བ་ཕྱེ་ནི་ ((70) [༢,༥,༧] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ནང་ལས་ ཚར་གཅིག་ལས་ལྷག་པའི་ནང་ཡོད་པའི་ཆ་ཤས་ཚུ་བཏོན་གཏང་། ནང་བསྐྱོད་ནང་ཡོད་པའི་ཆ་ཤས་ཚུ་བཞག་ནིའི་རིམ་པ་འདི་འདྲཝ་སྦེ་བཞག་། >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"string ཅིག་ལུ་ཡིག་འབྲུ་ཆུང་བ་འདི་ཡིག་འབྲུ་སྦོམ་དང་ ཆུང་བ་འདི་ཡིག་འབྲུ་སྦོམ་སྦེ་བསྒྱུར་གཏང་། >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"string གི་ཐོ་ཡིག་ཅིག་ནང་ string གཅིག་སྦེ་བཙུག་ >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ནང་བསྐྱོད་ཐིག་གི་ཐོ་ཡིག་འདི་ སྔོན་སྒྲིག་ཅིག་ལས་འགོ་བཙུགས་ཏེ་ཡོད་མི་ཚུ་རྐྱངམ་ཅིག་སེལ་འཐུ་འབད། >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཚུ་རྐྱངམ་ཅིག་ལོག་གཏང་། >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ཨང་གྲངས་དེ་ ཨང་གྲངས་ངོ་མ་ཨིན་པ་ཅིན་ true སླར་ལོག་འབདཝ་ཨིན། >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs འདི་ polynomial གི་གནས་གོང་ཚུ་ཨིན། find_zero find x འདི་བཟུམ་ཅིག་འབད་བ་ཅིན་ poly ((x) = 0. find_zero གིས་ སྐུགས་ ༠་རྐྱངམ་ཅིག་ལོག་བྱིན་དོ་ཡོདཔ་དང་ འདི་ཡང་ མང་ཤོས་ཅིག་རང་ཡོད་པ་ཅིན་ཡང་། find_zero གིས་ xs འདི་ཡང་ སྐུགས་ ༠་དང་ སྐུགས་ ༠་ལས་སྦོམ་ཤོས་ཡོད་མི་དེ་རྐྱངམ་གཅིག་ལེན་དོ་ཡོདཔ་ལས་ དེ་གིས་ གྲོས་ཐག་ཅིག་འཐོན་ཚུགསཔ་ཨིན། >>> round ((find_zero[(1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"ཚད་ལྡན་ xs ཚུ་ཡོད་པའི་སྒོ་འདི་ xs ལུ་རྩིས་སྟོནམ་ཨིན། སླར་ལོག་ xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"འ་ནི་ལས་འགན་འདི་གིས་ཐོ་ཡིག་ l དང་སླར་ལོག་འབདཝ་ཨིན། འདི་བཟུམ་སྦེ་ཐོ་ཡིག་ l' འདི་ ༣ ལུ་ཆ་མི་བཏུབ་པའི་ནང་དང་ l འདི་འདྲ་མཉམ་ཨིན་པའི་ཁར་ གནས་གོང་ཚུ་ ༣ ལུ་ཆ་མི་བཏུབ་པའི་ནང་དང་ l གི་གནས་གོང་ཚུ་འདྲ་མཉམ་ཨིན་པའི་ཁར་ དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཁྱད་ཆོས་ཅན་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ལུ་ ཆ་ཤས་མང་ཤོས་ཅིག་སླར་ལོག་འབདཝ་ཨིན། >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"ཨང་གྲངས་ 7འདི་ 11 དང་ 13 ལུ་ཆ་བགོས་འབད་མི་ ཨང་གྲངས་ཧྲིལ་ཨང་ n ལས་ཆུང་བ་ནང་ལུ་ ཚར་གྲངས་ག་དེམ་ཅིག་འོང་ནི་ཨིན་ན་སླར་ལོག་འབདཝ་ཨིན། >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"འ་ནི་ལས་འགན་འདི་ཐོ་ཡིག་ཅིག་ལེན་ཏེ་ འདི་བཟུམ་ཅིག་སྦེ་ཐོ་ཡིག་ཅིག་ལོག་གཏང་འོང་། འདི་ཡང་ཐོ་ཡིག་འདི་ གྱངས་ཁ་མ་འདྲཝ་ཚུ་ནང་ l དང་འདྲ་མཉམ་སྦེ་ཡོདཔ་དང་ དེ་ལས་ གྱངས་ཁ་ཆ་མཉམ་ནང་ འདི་གི་གནས་གོང་ཚུ་ གྱངས་ཁ་ཆ་མཉམ་ནང་ l གི་གནས་གོང་ཚུ་དང་འདྲན་འདྲ་ཨིན་རུང་ དབྱེ་བ་ཕྱེ་ཡོདཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ཌེ་ཀོཌ་འབད་ཡོད་པའི་ཐིག་ཁྲམ་འདི་ ཌེ་ཀོཌ་འབད་ཡོད་པའི་ཐིག་ཁྲམ་སྦེ་ལེན་ཨིན།\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"རྟགས་མཚན་གསུམ་གྱི་ འཁོར་ལམ་སྡེ་ཚན་གྱིས་ ཨང་བཏགས་མི་ཐིག་ཁྲམ་སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib གིས་ ཨང་གྲངས་ n-th དེ་ ཕི་བཱོན་ཅིཤི་ཨང་གྲངས་ཨིནམ་དང་ དེ་ཡང་ ཨང་གྲངས་ཨང་གྲངས་ཨང་གྲངས་ཨིན། >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ཨེབ་གཏང་འབདཝ་ཨིན་ དེ་གིས་ True སླར་ལོག་འབདཝ་ཨིན་པ་ཅིན་ ཐིག་ཁྲམ་ནང་ ཨང་གྲངས་ཧྲིལ་བུམ་གསུམ་ཡོད་པ་ཅིན་ True སླར་ལོག་འབདཝ་ཨིན་ དེ་ལས་ False སླར་ལོག་འབདཝ་ཨིན་ >>> triples_sum_to_zero([1, 3, -2, 1]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ཐད་ཀར་དུ་ཕྲང་ཡོད་པའི་མཐའ་མེད་པའི་ཐིག་ཁྲམ་ཅིག་ཡོད་པའི་ལམ་འདི་ ཧ་གོ་དགོ། སྣུམ་འཁོར་ n གིས་གཡོན་ལས་གཡས་ཁ་ཐུག་ལུ་འགྱོ་དོ་ཡོདཔ་དང་ དེ་བསྒང་ སྣུམ་འཁོར་ n གི་སྡེ་ཚན་གཞན་ཅིག་གིས་གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་སྡེ་ཚན་གཉིས་འདི་ གཅིག་ལས་ཐག་རིང་ས་ཅིག་ལས་ འགོ་བཙུགས་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་ཆ་མཉམ་མགྱོགས་ཚད་གཅིག་སྦེ་འགྱོ་དོ་ཡོདཔ་ཨིན། སྣུམ་འཁོར་གཉིས་ཅིག་གཡོན་ལས་གཡས་ཁ་ཐུག་ལུ་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་གིས་གཡས་ལས་གཡོན་ཁ་ཐུག་ལུ་འགྱོ་མི་ སྣུམ་འཁོར་ཅིག་ལུ་ཕོག་པའི་སྐབས་ སྣུམ་འཁོར་གཉིས་ཅིག་ ཐུག་རྐྱེན་བྱུང་དོ་ཡོདཔ་སྦེ་སླབ་ཨིན། ཨིན་རུང་ སྣུམ་འཁོར་ཚུ་ཚད་མེད་བརྟན་ཏོག་ཏོ་དང་སྒྲིང་སྒྲི་ཨིནམ་ལས་ དེ་གིས་ སྣུམ་འཁོར་ཚུ་མ་ཐུག་པར་འགྱོཝ་བཟུམ་སྦེ་ སྣུམ་འཁོར་ཚུ་དར་ཚིལ་ལུ་གནས་དོ་ཡོདཔ་ཨིན། འ་ནི་ལས་འགན་འདི་གིས་ དེ་བཟུམ་མའི་ ཐུག་རྐྱེན་གྱི་གྱངས་ཁ་འདི་བཏོན་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"འོག་ལུ་ཡོད་པའི་ཆ་ཤས་ཚུ་དང་བསྟུན་ཏེ་ཐོ་ཡིག་ལོག་གཏང་། >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ཨེབ་གཏང་འབདཝ་ཨིན་ དེ་གིས་ True སླར་ལོག་འབདཝ་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་དེ་ ༠ ལུ་བསྡོམས་ཏེ་ཡོད་པའི་ཁྱད་པར་ཅན་གྱི་ཆ་ཤས་གཉིས་ཡོད་པ་ཅིན་དང་ གཞན་འབད་བ་ཅིན་ False སླར་ལོག་འབདཝ་ཨིན། >>> pairs_sum_to_zero([1, 3, -2, 1]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ནང་བསྐྱོད་ཨང་གྲངས་ x གི་ཨང་གྲངས་གཞི་རྟེན་གཞི་རྟེན་ལུ་བསྒྱུར་བཅོས་འབདཝ་ཨིན། བསྒྱུར་བཅོས་འབད་བའི་ཤུལ་ལས་ string ངོ་ཚབ་ལོག་འབདཝ་ཨིན། གཞི་རྟེན་ཨང་གྲངས་ཚུ་ ༡༠ ལས་ཉུང་ཨིན། >>>འགྱུར་བཅོས་_གཞི་རྟེན་ (༨) ། ༣) '༢༢' >>>འགྱུར་བཅོས་_གཞི་རྟེན་ (༨) ། ༢) '༡༠༠༠' >>>འགྱུར་བཅོས་_གཞི་རྟེན་ (༧) ། ༢) '༡༡༡'\"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"གཡོན་དང་མཐོ་ཚད་སླར་ལོག་འབད་སའི་ས་སྒོ་འདི་གསུམ་ཟུར་ཅིག་ལུ་བྱིན་ཏེ་ཡོདཔ་ཨིན། >>> triangle_area\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 གི་ཨང་རིམ་དེ་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིནམ་ད་ འདི་ཡང་ འོག་གི་བཟུམ་སྦེ་གསལ་བཀོད་འབདཝ་ཨིན། fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 གི་ཨང་རིམ་གྱི་ཆ་ཤས་ཨང་གྲངས་ n པ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་དགོ། ལོག་ལོག་རྩིས་སྟོན་འདི་ལག་ལེན་འཐབ་མ་དགོ། >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ཡོད་པའི་ཆ་ཤས་ཚུ་གི་བར་མཚམས་སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"stringའདི་ palindrome ཨིན་ན་བརྟག་དཔྱད་འབདཝ་ཨིན། >>> is_palindrome (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd) ཨིན་ན་བདེན་ (_zbcd)\"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"༢^n modulo p (ཨང་གྲངས་ཚུ་ཤེས་དགོ) སླར་ལོག་འབདཝ་ཨིན། >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ཌེ་ཀོཌ་འབད་ཡོད་པའི་ཐིག་ཁྲམ་འདི་ ཌེ་ཀོཌ་འབད་ཡོད་པའི་ཐིག་ཁྲམ་སྦེ་ལེན་ཨིན།\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ཨེཕ་ཇི་ནང་ཡིག་འབྲུ་རེ་རེ་ལུ་ ༥ བསྒྱུར་ཐོག་ལས་ ཨེཕ་ཇི་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་ཨེན་\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels འདི་ལས་ string དང་ vowels ཚུ་མེད་པར་ string སླར་ལོག་འབདཝ་ཨིན།. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' ཟེར་\"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"འོག་ལུ་ཡོད་པའི་ཐོ་ཡིག་ནང་ཨང་གྲངས་ཚུ་ཆ་མཉམ་རང་ ཐོ་ཡིག་གི་འོག་ལུ་ཡོད་པ་ཅིན་བདེན་པ་སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"ཨང་གྲངས་ x དང་ y གཉིས་བསྡོམས་འབད་ >>> add(2, 3) 5 >>> add(5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ཚིག་གཉིས་ལུ་ཡིག་འབྲུ་འདྲ་མཉམ་ཡོད་མེད་བརྟག་དཔྱད་འབད། >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') ཨིན་དེ་ཨིན། >>> same_chars (('abcd', 'dddddddddabc') ཨིན་དེ་ཨིན། >>> same_chars (('dddddddabc', 'abcd') ཨིན་དེ་ཨིན། >>> same_chars (('eabcd', 'dddddddddabc') ཨིན་དེ་མེན་ >>> same_chars ((('abcd', 'dddddddabddce') ཨིན་དེ་མེན་ >>> same_chars ((eabcdzzzz', 'dddzzzzzzzddabc') ཨིན་དེ་མེན་\"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"ཕི་བཱོན་ནེཤི་ཨང་གྲངས་ nth སླར་ལོག་འབདཝ་ཨིན། >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets འདི་ \"<\" དང་ \">\" འབད་མི་ཐིག་ཁྲམ་ཨིན།. return True འདི་ཡང་ འགོ་བཙུགས་པའི་ bracket ཚུ་ནང་ མཇུག་གི་ bracket ཅིག་ཡོད་པ་ཅིན་ཨིན། >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([༡,༢,༤,༢༠]) True >>> monotonic (([༡,༢༠,༤,༡༠]) False >>> monotonic (([༤,༡,༠, -༡༠]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"གྱངས་ཁ་གཉིས་ལུ་དབྱེ་བ་ཕྱེ་མི་ ཁྱད་ཆོས་ཅན་གྱི་མཉམ་འབྲེལ་གྱི་ཆ་ཤས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n གི་གལ་ཆེ་ཤོས་གཞི་གྲངས་སླར་ལོག་འབདཝ་ཨིན། n > 1 དང་གལ་ཆེ་ཤོས་གཞི་གྲངས་མེན་པ་ཅིན་། >>> largest_prime_factor ((༡༣༡༩༥) ༢༩ >>> largest_prime_factor ((༢༠༤༨) ༢\"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n འདི་ལས་ 1 ལས་ n ཚུན་གྱི་ཨང་གྲངས་ཚུ་བསྡོམས་ཏེ་བཟོ་མི་ལས་འགན་ཨིན། >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1\"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets འདི་ \"(\" དང་ \"\") གི་ཐིག་ཁྲམ་ཨིན། return True འདི་ཡང་ འགོ་བཙུགས་པའི་ bracket ཚུ་ནང་ མཇུག་བསྡུ་བའི་ bracket ཅིག་ཡོད་པ་ཅིན་ཨིན། >>> correct_bracketing (((\"(\") False >>> correct_bracketing (((\")) True >>> correct_bracketing (((())) True >>> correct_bracketing (((\") (((\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs འདི་ polynomial གི་གནས་གོང་ཚུ་ཨིན། xs[0] + xs[1] * x + xs[2] * x^2 + .... འདི་ polynomial གི་འབྱུང་ཁུངས་དེ་ འདྲ་བཟོ་ནང་སླར་ལོག་འབདཝ་ཨིན། >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib ཨང་རིམ་འདི་ Fibbonacci གི་རིམ་པ་བཟུམ་ཅིག་ཨིན་ འདི་ཡང་ འོག་གི་བཟུམ་སྦེ་གསལ་བཀོད་འབད་ཡོདཔ་ཨིན། fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ཨིན་པ་ཅིན་ ཨང་རིམ་གྱི་ n-th གི་ཆ་ཤས་འདི་ ཤུགས་ལྡན་སྦེ་རྩིས་སྟོན་འབད་ནིའི་དོན་ལུ་ ལས་འགན་ཅིག་འབྲི་གནང་། >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། ཨང་གྲངས་ཀྱི་མིང་ཚིག་འདི་ ཨང་གྲངས་ཀྱི་མིང་ཚིག་གི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན།\"\"\"\n\ndef vowels_count(s):\n    \"\"\"ཚོད་བལྟ་འབད་སའི་གནད་དོན་ཚུ་ ཁ་སྐོང་རྐྱབས།\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"གྱངས་ཁ་ཚུའི་ཨང་གྲངས་ x གི་ཨང་གྲངས་ཚུ་ འཁོར་ལམ་གྱི་ཐོག་ལས་སོར་གཏང་ དེ་ལས་ཨང་གྲངས་ཚུ་གཡས་ཁ་ཐུག་སོར་གཏང་ཞིནམ་ལས་ གྲུབ་འབྲས་དེ་ string སྦེ་ལོག་གཏང་། གལ་སྲིད་ shift > ཨང་གྲངས་ཚུ་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་ཁ་བསྒྱུར་གཏང་། >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ལཱ་འགན་ ཨང་གྲངས་ཐིག་ཁྲམ་ཅིག་ནང་བཙུགས་སྦེ་ལེན་ཏེ་ ཨང་གྲངས་མཐོ་སའི་ཡིག་འབྲུ་ཚུ་རྐྱངམ་ཅིག་བསྡོམས་ཏེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"འ་ནི་ལཱ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དང་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨེབ་གཏང་འབད་ཡོད་པའི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་འདི་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དེ་ ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཀྱི་ཨང་\"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"ཁྱོད་ཀྱིས་ཨེ་རེ་འདི་ཨེ་རེ་གཞན་དང་མ་འདྲ་བའི་ཨང་གྲངས་ཀྱི་ཨང་གྲངས་ཚུ་ཡོད་པའི་ཤིང་སྡོང་གི་ཡན་ལག་ཅིག་ལུ་ངོ་ཚབ་འབདཝ་ཨིན་པ་ཅིན་ ཁྱོད་ཀྱི་ལཱ་འདི་ ཨེ་རེ་གཅིག་བཏོན་ཏེ་ལོག་གཏང་ནི་དེ་ཨིན། ཨེ་རེ་འདི་ཨེ་རེ་ཆུང་ཤོས་དང་ ཨང་གྲངས་ཆ་མཉམ་ཡོད་པའི་ཨང་གྲངས་སྦེ་ལོག་གཏང་དགོ། ཨེ་རེ་ཆུང་ཤོས་དང་ ཨང་གྲངས་ཆ་མཉམ་ཡོད་པའི་ཨང་གྲངས་ཚུ་ཐོབ་པ་ཅིན་ ཨེ་རེ་ཆུང་ཤོས་དང་ ཨང་གྲངས་ཆ་མཉམ་ཡོད་པའི་ཨང་གྲངས་དེ་ལོག་གཏང་དགོ། ཨེ་རེ་འདི་ཐོ་ཡིག་ནང་ལོག་གཏང་དགོ། [smallest_value, its index] ཨེ་རེ་ནང་ཨང་གྲངས་ཆ་མཉམ་མེད་པ་ཅིན་ ཨེ་རེ་དེ་ལོག་གཏང་། དཔེར་ན་: ༡། ཨེན་པུཊི་: [༤,༢,༣] ཨོཊི་: [༢,༡] འགྲེལ་བཤད་: ༢་ལུ་ ཨེ་རེ་ཆུང་ཤོས་དང་ ཨང་གྲངས་ཆ་མཉམ་ཡོད་པའི་ཨང་གྲངས་དེ་ཡོད། དཔེར་ན་: ༢། ཨེན་པུཊི་: [༡,༢,༣] ཨོཊི་: [༢,༤] ཨེན་པུཊི་: [༠,༣] ཨེན་པུཊི་: ཨེ་རེ་ཆུང་ཤོས་དང་ཨང་གྲངས་ཆ་མཉམ་ཡོད་པའི་ཨང་གྲངས་དེ་ལོག་གཏང་དགོ། ཨེ་རེ་ཆུང་ཤོས་དང་ཨང་གྲངས་ཆ་མཉམ་ཡོད་པའི་ཨང་གྲངས་དེ་ ༠་ཨིན། དཔེར་ན་: ༡། ཨེ་རེ་ཆུང་ཤོས་དང་ཨང་གྲངས་ཆ་མེད་དེ་ཨང་གྲངས་ཆུང་ཤོས་དང་ཨང་གྲངས་ཆ་མེད་ཨིན།\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཆ་མཉམ་ལས་ལྷག་པའི་ ཨང་གྲངས་མཐའ་དག་པ་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཨང་གྲངས་མཐའ་དག་པ་ཅིག་ལས་ལྷག་པའི་ ཨང་གྲངས་མཐའ་དག་པ་ཅིག་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་མཐའ་དག་པ་ཅིག་གི་ ཨང་གྲངས་མཐའ་དག་པ་ཅིག་དེ་ ཨང་གྲངས་མཐའ་དག་པ་གི་ གནས་གོང་ལས་སྦོམ་དང་འདྲན་འདྲ་ཨིན། ཨང་གྲངས་མཐའ་དག་པ་ཅིག་གི་ གནས་གོང་དེ་ ཨང་གྲངས་མཐའ་དག་པ་ཅིག་ནང་མཐོང་མི་གྱངས་ཁ་ཨིན། ག་དེམ་ཅིག་སྦེ་ གནས་གོང་འདི་མེད་པ་ཅིན་ -༡སླར་ལོག་འབད། དཔེར་ན་འཚོལ་བ་: (([༤, ༡, ༢, ༢, ༣, ༤, ༤]) == ༢འཚོལ་བ་: (([༡, ༢, ༢, ༣, ༣, ༣, ༤, ༤]) == ༣འཚོལ་བ་: (([༥, ༥, ༤, ༤]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''ཨང་གྲངས་མཐའ་དག་གི་ཐོ་འདི་བྱིན་པ་ཅིན་ ཨང་གྲངས་མཐའ་དག་དེ་ དབྱེ་བ་མ་ཕྱེ་པའི་རིམ་པ་ལུ་ལོག་གཏང་འོང་། དབྱེ་བ་མ་ཕྱེ་བའི་རིམ་པ་འདི་ ཁྱོད་ཀྱིས་ཉུང་མཐའི་གནས་གོང་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་ལྷག་ལུས་ཨང་གྲངས་མཐའ་དག་གི་ མཐོ་ཤོས་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་ཉུང་མཐའི་གནས་གོང་ལུ་འགྱོཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ ། ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་ས་སྒོ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཨང་བཅུ་ཆ་གཉིས་ལུ་བསྡུ་སྟེ་སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ -1 སླར་ལོག་འབདཝ་ཨིན། ཟུར་གསུམ་གྱི་ཟུར་གསུམ་འདི་ ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ ཟུར་གཉིས་ཆ་མཉམ་གྱི་བསྡོམས་འདི་ ཕྱོགས་གསུམ་པ་ལས་སྦོམ་ཨིན། དཔེར་ན་: triangle_area (༣,༤,༥) == 6.00 triangle_area (༡,༢,༡༠) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''དངོས་པོ་ q འདི་འཕུར་འགྱོ་བ་ཅིན་ བདེན་པ་སྦེ་ལོག་བྱིན་ནི་དང་ གཞན་འབད་བ་ཅིན་ རྫུན་པ་སྦེ་ལོག་བྱིན་མི་ལས་འགན་ཅིག་འབྲི་དགོ། དངོས་པོ་ q འདི་ཚད་ལྡན་ཨིན་པ་ཅིན་ (འདི་པཱ་ལིན་ཌོརམིསི་གི་ཐོ་ཅིག་ཨིན་) དེ་ལས་ འདི་གི་ཆ་ཤས་ཚུ་གི་བསྡོམས་དེ་ ཚད་མཐོའི་ལྗིད་ཚད་ལས་ཆུང་བ་ ཡང་ན་ ཚད་མཐོའི་ལྗིད་ཚད་དང་འདྲན་འདྲ་ཨིན། དཔེར་ན་ will_it_fly (([1, 2], 5) â -> རྫུན་ # 1+2 འདི་ ཚད་མཐོའི་ལྗིད་ཚད་ལས་ཆུང་བ་ཨིན་རུང་ ཚད་ལྡན་མེན་པས། will_it_fly (([3, 2, 3], 1) â -> རྫུན་ # འདི་ཚད་ལྡན་ཨིན་རུང་ 3+2+3 འདི་ ཚད་མཐོའི་ལྗིད་ཚད་ལས་མང་བ་ཨིན། will_it_fly (([3, 2, 3], 9) â -> True # 3+23 འདི་ ཚད་མཐོའི་ལྗིད་ཚད་ལས་ཆུང་བ་ཨིན་རུང་ ཚད་ལྡན་མེན་པས། will_it_fly ((([3], 5) â -> True # 3 འདི་ ཚད་མཐོའི་ལྗིད་ཚད་ལས་ཆུང་བ་ཨིན་རུང་ ཚད་ལྡན་མེན་པས།'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ཨེ་རེ་ཨར་རེ་ནང་ ཨང་གྲངས་ཧྲིལ་བུམ་ཡོད་པ་ཅིན་ ཨེ་རེ་དེ་ པཱ་ལིན་ཌོརམིསི་སྦེ་བཟོ་བའི་དོན་ལུ་ བསྒྱུར་བཅོས་འབད་དགོཔ་ཨིན་པའི་ ཨེ་རེ་ཉུང་ཤོས་དེ་འཚོལ་དགོ། པཱ་ལིན་ཌོརམིསི་ ཨེ་རེ་དེ་ ཨེ་རེ་ཅིག་ཨིན་པའི་ཁར་ ཨེ་རེ་དེ་ ཤུལ་ལས་དང་ཧེ་མ་གཉིས་ཆ་ར་ལུ་ བསྒྱུར་བཅོས་འབད་ཚུགས། བསྒྱུར་བཅོས་གཅིག་གི་སྐབས་ལུ་ ཨེ་རེ་གཅིག་ལས་ ཨེ་རེ་གཞན་ཅིག་ལུ་ བསྒྱུར་བཅོས་འབད་ཚུགས། དཔེར་ན་: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ཐིག་ཁྲམ་གཉིས་ཆ་ར་གི་ཐོ་ཡིག་འདི་ལེན་ཏེ་ ཐིག་ཁྲམ་གཞན་ལས་ཉུང་བའི་ཡིག་འབྲུ་ཡོད་མི་འདི་ལོག་གཏང་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ། གལ་སྲིད་ ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ཡིག་འབྲུ་གྲངས་འདྲན་འདྲ་ཡོད་པ་ཅིན་ དང་པ་དེ་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་ total_match ([], []) -> ([] total_match (['hi', 'admin'], ['hI', 'Hi']) -> (['hI', 'Hi'] total_match (['hi', 'admin'], ['hi', 'admin', 'project']) -> (['hi', 'admin'] total_match (['hi', 'admin'], ['hi', 'hi', 'hi']) -> (['hI', 'hi', 'hi'] total_match (['hi', 'admin'], ['hI', 'hi', 'hi']) -> (['hI', 'hi', 'hi'] total_match (['4', ['1', '2', '3', '4', '5', [' 4]) -> ('4')'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ཨང་གྲངས་འདི་ ཨང་གྲངས་ངོ་མ་༣ གྱི་གྱངས་ཁ་དང་ ཨང་གྲངས་གཞན་ཚུ་ཤོམ་པ་ཅིན་ ཨིན་ཟེར་ལོག་གཏང་མི་ལས་འགན་ཅིག་འབྲི་དགོ། དཔེར་ན་: is_multiply_prime (༣༠) == ཨིན་ 30 = ༢*༣*༥\"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ཁྱོད་ཀྱི་ལཱ་འདི་ གྲངས་སུ་ཅིག་ x འདི་ n གི་ཤུགས་ཅིག་ཨིན་པ་ཅིན་ true དང་གཞན་གྱི་གནས་སྟངས་ནང་ false སླར་ལོག་འབད་ནིའི་འགན་ཁུར་འདི་ཨིན། x འདི་ n གི་ཤུགས་ཅིག་ཨིན་པ་ཅིན་ x འདི་ཨིན། དཔེར་ན་: is_simple_power (_simple_power) {1, 4) => true is_simple_power (_simple_power) {2, 2) => true is_simple_power (_simple_power) {8, 2) => true is_simple_power (_simple_power) {3, 2) => false is_simple_power (_simple_power) {3, 1) => false is_simple_power (_simple_power) {5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ཨང་གྲངས་ཧྲིལ་བུམ་ a དང་ སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་དེ་ True ཨིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་ a འདི་ཨང་གྲངས་ཧྲིལ་བུམ་ a སྦེ་རྩིས་སྟོནམ་ཨིན། དཔེར་ན་: iscube (༡) ==> True (༢) ==> False (༡) ==> True (༦༤) ==> True (༠) ==> True (༡༨༠) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ཁྱོད་ཀྱིས་ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་ ཀེར་ཐིག་སྦེ་ལེན་ཏེ་ ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་རྩིས་སྟོན་འབད་ནིའི་འགན་ཁུར་ཐོབ་ཡོདཔ་དང་ འདི་ཡང་ ཨང་གྲངས་ཚུའི་གྲངས་སུ་རྩིས་སྟོན་འབད་ (ཨང་གྲངས་ཚུའི་གྲངས་སུ་རྩིས་སྟོན་འབད་མི་དེ་ རང་བཞིན་ཨང་གྲངས་ ༡ ལས་སྦོམ་མི་ ཨང་གྲངས་ཚུའི་གྲངས་སུ་རྩིས་སྟོན་འབད་མི་དེ་ རང་བཞིན་ཨང་གྲངས་ཆུང་བ་གཉིས་ལས་ཐོན་མི་ ཨང་གྲངས་ཨིན།) ཧེ་ཀ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཚུ་ ༠, ༡, ༢, ༣, ༤, ༥, ༦, ༧, ༨, ༩, A, B, C, D, E, F ཨིན་ཨིན། ཨང་གྲངས་ཚུའི་གྲངས་སུ་རྩིས་སྟོན་འབད་དགོ་པའི་ཨང་གྲངས་ཚུ་ ༢, ༣, ༥, ༧, ༡༡, ༡༣, ༡༧,...ཨིན། འདི་འབདཝ་ལས་ ཁྱོད་ཀྱིས་ འོག་གི་ཨང་གྲངས་ཚུ་གཏན་འཇགས་ ཡང་ན་ སྟོངམ་ཨིནམ་སྦེ་བཟོཝ་ཨིན། ཨང་གྲངས་ A,B, C, D, E, F འདི་ཨ་རྟག་རང་ཡིག་འབྲུ་སྦོམ་སྦེ་སྟོན་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ ཨང་གྲངས་ \"AB\" གི་དོན་ལུ་ ཨང་གྲངས་ཐོན་ནི་ ༡. ཨང་གྲངས་ = ༡.༠༧༧༧ \"E\" གི་དོན་ལུ་ ཨང་གྲངས་ཐོན་ནི་ ༢. ཨང་གྲངས་ \"AB\" = ༡.༣༣༣༣ \"A\" གི་དོན་ལུ་ ཨང་གྲངས་ཀ་ཌེ་ཀེར་ཐིག་ = ༤.༨༩.༨.༡.༦.༦.༨ \"A\" གི་དོན་ལུ་ ཨང་གྲངས་ཐོན་ནི་ \"A\" ༦.༢༠༢༠༠ \"EF\" གི་དོན་ལུ་ ཨང་གྲངས་སུ་འཐོན་ནི་ ༢.༤.༠\" ཨིན།\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ ཨང་གྲངས་བཅུ་པའི་ཐོག་ལས་བཟོ་སྟེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་ གཉིས་ལྡན་གྱི་ཐོག་ལས་བཟོ་དགོ། ལས་འགན་འདི་གིས་ ཀེར་ཐིག་ཅིག་སླར་ལོག་འབད་དགོཔ་ཨིན་ ཀེར་ཐིག་རེ་རེ་གིས་ གཉིས་ལྡན་གྱི་ཨང་གྲངས་ངོ་ཚབ་འབདཝ་ཨིན། ཀེར་ཐིག་རེ་རེ་ནང་ ཀེར་ཐིག་རེ་རེ་ལུ་ ༠ ཡང་ན་ ༡ ཟེར་འོང་། ཀེར་ཐིག་གི་འགོ་དང་མཇུག་ལུ་ ཀེར་ཐིག་གཉིས་ལྡན་ 'db' ཟེར་འོང་། ཀེར་ཐིག་གཉིས་ལྡན་ཚུ་ སྒྲིག་བཀོད་ནང་ཕན་ཐོགས་འབྱུང་འོང་། དཔེ་འབད་བ་ཅིན་: decimal_to_binary (༡༥) # གིས་ \"db1111db\" སླར་ལོག་འབདཝ་ཨིན། decimal_to_binary (༣༢) # གིས་ \"db100000db\" སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ཁྱོད་ལུ་ string s ཅིག་བྱིན་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ string འདི་དགའ་སྐྱིད་ཅན་ཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབད་དགོ འདི་ཡང་ string འདི་དགའ་སྐྱིད་ཅན་ཨིན་པ་ཅིན་ དེའི་རིང་ཚད་དེ་ ཉུང་ཤོས་རང་ 3 དང་ ཚར་གསུམ་རིམ་པ་བཞིན་དུ་ཡིག་འབྲུ་སོ་སོ་སྦེ་ཡོད་པ་ཅིན་ཨིན། དཔེར་ན་: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"སློབ་རིམ་མཇུག་གི་ བདུན་ཕྲག་འདི་ཨིནམ་ལས་ སློབ་དཔོན་གྱིས་ སློབ་ཕྲུག་ཚུ་ལུ་ ཨང་བཏགས་དགོཔ་ཨིན། སློབ་དཔོན་གྱིས་ ཨང་བཏགས་ནིའི་ ཨལ་གོར་ཇི་མཱིས་དེ་ ཁོ་རང་གིས་བཟོ་སྟེ་འདུག། དཀའ་ངལ་འདི་ ཁོ་གིས་ ཨང་བཏགས་ནིའི་དོན་ལས་ ལག་ལེན་འཐབ་མི་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ བྱང་སྟེ་འདུག། ཁོ་གིས་ སློབ་ཕྲུག་ལ་ལོ་ཅིག་ལུ་ ཨང་བཏགས་ཐོ་བཀོད་ཅིག་བྱིན་ཏེ་ཡོདཔ་ལས་ ཁྱོད་ཀྱིས་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་ཅིག་འབྲི་དགོཔ་ཨིན། ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་ཨིན། ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཐོ་བཀོད་དེ་ ཨང་བཏགས་ཨིན།\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"string དང་འབྲེལ་བའི་ལས་འགན་ཅིག་འབྲི་ཞིནམ་ལས་ string གི་རིང་ཚད་དེ་ prime number ཅིག་ཨིན་པ་ཅིན་ True ཡང་ན་ False སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ prime_length (_) == true prime_length (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_ (_) (_) (_) (_ (_) (_) (_) (_) (_)\"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ལས་ ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ལས་ ཨང་གྲངས་ཚངམ་སྦེ་ཡོད་མི་འདི་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུམ་ཚུའི་དོན་ལས་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ གཉིས་ལྡན་གྱི་ཐོག་ལས་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་ ཨང་གྲངས་ N = ༡༠༠༠ གི་དོན་ལས་ ཨང་གྲངས་བསྡོམས་དེ་ ༡ ཨིནམ་ལས་ ཨང་གྲངས་ཐོན་སྐྱེད་དེ་ ༡ སྦེ་འཐོན་འོང་། ཨང་གྲངས་ N = ༡༥༠ གི་དོན་ལས་ ཨང་གྲངས་བསྡོམས་དེ་ ༦ ཨིནམ་ལས་ ཨང་གྲངས་ཐོན་སྐྱེད་དེ་ ༡༡༠ སྦེ་འཐོན་འོང་། ཨང་གྲངས་ N = ༡༤༧ གི་དོན་ལས་ ཨང་གྲངས་བསྡོམས་དེ་ ༡༢ ཨིནམ་ལས་ ཨང་གྲངས་ཐོན་སྐྱེད་དེ་ ༡༡༠༠ སྦེ་འཐོན་འོང་། འགྱུར་བ་: @N ཨང་གྲངས་ཧྲིལ་བུམ་ཚུའི་དོན་ལས་: ༠ ‰¤ N ‰¤ ༡༠༠༠༠ ཨིན། ཨང་གྲངས་ཐོན་སྐྱེད་: གཉིས་ལྡན་ཨང་གྲངས་ཐིག་ཡིག་ \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུ་མེད་མི་ཐོ་ཡིག་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུ་ཡོད་མི་ཚུ་ ཨང་གྲངས་ཧྲིལ་བུ་སྦེ་བསྡོམས་དགོ། དཔེར་ན་: add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"string གི་རིམ་སྒྲིག་ཅན་གྱི་རྣམ་པ་འདི་ string གི་རིམ་སྒྲིག་ཅན་གྱི་རྣམ་པ་འདི་ཨིན། ཚིག་ཡིག་ཆ་མཉམ་ (བར་སྟོང་གིས་སོ་སོར་བཟོ་སྟེ་) འདི་ ཚིག་ཡིག་གསརཔ་གིས་ཚབ་བཙུགས་ཏེ་ཡོདཔ་དང་ འདི་ནང་ཡིག་འབྲུ་ཆ་མཉམ་ ascii གནས་གོང་ལུ་གཞི་བཞག་སྟེ་ཡར་སེང་གི་རིམ་སྒྲིག་འབདཝ་ཨིན། དྲན་པ་བཟོ་དགོ: ཁྱོད་ཀྱིས་ཚིག་ཡིག་དང་བར་སྟོང་གི་རིམ་སྒྲིག་འདི་ ཚིག་ཡིག་ནང་བཞག་དགོ། དཔེར་ན་: anti_shuffle ((('Hi') གིས་ 'Hi' anti_shuffle ((('hello') གིས་ 'ehllo' anti_shuffle ((('Hello World!!!') གིས་ 'Hello !!!Wdlor' ཟེར་ལོག་གཏང་འོང་།\"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ཁྱོད་ཀྱིས་ཚད་གཉིས་ཅན་གྱི་ཡིག་སྣོད་ཅིག་ཐོབ་སྟེ་ འདི་ཡང་ matrix དང་འདྲ་བ་ཨིན། ཨིན་རུང་ matrix དང་མ་འདྲ་བར་ ཐིག་ཁྲམ་རེ་ནང་ ཀེར་ཐིག་གི་གྱངས་ཁ་མ་འདྲཝ་ཡོདཔ་ཨིན། lst དང་ཨང་གྲངས་ཧྲིལ་ x བྱིན་པ་ཅིན་ ཐིག་ཁྲམ་ནང་ལུ་ ཨང་གྲངས་ཧྲིལ་ x འཚོལ་ཞིནམ་ལས་ ཀེར་ཐིག་གི་ཐོ་ཡིག་སླར་ལོག་འབད་ [(x1, y1), (x2, y2) ...] འདི་བཟུམ་སྦེ་ ཀེར་ཐིག་རེ་རེ་འདི་ ཀོར་ཌི་ནེཊི་ - (གྲལ་ཐིག་ ཀེར་ཐིག་) སྦེ་ འགོ་བཙུགས་ཏེ་ ༠ ཨིན། ཀོར་ཌི་ནེཊི་ཚུ་རིམ་པ་ཡར་སེང་གི་ཐོག་ལས་ འགོ་ཐོག་ལུ་དབྱེ་ཞིབ་འབད་ དེ་ལས་ ཀེར་ཐིག་གི་ ཀེར་ཐིག་ཚུ་རིམ་པ་མར་འབབ་གི་ཐོག་ལས་དབྱེ་ཞིབ་འབད་ དཔེར་ན་: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] ====_row [1], [1, 3, 2, 3) [2, 2]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ཨང་གྲངས་ཆ་མེད་མེན་པའི་ཨེ་རེ་ཅིག་བྱིན་པ་ཅིན་ དབྱེ་བ་ཕྱེ་ཚར་བའི་ཤུལ་ལས་ ཨང་གྲངས་ཆ་མེད་དེ་སླར་ལོག་འབད་འོང་། ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཆ་མེད་དེ་ཡར་འཕར་གྱི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་ནི་ཨིན་པ་ཅིན་ ཨང་གྲངས་བསྡོམས་ ༼ དང་པ་ཨང་གྲངས་གོང་ཚད་དང་ མཇུག་ཨང་གྲངས་གོང་ཚད་༽འདི་ གྱངས་ཁ་མ་རྐྱང་པ་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མེད་དེ་མར་འབབ་ཀྱི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་ནི་ཨིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མེད་དེ་ ཨང་གྲངས་ཆ་མཉམ་ ༼ དང་པ་ཨང་གྲངས་གོང་ཚད་དང་ མཇུག་ཨང་གྲངས་གོང་ཚད་༽ཨིན། དཔེར་ན་: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ཨེ་རེ་འདི་ ཨེ་རེ་སྒྲོམ་སྦེ་ལེན་ཏེ་ ཨེ་རེ་སྒྲོམ་ཅིག་སླར་ལོག་འབད་ནིའི་དོན་ལུ་ ཨེ་རེ་སྒྲོམ་འདི་ ལྡེ་མིག་སྦེ་བསྒྱུར་གཏང་དགོ། ཨེ་རེ་སྒྲོམ་འདི་ ཨང་ཡིག་གཉིས་ལས་ས་སྒོ་གཉིས་ལུ་ སྤོ་བཤུད་འབད་དོ་བཟུམ་སྦེ་ ལྡེ་མིག་བསྒྱུར་གཏང་དགོ། དཔེར་ན་: ཨེ་རེ་སྒྲོམ་ (_hi) གིས་ ཨེ་རེ་སྒྲོམ་ (_lm) སླར་ལོག་འབདཝ་ཨིན། ཨེ་རེ་སྒྲོམ་ (_asdfghjkl) གིས་ ཨེ་རེ་སྒྲོམ་ (_ewhjklnop) སླར་ལོག་འབདཝ་ཨིན། ཨེ་རེ་སྒྲོམ་ (_gf) གིས་ ཨེ་རེ་སྒྲོམ་ (_kj) སླར་ལོག་འབདཝ་ཨིན། ཨེ་རེ་སྒྲོམ་ (_et) གིས་ ཨེ་རེ་སྒྲོམ་ (_ix) སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཅིག་ཐོབ་ཡོདཔ་ཨིན། function next_smallest () འདི་ཐོ་ནང་གི་ ཨང་གྲངས་ཆུང་ཤོས་གཉིས་པ་སླར་ལོག་འབདཝ་ཨིན། དེ་བཟུམ་གྱི་ ཨང་གྲངས་མེད་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱི་ལཱ་འདི་ བཀྲམ་སྟོན་འབད་ཡོད་པའི་གྱངས་ཁ་འདི་རྩིས་རྐྱབ་ནི་དེ་ཨིན། བཀྲམ་སྟོན་འདི་ཚིག་ཡིག་འདི་ \"I\" ཟེར་འགོ་བཙུགས་ནུག ཚིག་ཡིག་འདི་ '.', '?' ཡང་ན་ '!' ཟེར་ས་སྒོ་ཕྱེ་ནུག དཔེར་ན་: >>> is_bored ((\"Hello world\") 0 >>> is_bored ((\"གནམ་ཁ་འདི་ཧོནམོ་ཨིན། ཉིམ་ཤར་ཏེ་འདུག། ང་གནམ་གཤིས་འདི་དགའ་དོ་ཟེར་\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''ཨང་གྲངས་༣ལེན་མི་ལས་འགན་ཅིག་བཟོ་དགོ། ཨང་གྲངས་གཅིག་འདི་ གཞན་གཉིས་བསྡོམས་ཏེ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཚུ་བདེན་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་གཞན་ཚུ་ཆ་མཉམ་ཨང་གྲངས་གང་རུང་ཅིག་ཨིན་པ་ཅིན་ རྫུན་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ any_int (༥,༢,༧) -> True any_int (༣,༢,༢) -> False any_int (༣,༢,༡) -> True any_int (༣,༦,༢,༢) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"བརྡ་འཕྲིན་ཅིག་ལེན་ཏེ་ འདི་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་འབད་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་ལུ་ ཨང་ཡིག་གི་ཚབ་\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུའི་ཐོ་ཡིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་ སྦོམ་ཤོས་ཨང་གྲངས་ཨང་གྲངས་འཚོལ་དགོཔ་དང་ ཨང་གྲངས་ཀྱི་བསྡོམས་ལོག་གཏང་དགོཔ་ཨིན། དཔེ་འབད་བ་ཅིན་: ཇི་ཨེས་ = [༠,༣,༢,༡,༣,༥,༤,༥,༥,༡༨༡,༣༢,༤,༣༢,༣༢,༤,༣] ཐོན་སྐྱེད་འདི་ ༡༠ ཇི་ཨེས་ = [༡,༠,༡,༨༢,༤༥༩༧,༢,༡,༣༠,༡,༢,༡,༢,༤,༢,༥,༡] ཐོན་སྐྱེད་འདི་ ༢༥ ཇི་ཨེས་ = [༡,༣,༡,༣༢,༥༡༠༧,༣༤,༨༣༢༧༨༠༩,༡༦༣,༢༣༣,༣༠,༡,༩༣] ཐོན་སྐྱེད་འདི་ ༡༣ ཇི་ཨེས་ = [༠,༧༢,༣༢,༧༡,༩༩༩,༣༢༦༠,༩༡,༨༣,༥,༦] ཐོན་སྐྱེད་འདི་ ༡༡ ཇི་ཨེས་ = [༠,༨,༡,༢,༧] ཐོན་སྐྱེད་འདི་ ༣ ཇི་ཨེས་ = [༡,༨,༡,༧] ཇི་ཨེས་ = ༡,༨,༩,༩,༩,༩,༩,༩,༩,༩,༡༠,༡༠,༡༠,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༢,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,༡,\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ཚིག་མཛོད་ཅིག་བྱིན་པ་ཅིན་ True སླར་ལོག་འབད་དགོ་པ་ཅིན་ ཀི་བིསི་ཆ་མཉམ་ཡིག་འབྲུ་ཆུང་བ་ ཡང་ན་ ཀི་བིསི་ཆ་མཉམ་ཡིག་འབྲུ་སྦོམ་པ་ཨིན་པ་ཅིན་ False སླར་ལོག་འབད་དགོ་འོང་། ལས་འགན་གྱིས་ False སླར་ལོག་འབད་དགོ་པ་ཅིན་ ཚིག་མཛོད་འདི་སྟོངམ་ཨིན། དཔེར་ན་: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) གིས་ True སླར་ལོག་འབད་དགོ་འོང་། check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) གིས་ False སླར་ལོག་འབད་དགོ་འོང་། check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) གིས་ False སླར་ལོག་འབད་དགོ་འོང་། check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) གིས་ False སླར་ལོག་འབད་དགོ་འོང་། check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"}) གིས་ True སླར་ལོག་འབད་དགོ་འོང་།\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ལས་འགན་ཅིག་ལག་ལེན་འཐབ་ད་ ནུས་མེད་ཨང་གྲངས་ཆ་མཉམ་ལེན་ཏེ་ ཨང་གྲངས་དང་པོ་ n གི་ཨང་གྲངས་ཚུའི་རིམ་པ་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"ཨང་གྲངས་ཆ་མཉམ་གཉིས་ལེན་ཏེ་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཨང་གྲངས་ཚུ་སླར་ལོག་འབད་ནིའི་ལས་འགན་འདི་ཚངམ་སྦེ་བཀོལ་དགོ། ཨང་གྲངས་འདི་རྟག་བུ་རང་ ཆ་གནས་སྦེ་ར་སྡོད་འོང་ཟེར་མནོ་དགོ། དཔེར་ན་ མཉམ་པ་ (༡༤༨,༤༡༢) གིས་ ༡༦ སླར་ལོག་འབད་དགོཔ་ཨིན། མཉམ་པ་ (༡༩,༢༨) གིས་ ༧༢ སླར་ལོག་འབད་དགོཔ་ཨིན། མཉམ་པ་ (༢༠༢༠,༡༨༥༡) གིས་ ༠ སླར་ལོག་འབད་དགོཔ་ཨིན། མཉམ་པ་ (༡༤,༡༥) གིས་ ༢༠ སླར་ལོག་འབད་དགོཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"string s ཅིག་བྱིན་པ་ཅིན་ ཕྲ་རིང་སྦོམ་ཤོས་ཀྱི་གྱངས་ཁ་རྩིས་སྟོནམ་ཨིན། དཔེར་ན་: count_upper (('aBCdEf') གིས་ 1 སླར་ལོག་འབདཝ་ཨིན། count_upper (('abcdefg') གིས་ 0 སླར་ལོག་འབདཝ་ཨིན། count_upper (('dBBE') གིས་ 0 སླར་ལོག་འབདཝ་ཨིན།\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ཨང་གྲངས་ཅིག་ལུ་ངོ་ཚབ་འབད་ཡོད་པའི་གནས་གོང་ (ཐིག་ཁྲམ་) དང་ དེ་དང་ཉེ་བའི་ཨང་གྲངས་ལོག་སྤྲོད་མི་ལས་འགན་ཅིག་བཟོ། ཨང་གྲངས་དེ་ ཨང་གྲངས་གཉིས་ལས་ རྒྱང་ཐག་འདྲ་མཉམ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་ ༠ ལས་ཕར་བསྡུ་འབད། དཔེ་གཞི་ >>> closest_integer (((\"10\") 10 >>> closest_integer (((\"15.3\") 15 དྲན་གསལ་: ཨང་གྲངས་དེ་ ༠ ལས་ཕར་བསྡུ་འབད། འདི་ཡང་ ཁྱོད་ཀྱིས་ཨང་གྲངས་དེ་ ཨང་གྲངས་གཉིས་ལས་ རྒྱང་ཐག་འདྲ་མཉམ་ཡོད་པ་ཅིན་ ཨང་གྲངས་དེ་ ༠ ལས་ཐག་རིང་ཤོས་ཅིག་སྦེ་ལོག་གཏང་དགོ། དཔེར་ན་ closest_integer \" (((14.5\") གིས་ ༡༥ དང་ closest_integer \" ((-14.5\") གིས་ ༡༥ སླར་ལོག་གཏང་དགོ།'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ རྡོ་གི་གནས་ཚད་ n འབད་མི་རྡོ་བསྡམ་དགོཔ་ཨིན། གནས་ཚད་དང་པ་ལུ་ རྡོ་ n ཡོདཔ་ཨིན། གནས་ཚད་ཤུལ་མམ་གྱི་རྡོ་བསྡམ་ནི་དེ་: - n འདི་རྣམ་གྲངས་མེད་པ་ཅིན་ ཤུལ་མམ་གྱི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་ཚངམ་ཅིག་ཨིན། - n འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ ཤུལ་མམ་གྱི་གྱངས་ཁ་འདི་ཆ་སྙོམས་ཨིན། གནས་ཚད་རེ་རེ་ནང་ རྡོ་གི་གྱངས་ཁ་དེ་ཐོ་ཡིག་ཅིག་ནང་སླར་ལོག་འབད། གནས་ཚད་ (i+1) ནང་ལུ་ཡོད་པའི་ཆ་ཤས་ i གིས་ གནས་ཚད་ (i+1) ནང་ཡོད་པའི་རྡོ་བསྡམ་ནི་དེ་ཨིན། དཔེ་གཞི་: >>> make_a_pile ((3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཐིག་ཅིག་བྱིན་ནི་ཨིན་པ་ཅིན་ ཀམ་ཡང་ན་ བར་སྟོང་གིས་སོ་སོ་སྦེ་བཞག་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚིག་ཡིག་ཐིག་འདི་ ཚིག་ཡིག་སྦེ་ཁ་ཕྱེ་སྟེ་ ཚིག་ཡིག་གི་རིམ་པ་ཅིག་ལོག་གཏང་ནི་དེ་ཨིན། དཔེར་ན་: words_string (ངེའི་མིང་འདི་ ཇོན་ཨིན།) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string (ངེའི་མིང་འདི་ ཇོན་ཨིན།) == [\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"འ་ནི་ལས་འགན་འདི་ ནུས་ལྡན་ཨང་གྲངས་ x དང་ y གཉིས་ལེན་ཏེ་ [x, y] ནང་ཡོད་པའི་ཨང་གྲངས་ཆ་མཉམ་སྦོམ་ཤོས་ཅིག་སླར་ལོག་འབདཝ་ཨིན། ག་དེམ་ཅིག་སྦེ་ འདི་བཟུམ་གྱི་ཨང་གྲངས་མེད་པ་ཅིན་ ལས་འགན་འདི་གིས་ -1 སླར་ལོག་འབད་ནི་ཨིན། དཔེར་ན་: choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་གཉིས་ n དང་ m བྱིན་ཡོདཔ་ད་ ཁྱོད་ཀྱི་ལཱ་འདི་ n ལས་ m ཚུན་གྱི་ཨང་གྲངས་ཆ་སྙོམས་རྩིས་རྐྱབ་ནི་ཨིན། ཨང་གྲངས་འདི་ སྦོ་ལོགས་ཁར་ཡོད་པའི་ཨང་གྲངས་ལུ་བསྡུ་སྟེ་ གཉིས་ལྡན་ལུ་བསྒྱུར་དགོ། n འདི་ m ལས་སྦོམ་ཡོད་པ་ཅིན་ -1 སླར་ལོག་འབད། དཔེ་འབད་བ་ཅིན་: rounded_avg(1, 5) => \"0b11\" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => \"0b1111\" rounded_avg(20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ཨང་གྲངས་ཆ་མཉམ་ x གི་ཐོ་ཡིག་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་ཆ་མཉམ་གྱི་ཐོ་ཡིག་འདི་ ཨང་གྲངས་ཆ་མཉམ་ནང་མེད་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་དེ་ དབྱེ་བ་ཕྱེ་སྟེ་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: >>> unique_digits (([༡༥,༣༣,༡༤༢༢,༡]) [༡,༡༥,༣༣] >>> unique_digits (([༡༥༢,༣༢༣,༡༤༢༢,༡༠]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་གྲལ་རིམ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་ཚུ་ ༡ དང་ ༩ གི་བར་ན་ཡོད་པའི་གྲལ་རིམ་ཚུ་དབྱེ་བ་ཕྱེ་སྟེ་ གྲུབ་འབྲས་གྲལ་རིམ་འདི་བསྒྱུར་བཅོས་འབད་ དེ་ལས་ཨང་གྲངས་རེ་རེ་གི་ཚབ་ལུ་ \"གཅིག་\", \"གཉིས་\", \"གསུམ་\", \"བཞི་\", \"ལྔ་\", \"དྲུག་\", \"བདུན་\", \"བརྒྱད་\", \"དགུ་\" ཚུ་དང་བསྟུན་པའི་མིང་བཏགས་དགོ། དཔེར་ན་: arr = [༢,༡,༡,༤,༥,༨,༢,༣] -> དབྱེ་བ་ཕྱེ་ arr -> [༡,༡,༡,༤,༥,༨] -> དབྱེ་བ་ཕྱེ་ arr -> [༨,༥,༤,༣,༢,༡,༡] return [\"བརྒྱད་\", \"བཞི་\", \"གསུམ་\", \"གཉིས་\", \"གཉིས་\", \"གཅིག་\", \"གཅིག་\"] གལ་སྲིད་གྲལ་རིམ་འདི་སྟོངམ་ཡོད་པ་ཅིན་ གྲལ་ཐིག་ཅིག་ལོག་གཏང་: arr = [] return [] གལ་སྲིད་གྲལ་རིམ་ནང་ཨང་གྲངས་རྣམ་རྟོག་ཅན་ཡོད་པ་ཅིན་ སྣང་མེད་བཟོ་: arr = [༡,༡,༡] -> arr - 55 -> arr - 1 , [༡,༡,༥༥] -> reverse arr = [51] return - '༡' ཨིན།\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"ལས་འགན་ f འདི་ n འདི་ཚད་འཛིན་སྦེ་ལེན་ཏེ་ n སྦོམ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་ལོག་བྱིན་ཨིན། འདི་ཡང་ གནས་གོང་ i འདི་ i གི་གནས་གོང་དང་ ཡང་ན་ i ལས་ 1 ལས་ i ཚུན་གྱི་ཨང་གྲངས་ཚུ་བསྡོམས་པ་ཅིན་ i གི་གནས་གོང་དེ་ 1 ལས་འགོ་བཙུགསཔ་ཨིན། i གི་གནས་གོང་དེ་ 1 ལས་ i ཚུན་གྱི་ཨང་གྲངས་ཚུ་སྤེལ་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ f (n) = [1, 2, 6, 24, 15]\"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ཨང་གྲངས་ཚངམ་ n བྱིན་པ་ཅིན་ ཚད་འཛིན་གྱི་ནང་འཁོད་ལུ་ཡོད་པའི་ཆ་མཉམ་དང་ཆ་མཉམ་མེད་པའི་ཨང་གྲངས་ palindromes ཚུ་ཡོད་པའི་ tuple སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་༡: ནང་བསྐྱོད་: 3 ཐོན་སྐྱེད་: (1, 2) འགྲེལ་བཤད་: ཨང་གྲངས་ palindromes ཚུ་ 1, 2, 3. གཅིག་འདི་ཆ་མཉམ་དང་གཉིས་འདི་ཆ་མཉམ་ཨིན། དཔེ་གཞི་༢: ནང་བསྐྱོད་: 12 ཐོན་སྐྱེད་: (4, 6) འགྲེལ་བཤད་: ཨང་གྲངས་ palindromes འདི་ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. བཞི་འདི་ཆ་མཉམ་དང་དྲུག་འདི་ཆ་མཉམ་ཨིན། དྲན་པ་: ༡. <= n <= 10^3 2. tuple གིས་ ཚད་འཛིན་གྱི་ནང་ཆ་མཉམ་དང་ཆ་མཉམ་མེད་པའི་ཨང་གྲངས་ palindromes ཚུ་ལོག་ཡོདཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"གྲངས་སུ་རྩིས་_ཨང་འདི་ ཨང་གྲངས་ཆ་མཉམ་གྱི་གྲལ་རིམ་ཅིག་སྦེ་ལེན་ཏེ་ ཨང་གྲངས་ཚུའི་གྱངས་ཁ་ >0 ཡོད་མི་ ཨེ་རེ་གྲངས་སུ་ལོག་གཏང་འོང་། ཨང་གྲངས་འདི་ ནེ་གཱཊི་ཨིན་པ་ཅིན་ ཨང་གྲངས་དང་པ་གི་ཨང་རྟགས་དེ་ ནེ་གཱཊི་འོང་འོང་། དཔེར་ན་ -123 གིས་ ཨང་རྟགས་ -1, 2, དང་ 3 ཚུ་ཡོད། >>> གྲངས་སུ་རྩིས་_ཨང་ (_) == 0 >>> གྲངས་སུ་རྩིས་_ཨང་ (_) [-1, 11, -11]) == 1 >>> གྲངས་སུ་རྩིས་_ཨང་ (_) [(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ང་བཅས་ནང་ལུ་ ཨེ་རེ་ 'arr' འདི་ ཨང་གྲངས་ N ཡོངས་བསྡོམས་ arr[1], arr[2], ..., arr[N] ཚུ་ཡོད་ ཨེ་རེ་ནང་གི་ཨང་གྲངས་ཚུ་ སྟབས་བདེ་ཏོག་ཏོ་སྦེ་རིམ་སྒྲིག་འབད་འོང་། ཁྱོད་ཀྱི་ལཱ་འདི་ ཨེ་རེ་འདི་ མར་འབབ་འགྱོ་ནི་མེད་པའི་རིམ་སྒྲིག་ནང་ ཐོབ་ཚུགས་ག་འདི་ངེས་འཛིན་འབད་དགོ འདི་གི་དོན་ལུ་ ཁྱོད་ཀྱིས་ ཨེ་རེ་འདི་ནང་ལུ་ ཚར་གྲངས་ཚུ་ ཕྲང་སྒྲིག་འབད་བཏུབ། ཨེ་རེ་གི་ཆ་ཤས་ཆ་མཉམ་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཨེ་རེ་གི་ཆ་ཤས་ཆ་མཉམ་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཨེ་རེ་དེ་གི་མཐའ་མཇུག་དེ་ ཨེ་རེ་དེ་གི་གཞི་གྲངས་ ༠ པའི་ནང་ སྤོ་བཤུད་འབད་བཏངམ་ཨིན། ཁྱོད་ཀྱིས་ ཨེ་རེ་འདི་ནང་ལས་ དབྱེ་བ་ཕྱེ་ཚར་བའི་ཤུལ་ལུ་ སླར་ལོག་གཏང་པ་ཅིན་ True སླར་ལོག་གཏང་པ་ཅིན་ False སླར་ལོག་གཏང་དགོ། གལ་སྲིད་ ཨེ་རེ་འདི་ སྟོངམ་ཨིན་པ་ཅིན་ True སླར་ལོག་གཏང་དགོ། དཔེར་ན་ move_one_(ball_[༣,༤,༥,༡,༢==>True འགྲེལ་བཤད་:True འགྲེལ་བཤད་:True གིས་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ལས་ ༢ ལས་རིམ་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ད་ ཕྲང་སྒྲིག་འབད་བཏངམ་ཨིན། ཨེ་རེ་ལུ་ ཨེ་རེ་འདི་ནང་ལུ་ ཚར་མཐུད་དེ་ཅིག་གིས་ སྤོ་བཤུད་འབད་བཏངམ་ཨིན། (================================================================================================================================================================================================================================================================================================================================================================================\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"འ་ནི་དཀའ་ངལ་འདི་ནང་ལུ་ ཁྱོད་ཀྱིས་གྲངས་ཐོ་གཉིས་ལེན་ཏེ་ དེ་ཚུ་གི་བར་ན་ཆ་ཤས་ཚུ་བརྗེ་སོར་འབད་ཚུགས་ག་འདི་ ངེས་གཏན་བཟོ་ནི་ཨིན་པ་ཅིན་ lst1 དང་ lst2 གྱི་བར་ན་ཆ་ཤས་བརྗེ་སོར་འབད་ནིའི་ཚད་གཞི་མེདཔ་ཨིན། lst1 དང་ lst2 གྱི་ཆ་ཤས་ཆ་ཤས་ཆ་ཤས་ཆ་ཤས་ཚུ་བརྗེ་སོར་འབད་ཚུགས་པ་ཅིན་ \"YES\" སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ \"NO\" སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ནང་བསྐྱོད་ཐོ་ཚུ་སྟོངམ་མེན་པའི་གྲངས་སུ་བཞག་ཡོདཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"བར་སྟོང་སོ་སོ་སྦེ་ཡོད་མི་ཡིག་འབྲུ་ཆུང་བ་ཚུ་ངོ་ཚབ་འབད་ཡོད་པའི་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ཚིག་ཡིག་ལོག་བསྐྱར་དང་བསྟུན་ཏེ་ ཚིག་ཡིག་ལོག་གཏང་། ཚིག་ཡིག་ལེ་ཤ་ཅིག་རང་ འབྱུང་པ་ཅིན་ དེ་ཚུ་ག་ར་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་ ཧིསི་ཊོ་གརམ ((('a b c') == {'a': 1, 'b': 1, 'c': 1} ཧིསི་ཊོ་གརམ ((('a b b a') == {'a': 2, 'b': 2} ཧིསི་ཊོ་གརམ ((('a b c a b') == {'a': 2, 'b': 2} ཧིསི་ཊོ་གརམ ((('b b a') == {'b 4}': ཧིསི་ཊོ་གརམ (('a') == {'b 4}: }}\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ལས་འགན་ལུ་ ཀེར་ཐིག་གཉིས་སོར་དགོཔ་ཨིན། ཀེར་ཐིག་གཉིས་ནང་ ཀེར་ཐིག་ག་ར་ འདྲན་འདྲ་འབད་ཡོད་པའི་ ཀེར་ཐིག་ག་ར་ ཕྱིར་བཏོན་འབད་དགོཔ་ཨིན། དེ་ལས་ ཀེར་ཐིག་འདི་ ཤུལ་ལས་ལོག་འགྱོ་མི་དང་ ཧེ་མ་འགྱོ་མི་གཉིས་ཆ་ར་ འདྲ་མཉམ་སྦེ་ཡོད་ན་ ཀེར་ཐིག་འདི་ ཤུལ་ལས་ལོག་འགྱོ་མི་དང་ ཧེ་མ་འགྱོ་མི་གཉིས་ཆ་ར་ འདྲ་མཉམ་སྦེ་ཡོད་མེད་བརྟག་དཔྱད་འབད་དགོཔ་ཨིན། ཁྱོད་ཀྱིས་ ཀེར་ཐིག་ནང་ ཀེར་ཐིག་དང་ བདེན་/རྫུན་གཉིས་ཆ་ར་ཡོད་མི་འདི་སླར་ལོག་འབད་དགོཔ་ཨིན། དཔེར་ན་ ཀེར་ཐིག་གི་དོན་ལས་ ཀེར་ཐིག་འདི་ \"abcde\", c = \"ae\", གྲུབ་འབྲས་འདི་ (\"bcd\", False) ཀེར་ཐིག་གི་དོན་ལས་ \"abcdef\", ཀེར་ཐིག་གི་དོན་ལས་ \"b\"ཨིནམ་ལས་ ('acdef\", False) ཀེར་ཐིག་གི་དོན་ལས་ \"abcdedcba\", ཀེར་ཐིག་གི་དོན་ལས་ \"abc\", གྲུབ་འབྲས་འདི་ (\"cdedc\", True) ཨིན།\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"string གི་ཐོ་ཡིག་ཅིག་བྱིནམ་ད་ string རེ་རེ་ནང་ཨང་གྲངས་རྐྱངམ་ཅིག་ཡོདཔ་ལས་ ཚིག་ཡིག་གཅིག་ལོག་གཏང་དགོ། ཨང་གྲངས་i འདི་ \"ཨང་གྲངས་i གི་ནང་ཐིག་ནང་ ཨང་གྲངས་i གི་ནང་ཐིག་གི་ཆ་ཤས་ཚུ་\" ཨིནམ་ད་ i ཚུ་ཆ་ཤས་ཚུ་ i པའི་ནང་ཨང་གྲངས་i གི་ནང་ཐིག་གི་ཚབ་ལུ་ \"ཨང་གྲངས་i\" སྦེ་བཞག་དགོ། >>> odd_count['1234567']) [\"str4n 4 of 4nput.\"] >>> odd_count['3',\"111111\"]) [\"str1n 1 of 1nput.\", \"str8n 8 of 8nput.\"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུམ་ཨེ་རེ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཧྲིལ་བུམ་མེན་པའི་ཨེ་རེ་ཆུང་ཤོས་ཅིག་གི་བསྡོམས་དེ་འཚོལ་དགོ། དཔེ་འབད་བ་ཅིན་ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ཁྱོད་ཀྱིས་ཆུ་རྐ་གི་དབྱིབས་འདི་ ཕྲང་ཟུར་སྦེ་བཟོ་ཡོདཔ་ཨིན། ལྡེ་མིག་རེ་རེ་གིས་ཆུ་རྐ་གཅིག་དང་ ལྡེ་མིག་རེ་རེ་གིས་ཆུ་གི་ཚད་གཅིག་འདི་མཚོན་ཆ་ཨིན། ཆུ་རྐ་རེ་རེ་ནང་ཆུ་བཏོན་ནིའི་དོན་ལུ་ ཆུ་རྫིང་གཅིག་ཡོདཔ་དང་ ཆུ་རྫིང་ག་ར་ནང་ཆུ་གི་ཚད་གཅིག་རང་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཆུ་རྫིང་འདི་ཆུ་རྫིང་ཚུ་སྟོངམ་བཟོ་ནི་དེ་ཨིན། ཆུ་རྫིང་ཚུ་མར་ཕབ་འབད་དགོ་པའི་གྱངས་ཁ་འདི་ཨེབ་གཏང་འབད། དཔེ་གཞི་ ༡: ནང་བསྐྱོད་: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ཐོན་སྐྱེད་: དཔེ་གཞི་ ༢: ནང་བསྐྱོད་: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 ཐོན་སྐྱེད་: 5 དཔེ་གཞི་ ༣: ནང་བསྐྱོད་: [[0,0,0], [0,0,0]] bucket_capacity: 5 ཐོན་སྐྱེད་n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"འ་ནི་ལས་རིམ་ནང་ ཁྱོད་ཀྱིས་ ནུས་མེད་ཨང་གྲངས་ཚུ་ ཨང་གྲངས་གཉིས་ལྡན་གྱི་ཐོག་ལས་ ཡར་སེང་འགྱོ་བའི་རིམ་པ་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ། ཨང་གྲངས་འདྲ་མཉམ་ཚུ་ ཌེ་སི་མཱལ་གནས་གོང་ལུ་གཞི་བཞག་སྟེ་ དབྱེ་བ་ཕྱེ་དགོ། འདི་བཟུམ་སྦེ་ལག་ལེན་འཐབ་དགོཔ་ཨིན། >>> sort_array (([༡,༥,༢,༣,༤]) == [༡,༢,༣,༤,༥] >>> sort_array (([༢,༣,༤,༥,༦]) == [༦,༥,༤,༣,༢] >>> sort_array (([༡,༠,༢,༣,༤]) [༠,༡,༢,༣,༤] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"string s དང་ རང་བཞིན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཁྱོད་ཀྱིས་ string s ལས་ ཚིག་ཡིག་ཆ་མཉམ་ཀྱི་ཐོ་ཅིག་སླར་ལོག་འབད་ནིའི་འགན་ཁུར་ཐོབ་ཡོདཔ་ད་ འདི་ནང་ལུ་ ཚིག་ཡིག་ཆ་མཉམ་ནང་ མན་ངག་ n ཡོད་མི་ལུ་བརྟེན་ ཚིག་ཡིག་ཚུ་ string s ནང་གསལ་འབྱུང་འོང་། string s དེ་སྟོངམ་ཨིན་པ་ཅིན་ ལས་འགན་འདི་གིས་ སྟོང་པའི་ཐོ་ཅིག་སླར་ལོག་འབད་འོང་། དྲན་པ་བཟོ་ནི། ཁྱོད་ཀྱིས་འཛུལ་ཞུགས་ཀྱི་ string དེ་ནང་ལུ་ ཡིག་འབྲུ་དང་ བར་སྟོང་རྐྱངམ་ཅིག་ཡོད་ཟེར་སླབ་འོང་། དཔེ་འབད་བ་ཅིན་: select_words \"Mary had a little lamb\", 4) ==> [\"little\"] select_words \"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words \"simple white space\", 2) ==> [] select_words \"Hello world\", 4) ==> [\"world\"] select_words \"Uncle sam\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ཁྱོད་ཀྱིས་ཚིག་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ ཚིག་གི་གཡས་ཁ་ཐུག་ལས་ ཟུར་སྒྲོམ་གཉིས་ཀྱི་བར་ན་ཡོད་མི་ ཕྲ་རིང་འདི་འཚོལ་ནི་དེ་ཨིན། འགོ་བཙུགས་དང་མཇུག་གི་ཕྲ་རིང་ཚུ་རྩིས་མི་བཏུབ། ཁྱོད་ཀྱིས་ཕྲ་རིང་ཅིག་མ་ཐོབ་པ་ཅིན་ སྟོངམ་ཐིག་ཁྲམ་ཅིག་ལོག་གཏང་། ཁྱོད་ཀྱིས་བྱིན་ཡོད་པའི་ཐིག་ཁྲམ་ནང་ལུ་ ཨིང་ལིཤ་ཡི་གུ་རྐྱངམ་གཅིག་ཡོད་ཟེར་ཆ་བཞག་འོང་། དཔེ་འབད་བ་ཅིན་: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"UULL\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ཁྱོད་ཀྱིས་ཐིག་ཁྲམ་གཉིས་ཐོབ་སྟེ་ ཐིག་ཁྲམ་གཉིས་ཆ་ར་ལུ་ སྒོ་སྒྲིག་ '(' ཡང་ན་ སྒོ་སྒྲིག་ ') 'རྐྱངམ་ཅིག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ཐིག་ཁྲམ་གཉིས་རིམ་པ་གཅིག་ནང་ལུ་མཐུད་དེ་ཡོད་པ་ཅིན་ གྲུབ་འབྲས་ཐིག་ཁྲམ་དེ་ལེགས་ཤོམ་འོང་ག་བརྟག་དཔྱད་འབད་དགོཐབས། ཐིག་ཁྲམ་ S འདི་ལེགས་ཤོམ་སྦེ་བརྩི་བ་ཅིན་ ཐིག་ཁྲམ་ S ནང་ཐིག་ཁྲམ་ག་ར་མཉམ་བསྡོམས་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ལེགས་ཤོམ་ཨིན། དཔེར་ན་:ཐིག་ཁྲམ་ '((()) 'འདི་ལེགས་ཤོམ་ཨིན་པའི་ཁར་ ཐིག་ཁྲམ་ '()) 'འདི་ལེགས་ཤོམ་མེན། ཐིག་ཁྲམ་ལེགས་ཤོམ་བཟོ་ནིའི་ལམ་ཡོད་པ་ཅིན་ 'Yes' སླར་ལོག་གཏང་། དེ་མེན་པ་ཅིན་ 'No' སླར་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"ཨེ་རེ་ arr འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་དང་ ནུས་པ་ཅན་ཨང་གྲངས་ k ཨིནམ་སྦེ་བྱིན་པ་ཅིན་ ཨེ་རེ་ k གི་རིང་ཚད་དང་ ཨེ་རེ་ནང་གི་ཨང་གྲངས་ k གི་ཚད་གཞི་ཚུ་ཡོད་པའི་དབྱེ་བ་ཕྱེ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་སླར་ལོག་འབདཝ་ཨིན། དཔེ་གཞི་༡: ཨེན་པུཊི་: arr = [-3, -4, 5], k = 3 ཨང་གྲངས་ཐོན་ཐངས་: [-4, -3, 5] དཔེ་གཞི་༢: ཨེན་པུཊི་: arr = [4, -4, 4], k = 2 ཨང་གྲངས་ཐོན་ཐངས་: [4, 4] དཔེ་གཞི་༣: ཨེན་པུཊི་: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ཨང་གྲངས་ཐོན་ཐངས་: [2] དྲན་པ་བཟོ་ནི། ཨེ་རེ་གི་རིང་ཚད་དེ་ [1, 1000] གི་བར་ན་ལུ་ཡོདཔ་ཨིན། ཨེ་རེ་ནང་གི་ཆ་ཤས་ཚུ་ [-1000, 1000] གི་བར་ན་ལུ་ཡོདཔ་ཨིན། ཨེ་རེ་ནང་ཆ་ཤས་ཚུ་ ༠ <= k <= len ((arr) ཨིན།\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ཨང་གྲངས་ཆ་མཉམ་གྱི་ཐོ་ཡིག་སྟོངམ་མེན་པའི་སྐབས་ གྱངས་ཁ་ཆ་མཉམ་ནང་ཡོད་པའི་ཆ་མཉམ་གྱི་ཆ་མཉམ་གྱི་བསྡོམས་སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་ ཐབས་ལམ་ (([5, 8, 7, 1]) ==> 12 ཐབས་ལམ་ (([3, 3, 3, 3, 3]) ==> 9 ཐབས་ལམ་ (([30, 13, 24, 321]) ==>0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ཨང་གྲངས་མཐའ་དག་ arr དང་ ཨང་གྲངས་མཐའ་དག་ k ཚུ་ཡོད་པའི་ ཨེ་རེ་མེད་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་མཐའ་དག་ k གི་ ཨང་གྲངས་འགོ་དང་པ་ལས་ཨང་གྲངས་གཉིས་ལས་ལྷག་སྟེ་མེད་མི་ཚུ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: ཨེན་པུཊི་: arr = [111,21,3,4000,5,6,7,8,9], k = 4 ཨོཊཔུཊི་: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"གྲུབ་འབྲས་འདི་ ནུས་ལྡན་ཨང་གྲངས་ n བྱིན་པ་ཅིན་ ཨང་གྲངས་རྣམ་རྟོག་ཚུ་ཡོད་པའི་ཐོ་ཡིག་ཅིག་ལོག་གཏང་། ཀོ་ལ་ཊ་ཛར་གྱི་དཔེར་བརྗོད་འདི་ རྩིས་རིག་ནང་ལུ་ དཔེར་བརྗོད་ཅིག་ཨིནམ་ད་ འདི་ཡང་ འོག་གི་བཟུམ་སྦེ་གསལ་བཀོད་འབད་ཡོད་པའི་རིམ་པ་ཅིག་ལུ་དམིགས་ཏེ་ཨིན། ནུས་ལྡན་ཨང་གྲངས་ n ཅིག་ལས་འགོ་བཙུགས་ཏེ་ དེ་ལས་རིམ་པ་རེ་རེ་བཞིན་དུ་ སྔོན་མའི་རིམ་པ་ལས་ འཐོབ་ནི་ཨིནམ་ད་ གལ་སྲིད་ སྔོན་མའི་རིམ་པ་འདི་ཆ་སྙོམས་ཨིན་པ་ཅིན་ ཤུལ་མའི་རིམ་པ་འདི་ སྔོན་མའི་རིམ་པ་ཕྱེད་ཀ་ཨིན། གལ་སྲིད་ སྔོན་མའི་རིམ་པ་འདི་ དབྱེ་བ་ཨིན་པ་ཅིན་ ཤུལ་མའི་རིམ་པ་འདི་ སྔོན་མའི་རིམ་པ་ལས་ 3 ཚར་དང་ 1 སྦེ་འཐོན་འོང་། དཔེར་བརྗོད་འདི་ n གི་གནས་གོང་ག་དེ་ཅིག་ཨིན་རུང་རིམ་པ་འདི་ ཨ་རྟག་ར་ 1 ལུ་ལྷོད་འོང་། དྲན་པ་: 1. ཀོ་ལ་ཊ་ཛར་ (༡) འདི་ [1]ཨིན། 2. ལོག་ཐོབ་པའི་ཐོ་ཡིག་འདི་ ཡར་སེང་རིམ་པ་ནང་རིམ་པ་བཏང་སྟེ་ལོག་གཏང་། དཔེར་ན་ get_odd_collatz (༥) གིས་ [༡,༥] སླར་ལོག་འབདཝ་ཨིན། 5 གི་དོན་ལུ་ ཀོ་ལ་ཊ་ཛར་གྱི་རིམ་པ་འདི་ [༥,༨,༡༦,༤,༢,༡]ཨིནམ་ལས་ དབྱེ་བ་ཚུ་ཨང་གྲངས་ ༡ དང་ ༥ རྐྱངམ་ཅིག་ཨིན།\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ཁྱོད་ཀྱིས་ལས་འགན་ཅིག་འབྲི་དགོཔ་ཨིན་ དེ་གིས་ཚེས་གྲངས་ཐིག་ཁྲམ་ཅིག་ལུ་ ཆ་གནས་འབད་ཞིནམ་ལས་ ཚེས་གྲངས་དེ་ ཆ་གནས་ཡོད་པ་ཅིན་ True སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ False འོག་གི་བཀོད་རྒྱ་ཚུ་ཆ་མཉམ་ར་ཆ་བཞག་པ་ཅིན་ ཚེས་གྲངས་དེ་ ཆ་གནས་འབདཝ་ཨིན། ༡. ཚེས་གྲངས་ཐིག་ཁྲམ་དེ་ སྟོངམ་མེདཔ་ཨིན། ༢. ཚེས་གྲངས་ཀྱི་གྱངས་ཁ་དེ་ ཟླཝ་ ༡,༣,༥,༧,༨,༡༠,༡༢ གི་དོན་ལུ་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༡ ལས་ལྷག་སྟེ་མེདཔ་ཨིན། དེ་ལས་ཉིནམ་གི་གྱངས་ཁ་དེ་ ཟླཝ་ ༤,༦,༩,༡༡ གི་དོན་ལུ་ ༡ ལས་ཉུང་ ཡང་ན་ ༣༠ ལས་ལྷག་སྟེ་མེདཔ་ཨིན། དེ་ལས་ཉིནམ་གི་གྱངས་ཁ་དེ་ ཟླཝ་ ༢ གི་དོན་ལུ་ ༢༩ ལས་ཉུང་ ཡང་ན་ ༡ ལས་ལྷག་སྟེ་མེདཔ་ཨིན། ༣. ཟླཝ་དེ་ ༡ ལས་ཉུང་ ཡང་ན་ ༡༢ ལས་ལྷག་སྟེ་མེདཔ་ཨིན། ༤. ཚེས་གྲངས་དེ་ མན་ངག་ནང་ཡོད་དགོཔ་ཨིན། དཔེར་ན་: valid_date (༡༠:༣༡-༡༠༠༠) => valid_date (༡༥:༠༡-༢༠༠༡) => false (༡༥:༠༤-༢༠༠) => valid_date (༡༠:༠༦-༢༠༠) => false (༡༠:༠༤-༢༠༠-༢༠༠)\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ཚིག་ཡིག་གི་ཐིག་ཁྲམ་ཅིག་བྱིན་པ་ཅིན་ ཚིག་ཡིག་ཚུ་ས་སྟོང་ནང་ལུ་བགོ་བཤའ་རྐྱབ་སྟེ་ལོག་གཏང་། ཚིག་ཡིག་ནང་ལུ་ས་སྟོང་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཀམ་པ་ ',' ལུ་བགོ་བཤའ་རྐྱབ་དགོ། ཀམ་པ་མེད་པ་ཅིན་ ཁྱོད་ཀྱིས་ ཨེབ་རྟ་ནང་ཡིག་འབྲུ་ཆུང་བའི་གྱངས་ཁ་འདི་ གྱངས་ཁ་མ་འདྲཝ་སྦེ་ལོག་གཏང་དགོ། ord('a') = 0, ord'(b') = 1, ... ord('z') = 25 དཔེ་འབད་བ་ཅིན་ split_words ((\"Hello world!\") â -> [\"Hello\", \"world!\"] split_words ((\"Hello,world!\") â -> [\"Hello\", \"world!\" split_words\"(abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་ཡར་སེང་གི་རིམ་པ་ལུ་དབྱེ་བ་ཕྱེ་རུང་ལོག་གཏང་། གལ་སྲིད་ཐོ་ནང་ ཨང་གྲངས་གཅིག་མཚུངས་ཐེངས་གཅིག་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ རྫུན་ལོག་གཏང་། ནུས་མེད་ཨང་གྲངས་དང་ཧྲིལ་ཨང་རྐྱངམ་ཅིག་ར་ལེན་དགོ། དཔེ་འབད་བ་ཅིན་ is_sorted (༡,༢,༣,༤,༥) ཨིན།'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ཁྱོད་ཀྱིས་བར་སྟོང་གཉིས་ཐོབ་ཡོདཔ་དང་ འདི་ནང་ལུ་བར་སྟོང་རེ་རེ་འདི་ ཨང་གྲངས་ཆ་མཉམ་ཨིན། དཔེར་ན་ བར་སྟོང་ = (འགོ་བཙུགས་,མཇུག་) = (1, 2) ཟེར་ཡོདཔ་ཨིན། བར་སྟོང་འདི་བསྡམས་ཡོདཔ་ལས་ བར་སྟོང་ (འགོ་བཙུགས་,མཇུག་) འདི་ འགོ་བཙུགས་དང་མཇུག་གཉིས་ཆ་ར་ཚུད་དེ་ཡོདཔ་ཨིན། བར་སྟོང་རེ་རེ་ལུ་ འདི་གི་འགོ་འདི་ཉུང་བ་ ཡང་ན་མཇུག་དང་འདྲན་འདྲ་སྦེ་ར་ཆ་བཞག་ཡོདཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ བར་སྟོང་གཉིས་ཀྱི་བར་སྟོང་གི་ཕྲང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་ན་མེན་ན་བརྟག་དཔྱད་འབད་དགོཔ་དེ་ཨིན། དཔེར་ན་ བར་སྟོང་ (1, 3), (2, 4) གི་བར་སྟོང་གི་ཕྲང་ཚད་འདི་ (2, 3) འདི་ཡང་ བར་སྟོང་གི་ཕྲང་ཚད་དེ་ 1ཨིནམ་དང་ འདི་ཡང་ བར་སྟོང་གི་ཕྲང་ཚད་མེན་ན། གལ་སྲིད་བར་སྟོང་གི་ཕྲང་ཚད་དེ་ ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ \"YES\"ལོག་གཏང་། དེ་མེན་པ་ཅིན་ \"NO\"ལོག་གཏང་། གལ་སྲིད་བར་སྟོང་གཉིས་དེ་ཅིག་ཁར་མ་བསྡོམས་པ་ཅིན་ \"NO\"ལོག་གཏང་། [input/output] དཔེ་གཞི་:བར་སྟོང་ (((1, 2), (2, 3) ==> \"བར་སྟོང་-1, ((1), 4) ==> \"བར་སྟོང་\", (<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཆ་མཉམ་གྱི་རིམ་པ་ཅིག་ཐོབ་སྟེ་ ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཆ་མཉམ་གྱི་ཚད་གཞི་ཚུ་ ཨང་གྲངས་ཆ་མཉམ་གྱི་རྟགས་མཚན་ཚུ་གི་ཐོན་རིམ་དང་འཕྱདཔ་ད་ ལོག་བྱིན་དགོ་པའི་དྲན་གསོ་འབད་: སྟོངམ་རིམ་པ་གི་དོན་ལུ་སླར་ལོག་འབད་མི་ཅིག་སླར་ལོག་མི་འབད་ དཔེར་ན་: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) ==  \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"གྲལ་ཐིག་ནང་གྲལ་ཐིག་དང་ཐིག་ཁྲམ་ (N >=2) དང་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ k ཡོད་པའི་སྐབས་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་རེ་རེ་ནང་ གནས་གོང་ཅིག་ཡོདཔ་ཨིན། [༡, N * N] ནང་ཡོད་པའི་ཨང་གྲངས་ཆ་མཉམ་གྱིས་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་ནང་ལུ་ ཚར་གཅིག་རང་མཐོང་འོང་། ཁྱོད་ཀྱིས་ གྲལ་ཐིག་ནང་རིང་ཚད་ k གི་ཉུང་མཐའ་ལམ་འདི་འཚོལ་དགོཔ་ཨིན། ཁྱོད་ཀྱིས་སྒོ་སྒྲིག་གང་རུང་ལས་འགོ་བཙུགསཔ་ཨིན། དེ་ལས་རིམ་པ་རེ་ནང་ ཁྱོད་ཀྱིས་ སྦོ་ལོགས་ཁར་ཡོད་པའི་སྒོ་སྒྲིག་གང་རུང་ལུ་འགྱོ་ཚུགས། གཞན་སྐད་ཅིག་ནང་འབད་བ་ཅིན་ ཁྱོད་ཀྱིས་ ཕྲ་རིང་ k གི་ལམ་འདི་ ཀ་མིག་ (ཁག་ཆེཝ་སྦེ་མི་ཁྱད་པར་ཅན་) ཚུ་བལྟ་ནི་ཨིནམ་སྦེ་དྲན་གསོ་འབད། ཁྱོད་ཀྱིས་ གྲལ་ཐིག་ནང་ལས་འཐོན་མི་ཚུགས། ལམ་རིམ་ A (རིང་ཚད་ k) འདི་ལམ་རིམ་ B (རིང་ཚད་ k) ལས་ཆུང་བའི་གྲངས་སུ་རྩིས་སྟོནམ་ཨིན། གལ་སྲིད་ A དང་ B ལུ་ཡོད་པའི་གནས་གོང་ཚུ་རིམ་སྒྲིག་འབད་བའི་ཤུལ་ལས་ (འ་ནི་ལས་ཀ་ལུ་ l_stA དང་ l_stBཟེར་སླབ་ཨིན།) འབད་བ་ཅིན་ ཕྲ་རིང་ཚད་ k ཚུ་ཚིག་ཡིག་གི་ཐད་ཁར་ཉུང་མཐའ་ཅིག་མཐོང་འོང་། གཞན་སྐད་ཅིག་ནང་འབད་བ་ཅིན་ ནང་ཐིག་ནང་ནང་ནང་ནང་མཐའ་མཚམས་ཅིག་ཡོད་མི་ཚུ་དང་འབྲེལ་མཐུད་འབད་ཚུགས། དཔེར་ན་ k = [A1, j_stA=4, j_stA=1, j_stB] ཕྱིར་འཐོན་ = [1, j_st=1 ༨, j_[༡, j_[༢, j_[༡] = j_[༡, [༧, j_༨, j_༦] ཚུ་ནང་ཐིག་ཁྲམ་ = k=1, [༡, j_༣] ཚུ་ནང་ཐིག་ཁྲམ་ཚུའི་ནང་གནས་གོང་གི་རིམ་པ་ཡོད་མེད་མེད་མེད་པ་ཅིན་ གྲལ་ཐིག་གི་སྒོ་སྒྲིག་གི་གནས་གོང་འདི་ནང་ཡོད་པའི་གནས་གོང་འདི་རང་ཨིན། འདི་བཟུམ་ཅིག་ལུ་ཡོད་པའི་གནས་གོང་འདི་ཐོབ་མི་ཐོབ་ཨིན།\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"རྩིས་རིག་པ་ཚུ་གིས་ དུས་རབས་གཉིས་དང་པའི་ནང་ ཕི་བོ་ན་ཅིའི་རིམ་པ་ལུ་ ཡོན་ཏན་ཡོདཔ་ཨིན་རུང་ མི་སེར་ཚུ་གིས་ མ་ཤེས་མི་དེ་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ཨིནམ་ད་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་འདི་ གྱངས་ཁ་སྦེ་ར་ གསལ་བཀོད་འབད་ཡོདཔ་ད་ དཔེར་ན་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ནང་ ཨང་གྲངས་དང་པོ་ཨང་གྲངས་དང་པ་དང་པ་དང་གཉིས་པ་ ཨང་གྲངས་སོ་སོ་ཨིན། དཔེར་ན་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ནང་ ཨང་གྲངས་དང་པོ་ཨང་གྲངས་སོ་སོ་ཨིན། དཔེར་ན་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ནང་ ཨང་གྲངས་དང་པོ་ཨང་གྲངས་དང་གཉིས་པ་ ཨང་གྲངས་སོ་སོ་ཨིན། དཔེར་ན་ ཏིརི་བོ་ན་ཅིའི་རིམ་པ་ནང་ ཨང་གྲངས་དང་པོ་ཨང་གྲངས་དང་གསུམ་པ་ ཨང་གྲངས་སོ་སོ་ཨིན།\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ཨང་གྲངས་ཚངམ་ཅིག་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་གྱི་གྱངས་ཁ་འདི་ 0 སླར་ལོག་འབདཝ་ཨིན། དཔེར་ན་ ཨང་གྲངས་ཆ་མཉམ་འདི་ཆ་མཉམ་ཨིན། དཔེར་ན་:ཨང་གྲངས་ (༡) == ཨང་གྲངས་ (༡) == ཨང་གྲངས་ (༠) == ཨང་གྲངས་ (༢༣༥) == ༡༥ \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ནང་ཐིག་ནང་ ཀེར་ཐིག་གི་ལྡེ་མིག་རྐྱངམ་ཅིག་ཡོད་མི་ ཀེར་ཐིག་ཅིག་སྦེ་ལེན་པའི་ལས་འགན་ཅིག་བཟོ། ལས་འགན་འདི་ True སླར་ལོག་འབད་དགོ་པ་ཅིན་དང་ གལ་སྲིད་ལྡེ་མིག་གི་ལྡེ་མིག་ཉུང་ཤོས་ཅིག་ཡོད་པའི་ལྡེ་མིག་ཚུའི་རིམ་པ་ཅིག་ཡོད་པ་ཅིན་རྐྱངམ་གཅིག་ཨིན། is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ཁྱོད་ཀྱིས་ཨང་གྲངས་ཀྱི་ཐོ་ཅིག་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་ཐོ་ནང་ཡོད་པའི་ཨང་གྲངས་ཀྱི་གྲུ་བཞི་བསྡོམས་དེ་ལོག་གཏང་དགོཔ་དང་ དང་པ་རང་ཐིག་ཁྲམ་ནང་གི་ཆ་ཤས་རེ་རེ་ལུ་ཡར་མཐོ་སའི་ int{\\displaystyle \\in}} སྦེ་འཁོར་གཏང་དགོཔ་དེ་གལ་ཆེ། དཔེ་འབད་བ་ཅིན་: lst = [1,2,3] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༤ གི་དོན་ལུ་ lst = [1,4,9] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༩༨ གི་དོན་ལུ་ lst = [1,3,5,7] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༨༤ གི་དོན་ལུ་ lst = [1.4,4.2,0] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༢༩ གི་དོན་ལུ་ lst = [-2.4,1,1] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༦ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༤ གི་དོན་ལུ་ lst = [1,2,3] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༩༨ གི་དོན་ལུ་ lst = [1,4,5,7] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༢༩ གི་དོན་ལུ་ lst = [2,4,1,1] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༦ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༢༩ གི་དོན་ལུ་ lst = [2,4,1,1] གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ གི་དོན་ལུ་ཐོན་སྐྱེད་འདི་ ༡༨ ཨིན།\"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''གྲལ་ཐིག་གི་མཇུག་གི་ཡིག་འབྲུ་འདི་ ཨེཕ་བི་གི་ཡིག་འབྲུ་ཅིག་ཨིན་པ་ཅིན་ True སླར་ལོག་འབད་ཞིནམ་ལས་ རྫུན་བཟོ། འདི་མེན་པ་ཅིན་ རྫུན་བཟོ། དཔེར་ན་: \"ཚིག་\" འདི་ ཡིག་འབྲུ་སྡེ་ཚན་ཅིག་ཨིན་པ་ཅིན་ བར་སྟོང་གིས་སོ་སོ་སྦེ་བཞག་ཡོདཔ་ཨིན། དཔེ་འབད་བ་ཅིན་: check_if_last_char_is_a_letter ((\"apple pie\") â -> False check_if_last_char_is_a_letter ((\"apple pi e\") â -> True check_if_last_char_is_a_letter ((\"apple pi e\") â -> False check_if_last_char_is_a_letter ((\"apple pi e\") â -> False check_if_last_char_is_a_letter ((\"\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"རྩ་སྒྲིག་ཅིག་བཟོ་སྟེ་ དེ་གི་ནང་དོན་འདི་ སྦོམ་ཤོས་ཅིག་སླར་ལོག་འབདཝ་ཨིན། རྩ་སྒྲིག་དེ་ སྦོམ་ཤོས་ཅིག་དང་ སྦོམ་ཤོས་ཅིག་དང་ འདྲན་འདྲ་མིན་པ་ཅིན། གལ་སྲིད་ རྩ་སྒྲིག་དེ་མེད་པ་ཅིན་ -༡ སླར་ལོག་འབདཝ་ཨིན། གྲལ་ཐིག་ནང་ འདྲ་མཚུངས་ཅན་གྱི་གནས་གོང་ཚུ་མི་ཚུད་འོང་། དཔེར་ན་ can_arrange ([1,2,4,3,5]) = 3 can_arrange ([1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ལས་འགན་ཅིག་བཟོ། འདི་ནང་ལུ་ 'a'འདི་ ནུས་མེད་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་སྦོམ་ཤོས་དང་ 'b'འདི་ ལྗིད་ཚུབ་ཨང་གྲངས་ཚུ་གི་གྲས་ལས་ཆུང་ཤོས་ཨིན། ནུས་མེད་དང་ ལྗིད་ཚུབ་ཨང་གྲངས་མེད་པ་ཅིན་ དེ་ཚུ་ ནུས་མེད་སྦེ་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ལས་འགན་ཅིག་བཟོ་ཞིནམ་ལས་ ཨང་གྲངས་མཐའ་དག་དང་ ཨང་གྲངས་ལྡེ་མིག་ ཡང་ན་ ཨང་གྲངས་ངོ་མ་གི་ཨང་གྲངས་ཚུ་སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་མཐའ་དག་ཚུ་ཆ་མཉམ་སྦེ་ཡོད་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། ཨང་གྲངས་མཐའ་དག་ཚུ་ ཨང་གྲངས་སྦེ་སླར་ལོག་འབད་བ་ཅིན་ ཚད་འཛིན་འབད་མ་བཏུབ་ཨིན།\"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"དཔེ་གཞི་འདི་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་_ཆ་མཉམ་\"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"Brazil གི་གནས་གོང་འདི་ brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! འདི་ནང་ལུ་ n > 0 དཔེར་ན་: >>> special_factorial ((4) 288 ལས་འགན་འདི་ ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་རྩིས་སྟོན་འབད་ཡོདཔ་དང་ འདི་ལུ་ གནས་གོང་ཧྲིལ་བུམ་ཅིག་ལོག་སྤྲོད་དགོཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"དཔེ་གཞི་༣་ཅིག་བྱིན་པ་ཅིན་ ནང་འཁོད་ས་སྒོ་ག་ར་ འོག་ལུ་ཡོད་མི་ཡིག་འབྲུ་ཚུ་དང་ཚབ་བཙུགས། དེ་ལས་ ཚིག་ཡིག་སྣོད་ཅིག་ནང་ ཤུལ་མམ་གྱི་ས་སྒོ་གཉིས་ལས་ལྷག་སྟེ་ཡོད་པ་ཅིན་ ཤུལ་མམ་གྱི་ས་སྒོ་ག་ར་ - fix_spaces (((\"དཔེ་གཞི་\") == \"དཔེ་གཞི་\" fix_spaces (((\"དཔེ་གཞི་1\") == \"དཔེ་གཞི་_1\" fix_spaces (((\"དཔེ་གཞི་2\") == \"_དཔེ་གཞི་_2\" fix_spaces (((\"དཔེ་གཞི་ 3\") == \"_དཔེ་གཞི་-3\" དང་གཅིག་ཁར་ཚབ་བཙུགས།\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ཡིག་སྣོད་མིང་འདི་ འོས་ལྡན་ཨིན་པ་ཅིན་ ཡིག་སྣོད་མིང་འདི་ ལེན་ཞིནམ་ལས་ ལེན་གཏང་ནི་དང་ གཞན་འབད་བ་ཅིན་ ལེན་གཏང་མི་བཏུབ་ཟེར་ལོག་གཏང་མི་ལས་འགན་ཅིག་བཟོ་དགོ། ཡིག་སྣོད་མིང་འདི་ འོས་ལྡན་སྦེ་བརྩི་ནི་ཨིན་པ་ཅིན་ འོག་གི་གནས་སྟངས་ཚུ་ཆ་མཉམ་ནང་ འོས་ལྡན་སྦེ་བརྩི་དགོ། - ཡིག་སྣོད་མིང་ནང་ ཨང་གྲངས་གསུམ་ལས་བརྒལ་མི་བཏུབ་ ('0'-'9') - ཡིག་སྣོད་མིང་ནང་ གནད་སྡུད་གཅིག་རང་ཡོད་ '.' - གནད་སྡུད་ཀྱི་ཧེ་མ་ཡོད་པའི་ཡིག་སྣོད་དེ་ སྟོངམ་མ་བཞག་དགོཔ་མ་ཚད་ ཨང་ཡིག་འདི་ ལི་ཊེན་ཨལ་ཕ་ཊི་ཡིག་འབྲུ་ ('a'-'z' དང་ 'A'Z') ཚུ་དང་ འགོ་བཙུགས་དགོ། - གནད་སྡུད་ཀྱི་ཤུལ་ལས་ཡོད་པའི་ཡིག་སྣོད་འདི་ འོག་གི་ཡིག་འབྲུ་ཚུ་ནང་ལས་ གཅིག་འབད་དགོཔ་ཨིན། དཔེར་ན་: ['txt', 'exe', 'lld'] དཔེ་གཞི་: file_name_check\"{\"example.txt\"} # => 'Yes'_name_file_check\"{\"example.dll1\") # => 'No' (མིང་འདི་ ལི་ཊེན་ཨལ་ཕ་ཊི་ཡིག་འབྲུ་ཅིག་གིས་ འགོ་བཙུགས་དགོཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"འ་ནི་ལས་ཀ་འདི་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་ཅིག་ འཐོབ་འོང་། ཐོ་ཡིག་ནང་གི་ཡིག་སྣོད་ག་ར་གི་དོན་ལུ་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་འདི་ གྱངས་ཁ་གསུམ་ལས་མང་པ་ཅིན་ ཆ་སྙོམས་བཟོ་འོང་། དེ་ལས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་ཡིག་འདི་ ཨང་གྲངས་བཞི་ལས་མང་བ་འབད་བ་ཅིན་ ཟུར་བཟོ་འོང་། ཐོ་ཡིག་དེ་ ཨང་གྲངས་གསུམ་ལས་མང་བ་མེན་པ་ཅིན་ ལས་འགན་འདི་གིས་ ཐོ་ཡིག་ནང་གི་ཡིག་སྣོད་ཚུ་ བསྒྱུར་བཅོས་མི་འབད་འོང་། འདི་གི་ཤུལ་ལས་ ལས་འགན་གིས་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་རྩིས་གཞི་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་: lst = [1,2,3] ཕྱིར་འཐོན་འདི་ ༦ འབད་ནི་ལུ་ lst = [] ཕྱིར་ཐོན་འདི་ ༠ འབད་ནི་ལུ་ lst = [-1,-5,2,-1,-5] ཕྱིར་ཐོན་འདི་ -126 འབད་ནི་ཨིན།\"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ཁྱོད་ཀྱིས་ཚིག་ཡིག་ཅིག་ངོ་ཚབ་འབད་ཡོད་པའི་ string འདི་ཐོབ་ནི་ཨིན་པ་ཅིན་ ཚིག་ཡིག་ནང་ལུ་ བར་སྟོང་གིས་སོ་སོར་བཟོ་མི་ཚིག་ཚུ་ཡོདཔ་དང་ ཁྱོད་ཀྱིས་ ཚིག་ཡིག་འདི་སླར་ལོག་འབད་དགོ་ནི་ཨིན་པ་ཅིན་ ཚིག་ཡིག་འདི་ འགོ་ཐོག་ཚིག་ཡིག་ནང་ལས་ཨིན་པའི་ ཚིག་ཡིག་ཚུ་ཡོད་མི་འདི་ཡང་ ཚིག་ཡིག་གསརཔ་ནང་ཡོད་པའི་ ཚིག་ཡིག་གི་རིམ་པ་ཚུ་ འགོ་ཐོག་ཚིག་ཡིག་དང་འདྲན་འདྲ་འབད་དགོཔ་ཨིན། དཔེ་གཞི་ ༡: ནང་བསྐྱོད་: ཚིག་ཡིག་ = \"This is a test\" ཕྱི་ཐོན་: \"is\" དཔེ་གཞི་ ༢: ནང་བསྐྱོད་: ཚིག་ཡིག་ = \"lets go for swimming\" ཕྱི་ཐོན་: \"go for\" བཀག་འཛིན་: * ༡ <= len(sentence) <= ༡༠༠ * ཚིག་ཡིག་ནང་ཡིག་འབྲུ་རྐྱངམ་ཅིག་ ཡོདཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ཁྱོད་ཀྱི་ལཱ་འདི་ x * n འདི་ཡིག་འབྲུ་ཕྲ་ཏིག་སྦེ་བཟོ་མི་ལས་འགན་ཅིག་བཟོ་ནི་ཨིན། གལ་སྲིད་ x * n འདི་ཧྲིལ་ཨང་ཅིག་ཨིན་པ་ཅིན་ ལས་འགན་འདི་གིས་ True སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་ False སླར་ལོག་འབདཝ་ཨིན། x དང་ n གཉིས་ཆ་ར་ལུ་ ཨང་གྲངས་ཀྱི་ཐིག་ཁྲམ་སྦེ་བཟོ་སྟེ་ འ་ནི་རྣམ་པ་འདི་ཡོདཔ་ཨིན། <numerator>/<denominator> འདི་ནང་ལུ་ ཨང་གྲངས་དང་མིང་ཚིག་གཉིས་ཆ་ར་ ནུས་པ་ཅན་གྱི་ཨང་གྲངས་ཚུ་ཨིན། ཁྱོད་ཀྱིས་ x དང་ n འདི་ཚུ་ ཆ་གནས་ཅན་གྱི་ཨང་གྲངས་ཚུ་ཨིནམ་དང་ མིང་ཚིག་ལུ་ ༠ སྦེ་མེདཔ་སྦེ་བཟོཝ་ཨིན། simplify \" 1/5\", \"5/1\") = True simplify \" 1/6\", \"2/1\") = False simplify \" 7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ཨང་གྲངས་ཚུའི་ཐོ་ཡིག་འདི་ ཨང་གྲངས་ཚུའི་བསྡོམས་དང་བསྟུན་ཏེ་ ཡར་སེང་གི་རིམ་པ་ལུ་རིམ་པ་སྒྲིག་འབད་ནིའི་ལས་འགན་ཅིག་འབྲི་དགོ། དྲན་པ་: ཨང་གྲངས་ཚུའི་བསྡོམས་འདྲ་མཉམ་ཡོད་མི་ ཨང་གྲངས་ལེ་ཤ་ཡོད་པ་ཅིན་ ཨང་གྲངས་ཚུ་ ཨང་གྲངས་ཐོ་བཀོད་ཐོག་གི་གཞི་བསྟུན་ཏེ་རིམ་པ་སྒྲིག་འབད། དཔེར་ན་: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"ཨང་གྲངས་ཚུ་ནང་ ཨེ་རེ་ཅིག་བཙུགས་ཏེ་ ཨང་གྲངས་ ༡༠ ལས་སྦོམ་པའི་ ཨེ་རེ་ནང་ཡོད་པའི་ཆ་ཤས་ཚུ་སླར་ལོག་འབད་ནིའི་འགན་ཡིག་ཅིག་འབྲི་དགོ། ཨང་གྲངས་ཀྱི་ཨང་གྲངས་དང་པ་དང་མཇུག་གཉིས་ཆ་ར་ ཨང་གྲངས་རྐྱང་པ་ (1, 3, 5, 7, 9) ཨིན། དཔེར་ན་: specialFilter (([༡༥, -༧༣, ༡༤, -༡༥]) => 1 specialFilter (([33, -༢, -༣, ༤༥, ༢༡, ༡༠༩) => ༢\"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ཁྱོད་ཀྱིས་ ནུས་ལྡན་ཨང་གྲངས་ nཐོབ་ཨིན། ཁྱོད་ཀྱིས་ ཨང་གྲངས་ཧྲིལ་བུམ་ a ཡན་ལག་ n བཟོ་དགོཔ་ཨིན། i (1 ‰¤ i ‰¤ n) གི་དོན་ལུ་ a[i] = i * i - i + 1 གི་གནས་གོང་དེ་སླར་ལོག་འབདཝ་ཨིན། a (i, a, a, a) གྱི་ triple གི་གྱངས་ཁ་དེ་སླར་ལོག་འབདཝ་ཨིན། i < j < k དང་ a[i] + a[j] + a[k] འདི་ 3 གི་གྱངས་ཁ་ཨིན། དཔེ་འབད་བ་ཅིན་ ནང་བསྐྱོད་: n = 5 ཕྱི་ཐོན་: 1 འགྲེལ་བཤད་: a = [1, 3, 7, 13, 21] གསུམ་ཆ་གཅིག་གནས་གོང་དེ་ (1, 7, 13) ཨིན།\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ཉིམ་ལུགས་ནང་ སྐར་མ་༨ ཡོད་པའི་ཁར་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་མི་ཅིག་འདི་ Mercury ཤུལ་མ་ཅིག་འདི་ Venus དེ་ལས་ Earth, Mars, Jupiter, Saturn, Uranus, Neptune ཨིན། ལས་འགན་འདི་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་གཉིས་ལུ་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་སྦེ་ལེན་ཏེ་ སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་འཁོར་ལམ་གྱི་བར་ན་ཡོད་པའི་ སྐར་མ་ཚུ་བསྡོམས་ཏེ་ སྐར་མ་༢ ཀྱི་མིང་ཚུ་ ཉིམ་ལུ་ སྦོ་ལོགས་ཁར་ཡོད་མི་འདི་ཚུ་སྦེ་དབྱེ་བ་ཕྱེ་སྟེ་ སྐར་མ་ཚུ་སླར་ལོག་འབདཝ་ཨིན། སྐར་མ་༡ དང་ སྐར་མ་༢ ཀྱི་མིང་ཚུ་ སྐར་མ་ཚུ་མེན་པ་ཅིན་ ལས་འགན་འདི་གིས་ སྟོང་པ་སྦེ་སླར་ལོག་འབདཝ་ཨིན། དཔེ་འབད་བ་ཅིན་ bf \"(Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\") bf (((\"Earth\", \"Mercury\") ==> (\"Venus\") bf (((\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sn\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ཚིག་ཡིག་གི་ཐོ་ཡིག་ཅིག་ལུ་ ཆ་བཞག་ཡོད་པའི་ལས་འགན་ཅིག་འབྲི་དགོ། ཚིག་ཡིག་འདི་ ཚར་གཅིག་དང་ ཚར་གཅིག་གཉིས་སྦེ་ཡོད་པ་ཅིན་ ཚིག་ཡིག་དེ་ ཨང་ཡིག་གི་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་བཞིན་དུ་རིམ་པ་ར་\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"གྲུབ་འབྲས་འདི་ x_or_y (n) འདི་ཨང་གྲངས་ངོ་མ་ཅིག་ཨིན་པ་ཅིན་ x གི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན་ དེ་ལས་གཞན་འབད་བ་ཅིན་ y གི་གནས་གོང་ལོག་བྱིན་དགོཔ་ཨིན། དཔེར་ན་: x_or_y (7, 34, 12) == 34 for x_or_y (n) == 15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''ཨང་གྲངས་ཀྱི་ཐོ་འདི་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཚུ་ནང་ཡོད་པའི་ ཨང་གྲངས་ཚུ་ཆ་མེད་སྦེ་ཡོད་པའི་ས་སྒོ་ཚུ་བསྡོམས་ཏེ་ལོག་གཏང་། ནུས་མེད་ ཡང་ན་ ཨང་གྲངས་ཆ་མཉམ་མེན་པའི་ཨང་གྲངས་ཚུ་སྣང་མེད་སྦེ་བཞག་། double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ནང་བསྐྱོད་ཐོ་འདི་སྟོངམ་ཡོད་པ་ཅིན་ ༠ སླར་ལོག་གཏང་། '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ང་བཅས་ག་ར་གིས་ དྲན་པ་ཡོད་རང་ཨིན་ ག་ཅི་སྨོ་ཟེར་བ་ཅིན་ དུས་ཡུན་རིངམ་ཅིག་གི་རིང་ལུ་ བྱུང་རྐྱེན་ཅིག་ལུ་བརྟེན་ གྲུབ་འབྲས་འདི་ ཤེས་ཚུགས་པའི་སྐབས་ལུ་ཨིན། དེ་བསྒང་ལུ་ ང་བཅས་རང་གི་སེམས་ཁར་བྱུང་མི་ཚོར་སྣང་དང་བསམ་བློ་ཚུ་ ཐད་རི་བ་རི་བཀོད་དེ་བསྡུར་འབད་དགོཔ་ཨིན། ཁྱོད་ཀྱི་ལཱ་འདི་ མི་གཅིག་གིས་ གྲུབ་འབྲས་ཚུ་ཀྲིག་ཀྲི་སྦེ་ར་ ཧ་གོ་ཡོདཔ་ཨིན་ན་དང་ མཉམ་བསྡུར་འབད་དགོཔ་ཨིན་ན་ཚུ་ དབྱེ་ཞིབ་འབད་དགོཔ་ཨིན། ཁྱོད་ལུ་ ཨང་གྲངས་དང་ཚོད་དཔག་ཚད་འདྲ་མཉམ་འབད་མི་ ཨང་གྲངས་ཐིག་ཁྲམ་གཉིས་གནང་ཡོདཔ་དང་ འདི་ནང་ བརྡ་བཀོད་རེ་རེ་གི་ནང་ མཉམ་བསྡུར་འབད་ཡོད་པའི་ བརྡ་སྟོན་འབདཝ་ཨིན། ཨང་གྲངས་ཐིག་ཁྲམ་གཅིག་རང་ཡོད་མི་འདི་ ཨང་གྲངས་ག་དེ་ཅིག་ལས་ བྱང་ཡོདཔ་ཨིན་ན་ཚུ་སླར་ལོག་འབདཝ་ཨིན། ག་དེམ་ཅིག་སྦེ་ ཁོང་གིས་ཀྲིག་ཀྲི་སྦེ་ར་ ཧ་གོ་ཡོདཔ་ཨིན་པ་ཅིན་ གནས་གོང་འདི་ ༠ དང་མེན་པ་ཅིན་ གནས་གོང་དེ་ ཨང་གྲངས་དང་ཚོད་དཔག་དང་ ཨང་གྲངས་ཀྱི་བར་ན་ ཁྱད་པར་ངོ་མ་ཨིན། དཔེར་ན་: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,0,4],[4,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ཁྱོད་ཀྱིས་དབྱེ་རིམ་ (ཐིག་ཁྲམ་) དང་ ཁྱབ་ཚད་ཀྱི་ཐོ་ཡིག་ཐོབ་འོང་། ཁྱབ་ཚད་ཚུ་ སློབ་རིམ་ནང་ ཁ་སྐོང་སློབ་ཚན་ཚུ་ འབག་ནི་ལུ་ ལག་ལེན་འཐབ་འོང་། ཁྱབ་ཚད་ཀྱི་ཤུགས་འདི་ འོག་གི་བཟུམ་སྦེ་ཨིན། CAPདེ་ ཁྱབ་ཚད་ཀྱི་མིང་ནང་ལུ་ ཡི་གུ་སྦོམ་ཤོས་ཀྱི་གྱངས་ཁ་དང་ SMདེ་ ཁྱབ་ཚད་ཀྱི་མིང་ནང་ལུ་ ཡི་གུ་ཆུང་ཤོས་ཀྱི་གྱངས་ཁ་ཨིནམ་སྦེ་བཞག་པ་ཅིན་ ཁྱབ་ཚད་དེ་ CAP - SM བཅའ་ཡིག་གིས་བྱིན་འོང་། ཁྱོད་ཀྱིས་ ཁྱབ་ཚད་ཤུགས་ཅན་ཅིག་འཚོལ་ཏེ་ string འདི་ནང་བཟོ་རྣམ་འདི་སླར་ལོག་འབད་དགོ ClassName.StrongestExtensionName. ག་དེམ་ཅིག་སྦེ་ ཁྱབ་ཚད་འདྲ་མཉམ་འབད་མི་ ཁྱབ་ཚད་གཉིས་ཡང་ན་དེ་ལས་མང་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་ཐོ་ཡིག་ནང་ དང་པ་ཐོན་མི་དེ་ གདམ་ཁ་རྐྱབ་དགོ། དཔེར་ན་ ཁྱོད་ཀྱིས་ \"Slices\" འདི་ སློབ་ཚན་དང་ ཁྱབ་ཚད་ཀྱི་ཐོ་ཡིག་ཅིག་ཨིན་པ་ཅིན་ ['SEviRNGSliCes', 'Cheese', 'StuFfed'] ཁྱོད་ཀྱིས་ 'Slices.SEviRNGSliCes' 'SviRNGSliCes' 'mySviRNGSliCes']) འདི་ ཁྱབ་ཚད་ཤུགས་ཅན་ཅིག་ཨིནམ་ལས་ཁྱོད་ཀྱིས་ 'Slices.SEviRNGSliCes'སླར་ལོག་འབད་དགོཔ་ཨིན། (དཔེར་བརྗོད་: '_AA' = ཤུགས་ཅན་_Class' གི་དོན་ལུ་ ཁྱབ་ཚད་ཤུགས་ཅན་ཨིན།)\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ཁྱོད་ཀྱིས་ཚིག་གཉིས་ཐོབ་ཡོདཔ་ཨིན། ཁྱོད་ཀྱིས་ཚིག་གཉིས་པ་ཡང་ན་ འདི་གི་འཁོར་ལོའི་གྲལ་རིམ་ཚུ་ ཚིག་དང་པ་ནང་ལུ་ ནང་ཐིག་སྦེ་ཡོད་པ་ཅིན་ ཁྱོད་ཀྱིས་བདེན་པ་ལོག་གཏང་དགོཔ་ཨིན། cycpattern_check(\"abcd\",\"abd\") => false cycpattern_check(\"hello\",\"ell\") => true cycpattern_check (((\"whassup\",\"psus\") => false cycpattern_check\"abab\",\"baa\") => true cycpattern_check (((\"efef\",\"eeff\") => false cycpattern_check\" ((hims\",\"simen\") => true \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ཨང་གྲངས་ཧྲིལ་བུམ་ཅིག་བྱིན་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་དང་ཆ་མཉམ་མེད་པའི་ཨང་གྲངས་ཚུ་ཡོད་མིའི་ཨང་གྲངས་ལོག་གཏང་། དཔེ་འབད་བ་ཅིན་: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ཨང་གྲངས་ཚངམ་སྦེ་ཐོབ་པ་ཅིན་ རོ་མཱན་ཨང་གྲངས་འདི་ string སྦེ་ཐོབ་ཞིནམ་ལས་ དེ་ནང་ལུ་ཡིག་ཆུང་སྦེ་ལོག་གཏང་། ངེས་འཛིན་: 1 <= num <= 1000 དཔེ་འབད་བ་ཅིན་: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ཟུར་གསུམ་གྱི་ཟུར་གསུམ་གྱི་རིང་ཚད་ཚུ་བྱིན་ཏེ་ཡོདཔ་ཨིན། ཕྱོགས་གསུམ་འདི་ ཟུར་གསུམ་ཕྲང་ཟུར་ཅིག་བཟོ་བ་ཅིན་བདེན་པ་སླར་ལོག་འབདཝ་ཨིན། དེ་མེན་པ་ཅིན་རྫུས་མ་ཨིན། ཟུར་གསུམ་ཕྲང་ཟུར་འདི་ ཟུར་གསུམ་ཅིག་ཕྲང་ཟུར་ཡང་ན་ ཌི་ཇི་ཨེ་༩༠ཡོད་མི་ལུ་བརྟེན་ཨིན། དཔེ་འབད་བ་ཅིན་ right_angle_triangle (༣,༤,༥) == true right_angle_triangle (༡,༢,༣) == false '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"string གི་ཐོ་ཡིག་ཅིག་ལེན་མི་ལས་འགན་ཅིག་འབྲི་དགོ། མིང་ཐོ་ནང་ཚིག་མ་འདྲཝ་ཚུ་ཡོདཔ་ཨིན། ཚིག་འདི་ཨང་གྲངས་མཐའ་མ་ཡོད་པའི་ཡིག་འབྲུ་ཚུ་ལོག་གཏང་། གལ་སྲིད་ string མང་ཤོས་ཅིག་ནང་ཨང་གྲངས་མཐའ་མ་ཡོད་པའི་ཡིག་འབྲུ་ཚུ་ཡོད་པ་ཅིན་ ཚིག་ཡིག་གི་རིམ་པ་ལས་ དང་པ་འཐོན་མི་ཅིག་ལོག་གཏང་། find_max ((([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ཁྱོད་ལྟོཝ་བཀྱེས་པའི་བེ་ལུད་ཨིནམ་ལས་ ཁྱོད་ཀྱིས་ གུ་རམ་དག་པ་ཅིག་ཟ་ཚར་ཡོད་རུང་ ད་རེས་ནངས་པར་ ཁྱོད་ཀྱིས་ ཉིནམ་གཅིག་གི་བཞེས་སྒོ་ཚུ་ ཟ་དགོ་པ་ཅིན་ གུ་རམ་ཚུ་ལོག་བྱིན་དགོ། ཁྱོད་ཀྱིས་ གུ་རམ་མ་ལང་པ་ཅིན་ ལྷག་ལུས་ གུ་རམ་ག་ར་ཟ་རུང་ ལྟོཝ་བཀྱེས་སྡོད་འོང་། དཔེ་འབད་བ་ཅིན་ *ཟ་(5, 6, 10) -> [11, 4] *ཟ་(4, 8, 9) -> [12, 1] *ཟ་(1, 10, 10) -> [11, 0] *ཟ་(2, 11, 5) -> [7, 0] བྱུང་འགྱུར་: @number: ཁྱོད་ཀྱིས་ཟ་ཚར་མི་ གུ་རམ་དག་པ་ཅིག་ཟ་དགོ། @need: ཁྱོད་ཀྱིས་ཟ་དགོ་པའི་ གུ་རམ་དག་པ་ཅིག་ཟ་དགོ། @remaining: ཚོད་བསྲེ་ནང་ ལྷག་ལུས་པའི་ གུ་རམ་དག་པ་ཅིག་ཟ་དགོ། Constrain: *0= <= 1000 *0= <= 1000 *0= <= 1000 དགོས་མཁོ་ཡོད་མི་ཚུ་ དགའ་སྤྲོ་བྱོས།\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ཨང་གྲངས་དང་པའི་ཐོ་ནང་ལུ་ གཞི་རྟེན་ཨེལ་ཇི་བཱར་ལཱ་ཚུ་དང་ ཨང་གྲངས་གཉིས་པ་ནང་ལུ་ ཨང་གྲངས་ཧྲིལ་བུམ་གྱི་ཐོ་འདི་ཡོདཔ་ཨིན། ཨང་གྲངས་དང་པའི་ཐོ་ནང་ལུ་ གཞི་རྟེན་ཨེལ་ཇི་བཱར་ལཱ་ཚུ་ཡོདཔ་དང་ ཨང་གྲངས་གཉིས་པ་ནང་ལུ་ ཨེལ་ཇི་བཱར་ཚིག་ཡིག་འདི་བཟོཝ་ཨིན། ཨང་གྲངས་དང་པའི་ཐོ་འདི་ལག་ལེན་འཐབ་སྟེ་ ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན། གཞི་རྟེན་ཨེལ་ཇི་བཱར་ལཱ་ཚུ་འདི་: ཁ་སྐོང་ (+) མར་ཕབ་ (- ) མང་ཐབས་ (*) དབྱེ་བ་ (/) ཨང་གྲངས་རྩིས་ (**) དཔེ་འབད་བ་ཅིན་: ཨང་གྲངས་['+', '*', '-'] གྲལ་ཐིག་ = [2, 3, 4, 5] གྲུབ་འབྲས་ = 2 + 3 * 4 - 5 => གྲུབ་འབྲས་ = 9 དྲན་པ་: ཨང་གྲངས་ཀྱི་ཐོ་འདི་ ཨང་གྲངས་དང་པའི་ཐོ་ལས་ ༡ ཕྱིར་བཏོན་འབད་མི་འདི་ཨིན། ཨང་གྲངས་དང་པའི་ཐོ་འདི་ ནུས་མེད་ཨང་གྲངས་ཚུ་ཨིན། ཨང་གྲངས་དང་པའི་ཐོ་ནང་ལུ་ ཨང་གྲངས་དང་པའི་ཐོ་འདི་ ཨང་གྲངས་དང་པའི་ཐོ་འདི་ཡོདཔ་ཨིན།\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"ཁྱོད་ཀྱིས་ string s.ཐོབ་པ་ཅིན་ s[i]འདི་ཡིག་འབྲུ་ཅིག་ཨིན་པ་ཅིན་ དེའི་ཡིག་གཟུགས་འདི་ འོག་ལས་གོང་ལུ་ ཡང་ན་ ཕྱོགས་གཞན་ཁ་ལུ་བསྒྱུར་གཏང་། དེ་མེན་པ་ཅིན་ འདི་བཟུམ་སྦེ་རང་བཞག་དགོ། string འདི་ནང་ཡིག་འབྲུ་མེདཔ་ཨིན་པ་ཅིན་ string འདི་ཁ་བསྒྱུར་གཏང་། ལས་འགན་འདི་གིས་ string སླར་ལོག་འབད་དགོཔ་ཨིན། དཔེ་འབད་བ་ཅིན་ solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"string 'text' བྱིན་པ་ཅིན་ md5 ཧེཤི་ འདྲ་མཉམ་ string སླར་ལོག་འབདཝ་ཨིན། 'text' འདི་ སྟོངམ་ stringཨིན་པ་ཅིན་ None སླར་ལོག་འབདཝ་ཨིན། >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "dzo_Tibt",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ཨང་གྲངས་ཆ་མཉམ་ a དང་ b གཉིས་ཐོབ་པ་ཅིན་ ཨང་གྲངས་ཆ་མཉམ་ a དང་ b གི་བར་ན་ཡོད་པའི་ཨང་གྲངས་ཆ་མཉམ་དེ་ཡར་སེང་གི་རིམ་པ་ནང་ལོག་གཏང་། དཔེར་ན་: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]