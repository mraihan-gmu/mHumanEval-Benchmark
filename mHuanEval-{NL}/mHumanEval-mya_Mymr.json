[
    {
        "task_id": "HumanEval/0",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ပေးထားသော နံပါတ်စာရင်းတွင် ပေးထားသော နံပါတ်ထက် ပိုမိုနီးစပ်သော နံပါတ်နှစ်ခုရှိမရှိစစ်ဆေးပါ။ ဥပမာ: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) မှားယွင်း >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) မှန်ကန်သည် \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ဤ function ကို input သည် nested ကို parentheses များ၏အုပ်စုပေါင်းများစွာပါဝင်သော string တစ်ခုဖြစ်သည်။သင်၏ရည်မှန်းချက်မှာအခြားအုပ်စုများသို့ခွဲခြားပြီး၎င်းတို့၏စာရင်းကိုပြန်ပေးရန်ဖြစ်သည်။သီးခြားအုပ်စုများကညီမျှသည် (ဖွင့်ထားသော brace တစ်ခုစီကိုမှန်ကန်စွာပိတ်ထားသည်) နှင့်အချင်းချင်းတွင် nested မဟုတ်ပါ။အဝင် string တွင်မည်သည့်နေရာလွတ်များကိုမဆိုလျစ်လျူရှုပါ။ဥပမာ: >>> separate_paren_groups' ((( ) (() (()))))))) ['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"အပေါင်းကိန်းတစ်ခု၏ အပေါင်းကိန်းအပိုင်းကို ဖြုတ်ယူနိုင်သည်။ ဥပမာ: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"သင်ဟာ ၀ ဘဏ်စာရင်းတစ်ခုပေါ်က ၀ ဘဏ်စာရင်းနဲ့ စတင်တဲ့ ငွေသွင်းခြင်းနဲ့ ထုတ်ယူခြင်း လုပ်ငန်းစဉ်စာရင်းကို ရပါတယ်။ သင့်အလုပ်က ငွေစာရင်းရဲ့ အကြွေးဟာ ၀ အောက်ကို ကျသွားရင် ရှာဖွေဖို့ဖြစ်ပြီး အဲဒီအချိန်မှာ function က True ပြန်ပေးသင့်ပါတယ်။ မဟုတ်ရင် False ပြန်ပေးသင့်ပါတယ်။ ဥပမာ: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ပေးထားသော input နံပါတ်များစာရင်းတစ်ခုအတွက်, ဤဒေတာစု၏အလယ်အလတ်ဝန်းကျင်၌ Mean Absolute Deviation ကိုတွက်ပါ။ Mean Absolute Deviation သည်ဒြပ်စင်တစ်ခုနှင့်ဗဟိုအမှတ်တစ်ခုအကြား ပျမ်းမျှအခြားနားမှုဖြစ်သည် (ဒီကိစ္စတွင်အလယ်အလတ်): MAD = ပျမ်းမျှ ☞ x - x_mean ☞ ဥပမာ: >>> mean_absolute_deviation ☞ [1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"input list ၏ဆက်တိုက် element နှစ်ခုစီအကြား \"delimiter\" နံပါတ်ကိုထည့်ပါ။ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ဤ function ကို input သည် အစုအဝေးတစ်ခုစီအတွက် ကွက်လပ်များဖြင့်ခွဲထားသော ကွင်းဆက် parentheses များအတွက် အုပ်စုပေါင်းများစွာကို ကိုယ်စားပြုသော string ဖြစ်သည်။ အုပ်စုတစ်ခုစီအတွက် ကွင်းဆက် parentheses များ၏ နက်ရှိုင်းဆုံးအဆင့်ကို output ပေးပါ။ ဥပမာ (() (()) တွင် အမြင့်ဆုံးကွင်းဆက်နှစ်ခုရှိပြီး ((())) တွင် သုံးခုရှိသည်။ >>> parse_nested_parens (('((()) ((())) () (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ပေးထားသော substring ကိုပါဝင်သော string များ၏ input list ကို filter လုပ်ပါ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"ပေးထားသော integer စာရင်းတစ်ခုအတွက်, တစ်ခု စုပေါင်းခြင်းနှင့်စာရင်းတစ်ခုရှိ integer အားလုံး၏ product တစ်ခုပါဝင်သော tuple တစ်ခုကိုပြန်ပေးပါ။ အလွတ် sum သည် 0 နှင့်အလွတ် product သည် 1 နှင့်ညီမျှရမည်။ >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24)\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ပေးထားသော integer စာရင်းမှ, အစဉ်လိုက်တွင်ပေးထားသောကာလအထိတွေ့ရှိခဲ့သော rolling maximum element ၏စာရင်းကိုဖန်တီးပါ။ >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ပေးထားသော string တစ်ခုနှင့်စတင်သော အတိုဆုံး palindrome ကိုရှာပါ။ အယ်လ်ဂိုရစ်သမ်စိတ်ကူးက ရိုးရှင်းသည် - ပေးထားသော string ၏အရှည်ဆုံး postfix ကို palindrome ဖြစ်အောင်ရှာပါ။ - palindromic suffix ရှေ့မှ string prefix ၏ string reverse ကို string အဆုံးသို့ဆက်ပါ။ >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"string ကို palindrome ဖြစ်မဖြစ် စစ်ဆေးပါ။\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"input သည် 1s နှင့် 0s သာပါဝင်သော string a နှင့် b နှစ်ခုဖြစ်သည်။ ဤ input များပေါ်တွင် binary XOR ကိုလုပ်ဆောင်ပြီး string အဖြစ်ရလဒ်ကိုပြန်ပို့ပါ။ >>> string_xor (('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"string စာရင်းထဲက အရှည်ဆုံးကို ပြန်ပေးပါ။ တူညီတဲ့ အရှည်ရှိတဲ့ string များရှိရင် ပထမတစ်ခုကို ပြန်ပေးပါ။ အဝင်စာရင်းက ဗလာဖြစ်ရင် None ကို ပြန်ပေးပါ။ >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"နှစ်ခုလုံး၏ အကြီးမားဆုံး တူညီသော အပိုင်းကိန်း a နှင့် b ကို ပြန်ပေးသည် >>> အကြီးမားဆုံး_တူညီသော_ပိုင်းကိန်း ((၃, ၅) ၁ >>> အကြီးမားဆုံး_တူညီသော_ပိုင်းကိန်း ((၂၅, ၁၅) ၅)\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"input string ၏အတိုဆုံးမှအရှည်ဆုံးသို့အရင်ဆက်စပ်သော prefix အားလုံးကိုပြန်ပို့သောစာရင်း >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"၀ မှ n အထိ အပါအဝင် နေရာသတ်မှတ်ထားသော နံပါတ်များပါဝင်သော string ကို ပြန်ပေးသည်။ >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"string တစ်ခုကိုပေးပြီးလျှင် ၎င်းသည်မည်မျှကွဲပြားသောစာလုံးများ (case နှင့်မဆိုင်) ကိုပါ ၀ င်သည်ကိုရှာဖွေပါ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ဤ function ကို input ကိုအထူး ASCII ဖွဲ့စည်းပုံမှာဂီတသံစဉ်ကိုကိုယ်စားပြုသောကြိုးဖြစ်ပါတယ်. သင့်တာဝန်သည်များစွာသော beat ကိုလိုက်လျောညီထွေ integer ကိုကြိုးစာရင်း parse ရန်ဖြစ်ပါတယ်: 'o' မှတ်ချက်, နောက်ဆုံးလေးခုန် 'o' ၏အခမဲ့ - မှတ်ချက်တစ်ဝက်, နောက်ဆုံးနှစ်ခုန် 'o' ၏ - quater မှတ်ချက်, နောက်ဆုံးတစ်ခုန် >>> parse_music '(o' ၏အခမဲ့ .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"မူလ string ထဲမှာ ပေးထားတဲ့ substring ကို ဘယ်နှစ်ကြိမ် တွေ့နိုင်လဲဆိုတာ ရှာပါ။ ထပ်ကျော့နေတဲ့ ကိစ္စတွေကို ရေတွက်ပါ။ >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"input သည် 'သုည' မှ 'ကိုး' အထိ နံပါတ်များ၏ နေရာသတ်မှတ်ထားသော string ဖြစ်သည်။ မှန်ကန်သောရွေးချယ်မှုများမှာ 'သုည', 'တစ်', 'နှစ်', 'သုံး', 'လေး', 'ငါး', 'ခြောက်', 'ခုနစ်', 'ရှစ်' နှင့် 'ကိုး' ဖြစ်သည်။ နံပါတ်များကိုအသေးဆုံးမှ အကြီးဆုံးသို့စီစဉ်ထားသော string ကိုပြန်ပို့သည် >>> sort_numbers ((('သုံးတစ်ငါး') 'တစ် သုံးငါး' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ပေးထားသော နံပါတ်စာရင်း (အနည်းဆုံး နှစ်ခု) မှ တစ်ခုနှင့်တစ်ခုအနီးစပ်ဆုံး နံပါတ်နှစ်ခုကို ရွေးချယ်ပြီးပြန်ပို့ပြီး (အငယ်ဆုံး နံပါတ်၊ အကြီးဆုံး နံပါတ်) ကို အစီအစဉ်အတိုင်းပြန်ပို့ပါ။ >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"နံပါတ်စာရင်း (အနည်းဆုံး အစိတ်အပိုင်းနှစ်ခု) ကိုပေးထားလျှင် အငယ်ဆုံးကိန်းသည် ၀ ဖြစ်လာပြီး အကြီးဆုံးသည် ၁ ဖြစ်လာသည့်လိုင်းနရီပြောင်းလဲမှုကို ထိုစာရင်းသို့ သုံးပါ။ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"filter ပေးထားသော Python တန်ဖိုးများ၏စာရင်းကို ဖြောင့်ကိန်းများအတွက်သာ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ပေးထားသော string ၏ return length ကို >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"ပေးထားတဲ့ n အတွက် n ထက် ပိုသေးတဲ့ n ကို ညီမျှစွာ ပိုင်းခြားနိုင်တဲ့ အကြီးဆုံးကိန်းကို ရှာပါ။ >>> အကြီးဆုံး_ပိုင်းခြားသူ (_BAR_) (၁၅) ၅\"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ပေးထားသော integer ၏ prime factor များ၏စာရင်းကိုအသေးဆုံးမှအကြီးဆုံးသို့စီစဉ်၍ပြန်ပေးပါ။ အချက်တစ်ခုစီကိုအချက်ခွဲခြင်းတွင်ပေါ်လာသည့်အကြိမ်ပေါင်းနှင့်ညီမျှသောအရေအတွက်ကိုစာရင်းသွင်းရပါမည်။ အဝင်အရေအတွက်သည်အချက်များအားလုံး၏ product နှင့်ညီမျှရမည် >>> factorization ((8) [2, 2, 2] >>> factorization ((25) [5, 5] >>> factorization ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ဖြောင့်ကိန်းစာရင်းတစ်ခုမှတစ်ကြိမ်ထက်ပိုပြီးပေါ်လာသော element များအားလုံးကိုဖယ်ရှားပါ။ အဝင် element များ၏အစဉ်ကို input ထဲကအတိုင်းဆက်လက်ထားပါ။ >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"string တစ်ခုအတွက် စာလုံးကြီးတွေကို အက္ခရာမကြီးတွေအဖြစ် ပြောင်းလိုက်ပါ >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"string တစ်ခုတည်းအဖြစ် string များကိုချိတ်ဆက်ထားသောစာရင်း >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ပေးထားသော ရှေ့ဆက်ပုဒ်ဖြင့် စတင်သော string များအတွက်သာ input list ကို စစ်ပါ။ >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"စာရင်းထဲက အပေါင်းကိန်းများကိုသာ ပြန်ပေးပါ။ >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ပေးထားသောကိန်းသည် ပရိုင်းမစ်ဖြစ်လျှင် မှန်သောကိန်းကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် မှားသောကိန်းကိုပြန်ပေးသည်။ >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"find_zero သည် အဖြေကို အာမခံပေးသောကြောင့် အပေါင်းကိန်းများနှင့် အကြီးဆုံး သုညမဟုတ်သော အပေါင်းကိန်းများသာရှိသော xs ကိုသာ စာရင်းပြုစုသည်။ >>> round ((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs ကိုသြဇာကိန်း xs ရှိသော polynomial ကို xs အမှတ်တွင်တွက်ချက်သည် xs[0] + xs [1] * x + xs [1] * x ^ 2 + .... xs [n] * x ^ n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ဤလုပ်ဆောင်ချက်သည် l စာရင်းကိုယူပြီး l' သည် l နှင့်တူညီသော l' သည်သုံးခုဖြင့်ခွဲခြားနိုင်သောညွှန်းကိန်းများတွင်တူညီပြီးသုံးခုဖြင့်ခွဲခြားနိုင်သောညွှန်းကိန်းများတွင်၎င်း၏တန်ဖိုးများသည် l ၏တန်ဖိုးများနှင့်ညီသော်လည်းစီစဉ်ထားသည်။ >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"စာရင်းတစ်ခုထဲကရွေးထားတဲ့ ထူးခြားတဲ့ element တွေကိုပြန်ပေးသည် >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"စာရင်းထဲက အများဆုံး element ကို ပြန်ပေးပါ။ >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"11 သို့မဟုတ် 13 ဖြင့်စားနိုင်သော n ထက်နည်းသော integer များတွင် 7 သည်ပေါ်လာသော အကြိမ်ရေကို ပြန်ပေးသည်။ >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ဤလုပ်ဆောင်ချက်သည် l ကိုယူပြီး l' သည် l နှင့်တူညီသော l' ကို odd index များတွင်ပြန်ပေးသည်၊ ယင်း၏တန်ဖိုးများသည် l ၏ even index များ၏တန်ဖိုးများနှင့်ညီသော်လည်းရွေးချယ်ထားသည်။ >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"encode_cyclic function ဖြင့် ကုဒ်သွင်းထားသော string ကို input အဖြစ်ယူသည်။ decoded string ကိုပြန်ပေးသည်။ \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\" ကဒ်ကို သုံးလုံးတွဲ စာလုံးစုပြီး ပြန်ပေးတယ်\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib သည် ဖီဘိုနာချီကိန်းဖြစ်သော n-မြောက်ကိန်းကိုပြန်ပေးပြီး ယင်းသည်လည်း ပရိုင်းမစ်ကိန်းဖြစ်သည်။ >>> prime_fib ((1) 2) >>> prime_fib ((2) 3) >>> prime_fib ((3) 5) >>> prime_fib ((4) 13) >>> prime_fib ((5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero သည် ကိန်းပြည့်စာရင်းကို အဝင်အဖြစ် ယူသည်။ စာရင်းတွင် သုညသို့ ပေါင်းထည့်သော သီးခြား အစိတ်အပိုင်း သုံးခုရှိပါက True ကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် False ကိုပြန်ပေးသည်။ >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ကား (n) စီးသည် ဘယ်မှ ညာသို့ မောင်းနှင်နေသည်၊ တစ်ပြိုင်နက်တွင် ကား (n) စီးသည် ညာမှ ဘယ်သို့ မောင်းနှင်နေသည်၊ ကားနှစ်စီးသည် အဝေးမှ စတင်ကာ ကားအားလုံးသည် တူညီသော အမြန်နှုန်းဖြင့် ရွေ့လျားနေသည်၊ ကားနှစ်စီးသည် ဘယ်မှ ညာသို့ ရွေ့လျားနေသော ကားသည် ညာမှ ဘယ်သို့ ရွေ့လျားနေသော ကားကို တိုက်မိသောအခါ ကားနှစ်စီး တိုက်မိသည်ဟု ဆိုသည်၊ သို့သော် ကားများသည် အဆုံးမဲ့ ခိုင်မာပြီး ခိုင်မာကြသည်၊ ထို့ကြောင့် ၎င်းတို့သည် တိုက်မိမသွားသကဲ့သို့ ၎င်းတို့၏ လမ်းကြောင်းအတိုင်း ဆက်လက်ရွေ့လျားနေသည်။ ဤလုပ်ဆောင်ချက်သည် ထိုကဲ့သို့ တိုက်မိမှု အရေအတွက်ကို ထုတ်ပေးသည်။\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"အပိုဒ်များနှင့်အတူ return list ကို 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero သည် ကိန်းပြည့်စာရင်းကို အဝင်အဖြစ် ယူသည်။ စာရင်းတွင် သုညသို့ ပေါင်းထည့်သော သီးခြား အစိတ်အပိုင်းနှစ်ခုရှိလျှင် True ကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် False ကိုပြန်ပေးသည်။ >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero ([1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"base ကို base သို့ပြောင်းပါ။ ပြောင်းလဲပြီးနောက် string ကိုယ်စားပြုမှုကိုပြန်ပေးပါ။ base နံပါတ်များသည် ၁၀ ထက်နည်းသည်။ >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"တြိဂံတစ်ခုအတွက် အနားတစ်ခုရဲ့ အရှည်နဲ့ အမြင့်ဆုံးပြန်လည်မှု ဧရိယာကို ပေးထားတယ်။ >>> triangle_area ((5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 နံပါတ်စဉ်သည် Fibbonacci နံပါတ်စဉ်နှင့် ဆင်တူသော အစဉ်တစ်ခုဖြစ်ပြီး အောက်ပါအတိုင်း သတ်မှတ်ထားသည်: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 နံပါတ်စဉ်၏ n-th element ကို ထိရောက်စွာ တွက်ချက်ရန် လုပ်ဆောင်ချက်တစ်ခုရေးပါ။ ပြန်လည်သုံးစွဲခြင်းကို မသုံးပါနှင့်။ >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"စာရင်း l ထဲက ဒြပ်စင်တွေရဲ့ ပြန်လာမှု ဗဟိုချက် >>> ဗဟိုချက် (([3, 1, 2, 4, 5]) 3 >>> ဗဟိုချက် (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ပေးထားသော string သည် palindrome ဖြစ်သည်ဖြစ်စေစစ်ဆေးသည် >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n modulo p ကိုပြန်ပေးပါ (ကိန်းဂဏန်းများကိုသတိပြုပါ။) >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1\"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"encode_shift function ကိုသုံးပြီး input string ကို encode လုပ်ထားပြီး decode လုပ်ထားတဲ့ string ကိုပြန်ပေးပါတယ်\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"စာလုံးတိုင်းကို ၅ လုံးစီပြောင်းပြီး ကုဒ်သွင်းထားတဲ့ string ကိုပြန်ပေးတယ်။\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels သည် string ကိုယူပြီး vowels မပါသော string ကိုပြန်ပေးသော function ဖြစ်သည်။ >>> remove_vowels ((('') ' ' >>> remove_vowels (((\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"စာရင်း l ရှိ ကိန်းဂဏန်းအားလုံးသည် threshold t အောက်တွင်ရှိလျှင် True ကိုပြန်ပေးပါ။ >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"x နဲ့ y ကို ပေါင်းလိုက်။ (၂) (၃) (၅) (၁၂)\"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"စကားလုံးနှစ်လုံးမှာ တူညီတဲ့စာလုံးများရှိလားစစ်ဆေးပါ။ >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') မှန်သည် >>> same_chars ((('abcd', 'dddddddddabc') မှန်သည် >>> same_chars ((('dddddddabc', 'abcd') မှန်သည် >>> same_chars ((('eabcd', 'dddddddddabc') မှားသည် >>> same_chars ((('abcd', 'dddddddabddce') မှားသည် >>> same_chars' (((abcdzzzz', 'dddzzzzzzdddabc') မှားသည် \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-th ဖီဘိုနာချီကိန်းကို ပြန်ပေးပါ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets သည် \"<\" နှင့် \">\" တို့၏ string တစ်ခုဖြစ်သည်။ ဖွင့်သည့် bracket တိုင်းတွင် သက်ဆိုင်ရာ ပိတ်သည့် bracket ရှိပါက True ကိုပြန်ပို့ပါ။ >>> correct_bracketing (((\"<\") False >>> correct_bracketing (((\"<>\") True >>> correct_bracketing (((\"<><>>\") True >>> correct_bracketing (((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"True ကိုပြန်ပို့သည် စာရင်းအစိတ်အပိုင်းများသည် monotonically တိုးတက်သည် သို့မဟုတ် ကျဆင်းသည် >>> monotonically (([1, 2, 4, 20]) True >>> monotonically (([1, 20, 4, 10]) False >>> monotonically (([4, 1, 0, -10)) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"စာရင်းနှစ်ခုအတွက်ရွေးချယ်ထားသောထူးခြားသောတူညီသော element များကိုပြန်ပေးသည်. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n ၏ အကြီးဆုံးကိန်းစဉ်ကို ပြန်ပေးပါ။ n > 1 ကိုယူပြီး အငယ်ဆုံးကိန်းစဉ်မဟုတ်ပါ။ >>> အကြီးဆုံး_ကိန်းစဉ် (_prime_factor) (၁၃၁၉၅) ၂၉ >>> အကြီးဆုံး_ကိန်းစဉ် (_prime_factor) (၂၀၄၈) ၂\"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n သည် နံပါတ် ၁ မှ n အထိ ပေါင်းထည့်သော လုပ်ဆောင်ချက်တစ်ခုဖြစ်သည်။ >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets သည် \"(\" နှင့် \"\") တို့၏ string တစ်ခုဖြစ်သည်။ ဖွင့်သည့် bracket တိုင်းတွင် သက်ဆိုင်ရာ ပိတ်သည့် bracket ရှိပါက မှန်သည် ဟု ပြန်လည်ပြောဆိုပါ။ >>> correct_bracketing(\"(\") မှားသည် >>> correct_bracketing(\"() မှန်သည် >>> correct_bracketing(\"() \") မှန်သည် >>> correct_bracketing(\") မှားသည် \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs သည် polynomial ၏ coefficients များကို ကိုယ်စားပြုသည်။ xs[0] + xs[1] * x + xs[2] * x^2 + .... ဤ polynomial ၏ တူညီသောပုံစံကို ပြန်ပေးပါ။ >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib နံပါတ်စဉ်သည် Fibbonacci နံပါတ်စဉ်နှင့် ဆင်တူသော အစဉ်တစ်ခုဖြစ်ပြီး အောက်ပါအတိုင်း သတ်မှတ်ထားသည်: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3) ။ ကျေးဇူးပြု၍ fibfib နံပါတ်စဉ်၏ n-th element ကို ထိရောက်စွာ တွက်ချက်ရန် လုပ်ဆောင်ချက်တစ်ခုရေးပါ။ >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fibfib ((8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"စကားလုံးတစ်လုံးကို ကိုယ်စားပြုသော string ကို input အဖြစ်ယူပြီး string ထဲရှိ vowels အရေအတွက်ကိုပြန်လည်ပေးပို့သော function vowels_count ကိုရေးပါ။ ဤကိစ္စတွင် vowels များသည် 'a', 'e', 'i', 'o', 'u' ဖြစ်သည်။ ဤတွင် 'y' သည်လည်း vowel တစ်ခုဖြစ်သော်လည်းပေးထားသောစကားလုံး၏ အဆုံးတွင်သာဖြစ်ပါသည် ဥပမာ: >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"စမ်းသပ်မှုအသစ်တွေ ထပ်ဖြည့်ပါ။\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"အဝိုင်းက integer x ရဲ့ ဒစ်ဂျစ်တယ်တွေကို ရွှေ့၊ ဒစ်ဂျစ်တယ်တွေကို ညာဘက်ကို ရွှေ့ပြီး ရလဒ်ကို string အဖြစ် ပြန်ပို့ပါ။ shift > ဒစ်ဂျစ်တယ် အရေအတွက်ဆိုရင် ဒစ်ဂျစ်တယ်တွေကို ပြောင်းပြန်ပြန် ပြန်ပို့ပါ။ >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"အလုပ် အဝင်အဖြစ် string တစ်ခုကိုယူပြီး အပေါ်ပိုင်းအက္ခရာများ၏ sum ကိုသာ ASCII ကုဒ်များအဖြစ်ပြန်လည်ပေးပို့သော function တစ်ခုကိုရေးပါ။ ဥပမာ: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ဤအလုပ်တွင်သင်သည် apples များနှင့်ပန်းသီးများအရေအတွက်ကိုကိုယ်စားပြုသော string ကိုပေးထားမည်ဖြစ်သည် ပန်းသီးများနှင့်ပန်းသီးများနှင့်မန်ဂိုသီးများပါသောပန်းသီးများ၏တောင်းထဲမှာဖြန့်ဖြူးထားသည် ဒီတောင်းတွင်ပန်းသီးများ၊ပန်းသီးများနှင့်မန်ဂိုသီးများပါ ၀ င်သည်။ ပန်းသီးများနှင့်ပန်းသီးများစုစုပေါင်းကိုကိုယ်စားပြုသော string ကိုပေးထားပြီးနောက်တောင်းထဲကအသီးများစုစုပေါင်းကိုကိုယ်စားပြုသောကိန်းပြည့်တစ်ခုသည်တောင်းထဲကမန်ဂိုသီးအရေအတွက်ကိုပြန်ပေးပါ ဥပမာ: fruit_distribution\"5(apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples and 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"အနှုတ်မပါသော integer node များပါသော tree ၏ branch တစ်ခုကို ကိုယ်စားပြုသော array တစ်ခုကို ပေးထားလျှင် node တစ်ခုကို ကောက်ယူ၍ ပြန်ပေးရန်ဖြစ်သည်။ ကောက်ယူသော node သည်အသေးဆုံး even တန်ဖိုးရှိသော node ဖြစ်ရမည်။ တူညီသောအသေးဆုံး even တန်ဖိုးရှိသော node များကိုတွေ့လျှင်အသေးဆုံး index ရှိသော node ကိုပြန်ပေးပါ။ ကောက်ယူသော node ကိုစာရင်းတစ်ခုတွင်ပြန်ပေးရမည်၊ [smallest_value, its index]၊ တန်ဖိုးများမရှိပါက သို့မဟုတ်ပေးထားသော array သည်လွတ်လျှင်ပြန်ပေးပါ။ ဥပမာ ၁: အဝင်: [4,2,3] ထွက်: [2, 1] ရှင်းလင်းချက် ၂ သည်အသေးဆုံး even တန်ဖိုးရှိပြီး ၂ သည်အသေးဆုံး index ရှိသည်။ ဥပမာ ၂: အဝင်: [1,2,3] ထွက်: [2, 1] ရှင်းလင်းချက် ၂ သည်အသေးဆုံး even တန်ဖိုးရှိပြီး ၂ သည်အသေးဆုံး even index ရှိသည်။ ဥပမာ ၃: အဝင်: [] ထွက်: [] အဝင်: [4,5, 3, 4, 2,] အဝင်: [0, 1] ထွက်: အဝင်: ၀၊ အဝင်: အငယ်ဆုံး node ရှိသည် ၀၊ သို့သော်လည်းအသေးဆုံး index တန်ဖိုးသည် ၀ ခုနစ်လုံးရှိသည်။ ဥပမာ ၁: ပထမအသေးဆုံး node ကိုရွေးပါမည်မှာ ၀ ၀ ၀ ၀ ဖြစ်သော်လည်း ၀ ၏၊ ပထမအမည်မှာ ၀ ၀ ၀ ၏တန်ဖိုးသည် ၀ ၀ ၏အောက်ရှိသည်။ ဥပမာ ၁: အငယ်ဆုံး node သည် ၀ ၀ ၀ ၀ ၏အနက် ၀ ၀ ၀ ၀ ၀ ၏ အပါ ၀ ၀ ၏ ၀ ၀ ၏ ၀ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''သင်ဟာ အပေါင်းကိန်းပြည့်တွေရဲ့ အလွတ်မဟုတ်တဲ့စာရင်းကိုပေးထားတယ်။ သုညထက်ကြီးတဲ့ အကြီးဆုံးကိန်းပြည့်ကိုပြန်ပေးပြီး ကိန်းပြည့်ရဲ့တန်ဖိုးထက်ပိုတဲ့ သို့မဟုတ် တူညီတဲ့ ကြိမ်နှုန်းရှိပါတယ် ကိန်းပြည့်ရဲ့ ကြိမ်နှုန်းက စာရင်းမှာပေါ်လာတဲ့ အကြိမ်အရေအတွက်ပါ။ ဒီလိုတန်ဖိုးမရှိရင် -1 ပြန်ပေးပါ။ ဥပမာ: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''ဖြောင့်ကိန်းများ၏စာရင်းကိုပေးလျှင် ထူးဆန်းသောအစဉ်ဖြင့်ပြန်ပေးသည်။ ထူးဆန်းသောရွေးချယ်မှုသည်အနည်းဆုံးတန်ဖိုးဖြင့်စတင်ပြီးနောက် ကျန်ရှိသောဖြောင့်ကိန်းများ၏အများဆုံး၊ ထို့နောက်အနည်းဆုံးနှင့်အခြားအရာများဖြစ်သည်။ ဥပမာ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''တြိဂံ၏ ၃ ဘက်၏ အလျားများကို ပေးထားသည်။ သုံးဘက်တို့သည် တြိဂံဖြစ်လျှင် သုံးဘက်၏ ဧရိယာကို ဆယ်လီ ၂ နေရာသို့ အဝိုင်းပြု၍ ပြန်ပေးပါ။ မဟုတ်ပါက -1 ကို ပြန်ပေးပါ။ သုံးဘက်သည် တြိဂံဖြစ်လျှင် သုံးဘက်၏ ပေါင်းလဒ်သည် တတိယဘက်ထက် ပို၍ ကြီးမားသည်။ ဥပမာ: triangle_area (၃, ၄, ၅) == 6.00 triangle_area (၁, ၂, ၁၀) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''အကယ်၍ object q သည်ပျံသန်းမည်ဆိုပါက True ကိုပြန်ပေးပြီးအခြားနည်းအားဖြင့် False ကိုပြန်ပေးသော function တစ်ခုကိုရေးပါ။ object q သည်ချိန်ခွင်လျှာရှိပါက (အဲဒါသည် palindromic စာရင်းတစ်ခုဖြစ်သည်) နှင့်၎င်း၏ဒြပ်စင်များစုစုပေါင်းသည်အနိုင်ဆုံးအလေးချိန် w ထက်နည်းသည်ဖြစ်စေ၊ ညီမျှသည်ဖြစ်စေ။ ဥပမာ: will_it_fly (([1, 2], 5) â -> False # 1+2 သည်အနိုင်ဆုံးအလေးချိန်ထက်နည်းသည်ဖြစ်စေ၊မညီမျှပါ။ will_it_fly (([3, 2, 3], 1) â -> False # ၎င်းသည်ချိန်ခွင်လျှာရှိသည်ဖြစ်စေ၊အနိုင်ဆုံးအလေးချိန်ထက်ပိုသော 3+2+3 ဖြစ်သည်။ will_it_fly (([3, 2, 3], 9) â -> True # 3+23 သည်အနိုင်ဆုံးအလေးချိန်ထက်နည်းသည်ဖြစ်စေ၊မညီမျှသည်ဖြစ်စေ၊ will_it_fly ((([3], 5) â -> True # 3 သည်အနိုင်ဆုံးအလေးချိန်ထက်နည်းသည်ဖြစ်စေ၊မညီမျှသည်ဖြစ်စေ၊မညီမျှသည်ဖြစ်စေ။'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"အပြည့်အစုံများ၏ array ကိုပေးထားသည်၊ array ကို palindromic ပြုလုပ်ရန်ပြောင်းလဲရန်လိုအပ်သောအနည်းဆုံး element များကိုရှာပါ။ palindromic array သည်နောက်ပြန်နှင့်ရှေ့သို့တူညီသော array တစ်ခုဖြစ်သည်။တစ်ခုတည်းသောပြောင်းလဲမှုတွင် element တစ်ခုကိုအခြား element တစ်ခုသို့ပြောင်းနိုင်သည်။ ဥပမာ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''string စာရင်းနှစ်ခုကိုလက်ခံပြီး list တစ်ခု၏ string အားလုံးတွင်စာလုံးအရေအတွက်တူညီသောစာရင်းကိုအခြားစာရင်းထက်နည်းသောစာရင်းကိုပြန်ပေးသော function ကိုရေးပါ။ စာရင်းနှစ်ခုမှာစာလုံးအရေအတွက်တူညီပါကပထမဆုံးစာရင်းကိုပြန်ပေးပါ။ total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'admin', 'hi']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', [' 4]) -> '4' ]]'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ပေးထားသောကိန်းသည် ၃ လုံးသောပရိုင်းမင်ကိန်းများ၏ မြှောက်လဒ်ဖြစ်လျှင် မှန်သောကိန်းကိုပြန်ပေးသော function ကိုရေးပါ အခြားနည်းအားဖြင့်မှားပါသည် (a) သည် ၁၀၀ ထက်နည်းသည်ဟုသိပါသည် ဥပမာ: is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"သင်လုပ်ရမှာက x သည် n ၏ ရိုးရှင်းသော စွမ်းအားဖြစ်လျှင် မှန်သော၊ အခြားကိစ္စများတွင် မှားသော၊ x သည် n ၏ ရိုးရှင်းသော စွမ်းအားဖြစ်လျှင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများ၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ\"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ဖြောင့်ကိန်း a ကိုယူပြီး True ကိုပြန်ပေးသော function ကိုရေးပါ။ မှတ်ချက်: ဒီ ingeger သည် integer ကိန်းတစ်ခုခု၏ cube ဖြစ်လျှင်သင်သည်ထည့်သွင်းချက်သည်အမြဲတမ်းမှန်သည်ဟုယူဆနိုင်သည်။ ဥပမာ: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"သင်ဟာ hexadecimal နံပါတ်ကို string တစ်ခုအဖြစ် လက်ခံပြီး hexadecimal နံပါတ်များ၏ အရေအတွက်ကို ရေတွက်တဲ့ function တစ်ခုကို ရေးရန် တာဝန်ပေးခံရပြီ (prime number သို့မဟုတ် prime သည် 1 ထက်ကြီးသော သဘာဝကိန်းတစ်ခုဖြစ်ပြီး ပိုငယ်သော သဘာဝကိန်းနှစ်လုံး၏ product မဟုတ်) ။ hexadecimal နံပါတ်များမှာ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F ဖြစ်သည်။ prime နံပါတ်များမှာ 2, 3, 5, 7, 11, 13, 17,... ဖြစ်သည်၊ ထို့ကြောင့်သင်သည် အောက်ပါဂဏန်းများ၏ အရေအတွက်ကို သတ်မှတ်ရန်လိုအပ်သည်: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13) မှတ်ချက်: သင်သည် input ကို မှန်ကန်သော သို့မဟုတ် ဗလာ string ဟုယူဆနိုင်ပြီး သင်္ကေတ A,B,C,D,E,F သည် အမြဲတမ်း uppercase ဖြစ်သည်။ ဥပမာများ: num = AB အတွက် output သည် num = 1.\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"သင်ကဒသမပုံစံတစ်ခုပေးမည်နှင့်သင်၏အလုပ်သည်ဒွိဖိုင်သို့ပြောင်းရန်ဖြစ်သည်။ function သည် string တစ်ခုကိုပြန်ရသင့်သည်၊ သင်္ကေတတစ်ခုစီသည်ဒွိဖိုင်ကိုကိုယ်စားပြုသည်။ string ရှိအက္ခရာတစ်ခုစီသည် '0' သို့မဟုတ် '1' ဖြစ်လိမ့်မည်။ string ၏အစနှင့်အဆုံးတွင် 'db' သင်္ကေတတစ်စုံရှိလိမ့်မည်။ extra သင်္ကေတများသည် format ကိုကူညီရန်ရှိသည်။ ဥပမာ: decimal_to_binary ((15) # returns \"db1111db\" decimal_to_binary32) # returns \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"string s ကိုပေးထားပြီး string သည် happy ဖြစ်သည်၊ မဟုတ်သည်ကိုစစ်ဆေးရန်တာဝန်ရှိသည်။ string သည်အနည်းဆုံး ၃ ခုရှိပြီးနောက်ထပ်စာလုံး ၃ လုံးမှာကွဲပြားပါက string သည်ပျော်သည် ဥပမာ: is_happy (a) => false is_happy (a) => false is_happy (a) => false is_happy (b) => true is_happy (a) => false is_happy (a) => false is_happy (adb) => true is_happy (x) => false \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"သင်တန်း၏နောက်ဆုံးပတ်တွင် ဆရာသည် ကျောင်းသားများအား အမှတ်ပေးရသည်။ ဆရာသည် မိမိ၏ အမှတ်ပေးရေး အယ်လ်ဂိုရစ်သမ်ကို ပြုစုနေသည်။ တစ်ခုတည်းသော ပြဿနာမှာ အမှတ်ပေးရေးသားသည့် ကုဒ်ကို ဆုံးရှုံးခဲ့ရခြင်း ဖြစ်သည်။ သင်တန်းသားအချို့၏ GPA စာရင်းကို ပေးထားပြီး အောက်ပါဇယားကို အသုံးပြု၍ စာလုံးအဆင့်စာရင်းကို ထုတ်ပေးနိုင်မည့် လုပ်ဆောင်ချက်တစ်ခုကို ရေးသားရန် လိုပါသည်။ စာလုံးအဆင့် 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"string တစ်ခုကိုယူပြီး string အရှည်သည် ပရိုင်းမင်ကိန်းဖြစ်လျှင် True သို့မဟုတ် False ပြန်ပေးသော function ကိုရေးပါ။ ဥပမာ prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"အပေါင်းကိန်းပြည့် n ကိုပေးထားလျှင် 1 နဲ့စပြီး အဆုံးသတ်တဲ့ အပေါင်းကိန်းပြည့်များရဲ့ ဂဏန်းပေါင်းကိုပြန်ပေးပါ\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"အပေါင်းကိန်း N ကိုပေးထားလျှင် ဘိုင်နရီစနစ်ဖြင့် ၎င်း၏ဂဏန်းများ၏စုစုပေါင်းကိုပြန်ပေးပါ။ ဥပမာ N = 1000 အတွက်၊ ဂဏန်းများစုစုပေါင်းသည် 1 ဖြစ်လိမ့်မည်။ ထွက်ပေါက်သည် \"1\" ဖြစ်ရမည်။ N = 150 အတွက်၊ ဂဏန်းများစုစုပေါင်းသည် 6 ဖြစ်လိမ့်မည်။ ထွက်ပေါက်သည် \"110\" ဖြစ်လိမ့်မည်။ N = 147 အတွက်၊ ဂဏန်းများစုစုပေါင်းသည် 12 ဖြစ်လိမ့်မည်။ ထွက်ပေါက်သည် \"1100\" ဖြစ်လိမ့်မည်။ Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. ထွက်ပေါက်: ဘိုင်နရီကိန်းစဉ်တစ်ခု \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"အပြည့်အစုံစာရင်းတစ်ခုရှိလျှင် lst သည် odd index ရှိသည့် အပေါင်းအပါများကို ပေါင်းထည့်ပေးသည်။ ဥပမာ: add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"string ကိုယူပြီး၎င်း၏စီစဉ်ထားသောပုံစံကိုပြန်ပေးသော function ကိုရေးပါ။ string ၏စီစဉ်ထားသောပုံစံသည်စကားလုံးအားလုံး (အကွက်ဖြင့်ခွဲထားသည်) ကို ascii တန်ဖိုးပေါ်မူတည်၍တက်သောစီစဉ်ထားသောစာလုံးအားလုံးပါ ၀ င်သောစကားလုံးအသစ်တစ်ခုဖြင့်အစားထိုးထားသော string ဖြစ်သည်။ မှတ်ချက်: စကားလုံးများနှင့်အလွတ်နေရာများ၏စီစဉ်မှုကိုထားရှိသင့်သည်။ ဥပမာ: anti_shuffle ((('Hi') သည် 'Hi' anti_shuffle ((('hello') ကိုပြန်ပေးသည် 'ehllo' anti_shuffle (('Hello World!!!') သည် 'Hello !!!Wdlor' ကိုပြန်ပေးသည်။\"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"သင်သည် 2D ဒေတာကို nested lists အဖြစ်ပေးထားသည်၊ ၎င်းသည် matrix နှင့်တူသော်လည်း၊ matrix နှင့်မတူဘဲ၊ အတန်းတစ်ခုစီတွင်တိုင်ပေါင်းများစွာပါရှိနိုင်သည်။ lst နှင့် integer x ကိုပေးထားသည်၊ အတန်းထဲမှာ integer x ကိုရှာဖွေပြီး tuples ၏စာရင်းကိုပြန်ပေးသည်၊ [(x1, y1), (x2, y2) ...] ထို့ကြောင့် tuple တစ်ခုစီသည်အညွန်ကြားချက် - (တန်း၊ တိုင်) ဖြစ်သည်၊ ၀ နှင့်စတင်သည်။ အစပိုင်းတွင်အညွန်ကြားချက်များကိုအတန်းများဖြင့်တက်သည်အလိုက်စီစဉ်ပါ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [0, 0, 0, 0, 0, 1, 4], 0 (0), (2, 5), (2, 0) ], 1) [] == [[အတန်း 1, 1, 2, 3, 2, 2]] []\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"အနှုတ်မဟုတ်သော ကိန်းပြည့်များ၏ array ကိုပေးထားပြီးလျှင်၊ ပေးထားသော array ၏ မိတ္တူကို sort လုပ်ပြီးနောက် ပြန်ပေးပါ။ ပေးထားသော array ကို sum (ပထမဆုံး index တန်ဖိုး၊ နောက်ဆုံး index တန်ဖိုး) သည် odd ဖြစ်လျှင်၊ သို့မဟုတ် sum (ပထမဆုံး index တန်ဖိုး၊ နောက်ဆုံး index တန်ဖိုး) သည် even ဖြစ်လျှင်၊ ဆင်းသက်သော အဆင့်ဖြင့် sort လုပ်ပါ။ မှတ်ချက်: * ပေးထားသော array ကို မပြောင်းပါနှင့်။ ဥပမာများ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"function encrypt ကို argument အဖြစ် string ကိုယူပြီး alphabet ကိုလှည့်ခြင်းဖြင့် encrypted string ကိုပြန်ပေးသော function တစ်ခုကိုဖန်တီးပါ။ alphabet ကိုစာလုံးနှစ်လုံးဖြင့်နှစ်နေရာသို့ပြောင်းသွားအောင်လှည့်ပါ။ ဥပမာ: encrypt (('hi') ကို 'lm' encrypt (('asdfghjkl') ကို 'ewhjklnop' encrypt (('gf') ကို 'kj' encrypt (('et') ကို 'ix' ပြန်ပေးသည်။\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"သင်သည် integer များစာရင်းတစ်ခုပေးထားသည်။ စာရင်း၏ဒုတိယအသေးဆုံး element ကိုပြန်ပေးသော function next_smallest () ကိုရေးပါ။ ထို element မရှိပါက None ကိုပြန်ပေးပါ။ next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"သင်ဟာစကားလုံးတစ်တန်းပေးခံရပြီးသင်၏တာဝန်သည်ပျင်းရိမှုအရေအတွက်ကိုရေတွက်ရန်ဖြစ်သည်။ ပျင်းရိမှုဆိုသည်မှာ \"I\" စကားလုံးနှင့်စတင်သောဝါကျဖြစ်သည်။ဝါကျများကို '.', '?' သို့မဟုတ် '! 'ဖြင့်ကန့်သတ်ထားသည်။ ဥပမာ: >>> is_bored ((\" Hello world\") 0 >>> is_bored ((\"မိုးကောင်းကင်ကပြာနေတယ်။ နေရောင်ကတောက်ပနေတယ်။ ဒီရာသီဥတုကိုငါကြိုက်တယ်\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''ဂဏန်း ၃ လုံးကို ယူသော လုပ်ဆောင်ချက်တစ်ခု ဖန်တီးပါ။ ဂဏန်းတစ်ခုသည် အခြား ၂ လုံး၏ ပေါင်းလဒ်နှင့် ညီမျှလျှင် မှန်ကန်သော ဂဏန်းကို ပြန်ပေးပြီး ဂဏန်းအားလုံးသည် ကိန်းပြည့်များဖြစ်ပါက မှားယွင်းသော ဂဏန်းကို ပြန်ပေးသည်။ အခြားကိစ္စများတွင် မှားယွင်းသော ဂဏန်းကို ပြန်ပေးသည်။ ဥပမာ any_int ((5, 2, 7) â -> True any_int ((3, 2, 2) â -> False any_int ((3, -2, 1) â -> True any_int ((3.6, -2.2, 2) â -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"စာတိုတစ်စောင်ကိုယူပြီး စာလုံးအားလုံး၏ case ကိုလဲလှယ်ပြီး စာတိုတွင်ရှိသော vowels အားလုံးကို အင်္ဂလိပ်အက္ခရာစဉ်တွင် ထို vowel ထက် ၂ နေရာရှေ့တွင်ပေါ်လာသောစာလုံးဖြင့်အစားထိုးသော function ကိုရေးပါ။ စာလုံးများကိုသာယူပါ။ ဥပမာများ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"သင်ဟာ integer တွေရဲ့စာရင်းတစ်ခုပေးထားပါတယ် သင်ဟာ အကြီးဆုံး prime value ကိုရှာပြီး ၎င်းရဲ့ဂဏန်းပေါင်းကိုပြန်ပေးရမယ်။ ဥပမာ: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] အတွက် output က 10 ဖြစ်သင့်တယ် lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] အတွက် output က 25 ဖြစ်သင့်တယ် lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] အတွက် output က 13 ဖြစ်သင့်တယ် lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] အတွက် output က 11 ဖြစ်သင့်တယ် lst = [0,81,12,3,21,1] အတွက် output က 3 ဖြစ်သင့်တယ် lst = [0,1,8,1,2,7] အတွက် output က 7 ဖြစ်သင့်တယ်\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"အဘိဓာန်တစ်ခုပေးထားလျှင်, key အားလုံးသည် စာလုံးငယ်များဖြစ်လျှင် True ကိုပြန်ပေးပါ သို့မဟုတ် key အားလုံးသည် စာလုံးကြီးများဖြစ်လျှင်, မဟုတ်လျှင် False ကိုပြန်ပေးပါ။ function သည် False ကိုပြန်ပေးသင့်သည် ပေးထားသော အဘိဓာန်သည်အလွတ်ဖြစ်သည်။ ဥပမာ: check_dict_case (((\"a\":\"apple\", \"b\":\"banana\"}) သည် True ကိုပြန်ပေးရမည်။ check_dict_case (((\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) သည် False ကိုပြန်ပေးရမည်။ check_dict_case (((\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) သည် False ကိုပြန်ပေးရမည်။ check_dict_case (((\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) သည် False ကိုပြန်ပေးရမည်။ check_dict_case (((\"NC\":\"STATE\", \"Z\":\"IP\"\") သည် True ကိုပြန်ပေးရမည်။\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"အနှုတ်လက္ခဏာမဟုတ်သော ကိန်းပြည့်ကိုယူပြီး ပထမ n ကိန်းပြည့်များနှင့် n ထက်နည်းသော ကိန်းပြည့်များ၏ array ကိုပြန်ပေးသော function ကိုလုပ်ဆောင်ပါ ဥပမာ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"function ကိုအပြီးသတ်ပါ နှစ်ခုယူပြီးသူတို့၏ယူနစ်ဂဏန်းများ၏ထုတ်ကုန်ပြန်သည် input ကိုအမြဲတမ်းမှန်ကန်သည်ဟုယူဆပါဥပမာများ: မြှောက်ပါ 148, 412) ပြန်ရမယ် 16 မြှောက်ပါ 19 28, 72 မြှောက်ပါ 2020, 1851 ပြန်ရမယ် 0 မြှောက်ပါ 14-15 ပြန်ရမယ် 20\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"string s ကိုပေးထားလျှင်, အက္ခရာမကြီးများ၏ကိန်းကိုတောင်ညွှန်းများတွင်ရေတွက်ပါ။ ဥပမာ: count_upper (('aBCdEf') သည် 1 count_upper (('abcdefg') သည် 0 count_upper (('dBBE') သည် 0 ကိုပြန်ပေးသည်။\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''နံပါတ်တစ်ခုခုကို ကိုယ်စားပြုသော တန်ဖိုး (string) ကိုယူပြီး ၎င်းနှင့်အနီးဆုံးကိန်းပြည့်ကို ပြန်ပေးသော function တစ်ခုကို ဖန်တီးပါ။ နံပါတ်သည် နှစ်ခုနှင့်အကွာအဝေးတူလျှင် ၎င်းကို သုညမှ အဝေးသို့ အဝိုင်းချပါ။ ဥပမာ >>> closest_integer (((\"10\") 10 >>> closest_integer (((\"15.3\") 15 မှတ်ချက်: သုညမှ အဝေးသို့ အဝိုင်းချခြင်းသည် ပေးထားသော နံပါတ်သည် နှစ်ခုနှင့်အကွာအဝေးတူလျှင် သင်ပြန်ရမည့်ကိန်းသည် သုညမှ အဝေးဆုံးဖြစ်သည်ဟု ဆိုလိုသည်။ ဥပမာ closest_integer \" ((14.5\") သည် ၁၅ ကိုပြန်ရပြီး closest_integer \" ((-14.5\") သည် ၁၅ ကိုပြန်ရသည်။ '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"အပေါင်းကိန်း n ကိုပေးလျှင် ကျောက်ခဲ n အဆင့်ရှိပုံတပုံ လုပ်ရပါမည်။ ပထမအဆင့်တွင် ကျောက်ခဲ n ရှိသည်။ နောက်တစ်ဆင့်တွင် ကျောက်ခဲအရေအတွက်မှာ - n သည် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် အမည်စာရင်းတစ်ခုတွင် ကျောက်ခဲအရေအတွက်ကို ပြန်ပေးပါ၊ အဲဒီမှာ index i ရှိ element သည် level (i+1) တွင် ကျောက်ခဲအရေအတွက်ကို ကိုယ်စားပြုသည်။ ဥပမာများ: >>> make_a_pile (i+1) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"သင်ဟာအကောင့်တစ်ခုမှာ စာလုံးများကိုအကောင့်တစ်ခုအဖြစ်ခွဲခြားပြီး စာလုံးများကိုပြန်ပို့ရမယ်။ ဥပမာ: words_string ((\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string ((\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ဤ function သည် အပေါင်းကိန်း x နှင့် y နှစ်ခုကို ယူပြီး [x, y] အပါအဝင် ကန့်သတ်ချက်အတွင်းရှိ အကြီးဆုံး အပေါင်းကိန်းကို ပြန်ပေးသည်။ ထိုကဲ့သို့သော ကိန်းမရှိပါက function သည် -1 ကို ပြန်ပေးရမည်။ ဥပမာ: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"သင်ဟာ အပေါင်းကိန်း n နှင့် m ကိုပေးထားပြီး သင့်အလုပ်က n မှ m အထိ (n နှင့် m အပါအဝင်) ရှိသော ကိန်းပြည့်များ၏ ပျမ်းမျှကို တွက်ချက်ရန်ဖြစ်သည်။ အဖြေကို အနီးဆုံးကိန်းပြည့်သို့ အဝိုင်းချပြီး ဘိုင်နရီအဖြစ် ပြောင်းပါ။ n သည် m ထက်ကြီးလျှင် -1 ကိုပြန်ပေးပါ။ ဥပမာ: rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"အပေါင်းကိန်း x ၏စာရင်းကိုပေးလျှင် ကိန်းဂဏန်းတစ်လုံးမျှမရှိသော အစိတ်အပိုင်းများ၏ရွေးချယ်ထားသောစာရင်းကိုပြန်ပေးပါ မှတ်ချက်: ပြန်ပေးထားသောစာရင်းကို တိုးတက်လာသောအစဉ်အတိုင်းရွေးချယ်ရပါမည်။ ဥပမာ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ကိန်းပြည့်များ၏ array တစ်ခုကိုပေးလျှင် ၁ နှင့် ၉ အပါအဝင် ကိန်းပြည့်များကိုရွေးချယ်ပြီး array ကို ပြောင်းပြန်ရွေးချယ်ပြီး နံပါတ်တိုင်းကို ၎င်းနှင့် ကိုက်ညီသောနာမည်ဖြင့်အစားထိုးပါ ဥပမာ: arr = [၂၊ ၁၊ ၁၊ ၄၊ ၅၊ ၈၊ ၉] -> sort arr -> [၁၊ ၁၊ ၁၊ ၂၊ ၂၊ ၃၊ ၄၊ ၅၊ ၈] -> reverse arr -> [၈၊ ၅၊ ၄၊ ၃၊ ၂၊ ၂၊ ၁၊ ၁] return [\"၈\"၊ \"၅\"၊ \"၄\"၊ \"၃\"၊ \"၂\"၊ \"၂\"၊ \"၁\"\"] အကယ်၍ array သည်အလွတ်ဖြစ်ပါက array ကို return: arr = [] return [] အကယ်၍ array တွင်ထူးခြားသောနံပါတ်ရှိပါက၎င်းကိုလျစ်လျူရှုပါ arr = [၁၊ ၁၊ ၅၅] -> arr -> [၁၊ ၅၅] -> reverse arr = [51] return - '၁' ]\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"f ကို parameter အဖြစ်ယူပြီး index i ရှိ element ၏တန်ဖိုးသည် i ၏ factorial ဖြစ်သည် i သည်တစ်ထပ်တည်းဖြစ်သည် သို့မဟုတ် 1 မှ i အထိရှိသောအလုံးရေများ၏စုစုဖြစ်သည် i သည် 1 မှစတင်သည် i ၏ factorial သည် 1 မှ i အထိရှိသောအလုံးရေများ၏မြှောက်ကိန်းဖြစ်သည် (1 * 2 * ... * i) ။ ဥပမာ: f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"အပေါင်းကိန်း n ကိုပေးထားလျှင်, အပါအဝင်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အ\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"count_nums function ကိုရေးပါ integer array ကိုယူပြီးဂဏန်းပေါင်းစုပါသော element အရေအတွက်ကိုပြန်ပေးသည် > 0. ဂဏန်းသည်အနှုတ်ဖြစ်လျှင်ပထမဆုံးလက်မှတ်ထိုးထားသောဂဏန်းသည်အနှုတ်ဖြစ်လိမ့်မည်။ ဥပမာ -123 သည် -1, 2, နှင့် 3 ဂဏန်းများကိုလက်မှတ်ထိုးထားသည် >>> count_nums (([]) == 0 >>> count_nums ([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"array 'arr' မှာ N ကိန်းပြည့်တွေရှိပါတယ် arr[1], arr[2], ..., arr[N] array ထဲကနံပါတ်တွေကို randomly order လုပ်ပေးပါလိမ့်မယ်။ သင့်အလုပ်က array တစ်ခုကို အောက်ပါအစီအစဉ်အတိုင်းအလျောက်မကျဆင်းအောင်စီစဉ်နိုင်မလားဆိုတာ ဆုံးဖြတ်ဖို့ပါ။ သင်ပေးထားတဲ့ array မှာ ဘယ်ဘက်ပြောင်းတဲ့ operation ကို အကြိမ်များစွာလုပ်ဆောင်ခွင့်ရှိပါတယ်။ right shift operation တစ်ခုက array ရဲ့ element တွေအားလုံးကို ညာဘက်ကိုတစ်နေရာစီပြောင်းခြင်းဖြစ်ပါတယ်။ array ရဲ့နောက်ဆုံး element ကို array ထဲက အစအဆုံးနေရာကို ရွှေ့ပေးပါလိမ့်မယ်။ 0th index ကို ဆိုလိုတာပါ။ အထက်ပါ operation ကိုလုပ်ဆောင်ပြီး sorted array ကိုရယူနိုင်ရင် True ပြန်ပေးရင် True ပြန်ပေးရင် False ပြန်ပေးပါ။ ပေးထားတဲ့ array ဟာအလွတ်ဆိုရင် True ပြန်ပေးပါ။ မှတ်ချက်: ပေးထားတဲ့ list မှာ ထူးခြားတဲ့ element တွေရှိဖို့ အာမခံထားပါတယ်။ ဥပမာ: move_one_(ball[3,4,5,== 1, 2> True Explanation: By performin 2 right right-ball operations, non-decreasing order can be achieved for the array. move_one_{3,4,== 5,== 2} ညာဘက်ပြောင်းတဲ့ order ကိုမပြောင်းတဲ့ array အတွက် ဘယ် number ကိုမဆိုမပြောင်းနိုင်ပါဘူး။\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"ဤပြဿနာတွင် lst1 နှင့် lst2 အကြား အပြောင်းအလဲပြုလုပ်သော အစိတ်အပိုင်းအရေအတွက်အတွက်အတွက် ကန့်သတ်ချက်မရှိပါ။ lst1 နှင့် lst2 အကြား အပြောင်းအလဲပြုလုပ်၍ lst1 ၏ အစိတ်အပိုင်းအားလုံး အချိုးကျဖြစ်အောင်လုပ်နိုင်လျှင် \"YES\" ကိုပြန်ပို့ပါ။ မဟုတ်ပါက \"NO\" ကိုပြန်ပို့ပါ။ ဥပမာ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" အဝင်စာရင်းများမှာ အလွတ်မဟုတ်ကြောင်းယူဆထားသည်။\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"စာလုံးပေါင်းများစွာ ထပ်ကျော့ပါက စာလုံးပေါင်းအားလုံးကို ပြန်ပေးပါ ဥပမာ: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4} histogram ' (((') == {'b 4}) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task ကျွန်တော်တို့မှာ s နဲ့ c ဆိုတဲ့ string နှစ်ခုရှိပါတယ် s ထဲက s နဲ့ c ထဲက character တွေကို delete လုပ်ပြီးရင် result string က palindrome ဖြစ်လားစစ်ဆေးရမယ်။ ရှေ့ပြန်နဲ့နောက်ပြန် တူညီတဲ့ result string ကိုပြန်ရင် string ကို palindrome လို့ခေါ်တယ်။ result string နဲ့ True/False ကိုပြန်တဲ့ tuple ကိုစစ်ဆေးရမယ်။ ဥပမာ s = \"abcde\", c = \"ae\" အတွက် result က ('bcd', False) s = \"abcdef\", c = \"b\" အတွက် result က ('acdef', False) s = \"abcdedcba\", c = \"ab\", အတွက် result က ('cdedc', True) ဖြစ်ရမယ်။\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"string များ၏စာရင်းကိုပေးထားပြီး string တစ်ခုစီသည်ဂဏန်းများသာပါဝင်သည် list တစ်ခုကိုပြန်ပေးပါ။ output ၏ element i တစ်ခုစီသည်\" input ၏ string i တွင် odd element များ၏အရေအတွက်\" ဖြစ်သင့်သည်။ i အားလုံးကို input ၏ i'th string တွင် odd digit များဖြင့်အစားထိုးသင့်သည်။ >>> odd_count['1234567']) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ကိန်းပြည့် n များ၏ array ကိုပေးထားလျှင်, မည်သည့်အလွတ်မဟုတ်သော n ၏ sub-array ၏အနည်းဆုံးပမာဏကိုရှာပါ။ ဥပမာ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"သင်ဟာရေတွင်းများ၏စတုဂံ grid ကိုပေးထားသည်။တစ်ခုစီကတစ်ခုတည်းသောရေတွင်းကိုကိုယ်စားပြုပြီးတစ်ခုစီမှာ 1 တစ်ခုတည်းသောရေယူနစ်ကိုကိုယ်စားပြုသည်။ရေတွင်းတစ်ခုစီမှာရေထုတ်ယူရန်အသုံးပြုနိုင်သောတူညီသော bucket ရှိပြီး buckets အားလုံးသည်တူညီသောစွမ်းရည်ရှိသည်။သင်၏တာဝန်သည် buckets များကိုအသုံးပြု၍ရေတွင်းများကိုအလွတ်ချရန်ဖြစ်သည်။အခွန်များအားအခွန်များချရန်လိုအပ်သောအကြိမ်အရေအတွက်ကို output ပေးပါ။ဥပမာ: 1: အဝင်: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 output: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 output: 0 * constraints: 1 * output: 1 * constraints: 1 * all lengths have the same length: 1 * length: 10 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ဤကတ္တားတွင်၊ သင်သည် အနှုတ်လက္ခဏာမဟုတ်သော ဖြောင့်ကိန်းများကို ၎င်းတို့၏ ဘိုင်နရီ ကိုယ်စားပြုမှုတွင် တစ်များအရေအတွက်အရ တက်တက်သော အစီအစဉ်ဖြင့် စီစဉ်ရသည်။ အလားတူသော တစ်များအတွက်၊ ဆယ်လီတန်ဖိုးကို အခြေခံ၍ စီစဉ်ပါ။ ၎င်းကို ဤသို့အကောင်အထည်ဖော်ရမည်: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"string s နှင့် natural number n ကိုပေးထားလျှင် string s မှအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံသံသံသံတူအသံသံတူအသံတူအသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံ\"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"သင်ဟာစကားလုံးတစ်လုံးပေးထားတယ်။ သင့်တာဝန်ကစကားလုံးရဲ့ညာဘက်ခြမ်းကနေအသံတူနှစ်ခုကြားမှာတည်ရှိတဲ့အနီးစပ်ဆုံးအသံကိုရှာဖို့ (case sensitive) ။ အစနဲ့အဆုံးကအသံတူတွေကိုမရေတွက်ပါ။ အထက်ပါအခြေအနေကိုမပြည့်မီတဲ့အသံတူမရှိရင်အလွတ် string ကိုပြန်ပေးပါ။ ပေးထားတဲ့ string မှာ အင်္ဂလိပ်စာလုံးသာပါတယ်လို့ယူဆနိုင်ပါတယ်။ ဥပမာ: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''သင်ဟာ string နှစ်ခုစာရင်းပေးထားပြီး နှစ်ခုစလုံးမှာ open parentheses '(' သို့မဟုတ် close parentheses ') 'သာပါဝင်ပါတယ်။ သင့်အလုပ်က string နှစ်ခုကို တစ်ချို့အစဉ်အတိုင်းဆက်သွယ်နိုင်လားဆိုတာစစ်ဆေးဖို့၊ ရလဒ် string ကောင်းလိမ့်မလားဆိုတာစစ်ဆေးဖို့ပါ။ S ထဲက parentheses အားလုံးညီမျှမှသာ string S ကိုကောင်းတယ်လို့ယူဆရမှာပါ။ ဥပမာ: string '((()) 'ကကောင်းတယ် string '()) 'ကမဟုတ်ပါ။ string ကောင်းအောင်လုပ်နည်းရှိရင် 'Yes' ပြန်ပေးပြီး အခြားနည်းဆိုရင် 'No' ပြန်ပေးပါ။ ဥပမာ: match_parens [('() ', ') ']) == 'Yes' match_parens [(') ', ') ']) == 'No' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"array တစ်ခုမှာ integer တွေနဲ့ positive integer k ရှိရင် array ထဲက k အမြင့်ဆုံး ကိန်းဂဏန်းတွေနဲ့ sorted list တစ်ခုကို ပြန်ပေးပါ။ ဥပမာ ၁: အဝင်: arr = [-3, -4, 5], k = ၃ အထုတ်: [-4, -3, 5] ဥပမာ ၂: အဝင်: arr = [4, -4, 4], k = ၂ အထုတ်: [4, 4] ဥပမာ ၃: အဝင်: arr = [-3, 2, 1, 2, -1, -2, 1], k = ၁ အထုတ်: [2] မှတ်ချက်: ၁: array ရဲ့အရှည်က [1, 1000] အကြားမှာရှိမယ်။ ၂: array ထဲက element တွေက [-1000, 1000] အကြားမှာရှိမယ်။ ၃: 0 <= k <= len ((arr)\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ဖြောင့်ကိန်းများ၏ အလွတ်မဟုတ်သော စာရင်းကို ပေးထားလျှင်၊ နေရာတူရှိသော odd အစိတ်အပိုင်းများ၏ ပေါင်းလဒ်ကို ပြန်ပေးပါ။ ဥပမာ အဖြေ (([5, 8, 7, 1]) ==> 12 အဖြေ (([3, 3, 3, 3, 3]) ==> 9 အဖြေ (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ဖြောင့်ကိန်း arr နှင့် ဖြောင့်ကိန်း k တို့၏ အလွတ်မဟုတ်သော မေထရစ်တစ်ခုပေးထားလျှင် arr ၏ ပထမဆုံး k ဒြပ်စင်များမှ အနည်းဆုံး ဂဏန်းနှစ်လုံးပါသည့် ဒြပ်စင်များ၏ ပေါင်းလဒ်ကို ပြန်ပေးပါ။ ဥပမာ: အဝင်: arr = [111,21,3,4000,5,6,7,8,9], k = 4 ထွက်: 24 # sum of 21 + 3 Constraints: 1.\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"အပေါင်းကိန်း n ကိုပေးထားလျှင် ကော်လတ်ဇ် အစဉ်အတိုင်း မကိန်းများပါသော စီစဉ်ထားသော စာရင်းကို ပြန်ပေးပါ။ ကော်လတ်ဇ် ထင်ကြေးသည် သင်္ချာပညာတွင် အောက်ပါအတိုင်း သတ်မှတ်ထားသော အစဉ်တစ်ခုနှင့် သက်ဆိုင်သော ထင်ကြေးဖြစ်သည်။ မည်သည့် အပေါင်းကိန်း n မှ စတင်ပါ။ ထို့နောက် သက်တမ်းတစ်ခုစီကို ယခင် သက်တမ်းမှ အောက်ပါအတိုင်း ရယူပါသည်- ယခင် သက်တမ်းသည် သာတူပါက နောက်တစ်သက်တမ်းသည် ယခင် သက်တမ်း၏ တစ်ဝက်ဖြစ်သည်။ ယခင် သက်တမ်းသည် သာတူပါက နောက်တစ်သက်တမ်းသည် ယခင် သက်တမ်း၏ ၃ ဆနှင့် အပေါင်း ၁ ဖြစ်သည်။ ထင်ကြေးမှာ n ၏ မည်သည့် တန်ဖိုးမျှရှိသည်ဖြစ်စေ အစဉ်လိုက်သည် အမြဲတမ်း ၁ ကို ရောက်ရှိလိမ့်မည်။ မှတ်ချက်: ၁. ကော်လတ်ဇ် (၁) သည် [1] ဖြစ်သည်။ ၂. ပြန်ပေးသော စာရင်းကို တိုးတက်သော အဆင့်အတိုင်း စီစဉ်ထားသည်။ ဥပမာ: get_odd_collatz (၅) သည် [၁၊ ၅] ကို ပြန်ပေးသည်။ ၅ အတွက် ကော်လတ်ဇ် အစဉ်လိုက်သည် [၅၊ ၈၊ ၁၆၊ ၄၊ ၂၊ ၁] ဖြစ်သောကြောင့် သာမန်ကိန်းများမှာ ၁ နှင့် ၅ သာဖြစ်ပါသည်။\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"Date string ကို validate လုပ်ပြီး True ကိုပြန်ပေးမယ့် function တစ်ခုကိုရေးရမယ်။ date string က valid ဖြစ်ရင် True ပြန်ပေးမယ်။ မဟုတ်ရင် False ပြန်ပေးမယ်။ date က valid ဖြစ်ရင် date က valid ဖြစ်မယ်။ အောက်ပါ စည်းမျဉ်းတွေ အားလုံးကို ကျေနပ်ရင် date က valid ဖြစ်မယ်။ 1. date string က empty မဟုတ်ဘူး။ 2. ရက်ပေါင်းက 1 ထက်မနည်း ဒါမှမဟုတ် 31 ရက်ထက်ပိုမများရင် လပေါင်း 1,3,5,7,8,10,12 လပေါင်း 4,6,9,11 လပေါင်း 30 ရက်ထက်မနည်း ဒါမှမဟုတ် 1 ရက်ထက်ပိုမများရင် လပေါင်း 2 လပေါင်း 1 ရက်ထက်မနည်း ဒါမှမဟုတ် 29 ရက်ထက်ပိုမများရင် လပေါင်း 12 လထက်မနည်း 1 ရက်ထက်မနည်း ဒါမှမဟုတ် 12 ရက်ထက်ပိုမများရင် လပေါင်းက mm-dd-yyyy ဖြစ်ရမယ်။ ဥပမာ: valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-01-2040') => false_date (('06-04-2020') => valid_date (('06-04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''စကားလုံးများ၏ string ကိုပေးထားသည်, စာသားတွင်အဖြူကွက်မရှိပါကသင်သည် ',' ကို commas ပေါ်တွင်ခွဲခြားသင့်သည်, စာသားတွင်အဖြူကွက်မရှိပါကသင်သည်အက္ခရာစဉ်တွင် odd order ဖြင့် lowercase စာလုံးအရေအတွက်ကိုပြန်ပေးရမည်, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 ဥပမာများ split_words ((\"Hello world!\") â -> [\"Hello\", \"world!\"] split_words ((\"Hello,world!\") â -> [\"Hello\", \"world!\" split_words\" ((abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''နံပါတ်များစာရင်းကိုပေးထားလျှင်၎င်းတို့သည်တက်လာသောစီစဉ်မှုဖြင့်စီစဉ်ထားသည်ဖြစ်စေ၊ မပြုလုပ်သည်ဖြစ်စေပြန်လည်ပေးပါ။စာရင်းတွင်တူညီသောနံပါတ်တစ်မျိုးထက်ပိုပါက False ပြန်ပေးပါ။အနှုတ်လက္ခဏာကိန်းများမရှိဘဲ integer များသာယူပါ။ဥပမာ is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"သင်သည်နှစ်ခုပေးထားသည် ကြားကာလ, ဘယ်မှာတစ်ခုစီက integer များ၏တစ်စုံဖြစ်ပါသည်. ဥပမာ, ကြားကာလ = (စတင်, အဆုံးသတ်) = (1, 2). ပေးထားသောကြားကာလပိတ်ထားသည်, ကြားကာလ (စတင်, အဆုံးသတ်) နှစ်ဦးစလုံးအစနှင့်အဆုံးပါဝင်သည်ဆိုလိုသည်. ပေးထားသောကြားကာလတိုင်းအတွက်, ၎င်း၏စတင်သည်အနည်းဆုံးသို့မဟုတ်အဆုံးနှင့်ညီမျှသည်ယူဆထားသည်။သင်၏တာဝန်သည်ဤနှစ်ခုကြားကာလ၏ဖြတ်လမ်းအရှည်သည်ပထမဦးရေတစ်ခုဖြစ်သည်မဖြစ်ကိုသတ်မှတ်ရန်ဖြစ်သည်။ ဥပမာ, ကြားကာလ (1, 3), (2, 4) ၏ဖြတ်လမ်းအရှည်သည်ပထမဦးရေမဟုတ်သော (1 ဖြစ်သည်) (2, 3) ဖြစ်သည်။ အကယ်၍ဖြတ်လမ်းအရှည်သည်ပထမဦးရေဖြစ်လျှင် \"YES\" ပြန်ပေးပါ, မဟုတ်လျှင် \"NO\" ပြန်ပေးပါ။ အကယ်၍ ကြားကာလနှစ်ခုကဖြတ်လမ်းမတူပါက \"NO\" ပြန်ပေးပါ။ [input / output] နမူနာများ: intersection (((1, 2), (2, 3) ==> \"intersection (-1, 2) ==> \"intersection (-1, 4) \"intersection (-1, 4) \"==>\" NO - 5\", == (-3, 5) \"YES\" - \"YES\" ())\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"သင်သည် integer များ၏ array ကိုပေးထားပြီးသင်သည် integer များ၏တန်ဖိုးများကိုပေါင်း၍ array တွင်ရှိနံပါတ်တိုင်း၏သင်္ကေတအားလုံး၏ product ကိုပြန်ရမည်။ မှတ်ချက်: return None for empty arr. ဥပမာ: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"အလျား k ရှိသည့် grid တစ်ခုတွင် အတန်း N နှင့် အတိုင် N (N >= 2) နှင့် အပေါင်းကိန်း k ရှိလျှင် grid ၏ cell တစ်ခုစီတွင် တန်ဖိုးတစ်ခု ပါဝင်သည်။ [1, N * N] အပါအဝင် range ရှိသည့် integer တိုင်းသည် grid ၏ cells များတွင် တစ်ကြိမ်တည်းသာ ပေါ်ပေါက်သည်။ သင်သည် grid ၏ အလျား k ရှိသည့် အနည်းဆုံးလမ်းကြောင်းကို ရှာဖွေရမည်ဖြစ်သည်။ သင်သည် မည်သည့် cell မှမဆို စတင်နိုင်ပြီး အဆင့်တိုင်းတွင် အိမ်နီးချင်း cells များသို့ သွားနိုင်သည်။ တစ်နည်းအားဖြင့် သင်နှင့် လက်ရှိ cell တစ်ခု၏ အစွန်းတစ်ဖက်မျှဝေသော cells များသို့ သွားနိုင်သည်။ k ရှိသောလမ်းကြောင်းသည် k ကွက်လပ်များကို (မလိုအပ်ဘဲကွဲပြားသော) ကို အတိအကျ သွားရောက်ခြင်းဟု ဆိုလိုသည်ကို သတိပြုပါ။ သင်သည် grid မှထွက်၍ မရပါ။ A (k အလျား) လမ်းကြောင်းသည် A နှင့် B (k အလျား) ရှိသော path B (of) ထက်နည်းသည်ဟု ယူဆရလျှင် (၎င်းတို့ကို lA_st နှင့် lA_stB ဟုခေါ်ကြစို့) lA_stB သည် lexically lA_stB ထက်နည်းဆုံးဖြစ်သည်၊ အခြားစကားများနှင့်အညီ၊ lA_stB ၏ အလျား k တစ်လုံးရှိသည် k အတိုင်းနှင့်တူသည်။ ဥပမာများမှာ: [4,4, lA = lj, j[1, lA_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"Fibonacci Sequence ကို လူတိုင်းသိကြပြီး ပြီးခဲ့တဲ့ ရာစုနှစ်နှစ်အနည်းငယ်က သင်္ချာပညာရှင်တွေက နက်နက်နဲနဲ လေ့လာခဲ့ကြပါတယ်။ ဒါပေမယ့် လူတွေက မသိကြတာက Tribonacci Sequence ပါ။ Tribonacci Sequence ကို ထပ်ကျော့ခြင်းအားဖြင့် သတ်မှတ်ပါတယ်။ tri(1) = 3 tri(n) = 1 + n / 2, n သည် အချိုးကျဆိုရင် tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n သည် odd ဖြစ်ရင် tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 သင်ဟာ အနှုတ်ဂဏန်းမဟုတ်တဲ့ ကိန်းပြည့် n ကို ပေးထားပြီး သင်ဟာ Tribonacci Sequence ရဲ့ ပထမ n + 1 ကိန်းတွေရဲ့ စာရင်းကို ပြန်ပေးရမှာပါ။ ဥပမာ: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"အပေါင်းကိန်းပြည့် n ကိုပေးလျှင် ဂဏန်းများ၏ ဂဏန်းပေါင်းလဒ်ကိုပြန်ပေးပါ။ ဂဏန်းအားလုံးသည် အချိုးညီပါက ၀ ကိုပြန်ပေးပါ။ ဥပမာ: ဂဏန်းများ (၁) == ဂဏန်း ၁ ဂဏန်း (၄) == ဂဏန်း ၀ ဂဏန်း (၂၃၅) == ၁၅ \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''စတုရန်း ကပ် parentheses သာပါဝင်သော string ကို input အဖြစ်ယူသော function တစ်ခုကိုဖန်တီးပါ။ ကပ် parentheses အနည်းဆုံးတစ်ခု nested ဖြစ်သော bracket များ၏မှန်ကန်သောနောက်ဆက်တွဲရှိလျှင်သာ function သည် True ကိုပြန်ရသင့်သည်။ is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"သင်သည်ဂဏန်းများစာရင်းကိုပေးထားသည်။ သင်ပေးထားသောစာရင်းတွင်နှစ်ထပ်ကိန်းများစုစုပေါင်းကိုပြန်ပေးရန်လိုအပ်သည်၊ စာရင်းရှိ element တစ်ခုစီကိုအပေါ်ဆုံး int သို့အဝိုင်းဆွဲပါ (ကန့်သတ်ချက်) ပထမ။ ဥပမာများ: For lst = [1,2,3] ထွက်ပေါက်သည် 14 For lst = [1,4,9] ထွက်ပေါက်သည် 98 For lst = [1,3,5,7] ထွက်ပေါက်သည် 84 For lst = [1.4,4.2,0] ထွက်ပေါက်သည် 29 For lst = [-2.4,1,1] ထွက်ပေါက်သည် 6 ဖြစ်ရမည်။\"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ပေးထားသော string ၏နောက်ဆုံးအက္ခရာသည်အက္ခရာစဉ်အက္ခရာဖြစ်ပြီးစကားလုံး၏တစ်စိတ်တစ်ပိုင်းမဟုတ်လျှင် True ကိုပြန်လည်ပေးပို့သော function တစ်ခုကိုဖန်တီးပါ သို့မဟုတ် False ကိုပြန်လည်ပေးပို့ပါ။ မှတ်ချက်: \"word\" သည်စာလုံးစုတစ်စုဖြစ်ပြီးအခြားစာလုံးစုများကိုအကွက်ဖြင့်ခွဲထားသည်။ ဥပမာ: check_if_last_char_is_a_letter ((\"apple pie\") â -> False check_if_last_char_is_a_letter ((\"apple pi e\") â -> True check_if_last_char_is_a_letter ((\"apple pi e\") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"အထက်ပါအမှတ်ထက်မပိုသော သို့မဟုတ် အထက်ပါအမှတ်နှင့် ညီမျှသော အက္ခရာ၏ အကြီးဆုံးကိန်းညွှန်းကိန်းကို ပြန်ပေးသော လုပ်ဆောင်ချက်တစ်ခု ဖန်တီးပါ။ ထိုကဲ့သို့သော အက္ခရာမရှိပါက -1 ကိုပြန်ပေးပါ။ ပေးထားသော မေထရစ်တွင် ထပ်တူကျသော တန်ဖိုးများ မပါရှိပါ။ ဥပမာ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    ''''a' သည် အနှုတ်ကိန်းပြည့်များအနက် အကြီးဆုံးဖြစ်ပြီး 'b' သည် အပေါင်းကိန်းပြည့်များအနက် အသေးဆုံးဖြစ်သော tuple (a, b) ကိုပြန်လည်ပေးပို့သော function တစ်ခုကို ဖန်တီးပါ။ အနှုတ် သို့မဟုတ် အပေါင်းကိန်းပြည့်များမရှိပါက None အဖြစ်ပြန်လည်ပေးပို့ပါ။ ဥပမာ: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"အတည့်တည့်ကိန်းများ၊ floats များ၊ သို့မဟုတ် string များကို ကိုယ်စားပြုသော function တစ်ခုကို ဖန်တီးပြီး ၎င်း၏ပေးထားသော variable အမျိုးအစားတွင် အကြီးဆုံး variable ကိုပြန်ပေးသည်။ တန်ဖိုးများတူညီပါက None ကိုပြန်ပေးပါ။ မှတ်ချက်: အကယ်၍ အတည့်တည့်ကိန်းတစ်ခုသည် string တစ်ခုအဖြစ်ကိုယ်စားပြုထားပါက floating point သည် . သို့မဟုတ် , compare_one ((1, 2.5) â -> 2.5 compare_one ((1, \"2,3\") â -> \"2,3\" compare_one ((5,1\", \"6\") â -> \"6\" compare_one ((1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ပေးထားသော n ကို အပေါင်းကိန်း ၄ ခု၏ ပေါင်းလဒ်အဖြစ် ရေးနိုင်သည်၊ မရေးနိုင်သည်ကို အကဲဖြတ်ပါ ဥပမာ is_equal_to_sum_even (၄) == မှားသည် is_equal_to_sum_even (၆) == မှားသည် is_equal_to_sum_even (၈) == မှန်သည် \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ဘရာဇီး၏ factorial ကို: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! n > 0 ဥပမာ: >>> special_factorial ((4) 288 လုပ်ဆောင်ချက်သည် ၀ င်ငွေအဖြစ် integer တစ်ခုကိုလက်ခံရရှိပြီးဤ integer ၏ထူးခြားသောအချက်ပြကိန်းကိုပြန်ပေးရမည်။ \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ဥပမာ-၃ှင် ၎င်းတွင်ရှိသော နေရာများကို အောက်ခြေဖြတ်အက္ခရာများဖြင့် အစားထိုးပြီး စာတန်းတစ်ခုတွင် အဆက်အသွယ်ရှိသော နေရာ ၂ ခုထက် ပိုပါက အဆက်အသွယ်ရှိသော နေရာများကို - fix_spaces ((\"ဥပမာ\") == \"ဥပမာ\" fix_spaces ((\"ဥပမာ၁\") == \"ဥပမာ_၁\" fix_spaces (((\"ဥပမာ၂\") == \"ဥပမာ_၂\" fix_spaces (((\"ဥပမာ ၃\") == \"_ဥပမာ-၃\"  ဖြင့် အစားထိုးပါ။\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ဖိုင်နာမည်ကို ကိုယ်စားပြုသော string ကိုယူပြီး 'Yes' ပြန်ပေးပြီး ဖိုင်နာမည်မှန်လျှင် 'No' ပြန်ပေးသော function တစ်ခုကို ဖန်တီးပါ။ ဖိုင်နာမည်သည် အောက်ပါ အခြေအနေများအားလုံးပြည့်စုံလျှင်သာ ဖိုင်နာမည်သည် မှန်ကန်သည်ဟု ယူဆရသည်။ - ဖိုင်နာမည်တွင် ဂဏန်းသုံးလုံးထက်ပို၍ မရှိသင့်ပါ။ - ဖိုင်နာမည်တွင် အမှတ်တစ်ခုတည်းသာ ပါဝင်သည်။ - အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အ\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ဤလုပ်ဆောင်ချက်သည် ကိန်းပြည့်များစာရင်းကို ယူလိမ့်မည်။ စာရင်းရှိ အဝင်အမှတ်အားလုံးအတွက် ၎င်း၏ညွှန်းကိန်းသည် ၃ ၏မြှောက်ကိန်းဖြစ်ပါက လုပ်ဆောင်ချက်သည် ကိန်းပြည့်အဝင်ကို နှစ်ထပ်တင်ရမည်ဖြစ်ပြီး ၎င်း၏ညွှန်းကိန်းသည် ၄ ၏မြှောက်ကိန်းမဟုတ်ဘဲ ၃ ၏မြှောက်ကိန်းဖြစ်ပါက ကိန်းပြည့်အဝင်ကို သုံးထပ်တင်ရမည်ဖြစ်သည်။ လုပ်ဆောင်ချက်သည် စာရင်းရှိ အဝင်အမှတ်များကို ပြောင်းလဲမည်မဟုတ်ပါ။ ၎င်း၏ညွှန်းကိန်းများသည် ၃ သို့မဟုတ် ၄ ၏မြှောက်ကိန်းမဟုတ်ပါ။ လုပ်ဆောင်ချက်သည် အဝင်အမှတ်အားလုံး၏ ပေါင်းလဒ်ကို ပြန်ပေးရမည်။ ဥပမာ: lst = [1,2,3] အတွက် ထွက်ပေါက်သည် ၆ ဖြစ်သင့်သည်။ lst = [] အတွက် ထွက်ပေါက်သည် ၀ ဖြစ်သင့်သည်။ lst = [-1,-5,2,-1,-5] အတွက် ထွက်ပေါက်သည် -126 ဖြစ်သင့်သည်။\"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"သင်ဟာဝါကျကိုကိုယ်စားပြုတဲ့ string ကိုပေးထားတယ်၊ အဆိုပါဝါကျမှာ space နဲ့ခွဲထားတဲ့စကားလုံးတစ်ချို့ပါရှိပြီးအဓိကကိန်းတွေပါရှိတဲ့မူလဝါကျထဲကစကားလုံးတွေပါရှိတဲ့ string တစ်ခုကိုပြန်ပေးရမယ်။ string အသစ်ထဲကစကားလုံးတွေရဲ့အစဉ်အတန်းဟာမူလနဲ့တူသင့်တယ် Example1: Input: sentence = \"This is a test\" Output: \"is\" Example2: Input: sentence = \"lets go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"x * n ကို ရိုးရှင်းစေမည့် function ကိုလုပ်ဆောင်ရန်ဖြစ်သည်။ x * n သည် ကိန်းပြည့်တစ်ခုဖြစ်လျှင် function သည် True ကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် False ကိုပြန်ပေးသည်။ x နှင့် n နှစ်ခုလုံးသည် အပိုင်းကိန်းတစ်ခု၏ string ကိုယ်စားပြုမှုဖြစ်ပြီး အောက်ပါပုံစံရှိသည်၊ <numerator> / <denominator> ရှိသည်၊ အဲဒီမှာ အပိုင်းကိန်းနှင့် အမည်ကိန်းနှစ်ခုလုံးသည် အပေါင်းကိန်းပြည့် ကိန်းများဖြစ်သည်။ x နှင့် n သည် မှန်ကန်သော အပိုင်းကိန်းများဖြစ်ပြီး အမည်ကိန်းအဖြစ် သုညမရှိဟုယူဆနိုင်သည်။ simplify \" 1/5 \"၊ \"5/1\") = True simplify \" 1/6 \"၊ \"2/1\") = False simplify \" 7/10 \"၊ \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ပေးထားသော ကိန်းပြည့်စာရင်းကို ၎င်းတို့၏ ဂဏန်းများစုပေါင်းမှုအရ မြင့်တက်သော အစီအစဉ်ဖြင့် စီစဉ်ပေးသော လုပ်ဆောင်ချက်ကိုရေးပါ။ မှတ်ချက်: တူညီသော ဂဏန်းများစုပေါင်းမှုရှိသော အပိုင်းများစွာရှိပါက မူလစာရင်းရှိအညွှန်းကိန်းကို အခြေခံ၍ စီစဉ်ပါ။ ဥပမာ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"နံပါတ်များ၏ array ကို input အဖြစ်ယူပြီး array ထဲရှိ element အရေအတွက် 10 ထက်ပိုပြီး နံပါတ်၏ပထမနှင့်နောက်ဆုံး digits နှစ်ခုလုံးသည် odd ဖြစ်သည် (၁၊ ၃၊ ၅၊ ၇၊ ၉) ကိုပြန်လည်ပေးပို့သော function တစ်ခုကိုရေးပါ။ ဥပမာ: specialFilter (([၁၅၊ -၇၃၊ ၁၄၊ -၁၅]) => 1 specialFilter (([33, -၂၊ -၃၊ ၄၅၊ ၂၁၊ ၁၀၉)) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"သင်ဟာ အပေါင်းကိန်းတစ်ခု n ကိုပေးထားတယ်။ သင်ဟာ အရှည် n ရှိတဲ့ integer array တစ်ခုကို ဖန်တီးရမယ်။ i (1 ‰¤ i ‰¤ n) တိုင်းအတွက် a[i] = i * i - i + 1 တန်ဖိုးကိုပေးပါ။ a ရဲ့ သုံးထပ်ကိန်း (a[i], a[j], a[k]) အရေအတွက်ကိုပြန်ပေးပါ။ ဒီမှာ i < j < k, ပြီးတော့ a[i] + a[j] + a[k] က 3 ရဲ့ မြှောက်ဖော်ကိန်းပါ။ ဥပမာ: အဝင်: n = 5 ထွက်: 1 ရှင်းလင်းချက်: a = [1, 3, 7, 13, 21] တစ်ခုတည်းသောမှန်ကန်သော သုံးထပ်ကိန်းက (1, 7, 13) ပါ။\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''နေအဖွဲ့အစည်းတွင် ဂြိုဟ် ၈ လုံးရှိသည်။ နေနှင့်အနီးဆုံးဂြိုဟ်မှာ ဗုဒ္ဓဟူး၊ နောက်တစ်ခုမှာ သောကြာ၊ နောက်ပိုင်းတွင် ကမ္ဘာ၊ အင်္ဂါ၊ ကြာသပတေး၊ စနေ၊ ယူရန်၊ နတ်ပုဒ်။ ဂြိုဟ် ၁ နှင့် ဂြိုဟ် ၂ ဂြိုဟ်များကို ကြိုးအဖြစ်ယူသော လုပ်ဆောင်ချက်တစ်ခုရေးပါ။ ဂြိုဟ် ၁ နှင့် ဂြိုဟ် ၂ ဂြိုဟ်တို့အကြားရှိ ဂြိုဟ်များအားလုံးပါဝင်သော tuple တစ်ခုကို နေနှင့်အနီးဆုံးနေရာတွင်ရွေးချယ်ပြီးပြန်ပေးသင့်သည်။ ဂြိုဟ် ၁ သို့မဟုတ် ဂြိုဟ် ၂ သည်ဂြိုဟ်အမည်မှန်မဟုတ်ပါက လုပ်ဆောင်ချက်သည်အလွတ် tuple တစ်ခုကိုပြန်ပေးသင့်သည်။ ဥပမာ bf\"(ဂျူပီတာ\", \"နတ်ပုဒ်\") ==> (\"စနေ\", \"ယူရန်\") bf(\"မြေ\", \"ဗုဒ္ဓဟူး\") ==> (\"ဗုဒ္ဓဟူး\") bf\"သတ္တဝါ\", \"ယူရန်\") ==> (\"ဗုဒ္ဓဟူး\", \"မြေ\", \"ဂြိုဟ်\", \"ဇူပီတာ\", \"စနေ\") ]]'''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"string များစာရင်းကို parameter အဖြစ်လက်ခံပြီး odd length ရှိသော string များကိုပယ်ဖျက်ပြီး sorted order ဖြင့်ရလဒ်စာရင်းကိုပြန်ပေးသော function တစ်ခုရေးပါ။ စာရင်းသည်အမြဲ string များစာရင်းဖြစ်ပြီးကိန်းဂဏန်း array တစ်ခုမဟုတ်ဘဲထပ်တူထပ်တူပါရှိနိုင်သည်။စာရင်း၏အစဉ်သည်စကားလုံးတိုင်း၏အရှည်အတိုင်းတက်လာသင့်ပြီးသင်သည်ဤစည်းမျဉ်းအတိုင်း sorted list ကိုပြန်ပေးသင့်သည်။စကားလုံးနှစ်လုံးသည်အရှည်တူပါကစာရင်းကိုအက္ခရာစဉ်အတိုင်း sort လုပ်ပါ။ function သည် string များစာရင်းကို sorted order ဖြင့်ပြန်ပေးသင့်သည်။စကားလုံးအားလုံးအရှည်တူလိမ့်မည်ဟုသင်ယူဆနိုင်သည်။ဥပမာ: assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd \"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"n သည် ပရမ်းမကိန်းဖြစ်လျှင် x ၏တန်ဖိုးကိုပြန်ပေးရမည့် ရိုးရှင်းသောပရိုဂရမ်ဖြစ်ပြီး y ၏တန်ဖိုးကိုပြန်ပေးရမည့်သာလျှင်။ ဥပမာများ: x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''နံပါတ်စာရင်းတစ်ခုပေးထားလျှင်၊ စာရင်းထဲရှိ odd နံပါတ်များ၏ နှစ်ထပ်ကိန်းပေါင်းကိုပြန်ပေးပါ။ အနှုတ် သို့မဟုတ် အပြည့်အစုံမဟုတ်သော နံပါတ်များကို လျစ်လျူရှုပါ။ double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 အဝင်စာရင်းကအလွတ်ဆိုရင် 0 ပြန်ပေးပါ။ '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"သင်ကအဲဒီလိုပြောလိုက်ရင် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ်\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"သင်ဟာ အတန်းတစ်ခုရဲ့နာမည် (string တစ်ခု) နဲ့ extension တွေရဲ့စာရင်းကိုရမယ်။ extension တွေကို class ထဲကို class တွေထပ်ထည့်ဖို့သုံးရမယ်။ extension ရဲ့အားသာချက်ကတော့ အောက်ပါအတိုင်းဖြစ်တယ်။ CAP က extension ရဲ့နာမည်မှာရှိတဲ့ uppercase စာလုံးအရေအတွက်ဖြစ်ပါစေ၊ SM က extension ရဲ့နာမည်မှာရှိတဲ့ lowercase စာလုံးအရေအတွက်ဖြစ်ပါစေ၊ အားသာချက်က CAP - SM အပိုင်းနဲ့ပေးထားတယ်။ သင်ဟာအခိုင်မာဆုံး extension ကိုရှာပြီး ဒီပုံစံနဲ့ string တစ်ခုကိုပြန်ပို့ရမယ်။ ClassName.StrongestExtensionName။ အားသာချက်တူညီတဲ့ extension နှစ်ခု (သို့) ပိုများရင် စာရင်းမှာ အရင်ဆုံးပေါ်တဲ့ဟာကိုရွေးသင့်တယ်။ ဥပမာ သင်ဟာ \"Slices\" ကို class အဖြစ်နဲ့ extension တွေရဲ့စာရင်းကိုပေးထားတယ်ဆိုရင်၊ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ကတော့ 'Slices.SEviSliNGCes' လို့ပြန်ပို့သင့်တယ်။ ဘာလို့လဲဆိုတော့ 'SEviSliNGCes' က 'mySviSliNGCes' မှာရှိတဲ့ strongest extension ဖြစ်လို့ပါ၊ ဥပမာ 'AA' = 'Strongest_class' (Strongest_Extension) '၊\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"သင်ဟာစကားလုံး ၂ လုံးကိုပေးထားတယ်။ ဒုတိယစကားလုံး သို့မဟုတ် ၎င်း၏လည်ပတ်မှုတစ်ခုခုသည်ပထမဆုံးစကားလုံး၏အောက်ခြေတစ်ခုဖြစ်လျှင် True ကိုပြန်ရဖို့လိုသည်။ cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ကိန်းပြည့်တစ်ခုပေးလျှင် ကိန်းပြည့်နှင့် ကိန်းတစ်ပုဒ်စီရှိသည့် tuple ကိုပြန်ပေးသည် ဥပမာ: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"အပေါင်းကိန်းပြည့်ကိုပေးလျှင် ၎င်း၏ ရောမကိန်းဂဏန်းကို string အဖြစ်ရယူပြီး အက္ခရာငယ်ဖြင့်ပြန်ပေးပါ။ ကန့်သတ်ချက်များ: 1 <= num <= 1000 ဥပမာများ: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''တြိဂံ၏ ၃ ဘက်၏ အလျားများကို ပေးထားသည်။ သုံးဘက်တို့သည် ထောင့်မှန်တြိဂံကို ဖွဲ့စည်းလျှင် မှန်သော၊ အခြားလျှင် မှားသောကို ပြန်ပေးသည်။ ထောင့်မှန်တြိဂံသည် ထောင့်တစ်ခုသည် ထောင့်မှန် သို့မဟုတ် ၉၀ ဒီဂရီရှိသည့် တြိဂံဖြစ်သည်။ ဥပမာ: right_angle_triangle ((၃၊ ၄၊ ၅) == True right_angle_triangle ((၁၊ ၂၊ ၃)) == မှားယွင်း '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"string များစာရင်းကိုလက်ခံသော function တစ်ခုရေးပါ။ စာရင်းတွင်စကားလုံးအမျိုးမျိုးပါဝင်သည်။ ထူးခြားသောစာလုံးများအများဆုံးပါ ၀ င်သောစကားလုံးကိုပြန်ပေးပါ။ string များတွင်ထူးခြားသောစာလုံးများအများဆုံးပါက lexicographical order တွင်ပထမဆုံးပေါ်လာသောတစ်ခုကိုပြန်ပေးပါ။ find_max ((([\"name\", \"of\", \"string\"]) == \"string\" find_max (([\"name\", \"enam\", \"game\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"သင်ဟာ ဆာလောင်နေတဲ့ ယုန်တစ်ကောင်ဖြစ်ပြီး သင်ဟာ ဂေါ်ဖီသီးအချို့ကို စားပြီးသားဖြစ်ပေမဲ့ ဒီနေ့ရဲ့ အစာစားပွဲကို ပြီးမြောက်အောင် ဂေါ်ဖီသီးတွေ ပိုစားဖို့လိုပါတယ်။ သင်ဟာ array တစ်ခုကို ပြန်ရမှာပါ။ [အစာစားပြီးနောက် စားသုံးခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်၊ အစာစားပြီးနောက် ကျန်ရစ်ခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်] ဂေါ်ဖီသီးတွေ လုံလောက်မှုမရှိရင် ကျန်ရစ်တဲ့ ဂေါ်ဖီသီးအားလုံးကို သင်စားမယ်၊ ဒါပေမဲ့ သင်ဟာ ဆာလောင်နေတုန်းပါ။ ဥပမာ: * စားတယ် (၅, ၆, ၁၀) -> [11, 4] * စားတယ် (၄, ၈, ၉) -> [12, 1] * စားတယ် (၁၀, ၁၀) -> [11, 0] * စားတယ် (၂, ၁၁, ၅) -> [၇, ၀] Variables: @number: သင်စားခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်ကို integer လုပ်ပါ။ @need: သင်စားဖို့လိုတဲ့ ဂေါ်ဖီသီးအရေအတွက်ကို integer လုပ်ပါ။ @remaining: ကျန်ရစ်ခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်ကို integer လုပ်ပါ။ Constrain: * 0 = 0 = <= 0 * 0 = <= 1000 * 0 = 0 = 0 = 0 = 0\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"Operator နှင့် Operand နှစ်ခုကို ပေးထားသည်။ ပထမစာရင်းတွင် အခြေခံ အယ်လ်ဂျီဘရာ လုပ်ဆောင်ချက်များရှိပြီး ဒုတိယစာရင်းမှာ ကိန်းပြည့်များစာရင်းဖြစ်သည်။ ပေးထားသော စာရင်းနှစ်ခုကို အယ်လ်ဂျီဘရာ ဖော်ပြချက်ကို တည်ဆောက်ရန်နှင့် ဤဖော်ပြချက်၏ တန်ဖိုးကို ပြန်လည်ပေးရန် အသုံးပြုပါ။ အခြေခံ အယ်လ်ဂျီဘရာ လုပ်ဆောင်ချက်များမှာ ပေါင်းထည့် (+) နှုတ်ယူ (-)) မြှောက် (*) ကြမ်းပြင်ခွဲခြမ်း (//) မြှောက်တင် (**) ဥပမာ: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 မှတ်ချက်: operator စာရင်းအရှည်သည် operand စာရင်းအရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"သင် string s ကိုပေးထားသည်။ s[i] သည်စာလုံးတစ်လုံးဖြစ်လျှင်၎င်း၏ case ကိုအောက်မှအထက်သို့သို့သို့မဟုတ်တစ်ဖက်တစ်လမ်းသို့ပြောင်းပါ။ သို့မဟုတ်၎င်းကိုထားပါ။ string တွင်စာလုံးများမပါပါရှိပါက string ကိုပြန်လည်သုံးပါ။ လုပ်ဆောင်ချက်သည်ရလဒ် string ကိုပြန်လည်ပေးရမည်။ ဥပမာ solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"string 'text' ကို ပေးထားလျှင် ၎င်း၏ md5 hash တူညီသော string ကို ပြန်ပေးပါ။ 'text' သည် ဗလာ string ဖြစ်လျှင် None ကို ပြန်ပေးပါ။ >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "mya_Mymr",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"အပေါင်းကိန်းပြည့် a နှင့် b နှစ်ခုကိုပေးလျှင် a နှင့် b ကြားရှိ ကိန်းပြည့်များကို တက်စဉ်အတိုင်းပြန်ပေးပါ။ ဥပမာ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]