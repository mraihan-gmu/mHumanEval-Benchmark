task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,tat_Cyrl,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Бирелгән саннар исемлегендә, бер-берсенә бирелгән чикләрдән якынрак булган ике сан бармы икәнен тикшерегез. Мисал: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,tat_Cyrl,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Бу функциягә кертү - бу урнаштырылган дугалар берничә төркеме булган җеп. Сезнең максатыгыз - бу төркемнәрне аерым җепләргә бүлеп, аларның исемлеген кире кайтару. Аерым төркемнәр балансланган (һәр ачык дуга дөрес ябык) һәм бер-берсе эчендә урнаштырылмаган. Керү җептәге теләсә нинди буш урыннарны игътибарсыз калдырыгыз. Мисал: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ['() ', '(()) ', '((() ')) """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,tat_Cyrl,python,"

def truncate_number(number: float) -> float:
    """"""Позитив күчеп йөрүче нокталы сан бирелгәндә, аны бөтен санга (иң зур бөтен сан бирелгән саннан кечерәк) һәм унлы саннарга (калган өлеш һәрвакытта 1 дән кечерәк) бүлергә мөмкин. Санның унлы өлешен кайтарыгыз.""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,tat_Cyrl,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Сезгә банк счетындагы кертем һәм акча алу операцияләре исемлеге бирелә, ул ноль баланстан башлана. Сезнең бурычыгыз - теләсә кайсы вакытта исәп балансы нольдән түбән төшсә, аны ачыклау һәм шул вакытта функция True кайтарырга тиеш. Югыйсә ул False кайтарырга тиеш. Мисал: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,tat_Cyrl,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Берәр кертү саннары исемлеге өчен, уртача абсолют тайпылышны әлеге мәгълүмат тупланмасының уртачасы тирәсендә исәпләгез. Уртача абсолют тайпылыш - һәр элемент һәм үзәк ноктасы арасындагы уртача абсолют аерма (бу очракта уртача): MAD = уртача │ x - x_менан │ Мисал: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,tat_Cyrl,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Һәр ике рәттән килгән элемент арасында ""делиметр"" санны кертегез.""""""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,tat_Cyrl,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Бу функциягә кертү - җеп итеп күрсәтелгән берничә төркем җепле parentheses өчен аралык белән аерылган. Һәр төркем өчен, чыгару иң тирән дәрәҗәсе җепле parentheses. Мәсәлән (() (()) максималь ике дәрәҗәдә җепле, ә ((())) өч. >>> parse_nested_parens (('((()) ((())) (((()) ((((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,tat_Cyrl,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Сүзлекләр исемлеген бирелгән сүзлекләр исемлеге буенча гына фильтрлагыз >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,tat_Cyrl,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Берәр бирелгән бөтен саннар исемлеге өчен, исемлектәге барлык бөтен саннарның суммасы һәм тапкырчыгышыннан торган тупель кайтарыгыз. Буш сумма 0 һәм буш тапкырчыгыш 1 булырга тиеш. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,tat_Cyrl,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Бирелгән бөтен саннар исемлегеннән, бирелгән мизгелгә кадәр табылган иң зур элементлар исемлеген төзегез. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,tat_Cyrl,python,"

def is_palindrome(string: str) -> bool:
    """"""Бирелгән җеп белән башланган иң кыска палиндромны табыгыз. Алгоритм идеясе гади: - Бирелгән җепнең иң озын палиндром булган постфиксын табыгыз. - Җепнең ахырына палиндром суфиксыннан алда килгән җеп префиксының киресен куегыз. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Бирелгән җеп палиндром булса , сынап карагыз .""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,tat_Cyrl,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Керүләр - бу ике җеп a һәм b, алар 1 һәм 0 белән генә төзелгән. Бу керүләр буенча бинар XOR башкарыгыз һәм нәтиҗәне җеп буларак та кайтарыгыз. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,tat_Cyrl,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Иярчен исемлектән иң озынны кайтарыгыз. Бер үк озынлыктагы берничә җеп очрагында беренчесен кайтарыгыз. Керү исемлеге буш булган очракта юкны кайтарыгыз. >>> иң озын (([]) >>> иң озын ((['a', 'b', 'c']) 'a' >>> иң озын ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,tat_Cyrl,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Ике a һәм b бөтен саннарының иң зур уртак бүлүчесен кайтару >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,tat_Cyrl,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Керү җөмләсенең иң кыскасыннан иң озынга кадәр барлык префикслар исемлеген кайтару >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,tat_Cyrl,python,"

def string_sequence(n: int) -> str:
    """"""0дан башлап nга кадәрге саннарны үз эченә алган җепне кире кайтара. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,tat_Cyrl,python,"

def count_distinct_characters(string: str) -> int:
    """"""Бер җөмлә бирелгәндә, аның ничә аерым хәрефеннән (кассадан башка) торасын табыгыз: >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,tat_Cyrl,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Бу функциягә махсус ASCII форматында музыкаль ноталарны белдерүче җеп кертелә. Сезнең бурычыгыз - күп тактларга туры килгән бөтен җепләр исемлеген анализлау. Менә легенда: 'o' нотасы, соңгы дүрт такт 'o' - ярты нота, соңгы ике такт ' - дүртенче нота, соңгы бер такт >>> parse_music. 'o' .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,tat_Cyrl,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Берәр субстрингның ничә тапкыр беренче строкада табылуын табыгыз. Өстәләшеп торучы очракларны санагыз. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,tat_Cyrl,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Кертү - ""нуль""дән ""тугыз""га кадәр саннардан торган урын белән чикләнгән җеп. Дөрес сайлаулар: ""нуль"", ""бер"", ""ике"", ""өч"", ""дүрт"", ""биш"", ""алты"", ""җиде"", ""сигез"" һәм ""тугыз"". Җепне саннар белән кечедән зурга кадәр тәртипкә китерегез >>> sort_numbers (('өч бер биш') 'бер өч биш' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,tat_Cyrl,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Бирелгән саннар исемлегеннән (кимендә икесе озынлыкта) бер-берсенә иң якын булган ике санны сайлап алып, аларны тәртип буенча (кечкенә сан, зуррак сан) кайтарыгыз. >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,tat_Cyrl,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Саннар исемлеге бирелгән (кимендә ике элементтан), бу исемлеккә сызыклы трансформацияне кулланыгыз, шул рәвешле, иң кечкенә сан 0 булачак, ә иң зурысы 1 булачак >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,tat_Cyrl,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Фильтр бирелгән исемлек теләсә нинди Python кыйммәтләре өчен генә бөтен саннар >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,tat_Cyrl,python,"

def strlen(string: str) -> int:
    """"""Бирелгән җепнең озынлыгы >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,tat_Cyrl,python,"

def largest_divisor(n: int) -> int:
    """"""Бер n сан өчен n-ны тигез бүлгән иң зур санны табыгыз, ул n-дан кечкенә >>> иң зур_бүләгеч ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,tat_Cyrl,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Бирелгән бөтен санның беренче тапкырлаучылар исемлеген кечедән зурга кадәр тәртиптә кайтарыгыз. Һәрбер факторның тапкырлау саны аның тапкырлауда ничә тапкыр барлыкка килүенә туры килә. Керү саны барлык факторларның тапкырлыгына тигез булырга тиеш >>> факторлаштыру(8) [2, 2, 2] >>> факторлаштыру(25) [5, 5] >>> факторлаштыру(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,tat_Cyrl,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Бөтен саннар исемлегеннән, бер тапкырдан артык булган барлык элементларны алып ташларга. Элементларның тәртибен кертүдәге кебек үк калдырырга. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,tat_Cyrl,python,"

def flip_case(string: str) -> str:
    """"""Бирелгән җеп өчен, кечкенә хәрефләрне зур хәрефләргә һәм зур хәрефләрне кечкенә хәрефләргә күчерегез. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,tat_Cyrl,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Бер җепкә җепләр исемлеге >>> җеплелек (([]) ' ' >>> җеплелек ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,tat_Cyrl,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Сүзлекләр исемлеген бирелгән префикс белән башланганнары өчен генә фильтрлагыз. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,tat_Cyrl,python,"

def get_positive(l: list):
    """"""Исемлектә бары тик уңай саннарны гына кайтару. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,tat_Cyrl,python,"

def is_prime(n):
    """"""Бирелгән сан беренче булса, дөрес, ә башка очракта ялганны кайтарыгыз. >>> беренче булып чыга (икенчесе) False >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) True >>> беренче булып чыга (икенчесе) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,tat_Cyrl,python,"import math


def poly(xs: list, x: float):
    """"""xs - күпсанлы санның коэффициентлары. find_zero find x such that poly(x) = 0. find_zero кайтара гына гына ноль нокта, хәтта күп булса да. Моннан тыш, find_zero гына ала исемлеге xs ия пар сандагы коэффициентлар һәм иң зур ноль коэффициент, чөнки ул гарантияли чишелеш. >>> round(find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Х. ноктасында xs коэффициенты булган күпсанлы санны бәяли. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n  кайтарыгыз""""""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,tat_Cyrl,python,"

def sort_third(l: list):
    """"""Бу функция l исемлеген ала һәм l' исемлеген кире кайтара, шул рәвешле, l' өчкә бүленми торган күрсәткечләрдә l белән бер үк, ә аның өчкә бүленгән күрсәткечләрдәге кыйммәтләре lның тиешле күрсәткечләре кыйммәтләренә тигез, әмма тәртипкә салынган. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,tat_Cyrl,python,"

def unique(l: list):
    """"""Сортланган уникаль элементларны исемлектә кайтару >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,tat_Cyrl,python,"

def max_element(l: list):
    """"""Исемлектә иң зур элементны кайтару. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,tat_Cyrl,python,"

def fizz_buzz(n: int):
    """"""11 яки 13 белән бүленгән n дан аз саннарда 7 санының ничә тапкыр килүен күрсәтүче санны кайтару. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,tat_Cyrl,python,"

def sort_even(l: list):
    """"""Бу функция l исемлеген ала һәм l' исемлеген кайтара, шул рәвешле, l' - l белән тигез саннарда, ә аның тигез саннардагы кыйммәтләре lның тигез саннардагы кыйммәтләренә тигез, әмма тәртипкә салынган. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,tat_Cyrl,python,"

def encode_cyclic(s: str):
    """"""кереш коды итеп encode_cyclic функциясе белән кодланган җепне ала.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""өч хәрефле цикллы төркемнәр буенча кодланган җеп кайтара.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,tat_Cyrl,python,"

def prime_fib(n: int):
    """"""prime_fib n-нче санны кайтара, ул шулай ук Фибоначчи саны һәм ул шулай ук беренче сан. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,tat_Cyrl,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero керү буларак бөтен саннар исемлеген ала. Әгәр исемлектә өч аерым элемент булса, ул дөрес, әгәр аларда нольгә кадәр сумма булса, ялган кире кайта. >>> triples_sum_to_zero (([1, 3, 5, 0]) ялган >>> triples_sum_to_zero (([1, 3, -2, 1]) дөрес >>> triples_sum_to_zero (([1, 2, 3, 7]) ялган >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) дөрес >>> triples_sum_to_zero [1]) ялган """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,tat_Cyrl,python,"

def car_race_collision(n: int):
    """"""Күз алдыгызга китерегез, юл - бу камил туры чиксез озын линия. n машиналар йөриләр сулдан уңга; бер үк вакытта, n машиналарның башка төркеме йөриләр уңнан сулга. Ике машиналар бер-берсеннән бик ерак торалар. Барлык машиналар да бер үк тизлектә хәрәкәт итәләр. Ике машина бәрелешә дип әйтелә, әгәр сулдан уңга хәрәкәт итүче машина уңнан сулга хәрәкәт итүче машинага бәрелешсә. Әмма машиналар чиксез нык һәм көчле; нәтиҗәдә, алар бәрелешмәгән кебек үз траекторияләрендә хәрәкәт итүләрен дәвам итәләр. Бу функция мондый бәрелешләр санын чыгара. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,tat_Cyrl,python,"

def incr_list(l: list):
    """"""Элементлары 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] белән арткан элементлар белән исемлек кайтарыгыз.""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,tat_Cyrl,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero керү буларак бөтен саннар исемлеген ала. Әгәр исемлектә нольгә тиң булган ике аерым элемент булса, ул True кайтара, ә False юк икән. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,tat_Cyrl,python,"

def change_base(x: int, base: int):
    """"""Кулланучы x санның сан нигезен нигезгә үзгәртү. әверелгәч, җеп күрсәтүне кире кайтарыгыз. нигез саннары 10 дан азрак. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,tat_Cyrl,python,"

def triangle_area(a, h):
    """"""Өчпочмакның бер ягының озынлыгы һәм югары кире кайту мәйданы бирелгән. >>> өчпочмак_мәйданы""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,tat_Cyrl,python,"

def fib4(n: int):
    """"""Fib4 саннар рәтлеге - Fibbonacci рәтенә охшаш рәт, ул түбәндәгечә билгеләнә: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Зинһар өчен, fib4 саннар рәтенең n-нче элементын нәтиҗәле исәпләү өчен функция языгыз. Рекурсияне кулланмагыз. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,tat_Cyrl,python,"

def median(l: list):
    """"""Исемлектә элементларның кире кайту медианасы l. >>> медиана (([3, 1, 2, 4, 5]) 3 >>> медиана (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,tat_Cyrl,python,"

def is_palindrome(text: str):
    """"""Бирелгән җепнең палиндром булу-булмавын тикшерә >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,tat_Cyrl,python,"

def modp(n: int, p: int):
    """"""2^n модуль p (саннарны истә тотыгыз) кайтарыгыз. >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,tat_Cyrl,python,"

def encode_shift(s: str):
    """"""encode_shift функциясе белән кодланган керү җеп итеп ала. Декодланган җеп кайта. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""кодланган җепне кайтару өчен, алфавиттагы һәр тамганы 5кә күчерергә кирәк.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,tat_Cyrl,python,"

def remove_vowels(text):
    """"""remove_vowels - бу җепне ала һәм авазсыз җеп кайтаручы функция. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,tat_Cyrl,python,"

def below_threshold(l: list, t: int):
    """"""Әгәр l исемлегендәге барлык саннар да t чикләреннән түбән булса, дөрес кайтару. >>> below_threshold([1, 2, 4, 10], 100) Дөрес >>> below_threshold([1, 20, 4, 10], 5) Ялган """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,tat_Cyrl,python,"

def add(x: int, y: int):
    """"""Ике санны x һәм y белән кушабыз: (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) * (x, y) *""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,tat_Cyrl,python,"

def same_chars(s0: str, s1: str):
    """"""Ике сүзнең бер үк билгеләре бармы-юкмы икәнен тикшерегез. >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') Дөрес >>> same_chars ((('abcd', 'dddddddddabc') Дөрес >>> same_chars ((('dddddddabc', 'abcd') Дөрес >>> same_chars ((('eabcd', 'dddddddddabc') Ялган >>> same_chars ((('abcd', 'dddddddabddce') Ялган >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Ялган """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,tat_Cyrl,python,"

def fib(n: int):
    """"""Фибоначчиның n-нче санын кайтару. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,tat_Cyrl,python,"

def correct_bracketing(brackets: str):
    """"""brackets - ""<"" һәм "">"" җөмләләр. return True, әгәр һәр ачылучы кушымтаның тиешле ябылучы кушымтасы булса. >>> correct_bracketing ((""<"") False >>> correct_bracketing ((""<>"") True >>> correct_bracketing ((""<><>>"") True >>> correct_bracketing ((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,tat_Cyrl,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10])) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,tat_Cyrl,python,"

def common(l1: list, l2: list):
    """"""Ике исемлек өчен сортланган уникаль уртак элементларны кире кайтара. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,tat_Cyrl,python,"

def largest_prime_factor(n: int):
    """"""Иң зур беренче тапкырлаучыны n. n > 1 дип исәпләгез һәм ул беренче түгел. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,tat_Cyrl,python,"

def sum_to_n(n: int):
    """"""sum_to_n - 1 дән n га кадәр саннарны җыючы функция. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,tat_Cyrl,python,"

def correct_bracketing(brackets: str):
    """"""brackets - ""("" һәм """") җөмләләр. return True, әгәр һәр ачылучы скобкада тиешле ябылучы скобкада бар икән. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,tat_Cyrl,python,"

def derivative(xs: list):
    """"""xs күпсанлы санның коэффициентларын күрсәтә. xs[0] + xs[1] * x + xs[2] * x^2 + .... Бу күпсанлы санның чыгарылышын шул ук формада кайтарыгыз. >>> чыгарылышы (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> чыгарылышы (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,tat_Cyrl,python,"

def fibfib(n: int):
    """"""FibFib саннар рәтлеге - Fibbonacci рәтенә охшаш рәт, ул түбәндәгечә билгеләнә: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).""""""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,tat_Cyrl,python,"
FIX = """"""Сүзне белдерүче җепне кертү итеп алучы һәм җептәге авазлар санын кире кайтара торган vowels_count функциясен языгыз. Бу очракта авазлар - ""a"", ""e"", ""i"", ""o"", ""u"". Монда ""y"" да аваз, әмма ул бирелгән сүзнең ахырында булганда гына. Мисал: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Күбрәк сынау очраклары кушыгыз.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,tat_Cyrl,python,"
def circular_shift(x, shift):
    """"""Түгәрәк x бөтен санның цифрларын күчерә, цифрларны күчерү буенча уңга күчерә һәм нәтиҗәне җеп итеп кайтара. Әгәр күчерү > цифрлар саны булса, цифрларны кире кайтарыгыз. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,tat_Cyrl,python,"
def digitSum(s):
    """"""Эш Сызыкны кертү итеп алучы һәм югары хәрефләрнең суммасын гына ASCII кодлары итеп кайтаручы функция язарга.""""""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,tat_Cyrl,python,"
def fruit_distribution(s,n):
    """"""Бу биремдә сезгә алмалар һәм апельсиннар саны күрсәтүче җеп биреләчәк, алар җиләк кәрзиненә бүленәләр. Бу кәрзин алмалар, апельсиннар һәм манго җимешләре белән тулылана. Җеп алмалар һәм алмаларның гомуми санын күрсәтеп, кәрзиндәге җиләкләрнең гомуми санын күрсәтеп, кәрзиндәге манго җимешләренең санын кире кайтарыгыз. мәсәлән: fruit_distribution""5(алма һәм 6 апельсин"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 алма һәм 1 апельсин"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 алма һәм 3 апельсин"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 алма һәм 1 апельсин"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,tat_Cyrl,python,"
def pluck(arr):
    """"""""Тәгәрмәчнең бер тармагын чагылдырган массивның тискәре булмаган бөтен санлы төеннәре бар, сезнең бурычыгыз - төеннәрнең берсен җыеп алу һәм аны кире кайтару. Алынган төен иң кечкенә парлы кыйммәткә ия булган төен булырга тиеш. Әгәр бер үк иң кечкенә парлы кыйммәткә ия булган берничә төен табылса, иң кечкенә индекска ия булган төенне кире кайтарыгыз. Алынган төен исемлектә кайтарылырга тиеш, [smallest_value, аның индексы ], Әгәр парлы кыйммәтләр булмаса яки бирелгән массив буш булса, кире кайтарыгыз []. Мисал: 1: Керү: [4,2,3] Чыгу: [2, 1] Аңлатма: 2нең иң кечкенә парлы кыйммәте бар, ә 2нең иң кечкенә индексы бар. Мисал: 2: Керү: [1,2,3] Чыгу: [2, 1] Аңлатма: 2нең иң кечкенә парлы кыйммәте бар, ә 2нең иң кечкенә индексы бар. Мисал 3: Керү: [] Чыгу: [] [4: [5, 3] [0, 4] Чыгу: 1 [0, 0] Чыгу: иң кечкенә төенде бар, әмма индексе 0 * 1 *, ә иң кечкенә төенчәсе бар. Мисал: Беренче төен сайлыйбыз, анда 0 * ике ноль бар, ә иң кечкенә төенчәсе бар.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,tat_Cyrl,python,"
def search(lst):
    '''Сезгә буш булмаган куәтле бөтен саннар исемлеге бирелә. 0дан зуррак һәм бөтен санның үзеннән зуррак яки тигезрәк ешлыклы булган иң зур бөтен санны кайтарыгыз. Бөтен санның ешлыгы - ул исемлектә күренгән тапкырлар саны. Әгәр андый кыйммәт булмаса, -1 кайтарыгыз.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,tat_Cyrl,python,"
def strange_sort_list(lst):
    '''Берәр санны аерым тәртиптә җыйганда, аны аерым тәртиптә җыймыйбыз. Берәр санны аерым тәртиптә җыйганда, аны аерым тәртиптә җыймыйбыз.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,tat_Cyrl,python,"
def triangle_area(a, b, c):
    '''Өчпочмакның өч ягының озынлыкларын исәпкә алып. Өч яклары дөрес өчпочмакны тәшкил итсә, өчпочмакның мәйданы 2 унарлы санга кадәр урап кайта. Югыйсә -1 кайтарыгыз Өч якның теләсә нинди ике ягының суммасы өченче яктан зуррак булганда, өчпочмак дөрес өчпочмакны тәшкил итә. Мисал: өчпочмак_мәйданы(3, 4, 5) == 6.00 өчпочмак_мәйданы(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,tat_Cyrl,python,"
def will_it_fly(q,w):
    '''Әгәр q объекты оча икән, дөрес, ә башка очракта ялганны кайтаручы функция языгыз. q объекты очачак, әгәр ул балансланган булса (ул палиндром исемлеге) һәм аның элементлары суммасы мөмкин булган максималь авырлыктан кимрәк яки тигез булса w. Мисал: will_it_fly (([1, 2], 5) â -> False # 1+2 мөмкин булган максималь авырлыктан кимрәк, әмма ул баланссыз. will_it_fly (([3, 2, 3], 1) â -> False # ул балансланган, әмма 3+2+3 мөмкин булган максималь авырлыктан күбрәк. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 мөмкин булган максималь авырлыктан кимрәк, һәм ул балансланган. will_it_fly ((([3], 5) â -> True # 3 мөмкин булган максималь авырлыктан кимрәк, һәм ул балансланган.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,tat_Cyrl,python,"
def smallest_change(arr):
    """"""Берәр элементның артына һәм алга бер үк төрле итеп укыла торган элементларны табыгыз. Мәсәлән: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,tat_Cyrl,python,"
def total_match(lst1, lst2):
    '''Ике исемлек җепләрен кабул итә һәм исемлекнең барлык җепләрендәге билгеләрнең гомуми саны икенче исемлектән кимрәк булган исемлекне кире кайтара торган функция языгыз. Әгәр ике исемлекнең билгеләр саны бер үк булса, беренче исемлекне кире кайтарыгыз. Мисаллар total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,tat_Cyrl,python,"
def is_multiply_prime(a):
    """"""Әгәр бирелгән сан 3 беренче санны тапкырлау булса, дөрес, ә башка очракта ялган булып кайтаручы функция языгыз.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,tat_Cyrl,python,"
def is_simple_power(x, n):
    """"""Сезнең бурычыгыз - x саны n-ның гади куәте булса, дөрес, ә башка очракларда ялган кайтаручы функция язу. x n-ның гади куәте булса, n**int=x Мәсәлән: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,tat_Cyrl,python,"
def iscube(a):
    '''Берәр бөтен санны ала торган һәм True кайтаручы функция языгыз. Игътибар: кертү һәрвакыт дөрес дип санала ала. Мисаллар: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,tat_Cyrl,python,"
def hex_key(num):
    """"""Сезгә ун алтылык санны җеп итеп кабул итүче һәм ун алтылык санның беренче саннар санын санаучы функция язарга куштылар (прим саны - 1 дән зуррак, ике кечерәк натураль санның кушылмасы булмаган натураль сан). Ун алтылык саннар - 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Прим саннар - 2, 3, 5, 7, 11, 13, 17,... Димәк, сезгә түбәндәге цифрларның санын билгеләргә кирәк: 2, 3, 5, 7, B (= унлы 11), D (= унлы 13) Игътибар: кертү һәрвакыт дөрес яки буш җеп дип санарга мөмкин, ә символлар A,B,C,D,E,F һәрвакыт зур хәрефләр белән языла. Мисаллар: ""A"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" өчен чыгару - ""AB"" булырга тиеш 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,tat_Cyrl,python,"
def decimal_to_binary(decimal):
    """"""Сезгә дистәле форматта сан биреләчәк һәм сезнең бурыч - аны икеле форматына үзгәртү. Функция, һәр билге икеле санны белдерә торган җеп кайтарырга тиеш. Җептәге һәр билге '0' яки '1' булачак. Җеп башында һәм ахырында өстәмә ике 'db' билгесе булачак. Өстәмә билгеләр форматта ярдәм итү өчен. Мисаллар: decimal_to_binary(15) # ""db1111db"" decimal_to_binary32) # ""db100000db"" кайтара""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,tat_Cyrl,python,"
def is_happy(s):
    """"""Сезгә s җеп бирелә. Сезнең бурычыгыз - җепнең бәхетлеме, юкмы икәнен тикшерү. Әгәр аның озынлыгы кимендә 3 һәм һәр 3 рәттән килгән хәреф аерым булса, җеп бәхетле. Мәсәлән: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,tat_Cyrl,python,"
def numerical_letter_grade(grades):
    """"""Бу семестрның соңгы атнасы һәм укытучы укучыларга билгеләр бирергә тиеш. Укытучы билгеләү өчен үз алгоритмын эшли. Бердәнбер проблема - ул билгеләү өчен кулланган кодны югалткан. Ул сезгә кайбер укучылар өчен уртача баллар исемлеген биргән һәм сез түбәндәге таблицаны кулланып, хәреф билгеләре исемлеген чыгаручы функция язарга тиешсез: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,tat_Cyrl,python,"
def prime_length(string):
    """"""Сызыкны алып, чын, әгәр җеп озынлыгы беренче сан булса, яки ялган булса, дөрес дип кайтаручы функция языгыз. Мисаллар prime_length{""Hello"") == True prime_length{""abcdcba"") == True prime_length{""kittens"") == True prime_length{""orange"") == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,tat_Cyrl,python,"
def starts_one_ends(n):
    """"""Бер уңай n бөтен сан бирелгәндә, 1 белән башланган яки тәмамланган n-санлы уңай бөтен саннар санын кайтару. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,tat_Cyrl,python,"
def solve(N):
    """"""Бер уңай N бөтен санны исәпкә алып, аның цифрларының суммасын икеле килеш кайтару. Мисал N = 1000 өчен, цифрлар суммасы 1 булачак чыгару ""1"" булырга тиеш. N = 150 өчен, цифрлар суммасы 6 булачак чыгару ""110"" булырга тиеш. N = 147 өчен, цифрлар суммасы 12 булачак чыгару ""1100"" булырга тиеш.""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,tat_Cyrl,python,"
def add(lst):
    """"""Буш булмаган бөтен саннар исемлеген исәпкә алсак, lst. пар элементларны куш.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,tat_Cyrl,python,"
def anti_shuffle(s):
    """"""Сүзләр рәтенә һәм буш урыннарга карап җөмлә төзегез. Мәсәлән: anti_shuffle ((('Hi') returns 'Hi' anti_shuffle ((('hello') returns 'ehllo' anti_shuffle (('Hello World!!!') returns 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,tat_Cyrl,python,"
def get_row(lst, x):
    """"""Сезгә 2 үлчәмле мәгълүмат бирелә, ул урнаштырылган исемлекләр буларак, матрицага охшаш, әмма матрицалардан аермалы буларак, һәр рәттә баганалар саны төрле булырга мөмкин. lst һәм x бөтен саннар бирелгән, исемлектә x бөтен саннарны табыгыз, һәм кире кайтарыгыз курамнар исемлеге, [(x1, y1), (x2, y2) ...] шундый, һәр тупель координаталар - (юл, баганалар), 0 белән башланып. Башта баганалар буенча баганалар буенча координаталарны тәртипкә китерегез. Шулай ук, баганалар буенча баганалар буенча баганалар буенча тәртипкә китерегез. Мисаллар: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0), get_{1, 1], get_{_{1}, row {1, 2, 3]], get_{2, 2} ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,tat_Cyrl,python,"
def sort_array(array):
    """"""Берәр саннар массивында тискәре саннар булмаса, бирелгән массивның күчермәсен сортлаудан соң кире кайтарыгыз, әгәр сумма ((беренче индекс кыйммәте, соңгы индекс кыйммәте) чикле булса, бирелгән массивны күтәрелеш тәртибендә сортлагыз, яки әгәр сумма ((беренче индекс кыйммәте, соңгы индекс кыйммәте) пар булса, аны төшү тәртибендә сортлагыз. Игътибар: * бирелгән массивны үзгәртмәгез. Мисаллар: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,tat_Cyrl,python,"
def encrypt(s):
    """"""Берәр җепне аргумент итеп алып, алфавит әйләндерелгәндә, шифрланган җепне кире кайтара торган encrypt функциясен булдыру. Алфавитны, хәрефләр ике урынга ике тапкыр түбәнгә күчерелгәнчә, әйләндерергә кирәк. Мәсәлән: encrypt('hi') кире кайта 'lm' encrypt('asdfghjkl') кире кайта 'ewhjklnop' encrypt('gf') кире кайта 'kj' encrypt('et') кире кайта 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,tat_Cyrl,python,"
def next_smallest(lst):
    """"""Сезгә бөтен саннар исемлеге бирелә. исемлекнең 2 нче иң кечкенә элементын кире кайтара торган next_smallest () функциясен языгыз. Андый элемент булмаса, None () функциясен кире кайтарыгыз. next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,tat_Cyrl,python,"
def is_bored(S):
    """"""Сезгә сүзләр җөмләсе бирелә, һәм сезнең бурычыгыз - мәшәкатьләрнең санын санау. Ялкаулык - ""Мин"" сүзе белән башланган җөмлә. Җөмләләр """", ""?"" яки ""! "" белән чикләнә. Мәсәлән: >>> is_bored ((""Сәлам дөнья"") 0 >>> is_bored ((""Күк зәңгәр. Кояш балкый. Мин бу һава торышын яратам"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,tat_Cyrl,python,"
def any_int(x, y, z):
    '''3 санны кабул итүче функция булдыру. Әгәр саннарның берсе калган икесе суммасына тигез булса, дөрес кайтару, ә барлык саннар да бөтен саннар булса. Башка очракларда ялган кайтару. Мисаллар any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3, 6, -2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,tat_Cyrl,python,"
def encode(message):
    """"""Хәбәрне кабул итә торган һәм барлык хәрефләрнең зур хәрефләрен алыштыра торган, хәбәрдәге барлык авазларны инглиз алфавитындагы аваздан 2 урын алдарак булган хәреф белән алыштыра торган функция языгыз.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,tat_Cyrl,python,"

def skjkasdkd(lst):
    """"""Сезгә бөтен саннар исемлеге бирелә. Сезгә иң зур беренче санны табарга һәм аның цифрлары суммасын кайтарырга кирәк. Мисаллар: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] чыгарылыш 10 булырга тиеш lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] чыгарылыш 25 булырга тиеш lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] чыгарылыш 13 булырга тиеш lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] чыгарылыш 11 булырга тиеш lst = [0,81,12,3,21,1] чыгарылыш 3 булырга тиеш lst = [0,1,8,1,2,1,7] чыгарылыш 7 булырга тиеш """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,tat_Cyrl,python,"
def check_dict_case(dict):
    """"""Сүзлек бирелгән булса, барлык төймәләр кече хәрефле җепләр булса, дөрес кайтару, югыйсә ялган кайтару. Функция ялган кайтарырга тиеш, бирелгән сүзлек буш булса. Мисаллар: check_dict_case{""a"":""apple"", ""b"":""banana""}) дөрес кайтарырга тиеш. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) ялган кайтарырга тиеш. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) ялган кайтарырга тиеш. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) ялган кайтарырга тиеш. check_dict_case{""NC"":""STATE"", ""ZIP"":""12345"" }) дөрес кайтарырга тиеш.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,tat_Cyrl,python,"
def count_up_to(n):
    """"""Берәр тискәре булмаган бөтен санны ала һәм беренче n бөтен саннарның массивын кайтара. Мәсәлән: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,tat_Cyrl,python,"
def multiply(a, b):
    """"""Ике бөтен санны алып, аларның берәмлек саннарының тапкырлыгын кайтаручы функцияне тәмамлагыз. Керелү һәрвакыт дөрес дип санагыз. Мисаллар: тапкырлау ((148, 412) 16. тапкырлау ((19, 28) 72. тапкырлау ((2020, 1851) 0 кайтарырга тиеш. тапкырлау ((14,-15) 20 кайтарырга тиеш.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,tat_Cyrl,python,"
def count_upper(s):
    """"""Бер җеп s бирелгәндә, пар индекслардагы зур авазларның санын санагыз. Мәсәлән: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 кайтара """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,tat_Cyrl,python,"
def closest_integer(value):
    '''Санны белдерүче кыйммәтне (җеп) ала һәм аңа иң якын бөтен санны кайтаручы функция булдыру. Әгәр сан ике бөтен саннан бертигез ераклыкта булса, аны нульдән алып бетерү. Мисаллар >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Искәрмә: Нульдән алып бетерү: әгәр бирелгән сан ике бөтен саннан бертигез ераклыкта булса, кире кайтарылачак сан нульдән иң ерак булган сан булырга тиеш. Мисал өчен closest_integer "" ((14.5"") 15 һәм closest_integer "" ((-14.5"") -15. кайтарылырга тиеш. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,tat_Cyrl,python,"
def make_a_pile(n):
    """"""Бер уңай бөтен сан n бирелгәндә, сез n дәрәҗәле ташлардан өем ясарга тиеш. Беренче дәрәҗәдә n таш бар. Киләсе дәрәҗәдәге ташлар саны: - n - чикле булса, чираттагы пар сан. - n - пар булса, чираттагы пар сан. Һәр дәрәҗәдәге ташлар санын исемлектә кайтарыгыз, анда индекс i элементы дәрәҗәдәге ташлар санын күрсәтә (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,tat_Cyrl,python,"
def words_string(s):
    """"""Сезгә тыныш билгеләре белән аерылган сүзләр җепсе биреләчәк. Сезнең бурычыгыз - җепне сүзләргә бүлеп, сүзләрнең массивын кайтару. Мәсәлән: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,tat_Cyrl,python,"
def choose_num(x, y):
    """"""Бу функция ике уңай санны x һәм y ала һәм [x, y] диапазонындагы иң зур пар санны кайтара. Әгәр андый сан булмаса, функция -1 кайтарырга тиеш. Мәсәлән: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,tat_Cyrl,python,"
def rounded_avg(n, m):
    """"""Сезгә ике уңай n һәм m бөтен саннары бирелә, һәм сезнең бурычыгыз - n дан m га кадәрге бөтен саннарның уртачасын исәпләү. Җавапны иң якын бөтен санга туплагыз һәм аны бинар санга әйләндерегез. Әгәр n m дан зуррак булса, кире кайтарыгыз -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,tat_Cyrl,python,"
def unique_digits(x):
    """"""Берәр уңай бөтен саннар исемлеге бирелгән x. барлык элементларның пар цифрлары булмаган тәртиптә тәртипкә салынган исемлеген кире кайтарыгыз. Игътибар: Кайтарылган исемлек арту тәртибендә тәртипкә салынырга тиеш. Мәсәлән: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,tat_Cyrl,python,"
def by_length(arr):
    """"""Бер бөтен саннар массивы бирелгән, 1 һәм 9 арасындагы бөтен саннарны сортлагыз, нәтиҗәле массивны кире кайтарыгыз, аннары һәр цифрны аның тиешле исеме белән алыштырыгыз: ""Бер"", ""Ике"", ""Өч"", ""Дүрт"", ""Биш"", ""Алты"", ""Җиде"", ""Сигез"", ""Тугыз"". Мәсәлән: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> сорт arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> кире arr -> [8, 5, 4, 3, 2, 2, 1, 1] кайтарыгыз [""Сигез"", ""Дүрт"", ""Өч"", ""Ике"", ""Ике"", ""Бер"", ""Бер""] Әгәр массив буш булса, буш санны кире кайтарыгыз: arr = [] return [] Әгәр массивның нинди дә булса сәер саны булса, аны игътибарсыз калдырыгыз: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [55,1] return - ['One' 1,' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,tat_Cyrl,python,"
def f(n):
    """"""Функцияне гамәлгә ашырыгыз, ул n параметры буларак кабул итә һәм n зурлыгындагы исемлекне кайтара, шул рәвешле, әгәр i пар булса, i индексы буенча элементның кыйммәте iнең факториалы яки 1 дән i кадәр саннарның суммасы. i 1 дән башлана. iның факториалы 1 дән i кадәр саннарның тапкырлануы (1 * 2 * ... * i). Мисал: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,tat_Cyrl,python,"
def even_odd_palindrome(n):
    """"""Бер уңай бөтен сан n бирелгән, шул исәптән, ((1, n) диапазонына кергән пар һәм чикле бөтен санлы палиндромнар саны булган тупл кайтару. Мисал1: Керү: 3 Чыгару: (1, 2) Аңлатма: Туплы палиндромнар 1, 2, 3. аларның берсе пар, ә икесе чикле. Мисал2: Керү: 12 Чыгару: (4, 6) Аңлатма: Туплы палиндромнар 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. аларның дүртесе пар, ә 6сы чикле. Искәрмә: 1. 1 <= n <= 10^3 2. тупл кайтарган саннар тигезлектә пар һәм чикле бөтен санлы палиндромнар саны. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,tat_Cyrl,python,"
def count_nums(arr):
    """"""Саннар массивын алып, 0дан зуррак булган элементлар санын кире кайтара торган count_nums функциясен языгыз. Әгәр сан тискәре булса, аның беренче имзаланган цифрлары тискәре булачак: мәсәлән, -123 -1, 2 һәм 3 саннары белән имзаланган: >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,tat_Cyrl,python,"
def move_one_ball(arr):
    """"""Безнең array 'arr' N бөтен саннардан тора arr[1], arr[2], ..., arr[N].Саннар чиратта очраклы тәртиптә урнаштырылачак. Сезнең бурычыгыз - бирелгән массивта түбәндәге операцияне башкарып, кечерәйми торган тәртиптә чиратлашкан массивны алу мөмкинме икәнен билгеләү: Сезгә теләсә күпме тапкыр уңга күчерү операциясен башкарырга рөхсәт ителә. Бер уңга күчерү операциясе массивның барлык элементларын бер позициядә уң якка күчерүне аңлата. Массивның соңгы элементы массивның башлангыч позициясенә күчереләчәк, ягъни 0 нчы индекс. Әгәр өстәге операцияне башкарып, тәртипкә салынган массивны алу мөмкин булса, ул чакта True кайтарыгыз, югыйсә False кайтарыгыз. Әгәр бирелгән массив буш булса, ул чакта True кайтарыгыз. Игътибар: Бирелгән исемлектә уникаль элементлар булуы гарантияләнә. Мәсәлән: move_one_(ball
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,tat_Cyrl,python,"
def exchange(lst1, lst2):
    """"""Бу мәсьәләдә сез саннардан торган ике исемлекне ала торган һәм алар арасында элементларны алмаштыруны башкарып, lst1не пар саннардан гына торган исемлек итү мөмкинме икәнен билгели торган функцияне гамәлгә ашырасыз. lst1 һәм lst2 арасында алмаштырылган элементлар санының чикләнүе юк. Әгәр lst1 һәм lst2 арасында элементларны алмаштыру мөмкин булса, lst1нең барлык элементлары пар булсын өчен, ""ӘЙЕ"" дип кайтарыгыз. Югыйсә, ""ЮК"" дип кайтарыгыз. Мәсәлән: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""ӘЙЕ"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""ЮК"" Кулланма исемлекләр буш булмаячак дип фаразлана. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,tat_Cyrl,python,"
def histogram(test):
    """"""Бушлык белән аерылган кечкенә хәрефләрне белдергән җеп бирелгәндә, иң күп кабатланган һәм тиешле санны үз эченә алган хәрефнең сүзлеген кайтарыгыз. Әгәр берничә хәрефнең бер үк очрагы булса, аларның барысын да кайтарыгыз.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,tat_Cyrl,python,"
def reverse_delete(s,c):
    """"""Эш Безгә ике s һәм c җепләре бирелгән, сез s-да булган барлык символларны с-да булган символларга тиң итеп бетерәсез, аннары нәтиҗә җеп палиндроммы икәнен тикшерергә кирәк. Әгәр ул алга таба да шул ук ук артка караса, җеп палиндром дип атала. Сез нәтиҗә җепне һәм дөрес/ялганны үз эченә алган тупельне кайтарырга тиеш. Мисал өчен s = ""abcde"", c = ""ae"", нәтиҗәсе булырга тиеш ('bcd', False) s = ""abcdef"", c = ""b"" нәтиҗәсе булырга тиеш ('acdef', False) s = ""abcdedcba"", c = ""ab"", нәтиҗәсе булырга тиеш ('cdedc', True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,tat_Cyrl,python,"
def odd_count(lst):
    """"""Берәр җеп исемлеге бирелгәндә, анда һәр җеп саннардан гына тора, исемлек кайтарыгыз. Чыгаруның һәр i элементы ""чыгаруның i җептәге чиратсыз элементлар саны"" булырга тиеш. анда барлык i'лар кертүнең i'нче җептәге чиратсыз саннар саны белән алыштырылырга тиеш. >>> odd_count['1234567']) [""4n 4n 4n чыгаруның 4нчы җептәге чиратсыз элементлар саны.""] >>> odd_count['3',""111111""]) [""1n 1n 1n 1 чыгаруның 1нче җептәге чиратсыз элементлар саны"", ""8n 8n 8n 8 чыгаруның 8нчы җептәге чиратсыз элементлар саны"".]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,tat_Cyrl,python,"
def minSubArraySum(nums):
    """"""Берәр тулы саннар массивы бирелгәндә, буш булмаган саннар суб-массивының минималь суммасын табыгыз. Мисал minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,tat_Cyrl,python,"
def max_fill(grid, capacity):
    import math
    """"""Сезгә коелар турыпочмаклы рәшәткә бирелә. Һәр рәт бер коены, ә һәр рәттәге 1 суның бер берәмлеген аңлата. Һәр коеның аннан су алу өчен кулланыла торган тиешле чиләге бар, һәм барлык чиләкләрнең дә бер үк сыйдырышлылыгы бар. Сезнең бурычыгыз - чиләкләрне чистарту өчен чиләкләрне куллану. Чиләкләрне төшерергә кирәк булган вакыт санын чыгару. Мисал: 1: Керү: рәшәткә: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] чиләк_капацитет: 1 Чыгару: 6 Мисал: Керү: рәшәткә: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] чиләк_капацитет: 2 Чыгару: 5 Мисал: Керү: [[:0,0,0], [0,0,0]] чиләк_капацитет: 5 Чыгару: 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,tat_Cyrl,python,"
def sort_array(arr):
    """"""Бу катада тискәре булмаган бөтен саннар массивын икеле күрсәтүдә берләр саны буенча арту тәртибендә сортларга кирәк. Берләр саны охшаш булса, унлы санга нигезләнеп сортлау. Бу болай гамәлгә ашырылырга тиеш: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,tat_Cyrl,python,"
def select_words(s, n):
    """"""Әгәр s җөмләсе буш булса, функция буш исемлек кайтарырга тиеш. Игътибар: кертелгән җөмләдә хәрефләр һәм буш урыннар гына бар дип уйларга мөмкин. Мисаллар: select_words (""Мэринең бәрәне бар иде"", 4) ==> [""бәрән""] select_words (""Мэринең бәрәне бар иде"", 3) ==> [""Мэри"", ""бәрән""] select_words ("" гади ак буш урын"", 2) ==> [] select_words (""Сәлам, дөнья"", 4) ==> ["" дөнья""] select_words (""Әти-әти Сэм"", 3) ==> [""Әти-әти""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,tat_Cyrl,python,"
def get_closest_vowel(word):
    """"""Сезгә сүз бирелә. Сезнең бурычыгыз - сүзнең уң ягыннан ике тартык аваз арасында торган иң якын авазны табу (кассага сизгер). Башланудагы һәм тәмамланудагы авазлар исәпләнми. Югарыда күрсәтелгән шартларны үтәгән аваз тапмасагыз, буш җепне кире кайтарыгыз. Бирелгән җептә инглиз хәрефе генә бар дип уйларга мөмкин.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,tat_Cyrl,python,"
def match_parens(lst):
    '''Сезгә ике җеп исемлеге бирелә, икесе дә ачык дугалар '(' яки ябык дугалар ') 'дан гына тора. Сезнең эшегез - ике җепне ниндидер тәртиптә берләштерү мөмкинме, нәтиҗәдә җеп яхшы булырмы икәнен тикшерү. S җепенең яхшы булуы S җептәге барлык дугалар тигезләшкән очракта гына исәпләнә. Мәсәлән: ""((()) "") җеп яхшы булса, ә ""()) "" җеп начар. Әгәр яхшы җеп ясарга мөмкинлек бар икән, ""Әйе"" дип кайтарыгыз, ә башка очракта ""Юк"" дип кайтарыгыз. Мисаллар: match_parens[(('() ', ') ']) == 'Әйе' match_parens[(') ', ') ']) == 'Юк' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,tat_Cyrl,python,"
def maximum(arr, k):
    """"""Бер массив тулы саннардан һәм уңай тулы саннан тора. k, arr саннарының максималь саны k булган озынлыгы k булган тәртипкә салынган исемлекне кайтарыгыз. Мисал1: Керү: arr = [-3, -4, 5], k = 3 Чыгару: [-4, -3, 5] Мисал2: Керү: arr = [4, -4, 4], k = 2 Чыгару: [4, 4] Мисал3: Керү: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Чыгару: [2] Искәрмә: 1. Массивның озынлыгы [1, 1000] диапазонында булачак. 2. Массив элементлары [-1000, 1000] диапазонында булачак. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,tat_Cyrl,python,"
def solution(lst):
    """"""Буш булмаган бөтен саннар исемлеге бирелгән, барлык пар элементларның җөмләсен кайтарыгыз.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,tat_Cyrl,python,"
def add_elements(arr, k):
    """"""Буш булмаган arr һәм k бөтен саннар массивы бирелгән, arrның беренче k элементларыннан иң күп ике цифрлы элементларның суммасын кайтарыгыз. Мисал: Керү: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Чыгару: 24 # сумма 21 + 3 Тыюлыклар: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,tat_Cyrl,python,"
def get_odd_collatz(n):
    """"""Бер уңай бөтен сан n бирелгәндә, чиратсыз саннар рәтенә кергән тәртипле исемлекне кире кайтарыгыз. Коллатц фаразы - математикада түбәндәгечә билгеләнгән рәт турында фараз: теләсә нинди уңай бөтен сан n белән башлау. Аннары һәр термин алдагы терминнан түбәндәгечә алына: алдагы термин пар булса, алдагы термин алдагы терминның яртысы булып тора. Алдагы термин чат булса, алдагы термин алдагы терминның 3 тапкыр алдагы терминга кушыла. Фараз буенча, nның нинди генә кыйммәте булмасын, рәт һәрвакыт 1гә җитәчәк. Игътибар: 1. Collatz(1) [1]. 2. Кире кайтарылган исемлек арта барган тәртиптә. Мәсәлән: get_odd_collatz(5) кайтарулары [1, 5] 5 өчен Коллатц рәтлеге [5, 8, 16, 4, 2, 1], димәк, чат саннар гына 1 һәм 5 """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,tat_Cyrl,python,"
def valid_date(date):
    """"""Бер датаның чынлыгын раслаучы һәм дөрес булса, дөрес дип кайтаручы функция языгыз, әгәр дата дөрес булса, ялган. Әгәр түбәндәге кагыйдәләрнең барысы да үтәлсә, дата дөрес: 1. датаның буш булмавы. 2. айлар өчен көннәр саны 1 дән ким түгел яки 31 көннән артык түгел. Ә айлар өчен көннәр саны 1 дән ким түгел яки 30 көннән артык түгел. 4,6,9,11. Ә айлар өчен көннәр саны 1 дән ким түгел яки 29 көннән артык түгел. 3. айлар 1 дән ким булырга тиеш түгел яки 12 дән югарырак булырга тиеш. 4. дата форматында булырга тиеш: mm-dd-yyyy, мәсәлән: valid_date (('03-11-2000') => true_date (('15-01-2012') => false valid_date (('04-01-2040') => false_date (('06-04-2020') => true_date (('06/04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,tat_Cyrl,python,"
def split_words(txt):
    '''Бер сүз рәтенә карап, буш урыннар белән бүленгән сүзләр исемлеген кайтарыгыз, әгәр текстта буш урыннар булмаса, сез
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,tat_Cyrl,python,"
def is_sorted(lst):
    '''Саннар исемлеге бирелгән булса, алар арту тәртибендә тәртипкә салынганмы, юкмы, кире кайтарыгыз. Әгәр исемлектә бер үк санның 1 дуллитанты күбрәк булса, ялганны кире кайтарыгыз. Тискәре саннар юк һәм тулы саннар гына. Мисаллар is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,tat_Cyrl,python,"
def intersection(interval1, interval2):
    """"""Сезгә ике интервал бирелә, анда һәр интервал - пар бөтен саннар. Мәсәлән, интервал = (баштагы, соңгы) = (1, 2). Бирелгән интерваллар ябык, ягъни интервал (баштагы, соңгы) баш һәм ахырын үз эченә ала. Һәрбер бирелгән интервал өчен аның башы аның ахырына караганда кечерәк яки тигез дип фараз ителә. Сезнең бурычыгыз - бу ике интервалның киселеш озынлыгы беренче санмы икәнен билгеләү. Мисал өчен, интервалларның киселеше (1, 3), (2, 4) - (2, 3) аның озынлыгы 1 булган, ә беренче сан түгел. Әгәр киселеш озынлыгы беренче сан булса, ""ӘЙЕ"" дип кайтарыгыз, югыйсә ""ЮК"" дип кайтарыгыз. Әгәр ике интервал киселешми икән, ""ЮК"" дип кайтарыгыз. [input/output] samples: intersection (((1, 2), (2, 3) ==> ""intersection (-1), ((1), 4) ==> ""intersection (-1), (-1), (-2, 4) ==> ""intersection (-1, 5), (((1, (-3, "" (YES"") ))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,tat_Cyrl,python,"
def prod_signs(arr):
    """"""Сезгә тулы саннардан торган arr массивы бирелә һәм сезгә 1, -1 яки 0 белән күрсәтелгән массивтагы һәр санның барлык билгеләре кушылмасы белән тапкырланган тулы саннарның зурлыклары суммасын кайтарырга кирәк. Игътибар: буш arr өчен None кайтарыгыз.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,tat_Cyrl,python,"
def minPath(grid, k):
    """"""Бер рәшәткәдә N рәт һәм N багана (N >= 2) һәм k уңай бөтен сан булса, рәшәткәнең һәр ячейкасында кыйммәт бар. [1, N * N] чиктәге һәр бөтен сан рәшәткәнең күзәнәкләрендә бер тапкыр гына күренә. Сез рәшәткәдә k озынлыктагы минималь юлны табарга тиеш. Сез теләсә кайсы ячейкадан башларга һәм һәр адымда күрше күзәнәкләрнең теләсә кайсысына күчә аласыз, башкача әйткәндә, сез хәзерге күзәнәк белән кырыйны уртаклашкан күзәнәкләргә бара аласыз. Игътибар итегез, k озынлыктагы юл нәкъ k күзәнәкләргә (мәҗбүри рәвештә аерым түгел) баруны аңлата. Сез рәшәткәдән чыга алмыйсыз. A юлы (k озынлыгы) B юлынан (k озынлыгы) кечерәк дип санала, әгәр A һәм B күзәнәкләрендәге кыйммәтләрнең тәртипле исемлекләрен ясаганнан соң (аларны l_stA һәм l_stB дип атыйк), l_stA лексик рәвештә l_stBдән азрак булса, башка сүзләр белән әйткәндә, бер бөтен санга ия, ягъни сезнең белән хәзерге күзәнәкнең кырышына керә ала аласыз. [1, 2] [4, [4, 6], [8, [9, 1] [9, [9, 1] [1, [1,] [2, [1,] [2,] [1, [1,] [2,] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i] [i]i]i]i]i [i]i]i]i [i [i]i]i]i [i]i]i]i [i]i]i [i]i]i [i]i [i]i [i]i]i [i]i [i]i [i]i [i]i [i]i [i [i]i]i [i [i]i]i [i [i]i [i]i [i [i]i [i]i [i [i]i [i]i [i [i [i [i]i [i [i [i]i [""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,tat_Cyrl,python,"
def tri(n):
    """"""Фибоначчи эзлеклелеген һәркем белә, аны математиклар соңгы ике гасыр эчендә тирәнтен өйрәнгән. Әмма халыкка Tribonacci эзлеклелеге билгеле түгел. Tribonacci эзлеклелеге кабатлану белән билгеләнә: tri(1) = 3 tri(n) = 1 + n / 2, әгәр n пар булса. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), әгәр n чикле булса. Мәсәлән: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Сезгә тискәре булмаган бөтен саннар бирелгән, сезгә Tribonacci эзлеклелегенең беренче n + 1 саннары исемлеген кире кайтарырга кирәк. Мисаллар: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,tat_Cyrl,python,"
def digits(n):
    """"""Бер уңай бөтен сан n бирелгәндә, чикле саннарның тапкырламын кайтарыгыз. Әгәр барлык саннар пар булса, 0 кайтарыгыз. Мәсәлән: саннар ((1) == 1 сан ((4) == 0 сан ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,tat_Cyrl,python,"
def is_nested(string):
    '''Функциянең керү рәвешендә квадрат кысалардан гына торган җеп алына. Функция True, әгәр һәм бары тик әгәр дә, ким дигәндә, бер кыса урнаштырылган кысалар иярченлеге булса, дөрес кайтарырга тиеш. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]]] â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,tat_Cyrl,python,"

def sum_squares(lst):
    """"""Сезгә саннар исемлеге бирелә. Сезгә бирелгән исемлектә саннарның квадрат суммасын кире кайтарырга кирәк, исемлектәге һәр элементны иң югары int ((Ceiling) беренче итеп түгәрәкләргә кирәк. Мисаллар: lst = [1,2,3] өчен чыгару 14 булырга тиеш lst = [1,4,9] өчен чыгару 98 булырга тиеш lst = [1,3,5,7] өчен чыгару 84 булырга тиеш lst = [1.4,4.2,0] өчен чыгару 29 булырга тиеш lst = [-2.4,1,1] өчен чыгару 6 булырга тиеш """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,tat_Cyrl,python,"
def check_if_last_char_is_a_letter(txt):
    '''Берәр сүзтезмәнең соңгы символы алфавит символы булса, һәм ул сүзнең өлеше булмаса, дөрес, ә башка очракта ялган дип кайтаручы функцияне булдыру. Игътибар: ""сүз"" - буш урын белән аерылган билгеләр төркеме.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,tat_Cyrl,python,"
def can_arrange(arr):
    """"""Бер элементның иң зур индексын кире кайтара торган функцияне булдыру. Әгәр дә мондый элемент юк икән, -1 кайтарыгыз. Бирелгән массивта дубликат кыйммәтләр булмаячак.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,tat_Cyrl,python,"
def largest_smallest_integers(lst):
    '''Функцияне ясагыз, ул тупла (a, b) кайтара, анда 'a' - тискәре бөтен саннарның иң зурысы, ә 'b' - исемлектәге уңай бөтен саннарның иң кечкенәсе. Әгәр тискәре яки уңай бөтен саннар булмаса, аларны None итеп кайтарыгыз.'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,tat_Cyrl,python,"
def compare_one(a, b):
    """"""Төгәл саннарны, йөзүче саннарны яки чын саннарны белдерүче җепләрне кабул итә торган һәм бирелгән үзгәрешле төрендә зуррак үзгәрешлесен кайтаручы функция булдыру. Әгәр кыйммәтләр тигез булса, Юкка кайтару. Игътибар: Әгәр чын сан җеп итеп күрсәтелсә, йөзүче нокта булырга мөмкин . яки , compare_one(1, 2.5) â -> 2.5 compare_one(1, ""2,3"") â -> ""2,3"" compare_one(""5,1"", ""6"") â -> ""6"" compare_one(""1"", 1) â -> Юкка """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,tat_Cyrl,python,"
def is_equal_to_sum_even(n):
    """"""Бирелгән n санның 4 уңай пар санның суммасы итеп языла алу-алмавын бәяләгез. Мисал: is_equal_to_sum_even ((4) == Ялган is_equal_to_sum_even ((6) == Ялган is_equal_to_sum_even ((8) == Дөрес """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,tat_Cyrl,python,"
def special_factorial(n):
    """"""Бразилия факториалы түбәндәгечә билгеләнә: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! анда n > 0 Мәсәлән: >>> special_factorial(4) 288 Функция керү буларак бөтен сан алачак һәм бу бөтен санның махсус факториалын кайтарырга тиеш. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,tat_Cyrl,python,"
def fix_spaces(text):
    """"""_Үрнәк-3 бирелгәндә, андагы барлык буш урыннарны аскы билгеләр белән алыштырыгыз, ә әгәр сүзтезмәдә 2 дән артык бер-бер артлы буш урын булса, аннары барлык бер-бер артлы буш урыннарны - fix_spaces (((""Үрнәк"") == ""Үрнәк"" fix_spaces (((""Үрнәк1"") == ""Үрнәк_1"" fix_spaces (((""Үрнәк2"") == ""_Үрнәк_2"" fix_spaces (((""Үрнәк 3"") == ""_Үрнәк-3""  белән алыштырыгыз.""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,tat_Cyrl,python,"
def file_name_check(file_name):
    """"""Файл исемен белдерүче җепне ала торган һәм, әгәр файл исеме дөрес булса, ""Әйе"" дип кайтаручы һәм башка очракта ""Юк"" дип кайтаручы функция булдыру. Файл исеме дөрес дип санала, әгәр һәм түбәндәге шартлар үтәлсә генә: - Файл исемендә өчтән артык цифр булырга тиеш түгел ('0'-'9'). - Файл исеме төгәл бер ноктаны үз эченә ала '.' - Нокта алдыннан булган субҗеп буш булмаска тиеш, һәм ул латин алфавитыннан хәреф белән башлана ('a'-'z' һәм 'A'Z'). - Ноктадан соңгы субҗеп түбәндәгеләрнең берсе булырга тиеш: ['txt', 'exe', 'll'] Мисаллар: file_name_check""(example.txt"") # => 'Әйе' file_name_check""(example.dll1"") # => 'Юк' (исем латин алфавитыннан башлана)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,tat_Cyrl,python,"


def sum_squares(lst):
    """""""" Бу функция бөтен саннар исемлеген алачак. Барлык исемлектәге язмалар өчен, функция, әгәр индексы 3 тапкырчыгы булса, бөтен санны квадратка чыгарырга тиеш, ә индексы 3 тапкырчыгы булмаса, 4 тапкырчыгы булса, бөтен санны кубка чыгарырга тиеш. Функция исемлектәге индекслары 3 яки 4 тапкырчыгы булмаган язмаларны үзгәртми. Функция аннары барлык язмаларның суммасын кайтарачак. Мисаллар: lst = [1,2,3] өчен чыганак 6 булырга тиеш. lst = [] өчен чыганак 0 булырга тиеш. lst = [-1,-5,2,-1,-5] өчен чыганак -126 булырга тиеш.""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,tat_Cyrl,python,"
def words_in_sentence(sentence):
    """"""Сезгә җөмләне белдерүче җөмлә бирелә, җөмләдә буш урын белән аерылган берничә сүз бар, һәм сез төп җөмләдән булган сүзләрне үз эченә алган җөмлә кайтарырга тиеш, аның озынлыклары пропорциональ саннар, яңа җөмләдәге сүзләрнең тәртибе төп җөмләдәге кебек үк булырга тиеш. Мисал1: Керү: җөмлә = ""Бу тест"" Чыгыш: ""бу"" Мисал2: Керү: җөмлә = ""яңгырарга китә"" Чыгыш: ""go for"" Чикләүләр: * 1 <= len(җөмлә) <= 100 * җөмләдә хәрефләр генә бар """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,tat_Cyrl,python,"
def simplify(x, n):
    """"""Сезнең бурычыгыз - x * n белдерүен гадиләштерүче функцияне гамәлгә ашыру. Функция, x * n бөтен санга бәяләнсә, дөрес, ә башкача ялганны кайтара. x һәм n икесе дә, кисәкнең строкалы чагылышы булып тора һәм түбәндәге форматка ия, <числитель>/<номинант>, анда числитель һәм знаменатель икесе дә уңай бөтен саннар. x һәм n дөрес кисәкләр дип фаразларга була, һәм аларда ноль знаменатель буларак юк. гадиләштерү: ""1/5"", ""5/1"") = True гадиләштерү: ""1/6"", ""2/1"") = False гадиләштерү: ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,tat_Cyrl,python,"
def order_by_points(nums):
    """"""Берәр санны саннар җыелмасы буенча югарыга күтәрелгән тәртиптә тәртипкә салу функциясен языгыз. Игътибар: әгәр саннар җыелмасы охшаш булган берничә элемент бар икән, аларны индексы буенча тәртипкә китерегез. Мәсәлән: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,tat_Cyrl,python,"
def specialFilter(nums):
    """"""Саннар массивын кертү итеп алучы һәм 10 дан зуррак булган элементлар санын кире кайтара торган функция языгыз. Мәсәлән: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,tat_Cyrl,python,"
def get_max_triples(n):
    """"""Сезгә уңай тулы сан n бирелә. Сез озынлыгы n булган тулы саннар массивы булдырырга тиеш. Һәр i (1 ‰¤ i ‰¤ n) өчен a[i] = i * i - i + 1 кыйммәте. a-ның өчләтә саны (a[i], a[j], a[k]) бирегез, анда i < j < k, ә a[i] + a[j] + a[k] - 3нең тапкыр саны. Мисал: кертү: n = 5 Чыгару: 1 Аңлатма: a = [1, 3, 7, 13, 21] Бердәнбер дөрес өчләтә (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,tat_Cyrl,python,"
def bf(planet1, planet2):
    '''Кояш системасында сигез планета бар: Кояшка иң якын урнашкан - Меркурий, аннан соң Венера, аннан соң Җир, Марс, Юпитер, Сатурн, Уран, Нептун. Функция планета1 һәм планета2 җепләре буларак ике планета исемен ала. Функция планета1 һәм планета2 орбиталары арасында урнашкан барлык планеталарны үз эченә алган тупельне кояшка якынлык буенча тәртипкә салып кайтарырга тиеш. Функция, әгәр планета1 яки планета2 дөрес планета исемнәре булмаса, буш тупельне кайтарырга тиеш.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,tat_Cyrl,python,"
def sorted_list_sum(lst):
    """"""Бер параметр буларак җепләр исемлеген кабул итә, аннан аерым озынлыктагы җепләрне бетерә һәм нәтиҗәле исемлекне тәртипкә салынган тәртиптә кайтара торган функция языгыз. Исемлек һәрвакыт җепләр исемлеге һәм беркайчан да саннар массивы түгел, һәм ул дубликатлар да булырга мөмкин. Исемлек тәртибе һәр сүзнең озынлыгы буенча күтәрелергә тиеш, һәм сез бу кагыйдә буенча тәртипкә салынган исемлекне кайтарырга тиеш. Әгәр ике сүзнең озынлыгы бер үк булса, исемлекне алфавит буенча тәртипкә салыгыз. Функция җепләр исемлеген тәртипкә салынган тәртиптә кайтарырга тиеш. Сез барлык сүзләрнең дә озынлыгы бер үк булачак дип фаразлый аласыз. Мәсәлән: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""ab"", ""cd ])""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,tat_Cyrl,python,"
def x_or_y(n, x, y):
    """"""Әгәр n беренче сан булса, x кыйммәтен кайтарырга тиеш булган гади программа, ә башка очракта y кыйммәтен кайтарырга тиеш.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,tat_Cyrl,python,"
def double_the_difference(lst):
    '''Саннар исемлеген күрсәтеп, исемлектә булган читтән тыш саннарның квадратлары суммасын кайтарыгыз. Тискәре яки бөтен саннар булмаган саннарны исәпкә алмагыз. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference ((([0]) == 0 Әгәр кертү исемлеге буш булса, 0 кайтарыгыз. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,tat_Cyrl,python,"
def compare(game,guess):
    """"""Бу очракта, сездә булган хисләр һәм фикерләр, һичшиксез, билгеләп үтүгә һәм чагыштыруга лаек. Сезнең бурычыгыз - кешенең берничә матчның нәтиҗәләрен дөрес чамалаганлыгын билгеләү. Сезгә ике озынайтылган исәпләр һәм фаразлар бирелгән, анда һәр күрсәткеч туры килә. Һәр фаразның никадәр ерак булуын белдерүче шул ук озынлыктагы массивны кире кайтарыгыз. Әгәр алар дөрес чамалаган булса, бәясе 0 һәм, әгәр юк икән, бәя фараз һәм нәтиҗә арасындагы абсолют аерма. мисал: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,tat_Cyrl,python,"
def Strongest_Extension(class_name, extensions):
    """"""Сезгә класс исеме (җеп) һәм киңәйтүләр исемлеге биреләчәк. Бу киңәйтүләр класска өстәмә классларны йөкләү өчен кулланылачак. Бу киңәйтүнең ныклыгы түбәндәгечә: CAP киңәйтү исемендәге зур хәрефләр саны булсын, ә SM киңәйтү исемендәге кечкенә хәрефләр саны булсын, ныклык CAP - SM кисәкчәсе белән бирелә. Сез иң көчле киңәйтүне табарга һәм мондый форматтагы җепне кире кайтарырга тиеш: ClassName.StrongestExtensionName. Әгәр дә бер үк ныклык белән ике яки берничә киңәйтү булса, сез исемлектә беренче булып килгәнне сайларга тиеш. Мәсәлән, сезгә ""Slices"" сыйныф һәм киңәйтүләр исемлеге буларак бирелә: ['SEviRNGSliCes', 'Cheese', 'StuFfed'] сез ""Slices.SviRNGSliCes' 'SviRNGSliCes' mySviRNGSliCes' 'mySviRNGSliCes']) киңәйтүнең ныклыгын биргәнгә күрә, ""SviRNGSliCes""ны кире кайтарырга тиешсез.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,tat_Cyrl,python,"
def cycpattern_check(a , b):
    """"""Сезгә 2 сүз бирелә. Әгәр икенче сүз яки аның әйләнеше беренче сүздәге субстринг булса, дөрес дип кайтарырга кирәк cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check""(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,tat_Cyrl,python,"
def even_odd_count(num):
    """"""Бер бөтен сан бирелгән. тигез санлы һәм тигез санлы саннардан торган тупель кайтару. Мисал: тигез_тигез_санлы ((-12) ==> (1, 1) тигез_тигез_санлы ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,tat_Cyrl,python,"
def int_to_mini_roman(number):
    """"""Бер уңай бөтен сан бирелгәндә, аның рим цифрлары эквивалентын җеп итеп алыгыз һәм аны кечкенә хәрефләр белән кайтарыгыз.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,tat_Cyrl,python,"
def right_angle_triangle(a, b, c):
    '''Өчпочмакның өч ягының озынлыклары бирелгән. Өч як туры почмаклы өчпочмакны тәшкил итсә, дөрес, ялганны кире кайтарыгыз. Дөрес почмаклы өчпочмак - өчпочмакның бер почмагы туры почмак яки 90 градус булган өчпочмак. Мисал: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,tat_Cyrl,python,"
def find_max(words):
    """"""String исемлеген кабул итүче функция языгыз. Бу исемлектә төрле сүзләр бар. Берничә Stringның максималь уникаль хәрефләре булган сүзне кайтарыгыз. Әгәр берничә Stringның максималь уникаль хәрефләре булса, лексикографик тәртиптә беренче килгәнне кайтарыгыз. find_max (([""name"", ""of"", ""string""]) == ""string"" find_max (([""name"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,tat_Cyrl,python,"
def eat(number, need, remaining):
    """"""Сез ач куян, һәм сез инде ашаган билгеле бер санда морковка, әмма хәзер сезгә кирәк, ашарга күбрәк морковка тәмамлау өчен көннең ашау. сез кайтырга тиеш массив [гомуми саны съеденных морковка соң сезнең ашау, сан морковка калдырылган соң сезнең ашау ] әгәр дә юк, җитәрлек калган морковка, сез ашарга барлык калган морковка, әмма барыбер булачаксыз ач. Мисал: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Изменные: @number: бөтен санда, морковка саны, сез ашаган. @need:: бөтен санда, морковка саны, сезгә кирәк, ашарга. @remaining:: бөтен санда, калган морковка саны, сездә бар: * Constrain: 0 = <= 0 * 1000 = <= 1000 * 0 кирәк <= 1000 = <= 1000 остальные запас:""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,tat_Cyrl,python,"
def do_algebra(operator, operand):
    """"""Бер исемлектә ике оператор һәм ике операнд бар. Беренче исемлектә төп алгебра операцияләре бар, ә икенче исемлектә - бөтен саннар исемлеге. Алгебралы белдерүне төзү өчен бирелгән ике исемлекне кулланыгыз һәм бу белдерүнең бәяләмәсен кире кайтарыгыз. Төп алгебра операцияләре: Кушу (+) Алу (-)) Уртаклау (*) Идән бүлү ( //) Экспоненциальләштерү (**) Мисал: оператор['+', '*', '-'] массив = [2, 3, 4, 5] нәтиҗә = 2 + 3 * 4 - 5 => нәтиҗә = 9 Искәрмә: Оператор исемлегенең озынлыгы операнд исемлегенең озынлыгына тигез. Операнд - тискәре булмаган бөтен саннар исемлеге. Оператор исемлегендә ким дигәндә бер оператор бар, ә операнд исемлегендә ким дигәндә ике операнд бар. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,tat_Cyrl,python,"
def solve(s):
    """"""Әгәр s[i] хәреф булса, аның зурлыгын түбәннән өскә яки киресенчә үзгәртергә кирәк, югыйсә ул шулай кала. Әгәр җептә хәрефләр булмаса, җепне кире кайтарырга кирәк. Функция нәтиҗәдә килгән җепне кайтарырга тиеш.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,tat_Cyrl,python,"
def string_to_md5(text):
    """"""Бер җеп 'text' бирелгән булса, аның md5 хеш эквивалент җепләрен кайтарыгыз. Әгәр 'text' буш җеп булса, None кайтарыгыз. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,tat_Cyrl,python,"
def generate_integers(a, b):
    """"""Ике уңай a һәм b бөтен саннары бирелгәндә, a һәм b арасындагы пар саннарны, арту тәртибендә, кире кайтарыгыз. Мәсәлән: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
