[
    {
        "task_id": "HumanEval/0",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"जाँचें कि संख्याओं की दी गई सूची में, कोई दो संख्याएं दी गई सीमा से एक-दूसरे के करीब हैं। उदाहरण: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) गलत >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) सही \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"इस फ़ंक्शन के लिए इनपुट एक स्ट्रिंग है जिसमें नेस्टेड कोष्ठक के कई समूह हैं. आपका लक्ष्य उन समूहों को अलग-अलग स्ट्रिंग्स में अलग करना है और उन लोगों की सूची वापस करना है. अलग-अलग समूह संतुलित हैं (प्रत्येक खुले कोष्ठक ठीक से बंद है) और एक दूसरे के भीतर नेस्टेड नहीं हैं इनपुट स्ट्रिंग में किसी भी रिक्त स्थान को अनदेखा करें. उदाहरणः >>> separate_paren_groups'(()) (() (()))))))) ['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"एक सकारात्मक फ्लोटिंग पॉइंट संख्या को देखते हुए, इसे पूर्णांक भाग (दिली गई संख्या से छोटा सबसे बड़ा पूर्णांक) और दशमलव (बाकी भाग हमेशा 1 से छोटा होता है) में विभाजित किया जा सकता है। संख्या का दशमलव भाग लौटाएं। उदाहरण: >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"आपको एक बैंक खाते पर जमा और निकासी संचालन की एक सूची दी जाती है जो शून्य शेष से शुरू होती है। आपका कार्य यह पता लगाना है कि किसी भी बिंदु पर खाते का शेष शून्य से नीचे गिर जाता है, और उस बिंदु पर फ़ंक्शन को True लौटना चाहिए। अन्यथा इसे False लौटना चाहिए। उदाहरणः >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"इनपुट संख्याओं की दी गई सूची के लिए, इस डेटासेट के औसत के आसपास औसत निरपेक्ष विचलन की गणना करें। औसत निरपेक्ष विचलन प्रत्येक तत्व और एक केंद्र बिंदु के बीच औसत निरपेक्ष अंतर है (इस मामले में औसत): एमएडी = औसत । x - x_mean । उदाहरण: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"इनपुट सूची के प्रत्येक दो लगातार तत्वों के बीच एक संख्या 'डिलिमिटर' डालें `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"इस फंक्शन में इनपुट एक स्ट्रिंग है जो नेस्टेड कोष्ठक के लिए कई समूहों का प्रतिनिधित्व करती है जो रिक्त स्थान से अलग होती है। प्रत्येक समूह के लिए, कोष्ठक के सबसे गहरे स्तर का नेस्टिंग आउटपुट करें। उदाहरण के लिए (() (()) में अधिकतम दो स्तर हैं जबकि ((())) में तीन हैं। >>> parse_nested_parens('((()) ((())) () ((()) ((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"इनपुट स्ट्रिंग्स की सूची को केवल उन लोगों के लिए फ़िल्टर करें जिनमें दी गई सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"पूर्णांक की दी गई सूची के लिए, एक सूची में सभी पूर्णांक के योग और उत्पाद से युक्त एक टपल लौटाएं। खाली योग 0 के बराबर होना चाहिए और खाली उत्पाद 1 के बराबर होना चाहिए। >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) ।\"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक की दी गई सूची से, अनुक्रम में दिए गए क्षण तक पाए गए रोलिंग अधिकतम तत्व की सूची उत्पन्न करें। >>> रोलिंग_मैक्स (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"सबसे छोटा पालिंड्रोम खोजें जो एक आपूर्ति की गई स्ट्रिंग से शुरू होता है। एल्गोरिथ्म विचार सरल हैः - आपूर्ति की गई स्ट्रिंग का सबसे लंबा पोस्टफिक्स खोजें जो एक पालिंड्रोम है। - स्ट्रिंग के अंत में एक स्ट्रिंग उपसर्ग का रिवर्स जोड़ें जो पालिंड्रोमिक प्रत्यय से पहले आता है। >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"परीक्षण यदि दी गई स्ट्रिंग एक पालिंड्रोम है \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इनपुट दो स्ट्रिंग्स a और b हैं जिनमें केवल 1 और 0 हैं. इन इनपुट पर बाइनरी XOR करें और परिणाम को स्ट्रिंग के रूप में भी लौटाएं. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"स्ट्रिंग्स की सूची में से सबसे लम्बी स्ट्रिंग लौटाएं. एक ही लंबाई की कई स्ट्रिंग्स के मामले में पहली एक लौटाएं. इनपुट सूची खाली होने की स्थिति में कोई नहीं लौटाएं. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"दो पूर्णांक a और b के सबसे बड़े सामान्य भाजक को लौटाएं >>> सबसे बड़ा_सामान्य_विभाजक ((3, 5) 1 >>> सबसे बड़ा_सामान्य_विभाजक ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"इनपुट स्ट्रिंग के सबसे छोटे से सबसे लंबे तक सभी उपसर्गों की सूची लौटाएं >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"एक स्ट्रिंग लौटाएँ जिसमें 0 से लेकर n तक के स्थान-सीमित संख्याएँ शामिल हों. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"एक स्ट्रिंग दी गई, पता लगाएं कि कितने अलग-अलग वर्ण (कोई भी केस) में >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"इनपुट इस फ़ंक्शन के लिए एक विशेष ASCII प्रारूप में संगीत नोटों का प्रतिनिधित्व कर रहे एक स्ट्रिंग है. आपका कार्य कई बीट्स के अनुरूप पूर्णांक स्ट्रिंग सूची पार्स करने के लिए है यहाँ एक किंवदंती हैः 'o' नोट, पिछले चार बीट्स 'o' - आधा नोट, पिछले दो बीट्स ' - quater नोट, पिछले एक बीट >>> parse_music. 'on",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"पता लगाएँ कि मूल स्ट्रिंग में कितनी बार एक दी गई सबस्ट्रिंग पाई जा सकती है। ओवरलैपिंग मामलों की गणना करें। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"इनपुट 'शून्य' से 'नौ' तक संख्याओं की एक अंतरिक्ष-सीमित स्ट्रिंग है. वैध विकल्प 'शून्य', 'एक', 'दो', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' और 'नौ' हैं. संख्याओं के साथ स्ट्रिंग को सबसे छोटे से सबसे बड़े क्रमबद्ध करके लौटाएं >>> sort_numbers (('तीन एक पांच') 'एक तीन पांच' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"संख्याओं की आपूर्ति की गई सूची (कम से कम दो की लंबाई) से दो का चयन करें और एक दूसरे के सबसे करीब हैं और उन्हें क्रम में वापस करें (छोटी संख्या, बड़ी संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"संख्याओं की दी गई सूची (कम से कम दो तत्वों की), उस सूची में एक रैखिक परिवर्तन लागू करें, ताकि सबसे छोटी संख्या 0 हो जाए और सबसे बड़ी संख्या 1 हो जाए >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"किसी भी पायथन मानों की दी गई सूची को केवल पूर्णांक के लिए फ़िल्टर करें >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"दिए गए स्ट्रिंग की वापसी लंबाई >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"किसी दी गई संख्या n के लिए, सबसे बड़ी संख्या ज्ञात कीजिए जो n से छोटी है, n से भी छोटी है >>> largest_divisor ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"दिए गए पूर्णांक के अभाज्य गुणकों की सूची को सबसे छोटे से सबसे बड़े क्रम में लौटाएं। प्रत्येक कारक को कई बार सूचीबद्ध किया जाना चाहिए जो कि कारककरण में कितनी बार दिखाई देता है। इनपुट संख्या सभी कारकों के उत्पाद के बराबर होनी चाहिए >>> कारककरण ((8) [2, 2, 2] >>> कारककरण ((25) [5, 5] >>> कारककरण ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक की सूची से, उन सभी तत्वों को हटा दें जो एक से अधिक बार होते हैं. तत्वों का क्रम वही रखें जो इनपुट में है. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"किसी दिए गए स्ट्रिंग के लिए, लघु अक्षरों को अपरकेस और अपरकेस को लघु अक्षरों में फ्लिप करें. >>> flip_case ((('Hello') 'HELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"एक एकल स्ट्रिंग में स्ट्रिंग्स की सूची को जोड़ना >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"इनपुट स्ट्रिंग्स की सूची को केवल उन लोगों के लिए फ़िल्टर करें जो दिए गए उपसर्ग से शुरू होते हैं. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"सूची में केवल सकारात्मक संख्याएँ लौटाएँ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"यदि कोई दी गई संख्या अभाज्य है, तो सही लौटाएं, और अन्यथा गलत। >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs बहुपद के गुणांक हैं. find_zero find x such that poly(x) = 0. find_zero केवल शून्य बिंदु देता है, भले ही कई हों. इसके अलावा, find_zero केवल उन xs को सूचीबद्ध करता है जिनके पास गुणांक की संख्या और सबसे बड़ा गैर-शून्य गुणांक होता है क्योंकि यह एक समाधान की गारंटी देता है. >>> गोल ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> गोल ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"बहुपद का मूल्यांकन गुणांक xs के साथ बिंदु x पर करता है. वापसी xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"यह फंक्शन एक सूची l लेता है और एक सूची l' देता है, जो l' के समान है, जो तीन से विभाज्य नहीं हैं, जबकि तीन से विभाज्य सूचकांकों पर इसके मान l के संबंधित सूचकांकों के मानों के बराबर हैं, लेकिन क्रमबद्ध हैं। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"सूची में क्रमबद्ध अद्वितीय तत्वों को लौटाता है >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"सूची में अधिकतम तत्व लौटाता है. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"संख्या 7 के उन पूर्णांक में प्रकट होने की संख्या लौटाएं जो n से कम हैं और 11 या 13 से विभाज्य हैं. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"यह फलन एक सूची l लेता है और एक सूची l' देता है, जो कि l' विषम सूचकांकों में l के समान है, जबकि इसके सम सूचकांकों में इसके मान l के सम सूचकांकों के मानों के बराबर हैं, लेकिन क्रमबद्ध हैं। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"इनपुट स्ट्रिंग के रूप में लेता है जो encode_cyclic फ़ंक्शन के साथ एन्कोड किया गया है. डिकोड स्ट्रिंग लौटाता है.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"तीन वर्णों के चक्र समूहों द्वारा एन्कोडेड स्ट्रिंग लौटाता है।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib एक फाइबोनैचि संख्या है और यह भी प्राइम है. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero पूर्णांक की सूची को इनपुट के रूप में लेता है. यह True लौटाता है यदि सूची में तीन अलग-अलग तत्व हैं जो शून्य पर योग करते हैं, और अन्यथा False. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"एक सड़क की कल्पना कीजिए जो एक पूरी तरह से सीधी अनंत लंबी रेखा है. n कारें बाएं से दाएं जा रही हैं; साथ ही, n कारों का एक अलग सेट दाएं से बाएं जा रहा है. कारों के दो सेट एक दूसरे से बहुत दूर होने से शुरू होते हैं. सभी कारें एक ही गति से चलती हैं. दो कारों को टकराव कहा जाता है जब एक कार जो बाएं से दाएं जा रही है वह एक कार को टक्कर देती है जो दाएं से बाएं जा रही है. हालांकि, कारें असीम रूप से मजबूत और मजबूत होती हैं; नतीजतन, वे अपने प्रक्षेपवक्र में चलते रहते हैं जैसे कि वे टकराए नहीं थे. यह फ़ंक्शन इस तरह के टक्करों की संख्या को आउटपुट करता है.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. से वृद्धि के साथ तत्वों के साथ सूची लौटाएं >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero पूर्णांक की सूची को इनपुट के रूप में लेता है. यह True लौटाता है यदि सूची में दो अलग-अलग तत्व हैं जो शून्य पर योग करते हैं, और अन्यथा False. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"इनपुट संख्या x का संख्यात्मक आधार आधार में बदलें. रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाएं. आधार संख्या 10 से कम है. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"त्रिकोण के लिए एक पक्ष की लंबाई और उच्च वापसी क्षेत्र दिया गया है। >>> त्रिकोण_क्षेत्र\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 संख्या अनुक्रम Fibbonacci अनुक्रम के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 संख्या अनुक्रम के n-वें तत्व की कुशलता से गणना करने के लिए एक फ़ंक्शन लिखें। पुनरावृत्ति का उपयोग न करें। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"सूची में तत्वों का मध्यवर्ती रिटर्न l. >>> मध्यवर्ती (([3, 1, 2, 4, 5]) 3 >>> मध्यवर्ती (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"जाँचता है कि दी गई स्ट्रिंग एक पालिंड्रोम है >>> is_palindrome('') सही है >>> is_palindrome('aba') सही है >>> is_palindrome('aaaaa') सही है >>> is_palindrome('zbcd') गलत है \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n मॉडुलो p (संख्याओं के बारे में जागरूक रहें) लौटाएँ. >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"इनपुट स्ट्रिंग के रूप में लेता है जो encode_shift फ़ंक्शन के साथ एन्कोड किया गया है. डिकोड स्ट्रिंग लौटाता है. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"वर्णमाला में प्रत्येक वर्ण को 5 से स्थानांतरित करके एन्कोडेड स्ट्रिंग लौटाता है.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels एक ऐसा फंक्शन है जो स्ट्रिंग लेता है और बिना स्वरों के स्ट्रिंग देता है। >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"यदि सूची l में सभी संख्याएँ सीमा t से नीचे हैं तो True लौटाएँ. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"दो संख्याओं को जोड़ें x और y >>> जोड़ें ((2, 3) 5 >>> जोड़ें ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"जाँचें कि क्या दो शब्दों में एक ही अक्षर हैं. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') सही >>> same_chars('abcd', 'dddddddabc') सही >>> same_chars('dddddddabc', 'abcd') सही >>> same_chars('eabcd', 'dddddddabc') गलत >>> same_chars('abcd', 'dddddddabce') गलत >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') गलत \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-वां फाइबोनैचि संख्या लौटाएँ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"<\" और \">\" की एक स्ट्रिंग है. यदि प्रत्येक खुलने वाले ब्रैकेट में एक संबंधित समापन ब्रैकेट है तो सही लौटाएं. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"लौटाएँ सही है सूची तत्व एकतरफा बढ़ रहे हैं या घट रहे हैं। >>> एकतरफा (([1, 2, 4, 20]) सही >>> एकतरफा (([1, 20, 4, 10]) गलत >>> एकतरफा (([4, 1, 0, -10]) सही \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"दो सूचियों के लिए क्रमबद्ध अद्वितीय सामान्य तत्व लौटाएं. >>> सामान्य (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n का सबसे बड़ा प्राइम फैक्टर लौटाएं. मान लें कि n > 1 और प्राइम नहीं है. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n एक ऐसा फंक्शन है जो 1 से n तक के संख्याओं को जोड़ता है। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"(\" और \"\") की एक स्ट्रिंग है. यदि प्रत्येक खुलने वाले ब्रैकेट में एक संबंधित बंद ब्रैकेट है तो सही लौटाएं. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\"() False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs बहुपद के गुणांक को दर्शाता है. xs[0] + xs[1] * x + xs[2] * x^2 + .... इस बहुपद का व्युत्पन्न उसी रूप में लौटाएं. >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"FibFib संख्या अनुक्रम Fibbonacci अनुक्रम के समान एक अनुक्रम है जिसे निम्नानुसार परिभाषित किया गया हैः fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया एक फ़ंक्शन लिखें जो fibfib संख्या अनुक्रम के n-वें तत्व की कुशलता से गणना करता है। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"एक फ़ंक्शन vowels_count लिखें जो इनपुट के रूप में एक शब्द का प्रतिनिधित्व करने वाली स्ट्रिंग लेता है और स्ट्रिंग में स्वरों की संख्या देता है। इस मामले में स्वर 'a', 'e', 'i', 'o', 'u' हैं। यहाँ, 'y' भी एक स्वर है, लेकिन केवल जब यह दिए गए शब्द के अंत में होता है। उदाहरणः >>> vowels_count ((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"अधिक परीक्षण मामले जोड़ें।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"परिपत्र पूर्णांक x के अंकों को स्थानांतरित करें, अंकों को स्थानांतरित करके दाईं ओर स्थानांतरित करें और परिणाम को स्ट्रिंग के रूप में लौटाएं। यदि स्थानांतरण > अंकों की संख्या, अंकों को उल्टा लौटाएं। >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"कार्य एक फ़ंक्शन लिखें जो इनपुट के रूप में एक स्ट्रिंग लेता है और केवल ऊपरी वर्णों के योग को लौटाता है' ASCII कोड. उदाहरणः digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"इस कार्य में, आपको एक स्ट्रिंग दी जाएगी जो एक संख्या का प्रतिनिधित्व करती है सेब और संतरे जो फलों की टोकरी में वितरित किए जाते हैं इस टोकरी में सेब, संतरे और आम के फल होते हैं। स्ट्रिंग दी गई जो संतरे और सेब की कुल संख्या का प्रतिनिधित्व करती है और एक पूर्णांक जो टोकरी में फलों की कुल संख्या का प्रतिनिधित्व करता है टोकरी में आम के फलों की संख्या लौटाएं। उदाहरण के लिएः fruit_distribution\"5(सेब और 6 संतरे\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 सेब और 1 संतरे\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 सेब और 3 संतरे\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 सेब और 120) \",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"एक सरणी को एक पेड़ की शाखा का प्रतिनिधित्व करने के लिए दिया गया है जिसमें गैर-ऋणात्मक पूर्णांक नोड्स हैं आपका कार्य नोड्स में से एक को चुनना और इसे वापस करना है। चुनने वाला नोड सबसे छोटा सम मान वाला नोड होना चाहिए। यदि एक ही सबसे छोटे सम मान वाले कई नोड्स पाए जाते हैं तो सबसे छोटा सूचकांक वाला नोड लौटाएं। चुनने वाला नोड एक सूची में लौटाया जाना चाहिए, [smallest_value, its index], यदि कोई सम मान नहीं हैं या दी गई सरणी खाली है, तो वापस करें []। उदाहरण 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 का सबसे छोटा सम मान है, और 2 का सबसे छोटा सूचकांक है। उदाहरण 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 का सबसे छोटा मान है, और 2 का सबसे छोटा सम सूचकांक है। उदाहरण 3: इनपुटः [] आउटपुटः [] इनपुटः [4: 5, 3, 4, 2] आउटपुटः 1 [0, 0] आउटपुटः 1 सबसे छोटा नोड, लेकिन सूचकांक शून्य है। उदाहरणः 1 * लंबाईः 1 है, लेकिन शून्य है, इसलिए हम सबसे छोटा नोड चुनेंगे, जो शून्य है।\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''आपको सकारात्मक पूर्णांक की एक गैर-खाली सूची दी गई है. सबसे बड़ा पूर्णांक लौटाएं जो शून्य से अधिक है, और पूर्णांक के मूल्य से अधिक या बराबर आवृत्ति है. एक पूर्णांक की आवृत्ति सूची में दिखाई देने वाली संख्या है. यदि ऐसा कोई मूल्य मौजूद नहीं है, तो -1 लौटाएं. उदाहरणः खोजें: [4, 1, 2, 2, 3, 1]) == 2 खोजें: [1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 खोजें: [5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''पूर्णांक की सूची दी गई, अजीब क्रम में सूची लौटाएं. अजीब क्रमबद्धता, जब आप न्यूनतम मूल्य से शुरू करते हैं, तो शेष पूर्णांक का अधिकतम, फिर न्यूनतम और इसी तरह। उदाहरण: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''त्रिकोण के तीन पक्षों की लंबाई को देखते हुए. यदि तीन पक्ष एक वैध त्रिकोण बनाते हैं तो त्रिकोण के क्षेत्र को 2 दशमलव बिंदुओं तक गोल करके लौटाएं. अन्यथा -1 लौटाएं तीन पक्ष एक वैध त्रिकोण बनाते हैं जब किसी भी दो पक्षों का योग तीसरी तरफ से अधिक होता है. उदाहरण: त्रिकोण_क्षेत्र (), (4, 5) == 6.00 त्रिकोण_क्षेत्र (), (1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''एक फ़ंक्शन लिखें जो सही लौटाता है यदि ऑब्जेक्ट q उड़ जाएगा, और अन्यथा गलत है। ऑब्जेक्ट q उड़ जाएगा यदि यह संतुलित है (यह एक पालिंड्रोमिक सूची है) और इसके तत्वों का योग अधिकतम संभव वजन w से कम या बराबर है। उदाहरण: will_it_fly (([1, 2], 5) â -> False # 1+2 अधिकतम संभव वजन से कम है, लेकिन यह असंतुलित है। will_it_fly (([3, 2, 3], 1) â -> False # यह संतुलित है, लेकिन 3+2+3 अधिकतम संभव वजन से अधिक है। will_it_fly (([3, 2, 3], 9) â -> True # 3+23 अधिकतम संभव वजन से कम है, और यह संतुलित है। will_it_fly ((([3], 5) â -> True # 3 अधिकतम संभव वजन से कम है, और यह संतुलित है।'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"पूर्णांक के एक सरणी को देखते हुए, सरणी को पालिंड्रोमिक बनाने के लिए न्यूनतम तत्वों की संख्या ज्ञात करें। एक पालिंड्रोमिक सरणी एक सरणी है जिसे पीछे और आगे एक ही पढ़ा जाता है। एक परिवर्तन में, आप एक तत्व को किसी अन्य तत्व में बदल सकते हैं। उदाहरण के लिएः smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''एक फ़ंक्शन लिखें जो दो स्ट्रिंग्स की सूची स्वीकार करता है और उस सूची को लौटाता है जिसमें सूची के सभी स्ट्रिंग्स में अन्य सूची से कम वर्णों की कुल संख्या है। यदि दो सूचियों में वर्णों की समान संख्या है, तो पहली सूची लौटाएं। उदाहरण कुल_मैच (([], []) â -> [] कुल_मैच ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] कुल_मैच ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] कुल_मैच ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] कुल_मैच ((['4'], ['1'', '2'', '3'', '4'', '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"एक ऐसा फंक्शन लिखिए जो सही लौटाता है यदि दी गई संख्या 3 अभाज्य संख्याओं का गुणन है और अन्यथा गलत है। यह जानते हुए कि (ए) 100 से कम है। उदाहरण: is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"आपका कार्य एक ऐसा फंक्शन लिखना है जो सही लौटाता है यदि कोई संख्या x n की एक साधारण शक्ति है और अन्य मामलों में गलत है। x n की एक साधारण शक्ति है यदि n**int=x उदाहरण के लिए: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''एक ऐसा फंक्शन लिखें जो एक पूर्णांक a लेता है और True लौटाता है यदि यह ingeger किसी पूर्णांक संख्या का घन है। नोटः आप मान सकते हैं कि इनपुट हमेशा मान्य है। उदाहरणः iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"आपको एक ऐसा फंक्शन लिखने का काम दिया गया है जो हेक्साडेसिमल संख्या को स्ट्रिंग के रूप में प्राप्त करता है और उन हेक्साडेसिमल अंकों की संख्या को गिनता है जो प्राइम हैं (प्राइम नंबर, या प्राइम, 1 से अधिक प्राकृतिक संख्या है जो दो छोटी प्राकृतिक संख्याओं का उत्पाद नहीं है) । हेक्साडेसिमल अंकों में 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. प्राइम नंबर 2, 3, 5, 7, 11, 13, 17,... हैं, इसलिए आपको निम्नलिखित अंकों की संख्या निर्धारित करनी होगी: 2, 3, 5, 7, B (= दशमलव 11), D (= दशमलव 13) नोटः आप मान सकते हैं कि इनपुट हमेशा सही या खाली स्ट्रिंग है, और प्रतीक A,B,C,D,E,F हमेशा बड़े अक्षरों में होते हैं। उदाहरणः \"num\" के लिए आउटपुट num = 1. \"num\" के लिए आउटपुट num = 1. \"num\" के लिए आउटपुट num = 1077E होना चाहिए \"output\" होना चाहिए 2. \"num\" के लिए num = \"num33A\" के लिए num = \"num\" होना चाहिए 4. \"num\" के लिए num = \"num\" होना चाहिए 6.01289ABCD \"A\" के लिए आउटपुट num = 2.0452020 \"EF\" होना चाहिए।\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"आपको दशमलव रूप में एक संख्या दी जाएगी और आपका कार्य इसे द्विआधारी प्रारूप में परिवर्तित करना है. फ़ंक्शन को एक स्ट्रिंग लौटना चाहिए, जिसमें प्रत्येक वर्ण एक द्विआधारी संख्या का प्रतिनिधित्व करता है. स्ट्रिंग में प्रत्येक वर्ण '0' या '1' होगा. स्ट्रिंग की शुरुआत में और अंत में अतिरिक्त वर्ण 'db' होंगे. अतिरिक्त वर्ण प्रारूप में मदद करने के लिए हैं. उदाहरणः decimal_to_binary(15) # लौटाता है \"db1111db\" decimal_to_binary32) # लौटाता है \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"आपको एक स्ट्रिंग s दी गई है. आपका कार्य यह जांचना है कि स्ट्रिंग खुश है या नहीं. एक स्ट्रिंग खुश है यदि इसकी लंबाई कम से कम 3 है और प्रत्येक 3 लगातार अक्षर अलग हैं उदाहरण के लिए: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"यह सेमेस्टर का अंतिम सप्ताह है और शिक्षक को छात्रों को ग्रेड देना है। शिक्षक ग्रेडिंग के लिए अपना एल्गोरिथ्म बना रहा है। एकमात्र समस्या यह है कि उसने ग्रेडिंग के लिए इस्तेमाल किया कोड खो दिया है। उसने आपको कुछ छात्रों के लिए जीपीए की एक सूची दी है और आपको एक फ़ंक्शन लिखना होगा जो निम्नलिखित तालिका का उपयोग करके पत्र ग्रेड की एक सूची आउटपुट कर सकता हैः जीपीए  पत्र ग्रेड 4.0 ए + > 3.7 ए > 3.3 ए- > 3.0 बी + > 2.7 बी > 2.3 बी- > 2.0 सी + > 1.7 सी > 1.3 सी- > 1.0 डी + > 0.7 डी > 0.0 डी- 0.0 ई उदाहरणः grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['ए +', 'बी', 'सी-', 'सी', 'ए'] -'\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"एक फ़ंक्शन लिखें जो एक स्ट्रिंग लेता है और यदि स्ट्रिंग की लंबाई एक अभाज्य संख्या है तो True या False लौटाता है अन्यथा उदाहरण prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"एक सकारात्मक पूर्णांक n को देखते हुए, उन n-अंकीय सकारात्मक पूर्णांक की संख्या की गणना लौटाएं जो 1 से शुरू या समाप्त होते हैं।\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"एक सकारात्मक पूर्णांक N को देखते हुए, बाइनरी में इसके अंकों का कुल योग लौटाएं। उदाहरण के लिए N = 1000, अंकों का योग 1 होगा आउटपुट \"1\" होना चाहिए। N = 150 के लिए, अंकों का योग 6 होगा आउटपुट \"110\" होना चाहिए। N = 147 के लिए, अंकों का योग 12 होगा आउटपुट \"1100\" होना चाहिए। चरः @N पूर्णांक प्रतिबंधः 0 â‰¤ N â‰¤ 10000. आउटपुटः बाइनरी संख्या की एक स्ट्रिंग \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"पूर्णांक की एक गैर-खाली सूची दी गई lst. उन सम तत्वों को जोड़ें जो विषम सूचकांकों पर हैं। उदाहरणः add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"एक फ़ंक्शन लिखें जो एक स्ट्रिंग लेता है और इसका एक क्रमबद्ध संस्करण देता है। स्ट्रिंग का क्रमबद्ध संस्करण, एक स्ट्रिंग है जहां सभी शब्दों (अंतर द्वारा अलग) को एक नए शब्द द्वारा प्रतिस्थापित किया जाता है जहां सभी वर्णों को ascii मान के आधार पर आरोही क्रम में व्यवस्थित किया जाता है। नोटः आपको वाक्य में शब्दों और रिक्त स्थान का क्रम रखना चाहिए। उदाहरण के लिए: anti_shuffle (('Hi') रिटर्न 'Hi' anti_shuffle (('hello') रिटर्न 'ehllo' anti_shuffle (('Hello World!!!') रिटर्न 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"आपको एक 2 आयामी डेटा दिया जाता है, एक नेस्टेड सूची के रूप में, जो मैट्रिक्स के समान है, हालांकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में विभिन्न संख्या में कॉलम हो सकते हैं। lst, और पूर्णांक x दिए गए, सूची में पूर्णांक x खोजें, और ट्यूपल की सूची वापस करें, [(x1, y1), (x2, y2) ...] जैसे कि प्रत्येक टपल एक निर्देशांक है - (पंक्ति, कॉलम), 0 से शुरू होता है। क्रमबद्ध निर्देशांक प्रारंभ में पंक्तियों द्वारा आरोही क्रम में। इसके अलावा, क्रमबद्ध निर्देशांक नीचे क्रम में कॉलम द्वारा पंक्ति। उदाहरणः get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0) get_(], 1) [] == == पंक्ति [1, 2, 3, 2], == 2] == [2, 3]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"गैर-ऋणात्मक पूर्णांक की एक सरणी दी गई है, क्रमबद्ध करने के बाद दी गई सरणी की एक प्रति लौटाएं, यदि योग ((पहला सूचकांक मान, अंतिम सूचकांक मान) विषम है, तो आप दिए गए सरणी को आरोही क्रम में सॉर्ट करेंगे, या यदि योग ((पहला सूचकांक मान, अंतिम सूचकांक मान) सम है तो इसे अवरोही क्रम में सॉर्ट करेंगे। नोटः * दी गई सरणी को न बदलें। उदाहरणः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"एक फंक्शन एन्क्रिप्ट बनाएं जो स्ट्रिंग को तर्क के रूप में ले और वर्णमाला को घुमाए जाने के साथ एन्क्रिप्ट की गई स्ट्रिंग लौटाता है। वर्णमाला को इस तरह से घुमाया जाना चाहिए कि अक्षर दो स्थानों पर दो गुना नीचे स्थानांतरित हो जाएं। उदाहरण के लिए: एन्क्रिप्ट (('hi') रिटर्न 'lm' एन्क्रिप्ट (('asdfghjkl') रिटर्न 'ewhjklnop' एन्क्रिप्ट (('gf') रिटर्न 'kj' एन्क्रिप्ट (('et') रिटर्न 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"आपको पूर्णांक की एक सूची दी गई है। एक फ़ंक्शन next_smallest लिखें जो सूची का दूसरा सबसे छोटा तत्व लौटाता है। यदि ऐसा कोई तत्व नहीं है तो कोई नहीं लौटाता है। next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == कोई नहीं next_smallest (([1, 1]) == कोई नहीं \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"आपको शब्दों की एक स्ट्रिंग दी जाएगी, और आपका कार्य बोरडॉम्स की संख्या गिनना है। एक बोरडॉम एक वाक्य है जो \"I\" शब्द से शुरू होता है। वाक्य '.', '?' या '! ' द्वारा सीमित होते हैं। उदाहरण के लिएः >>> is_bored(\"हैलो वर्ल्ड\") 0 >>> is_bored(\"आकाश नीला है। सूरज चमक रहा है। मुझे यह मौसम पसंद है\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''एक फ़ंक्शन बनाएँ जो 3 संख्याएँ लेता है. यदि एक संख्या अन्य दो के योग के बराबर है, तो यह सही लौटाता है, और सभी संख्याएँ पूर्णांक हैं. किसी भी अन्य मामलों में यह गलत लौटाता है. उदाहरण any_int{5, 2, 7} -> True any_int{3, 2, 2}) -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"एक फ़ंक्शन लिखें जो एक संदेश लेता है, और इस तरह से एन्कोड करता है कि यह सभी अक्षरों के केस को स्वैप करता है, संदेश में सभी स्वरों को उस अक्षर के साथ बदल देता है जो अंग्रेजी वर्णमाला में उस स्वर के 2 स्थानों से पहले दिखाई देता है। केवल अक्षरों को मानें। उदाहरणः >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"आपको पूर्णांक की एक सूची दी गई है. आपको सबसे बड़ा प्राइम मान ढूंढना होगा और उसके अंकों का योग वापस करना होगा. उदाहरण: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] के लिए आउटपुट 10 होना चाहिए lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] के लिए आउटपुट 25 होना चाहिए lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] के लिए आउटपुट 13 होना चाहिए lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] के लिए आउटपुट 11 होना चाहिए lst = [0,81,12,3,21,1] के लिए आउटपुट 3 होना चाहिए lst = [0,1,8,2,1,7] के लिए आउटपुट 7 होना चाहिए \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"एक शब्दकोश दिया गया है, यदि सभी कुंजियाँ लघु अक्षरों में स्ट्रिंग हैं या सभी कुंजियाँ अपरकेस में स्ट्रिंग हैं, तो True लौटाएं, अन्यथा False लौटाएं। फ़ंक्शन को False लौटा देना चाहिए यदि दिया गया शब्दकोश खाली है। उदाहरण: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) को True लौटा देना चाहिए। check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) को False लौटा देना चाहिए। check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) को False लौटा देना चाहिए। check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) को False लौटा देना चाहिए। check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"}) को True लौटा देना चाहिए।\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"एक ऐसा फलन लागू करें जो एक गैर-ऋणात्मक पूर्णांक लेता है और पहले n पूर्णांक की एक सरणी देता है जो अभाज्य संख्याएं हैं और n से कम हैं. उदाहरण के लिए: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"फ़ंक्शन को पूरा करें जो दो पूर्णांक लेता है और उनके इकाई अंकों के उत्पाद को लौटाता है। मान लें कि इनपुट हमेशा मान्य है। उदाहरणः गुणा करना 148, 412) 16 लौटाएगा। गुणा करना 19 28 लौटाएगा। गुणा करना 2020 1851 लौटाएगा 0। गुणा करना 14 15 लौटाएगा 20।\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"एक स्ट्रिंग s को देखते हुए, सम सूचकांकों में अपरकेस स्वरों की संख्या की गणना करें। उदाहरण के लिए: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 देता है।\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''एक फ़ंक्शन बनाएं जो एक संख्या का प्रतिनिधित्व करने वाला मान (स्ट्रिंग) लेता है और उसके निकटतम पूर्णांक को लौटाता है. यदि संख्या दो पूर्णांक से समान दूरी पर है, तो इसे शून्य से दूर करें. उदाहरण >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 नोटः शून्य से दूर होने का मतलब है कि यदि दी गई संख्या दो पूर्णांक से समान दूरी पर है, तो आपको वह लौटना चाहिए जो शून्य से सबसे दूर है. उदाहरण के लिए closest_integer \" ((14.5\") को 15 और closest_integer \" ((-14.5\") को -15. लौटना चाहिए. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"एक सकारात्मक पूर्णांक n को देखते हुए, आपको पत्थरों के n स्तरों का ढेर बनाना होगा। पहले स्तर में n पत्थर हैं। अगले स्तर में पत्थरों की संख्या हैः - अगली विषम संख्या यदि n विषम है। - अगली सम संख्या यदि n सम है। एक सूची में प्रत्येक स्तर में पत्थरों की संख्या लौटाएं, जहां सूचकांक i पर तत्व स्तर (i+1) में पत्थरों की संख्या का प्रतिनिधित्व करता है। उदाहरणः >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"आपको शब्दों की एक स्ट्रिंग दी जाएगी जो अल्पविराम या रिक्त स्थान से अलग हो जाएगी. आपका कार्य शब्दों में स्ट्रिंग को विभाजित करना और शब्दों की एक सरणी वापस करना है. उदाहरण के लिए: words_string ((\"हाय, मेरा नाम जॉन है\") == [\"हाय\", \"मेरा\", \"नाम\", \"है\", \"जॉन\"] words_string ((\"एक, दो, तीन, चार, पांच, छह\") == [\"एक\", \"दो\", \"तीन\", \"चार\", \"पांच\", \"छह\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"यह फंक्शन दो धनात्मक संख्या x और y लेता है और सबसे बड़ी सम पूर्णांक संख्या देता है जो कि [x, y] समावेशी श्रेणी में है। यदि ऐसी कोई संख्या नहीं है, तो फ़ंक्शन को -1 लौटना चाहिए। उदाहरण के लिएः choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"आपको दो धनात्मक पूर्णांक n और m दिए गए हैं, और आपका कार्य n से m तक के पूर्णांक का औसत गणना करना है (n और m सहित) । उत्तर को निकटतम पूर्णांक में गोल करें और इसे बाइनरी में परिवर्तित करें। यदि n m से बड़ा है, तो -1 लौटाएं। उदाहरण: rounded_avg ((1, 5) => \"0b11\" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => \"0b1111\" rounded_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"सकारात्मक पूर्णांक x की सूची दी गई है. सभी तत्वों की एक क्रमबद्ध सूची लौटाएं जिसमें कोई भी अंक नहीं है. नोटः लौटाई गई सूची को क्रम में क्रमबद्ध किया जाना चाहिए. उदाहरण के लिएः >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"पूर्णांक की एक सरणी दी गई है, 1 और 9 के बीच के पूर्णांक को क्रमबद्ध करें, परिणामी सरणी को उलट दें, और फिर प्रत्येक अंक को उसके संबंधित नाम से \"एक\", \"दो\", \"तीन\", \"चार\", \"पांच\", \"छह\", \"सात\", \"आठ\", \"नौ\" से बदलें। उदाहरण के लिएः arr = [2, 1, 1, 4, 5, 8, 2, 3] -> क्रमबद्ध करें arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> रिवर्स arr -> [8, 5, 4, 3, 2, 2, 1, 1] वापसी [\"आठ\", \"चार\", \"तीन\", \"दो\", \"दो\", \"एक\", \"एक\"] यदि सरणी खाली है, तो एक रिक्त वापसीः arr = [] वापसी [] यदि सरणी में कोई अजीब संख्या है, तो इसे अनदेखा करेंः arr = [1, -1 , 55] -> arr -> [-1, 1, 55] -> reverse arr = [55,1] - return = ['One'] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"फलन f को लागू करें जो n को पैरामीटर के रूप में लेता है, और आकार n की एक सूची देता है, जैसे कि सूचकांक i पर तत्व का मान i का कारक है यदि i सम है या अन्यथा 1 से i तक की संख्याओं का योग है। i 1 से शुरू होता है। i का कारक 1 से i तक की संख्याओं का गुणन है (1 * 2 * ... * i) उदाहरण: f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"एक सकारात्मक पूर्णांक n को देखते हुए, एक टपल लौटाएं जिसमें सम और विषम पूर्णांक पालिंड्रोम की संख्या है जो कि श्रेणी में आते हैं ((1, n), समावेशी। उदाहरण 1: इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3 हैं, उनमें से एक सम है, और उनमें से दो विषम हैं। उदाहरण 2: इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हैं। उनमें से चार सम हैं, और उनमें से 6 विषम हैं। नोटः 1. 1 <= n <= 10 ^ 3 2. टपल ने क्रमशः सम और विषम पूर्णांक पालिंड्रोम की संख्या लौटा दी है। \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"एक फंक्शन count_nums लिखें जो पूर्णांक की एक सरणी लेता है और उन तत्वों की संख्या देता है जिनके अंकों का योग है > 0. यदि कोई संख्या ऋणात्मक है, तो इसका पहला हस्ताक्षरित अंक ऋणात्मक होगा: उदाहरण के लिए -123 के हस्ताक्षरित अंक -1, 2, और 3 हैं। >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"हमारे पास एन पूर्णांक arr[1], arr[2], ..., arr[N] का एक सरणी 'arr' है। सरणी में संख्याओं को यादृच्छिक रूप से क्रमबद्ध किया जाएगा। आपका कार्य यह निर्धारित करना है कि क्या किसी दिए गए सरणी पर निम्नलिखित ऑपरेशन करके गैर-घटते क्रम में एक सरणी को क्रमबद्ध करना संभव है: आपको किसी भी संख्या में दाएं शिफ्ट ऑपरेशन करने की अनुमति है। एक दाएं शिफ्ट ऑपरेशन का अर्थ है सरणी के सभी तत्वों को सही दिशा में एक स्थिति से स्थानांतरित करना। सरणी का अंतिम तत्व सरणी में प्रारंभिक स्थिति में स्थानांतरित किया जाएगा अर्थात 0 वां सूचकांक। यदि उपरोक्त ऑपरेशन करके क्रमबद्ध सरणी प्राप्त करना संभव है तो सही वापसी अन्यथा गलत वापसी। यदि दी गई सरणी खाली है तो सही वापसी। नोटः दी गई सूची में अद्वितीय तत्व होने की गारंटी है। उदाहरण के लिएः move_one_ball[3, 4, 5, 2] सही स्पष्टीकरणः 2 द्वारा सही ऑपरेशन, गैर-घटते क्रम को सरणी के लिए प्राप्त किया जा सकता है। [1, 3, 4, 5] गलत स्पष्टीकरणः सरणी के किसी भी संख्या को स्थानांतरित करके सही क्रम में स्थानांतरित करना संभव नहीं है।\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"इस समस्या में, आप एक फ़ंक्शन लागू करेंगे जो संख्याओं की दो सूचियों को लेता है, और यह निर्धारित करता है कि क्या उनके बीच तत्वों का आदान-प्रदान करना संभव है ताकि lst1 केवल सम संख्याओं की एक सूची बन सके। lst1 और lst2 के बीच आदान-प्रदान तत्वों की संख्या पर कोई सीमा नहीं है। यदि lst1 और lst2 के बीच तत्वों का आदान-प्रदान करना संभव है ताकि lst1 के सभी तत्वों को भी बनाया जा सके, तो \"YES\" लौटाएं। अन्यथा, \"NO\" लौटाएं। उदाहरण के लिएः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" यह माना जाता है कि इनपुट सूचियां गैर-खाली होंगी। \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"एक स्ट्रिंग को दिए गए जो एक स्थान से अलग किए गए छोटे अक्षरों का प्रतिनिधित्व करता है, सबसे अधिक पुनरावृत्ति वाले अक्षर का शब्दकोश लौटाएं और संबंधित गिनती शामिल करें। यदि कई अक्षरों में एक ही घटना है, तो उन सभी को वापस करें। उदाहरणः हिस्टोग्राम (('a b c') == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम (('a b b a') == {'a': 2, 'b': 2} हिस्टोग्राम (('a b c a b') == {'a': 2, 'b': 2} हिस्टोग्राम (('b b a') == {'b 4}': हिस्टोग्राम (('a') == {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} { } { } { } { } } { } { } } { } { } } { } { } } { } } { } } { } } { } } { } } } } { } } } { } } } } } { } } } } } } } } } } { } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"कार्य हमें दो स्ट्रिंग्स s और c दिए गए हैं, आपको s में सभी वर्णों को हटाना होगा जो c में किसी भी वर्ण के बराबर हैं फिर जांचें कि क्या परिणाम स्ट्रिंग पालिंड्रोम है। एक स्ट्रिंग को पालिंड्रोम कहा जाता है यदि यह आगे की तरह पीछे की ओर पढ़ता है। आपको परिणाम स्ट्रिंग और ट्रू/फॉल्स को चेक के लिए एक टपल लौटना चाहिए। उदाहरण के लिए s = \"abcde\", c = \"ae\", परिणाम होना चाहिए ('bcd',False) के लिए s = \"abcdef\", c = \"b\" परिणाम होना चाहिए ('acdef',False) के लिए s = \"abcdedcba\", c = \"ab\", परिणाम होना चाहिए ('cdedc',True) ।\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"स्ट्रिंग्स की एक सूची दी गई है, जहां प्रत्येक स्ट्रिंग में केवल अंक होते हैं, एक सूची लौटाएं. आउटपुट का प्रत्येक तत्व i \"इनपुट के स्ट्रिंग i में विषम तत्वों की संख्या\" होना चाहिए. जहां सभी i को इनपुट के i'th स्ट्रिंग में विषम अंकों की संख्या से प्रतिस्थापित किया जाना चाहिए. >>> odd_count['1234567']) [\"odd_element 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"odd_element 1n the str1ng 1 of the 1nput.\", \"odd element 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"पूर्णांक n की एक सरणी को देखते हुए, n के किसी भी गैर-खाली उप-सरणी का न्यूनतम योग ज्ञात करें। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"आपको कुओं की एक आयताकार ग्रिड दी गई है। प्रत्येक पंक्ति एक कुएं का प्रतिनिधित्व करती है, और प्रत्येक पंक्ति में 1 पानी की एक इकाई का प्रतिनिधित्व करती है। प्रत्येक कुएं में एक संबंधित बाल्टी होती है जिसका उपयोग उससे पानी निकालने के लिए किया जा सकता है, और सभी बाल्टी में एक ही क्षमता होती है। आपका कार्य कुओं को खाली करने के लिए बाल्टी का उपयोग करना है। आउटपुट की संख्या जो आपको बाल्टी को कम करने की आवश्यकता है। उदाहरण 1: इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 आउटपुटः 6 उदाहरण 2: इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 आउटपुटः 5 उदाहरण 3: इनपुटः [[:0,0,0], [0,0,0]] bucket_capacity: 5 आउटपुटः 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 3 * 2 * 2 * 2 * 3 * 4 * 5 * 6 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * * * * * 10 * 10 * * 10 * * * 10 * * * * 10 * 10 * * 10 * * 10 * 10 * 10 * * 10 * * 10 * 10 * 10 * 10 * * * 10 * 10 * * * * 10 * 10 * 10 * 10 * 10 * 10 * * * * 10 * 10 * * 10 * * * * 10 * 10 * * * * * * 10 * 10 *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"इस काता में, आपको एक गैर-ऋणात्मक पूर्णांक की एक सरणी को उनके द्विआधारी प्रतिनिधित्व में संख्या के अनुसार आरोही क्रम में क्रमबद्ध करना होगा। समान संख्या के लिए, दशमलव मान के आधार पर क्रमबद्ध करें। इसे इस तरह लागू किया जाना चाहिएः >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"एक स्ट्रिंग s और एक प्राकृतिक संख्या n को देखते हुए, आपको एक फ़ंक्शन लागू करने का काम सौंपा गया है जो स्ट्रिंग s से सभी शब्दों की एक सूची देता है जिसमें ठीक n व्यंजन होते हैं, ताकि ये शब्द स्ट्रिंग s में दिखाई दें। यदि स्ट्रिंग s खाली है तो फ़ंक्शन को खाली सूची लौटना चाहिए। नोटः आप मान सकते हैं कि इनपुट स्ट्रिंग में केवल अक्षर और रिक्त स्थान होते हैं। उदाहरणः select_words \"मैरी के पास एक छोटा मेमना था\", 4) ==> [\"छोटा\"] select_words \"मैरी के पास एक छोटा मेमना था\", 3) ==> [\"मैरी\", \"मेमना\"] select_words \"सादा सफेद स्थान\", 2) ==> [] select_words \"हैलो वर्ल्ड\", 4) ==> [\"विश्व\"] select_words \"अंकल सैम\", 3) ==> [\"अंकल\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"आपको एक शब्द दिया गया है. आपका कार्य यह है कि शब्द के दाईं ओर से दो व्यंजनों के बीच स्थित निकटतम स्वर को ढूंढें (केस संवेदनशील). शुरुआत और अंत में स्वरों की गिनती नहीं की जाती है. यदि आपको कोई स्वर नहीं मिला तो ऊपर की शर्त को पूरा करें। आप मान सकते हैं कि दी गई स्ट्रिंग में केवल अंग्रेजी अक्षर हैं। उदाहरण: get_closest_vowel ((\"yogurt\") ==> \"u\" get_closest_vowel ((\"F\") ==> \"U\" get_closest_vowel ((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''आपको दो स्ट्रिंग्स की एक सूची दी गई है, दोनों स्ट्रिंग्स में केवल खुले कोष्ठक '(' या बंद कोष्ठक ') ' होते हैं। आपका काम यह जांचना है कि क्या दो स्ट्रिंग्स को किसी क्रम में जोड़ना संभव है, कि परिणामी स्ट्रिंग अच्छी होगी। एक स्ट्रिंग S को तभी अच्छा माना जाता है जब और केवल तभी जब S में सभी कोष्ठक संतुलित हों। उदाहरण के लिएः स्ट्रिंग '((()) 'अच्छा है, जबकि स्ट्रिंग '()) 'नहीं है। यदि एक अच्छी स्ट्रिंग बनाने का कोई तरीका है, तो 'हाँ' लौटाएं, और अन्यथा 'नहीं' लौटाएं। उदाहरणः match_parens[('() ', ') ']) == 'हाँ' match_parens[(') ', ') ']) == 'नहीं' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"पूर्णांक और एक सकारात्मक पूर्णांक k की एक सरणी को देखते हुए, arr में अधिकतम k संख्याओं के साथ लंबाई k की एक क्रमबद्ध सूची लौटाएं। उदाहरण 1: इनपुटः arr = [-3, -4, 5], k = 3 आउटपुटः [-4, -3, 5] उदाहरण 2: इनपुटः arr = [4, -4, 4], k = 2 आउटपुटः [4, 4] उदाहरण 3: इनपुटः arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुटः [2] नोटः 1. सरणी की लंबाई [1, 1000] की सीमा में होगी। 2. सरणी में तत्व [-1000, 1000] की सीमा में होंगे। 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"पूर्णांक की एक गैर-खाली सूची को देखते हुए, उन सभी विषम तत्वों का योग लौटाएं जो सम स्थानों पर हैं। उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"पूर्णांक arr और पूर्णांक k की एक गैर-खाली सरणी को देखते हुए, arr के पहले k तत्वों से अधिकतम दो अंकों वाले तत्वों का योग लौटाएं। उदाहरणः इनपुटः arr = [111,21,3,4000,5,6,7,8,9], k = 4 आउटपुटः 24 # 21 + 3 का योग प्रतिबंधः 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"एक सकारात्मक पूर्णांक n को देखते हुए, एक क्रमबद्ध सूची लौटाएं जिसमें कोलाट्ज़ अनुक्रम में विषम संख्याएं हों। कोलाट्ज़ अनुमान गणित में एक अनुमान है जो निम्नानुसार परिभाषित अनुक्रम से संबंधित हैः किसी भी सकारात्मक पूर्णांक n के साथ शुरू करें। फिर प्रत्येक शब्द को पिछले शब्द से निम्नानुसार प्राप्त किया जाता हैः यदि पिछला शब्द सम है, तो अगला शब्द पिछले शब्द का आधा है। यदि पिछला शब्द विषम है, तो अगला शब्द पिछले शब्द का 3 गुना है प्लस 1. अनुमान यह है कि n का कोई भी मूल्य नहीं है, अनुक्रम हमेशा 1 तक पहुंच जाएगा। नोटः 1. कोलाट्ज़ (((1) [1] है। 2. लौटा सूची क्रम में क्रमबद्ध है। उदाहरण के लिएः get_odd_collatz ((5) रिटर्न [1, 5] # 5 के लिए कोलाट्ज़ अनुक्रम [5, 8, 16, 4, 2, 1], इसलिए विषम संख्याएं केवल 1 और 5 हैं।\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"आपको एक फ़ंक्शन लिखना होगा जो किसी दिए गए दिनांक स्ट्रिंग को मान्य करता है और यदि दिनांक मान्य है तो सही लौटाता है अन्यथा गलत. दिनांक मान्य है यदि निम्नलिखित सभी नियम संतुष्ट हैंः 1. दिनांक स्ट्रिंग खाली नहीं है. 2. महीनों के लिए दिनों की संख्या 1 से कम या 31 दिनों से अधिक नहीं है. और महीनों के लिए दिनों की संख्या 1 से कम या 30 दिनों से अधिक नहीं है. और, महीने के लिए दिनों की संख्या 1 से कम या 29 से अधिक नहीं है. 2. 3. महीने 1 से कम या 12 से अधिक नहीं होना चाहिए. 4. दिनांक प्रारूप में होना चाहिएः mm-dd-yyyy उदाहरण के लिएः valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-02040') => false_date (('06-04-2020') => true_date (('06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''शब्दों की एक स्ट्रिंग को देखते हुए, रिक्त स्थान पर विभाजित शब्दों की एक सूची लौटाएं, यदि पाठ में कोई रिक्त स्थान मौजूद नहीं है तो आपको अल्पविराम पर विभाजित करना चाहिए ',' यदि कोई अल्पविराम मौजूद नहीं है तो आपको वर्णमाला में विषम क्रम के साथ छोटे अक्षरों की संख्या लौटानी चाहिए, ऑर्ड (('ए') = 0, ऑर्ड (('बी') = 1, ... ऑर्ड (('जेड') = 25 उदाहरण split_words ((\"हैलो वर्ल्ड! \") â -> [\"हैलो\", \"वर्ल्ड! \") split_words ((\"हैलो, वर्ल्ड! \") â -> [\"हैलो\", \"वर्ल्ड! \") split_words ((\"abcdef\") \") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''संख्याओं की सूची दी गई है, तो यह लौटाएं कि क्या वे आरोही क्रम में क्रमबद्ध हैं या नहीं। यदि सूची में एक ही संख्या के 1 से अधिक डुप्लिकेट हैं, तो झूठा लौटाएं। कोई नकारात्मक संख्या नहीं और केवल पूर्णांक मानें। उदाहरण is_sorted है) ।'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"आपको दो अंतराल दिए गए हैं, जहां प्रत्येक अंतराल पूर्णांक की एक जोड़ी है। उदाहरण के लिए, अंतराल = (शुरू, अंत) = (1, 2) । दिए गए अंतराल बंद हैं जिसका अर्थ है कि अंतराल (शुरू, अंत) में प्रारंभ और अंत दोनों शामिल हैं। प्रत्येक दिए गए अंतराल के लिए, यह माना जाता है कि इसकी शुरुआत इसके अंत से कम या बराबर है। आपका कार्य यह निर्धारित करना है कि इन दो अंतरालों के प्रतिच्छेदन की लंबाई एक अभाज्य संख्या है या नहीं। उदाहरण के लिए, अंतराल (1, 3), (2, 4) का प्रतिच्छेदन (2, 3) है, जिसकी लंबाई 1 है, जो एक अभाज्य संख्या नहीं है। यदि प्रतिच्छेदन की लंबाई एक अभाज्य संख्या है, तो \"हाँ\" लौटाएं, अन्यथा, \"नहीं\" लौटाएं। यदि दो अंतराल प्रतिच्छेदन नहीं करते हैं, तो \"नहीं\" लौटाएं। [इनपुट/आउटपुट] नमूनेः प्रतिच्छेदन (((1, 2), (२, 3) ==> \"अंतरिक्ष-1, ((1), (<0, 4) ==\"अंतरिक्ष - ((1, 5 - (((3, \" ())))\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"आपको पूर्णांक का एक सरणी दिया जाता है और आपको पूर्णांक के परिमाणों का योग, सरणी में प्रत्येक संख्या के सभी संकेतों के उत्पाद से गुणा करके लौटना होता है, जिसका प्रतिनिधित्व 1, -1 या 0 द्वारा किया जाता है। नोटः खाली सरणी के लिए कोई नहीं लौटाएं। उदाहरणः >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N पंक्तियों और N स्तंभों (N >= 2) और एक सकारात्मक पूर्णांक k के साथ एक ग्रिड को देखते हुए, ग्रिड के प्रत्येक सेल में एक मान होता है। [1, N * N] समावेशी की सीमा में प्रत्येक पूर्णांक ग्रिड की कोशिकाओं पर ठीक एक बार दिखाई देता है। आपको ग्रिड में लंबाई k का न्यूनतम पथ खोजना होगा। आप किसी भी सेल से शुरू कर सकते हैं, और प्रत्येक चरण में आप किसी भी पड़ोसी कोशिकाओं में जा सकते हैं, दूसरे शब्दों में, आप उन कोशिकाओं में जा सकते हैं जो आपके साथ एक किनारे साझा करते हैं वर्तमान सेल। कृपया ध्यान दें कि k की लंबाई का एक पथ का मतलब है कि k कोशिकाओं (अनिवार्य रूप से अलग नहीं) का दौरा करना। आप ग्रिड से बाहर नहीं जा सकते। एक पथ A (लंबाई k) को पथ B (लंबाई k) से कम माना जाता है यदि A और B (चलो उन्हें lA_st और lA_stB) पर मानों की क्रमबद्ध सूची बनाने के बाद, lA_stB शब्दकोषीय रूप से lA_stB से कम है, दूसरे शब्दों में, एक पूर्णांक k के साथ किसी भी पड़ोसी कोशिका में जा सकते हैं। आप किसी भी सेल से शुरू कर सकते हैं, और प्रत्येक चरण में आप किसी भी पड़ोसी कोशिकाओं में जा सकते हैं, दूसरे शब्दों में, आप किसी भी सेल के किनारे को साझा कर सकते हैं। कृपया ध्यान दें कि k लंबाई k का पथ k का अर्थ है कि आप बिल्कुल k कोशिकाओं (अनिवार्य हैं) के साथ एक किनारे का दौरा करना है (अनिवार्य है) । आप ग्रिड से बाहर नहीं जा सकते हैं। कृपया ध्यान दें कि k (आप ग्रिड से बाहर नहीं जा सकते हैं) । आप ग्रिड से बाहर नहीं जा सकते हैं। आप ग्रिड से एक पथ A (लंबाई k (लंबाई k) और B (लंबाई k) के साथ एक पथ A (लंबाई k) के साथ एक पथ (के के साथ) के साथ एक पथ से कम है (के के साथ) के साथ एक पथ से कम है, यदि A और B (लंबाई के माध्यम से) के माध्यम से A और B (के के माध्यम से A और B (के) पर जाते हैं, तो एक पथ के माध्यम से) के माध्यम से, के माध्यम से, के माध्यम से,\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"फिबोनाची अनुक्रम को हर कोई जानता है, पिछले दो शताब्दियों में गणितज्ञों द्वारा इसका गहन अध्ययन किया गया था। हालांकि, जो लोग नहीं जानते हैं वह है त्रिबोनाची अनुक्रम। त्रिबोनाची अनुक्रम को पुनरावृत्ति द्वारा परिभाषित किया गया हैः tri(1) = 3 tri(n) = 1 + n / 2, यदि n सम है। tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n विषम है। उदाहरण के लिएः tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 आपको एक गैर-ऋणात्मक पूर्णांक संख्या n दी गई है, आपको त्रिबोनाची अनुक्रम की पहली n + 1 संख्याओं की एक सूची वापस करनी है। उदाहरणः tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"एक सकारात्मक पूर्णांक n को देखते हुए, विषम अंकों का उत्पाद लौटाएं। यदि सभी अंक सम हैं तो 0 लौटाएं। उदाहरण के लिए: अंक (१) == 1 अंक (४) == 0 अंक (२३५) == १५ \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''एक फ़ंक्शन बनाएं जो इनपुट के रूप में एक स्ट्रिंग लेता है जिसमें केवल वर्ग कोष्ठक होते हैं। फ़ंक्शन को तभी और तभी True लौटना चाहिए जब कोष्ठक का एक वैध अनुक्रम हो जहां अनुक्रम में कम से कम एक कोष्ठक घोंसला हुआ हो। is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"आपको संख्याओं की एक सूची दी गई है. आपको दी गई सूची में वर्ग संख्याओं का योग वापस करने की आवश्यकता है, पहले सूची में प्रत्येक तत्व को ऊपरी int पर गोल करें। उदाहरण: lst = [1,2,3] के लिए आउटपुट 14 होना चाहिए lst = [1,4,9] के लिए आउटपुट 98 होना चाहिए lst = [1,3,5,7] के लिए आउटपुट 84 होना चाहिए lst = [1.4,4.2,0] के लिए आउटपुट 29 होना चाहिए lst = [-2.4,1,1] के लिए आउटपुट 6 होना चाहिए \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''एक फ़ंक्शन बनाएँ जो True लौटाता है यदि किसी दिए गए स्ट्रिंग का अंतिम वर्ण वर्णमाला वर्ण है और शब्द का हिस्सा नहीं है, और अन्यथा False. नोटः \"शब्द\" वर्णों का एक समूह है जो रिक्त स्थान से अलग है. उदाहरण: check_if_last_char_is_a_letter\" \"सेब पाई\") â -> False check_if_last_char_is_a_letter\" \"सेब पाई ई\") â -> True check_if_last_char_is_a_letter\" \"सेब पाई ई\") â -> False check_if_last_char_is_a_letter\" \"सेब पाई ई\") â -> False check_if_last_char_is_a_letter\" \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"एक फ़ंक्शन बनाएँ जो किसी तत्व का सबसे बड़ा सूचकांक लौटाता है जो उससे पहले के तत्व के बराबर या उससे अधिक नहीं है। यदि ऐसा कोई तत्व मौजूद नहीं है तो -1 लौटाएं। दी गई सरणी में डुप्लिकेट मान नहीं होंगे। उदाहरण: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''एक फ़ंक्शन बनाएं जो एक टपल (ए, बी) लौटाता है, जहां 'ए' एक सूची में नकारात्मक पूर्णांक का सबसे बड़ा है, और 'बी' एक सूची में सकारात्मक पूर्णांक का सबसे छोटा है। यदि कोई नकारात्मक या सकारात्मक पूर्णांक नहीं है, तो उन्हें None के रूप में लौटाएं। उदाहरणः सबसे बड़ा_सबसे छोटा_पूर्णांक[2, 4, 1, 3, 5, 7]) == (कोई नहीं, 1) सबसे बड़ा_सबसे छोटा_पूर्णांक([]) == (कोई नहीं, कोई नहीं) सबसे बड़ा_सबसे छोटा_पूर्णांक[0]) == (कोई नहीं, कोई नहीं) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"एक फ़ंक्शन बनाएं जो पूर्णांक, फ्लोट्स, या वास्तविक संख्याओं का प्रतिनिधित्व करने वाली स्ट्रिंग्स लेता है, और अपने दिए गए चर प्रकार में बड़ा चर लौटाता है। यदि मान समान हैं तो कोई नहीं लौटाता है। नोटः यदि एक वास्तविक संख्या को स्ट्रिंग के रूप में दर्शाया जाता है, तो फ्लोटिंग पॉइंट हो सकता है . या , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> कोई नहीं \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"मूल्यांकन करें कि क्या दी गई संख्या n को ठीक 4 सकारात्मक सम संख्याओं के योग के रूप में लिखा जा सकता है उदाहरण is_equal_to_sum_even (४) == False is_equal_to_sum_even (६) == False is_equal_to_sum_even (८) == True \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राज़ीलियाई कारक को इस प्रकार परिभाषित किया गया हैः ब्राज़ीलियाई_कारक (n) = n! * (n-1)! * (n-2)! * ... * 1! जहाँ n > 0 उदाहरण के लिए: >>> विशेष_कारक (n) 288 फ़ंक्शन को इनपुट के रूप में एक पूर्णांक प्राप्त होगा और इस पूर्णांक का विशेष कारक लौटाया जाना चाहिए। \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_उदाहरण-3्ट को देखते हुए, इसमें सभी रिक्त स्थानों को अंडरस्कोर से बदलें, और यदि एक स्ट्रिंग में 2 से अधिक लगातार रिक्त स्थान हैं, तो सभी लगातार रिक्त स्थानों को - fix_spaces ((\"उदाहरण\") से बदलें == \"उदाहरण\" fix_spaces ((\"उदाहरण1\") == \"उदाहरण1\" fix_spaces ((\"उदाहरण2\") == \"_Example_2\" fix_spaces ((\"उदाहरण 3\") == \"_Example-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"एक फ़ंक्शन बनाएँ जो फ़ाइल के नाम का प्रतिनिधित्व करने वाली स्ट्रिंग लेता है, और यदि फ़ाइल का नाम मान्य है, तो 'हाँ' देता है, और अन्यथा 'नहीं' देता है. फ़ाइल का नाम मान्य माना जाता है यदि और केवल यदि सभी निम्नलिखित शर्तें पूरी की जाती हैंः - फ़ाइल के नाम में तीन से अधिक अंक ('0'-'9') नहीं होने चाहिए. - फ़ाइल के नाम में ठीक एक डॉट '.' होना चाहिए. - डॉट से पहले सबस्ट्रिंग खाली नहीं होनी चाहिए, और यह डॉट से पहले लैटिन अल्फाबेट ('a'-'z' और 'A'-Z') से शुरू होना चाहिए. - डॉट के बाद सबस्ट्रिंग इनमें से एक होनी चाहिएः ['txt', 'exe', 'lld'] उदाहरणः file_name_check\"(example.txt\") # => 'हाँ' file_name_check\"{example.txt1\") => 'नहीं' # (नाम लैटिन अल्फाबेट से शुरू होना चाहिए)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" यह फंक्शन पूर्णांक की सूची लेगा. सूची में सभी प्रविष्टियों के लिए, फंक्शन पूर्णांक प्रविष्टि को वर्ग करेगा यदि इसकी सूचकांक 3 का गुणक है और पूर्णांक प्रविष्टि को घन करेगा यदि इसकी सूचकांक 4 का गुणक है और 3 का गुणक नहीं है. फंक्शन सूची में प्रविष्टियों को नहीं बदलेगा जिनके सूचकांक 3 या 4 का गुणक नहीं हैं. फ़ंक्शन तब सभी प्रविष्टियों का योग लौटाएगा. उदाहरण: lst = [1,2,3] के लिए आउटपुट 6 होना चाहिए lst = [] के लिए आउटपुट 0 होना चाहिए lst = [-1,-5,2,-1,-5] के लिए आउटपुट -126 होना चाहिए \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"आपको एक वाक्य का प्रतिनिधित्व करने वाली एक स्ट्रिंग दी गई है, वाक्य में कुछ शब्द हैं जो एक स्पेस से अलग हैं, और आपको एक स्ट्रिंग लौटना है जिसमें मूल वाक्य के शब्द हैं, जिनकी लंबाई अभाज्य संख्याएं हैं, नई स्ट्रिंग में शब्दों का क्रम मूल के समान होना चाहिए। उदाहरण 1: इनपुटः वाक्य = \"यह एक परीक्षण है\" आउटपुटः \"is\" उदाहरण 2: इनपुटः वाक्य = \"स्विमिंग के लिए जाने दें\" आउटपुटः \"go for\" प्रतिबंधः * 1 <= len(sentence) <= 100 * वाक्य में केवल अक्षर हैं \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"आपका कार्य एक फ़ंक्शन को लागू करना है जो एक्सप्रेशन x * n को सरल करेगा। फ़ंक्शन True देता है यदि x * n एक पूर्णांक और False अन्यथा मूल्यांकन करता है। दोनों x और n, एक अंश का स्ट्रिंग प्रतिनिधित्व है, और निम्न प्रारूप है, <numerator>/<denominator> जहां दोनों संख्या और भाजक सकारात्मक पूर्णांक हैं। आप मान सकते हैं कि x, और n मान्य अंश हैं, और भाजक के रूप में शून्य नहीं है। सरल \" 1 / 5\", \"5 / 1 \") = True सरल \" 1/ 6\", \"2 / 1 \") = False सरल \" 7 / 10\", \"10 / 2 \") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"एक फ़ंक्शन लिखें जो पूर्णांक की दी गई सूची को उनके अंकों के योग के अनुसार आरोही क्रम में क्रमबद्ध करता है। ध्यान दें: यदि उनके अंकों के समान योग वाले कई आइटम हैं, तो उन्हें मूल सूची में उनके सूचकांक के आधार पर क्रमबद्ध करें। उदाहरण के लिएः >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"एक फ़ंक्शन लिखें जो संख्याओं की एक सरणी को इनपुट के रूप में लेता है और सरणी में उन तत्वों की संख्या देता है जो 10 से अधिक हैं और संख्या के पहले और अंतिम दोनों अंक विषम हैं (1, 3, 5, 7, 9) । उदाहरण के लिए: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"आपको एक सकारात्मक पूर्णांक n दिया गया है। आपको लंबाई n की पूर्णांक सरणी a बनाना है। प्रत्येक i (1 ‰¤ i ‰¤ n) के लिए, a[i] = i * i - i + 1 का मान। a के ट्रिपल (a[i], a[j], a[k]) की संख्या लौटाएं जहां i < j < k, और a[i] + a[j] + a[k] 3 का गुणक है। उदाहरण: इनपुटः n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्र मान्य ट्रिपल (1, 7, 13) है।\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''हमारे सौर मंडल में आठ ग्रह हैंः सूर्य के सबसे निकट बुध है, अगला शुक्र है, फिर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेप्च्यून। एक फ़ंक्शन लिखें जो दो ग्रह नामों को ग्रह 1 और ग्रह 2 के स्ट्रिंग्स के रूप में लेता है। फ़ंक्शन को एक टपल लौटना चाहिए जिसमें सभी ग्रह शामिल हैं जिनकी कक्षाएं ग्रह 1 की कक्षा और ग्रह 2 की कक्षा के बीच स्थित हैं, सूर्य के निकटता से क्रमबद्ध हैं। फ़ंक्शन को एक खाली टपल लौटना चाहिए यदि ग्रह 1 या ग्रह 2 सही ग्रह नाम नहीं हैं। उदाहरण bf \"(जुपिटर\", \"नेप्च्यून\") ==> (\"शनि\", \"यूरेनस\") bf \"(पृथ्वी\", \"मेर्क्वेरी\") ==> (\"शुक्र\") bf \"मेर्क्वेरी\", \"यूरेनस\") ==> (\"शुक्र\", \"पृथ्वी\", \"मंगल\", \"जुपिटर\", \"शनि\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"एक फ़ंक्शन लिखें जो स्ट्रिंग्स की सूची को पैरामीटर के रूप में स्वीकार करता है, उन स्ट्रिंग्स को हटा देता है जिनकी विषम लंबाई होती है, और क्रमबद्ध क्रम के साथ परिणामी सूची लौटाता है, सूची हमेशा स्ट्रिंग्स की सूची होती है और कभी संख्याओं की सरणी नहीं होती है, और इसमें डुप्लिकेट हो सकते हैं. सूची का क्रम प्रत्येक शब्द की लंबाई के अनुसार आरोही होना चाहिए, और आपको उस नियम के अनुसार सूची को क्रमबद्ध लौटा देना चाहिए. यदि दो शब्द समान लंबाई के हैं, तो सूची को वर्णमाला क्रम में क्रमबद्ध करें. फ़ंक्शन को क्रमबद्ध क्रम में स्ट्रिंग्स की सूची लौटा देनी चाहिए. आप मान सकते हैं कि सभी शब्दों की लंबाई समान होगी. उदाहरण के लिएः assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => [\"ab\", \"cd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"एक सरल प्रोग्राम जो x का मान लौटाता है यदि n एक अभाज्य संख्या है और y का मान लौटाता है अन्यथा उदाहरण: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''संख्याओं की सूची दी गई है, सूची में उन संख्याओं के वर्गों का योग लौटाएं जो विषम हैं. नकारात्मक या पूर्णांक नहीं संख्याओं को अनदेखा करें. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 यदि इनपुट सूची खाली है, तो 0 लौटाएं '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"मुझे लगता है कि हम सभी को वह भावना याद है जब किसी लंबे समय से प्रतीक्षित घटना का परिणाम अंततः ज्ञात होता है। उस क्षण में आपके पास जो भावनाएं और विचार हैं, वे निश्चित रूप से नोट करने और तुलना करने के लायक हैं। आपका कार्य यह निर्धारित करना है कि क्या किसी व्यक्ति ने कई मैचों के परिणामों का सही अनुमान लगाया है। आपको समान लंबाई के स्कोर और अनुमानों की दो सरणियां दी गई हैं, जहां प्रत्येक सूचकांक एक मैच दिखाता है। समान लंबाई की एक सरणी लौटाएं जो प्रत्येक अनुमान को कितनी दूर दर्शाता है। यदि उन्होंने सही अनुमान लगाया है, तो मान 0 है, और यदि नहीं, तो मान अनुमान और स्कोर के बीच पूर्ण अंतर है। उदाहरण: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] तुलना करें (([0,5,0,4,0,1,0,2,4]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"आपको एक वर्ग (एक स्ट्रिंग) का नाम और एक्सटेंशन की एक सूची दी जाएगी. एक्सटेंशन का उपयोग वर्ग में अतिरिक्त वर्गों को लोड करने के लिए किया जाना है. एक्सटेंशन की ताकत निम्नानुसार हैः CAP को एक्सटेंशन के नाम में बड़े अक्षरों की संख्या मानें, और SM को एक्सटेंशन के नाम में छोटे अक्षरों की संख्या मानें, ताकत को अंश CAP - SM द्वारा दिया जाता है. आपको सबसे मजबूत एक्सटेंशन ढूंढना चाहिए और इस प्रारूप में एक स्ट्रिंग लौटना चाहिए: ClassName.StrongestExtensionName. यदि एक ही ताकत के साथ दो या अधिक एक्सटेंशन हैं, तो आपको सूची में पहले आने वाले को चुनना चाहिए. उदाहरण के लिए, यदि आपको \"स्लाइस\" को वर्ग और एक्सटेंशन की सूची के रूप में दिया जाता हैः ['SEviviSliNGCes', 'Cheese', 'StuFfed'] तो आपको 'Slices.SliNGCes' लौटना चाहिए क्योंकि 'SEviSliNGCes' 'SliNGCes' (mySliNGCes') सबसे मजबूत एक्सटेंशन हैः 'AA' = 'StrongestExtension_class'), उदाहरण के लिए 'AA' = 'Strongest_class'\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"आपको 2 शब्द दिए गए हैं. आपको True लौटना होगा यदि दूसरा शब्द या इसके किसी भी रोटेशन पहले शब्द में एक सबस्ट्रिंग है cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"(abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"एक पूर्णांक दिया गया है. एक टपल लौटाएं जिसमें क्रमशः सम और विषम अंकों की संख्या है. उदाहरण: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"एक सकारात्मक पूर्णांक दिया गया है, एक स्ट्रिंग के रूप में इसके रोमन अंक समकक्ष प्राप्त करें, और इसे लघु अक्षरों में लौटाएं। प्रतिबंधः 1 <= num <= 1000 उदाहरणः >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''त्रिकोण के तीन पक्षों की लंबाई को देखते हुए. यदि तीन पक्ष एक समकोण त्रिभुज बनाते हैं तो सही लौटाएं, अन्यथा गलत. एक समकोण त्रिभुज एक त्रिकोण है जिसमें एक कोण सही कोण या 90 डिग्री है. उदाहरण: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"एक फ़ंक्शन लिखें जो स्ट्रिंग्स की सूची को स्वीकार करता है. सूची में अलग-अलग शब्द होते हैं. अद्वितीय वर्णों की अधिकतम संख्या वाले शब्द को लौटाएं. यदि कई स्ट्रिंग्स में अद्वितीय वर्णों की अधिकतम संख्या होती है, तो वह लौटाएं जो शब्दकोश के क्रम में पहले आता है. find_max (([\"नाम\", \"की\", \"स्ट्रिंग\"]) == \"स्ट्रिंग\" find_max (([\"नाम\", \"enam\", \"गेम\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"आप एक भूखे खरगोश हैं, और आप पहले से ही गाजर की एक निश्चित संख्या खा लिया है, लेकिन अब आप अधिक गाजर खाने की जरूरत है दिन के भोजन को पूरा करने के लिए. आप एक सरणी वापस करना चाहिए [आपके भोजन के बाद खाया गाजर की कुल संख्या, गाजर की संख्या अपने भोजन के बाद छोड़ दिया ] अगर वहाँ पर्याप्त शेष गाजर नहीं हैं, आप सभी शेष गाजर खा लेंगे, लेकिन अभी भी भूखा हो जाएगा. उदाहरणः * खाओ ((5, 6, 10) -> [11, 4] * खाओ ((4, 8, 9) -> [12, 1] * खाओ ((1, 10, 10) -> [11, 0] * खाओ ((2, 11, 5) -> [7, 0] चरः @number: गाजर की संख्या पूर्णांक जो आप खा लिया है. @need: गाजर की संख्या पूर्णांक जो आपको खाने की जरूरत है. @remaining:: शेष गाजर की संख्या पूर्णांक जो स्टॉक में मौजूद है Constrain: * 0= <= 0 * 1000 <= 1000 * 0 = <= 1000 शेष है\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"दो सूची ऑपरेटर और ऑपरेन्ड. पहली सूची में मूल बीजगणित संचालन हैं, और दूसरी सूची पूर्णांक की एक सूची है. बीजगणित अभिव्यक्ति बनाने के लिए दी गई दो सूचियों का उपयोग करें और इस अभिव्यक्ति का मूल्यांकन वापस करें. मूल बीजगणित संचालनः जोड़ (+) घटाव (-)) गुणा (*) तल विभाजन (//) घातांक (**) उदाहरण: ऑपरेटर['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोटः ऑपरेंडर सूची की लंबाई ऑपरेंडर सूची की लंबाई के बराबर है शून्य से एक. ऑपरेंडर गैर-ऋणात्मक पूर्णांक की एक सूची है. ऑपरेटर सूची में कम से कम एक ऑपरेडर है, और ऑपरेंडर सूची में कम से कम दो ऑपरेन्ड हैं. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"आपको एक स्ट्रिंग s दी गई है. यदि s[i] एक अक्षर है, तो इसके केस को निचले से ऊपरी या विसेवर्स में उलट दें, अन्यथा इसे वैसे ही रखें. यदि स्ट्रिंग में कोई अक्षर नहीं है, तो स्ट्रिंग को उलट दें. फ़ंक्शन को परिणामी स्ट्रिंग लौटना चाहिए. उदाहरण हल करें ((\"1234\") = \"4321\" हल करें ((\"ab\") = \"AB\" हल करें ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"एक स्ट्रिंग 'text' दी गई है, तो उसकी md5 हैश समकक्ष स्ट्रिंग लौटाएँ. यदि 'text' एक खाली स्ट्रिंग है, तो None लौटाएँ. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "hin_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"दो सकारात्मक पूर्णांक a और b दिए गए हैं, a और b के बीच के सम अंक को आरोही क्रम में लौटाएं। उदाहरण के लिए: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]