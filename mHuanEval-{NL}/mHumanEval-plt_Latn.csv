task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,plt_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Jereo raha ao anatin'ny lisitry ny isa nomena, misy isa roa akaiky kokoa noho ny isa nomena. Ohatra: >>> manana_singa_manakaiky indrindra (([1.0, 2.0, 3.0], 0.5) Diso >>> manana_singa_manakaiky indrindra (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Marina """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,plt_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ny fampidirana an'io fiasa io dia tady misy vondrona marobe misy fonosana voatokana. Ny tanjonao dia ny manasaraka ireo vondrona ireo ho lasa kofehy misaraka ary mamerina ny lisitr'ireo. Mifanaraka ny vondrona misaraka (ny brace misokatra tsirairay dia mihidy tsara) ary tsy mifangaro ao anaty tsirairay. Ohatra: >>> separate_paren_groups'(( ) (() (()))))) ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,plt_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Raha nomena isa isa mihetsiketsika tsara, dia azo zaraina ho ampahany iray manontolo (isa lehibe indrindra kely kokoa noho ny isa nomena) sy ny decimals (ny ampahany sisa tavela dia kely kokoa noho ny 1). Avereno ny ampahany desimaly amin'ny isa. Ohatra: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,plt_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Nomena lisitr'ireo asa fametrahana sy fisintonana amin'ny kaonty banky izay manomboka amin'ny fifandanjana zero ianao. Ny asanao dia ny mamantatra raha toa ka latsaka ambanin'ny zero ny fifandanjan'ny kaonty, ary amin'io fotoana io dia tokony hamerina ny True ny fiasa. Raha tsy izany dia tokony hamerina ny False izy. Ohatra: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,plt_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Ho an'ny lisitry ny isa nomena, kajy ny Mean Absolute Deviation manodidina ny salan'isan'ny dataset. Ny Mean Absolute Deviation dia ny salan'isa tsy misy fahasamihafana eo amin'ny singa tsirairay sy ny teboka afovoany (midika amin'ity tranga ity): MAD = average. x - x_mean. Ohatra: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,plt_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Ampidiro ny isa 'delimeter' eo anelanelan'ny singa roa misesy amin'ny lisitry ny fidirana `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,plt_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ny fampidirana ho an'ity fiasa ity dia tady iray maneho vondrona marobe ho an'ny fonosana voatahiry misaraka amin'ny habaka. Ho an'ny vondrona tsirairay, mamoaka ny ambaratonga lalina indrindra amin'ny fonosana voatahiry. Ohatra: (() (()) manana ambaratonga roa farafahakeliny raha toa ka ((())) manana telo. >>> parse_nested_parens (('((()) ((())) () ((()) ((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,plt_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Sivana ny lisitry ny tadin'ny fidirana ho an'ireo izay misy ny substring nomena fotsiny >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,plt_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Ho an'ny lisitry ny isa feno, miverena amin'ny tuple misy ny sombiny sy ny vokatra rehetra ao anaty lisitra. Ny sombiny banga dia tokony ho mitovy amin'ny 0 ary ny vokatra banga dia tokony ho mitovy amin'ny 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,plt_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Avy amin'ny lisitry ny isa feno, mamorona lisitry ny singa ambony indrindra hita hatramin'ny fotoana nomena ao amin'ny filaharana. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,plt_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Mitadiava ny palindrome fohy indrindra izay manomboka amin'ny tady nomena. Tsotra ny hevitra momba ny algorithm: - Mitadiava ny postfix lava indrindra amin'ny tady nomena izay palindrome. - Ampidiro amin'ny faran'ny tadin'ny tadin'ny prefix izay tonga alohan'ny suffix palindromic. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Andramo raha toa ka palindrome ny tady nomena """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,plt_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Ny fidirana dia singa roa a sy b izay ahitana 1 sy 0 ihany. Ataovy ny XOR binary amin'ireo fidirana ireo ary avereno ny valiny ho toy ny tady ihany koa. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,plt_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Avy amin'ny lisitry ny tady, miverena ny lava indrindra. Miverena ny voalohany raha misy tady maro mitovy halava. Tsy misy raha toa ka foana ny lisitry ny fidirana. >>> lava indrindra (([]) >>> lava indrindra ((['a', 'b', 'c']) 'a' >>> lava indrindra ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,plt_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Miverina ny lehibe indrindra iombonana divisor ny roa integers a sy b >>> lehibe indrindra_common_divisor ((3, 5) 1 >>> lehibe indrindra_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,plt_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Miverina lisitry ny prefixes rehetra avy fohy indrindra ho lava indrindra ny fampidirana tady >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,plt_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Miverina ny tady misy isa voafetra amin'ny habaka manomboka amin'ny 0 ka hatramin'ny n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,plt_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Raha nomena tady, fantaro hoe firy ny tarehin-tsoratra miavaka (tsy ijerena ny case) no misy ao >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,plt_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Fidirana ho an'ity asa ity dia kofehy maneho mozika naoty ao amin'ny ASCII endrika manokana. Ny asa dia ny parse kofehy lisitry ny integers mifanaraka amin'ny beats maro no manao: 'o' naoty, farany beats efatra 'o' no no no - antsasaky ny naoty, farany beats roa 'o' no - quater naoty, farany iray beats >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,plt_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Fantaro hoe impiry ny substring nomena no hita ao amin'ny tadiny tany am-boalohany. Manisa ireo tranga mifanindry. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,plt_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Ny fidirana dia singa voafetra amin'ny habaka misy isa manomboka amin'ny 'zero' ka hatramin'ny 'sivy'. Safidy mety dia 'zero', 'iray', 'roa', 'telo', 'efatra', 'dimy', 'enina', 'fito', 'valo' ary 'sivy'. Avereno ny tady misy isa voalahatra avy amin'ny kely indrindra ka hatramin'ny lehibe indrindra >>> sort_numbers (('telo iray dimy') 'iray telo dimy' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,plt_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Avy amin'ny lisitry ny isa (izay roa farafahakeliny) dia mifidiana ary avereno ny roa izay akaiky indrindra amin'ny tsirairay ary avereno izy ireo amin'ny filaharana (isa kely kokoa, isa lehibe kokoa). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,plt_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Raha nomena lisitry ny isa (amin'ny singa roa farafahakeliny), ampiharo ny fanovana tsipika amin'io lisitra io, ka ny isa kely indrindra dia ho lasa 0 ary ny lehibe indrindra dia ho lasa 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,plt_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Sivano ny lisitry ny sanda python nomena ho an'ny isa manontolo ihany >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,plt_Latn,python,"

def strlen(string: str) -> int:
    """"""Miverina halavan'ny nomena tady >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,plt_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Ho an'ny isa nomena n, tadiavo ny isa lehibe indrindra izay mizara n mitovy, kely kokoa noho ny n >>> lehibe indrindra_mpisara (largest_divisor) 15 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,plt_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Miverena lisitry ny laharam-pahamehana amin'ny laharam-pahamehana amin'ny laharam-pahamehana amin'ny laharam-pahamehana. Ny isa tsirairay dia tokony ho voatanisa amin'ny isa mitovy amin'ny isan'ny fotoana miseho amin'ny factorization. Ny isa fidirana dia tokony hitovy amin'ny vokatra rehetra amin'ny laharam-pahamehana rehetra >>> factorization (factorization) [2, 2, 2] >>> factorization (factorization) [25], [5, 5], >>> factorization (factorization) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,plt_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Avy amin'ny lisitry ny isa feno, esory ny singa rehetra izay miseho mihoatra ny indray mandeha. Ataovy mitovy amin'ny teny iditra ny filaharan'ny singa sisa. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,plt_Latn,python,"

def flip_case(string: str) -> str:
    """"""Ho an'ny tadiny iray, afindrao ho litera lehibe ny litera madinika ary ho litera kely ny litera lehibe. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,plt_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Lisitry ny tady mifamatotra ho lasa tady tokana >>> mifamatotra([]) '' >>> mifamatotra(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,plt_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Sivana ny lisitry ny tadin-dahatsoratra izay manomboka amin'ny prefix nomena. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,plt_Latn,python,"

def get_positive(l: list):
    """"""Miverena amin'ny isa tsara ao amin'ny lisitra ihany. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,plt_Latn,python,"

def is_prime(n):
    """"""Miverina marina raha misy isa nomena dia voalohany, ary diso raha tsy izany. >>> dia_voalohany (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany) (voalohany)""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,plt_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs dia coefficients amin'ny polynôme. find_zero mahita x toy izany fa poly(x) = 0. find_zero miverina ihany no teboka zero, na dia misy maro aza. Ankoatra izany, find_zero ihany no maka lisitra xs manana na dia isa ny coefficients sy ny lehibe indrindra tsy zero coefficient araka ny miantoka ny vahaolana. >>> boribory (((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> boribory (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Manombana polynômialy miaraka amin'ny coefficients xs amin'ny teboka x. miverina xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,plt_Latn,python,"

def sort_third(l: list):
    """"""Ity asa ity dia maka lisitra l ary mamerina lisitra l' toy izany fa ny l' dia mitovy amin'ny l amin'ny indices izay tsy azo zaraina amin'ny telo, raha ny sanda ao amin'ny indices izay azo zaraina amin'ny telo dia mitovy amin'ny sanda amin'ny indices mifanaraka amin'ny l, fa voalamina. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,plt_Latn,python,"

def unique(l: list):
    """"""Miverina singa tokana voalahatra ao anaty lisitra >>> tokana (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,plt_Latn,python,"

def max_element(l: list):
    """"""Miverina ny singa lehibe indrindra ao amin'ny lisitra. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,plt_Latn,python,"

def fizz_buzz(n: int):
    """"""Avereno ny isan'ny fotoana miseho ny tarehimarika 7 amin'ny isa feno latsaky ny n izay azo zaraina amin'ny 11 na 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,plt_Latn,python,"

def sort_even(l: list):
    """"""Ity fiasa ity dia mandray lisitra l ary mamerina lisitra l 'toy izany fa ny l' dia mitovy amin'ny l amin'ny indices hafahafa, raha ny sanda ao amin'ny indices aza dia mitovy amin'ny sanda amin'ny indices aza an'ny l, fa voalamina. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,plt_Latn,python,"

def encode_cyclic(s: str):
    """"""mandray ho toy ny fampidirana kofehy voahodidin'ny encode_cyclic function. Miverina ny kofehy voahodina. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""miverina ny kofehy voahodidin'ny vondrona mihodinkodina misy tarehin-tsoratra telo. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,plt_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib mamerina ny isa n-faha izay isa Fibonacci ary prime koa. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,plt_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""Mitaky lisitr'ireo isa manontolo ho toy ny fampidirana ny triples_sum_to_zero. Mamerina ny Marina raha misy singa telo miavaka ao amin'ny lisitra izay mitambatra ho zero, ary ny Diso raha tsy izany. >>> triples_sum_to_zero([1, 3, 5, 0]) Diso >>> triples_sum_to_zero[(1, 3, -2, 1]) Marina >>> triples_sum_to_zero([1, 2, 3, 7]) Diso >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) Marina >>> triples_sum_to_zero[1]) Diso """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,plt_Latn,python,"

def car_race_collision(n: int):
    """"""Alao sary an-tsaina ny làlana iray izay tsipika iray lava tsy manam-petra. fiara n no mandeha miankavia miankavanana; miaraka amin'izay, fiara n hafa no mandeha miankavanana miankavia. Miaraka lavitra ny fiara roa. Mihetsika amin'ny hafainganam-pandeha mitovy avokoa ny fiara rehetra. Voalaza fa fiara roa no mifandona rehefa misy fiara iray mihetsika miankavia miankavanana mamely fiara iray mihetsika miankavanana miankavia. Na izany aza, ny fiara dia matanjaka sy matanjaka tsy manam-petra; vokatr'izany, manohy ny diany izy ireo toy ny hoe tsy nifandona. Ity fiasa ity dia mamoaka ny isan'ny fifandonana toy izany.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,plt_Latn,python,"

def incr_list(l: list):
    """"""Miverina lisitra miaraka amin'ny singa mitombo 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,plt_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero dia maka lisitry ny isa feno ho toy ny fidirana. Mamerina ny Marina raha misy singa roa miavaka ao amin'ny lisitra izay miampy ny zero, ary ny Diso raha tsy izany. >>> pairs_sum_to_zero([1, 3, 5, 0]) Diso >>> pairs_sum_to_zero[(1, 3, -2, 1]) Diso >>> pairs_sum_to_zero([1, 2, 3, 7]) Diso >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) Marina >>> pairs_sum_to_zero[1]) Diso """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,plt_Latn,python,"

def change_base(x: int, base: int):
    """"""Manova ny fototra isa ny isa fidirana x ho fototra. miverina amin'ny fanehoana ny tady aorian'ny fiovam-po. Ny isa fototra dia latsaky ny 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,plt_Latn,python,"

def triangle_area(a, h):
    """"""Raha omena ny halavan'ny sisiny sy ny faritra avo hiverenana amin'ny telozoro. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,plt_Latn,python,"

def fib4(n: int):
    """"""Ny filaharan'ny isa Fib4 dia filaharana mitovy amin'ny filaharan'i Fibbonacci izay voafaritra toy izao manaraka izao: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Manorata asa mba hanisana ny singa faha-n amin'ny filaharan'ny isa fib4. Aza mampiasa fiverimberenana. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,plt_Latn,python,"

def median(l: list):
    """"""Miverena median ny singa ao amin'ny lisitra l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,plt_Latn,python,"

def is_palindrome(text: str):
    """"""Manamarina raha toa ka palindrome ny tadin-teny nomena >>> is_palindrome (('') Marina >>> is_palindrome (('aba') Marina >>> is_palindrome (('aaaaa') Marina >>> is_palindrome (('zbcd') Diso """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,plt_Latn,python,"

def modp(n: int, p: int):
    """"""Miverena 2 ^ n modulo p (mahafantatra ny isa). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,plt_Latn,python,"

def encode_shift(s: str):
    """"""mandray ho toy ny fidiram-bola ny kofehy voahodidin'ny encode_shift asa. Miverina decoded tady. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""miverina ny kofehy voahodidin'ny fanovana ny litera tsirairay amin'ny 5 ao amin'ny abidia. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,plt_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels dia fiasa izay maka tady ary mamerina tady tsy misy vowels. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') ' ' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,plt_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Miverina marina raha toa ka ambanin'ny fetra t ny isa rehetra ao amin'ny lisitra l. >>> below_threshold (([1, 2, 4, 10], 100) Marina >>> below_threshold (([1, 20, 4, 10], 5) Diso """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,plt_Latn,python,"

def add(x: int, y: int):
    """"""Ampio isa roa x sy y >>> ampio ((2, 3) 5 >>> ampio ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,plt_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Hamarino raha mitovy ny tarehin-tsoratra amin'ny teny roa. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Marina >>> same_chars (('abcd', 'dddddddabc') Marina >>> same_chars (('dddddddabc', 'abcd') Marina >>> same_chars (('eabcd', 'dddddddddabc') Diso >>> same_chars ((('abcd', 'dddddddabddce') Diso >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Diso """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,plt_Latn,python,"

def fib(n: int):
    """"""Avereno ny isa n-n'ny Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,plt_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets dia andian-dahatsoratra misy ""<"" sy "">"". miverina Marina raha misy bracket fanokafana mifanandrify amin'ny bracket famaranana. >>> correct_bracketing(""<"") Diso >>> correct_bracketing(""<>"") Marina >>> correct_bracketing(""<><>>"") Marina >>> correct_bracketing(""><<>"") Diso """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,plt_Latn,python,"

def monotonic(l: list):
    """"""Miverina Marina raha toa ka mitombo na mihena ny singa ao amin'ny lisitra. >>> monotonic (([1, 2, 4, 20]) Marina >>> monotonic (([1, 20, 4, 10]) Diso >>> monotonic (([4, 1, 0, -10]) Marina """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,plt_Latn,python,"

def common(l1: list, l2: list):
    """"""Miverina ny singa iraisana tokana voalamina ho an'ny lisitra roa. >>> iraisana (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> iraisana (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,plt_Latn,python,"

def largest_prime_factor(n: int):
    """"""Avereno ny mpanisa voalohany lehibe indrindra amin'ny n. Mihevitra fa n > 1 ary tsy prime. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,plt_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n dia fiasa izay manisa isa manomboka amin'ny 1 ka hatramin'ny n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,plt_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets dia andian-dahatsoratra misy ""("" sy "")"". return True raha misy bracket fanokafana mifanandrify amin'ny bracket famaranana. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,plt_Latn,python,"

def derivative(xs: list):
    """"""xs dia maneho ny coefficients amin'ny polynôme. xs[0] + xs[1] * x + xs[2] * x^2 + .... Avereno ny derivative amin'ity polynôme ity amin'ny endrika mitovy. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,plt_Latn,python,"

def fibfib(n: int):
    """"""Ny filaharan'ny isa FibFib dia filaharana mitovy amin'ny filaharan'i Fibbonacci izay voafaritra toy izao manaraka izao: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Manorata asa mba hanisana ny singa n-n'ny filaharan'ny isa fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,plt_Latn,python,"
FIX = """"""Soraty ny fiasan'ny vowels_count izay maka ny tadin-teny maneho ny teny ho toy ny fampidirana ary mamerina ny isan'ny vowels ao amin'ny tadiny. Ny vowels amin'ity tranga ity dia 'a', 'e', 'i', 'o', 'u'. Eto, 'y' dia vowel ihany koa, fa rehefa eo amin'ny faran'ny teny nomena. Ohatra: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Ampio tranga fitsapana bebe kokoa. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,plt_Latn,python,"
def circular_shift(x, shift):
    """"""Mivezivezy manodidina ny isa iray manontolo x, mivezivezy miankavanana ny isa ary avereno ny valiny ho toy ny tadiny. Raha mivezivezy > isa isa, miverena miverina ny isa. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,plt_Latn,python,"
def digitSum(s):
    """"""Asa Manorata fiasa izay mandray ny tadin-dahatsoratra ho toy ny fidirana ary mamerina ny fitambaran'ny marika ambony ihany ' ASCII kaody. Ohatra: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,plt_Latn,python,"
def fruit_distribution(s,n):
    """"""Ao amin'ity asa ity, ianao dia homena ny tady izay maneho ny isan'ny paoma sy ny voasary izay zaraina ao anaty harona ny voankazo ity harona misy paoma, voasary, ary ny voankazo mango. Nomena ny tady izay maneho ny isan'ny voasary sy ny paoma sy ny integer izay maneho ny isan'ny voankazo ao amin'ny harona miverina ny isan'ny voankazo mango ao amin'ny harona. ohatra: fruit_distribution""5(mavo sy 6 voasary"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 paoma sy 1 voasary"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 paoma sy 3 voasary"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 paoma sy 1 voasary"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,plt_Latn,python,"
def pluck(arr):
    """"""Raha misy laharana iray maneho sampana iray amin'ny hazo izay manana node integer tsy ratsy ny asanao dia ny manaisotra ny iray amin'ireo node ary mamerina azy. Ny node noforonina dia tokony ho ny node miaraka amin'ny sanda kely indrindra. Raha misy node maromaro miaraka amin'ny sanda kely indrindra dia mamerina ny node izay manana index kely indrindra. Ny node noforonina dia tokony haverina ao anaty lisitra, [small_value, ny index-ny ], Raha tsy misy sanda na ny array nomena dia foana, miverina []. Ohatra 1: Input: [4,2,3] Output: [2, 1] Fanazavana: 2 no manana sanda kely indrindra, ary 2 no manana index kely indrindra. Ohatra 2: Input: [1,2,3] Output: [2, 1] Fanazavana: 2 no manana sanda kely indrindra, ary 2 no manana index kely indrindra. Ohatra 3: Input: [] Output: [4:] Input: [5, 3, 4, 2] Output: [0, 0] Output: 1 node izay manana sanda kely indrindra, saingy misy isa zero. Ohatra: ny node voalohany dia ny node kely indrindra, izay manana sanda zero.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,plt_Latn,python,"
def search(lst):
    '''Raha tsy misy ny isa iray dia avereno ny -1. Ohatra: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,plt_Latn,python,"
def strange_sort_list(lst):
    '''Raha nomena lisitry ny isa feno, dia avereno ny lisitra amin'ny filaharana hafahafa. Ny fanasokajiana hafahafa, dia rehefa manomboka amin'ny sanda kely indrindra ianao, avy eo ny farafahakeliny amin'ireo isa feno sisa, avy eo ny kely indrindra sy ny sisa. Ohatra: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,plt_Latn,python,"
def triangle_area(a, b, c):
    '''Raha ny halavan'ny lafiny telo amin'ny telozoro iray no omena. Avereno ny velaran'ny telozoro boribory amin'ny isa 2 desimaly raha toa ka telozoro manan-kery ny lafiny telo. Raha tsy izany dia avereno -1 Ny lafiny telo dia manao telozoro manan-kery raha toa ka lehibe kokoa noho ny lafiny fahatelo ny fitambaran'ny lafiny roa. Ohatra: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,plt_Latn,python,"
def will_it_fly(q,w):
    '''Soraty ny fiasan'ny valiny raha toa ka manidina ny zavatra q, ary diso raha tsy izany. Ny zavatra q dia manidina raha toa ka voalanjalanja (lisitra palindromika) ary ny totalin'ny singa ao aminy dia kely kokoa na mitovy amin'ny lanjany ambony indrindra azo atao w. Ohatra: will_it_fly (([1, 2], 5) â -> False # 1+2 dia kely kokoa noho ny lanjany ambony indrindra azo atao, saingy tsy voalanjalanja. will_it_fly (([3, 2, 3], 1) â -> False # dia voalanjalanja, fa ny 3+2+3 dia mihoatra ny lanjany ambony indrindra azo atao. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 dia kely kokoa noho ny lanjany ambony indrindra azo atao, ary voalanjalanja. will_it_fly ((([3], â 5) -> True # 3 dia kely kokoa noho ny lanjany ambony indrindra azo atao, ary voalanjalanja. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,plt_Latn,python,"
def smallest_change(arr):
    """"""Raha nomena ny array iray misy tarehimarika iray manontolo, dia fantaro ny isa farafahakeliny ilaina hanovana ny array mba hahatonga azy ho palindromika. Ny array palindromika dia array izay vakiana mitovy miverina sy mandroso. Amin'ny fanovana iray, azonao atao ny manova singa iray amin'ny singa hafa. Ohatra: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,plt_Latn,python,"
def total_match(lst1, lst2):
    '''Soraty ny asa izay manaiky lisitra roa ny kofehy ary miverina ny lisitra izay manana isan'ny tarehimarika ao amin'ny rehetra ny kofehy ny lisitra kely kokoa noho ny hafa. raha ny lisitra roa manana ny isan'ny tarehimarika, miverina ny lisitra voalohany. Ohatra total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'tetikasa']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,plt_Latn,python,"
def is_multiply_prime(a):
    """"""Soraty ny fiasa izay miverina marina raha toa ka ny isa nomena dia ny fampitomboana ny isa voalohany 3 ary diso raha tsy izany. Fantaro fa (a) dia kely noho ny 100. ohatra: is_multiply_prime(30) == Marina 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,plt_Latn,python,"
def is_simple_power(x, n):
    """"""Ny asanao dia ny manoratra fiasa izay mamerina marina raha toa ka isa x no hery tsotra an'ny n ary diso amin'ny tranga hafa. x dia hery tsotra an'ny n raha n**int=x Ohatra: is_simple_power(1, 4) => marina is_simple_power(2, 2) => marina is_simple_power(8, 2) => marina is_simple_power(3, 2) => diso is_simple_power(3, 1) diso => is_simple_power(5, 3) => diso """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,plt_Latn,python,"
def iscube(a):
    '''Soraty ny fiasan'ny isa iray izay mandray isa iray manontolo a ary mamerina ny True raha toa ka ny isa iray manontolo no an'ny isa iray manontolo. Fanamarihana: azonao atao ny mihevitra fa ny fidirana dia manan-kery foana. Ohatra: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,plt_Latn,python,"
def hex_key(num):
    """"""Ny isa hexadecimal dia 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Ny isa prime dia 2, 3, 5, 7, 11, 13, 17,... Noho izany dia tsy maintsy mamaritra isa iray amin'ireto isa manaraka ireto ianao: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Fanamarihana: azonao atao ny mihevitra fa ny fidirana dia marina foana na tsy misy, ary ny marika A, B, C, D, E, F dia lehibe foana. Ohatra: Ho an'ny num ""AB"" ny vokatra dia tokony ho 1. Ho an'ny num ""1077E"" ny vokatra dia tokony ho 2. Ho an'ny num ""AB"" = 1 ""A"" tokony ho 4. ""ABC"" = 6.089 ""A"" tokony ho 6.012345 ""AEFD"" ho an'ny output dia tokony ho 2. ""2020""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,plt_Latn,python,"
def decimal_to_binary(decimal):
    """"""Ny asa dia tokony hamerina ny kofehy, miaraka amin'ny tarehin-tsoratra tsirairay maneho ny isa binary. Ny tarehin-tsoratra tsirairay ao amin'ny kofehy dia ho '0' na '1'. Hisy fanampiny roa ny tarehin-tsoratra 'db' eo am-piandohana sy amin'ny faran'ny ny kofehy. Ny fanampiny tarehin-tsoratra dia misy mba hanampy amin'ny endrika. Ohatra: decimal_to_binary ((15) # miverina ""db1111db"" decimal_to_binary32) # miverina ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,plt_Latn,python,"
def is_happy(s):
    """"""Nomena tsipika s ianao. Ny asanao dia ny manamarina raha toa ka faly na tsia ny tady. Feno hafaliana ny tady raha toa ka 3 farafahakeliny ny halavany ary samy hafa ny litera 3 misesy ohatra: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,plt_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ny olana dia very ny kaody nampiasainy tamin'ny fanasokajiana. Nomeny anao ny lisitry ny salan'isan'ny mpianatra sasany ary tsy maintsy manoratra fiasa izay afaka mamoaka ny lisitry ny mari-pahaizana amin'ny alàlan'ny tabilao manaraka ianao: GPA  GPA  Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,plt_Latn,python,"
def prime_length(string):
    """"""Soraty ny fiasa izay maka tady ary mamerina ny Marina raha toa ka laharana voalohany ny halavan'ny tady na ny Diso raha tsy izany Ohatra prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == Diso """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,plt_Latn,python,"
def starts_one_ends(n):
    """"""Raha nomena isa iray n, avereno ny isan'ny isa n-digit izay manomboka na mifarana amin'ny 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,plt_Latn,python,"
def solve(N):
    """"""Raha nomena isa N, dia avereno ny totalin'ny tarehimarika ao amin'ny binary. Ohatra Raha N = 1000, ny totalin'ny tarehimarika dia ho 1 ny output dia tokony ho ""1"". Raha N = 150, ny totalin'ny tarehimarika dia ho 6 ny output dia tokony ho ""110"". Raha N = 147, ny totalin'ny tarehimarika dia ho 12 ny output dia tokony ho ""1100"". Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: a string of binary number """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,plt_Latn,python,"
def add(lst):
    """"""Raha nomena lisitra tsy misy banga misy isa feno dia ampio ny singa mitovy izay ao amin'ny indices hafahafa.. ohatra: add (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,plt_Latn,python,"
def anti_shuffle(s):
    """"""Soraty ny fiasa izay maka tady ary mamerina ny dikan-teny voatondro. Ny dikan-teny voatondro amin'ny tady, dia tady izay soloina teny vaovao izay ahitàna ny litera rehetra miakatra miakatra mifototra amin'ny sandan'ny ascii. Fanamarihana: Tokony hitandrina ny filaharan'ny teny sy ny toerana banga ao amin'ny fehezanteny ianao. Ohatra: anti_shuffle ((('Hi') mamerina 'Hi' anti_shuffle ((('hello') mamerina 'ehllo' anti_shuffle (('Hello World!!!') mamerina 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,plt_Latn,python,"
def get_row(lst, x):
    """"""Ohatra: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 1, 4], 0 (1, 4), 0 (2, 5), 0 (2), get_(1), 1) [_] == [[laharana 1, 1, 2, 3, 2]], == 2]], [_]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,plt_Latn,python,"
def sort_array(array):
    """"""Raha nomena ny laharana iray misy tarehimarika tsy miiba, avereno ny dika mitovy amin'ny laharana nomena rehefa avy nandamina, handamina ny laharana nomena ianao amin'ny filaharana miakatra raha toa ka ny sombiny (ny sanda index voalohany, ny sanda index farany) dia tsy mitovy, na mandamina azy amin'ny filaharana midina raha toa ka ny sombiny (ny sanda index voalohany, ny sanda index farany) dia mitovy. Fanamarihana: * aza manova ny laharana nomena. Ohatra: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,plt_Latn,python,"
def encrypt(s):
    """"""Mamorona fiasa encrypt izay maka tady ho toy ny tohan-kevitra ary mamerina tady voahidy miaraka amin'ny abidia mihodina. Tokony hihodina ny abidia amin'ny fomba iray izay ny litera miova miakatra roa mihamaro amin'ny toerana roa. Ohatra: encrypt('hi') mamerina 'lm' encrypt('asdfghjkl') mamerina 'ewhjklnop' encrypt('gf') mamerina 'kj' encrypt('et') mamerina 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,plt_Latn,python,"
def next_smallest(lst):
    """"""Nomena lisitry ny isa iray ianao. Manorata fiasa next_smallest (ny kely indrindra manaraka) izay mamerina ny singa faharoa kely indrindra ao amin'ny lisitra. Mamerina ny None raha tsy misy singa toy izany. next_smallest ([1, 2, 3, 4, 5]) == 2 next_smallest ([5, 1, 4, 3, 2]) == 2 next_smallest ([]) == Tsy misy next_smallest ([1, 1]) == Tsy misy """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,plt_Latn,python,"
def is_bored(S):
    """"""Ho omena andian-teny ianao, ary ny asanao dia ny hanisa ny isan'ny mankaleo. Ny mankaleo dia fehezanteny izay manomboka amin'ny teny hoe ""I"". Voafetra amin'ny '.', '?' na '! ny fehezanteny. Ohatra: >>> is_bored(""Hello world"") 0 >>> is_bored(""Misy lanitra manga. Mamirapiratra ny masoandro. Tiako ity toetrandro ity"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,plt_Latn,python,"
def any_int(x, y, z):
    '''Mamorona fiasa izay mandray isa 3. Mamerina marina raha ny iray amin'ireo isa dia mitovy amin'ny fitambaran'ny roa hafa, ary ny isa rehetra dia integer. Mamerina diso amin'ny tranga hafa rehetra. Ohatra any_int{5, 2, 7) â -> Marina any_int{3, 2, 2) â -> Diso any_int{3, -2, 1) â -> Marina any_int{3.6, -2.2, 2) â -> Diso '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,plt_Latn,python,"
def encode(message):
    """"""Soraty ny fiasa izay mandray hafatra, ary manoratra kaody amin'ny fomba izay manova ny endriky ny litera rehetra, manolo ny voambolana rehetra ao amin'ny hafatra amin'ny litera izay miseho 2 toerana eo alohan'ny voambolana ao amin'ny abidia anglisy. Mihevitra fotsiny ny litera. Ohatra: >>> encode('test') 'TGST' >>> encode('Ity dia hafatra') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,plt_Latn,python,"

def skjkasdkd(lst):
    """"""Ohatra: Raha lst = [0,3,2,1,3,5,7,4,5,5,2,181,32,4,32,3,2,32,324,4,3] ny output dia tokony ho 10 Raha lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ny output dia tokony ho 25 Raha lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ny output dia tokony ho 13 Raha lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ny output dia tokony ho 11 Raha lst = [0,81,12,3,21,1] ny output dia tokony ho 3 Raha lst = [1,8,1,2,7] ny output dia tokony ho  7 Raha lst = [1,8,1,2,7] ny output dia tokony ho """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,plt_Latn,python,"
def check_dict_case(dict):
    """"""Raha misy rakibolana, miverina Marina raha toa ka ny lakile rehetra dia andalana amin'ny litera kely na ny lakile rehetra dia andalana amin'ny litera lehibe, raha tsy izany miverina Diso. Tokony hiverina Diso ny fiasa raha toa ka foana ny rakibolana nomena. Ohatra: check_dict_case{""a"":""apple"", ""b"":""banana""}) tokony hiverina Marina. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) tokony hiverina Diso. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) tokony hiverina Diso. check_dict_case{""anarana"":""John"", ""Taona"":""36"", ""Tanàna"":""Houston""}) Tokony hiverina Diso. check_dict_case{""NC"":""STATE"", ""Z"":""IP""} tokony hiverina Marina.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,plt_Latn,python,"
def count_up_to(n):
    """"""Ampiharo ny fiasa izay mandray isa tsy miiba ary mamerina ny laharan'ny isa n voalohany izay isa voalohany ary kely kokoa noho ny n. ohatra: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,plt_Latn,python,"
def multiply(a, b):
    """"""Fenoy ny asa izay maka tarehimarika roa ary mamerina ny vokatra avy amin'ny tarehimarika ao aminy. Mihevitra fa manan-kery foana ny fidirana. Ohatra: mampitombo ny 148, 412) tokony hamerina ny 16. mampitombo ny 19 28, tokony hamerina ny 72. mampitombo ny 2020, 1851) tokony hamerina ny 0. mampitombo ny 14, 15) tokony hamerina ny 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,plt_Latn,python,"
def count_upper(s):
    """"""Raha nomena tsipika s, isao ny isan'ny matoanteny lehibe amin'ny endri-tsoratra mitovy. Ohatra: count_upper (('aBCdEf') mamerina 1 count_upper (('abcdefg') mamerina 0 count_upper (('dBBE') mamerina 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,plt_Latn,python,"
def closest_integer(value):
    '''Mamorona asa izay maka sanda (tsipika) maneho isa iray ary mamerina ny isa iray akaiky indrindra aminy. Raha toa ka mitovy ny elanelana misy eo amin'ny isa roa, dia ahodino ny zero. Ohatra >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Fanamarihana: Ny fanodinana ny zero dia midika fa raha toa ka mitovy ny elanelana misy eo amin'ny isa roa, ny isa tokony haverinao dia ilay lavitra indrindra amin'ny zero. Ohatra tokony hamerina 15 ny closest_integer "" ((14.5"") ary tokony hamerina -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,plt_Latn,python,"
def make_a_pile(n):
    """"""Raha nomena isa iray n, dia tsy maintsy manao antontam-bato misy ambaratonga n ianao. Ny ambaratonga voalohany dia misy vato n. Ny isan'ny vato ao amin'ny ambaratonga manaraka dia: - ny isa hafahafa manaraka raha n dia hafahafa. - ny isa manaraka raha n dia mitovy. Avereno ny isan'ny vato isaky ny ambaratonga ao anaty lisitra, izay ny singa ao amin'ny index i dia maneho ny isan'ny vato ao amin'ny ambaratonga (i + 1). Ohatra: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,plt_Latn,python,"
def words_string(s):
    """"""Ohatra: words_string (tonga eto ny teny hoe ""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string (tonga eto ny teny hoe ""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,plt_Latn,python,"
def choose_num(x, y):
    """"""Ity fiasa ity dia mandray isa roa tsara x sy y ary mamerina ny isa lehibe indrindra izay ao anatin'ny faritra [x, y] tafiditra. Raha tsy misy isa toy izany, dia tokony hamerina -1 ny fiasa. Ohatra: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,plt_Latn,python,"
def rounded_avg(n, m):
    """"""Ohatra: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b11"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,plt_Latn,python,"
def unique_digits(x):
    """"""Raha nomena lisitr'ireo isa feno tsara x. avereno ny lisitra voalamina amin'ireo singa rehetra izay tsy misy isa na iray aza. Fanamarihana: Ny lisitra naverina dia tokony ho voalamina amin'ny filaharana mitombo. Ohatra: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,plt_Latn,python,"
def by_length(arr):
    """"""Raha nomena ny laharana iray misy isa iray manontolo, dia amboary ny isa iray manontolo izay eo anelanelan'ny 1 sy 9 tafiditra ao, avereno ny laharana azo avy amin'izany, ary avy eo soloy ny isa tsirairay amin'ny anarana mifanaraka aminy avy amin'ny ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"". Ohatra: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> soraty arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> miverina arr -> [8, 5, 4, 3, 2, 2, 1, 1] miverina [""Valo"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Raha foana ny laharana, miverina ny laharana: arr = [] miverina [] Raha misy isa hafahafa ny laharana dia tsy raharahiana izany: arr = [1, 1 , 55 -> arr - 1 , arr - 1 -> arr - 1 , 55 -> arr - 1 -> miverina [51] = ['One' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,plt_Latn,python,"
def f(n):
    """"""Ampiharo ny fiasa f izay mandray ny n ho toy ny masontsivana, ary mamerina lisitra iray amin'ny habeny n, toy ny hoe ny sandan'ny singa ao amin'ny index i dia ny factorial an'ny i raha toa ka i dia mitovy na ny totalin'ny isa avy amin'ny 1 ka hatramin'ny i raha tsy izany. i manomboka amin'ny 1. ny factorial an'ny i dia ny fampitomboana ny isa avy amin'ny 1 ka hatramin'ny i (1 * 2 * ... * i). Ohatra: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,plt_Latn,python,"
def even_odd_palindrome(n):
    """"""Raha nomena isa isa n, dia avereno ny tabilao izay misy ny isan'ny palindrome isa sy isa izay tafiditra ao anatin'ny laharana ((1, n), tafiditra ao. Ohatra1: Fidirana: 3 Vokatra: (1, 2) Fanazavana: Ny palindrome isa dia 1, 2, 3. ny iray amin'izy ireo dia mitovy, ary ny roa amin'izy ireo dia hafahafa. Ohatra2: Fidirana: 12 Vokatra: (4, 6) Fanazavana: Ny palindrome isa dia 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. efatra amin'izy ireo dia mitovy, ary ny 6 amin'izy ireo dia hafahafa. Fanamarihana: 1. 1 <= n <= 10 ^ 3 2. ny tabilao dia namerina ny isan'ny palindrome isa sy isa tsy mitovy. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,plt_Latn,python,"
def count_nums(arr):
    """"""Soraty ny fiasa count_nums izay mandray ny laharam-pahamehana iray amin'ny isa manontolo ary mamerina ny isan'ny singa izay manana ny totalin'ny isa > 0. Raha diso ny isa iray, dia ho diso ny isa voalohany nosoniavina: ohatra: -123 dia manana ny marika -1, 2, ary 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,plt_Latn,python,"
def move_one_ball(arr):
    """"""Ny asa atao dia ny mamaritra raha azo atao ny mahazo array voalamina amin'ny filaharana tsy mihena amin'ny alàlan'ny fanatanterahana ny hetsika manaraka amin'ny array nomena: Azonao atao ny manao hetsika mihetsika havanana amin'ny fotoana rehetra. Ny hetsika mihetsika havanana iray dia midika hoe mihetsika ny singa rehetra amin'ny array amin'ny toerana iray amin'ny lalana marina. Ny singa farany amin'ny array dia hafindra any amin'ny toerana fanombohana ao amin'ny array izany hoe 0th index. Raha azo atao ny mahazo ny array voalamina amin'ny fanatanterahana ny hetsika etsy ambony dia miverina True raha tsy izany dia miverina False. Raha toa ka banga ny array dia miverina True. Fanamarihana: Ny lisitra nomena dia azo antoka fa manana singa tokana. Ohatra: move_one_{} ball[3, 4, 5, 2]>True Explanation: By performin 2 operations, non-decreasing order can be achieved for the array. [, 3, 4, 5]===== false Explanation: Tsy azo atao ny manao hetsika mihetsika havanana amin'ny alàlan'ny filaharana nomena.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,plt_Latn,python,"
def exchange(lst1, lst2):
    """"""Ao anatin'ity olana ity, dia hampihatra fiasa iray izay maka lisitra isa roa, ary mamaritra raha azo atao ny manatanteraka fifanakalozana singa eo amin'izy ireo mba hahatonga ny lst1 ho lisitra isa mitovy ihany. Tsy misy fetra ny isan'ny singa mifanakalo eo amin'ny lst1 sy lst2. Raha azo atao ny mifanakalo singa eo amin'ny lst1 sy lst2 mba hahatonga ny singa rehetra ao amin'ny lst1 ho mitovy, miverina ""Eny"". Raha tsy izany, miverina ""Tsia"". Ohatra: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""Eny"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""Tsia"" Heverina fa tsy ho foana ny lisitra fampidirana. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,plt_Latn,python,"
def histogram(test):
    """"""Raha misy andian-dahatsoratra maneho ny litera kely misaraka amin'ny habaka, dia avereno ny rakibolana misy ny litera izay miverimberina indrindra ary misy ny isa mifanaraka amin'izany. Raha misy litera maromaro mitovy, avereno izy rehetra. Ohatra: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram ' ((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,plt_Latn,python,"
def reverse_delete(s,c):
    """"""Asa nomena antsika ny tadiny roa s sy c, tsy maintsy esorinao ny tarehin-tsoratra rehetra ao amin'ny s izay mitovy amin'ny tarehin-tsoratra rehetra ao amin'ny c avy eo jereo raha palindrome ny tadin'ny vokatra. Antsoina hoe palindrome ny tadiny raha mitovy ny fiverenany sy ny fiverenany. Tokony hamerina ny tuple misy ny tadin'ny vokatra ianao ary marina / diso ho an'ny fanamarinana. Ohatra ho an'ny s = ""abcde"", c = ""ae"", ny valiny dia tokony ho ('bcd', diso) ho an'ny s = ""abcdef"", c = ""b"" ny valiny dia tokony ho ('acdef', diso) ho an'ny s = ""abcdedcba"", c = ""ab"", ny valiny dia tokony ho ('cdedc', marina)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,plt_Latn,python,"
def odd_count(lst):
    """"""Raha nomena lisitry ny tadiny, izay ny tadiny tsirairay dia ahitana tarehimarika fotsiny, miverena lisitra. Ny singa tsirairay i amin'ny output dia tokony ho ""ny isan'ny singa tsy mitovy amin'ny tadin'ny i amin'ny fidirana. "" izay tokony hosoloina ny isa rehetra i amin'ny isa tsy mitovy amin'ny isa i amin'ny tadin'ny fidirana. >>> odd_count ['1234567']) [""ny isan'ny singa tsy mitovy 4n ny str4ng 4 amin'ny 4nput.""] >>> odd_count ['3',""111111""]) [""ny isan'ny singa tsy mitovy 1n ny str1ng 1 amin'ny 1nput. "", ""ny isan'ny singa tsy mitovy 8n ny str8ng 8 amin'ny 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,plt_Latn,python,"
def minSubArraySum(nums):
    """"""Raha nomena ny laharana iray misy isa feno, dia fantaro ny isa kely indrindra amin'ny laharana iray tsy misy isa. Ohatra minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,plt_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Ohatra 1: Fidirana: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Famoahana: 62: Fidirana: [[0,0,1,1], [0,0,0,0], [1,1,1,1]] bucket_capacity: 2 Famoahana: 53: [[:0,0,0], [0,0,0]] bucket_capacity: 5 Famoahana: 5 * 0 * 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 11 * 11 * 11 * 11 * 11 * 12 * 11 * 12 * 13 * 13 * 14 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 16 * 16 * 16 * 17 * 17 * 17 * 18 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,plt_Latn,python,"
def sort_array(arr):
    """"""Ao amin'ity Kata ity, tsy maintsy manara-maso ny laharana iray misy tarehimarika tsy miiba ianao araka ny isan'ny isa ao amin'ny fanehoana azy ireo amin'ny endrika binary amin'ny fiakarana. Ho an'ny isa mitovy amin'ny isa, ny fanarahana ny sanda desimaly. Tsy maintsy ampiharina toy izao: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,plt_Latn,python,"
def select_words(s, n):
    """"""Raha nomena ny tsipika s sy ny isa voajanahary n, dia nasaina nampihatra fiasa iray ianao izay mamerina ny lisitry ny teny rehetra avy amin'ny tsipika s izay misy ny consonants n, mba hisehoan'ireo teny ireo ao amin'ny tsipika s. Raha foana ny tsipika s dia tokony hamerina lisitra foana ny fiasa. Fanamarihana: azonao atao ny mihevitra fa ny tsipika fampidirana dia tsy misy afa-tsy litera sy toerana. Ohatra: select_words ""Mary nanana zanak'ondry kely"", 4) ==> [""kely""] select_words ""Mary nanana zanak'ondry kely"", 3) ==> [""Mary"", ""kely""] select_words ""sehatra fotsy tsotra"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,plt_Latn,python,"
def get_closest_vowel(word):
    """"""Ohatra: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,plt_Latn,python,"
def match_parens(lst):
    '''Misy lisitra misy rojo roa, samy misy fononteny misokatra '(' na fononteny akaiky ') ' ihany. Ny asanao dia ny manamarina raha azo atao ny mampifandray ireo rojo roa amin'ny filaharana sasany, fa ny tadiny vokarina dia ho tsara. Heverina ho tsara ny tadin'ny S raha toa ka voalanjalanja ny fononteny rehetra ao amin'ny S. Ohatra: ny tadin'ny '((()) 'dia tsara, raha ny tadin'ny '()) 'dia tsy. Miverina 'Eny' raha misy fomba hanaovana tadin-teny tsara, ary miverina 'Tsia' raha tsy izany. Ohatra: match_parens[('() ', ') ']) == 'Eny' match_parens[(') ', ') ']) == 'Tsia' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,plt_Latn,python,"
def maximum(arr, k):
    """"""Raha nomena ny array arr misy integer sy integer k, dia avereno ny lisitra voalamina amin'ny halavan'ny k miaraka amin'ny isa k ambony indrindra ao amin'ny arr. Ohatra1: Fidirana: arr = [-3, -4, 5], k = 3 Fivoahana: [-4, -3, 5] Ohatra2: Fidirana: arr = [4, -4, 4], k = 2 Fivoahana: [4, 4] Ohatra3: Fidirana: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Fivoahana: [2] Fanamarihana: 1. Ny halavan'ny array dia ho eo amin'ny elanelam-potoana [1, 1000]. 2. Ny singa ao amin'ny array dia ho eo amin'ny elanelam-potoana [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,plt_Latn,python,"
def solution(lst):
    """"""Raha nomena lisitra iray tsy misy banga misy isa feno, avereno ny fitambaran'ny singa rehetra izay ao amin'ny toerana mitovy. Ohatra vahaolana (([5, 8, 7, 1]) ==> 12 vahaolana (([3, 3, 3, 3]) ==> 9 vahaolana (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,plt_Latn,python,"
def add_elements(arr, k):
    """"""Raha nomena ny array tsy banga misy integer arr sy integer k, avereno ny totalin'ny singa misy isa roa farafahakeliny avy amin'ny k voalohany amin'ny arr. Ohatra: Fidirana: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Fivoahana: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,plt_Latn,python,"
def get_odd_collatz(n):
    """"""Raha nomena isa iray miampy n, avereno ny lisitra voalamina izay misy isa tsy mitovy ao amin'ny filaharan'ny collatz. Ny vinavinan'i Collatz dia vinavina amin'ny matematika izay mikasika ny filaharana voafaritra toy izao manaraka izao: atombohy amin'ny isa miampy n. Avy eo ny fehezan-teny tsirairay dia azo avy amin'ny fehezan-teny teo aloha toy izao manaraka izao: raha ny fehezan-teny teo aloha dia mitovy, ny fehezan-teny manaraka dia ny antsasaky ny fehezan-teny teo aloha. Raha ny fehezan-teny teo aloha dia hafahafa, ny fehezan-teny manaraka dia 3 heny ny fehezan-teny teo aloha miampy 1. Ny vinavina dia na inona na inona ny lanjan'ny n, ny filaharana dia hahatratra hatrany 1. Fanamarihana: 1. Collatz(1) dia [1]. 2. ny lisitra naverina dia voalamina amin'ny filaharana mitombo. Ohatra: get_odd_collatz(5) miverina [1, 5] # Ny filaharan'ny collatz ho an'ny 5 dia [5, 8, 16, 4, 2, 1], ka ny isa hafahafa dia 1, ary 5 ihany """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,plt_Latn,python,"
def valid_date(date):
    """"""Tsy maintsy manoratra fiasa izay manamarina ny daty nomena ianao ary mamerina ny True raha toa ka mety ny daty raha tsy izany dia diso. Ny daty dia mety raha toa ka mahafeno ny fitsipika manaraka rehetra: 1. Ny daty dia tsy banga. 2. Ny isan'ny andro dia tsy latsaky ny 1 na mihoatra ny 31 andro ho an'ny volana 1,3,5,7,8,10,12. Ary ny isan'ny andro dia tsy latsaky ny 1 na mihoatra ny 30 andro ho an'ny volana 4,6,9,11. Ary, ny isan'ny andro dia tsy latsaky ny 1 na mihoatra ny 29 ho an'ny volana 2. 3. Ny volana dia tsy tokony ho latsaky ny 1 na mihoatra ny 12. 4. Ny daty dia tokony ho ao amin'ny endrika: mm-dd-yyyy ohatra: valid_date (('03-11-2000') => True_date (('15-01-2012') => False valid_date (('04-040-20') => False_date (('06-04-2020') => True_date (('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,plt_Latn,python,"
def split_words(txt):
    '''Raha nomena andian-teny, avereno ny lisitry ny teny zaraina amin'ny toerana fotsy, raha tsy misy toerana fotsy ao amin'ny lahatsoratra dia tokony zaraina amin'ny commas ',' raha tsy misy commas dia tokony haverinao ny isan'ny litera kely amin'ny baiko hafahafa ao amin'ny abidia, ord (('a') = 0, ord ((b') = 1, ... ord ((('z') = 25 Ohatra split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words"")'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,plt_Latn,python,"
def is_sorted(lst):
    '''Raha nomena lisitry ny isa, miverena na milahatra amin'ny fiakarana izy ireo na tsia. Raha manana isa mitovy amin'ny isa mitovy amin'ny lisitra mihoatra ny 1 ny lisitra, miverena diso. Mihevitra fa tsy misy isa ratsy ary isa feno ihany. Ohatra is_sorted ((([5]) â -> Marina dia_sorted (([1, 2, 3, 4, 5]) â -> Marina dia_sorted (([1, 2, 3, 4, 5, 6]) â -> Marina dia_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Marina dia_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Marina dia_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Diso dia_sorted (([1, 2, 2, 2, 3, 3, 4]) â -> Marina dia_sorted (([1, 2, 2, 2, 3, 4 -> Diso ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,plt_Latn,python,"
def intersection(interval1, interval2):
    """"""Ohatra, ny halavan'ny fihaonan'ny elanelana (1, 3), (2, 4) dia (2, 3) izay ny halavan'ny dia 1, izay tsy misy isa voalohany. Raha ny halavan'ny fihaonan'ny dia dia isa voalohany, miverina ""Eny"", raha tsy izany, miverina ""Tsia"". Raha tsy mifanipaka ny elanelana roa dia miverina ""Tsia"". [input/output] santionany: fihaonan-javatra (((1, 2), (2, 3) ==> ""fihaonan-javatra ((-1, 1) ""), ""NO"" ==> (0, 4) ""fihaonan-javatra ("", - 5 1), ==> ((-3, ""YES"") ))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,plt_Latn,python,"
def prod_signs(arr):
    """"""Nomena anao ny array iray misy tarehimarika manontolo ary mila mamerina ny fitambaran'ny haben'ny tarehimarika manontolo izay ampitomboina amin'ny vokatra ny famantarana rehetra an'ny isa tsirairay ao amin'ny array, aseho amin'ny 1, -1 na 0. Fanamarihana: miverina Tsy misy ho an'ny arr foana. Ohatra: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Tsy misy""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,plt_Latn,python,"
def minPath(grid, k):
    """"""Raha nomena ny tambajotra misy laharana N sy tsanganana N (N >= 2) ary ny laharana k k, ny sela tsirairay ao amin'ny tambajotra dia misy sanda. Ny isa rehetra ao amin'ny faritra [1, N * N] dia miseho indray mandeha ao amin'ny sela ao amin'ny tambajotra. Tsy maintsy mahita ny làlana kely indrindra amin'ny halavan'ny k ianao ao amin'ny tambajotra. Afaka manomboka amin'ny sela ianao, ary isaky ny dingana dia afaka mifindra any amin'ny sela mpifanila vodirindrina aminao, amin'ny teny hafa, afaka mandeha any amin'ny sela izay mizara sisiny miaraka aminao ianao sela ankehitriny. Mariho fa ny làlana iray amin'ny halavan'ny k dia midika fa mitsidika ny sela k (tsy voatery ho miavaka). TSY afaka miala amin'ny tambajotra ianao. Ny làlana A (ny halavan'ny k) dia heverina ho kely kokoa noho ny làlana B (ny halavan'ny k) raha aorian'ny fanaovana ny lisitra voatondro ny soatoavina amin'ny soatoavina amin'ny sela A sy B (antsointsika hoe l_stA sy l_stB), ny l_stA dia kely indrindra ara-pitenenana ara-pitenenana, ny kely indrindra dia kely kokoa noho ny l_stB, amin'ny teny hafa, ny làlana kely indrindra amin'ny halavan'ny k dia kely indrindra, amin'ny sela k dia ny halavan'ny k, amin'ny sela mifanaka miaraka aminao amin'ny sela ankehitriny. Azonao atao ny manomboka amin'ny sela rehetra, ary isaky ny dingana tsirairay dia afaka mifindra amin'ny sela mpifan-dalana, amin'ny sela hafa, amin'ny fomba hafa, amin'ny sela hafa, amin'ny sela hafa, amin'ny sela hafa ny iray amin'ny sisin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny sela ankehitriny, ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray amin'ny iray""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,plt_Latn,python,"
def tri(n):
    """"""Ny filaharan'i Fibonacci dia voafaritra amin'ny alalan'ny fiverimberenana: tri(1) = 3 tri(n) = 1 + n / 2, raha n dia mitovy. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), raha n dia hafahafa. Ohatra: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Nomenao isa iray tsy miiba n ianao, mila mamerina ny lisitry ny isa voalohany n + 1 amin'ny filaharan'i Tribonacci ianao. Ohatra: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,plt_Latn,python,"
def digits(n):
    """"""Raha nomena isa iray n, avereno ny vokatra avy amin'ny isa tsy mitovy. Avereno 0 raha toa ka mitovy ny isa rehetra. Ohatra: isa 1 = 1 isa 4 = 0 isa 5 = 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,plt_Latn,python,"
def is_nested(string):
    '''Mamorona fiasa izay mandray ny kofehy ho toy ny fidirana izay misy ihany no misy kianja fononteny. Ny fiasa dia tokony hiverina Marina raha toa ka misy manan-kery ihany ny fanarahana ny fononteny izay misy farafahakeliny iray fononteny ao amin'ny fanarahana dia nested. dia_nested '[[]]') â -> Marina dia_nested '[[]]]]]]]]][[[[]]') â -> Diso dia_nested '[][]') â -> Diso dia_nested '[[]') â -> Diso dia_nested '[[]') â -> Diso dia_nested '[[]]]]') â -> Marina dia_nested '[[]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,plt_Latn,python,"

def sum_squares(lst):
    """"""Ohatra: Ho an'ny lst = [1,2,3] ny vokatra dia tokony ho 14 Ho an'ny lst = [1,4,9] ny vokatra dia tokony ho 98 Ho an'ny lst = [1,3,5,7] ny vokatra dia tokony ho 84 Ho an'ny lst = [1.4,4.2,0] ny vokatra dia tokony ho 29 Ho an'ny lst = [-2.4,1,1] ny vokatra dia tokony ho 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,plt_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Mamorona fiasa izay mamerina ny Marina raha toa ka litera abidia ny litera farany amin'ny andian-dahatsoratra iray ary tsy ampahany amin'ny teny, ary diso raha tsy izany. Fanamarihana: ""teny"" dia vondrona litera misaraka amin'ny habaka. Ohatra: check_if_last_char_is_a_letter"" (a_letter) -> False check_if_last_char_is_a_letter"" (a_letter) -> True check_if_last_char_is_a_letter"" (a_letter) -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,plt_Latn,python,"
def can_arrange(arr):
    """"""Mamorona fiasa izay mamerina ny index lehibe indrindra amin'ny singa iray izay tsy lehibe kokoa na mitovy amin'ny singa iray eo alohany. Raha tsy misy singa toy izany dia miverina -1. Ny array nomena dia tsy misy soatoavina duplicate. Ohatra: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,plt_Latn,python,"
def largest_smallest_integers(lst):
    '''Mamorona asa izay miverina ny tuple (a, b), izay 'a' no lehibe indrindra amin'ny ratsy integers, ary 'b' no kely indrindra amin'ny tsara integers ao amin'ny lisitra. Raha tsy misy ratsy na tsara integers, miverina azy ireo toy ny Tsy misy. Ohatra: lehibe indrindra_kely indrindra_integers[2, 4, 1, 3, 5, 7]) == (Tsy misy, 1) lehibe indrindra_kely indrindra_integers([]) == (Tsy misy, Tsy misy) lehibe indrindra_kely indrindra_integers[0]) == (Tsy misy, Tsy misy) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,plt_Latn,python,"
def compare_one(a, b):
    """"""Mamorona fiasa izay mandray isa feno, floats, na tady misolo tena ny isa tena izy, ary mamerina ny miovaova lehibe kokoa amin'ny karazana miovaova nomena azy. Tsy miverina raha mitovy ny soatoavina. Fanamarihana: Raha misy isa tena izy aseho ho toy ny tady, ny teboka mivezivezy dia mety ho . na , compare_one(1, 2.5) â -> 2.5 compare_one(1, ""2,3"") â -> ""2,3"" compare_one(""5,1"", ""6"") â -> ""6"" compare_one(""1"", 1) â -> Tsy misy """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,plt_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Diniho raha azo soratana ho toy ny fitambaran'ny isa 4 marina tsara ny isa n nomena Ohatra is_equal_to_sum_even ((4) == Diso is_equal_to_sum_even ((6) == Diso is_equal_to_sum_even ((8) == Marina """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,plt_Latn,python,"
def special_factorial(n):
    """"""Ny factoriel breziliana dia voafaritra toy ny: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! izay n > 0 Ohatra: >>> special_factorial ((4) 288 Handray integer ho toy ny fidirana ny asa ary tokony hamerina ny factoriel manokana an'io integer io. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,plt_Latn,python,"
def fix_spaces(text):
    """"""_Ohatra-3-teny andalana, soloina amin'ny soratra ambany ny toerana rehetra ao aminy, ary raha misy andalana misy toerana misesy mihoatra ny 2, dia soloina amin'ny - fix_spaces ((""Ohatra"") == ""Ohatra"" fix_spaces ((""Ohatra1"") == ""Ohatra_1"" fix_spaces (((""Ohatra2"") == ""_Ohatra_2"" fix_spaces ((""Ohatra 3"") == ""_Ohatra-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,plt_Latn,python,"
def file_name_check(file_name):
    """"""Mamorona fiasa izay maka tady maneho ny anaran'ny rakitra, ary miverina 'Eny' raha marina ny anaran'ny rakitra, ary miverina 'Tsia' raha tsy izany. Heverina ho marina ny anaran'ny rakitra raha toa ka fenoina ireto fepetra manaraka ireto: - Tsy tokony hisy mihoatra ny telo isa ('0'-'9') ao amin'ny anaran'ny rakitra. - Ny anaran'ny rakitra dia misy teboka iray '.' - Ny substring alohan'ny teboka dia tsy tokony ho foana, ary manomboka amin'ny litera avy amin'ny alfabeta latinina ('a'-'z' ary 'A''-Z'). - Ny substring aorian'ny teboka dia tokony ho iray amin'ireto: ['txt', 'exe', 'lld'] Ohatra: file_name_check""(ohatra.txt"") # => 'Eny' file_name_check""{example.ll1"") => 'Tsia' # (ny anarana dia tokony hanomboka amin'ny litera latinina alpha)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,plt_Latn,python,"


def sum_squares(lst):
    """""""" Ity fiasa ity dia haka lisitry ny isa feno. Ho an'ny fidirana rehetra ao amin'ny lisitra, ny fiasa dia hampiakatra ny fidirana manontolo raha toa ka maro ny 3 ny index ary hanangana ny fidirana manontolo raha toa ka maro ny 4 ny index ary tsy maro ny 3. Ny fiasa dia tsy hanova ny fidirana ao amin'ny lisitra izay tsy misy ny isa 3 na 4. Ny fiasa dia hamerina ny totalin'ny fidirana rehetra. Ohatra: Ho an'ny lst = [1,2,3] ny vokatra dia tokony ho 6 Ho an'ny lst = [] ny vokatra dia tokony ho 0 Ho an'ny lst = [-1,-5,2,-1,-5] ny vokatra dia tokony ho -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,plt_Latn,python,"
def words_in_sentence(sentence):
    """"""Ohatra1: Fidirana: fehezanteny = ""Fitsapana ity"" Famoahana: ""dia"" Ohatra2: Fidirana: fehezanteny = ""aleo handeha hilalao"" Famoahana: ""mandehana"" Fepetra: * 1 <= len(teny) <= 100 * fehezanteny misy litera ihany """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,plt_Latn,python,"
def simplify(x, n):
    """"""Ny asanao dia ny manatanteraka ny fiasan'ny izay hanatsotra ny fanehoana x * n. Ny fiasa miverina Marina raha x * n manombana ho iray manontolo isa sy ny diso raha tsy izany. Samy x sy n, dia kofehy fanehoana ny ampahany, ary manana ny manaraka endrika, <numerator> / <nominator> izay samy mpisolo sy ny mpisolo anarana dia isa manontolo tsara. Afaka mihevitra fa x, ary n dia manan-kery ampahany, ary tsy manana zero toy ny mpisolo anarana. tsorina "" 1/5"", ""5/1"") = Marina tsorina "" 1/6"", ""2/1"") = Diso tsorina "" 7/10"", ""10/2"") = Diso """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,plt_Latn,python,"
def order_by_points(nums):
    """"""Soraty ny fiasa izay mandamina ny lisitry ny isa feno amin'ny filaharana miakatra araka ny fitambaran'ny tarehimarika. Fanamarihana: raha misy singa maromaro miaraka amin'ny fitambaran'ny tarehimarika mitovy amin'izany, dia mandamina azy ireo mifototra amin'ny index ao amin'ny lisitra tany am-boalohany. Ohatra: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points []) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,plt_Latn,python,"
def specialFilter(nums):
    """"""Soraty ny fiasa izay mandray ny laharana isa ho toy ny fidirana ary mamerina ny isan'ny singa ao amin'ny laharana izay lehibe kokoa noho ny 10 ary ny isa voalohany sy farany amin'ny isa dia tsy mitovy (1, 3, 5, 7, 9). Ohatra: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,plt_Latn,python,"
def get_max_triples(n):
    """"""Nomena isa iray n ianao. Tsy maintsy mamorona array iray a amin'ny halavan'ny n ianao. Ho an'ny tsirairay i (1 â‰¤ i â‰¤ n), ny sandan'ny a[i] = i * i - i + 1. Avereno ny isan'ny triples (a[i], a[j], a[k]) an'ny a izay i < j < k, ary a[i] + a[j] + a[k] dia multiples an'ny 3. Ohatra: Fidirana: n = 5 Famoahana: 1 Fanazavana: a = [1, 3, 7, 13, 21] Ny hany triples mety dia (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,plt_Latn,python,"
def bf(planet1, planet2):
    '''Misy planeta valo ao amin'ny rafi-masoandro misy antsika: ny akaiky indrindra amin'ny masoandro dia i Mercure, ny manaraka dia i Vénus, avy eo ny Tany, Mars, Jupiter, Saturne, Uranus, Neptune. Manorata asa izay mandray anarana planeta roa ho toy ny kofehy planet1 sy planet2. Tokony hamerina ny tuple misy ny planeta rehetra izay ny orbitany dia eo anelanelan'ny orbit of planet1 sy ny orbit of planet2, voalamina araka ny akaiky ny masoandro. Tokony hamerina tuple tsy misy na inona na inona ny asa raha tsy marina ny anaran'ny planeta. Ohatra bf""(Jupiter"", ""Neptune"") ==> (""Saturne"", ""Uranus"") bf(""Tany"", ""Mercure"") ==> (""Vénus"") bf""(Mercure"", ""Uranus"") ==> (""Vénus"", ""Tany"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,plt_Latn,python,"
def sorted_list_sum(lst):
    """"""Soraty ny fiasa izay manaiky ny lisitry ny tady ho toy ny masontsivana, mamafa ny tady izay manana tsy mitovy ny halavany avy aminy, ary miverina ny vokatry ny lisitra amin'ny baiko voalamina, ny lisitra dia foana ny lisitry ny tady ary tsy misy ny array ny isa, ary mety ahitana duplicates. Ny filaharan'ny lisitra dia tokony ho miakatra ny halavan'ny teny tsirairay, ary tokony hiverina ny lisitra voalamina araka izany fitsipika. Raha roa teny manana ny halavan'ny, ny lisitra voalamina araka ny abidia. Ny fiasa dia tokony hiverina ny lisitry ny tady ao amin'ny voalamina filaharana. Mety mihevitra fa ny teny rehetra dia hanana ny halavan'ny mitovy. Ohatra: milaza lisitra_sort[""aa"", ""a"", ""aaa""]) => milaza lisitra_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,plt_Latn,python,"
def x_or_y(n, x, y):
    """"""Fandaharana tsotra izay tokony hamerina ny sandan'ny x raha n dia isa voalohany ary tokony hamerina ny sandan'ny y raha tsy izany. Ohatra: ho an'ny x_or_y(7, 34, 12) == 34 ho an'ny x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,plt_Latn,python,"
def double_the_difference(lst):
    '''Raha nomena lisitry ny isa, avereno ny fitambaran'ny kianjan'ny isa ao amin'ny lisitra izay tsy mitovy. Tsy miraharaha ny isa izay ratsy na tsy isa. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Raha foana ny lisitra fampidirana, avereno 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,plt_Latn,python,"
def compare(game,guess):
    """"""Ny asa ataonao dia ny mamantatra raha nisy olona naminavina tsara ny valin'ny lalao maromaro. Nomenao isa roa sy vinavina roa mitovy ny halavany, izay mampiseho ny fifanandrinana ny index tsirairay. Avereno ny array mitovy ny halavany izay manondro ny halaviran'ny vinavina tsirairay. Raha marina ny vinavinany, ny sanda dia 0, ary raha tsy izany, ny sanda dia ny fahasamihafana tanteraka eo amin'ny vinavina sy ny isa. ohatra: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,plt_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Ho nomena anao ny anaran'ny kilasy (tsipika) sy ny lisitry ny fanitarana. Ny fanitarana dia ampiasaina mba hampidirana kilasy fanampiny ao amin'ny kilasy. Ny tanjaky ny fanitarana dia toy izao manaraka izao: Aoka ny CAP ho ny isan'ny litera lehibe ao amin'ny anaran'ny fanitarana, ary aoka ny SM ho ny isan'ny litera kely ao amin'ny anaran'ny fanitarana, ny tanjaka dia omena amin'ny ampahany CAP - SM. Tokony ho hitanao ny fanitarana matanjaka indrindra ary hamerina tady amin'ity endrika ity: ClassName.StrongestExtensionName. Raha misy fanitarana roa na maromaro mitovy tanjaka, tokony hisafidy ilay voalohany ao amin'ny lisitra ianao. Ohatra, raha nomena anao ny ""Slices"" ho kilasy sy ny lisitry ny fanitarana: ['SEviviRNGliSCes', 'Cheese', 'StuFfed'] dia tokony hamerina ny 'Slices.SEviRNGliS' ianao satria ny fanitarana dia matanjaka indrindra. 'SliviRNGliS' dia ny fanitarana matanjaka indrindra. (ohatra: 'AA_Beats'), ny fanitarana dia ny 'AA_class' (to beats'_class'_strongest_extension)""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,plt_Latn,python,"
def cycpattern_check(a , b):
    """"""Omeo teny 2 ianao. Mila mamerina ny True ianao raha toa ka ny teny faharoa na ny iray amin'ireo fihodinana dia singa ao amin'ny teny voalohany cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,plt_Latn,python,"
def even_odd_count(num):
    """"""Nomena isa iray manontolo. mamerina ny tabilao izay manana isa isa sy isa isa. Ohatra: na dia_tsy_isa aza ((-12) ==> (1, 1) na dia_tsy_isa aza ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,plt_Latn,python,"
def int_to_mini_roman(number):
    """"""Raha nomena isa iray miampy, alao ny isa romanina mitovy aminy ho toy ny tadiny, ary avereno amin'ny litera kely.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,plt_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Raha jerena ny halavan'ny lafiny telo amin'ny telozoro iray. Mamerina ny marina raha toa ka telozoro mahitsy ny lafiny telo, diso raha tsy izany. Ny telozoro mahitsy dia telozoro izay misy zoro iray mahitsy na 90 degre. Ohatra: right_angle_triangle ((3, 4, 5) == Marina right_angle_triangle ((1, 2, 3) == Diso '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,plt_Latn,python,"
def find_max(words):
    """"""Manorata asa izay manaiky lisitry ny tady. Ny lisitra dia ahitana teny samihafa. Miverena ny teny miaraka amin'ny isa ambony indrindra amin'ny endri-tsoratra tsy manam-paharoa. Raha misy tady maromaro manana ny isa ambony indrindra amin'ny endri-tsoratra tsy manam-paharoa, miverena ilay tonga voalohany amin'ny filaharana lexicographical. find_max (([""anarana"", ""ny"", ""tady""]) == ""tady"" find_max (([""anarana"", ""enam"", ""lalao""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,plt_Latn,python,"
def eat(number, need, remaining):
    """"""Ianao no bitro noana, ary efa nihinana karaoty maromaro ianao, saingy mila mihinana karaoty bebe kokoa ianao mba hamenoana ny sakafo isan'andro. tokony hamerina array iray ianao [total number of eaten carrots after your meals, the number of carrots left after your meals] raha tsy ampy ny karaoty sisa tavela, dia hihinana ny karaoty sisa tavela ianao, saingy mbola ho noana ihany. Ohatra: * mihinana ((5, 6, 10) -> [11, 4] * mihinana ((4, 8, 9) -> [12, 1] * mihinana ((1, 10, 10) -> [11, 0] * mihinana ((2, 11, 5) -> [7, 0] Variables: @number: integer ny isan'ny karaoty nohaninao. @need: integer ny isan'ny karaoty ilainao hohanina. @remaining: integer ny isan'ny karaoty sisa tavela ao amin'ny tahiry Constrain: *= 0 <= 0 * 1000 <= 0 * mila <= 1000 <= 1000 = 1000  Have fun = 1000:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,plt_Latn,python,"
def do_algebra(operator, operand):
    """"""Raha nomena lisitra roa ny mpandraharaha, ary ny operand. Ny lisitra voalohany dia manana asa algebra fototra, ary ny lisitra faharoa dia lisitry ny isa feno. Ampiasao ireo lisitra roa nomena hananganana ny fitenenana algebra ary hamerina ny fanombanana an'io fitenenana io. Ny asa algebra fototra: Addition ( +) Subtraction ( - ) Multiplication ( *) Floor division ( // ) Exponentiation ( ** Example): operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Fanamarihana: Ny halavan'ny lisitry ny mpandraharaha dia mitovy amin'ny halavan'ny lisitry ny operand minus iray. Ny operand dia lisitry ny integer tsy ratsy. Ny lisitry ny mpandraharaha dia manana mpandraharaha iray farafaharatsiny, ary ny lisitry ny operand dia manana operand roa farafaharatsiny. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,plt_Latn,python,"
def solve(s):
    """"""Raha toa ka misy litera ny s[i], dia avereno ny endriny avy any ambany ka hatrany ambony na vice versa, raha tsy izany dia tazomy toy ny teo aloha. Raha tsy misy litera ny tady, avereno ny tady. Tokony hamerina ny tady vokatry ny fiasa. Ohatra solve{""1234"") = ""4321"" solve{""ab"") = ""AB"" solve{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,plt_Latn,python,"
def string_to_md5(text):
    """"""Raha misy ny 'text' dia avereno ny md5 hash equivalent string. Raha 'text' dia string tsy misy, avereno ny None. >>> string_to_md5('Salama tontolo') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,plt_Latn,python,"
def generate_integers(a, b):
    """"""Raha nomena isa roa a sy b, avereno ny isa roa eo anelanelan'ny a sy b, amin'ny fiakarana. Ohatra: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
