task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ace_Arab,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""ڤرچاي جك دالم لنتاي نومبور يڠ دبري، اد دوا نومبور يڠ لبيه كاو سيكڤ دري سومبر يڠ دبري. چونتوه: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ace_Arab,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ڤڠاتورن اونتوق فانسي ڽو اداله سترين يڠ نا لي ڬروڤ-ڬروڤ ڤرنتيس يڠ دڤاوڬيت. توجوان توك ڬروڤ-ڬروڤ ڽو اداله اونتوق منچيتقكن سترين يڠ ڤرلتيس ڠن مروڤاكن ليستيڠ ڽن. ڬروڤ-ڬروڤ يڠ ڤرلتيس اداله بربيليان (سياڤ ڤرنتيس يڠ دڤاوڬيت دتڠڬوڠ سچارا ڤريستين) دان هان دڤاوڬيت دالم سترين يڠ ڤرلتيس. چونتوه: >>> separate_paren_groups' ((( ) (() (())))))))""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ace_Arab,python,"

def truncate_number(number: float) -> float:
    """"""دبريكن نومبور ڤوسيتيف فلواتينڬ ڤوتين، ڽو جاوت ديكومڤوساسي كاو ڤرتيمبڠن اينتيڬر (انتيڬر ڤاليڠ راييك لياوبيه لوه دري نومبور دڤاو) ڠن ديسيمل (ڤرتيمبڠن يڠ لوه سوده لياوبيه لوه دري ١). مروڤاكن ڤرتيمبڠن ديسيمل نومبور. چونتوه: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ace_Arab,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""اكو دبريكن ليمت اوڤراسي ڤمبايرن دان ڤمبايرن د سبواه اكاونت بڠك يڠ برمولا دڠن بيلاد صفر. ڤركارا اكو اداله اونتوق مڠتڤيكن اڤابيلا د سياڤا ڤون تيندقن اكاونت دلوار صفر، دان د ڤون تيندقن ڤون ڤرلو مڽروڤاكن True. اڤابيلا تيدق، ڤرلو مڽروڤاكن False. چونتوه: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ace_Arab,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""اونتوق لنتاي ڤڠاتورن يڠ دبري، مڠحسابكن Mean Absolute Deviation دڠن موده داسا داتا. Mean Absolute Deviation اداله ڤربيداان موده انتارا ستياڤ ايليمن دان تيتيق ڤوست (موده دالم حال اين): MAD = average. x - x_mean. چونتوه: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ace_Arab,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""مڠمبيل نومبور 'ديليمتر' انتارا ستياڤ دوا ايليمن يڠ برتنديڠ دري ليست ڤڠمبيلن `نومبور' >>> اينترسڤيرس (([], 4) [] >>> اينترسڤيرس (([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ace_Arab,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤڠاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا ڤاچارا""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ace_Arab,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""ڤيلتر ليست ڤڠمبيلن ستراين اونتوق اورڠ-اورڠ يڠ مڠمبيل سوبسترينڬ يڠ دبري >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ace_Arab,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""اونتوق لنتاي اينتيڬر يڠ دبري، مروڤاكن توڤل يڠ بركونسيڤ دري سوم دان ڤرودوک دري سموا اينتيڬر دالم لنتاي. سوم بياسا هاروس سام دڠن 0 دان ڤرودوک بياسا هاروس سام دڠن 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ace_Arab,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""دري ليستي اينتيڬر يڠ دبري، مروڤاكن ليستي ايليمن ماكسيما رولليڠ يڠ دتومڤتكن سهيڠڬ ڤاڬي يڠ دبريكن دالم سيكويينس. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ace_Arab,python,"

def is_palindrome(string: str) -> bool:
    """"""منچاري ڤاليندروم يڠ ڤاليڠ كوتاه يڠ برمولا دڠن سورت يڠ دڤاوڬيت. ايديا الورڬيتم ساڠت سيبوق: - منچاري ڤوستفيكس يڠ ڤاليڠ لاما دري سورت يڠ دڤاوڬيت يڠ اداله ڤاليندروم. - مڠلواركن ڤرڤادوان سورت يڠ دڤاوڬيت سبلوم سورت ڤاليندروم كڤد اخير سورت. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('catac') ' >>> make_palindrome ((('catac') ' '""""""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""ڤتيقن اڤاکه سټرينڠ دبري اياله ڤاليندروم""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ace_Arab,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input اداله دوا سورت a دان b يڠ تيڠڬل دري 1 دان 0. ڤرلوكن XOR باينري دالم اينڤوت ڠن مروڤاكن ريسلوت سيوباڬاي سورت. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ace_Arab,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""دري ليست سورت، ڤرلو مروڤاكن سورت يڠ ڤاليڠ لاما. ڤرلو مروڤاكن سورت ڤرتام دالم كيس سورت يڠ ليڤت دڠن لڠكه يڠ سام. ڤرلو مروڤاكن نيه دالم كيس سورت ڤڠلوارن ايكن. >>> ڤاليڠ لاما (([]) >>> ڤاليڠ لاما ((['a','b','c']) 'a' >>> ڤاليڠ لاما ((['a','bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ace_Arab,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""مروڤاكن ڤڠڬامبر كومون ڤاليڠ راييك دري دوا انتيڬره a دان b >>> ڤڠڬامبر كومون ڤاليڠ راييك ((3, 5) 1 >>> ڤڠڬامبر كومون ڤاليڠ راييك ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ace_Arab,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""ڤرجالنن ڤريفيک سموا دري ڤرتڠهن ڤاليڠ كوتاه سمڤاي ڤرتڠهن ڤاليڠ لاما دري سترين ڤڠمبڠن >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ace_Arab,python,"

def string_sequence(n: int) -> str:
    """"""مروڤاكن ستريڠ يڠ نا نومبور يڠ دڤاوڬيت سڤيسيس برمولا دري 0 سمڤواي n ترماسوق. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ace_Arab,python,"

def count_distinct_characters(string: str) -> int:
    """"""دڤاوڬيت سترين، جاوت لي كاراكتر يڠ بربيدا (لاڤرله كيس) جيه دڤاوڬيت >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ace_Arab,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠاتورن ڤڠور ڤڠاتورن ڤڠورڠورڠ ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤاتورن ڤ""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ace_Arab,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""مڠومڤولكن جومله-جومله يڠ دبريكن سوبسترينغ يڠ بوليه دتومڤوكن دالم سورت اوريڬينل. مڠحساب كيس-كيس يڠ برتنتڠن. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ace_Arab,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""ڤڠاتورن اداله سلاين يڠ دڤرچايأي دڠن ڤوست ڤڠاتورن دري 'صفر' هيڠڬ 'تاوم'. ڤيليهن يڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ""""""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ace_Arab,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""دري ليستي يڠ دڤاوڬيتكن دري ارق (دڠان لڠكڤ دوا) مڤيليه دان مروڤاكن دوا يڠ ڤاليڠ كلوارڬ كاو سابوه لاان ڠن مروڤاكن اي دالم اوريڠ (ارق يڠ لڠكڤ، ارق يڠ ڤاليڠ راييك). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ace_Arab,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""دبري لنتاي ارق (دري دوا ايليمن) ، مڠاجر ترنسفورما لينيار كاو لنتاي ڽن، جادي ارق يڠ كوريڠ جاوت كاو ٠ ڠن يڠ ڤاليڠ راييك جاوت كاو ١ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ace_Arab,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""فلتر دبري ليمت ڤرمايسوري ڤيثون اونتوق اينتيڬر >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ace_Arab,python,"

def strlen(string: str) -> int:
    """"""ڤڠهوجوڠ ڤرجالنن ستراين يڠ دبري >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ace_Arab,python,"

def largest_divisor(n: int) -> int:
    """"""اونتوق نومبور n يڠ دبري، ماچم نومبور يڠ ڤاليڠ بسر يڠ منيمبا ن سچارا سيبوق، لابه دري n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ace_Arab,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""ڤرلو دڤرتوان اڤابيلا فكتور فكتور اول دڤرتوان اڤابيلا فكتور فكتور اول دڤرتوان اڤابيلا فكتور فكتور اول دڤرتوان اڤابيلا فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فكتور فوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوكوك""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ace_Arab,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""دري ليستيڠ اينتيڬر، مڠحاصيلكن سموا ايليمن يڠ برلاكو لبيه دري ساتو. مڠحاصيلكن اورد ايليمن يڠ دتروسكن سام دڠن دالم اينتاوت. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ace_Arab,python,"

def flip_case(string: str) -> str:
    """"""اونتوق ستراين يڠ دبري، فليڤ كايسر مينيس كايسر اوتارا دان مينيس كايسر اوتارا. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ace_Arab,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""كونكاتينات ليهت سورت-سورت دالم ساتو سورت >>> كونكاتينات ((([]) ' ' >>> كونكاتينات ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ace_Arab,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""ڤيلتر ليست ڤڠمبيلن ستراين اونتوق اورڠ-اورڠ يڠ برمولا دڠن ڤريفيکس يڠ دبري. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ace_Arab,python,"

def get_positive(l: list):
    """"""مروڤاكن ڤوسيتيف دالم لنتارا. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1]""""""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ace_Arab,python,"

def is_prime(n):
    """"""ريترون ڤرنه لوڤا جك ڤيهق ڤرميت، دان ڤرنه لوڤا لاڬي. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ace_Arab,python,"import math


def poly(xs: list, x: float):
    """"""find_zero مروڤاكن ڤوست ڤونچا يڠ برڤوتينسي دان ڤوست ڤونچا يڠ ڤاليڠ بسر. >>> round ((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""مڠهالڠكن ڤولينوميل دڠن كوايفيسين xs د ڤوت x. مروڤاكن xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ace_Arab,python,"

def sort_third(l: list):
    """"""فانسي ڽو مڠڬوناكن ليست l ڠن مروڤاكن ليست l' يڠ جاوت جاوت ليست l يڠ اديتديك كاو l دالم اينديكس يڠ هان بوليه دباڬي لي تراي، سيودڠكن ۏاليوڽ دالم اينديكس يڠ بوليه دباڬي لي تراي سام دڠن ۏاليو اينديكس يڠ بربيدا دري l، تتاڤي دڤاوڬيت. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ace_Arab,python,"

def unique(l: list):
    """"""مروڤاكن ايليمن يڠ تيدق ترڤيليه دالم ليست >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ace_Arab,python,"

def max_element(l: list):
    """"""مروڤاكن ايليمن ماكسيما دالم لنتڠ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ace_Arab,python,"

def fizz_buzz(n: int):
    """"""مروڤاكن ڤندودوق يڠ دڤرتوان اڬوڠ دالم ڤرلمباڬان يڠ دڤرتوان اڬوڠ يڠ دڤرتوان اڬوڠ""""""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ace_Arab,python,"

def sort_even(l: list):
    """"""فانسي ڽو مڠڬوناكن ليست l ڠن مروڤاكن ليست l' يڠ جاوت كاو l يڠ ادنتيك كاو l دالم اينديكس ڤرچاي، سيودڠكن ۏاليو جيه دالم اينديكس ڤرچاي سام دڠن ۏاليو اينديكس ڤرچاي l، تتاڤي دڤاوڬيت. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ace_Arab,python,"

def encode_cyclic(s: str):
    """"""مڠڬوناكن سباڬاي سورت ڤڠڬوناان يڠ دكودكن دڠن فڠسي encode_cyclic. مروڤاكن سورت ڤڠڬوناان يڠ دكودكن.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""مروڤاكن سورت يڠ دكنل دڠن ڬروڤ-ڬروڤ سيکل دري تيڬ كاراكتر""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ace_Arab,python,"

def prime_fib(n: int):
    """"""prime_fib مروڤاكن نومبور ك-ن يڠ اداله نومبور فيبوناتچي دان جوڬ ڤرميت. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ace_Arab,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero مڠاخد ليم ايليمن اينتيجر سباڬاي ڤڠمبيلن. اي مروڤاكن سچارا سچارا اڤابيلا ترداڤت تيڬ ايليمن يڠ بربيذا دالم ليم ايليمن يڠ بربيذا كڤد زيرو، دان فولس لاڬي. >>> triple_sum_to_zero (([1, 3, -2, 1]) فولس >>> triple_sum_to_zero (([1, 3, -2, 1]) سچارا سچارا >>> triple_sum_to_zero (([1, 2, 3, 7]) فولس >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) فولس""""""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ace_Arab,python,"

def car_race_collision(n: int):
    """"""مڠتاهوي جالن يڠ سڤرتي جالن يڠ تيدق بركاءيتن. n ڤرڬي مڠهادڤي كاوسن كاوسن كاوسن; ڤد ماس سام، سيڤوڠن ڤرڬي يڠ لاءين دري n ڤرڬي مڠهادڤي كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن. دوا سيڤوڠن ڤرڬي مڠهادڤي كاوسن يڠ لاما دري سيسي. سموا ڤرڬي مڠهادڤي كاوسن يڠ سام. دوا ڤرڬي دكاتاكن مڠهادڤي كاوسن يڠ مڠهادڤي كاوسن يڠ مڠهادڤي كاوسن يڠ مڠهادڤي كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن كاوسن ك""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ace_Arab,python,"

def incr_list(l: list):
    """"""ليمت ڤرجالنن دڠن ايليمن يڠ دڤاوڬيت اوليه ١. >>> incr_list (([١، ٢، ٣]) [٢، ٣، ٤] >>> incr_list (([٥، ٣، ٥، ٢، ٣، ٣، ٩، ٠، ١٢٣)) [٦، ٤، ٦، ٣، ٤، ٤، ١٠، ١، ١٢٤]""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ace_Arab,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero مڠاخد ليمت اينتيجر سباڬاي ڤڠمبيلن. اي مروڤاكن سچارا سچارا اڤابيلا ترداڤت دوا ايليمن يڠ بربيدا دالم ليمت يڠ مروڤاكن سومتڽ هيڠڬ صفر، دان فولس سچارا لاين. >>> pairs_sum_to_zero (([1, 3, 5, 0]) فولس >>> pairs_sum_to_zero (([1, 3, -2, 1]) فولس >>> pairs_sum_to_zero (([1, 2, 3, 7]) فولس >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) فولس >>> pairs_sum_to_zero (([1])""""""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ace_Arab,python,"

def change_base(x: int, base: int):
    """"""مڠوبه اساس نوميريال دري نومر ڤڠمبيلن x كاو اساس. ڤرڤوستاكأن ستراينج ڤد ڤڠمبيلن. نومر اساس اداله كورڠ دري 10. >>> مڠوبه_باس(8, 3) '22' >>> مڠوبه_باس(8, 2) '1000' >>> مڠوبه_باس(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ace_Arab,python,"

def triangle_area(a, h):
    """"""دبري لڠسوڠ سيبوق ڠن لوڠسوڠ ڤيلاي ڤرجالنن اونتوق سيڤولوه سيڤولوه. >>> سيڤولوه سيڤولوه""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ace_Arab,python,"

def fib4(n: int):
    """"""ڤڠاروه ڤڠاروه Fib4 اداله ڤڠاروه يڠ سام دڠن ڤڠاروه Fibbonacci يڠ دڤرچايأي سڤرتي يڠ دڤرتوان اڤ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). كلوارله منوليس فانسي اونتوق مڠحساب ايليمن ك-ن ڤڠاروه ڤڠاروه ڤڠاروه ڤڠاروه ڤڠاروه fib4. تيدق مڠڬوناكن ريكورسي. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ace_Arab,python,"

def median(l: list):
    """"""ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست ڤوست""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ace_Arab,python,"

def is_palindrome(text: str):
    """"""چريتاكن اڤابيلا سورت دبريكن اداله ڤاليندروم >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ace_Arab,python,"

def modp(n: int, p: int):
    """"""ڤاتوه 2^n مودولو p (تڤت دڤاودڠكن دڠن نوميريك). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ace_Arab,python,"

def encode_shift(s: str):
    """"""مڠڬوناكن سباڬاي سورت ڤڠڬمبڠن يڠ دكودكن دڠن فڠسأن encode_shift. مروڤاكن سورت ڤڠڬمبڠن يڠ دكودكن.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""مروڤاكن ستروڠ يڠ دكنل دڠن مڠڬوناكن ستياڤ حروف دڠن 5 دالم ابجد.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ace_Arab,python,"

def remove_vowels(text):
    """"""remove_vowels اداله فانسي يڠ مڠمبيل سورت دان مڽرو سورت تنڤا ۏوكل. >>> remove_vowels ((('') ' ' >>> remove_vowels ((('abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ace_Arab,python,"

def below_threshold(l: list, t: int):
    """"""ريترون True اڤاکه سموا نومبور دالم ليمه l اد دالم تاهڤ t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ace_Arab,python,"

def add(x: int, y: int):
    """"""جومله دوا نومبور x دان y >>> جومله (((2, 3) 5 >>> جومله (((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ace_Arab,python,"

def same_chars(s0: str, s1: str):
    """"""ڤنتيكاكن اڤابيلا دوا كات نا حروف يڠ سام. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') صحيح >>> same_chars (('abcd', 'dddddddabc') صحيح >>> same_chars (('dddddddabc', 'abcd') صحيح >>> same_chars (('eabcd', 'dddddddabc') غلط >>> same_chars ((('abcd', 'dddddabddce') غلط >>> same_chars (((abcdzzzz', 'dddzzzzdddabc') غلط """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ace_Arab,python,"

def fib(n: int):
    """"""مروڤاكن نومبور فيبوناتشي n-ه. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ace_Arab,python,"

def correct_bracketing(brackets: str):
    """"""brackets اداله ستريڠ دري ""<"" دان "">"". return True اڤابيلا ستياڤ bracket ڤمبوكاين اداله بركاءيتن بركاءيتن ڤمبوكاين. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ace_Arab,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ace_Arab,python,"

def common(l1: list, l2: list):
    """"""مروڤاكن ايليمن كومين يڠ اونيك يڠ دڤرتيمبڠكن اونتوق دوا ليست. >>> كومين (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> كومين (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ace_Arab,python,"

def largest_prime_factor(n: int):
    """"""مروڤاكن فكتور ڤرايم يڠ ڤاليڠ ڤاليڠ بسر دري n. مڠاتسي n > 1 دان هان اداله فكتور ڤرايم. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ace_Arab,python,"

def sum_to_n(n: int):
    """"""sum_to_n اداله فانسي يڠ مڽومبڠكن نومبور دري ١ سمڤأي n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ace_Arab,python,"

def correct_bracketing(brackets: str):
    """"""brackets اداله ستريڠ دري ""("" دان "")"". return True اڤابيلا ستياڤ bracket ڤمبوكاين اداله بركاءيتن bracket ڤنوتوڤ. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""())) True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ace_Arab,python,"

def derivative(xs: list):
    """"""xs ممڤوڽاءي کوفيسيين ڤولينوم. xs[0] + xs[1] * x + xs[2] * x^2 + .... مڽوکوڠ ديريۏيت ڤولينوم دالم بنتوق يڠ سام. >>> ديريۏيت (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ديريۏيت (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ace_Arab,python,"

def fibfib(n: int):
    """"""ڤڠاروه ڤڠاروه FibFib اداله ڤڠاروه يڠ سام دڠن ڤڠاروه Fibbonacci يڠ دڤرچايأي سڤرتي يڠ دڤرتوان اڤ: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3 . كلواركن منوليس فانسي اونتوق مڠحساب ايليمن ك-ن ڤڠاروه ڤڠاروه ڤڠاروه ڤڠاروه fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ace_Arab,python,"
FIX = """"""منوليس فانسي vowels_count يڠ مڠڬوناكن ستريڠ يڠ مروڤاكن ساتو كلمأن سباڬاي اينڤوت دان مروڤاكن ڤڠتاهوان ۏوكل دالم ستريڠ. ۏوكل دالم كيس اين اداله 'a', 'e', 'i', 'o', 'u'. دمان، 'y' جوڬ اداله ۏوكل، تتاڤي ڤون ڤد اخير كلمأن. چونتوه: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""مڠاداكن لاڬي كيس ڤرچاكڤن""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ace_Arab,python,"
def circular_shift(x, shift):
    """"""سيريکلور ڤڠڬوناءن ديڬيت انتيڬر x، ڤڠڬوناءن ديڬيت ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ك ڤڠڬوناءن ڤڠڬوناءن ڤڠڬوناءن ڤڠڬوناءن ڤڠڬوناءن ڤڠڬوناءن ڤڠڬوناءن ڤڠڬوناءن ڤڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠ""""""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ace_Arab,python,"
def digitSum(s):
    """"""ڤرکارا منوليس فانسي يڠ مڠݢوناکن سکرين سباݢاي اينڤوت دان مڽروڤاکن سومبڠن کراتير اوتام ASCII. چونتوه: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ace_Arab,python,"
def fruit_distribution(s,n):
    """"""دالم توكڠ اين، كامو اكن دبريكن سبواه سورت يڠ مروڤاكن ڤڽاكيت بوميڤوترا دان بوميڤوترا يڠ دڤربوات دالم سبواه كيس بوميڤوترا اين مروڤاكن بوميڤوترا، بوميڤوترا، دان بوميڤوترا مانجو. دبريكن سورت يڠ مروڤاكن ڤڽاكيت بوميڤوترا دان بوميڤوترا دان بوميڤوترا دان بوميڤوترا دان بوميڤوترا يڠ مروڤاكن ڤڽاكيت بوميڤوترا دالم كيس مروڤاكن بوميڤوترا دالم كيس. چونتوهڽ: fruit_distribution""5(بوميڤوترا دان بوميڤوترا،"" 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 بوميڤوترا دان بوميڤوترا،"" 3) -> 3 - 0 - 1 = 2 fruit_distribution""2 بوميڤوترا دان بوميڤوترا،"" 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 بوميڤوترا دان بوميڤوترا،"" 1"") 1 -> 120 - 100 - 100 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ace_Arab,python,"
def pluck(arr):
    """"""""دالم مڠمبيل ارري يڠ مروڤاكن سبواه ڤڠڬيل دري سدر يڠ نا نوڬيتف اينتيڬري نون-نيڬاتيف توك ڤركارا توك اداله اونتوق ممبيل ساتو دري نوڬ دان مروڤاكنڽ. نوڬ يڠ دڤيليه ڤرلو جادي نوڬ دڠن ۏاليوم جاوت يڠ ڤاليڠ كلوار. اڤابيلا ببراڤ نوڬ دڠن ۏاليوم جاوت يڠ ڤاليڠ كلوار دڤيليه مروڤاكن نوڬ يڠ نا اينديكس يڠ ڤاليڠ كلوار. نوڬ يڠ دڤيليه ڤرلو دڤيليه دالم ليست، [smallest_value، ايندكسڽ]، اڤابيلا تيدق اد ۏاليوم جاوت اتاو ارري يڠ دڤيليه ڤاليڠ كلوار، مروڤاكن []. چونتوه: ڤرتمبڠن: [4,2,3] ڤرتمبڠن: [2, 1] ڤرتمبيان: 2 اداله ڤاليڠ كلوار، دان 2 اداله اينديكس يڠ كلوار. چونتوه: [1,2,3] ڤرتمبيان: [1,2,3] ڤرتمبيان: 2 اد ڤرتمبيان: 2 اد ڤرتمبيان ڤرتمبيان: 2 اد ڤرتمبيان ڤرتمبيان ڤرتمبيان ڤرتمبيان ڤرتيمڤن ڤرتيمڤن ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤان ڤيمڤ""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ace_Arab,python,"
def search(lst):
    '''اكو دبري ليستيڠ ڤوسيتيف اينتيڬر يڠ هان ڤوسيتيف. ڤرنه منچاري اينتيڬر يڠ ڤاليڠ بسر يڠ لابه دري صفر، دان نا فريكسينس لياوبيه دري اتاو سام دڠن قدر اينتيڬر ايت سنديري. فريكسينس انتيڬر اداله ڤڽاتوان ڤڽاتوان يڠ دڤاڤت دالم ليستيڠ. اڤابيلا تياد ڤريستيوا يڠ لاڬي، ڤرنه منچاري -1. چونتوه: search (([4, 1, 2, 2, 3, 1]) == 2 search (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ace_Arab,python,"
def strange_sort_list(lst):
    '''دڤاوڬيت لنتاي اينتڬري، لنتاي ترسبوت دڤاودڠ دالم اوردين يڠ بيجق. ڤڠوروسن يڠ بيجق، اداله اڤابيلا اكو مولا دڠن قدر مينيموم، لالو ماكسيما ڤد اينتڬري يڠ لاما، لالو مينيموم دان سباڬايڽ. چونتوه: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ace_Arab,python,"
def triangle_area(a, b, c):
    '''دبريكن اوبه دري تيڬ بنتوق دري سڬي تيڬ. مروڤاكن ڤلواڠ دري تيڬ بنتوق ديسمل 2 اڤابيلا تيڬ بنتوق ممبنتوق سڬي تيڬ يڠ بوليه. دالم لاين مروڤاكن -1 تيڬ بنتوق ممبنتوق سڬي تيڬ يڠ بوليه دڤرتوان اڤابيلا سومبڠن تيڬ بنتوق لبيه بسر دري سڬي تيڬ يڠ بوليه دڤرتوان اڤابيلا سومبڠن تيڬ بنتوق لبيه بسر دري سڬي تيڬ يڠ بوليه دڤرتوان اڤابيلا سومبڠن تيڬ بنتوق لبيه بسر دري سڬي تيڬ يڠ بوليه دڤرتوان اڤابيلا سومبڠن تيڬ بنتوق لبيه بسر دري سڬي تيڬ يڠ بوليه دڤرتوان اڤابيلا سومبڠن تيڬ بنتوق لبيه بسر دري سڬي تيڬ يڠ بوليه بسر دري سڬي تيڬ بنتوق ڤرتوان'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ace_Arab,python,"
def will_it_fly(q,w):
    '''منوليس فانسي يڠ مروڤاكن True اڤابيلا اوبجيكت q اكن مڠهادڤي، دان False لاڬي. اوبجيكت q اكن مڠهادڤي اڤابيلا اي بربيلانس (اين اداله سبواه ليستي ڤاليندروم) دان سومت ايليمنڽ اداله كورڠ اتاو سام دڠن ڤيهق ماكسيما موڠكين w. چونتوه: will_it_fly (([1, 2], 5) â -> False # 1+2 اداله كورڠ دري ڤيهق ماكسيما موڠكين، تتاڤي اي تيدق بربيلانس. will_it_fly (([3, 2, 3], 1) â -> False # اي بربيلانس، تتاڤي 3+2+3 اداله لبيه دري ڤيهق ماكسيما موڠكين. will_it_fly (([3, 2, 3], 9) â -> True # 3+2 اداله لبيه كورڠ دري ڤيهق ماكسيما موڠكين، دان اي بربيلانس. will_it_fly ((([3], â 5) -> True # 3 اداله كورڠ دري ڤيه دري ڤيهق ماكسيما موڠكين موڠكين، دان اي تيدق '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ace_Arab,python,"
def smallest_change(arr):
    """"""دبري ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار ار""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ace_Arab,python,"
def total_match(lst1, lst2):
    '''منوليس فانسي يڠ منوليس دوا ليمت ستريڠ دان مروڤاكن ليمت يڠ نا جوڬ كيرا-كيرا دالم سموا ستريڠ دالم ليمت يڠ لاين. اڤابيلا دوا ليمت ايت اد سڤرتيڽ، مروڤاكن ليمت ڤرتام. چونتوه total_match (([،]) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ace_Arab,python,"
def is_multiply_prime(a):
    """"""منوليس فانسي يڠ مروڤاكن فنتكس يڠ تله دبريكن سچارا سست سڤرتي ڤربواتن دري 3 ڤرميت دان فول سڤرتي لاينڽ. دڠن معلومت (a) اداله كورڠ دري 100. چونتوه: is_multiply_prime(30) == سچارا سست 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ace_Arab,python,"
def is_simple_power(x, n):
    """"""ڤركارا توك اياله اونتوق منوليس فڠسي يڠ مروڤاكن ڤرڤادوان سچارا لوار جادي نومبور x اداله كواس سيبوق n دان فڠس دالم كيس لاين. x اداله كواس سيبوق n جادي n**int=x. چونتوهڽ: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ace_Arab,python,"
def iscube(a):
    '''منوليس فانسي يڠ مڠڬوناكن انجيرو a دان مروڤاكن فاينتور سچارا تيدق سڤاتوتڽ اڤابيلا اينڬير اين اداله كوب ڤد ببراڤ انجيرو. تيتيق: اندا موڠكين مڠاتكن فاينتور ايت سداڠله ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤالي ڤاليڠ ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤالي ڤ'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ace_Arab,python,"
def hex_key(num):
    """"""ڤندودوق دتوكر اونتوق منوليس فانسي يڠ مڠحاصيلكن ارق هيكساديسيمل سباڬاي سورت دان مڠحاصيلكن ڤندودوق هيكساديسيمل يڠ برڤريڠكت (ڤريڠكت ڤريڠكت، اداله ارق طبيعي يڠ لبيه بسر دري 1 يڠ تيدق منجادي ڤرودوق دري دوا ارق طبيعي يڠ لبيه كورڠ). ارق هيكساديسيمل اداله 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ارق ڤريڠكت اداله 2, 3, 5, 7, 11, 13, 17,... جادي ڤرلو مڠتڤيكن ڤندودوق يڠ دڤرتوان اڤابيلا ارق ڤريڠكت دتتڤيكن اياله: 2, 3, 5, 7, B (= ديسيمل 11), D (= ديسيمل 13). تڠكڤن: ڤرودوق ڤرلو دتڤيكن سوده برڤاتوت اتاو سوده باءيق اتاو سوده برڤاتوت، دان سيمبول A,B,C,D,E,F,F سداڠ تيدق ڤرودوق ڤرلو دڤيڠكت.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ace_Arab,python,"
def decimal_to_binary(decimal):
    """"""اكو اكن دبريكن نومبور دالم بنتوق ديسيمل دان ڤركارا اكو اداله اونتوق مڠمبيلڽ كڤد بنتوق باينري. فانسي داڤت مروڤاكن ستراين، دڠن ستياڤ كاراكتر ممڤرتيمبڠكن نومبور باينري. ستياڤ كاراكتر دالم ستراين اكن منجادي '0' اتاو '1'. اكو اكن اد ساتو جوت كاراكتر 'db' د اول دان اخير ستراين. كاراكتر٢ يڠ لبيه اد اونتوق ممبنتو دڠن بنتوق. چونتوه: ديسيمل_تاو_باينري ((15) # مروڤاكن ""db1111db"" ديسيمل_تاو_باينري (32) # مروڤاكن ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ace_Arab,python,"
def is_happy(s):
    """"""سسوڠڬوهڽ جك سسوڠڬوهڽ اي دبريكن كڤد كامو سسترا s. كاوجاڠن كامو اياله اونتوق ممستيكن سسترا ايت برڤاكاين اتاو تيدق. سسترا ايت برڤاكاين اتاو تيدق اڤابيلا لڠكهڽ كيرا-كيرا 3 دان ستياڤ 3 حروف يڠ برتنديڠ اداله بربيذا. چونتوهڽ: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ace_Arab,python,"
def numerical_letter_grade(grades):
    """"""اياله اونتوق مڠمبيل ڬراد كڤد ڤلاجر. ڤلاجر تله ممبنتو الڬوريتم اونتوق مڠمبيل ڬراد. سسواتو يڠ ڤرلو دڤركنلكن اياله، اي تله مڠمبيل كود يڠ دڬوناكن اونتوق مڠمبيل ڬراد. اي تله ممبريكن چريتا ڬراد كڤد ببراڤ ڤلاجر دان اكو ڤرلو منوليس فڠڬونا يڠ بوليه مڠمبيل ڬراد بريتا دڠن مڠڬوناكن تابوڠ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤرتوان اڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ يڠ دڤ دڤ يڠ دڤ دڤ يڠ دڤ دڤ دڤ يڠ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ دڤ د ڤاڽ""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ace_Arab,python,"
def prime_length(string):
    """"""منوليس فانسي يڠ مڠڬوناكن ستراين دان مروڤاكن فول اڤابيلا فولڽ اداله ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت اوليه ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرميت ڤرمين ڤرمين ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم ڤيم""""""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ace_Arab,python,"
def starts_one_ends(n):
    """"""دبريكن اينتيڬر ڤوسيتيف n، مروڤاكن كونتومن ڤوسيتيف اينتيڬر ن-دجيت يڠ برمولا اتاو مڽمڤورناكن دڠن 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ace_Arab,python,"
def solve(N):
    """"""دبريكن انجيڠ ڤوسيتيف N، مروڤاكن سومبڠن كسلوروهن سيڬمڽ دالم بيناير. چونتوه اونتوق N = 1000، سومبڠن سيڬم هاڽ 1 اوڤتوس هاروس جادي ""1"". اونتوق N = 150, سومبڠن سيڬم هاڽ 6 اوڤتوس هاروس جادي ""110"". اونتوق N = 147, سومبڠن سيڬم هاڽ 12 اوڤتوس هاروس جادي ""1100"". ۏاريابيل: @N انجيڠ كونستريكت: 0 â‰¤ N â‰¤ 10000. اوڤتوس: سابوه سترينڠ ارق بيناير """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ace_Arab,python,"
def add(lst):
    """"""دبري ليستي انجيري يڠ هان بيدا، جومله ايليمن جومله يڠ دالم اينديكس بيدا. چونتوه: جومله (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ace_Arab,python,"
def anti_shuffle(s):
    """"""منوليس فانسي يڠ مڠڬوناكن ستراين دان مروڤاكن ۏرسي يڠ دترتبتكن. ۏرسي يڠ دترتبتكن دري ستراين، اداله ستراين د مان سموا كلمات (دڤرباڬايكن دڠن ڤڠالمن) دڤرتوان اڤابيلا سباڬاي كلمات بارو دڠن سموا حروف دترتبتكن دڠن ڤڠالمن يڠ بربنديڠ دڠن قدر ascii. تيتق: اندا بوليه مڠحفظ ڤڠالمن كلمات دان ڤڠالمن ڤرايسين دالم سيسي. چونتوهڽ: anti_shuffle ((('Hi') مروڤاكن 'Hi' anti_shuffle ((('hello') مروڤاكن 'ehllo' anti_shuffle (('Hello World!!!') مروڤاكن 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ace_Arab,python,"
def get_row(lst, x):
    """"""ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد ڤد""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ace_Arab,python,"
def sort_array(array):
    """"""دبري ڤڠاروه ارر يڠ هان نڠڬاتيف، مروڤاكن سيوڤي ارر يڠ دبري ستله ڤڠاروه، جك اكو مڠاروه ارر يڠ دبري دالم اورد يڠ مڽرتاي جك سوم ((تايه ايندكس ڤاليڠ ڤرتام، اخير ايندكس ڤاليڠ كاوم) اداله ڤرنه، اتاو مڠاروهڽ دالم اورد يڠ مڽرتاي جك سوم ((تايه ايندكس ڤاليڠ ڤرتام، اخير ايندكس ڤاليڠ كاوم) اداله ڤرنه. تڠكڤ: * تيدق مڠاڤاكن ارر يڠ دبري. چونتوه: * sort_array[(]) => [] * sort_array[[2, 4, 3, 0, 1, 2, 3, 4, 5]) => [6, 5, 4, 3, 2, 1, 5, 6]) """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ace_Arab,python,"
def encrypt(s):
    """"""مڠمبيل فڠسي encrypt يڠ مڠڬوناكن ستراين سباڬاي ارڬومنت دان مروڤاكن ستراين يڠ دكنلي دڠن حروف الفبيت يڠ دڤرتڠڬوڠ. حروف الفبيت داڤت دكنلي دڠن چارا يڠ مڽببكن حروف-حروف ايت برڤلواڠ دڠن دوا دڤربوات دڠن دوا تمڤت. چونتوهڽ: encrypt ((hi)) مروڤاكن 'lm' encrypt ((asdfghjkl)) مروڤاكن 'ewhjklnop' encrypt ((gf)) مروڤاكن 'kj' encrypt ((et)) مروڤاكن 'ix'""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ace_Arab,python,"
def next_smallest(lst):
    """"""اكو دبري ڤندودوق ڤڠڬيلن. منوليس فانسي next_smallest ((() يڠ مروڤاكن ايليمن كدوا ڤڠڬيلن ڤرتام دالم ڤندودوق. مروڤاكن نين اڤابيلا ايليمن تيدق اد. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == هيڠڬ نين next_smallest (([1, 1]) == هيڠڬ """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ace_Arab,python,"
def is_bored(S):
    """"""اكو اكن دبريكن سستڠه كلمات، دان ڤركارا اكو اداله اونتوق مڠحسابكن ڤندودوق يڠ بركسن. ڤندودوق اداله سستڠه ڤركاتاءن يڠ برمولا دڠن كلمات ""I"". ڤركاتاءن دڤرچايا ?? ي دڠن '.', '؟' اتاو '!'. چونتوهڽ: >>> is_bored ((""Hello world"") 0 >>> is_bored ((""سماءن بليو. سڠه برتنتڠ. ساي مڠهيدوڤكن اڤ يڠ برلاكو"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ace_Arab,python,"
def any_int(x, y, z):
    '''مڠمبيل فانسي يڠ مڠمبيل 3 ڽن. مروڤاكن ڤرڤادوان سچارا سڤرتي ڤرڤادوان يڠ دڤرتوان اڤابيلا ساله ساتو دري ڽن سام دڠن سومبڠن دوا يڠ لاين، دان سموا ڽن اداله اينتڬري. مروڤاكن ڤرڤادوان فول دالم حال-حال لاين. چونتوه ڤرڤادوان سڤرتي ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤرتوان اڤابيلا ڤرڤادوان يڠ ڤرنه دڤادوان ڤرڤادوان يڠ ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤرڤادوان ڤوڤادوان ڤوڤادوان ڤوڤادوان ڤوڤادوان ڤوڤادوان ڤوڤادوان ڤوڤادوان'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ace_Arab,python,"
def encode(message):
    """"""منوليس فانسي يڠ مڠمبيل بريتا، دان مڠكودكن دڠن چارا يڠ مڠمبيل كيس دري سموا حروف، مڠمبيل سموا ۏوكل دالم بريتا دڠن حروف يڠ برلاكو 2 ڤوست سبلوم ۏوكل دالم ابجد بهاس ايڠڬريس. مڠڬڤيكن سلاين حروف. چونتوه: >>> انكود ((('test') 'TGST' >>> انكود ((('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ace_Arab,python,"

def skjkasdkd(lst):
    """"""جك كيت دبري سبواه لنتاي انجيري. كيت ڤرلو منچاري ڤريستاسي ڤرايم يڠ ڤاليڠ بسر دان مروڤاكن سومت دجيتڽ. چونتوه: اونتوق lst = [0,3,2,1,3,5,7,4,5,5,5,5,2,181,32,4,32,3,2,32,324,4,4,3] ڤرودوک ڤرلو جادي 10 اونتوق lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] ڤرلو جادي 25 اونتوق lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ڤرلو جادي 13 اونتوق lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ڤرلو جادي 11 اونتوق lst = [0,81,12,31,21,21] ڤرلو جادي 3 اونتوق lst = [0,1,8,1,2,1,7] ڤرلو جادي 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ace_Arab,python,"
def check_dict_case(dict):
    """"""دڤاوڬيت سبواه ڤمباچ، ريترون ڤوڤول اڤابيلا سموا كليدا اداله سورت دالم حروف ميسين اتاو سموا كليدا اداله سورت دالم حروف بسر، لاين ريترون ڤوڤول فول. فانسي داڤت ريترون فول اڤابيلا ڤمباچ دڤاوڬيت ڤوڤول ڤوڤول تيدق. چونتوه: check_dict_case{""a"":""apple"", ""b"":""banana""}) داڤت ريترون ڤوڤول ڤوڤول ڤوڤول. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) داڤت ريترون فول. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) داڤت ريترون فول. check_dict_case{""NC""STATE:"""", ""Z"":""IP"":""45"") داڤت ريترون ڤوڤول ڤوڤول ڤوڤول ڤوڤول ڤوڤول ڤوڤول ڤوڤول.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ace_Arab,python,"
def count_up_to(n):
    """"""مڠمبيل فانسي يڠ مڠڬوناكن انجيرو يڠ هان نڬاتيف دان مروڤاكن ارري ڤرتام n انجيرو يڠ اداله ڤرميت دان كلوار دري n. چونتوهڽ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]""""""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ace_Arab,python,"
def multiply(a, b):
    """"""مڽمبوت فانسي يڠ مڠڬوناكن دوا انتيڬره دان مروڤاكن ڤرودوق اونيت ديڬيت اونيت. مڠاتسي ڤڠلوارن سداڠ ڤاليڠ ڤاليڠ ڤاليڠ. چونتوه: مڠڬوناكن 148, 412) هاروس مروڤاكن 16. مڠڬوناكن 19، 28 هاروس مروڤاكن 72. مڠڬوناكن 2020، 1851 هاروس مروڤاكن 0. مڠڬوناكن 14، 15 هاروس مروڤاكن 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ace_Arab,python,"
def count_upper(s):
    """"""دڤاوڬيت سترين s، منومبڠكن ڤڠڬيات ڤوكل اوتارا دالم اينديكس جاوت. چونتوهڽ: count_upper (('aBCdEf') مروڤاكن 1 count_upper (('abcdefg') مروڤاكن 0 count_upper (('dBBE') مروڤاكن 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ace_Arab,python,"
def closest_integer(value):
    '''مڠمبيل فانسي يڠ مڠمبيل ڤرمايسوري (سترينق) يڠ مروڤاكن ساتو ڤرتي دان مروڤاكن انتيڬر يڠ ڤاليڠ كلوار دريڽ. اڤابيلا ڤرتي ايت بربيذا دري دوا ڤرتي، ڤرلو مڠورونكنڽ دري صفر. چونتوه >>> closest_integer (((""10"") 10 >>> closest_integer (((""15.3"") 15 تيتق: مڠورونكن دري صفر برمعنى اڤابيلا ڤرتي يڠ دبريكن بربيذا دري دوا ڤرتي، ڤرتي يڠ ڤرلو دڤرچايأي اداله ڤرتي يڠ ڤاليڠ ڤاليڠ ڤاليڠ دري صفر. دالم چونتوه اين، closest_integer (((14.5"") بوليه مروڤاكن 15 دان closest_integer (((-14.5"") بوليه مروڤاكن -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ace_Arab,python,"
def make_a_pile(n):
    """"""دبريكن انجيڠ ڤوسيتيف n، كامو ڤرلو ممبنتو ڤولڠ دري n ليۏل بوهن. ليۏل ڤرتام نا n بوهن. جومله بوهن د ليۏل يڠ جاوت اداله: - يڠ جاوت جومله ڤرنه جاوه جك n اداله ڤرنه جاوه. - يڠ جاوت جاوه جاوه جاوه جك n اداله ڤرنه جاوه. مروڤاكن جومله بوهن د ستياڤ ليۏل دالم ليستي، د مان ايليمن د ايندكس i مروڤاكن جومله بوهن د ليۏل (i+1). چونتوه: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ace_Arab,python,"
def words_string(s):
    """"""جك كيت دبريكن ستري كلمات يڠ دباڬيكن اوليه كوما اتاو ڤاسڠن، كيت داڤت مڠڬالقكن ستري كلمات ايت كڤد كلمات دان مڽاتاكن سبواه ارري كلمات. چونتوهڽ: words_string ((""ساي، نام ساي جوهن"") == [""ساي""، ""مي""، ""نام""، ""ساي""، ""جون""] words_string ((""ساي، دوا، ترده، چو، ليم، انم"") == [""ساي، دوا، ترده، چو، انم، انم""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ace_Arab,python,"
def choose_num(x, y):
    """"""فانسي ڽو مڠڬوناكن دوا نومبور ڤوسيتيف x دان y دان مروڤاكن نومبور انجيڬر ڤونچق يڠ ڤاليڠ بسر يڠ دالم رينج [x, y] سيكلوڤوس. جادي جيه هان اد نومبور ڽواي، فانسي ڽو ڤستي مروڤاكن -1. چونتوهڽ: choose_num ((12، 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ace_Arab,python,"
def rounded_avg(n, m):
    """"""جك كيت دبري دوا عدد اينتيجر ڤوسيتيف n دان m، دان ڤركارا كيت اداله اونتوق مڠحساب ڤرتڠهن عدد اينتيجر دري n سمڤاي m (تنتوكن n دان m). مڠهوبوڠكن جواڤن كڤد عدد اينتيجر يڠ ڤاليڠ كوكوڠ دان مڠمبيلڽ كڤد باينري. جك n لبيه بسر دري m، مڠرجكن -1. چونتوه: rounded_avg ((1، 5) => ""0b11"" rounded_avg ((7، 5) => -1 rounded_avg ((10، 20) => ""0b1111"" rounded_avg ((20، 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ace_Arab,python,"
def unique_digits(x):
    """"""دبري ليستياءن ڤوسيتيف اينتيڬر x. مروڤاكن ليستياءن يڠ دڤرتيمبڠ دري سموا ايليمن يڠ تيدق ممڤوڽاءي ايليمن ڤرنه. تيتيق: ليستي يڠ دڤرتيمبڠ ڤرلو دڤرتيمبڠ دالم اوروسن يڠ مڠوروس. چونتوهڽ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ace_Arab,python,"
def by_length(arr):
    """"""دبريكن سبواه ارري ڤد اينتيجر، منچاري ارر يڠ انتارا 1 دان 9 ترماسوق، مڠورڠكن ارر يڠ دڤرتوان اڬوڠ، دان لالو مڠاجر ستياڤ ݢيت دڠن نام يڠ بركاءيتن دري ""سوم""، ""دوا،"" ""ثري،"" ""ڤرتوم،"" ""ڤنوه،"" ""دوا،"" ""دوا،"" ""سبوت،"" ""سبوت،"" ""تنتو،"" ""نوه"". چونتوهڽ: ارر = [2, 1, 1, 1, 4, 5, 8, 2, 3] -> منچاري ارر -> [1, 1, 2, 2, 3, 4, 5, 8] -> منچاري ارر -> [8, 5, 4, 3, 2, 2, 1, 1] return [""تنتو""، ""دوا""، ""دوا""، ""دوا""، ""دوا""، ""سوم""، ""سوم""] جك ارر ڤاكيت، منچاري ارر: ارر = [] return [] جك ارر ممڤوتيكن ارر يڠ بربيذا: ارر = [1, 1، 1، 55] -> ارر -> [1, 1، 55] -> ارر -> ارر -> ارر، 55 -> ارر، [51]، منچاري ارر = ['، 1] return [']""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ace_Arab,python,"
def f(n):
    """"""مڠيكوت فانسي f يڠ مڠڬوناكن n سباڬاي ڤاراميتر، دان مروڤاكن ليست سيكتور n، سهيڠڬ ڤريستاسي ايليمن د ايندكس i اداله فكتوريل i اڤابيلا i اداله ڤرڤادوان اتاو سومتوم ارق دري 1 هيڠڬ i لاڬي. i برمولا دري 1. فكتوريل i اداله ڤربواتن ارق دري 1 هيڠڬ i (1 * 2 * ... * i). چونتوه: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ace_Arab,python,"
def even_odd_palindrome(n):
    """"""دبريكن اينتڬر ڤوسيتيف n، مروڤاكن توڤل يڠ نا ڤاليندروم اينتڬر ڤرنه دان ڤرنه يڠ ترليبت دالم رينج ((1، n) ، ترماسوق. چونتوه1: ڤڠاتورن: 3 ڤڠاتورن: (1, 2) ڤڠاتورن: اينتڬر ڤاليندروم اداله 1، 2، 3. ساله ساتو دريڽ اداله ڤرنه، دان دوا دريڽ اداله ڤرنه. چونتوه2: ڤڠاتورن: (4, 6) ڤڠاتورن: اينتڬر ڤاليندروم اداله 1، 2، 3، 4، 5، 6، 7، 8، 9، 11. ڤرتومڤوهڽ اداله ڤرنه، دان 6 دريڽ اداله ڤرنه. نوتا: 1. 1 <= n <= 10^3 2. توڤل مروڤاكن ڤاليندروم اينتڬر ڤرنه دان ڤرنه. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ace_Arab,python,"
def count_nums(arr):
    """"""منوليس فانسي count_nums يڠ مڠڬوناكن ارري انتيڬره دان مروڤاكن ڤڠڬونأن ايليمن يڠ نا سومبڠن ديڬيت > 0. جك اد نومبور نڬاتيف، لالو ديڬيت ڤرتام يڠ دتوقيڽ اكن دتوقي نڬاتيف: چونتوهڽ -123 اد ديڬيت -1, 2, دان 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ace_Arab,python,"
def move_one_ball(arr):
    """"""كيت اد ارري 'arr' دري N انتيجر arr[1], arr[2], ..., arr[N].تارا ارري دالم ارري اكن دڤرتوا سچارا رندوم. ڤركارا يڠ دڤرتوا اكن اداله ممستيكن اونتوق منداڤت ارري يڠ دڤرتوا سچارا تيدق مڠورڠكن ملالوءي اوڤراسي يڠ دڤرتوا ارري: كيت داڤت ممڤركنلكن اوڤراسي ڤڠورڠكن كڤد كڤد كڤد كڤد. اوڤراسي ڤڠورڠكن كڤد كڤد برمعنى ڤڠورڠكن سموا ايليمن ارري دڠن ساتو ڤوسيسي دالم ارري دالم ڤوسيسي ڤولا يڠ دڤرتوا 0th. اڤابيلا موڠكين اونتوق منداڤت ارري يڠ دڤرتوا سچارا مڠورڠكن ڤوسيسي ڤولا ڤوسيسي ڤولا ڤولا ڤوسيسي ڤولا ڤولا ڤوسيسي ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤولا ڤ""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ace_Arab,python,"
def exchange(lst1, lst2):
    """"""دالم مسئله اين، کامي اکن ممڤرکنلکن ڤرکارا يڠ مڠمبيل دوا ليمت ڤرکارا، دان ممڤرکنلکن اڤابيلا موڠکين برلاکو ڤربادرن ايليمن انتارا ايليمن اونتوق منجاديکن lst1 سباݢاي ليمت ڤرکارا يڠ بربنديڠ. تيدق اد ڤڠحرامن اونتوق ڤربادرن ايليمن انتارا lst1 دان lst2. اڤابيلا موڠکين اونتوق ڤربادرن ايليمن انتارا lst1 دان lst2 اونتوق منجاديکن سموا ايليمن lst1 بربنديڠ، ڤرلو مڽاتاکن ""YES"". دالم ماس لاين، ڤرلو مڽاتاکن ""NO"". چونتوهڽ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" دڤرلوکنله ڤرلوکنن اين مڽاتاکن بهاوا ڤرکارا-ڤرکارا يڠ تيدق ڤرلو.""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ace_Arab,python,"
def histogram(test):
    """"""دبريكن ستريڠ يڠ مروڤاكن حروف مينوس يڠ دڤرباڬايكن سڤيستيك، مروڤاكن سبواه ڤمباچ حروف يڠ دڤرچايا ?? ي دڠن ڤندودوق يڠ ترڤقسا. اڤابيلا ببراڤ حروف برڤنداڤتن سام، مروڤاكن سمواڽ. چونتوه: هيستوڬرم ((('a b c') == {'a': 1, 'b': 1, 'c': 1} هيستوڬرم ((('a b b a') == {'a': 2, 'b': 2} هيستوڬرم ((('a b c a b') == {'a': 2, 'b': 2} هيستوڬرم ((('b b a') == {'b 4}: هيستوڬرم (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ace_Arab,python,"
def reverse_delete(s,c):
    """"""توكيت كيت دبري دوا ستريڠ s دان c، كيت ڤرلو مڠحاصيلكن سموا كاراكتر دالم s يڠ سام دڠن ستريڠ c لالو مڠيكوت اڤابيلا ستريڠ ريساليتسڽ ڤاليندروم. ستريڠ دكنلي ڤاليندروم اڤابيلا مڠيكوت ڤوليه يڠ سام ڤد ڤوليه ڤد ڤوليه ڤد ڤوليه. كيت ڤرلو مڠرجوككن توبل يڠ مڠيلايكن ستريڠ ريساليتس دان True/False اونتوق مڠيكوت. چونتوه كڤد s = ""abcde"", c = ""ae"", ريساليتس ڤرلو جادي ('bcd',False) كڤد s = ""abcdef"", c = ""b"" ريساليتس ڤرلو جادي ('acdef',False) كڤد s = ""abcdedcba"", c = ""abc"", ريساليتس ڤرلو جادي ('cdedc',True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ace_Arab,python,"
def odd_count(lst):
    """"""دبري ليستيڠ ستراين، د مان ستراين ستياڤڽ بركونسيڤ دري ديڬيت، مروڤاكن ليستيڠ. ستياڤ ايليمن i دري اوتڤوت بوليه جادي ""كاءدأن ايليمن ڤرڬي د دالم ستراين i دري اڤوڤت"". د مان سموا ايليمن بوليه دڤاودڠكن دڠن كاءدأن ايليمن ڤرڬي د دالم ستراين ڤرڬي د دالم اڤوڤت. >>> odd_count['1234567']) [""كاءدأن ايليمن ڤرڬي 4n دالم ستراين 4 دري اڤوڤت.""] >>> odd_count['3',""111111""]) [""كاءدأن ايليمن ڤرڬي 1n دالم ستراين 1 دري اڤوڤت. "", ""كاءدأن ايليمن ڤرڬي 8n دالم ستراين 8 دري اڤوڤوڤت.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ace_Arab,python,"
def minSubArraySum(nums):
    """"""دبري سابوه ارري انتيڬره نوم، جاوت سوم مينيموم سابوه ارري نوم يڠ هان بيلا. چونتوه minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ace_Arab,python,"
def max_fill(grid, capacity):
    import math
    """"""مريك دبري سبواه ڬريد ڤركتق دري بوكيت. ستياڤ رينڠ مروڤاكن ساتو بوكيت، دان ستياڤ 1 دالم رينڠ مروڤاكن ساتو اونيت ا ?? ير. ستياڤ بوكيت ممڤوڽاءي سبواه بوبو يڠ دڬوناكن اونتوق مڠيكوت ا ?? ير دريڽ، دان سموا بوبوڽ اد كڤسيتسن يڠ سام. ڤركارا مريك اداله مڠڬوناكن بوبوڽ اونتوق مڠكلكن بوبوڽ. مريك ڤرلو مڠيڠتكن ڤندودوق يڠ ڤرلو مڠكلكن بوبوڽ. چونتوه: ڤڠڬوناان: ڬريد: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] بوكيت_كڤسيتس: 1 ڤڠڬوناان: 6 ڤڠڬوناان: ڤڠڬوناان: [[0,0,1,1], [0,0,0,0,0,0,0,1,0], [0,1,1,1] بوكڤسيتس: 1 ڤڠڬوناان: 5 ڤڠڬوناان: 0 * ڤڠڬوناان: 0 * ڤڠڬوناان: 1 * ڤڠڬوناان: 1 * كڤسيتس: 1 * كڤن: 1 * كڤسيتسيتس: 10 * جريتا ڬريد: * جريتوهن ڬريد: * جريتڠ ڬريد: جريتڠ ڬريد: ج======== ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج= ج=""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ace_Arab,python,"
def sort_array(arr):
    """"""دالم كاتا اين، كامو ڤرلو منچاري ارري ڤد انتيڬري يڠ تيدق نڬاتيف برداسركن كڤد ڤندودوق دالم ڤرسمبهن باينري دالم اوردين مڠورڠ. اونتوق ڤندودوق يڠ سام، منچاري برداسركن قدر ديسيمل. ڤرلو دڤركنلكن سڤرتي اين: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ace_Arab,python,"
def select_words(s, n):
    """"""دبريكن ستريڠ s دان سبواه نومبور فطري n، كامو دڤرلوكن اونتوق ممڤركنلكن فڠكشن يڠ مروڤاكن سبواه لنتاي سوده سڤرتي كلمات دري ستريڠ s يڠ ممڤوڽاءي كسن كسن سڤرتي اين، اونتوق كلمات اين برلاكو د ستريڠ s. اڤابيلا ستريڠ s بيلا مك فڠكشن ڤرلو مروڤاكن سبواه لنتاي بيلا. تيتيق: كامو موڠكين مڠڬڤ ستريڠ اينڤوت ممڤوڽاءي سلاكو حروف دان ڤرساتوان. چونتوه: سليكت_ڤوڽا ﴿ماري سوده ممڤوڽاءي كرنمبڠ﴾، ﴿ماري سوده ممڤوڽاءي كرنمبڠ﴾، ﴿ماري سوده ممڤوڽاءي كرنمبڠ﴾، ﴿ماري سوده ممڤوڽاءي كرنمبڠ﴾، ﴿ماري سوده ممڤوڽاءي كرنمبڠ﴾، ﴿ماري سوده ممڤوڤوڽاءي كرنمبڠ﴾، ﴿ماري سوده ممڤوڽاءي كرنمبڠ﴾، ﴿ماري سلاكو﴾، ﴿ماري سولو﴾، ﴿ماري سولو﴾، ﴿موريڠ﴾""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ace_Arab,python,"
def get_closest_vowel(word):
    """"""جك كاتاڽ دبريكن كڤد كامو. ڤركارا كامو اداله اونتوق مميليه ۏوكل يڠ ڤاليڠ كسلوروهن يڠ بركنا ?? ن انتارا دوا كسنونن دري سڤنجڠ كاتاڽ (سڤنجڠ حاصيل). ۏوكل د ڤرتام دان اخير تيدق دڤڠڬيل. مڠلواركن سڬالا سڬالا ۏوكل يڠ دڤرتوا شرط دولو. كامو موڠكين مڠاتكن بهاوا سڬالا سڬالا ۏوكل يڠ دبريكن اداله حروف بهاس ايڠڬريس. چونتوهڽ: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ace_Arab,python,"
def match_parens(lst):
    '''سستراڠ S دأڠݢڤ سباݢاي سستراڠ يڠ باءيق جک سستراڠ S بربنديڠ دڠن سستراڠ ""(()) "" يڠ باءيق، سستراڠ ""(()) "" يڠ باءيق، سستراڠ ""((()) "" يڠ باءيق، سستراڠ ""((() "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" (((()) "" يڠ باءيق، سستراڠ "" ((((()) "" يڠ باءيق، سستراڠ "" ((()) "" يڠ باءيق'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ace_Arab,python,"
def maximum(arr, k):
    """"""دبريكن ارري انتيجر دان ڤوسيتيف اينتيجر k، مروڤاكن ليمت يڠ دڤرتوا دڠن ماكسيما k ڤد ارر. چونتوه1: ڤڠاچارا: ارر = [-3، -4, 5], ك = 3 ڤڠاچارا: [-4, -3, 5] چونتوه2: ڤڠاچارا: ارر = [4, -4, 4], ك = 2 ڤڠاچارا: [4, 4] چونتوه3: ڤڠاچارا: ارر = [-3, 2, 1, 2, -1, -2, 1], ك = 1 ڤڠاچارا: [2] نوتا: 1. ليمت ارر بوليه دالم رينجڠ [1, 1000]. 2. ايليمن دالم ارر بوليه دالم رينجڠ [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ace_Arab,python,"
def solution(lst):
    """"""دبري ليستي انجيري يڠ هان بيدا، مروڤاكن سومتاو سموا ايليمن ڤرڬي يڠ دالم ڤوسيسي جاوت. چونتوه ڤرسيولسي (([5, 8, 7, 1]) ==> ڤرسيولسي 12 (([3, 3, 3, 3, 3]) ==> ڤرسيولسي 9 (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ace_Arab,python,"
def add_elements(arr, k):
    """"""دبري سابوه ارري يڠ هان بياسا دري اينتيڬر ار ار دان اينتيڬر ك، مروڤاكن سومبڠن ايليمن دڠن ماكسمڽ دوا ديڬيت دري ايليمن k ڤرتام ار. چونتوه: ڤاودم: ار = [111,21,3,4000,5,6,7,8,9], ك = 4 ڤاودم: 24 # سومبڠن 21 + 3 كونستراكت: 1. 1 <= لينار) <= 100 2. 1 <= ك <= لينار)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ace_Arab,python,"
def get_odd_collatz(n):
    """"""دڤاودڠ ڤوسيتيف اينتڬري n، مروڤاكن سبواه ليمت يڠ دڤرتوا يڠ نا نومبور بيادڤ دالم سيکينسي كولاتز. كونچيتر كولاتز اداله كونچيتر دالم ماتماتيك يڠ برتنتڠن دڠن سيکينسي يڠ دڤرتوان اڤابيلا: مولا دڠن سموا اينتڬري ڤوسيتيف n. لالو ستياڤ اصطلاح دڤيليه دري سيکينسي يڠ سبلومڽ سڤرتي يڠ دڤرتوان اڤابيلا سيکينسي سبلومڽ اداله جومله، سيکينسي يڠ سبلومڽ اداله 3 كالي سيکينسي سبلومڽ ڤلس 1. كونچيتر اداله بهاوا تيڠڬي n، سيکينسي سداڠكن منچاڤي 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ace_Arab,python,"
def valid_date(date):
    """"""اكو ڤرلو منوليس فانسي يڠ مڠمبيل ڤرسمبهن ستريڠ تاريخ دان مڽروڤاكن ڤرسمبهن True اڤابيلا تاريخ ڤرسمبهن سچارا سچارا ڤرلو اتاو false. تاريخ ڤرسمبهن سچارا سچارا سچارا سچارا اڤابيلا سموا قاعده يڠ دلاكوكن اياله: 1. ستريڠ تاريخ تيدق چوكوڤ. 2. ڤڽوكوڠ هاري تيدق كورڠ دري 1 اتاو لبيه دري 31 هاري اونتوق بولن 1,3,5,7,8,10,12. دان ڤڽوكوڠ هاري تيدق كورڠ دري 1 اتاو لبيه دري 30 هاري اونتوق بولن 4,6,9,11. دان، ڤڽوكوڠ هاري تيدق كورڠ دري 1 اتاو لبيه دري 29 اونتوق بولن 2. بولن تيدق بوليه كورڠ دري 1 اتاو لبيه دري 12. تاريخ ڤرسمبهن ڤرلو دالم ڤورتم: mm-dd-yyyy سڤرتي: valid_date (('03-11-2000') => True_valid_date (~) => False valid_date (~) valid_date (~) valid_date (~) valid_date (~) valid_date (~) valid (~)""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ace_Arab,python,"
def split_words(txt):
    '''دبريكن ستريڠ كلمات، مروڤاكن سبواه ليم كلمات يڠ دڤرباڬايكن دڠن ڤڠڬيلن، جك تيدق اد ڤڠڬيلن دالم تيكس، مروڤاكن ڤڠڬيلن دڠن كومما '، جك تيدق اد كومما، مروڤاكن ڤڠڬيلن ڤد حروف-حروف مينوس دڠن اوروسن بيجق دالم ابجد، ord ((('a') = 0، ord ((('b') = 1، ... ord ((('z') = 25 چونتوه ڤڠڬيلن_كلمات ((""سلام دنيا!"") â -> [""سلام،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،،'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ace_Arab,python,"
def is_sorted(lst):
    '''دڤاوڬيت ليمت نومبور، ڤرلو دڤرچايا ?? ي اڤابيلا دڤرچايا ?? ي دالم اوردين يڠ برڤاڬي. اڤابيلا ليمت برڤاڬي لبيه دري 1 دوڤليک دري نومبور سام، ڤرلو دڤرچايا ?? ي False. تيدق اد نومبور نيڬاتيف دان هاڽ اينتيڬر. چونتوه is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> True is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ace_Arab,python,"
def intersection(interval1, interval2):
    """"""جك دبريكن كدوا انتارڤل، ستياڤ انتارڤل اداله جوري انجيڠ. چونتوهڽ انتارڤل = (ڤرتام، اخير) = (1, 2). انتارڤل دبريكن چدرا يڠ برمعنى انتارڤل (ڤرتام، اخير) ترماسوق ڤرتام دان اخير. باڬي ستياڤ انتارڤل دبريكن، اي دڤرلوكن ڤرتامڽ اداله كلوار اتاو سام دڠن اخيرڽ. ڤركارا يڠ دبريكن اداله اونتوق ممستيكن اڤابيلا لڠسوڠ انتارڤل ايت اداله ڤرميت. چونتوهڽ، انتارڤل (1, 3), (2, 4) اداله (2, 3) يڠ لڠسوڠڽ اداله 1، يڠ تيدق ڤرميت. جك لڠسوڠ انتارڤل ايت اداله ڤرميت، ڤرلو مڽاتاكن ""YES""، جك تيدق، ڤرلو مڽاتاكن ""NO"".""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ace_Arab,python,"
def prod_signs(arr):
    """"""اكو دبري ارري ار ارن اينتيجر دان اكو ڤرلو مروڤاكن سومبڠن ڬانل ارن اينتيجر يڠ دكربوكن اوليه ڤربواتن سموا تندا ستياڤ ارق دالم ارر، يڠ دڤرتوان اكو اوليه 1،-1 اتاو 0.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ace_Arab,python,"
def minPath(grid, k):
    """"""دڤرتوان اݢوڠ دڠن N رنچان دان N ستله (N >= 2) دان ساتو ڤوسيتيف اينتڬري k، ستياڤ سيل دري اينتڬري مڠمبيل ۏاليوم. ستياڤ اينتڬري دالم رنچان [1, N * N] ترماسوق برلاكو سام-سام ساتو ڤد سيل دري اينتڬري. اكو ڤرلو مميليه ڤاسر مينيموم دالم اينتڬري. اكو بوليه برمولا دري سيل سياڤا، دان دالم ستياڤ ڤاسر اكو بوليه برلاكو كڤد سيل-سيل برسام، دڠن كات لاين، اكو بوليه برلاكو دڠن سيل-سيل يڠ برسام-سام دڠن اكو. اكو تيدق بوليه برلاكو دري اينتڬري. ڤاسر A (ڤاسر مينيمن k) بوليه دأڠڬڤ سباڬاي ڤاسر مينيمن دري ڤاسر B (ڤاسر مينيمن دري K) اڤد ڤاسر A دان B (كيتله كيت مڠڬوناكنڽ l_st_A دان l_st_st_ lA دان l_st_ lB) ، l_st_ l_ l_b) l_b، l_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ace_Arab,python,"
def tri(n):
    """"""هرڅوک د فيبوناتچي تسلسل پوهيږي، دا په تيره دوه پېړيو کې د رياضي پوهانو له خوا ژور مطالعه شوى. په هرحال، هغه څه چې خلک نه پوهيږي هغه د تريبوناتچي تسلسل دى. د تريبوناتچي تسلسل د تکرار له مخې تعريف شوى: tri(1) = 3 tri(n) = 1 + n / 2، که n جوړه وي. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) ، که n عادي وي. د بېلګې په توګه: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 تاسو ته يو غير منفي عدد ورکړل شوى، تاسو بايد د تريبوناتچي تسلسل د لومړي n + 1 عددونو يو لړى بيرته راولئ. مثالونه: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ace_Arab,python,"
def digits(n):
    """"""دڤاوڬيت ڤوسيتيف اينتڬر n، مروڤاكن ڤرودوك ديڬيت ڤرڬي. مروڤاكن 0 جك سموا ديڬيت اداله ڤرڬي. چونتوهڽ: ديڬيتس ((1) == 1 ديڬيتس ((4) == 0 ديڬيتس ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ace_Arab,python,"
def is_nested(string):
    '''منوليس فانسي يڠ مڠڬوناكن ستراين سباڬاي اينتوم يڠ تله ممڤوڽاءي كراكت تربوک. فانسي ايت بوليه مڠرجاكن True اڤابيلا دان هاڽ اڤابيلا اد سباكيت يڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤالي ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤالي ڤاليڠ ڤالي'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ace_Arab,python,"

def sum_squares(lst):
    """"""جك كيت دبري سبواه ليمت ارق، كيت ڤرلو مڠلواركن سومبڠن ارق تربسر دالم ليمت يڠ دبريكن، مڠورڠكن ستياڤ ايليمن دالم ليمت كڤد ڤڠورڠ ڤرتام. چونتوه: اونتوق lst = [1,2,3] ڤرلو دڤرتوان اڤابيلا 14 اونتوق lst = [1,4,9] ڤرلو دڤرتوان اڤابيلا 98 اونتوق lst = [1,3,5,7] ڤرلو دڤرتوان اڤابيلا 84 اونتوق lst = [1.4,4.2,0] ڤرلو دڤرتوان اڤابيلا 29 اونتوق lst = [-2.4,1,1] ڤرلو دڤرتوان اڤابيلا 6""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ace_Arab,python,"
def check_if_last_char_is_a_letter(txt):
    '''مڠمبيل فڠسي يڠ مروڤاكن فڠسي True اڤابيلا كاراكتر اخير دري ستراين دبريكن اداله كاراكتر ابجد دان تيدق باڬي سسواتو، دان فڠسي لاين. تيتيق: ""word"" اداله ڬروڤ كاراكتر يڠ دڤرباڬايكن اوليه ڤڠڬيلن. چونتوه: check_if_last_char_is_a_letter"" ""apple pie"") â -> False check_if_last_char_is_a_letter"" ""apple pi e"") â -> True check_if_last_char_is_a_letter"" ""apple pi e"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ace_Arab,python,"
def can_arrange(arr):
    """"""مڠمبيل فانسي يڠ مروڤاكن اينديكس يڠ ڤاليڠ بسر دري ايليمن يڠ تيدق لبيه بسر اتاو سام دڠن ايليمن يڠ سوده ڤرنه برلالوڽ. جك ايليمن يڠ لاين تيدق اد مك مروڤاكن -1. ارري يڠ دبريكن تيدق ممڤوڽاءي قدر دوڤليک. چونتوه: can_arrange (([1,2,4,3,5]) = 3 can_arrange ([1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ace_Arab,python,"
def largest_smallest_integers(lst):
    '''مڠمبيل فانسي يڠ مروڤاكن توڤل (a, b) ، د مان 'a' اداله يڠ ڤاليڠ بسر دري اينتيڬر نيڬاتيف، دان 'b' اداله يڠ ڤاليڠ كورڠ دري اينتيڬر ڤوسيتيف دالم ليست. اڤابيلا تيدق اد اينتيڬر نيڬاتيف اتاو ڤوسيتيف، مروڤاكن اي سباڬاي None. چونتوه: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ace_Arab,python,"
def compare_one(a, b):
    """"""مڠمبيل فانسي يڠ مڠڬوناكن انجيرو، فلوات، اتاو سورت يڠ مروڤاكن ارق ريال، دان مروڤاكن فاريابل يڠ لبيه بسر دالم جنيس فاريابل يڠ دبريڽ. مروڤاكن نيه جك قدرڽ سام. تيتيق: جك ارق ريال دڤرتنديڠي سباڬاي سورت، تيتيق فلوات موڠكين . اتاو، compare_one{1، 2.5} -> 2.5 compare_one{1، ""2,3"") -> ""2,3"" compare_one{5،1""، ""6"") -> ""6"" compare_one{1""، 1) -> نيه """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ace_Arab,python,"
def is_equal_to_sum_even(n):
    """"""ڤندكتن اڤابيلا نومبور n يڠ دبريكن بوليه دتوليس سباڬاي سوم 4 نومبور ڤوسيتيف يڠ ڤوسيتيف. چونتوه is_equal_to_sum_even (٤) == فولس is_equal_to_sum_even (٦) == فولس is_equal_to_sum_even (٨) == ڤرچاي """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ace_Arab,python,"
def special_factorial(n):
    """"""فكتوريل برازيلي دتودوهكن سباڬاي: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! دمان n > 0 چونتوهڽ: >>> special_factorial ((4) 288 فكتوريل خاص دتولق سباڬاي اينتڬر دان ڤرلو مروڤاكن فكتوريل خاص اونتوق اينتڬر """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ace_Arab,python,"
def fix_spaces(text):
    """"""_موسال-3وتاهن سموا ڤوست د دالم ڽن دڠن ڤوتوڠن، دان جك سورت دڤاوڬيت لبيه دري ٢ ڤوست يڠ برتراڠ، لالو ڤاوتاهن سموا ڤوست يڠ برتراڠ دڠن - fix_spaces ((""مثل"") == ""مثل"" fix_spaces ((""مثل1"") == ""مثل_1"" fix_spaces (((""مثل2"") == ""_مثل_2"" fix_spaces (((""مثل 3"") == ""_مثل-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ace_Arab,python,"
def file_name_check(file_name):
    """"""مڠمبيل فڠسي يڠ مڠڬوناكن ستريڠ يڠ مروڤاكن نام فايل، دان مروڤاكن 'Yes' جك نام فايل ايت ڤرلو، دان مروڤاكن 'No' جك تيدق. نام فايل دڤرلوكن ڤرلو جك كسموا شرط يڠ دڤرتوان اڤي: - تيدق بوليه اد لبيه دري تيڬ ديڬيت ('0'-'9') دالم نام فايل. - نام فايل مڠمبيل سڤرتي ساتو dot '.' - سوبسترين سبلوم dot تيدق بوليه بياسا، دان مروڤاكن ڤولا دڠن حروف دري حروف الف لاتين ('a'-'z' دان 'A'Z'). - سوبسترين سلڤس dot ڤرلو جك اداله ساتو دري حروف-حروف اين: ['txt', 'exe', 'lld'] چونتوه: file_name_check""{example.txt.} # => 'Yes'name_file_check""{example.txt.txt.} # => 'No' => '#' (نام فايل بوليه مروڤاكن دڤاكن دڠن حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-حروف-ح-حروف-حروف-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re-re""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ace_Arab,python,"


def sum_squares(lst):
    """""""" فانسي ڽو اكن مڠڬون لوري لوري انتيڬره. اونتوق سموا اينتر دالم لوري ڽو، فانسي ڽو اكن مڠكوا دڠن اينتر اڤابيلا اينديكسڽ اداله ڤربلنجأن دري 3 دان اكن مڠكوا دڠن اينتر اڤابيلا اينديكسڽ اداله ڤربلنجأن دري 4 دان هان ڤربلنجأن دري 3. فانسي ڽو اكن مڠڬونكن اينتر دالم لوري يڠ اينديكسڽ اداله ڤربلنجأن دري 3 اتاو 4. فانسي ڽو اكن مڠوروسكن سومت ڤربلنجأن. چونتوه: اونتوق lst = [1,2,3] اوڤتوم ڤوڤول 6 اونتوق lst = [] اوڤتوم ڤوڤول 0 اونتوق lst = [-1,-5,2,-1,-5] اوڤتوم ڤوڤول -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ace_Arab,python,"
def words_in_sentence(sentence):
    """"""اكو دبريكن ستريڠ يڠ مروڤاكن سيسي، سيسي ايت مليبتكن ببراڤ كلمات يڠ دڤرباتڠكن دڠن سبواه ڤوست، دان اكو ڤرلو مروڤاكن ستريڠ يڠ مليبتكن سيسي دري سيسي اصل، يڠ لڠسوڠڽ اداله ڤرميت، ڤرتموان سيسي دالم سيسي بارو ڤرلو سام دڠن سيسي اوليه. چونتوه1: ڤڠتاهوان: سيسي = ""اين اداله ڤربينچڠن"" ڤڠتاهوان: ""اين"" چونتوه2: ڤڠتاهوان: سيسي = ""ليتا ڬوڬو اونتوق مڽوم"" ڤڠتاهوان: ""ڬوڬو اونتوق"" ڤڠتاهوان: * 1 <= len(sentence) <= 100 * سيسي ايت مليبتكن سيسي حروف """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ace_Arab,python,"
def simplify(x, n):
    """"""توکيت اداله اونتوق مڠمبيل فانکشن يڠ اکن ممڤوڽاءي اڤاکه x * n. فانکشن ايت مروڤاکن True اڤابيلا x * n مروڤاکن ساتو ڤرکاتاءن برکاءيتن دان False دالم کادأن لاين. کدوا-دوا x دان n، اداله ڤرسمبهن ستريڠ ڤرکاتاءن ڤراکسين، دان ممڤوڽاءي فورمت يڠ دڤرتوان اݢوڠ، <نومريتور>/<نومينتور> دمان کدوا-دوا نومينتور اداله ڤرکاتاءن برکاءيتن ڤوسيتيف. کيت موڠکين مڠݢڤ بهاوا x, دان n اداله ڤرکاتاءن يڠ ڤاليڠ ڤاليڠ، دان تيدق ممڤوڽاءي صفر سباݢاي ڤرکاتاءن ڤوسيتيف. simplify ""1/5"", ""5/1"") = True simplify ""1/6"", ""2/1"") = False simplify ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ace_Arab,python,"
def order_by_points(nums):
    """"""منوليس فانسي يڠ مڠورڠكن لنتاي اينتيجر دالم اوردين يڠ برڤرتومبڠ سهيڠڬ سومبڠن ديڬيت-ديڬيتڽ. تاهو: اڤابيلا اد ببراڤ ايتيمن دڠن سومبڠن ديڬيت-ديڬيت يڠ سام، مڠورڠكن ايتيمن-ايتيمن ايت دڠن ايندكسڽ دالم لنتاي اصل. چونتوهڽ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ace_Arab,python,"
def specialFilter(nums):
    """"""منوليس فانسي يڠ مڠڬوناكن ارري ڤڠهوني سباڬاي اينتومن دان مروڤاكن ڤڠهوني ايليمن دالم ارري يڠ لبيه بسر دري 10 دان دوا دجيت ڤرتام دان اخير ڤڠهوني اداله ڤرڬي (1, 3, 5, 7, 9). چونتوهڽ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ace_Arab,python,"
def get_max_triples(n):
    """"""اكو دبريكن انجيڠ ڤوسيتيف n. اكو ڤرلو مڠمبيل ارري انجيڠ a دري لڠكه n. اونتوق ستياڤ i (1 ‰¤ i ‰¤ n) ، ڤرلاونن a[i] = i * i - i + 1. مروڤاكن ڤرلاونن ترڤل (a[i], a[j], a[k]) دري a د مان i < j < k، دان a[i] + a[j] + a[k] اداله ڤربلنجأن دري 3. چونتوه: ڤڠلوارن: n = 5 ڤڠلوارن: 1 ڤڠلوارن: a = [1, 3, 7, 13, 21] يڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ ڤاليڠ""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ace_Arab,python,"
def bf(planet1, planet2):
    '''دالم سيستم سوارا كيت اد 8 ڤلانيت: يڠ ڤاليڠ كوات كڤد ميره اياله ميرواري، يڠ ڤاليڠ كوات كڤد ميره اياله ۏينوس، لالو بومي، مريخ، جوڤيتر، ساترن، اورانوس، نڤتون. منوليس فانسي يڠ مڠڬوناكن دوا نام ڤلانيت سباڬاي ستريڠ ڤلانيت1 دان ڤلانيت2. فانسي ايت داڤت مڽروڤاكن ساتو توڤل يڠ مليبتكن سموا ڤلانيت يڠ اوربيتڽ دتوتوڤ انتارا اوربيت ڤلانيت1 دان اوربيت ڤلانيت2، دتربيتكن اوليه ككورڠن دڠن ميره. فانسي ايت داڤت مڽروڤاكن ساتو توڤل يڠ چوكوڤ اڤابيلا ڤلانيت1 اتاو ڤلانيت2 تيدق ڤلانيت يڠ ڤرلو. چونتوه bf""(جڤيتر""، ""نيڤتوه"") ==> (""ڤينوس"") ==>'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ace_Arab,python,"
def sorted_list_sum(lst):
    """"""منوليس فانسي يڠ منوليس لنتاي سورت سباڬاي ڤاراميتر، مڠحذف سورت يڠ لڠسوڠڽ تيدق بربيذا دريڽ، دان مڽروسيکن سورت يڠ دڤرتوان اݢوڠ دڠن ڤرتنديڠن يڠ دڤرتوان اݢوڠ، سورت ايت سداڠله سباݢاي سورت سورت دان تيدق سباݢاي ارر يڠ دڤرتوان اݢوڠ، دان اي موڠکين ممڤوڽاءي دوڤليکيت. سورت سورت ايت ڤرلو دڤرتوان اݢوڠ دڠن ڤرتنديڠن سورت دڠن ڤرتنديڠن سورت. اڤابيلا دوا ڤرتنديڠن بربيذا، سورت سورت ايت ڤرلو دڤرتنديڠن دڠن حروف الفبيت. فانسي ايت ڤرلو مڽروسيکن سورت سورت دڠن ڤرتنديڠن سورت.""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ace_Arab,python,"
def x_or_y(n, x, y):
    """"""ڤروڬرم يڠ سيبوق يڠ ڤرلو مروڤاكن ۏاليو x اڤابيلا n اداله ڤرميت ڤرميت دان ڤرلو مروڤاكن ۏاليو y اڤابيلا تيدق. چونتوه: اونتوق x_or_y ((7, 34, 12) == 34 اونتوق x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ace_Arab,python,"
def double_the_difference(lst):
    '''دڤاوڬيت ليموڠ ارق، ڤرلو مڽروڤاكن سومبر تربيت ارق يڠ تيدق بربيذا دالم ليموڠ ايت. ڤرلو مڽوروهكن ارق يڠ تيدق سليسا اتاو تيدق اينتيڬر. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 جك ليموڠ اينتوري ڤرلو مڽروڤاكن 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ace_Arab,python,"
def compare(game,guess):
    """"""اكو برهارڤ اكو تاهو بهاوا اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن. اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن. اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن. اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن. اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن. اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن. اڤابيلا اكو تيدق اكن ممڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤرلوكن، اكو تيدق اكن ممڤابيلا اكو تيدق ممڤوڤوڤوڽاءي ڤرلاونن يڠ ساڠت سوده دڤوڤوڽ.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ace_Arab,python,"
def Strongest_Extension(class_name, extensions):
    """"""اكو اكن دبري نام كلاس (سايرن) دان سبواه ڤڠكالن. ڤڠكالن اكن دڬوناكن اونتوق مڠلواركن سيسي كلاس لاان ك كلاس. كقواتن ڤڠكالن اداله سڤرتي يڠ دلاكوكن: كايه CAP اداله كادأن حروف بسر دالم نام ڤڠكالن، دان كايه SM اداله كادأن حروف مينوس دالم نام ڤڠكالن، كقواتن دبري اوليه كروسي CAP - SM. اكو بوليه مڠلواركن ڤڠكالن يڠ ڤاليڠ كقواتن دان مڽاتاكن سيسي دالم بنتوق اين: ClassName.StrongestExtensionName. جك اد دوا اتاو لبيه ڤڠكالن دڠن كقواتن يڠ سام، اكو بوليه مڠلواركن يڠ ڤرتام دالم ليمڤت. چونتوهڽ، جك اكو دبري ""سلايس"" سباڬاي كلاس دان سبواه ڤڠكالن ڤڠكالن: ['SEviSliNGCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliCliC""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ace_Arab,python,"
def cycpattern_check(a , b):
    """"""اكو دبري ٢ كات. اكو ڤرلو مروڤاكن True اڤابيلا كات كدوا اتاو سياڤاڤاڤا ڤرتمڤورنڽ اداله سبستريڠ دالم كات ڤرتام cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ace_Arab,python,"
def even_odd_count(num):
    """"""دڤاوڬيت سابوه اينتڬري. مروڤاكن سابوه توڤل يڠ نا ليڠكوڠن ديڬيت ڤون دان ڤون. چونتوه: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ace_Arab,python,"
def int_to_mini_roman(number):
    """"""دبريكن انجيرو ڤوسيتيف، ماوليهكن ايكن رومي يڠ سام سباڬاي سورت، دان مروڤاكنڽ دالم كاسر مينوس. رينستريكتس: 1 <= num <= 1000 چونتوه: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ace_Arab,python,"
def right_angle_triangle(a, b, c):
    '''دبريكن اوبه دري تيڬ بنته ترڠڬانو. جاديكن True اڤابيلا تيڬ بنته ممبنتوق ترڠڬانو ڤيڠت، False لاڬي. ترڠڬانو ڤيڠت اداله ترڠڬانو د مان ساله ساتو ڤڠهادڤن اياله ڤيڠت ڤيڠت اتاو 90 درجة. چونتوه: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ace_Arab,python,"
def find_max(words):
    """"""منوليس فانسي يڠ منوليس ليستي سورت. ليستي ڽن نا ڤاڽالمن يڠ لاين. مروڤاكن ڤاڽالمن دڠن ماكسيما كادڠ-كادڠ كاراكتر يڠ اونيک. اڤابيلا سورت يڠ لبيه رنده اد ڤاڽالمن كادڠ-كادڠ كاراكتر يڠ اونيک، مروڤاكن ڤاڽالمن يڠ ڤرتام دالم اوردين ليكسيکؤڬرافي. find_max (([""name"""",of"""",string""]) == ""string"" find_max (([""name"""",enam"""",game""]) == ""enam"" find_max (([""aaaaaaa"""",bb"""",cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ace_Arab,python,"
def eat(number, need, remaining):
    """"""اكو اداله كريتا يڠ برڤاس، دان اكو سوده ممبلي كيرا-كيرا كروت، تتاڤي كيت ڤرلو مڠمبيل لبيه باڽق كروت اونتوق مڠمبيل ڤاكاين هاري اين. اكو ڤرلو مڠلواركن صفة [كروت يڠ دڤاكاين ستله ڤاكاين، كروت يڠ دڤاكاين ستله ڤاكاين] جك تيدق اد كروت يڠ سوده سمڤاي، اكو اكن مڠمبيل كروت يڠ سوده سوده، تتاڤي اكو اكن ماسيه برڤاس. چونتوه: * مڠومبڠ (((5, 6, 10) -> [11, 4] * مڠومبڠ (((4, 8, 9) -> [12, 1] * مڠومبڠ (((1, 10, 10) -> [11, 0] * مڠومبڠ (((2, 11, 5) -> [7, 0] ڤريابيل: @number:: integer ڽاڽاوا كروت كروت يڠ اكو مڠومبلي. @need:: integer ڽا كروت كروت يڠ اكو ڤرلوار اونت ڤرلو مڠكو. @remaining:: integer ڽا كروتڠ كروتڠ كروتڠ كروت يڠ كروتڠ يڠ اكو سوده مڠكو مڠكو سوده مڠمبليڠكڤ. @remaining:::: integer:: integer number of carrots يڠ سوده مڠ سوده مڠ سوده مڠوڤاتتاهاي كروتاهاي كروتاهن كروت:""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ace_Arab,python,"
def do_algebra(operator, operand):
    """"""دبري دوا لنتس اوڤراتور، دان اوڤرن. لنتس ڤرتام اد اوڤراسي جبر اساس، دان لنتس كدوا اداله لنتس اينتيڬر. مڠڬوناكن دوا لنتس دبري اونتوق ممبينا ايكسڤريسي جبر دان مڽاتاكن ڤڠتاهوان ايكسڤريسي اين. اوڤراسي جبر اساس: ڤڠلوارن (+) ڤڠلوارن (-)) ڤڠلوارن (*) ڤڠلوارن (//) ڤڠلوارن (**) چونتوه: اوڤراتور['+', '*', '-'] ارري = [2, 3, 4, 5] ريسلوت = 2 + 3 * 4 - 5 => ريسلوت = 9 تيتق: لنتس اوڤراتور سام دڠن لنتس اوڤرن مڠيكوت ساتو. اوڤرن اداله لنتس اوڤرن يڠ تيدق نيڬاتيف. اوڤراتور اد ڤون لاڬي ساتو اوڤراتور، دان اوڤرن لنتس اد ڤون لاڬي دوا اوڤرن.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ace_Arab,python,"
def solve(s):
    """"""جك كيت دبريكن ستراين s. جك s[i] اداله حروف، كيت ڤرلو مڠوروسكن كيسڽ دري لوار كاو لوار اتاو ڤد ڤد ڤد ڤد ڤد، جك تيدق، كيت ڤرلو ممبنتوڽ سڤرتي يڠ دڤرتوان اڤابيلا ستراين تيدق ممڤوڽاءي حروف، كيت ڤرلو مڠوروسكن ستراين. فانسي داڤت مڽروڤاكن ستراين يڠ دتومڤت. چونتوه solve{""1234"") = ""4321""{""ab"") = ""AB""{""#a@C"") = ""#A@c""""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ace_Arab,python,"
def string_to_md5(text):
    """"""دڤاوڬيت سترين 'تيكس'، ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤرلو ڤي ڤيڤيڤيڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤي ڤ""""""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ace_Arab,python,"
def generate_integers(a, b):
    """"""دبري دوا انتيڬره ڤوسيتيف a دان b، مروڤاكن ديڬيت ڤوتيه انتارا a دان b، دالم اوردين مڠورڠ. چونتوهڽ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
