[
    {
        "task_id": "HumanEval/0",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"بزانە لە لیستی ژمارە دیاریکراوەکاندا، ئایا دوو ژمارە لە یەکتر نزیکترن لە خاڵی دیاریکراو. نموونە: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) هەڵە >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) راستە \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ئەم فانکشنە stringێکە کە چەندین گروپی parentheses ی نیشتەجێیە. ئامانجتان ئەوەیە کە ئەو گرووپانە دابەشی بکەیت بۆ چەند stringێکی جیا و لیستی ئەوانیش بگێڕیتەوە. گرووپەکانی جیا هاوسەنگیان هەیە (هەر braceێکی کراوەیە بە باشی داخراوە) و لە ناو یەکتردا نیشتەجێ نین. هیچ بۆشاییەک لە string دا پشتگوێ بخە. نموونە: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) ['() ', '(()) ', '((() ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"بە پێی ژمارەی پۆزەتیڤی پلە و خاڵی گۆڕاو، دەکرێت دابەش بکرێت بۆ بەشی تەواوی (بزرگترین ژمارەی تەواو کە لە ژمارە دیاریکراو بچوکترە) و دەیە (بەشی پاشماوەی هەمیشە لە ١ بچوکترە). بەشی دەیە لە ژمارەکە بگەڕێنێتەوە. نموونە: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"تۆ لیستی کارەکانی دانان و دەرهێنانی هەژمارێکی بانکیت پێ دەدرێت کە بە سفر دەست پێ دەکات. ئەرکەکەت ئەوەیە کە بزانیت ئەگەر لە هەر خاڵێکدا باڵانسی هەژمارەکە دابەزێت لە ژێر سفر، و لەو خاڵەدا فانکشنەکە دەبێت راست بگەڕێتەوە. ئەگەر نا دەبێت هەڵە بگەڕێتەوە. نموونە: >>> below_zero([1, 2, 3]) هەڵە >>> below_zero([1, 2, -4, 5]) ڕاستە \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"بۆ لیستی دیاریکراوی ژمارەکانی دەرچوون، تێکڕای لادان لە ناوەڕاستی ئەم داتاسێتە حیساب بکە. تێکڕای لادان لە ناوەڕاستی نێوان هەر توخمێک و خاڵی ناوەند (بە ناوەندی لەم حاڵەتەدا): MAD = average  x - x_mean  نموونە: >>> mean_absolute_deviation  [1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ژمارەیەک \"دابەشکەر\" لە نێوان هەر دوو توخمی یەک لە دوای یەک لە لیستی داھاتندا دابنێ `numbers' >>> intersperse (([] ، 4) [] >>> intersperse (([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ئەم فانکشنە لە ڕێگەی ڕیزێکی ڕیزەوە بۆ چەند گروپێک لە قۆچکە چەمکدارەکان کە بە بۆشایی لێک جیا کراون. بۆ هەر یەک لە گروپەکان، دەرکردنی قووڵترین ئاستی چەمکی چەمکی چەمکدارەکان. بۆ نموونە (() (()) زۆرترین دوو ئاستی چەمکی چەمکی چەمکی چەمکی هەیە لە کاتێکدا ((())) سێ ئاستی هەیە. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"فلتەرکردنی لیستێکی ھێنانە ناوەوەی ڕیزەکان تەنها بۆ ئەوانەی کە لە ژێر ڕیزێکی دیاریکراودا ھەن >>> filter_by_substring([]، 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"بۆ لیستی دانراوی ژمارە تەواوەکان، کۆپێک بدەرەوە کە پێکهاتووە لە کۆکردنەوەو بەرھەمێک لە هەموو ژمارە تەواوەکان لە لیستێکدا. کۆکردنەوەی بەتاڵ دەبێت یەکسان بێت بە 0 و بەرھەمە بەتاڵ دەبێت یەکسان بێت بە 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"لە لیستی دانراوی ژمارە تەواوەکانەوە، لیستی بەرزترین توخمی بەرین دروست بکە کە تا ئەو کاتەی دیاریکراو لە زنجیرەکەدا دۆزراوەتەوە. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"کورتترین پالێندۆم بدۆزەرەوە کە بە زنجیرەیەکی دابینکراو دەست پێدەکات. بیرۆکەى ئەلگۆریتمەکە سادەیە: - درێژترین پاشگرە بۆ زنجیرە دابینکراو بدۆزەرەوە کە پالێندۆم بێت. - پێچەوانەى پێشگرە بۆ زنجیرە زیاد بکە کە پێش پاشگری پالێندۆمەکە دێت. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"تاقیکردنەوە ئەگەر زنجیرە دیاریکراوەکە پالێندرۆمە\"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"دەرچوون دوو ڕیزە a و b کە تەنها لە 1 و 0 پێکهاتوون. ئەنجامدانی دووانەی XOR لەسەر ئەم دەرچوونانە و گەڕانەوەی ئەنجامەکە وەک ڕیز. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"لە لیستی ڕیزەکان، درێژترین ڕیز بگەڕێتەوە. یەکەم ڕیز بگەڕێتەوە لە حاڵەتی بوونی چەندین ڕیز لە هەمان درێژی. نەگەڕێتەوە لە حاڵەتی ئەوەی لیستی دەرچوون بەتاڵ بێت. >>> درێژترین (([]) >>> درێژترین ((['a',' b',' c']) 'a' >>> درێژترین ((['a',' bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"گەڕاندنەوەی گەورەترین دابەشکاری گشتی دوو ژمارەی تەواو a و b >>> گەورەترین_ دابەشکاری_ گشتی ((3, 5) 1 >>> گەورەترین_ دابەشکاری_ گشتی ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"لیستی هەموو پێشگرەکان لە کورتترینەوە بۆ درێژترین لە زنجیرەی دەرچوون دەگەڕێنێتەوە >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"زنجیرەیەک دەگەڕێنێتەوە کە ژمارەکانی بۆشاییی دیاریکراو لە 0 تا n دەست پێ دەکات. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"زنجیرەیەک بدرێت، بزانە چەند کارەکتەرێکی جیاواز (بێ گوێدانە پلە و پلە) پێکهاتووە لە >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ئەم فانکشنە بریتییە لە ڕیزێک کە نوتی مۆسیقیی لە فۆرماتی ئاسکی تایبەتدا نیشان دەدات. ئەرکی تۆ شیکردنەوەی ڕیزەکانی ڕیزەکانی ڕیزەکانی تەواوە کە لەگەڵ زۆر لێداندا هاوتای دەبن. لێرەدا پەراوێزێک هەیە: 'o' note, lasts four beats 'o' dakis - half note, lasts two beats 'o' quater note, lasts one beat >>> parse_music. 'o o .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"بزانە چەند جارێک زنجیرە زیرەکی دیاریکراو لە زنجیرە ڕەسەنەکەدا دەدۆزرێتەوە. ژمارە حاڵەتەکانی یەکترپشتبوون بکە. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"دەرخراو زنجیرەیەکی ژمارە لە 'نۆل' تا 'نۆی' کە بە بۆشاییەوە دیاریکراوە. هەڵبژاردنی گونجاو 'نۆل' ، 'یەک' ، 'دوو' ، 'سێ' ، 'چوار' ، 'پێنج' ، 'شەش' ، ' حەوت' ، 'هەشت' و 'نۆی' یە. زنجیرەکە بە ژمارە ڕیزبکاتەوە لە بچووکترینەوە بۆ گەورەترین >>> sort_numbers (('سێ یەک پێنج') 'یەک سێ پێنج' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"لە لیستی ژمارە دابینکراو (بە درێژایی لانیکەم دوو) دوو ژمارە هەڵبژێرە و بگەڕێنەوە کە نزیکترین یەکترن و بە ڕیز (نەمرەی بچوک، ژمارە گەورەتر) بگەڕێنەوە. >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"لیستی ژمارەکان (لانیکەم دوو توخم) ، گۆڕانکارییەکی هێڵی بۆ ئەو لیستە جێبەجێ بکە، بە جۆرێک بچووکترین ژمارە دەبێتە 0 و گەورەترین دەبێتە 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"فلتەر لیستی دیاریکراوی ھەر بەھایەکی پایتۆن تەنها بۆ ژمارە تەواوەکان >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"درێژی گەڕانەوەی زنجیرەی دیاریکراو >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"بۆ ژمارەیەکی دیاریکراو n، گەورەترین ژمارە بدۆزەرەوە کە n بە یەکسانی دابەش دەکات، کە بچوکترە لە n >>> گەورەترین_ دابەشکەر ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"لیستی فاکتەری یەکەمی ژمارە تەواوەکە لە بچووکەوە بۆ گەورە. پێویستە هەر فاکتەرێک ژمارە جارەکانی پێناسە بکرێت کە لەگەڵ چەند جارێک لە فاکتەریزاسیۆندا دەردەکەوێت. ژمارەی دەرچوون دەبێت یەکسان بێت بە بەرهەمی هەموو فاکتەرەکان >>> فاکتۆریزاسیۆن ((8) [2, 2, 2] >>> فاکتۆریزاسیۆن ((25) [5, 5] >>> فاکتۆریزاسیۆن ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"لە لیستی ژمارە تەواوەکان، هەموو ئەو توخمانەی کە زیاتر لە جارێک ڕوودەدەن لابدە. ڕیزبەندی توخمەکان بە هەمان شێوەی هاتووچۆدا بەجێبهێڵە. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"بۆ ڕیزێکی دیاریکراو، کارەکتەرە بچووکەکان بگێڕە بۆ گەورە و گەورە بۆ بچووک. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"لیستی زنجیرە زنجیرەکان بە یەک زنجیرە >>> زنجیرە زنجیرە (([]) ' ' >>> زنجیرە زنجیرە ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"فلتەرکردنی لیستێکی ھێڵی ھێنان بۆ ئەو ھێلانەی کە بە پێشەکی دیاریکراو دەست پێ دەکەن. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"تەنها ژمارە پۆزەتیڤەکان لە لیستەکە بگەڕێنێتەوە. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"گەڕاندنەوەی ڕاستە ئەگەر ژمارەیەکی دیاریکراو یەکەم بێت، وە هەڵە ئەگەر نا. >>> is_prime ((6) هەڵە >>> is_prime ((101) ڕاستە >>> is_prime ((11) ڕاستە >>> is_prime ((13441) ڕاستە >>> is_prime ((61) ڕاستە >>> is_prime ((4) هەڵە >>> is_prime ((1) هەڵە \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs کۆئەپێکتەری پۆڵینۆمییەکەن. find_zero x بدۆزەرەوە کە poly ((x) = 0. find_zero تەنها تەنها خاڵی سفر دەداتەوە، تەنانەت ئەگەر زۆر بن. جگە لەوەش، find_zero تەنها لیستی xs وەردەگرێت کە ژمارەی هاوکێشەکانی یەکسانە و گەورەترین هاوکێشەی نانوسی هەیە چونکە گەرەنتی چارەسەر دەکات. >>> round (((find_zero[(1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"پلانی فرەحزب بە کۆئەپێکتەری xs لە خاڵی x هەڵدەسەنگێنێت. xs[0] + xs[i] * x + xs[i] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ئەم فانکشنە لیستی l وەردەگرێت و لیستی l' دەگەڕێنێتەوە بە جۆرێک کە l' هاوشێوەی l بێت لە ئەو لیستانەی کە بە سێ دابەش ناکرێن، لە کاتێکدا بەهایەکانی لە ئەو لیستانەی کە بە سێ دابەش دەکرێن یەکسانن بە بەهای ئەو لیستانەی کە بە یەکەوە دابەش دەکرێن، بەڵام ڕێک دەخراون. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"گەڕاندنەوەی توخمە یەکجار جیاوازەکان لە لیستێکدا >>> یەکجار جیاواز (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"زیادترین توخمی لیستەکە بگەڕێنێتەوە. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"ژمارە 7 دەگەڕێنێتەوە لە ژمارە تەواوەکاندا کە کەمتر لە n و بە 11 یان 13 دابەش دەکرێت. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ئەم فانکشنە لیستی l وەردەگرێت و لیستی l' دەگەڕێنێتەوە بە جۆرێک کە l' هاوشێوەی l بێت لە هێندێک هێندێک، لە کاتێکدا بەهاکانی لە هێندێک هێندێک یەکسانن بە بەهاکانی هێندێک هێندەکانی l، بەڵام ڕێکدەخرێن. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"وەک ھێڵی ھێنانێک کۆد کراوە بە فۆنکشن encode_cyclic وەردەگرێت. ھێڵی دیکۆدکراو دەگەڕێنێتەوە.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"زنجیرەی کۆدکراو دەگەڕێنێتەوە بە گرووپی سێ کارەکتەر.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib ژمارە n-ی دەگەڕێنێتەوە کە ژمارەیەکی فیبۆنەچییە و ھەروەھا ژمارەیەکی سەرەتاییە. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero لیستی ژمارە تەواوەکان وەردەگرێت وەک دەرچوون. گەر سێ توخمی جیاواز لە لیستەکەدا هەبن کە کۆیەکانیان بۆ سفر بێت، ئەوا راست دەداتەوە، وە ئەگەر نا ئەوا هەڵە. >>> triple_sum_to_zero (([1, 3, 5, 0]) هەڵە >>> triple_sum_to_zero (([1, 3, -2, 1]) ڕاستە >>> triple_sum_to_zero (([1, 2, 3, 7]) هەڵە >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) ڕاستە >>> triple_sum_to_zero [1]) هەڵە \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"وا بیربکەرەوە کە شەقامێک هێڵێکی بێ کۆتایی درێژە. n ئۆتۆمبێل لە چەپەوە بۆ ڕاست دەجوڵێن؛ هاوکات، کۆمەڵێکی جیاوازی n ئۆتۆمبێل لە ڕاستەوە بۆ چەپ دەجوڵێن. دوو کۆمەڵەی ئۆتۆمبێل لە سەرەتاوە زۆر دوورن لە یەکتر. هەموو ئۆتۆمبێلەکان بە هەمان خێرایی دەجوڵێن. دوو ئۆتۆمبێل بەیەکدادان کاتێک ئۆتۆمبێلێک کە لە چەپەوە بۆ ڕاست دەجوڵێت بە ئۆتۆمبێلێک دەدات کە لە ڕاستەوە بۆ چەپ دەجوڵێت. لەگەڵ ئەوەشدا، ئۆتۆمبێلەکان بێ سنوور بەهێزن؛ لە ئەنجامدا، بەردەوامن لە جوڵان لە ڕێڕەوی خۆیاندا وەک ئەوەی بەیەکدادان نەکەن. ئەم فانکشنە ژمارەی ئەو پێکدادانانە دەردەهێنێت.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"لیستی گەڕانەوەی لەگەڵ توخمەکان زیادکرا بە ١. >>> incr_list (([١، ٢، ٣]) [٢، ٣، ٤] >>> incr_list (([٥، ٣، ٥، ٢، ٣، ٣، ٩، ٠، ١٢٣)) [٦، ٤، ٦، ٣، ٤، ٤، ١٠، ١، ١٢٤]\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero لیستی ژمارە تەواوەکان وەردەگرێت وەک دەرچوون. گەر دوو توخمی جیاواز لە لیستەکەدا هەبن کە کۆیەکانیان بۆ سفرە، ئەوا True دەداتەوە، وە False بە پێچەوانەوە. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"گۆڕینی بنکەی ژمارەیی ژمارەی ھێنان x بۆ بنکە. نوێنەرایەتی زنجیرە گەڕاندنەوە دوای گۆڕین. ژمارەکانی بنکە کەمتر لە ١٠. >>> گۆڕینی_بنکە ((8) ، 3) '22' >>> گۆڕینی_بنکە ((8) ، 2) '1000' >>> گۆڕینی_بنکە ((7) ، 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"بە درێژی لایەک و بەرزترین ڕووبەری گەڕانەوەی سێگۆشەیەک. >>> triangle_area ((5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"زنجیرەی ژمارەکانی Fib4 زنجیرەیەکی هاوشێوەی زنجیرەی فیبۆناکسییە کە بەم شێوەیە پێناسە کراوە: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). تکایە فانکشنێک بنووسە بۆ ئەوەی بە شێوەیەکی کارامە ئامێری n-ەم لە زنجیرەی ژمارەکانی fib4 دابنێ. بەکار نەهێنە گەڕانەوەی. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"میدیانی گەڕانەوەی توخمەکانی لیستەکە l. >>> میدیانی (([3, 1, 2, 4, 5]) 3 >>> میدیانی (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"پشکنینی ئەوەی کە زنجیرە دیاریکراوەکە پالێندرۆمە >>> is_palindrome (('') ڕاستە >>> is_palindrome (('aba') ڕاستە >>> is_palindrome (('aaaaa') ڕاستە >>> is_palindrome (('zbcd') هەڵەیە \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"گەڕانەوەی ٢ ^ ن مۆدۆلۆ پی (ئاگاداربە لە ژمارەکان). >>> مۆدۆپ (٣، ٥) ٣ >>> مۆدۆپ (١٠١، ١٠١) ٢ >>> مۆدۆپ (٠، ١٠١) ١ >>> مۆدۆپ (٣، ١١) ٨ >>> مۆدۆپ (١٠٠، ١٠١) ١ \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"وەک ھێڵی ھێنانێک کۆد کراوە بە فۆنکسیۆنی encode_shift وەردەگرێت. ھێڵی دیکۆدکراو دەگەڕێنێتەوە.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"کۆدکردنی ڕیزەکان دەگەڕێنێتەوە بە گۆڕینی هەموو کارەکتەرێک بە ٥ لە ئەلفوبێدا.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels فانکشنێکە کە ڕیزەکان وەردەگرێت و ڕیزەکان بەبێ دەنگەکان دەگەڕێنێتەوە. >>> remove_vowels ((('') ' ' >>> remove_vowels (((\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"گەڕاندنەوەی ڕاستە ئەگەر هەموو ژمارەکان لە لیستی l لە ژێر خاڵی t دا بن. >>> below_threshold (([1, 2, 4, 10], 100) ڕاستە >>> below_threshold (([1, 20, 4, 10], 5) هەڵە \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"دوو ژمارە زیاد بکە x و y >>> زیاد بکە (((2, 3) 5 >>> زیاد بکە (((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"بزانە ئەگەر دوو وشە هەمان کارەکتەریان هەبێت. >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') ڕاستە >>> same_chars ((('abcd', 'dddddddabc') ڕاستە >>> same_chars ((('dddddddabc', 'abcd') ڕاستە >>> same_chars ((('eabcd', 'dddddddddabc') هەڵەیە >>> same_chars ((('abcd', 'dddddddabddce') هەڵەیە >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') هەڵەیە \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"ژمارە n ی فیبۆنەچی بدەرەوە. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets بریتییە لە زنجیرەیەک لە \"<\" و \">\". return True ئەگەر هەموو قۆچکەی کردنەوەی قۆچکەی داخستنی هەبێت. >>> correct_bracketing (((\"<\") False >>> correct_bracketing (((\"<>\") True >>> correct_bracketing (((\"<><>>\") True >>> correct_bracketing (((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"گەڕاندنەوەی ڕاستە ئەگەر بەشەکانی لیستەکە بە شێوەیەکی یەکسان زیاد یان کەم دەبن. >>> یەکسان (([١، ٢، ٤، ٢٠]) ڕاستە >>> یەکسان (([١، ٢٠، ٤، ١٠]) هەڵە >>> یەکسان (([٤، ١، ٠، -١٠)) ڕاستە \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"گەڕاندنەوەی توخمە هاوبەشە یەکجار جیاوازەکان بۆ دوو لیست. >>> هاوبەش (([١، ٤، ٣، ٣٤، ٦٥٣، ٢، ٥]، [٥، ٧، ١، ٥، ٩، ٦٥٣، ١٢١) [١، ٥، ٦٥٣] >>> هاوبەش (([٥، ٣، ٢، ٨]، [٣، ٢]) [٢، ٣] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"گەورەترین فاکتەری یەکەمی n بدەرەوە. وا دابنێ n > 1 و فاکتەری یەکەم نییە. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n فانکشنێکە کە ژمارەکانی ١ تا n کۆدەکاتەوە. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets بریتییە لە زنجیرەیەک لە \"(\" و \")\". return True ئەگەر هەموو قۆڵی کردنەوەی قۆڵی داخستنی هەبێت. >>> correct_bracketing (((\"(\") False >>> correct_bracketing (((\")) True >>> correct_bracketing (((())) True >>> correct_bracketing (((\") ((()) False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs نوێنەرایەتی کۆئەندامی پۆڵینۆم دەکات. xs[0] + xs[1] * x + xs[2] * x^2 + .... دەرھاویشتەی ئەم پۆڵینۆمە بە ھەمان شێوە بگەڕێتەوە. >>> دەرھاویشت ((([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> دەرھاویشت (([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"زنجیرەی ژمارەی فیبۆفیب زنجیرەیەکی هاوشێوەی زنجیرەی فیبۆناکسییە کە بەم شێوەیە پێناسە کراوە: فیبۆفیب () () == 0 فیبۆفیب () () == 0 فیبۆفیب () == 0 فیبۆفیب () == 2 == 1 فیبۆفیب () == فیبۆفیب () == n-1) + فیبۆفیب () n-2) + فیبۆفیب () n-3 تکایە فانکشنێک بنووسە بۆ بە کارایی هەژمارکردنی توخمی n-ەم لە زنجیرەی ژمارەی فیبۆفیب. >>> فیبۆفیب () () 1) 0 >>> فیبۆفیب () 5) 4 >>> فیبۆفیب () 8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"فانکشنێک بنووسە کە ڕیزێکی وشە وەک دەرچوون وەردەگرێت و ژمارەی دەنگەکان لە ڕیزەکە دەداتەوە. دەنگەکان لەم حاڵەتەدا 'a' ، 'e' ، 'i' ، 'o' ، 'u' ن. لێرەدا 'y' ھەروەھا دەنگێکە، بەڵام تەنیا کاتێک لە کۆتایی وشەی دیاریکراودایە. نموونە: >>> vowels_count (((\"abcde\") 2 >>> vowels_count ((\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"حاڵەتی تاقیکردنەوەی زیاتر زیاد بکە.\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"بە شێوەی بازنەیی ژمارە تەواوەکانی x بگوازنەوە، ژمارەکان بگوازنەوە بۆ لای ڕاست بە شێوەی گواستنەوە و ئەنجامەکە وەک زنجیرە بگێڕنەوە. ئەگەر گواستنەوە > ژمارەی ژمارەکان، ژمارەکان بە پێچەوانەوە بگێڕنەوە. >>> circular_shift ((12, 1) \"21\" >>> circular_shift ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ئەرکێک بنووسە کە ڕیزێکی وەک دەرچوون وەردەگرێت و کۆی کارەکتەرەکانی سەرەوەی ASCII کۆدەکان دەگەڕێنێتەوە. نموونە: digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"لەم ئەرکەدا، ڕیزێکت پێ دەدرێت کە نوێنەرایەتی ژمارەیەک سێو و پرتەقاڵ دەکات کە دابەشکراون لە سەبەتەیەکی میوەدا ئەم سەبەتەیە سێو و پرتەقاڵ و میوە مانگۆیە. بە دانانی ڕیزێک کە نوێنەرایەتی کۆی ژمارەی پرتەقاڵ و سێوەکان دەکات و ژمارەیەکی تەواو کە نوێنەرایەتی کۆی ژمارەی میوە لە سەبەتەکە دەکات، ژمارەی میوە مانگۆ لە سەبەتەکە بدەرەوە. بۆ نموونە: fruit_distribution\"5(سێو و 6 پرتەقاڵ\"، 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 سێو و 1 پرتەقاڵ\"،3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 سێو و 3 پرتەقاڵ\"، 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 سێو و 1 پرتەقاڵ\"،1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"بە پێدانی ڕیزێک کە نوێنەرایەتی لقێکی درەخت دەکات کە گرێبەستی تەواوی نەرێنی نییە ئەرکی تۆ ئەوەیە کە یەکێک لە گرێبەستەکان هەڵبگرە و بیگەڕێنیتەوە. گرێبەستی هەڵبگرە دەبێت گرێبەستەکە بێت کە بچووکترین بەهای جووت هەیە. ئەگەر چەند گرێبەستێک بە هەمان بچووکترین بەهای جووت دۆزرایەوە ئەوا گرێبەستەکە بگەڕێتەوە کە بچووکترین هێژا هەیە. گرێبەستی هەڵبگرە دەبێت بگەڕێتەوە لە لیستێکدا، [smallest_value، هێژاەکەی]، ئەگەر هیچ بەهای جووت نەبێت یان ڕیزەکە بەتاڵ بێت، بگەڕێتەوە []. نموونە: ١: Input: [4,2,3] Output: [2, 1] ڕوونکردنەوە: ٢ بچووکترین بەهای جووت هەیە، و ٢ بچووکترین هێژا هەیە. نموونە: ٢: Input: [1,2,3] Output: [2, 1] ڕوونکردنەوە: ٢ بچووکترین بەهای جووت هەیە، و ٢ بچووکترین هێژا هەیە. نموونە: ٣: Input: [] Output: [4] Input: [5, 3, 4, 2] Output: [0, 0 Output: 1 Output: 0 گرێبەستەکە کە بچووکترین هێژا هەیە، بەڵام هێژا کەمترین هێژا هەیە، بۆیە یەکەم گرێبەست هەڵدەبژێرین، کە دوو بەهای جووت هەیە، بەدو خاڵی سفرە.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''تۆ لیستی پۆزەتیڤت بۆ کراوە. گەورەترین ژمارە تەواو بدەرەوە کە لە سفر گەورەترە و فرێکانسییەکەی لە خودی ژمارە تەواوەکە گەورەترە یان یەکسانە. فرێکانسی ژمارە تەواوەکە ژمارەی جارەکانی دەرکەوتنیە لە لیستەدا. ئەگەر بەهایەکی وا نەبێت، بدەرەوە -1. نموونە: گەڕان (([4, 1, 2, 2, 3, 1]) == 2 گەڕان ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 گەڕان ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''بە پێی لیستی ژمارە تەواوەکان، لیستەکە بە ڕیزێکی نامۆ دەگەڕێتەوە. ڕیزکردنی نامۆ، کاتێکە کە بە کەمترین بەها دەست پێ دەکەیت، پاشان زۆرترین ژمارەی تەواوەکانی تر، پاشان کەمترین و هتد. نموونە: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''بە دانانی درێژی سێ لای سێگۆشەیەک. ڕووبەری سێگۆشەکە بگێڕێتەوە بە دو خاڵی دوازدەهەم ئەگەر سێ لایەکە سێگۆشەیەکی دروست دروست بکەن. ئەگەر نا بگێڕێتەوە -1 سێ لایەکە سێگۆشەیەکی دروست دەکەن کاتێک کۆی هەر دوو لایەکە گەورەترە لە لای سێیەم. نموونە: triangle_area (((3, 4, 5) == 6.00 triangle_area (((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''فانکشنێک بنووسە کە راست دەداتەوە ئەگەر ئۆبجێکت q بفڕێت، وە هەڵە ئەگەر نا. ئۆبجێکت q بفڕێت ئەگەر هاوسەنگی هەبێت (لیستێکی پالندرومیە) و کۆی توخمەکانی کەمتر بێت یان یەکسان بێت بە زۆرترین قورسایی گونجاو w. نموونە: will_it_fly (([1, 2], 5) â -> هەڵە # 1+2 کەمتر لە زۆرترین قورسایی گونجاو، بەڵام هاوسەنگی نییە. will_it_fly (([3, 2, 3], 1) â -> هەڵە # هاوسەنگی هەیە، بەڵام 3+2+3 زیاترە لە زۆرترین قورسایی گونجاو. will_it_fly (([3, 2, 3], 9) â -> راست # 3+23 کەمتر لە زۆرترین قورسایی گونجاو، و هاوسەنگییە. will_it_fly ((([3], â 5) -> راست # 3 کەمتر لە زۆرترین قورسایی گونجاو، و هاوسەنگییە.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"لە ڕیزێکی پڕ لە ژمارە تەواوەکاندا، کەمترین ژمارەی ئەو توخمانەی بدۆزەرەوە کە پێویستە بگۆڕدرێن بۆ ئەوەی ڕیزەکە پالێندرۆمی بێت. ڕیزێکی پالێندرۆمی بریتییە لە ڕیزێک کە بە هەمان شێوە دەخوێندرێتەوە بۆ دواوە و بۆ پێشەوە. لە یەک گۆڕانکاری دا، دەتوانیت توخمێک بگۆڕیت بۆ هەر توخمێکی تر. بۆ نموونە: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''فانکشنێک بنووسە کە دوو لیستی ڕیزەکان قبوڵ بکات و ئەو لیستە بگەڕێنێتەوە کە کۆی ژمارەی کارگەکانی لە هەموو ڕیزەکانی لیستەکە کەمتر بێت لە لیستی دیکە. ئەگەر هەردوو لیستەکە هەمان ژمارەی کارگەکانیان هەبێت، یەکەم لیست بگەڕێنێتەوە. نموونە total_match (([]، []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"فانکشنێک بنووسە کە راست بێت گەر ژمارە دیاریکراوەکە لێکدانەوەی ٣ ژمارەی سەرەتایی بێت و بە پێچەوانەوە هەڵە بێت. زانینی ئەوەی (a) کەمتر لە ١٠٠ە. نموونە: is_multiply_prime ((30) == True 30 = ٢ * ٣ * ٥ \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ئەرکی تۆ ئەوەیە کە فانکشنێک بنووسی کە راست بێت ئەگەر ژمارە x ببێتە توانایەکی سادە بۆ n و هەڵە بێت لە حاڵەتەکانی تر. x توانایەکی سادە بۆ n ئەگەر n**int=x بۆ نموونە: is_simple_power ((1, 4) => true is_simple_power ((2, 2) => true is_simple_power ((8, 2) => true is_simple_power ((3, 2) => false is_simple_power ((3, 1) => false is_simple_power ((5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''فانکشنێک بنووسە کە ژمارەیەکی تەواو a وەردەگرێت و راست دەداتەوە ئەگەر ئەم ژمارەیە سێگۆشەی ژمارەیەکی تەواو بێت. تێبینی: لەوانەیە وا دابنێیت کە دەسپێک هەمیشە دروستە. نموونە: iscube (((1) ==> True iscube (((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ئەرکێکت پێ سپێردراوە بۆ نووسینی فانکشنێک کە ژمارەیەکی شەشدەسیمەل وەردەگرێت وەک زنجیرە و ژمارەی ئەو ژمارانە هەژمار دەکات کە ژمارە سەرەتاییەکانن (ژمارەیەکی سەرەتایی، یان ژمارەیەکی سەرەتایی، ژمارەیەکی سروشتییە کە گەورەترە لە 1 کە بەرهەمی دوو ژمارەی سروشتی بچووکتر نییە). ژمارە شەشدەسیمەلەکان بریتییە لە 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ژمارە سەرەتاییەکان بریتییە لە 2, 3, 5, 7, 11, 13, 17,... بۆیە دەبێت ژمارەیەک لە ژمارە سەرەتاییەکانی خوارەوە دیاری بکەیت: 2, 3, 5, 7, B (=دەسیمەل 11), D (=دەسیمەل 13). تێبینی: لەوانەیە وا دابنێیت کە دەسپێردراو هەمیشە ڕاست یان بەتاڵە، و هێماکانی A,B,C,D,E,F هەمیشە گەورە بن. نموونە: بۆ num = AB دەرچونەکە دەبێت num = 1. بۆ num = 1077E دەرچونەکە دەبێت 2. بۆ num = \"AB\" بۆ num = 331ED بۆ num = 4. \"BC\" بۆ num = 6.01289 بۆ num = 6.067D بۆ \"EF\" بۆ دەرچوونەکە دەبێت num = 2.\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ژمارەیەک بە شێوەی دەیەمیانەی پێ دەدرێت و ئەرکی تۆ گۆڕینی بۆ فۆرماتی دووانە. فانکشنەکە دەبێت زنجیرەیەک بگەڕێنێتەوە، لەگەڵ هەر کارەکتەرێک کە نوێنەرایەتی ژمارەیەکی دووانە دەکات. هەر کارەکتەرێک لە زنجیرەکە دەبێت '0' یان '1'. دوو کارەکتەری زیادەی 'db' لە سەرەتاو کۆتایی زنجیرەکە دەبێت. کارەکتەرە زیادەکان بۆ یارمەتیدانی فۆرماتە. نموونە: decimal_to_binary ((15) # دەگەڕێتەوە \"db1111db\" decimal_to_binary32) # دەگەڕێتەوە \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"string sت پێ دراوە. ئەرکی تۆ ئەوەیە کە پشکنین بکەیت کە ئایا ئەو stringە happyە یان نا. stringێک happyە ئەگەر درێژییەکەی لانیکەم 3 بێت و هەر 3 پیتی یەک لە دوای یەک جیاواز بن بۆ نموونە: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ئەمە دوا هەفتەی وەرزە و مامۆستاکە دەبێت نمرەکان بدات بە قوتابییەکان. مامۆستاکە ئەلیگۆریتمێکی خۆی بۆ نمر دانان دروستکردووە. تەنها کێشەکە ئەوەیە، ئەو کۆدەی کە بۆ نمر دانان بەکاریهێناوە لەبیرچووە. ئەو لیستی نمرەکانی هەندێک قوتابیی داوەتێ و دەبێت فانکشنێک بنووسیت کە دەتوانێت لیستی نمرەکانی پیتی دەربکات بە بەکارهێنانی ئەم خشتەیە: GPA. نمرەی پیتی 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"فانکشنێک بنووسە کە زنجیرە دەنێت و راست دەداتەوە ئەگەر درێژایی زنجیرەکە ژمارەیەکی سەرەتایی بێت یان هەڵە ئەگەر نا نموونە prime_length ((('Hello') == True prime_length ((('abcdcba') == True prime_length ((('kittens') == True prime_length ((('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ n، ژمارەی ژمارە پۆزەتیڤەکانی n-چەندەم گەڕانەوەی ژمارە پۆزەتیڤەکانی پۆزەتیڤ کە بە 1 دەست پێ دەکەن یان کۆتایی پێ دەهێنن.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ N، کۆی گشتیی ژمارەکانی بە دووانە بدەرەوە. نموونە بۆ N = 1000، کۆی ژمارەکان دەبێت بە 1 دەرھات دەبێت بە \"1\". بۆ N = 150، کۆی ژمارەکان دەبێت بە 6 دەرھات دەبێت بە \"110\". بۆ N = 147، کۆی ژمارەکان دەبێت بە 12 دەرھات دەبێت بە \"1100\". گۆڕاوەکان: @N ژمارە تەواوەکان ڕێگرییەکان: 0 â‰¤ N â‰¤ 10000. دەرھات: زنجیرەیەک لە ژمارە دووانە \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"بە پێدانی لیستی پووچ و پووچ لە ژمارە تەواوەکان lst. زیادکردنی ئەو توخمانەی جووت کە لە هێندەکانی نامۆدان.. نموونە: زیادکردنی (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"فانکشنێک بنووسە کە ڕیزێک وەردەگرێت و وەشانێکی ڕیزکراوەی دەگەڕێنێتەوە. وەشانێکی ڕیزکراوەی ڕیز، ڕیزێکە کە هەموو وشەکان (بە بۆشایی جیاکراو) بە وشەیەکی نوێ جێگەی دەخرێتەوە کە هەموو کارەکتەرەکان بە ڕیزێکی بەرزبوونەوە ڕیزکراون بە پشتبەستن بە بەهای ascii. تێبینی: پێویستە ڕیزبەندی وشەکان و بۆشاییە بەتاڵەکان لە ڕستەدا بپارێزن. بۆ نموونە: anti_shuffle ((('Hi') دەگەڕێتەوە 'Hi' anti_shuffle ((('hello') دەگەڕێتەوە 'ehllo' anti_shuffle (('Hello World!!!') دەگەڕێتەوە 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"داتایەکی دوو ڕەهەندی پێدراوە، وەک لیستی نێستکراو، کە هاوشێوەی ماتریکسە، بەڵام بە پێچەوانەی ماتریکسەکان، هەر ڕیزێک لەوانەیە ژمارەیەکی جیاوازی ستوون لەخۆبگرێت. بە پێی lst و ژمارە تەواو x، ژمارە تەواو x لە لیستەکەدا بدۆزەرەوە، و لیستی توپلەکان بدەرەوە، [(x1, y1), (x2, y2) ...] بە جۆرێک کە هەر توپلێک کۆئوردیناتێکی - (ڕیز، ستوون) بێت، کە بە 0 دەستپێدەکات. کۆئوردیناتەکان سەرەتا بە ڕیزەکان بە ڕیزێکی بەرزکەرەوە ڕیزبکە. هەروەها، کۆئوردیناتەکانی ڕیز بە ستوونەکان بە ڕیزێکی نزمکەرەوە ڕیزبکە. نموونە: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0,0, 0, 1, 0], 4 (1, 0), (2, 5 (2, 0, 0] get_((1), 1) [] ==_[[ڕیز 1, 2, 3, 2]], 2 ==_]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"لە ڕیزبەندی ژمارە تەواوەکانی نەگەتیڤدا، کۆپییەک لە ڕیزبەندی دیاریکراو بگەڕێنەوە دوای ڕیزبەندی، ڕیزبەندی ڕیزبەندی دیاریکراو بە ڕیزبەندی بەرزبوونەوە ئەگەر کۆکراوەکە ((بەهای یەکەمی هێما، بەهای کۆتا هێما) نامۆ بێت، یان ڕیزبەندی بە ڕیزبەندی دابەزین ئەگەر کۆکراوەکە ((بەهای یەکەمی هێما، بەهای کۆتا هێما) جووت بێت. تێبینی: * ڕیزبەندی دیاریکراو نەگۆڕە. نموونەکان: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"فانکشنێک دروست بکە کە ڕیزێکی وەک ئارگومێنت وەربگرێت و ڕیزێکی شفرە کراو لەگەڵ ئەلفوبێیەکە بگێڕێتەوە. ئەلفوبێیەکە دەبێت بە جۆرێک بگێڕرێت کە پیتەکان بە دوو هێندە بۆ دوو جێگا بچێتە خوارەوە. بۆ نموونە: encrypt ((hi)) گەڕانەوەی 'lm' encrypt ((asdfghjkl)) گەڕانەوەی 'ewhjklnop' encrypt ((gf)) گەڕانەوەی 'kj' encrypt ((et)) گەڕانەوەی 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"لیستی ژمارە تەواوەکانت پێ دراوە. فانکشنێک بنووسە next_smallest ((() کە دووەم بچوکترین توخمی لیستی دەگەڕێنێتەوە. گەڕانەوەی None ئەگەر توخمێکی وا نەبێت. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"تۆ زنجیرەیەک وشەت پێ دەدرێت، و ئەرکی تۆ ئەوەیە کە ژمارەی بێزارییەکان هەژمار بکەیت. بێزارییەک ڕستەیە کە بە وشەی \"من\" دەست پێ دەکات. ڕستەکان بە '.', '?' یان '! 'دا سنووریان بۆ دەکرێت. بۆ نموونە: >>> is_bored (((\"سڵاو جیهان\") 0 >>> is_bored ((\"ئاسمان شینە. خۆر دەدرەوشێتەوە. من ئەم کەشوهەواشم خۆشدەوێت\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''فانکشنێک دروست بکە کە ٣ ژمارە وەردەگرێت. گەر یەکێک لە ژمارەکان یەکسان بێت بە کۆی دوو ژمارەکەی تر، و هەموو ژمارەکان ژمارە تەواو بن. گەر لە هەر حاڵەتێکی تر هەڵە بێت. نموونە any_int{\\displaystyle any_int{\\displaystyle any_int{\\displaystyle any_int{\\displaystyle any_{\\displaystyle any_{\\displaystyle {\\text{\\text{\\text{\\text{\\text{\\text{\\text}}}}'''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"فانکشنێک بنووسە کە پەیامێک وەربگرێت و کۆد بکات بە جۆرێک کە هەموو پیتەکان بگۆڕێت و هەموو دەنگەکان لە پەیامەکەدا بگۆڕێت بە پیتێک کە دوو شوێنی پێش ئەو دەنگەیە لە ئەلفوبێی ئینگلیزی. تەنها پیتەکان دابنێ. نموونە: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"تۆ لیستی ژمارە تەواوەکانت پێ دراوە. تۆ پێویستە گەورەترین بەهای سەرەتایی بدۆزیتەوە و کۆی ژمارەکانی بگێڕیتەوە. نموونە: بۆ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] دەرھاتەکە دەبێت 10 بۆ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] دەرھاتەکە دەبێت 25 بۆ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] دەرھاتەکە دەبێت 13 بۆ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] دەرھاتەکە دەبێت 11 بۆ lst = [0,81,12,3,21,1] دەرھاتەکە دەبێت 3 بۆ lst = [0,8,1,2,1,7] دەرھاتەکە دەبێت 7 بۆ lst = [1,8,1,2,7] دەرھاتەکە دەبێت 7 بۆ lst = [1,1,8,2,7] دەرھاتەکە دەبێت 7 بۆ lst = [1,1,2,7] دەرھاتەکە دەبێت 7 بۆ lst = [0,1,1,2,7,7,7,7,7,7,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,13,13,13,14,14,14,14,14,14,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,1\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"فەرهەنگێک، گەر هەموو کلیلەکان زنجیرە بن لە پیتی بچووک یان هەموو کلیلەکان زنجیرە بن لە پیتی گەورە، ئەوا راست دەگەڕێتەوە، ئەگەر نا ئەوا هەڵە دەگەڕێتەوە. فانکشنەکە دەبێت هەڵە بگەڕێتەوە ئەگەر فەرهەنگەکە بەتاڵ بێت. نموونە: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) دەبێت راست بگەڕێتەوە. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) دەبێت هەڵە بگەڕێتەوە. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) دەبێت هەڵە بگەڕێتەوە. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) هەڵە دەبێت گەڕانەوەی check.dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345\"}) دەبێت راست بگەڕێتەوە.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"فانکشنێک جێبەجێ بکە کە ژمارەیەکی تەواو نەرێنی نەبێت و کۆمەڵێک لە یەکەم n ژمارە تەواوەکان بگەڕێنێتەوە کە ژمارە سەرەتاییەکانن و کەمتر لە n. بۆ نموونە: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"فانکشنەکە تەواو بکە کە دوو ژمارە تەواو وەردەگرێت و بەرهەمی یەکەی ژمارەکانی دەداتەوە. وا دابنێ کە دەرچوونەکە هەمیشە دروستە. نموونە: لێکدانەوە ((١٤٨، ٤١٢) دەبێت ١٦ بگەڕێنێتەوە. لێکدانەوە ((١٩، ٢٨) دەبێت ٧٢ بگەڕێتەوە. لێکدانەوە ((٢٠١، ١٨٥١) دەبێت ٠ بگەڕێتەوە. لێکدانەوە ((١٤، ١٥) دەبێت ٢٠ بگەڕێتەوە.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"بە دانانی ڕیزێک s، ژمارەی دەنگی گەورە لە هێماکانی جووتدا هەژمار بکە. بۆ نموونە: count_upper (('aBCdEf') دەگەڕێتەوە 1 count_upper (('abcdefg') دەگەڕێتەوە 0 count_upper (('dBBE') دەگەڕێتەوە 0 \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''فانکشنێک دروست بکە کە بەها (سترینگ) ێک وەربگرێت کە ژمارەیەک نوێنەرایەتی دەکات و نزیکترین ژمارەی تەواو بۆ دەگەڕێنێتەوە. ئەگەر ژمارەکە لە دوو ژمارەی تەواو دوور بێت، ئەوا لە سفرەوە دەوری بکە. نموونە >>> closest_integer (((\"10\") 10 >>> closest_integer (((\"15.3\") 15 تێبینی: دەوری کردن لە سفر واتە ئەگەر ژمارە دیاریکراوەکە لە دوو ژمارەی تەواو دوور بێت، ئەوا ئەو ژمارەیە کە دوورترینە لە سفر دەگەڕێتەوە. بۆ نموونە closest_integer (((14.5\") دەبێت ١٥ و closest_integer (((-14.5\") دەبێت -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ n، دەبێت کۆپێک لە n ئاستی بەرد دروست بکەیت. یەکەم ئاست n بەردی هەیە. ژمارەی بەردەکان لە ئاستی داهاتوو بریتییە لە: - ژمارەی نامۆ ئەگەر n نامۆ بێت. - ژمارەی جووت ئەگەر n جووت بێت. ژمارەی بەردەکان لە هەر ئاستێک لە لیستێک بگێڕەوە، کە تێیدا توخمی لە هێڵی i ژمارەی بەردەکانی ئاستی (i+1) نیشان دەدات. نموونە: >>> make_a_pile ((3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"تۆ زنجیرەیەک وشەت پێ دەدرێت کە بە کۆما یان بۆشایی لێک جیا کراونەتەوە. ئەرکی تۆ ئەوەیە کە زنجیرەکە دابەش بکەیت بۆ وشەکان و کۆمەڵێک وشە بدەیتەوە. بۆ نموونە: words_string ((\"سڵاو، ناوم جۆنە\") == [\"سڵاو\"، \"من\"، \"ناوی\"، \"یە\"، \"جۆن\"] words_string (((\"یەک، دوو، سێ، چوار، پێنج، شەش\") == [\"یەک\"، \"دوو\"، \"سێ\"، \"چوار\"، \"پێنج\"، \"شەش\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ئەم فانکشنە دوو ژمارەی ئەرێنی وەردەگرێت x و y و گەورەترین ژمارەی تەواو دەداتەوە کە لە مەودای [x, y] دا بێت. ئەگەر ژمارەیەکی وا نەبێت، ئەوا فانکشنەکە دەبێت -1 بداتەوە. بۆ نموونە: choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"دوو ژمارەی تەواو پۆزەتیڤ n و mت پێ دراوە، ئەرکی تۆ ئەوەیە کە تێکڕای ژمارە تەواوەکانی n تا m (بە n و mیشەوە) حیساب بکەیت. وەڵامەکە بگەیەنێتە نزیکترین ژمارە تەواو و بیگۆڕە بە دووای. ئەگەر n گەورەترە لە m، گەڕانەوەی -1. نموونە: rounded_avg (((1, 5) => \"0b11\" rounded_avg (((7, 5) => -1 rounded_avg (((10, 20) => \"0b11\" rounded_avg (((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"بە پێدانی لیستی ژمارە پۆزەتیڤە تەواوەکان x. لیستی پۆلێنکراو لە هەموو ئەو توخمانەی کە هیچ ژمارەیەکی جووتیان نییە، بگەڕێتەوە. تێبینی: لیستی گەڕاو دەبێت بە ڕیزبەندی زیادکردن پۆلێن بکرێت. بۆ نموونە: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"لە ڕیزێکی ژمارە تەواوەکاندا، ئەو ژمارە تەواوانە ڕیزبکە کە لە نێوان ١ بۆ ٩ دا هەن، ڕیزبکە ڕیزبکە ڕیزبکە ڕیزبکە ڕیزبکە ڕیزبکە ڕیزبکە ڕیزبکە، پاشان ھەر ژمارەیەک بە ناوی خۆی لە \"یەک\"، \"دوو\"، \"سێ\"، \"چوار\"، \"پێنج\"، \"شەش\"، \"سێ\"، \"هەشت\"، \"نۆ\" جێگرەوە. بۆ نموونە: arr = [٢، ١، ١، ٤، ٥، ٨، ٢، ٣] -> ڕیزبکە arr -> [١، ١، ٢، ٣، ٤، ٥، ٨] -> ڕیزبکە arr -> [٨، ٥، ٤، ٣، ٢، ١، ١] return [\"سێ\"، \"چوار\"، \"سێ\"، \"دوو\"، \"دوو\"، \"دوو\"، \"یەک\"، \"یەک\"] ئەگەر ڕیزەکە بەتاڵ بێت، ڕیزبکە ڕیزبکە: arr = [] return [] ئەگەر ڕیزبکە ڕیزبکە ھەر ژمارەیەکی نامۆ بێت، پشتگوێ بخە: arr = [١، ١، ٥٥] -> arr -> arr - [١، ٥٥، ٥] -> arr = [51] - [' one' return 1,' ].\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"فانکشن f جێبەجێ بکە کە n وەک پارامێتر وەردەگرێت و لیستێکی قەبارەی n دەگەڕێنێتەوە، بە جۆرێک کە بەهای توخمی لە هێڵی i فاکتۆری i بێت ئەگەر i جووت بێت یان کۆی ژمارەکانی 1 تا i بێت ئەگەر نا. i لە 1 دەست پێ دەکات. فاکتۆری i بریتییە لە لێکدانەوەی ژمارەکانی 1 تا i (1 * 2 * ... * i). نموونە: f (((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ n، گەڕاندنەوەی توپلێک کە ژمارەی palindromes ی تەواو و تەواو و تەواو لە نێو مەودادا بێت ((١، ن) ، بە شمول. نموونە ١: Input: ٣ Output: (١، ٢) ڕوونکردنەوە: Palindromes ی تەواو لە ١، ٢، ٣ دانە و یەکێکیان جووت و دوویان جووتن. نموونە ٢: Input: (٤، ٦) ڕوونکردنەوە: Palindromes ی تەواو لە ١، ٢، ٣، ٤، ٥، ٦، ٧، ٨، ٩، ١١ دانە و چواریان جووت و ٦ یان جووتن. تێبینی: ١. <= n <= ١٠^٣ ٢. tuple گەڕاندنەوەی ژمارەی palindromes ی تەواو و تەواو و تەواو و جووت و جودە بە یەکەوە. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"فانکشنێک بنووسە count_nums کە کۆمەڵێک ژمارە تەواو وەردەگرێت و ژمارەی ئەو توخمانەی دەگەڕێنێتەوە کە کۆی ژمارەکانی >0 بێت. ئەگەر ژمارەیەک نەرێنی بێت، ئەوا یەکەمین ژمارە بە ئیمزاەکەی نەرێنی دەبێت: بۆ نموونە -123 ژمارەکانی -1, 2 و 3 ی بە ئیمزا هەیە. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ئێمە کۆمەڵێک 'arr'مان هەیە کە پێکهاتووە لە N ژمارەی تەواو arr[1], arr[2], ..., arr[N]. ژمارەکانی ناو کۆمەڵەکە بە شێوەیەکی هەڕەمەکی ڕیزبەندی دەکرێن. ئەرکی تۆ ئەوەیە کە دیاری بکەیت ئەگەر دەکرێت کۆمەڵێک بە شێوەی نزم نەکراو ڕیزبەندی بکرێت بە ئەنجامدانی ئەم ئۆپەراسیۆنەی خوارەوە لەسەر کۆمەڵەکە: تۆ مۆڵەتت هەیە بۆ ئەنجامدانی ئۆپەراسیۆنی جوڵانەوەی ڕاست چەند جارێک. یەک ئۆپەراسیۆنی جوڵانەوەی ڕاست واتە جوڵاندنی هەموو توخمەکانی کۆمەڵەکە بە یەک پێگە لە ئاراستەی ڕاستدا. دوایین توخمی کۆمەڵەکە دەگوازرێتەوە بۆ پێگەی سەرەتایی لە کۆمەڵەکە واتە 0th index. ئەگەر دەکرێت ڕیزبەندی کراو بەدەست بهێنیت بە ئەنجامدانی ئۆپەراسیۆنی سەرەوە ئەوا گەڕانەوەی True دەبێت ئەگەرچی دیسان گەڕانەوەی False دەبێت. ئەگەر کۆمەڵە دیاریکراوەکە بەتاڵ بێت ئەوا گەڕانەوەی True دەبێت. تێبینی: لیستی دیاریکراو گەرەنتی هەیە بۆ ئەوەی توخمەکانی تایبەت هەبێت. بۆ نموونە: move_one_(ball_[ڕێزبەندی 4،==ڕێزبەندی 1،==ڕێزبەندی 2،==ڕێزکاری ڕاست: بە ئەنجامدانی ئۆپەراسیۆنەکانی نزمانی نزمانی نزمایی بۆ گۆڕینی کۆمەڵەکە دەکرێت بە ئەنجامدانی هەر ژمارەیەکی دیاریکراو.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"لەم کێشەیەدا، فانکشنێک جێبەجێ دەکەیت کە دوو لیستی ژمارە وەردەگرێت، و دیاری دەکات کە ئایا دەکرێت ئاڵوگۆڕی توخمەکان لە نێوانیاندا ئەنجام بدرێت بۆ ئەوەی lst1 ببێتە لیستی ژمارە جووتەکان. هیچ سنورێک نییە لەسەر ژمارەی توخمەکانی ئاڵوگۆڕکراو لە نێوان lst1 و lst2. ئەگەر دەکرێت ئاڵوگۆڕی توخمەکان لە نێوان lst1 و lst2 بکرێت بۆ ئەوەی هەموو توخمەکانی lst1 جووت بن، \"بەڵێ\" بدەرەوە. ئەگەر نا، \"نا\" بدەرەوە. بۆ نموونە: ئاڵوگۆڕ[(1, 2, 3, 4], [1, 2, 3, 4]) => \"بەڵێ\" ئاڵوگۆڕ[(1, 2, 3, 4], [1, 5, 3, 4]) => \"نا\" وا دانراوە کە لیستە نا بەتاڵەکان دەبن.\"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"بە دانانی زنجیرەیەک کە نوێنەرایەتی پیتێکی بچووک دەکات بە جیابوونەوەی بۆشایی، فەرهەنگێک بۆ پیتەکە بگەڕێنێتەوە کە زۆرترین دووبارەبوونەوەی تێدایە و ژمارەی پێوەندیدار بە خۆیەتی. ئەگەر چەند پیتێک هەمان ڕووداویان هەبێت، هەموویان بگەڕێنەوە. نموونە: هیستۆگرام ((('a b c') == {'a': 1, 'b': 1, 'c': 1} هیستۆگرام ((('a b b a') == {'a': 2, 'b': 2} هیستۆگرام ((('a b c a b') == {'a': 2, 'b': 2} هیستۆگرام ((('b b a') == {'b 4}: هیستۆگرام (((')) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ئەرک ئێمە دوو ڕیز s و cمان پێ دراوە، دەبێت هەموو کارەکتەرەکانی s سڕینەوە کە یەکسانن بە هەر کارەکتەرێک لە cدا پاشان پشکنین بکەین ئەگەر ڕیزەکە پالێندرۆمە. ڕیزێک بە پالێندرۆمی ناودەبرێت ئەگەر هەمان ڕیز بۆ دواوە بخوێنرێتەوە وەک بۆ پێشەوە. دەبێت توپلێک بگێڕینەوە کە ڕیزەکە لە ئەنجامدا بێت و ڕاست/ناڕاست بێت بۆ پشکنینەکە. نموونە بۆ s = \"abcde\" ، c = \"ae\" ، ئەنجامەکە دەبێت ('bcd' ، ناڕاست) بۆ s = \"abcdef\" ، c = \"b\" ئەنجامەکە دەبێت ('acdef' ، ناڕاست) بۆ s = \"abcdedcba\" ، c = \"ab\" ، ئەنجامەکە دەبێت ('cdedc' ، راست)\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"بە پێدانی لیستی ڕیزەکان، کە هەر ڕیزێک تەنها لە ژمارە پێکهاتووە، لیستێک بگەڕێتەوە. هەر توخمێکی i لە دەرھاتنی دەبێت \"ژمارەی توخمە نامۆکان بێت لە ڕیز i لە ھێنانەکە\". کە ھەموو iەکان دەبێت بە ژمارەی ژمارە نامۆکان لە i'th ڕیز لە ھێنانەکە جێگیر بکرێن. >>> odd_count['1234567']) [\"ژمارەی توخمە نامۆکان 4n لە str4ng 4 لە 4n دەرھێنانەکە.\"] >>> odd_count['3',\"111111\"]) [\"ژمارەی توخمە نامۆکان 1n لە str1ng 1 لە 1n دەرھێنانەکە. \"، \"ژمارەی توخمە نامۆکان 8n لە str8ng 8 لە 8n دەرھێنانەکە. \"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"بە دانانی کۆمەڵێک ژمارە تەواو n، کەمترین کۆی ھەر کۆمەڵێکی خوارەوەی ژمارە n کە بەتاڵ نییە بدۆزەرەوە. نموونە minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"تۆ تۆڕێکی ڕاستگۆشەی بیرەکانت پێ دراوە. هەر ڕیزێک یەک بیرە و هەر یەک لە ڕیزەکان یەک یەکەی ئاون. هەر بیرێک سەبەتەیەکی هاوتای هەیە کە دەتوانرێت بۆ دەرهێنانی ئاو بەکاربهێنرێت، و هەموو سەبەتەکان هەمان تواناییان هەیە. ئەرکەکەت ئەوەیە کە سەبەتەکان بەکاربهێنیت بۆ بەتاڵکردنەوەی بیرەکان. دەرهێنان ژمارەی جارانەی کە پێویستە بۆ دابەزاندنی سەبەتەکان. نموونە: ١: Input: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 دەرهێنان: ٦: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 دەرهێنان: ٥: Input: [[:0,0,0], [0,0,0]] bucket_capacity: ٥ دەرهێنان: ٠n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"لەم کاتایەدا، دەبێت کۆمەڵێک ژمارە تەواو نەرێنیی ڕیزبکەیت بەپێی ژمارەی یەکەکان لە نوێنەرایەتی دووایییان بە ڕیزێکی بەرز. بۆ ژمارەیەکی هاوشێوەی یەکەکان، ڕیزبەندی لەسەر بنەمای بەهای دەیمی. دەبێت بەم شێوەیە جێبەجێ بکرێت: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"بە دانانی ڕیزێک s و ژمارەیەکی سروشتی n، ئەرکێکت پێ سپێردراوە بۆ جێبەجێکردنی فانکشنێک کە لیستی هەموو وشەکانی ڕیز s دەداتەوە کە ڕێک n هاوئۆنەیان تێدایە، بۆ ئەوەی ئەم وشانە لە ڕیز s دا دەربکەوێت. ئەگەر ڕیز s بەتاڵ بێت ئەوا فانکشنەکە دەبێت لیستی بەتاڵ بگەڕێنێتەوە. تێبینی: لەوانەیە وا دابنێیت ڕیزە دەرکەوتە تەنها پیت و بۆشایی تێدایە. نموونە: select_words (((\"مەریەم بەرخێکی بچووکی هەبوو\"، 4) ==> [\"بەچیی\"] select_words (((\"مەریەم بەرخێکی بچووکی هەبوو\"، 3) ==> [\"مەریەم\"، \"بەچیی\"] select_words (((بۆشاییەکی سپی سادە\"، 2) ==> [] select_words (((\"سڵاو جیهان\"، 4) ==> [\"بەچیی\"] select_words (((\"مام سام\"، 3) ==> [\"مام\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"وشەیەکت پێ دراوە. ئەرکەکەت ئەوەیە نزیکترین دەنگدانە بدۆزیتەوە کە لەنێوان دوو هاوئەندامی لای ڕاستی وشەکە بێت (بە هەستیاری ڕێنووسی). دەنگدانەکان لە سەرەتاو کۆتایی دا هەژمار ناکرێن. گەر هیچ دەنگدانێکت نەدۆزیتەوە مەرجی سەرەوە جێبەجێ دەکات، ئەوا ڕیزێکی بەتاڵ بدەرەوە. لەوانەیە وا دابنێیت کە ڕیزەکە تەنها پیتی ئینگلیزی تێدایە. نموونە: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''تۆ لیستی دوو ڕیزت پێ دراوە، هەردوو ڕیزەکە پێکهاتوون لە قۆچی کراو '(' یان قۆچی داخراو ') '. کارەکەت ئەوەیە کە بزانیت ئەگەر دەکرێت دوو ڕیزەکە بە ڕیزێک پێکەوە ببەسترێت، کە ڕیزەکە باش دەبێت. ڕیزێک S بە باش دادەنرێت ئەگەر و تەنها ئەگەر هەموو قۆچییەکان لە S هاوسەنگیان هەبێت. بۆ نموونە: ڕیزەکە '((()) ' باشە، لەکاتێکدا ڕیزەکە '()) ' باش نییە. گەر رێگەیەک هەبێت بۆ دروستکردنی ڕیزێکی باش، 'بەڵێ' بدەرەوە، و ئەگەر نا 'نا' بدەرەوە. نموونە: match_parens[('() ', ') ']) == 'بەڵێ' match_parens[(') ', ') ']) == 'نا' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"لە ڕیزێکی پڕ لە ژمارە تەواوەکان و ژمارەیەکی تەواو k بەدیار ھاتووە، لیستێکی ڕێککراوی درێژایی k بە زۆرترین ژمارە k لە ڕیزەکان بدەرەوە. نموونە1: ھێنان: arr = [-3, -4, 5], k = 3 دەرچوون: [-4, -3, 5] نموونە2: ھێنان: arr = [4, -4, 4], k = 2 دەرچوون: [4, 4] نموونە3: ھێنان: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 دەرچوون: [2] تێبینی: 1. درێژایی ڕیزەکە لە مەودای [1, 1000] دەبێت. 2. توخمەکانی ڕیزەکە لە مەودای [-1000, 1000] دەبێت. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"بە پێدانی لیستی پڕی ژمارە تەواوەکان، کۆی هەموو ئەو توخمە نامۆیانە بدەرەوە کە لە شوێنی جووتدان. نموونە چارەسەر (([٥، ٨، ٧، ١]) ==> 12 چارەسەر (([٣، ٣، ٣، ٣، ٣]) ==> 9 چارەسەر (([30, 13, 24, 321]) ==>0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"بە دانانی ڕیزێکی پڕ لە ژمارە تەواوەکان arr و ژمارەیەکی تەواو k، کۆی ئەو توخمانەی بگەڕێتەوە کە زۆرترین دوو ژمارەیان لە یەکەم k توخمی arr ەوە بێت. نموونە: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) \"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ n، لیستێکی پۆلێنکراو بگەڕێنەوە کە ژمارە نامۆکان لە ڕیزبەندی کۆلاتزدا هەیە. گریمانەی کۆلاتز گریمانەیەکی بیرکارییە کە پەیوەندی بە ڕیزبەندیەکەوە هەیە کە بەم شێوەیە پێناسە کراوە: دەستپێبکە بە هەر ژمارەیەکی پۆزەتیڤ n. پاشان هەر دەستەواژەیەک لەم دەستەواژەیە پێشوودا وەردەگیرێت بەم شێوەیە: ئەگەر دەستەواژەی پێشوودا جووت بێت، دەستەواژەی داهاتوو نیوەی دەستەواژەی پێشوودا دەبێت. ئەگەر دەستەواژەی پێشوودا نامۆ بێت، دەستەواژەی داهاتوو 3 هێندەی دەستەواژەی پێشوودا پڵەسە 1. گریمانەکە ئەوەیە کە گرنگ نییە چ بەهایەکی n بێت، ڕیزبەندیەکە هەمیشە دەگاتە 1. تێبینی: 1. کۆلاتز (((1) بریتییە لە [1] . 2. لیستەکە بە ڕیزبەندی زیادبوو گەڕێندراوە. بۆ نموونە: get_odd_collatz ((5) دەگەڕێتەوە [1, 5] # ڕیزبەندی کۆلاتز بۆ 5 بریتییە لە [5, 8, 16, 4, 2, 1], بۆیە ژمارە نامۆکان تەنها 1 و 5 ن.\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"پێویستە فانکشنێک بنووسیت کە ڕەوایی ڕیزێکی دیاریکراو بدات و راست گەر ڕیزەکە ڕەوایە بە پێچەوانەوە هەڵەیە. ڕیزەکە ڕەوایە ئەگەر هەموو یاساکانی خوارەوە جێبەجێ بکرێت: 1. ڕیزەکە بەتاڵ نەبێت. 2. ژمارەی ڕۆژەکان کەمتر نەبێت لە 1 یان زیاتر بێت لە 31 ڕۆژ بۆ مانگەکانی 1,3,5,7,8,10,12. هەروەها ژمارەی ڕۆژەکان کەمتر نەبێت لە 1 یان زیاتر بێت لە 30 ڕۆژ بۆ مانگەکانی 4,6,9,11. هەروەها ژمارەی ڕۆژەکان کەمتر نەبێت لە 1 یان زیاتر بێت لە 29 بۆ مانگەکانی 2. 3. مانگەکان نابێت کەمتر بێت لە 1 یان زیاتر بێت لە 12. 4. ڕیزەکە دەبێت لە فۆرماتی: mm-dd-yyyy بۆ نموونە: valid_date ((('03-11-2000') => true_date ((('15-01-2012') => false_date ((('04-01-2040') => false_date ((('06-04-2020') => true_date ((('06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''بە پێی زنجیرە وشەکان، لیستێک لە وشەکان بە دابەشکردنی بۆشاییەکان بگەڕێتەوە، ئەگەر بۆشاییەکان لە دەقدا نەبن پێویستە بە دابەشکردنی کۆماکان بگەڕێتەوە، ئەگەر کۆماکان نەبن پێویستە ژمارەی پیتەکانی بچووک بە ڕیزبەندی نامۆ بگەڕێتەوە لە ئەلفوبێدا، ord ((a)) = 0، ord ((b)) = 1، ... ord ((z)) = 25 نموونە split_words ((\"سڵاو جیهان!\") â -> [\"سڵاو جیهان!\"] split_words ((\"سڵاو جیهان!\") â -> [\"سڵاو جیهان!\"] split_words (((abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ئەگەر لیستی ژمارەکان بدرێت، گەڕانەوەی ئەگەر یان نا لە ڕیزبەندی بەرزبوونەوەدا. ئەگەر لیستی زیاتر لە 1 دووبارەی هەمان ژمارە هەبێت، گەڕانەوەی هەڵە. هیچ ژمارەیەکی نەرێنی و تەنها ژمارە تەواوەکان دابنێ. نموونە is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 2, 3, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"دوو ناوەندی پێدراوە، کە هەر ناوەندێک جووتێک لە ژمارە تەواوەکانە. بۆ نموونە، ناوەندی = (سەرەتاوە، کۆتایی) = (1, 2). ناوەندی پێدراو داخراوە کە مانای وایە ناوەندی (سەرەتاوە، کۆتایی) هەم سەرەتاو هەم کۆتایی دەگرێتەوە. بۆ هەر ناوەندی پێدراو، وا دادەنرێت کە سەرەتایەکەی کەمتر یان یەکسانە بە کۆتاییەکەی. ئەرکەکەت ئەوەیە کە دیاری بکەیت ئایا درێژی پچڕانی ئەم دوو ناوەندەیە ژمارەیەکی سەرەتاییە. بۆ نموونە، پچڕانی ناوەندەکان (1, 3), (2, 4) بریتییە لە (2, 3) کە درێژییەکەی 1ە، کە ژمارەیەکی سەرەتایی نییە. ئەگەر درێژی پچڕانەکە ژمارەیەکی سەرەتاییە، \"بەڵێ\" بگەڕێنەوە، ئەگەر نا، \"نا\" بگەڕێنەوە. ئەگەر دوو ناوەندی پچڕانەکە ناکۆکن، \"نا\" بگەڕێنەوە. [input/output] نموونەکان: پچڕان ((((1, 2), (2, 3) ==> \"چڕان-1, (((1), 4) ==> \"چڕان-0, (((1), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"تۆ کۆمەڵێک ژمارە تەواویت پێدراوە و پێویستە کۆی قەبارەی ژمارە تەواوەکان زیاد بکەیت بە بەرھەمی هەموو نیشانەکانی ھەر ژمارەیەک لە کۆمەڵەکە، کە بە ١، -١ یان ٠ نوێنەرایەتی دەکرێت. تێبینی: گەڕانەوەی هیچ بۆ کۆمەڵە بەتاڵەکان. نموونە: >>> prod_signs (([١، ٢، ٢، -٤]) == -٩ >>> prod_signs (([٠، ١]) == 0 >>> prod_signs (([]) == هیچ\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"بەپێى تۆڕێک کە N ڕیز و N ستوونى (N >= 2) و ژمارەیەکى تەواوى پۆزەتیڤى k هەبێت، هەر خانەیەکى تۆڕەکە بەهاى خۆى تێدایە. هەموو ژمارەیەکى تەواوى لە مەوداى [1, N * N] بەخۆوە یەکجار لە خانەکانى تۆڕەکە دەردەکەوێت. دەبێت کەمترین ڕێڕەوی درێژی k بدۆزیتەوە لە تۆڕەکە. دەتوانیت لە هەر خانەیەکەوە دەستپێبکەیت، و لە هەر هەنگاوێکدا دەتوانیت بچیتە هەر خانەیەکی دراوسێ، بە واتایەکی تر، دەتوانیت بچیتە ئەو خانانەی کە لەتەک تۆوە لەتەک خانەی ئێستا دەچن. تکایە تێبینی ئەوە بکە کە ڕێڕەوی درێژی k مانای سەردانیکردنی ڕێک k خانەیە (نەک مەرج بێت جیاواز بێت). ناتوانیت بچیتە دەرەوەی تۆڕەکە. ڕێڕەوی A (درێژی k) بە کەمتر لە ڕێڕەوی B (درێژی k) دادەنرێت ئەگەر پاش دروستکردنی لیستی ڕیزکراو لە بەهاکان لەسەر خانەکانی A و B (با پێیان بڵێین l_stA و l_stB) ، لە ڕووی فەرهەنگییەوە کەمتر لە l_stA_stB، بە واتایەکی تر، لە هەر خانەیەکی تەواوى k لە تۆڕەکە دەستپێبگریت، بە دەستپێبکەى دەتوانیت بچیتە هەر خانەیەکى خانەی دراوسێ کە لەترێکی هاوبەست هەیە لەگەڵ تۆڕەکە. تکایە تێبینی بکە کە درێژایی k (N = k) ، واتە: [A = j_stA، j_st_[i، j_j، j_j، j_i، j_j، j_i، j_j، [A=1, j_j، [A=4, j_i=1، j_i=1، j_j=1، j_i=[_j] [_i=1, [_i] [_j=1, [_j=1, [_j=1, j_[_2,]، [_[_[_[_2,] [_[_B]، [_[_[_[_[_[_]،_[_[_[_[_]\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"هەموو کەس زنجیرەی فیبۆناتچی دەزانێت، لە دوو سەدەی ڕابردوودا لەلایەن بیرکارانەوە بە قووڵی لێکۆڵینەوەی لەسەر کراوە. بەڵام ئەوەی خەڵک نایزانێت بریتییە لە زنجیرەی تریبۆناتچی. زنجیرەی تریبۆناتچی بە دووبارەبوونەوە پێناسە دەکرێت: tri(1) = 3 tri(n) = 1 + n / 2, ئەگەر n جووت بێت. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ئەگەر n نامۆ بێت. بۆ نموونە: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ژمارەیەکی تەواو نینەگەتیڤت پێ دراوە، دەبێت لیستی یەکەم ژمارەکانی n + 1 ی زنجیرەی تریبۆناتچی بدەیتەوە. نموونە: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ n، بەرهەمی ژمارە نامۆکان بدەرەوە. گەر هەموو ژمارەکان جووت بن، ئەوا 0 بدەرەوە. بۆ نموونە: ژمارە (((1) == 1 ژمارە (((4) == 0 ژمارە ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''فانکشنێک دروست بکە کە ڕیزێکی بێبڕاو وەک دەرھێنان وەربگرێت کە تەنھا بڕاوەکانی چوارگۆشەی تێدایە. فانکشنەکە دەبێت راست بگەڕێنێتەوە ئەگەر و تەنھا ئەگەر یەک زنجیرە بڕاوەی دروست ھەبێت کە لانیکەم یەک بڕاوەی لە زنجیرەکە دا ھەڵکەوتووە. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]] â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"لیستی ژمارەکانت پێ دراوە. پێویستە کۆی دووجا ژمارەکانی لیستی دیاریکراو بدەیتەوە، هەر توخمێک لە لیستەکە بۆ بەشی سەرەوەی int (((Ceiling)) یەکەم جار کۆبکەیتەوە. نموونە: بۆ lst = [1,2,3] دەرھاتەکە دەبێت 14 بۆ lst = [1,4,9] دەرھاتەکە دەبێت 98 بۆ lst = [1,3,5,7] دەرھاتەکە دەبێت 84 بۆ lst = [1.4,4.2,0] دەرھاتەکە دەبێت 29 بۆ lst = [-2.4,1,1] دەرھاتەکە دەبێت 6 \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''فانکشنێک دروست بکە کە راست گەر دوایین کاراکتەری ڕیزێکی دیاریکراو کاراکتەری ئەلفوبێی بێت و بەشێک نەبێت لە وشەیەک، وە هەڵە ئەگەر نا. تێبینی: وشە کۆمەڵێک کاراکتەرە کە بە بۆشایی لێک جیا کراون. نموونە: check_if_last_char_is_a_letter (((\"apple pie\") â -> False check_if_last_char_is_a_letter (((apple pi e\") â -> True check_if_last_char_is_a_letter (((apple pi e)) â -> False check_if_last_char_is_a_letter \" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"فانکشنێک دروست بکە کە گەورەترین هێماى ئەلیمەنتێک بگێڕێتەوە کە گەورەتر نەبێت لە یان یەکسان بێت بە ئەلیمەنتەکەى کە بەر لە ئەو دێت. ئەگەر هیچ ئەلیمەنتێک نەبێت ئەوا بگێڕێتەوە -1. ئەو ڕیزە ناگرێتەوە بەهاى دووبارە. نموونە: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''فانکشنێک دروست بکە کە توپلێک (a, b) دەداتەوە، کە تێیدا 'a' گەورەترین ژمارەی تەواو نەرێنییە، و 'b' بچوکترین ژمارەی تەواو ئەرێنییە لە لیستێکدا. ئەگەر هیچ ژمارەیەکی تەواو نەرێنی یان ئەرێنی نەبێت، ئەوا بە None دەگەڕێنێتەوە. نموونە: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"فانکشنێک دروست بکە کە ژمارە تەواوەکان، فلواتەکان، یان زنجیرە ژمارە ڕاستەقینەکان وەربگرێت و گۆڕاوەکانی گەورەتر لە جۆری گۆڕاوەکەی دیاریکراو بگەڕێنێتەوە. نەگەڕێتەوە ئەگەر بەهاکان یەکسان بن. تێبینی: ئەگەر ژمارەیەکی ڕاستەقینەی وەک زنجیرە نوێنەرایەتی بکرێت، ئەوا خاڵی گۆڕاو لەوانەیە . یان ، compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> نەگەڕێتەوە \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"هەڵسەنگاندن بکە بۆ ئەوەی بزانین ئایا ژمارە n دەتوانرێت وەک کۆی 4 ژمارەی پۆزەتیڤ و جووت بنوسرێت بۆ نموونە is_equal_to_sum_even (٤) == هەڵە is_equal_to_sum_even (٦) == هەڵە is_equal_to_sum_even (٨) == ڕاستە \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"فاکتۆریالی بەڕازیلی بەم شێوەیە پێناسە دەکرێت: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! کە n > 0 بۆ نموونە: >>> special_factorial ((4) 288 فانکشنەکە ژمارەیەکی تەواو وەردەگرێت وەک دەسپێرکردن و دەبێت فاکتۆریالی تایبەتی ئەم ژمارەیە بگەڕێنێتەوە. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ نموونە-3رە، هەموو بۆشاییەکانی ناوە بە هێڵی ژێرەوە بگۆڕە، ئەگەر زنجیرە زیاتر لە دوو بۆشایی یەک لە دوای یەک هەبێت، ئەوا هەموو بۆشاییە یەک لە دوای یەکەکان بگۆڕە بە - fix_spaces (((\"نموونە\") == \"نموونە\" fix_spaces (((\"نموونە1\") == \"نموونە1\" fix_spaces (((\"نموونە2\") == \"_نموونە2\" fix_spaces (((\"نموونە3\") == \"_نموونە-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"فانکشنێک دروست بکە کە ڕیزێک لە ڕیزەکان کە نوێنەرایەتی ناوی فایل دەکات، وەربگرێت و 'بەڵێ' گەر ناوی فایلەکە ڕاستە، و 'نا' گەر نا. ناوی فایلەکە بە ڕیز دادەنرێت ئەگەر و تەنها ئەگەر هەموو مەرجەکانی خوارەوە جێبەجێ بکرێت: - نابێت زیاتر لە سێ ژمارە ('0'-'9') لە ناوی فایلەکەدا هەبێت. - ناوی فایلەکە ڕێک یەک خاڵ لەخۆ دەگرێت. - ڕیزەکە پێش خاڵەکە نابێت بەتاڵ بێت، و بە پیتی ئەلفی لاتینی دەست پێ بکات ('a'-'z' و 'A'Z'). - ڕیزەکە دوای خاڵەکە دەبێت یەکێک بێت لەمانە: ['txt', 'exe', 'lld'] نموونە: file_name_check\"{example.txt.} # => 'بەڵێ'_name_file_check\"{example.dll1} => 'نا' (ناوی فایلەکە دەبێت بە پیتی ئەلفی لاتینی دەست پێ بکات) # => 'نا'\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"ئەم فانکشنە لیستی ژمارە تەواوەکان وەردەگرێت. بۆ هەموو ئەو ژمارانەی لە لیستەدا هەن، فانکشنەکە دەبێت چوارگۆشەی ژمارە تەواوەکە بکات ئەگەر هێڵەکەی چەند هێلەیەکی ٣ بێت و سێگۆشەی ژمارە تەواوەکە دەکات ئەگەر هێڵەکەی چەند هێلەیەکی ٤ بێت نەک چەند هێلەیەکی ٣. فانکشنەکە گۆڕانکاری بەسەر ئەو ژمارانەدا ناهێنێت کە لە لیستەدا هەن کە هێڵەکانیان چەند هێلەیەکی ٣ یان ٤ نین. ئەم فانکشنە دواتر دەبێت کۆی هەموو ئەو ژمارانە بگێڕێتەوە. نموونە: بۆ lst = [1,2,3] دەرھێنانەکە دەبێت ٦ بۆ lst = [] دەرھێنانەکە دەبێت ٠ بۆ lst = [-1,-5,2,-1,-5] دەرھێنانەکە دەبێت -126 \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"تۆ زنجیرەیەکت پێ دراوە کە ڕستەیەک نیشان دەدات، ڕستەکە چەند وشەیەکی تێدایە کە بە بۆشایی لێک جیا کراونەتەوە، وە دەبێت ڕستەیەک بدەیتەوە کە وشەکانی ڕستەی ڕەسەنی تێدایە، کە درێژییەکانی ژمارە سەرەتاییەکانن، ڕیزبەندی وشەکانی ڕستەی نوێ دەبێت وەک ڕستەی ڕەسەنی بێت. نموونە1: دەرچوون: ڕستەکە = \"ئەمە تاقیکردنەوەیە\" دەرچوون: \"یە\" نموونە2: دەرچوون: ڕستەکە = \"با بچین بۆ مەلەکردن\" دەرچوون: \"بڕۆین بۆ\" ڕێگرییەکان: * 1 <= len(ڕستەکە) <= 100 * ڕستەکە تەنها پیتەکانی تێدایە \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ئەرکی تۆ جێبەجێکردنی فانکشنێکە کە دەربڕینی x * n سادە دەکات. فانکشنەکە راست دەداتەوە ئەگەر x * n بە ژمارەیەکی تەواو هەڵسەنگێندرێت و بە پێچەوانەوە هەڵە. هەردوو x و n، نوێنەرایەتی زنجیرەی بەشە بوون و ئەم فۆرماتە ی خوارەوەیان هەیە، <بەژمار>/<بە ناوگر> کە ھەردوو بەژمار و ناوگر ژمارە تەواوی پۆزەتیڤن. دەتوانیت وا دابنێیت کە x و n بەشە دروستن و سفر وەک ناوگر نییە. سادە کردن (((\"1/5\"، \"5/1\") = راست سادە کردن (((\"1/6\"، \"2/1\") = هەڵە سادە کردن (((\"7/10\", \"10/2\") = هەڵە \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"فانکشنێک بنووسە کە لیستی ژمارە تەواوەکان بە ڕیزبەندی بەرزبوونەوە ڕێک بخات بەپێی کۆی ژمارەکانی. تێبینی: ئەگەر چەند خاڵێک هەبن بە هاوشێوەی کۆی ژمارەکانی، ئەوا ڕیزبەندی بکەن بە پێی هێمای خۆیان لە لیستی ڕەسەن. بۆ نموونە: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"فانکشنێک بنووسە کە کۆمەڵێک ژمارە وەک دەرچوون وەربگرێت و ژمارەی ئەو توخمانەی لە کۆمەڵەکەدا هەیە کە لە ١٠ گەورەترن و هەردوو ژمارە یەکەم و کۆتایی ژمارەیەک نامۆیە (١، ٣، ٥، ٧، ٩) بۆ نموونە: specialFilter (([١٥، -٧٣، ١٤، -١٥]) => 1 specialFilter (([33]، -٢، -٣، ٤٥، ٢١، ١٠٩)) => ٢\"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ژمارەیەکی پۆزەتیڤت پێدراوە n. دەبێت ژمارەیەکی پۆزەتیڤ دروست بکەیت a لە درێژی n. بۆ هەر i (1 ‰¤ i ‰¤ n) ، بەهای a[i] = i * i - i + 1. ژمارەی سێ هێندە (a[i]، a[j]، a[k]) ی a بدەرەوە کە i < j < k، و a[i] + a[j] + a[k] چەند هێندە لە 3. نموونە: Input: n = 5 Output: 1 ڕوونکردنەوە: a = [1, 3, 7, 13, 21] تاکە سێ هێندە ڕاستەقینە بریتییە لە (1, 7, 13).\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''لە سیستەمی خۆرماندا هەشت هەسارەی هەیە: نزیکترین هەسارەکە بۆ خۆر (مەرکووڕی) ە، دواتر هەسارەی ڤینۆس (Venus) ە، پاشان زەوی، مەریخ، مشتری، زحل، ئورانۆس، نیپتون. فانکشنێک بنووسە کە دوو ناوی هەسارەی وەک زنجیرە (planet1 و planet2) وەردەگرێت. فانکشنەکە دەبێت توپلێک بداتە گەڕ کە هەموو ئەو هەسارانە تێدایە کە خولگەكانیان لەنێوان خولگەی هەسارەی 1 و خولگەی هەسارەی 2 دانراون، بەگوێرەی نزیکبوونیان لە خۆر. فانکشنەکە دەبێت توپلێکی بەتاڵ بداتە گەڕ ئەگەر هەسارەی 1 یان هەسارەی 2 ناوی هەسارەی دروست نەبێت. نموونە: bf\"(جوبیتەر\"، \"نیپتون\") ==> (\"زحل\"، \"ئۆرانۆس\") bf((\"زەوی\"، \"مەرکووڕی\") ==> (\"ھەسار\"، \"زەوی\"، \"مەرکووڕی\"، \"جوبیتەر\"، \"زوو\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"فانکشنێک بنووسە کە لیستی ڕیزەکان وەک پارامێتر قبوڵ بکات، ڕیزەکانی دوور لە ڕیزەکان سڕێتەوە، و لیستی دەرئەنجام بە ڕیزێکی ڕێکوپێک دەگەڕێنێتەوە، لیستەکە هەمیشە لیستی ڕیزەکانە و هەرگیز ڕیزێکی ژمارە نییە، و لەوانەیە دووبارەیان تێدابێت. ڕیزبەندی لیستەکە دەبێت بە درێژایی هەر وشەیەک بەرزبێتەوە، و پێویستە لیستی ڕێکوپێکراو بە ئەو یاسایە بگەڕێنیتەوە. ئەگەر دوو وشە هەمان درێژییان هەبێت، لیستەکە بە ئەلفوبێی ڕێکبخە. فانکشنەکە دەبێت لیستی ڕیزبەندی ڕیزبەندی ڕیزبەندی بگەڕێنێتەوە. لەوانەیە وا دابنێیت کە هەموو وشەکان هەمان درێژییان دەبێت. بۆ نموونە: assert list_sort[\"aa\"\"، \"a\", \"aaa\"]) => assert list_sort[\"ab\"\"، \"aaaa\"\"، \"cd\" => \"abd\"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"بەرنامەیەکی سادەیە کە دەبێت بەهای x بگەڕێنێتەوە ئەگەر n ژمارەیەکی سەرەتایی بێت و بەهای y بگەڕێنێتەوە ئەگەر نا. نموونە: بۆ x_or_y ((7, 34, 12) == 34 بۆ x_or_y ((15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''بە پێی لیستی ژمارەکان، کۆی چوارگۆشەی ژمارەکانی ناو لیستەکە بگەڕێنەوە کە ناجوانن. ژمارە نەرێنییەکان و ژمارە تەواوەکان پشتگوێ بخە. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference ((([0]) == 0 ئەگەر لیستی ناڤەرۆکەکە بەتاڵ بێت، ئەوا 0 بگەڕێتەوە. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"من پێم وایە هەموومان ئەو هەستەمان لەبیرە کاتێک ئەنجامی ڕووداوێکی چاوەڕوانکراو لە کۆتاییدا ئاشکرا دەبێت. ئەو هەست و بیرکردنەوانەی کە لەو کاتەدا هەیە بە دڵنیاییەوە شایانی ئاماژەکردن و بەراوردکردنن. ئەرکەکەت ئەوەیە کە دیاری بکەیت کە ئایا کەسێک ئەنجامی ژمارەیەک یاریی بە دروستی زانیوە. دوو ڕیزەی نمر و گریمانەی یەکسانی دراوە، کە هەر ئاماژەیەک یاریی نیشان دەدات. ڕیزێکی هەمان درێژی بدەرەوە کە نیشانی دەدات کە هەر گریمانەیەک چەندە دوورە. ئەگەر بە دروستی زانیبێت، بەهای 0 دەبێت، ئەگەر نا، بەهایەکە جیاوازیی تەواو نێوان گریمانەکە و نمرەکە دەبێت. نموونە: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4,0,1,0,2,4]) -> [4,0,1,0,6,\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ناوی پۆلێک (دێڕێک) و لیستی زیادکراوەکانت پێدەدرێت. زیادکراوەکان بۆ بارکردنی پۆلەکانی تر بەکاردەهێنرێت بۆ پۆلەکە. هێزی زیادکراوەکە بەم شێوەیە: با CAP ژمارەی پیتی گەورە بێت لە ناوی زیادکراوەکە، و با SM ژمارەی پیتی بچووک بێت لە ناوی زیادکراوەکە، بەهێزکراوەکە بە فراکسیۆنی CAP - SM دەدرێت. تۆ دەبێت بەهێزترین زیادکراو بدۆزیتەوە و زنجیرەیەک بەم فۆرماتەوە بگێڕیتەوە: ClassName.StrongestExtensionName. ئەگەر دوو زیادکراو یان زیاتر هەبن بە هەمان بەهێزبوون، ئەوا دەبێت ئەوەی یەکەم بێت لە لیستەکە هەڵبژێریت. بۆ نموونە، ئەگەر \"Slices\" وەک پۆل و لیستی زیادکراوەکانت پێ دراوە: ['SEviviSliNGCes'، 'Cheese', 'StuFfed'] ئەوا دەبێت 'Slices.SEviSliNGCes' بگەڕێنیتەوە چونکە 'SviSliNGCes' 'mySviSliNGCes']) بەهێزترین زیادکراوەیە. بۆ نموونە: 'AA_Beats'، Strongest_Extension_Class' (بە ئینگلیزی: 'AA_Beats'، Strongest_Extension_Class' بۆ نموونە: 'AA_Class').\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"دوو وشەت پێ دراوە. پێویستە راست بدەیتەوە ئەگەر وشەی دووەم یان هەر یەک لە خولانەکانی بریتی بێت لە زنجیرەیەکی ژێر لە وشەی یەکەمدا cycpattern_check (((\"abcd\",\"abd\") => False cycpattern_check (((\"hello\",\"ell\") => True cycpattern_check (((\"whassup\",\"psus\") => False cycpattern_check (((\"abab\",\"baa\") => True cycpattern_check (((\"efef\",\"eeff\") => False cycpattern_check (((hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"بە دانانی ژمارەیەکی تەواو. گەڕاندنەوەی ژمارەیەکی تاپل کە ژمارەی ژمارە جووت و جودەکانی هەیە. نموونە: even_odd_count ((-12) ==> (1, 1) even_odd_count ((123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"بە دانانی ژمارەیەکی پۆزەتیڤ، بە یەکسانبوونی ژمارە ڕۆمانییەکەی وەک زنجیرە وەربگرە، و بە پیتی بچووک بیگەڕێنەوە.\"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''بە پێی درێژی سێ لای سێگۆشەیەک. گەر سێ لایەکە سێگۆشەیەکی ڕاستگۆیان پێکهێناوە ڕاست بدەرەوە، بە پێچەوانەوە ناڕاست. سێگۆشەیەکی ڕاستگۆ سێگۆشەیە کە یەکێک لە گۆشەکانی گۆشەی ڕاستگۆ یان 90 پلە بێت. نموونە: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"فانکشنێک بنووسە کە لیستی پیتەکان قبوڵ بکات. لیستەکە وشەی جیاواز لەخۆ دەگرێت. وشەی زۆرترین ژمارەی پیتی ناوازە بگەڕێنێتەوە. ئەگەر زۆر پیت زۆرترین ژمارەی پیتی ناوازە هەبێت، ئەو پیتەی بگەڕێنێتەوە کە یەکەم دێت لە ڕیزبەندی وشەنامەیی. find_max (([\"ناوی\"، \"لە\"، \"پیت\"]) == \"پیت\" find_max (([\"ناوی\"، \"enam\"، \"یاری\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"تۆ کەروێشکێکی برسیت و تا ئێستا ژمارەیەکی دیاریکراو لە گێزەرت خواردووە، بەڵام ئێستا پێویستە گێزەر زیاتر بخۆیت بۆ تەواوکردنی ژەمی ڕۆژەکە. پێویستە کۆمەڵێک [ کۆی گشتی گێزەرەکانی خواردوو دوای ژەمەکانت، ژمارەی گێزەرەکانی پاش ژەمەکانت] بگەڕێنیتەوە ئەگەر ژمارەیەکی تەواو گێزەر نەماوە، ئەوا هەموو گێزەرەکانی ماوە دەخۆیت، بەڵام هێشتا برسیت. نموونە: * بخۆ ((5, 6, 10) -> [11, 4] * بخۆ ((4, 8, 9) -> [12, 1] * بخۆ ((1, 10, 10) -> [11, 0] * بخۆ ((2, 11, 5) -> [7, 0] گۆڕاوەکان: @ ژمارە: ژمارەی تەواوی ئەو گێزەرانەی کە خواردوویت. @ پێویستی: ژمارەی تەواوی ئەو گێزەرانەی کە پێویستە بیخۆیت. @ ماوە: ژمارەی تەواوی ئەو گێزەرانەی لە سەکۆندا ماوە: * ژمارە = 0 = <= 0 * 1000 = <= 1000 * پێویستی بە <= 1000 = <= 1000 = = = 1000 = چێژە:)\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"دوو لیستی ئۆپراتۆر و ئۆپەراند. لیستی یەکەمی ئۆپەراسیۆنی جەبری بنەڕەتییە، لیستی دووەمیشی لیستی ژمارە تەواوەکانە. ئەم دوو لیستە بەکاربهێنە بۆ دروستکردنی دەربڕینی جەبری و گەڕانەوەی هەڵسەنگاندنی ئەم دەربڕینە. ئۆپەراسیۆنەکانی جەبری بنەڕەتی: زیادکردن (+) کەمکردنەوە (- ) لێکدان (*) دابەشکردنی زەوی (//) دەربڕین (**) نموونە: ئۆپەراتۆر['+'، '*', '-'] ڕیز = [2, 3, 4, 5] ئەنجام = 2 + 3 * 4 - 5 => ئەنجام = 9 تێبینی: درێژی لیستی ئۆپەراتۆرەکان یەکسانە بە درێژی لیستی ئۆپەراتۆرەکان کەمکراو یەک. ئۆپەراتۆرەکان لیستی ژمارە تەواوەکانی نەنگەرین. ئۆپەراتۆر لانیکەم یەک ئۆپەراتۆر هەیە، و ئۆپەراتۆر لانیکەم دوو ئۆپەراتۆر هەیە.\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"string sت پێ دراوە. ئەگەر s[i] پیت بێت، ئەوا پیتی لە خوارەوە بۆ سەرەوە یان بە پێچەوانەوە هەڵبگرە، ئەگەر نا هێشتووەتەوە وەک خۆی. ئەگەر stringەکە پیت نەبێت، ئەوا stringەکە هەڵبگرە. فانکشنەکە دەبێت stringی دەرەنجام بگەڕێنێتەوە. نموونە solve{\"1234\") = \"4321\"{\"ab\") = \"AB\"{\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"string 'text' بدرێت، string هاوتای md5 hashەکەی بگەڕێتەوە. ئەگەر 'text' ستریندێکی بەتاڵ بێت، None بگەڕێتەوە. >>> string_to_md5('سڵاو جیهان') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "ckb_Arab",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"بە دوو ژمارەی تەواو پۆزەتیڤ a و b، ژمارە جووتەکانی نێوان a و b، بە ڕیزێکی بەرزکەرەوە بگەڕێنەوە. بۆ نموونە: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]