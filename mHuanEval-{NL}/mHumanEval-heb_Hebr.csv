task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,heb_Hebr,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""בדוק אם ברשימה נתונה של מספרים, יש שני מספרים קרובים זה לזה מאשר סף נתון. דוגמה: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,heb_Hebr,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""הכניסה לתפקוד זה היא מחרוזת המכילה קבוצות מרובות של קרניקים מונחים. המטרה שלך היא להפריד את הקבוצות הללו לשרשראות נפרדות ולהחזיר את רשימתן. קבוצות נפרדות מאוזנות (כל קרן פתוחה סגורה כראוי) ולא מונחות בתוך אחת לשנייה התעלמו מכל חללים בחוזה הכניסה. דוגמה: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) ['() ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,heb_Hebr,python,"

def truncate_number(number: float) -> float:
    """"""ניתן לפרק אותו לחלק של מספר שלם (הספר שלם הגדול ביותר קטן יותר מהספר נתון) ולחלק של מספרים עשרוניים (החלק הנותר תמיד קטן יותר מ-1). החזר את החלק העשירי של המספר. דוגמה: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,heb_Hebr,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""אתה מקבל רשימה של פעולות הפקדה והוצאת כספים בחשבון בנק שמתחילים עם מאזן אפס. המשימה שלך היא לזהות אם בשלב כלשהו יתרת החשבון נופלת מתחת לאפס, ובנקודה זו פונקציה צריכה להחזיר True. אחרת היא צריכה להחזיר False. דוגמה: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,heb_Hebr,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""עבור רשימה נתונה של מספרים, לחשב את הסטייה המוחלטת הממוצעת סביב ממוצע של קבוצת הנתונים הזו. הסטייה המוחלטת הממוצעת היא ההבדל המוחלט הממוצע בין כל אלמנט לבין נקודת מרכז (ממוצע במקרה זה: MAD = ממוצע. x - x_ממוצע. דוגמה: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,heb_Hebr,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""הוסף מספר ""הגבול"" בין כל שני אלמנטים רצופים של רשימת הקלט `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,heb_Hebr,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""הכניסה לתפקוד זה היא מחרוזת המייצגת קבוצות מרובות עבור קרניקים מונחים בנערות המופרדות על ידי חללים. עבור כל קבוצה, הוציאה את הרמה העמוקה ביותר של קינון של קרניקים. לדוגמה, (() (()) יש מקסימום שתי רמות של קינון בעוד ((())) יש שלוש. >>> parse_nested_parens (('((()) ((())) () (((()) ((((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,heb_Hebr,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""מסנן רשימת קווים של קווים רק עבור אלה המכילים קו משנה נתון >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,heb_Hebr,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""עבור רשימה נתונה של מספרים שלמים, החזר טופל המורכב מסכום ומוצר של כל המספרים שלמים ברשימה. סכום ריק צריך להיות שווה ל 0 ומוצר ריק צריך להיות שווה ל 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,heb_Hebr,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""מתוך רשימה נתונה של מספרים שלמים, ליצור רשימה של רולינג מרבית האלמנטים שנמצאו עד לרגע נתון ברצף. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,heb_Hebr,python,"

def is_palindrome(string: str) -> bool:
    """"""מצא את הפלינדרום הקצר ביותר שמתחיל עם מחרוזת מסופקת. רעיון האלגוריתם הוא פשוט: - מצא את הפוסטפיקס הארוך ביותר של מחרוזת מסופקת שהוא פאלינדרום. - הוסף לקצה של מחרוזת הפוך של תווית קוד של מחרוזת שמגיעה לפני הספציפי הפלינדרומי. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""בדיקת אם מחרוזת נתונה היא פאלינדרום""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,heb_Hebr,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""הכניסה היא שתי מחרוזות a ו-b המורכבות רק מ-1 ו-0. ביצוע XOR בינארי על הכנסות אלה ומחזיר תוצאה גם בתור מחרוזת.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,heb_Hebr,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""מתוך רשימת מחרוזות, החזר את הארוכה ביותר. החזר את הראשונה במקרה של מחרוזות מרובות באותו אורך. החזר None במקרה של רשימת ההכנסה ריק. >>> ארוך ביותר (([]) >>> ארוך ביותר ((['a', 'b', 'c']) 'a' >>> ארוך ביותר ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,heb_Hebr,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""מחזיר מחלק המשותף הגדול ביותר של שני מספרים שלמים a ו- b >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,heb_Hebr,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""מחזיר רשימה של כל הפרופיקסים מהקצר ביותר לארוך ביותר של מחרוזת ההכנסה >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,heb_Hebr,python,"

def string_sequence(n: int) -> str:
    """"""מחזיר מחרוזת המכילה מספרים מוגבלים בחלל החל מ 0 ועד n כולל. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,heb_Hebr,python,"

def count_distinct_characters(string: str) -> int:
    """"""אם ניתן מחרוזת, מצא כמה אותיות שונות (ללא קשר למקרה) היא מורכבת מ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,heb_Hebr,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""הכניסה לתפקוד זה היא מחרוזת המייצגת תווים מוזיקליים בפורמט ASCII מיוחד. המשימה שלך היא לפרס רשימת מחרוזות של אינטגרים המתאימים להרבה פעימות. הנה אגדה: 'o' - הערה, אחרונה פעימות 'o' - חצי הערה, אחרונה שתי פעימות ' - רבע הערה, אחרונה אחד פעימות >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,heb_Hebr,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""מצא כמה פעמים ניתן למצוא את השרשרת המשנית במשרשרת המקורית. ספור מקרים חופפים. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,heb_Hebr,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""הכניסה היא מחרוזת מספריים מוגבלת במרחב מ'אפס' עד 'תשע'. בחירות תקפות הן 'אפס', 'אחד', 'שניים', 'שלושה', 'ארבעה', 'חמישה', 'שש', 'שבעה', 'שמונה' ו 'תשע'. החזרת מחרוזת עם מספרים מסודרים מהקטן ביותר ל הגדול ביותר >>> sort_numbers (('שלושה אחד חמישה') 'אחד שלושה חמישה' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,heb_Hebr,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""מתוך רשימה מסופקת של מספרים (בארך של לפחות שניים) בחרו וחזרו שניים שהם הקרובים ביותר זה לזה וחזרו אותם בסדר (מספר קטן יותר, מספר גדול יותר). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,heb_Hebr,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""אם ניתן רשימה של מספרים (של לפחות שני אלמנטים), ליישם טרנספורמציה ליניארית לרשימה, כך שהספר הקטן ביותר יהיה 0 והגדול ביותר יהיה 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,heb_Hebr,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""מסנן רשימה נתונה של כל ערכי פייתון רק עבור מספרים שלמים >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,heb_Hebr,python,"

def strlen(string: str) -> int:
    """"""קו החזרה של קו נתון >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,heb_Hebr,python,"

def largest_divisor(n: int) -> int:
    """"""עבור מספר נתון n, מצא את המספר הגדול ביותר שמחלק את n באופן שווה, קטן מ- n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,heb_Hebr,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""מחזיר רשימה של גורמים ראשוניים של מספר שלם נתון בסדר החל מהקטן ביותר ועד הגדול ביותר. כל אחד מהגורמים צריך להיות מפורט מספר פעמים המתאים לכמה פעמים הוא מופיע בפקטוריזציה. מספר ההכנסה צריך להיות שווה לתוצר של כל הגורמים >>> פקטוריזציה ((8) [2, 2, 2] >>> פקטוריזציה ((25) [5, 5] >>> פקטוריזציה ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,heb_Hebr,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""מתוך רשימת מספרים שלמים, הסר את כל האלמנטים המופיעים יותר מפעם אחת. שמור על סדר האלמנטים שנשאר אותו הדבר כמו בהכנסה. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,heb_Hebr,python,"

def flip_case(string: str) -> str:
    """"""עבור מחרוזת נתונה, הפוך אותיות קטנות למספרים גדולים ומספרים גדולים למספרים קטנים. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,heb_Hebr,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""רשימת מחרוזות מקושרות לתוך מחרוזת אחת >>> מקושרת (([]) '' >>> מקושרת ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,heb_Hebr,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""מסנן רשימת קווים של קווים רק עבור אלה שמתחילים עם קישור נתון. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,heb_Hebr,python,"

def get_positive(l: list):
    """"""מחזיר רק מספרים חיוביים ברשימה. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,heb_Hebr,python,"

def is_prime(n):
    """"""מחזיר אמת אם מספר נתון הוא ראשוני, ושקר אחרת. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,heb_Hebr,python,"import math


def poly(xs: list, x: float):
    """"""xs הם פעילי פולינום. find_zero מוצא x כזה ש poly(x) = 0. find_zero מחזיר רק רק נקודת אפס, גם אם יש הרבה. יתר על כן, find_zero לוקח רק רשימה xs שיש מספר זמני של פעילי ונקודת אפס לא אפסית הגדולה ביותר כפי שהוא מבטיח פתרון. >>> round ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""מעריך פולינום עם מקדמים xs בנקודה x. החזר xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,heb_Hebr,python,"

def sort_third(l: list):
    """"""פונקציה זו לוקחת רשימה l ומחזירה רשימה l' כך ש-l זהה ל-l במדדים שאינם ניתנים לחלוקה על ידי שלושה, בעוד שערכיו במדדים הנחלקים על ידי שלושה שווים לערכי המדדים המתאימים של l, אך מסודרים. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,heb_Hebr,python,"

def unique(l: list):
    """"""מחזיר אלמנטים ייחודיים מפורטים ברשימה >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,heb_Hebr,python,"

def max_element(l: list):
    """"""מחזיר את המרב של האלמנט ברשימה. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,heb_Hebr,python,"

def fizz_buzz(n: int):
    """"""מחזיר את מספר הפעמים שבהן הספרה 7 מופיעה במספרים שלמים קטנים מ- n שניתנים לחלוקה על 11 או 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,heb_Hebr,python,"

def sort_even(l: list):
    """"""פונקציה זו לוקחת רשימה l ומחזירה רשימה l' כך ש-l זהה ל-l במדדים המוזרים, בעוד שערכיו במדדים הזוגיים שווים לערכי המדדים הזוגיים של l, אך מסודרים. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,heb_Hebr,python,"

def encode_cyclic(s: str):
    """"""לוקח כסיפור קו מקודד עם הפונקציה encode_cyclic. מחזיר סיפור קו מקודד.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""מחזיר מחרוזת מקודדת על ידי קבוצות מחזוריות של שלוש אותיות.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,heb_Hebr,python,"

def prime_fib(n: int):
    """"""prime_fib מחזיר מספר n שהוא מספר פיבונאצ'י והוא גם מספר ראשוני. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,heb_Hebr,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero לוקח רשימה של מספרים שלמים ככניסה. הוא מחזיר True אם יש שלושה אלמנטים נפרדים ברשימה שהסכום שלהם הוא אפס, וFalse אחרת. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero[(1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,heb_Hebr,python,"

def car_race_collision(n: int):
    """"""תארו לעצמכם כביש שהוא קו ישר ללא סוף. n מכוניות נוסעות משמאל לימין; בו זמנית, קבוצה אחרת של n מכוניות נוסעות ימינה לשמאל. שתי קבוצות מכוניות מתחילות להיות רחוקות מאוד אחת מהשנייה. כל המכוניות נעות באותה מהירות. אומרים ששתי מכוניות מתנגשות כאשר מכונית הנעה משמאל לימין פוגעת במכונית הנעה ימינה לשמאל. עם זאת, המכוניות הן יציבות וחזקות ללא סוף; כתוצאה מכך, הן ממשיכות לנוע במסלול שלהן כאילו לא התנגשו. פונקציה זו יוצרת את מספר ההתנגשויות הללו.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,heb_Hebr,python,"

def incr_list(l: list):
    """"""רשימה חוזרת עם אלמנטים המוגדלים ב 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,heb_Hebr,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero לוקח רשימה של מספרים שלמים ככניסה. הוא מחזיר True אם יש שני אלמנטים נפרדים ברשימה שהסכום שלהם הוא אפס, וFalse אחרת. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,heb_Hebr,python,"

def change_base(x: int, base: int):
    """"""שינוי בסיס מספרי של מספר הכניסה x לבסיס. החזרת ייצוג מחרוזת לאחר ההמרה. מספרי הבסיס הם פחות מ 10. >>> שינוי_בסיס (8, 3) '22' >>> שינוי_בסיס (8, 2) '1000' >>> שינוי_בסיס (7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,heb_Hebr,python,"

def triangle_area(a, h):
    """"""נתון אורך של צד ושטח החזרה הגבוהה עבור משולש. >>> משולש_שטח""""""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,heb_Hebr,python,"

def fib4(n: int):
    """"""רצף המספרים Fib4 הוא רצף דומה לרצף פיבונאצ'י, המוגדר כדלקמן: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). אנא כתבו פונקציה כדי לחשב ביעילות את האלמנט ה-n של רצף המספרים fib4. אל תשתמשו ברקורסיה. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,heb_Hebr,python,"

def median(l: list):
    """"""רמת החזרה של האלמנטים ברשימה l. >>> רמת החזרה של האלמנטים ברשימה l. >>> רמת החזרה של האלמנטים ברשימה l.""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,heb_Hebr,python,"

def is_palindrome(text: str):
    """"""בדיקות אם מחרוזת נתונה היא פאלינדרום >>> is_palindrome (('') נכון >>> is_palindrome (('aba') נכון >>> is_palindrome (('aaaaa') נכון >>> is_palindrome (('zbcd') שקר """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,heb_Hebr,python,"

def modp(n: int, p: int):
    """"""החזר 2^n מודולו p (היה מודע למספרים). >>> מודפ (א) 3, 5) 3 >>> מודפ (א) 101, 101) 2 >>> מודפ (א) 0, 101) 1 >>> מודפ (א) 3, 11) 8 >>> מודפ (א) 100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,heb_Hebr,python,"

def encode_shift(s: str):
    """"""לוקח כשרשרת קודד עם הפונקציה encode_shift. מחזיר שרשרת פוענחת.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""מחזיר מחרוזת מקודדת על ידי העברת כל אות ב-5 באלפבית.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,heb_Hebr,python,"

def remove_vowels(text):
    """"""remove_vowels היא פונקציה שלוקחת מחרוזת ומחזירה מחרוזת ללא אותיות. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,heb_Hebr,python,"

def below_threshold(l: list, t: int):
    """"""מחזיר אמת אם כל המספרים ברשימה l נמצאים מתחת לסף t. >>> below_threshold (([1, 2, 4, 10], 100) אמת >>> below_threshold (([1, 20, 4, 10], 5) שקר """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,heb_Hebr,python,"

def add(x: int, y: int):
    """"""הוסף שני מספרים x ו-y >>> הוסף ((2, 3) 5 >>> הוסף ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,heb_Hebr,python,"

def same_chars(s0: str, s1: str):
    """"""בדוק אם לשתי מילים יש את אותם האותיות. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') נכון >>> same_chars (('abcd', 'dddddddabc') נכון >>> same_chars (('dddddddabc', 'abcd') נכון >>> same_chars (('eabcd', 'dddddddddabc') לא נכון >>> same_chars ((('abcd', 'dddddddabddce') לא נכון >>> same_chars ((('abcdzzzz', 'dddzzzzzzdddabc') לא נכון """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,heb_Hebr,python,"

def fib(n: int):
    """"""מחזיר מספר פיבונאצ'י n. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,heb_Hebr,python,"

def correct_bracketing(brackets: str):
    """"""ברקטות היא מחרוזת של ""<"" ו "">"". חוזר נכון אם לכל ברקטת פתיחה יש ברקטת סגירה מתאימה. >>> correct_bracketing ((""<"") False >>> correct_bracketing ((""<>"") True >>> correct_bracketing ((""<><>>"") True >>> correct_bracketing ((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,heb_Hebr,python,"

def monotonic(l: list):
    """"""החזר True אם אלמנטים ברשימה גדלים או יורדים באופן מונוטוני. >>> מונוטוני (([1, 2, 4, 20]) True >>> מונוטוני (([1, 20, 4, 10]) False >>> מונוטוני (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,heb_Hebr,python,"

def common(l1: list, l2: list):
    """"""מחזיר אלמנטים משותפים ייחודיים ומסודרים עבור שתי רשימות. >>> משותף (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> משותף (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,heb_Hebr,python,"

def largest_prime_factor(n: int):
    """"""החזר את הגורם הראשוני הגדול ביותר של n. נניח n > 1 והוא לא ראשוני. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,heb_Hebr,python,"

def sum_to_n(n: int):
    """"""sum_to_n היא פונקציה שמסכמת מספרים מ 1 עד n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,heb_Hebr,python,"

def correct_bracketing(brackets: str):
    """"""brackets הוא מחרוזת של ""("" ו "")"". return נכון אם לכל ברקט פתיחה יש ברקט סגירה מתאים. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,heb_Hebr,python,"

def derivative(xs: list):
    """"""xs מייצגים את מקדמי הפולינום. xs[0] + xs[1] * x + xs[2] * x^2 + .... מחזיר את נגזרת הפולינום הזה באותה הצורה. >>> נגזרת (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> נגזרת ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,heb_Hebr,python,"

def fibfib(n: int):
    """"""רצף המספרים של FibFib הוא רצף דומה לרצף פיבונאצ'י, המוגדר כדלקמן: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). אנא כתבו פונקציה כדי לחשב ביעילות את האלמנט ה-n של רצף המספרים של fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,heb_Hebr,python,"
FIX = """"""כתבו פונקציה vowels_count אשר לוקחת מחרוזת המייצגת מילה ככניסה ומחזירה את מספר הצלילים בתחרוזת. הצלילים במקרה זה הם 'a', 'e', 'i', 'o', 'u'. כאן, 'y' הוא גם צליל, אך רק כאשר הוא בסוף המילה נתונה. דוגמה: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""הוסף יותר מקרים של ניסויים.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,heb_Hebr,python,"
def circular_shift(x, shift):
    """"""מחזור עגול של מספר x, מחזור את הספרות ימינה על ידי העברת מספרים ומחזיר את התוצאה כשרשרת. אם shift > מספר ספרות, מחזור ספרות הפוך. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,heb_Hebr,python,"
def digitSum(s):
    """"""משימה לכתוב פונקציה שלוקחת כחדירה מחרוזת ומחזירה את סכום האותיות העליונות בלבד. דוגמאות: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,heb_Hebr,python,"
def fruit_distribution(s,n):
    """"""במשימה זו, ניתן לך מחרוזת המייצגת מספר תפוחים ותפוזים המופצים בסל פירות הסל הזה מכיל תפוחים, תפוזים ופירות מנגו. בהתחשב בשורה המייצגת את מספר התפוחים והתפוזים הכולל ומספר שלם המייצג את מספר הפירות בסל, החזר את מספר פירות המנגו בסל. לדוגמה: fruit_distribution""5(תפוחים ו-6 תפוזים"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 תפוחים ו-1 תפוז"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 תפוחים ו-3 תפוזים"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 תפוחים ו-120) "",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,heb_Hebr,python,"
def pluck(arr):
    """"""אם נתנו מערך המייצג ענף של עץ שיש לו צמתים של מספרים שלמים לא שליליים, המשימה שלך היא להוציא את אחד הצמתים ולהחזיר אותו. הצומת הנלקחה צריכה להיות הצומת עם הערך הזוגי הקטן ביותר. אם מוצאים מספר צמתים עם אותו ערך הזוגי הקטן ביותר, החזיר את הצומת עם האינדקס הקטן ביותר. הצומת הנלקחה צריכה להיות מוחזרת ברשימה, [smallest_value, index] , אם אין ערכים זוגיים או אם המערך הנתון ריק, החזיר []. דוגמה 1: הכניסה: [4,2,3] הפלט: [2, 1] הסבר: 2 יש את הערך הזוגי הקטן ביותר, ו-2 יש את האינדקס הקטן ביותר. דוגמה 2: הכניסה: [1,2,3] הפלט: [2, 1] הסבר: 2 יש את הערך הזוגי הקטן ביותר, ו-2 יש את האינדקס הקטן ביותר. דוגמה 3: הכניסה: [] הפלט: [4: [5, 3, 4, 2] [0, 0, 1] הפלט: 0: 1 יצירה: הצומת הקטנה ביותר היא בעלת האינדקס הקטן ביותר, אבל יש שני צמתים:""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,heb_Hebr,python,"
def search(lst):
    '''אם נתנה לכם רשימה לא ריקה של מספרים שלמים חיוביים, החזרו את המספר המלא הגדול ביותר שהוא גדול מ-0 ויש לו תדירות גדולה יותר או שווה לערך של המספר המלא עצמו. תדירות המספר המלא היא מספר הפעמים שהוא מופיע ברשימה. אם לא קיים ערך כזה, החזרו -1. דוגמאות: חיפוש ([4, 1, 2, 2, 3, 1]) == 2 ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,heb_Hebr,python,"
def strange_sort_list(lst):
    '''אם נתנו רשימה של מספרים שלמים, תחזירו את הרשימה בסדר מוזר. סידור מוזר, זה כאשר אתה מתחיל עם הערך המינימלי, ואז מקסימום של המספרים הנותרים, ואז מינימום וכן הלאה. דוגמאות: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,heb_Hebr,python,"
def triangle_area(a, b, c):
    '''נתון אורך שלושת הצדדים של משולש. החזר את שטח המשולש מעוגל ל-2 נקודות אחרי הארי אם שלושת הצדדים יוצרים משולש תקף. אחרת החזר -1 שלושה צדדים יוצרים משולש תקף כאשר סכום שני צדדים גדול מהצד השלישי. דוגמה: משולש_שטח (אריא) 3, 4, 5) == 6.00 משולש_שטח (אריא) 1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,heb_Hebr,python,"
def will_it_fly(q,w):
    '''כתבו פונקציה אשר מחזירה אמת אם האובייקט q יטוס, ושקר אחרת. האובייקט q יטוס אם הוא מאוזן (זו רשימה פאלינדרומית) ומסכום האלמנטים שלו פחות או שווה למשקל המקסימלי האפשרי w. דוגמה: will_it_fly (([1, 2], 5) â -> False # 1+2 הוא פחות משקל המקסימלי האפשרי, אבל זה לא מאוזן. will_it_fly (([3, 2, 3], 1) â -> False # זה מאוזן, אבל 3+2+3 הוא יותר משקל המקסימלי האפשרי. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 הוא פחות משקל המקסימלי האפשרי, וזה מאוזן. will_it_fly ((([3], â 5) -> True # 3 הוא פחות משקל המקסימלי האפשרי, וזה מאוזן. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,heb_Hebr,python,"
def smallest_change(arr):
    """"""אם נתן מערך של מספרים שלמים, מצא את המספר המינימלי של האלמנטים שצריכים להשתנות כדי להפוך את מערך פאלינדרומי. מערך פאלינדרומי הוא מערך הנקרא אותו הדבר קדימה ואחורה. בשינוי אחד, אתה יכול לשנות אלמנט אחד לכל אלמנט אחר. לדוגמה: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,heb_Hebr,python,"
def total_match(lst1, lst2):
    '''כתבו פונקציה שמקבלת שתי רשימות של מחרוזות ומחזירה את הרשימה שבה יש מספר כללי של אותיות בכל מחרוזות הרשימה פחות מהרשימה האחרת. אם לשתי הרשימות יש את אותו מספר אותיות, החזרו את הרשימה הראשונה. דוגמאות total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,heb_Hebr,python,"
def is_multiply_prime(a):
    """"""כתבו פונקציה אשר מחזירה אמת אם המספר נתון הוא הכפל של 3 מספרים ראשוניים ושקר אחרת. בידיעה ש (א) הוא פחות מ 100. דוגמה: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,heb_Hebr,python,"
def is_simple_power(x, n):
    """"""המשימה שלך היא לכתוב פונקציה שתחזיר true אם מספר x הוא כוח פשוט של n ושקר במקרים אחרים. x הוא כוח פשוט של n אם n**int=x לדוגמה: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,heb_Hebr,python,"
def iscube(a):
    '''כתבו פונקציה שלוקחת מספר שלם a ומחזירה True אם ה- ingeger הוא קובייה של מספר שלם. הערה: אתם יכולים להניח שההכנסה תמיד תקפה. דוגמאות: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,heb_Hebr,python,"
def hex_key(num):
    """"""הנתב נדרש לכתוב פונקציה שמקבלת מספר עשרות-עשרוני כשרשרת ומספרת את מספר הספרות עשרות-עשרוניות שהן מספרים ראשוניים (ספר ראשוני, או מספר ראשוני, הוא מספר טבעי גדול מ-1 שאינו תוצר של שני מספרים טבעיים קטנים יותר). הספרות עשרות-עשרוניות הן 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. מספרים ראשוניים הם 2, 3, 5, 7, 11, 13, 17,... אז אתה צריך לקבוע מספר מהספרות הבאות: 2, 3, 5, 7, B (= עשרות 11), D (= עשרות 13). הערה: אתה יכול להניח שההכנסות תמיד נכונות או ריקות, והסמלים A,B,C,D,E,F תמיד גדולים. דוגמאות: עבור num ""AB"" ההוצאה צריכה להיות num 1. עבור num = 1077E ההוצאה צריכה להיות 2. עבור num ""AB"" = 1 331ED עבור num = 4.123BCA עבור num = 6.067D עבור num ""A"" צריכה להיות 6.045DEF עבור ""2020"" התוצאה צריכה להיות 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,heb_Hebr,python,"
def decimal_to_binary(decimal):
    """"""ניתן מספר בצורת עשרות ומשימתך היא להמיר אותו לצורת בינארית. הפונקציה צריכה להחזיר מחרוזת, כאשר כל אות מייצג מספר בינארי. כל אות בשרשרת יהיה '0' או '1'. יהיו זוג אותיות נוספים 'db' בתחילת ובסוף הרצועה. האותיות הנוספות שם כדי לעזור עם הפורמט. דוגמאות: decimal_to_binary ((15) # מחזיר ""db1111db"" decimal_to_binary32) # מחזיר ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,heb_Hebr,python,"
def is_happy(s):
    """"""אתה מקבל מחרוזת s. המשימה שלך היא לבדוק אם החוזה היא מאושרת או לא. מחרוזת היא מאושרת אם אורך שלה הוא לפחות 3 וכל 3 אותיות רצופות הן נפרדות לדוגמה: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,heb_Hebr,python,"
def numerical_letter_grade(grades):
    """"""זהו השבוע האחרון של הסמסטר והמורה צריכה לתת את הציונים לתלמידים. המורה הכינה אלגוריתם משלה לציון. הבעיה היחידה היא שהיא איבדה את הקוד שהיא השתמשה בו לציון. היא נתנה לכם רשימה של ציוני ציון של כמה תלמידים, ואתם צריכים לכתוב פונקציה שיכולה להוציא רשימה של ציוני אותיות באמצעות הטבלה הבאה: ציון ציון אותיות. ציון אותיות 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,heb_Hebr,python,"
def prime_length(string):
    """"""כתבו פונקציה שלוקחת מחרוזת ומחזירה אמת אם אורך החוזה הוא מספר ראשוני או שקר אחרת דוגמאות prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,heb_Hebr,python,"
def starts_one_ends(n):
    """"""נתון מספר שלם חיובי n, תחזיר את מספר המספרים של מספרים שלמים חיוביים עם n ספרות שמתחילים או מסתיימים ב-1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,heb_Hebr,python,"
def solve(N):
    """"""אם נתנו מספר שלם חיובי N, החזר את סכום כל הספרות שלו בשליטה בינארית. דוגמה עבור N = 1000, סכום הספרות יהיה 1 התוצאה צריכה להיות ""1"". עבור N = 150, סכום הספרות יהיה 6 התוצאה צריכה להיות ""110"". עבור N = 147, סכום הספרות יהיה 12 התוצאה צריכה להיות ""1100"". משתנים: @N אינטייגר מגבלות: 0 â‰¤ N â‰¤ 10000. התוצאה: מחרוזת של מספר בינארי """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,heb_Hebr,python,"
def add(lst):
    """"""נתון רשימה לא ריקה של מספרים שלמים, ראשית, הוסף את האלמנטים הזוגיים המופיעים במדדים מוזרים. דוגמאות: הוסף ([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,heb_Hebr,python,"
def anti_shuffle(s):
    """"""כותב פונקציה שלוקחת מחרוזת ומחזירה גרסה מסודרת של זה. גרסה מסודרת של מחרוזת, היא מחרוזת שבה כל המילים (הופרדות על ידי חלל) מוחלפות במילה חדשה שבה כל האותיות מסודרות בסדר עולה על בסיס ערך ascii. הערה: עליך לשמור על סדר המילים והחללים הריקים במשפט. לדוגמה: anti_shuffle ((('Hi') מחזיר 'Hi' anti_shuffle ((('hello') מחזיר 'ehllo' anti_shuffle (('Hello World!!!') מחזיר 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,heb_Hebr,python,"
def get_row(lst, x):
    """"""נתונים דו מימדיים, כמו רשימות מונפחות, דומים למטריצה, אולם, בניגוד למטריצות, כל שורה עשויה להכיל מספר עמודות שונה. נתון lst, ומספר שלם x, מצא מספרים שלמים x ברשימה, ושיחזור רשימת טופלים, [(x1, y1), (x2, y2) ...] כך שכל טופל הוא קואורדינטה - (שורה, עמודות), החל עם 0. לסדר קואורדינטות בתחילה על ידי שורות בסדר עולה. כמו כן, לסדר את קואורדינטות השורה על ידי עמודות בסדר יורד. דוגמאות: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0, 0] get_(1), [] == [[שורה 1, 2, 3]], == 2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,heb_Hebr,python,"
def sort_array(array):
    """"""אם נתנו מערך של מספרים שלמים שאינם שליליים, החזרו עותק של מערך נתון לאחר סידור, אתם תארגנו את מערך נתון בסדר עולה אם הסכום ((ערך האינדקס הראשון, ערך האינדקס האחרון) הוא פרוד, או תארגנו אותו בסדר יורד אם הסכום ((ערך האינדקס הראשון, ערך האינדקס האחרון) הוא זמני. הערה: * אל תשנו את מערך נתון. דוגמאות: * sort_array[(]) => [] * sort_array([5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6]  0""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,heb_Hebr,python,"
def encrypt(s):
    """"""ליצור פונקציה encrypt שלוקחת מחרוזת כטענה ומחזירה מחרוזת מוצפנת עם ההפוך של האלפבית. האלפבית צריך להיות מופנה באופן כזה שהמכתבים יורדים למטה בשניים כפול לשני מקומות. לדוגמה: encrypt('hi') מחזיר 'lm' encrypt('asdfghjkl') מחזיר 'ewhjklnop' encrypt('gf') מחזיר 'kj' encrypt('et') מחזיר 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,heb_Hebr,python,"
def next_smallest(lst):
    """"""ניתן לכם רשימה של מספרים שלמים. כתבו פונקציה next_smallest (() שתחזיר את האלמנט השני הקטן ברשימה. תחזיר None אם אין כזה אלמנט. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,heb_Hebr,python,"
def is_bored(S):
    """"""אתה תינתן מחרוזת מילים, ומשימתך היא לספור את מספר המשעממות. משעממות היא משפט שמתחיל במילה ""אני"". משפטים מוגבלים על ידי '.', '?' או '!'. לדוגמה: >>> is_bored ((""שלום עולם"") 0 >>> is_bored ((""השמיים כחולים. השמש זורחת. אני אוהב את מזג האוויר הזה"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,heb_Hebr,python,"
def any_int(x, y, z):
    '''ליצור פונקציה שמקבלת 3 מספרים. מחזירה אמת אם אחד המספרים שווה לסכום השניים האחרים, וכל המספרים הם מספרים שלמים. מחזירה שקר בכל המקרים האחרים. דוגמאות any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,heb_Hebr,python,"
def encode(message):
    """"""כתבו פונקציה שלוקחת הודעה, ומקודדת באופן כזה שהיא מחליפה את המיקוד של כל האותיות, מחליפה את כל הקולות בהודעה עם האות שמופיעה 2 מקומות לפני הקול באלפבית האנגלי. הנחו רק אותיות. דוגמאות: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,heb_Hebr,python,"

def skjkasdkd(lst):
    """"""אם נתנו לכם רשימה של מספרים שלמים, עליכם למצוא את הערך הראשוני הגדול ביותר ולהחזיר את סכום הספרות שלו. דוגמאות: עבור lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], התוצאה צריכה להיות 10 עבור lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], התוצאה צריכה להיות 25 עבור lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], התוצאה צריכה להיות 13 עבור lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], התוצאה צריכה להיות 11 עבור lst = [0,81,12,31,21], התוצאה צריכה להיות 3 עבור lst = [0,8,1,2,1,7], התוצאה צריכה להיות 7 עבור lst = [0,1,8,1,2,7]""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,heb_Hebr,python,"
def check_dict_case(dict):
    """"""אם נתון מילון, החזר True אם כל המפתחות הם מחרוזות במכתב קטן או כל המפתחות הם מחרוזות במכתב גדול, אחרת החזר False. הפונקציה צריכה להחזיר False אם המילון הנתון ריק. דוגמאות: check_dict_case{""a"":""apple"", ""b"":""banana""}) צריכה להחזיר True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) צריכה להחזיר False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) צריכה להחזיר False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) צריכה להחזיר False. check_dict_case{""NC"":""STATE"", ""ZIP"":""12345""}) צריכה להחזיר True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,heb_Hebr,python,"
def count_up_to(n):
    """"""ליישם פונקציה שמקבלת מספר שלם לא שלילי ומחזירה מערך של n מספרים ראשונים שהם מספרים ראשוניים וקטנים מ- n. לדוגמה: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,heb_Hebr,python,"
def multiply(a, b):
    """"""מלא את הפונקציה שלוקחת שני מספרים שלמים ומחזירה את הכפול של ספרות יחידתם. הנח כי ההכנסה תמיד תקפה. דוגמאות: כפול 148, 412) צריך להחזיר 16. כפול 19 28 צריך להחזיר 72. כפול 2020 צריך להחזיר 0. כפול 14-15 צריך להחזיר 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,heb_Hebr,python,"
def count_upper(s):
    """"""אם נתנו מחרוזת s, ספור את מספר הקולות הגדולים במדדים זוג. לדוגמה: count_upper (('aBCdEf') מחזיר 1 count_upper (('abcdefg') מחזיר 0 count_upper (('dBBE') מחזיר 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,heb_Hebr,python,"
def closest_integer(value):
    '''ליצור פונקציה שמקבלת ערך (שורה) המייצג מספר ומחזירה את המספר האפשרי הקרוב אליו. אם המספר נמצא במרחק שווה משני מספרים שלמים, מעגל אותו מ-0 . דוגמאות >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 הערה: מעגל מ-0 אומר שאם המספר נתון נמצא במרחק שווה משני מספרים שלמים, המספר שצריך להחזיר הוא המספר המרוחק מ-0 ביותר. לדוגמה, closest_integer "" ((14.5"") צריך להחזיר 15 ו- closest_integer "" ((-14.5"") צריך להחזיר -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,heb_Hebr,python,"
def make_a_pile(n):
    """"""אם נתנו מספר שלם חיובי n, יש לך לעשות ערימה של n רמות של אבנים. הרמה הראשונה יש n אבנים. מספר האבנים ברמה הבאה הוא: - המספר הפרדי הבא אם n הוא פרדי. - המספר הזוגי הבא אם n הוא זוגי. להחזיר את מספר האבנים בכל רמה ברשימה, שבו אלמנט במדד i מייצג את מספר האבנים ברמה (i+1). דוגמאות: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,heb_Hebr,python,"
def words_string(s):
    """"""תנתן לך מחרוזת מילים המופרדות על ידי פסיקים או חללים. המשימה שלך היא לחלק את השרשרת למילים ולהחזיר מערך של המילים. לדוגמה: words_string ((""שלום, שמי ג'ון"") == [""שלום"", ""שלי"", ""שם"", ""הוא"", ""ג'ון""] words_string ((""אחד, שניים, שלושה, ארבעה, חמישה, שישה"") == [""אחד"", ""שניים"", ""שלושה"", ""ארבעה"", ""חמישה"", ""שישה""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,heb_Hebr,python,"
def choose_num(x, y):
    """"""הפונקציה לוקחת שני מספרים חיוביים x ו- y ומחזירה את המספר המלא הגדול ביותר שנמצא בטווח [x, y] כולל. אם אין מספר כזה, אז הפונקציה צריכה להחזיר -1. לדוגמה: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,heb_Hebr,python,"
def rounded_avg(n, m):
    """"""אם n הוא גדול מ-m, החזר -1. דוגמה: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b11"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,heb_Hebr,python,"
def unique_digits(x):
    """"""אם נתנו רשימה של מספרים שלמים חיוביים x, החזר רשימה מסודרת של כל האלמנטים שאין בהם ספרות זוגות. הערה: הרשימה החוזרת צריכה להיות מסודרת בסדר גדל. לדוגמה: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,heb_Hebr,python,"
def by_length(arr):
    """"""אם נתנו מערך של מספרים שלמים, לסדר את המספרים שלמים שבין 1 ל-9 כולל, להפוך את מערך התוצאה, ולאחר מכן להחליף כל ספרה בשמה המתאים מ ""אחד"", ""שניים"", ""שלושה"", ""ארבעה"", ""חמישה"", ""שש"", ""שבעה"", ""שמונה"", ""תשע"". לדוגמה: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> לסדר arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> לסדר arr -> [8, 5, 4, 3, 2, 2, 1, 1] להחזיר [""שמונה"", ""ארבעה"", ""שלושה"", ""שניים"", ""שניים"", ""אחד"", ""אחד""] אם המערך ריק, להחזיר מערך ריק: arr = [] להחזיר [] אם למערך יש מספר מוזר, להתעלם ממנו: arr = [1, 1 , 1-55] -> arr -> [1, 1-55] -> arr -> [55, 1-51] - להחזיר ['אחד'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,heb_Hebr,python,"
def f(n):
    """"""הפונקציה f לוקחת n כפרמטרים, ומחזירה רשימה בגודל n, כך שערך האלמנט באינדקס i הוא הפקטוריאל של i אם i הוא זמני או סכום המספרים מ 1 עד i אחרת. i מתחיל מ 1. הפקטוריאל של i הוא הכפלת המספרים מ 1 עד i (1 * 2 * ... * i). דוגמה: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,heb_Hebr,python,"
def even_odd_palindrome(n):
    """"""אם נתנו מספר שלם חיובי n, החזרו טופל שיש לו את מספר ה-palindromes של מספרים שלמים זוגים וזוגיים הנמצאים בטווח ((1, n), כולל. דוגמה1: הכנסות: 3 פלט: (1, 2) הסבר: palindrome של מספרים שלמים הם 1, 2, 3. אחד מהם הוא זוג, ושני מהם הם זוג. דוגמה2: הכנסות: 12 פלט: (4, 6) הסבר: palindrome שלמים הם 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ארבעה מהם הם זוג, ו 6 מהם הם זוג. הערה: 1. 1 <= n <= 10^3 2. טופל החזר את מספר palindromes של מספרים שלמים זוגים וזוגים בהתאמה. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,heb_Hebr,python,"
def count_nums(arr):
    """"""כתבו פונקציה count_nums אשר לוקחת מערך של מספרים שלמים ומחזירה את מספר האלמנטים שיש לו סכום של ספרות > 0. אם מספר הוא שלילי, אז הספרה הראשונה שלו תהיה שלילית: למשל -123 יש ספרות חתומות -1, 2, ו 3. >>> count_nums (([]) == 0 >>> count_nums ([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,heb_Hebr,python,"
def move_one_ball(arr):
    """"""יש לנו מערך 'arr' של N מספרים שלמים arr[1], arr[2], ..., arr[N]. המספרים במערך יורדו באופן אקראי. המשימה שלך היא לקבוע אם ניתן לסדר מערך בסדר לא יורד על ידי ביצוע הפעולה הבאה על המערך הנתון: מותר לבצע פעולת העברה ימינה בכל מספר פעמים. פעולה אחת של העברה ימינה פירושה העברת כל האלמנטים של המערך בעמדה אחת בכיוון הנכון. האלמנט האחרון של המערך יועבר לעמדה ההתחלתית במערך כלומר 0th. אם ניתן להשיג את המערך המורכב על ידי ביצוע הפעולה לעיל אז תחזור True אחרת תחזור False. אם המערך הנתון ריק אז תחזור True. הערה: הרשימה הנתונה מובטחת שיש לי אלמנטים ייחודיים. לדוגמה: move_one_(ball[3, 4, 5, 2]=== True הסבר: על ידי ביצוע פעולות ימין 2min, ניתן להשיג סדר לא יורד עבור המערך הנתון.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,heb_Hebr,python,"
def exchange(lst1, lst2):
    """"""בעבודה זו, תיישמו פונקציה שלוקחת שתי רשימות של מספרים, ובודקת אם ניתן לבצע חילופי אלמנטים ביניהם כדי להפוך את lst1 לרשימה של מספרים זוג בלבד. אין הגבלה על מספר האלמנטים המוחלפים בין lst1 ו- lst2. אם ניתן להחליף אלמנטים בין lst1 ו- lst2 כדי להפוך את כל האלמנטים של lst1 לזוג, החזרו ""כן"". אחרת, החזרו ""לא"". לדוגמה: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""כן"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""לא"" הנחה היא שהרשימות הפנימיות לא יהיו ריקות. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,heb_Hebr,python,"
def histogram(test):
    """"""אם נתנו מחרוזת המייצגת אותיות קטנות מופרדות בין חללים, החזרו מילון של האות עם החזרה הכי גדולה ובו את המספר המתאים. אם מספר אותיות יש את אותה התרחשות, החזרו את כולם. דוגמה: היסטוגרמה""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,heb_Hebr,python,"
def reverse_delete(s,c):
    """"""מטלה יש לנו שתי מחרוזות s ו-c, עליך למחוק את כל האותיות ב-s שוות לכל אות ב-c ואז לבדוק אם מחרוזת התוצאה היא פאלינדרום. מחרוזת נקראת פאלינדרום אם היא קוראת אותו הדבר לאחור כמו קדימה. אתה צריך להחזיר טופל המכיל את מחרוזת התוצאה ואת True/False עבור הבדיקה. לדוגמה עבור s = ""abcde"", c = ""ae"", התוצאה צריכה להיות ('bcd', False) עבור s = ""abcdef"", c = ""b"" התוצאה צריכה להיות ('acdef', False) עבור s = ""abcdedcba"", c = ""ab"", התוצאה צריכה להיות ('cdedc', True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,heb_Hebr,python,"
def odd_count(lst):
    """"""אם נתנו רשימה של מחרוזות, כאשר כל מחרוזת מורכבת רק מספרים, החזרו רשימה. כל אלמנט i של היציאה צריך להיות ""מספר האלמנטים המוזרים בשרשרת i של ההכנסה"". שם כל i's צריכים להיות מוחלפים במספר הספרות המוזרות בשרשרת i'th של ההכנסה. >>> odd_count['1234567']) [""מספר האלמנטים המוזרים 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""מספר האלמנטים המוזרים 1n the str1ng 1 of the 1nput. "", ""מספר האלמנטים המוזרים 8n the str8ng 8 of the 8nput. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,heb_Hebr,python,"
def minSubArraySum(nums):
    """"""אם נתן מערך של מספרים שלמים, מצא את הסכום המינימלי של כל תת מערך של מספרים שאינו ריק. דוגמה minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,heb_Hebr,python,"
def max_fill(grid, capacity):
    import math
    """"""כל שורה מייצגת באר אחת, וכל 1 בשורה מייצגת יחידת מים אחת. לכל באר יש דלי מתאים שניתן להשתמש בו כדי להוציא מים ממנה, ולכל הדליים יש את אותה קיבולת. המשימה שלך היא להשתמש בדלי כדי לרוקן את הבארים. הוצא את מספר הפעמים שאתה צריך להוריד את הדליים. דוגמה 1: הכניסה: רשת: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 הוצא: 6 דוגמה 2: הכניסה: רשת: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 הוצא: 5 דוגמה 3: הכניסה: [[0,0,0], [0,0,0]] bucket_capacity: 5 הוצא: 0 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,heb_Hebr,python,"
def sort_array(arr):
    """"""בקאטה זו, יש לסדר מערך של מספרים שלמים לא שליליים לפי מספר האחדות במצגת הבינארית שלהם בסדר עולה. עבור מספר דומה של האחדות, לסדר על בסיס ערך עשרי. זה חייב להיות מיושם כך: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,heb_Hebr,python,"
def select_words(s, n):
    """"""אם נתנו לך מחרוזת s ומספר טבעי n, קיבלת משימה ליישם פונקציה שתחזיר רשימה של כל המילים מתוך מחרוזת s המכילות בדיוק n קונסוננטים, כדי שהמילים הללו יופיעו מחרוזת s. אם מחרוזת s ריקה, אז הפונקציה צריכה להחזיר רשימה ריקה. הערה: אתה יכול להניח שהחרוזת הכניסה מכילה רק אותיות ומרווחים. דוגמאות: select_words (((""מרי הייתה לה כבש קטן"", 4) ==> [""little""] select_words (((""מרי הייתה לה כבש קטן"", 3) ==> [""מרי"", ""צאן""] select_words"" (((מרווחים לבנים פשוטים"", 2) ==> [] select_words (((""שלום עולם"", 4) ==> [""עולם""] select_words (((""דוד סאם"", 3) ==> [""דוד""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,heb_Hebr,python,"
def get_closest_vowel(word):
    """"""ניתן לך מילה. המשימה שלך היא למצוא את הקול הקרוב ביותר שבין שתי קונסוןאות מהצד הימני של המילה (מבחינת המיקוד). הקולות בהתחלה ובסופו לא נחשבים. החזרו מחרוזת ריקה אם לא מצאתם שום קולה שממלאת את התנאי לעיל. אתה יכול להניח שהשרשרת הניתנת מכילה רק אות אנגלי. דוגמה: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,heb_Hebr,python,"
def match_parens(lst):
    '''אם אתה מקבל רשימה של שתי מחרוזות, שתי מחרוזות מורכבות מחוגות פתוחים '(' או מחוגות סגורים ') '. העבודה שלך היא לבדוק אם אפשר לקשר את שתי מחרוזות בסדר מסוים, שהשרשרת התוצאה תהיה טובה. מחרוזת S נחשבת טובה אם ורק אם כל החוגות ב- S מאוזנות. לדוגמה: מחרוזת '((()) ' טובה, בעוד שרשרת '()) ' לא. החזר 'כן' אם יש דרך לעשות מחרוזת טובה, וחזר 'לא' אחרת. דוגמאות: match_parens[('() ', ') ']) == 'כן' match_parens[(') ', ') ']) == 'לא' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,heb_Hebr,python,"
def maximum(arr, k):
    """"""אם נתנו מערך arr של מספרים שלמים ומספר שלם חיובי k, החזרו רשימה מסודרת באורך k עם המספרים המרבי k במערך arr. דוגמה1: הכנס: arr = [-3, -4, 5], k = 3 הפלט: [-4, -3, 5] דוגמה2: הכנס: arr = [4, -4, 4], k = 2 הפלט: [4, 4] דוגמה3: הכנס: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 הפלט: [2] הערה: 1. אורך המערך יהיה בטווח של [1, 1000]. 2. האלמנטים במערך יהיו בטווח של [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,heb_Hebr,python,"
def solution(lst):
    """"""נתון רשימה לא ריקה של מספרים שלמים, החזר את סכום כל האלמנטים המזדיינים הממוקמים בעמדות זוגות. דוגמאות פתרון (([5, 8, 7, 1]) ==> 12 פתרון (([3, 3, 3, 3]) ==> 9 פתרון (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,heb_Hebr,python,"
def add_elements(arr, k):
    """"""נתון מערך לא ריק של מספרים שלמים arr ומספר שלם k, החזר את סכום האלמנטים עם שני ספרות מקבוצת האלמנטים הראשונה של arr. דוגמה: כניסה: arr = [111,21,3,4000,5,6,7,8,9], k = 4 הפלט: 24 # סכום של 21 + 3 מגבלות: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,heb_Hebr,python,"
def get_odd_collatz(n):
    """"""אם נתון מספר שלם חיובי n, החזר רשימה מסודרת עם המספרים הלא משונים ברצף קולץ. השערת קולץ היא השערה במתמטיקה הנוגעת לרצף המוגדר כדלקמן: התחל עם כל מספר שלם חיובי n. לאחר מכן כל מונח מתקבל מהמושג הקודם כדלקמן: אם המונח הקודם הוא זמני, המונח הבא הוא חצי מהמושג הקודם. אם המונח הקודם הוא פרדי, המונח הבא הוא 3 פעמים המונח הקודם ועוד 1. ההשערה היא שלא משנה איזה ערך של n, הרצף תמיד יגיע 1. הערה: 1. קולץ (((1) הוא [1] 2. רשימה מסודרת בסדר גדל. לדוגמה: get_odd_collatz ((5) מחזירה [1, 5] # רצף קולץ עבור 5 הוא [5, 8, 16, 4, 2, 1], כך שהמספרים הלא משונים הם רק 1, ו 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,heb_Hebr,python,"
def valid_date(date):
    """"""יש לכתוב פונקציה אשר מאמתת מחרוזת תאריך נתונה ומחזירה אמת אם התאריך תקף אחרת שקר. התאריך תקף אם כל הכללים הבאים מושלמים: 1. מחרוזת התאריך אינה ריקה. 2. מספר הימים אינו פחות מ 1 או יותר מ 31 ימים לחודשים 1,3,5,7,8,10,12. ומספר הימים אינו פחות מ 1 או יותר מ 30 ימים לחודשים 4,6,9,11. ומספר הימים אינו פחות מ 1 או יותר מ 29 לחודש 2. 3. החודשים לא צריכים להיות פחות מ 1 או יותר מ 12. 4. התאריך צריך להיות בפורמט: mm-dd-yyyy למשל: valid_date (דייט)""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,heb_Hebr,python,"
def split_words(txt):
    '''אם נתון מחרוזת מילים, החזר רשימה של מילים מחולקות על חלל, אם אין חלל טקסט אתה צריך לחלק על פסיקים ',' אם אין פסיקים אתה צריך להחזיר את מספר האותיות הקטנות עם סדר מוזר באלפבית, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 דוגמאות split_words ((""שלום עולם!"") â -> [""שלום"", ""עולם!""] split_words ((""שלום,עולם!"") â -> [""שלום"", ""עולם!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,heb_Hebr,python,"
def is_sorted(lst):
    '''אם נתונה רשימה של מספרים, החזר אם הם מסודרים בסדר עולה. אם ברשימה יש יותר מ 1 העתק של אותו מספר, החזר False. הנח שאין מספרים שליליים ורק מספרים שלמים. דוגמאות is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,heb_Hebr,python,"
def intersection(interval1, interval2):
    """"""אם נתנו לך שני מרווחים, כאשר כל מרווח הוא זוג של מספרים שלמים. לדוגמה, מרווח = (התחלה, סוף) = (1, 2). המרווחים הנתונים סגורים, כלומר המרווח (התחלה, סוף) כולל גם את ההתחלה וגם את הסוף. עבור כל מרווח נתון, נניח שההתחלה שלו פחות או שווה לסוף שלו. המשימה שלך היא לקבוע אם אורך של חציית שני המרווחים האלה הוא מספר ראשוני. לדוגמה, חציית המרווחים (1, 3), (2, 4) היא (2, 3) אשר אורך הוא 1, אשר אינו מספר ראשוני. אם אורך של החצייה הוא מספר ראשוני, החזר ""כן"", אחרת, החזר ""לא"". אם שני המרווחים לא חוטפים, החזר ""לא"". [input/output] דוגמאות: חצייה (((1, 2), (2, 3) ==> ""חצייה-1, ((1), 4) ==> ""חצייה"", ==> ""חצייה"", ==> ""חצייה"", ==> ""חצייה"", ==> ""חצייה"", ==> ""חצייה"", ==> ""חצייה"", ==> ""חצייה"", ==>""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,heb_Hebr,python,"
def prod_signs(arr):
    """"""ניתן לך מערך של מספרים שלמים ואתה צריך להחזיר את סכום גודל של המספרים שלמים כפול את הפריד של כל הסימנים של כל מספר במערך, המייצג על ידי 1, -1 או 0. הערה: להחזיר None עבור ערך ריק. דוגמה: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,heb_Hebr,python,"
def minPath(grid, k):
    """"""אם נתנו רשת עם N שורות ו-N עמודות (N >= 2) וכל תא של הרשת מכיל ערך. כל מספר שלם בטווח [1, N * N] כולל מופיע בדיוק פעם אחת בתאים של הרשת. אתה צריך למצוא את המסלול המינימלי של אורך k ברשת. אתה יכול להתחיל מכל תא, ובכל צעד אתה יכול לעבור לכל אחד מהתאים השכנים, במילים אחרות, אתה יכול ללכת לתאים שחולקים קצה עם התא הנוכחי שלך. שים לב כי מסלול באורך k פירושו לבקר בדיוק k תאים (לא בהכרח נפרדים). אתה לא יכול לצאת מהרשת. מסלול A (אורך k) נחשב פחות מסלול B (אורך k) אם לאחר ביצוע רשימות מפורטת של הערכים על התאים A ו- B (בוא נקרא להם lA_st ו- lA_st), lA_st הוא מילה מינימלית פחות מ- lA_st, במילים אחרות, יש מדד של מספר שלם, כלומר, i=1, i=1, i=[A_st], j=[A_st], j=[A_st], j=[A_st=4, l_j=8], j=[A_j=[A_j=1, l_j=[[2, l_j=9, l_[_B] , [_j=1_[_j=] , [_j=1 ,_j=1 ,_j=1 ,_j=[_j=] ,_j=[_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j= ,_j=""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,heb_Hebr,python,"
def tri(n):
    """"""כולם מכירים את רצף פיבונאצ'י, הוא נחקר לעומק על ידי מתמטיקאים בשני המאות האחרונות. עם זאת, מה שאנשים לא יודעים הוא רצף טריבונאצ'י. רצף טריבונאצ'י מוגדר על ידי ההדבקה: tri(1) = 3 tri(n) = 1 + n / 2, אם n הוא זוג. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), אם n הוא פרד. לדוגמה: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ניתן לך מספר שלם לא שלילי n, עליך להחזיר רשימה של המספרים הראשונים n + 1 של רצף טריבונאצ'י. דוגמאות: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,heb_Hebr,python,"
def digits(n):
    """"""אם נתון מספר שלם חיובי n, החזר את הפרי של הספרות הלא זרות. החזר 0 אם כל הספרות הן זוגות. לדוגמה: ספרות ((1) == 1 ספרות ((4) == 0 ספרות ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,heb_Hebr,python,"
def is_nested(string):
    '''ליצור פונקציה שמקבלת ככניסה מחרוזת המכילה רק שוליים מרובעים. הפונקציה צריכה להחזיר אמת אם ורק אם יש רצף משנה תקף של שוליים שבהם לפחות שולי אחד ברצף הוא מונח. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,heb_Hebr,python,"

def sum_squares(lst):
    """"""ניתן לכם רשימה של מספרים. עליכם להחזיר את סכום המספרים בריבוע ברשימה הניתנת, לקצר כל אלמנט ברשימה ל-int העליון (הגג) קודם. דוגמאות: עבור lst = [1,2,3] התוצאה צריכה להיות 14 עבור lst = [1,4,9] התוצאה צריכה להיות 98 עבור lst = [1,3,5,7] התוצאה צריכה להיות 84 עבור lst = [1.4,4.2,0] התוצאה צריכה להיות 29 עבור lst = [-2.4,1,1] התוצאה צריכה להיות 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,heb_Hebr,python,"
def check_if_last_char_is_a_letter(txt):
    '''ליצור פונקציה שתחזיר אמת אם האות האחרונה של מחרוזת נתונה היא אות אלפביתי ולא חלק מילה, וזוי אחרת. הערה: ""מילה"" היא קבוצה של אותיות המופרדות על ידי חלל. דוגמאות: check_if_last_char_is_a_letter ((""עוגת תפוח"") â -> False check_if_last_char_is_a_letter (((""apple pi e"") â -> True check_if_last_char_is_a_letter ((""apple pi e"") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,heb_Hebr,python,"
def can_arrange(arr):
    """"""ליצור פונקציה אשר מחזירה את האינדקס הגדול ביותר של אלמנט שאינו גדול או שווה אל האלמנט שלפניו. אם אין אלמנט כזה אז תחזיר -1. המערך נתון לא יכיל ערכים כפולים. דוגמאות: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,heb_Hebr,python,"
def largest_smallest_integers(lst):
    '''ליצור פונקציה שתחזיר טופל (a, b), כאשר 'a' הוא הגדול ביותר של מספרים שלמים שליליים, ו'b' הוא הקטן ביותר של מספרים שלמים חיוביים ברשימה. אם אין מספרים שלמים שליליים או חיוביים, החזיר אותם כ None. דוגמאות: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,heb_Hebr,python,"
def compare_one(a, b):
    """"""ליצור פונקציה שמקבלת מספרים שלמים, floats, או מחרוזות המייצגים מספרים אמיתיים, ומחזירה את המשתנה הגדול יותר בסוג המשתנה שלו. מחזירה None אם הערכים שווים. הערה: אם מספר אמיתי מיוצג כשרשרת, נקודת הזינוק עשויה להיות . או , compare_one(1, 2.5) â -> 2.5 compare_one(1, ""2,3"") â -> ""2,3"" compare_one(""5,1"", ""6"") â -> ""6"" compare_one(""1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,heb_Hebr,python,"
def is_equal_to_sum_even(n):
    """"""הערך אם ניתן לכתוב את המספר n ככמות של בדיוק 4 מספרים זוגים חיוביים דוגמה is_equal_to_sum_even (הסכום שווה ל- 4) == שקר is_equal_to_sum_even (הסכום שווה ל- 6) == שקר is_equal_to_sum_even (הסכום שווה ל- 8) == נכון """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,heb_Hebr,python,"
def special_factorial(n):
    """"""הפקטוריאל הברזילאי מוגדר כ: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! כאשר n > 0 לדוגמה: >>> special_factorial(4) 288 הפונקציה תקבל מספר שלם ככניסה ותחזיר את הפקטוריאל המיוחד של מספר שלם זה. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,heb_Hebr,python,"
def fix_spaces(text):
    """"""_דוגמא-3ט, החליפו את כל החללים בה עם סעיפים תחתונים, ואם לשרשרת יש יותר משני חללים רצופים, החליפו את כל החללים רצופים עם - fix_spaces ((""דוגמה"") == ""דוגמה"" fix_spaces ((""דוגמה1"") == ""דוגמה1"" fix_spaces (((""דוגמה2"") == ""_דוגמה2"" fix_spaces ((""דוגמה3"") == ""_דוגמה-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,heb_Hebr,python,"
def file_name_check(file_name):
    """"""ליצור פונקציה שמקבלת מחרוזת המייצגת את שם הקובץ, ומחזירה 'כן' אם שם הקובץ תקף, ומחזירה 'לא' אם לא. שם הקובץ נחשב תקף אם ורק אם כל התנאים הבאים מושלמים: - לא אמורים להיות יותר משלוש ספרות ('0'-'9') בשם הקובץ. - שם הקובץ מכיל בדיוק נקודה אחת '.' - מחרוזת המשנה לפני הנקודה לא אמורה להיות ריקה, והיא מתחילה באותיות האלבף הלטיני ('a'-'z' ו'A'-Z'). - מחרוזת המשנה אחרי הנקודה צריכה להיות אחת מהאותיות הבאות: ['txt', 'exe', 'lld'] דוגמאות: file_name_check""{example.txt.txt"") # => 'כן' file_name_check""{example.dll1} => 'לא' (השם צריך להתחיל באותיות האלבף הלטיני) # => 'לא'""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,heb_Hebr,python,"


def sum_squares(lst):
    """""""" הפונקציה הזו תבחר רשימה של מספרים שלמים. עבור כל הכניסות ברשימה, הפונקציה תעלה לרגלי הכניסה של המספרים שלמים אם האינדקס שלה הוא כפול של 3 ותקבע את הכניסה של המספרים שלמים אם האינדקס שלה הוא כפול של 4 ולא כפול של 3. הפונקציה לא תשנה את הכניסות ברשימה שהאינדקסים שלה אינם כפול של 3 או 4. הפונקציה תחזיר את סכום כל הכניסות. דוגמאות: עבור lst = [1,2,3] התוצאה צריכה להיות 6 עבור lst = [] התוצאה צריכה להיות 0 עבור lst = [-1,-5,2,-1,-5] התוצאה צריכה להיות -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,heb_Hebr,python,"
def words_in_sentence(sentence):
    """"""ניתן לך מחרוזת המייצגת משפט, המשפט מכיל כמה מילים המופרדות על ידי חלל, ואתה צריך להחזיר מחרוזת המכילה את המילים מהמשפט המקורי, שאורכו הם מספרים ראשוניים, סדר המילים בשרשרת החדשה צריך להיות זהה לזה המקורי. דוגמה1: הכניסה: משפט = ""זה מבחן"" הפלט: ""הוא"" דוגמה2: הכניסה: משפט = ""הורשה לך ללכת לשחות"" הפלט: ""ללכת"" מגבלות: * 1 <= len(משפט) <= 100 * משפט מכיל רק אותיות """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,heb_Hebr,python,"
def simplify(x, n):
    """"""המטרה היא ליישם פונקציה שתפשט את הביטוי x * n. הפונקציה תחזיר True אם x * n מחושב כמספר שלם וFalse אחרת. הן x והן n, הן ייצוג של רצועת של שבר, ויש להם את הפורמט הבא, <numerator>/<denominator> שבו הן המכונה והן המכונה הן מספרים שלמים חיוביים. ניתן להניח כי x, ו n הם שברים תקפים, ואין להם אפס כמכונה. simplify "" 1/5 "", ""5/1"") = True simplify "" 1/6 "", ""2/1"") = False simplify "" 7/10 "", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,heb_Hebr,python,"
def order_by_points(nums):
    """"""כתבו פונקציה המארגנת את הרשימה המוקדמת של מספרים שלמים בסדר עולה לפי סכום הספרות שלהם. הערה: אם יש מספר פריטים עם סכום דומה של הספרות שלהם, סדר אותם על בסיס המדד שלהם ברשימה המקורית. לדוגמה: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,heb_Hebr,python,"
def specialFilter(nums):
    """"""כתבו פונקציה שמקבלת מערך של מספרים ככניסה ומחזירה את מספר האלמנטים במערך שהם גדולים מ 10 ושתי הספרות הראשונות והאחרונות של מספר הן אי-זוגיות (1, 3, 5, 7, 9). לדוגמה: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,heb_Hebr,python,"
def get_max_triples(n):
    """"""ניתן מספר שלם חיובי n. עליך ליצור מערך של מספרים שלמים a באורך n. עבור כל i (1 ‰¤ i ‰¤ n), הערך של a[i] = i * i - i + 1. החזר את מספר הכפולים (a[i], a[j], a[k]) של a כאשר i < j < k, ו- a[i] + a[j] + a[k] הוא כפול של 3. דוגמה: הכניסה: n = 5 הפלט: 1 הסבר: a = [1, 3, 7, 13, 21] הכפול השלישי היחיד הוא (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,heb_Hebr,python,"
def bf(planet1, planet2):
    '''יש שמונה כוכבי לכת במערכת השמש שלנו: הקרוב ביותר לשמש הוא כוכב מרקורי, הבא הוא ונוס, ואז כדור הארץ, מאדים, צדק, שבתאי, אורנוס, נפטון. כתוב פונקציה שמקבלת שני שמות כוכבי לכת כשרות כוכב 1 וכוכב 2. הפונקציה צריכה להחזיר טופל המכיל את כל הכוכבים שמסלוליהם נמצאים בין המסלול של כוכב 1 למסלול של כוכב 2, מסודרים לפי הקרבה לשמש. הפונקציה צריכה להחזיר טופל ריק אם כוכב 1 או כוכב 2 אינם שמות כוכבי לכת נכונים. דוגמאות bf ""(יופיטר"", ""נפטון"") ==> (""סאטורן"", ""אורנוס"") bf (((""ארץ"", ""מרקורי"") ==> (""נוס"") bf (((""מרקורי"", ""אורנוס"") ==> (""נוס"", ""ארץ"", ""יופיטר"", ""סנט"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,heb_Hebr,python,"
def sorted_list_sum(lst):
    """"""כתבו פונקציה שמקבלת רשימת מחרוזות כפרמטרים, מחוקקת את מחרוזות בעלות אורך פרד ממנה, ומחזירה את הרשימה התוצאה עם סדר מסודר. הרשימה היא תמיד רשימת מחרוזות ומעולם לא מערך של מספרים, והיא עשויה להכיל כפולים. סדר הרשימה צריך להיות עולה באורך של כל מילה, ואתה צריך להחזיר את הרשימה מסודרת על פי החוק הזה. אם שתי מילים יש להן אורך זהה, לסדר את הרשימה באלפבית. הפונקציה צריכה להחזיר רשימת מחרוזות בסדר מסודר. אתה יכול להניח שכל המילים יהיו באורך זהה. לדוגמה: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,heb_Hebr,python,"
def x_or_y(n, x, y):
    """"""תוכנית פשוטה אשר צריכה להחזיר את הערך של x אם n הוא מספר ראשוני, ובמקרה אחר, צריכה להחזיר את הערך של y. דוגמאות: עבור x_or_y ((7, 34, 12) == 34 עבור x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,heb_Hebr,python,"
def double_the_difference(lst):
    '''אם נתקבל רשימה של מספרים, החזר את סכום הריבועים של המספרים ברשימה שהם פרדים. התעלם ממספרים שהם שליליים או לא מספרים שלמים. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 אם הרשימה הפנימית ריקה, החזר 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,heb_Hebr,python,"
def compare(game,guess):
    """"""אני חושב שכולנו זוכרים את ההרגשה הזו כאשר התוצאה של אירוע שנחכה לו זמן רב ידועה סוף סוף. הרגשות והמחשבות שיש לך באותו רגע בהחלט ראויים להערכה והשוואה. המשימה שלך היא לקבוע אם אדם ניחש נכון את התוצאות של מספר התאמות. ניתן לך שני מערכות של ציונים ונחושות באורך שווה, כאשר כל מדד מראה התאמה. החזר מערך באורך שווה המציין כמה רחוק כל ניחוש היה. אם הם ניחשו נכון, הערך הוא 0, ואם לא, הערך הוא ההבדל המוחלט בין הניחוש והציון. דוגמה: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare ((([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,heb_Hebr,python,"
def Strongest_Extension(class_name, extensions):
    """"""אם יש שניים או יותר תוספים עם אותו כוח, עליך לבחור את זה שמגיע ראשון ברשימה. לדוגמה, אם ניתן ""Slices"" ככיתה ורשימה של התוספים: ['SEviRNGliSCes', 'Cheese', 'StuFfed'] אז אתה צריך להחזיר 'Slices.SEviRNGliSCes' מאחר ו'SviRNGliSCes' הוא התוסף החזק ביותר. לדוגמה, 'AA_Beats' הוא 'AA_Beats' (ב'Beats' = Strongest', 'AA_Class' = Strongest', 'AA_Beats' = Strongest')""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,heb_Hebr,python,"
def cycpattern_check(a , b):
    """"""ניתן לך שתי מילים. עליך להחזיר נכון אם המילה השנייה או כל אחת מהסחרורים שלה היא מחרוזת משנה במילה הראשונה cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,heb_Hebr,python,"
def even_odd_count(num):
    """"""אם נתון מספר שלם, מחזיר טופל שיש לו מספר של ספרות זוג וזוגיות בהתאמה. דוגמה: אפילו_זוגי_מספר (-12) ==> (1, 1) אפילו_זוגי_מספר (-123).""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,heb_Hebr,python,"
def int_to_mini_roman(number):
    """"""אם נתנו מספר שלם חיובי, קבלו את המקבילה שלו במספרים רומאים כשרשרת, וחזרו אותו במכתב קטן. הגבלות: 1 <= num <= 1000 דוגמאות: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,heb_Hebr,python,"
def right_angle_triangle(a, b, c):
    '''אם נתנו אורך שלושת הצדדים של משולש. מחזיר אמת אם שלושת הצדדים יוצרים משולש בעל זווית ישרה, שקר אחרת. משולש בעל זווית ישרה הוא משולש שבו זווית אחת היא זווית ישרה או 90 מעלות. דוגמה: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,heb_Hebr,python,"
def find_max(words):
    """"""כתבו פונקציה שמקבלת רשימת מחרוזות. הרשימה מכילה מילים שונות. החזרו את המילה עם מספר מקסימלי של אותיות ייחודיות. אם למחרוזות מרובות יש מספר מקסימלי של אותיות ייחודיות, החזרו את המילה הראשונה בסדר מילונתי. find_max (([""שם"", ""של"", ""חרוזת""]) == ""חרוזת"" find_max (([""שם"", ""enam"", ""משחק""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,heb_Hebr,python,"
def eat(number, need, remaining):
    """"""אתה ארנב רעב, וכבר אכלת מספר מסוים של גזרים, אבל עכשיו אתה צריך לאכול יותר גזרים כדי להשלים את ארוחות היום. אתה צריך להחזיר מערך של [מספר גזרים נאכלים לאחר הארוחות שלך, מספר הגזרים שנותרו לאחר הארוחות שלך ] אם אין מספיק גזרים שנותרו, אתה תאכל את כל הגזרים שנותרו, אבל עדיין יהיה רעב. דוגמה: * לאכול ((5, 6, 10) -> [11, 4] * לאכול ((4, 8, 9) -> [12, 1] * לאכול ((1, 10, 10) -> [11, 0] * לאכול ((2, 11, 5) -> [7, 0] משתנים: @number: מספר הגזרים שאכלת. @need: מספר הגזרים שאתה צריך לאכול. @remaining: מספר הגזרים שנותרו במלאי.""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,heb_Hebr,python,"
def do_algebra(operator, operand):
    """"""במקביל, ישנן שתי רשימות של מפעילים, ו-operand. ברשימה הראשונה יש פעולות אלגברה בסיסיות, והרשימה השנייה היא רשימה של מספרים שלמים. השתמש בשתי הרשימות שניתנו כדי לבנות את הביטוי האלגברי ולהחזיר את הערכה של הביטוי הזה. הפעולות האלגבריות הבסיסיות: חיבור (+) פחזור (- ) כפל (*) חלוקת רצפה (//) הפעלת רמה (**) דוגמה: מפעיל['+', '*', '-'] מערך = [2, 3, 4, 5] תוצאה = 2 + 3 * 4 - 5 => תוצאה = 9 הערה: אורך רשימת מפעילים שווה לאורך של operand רשימה מינוס אחד. Operand הוא רשימת מספרים שלמים לא שליליים. מפעיל יש לפחות מפעיל אחד, ורשימת מפעילים יש לפחות שני מפעילים. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,heb_Hebr,python,"
def solve(s):
    """"""אם s[i] הוא אות, הפוך את המיקוד שלו מטה למעלה או להיפך, אחרת השאר אותו כפי שהוא. אם המחרוזת אינה מכילה אותיות, הפוך את המחרוזת. הפונקציה צריכה להחזיר את המחרוזת התוצאה. דוגמאות לפתור ((""1234"") = ""4321"" לפתור ((""ab"") = ""AB"" לפתור ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,heb_Hebr,python,"
def string_to_md5(text):
    """"""אם נתון מחרוזת 'text', החזר את מחרוזת ההאש המקבילה md5 שלה. אם 'text' היא מחרוזת ריקה, החזר None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,heb_Hebr,python,"
def generate_integers(a, b):
    """"""אם נתנו שני מספרים שלמים חיוביים a ו-b, החזרו את הספרות הזוגיות בין a ו-b, בסדר עולה. לדוגמה: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
