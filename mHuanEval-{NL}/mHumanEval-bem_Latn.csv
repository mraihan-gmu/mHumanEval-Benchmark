task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,bem_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Moneni nga mu mpendwa ya namba, pali inambala shibili ishili mupepi sana kuli shimbi ukucila pa cipimo ca nsambu. Icilangililo: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,bem_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Amabumba ayalekana yalipalana (iciputulwa cimo na cimo caisalikwa bwino) kabili tayali mu kati ka cimbi. Ignore any spaces in the input string. Example: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,bem_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Nga ca kuti inambala ya floating point yalipangwa, kuti yacitwa inambala ya integer (inambala iikalamba iyacepako ku namba) ne ya decimal (inambala iishabapo iikalamba ku namba 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,bem_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Iwe wapelwa ulufulo lwa fya kwata na fya kufumya pa akalipoti ka banki ilutendeka na zero balance. Umulimo obe kusanga nga pa nshita imo ine akalipoti ka akalipoti kali panshi ya zero, elyo pa nshita ilya, umulimo ulingile ukubwelela True. Nga tefyo ninshi ufwile ukubwelela False. Icilangililo: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,bem_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Pa mpendwa ya fyasalwa, tangila ukupusana kwa ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo ca ciimo""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,bem_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Bembuleni inambala 'delimeter' pakati ka fintu fibili ifyakonkana ifya mutande wa fyabupe `numbers' >>> intersperse (([], 4) [] >>> intersperse (([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,bem_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (() (()) has maximum two levels of nesting while ((())) has three. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,bem_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter a input list of strings only for ones that contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,bem_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Pa mpendwa ya ntendwa sha cine, shila isubilo lya tuple ilyaba mu cipimo no kupangwa kwa ntendwa shonse mu mpendwa. Impendwa ya ntendwa sha cine shifwile ukuba 0 elyo impendwa ya ntendwa sha cine shifwile ukuba 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,bem_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Ukufuma ku mutande wa ntendwa sha cine, pangeni mutande wa ntendwa shacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo ishacilamo""""""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,bem_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Fwayeni palindrome iyacepa iyatendeka ne cipingo icapeelwa. Amano ya algorithm yalyanguka: - Fwayeni postfix iyalepa iya cipingo icapeelwa icili palindrome. - Isansheni ku mpela ya cipingo ca cipingo icabulamo cipingo icaisa kuntanshi ya cipingo ca palindrome. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Iseni nga ifisemo fyaba palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,bem_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Ifyabulamo ni filembo fibili ifya nsambo a na b ifikwete fye 1 na 0. Ukucita XOR ya bubili pali ifi fyabulamo no kubwelela ku cipimo ca nsambo. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,bem_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Mu mulongo wa mikoshi, shibwesha iyapilibukilapo. Shibwesha iya ntanshi nga kuli mikoshi iingi iyabutali bumo bwine. Shibwesha iyo nga ca kuti ulubali lwa fyasuminishiwa luli ulupya. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,bem_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Bwesesheni icikonsolwelo ca pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba ica pabula icikalamba icabula icikalamba icacilapo.""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,bem_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Ukubwelela uluba lwa ntambi shonse ukufuma pa shapi ukufika pa shapi isha mu mutande wa fyabupe >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,bem_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Ukubwelela intambo iikwete amanambala ayapangwa mu cipinda ukutendeka ukufuma pa 0 ukufika na ku n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,bem_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Nga mwapeelwa string, fwayeni imisonko iyingi (nangu iikalamba shani) iyo ili nayo >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,bem_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input to this function is a string representing musical notes in a special ASCII format. Your is to parse string list of integers corresponding to many beats does. Here is a legend: 'o' note, lasts four beats 'o' - half note, lasts two beats ' - quater note, lasts one beat >>> parse_music. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,bem_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Fwayeni imiku inga iyo inambala ya mutande wa ciputulwa iilecitika mu mutande wa ciputulwa. Impendwa ya milandu iyapikana. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,bem_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,bem_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Ukufuma pa mpendwa ya ntendwa (shintu shibili) ishakusala no kubwesesha shibili ishapalana sana no kubwesesha mu kukonkana (inambala inono, inambala iikalamba). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,bem_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Nga mwapeelwa inambala ya filembo fibili, mufwile ukubomfya linear transform, ica kuti inambala iyinono ikaba 0, e lyo iikalamba ikaba 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,bem_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter given list of any python values only for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,bem_Latn,python,"

def strlen(string: str) -> int:
    """"""Ukubwelela ubutali bwa string >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,bem_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Pa namba n, sanga inambala iikalamba iyaba pa n iyaba pa nsenda imo ine, iyacepako pa n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,bem_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Ifya kutantika ifishinka fya ntulo sha cifyalilwa fyalilembwa ukufuma pa finono ukufika pa finene. Ifyakucita fyonse fifwile ukulembwa impendwa ya nshita ukulingana ne miku ifi fikumoneka mu fya kutantika. Inambala ya fya kutantika ifyakulemba ifishinka ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ifyalandwa ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba ukuba""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,bem_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Ukufuma mu mulongo wa intendwa sha cine, fumya fyonse ifituntulu ifisangwa ukucila pa muku umo. Isunga inshila ya fintu ifipusene ngefyo fyali mu fyasuminishiwa. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,bem_Latn,python,"

def flip_case(string: str) -> str:
    """"""Pa nsoselo imo, isuleni ifilembo ifinono fibe filembo ifinono. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,bem_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,bem_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter a input list of strings only for ones that start with a given prefix. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,bem_Latn,python,"

def get_positive(l: list):
    """"""Bwekesheni fye amanambala ayasuma mu mulongo. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,bem_Latn,python,"

def is_prime(n):
    """"""Ifya cine nga inambala yalikwata isumo, ne fya bufi nga talikwata isumo. >>> is_prime(6) False >>> is_prime(101) Fya cine >>> is_prime(11) Fya cine >>> is_prime(13441) Fya cine >>> is_prime(61) Fya cine >>> is_prime(4) Fya bufi >>> is_prime(1) Fya bufi """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,bem_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ni coefficients ya polynomial. find_zero find x such that poly(x) = 0. find_zero is back only only zero point, even if there are many. kabili, find_zero is only taking list xs having even number of coefficients and largest non-zero coefficient pantu yalasuminisha ukupwisha. >>> round (((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Icasesamo polynomial na coefficients xs pa nshita x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,bem_Latn,python,"

def sort_third(l: list):
    """"""Uyu mulimo ulesenda l kabili ulebwelela l' mu musango wakuti l' yalipalana na l mu fyakulangilila ifyo ifishiputulwa na fitatu, ilyo ifyacindama fyakwe mu fyakulangilila ifyo ifisuntulwa na fitatu fyaba ifyapalana ne fyacindama fya fya fyalelingana ifya ifyacindama fya l, lelo fyalinganishiwa. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,bem_Latn,python,"

def unique(l: list):
    """"""Ukubwelela ifilundwa fyalengwa ifyabulamo mu mutande >>> fyabulamo (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,bem_Latn,python,"

def max_element(l: list):
    """"""Bwesesha icikope cacilamo mu mulongo. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,bem_Latn,python,"

def fizz_buzz(n: int):
    """"""Iseni impendwa ya miku inambala 7 yaisa mu manambala yonse ayacepako pali n ayalepangwa na 11 nangu 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,bem_Latn,python,"

def sort_even(l: list):
    """"""Iyi milimo yalasenda l kabili yalasenda l' mu musango wakuti l' yalipalana na l mu fyalembwa ifyabula ukupalana, ilyo ifyacindama fyakwe mu fyalembwa fya palana fyaba ifyacindama fya fyalembwa fya palana fya l, lelo fyasalwa. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,bem_Latn,python,"

def encode_cyclic(s: str):
    """"""Takes as input string encoded with encode_cyclic function. Returns decoded string. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""Icipingo ca ciNgeleshi ca ""Encoded string"" cilesonta ku mabumba ya filembo fitatu.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,bem_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib alabwelela inambala ya n iyo iili namba ya Fibonacci kabili nayo ni prime. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,bem_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero alabomfya ifisendo fya intari shapwililika. alabwelela True nga kuli ifisendo fitatu ifyalekana mu mulongo ifisenda ku zero, na False nga tacili ifyo. >>> triples_sum_to_zero (([1, 3, 5, 0]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,bem_Latn,python,"

def car_race_collision(n: int):
    """"""Tutile umusebo uli uutali sana. Imotoka n shileenda ukufuma ku kuso ukuya ku kulyo; limo limo, imyotoka n shileenda ukufuma ku kulyo ukuya ku kuso. Imyotoka shibili shafuma ukutali sana. Imyotoka yonse ileenda mu lubilo lumo. Imyotoka shibili shila collide ilyo motoka iyaleenda ukufuma ku kuso ukuya ku kulyo ya collide na motoka iyaleenda ukufuma ku kulyo ukuya ku kuso. Lelo, imyotoka shilakosa sana; eico shila lundapo mu nshila shabo kwati ta sha collide. Uyu mulimo uletuma impendwa ya malubulushi ya musango uyu.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,bem_Latn,python,"

def incr_list(l: list):
    """"""Ukubwelela ulubali na fintu ifyalundwako na 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,bem_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero alabomfya intendwa sha intulo. nga kuli intulo shibili ishilipo mu mulongo, ninshi ishibwelela ku true, nga kuli intulo shibili ishilipo mu mulongo ishilipo, ninshi ishibwelela ku false. >>> pairs_sum_to_zero (([1, 3, 5, 0]) false >>> pairs_sum_to_zero (([1, 3, -2, 1]) false >>> pairs_sum_to_zero (([1, 2, 3, 7]) false >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) true >>> pairs_sum_to_zero (([1]) false """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,bem_Latn,python,"

def change_base(x: int, base: int):
    """"""Shinshani inambala ya ciputulwa ca x ukuya mu ciputulwa. sheni inambala ya ciputulwa ca x panuma ya kwalula. inambala ya ciputulwa yacila pali 10. >>> sheni_ciputulwa ((8, 3) '22' >>> sheni_ciputulwa ((8, 2) '1000' >>> sheni_ciputulwa ((7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,bem_Latn,python,"

def triangle_area(a, h):
    """"""Ukupima ubutali bwa ku lubali na mu cifulo ca kubwelelapo ica ciputulwa ca mutatu. >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,bem_Latn,python,"

def fib4(n: int):
    """"""Ifyakonkapo fya fib4 fyapalana ne fyakonkapo fya Fibbonacci ifyalondololwa ngefi: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Lomba lembeni umulimo wa kulondolola bwino bwino icikakonkapo ca n-th ica fyakonkapo fya fib4. Mwilabomfya ukubwekeshapo. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,bem_Latn,python,"

def median(l: list):
    """"""Icipimo ca kubwela kwa fintu ifyali mu l. >>> icifulo ca kubwela (([3, 1, 2, 4, 5]) 3 >>> icifulo ca kubwela (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,bem_Latn,python,"

def is_palindrome(text: str):
    """"""Iletontonkanya nga inshila ya kulangililamo yaliko palipindrome >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,bem_Latn,python,"

def modp(n: int, p: int):
    """"""Bwesesheni 2^n modulo p (mube abaishiba ifyamanambala). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,bem_Latn,python,"

def encode_shift(s: str):
    """"""Takes as input string encoded with encode_shift function. Returns decoded string. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""Icipingo ca ciNgeleshi ca cipingo ca cipingo ca ciNgeleshi ca ciNgeleshi, cilesonta ku cipingo ca ciNgeleshi ica cipingo ca ciNgeleshi ukubomfya inshila ya 5 mu ciNgeleshi.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,bem_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ni function iyo ifwaya string elyo yaleta string ukwabula vowels. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,bem_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,bem_Latn,python,"

def add(x: int, y: int):
    """"""Mulesunga amanambala yabili x na y >>> mulesunga ((2, 3) 5 >>> mulesunga ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,bem_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Moneni nga amashiwi yabili yalikwata ifishibilo fimo fine. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') Cine >>> same_chars('abcd', 'dddddddddabc') Cine >>> same_chars('dddddddabc', 'abcd') Cine >>> same_chars('eabcd', 'dddddddddabc') Bufi >>> same_chars('abcd', 'dddddddabc') Bufi >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') Bufi """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,bem_Latn,python,"

def fib(n: int):
    """"""Bwesesheni inambala ya n-th iya Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,bem_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni nsoselo ya ""<"" na "">"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,bem_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,bem_Latn,python,"

def common(l1: list, l2: list):
    """"""Bwalya ifilundwa fyalekanalekana ifyaba mu malyashi yabili. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,bem_Latn,python,"

def largest_prime_factor(n: int):
    """"""Bwesesheni icilundako icikalamba ica n. Tutile n > 1 kabili tacili icikalamba. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,bem_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ni function iyasonta amanambala ukufuma 1 ukufika ku n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,bem_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets ni nsoselo ya ""("" na "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,bem_Latn,python,"

def derivative(xs: list):
    """"""xs baleimininako ifilundwa fya mulingo wa mapolimeni. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,bem_Latn,python,"

def fibfib(n: int):
    """"""Ifyakonkana fya fib fib fyaba fye nge fyakonkana fya fibbonacci ifyalondololwa ngefi: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Lembeni functiona pa kusanga inshila ya n-th ya fyakonkana fya fib fib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,bem_Latn,python,"
FIX = """"""Lembeni ifilundwa fya vowels_count ifibomfya insamushi iyimininako ishiwi elyo no kubwesesha impendwa ya vowels muli ulushimbo. 'a', 'e', 'i', 'o', 'u'. 'y' nayo ni vowel, lelo nga yabela fye ku mpela ya shiwi. Icilangililo: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Mulebomfya ifyebo na fimbi pa kusambilila. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,bem_Latn,python,"
def circular_shift(x, shift):
    """"""Ifimfungwa fya ciputulwa fya x, fyalundako ifimfungwa fya ciputulwa ku kulyo ukupitila mu fimfungwa fya ciputulwa, elyo fyabwelela ifisumo nge nsambo. Nga ca kuti fimfungwa fya ciputulwa fyacilamo, fyabwelela ifimfungwa fya ciputulwa fyacilamo. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,bem_Latn,python,"
def digitSum(s):
    """"""Ukulemba ifilundwa ifibomfya intambo nga inshila ya kulembelamo kabili ifibwesesha ifilundwa fya makalata ayacilamo. Ifilangililo: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,bem_Latn,python,"
def fruit_distribution(s,n):
    """"""Muli uyu mulimo, mukapeelwa intambo iyimininako impendwa ya maapulo na ma orange ayapeelwa mu cikote ca fisabo ici icakwata ama apple, ama orange, ne fisabo fya mango. Nga mwapeelwa intambo iyimininako impendwa yonse iya ma orange na ma apple elyo ne cipendwa conse icakwiminako impendwa yonse iya fisabo ifyaba mu cikote, shilileni impendwa ya fisabo fya mango ifyaba mu cikote. icilangililo: fruit_distribution""5(ama apple na ma orange 6"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples na 1 orange"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples na 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples na 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,bem_Latn,python,"
def pluck(arr):
    """""""" Nga mwapeelwa umubili uuleimininako umusambo wa cimuti umo mwaba intulo sha nsoselo ishili sha nsoselo, umulimo wenu kusenda imo mu nsoselo no kubwesesha. Insoselo ishakasendwa lifwile ukuba insoselo ya nsoselo iyakwata intulo ishakashikila. Nga mwasanga insoselo ishingi ne ntulo ishakashikila ishakwata intulo ishakashikila. Insoselo ishakasendwa lifwile ukusendwa mu mulongo, [smallest_value, its index] , Nga tamwaba intulo ishakashikila nelyo insoselo ishakashikila, ishakashikila []. Icilangililo 1: Input: [4,2,3] Output: [2, 1] Icilondololwa: 2 ishakashikila ishakashikila, na 2 ishakashikila. Icilangililo 2: Input: [1,2,3] Output: [2, 1] Icilondololwa: 2 ishakashikila ishakashikila, na 2 ishakashikila ishakashikila. Icilangililo 3: Input: [] Output: [4: [5, 3, 4, 2] Icilondololwa: 1 ishakashikila, icilondololwa: 1 ishakashikila ishakashikila, icilangililo: * * * * ishakashikila ishakashikila ishakashikila, icituntulo cikwete, icilingililo: * icilingililo cindindelo ciko pali zero. Icilangililo: *1==0=0 *""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,bem_Latn,python,"
def search(lst):
    '''Ifwe twapeelwa ulubali ulwabula ubulowa ulwa finambala fyalungama. Isubilo lya finambala fyalungama ifilipo ifinono ukucila pali zero, kabili ifili na bwingi bwa bwingi ukucila nelyo ukulingana ne cipimo ca finambala fyalungama. Ubungi bwa finambala fya cine ni mpendwa ya nshita ifi fimoneka mu mulongo. Nga takuli ifyo fine, isubilo -1. Ifya kumwenako: ukufwaya (([4, 1, 2, 2, 3, 1]) == 2 ukufwaya ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 ukufwaya ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,bem_Latn,python,"
def strange_sort_list(lst):
    '''Ifyabupeelwa uluba lwa integer, fyabwela mu ciputulwa ca strange. Strange sorting, ni lintu mwatendeka na minshila, elyo na minshila ya integer ishashalako, elyo na minshila na fimbipo. Ifilangililo: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,bem_Latn,python,"
def triangle_area(a, b, c):
    '''Ifisansangu fibili ifyapanga insandesande shitatu. Ifisansangu fibili ifyapanga insandesande shitatu shilapanga insandesande shitatu. Ifisansangu fibili ifyapanga insandesande shitatu shilapanga insandesande shitatu. Ifisansangu fibili ifyapanga insandesande shitatu shilapanga insandesande shitatu.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,bem_Latn,python,"
def will_it_fly(q,w):
    '''Lembeni ifilundwa ifingabuusha true nga ca kuti icili conse q cilepupuka, na false nga tacili conse. Icili conse q cilepupuka nga ca kuti calilingana (ciba fye palindromic list) kabili ifilundwa fya ciko fyonse fyaba fye pabula nelyo ukulingana na maka w. Icilangililo: will_it_fly([1, 2], 5) â -> False # 1+2 calicepa ukucila icili conse, lelo calipupuka. will_it_fly([3, 2, 3], 1) â -> False # calipupuka, lelo 3+2+3 calicilapo pa maka. will_it_fly[3, 2, 3], 9) â -> True # 3+23 calicepa ukucila icili conse, kabili calipupuka. will_it_fly([3], â 5) -> True # 3 calicepa ukucila icili conse, kabili calipupuka.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,bem_Latn,python,"
def smallest_change(arr):
    """"""Ifwe twapeela intungulushi ya intungulushi sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo sha nsangulo.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,bem_Latn,python,"
def total_match(lst1, lst2):
    '''Lembeni ifilundwa ifisumina intambo shibili no kubwesesha intambo iikwete impendwa ya nsoselo mu nsoselo shonse sha mutande ukucila intambo imbi. nga intambo shibili shali na mpendwa imo ine ya nsoselo, ishibweshe intambo ya ntanshi. Ifilangililo total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', ['2'', '3'', '4'], ['5']) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,bem_Latn,python,"
def is_multiply_prime(a):
    """"""Lembeni ifilundwa ifingabuusha ifishinka nga inambala iilepeelwa ni mulundi wa minshila itatu iya ntanshi kabili nga ya bufi nga iyo.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,bem_Latn,python,"
def is_simple_power(x, n):
    """"""Icipimo cenu ca kulemba funde ilibwelela true nga inambala x yaba amaka ya n elyo false mu milandu imbi. x yaba amaka ya n nga n**int=x Ku ca kumwenako: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,bem_Latn,python,"
def iscube(a):
    '''Lembeni ifilundwa ifibomfya integer a no kubwelela true nga ingeger ni cube wa integer. Moneni: kuti mwasumina ukuti ifilundwa lyonse fya cine. Ifilangililo: iscube ((1) ==> true iscube ((2) ==> false iscube ((-1) ==> true iscube ((64) ==> true iscube ((0) ==> true iscube ((180) ==> false '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,bem_Latn,python,"
def hex_key(num):
    """"""Ifyalembwa fya fya cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo ca cipimo cipimo cipimo cipimo cipimo ca cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipimo cipyo cipimo cipimo cipimo cipimo cipimo cipyo cipimo cipimo cipimo cipimo cipy cipimo cipimo""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,bem_Latn,python,"
def decimal_to_binary(decimal):
    """"""Mukapeelwa inambala mu ciputulwa ca decimal elyo umulimo wenu kuba kuyalula mu ciputulwa ca binary. Umulimo ufwile ukubwelela intambo, umo umo umo akalembo akaimininako inambala ya binary. Inambala imo imo mu ntambo ikaba '0' nangu '1'. Kukaba intambi ishingi 'db' pa kutendeka na pa mpela ya ntambo. Inambala ishingi shilafwa mu ciputulwa.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,bem_Latn,python,"
def is_happy(s):
    """"""Mwapeelwa string s. Umulimo wenu kushininkisha ngacakuti string ya nsansa nangu iyo. A string ni nsansa nga ubutali bwa iko ni 3 na cila 3 ifilembo ilandelana fyalipusana Ku ca kumwenako: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,bem_Latn,python,"
def numerical_letter_grade(grades):
    """"""Cene cili ni pa mulungu wa kulekelesha wa semester kabili kafundisha ali no kupeela amano kuli basambi. Kafundisha alipangile algorithm yakwe umwine pa kupima. Ubwafya fye bwa kuti, alilobele code iyo aomfeshe pa kupima. Alipeela iwe ilyashi lya GPAs kuli basambi bamo kabili iwe uli no kulemba umulimo uwingafumya ululembo lwa makalata ukubomfya italanti ililakonkapo: GPA. Makalata makalata makalata 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,bem_Latn,python,"
def prime_length(string):
    """"""Lembeni ifilundwa ifibomfya intambo no kubwelelako True nga intambo yalikwata inambala ya ntanshi nelyo False nga taikwete Inshimbi prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,bem_Latn,python,"
def starts_one_ends(n):
    """"""Nga twapeelwa integer iyisuma n, twala isubilo lya mpendwa ya integer iyisuma iya n-inambala iyatendeka nelyo ukupwa na 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,bem_Latn,python,"
def solve(N):
    """"""Nga ca kuti inambala ya N yalikwata ishakutendekelako, shilaisa ishakutendekelako sha nsendwa sha cibili. Ku ca kumwenako Nga ca kuti N = 1000, inshila sha kusendekelako sha cibili shaba 1 inshila ya kusendekelako yafwile ukuba ""1"". Nga ca kuti N = 150, inshila sha kusendekelako shaba 6 inshila ya kusendekelako yafwile ukuba ""110"". Nga ca kuti N = 147, inshila sha kusendekelako shaba 12 inshila ya kusendekelako yafwile ukuba ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,bem_Latn,python,"
def add(lst):
    """"""Nga ca kuti mwasangapo intendwa ishili shabuuta lst, mufwile ukubikapo intengo shabuuta ishikwete inambala yabuuta.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,bem_Latn,python,"
def anti_shuffle(s):
    """"""Lembeni ifilundwa ifibomfya intambo no kubwesesha inshila ya kukonkana. Inshila ya kukonkana iya intambo, ni intambo umo amashiwi yonse (ayalekanishiwa ne cibeela) yapyanikwa ne shiwi ilipya umo ifishibilo fyonse fyalekanishiwa mu kukonkana ukwenda pa muulu ukulingana ne cipimo ca ascii. Moneni: Mufwile ukusunga umusango wa mashiwi ne cibeela mu nsoselo. Ku ca kumwenako: anti_shuffle ((('Hi') abwesesha 'Hi' anti_shuffle ((('hello') abwesesha 'ehllo' anti_shuffle (('Hello World!!!') abwesesha 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,bem_Latn,python,"
def get_row(lst, x):
    """"""Ifyakonkapo fyali fya ma-matrix, lelo, tefyo fyaba ama-matrix, umu mutande onse kuti waba ne nambala ishili iya mutande. Nga ca kuti lst, na integer x, sanga intitiles x mu mutande, na return list of tuples, [(x1, y1), (x2, y2) ...] efyo cila tuple yaba coordinate - (row, columns), ukutendeka na 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. Examples: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), (2, 5), (2, 0), get_(1), [] == [[row]], [1, 2, 3]], [2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,bem_Latn,python,"
def sort_array(array):
    """"""Nga mwapeelwa intulo ya ntendwa sha cine ishili sha bubi, mulebwesesha kopi ya ntulo ya ntulo ilyo mwapwisha ukupekanya, mukapekanya intulo mu kukonkana kwa kutantala nga ca kuti intulo ya ntulo ya ntulo ya ntanshi, ya ntulo ya kulekelesha) yalipusana, nangu mulepanga intulo mu kukonkana kwa kuntalala nga ca kuti intulo ya ntulo ya ntulo ya ntanshi, ya ntulo ya kulekelesha) yalipusana. Cishibilo: * mwiyalula intulo ya ntulo. Ifilangililo: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,bem_Latn,python,"
def encrypt(s):
    """"""Ukupanga inambala ya cipingo iya kubomfya intambo nga insoselo elyo ya busha intambo iyashikwa ne cilembo ca cilembo. Ici cilembo ca cilembo cifwile ukupilibulwa mu nshila yakuti ifilembo fya shila panshi pabili ukufishiwa pa fifulo fibili. Ku ca kumwenako: cipingo (('hi') ca busha 'lm' cipingo (('asdfghjkl') ca busha 'ewhjklnop' cipingo (('gf') ca busha 'kj' cipingo (('et') ca busha 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,bem_Latn,python,"
def next_smallest(lst):
    """"""Ifyalembwa fya fyabuuta fyasangwa mu mulongo wa fyabuuta. Lembeni ifilundwa fyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ifyabuuta ify""""""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,bem_Latn,python,"
def is_bored(S):
    """"""Kuti mwapeelwa amashiwi ayali mu cipande, elyo umulimo wenu kuba ukupenda impendwa ya ma-bored. A bored is a sentence that begins with the word ""I"". Amashiwi yalaputulwa na '.', '?' or '!'. Ku ca kumwenako: >>> is_bored ((""Hello world"") 0 >>> is_bored ((""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,bem_Latn,python,"
def any_int(x, y, z):
    '''Icipingo ca ciGreek capeela inshila ya kushininkisha ukuti ifishinka fyonse fibili fya cine. Ifishinka fyonse fibili fya cine. Ifishinka fyonse fibili fya cine. Ifishinka fyonse fibili fya bufi. Ifya cine fyonse fya bufi.'''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,bem_Latn,python,"
def encode(message):
    """"""Lembeni ifilundwa ifikonkela amashiwi, no kulemba mu nshila iyakuti ifikonkele amashiwi fikapilibula ilembo lya makalata yonse, no kubikapo amashiwi yonse ayali mu mashiwi na makalata ayali pa ncende 2 kuntanshi ya mashiwi aya mu ciNgeleshi. Muletontonkanya fye pa makalata. Ifilangililo: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,bem_Latn,python,"

def skjkasdkd(lst):
    """"""Ifya kumwenako: Pa lst = [0,3,2,1,3,5,7,4,5,5,2,181,32,4,32,3,2,32,324,4,3] ifyakufumya fifwile ukuba 10 Pa lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ifyakufumya fifwile ukuba 25 Pa lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ifyakufumya fifwile ukuba 13 Pa lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ifyakufumya fifwile ukuba 11 Pa lst = [0,81,12,31,21] ifyakufumya fifwile ukuba 3 Pa lst = [1,0,8,1,2,1,7] ifyakufumya fifwile ukuba 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,bem_Latn,python,"
def check_dict_case(dict):
    """"""Nga ca kuti mwasangile dikishonari, mubweshe true nga ifisosa fyonse fyali filembo fyali mu minwe ya baice nelyo ifilembo fyonse fyali filembo fyali mu minwe ya baice, nga tefyo mubweshe false. Umulimo ufwile ukubwela false nga ca kuti dikishonari yalikosa. Ifilangililo: check_dict_case{""a"":""apple"", ""b"":""banana""}) mubweshe true. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) mubweshe false. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) mubweshe false. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) mubweshe false. check_dict_case{""NC"":""STATE"", ""Z"":""IP""12345}) mubweshe true.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,bem_Latn,python,"
def count_up_to(n):
    """"""Ukubomfya isubilo ilipoka integer ishili yabula ubula no kubwelela ku mulongo wa intanshi n ishaba intanshi kabili ishishili sha n. Ku ca kumwenako: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,bem_Latn,python,"
def multiply(a, b):
    """"""Ifyakubomfya: ukulemba ifyebo pa filembo fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifyalilwa fya cifya""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,bem_Latn,python,"
def count_upper(s):
    """"""Nga mwapeelwa string s, belengeni impendwa ya vowels shacilamo mu cipingo. Ku ca kumwenako: count_upper (('aBCdEf') isubilo 1 count_upper (('abcdefg') isubilo 0 count_upper (('dBBE') isubilo 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,bem_Latn,python,"
def closest_integer(value):
    '''Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya: Ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifyakubomfya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:ifya:if'''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,bem_Latn,python,"
def make_a_pile(n):
    """"""Nga ca kuti muli na integer iyakuti n, mufwile ukupanga inkungu ya mabwe ya n. Inshila ya kubalilapo yalikwata mabwe ya n. Impendwa ya mabwe ya mu mulongo wakonkapo yaba:- inambala ya nomba iyashalangana nga n yalipusana. - inambala ya nomba iyalingana nga n yalipusana. Iseni impendwa ya mabwe ya mu mulongo onse mu mulongo, umo ilembo lya index i lilemininako impendwa ya mabwe ya mu mulongo (i+1). Ifya kumwenako: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,bem_Latn,python,"
def words_string(s):
    """"""Kuti mwapokelela amashiwi ayalekanishiwa na makoma nangu ukulekanya. Umulimo wenu kuputula amashiwi mu mashiwi no kubwesesha amashiwi ayalekanishiwa. Ku ca kumwenako: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,bem_Latn,python,"
def choose_num(x, y):
    """"""Iyi function ilafwaya amanambala ya x na y kabili ilafwaya inambala iikalamba iya integer iyaba mu mulongo [x, y] inclusive. Nga takuli inambala ya musango uyu, ninshi iyi function ifwile ukubwelela -1. Ku ca kumwenako: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,bem_Latn,python,"
def rounded_avg(n, m):
    """"""Ifyabupingulo fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cibili fya cifififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififififi""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,bem_Latn,python,"
def unique_digits(x):
    """"""Ifwe twapeelwa uluhlu lwa ntendwa sha cine cine x. ukubwelela uluhlu lwa ntendwa shonse ishakwete inambala ya cine cine. Icakwibukisha: Ulutanda lwa ntendwa shonse lufwile ukulembwa mu kukonkana kwa kutendeka. Ku ca kumwenako: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,bem_Latn,python,"
def by_length(arr):
    """"""Nga mwapeelwa intendwa sha mpendwa, mufwile ukuputula intendwa sha mpendwa ishaba pakati ka 1 na 9 ukubikapo, mufwile ukuputula intendwa sha mpendwa, elyo mufwile ukubuula intendwa sha mpendwa, elyo mufwile ukubuula intendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa sha mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mpendwa mp""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,bem_Latn,python,"
def f(n):
    """"""Fyonse f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,bem_Latn,python,"
def even_odd_palindrome(n):
    """"""Nga ca kuti muli intulo ishili ya n, mulebwesesha intulo ya n iyakwata intulo ishili ya n ishili ya n. Icakumwenako1: Input: 3 Output: (1, 2) Explanation: Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd. Example2: Input: 12 Output: (4, 6) Explanation: Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd. Note: 1. 1 <= n <= 10^3 2. mu ntulo ya n muli intulo ishili ya n ishili ya n ishili ya n.""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,bem_Latn,python,"
def count_nums(arr):
    """"""Lembeni umulimo wa count_nums uufwaya intendwa sha cine cine kabili uubwesesha impendwa ya fintu ifikwete impendwa ya manambala > 0. Nga inambala yaliko, ninshi inambala ya ntanshi iya cishibilo ilakwata impendwa ya nsoselo: pamo nga -123 yalikwata amanambala ya nsoselo -1, 2, na 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,bem_Latn,python,"
def move_one_ball(arr):
    """"""Ifwe twakwata intungulushi 'arr' iya N intungulushi sha cine arr[1], arr[2], ..., arr[N]. Impendwa mu ntungulushi shikapangwa mu musango wa kusalulula. Umulimo wenu kushininkisha ngacakuti kuti cacitika ukupanga intungulushi ishalondoloka mu musango wa kusalulula ukwabulo kunyanta ukupitila mu kucita umulimo wakonkapo pa ntungulushi iilipe: Mwalisuminishiwa ukucite milimo ya kusuntikana ku kulyo impindi ishingi. Umulimo umo wa kusuntikana ku kulyo upilibula ukusuntikana kwa fintu fyonse ifya ntungulushi mu cifulo cimo mu nshila ya kulungama. Umulimo wa kulekelesha wa ntungulushi ukabikwa ku cifulo ca kutendeka mu ntungulushi iilipe i. 0th. Ngacakuti cene cili icingacitika ukupanga intungulushi ishalondoloka ukupitila mu kucita umulimo wa pamulu ninshi ukubwelela kwa cine kukabwelela kwa bufi. Nga intungulushi iilipe iilipe yabula, ninshi ukubwelela kwa cine kukacitika. Icakumwenako: ukuyendela_umo (([3, 4, 5, 4, 1, 2] == 1, 2, 2> Ukulondolola kwa cine: Ukucita imilimo ya kulungama ukupitila mu minitilila ku mineti 2 kuti kwacitika mu nshila iilipe, mu nshila iilipe, kuti cacitika ukufwaya ukwalondoloka kwa ntungulushi ukucitwa mu kulungika kwa ntungulushi ukwabula ukwalondoloka.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,bem_Latn,python,"
def exchange(lst1, lst2):
    """"""Muli ili lyashi, mukabomfya umulimo uufwaya ukupoka intambi shibili, no kushininkisha nga kuti mwacita ukushininkisha kwa fintu pakati kabo pa kulenga lst1 ukuba intambi sha nsobelo fye. Takwaba umupaka pa mpendwa ya fintu ifyashininkishiwa pakati ka lst1 na lst2. Nga kuti mwacita ukushininkisha ifitambi pakati ka lst1 na lst2 pa kulenga ifitambi fyonse ifya lst1 ukuba ifya nsobelo, mubweshe ""EE"". Nga tefyo, mubweshe ""NO"". Ku ca kumwenako: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""EE"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Cene caishibikwa ukuti intambi sha kushininkisha shikekala ishabula akabeya. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,bem_Latn,python,"
def histogram(test):
    """"""Nga ca kuti mwasanga intambo ya makalata ayaleimininako ifilembo ifyaleimininako ifilembo ifyaleimininako ifilembo ifyaleimininako ifilembo ifyaleimininako ifilembo ifyaleimininako ifilembo ifyaleimininako ifilembo ifyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilembo fyaleimininako ifilemininako ifilembo fyaleimininako ifileminiko ifimininako ifyebo fyaleimininako ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo ifyamo if""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,bem_Latn,python,"
def reverse_delete(s,c):
    """"""Ifya kucita Twapeelwa intambo shibili s na c, ufwile ukufumya ifimpashanya fyonse muli s ifilingene ku fimpashanya fyonse muli c elyo ukulolesha nga ca kuti intambo yafumamo ya palindrome. Intambo ileitwa palindrome nga yalabelenga cimo cine kunuma na kunuma. Mufwile ukubwelela tuple iikwete intambo yafumamo na Cine/Cilubo pa kupima. Icilangililo ca s = ""abcde"", c = ""ae"", icikafumamo cifwile ukuba ('bcd',Cilubo) Pa s = ""abcdef"", c = ""b"" icikafumamo cifwile ukuba ('acdef',Cilubo) Pa s = ""abcdedcba"", c = ""ab"", icikafumamo cifwile ukuba ('cdedc',Cishinka)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,bem_Latn,python,"
def odd_count(lst):
    """"""Nga mwapeelwa ulubatisho, umo mutande onse waba fye na manambala, mubweshe ulubatisho. Iciputulwa i cila ciputulwa ca output cifwile ukuba "" impendwa ya nsobelo mu mutande i wa input. "" umo i yonse ifwile ukwabulwa impendwa ya nsobelo mu mutande i'th wa input. >>> odd_count['1234567']) ["" impendwa ya nsobelo 4n mu mutande 4 wa 4nput.""] >>> odd_count['3',""111111""]) ["" impendwa ya nsobelo 1n mu mutande 1 wa 1nput. "", "" impendwa ya nsobelo 8n mu mutande 8 wa 8nput. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,bem_Latn,python,"
def minSubArraySum(nums):
    """"""Nga mwapeelwa intungulushi ya intungulushi sha nsendwa, sangeni impendwa ya nsendwa ishili iya fye.""""""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,bem_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Ifyakubomfya: Icipinda ca buuta: [[0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Icipinda ca buuta: 6 Icipinda ca buuta: [[0,0,1,1], [0,0,0,0], [1,1,1,1]] bucket_capacity: 2 Icipinda ca buuta: 5 Icipinda ca buuta: [[0,0,0], [0,0,0]] bucket_capacity: 5 Icipinda ca buuta: 5 Icipinda ca buuta: 0 * 0 * 1 * 1 * Icipinda ca buuta: 1 * 1 * 1 * 1 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 11 * 10 * 11 * 11 * 11 * 11 * 11 * 12 * 12 * 13 * 13 * 14 * 15 * 15 * 15 * 15 * 16 * 16 * 17 * 18 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 20 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 21 * 22 * 21 * 22 * 21 * 21 * 21 * 21 * 21 * 21 * 22 * 21 * 21 * 21 * 21 * 21 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 22 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24 * 24""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,bem_Latn,python,"
def sort_array(arr):
    """"""Muli ici Kata, mufwile ukuputula intendwa sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo sha nsoselo""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,bem_Latn,python,"
def select_words(s, n):
    """"""Nga ca kuti mwasangile string s ne namba ya n, mwapeelwa umulimo wa kubomfya function iya kubwesesha amashiwi yonse ukufuma mu string s ayali na n, pakuti aya mashiwi yalemoneka mu string s. Nga string s yali fye, ninshi function ifwile ukubwesesha list iyabula amashiwi. Moneni: kuti mwamona kwati string ya input yalikwata fye ifilembo ne space. Ifya kumwenako: select_words (((""Mary had a little lamb"", 4) ==> [""little""] select_words (((""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words"" (((simple white space"", 2) ==> [] select_words (((""Hello world"", 4) ==> [""world""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,bem_Latn,python,"
def get_closest_vowel(word):
    """"""Ifwe twapeelwa ishiwi. Umulimo wenu kusanga vowel iyapalama iyaiminina pakati ka ma consonant yabili ukufuma ku kulyo kwa shiwi (case sensitive). Ama vowel ya pa kutendeka na pa mpela tayabalwa. Iseni intambo iyabula ifikope nga tamusangile vowel iyafikapo. Kuti mwamona ukuti intambo iilepeelwe yakwata fye inambala ya ciNgeleshi. Icilangililo: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,bem_Latn,python,"
def match_parens(lst):
    '''Ifyabupe fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipande fyamu cipamu cipande fyamu cipamu cipamu cipamu cipamu cipamu cipamu cipamu cipamu cipamu'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,bem_Latn,python,"
def maximum(arr, k):
    """"""Nga mwapeelwa intendwa ya intulo arr na intendwa ya positive k, mubweshe ilyashi lyapampamikwa ilyabutali bwa k ne namba ishingi mu arr. Icilangililo1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Icilangililo2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Icilangililo3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Icikomo: 1. ubutali bwa ntambo bukaba mu ciputulwa ca [1, 1000]. 2. ifyaba mu ntambo fikaba mu ciputulwa ca [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,bem_Latn,python,"
def solution(lst):
    """"""Nga mwapeelwa intendwa ishili sha fye, mubweshe impendwa ya fintu fyonse ifyabula ukupalana ifyaba mu cifulo cimo.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,bem_Latn,python,"
def add_elements(arr, k):
    """"""Nga ca kuti kuli intulo ya nsangulo ishili sha fye iya intendwa ishili sha cine arr na intendwa ishili sha cine k, shila ishibwesesha intulo ya nsangulo ishili na manambala yabili ukufuma ku nsangulo sha ntanshi k isha arr. Icilangililo: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,bem_Latn,python,"
def get_odd_collatz(n):
    """"""Nga ca kuti inambala ya n yalikwata icishinka, isubilo lya kuti n, lyali lya kusenda mu nshila ya kutantika. Icipimo ca Collatz ni cipimo mu masambililo ya nsamushi icilanda pa kukonkana ukwalondololwa ngefi: kutendeka ne cipimo conse icakwata icishinka n. Lyene icipimo conse cafuma mu cipimo ca ntanshi ngefi: nga icipimo ca ntanshi cili icapalana, icipimo cakonkapo cili ni hafu ya cipimo ca ntanshi. Nga icipimo ca ntanshi cili icapalana, icipimo cakonkapo cili ni 3 imiku ya cipimo ca ntanshi pamo na 1. Icishinka ca kuti nangu icipimo ca n cili shani, ilyashi lyonse likafika pa 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,bem_Latn,python,"
def valid_date(date):
    """"""Mufwile ukulemba ifilundwa ifinga sambilila inshiku nga shalifikapo, elyo no kubwesesha true nga inshiku shalifikapo, nga tafilifikapo, ninshi false. Inshiku shifikapo nga ca kuti fyonse ifyalakonkapo fyafikilishiwa: 1. inshiku shalifikapo tafyali fyabula. 2. inshiku shalifikapo tafyacilamo 1 nangu ukucilapo pa nshiku 31 mu myeshi 1,3,5,7,8,10,12. Imiku ya nshiku tailipo yacilamo 1 nangu ukucilamo pa nshiku 30 mu myeshi 4,6,9,11. Imiku tailipo yacilamo 1 nangu ukucilamo pa nshiku 29 mu mweshi 2. Imyeshi tailingile ukuba yacilamo 1 nangu ukucilamo pa 12. Imiku ifwile ukuba mu cipasho ca: mm-dd-yyyy, pamo nga: valid_date (('03-11-2000') => true_date ((15-01-2012') => false_date (('04-01-2040') => false_date ((06-04-2020') => true_date (((06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,bem_Latn,python,"
def split_words(txt):
    '''Nga mwapeelwa amashiwi, mubweshe amashiwi ayali mu ciputulwa ca nsoselo, nga tamwaba insoselo mu ciputulwa mufwile ukufumya mu nsoselo ',' nga tamwaba insoselo mufwile ukufumya mu nsoselo impendwa ya makalata yacicepesha mu ciputulwa ca nsoselo, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Ifya kumwenako split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words"" ((abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,bem_Latn,python,"
def is_sorted(lst):
    '''Ifwe twapeelwa uluhlu lwa manambala, ukubwelela nangu iyo baipangila mu kukonkana kwa kutanta. Nga uluhlu lwalikwata ukucila pa 1 icapinda ca namba imo, ukubwelela Fye. Tutile takuli amanambala ya bufi kabili fye intendwa. Ifilangililo fya is_sorted ((([5]) â -> Fye cine is_sorted (([1, 2, 3, 4, 5, 6]) â -> Fye cine is_sorted (([1, 2, 3, 4, 5, 6]) â -> Fye cine is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Fye cine is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Fye cine is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Fye cine is_sorted (([1, 2, 2, 2, 3, 3, 4]) â -> Fye cine is_sorted (([1, 2, 2, 2, 3, 4 -> Fye cine ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,bem_Latn,python,"
def intersection(interval1, interval2):
    """"""Ifyakutumpaika fyakonkapo fyakonkapo fyasalwa pa nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya nsoselo ya ns""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,bem_Latn,python,"
def prod_signs(arr):
    """"""Iwe walipeelwa intungulushi ya intungulushi sha ciputulwa kabili iwe uli no kubwelela ku ciputulwa ca ntungulushi sha ciputulwa sha ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa ca ciputulwa.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,bem_Latn,python,"
def minPath(grid, k):
    """"""Nga ca kuti muli gridi muli intampulo N na kololo N (N >= 2) na k, ninshi cila kaselo ka gridi kali na mutengo. Inambala yonse iyaba mu mulongo [1, N * N] ukubikapo ileba fye umuku umo mu nsandesande sha gridi. Mufwile ukusanga inshila ya kupiminako iya butali bwa k mu gridi. Kuti mwatendeka ukufuma mu nsandesande yonse, kabili mu ntampulo shonse kuti mwaya ku nsandesande ishili mupepi, mu mashiwi yambi, kuti mwaya ku nsandesande ishili mu lubali lumo na imwe. Mwalishiba ukuti inshila ya butali bwa k ilepilibula ukupita mu nsandesande sha k (tashilingana). MULINGILE UKUFUKA mu gridi. Inshila A (ya butali bwa k) kuti yamonwa ukuba iyacepa ukucila inshila B (ya butali bwa k) nga panuma ya kupanga amalumbo ya mafunde ya mafunde ya mafunde pa nsandesande sha A na B (letwaita shene l_th na l_j), inshila ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde ya mafunde aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya aya""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,bem_Latn,python,"
def tri(n):
    """"""Abantu bonse balishiba Fibonacci sequence, iyo basambilile sana ku basambilila insamushi mu myaka ya mwanda wa myaka iyapita. Lelo ico abantu bashaishiba ni Tribonacci sequence. Tribonacci sequence ilondololwa ukupitila mu kubwekesha: tri(1) = 3 tri(n) = 1 + n / 2, nga n yaba even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), nga n yaba odd. Ku ca kumwenako: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Mwapeelwa inambala ya ntendwa ishili ya negative, mufwile ukubwelela lunshi lunshi lwa ntendwa sha ntendwa sha ntendwa sha ntendwa sha Tribonacci. Ifya kumwenako: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,bem_Latn,python,"
def digits(n):
    """"""Nga ca kuti inambala ya n yalipwa, shibwekesheni mu cipimo ca nsenda shabuuta. Shibwekesheni 0 nga insenda shonse shabuuta. Ku ca kumwenako: insenda ((1) == 1 insenda ((4) == 0 insenda ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,bem_Latn,python,"
def is_nested(string):
    '''Pangeni ifilundwa ifibomfya intambo nga ifisendamo fye ifikakilo fya sikweya. Ifilundwa fifwile ukubwelela fye true nga kabili nga fye kuli ifikakilo ifyafikapo ifyo ifyacitwa na at least one bracket in the subsequence is nested. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,bem_Latn,python,"

def sum_squares(lst):
    """"""Ifya kumwenako: Pa lst = [1,2,3] icikope cifwile ukuba 14 Pa lst = [1,4,9] icikope cifwile ukuba 98 Pa lst = [1,3,5,7] icikope cifwile ukuba 84 Pa lst = [1.4,4.2,0] icikope cifwile ukuba 29 Pa lst = [-2.4,1,1] icikope cifwile ukuba 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,bem_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Ukupanga function iyo ibwelela true nga ca kuti insondwe ya kulekelesha ya mutande wa fikomo fya ci alufabeti kabili te ciputulwa ca shiwi, na false nga tacili ifyo. Moneni: ""shiwi"" libumba lya fikomo ifyalekana na space. Ifilangililo: check_if_last_char_is_a_letter"" ""apple pie"") â -> False check_if_last_char_is_a_letter"" ""apple pi e"") â -> True check_if_last_char_is_a_letter"" ""apple pi e"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,bem_Latn,python,"
def can_arrange(arr):
    """"""Ifwe kuti twalemba ifilundwa ifingaba ifyabulamo ifishinka ifingaba ifyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili fyabulamo ifishinka ifingaba ifishili ifishinka ifingaba ifishili ifishinka ifingaba ifishinka ifingaba ifishinka ifingaba ifishinka ifishinka ifingaba ifishinka ifishinka ifingaba ifishinka ifishinka ifingaba ifishinka ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba ifingaba""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,bem_Latn,python,"
def largest_smallest_integers(lst):
    '''Ifyabupe: ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutila ifyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakutiyakuti'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,bem_Latn,python,"
def compare_one(a, b):
    """"""Ifya kutantika ifikumine ku ciputulwa ca nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangulo ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano ya nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano nsangano""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,bem_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Moneni nga inambala iilepeelwa n kuti yalembwa nge cipo ca namba 4 ishili ishili ishili ishikali. Icakumwenako is_equal_to_sum_even ((4) == Fya bufi is_equal_to_sum_even ((6) == Fya bufi is_equal_to_sum_even ((8) == Ca cine """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,bem_Latn,python,"
def special_factorial(n):
    """"""Ifyabupe fya Brazil fipilibulwa ngefi: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! uko n > 0 Ku ca kumwenako: >>> special_factorial ((4) 288 Umulimo ukapokelela integer nga input kabili ufwile ukubwelela ificitwa fyabupe fya iyi integer. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,bem_Latn,python,"
def fix_spaces(text):
    """"""_ Icilangililo-3i mwasangapo amashiwi ayali mu cipande, mulebikamo ifisobelo, kabili nga ca kuti mu cipande mwaba ifisobelo ukucila pali 2 ifya kukonkana, mulebikamo ifisobelo fyonse ifya kukonkana.""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,bem_Latn,python,"
def file_name_check(file_name):
    """"""Pangeni ifilundwa ifibomfya insamushi iyimininako ishina lya file, kabili nga lyali ilyalungama lilabwelela 'Ee', nga lyali ilyalungama lilabwelela 'Awe'. Ishina lya file lilalinga ukuba ilyalungama nga na lintu fye ifi fintu fyonse fyakonkanishiwa: - Takulingile ukuba ukucila pa manambala yatatu ('0'-'9') mwi shina lya file. - Ishina lya file lili na dot fye umo '.' - Umutande wa ntambo ilyo ishili intambo taulingile ukuba uwabula, kabili ulingile ukutendeka ne cilembo ca mu ciLatin alphapet ('a'-'z' na 'A'-Z'). - Umutande wa ntambo panuma ya dot ulingile ukuba umo pali ifi: ['txt', 'exe', 'lld'] Ifilangililo: file_name_check""{example.txt.t"") # => 'Yes' file_name_check""{example.dll.1} => 'No' (#' (ishina lilingile ukutendeka ne ciLatin alphapet)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,bem_Latn,python,"


def sum_squares(lst):
    """""""" Iyi function ikapoka ulufulo lwa integer. Ku ma entries yonse muli ulupapulo, uyu function ikapoka integer entry nga index yakwe ni multiple ya 3 elyo ikacita cube integer entry nga index yakwe ni multiple ya 4 elyo te multiple ya 3. uyu function taikalula ama entries muli ulupapulo ayo ama index tayali multiple ya 3 nangu 4. uyu function elyo ikabwelela impendwa ya ma entries yonse. Amalyashi: Pa lst = [1,2,3] icapoke cifwile ukuba 6 Pa lst = [] icapoke cifwile ukuba 0 Pa lst = [-1,-5,2,-1,-5] icapoke cifwile ukuba -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,bem_Latn,python,"
def words_in_sentence(sentence):
    """"""Mwapeelwa intambo iyimininako insoselo, mu nsoselo mwaliba amashiwi ayalekanishiwa ne cibeela, kabili mufwile ukubwelela intambo iyikwete amashiwi ya mu nsoselo ya ntendekelo, ayo ubutali bwaiko bwaba amanambala ya ntanshi, umusango wa mashiwi mu ntambo ipya ufwile ukuba uwapalana ne wa ntendekelo. Icilangililo1: Input: sentence = ""This is a test"" Output: ""is"" Icilangililo2: Input: sentence = ""let go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,bem_Latn,python,"
def simplify(x, n):
    """"""Umulimo wenu kupekanya functionality iyalyefya amashiwi x * n. Umulimo ulebwelela true nga x * n yapima ku cipendo conse elyo false nga tacipitilepo. x na n, ni string representation ya cipande, kabili na ma format ayalakonkapo, <numerator>/<denominator> uko onse numerator na denominator ni positive integer. Kuti mwasumina ukuti x na n ni fractions, kabili tafyaba na zero nga denominator. simplify ""1/5"", ""5/1"") = True simplify ""1/6"", ""2/1"") = False simplify ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,bem_Latn,python,"
def order_by_points(nums):
    """"""Lembeni ifilundwa ifibombela pamo ifyalembwa mu cipande ca ntulo ukulingana ne mpendwa ya ntulo shabo. Moneni: nga kuli intulo ishingi ishakwata impendwa ya ntulo shabo, shipekanyeni ukulingana ne mpendwa ya ntulo shabo mu cipande ca ntulo. Ku ca kumwenako: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,bem_Latn,python,"
def specialFilter(nums):
    """"""Lembeni ifilundwa ifibomfya amanambala ya mu mulongo nga ifya kuibikamo kabili ifibomfya amanambala yacibili ayacilapo pali 10 kabili ayacibili ayacibili ayacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacibili yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu yacitatu""""""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,bem_Latn,python,"
def get_max_triples(n):
    """"""Ifwe twapeelwa integer iyisuma n. Tufwile ukupanga integer array a iya butali n. Pa i (1 â‰¤ i â‰¤ n), umutengo wa a[i] = i * i - i + 1. Iseni impendwa ya triples (a[i], a[j], a[k]) ya a apo i < j < k, na a[i] + a[j] + a[k] ni multiples ya 3. Icilangililo: Input: n = 5 Output: 1 Ukulondolola: a = [1, 3, 7, 13, 21] Icipimo fye ica triples ca (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,bem_Latn,python,"
def bf(planet1, planet2):
    '''Pali ifisonde 8 mu bwikashi bwesu ubwa kasuba: icipalamisha ku kasuba ni Mercury, icikonkelepo ni Venus, elyo icalo, Mars, Jupiter, Saturn, Uranus, Neptune. Lembeni umulimo uubomfya amashina ya fibumbwa fibili nga insamushi planet1 na planet2. Umulimo ulingile ukubwelela isumbu lya fibumbwa fyonse ifikwete ifisonde fyonse ifikwete ifisonde fyabo pakati ka orbit ya planet1 na orbit ya planet2, ifyaputulwa ukulingana ne kufula kuli kasuba. Umulimo ulingile ukubwelela isumbu lya fibumbwa fyonse ifishabapo nga cakuti planet1 nangu planet2 tafili amashina ya fibumbwa aya cine. Ifilangililo bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Icalo"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Icalo"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,bem_Latn,python,"
def sorted_list_sum(lst):
    """"""Lembeni ifilundwa ifingapokelela intambo nga parameter, ukufumya intambo ishitali, no kubwesesha intambo ishapangwa mu nshila. Inshiku shonse intambo shilalembwa, te namba iyo, kabili kuti mwafwala ifilundwa ifyapalana. Inshiku sha kutantika shifwile ukuba mu nshila ya kutantika mu butali bwa mashiwi yonse, kabili mufwile ukubwelela intambo ishapangwa mu nshila ya kutantika. Nga amashiwi yabili yalipalana, mufwile ukulemba intambo mu nshila ya alfabeti. Ifilundwa fifwile ukubwelela intambo mu nshila ya kutantika. Kuti mwamona ukuti amashiwi yonse yalipalana. Ku ca kumwenako: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,bem_Latn,python,"
def x_or_y(n, x, y):
    """"""Programu iya-anguka iyo ifwile ukubwelela umutengo wa x nga n ni prime number kabili ifwile ukubwelela umutengo wa y nga iyoo. Amalyashi: pa x_or_y ((7, 34, 12) == 34 pa x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,bem_Latn,python,"
def double_the_difference(lst):
    '''Ifyabupeelwa mu mulongo wa namba, shila isenda mu cipande ca namba sha mu mulongo ishishaba isenda. Ukukanaishiba amanambala ayashili yabufi nangu ayashili intulo. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Nga mu mulongo wa fyabupe fyabulamo, shila isenda 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,bem_Latn,python,"
def compare(game,guess):
    """"""Ndemona bonse twaibukisha ifyo umuntu omfwa nga ca kuti asanga icapwishishe icintu ico alelolela. Ifyo umuntu omfwa ne fyo atontonkanya pali ilya nshita kuti cawama ukufilemba no kufilinganya. Umulimo wenu kwishiba ngacakuti umuntu alilingile bwino ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe ifyapwishishe. Mwapeelwa intambo shibili isha fipimo ne fya kutontonkanya ifyabutali bumo bwine, umo umo umo, cila cishibilo cilelanga ukupalana. Mubweshe intambo ya butali bumo bwine iyilondolola ifyo cila kutontonkanya kwapwishishe. Ngacakuti balipwishishe bwino, ici cipimo ni 0, e lyo nga tefyo, ici cipimo ni bupusano ubwapwililika pakati ka kutontonkanya no kupwishisha. icilangililo: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,3,3],[0,0,4,4,4,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,bem_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Iciputulwa ca CAP - SM. Mulingile ukusanga iciputulwa ica maka kabili mufwile ukubwelela iciputulwa ca ClassName.StrongestExtensionName. Nga kuli ifiputulwa fibili ifya maka yamo yene, mulingile ukusala icikabalilapo mu ciputulwa. Ku ca kumwenako, nga mwapeelwa ""Slices"" nge ciputulwa ne ciputulwa ca fiputulwa: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ninshi mulingile ukubwelela 'Slices.SEviSliCes' 'mySviSliNGCes'') pantu iciputulwa ca ciputulwa ca 'AA_Beats' (Iciputulwa ca 'AA_Beats'), e ciputulwa ca maka sana.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,bem_Latn,python,"
def cycpattern_check(a , b):
    """"""Mwapeelwa amashiwi yabili. Mufwile ukubwelela true nga cakutila ishiwi lya cibili nangu ukupilibuka kwa lyashi limo kuli substring mu shiwi lya ntanshi cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,bem_Latn,python,"
def even_odd_count(num):
    """"""Ifwe twapeelwa integer. return a tuple that has the number of even and odd digits respectively. Example: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,bem_Latn,python,"
def int_to_mini_roman(number):
    """"""Nga mwapeelwa integer iya positive, fumya intendwa ya ciRoma nga string, no kubwesesha mu lowercase.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,bem_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Ifisansangu fyaba mu mpelo shabutali bwa mbali shitatu. Shipya ifisansangu fyabutali ifilengele insangu shabutali, shipya ifisansangu fyabutali ifilengele insangu shabutali. Insangu shabutali shabutali shabutali ni insangu umo inshila imo yabutali bwabutali bwabutali bwabutali nangu 90 degrees. Icilangililo: inshila yabutali iyabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali bwabutali'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,bem_Latn,python,"
def find_max(words):
    """"""Lembeni ifilundwa ifingapokelela ifikope fya ntambo. Mu ntambo mwaba amashiwi ayalekanalekana. Isubilo lyashi lya ntambo ya ntambo ya ntambo. Nga intambo sha ntambo shafula, isubilo lya ntambo ya ntambo ya ntambo ya ntambo, isubilo lya ntambo ya ntambo ya ntambo ya ntambo ya ntambo.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,bem_Latn,python,"
def eat(number, need, remaining):
    """"""Iwe uli kanoko uwa nsala, kabili uli kale na kulya inambala imo iya kaloti, lelo nomba iwe ulekabila ukulya kaloti na yambi pa kupwisha ifya kulya fya bushiku. iwe ufwile ukubwelela intambo ya [ impendwa yonse iya kaloti ukulya panuma ya fya kulya fyobe, impendwa ya kaloti ishaleba panuma ya fya kulya fyobe ] nga tapali kaloti ishashalako iyalinga, iwe ukalya kaloti onse ashalako, lelo iwe ukalabe nsala. Icilangililo: * ukulya ((5, 6, 10) -> [11, 4] * ukulya ((4, 8, 9) -> [12, 1] * ukulya ((1, 10, 10) -> [11, 0] * ukulya ((2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need: integer the number of carrots that you need to eat. @remaining: integer the number of remaining carrots that exist in stock Constrain: * 0= <= 0 * 1000 <= 0 * 1000: <= 0 = 1000""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,bem_Latn,python,"
def do_algebra(operator, operand):
    """"""Ifya kubomfya ifyakuti: Ukulunda (+) Ukufumya (-)) Ukubwekeshapo (*) Ukulekanya (-)) Ukulunda (**) Icakumwenako: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Icipimo: Ubutali bwa mutande wa fya kubomfya bwaba fye nga bwa mutande wa fya kubomfya ukufumyapo cimo. Icipimo ca mutande wa fya kubomfya fyacilamo. Icipimo ca mutande wa fya kubomfya ukufumyapo cimo, ne cipimo ca mutande wa fya kubomfya ukufumyapo cimo. Icipimo ca mutande wa fya kubomfya ukufumyapo cimo, ne cipimo ca mutande wa fya kubomfya fibili.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,bem_Latn,python,"
def solve(s):
    """"""Ifwe twapeelwa insamushi s. nga s[i] ni kalata, isubilo lya ciputulwa caiko ukufuma pa nshi ukuya pa mulu nangu ukupilibuka, nga tefyo, isubilo lya ciputulwa lifwile ukushala ifyo lyali. Nga insamushi taikwete inambala, isubilo lya nsamushi. Umulimo ufwile ukubwelela insamushi yafumine. Ifilangililo solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,bem_Latn,python,"
def string_to_md5(text):
    """"""Nga ca kuti 'text' ni string, bweshako md5 hash equivalent string. Nga 'text' ni string, bweshako None. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,bem_Latn,python,"
def generate_integers(a, b):
    """"""Nga ca kuti twakwata intendwa shibili ishakosa a na b, shibwekeshe mu kukonkana kwa kutantala. Ku ca kumwenako: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
