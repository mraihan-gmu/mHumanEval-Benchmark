task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,mya_Mymr,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""ပေးထားသော နံပါတ်စာရင်းတွင် ပေးထားသော နံပါတ်ထက် ပိုမိုနီးစပ်သော နံပါတ်နှစ်ခုရှိမရှိစစ်ဆေးပါ။ ဥပမာ: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) မှားယွင်း >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) မှန်ကန်သည် """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,mya_Mymr,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ဤ function ကို input သည် nested ကို parentheses များ၏အုပ်စုပေါင်းများစွာပါဝင်သော string တစ်ခုဖြစ်သည်။သင်၏ရည်မှန်းချက်မှာအခြားအုပ်စုများသို့ခွဲခြားပြီး၎င်းတို့၏စာရင်းကိုပြန်ပေးရန်ဖြစ်သည်။သီးခြားအုပ်စုများကညီမျှသည် (ဖွင့်ထားသော brace တစ်ခုစီကိုမှန်ကန်စွာပိတ်ထားသည်) နှင့်အချင်းချင်းတွင် nested မဟုတ်ပါ။အဝင် string တွင်မည်သည့်နေရာလွတ်များကိုမဆိုလျစ်လျူရှုပါ။ဥပမာ: >>> separate_paren_groups' ((( ) (() (()))))))) ['() ', '(()) ', '((()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,mya_Mymr,python,"

def truncate_number(number: float) -> float:
    """"""အပေါင်းကိန်းတစ်ခု၏ အပေါင်းကိန်းအပိုင်းကို ဖြုတ်ယူနိုင်သည်။ ဥပမာ: >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,mya_Mymr,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""သင်ဟာ ၀ ဘဏ်စာရင်းတစ်ခုပေါ်က ၀ ဘဏ်စာရင်းနဲ့ စတင်တဲ့ ငွေသွင်းခြင်းနဲ့ ထုတ်ယူခြင်း လုပ်ငန်းစဉ်စာရင်းကို ရပါတယ်။ သင့်အလုပ်က ငွေစာရင်းရဲ့ အကြွေးဟာ ၀ အောက်ကို ကျသွားရင် ရှာဖွေဖို့ဖြစ်ပြီး အဲဒီအချိန်မှာ function က True ပြန်ပေးသင့်ပါတယ်။ မဟုတ်ရင် False ပြန်ပေးသင့်ပါတယ်။ ဥပမာ: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,mya_Mymr,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""ပေးထားသော input နံပါတ်များစာရင်းတစ်ခုအတွက်, ဤဒေတာစု၏အလယ်အလတ်ဝန်းကျင်၌ Mean Absolute Deviation ကိုတွက်ပါ။ Mean Absolute Deviation သည်ဒြပ်စင်တစ်ခုနှင့်ဗဟိုအမှတ်တစ်ခုအကြား ပျမ်းမျှအခြားနားမှုဖြစ်သည် (ဒီကိစ္စတွင်အလယ်အလတ်): MAD = ပျမ်းမျှ ☞ x - x_mean ☞ ဥပမာ: >>> mean_absolute_deviation ☞ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,mya_Mymr,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""input list ၏ဆက်တိုက် element နှစ်ခုစီအကြား ""delimiter"" နံပါတ်ကိုထည့်ပါ။ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,mya_Mymr,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ဤ function ကို input သည် အစုအဝေးတစ်ခုစီအတွက် ကွက်လပ်များဖြင့်ခွဲထားသော ကွင်းဆက် parentheses များအတွက် အုပ်စုပေါင်းများစွာကို ကိုယ်စားပြုသော string ဖြစ်သည်။ အုပ်စုတစ်ခုစီအတွက် ကွင်းဆက် parentheses များ၏ နက်ရှိုင်းဆုံးအဆင့်ကို output ပေးပါ။ ဥပမာ (() (()) တွင် အမြင့်ဆုံးကွင်းဆက်နှစ်ခုရှိပြီး ((())) တွင် သုံးခုရှိသည်။ >>> parse_nested_parens (('((()) ((())) () (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,mya_Mymr,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""ပေးထားသော substring ကိုပါဝင်သော string များ၏ input list ကို filter လုပ်ပါ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,mya_Mymr,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""ပေးထားသော integer စာရင်းတစ်ခုအတွက်, တစ်ခု စုပေါင်းခြင်းနှင့်စာရင်းတစ်ခုရှိ integer အားလုံး၏ product တစ်ခုပါဝင်သော tuple တစ်ခုကိုပြန်ပေးပါ။ အလွတ် sum သည် 0 နှင့်အလွတ် product သည် 1 နှင့်ညီမျှရမည်။ >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24)""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,mya_Mymr,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""ပေးထားသော integer စာရင်းမှ, အစဉ်လိုက်တွင်ပေးထားသောကာလအထိတွေ့ရှိခဲ့သော rolling maximum element ၏စာရင်းကိုဖန်တီးပါ။ >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,mya_Mymr,python,"

def is_palindrome(string: str) -> bool:
    """"""ပေးထားသော string တစ်ခုနှင့်စတင်သော အတိုဆုံး palindrome ကိုရှာပါ။ အယ်လ်ဂိုရစ်သမ်စိတ်ကူးက ရိုးရှင်းသည် - ပေးထားသော string ၏အရှည်ဆုံး postfix ကို palindrome ဖြစ်အောင်ရှာပါ။ - palindromic suffix ရှေ့မှ string prefix ၏ string reverse ကို string အဆုံးသို့ဆက်ပါ။ >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""string ကို palindrome ဖြစ်မဖြစ် စစ်ဆေးပါ။""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,mya_Mymr,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""input သည် 1s နှင့် 0s သာပါဝင်သော string a နှင့် b နှစ်ခုဖြစ်သည်။ ဤ input များပေါ်တွင် binary XOR ကိုလုပ်ဆောင်ပြီး string အဖြစ်ရလဒ်ကိုပြန်ပို့ပါ။ >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,mya_Mymr,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""string စာရင်းထဲက အရှည်ဆုံးကို ပြန်ပေးပါ။ တူညီတဲ့ အရှည်ရှိတဲ့ string များရှိရင် ပထမတစ်ခုကို ပြန်ပေးပါ။ အဝင်စာရင်းက ဗလာဖြစ်ရင် None ကို ပြန်ပေးပါ။ >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,mya_Mymr,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""နှစ်ခုလုံး၏ အကြီးမားဆုံး တူညီသော အပိုင်းကိန်း a နှင့် b ကို ပြန်ပေးသည် >>> အကြီးမားဆုံး_တူညီသော_ပိုင်းကိန်း ((၃, ၅) ၁ >>> အကြီးမားဆုံး_တူညီသော_ပိုင်းကိန်း ((၂၅, ၁၅) ၅)""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,mya_Mymr,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""input string ၏အတိုဆုံးမှအရှည်ဆုံးသို့အရင်ဆက်စပ်သော prefix အားလုံးကိုပြန်ပို့သောစာရင်း >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,mya_Mymr,python,"

def string_sequence(n: int) -> str:
    """"""၀ မှ n အထိ အပါအဝင် နေရာသတ်မှတ်ထားသော နံပါတ်များပါဝင်သော string ကို ပြန်ပေးသည်။ >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,mya_Mymr,python,"

def count_distinct_characters(string: str) -> int:
    """"""string တစ်ခုကိုပေးပြီးလျှင် ၎င်းသည်မည်မျှကွဲပြားသောစာလုံးများ (case နှင့်မဆိုင်) ကိုပါ ၀ င်သည်ကိုရှာဖွေပါ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,mya_Mymr,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""ဤ function ကို input ကိုအထူး ASCII ဖွဲ့စည်းပုံမှာဂီတသံစဉ်ကိုကိုယ်စားပြုသောကြိုးဖြစ်ပါတယ်. သင့်တာဝန်သည်များစွာသော beat ကိုလိုက်လျောညီထွေ integer ကိုကြိုးစာရင်း parse ရန်ဖြစ်ပါတယ်: 'o' မှတ်ချက်, နောက်ဆုံးလေးခုန် 'o' ၏အခမဲ့ - မှတ်ချက်တစ်ဝက်, နောက်ဆုံးနှစ်ခုန် 'o' ၏ - quater မှတ်ချက်, နောက်ဆုံးတစ်ခုန် >>> parse_music '(o' ၏အခမဲ့ .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,mya_Mymr,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""မူလ string ထဲမှာ ပေးထားတဲ့ substring ကို ဘယ်နှစ်ကြိမ် တွေ့နိုင်လဲဆိုတာ ရှာပါ။ ထပ်ကျော့နေတဲ့ ကိစ္စတွေကို ရေတွက်ပါ။ >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,mya_Mymr,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""input သည် 'သုည' မှ 'ကိုး' အထိ နံပါတ်များ၏ နေရာသတ်မှတ်ထားသော string ဖြစ်သည်။ မှန်ကန်သောရွေးချယ်မှုများမှာ 'သုည', 'တစ်', 'နှစ်', 'သုံး', 'လေး', 'ငါး', 'ခြောက်', 'ခုနစ်', 'ရှစ်' နှင့် 'ကိုး' ဖြစ်သည်။ နံပါတ်များကိုအသေးဆုံးမှ အကြီးဆုံးသို့စီစဉ်ထားသော string ကိုပြန်ပို့သည် >>> sort_numbers ((('သုံးတစ်ငါး') 'တစ် သုံးငါး' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,mya_Mymr,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""ပေးထားသော နံပါတ်စာရင်း (အနည်းဆုံး နှစ်ခု) မှ တစ်ခုနှင့်တစ်ခုအနီးစပ်ဆုံး နံပါတ်နှစ်ခုကို ရွေးချယ်ပြီးပြန်ပို့ပြီး (အငယ်ဆုံး နံပါတ်၊ အကြီးဆုံး နံပါတ်) ကို အစီအစဉ်အတိုင်းပြန်ပို့ပါ။ >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,mya_Mymr,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""နံပါတ်စာရင်း (အနည်းဆုံး အစိတ်အပိုင်းနှစ်ခု) ကိုပေးထားလျှင် အငယ်ဆုံးကိန်းသည် ၀ ဖြစ်လာပြီး အကြီးဆုံးသည် ၁ ဖြစ်လာသည့်လိုင်းနရီပြောင်းလဲမှုကို ထိုစာရင်းသို့ သုံးပါ။ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,mya_Mymr,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""filter ပေးထားသော Python တန်ဖိုးများ၏စာရင်းကို ဖြောင့်ကိန်းများအတွက်သာ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,mya_Mymr,python,"

def strlen(string: str) -> int:
    """"""ပေးထားသော string ၏ return length ကို >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,mya_Mymr,python,"

def largest_divisor(n: int) -> int:
    """"""ပေးထားတဲ့ n အတွက် n ထက် ပိုသေးတဲ့ n ကို ညီမျှစွာ ပိုင်းခြားနိုင်တဲ့ အကြီးဆုံးကိန်းကို ရှာပါ။ >>> အကြီးဆုံး_ပိုင်းခြားသူ (_BAR_) (၁၅) ၅""""""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,mya_Mymr,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""ပေးထားသော integer ၏ prime factor များ၏စာရင်းကိုအသေးဆုံးမှအကြီးဆုံးသို့စီစဉ်၍ပြန်ပေးပါ။ အချက်တစ်ခုစီကိုအချက်ခွဲခြင်းတွင်ပေါ်လာသည့်အကြိမ်ပေါင်းနှင့်ညီမျှသောအရေအတွက်ကိုစာရင်းသွင်းရပါမည်။ အဝင်အရေအတွက်သည်အချက်များအားလုံး၏ product နှင့်ညီမျှရမည် >>> factorization ((8) [2, 2, 2] >>> factorization ((25) [5, 5] >>> factorization ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,mya_Mymr,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""ဖြောင့်ကိန်းစာရင်းတစ်ခုမှတစ်ကြိမ်ထက်ပိုပြီးပေါ်လာသော element များအားလုံးကိုဖယ်ရှားပါ။ အဝင် element များ၏အစဉ်ကို input ထဲကအတိုင်းဆက်လက်ထားပါ။ >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,mya_Mymr,python,"

def flip_case(string: str) -> str:
    """"""string တစ်ခုအတွက် စာလုံးကြီးတွေကို အက္ခရာမကြီးတွေအဖြစ် ပြောင်းလိုက်ပါ >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,mya_Mymr,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""string တစ်ခုတည်းအဖြစ် string များကိုချိတ်ဆက်ထားသောစာရင်း >>> concatenate (([]) '' >>> concatenate ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,mya_Mymr,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""ပေးထားသော ရှေ့ဆက်ပုဒ်ဖြင့် စတင်သော string များအတွက်သာ input list ကို စစ်ပါ။ >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,mya_Mymr,python,"

def get_positive(l: list):
    """"""စာရင်းထဲက အပေါင်းကိန်းများကိုသာ ပြန်ပေးပါ။ >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,mya_Mymr,python,"

def is_prime(n):
    """"""ပေးထားသောကိန်းသည် ပရိုင်းမစ်ဖြစ်လျှင် မှန်သောကိန်းကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် မှားသောကိန်းကိုပြန်ပေးသည်။ >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,mya_Mymr,python,"import math


def poly(xs: list, x: float):
    """"""find_zero သည် အဖြေကို အာမခံပေးသောကြောင့် အပေါင်းကိန်းများနှင့် အကြီးဆုံး သုညမဟုတ်သော အပေါင်းကိန်းများသာရှိသော xs ကိုသာ စာရင်းပြုစုသည်။ >>> round ((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""xs ကိုသြဇာကိန်း xs ရှိသော polynomial ကို xs အမှတ်တွင်တွက်ချက်သည် xs[0] + xs [1] * x + xs [1] * x ^ 2 + .... xs [n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,mya_Mymr,python,"

def sort_third(l: list):
    """"""ဤလုပ်ဆောင်ချက်သည် l စာရင်းကိုယူပြီး l' သည် l နှင့်တူညီသော l' သည်သုံးခုဖြင့်ခွဲခြားနိုင်သောညွှန်းကိန်းများတွင်တူညီပြီးသုံးခုဖြင့်ခွဲခြားနိုင်သောညွှန်းကိန်းများတွင်၎င်း၏တန်ဖိုးများသည် l ၏တန်ဖိုးများနှင့်ညီသော်လည်းစီစဉ်ထားသည်။ >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,mya_Mymr,python,"

def unique(l: list):
    """"""စာရင်းတစ်ခုထဲကရွေးထားတဲ့ ထူးခြားတဲ့ element တွေကိုပြန်ပေးသည် >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,mya_Mymr,python,"

def max_element(l: list):
    """"""စာရင်းထဲက အများဆုံး element ကို ပြန်ပေးပါ။ >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,mya_Mymr,python,"

def fizz_buzz(n: int):
    """"""11 သို့မဟုတ် 13 ဖြင့်စားနိုင်သော n ထက်နည်းသော integer များတွင် 7 သည်ပေါ်လာသော အကြိမ်ရေကို ပြန်ပေးသည်။ >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,mya_Mymr,python,"

def sort_even(l: list):
    """"""ဤလုပ်ဆောင်ချက်သည် l ကိုယူပြီး l' သည် l နှင့်တူညီသော l' ကို odd index များတွင်ပြန်ပေးသည်၊ ယင်း၏တန်ဖိုးများသည် l ၏ even index များ၏တန်ဖိုးများနှင့်ညီသော်လည်းရွေးချယ်ထားသည်။ >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,mya_Mymr,python,"

def encode_cyclic(s: str):
    """"""encode_cyclic function ဖြင့် ကုဒ်သွင်းထားသော string ကို input အဖြစ်ယူသည်။ decoded string ကိုပြန်ပေးသည်။ """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """""" ကဒ်ကို သုံးလုံးတွဲ စာလုံးစုပြီး ပြန်ပေးတယ်""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,mya_Mymr,python,"

def prime_fib(n: int):
    """"""prime_fib သည် ဖီဘိုနာချီကိန်းဖြစ်သော n-မြောက်ကိန်းကိုပြန်ပေးပြီး ယင်းသည်လည်း ပရိုင်းမစ်ကိန်းဖြစ်သည်။ >>> prime_fib ((1) 2) >>> prime_fib ((2) 3) >>> prime_fib ((3) 5) >>> prime_fib ((4) 13) >>> prime_fib ((5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,mya_Mymr,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero သည် ကိန်းပြည့်စာရင်းကို အဝင်အဖြစ် ယူသည်။ စာရင်းတွင် သုညသို့ ပေါင်းထည့်သော သီးခြား အစိတ်အပိုင်း သုံးခုရှိပါက True ကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် False ကိုပြန်ပေးသည်။ >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,mya_Mymr,python,"

def car_race_collision(n: int):
    """"""ကား (n) စီးသည် ဘယ်မှ ညာသို့ မောင်းနှင်နေသည်၊ တစ်ပြိုင်နက်တွင် ကား (n) စီးသည် ညာမှ ဘယ်သို့ မောင်းနှင်နေသည်၊ ကားနှစ်စီးသည် အဝေးမှ စတင်ကာ ကားအားလုံးသည် တူညီသော အမြန်နှုန်းဖြင့် ရွေ့လျားနေသည်၊ ကားနှစ်စီးသည် ဘယ်မှ ညာသို့ ရွေ့လျားနေသော ကားသည် ညာမှ ဘယ်သို့ ရွေ့လျားနေသော ကားကို တိုက်မိသောအခါ ကားနှစ်စီး တိုက်မိသည်ဟု ဆိုသည်၊ သို့သော် ကားများသည် အဆုံးမဲ့ ခိုင်မာပြီး ခိုင်မာကြသည်၊ ထို့ကြောင့် ၎င်းတို့သည် တိုက်မိမသွားသကဲ့သို့ ၎င်းတို့၏ လမ်းကြောင်းအတိုင်း ဆက်လက်ရွေ့လျားနေသည်။ ဤလုပ်ဆောင်ချက်သည် ထိုကဲ့သို့ တိုက်မိမှု အရေအတွက်ကို ထုတ်ပေးသည်။""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,mya_Mymr,python,"

def incr_list(l: list):
    """"""အပိုဒ်များနှင့်အတူ return list ကို 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,mya_Mymr,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero သည် ကိန်းပြည့်စာရင်းကို အဝင်အဖြစ် ယူသည်။ စာရင်းတွင် သုညသို့ ပေါင်းထည့်သော သီးခြား အစိတ်အပိုင်းနှစ်ခုရှိလျှင် True ကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် False ကိုပြန်ပေးသည်။ >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero ([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,mya_Mymr,python,"

def change_base(x: int, base: int):
    """"""base ကို base သို့ပြောင်းပါ။ ပြောင်းလဲပြီးနောက် string ကိုယ်စားပြုမှုကိုပြန်ပေးပါ။ base နံပါတ်များသည် ၁၀ ထက်နည်းသည်။ >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,mya_Mymr,python,"

def triangle_area(a, h):
    """"""တြိဂံတစ်ခုအတွက် အနားတစ်ခုရဲ့ အရှည်နဲ့ အမြင့်ဆုံးပြန်လည်မှု ဧရိယာကို ပေးထားတယ်။ >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,mya_Mymr,python,"

def fib4(n: int):
    """"""Fib4 နံပါတ်စဉ်သည် Fibbonacci နံပါတ်စဉ်နှင့် ဆင်တူသော အစဉ်တစ်ခုဖြစ်ပြီး အောက်ပါအတိုင်း သတ်မှတ်ထားသည်: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). fib4 နံပါတ်စဉ်၏ n-th element ကို ထိရောက်စွာ တွက်ချက်ရန် လုပ်ဆောင်ချက်တစ်ခုရေးပါ။ ပြန်လည်သုံးစွဲခြင်းကို မသုံးပါနှင့်။ >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,mya_Mymr,python,"

def median(l: list):
    """"""စာရင်း l ထဲက ဒြပ်စင်တွေရဲ့ ပြန်လာမှု ဗဟိုချက် >>> ဗဟိုချက် (([3, 1, 2, 4, 5]) 3 >>> ဗဟိုချက် (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,mya_Mymr,python,"

def is_palindrome(text: str):
    """"""ပေးထားသော string သည် palindrome ဖြစ်သည်ဖြစ်စေစစ်ဆေးသည် >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,mya_Mymr,python,"

def modp(n: int, p: int):
    """"""2^n modulo p ကိုပြန်ပေးပါ (ကိန်းဂဏန်းများကိုသတိပြုပါ။) >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1""""""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,mya_Mymr,python,"

def encode_shift(s: str):
    """"""encode_shift function ကိုသုံးပြီး input string ကို encode လုပ်ထားပြီး decode လုပ်ထားတဲ့ string ကိုပြန်ပေးပါတယ်""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""စာလုံးတိုင်းကို ၅ လုံးစီပြောင်းပြီး ကုဒ်သွင်းထားတဲ့ string ကိုပြန်ပေးတယ်။""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,mya_Mymr,python,"

def remove_vowels(text):
    """"""remove_vowels သည် string ကိုယူပြီး vowels မပါသော string ကိုပြန်ပေးသော function ဖြစ်သည်။ >>> remove_vowels ((('') ' ' >>> remove_vowels (((""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,mya_Mymr,python,"

def below_threshold(l: list, t: int):
    """"""စာရင်း l ရှိ ကိန်းဂဏန်းအားလုံးသည် threshold t အောက်တွင်ရှိလျှင် True ကိုပြန်ပေးပါ။ >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,mya_Mymr,python,"

def add(x: int, y: int):
    """"""x နဲ့ y ကို ပေါင်းလိုက်။ (၂) (၃) (၅) (၁၂)""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,mya_Mymr,python,"

def same_chars(s0: str, s1: str):
    """"""စကားလုံးနှစ်လုံးမှာ တူညီတဲ့စာလုံးများရှိလားစစ်ဆေးပါ။ >>> same_chars ((('eabcdzzzz', 'dddzzzzzzdeddabc') မှန်သည် >>> same_chars ((('abcd', 'dddddddddabc') မှန်သည် >>> same_chars ((('dddddddabc', 'abcd') မှန်သည် >>> same_chars ((('eabcd', 'dddddddddabc') မှားသည် >>> same_chars ((('abcd', 'dddddddabddce') မှားသည် >>> same_chars' (((abcdzzzz', 'dddzzzzzzdddabc') မှားသည် """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,mya_Mymr,python,"

def fib(n: int):
    """"""n-th ဖီဘိုနာချီကိန်းကို ပြန်ပေးပါ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,mya_Mymr,python,"

def correct_bracketing(brackets: str):
    """"""brackets သည် ""<"" နှင့် "">"" တို့၏ string တစ်ခုဖြစ်သည်။ ဖွင့်သည့် bracket တိုင်းတွင် သက်ဆိုင်ရာ ပိတ်သည့် bracket ရှိပါက True ကိုပြန်ပို့ပါ။ >>> correct_bracketing (((""<"") False >>> correct_bracketing (((""<>"") True >>> correct_bracketing (((""<><>>"") True >>> correct_bracketing (((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,mya_Mymr,python,"

def monotonic(l: list):
    """"""True ကိုပြန်ပို့သည် စာရင်းအစိတ်အပိုင်းများသည် monotonically တိုးတက်သည် သို့မဟုတ် ကျဆင်းသည် >>> monotonically (([1, 2, 4, 20]) True >>> monotonically (([1, 20, 4, 10]) False >>> monotonically (([4, 1, 0, -10)) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,mya_Mymr,python,"

def common(l1: list, l2: list):
    """"""စာရင်းနှစ်ခုအတွက်ရွေးချယ်ထားသောထူးခြားသောတူညီသော element များကိုပြန်ပေးသည်. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,mya_Mymr,python,"

def largest_prime_factor(n: int):
    """"""n ၏ အကြီးဆုံးကိန်းစဉ်ကို ပြန်ပေးပါ။ n > 1 ကိုယူပြီး အငယ်ဆုံးကိန်းစဉ်မဟုတ်ပါ။ >>> အကြီးဆုံး_ကိန်းစဉ် (_prime_factor) (၁၃၁၉၅) ၂၉ >>> အကြီးဆုံး_ကိန်းစဉ် (_prime_factor) (၂၀၄၈) ၂""""""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,mya_Mymr,python,"

def sum_to_n(n: int):
    """"""sum_to_n သည် နံပါတ် ၁ မှ n အထိ ပေါင်းထည့်သော လုပ်ဆောင်ချက်တစ်ခုဖြစ်သည်။ >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,mya_Mymr,python,"

def correct_bracketing(brackets: str):
    """"""brackets သည် ""("" နှင့် """") တို့၏ string တစ်ခုဖြစ်သည်။ ဖွင့်သည့် bracket တိုင်းတွင် သက်ဆိုင်ရာ ပိတ်သည့် bracket ရှိပါက မှန်သည် ဟု ပြန်လည်ပြောဆိုပါ။ >>> correct_bracketing(""("") မှားသည် >>> correct_bracketing(""() မှန်သည် >>> correct_bracketing(""() "") မှန်သည် >>> correct_bracketing("") မှားသည် """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,mya_Mymr,python,"

def derivative(xs: list):
    """"""xs သည် polynomial ၏ coefficients များကို ကိုယ်စားပြုသည်။ xs[0] + xs[1] * x + xs[2] * x^2 + .... ဤ polynomial ၏ တူညီသောပုံစံကို ပြန်ပေးပါ။ >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,mya_Mymr,python,"

def fibfib(n: int):
    """"""FibFib နံပါတ်စဉ်သည် Fibbonacci နံပါတ်စဉ်နှင့် ဆင်တူသော အစဉ်တစ်ခုဖြစ်ပြီး အောက်ပါအတိုင်း သတ်မှတ်ထားသည်: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3) ။ ကျေးဇူးပြု၍ fibfib နံပါတ်စဉ်၏ n-th element ကို ထိရောက်စွာ တွက်ချက်ရန် လုပ်ဆောင်ချက်တစ်ခုရေးပါ။ >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fibfib ((8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,mya_Mymr,python,"
FIX = """"""စကားလုံးတစ်လုံးကို ကိုယ်စားပြုသော string ကို input အဖြစ်ယူပြီး string ထဲရှိ vowels အရေအတွက်ကိုပြန်လည်ပေးပို့သော function vowels_count ကိုရေးပါ။ ဤကိစ္စတွင် vowels များသည် 'a', 'e', 'i', 'o', 'u' ဖြစ်သည်။ ဤတွင် 'y' သည်လည်း vowel တစ်ခုဖြစ်သော်လည်းပေးထားသောစကားလုံး၏ အဆုံးတွင်သာဖြစ်ပါသည် ဥပမာ: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""စမ်းသပ်မှုအသစ်တွေ ထပ်ဖြည့်ပါ။""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,mya_Mymr,python,"
def circular_shift(x, shift):
    """"""အဝိုင်းက integer x ရဲ့ ဒစ်ဂျစ်တယ်တွေကို ရွှေ့၊ ဒစ်ဂျစ်တယ်တွေကို ညာဘက်ကို ရွှေ့ပြီး ရလဒ်ကို string အဖြစ် ပြန်ပို့ပါ။ shift > ဒစ်ဂျစ်တယ် အရေအတွက်ဆိုရင် ဒစ်ဂျစ်တယ်တွေကို ပြောင်းပြန်ပြန် ပြန်ပို့ပါ။ >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,mya_Mymr,python,"
def digitSum(s):
    """"""အလုပ် အဝင်အဖြစ် string တစ်ခုကိုယူပြီး အပေါ်ပိုင်းအက္ခရာများ၏ sum ကိုသာ ASCII ကုဒ်များအဖြစ်ပြန်လည်ပေးပို့သော function တစ်ခုကိုရေးပါ။ ဥပမာ: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,mya_Mymr,python,"
def fruit_distribution(s,n):
    """"""ဤအလုပ်တွင်သင်သည် apples များနှင့်ပန်းသီးများအရေအတွက်ကိုကိုယ်စားပြုသော string ကိုပေးထားမည်ဖြစ်သည် ပန်းသီးများနှင့်ပန်းသီးများနှင့်မန်ဂိုသီးများပါသောပန်းသီးများ၏တောင်းထဲမှာဖြန့်ဖြူးထားသည် ဒီတောင်းတွင်ပန်းသီးများ၊ပန်းသီးများနှင့်မန်ဂိုသီးများပါ ၀ င်သည်။ ပန်းသီးများနှင့်ပန်းသီးများစုစုပေါင်းကိုကိုယ်စားပြုသော string ကိုပေးထားပြီးနောက်တောင်းထဲကအသီးများစုစုပေါင်းကိုကိုယ်စားပြုသောကိန်းပြည့်တစ်ခုသည်တောင်းထဲကမန်ဂိုသီးအရေအတွက်ကိုပြန်ပေးပါ ဥပမာ: fruit_distribution""5(apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples and 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,mya_Mymr,python,"
def pluck(arr):
    """"""""အနှုတ်မပါသော integer node များပါသော tree ၏ branch တစ်ခုကို ကိုယ်စားပြုသော array တစ်ခုကို ပေးထားလျှင် node တစ်ခုကို ကောက်ယူ၍ ပြန်ပေးရန်ဖြစ်သည်။ ကောက်ယူသော node သည်အသေးဆုံး even တန်ဖိုးရှိသော node ဖြစ်ရမည်။ တူညီသောအသေးဆုံး even တန်ဖိုးရှိသော node များကိုတွေ့လျှင်အသေးဆုံး index ရှိသော node ကိုပြန်ပေးပါ။ ကောက်ယူသော node ကိုစာရင်းတစ်ခုတွင်ပြန်ပေးရမည်၊ [smallest_value, its index]၊ တန်ဖိုးများမရှိပါက သို့မဟုတ်ပေးထားသော array သည်လွတ်လျှင်ပြန်ပေးပါ။ ဥပမာ ၁: အဝင်: [4,2,3] ထွက်: [2, 1] ရှင်းလင်းချက် ၂ သည်အသေးဆုံး even တန်ဖိုးရှိပြီး ၂ သည်အသေးဆုံး index ရှိသည်။ ဥပမာ ၂: အဝင်: [1,2,3] ထွက်: [2, 1] ရှင်းလင်းချက် ၂ သည်အသေးဆုံး even တန်ဖိုးရှိပြီး ၂ သည်အသေးဆုံး even index ရှိသည်။ ဥပမာ ၃: အဝင်: [] ထွက်: [] အဝင်: [4,5, 3, 4, 2,] အဝင်: [0, 1] ထွက်: အဝင်: ၀၊ အဝင်: အငယ်ဆုံး node ရှိသည် ၀၊ သို့သော်လည်းအသေးဆုံး index တန်ဖိုးသည် ၀ ခုနစ်လုံးရှိသည်။ ဥပမာ ၁: ပထမအသေးဆုံး node ကိုရွေးပါမည်မှာ ၀ ၀ ၀ ၀ ဖြစ်သော်လည်း ၀ ၏၊ ပထမအမည်မှာ ၀ ၀ ၀ ၏တန်ဖိုးသည် ၀ ၀ ၏အောက်ရှိသည်။ ဥပမာ ၁: အငယ်ဆုံး node သည် ၀ ၀ ၀ ၀ ၏အနက် ၀ ၀ ၀ ၀ ၀ ၏ အပါ ၀ ၀ ၏ ၀ ၀ ၏ ၀ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀ ၏ ၀""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,mya_Mymr,python,"
def search(lst):
    '''သင်ဟာ အပေါင်းကိန်းပြည့်တွေရဲ့ အလွတ်မဟုတ်တဲ့စာရင်းကိုပေးထားတယ်။ သုညထက်ကြီးတဲ့ အကြီးဆုံးကိန်းပြည့်ကိုပြန်ပေးပြီး ကိန်းပြည့်ရဲ့တန်ဖိုးထက်ပိုတဲ့ သို့မဟုတ် တူညီတဲ့ ကြိမ်နှုန်းရှိပါတယ် ကိန်းပြည့်ရဲ့ ကြိမ်နှုန်းက စာရင်းမှာပေါ်လာတဲ့ အကြိမ်အရေအတွက်ပါ။ ဒီလိုတန်ဖိုးမရှိရင် -1 ပြန်ပေးပါ။ ဥပမာ: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,mya_Mymr,python,"
def strange_sort_list(lst):
    '''ဖြောင့်ကိန်းများ၏စာရင်းကိုပေးလျှင် ထူးဆန်းသောအစဉ်ဖြင့်ပြန်ပေးသည်။ ထူးဆန်းသောရွေးချယ်မှုသည်အနည်းဆုံးတန်ဖိုးဖြင့်စတင်ပြီးနောက် ကျန်ရှိသောဖြောင့်ကိန်းများ၏အများဆုံး၊ ထို့နောက်အနည်းဆုံးနှင့်အခြားအရာများဖြစ်သည်။ ဥပမာ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,mya_Mymr,python,"
def triangle_area(a, b, c):
    '''တြိဂံ၏ ၃ ဘက်၏ အလျားများကို ပေးထားသည်။ သုံးဘက်တို့သည် တြိဂံဖြစ်လျှင် သုံးဘက်၏ ဧရိယာကို ဆယ်လီ ၂ နေရာသို့ အဝိုင်းပြု၍ ပြန်ပေးပါ။ မဟုတ်ပါက -1 ကို ပြန်ပေးပါ။ သုံးဘက်သည် တြိဂံဖြစ်လျှင် သုံးဘက်၏ ပေါင်းလဒ်သည် တတိယဘက်ထက် ပို၍ ကြီးမားသည်။ ဥပမာ: triangle_area (၃, ၄, ၅) == 6.00 triangle_area (၁, ၂, ၁၀) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,mya_Mymr,python,"
def will_it_fly(q,w):
    '''အကယ်၍ object q သည်ပျံသန်းမည်ဆိုပါက True ကိုပြန်ပေးပြီးအခြားနည်းအားဖြင့် False ကိုပြန်ပေးသော function တစ်ခုကိုရေးပါ။ object q သည်ချိန်ခွင်လျှာရှိပါက (အဲဒါသည် palindromic စာရင်းတစ်ခုဖြစ်သည်) နှင့်၎င်း၏ဒြပ်စင်များစုစုပေါင်းသည်အနိုင်ဆုံးအလေးချိန် w ထက်နည်းသည်ဖြစ်စေ၊ ညီမျှသည်ဖြစ်စေ။ ဥပမာ: will_it_fly (([1, 2], 5) â -> False # 1+2 သည်အနိုင်ဆုံးအလေးချိန်ထက်နည်းသည်ဖြစ်စေ၊မညီမျှပါ။ will_it_fly (([3, 2, 3], 1) â -> False # ၎င်းသည်ချိန်ခွင်လျှာရှိသည်ဖြစ်စေ၊အနိုင်ဆုံးအလေးချိန်ထက်ပိုသော 3+2+3 ဖြစ်သည်။ will_it_fly (([3, 2, 3], 9) â -> True # 3+23 သည်အနိုင်ဆုံးအလေးချိန်ထက်နည်းသည်ဖြစ်စေ၊မညီမျှသည်ဖြစ်စေ၊ will_it_fly ((([3], 5) â -> True # 3 သည်အနိုင်ဆုံးအလေးချိန်ထက်နည်းသည်ဖြစ်စေ၊မညီမျှသည်ဖြစ်စေ၊မညီမျှသည်ဖြစ်စေ။'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,mya_Mymr,python,"
def smallest_change(arr):
    """"""အပြည့်အစုံများ၏ array ကိုပေးထားသည်၊ array ကို palindromic ပြုလုပ်ရန်ပြောင်းလဲရန်လိုအပ်သောအနည်းဆုံး element များကိုရှာပါ။ palindromic array သည်နောက်ပြန်နှင့်ရှေ့သို့တူညီသော array တစ်ခုဖြစ်သည်။တစ်ခုတည်းသောပြောင်းလဲမှုတွင် element တစ်ခုကိုအခြား element တစ်ခုသို့ပြောင်းနိုင်သည်။ ဥပမာ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,mya_Mymr,python,"
def total_match(lst1, lst2):
    '''string စာရင်းနှစ်ခုကိုလက်ခံပြီး list တစ်ခု၏ string အားလုံးတွင်စာလုံးအရေအတွက်တူညီသောစာရင်းကိုအခြားစာရင်းထက်နည်းသောစာရင်းကိုပြန်ပေးသော function ကိုရေးပါ။ စာရင်းနှစ်ခုမှာစာလုံးအရေအတွက်တူညီပါကပထမဆုံးစာရင်းကိုပြန်ပေးပါ။ total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'admin', 'hi']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', [' 4]) -> '4' ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,mya_Mymr,python,"
def is_multiply_prime(a):
    """"""ပေးထားသောကိန်းသည် ၃ လုံးသောပရိုင်းမင်ကိန်းများ၏ မြှောက်လဒ်ဖြစ်လျှင် မှန်သောကိန်းကိုပြန်ပေးသော function ကိုရေးပါ အခြားနည်းအားဖြင့်မှားပါသည် (a) သည် ၁၀၀ ထက်နည်းသည်ဟုသိပါသည် ဥပမာ: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,mya_Mymr,python,"
def is_simple_power(x, n):
    """"""သင်လုပ်ရမှာက x သည် n ၏ ရိုးရှင်းသော စွမ်းအားဖြစ်လျှင် မှန်သော၊ အခြားကိစ္စများတွင် မှားသော၊ x သည် n ၏ ရိုးရှင်းသော စွမ်းအားဖြစ်လျှင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားကိစ္စများ၊ အခြားကိစ္စများတွင် မှားသော၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာများ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ၊ အခြားအရာ""""""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,mya_Mymr,python,"
def iscube(a):
    '''ဖြောင့်ကိန်း a ကိုယူပြီး True ကိုပြန်ပေးသော function ကိုရေးပါ။ မှတ်ချက်: ဒီ ingeger သည် integer ကိန်းတစ်ခုခု၏ cube ဖြစ်လျှင်သင်သည်ထည့်သွင်းချက်သည်အမြဲတမ်းမှန်သည်ဟုယူဆနိုင်သည်။ ဥပမာ: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,mya_Mymr,python,"
def hex_key(num):
    """"""သင်ဟာ hexadecimal နံပါတ်ကို string တစ်ခုအဖြစ် လက်ခံပြီး hexadecimal နံပါတ်များ၏ အရေအတွက်ကို ရေတွက်တဲ့ function တစ်ခုကို ရေးရန် တာဝန်ပေးခံရပြီ (prime number သို့မဟုတ် prime သည် 1 ထက်ကြီးသော သဘာဝကိန်းတစ်ခုဖြစ်ပြီး ပိုငယ်သော သဘာဝကိန်းနှစ်လုံး၏ product မဟုတ်) ။ hexadecimal နံပါတ်များမှာ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F ဖြစ်သည်။ prime နံပါတ်များမှာ 2, 3, 5, 7, 11, 13, 17,... ဖြစ်သည်၊ ထို့ကြောင့်သင်သည် အောက်ပါဂဏန်းများ၏ အရေအတွက်ကို သတ်မှတ်ရန်လိုအပ်သည်: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13) မှတ်ချက်: သင်သည် input ကို မှန်ကန်သော သို့မဟုတ် ဗလာ string ဟုယူဆနိုင်ပြီး သင်္ကေတ A,B,C,D,E,F သည် အမြဲတမ်း uppercase ဖြစ်သည်။ ဥပမာများ: num = AB အတွက် output သည် num = 1.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,mya_Mymr,python,"
def decimal_to_binary(decimal):
    """"""သင်ကဒသမပုံစံတစ်ခုပေးမည်နှင့်သင်၏အလုပ်သည်ဒွိဖိုင်သို့ပြောင်းရန်ဖြစ်သည်။ function သည် string တစ်ခုကိုပြန်ရသင့်သည်၊ သင်္ကေတတစ်ခုစီသည်ဒွိဖိုင်ကိုကိုယ်စားပြုသည်။ string ရှိအက္ခရာတစ်ခုစီသည် '0' သို့မဟုတ် '1' ဖြစ်လိမ့်မည်။ string ၏အစနှင့်အဆုံးတွင် 'db' သင်္ကေတတစ်စုံရှိလိမ့်မည်။ extra သင်္ကေတများသည် format ကိုကူညီရန်ရှိသည်။ ဥပမာ: decimal_to_binary ((15) # returns ""db1111db"" decimal_to_binary32) # returns ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,mya_Mymr,python,"
def is_happy(s):
    """"""string s ကိုပေးထားပြီး string သည် happy ဖြစ်သည်၊ မဟုတ်သည်ကိုစစ်ဆေးရန်တာဝန်ရှိသည်။ string သည်အနည်းဆုံး ၃ ခုရှိပြီးနောက်ထပ်စာလုံး ၃ လုံးမှာကွဲပြားပါက string သည်ပျော်သည် ဥပမာ: is_happy (a) => false is_happy (a) => false is_happy (a) => false is_happy (b) => true is_happy (a) => false is_happy (a) => false is_happy (adb) => true is_happy (x) => false """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,mya_Mymr,python,"
def numerical_letter_grade(grades):
    """"""သင်တန်း၏နောက်ဆုံးပတ်တွင် ဆရာသည် ကျောင်းသားများအား အမှတ်ပေးရသည်။ ဆရာသည် မိမိ၏ အမှတ်ပေးရေး အယ်လ်ဂိုရစ်သမ်ကို ပြုစုနေသည်။ တစ်ခုတည်းသော ပြဿနာမှာ အမှတ်ပေးရေးသားသည့် ကုဒ်ကို ဆုံးရှုံးခဲ့ရခြင်း ဖြစ်သည်။ သင်တန်းသားအချို့၏ GPA စာရင်းကို ပေးထားပြီး အောက်ပါဇယားကို အသုံးပြု၍ စာလုံးအဆင့်စာရင်းကို ထုတ်ပေးနိုင်မည့် လုပ်ဆောင်ချက်တစ်ခုကို ရေးသားရန် လိုပါသည်။ စာလုံးအဆင့် 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,mya_Mymr,python,"
def prime_length(string):
    """"""string တစ်ခုကိုယူပြီး string အရှည်သည် ပရိုင်းမင်ကိန်းဖြစ်လျှင် True သို့မဟုတ် False ပြန်ပေးသော function ကိုရေးပါ။ ဥပမာ prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,mya_Mymr,python,"
def starts_one_ends(n):
    """"""အပေါင်းကိန်းပြည့် n ကိုပေးထားလျှင် 1 နဲ့စပြီး အဆုံးသတ်တဲ့ အပေါင်းကိန်းပြည့်များရဲ့ ဂဏန်းပေါင်းကိုပြန်ပေးပါ""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,mya_Mymr,python,"
def solve(N):
    """"""အပေါင်းကိန်း N ကိုပေးထားလျှင် ဘိုင်နရီစနစ်ဖြင့် ၎င်း၏ဂဏန်းများ၏စုစုပေါင်းကိုပြန်ပေးပါ။ ဥပမာ N = 1000 အတွက်၊ ဂဏန်းများစုစုပေါင်းသည် 1 ဖြစ်လိမ့်မည်။ ထွက်ပေါက်သည် ""1"" ဖြစ်ရမည်။ N = 150 အတွက်၊ ဂဏန်းများစုစုပေါင်းသည် 6 ဖြစ်လိမ့်မည်။ ထွက်ပေါက်သည် ""110"" ဖြစ်လိမ့်မည်။ N = 147 အတွက်၊ ဂဏန်းများစုစုပေါင်းသည် 12 ဖြစ်လိမ့်မည်။ ထွက်ပေါက်သည် ""1100"" ဖြစ်လိမ့်မည်။ Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. ထွက်ပေါက်: ဘိုင်နရီကိန်းစဉ်တစ်ခု """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,mya_Mymr,python,"
def add(lst):
    """"""အပြည့်အစုံစာရင်းတစ်ခုရှိလျှင် lst သည် odd index ရှိသည့် အပေါင်းအပါများကို ပေါင်းထည့်ပေးသည်။ ဥပမာ: add (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,mya_Mymr,python,"
def anti_shuffle(s):
    """"""string ကိုယူပြီး၎င်း၏စီစဉ်ထားသောပုံစံကိုပြန်ပေးသော function ကိုရေးပါ။ string ၏စီစဉ်ထားသောပုံစံသည်စကားလုံးအားလုံး (အကွက်ဖြင့်ခွဲထားသည်) ကို ascii တန်ဖိုးပေါ်မူတည်၍တက်သောစီစဉ်ထားသောစာလုံးအားလုံးပါ ၀ င်သောစကားလုံးအသစ်တစ်ခုဖြင့်အစားထိုးထားသော string ဖြစ်သည်။ မှတ်ချက်: စကားလုံးများနှင့်အလွတ်နေရာများ၏စီစဉ်မှုကိုထားရှိသင့်သည်။ ဥပမာ: anti_shuffle ((('Hi') သည် 'Hi' anti_shuffle ((('hello') ကိုပြန်ပေးသည် 'ehllo' anti_shuffle (('Hello World!!!') သည် 'Hello !!!Wdlor' ကိုပြန်ပေးသည်။""""""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,mya_Mymr,python,"
def get_row(lst, x):
    """"""သင်သည် 2D ဒေတာကို nested lists အဖြစ်ပေးထားသည်၊ ၎င်းသည် matrix နှင့်တူသော်လည်း၊ matrix နှင့်မတူဘဲ၊ အတန်းတစ်ခုစီတွင်တိုင်ပေါင်းများစွာပါရှိနိုင်သည်။ lst နှင့် integer x ကိုပေးထားသည်၊ အတန်းထဲမှာ integer x ကိုရှာဖွေပြီး tuples ၏စာရင်းကိုပြန်ပေးသည်၊ [(x1, y1), (x2, y2) ...] ထို့ကြောင့် tuple တစ်ခုစီသည်အညွန်ကြားချက် - (တန်း၊ တိုင်) ဖြစ်သည်၊ ၀ နှင့်စတင်သည်။ အစပိုင်းတွင်အညွန်ကြားချက်များကိုအတန်းများဖြင့်တက်သည်အလိုက်စီစဉ်ပါ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [0, 0, 0, 0, 0, 1, 4], 0 (0), (2, 5), (2, 0) ], 1) [] == [[အတန်း 1, 1, 2, 3, 2, 2]] []""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,mya_Mymr,python,"
def sort_array(array):
    """"""အနှုတ်မဟုတ်သော ကိန်းပြည့်များ၏ array ကိုပေးထားပြီးလျှင်၊ ပေးထားသော array ၏ မိတ္တူကို sort လုပ်ပြီးနောက် ပြန်ပေးပါ။ ပေးထားသော array ကို sum (ပထမဆုံး index တန်ဖိုး၊ နောက်ဆုံး index တန်ဖိုး) သည် odd ဖြစ်လျှင်၊ သို့မဟုတ် sum (ပထမဆုံး index တန်ဖိုး၊ နောက်ဆုံး index တန်ဖိုး) သည် even ဖြစ်လျှင်၊ ဆင်းသက်သော အဆင့်ဖြင့် sort လုပ်ပါ။ မှတ်ချက်: * ပေးထားသော array ကို မပြောင်းပါနှင့်။ ဥပမာများ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,mya_Mymr,python,"
def encrypt(s):
    """"""function encrypt ကို argument အဖြစ် string ကိုယူပြီး alphabet ကိုလှည့်ခြင်းဖြင့် encrypted string ကိုပြန်ပေးသော function တစ်ခုကိုဖန်တီးပါ။ alphabet ကိုစာလုံးနှစ်လုံးဖြင့်နှစ်နေရာသို့ပြောင်းသွားအောင်လှည့်ပါ။ ဥပမာ: encrypt (('hi') ကို 'lm' encrypt (('asdfghjkl') ကို 'ewhjklnop' encrypt (('gf') ကို 'kj' encrypt (('et') ကို 'ix' ပြန်ပေးသည်။""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,mya_Mymr,python,"
def next_smallest(lst):
    """"""သင်သည် integer များစာရင်းတစ်ခုပေးထားသည်။ စာရင်း၏ဒုတိယအသေးဆုံး element ကိုပြန်ပေးသော function next_smallest () ကိုရေးပါ။ ထို element မရှိပါက None ကိုပြန်ပေးပါ။ next_smallest () [1, 2, 3, 4, 5]) == 2 next_smallest () [5, 1, 4, 3, 2]) == 2 next_smallest () == None next_smallest () [1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,mya_Mymr,python,"
def is_bored(S):
    """"""သင်ဟာစကားလုံးတစ်တန်းပေးခံရပြီးသင်၏တာဝန်သည်ပျင်းရိမှုအရေအတွက်ကိုရေတွက်ရန်ဖြစ်သည်။ ပျင်းရိမှုဆိုသည်မှာ ""I"" စကားလုံးနှင့်စတင်သောဝါကျဖြစ်သည်။ဝါကျများကို '.', '?' သို့မဟုတ် '! 'ဖြင့်ကန့်သတ်ထားသည်။ ဥပမာ: >>> is_bored (("" Hello world"") 0 >>> is_bored ((""မိုးကောင်းကင်ကပြာနေတယ်။ နေရောင်ကတောက်ပနေတယ်။ ဒီရာသီဥတုကိုငါကြိုက်တယ်"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,mya_Mymr,python,"
def any_int(x, y, z):
    '''ဂဏန်း ၃ လုံးကို ယူသော လုပ်ဆောင်ချက်တစ်ခု ဖန်တီးပါ။ ဂဏန်းတစ်ခုသည် အခြား ၂ လုံး၏ ပေါင်းလဒ်နှင့် ညီမျှလျှင် မှန်ကန်သော ဂဏန်းကို ပြန်ပေးပြီး ဂဏန်းအားလုံးသည် ကိန်းပြည့်များဖြစ်ပါက မှားယွင်းသော ဂဏန်းကို ပြန်ပေးသည်။ အခြားကိစ္စများတွင် မှားယွင်းသော ဂဏန်းကို ပြန်ပေးသည်။ ဥပမာ any_int ((5, 2, 7) â -> True any_int ((3, 2, 2) â -> False any_int ((3, -2, 1) â -> True any_int ((3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,mya_Mymr,python,"
def encode(message):
    """"""စာတိုတစ်စောင်ကိုယူပြီး စာလုံးအားလုံး၏ case ကိုလဲလှယ်ပြီး စာတိုတွင်ရှိသော vowels အားလုံးကို အင်္ဂလိပ်အက္ခရာစဉ်တွင် ထို vowel ထက် ၂ နေရာရှေ့တွင်ပေါ်လာသောစာလုံးဖြင့်အစားထိုးသော function ကိုရေးပါ။ စာလုံးများကိုသာယူပါ။ ဥပမာများ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,mya_Mymr,python,"

def skjkasdkd(lst):
    """"""သင်ဟာ integer တွေရဲ့စာရင်းတစ်ခုပေးထားပါတယ် သင်ဟာ အကြီးဆုံး prime value ကိုရှာပြီး ၎င်းရဲ့ဂဏန်းပေါင်းကိုပြန်ပေးရမယ်။ ဥပမာ: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] အတွက် output က 10 ဖြစ်သင့်တယ် lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] အတွက် output က 25 ဖြစ်သင့်တယ် lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] အတွက် output က 13 ဖြစ်သင့်တယ် lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] အတွက် output က 11 ဖြစ်သင့်တယ် lst = [0,81,12,3,21,1] အတွက် output က 3 ဖြစ်သင့်တယ် lst = [0,1,8,1,2,7] အတွက် output က 7 ဖြစ်သင့်တယ်""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,mya_Mymr,python,"
def check_dict_case(dict):
    """"""အဘိဓာန်တစ်ခုပေးထားလျှင်, key အားလုံးသည် စာလုံးငယ်များဖြစ်လျှင် True ကိုပြန်ပေးပါ သို့မဟုတ် key အားလုံးသည် စာလုံးကြီးများဖြစ်လျှင်, မဟုတ်လျှင် False ကိုပြန်ပေးပါ။ function သည် False ကိုပြန်ပေးသင့်သည် ပေးထားသော အဘိဓာန်သည်အလွတ်ဖြစ်သည်။ ဥပမာ: check_dict_case (((""a"":""apple"", ""b"":""banana""}) သည် True ကိုပြန်ပေးရမည်။ check_dict_case (((""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) သည် False ကိုပြန်ပေးရမည်။ check_dict_case (((""a"":""apple"", 8:""banana"", ""a"":""apple""}) သည် False ကိုပြန်ပေးရမည်။ check_dict_case (((""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) သည် False ကိုပြန်ပေးရမည်။ check_dict_case (((""NC"":""STATE"", ""Z"":""IP"""") သည် True ကိုပြန်ပေးရမည်။""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,mya_Mymr,python,"
def count_up_to(n):
    """"""အနှုတ်လက္ခဏာမဟုတ်သော ကိန်းပြည့်ကိုယူပြီး ပထမ n ကိန်းပြည့်များနှင့် n ထက်နည်းသော ကိန်းပြည့်များ၏ array ကိုပြန်ပေးသော function ကိုလုပ်ဆောင်ပါ ဥပမာ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,mya_Mymr,python,"
def multiply(a, b):
    """"""function ကိုအပြီးသတ်ပါ နှစ်ခုယူပြီးသူတို့၏ယူနစ်ဂဏန်းများ၏ထုတ်ကုန်ပြန်သည် input ကိုအမြဲတမ်းမှန်ကန်သည်ဟုယူဆပါဥပမာများ: မြှောက်ပါ 148, 412) ပြန်ရမယ် 16 မြှောက်ပါ 19 28, 72 မြှောက်ပါ 2020, 1851 ပြန်ရမယ် 0 မြှောက်ပါ 14-15 ပြန်ရမယ် 20""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,mya_Mymr,python,"
def count_upper(s):
    """"""string s ကိုပေးထားလျှင်, အက္ခရာမကြီးများ၏ကိန်းကိုတောင်ညွှန်းများတွင်ရေတွက်ပါ။ ဥပမာ: count_upper (('aBCdEf') သည် 1 count_upper (('abcdefg') သည် 0 count_upper (('dBBE') သည် 0 ကိုပြန်ပေးသည်။""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,mya_Mymr,python,"
def closest_integer(value):
    '''နံပါတ်တစ်ခုခုကို ကိုယ်စားပြုသော တန်ဖိုး (string) ကိုယူပြီး ၎င်းနှင့်အနီးဆုံးကိန်းပြည့်ကို ပြန်ပေးသော function တစ်ခုကို ဖန်တီးပါ။ နံပါတ်သည် နှစ်ခုနှင့်အကွာအဝေးတူလျှင် ၎င်းကို သုညမှ အဝေးသို့ အဝိုင်းချပါ။ ဥပမာ >>> closest_integer (((""10"") 10 >>> closest_integer (((""15.3"") 15 မှတ်ချက်: သုညမှ အဝေးသို့ အဝိုင်းချခြင်းသည် ပေးထားသော နံပါတ်သည် နှစ်ခုနှင့်အကွာအဝေးတူလျှင် သင်ပြန်ရမည့်ကိန်းသည် သုညမှ အဝေးဆုံးဖြစ်သည်ဟု ဆိုလိုသည်။ ဥပမာ closest_integer "" ((14.5"") သည် ၁၅ ကိုပြန်ရပြီး closest_integer "" ((-14.5"") သည် ၁၅ ကိုပြန်ရသည်။ '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,mya_Mymr,python,"
def make_a_pile(n):
    """"""အပေါင်းကိန်း n ကိုပေးလျှင် ကျောက်ခဲ n အဆင့်ရှိပုံတပုံ လုပ်ရပါမည်။ ပထမအဆင့်တွင် ကျောက်ခဲ n ရှိသည်။ နောက်တစ်ဆင့်တွင် ကျောက်ခဲအရေအတွက်မှာ - n သည် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် နောက်တစ်ဆင့်တွင် မကိန်းဖြစ်လျှင် အမည်စာရင်းတစ်ခုတွင် ကျောက်ခဲအရေအတွက်ကို ပြန်ပေးပါ၊ အဲဒီမှာ index i ရှိ element သည် level (i+1) တွင် ကျောက်ခဲအရေအတွက်ကို ကိုယ်စားပြုသည်။ ဥပမာများ: >>> make_a_pile (i+1) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,mya_Mymr,python,"
def words_string(s):
    """"""သင်ဟာအကောင့်တစ်ခုမှာ စာလုံးများကိုအကောင့်တစ်ခုအဖြစ်ခွဲခြားပြီး စာလုံးများကိုပြန်ပို့ရမယ်။ ဥပမာ: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,mya_Mymr,python,"
def choose_num(x, y):
    """"""ဤ function သည် အပေါင်းကိန်း x နှင့် y နှစ်ခုကို ယူပြီး [x, y] အပါအဝင် ကန့်သတ်ချက်အတွင်းရှိ အကြီးဆုံး အပေါင်းကိန်းကို ပြန်ပေးသည်။ ထိုကဲ့သို့သော ကိန်းမရှိပါက function သည် -1 ကို ပြန်ပေးရမည်။ ဥပမာ: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,mya_Mymr,python,"
def rounded_avg(n, m):
    """"""သင်ဟာ အပေါင်းကိန်း n နှင့် m ကိုပေးထားပြီး သင့်အလုပ်က n မှ m အထိ (n နှင့် m အပါအဝင်) ရှိသော ကိန်းပြည့်များ၏ ပျမ်းမျှကို တွက်ချက်ရန်ဖြစ်သည်။ အဖြေကို အနီးဆုံးကိန်းပြည့်သို့ အဝိုင်းချပြီး ဘိုင်နရီအဖြစ် ပြောင်းပါ။ n သည် m ထက်ကြီးလျှင် -1 ကိုပြန်ပေးပါ။ ဥပမာ: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,mya_Mymr,python,"
def unique_digits(x):
    """"""အပေါင်းကိန်း x ၏စာရင်းကိုပေးလျှင် ကိန်းဂဏန်းတစ်လုံးမျှမရှိသော အစိတ်အပိုင်းများ၏ရွေးချယ်ထားသောစာရင်းကိုပြန်ပေးပါ မှတ်ချက်: ပြန်ပေးထားသောစာရင်းကို တိုးတက်လာသောအစဉ်အတိုင်းရွေးချယ်ရပါမည်။ ဥပမာ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,mya_Mymr,python,"
def by_length(arr):
    """"""ကိန်းပြည့်များ၏ array တစ်ခုကိုပေးလျှင် ၁ နှင့် ၉ အပါအဝင် ကိန်းပြည့်များကိုရွေးချယ်ပြီး array ကို ပြောင်းပြန်ရွေးချယ်ပြီး နံပါတ်တိုင်းကို ၎င်းနှင့် ကိုက်ညီသောနာမည်ဖြင့်အစားထိုးပါ ဥပမာ: arr = [၂၊ ၁၊ ၁၊ ၄၊ ၅၊ ၈၊ ၉] -> sort arr -> [၁၊ ၁၊ ၁၊ ၂၊ ၂၊ ၃၊ ၄၊ ၅၊ ၈] -> reverse arr -> [၈၊ ၅၊ ၄၊ ၃၊ ၂၊ ၂၊ ၁၊ ၁] return [""၈""၊ ""၅""၊ ""၄""၊ ""၃""၊ ""၂""၊ ""၂""၊ ""၁""""] အကယ်၍ array သည်အလွတ်ဖြစ်ပါက array ကို return: arr = [] return [] အကယ်၍ array တွင်ထူးခြားသောနံပါတ်ရှိပါက၎င်းကိုလျစ်လျူရှုပါ arr = [၁၊ ၁၊ ၅၅] -> arr -> [၁၊ ၅၅] -> reverse arr = [51] return - '၁' ]""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,mya_Mymr,python,"
def f(n):
    """"""f ကို parameter အဖြစ်ယူပြီး index i ရှိ element ၏တန်ဖိုးသည် i ၏ factorial ဖြစ်သည် i သည်တစ်ထပ်တည်းဖြစ်သည် သို့မဟုတ် 1 မှ i အထိရှိသောအလုံးရေများ၏စုစုဖြစ်သည် i သည် 1 မှစတင်သည် i ၏ factorial သည် 1 မှ i အထိရှိသောအလုံးရေများ၏မြှောက်ကိန်းဖြစ်သည် (1 * 2 * ... * i) ။ ဥပမာ: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,mya_Mymr,python,"
def even_odd_palindrome(n):
    """"""အပေါင်းကိန်း n ကိုပေးထားလျှင်, အပါအဝင်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အနက်အ""""""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,mya_Mymr,python,"
def count_nums(arr):
    """"""count_nums function ကိုရေးပါ integer array ကိုယူပြီးဂဏန်းပေါင်းစုပါသော element အရေအတွက်ကိုပြန်ပေးသည် > 0. ဂဏန်းသည်အနှုတ်ဖြစ်လျှင်ပထမဆုံးလက်မှတ်ထိုးထားသောဂဏန်းသည်အနှုတ်ဖြစ်လိမ့်မည်။ ဥပမာ -123 သည် -1, 2, နှင့် 3 ဂဏန်းများကိုလက်မှတ်ထိုးထားသည် >>> count_nums (([]) == 0 >>> count_nums ([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,mya_Mymr,python,"
def move_one_ball(arr):
    """"""array 'arr' မှာ N ကိန်းပြည့်တွေရှိပါတယ် arr[1], arr[2], ..., arr[N] array ထဲကနံပါတ်တွေကို randomly order လုပ်ပေးပါလိမ့်မယ်။ သင့်အလုပ်က array တစ်ခုကို အောက်ပါအစီအစဉ်အတိုင်းအလျောက်မကျဆင်းအောင်စီစဉ်နိုင်မလားဆိုတာ ဆုံးဖြတ်ဖို့ပါ။ သင်ပေးထားတဲ့ array မှာ ဘယ်ဘက်ပြောင်းတဲ့ operation ကို အကြိမ်များစွာလုပ်ဆောင်ခွင့်ရှိပါတယ်။ right shift operation တစ်ခုက array ရဲ့ element တွေအားလုံးကို ညာဘက်ကိုတစ်နေရာစီပြောင်းခြင်းဖြစ်ပါတယ်။ array ရဲ့နောက်ဆုံး element ကို array ထဲက အစအဆုံးနေရာကို ရွှေ့ပေးပါလိမ့်မယ်။ 0th index ကို ဆိုလိုတာပါ။ အထက်ပါ operation ကိုလုပ်ဆောင်ပြီး sorted array ကိုရယူနိုင်ရင် True ပြန်ပေးရင် True ပြန်ပေးရင် False ပြန်ပေးပါ။ ပေးထားတဲ့ array ဟာအလွတ်ဆိုရင် True ပြန်ပေးပါ။ မှတ်ချက်: ပေးထားတဲ့ list မှာ ထူးခြားတဲ့ element တွေရှိဖို့ အာမခံထားပါတယ်။ ဥပမာ: move_one_(ball[3,4,5,== 1, 2> True Explanation: By performin 2 right right-ball operations, non-decreasing order can be achieved for the array. move_one_{3,4,== 5,== 2} ညာဘက်ပြောင်းတဲ့ order ကိုမပြောင်းတဲ့ array အတွက် ဘယ် number ကိုမဆိုမပြောင်းနိုင်ပါဘူး။""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,mya_Mymr,python,"
def exchange(lst1, lst2):
    """"""ဤပြဿနာတွင် lst1 နှင့် lst2 အကြား အပြောင်းအလဲပြုလုပ်သော အစိတ်အပိုင်းအရေအတွက်အတွက်အတွက် ကန့်သတ်ချက်မရှိပါ။ lst1 နှင့် lst2 အကြား အပြောင်းအလဲပြုလုပ်၍ lst1 ၏ အစိတ်အပိုင်းအားလုံး အချိုးကျဖြစ်အောင်လုပ်နိုင်လျှင် ""YES"" ကိုပြန်ပို့ပါ။ မဟုတ်ပါက ""NO"" ကိုပြန်ပို့ပါ။ ဥပမာ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" အဝင်စာရင်းများမှာ အလွတ်မဟုတ်ကြောင်းယူဆထားသည်။""""""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,mya_Mymr,python,"
def histogram(test):
    """"""စာလုံးပေါင်းများစွာ ထပ်ကျော့ပါက စာလုံးပေါင်းအားလုံးကို ပြန်ပေးပါ ဥပမာ: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4} histogram ' (((') == {'b 4}) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,mya_Mymr,python,"
def reverse_delete(s,c):
    """"""Task ကျွန်တော်တို့မှာ s နဲ့ c ဆိုတဲ့ string နှစ်ခုရှိပါတယ် s ထဲက s နဲ့ c ထဲက character တွေကို delete လုပ်ပြီးရင် result string က palindrome ဖြစ်လားစစ်ဆေးရမယ်။ ရှေ့ပြန်နဲ့နောက်ပြန် တူညီတဲ့ result string ကိုပြန်ရင် string ကို palindrome လို့ခေါ်တယ်။ result string နဲ့ True/False ကိုပြန်တဲ့ tuple ကိုစစ်ဆေးရမယ်။ ဥပမာ s = ""abcde"", c = ""ae"" အတွက် result က ('bcd', False) s = ""abcdef"", c = ""b"" အတွက် result က ('acdef', False) s = ""abcdedcba"", c = ""ab"", အတွက် result က ('cdedc', True) ဖြစ်ရမယ်။""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,mya_Mymr,python,"
def odd_count(lst):
    """"""string များ၏စာရင်းကိုပေးထားပြီး string တစ်ခုစီသည်ဂဏန်းများသာပါဝင်သည် list တစ်ခုကိုပြန်ပေးပါ။ output ၏ element i တစ်ခုစီသည်"" input ၏ string i တွင် odd element များ၏အရေအတွက်"" ဖြစ်သင့်သည်။ i အားလုံးကို input ၏ i'th string တွင် odd digit များဖြင့်အစားထိုးသင့်သည်။ >>> odd_count['1234567']) [""the number of odd elements 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,mya_Mymr,python,"
def minSubArraySum(nums):
    """"""ကိန်းပြည့် n များ၏ array ကိုပေးထားလျှင်, မည်သည့်အလွတ်မဟုတ်သော n ၏ sub-array ၏အနည်းဆုံးပမာဏကိုရှာပါ။ ဥပမာ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,mya_Mymr,python,"
def max_fill(grid, capacity):
    import math
    """"""သင်ဟာရေတွင်းများ၏စတုဂံ grid ကိုပေးထားသည်။တစ်ခုစီကတစ်ခုတည်းသောရေတွင်းကိုကိုယ်စားပြုပြီးတစ်ခုစီမှာ 1 တစ်ခုတည်းသောရေယူနစ်ကိုကိုယ်စားပြုသည်။ရေတွင်းတစ်ခုစီမှာရေထုတ်ယူရန်အသုံးပြုနိုင်သောတူညီသော bucket ရှိပြီး buckets အားလုံးသည်တူညီသောစွမ်းရည်ရှိသည်။သင်၏တာဝန်သည် buckets များကိုအသုံးပြု၍ရေတွင်းများကိုအလွတ်ချရန်ဖြစ်သည်။အခွန်များအားအခွန်များချရန်လိုအပ်သောအကြိမ်အရေအတွက်ကို output ပေးပါ။ဥပမာ: 1: အဝင်: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 output: 62: Input: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 output: 53: Input: [[:0,0,0], [0,0,0]] bucket_capacity: 5 output: 0 * constraints: 1 * output: 1 * constraints: 1 * all lengths have the same length: 1 * length: 10 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * length: 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,mya_Mymr,python,"
def sort_array(arr):
    """"""ဤကတ္တားတွင်၊ သင်သည် အနှုတ်လက္ခဏာမဟုတ်သော ဖြောင့်ကိန်းများကို ၎င်းတို့၏ ဘိုင်နရီ ကိုယ်စားပြုမှုတွင် တစ်များအရေအတွက်အရ တက်တက်သော အစီအစဉ်ဖြင့် စီစဉ်ရသည်။ အလားတူသော တစ်များအတွက်၊ ဆယ်လီတန်ဖိုးကို အခြေခံ၍ စီစဉ်ပါ။ ၎င်းကို ဤသို့အကောင်အထည်ဖော်ရမည်: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,mya_Mymr,python,"
def select_words(s, n):
    """"""string s နှင့် natural number n ကိုပေးထားလျှင် string s မှအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံတူအသံသံသံသံတူအသံသံတူအသံတူအသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံသံ""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,mya_Mymr,python,"
def get_closest_vowel(word):
    """"""သင်ဟာစကားလုံးတစ်လုံးပေးထားတယ်။ သင့်တာဝန်ကစကားလုံးရဲ့ညာဘက်ခြမ်းကနေအသံတူနှစ်ခုကြားမှာတည်ရှိတဲ့အနီးစပ်ဆုံးအသံကိုရှာဖို့ (case sensitive) ။ အစနဲ့အဆုံးကအသံတူတွေကိုမရေတွက်ပါ။ အထက်ပါအခြေအနေကိုမပြည့်မီတဲ့အသံတူမရှိရင်အလွတ် string ကိုပြန်ပေးပါ။ ပေးထားတဲ့ string မှာ အင်္ဂလိပ်စာလုံးသာပါတယ်လို့ယူဆနိုင်ပါတယ်။ ဥပမာ: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,mya_Mymr,python,"
def match_parens(lst):
    '''သင်ဟာ string နှစ်ခုစာရင်းပေးထားပြီး နှစ်ခုစလုံးမှာ open parentheses '(' သို့မဟုတ် close parentheses ') 'သာပါဝင်ပါတယ်။ သင့်အလုပ်က string နှစ်ခုကို တစ်ချို့အစဉ်အတိုင်းဆက်သွယ်နိုင်လားဆိုတာစစ်ဆေးဖို့၊ ရလဒ် string ကောင်းလိမ့်မလားဆိုတာစစ်ဆေးဖို့ပါ။ S ထဲက parentheses အားလုံးညီမျှမှသာ string S ကိုကောင်းတယ်လို့ယူဆရမှာပါ။ ဥပမာ: string '((()) 'ကကောင်းတယ် string '()) 'ကမဟုတ်ပါ။ string ကောင်းအောင်လုပ်နည်းရှိရင် 'Yes' ပြန်ပေးပြီး အခြားနည်းဆိုရင် 'No' ပြန်ပေးပါ။ ဥပမာ: match_parens [('() ', ') ']) == 'Yes' match_parens [(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,mya_Mymr,python,"
def maximum(arr, k):
    """"""array တစ်ခုမှာ integer တွေနဲ့ positive integer k ရှိရင် array ထဲက k အမြင့်ဆုံး ကိန်းဂဏန်းတွေနဲ့ sorted list တစ်ခုကို ပြန်ပေးပါ။ ဥပမာ ၁: အဝင်: arr = [-3, -4, 5], k = ၃ အထုတ်: [-4, -3, 5] ဥပမာ ၂: အဝင်: arr = [4, -4, 4], k = ၂ အထုတ်: [4, 4] ဥပမာ ၃: အဝင်: arr = [-3, 2, 1, 2, -1, -2, 1], k = ၁ အထုတ်: [2] မှတ်ချက်: ၁: array ရဲ့အရှည်က [1, 1000] အကြားမှာရှိမယ်။ ၂: array ထဲက element တွေက [-1000, 1000] အကြားမှာရှိမယ်။ ၃: 0 <= k <= len ((arr)""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,mya_Mymr,python,"
def solution(lst):
    """"""ဖြောင့်ကိန်းများ၏ အလွတ်မဟုတ်သော စာရင်းကို ပေးထားလျှင်၊ နေရာတူရှိသော odd အစိတ်အပိုင်းများ၏ ပေါင်းလဒ်ကို ပြန်ပေးပါ။ ဥပမာ အဖြေ (([5, 8, 7, 1]) ==> 12 အဖြေ (([3, 3, 3, 3, 3]) ==> 9 အဖြေ (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,mya_Mymr,python,"
def add_elements(arr, k):
    """"""ဖြောင့်ကိန်း arr နှင့် ဖြောင့်ကိန်း k တို့၏ အလွတ်မဟုတ်သော မေထရစ်တစ်ခုပေးထားလျှင် arr ၏ ပထမဆုံး k ဒြပ်စင်များမှ အနည်းဆုံး ဂဏန်းနှစ်လုံးပါသည့် ဒြပ်စင်များ၏ ပေါင်းလဒ်ကို ပြန်ပေးပါ။ ဥပမာ: အဝင်: arr = [111,21,3,4000,5,6,7,8,9], k = 4 ထွက်: 24 # sum of 21 + 3 Constraints: 1.""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,mya_Mymr,python,"
def get_odd_collatz(n):
    """"""အပေါင်းကိန်း n ကိုပေးထားလျှင် ကော်လတ်ဇ် အစဉ်အတိုင်း မကိန်းများပါသော စီစဉ်ထားသော စာရင်းကို ပြန်ပေးပါ။ ကော်လတ်ဇ် ထင်ကြေးသည် သင်္ချာပညာတွင် အောက်ပါအတိုင်း သတ်မှတ်ထားသော အစဉ်တစ်ခုနှင့် သက်ဆိုင်သော ထင်ကြေးဖြစ်သည်။ မည်သည့် အပေါင်းကိန်း n မှ စတင်ပါ။ ထို့နောက် သက်တမ်းတစ်ခုစီကို ယခင် သက်တမ်းမှ အောက်ပါအတိုင်း ရယူပါသည်- ယခင် သက်တမ်းသည် သာတူပါက နောက်တစ်သက်တမ်းသည် ယခင် သက်တမ်း၏ တစ်ဝက်ဖြစ်သည်။ ယခင် သက်တမ်းသည် သာတူပါက နောက်တစ်သက်တမ်းသည် ယခင် သက်တမ်း၏ ၃ ဆနှင့် အပေါင်း ၁ ဖြစ်သည်။ ထင်ကြေးမှာ n ၏ မည်သည့် တန်ဖိုးမျှရှိသည်ဖြစ်စေ အစဉ်လိုက်သည် အမြဲတမ်း ၁ ကို ရောက်ရှိလိမ့်မည်။ မှတ်ချက်: ၁. ကော်လတ်ဇ် (၁) သည် [1] ဖြစ်သည်။ ၂. ပြန်ပေးသော စာရင်းကို တိုးတက်သော အဆင့်အတိုင်း စီစဉ်ထားသည်။ ဥပမာ: get_odd_collatz (၅) သည် [၁၊ ၅] ကို ပြန်ပေးသည်။ ၅ အတွက် ကော်လတ်ဇ် အစဉ်လိုက်သည် [၅၊ ၈၊ ၁၆၊ ၄၊ ၂၊ ၁] ဖြစ်သောကြောင့် သာမန်ကိန်းများမှာ ၁ နှင့် ၅ သာဖြစ်ပါသည်။""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,mya_Mymr,python,"
def valid_date(date):
    """"""Date string ကို validate လုပ်ပြီး True ကိုပြန်ပေးမယ့် function တစ်ခုကိုရေးရမယ်။ date string က valid ဖြစ်ရင် True ပြန်ပေးမယ်။ မဟုတ်ရင် False ပြန်ပေးမယ်။ date က valid ဖြစ်ရင် date က valid ဖြစ်မယ်။ အောက်ပါ စည်းမျဉ်းတွေ အားလုံးကို ကျေနပ်ရင် date က valid ဖြစ်မယ်။ 1. date string က empty မဟုတ်ဘူး။ 2. ရက်ပေါင်းက 1 ထက်မနည်း ဒါမှမဟုတ် 31 ရက်ထက်ပိုမများရင် လပေါင်း 1,3,5,7,8,10,12 လပေါင်း 4,6,9,11 လပေါင်း 30 ရက်ထက်မနည်း ဒါမှမဟုတ် 1 ရက်ထက်ပိုမများရင် လပေါင်း 2 လပေါင်း 1 ရက်ထက်မနည်း ဒါမှမဟုတ် 29 ရက်ထက်ပိုမများရင် လပေါင်း 12 လထက်မနည်း 1 ရက်ထက်မနည်း ဒါမှမဟုတ် 12 ရက်ထက်ပိုမများရင် လပေါင်းက mm-dd-yyyy ဖြစ်ရမယ်။ ဥပမာ: valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-01-2040') => false_date (('06-04-2020') => valid_date (('06-04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,mya_Mymr,python,"
def split_words(txt):
    '''စကားလုံးများ၏ string ကိုပေးထားသည်, စာသားတွင်အဖြူကွက်မရှိပါကသင်သည် ',' ကို commas ပေါ်တွင်ခွဲခြားသင့်သည်, စာသားတွင်အဖြူကွက်မရှိပါကသင်သည်အက္ခရာစဉ်တွင် odd order ဖြင့် lowercase စာလုံးအရေအတွက်ကိုပြန်ပေးရမည်, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 ဥပမာများ split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words"" ((abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,mya_Mymr,python,"
def is_sorted(lst):
    '''နံပါတ်များစာရင်းကိုပေးထားလျှင်၎င်းတို့သည်တက်လာသောစီစဉ်မှုဖြင့်စီစဉ်ထားသည်ဖြစ်စေ၊ မပြုလုပ်သည်ဖြစ်စေပြန်လည်ပေးပါ။စာရင်းတွင်တူညီသောနံပါတ်တစ်မျိုးထက်ပိုပါက False ပြန်ပေးပါ။အနှုတ်လက္ခဏာကိန်းများမရှိဘဲ integer များသာယူပါ။ဥပမာ is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 3, 2, 4, 5, 6, 7]) -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,mya_Mymr,python,"
def intersection(interval1, interval2):
    """"""သင်သည်နှစ်ခုပေးထားသည် ကြားကာလ, ဘယ်မှာတစ်ခုစီက integer များ၏တစ်စုံဖြစ်ပါသည်. ဥပမာ, ကြားကာလ = (စတင်, အဆုံးသတ်) = (1, 2). ပေးထားသောကြားကာလပိတ်ထားသည်, ကြားကာလ (စတင်, အဆုံးသတ်) နှစ်ဦးစလုံးအစနှင့်အဆုံးပါဝင်သည်ဆိုလိုသည်. ပေးထားသောကြားကာလတိုင်းအတွက်, ၎င်း၏စတင်သည်အနည်းဆုံးသို့မဟုတ်အဆုံးနှင့်ညီမျှသည်ယူဆထားသည်။သင်၏တာဝန်သည်ဤနှစ်ခုကြားကာလ၏ဖြတ်လမ်းအရှည်သည်ပထမဦးရေတစ်ခုဖြစ်သည်မဖြစ်ကိုသတ်မှတ်ရန်ဖြစ်သည်။ ဥပမာ, ကြားကာလ (1, 3), (2, 4) ၏ဖြတ်လမ်းအရှည်သည်ပထမဦးရေမဟုတ်သော (1 ဖြစ်သည်) (2, 3) ဖြစ်သည်။ အကယ်၍ဖြတ်လမ်းအရှည်သည်ပထမဦးရေဖြစ်လျှင် ""YES"" ပြန်ပေးပါ, မဟုတ်လျှင် ""NO"" ပြန်ပေးပါ။ အကယ်၍ ကြားကာလနှစ်ခုကဖြတ်လမ်းမတူပါက ""NO"" ပြန်ပေးပါ။ [input / output] နမူနာများ: intersection (((1, 2), (2, 3) ==> ""intersection (-1, 2) ==> ""intersection (-1, 4) ""intersection (-1, 4) ""==>"" NO - 5"", == (-3, 5) ""YES"" - ""YES"" ())""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,mya_Mymr,python,"
def prod_signs(arr):
    """"""သင်သည် integer များ၏ array ကိုပေးထားပြီးသင်သည် integer များ၏တန်ဖိုးများကိုပေါင်း၍ array တွင်ရှိနံပါတ်တိုင်း၏သင်္ကေတအားလုံး၏ product ကိုပြန်ရမည်။ မှတ်ချက်: return None for empty arr. ဥပမာ: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,mya_Mymr,python,"
def minPath(grid, k):
    """"""အလျား k ရှိသည့် grid တစ်ခုတွင် အတန်း N နှင့် အတိုင် N (N >= 2) နှင့် အပေါင်းကိန်း k ရှိလျှင် grid ၏ cell တစ်ခုစီတွင် တန်ဖိုးတစ်ခု ပါဝင်သည်။ [1, N * N] အပါအဝင် range ရှိသည့် integer တိုင်းသည် grid ၏ cells များတွင် တစ်ကြိမ်တည်းသာ ပေါ်ပေါက်သည်။ သင်သည် grid ၏ အလျား k ရှိသည့် အနည်းဆုံးလမ်းကြောင်းကို ရှာဖွေရမည်ဖြစ်သည်။ သင်သည် မည်သည့် cell မှမဆို စတင်နိုင်ပြီး အဆင့်တိုင်းတွင် အိမ်နီးချင်း cells များသို့ သွားနိုင်သည်။ တစ်နည်းအားဖြင့် သင်နှင့် လက်ရှိ cell တစ်ခု၏ အစွန်းတစ်ဖက်မျှဝေသော cells များသို့ သွားနိုင်သည်။ k ရှိသောလမ်းကြောင်းသည် k ကွက်လပ်များကို (မလိုအပ်ဘဲကွဲပြားသော) ကို အတိအကျ သွားရောက်ခြင်းဟု ဆိုလိုသည်ကို သတိပြုပါ။ သင်သည် grid မှထွက်၍ မရပါ။ A (k အလျား) လမ်းကြောင်းသည် A နှင့် B (k အလျား) ရှိသော path B (of) ထက်နည်းသည်ဟု ယူဆရလျှင် (၎င်းတို့ကို lA_st နှင့် lA_stB ဟုခေါ်ကြစို့) lA_stB သည် lexically lA_stB ထက်နည်းဆုံးဖြစ်သည်၊ အခြားစကားများနှင့်အညီ၊ lA_stB ၏ အလျား k တစ်လုံးရှိသည် k အတိုင်းနှင့်တူသည်။ ဥပမာများမှာ: [4,4, lA = lj, j[1, lA_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l_j, l""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,mya_Mymr,python,"
def tri(n):
    """"""Fibonacci Sequence ကို လူတိုင်းသိကြပြီး ပြီးခဲ့တဲ့ ရာစုနှစ်နှစ်အနည်းငယ်က သင်္ချာပညာရှင်တွေက နက်နက်နဲနဲ လေ့လာခဲ့ကြပါတယ်။ ဒါပေမယ့် လူတွေက မသိကြတာက Tribonacci Sequence ပါ။ Tribonacci Sequence ကို ထပ်ကျော့ခြင်းအားဖြင့် သတ်မှတ်ပါတယ်။ tri(1) = 3 tri(n) = 1 + n / 2, n သည် အချိုးကျဆိုရင် tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), n သည် odd ဖြစ်ရင် tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 သင်ဟာ အနှုတ်ဂဏန်းမဟုတ်တဲ့ ကိန်းပြည့် n ကို ပေးထားပြီး သင်ဟာ Tribonacci Sequence ရဲ့ ပထမ n + 1 ကိန်းတွေရဲ့ စာရင်းကို ပြန်ပေးရမှာပါ။ ဥပမာ: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,mya_Mymr,python,"
def digits(n):
    """"""အပေါင်းကိန်းပြည့် n ကိုပေးလျှင် ဂဏန်းများ၏ ဂဏန်းပေါင်းလဒ်ကိုပြန်ပေးပါ။ ဂဏန်းအားလုံးသည် အချိုးညီပါက ၀ ကိုပြန်ပေးပါ။ ဥပမာ: ဂဏန်းများ (၁) == ဂဏန်း ၁ ဂဏန်း (၄) == ဂဏန်း ၀ ဂဏန်း (၂၃၅) == ၁၅ """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,mya_Mymr,python,"
def is_nested(string):
    '''စတုရန်း ကပ် parentheses သာပါဝင်သော string ကို input အဖြစ်ယူသော function တစ်ခုကိုဖန်တီးပါ။ ကပ် parentheses အနည်းဆုံးတစ်ခု nested ဖြစ်သော bracket များ၏မှန်ကန်သောနောက်ဆက်တွဲရှိလျှင်သာ function သည် True ကိုပြန်ရသင့်သည်။ is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,mya_Mymr,python,"

def sum_squares(lst):
    """"""သင်သည်ဂဏန်းများစာရင်းကိုပေးထားသည်။ သင်ပေးထားသောစာရင်းတွင်နှစ်ထပ်ကိန်းများစုစုပေါင်းကိုပြန်ပေးရန်လိုအပ်သည်၊ စာရင်းရှိ element တစ်ခုစီကိုအပေါ်ဆုံး int သို့အဝိုင်းဆွဲပါ (ကန့်သတ်ချက်) ပထမ။ ဥပမာများ: For lst = [1,2,3] ထွက်ပေါက်သည် 14 For lst = [1,4,9] ထွက်ပေါက်သည် 98 For lst = [1,3,5,7] ထွက်ပေါက်သည် 84 For lst = [1.4,4.2,0] ထွက်ပေါက်သည် 29 For lst = [-2.4,1,1] ထွက်ပေါက်သည် 6 ဖြစ်ရမည်။""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,mya_Mymr,python,"
def check_if_last_char_is_a_letter(txt):
    '''ပေးထားသော string ၏နောက်ဆုံးအက္ခရာသည်အက္ခရာစဉ်အက္ခရာဖြစ်ပြီးစကားလုံး၏တစ်စိတ်တစ်ပိုင်းမဟုတ်လျှင် True ကိုပြန်လည်ပေးပို့သော function တစ်ခုကိုဖန်တီးပါ သို့မဟုတ် False ကိုပြန်လည်ပေးပို့ပါ။ မှတ်ချက်: ""word"" သည်စာလုံးစုတစ်စုဖြစ်ပြီးအခြားစာလုံးစုများကိုအကွက်ဖြင့်ခွဲထားသည်။ ဥပမာ: check_if_last_char_is_a_letter ((""apple pie"") â -> False check_if_last_char_is_a_letter ((""apple pi e"") â -> True check_if_last_char_is_a_letter ((""apple pi e"") â -> False check_if_last_char_is_a_letter"" ((("") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,mya_Mymr,python,"
def can_arrange(arr):
    """"""အထက်ပါအမှတ်ထက်မပိုသော သို့မဟုတ် အထက်ပါအမှတ်နှင့် ညီမျှသော အက္ခရာ၏ အကြီးဆုံးကိန်းညွှန်းကိန်းကို ပြန်ပေးသော လုပ်ဆောင်ချက်တစ်ခု ဖန်တီးပါ။ ထိုကဲ့သို့သော အက္ခရာမရှိပါက -1 ကိုပြန်ပေးပါ။ ပေးထားသော မေထရစ်တွင် ထပ်တူကျသော တန်ဖိုးများ မပါရှိပါ။ ဥပမာ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,mya_Mymr,python,"
def largest_smallest_integers(lst):
    ''''a' သည် အနှုတ်ကိန်းပြည့်များအနက် အကြီးဆုံးဖြစ်ပြီး 'b' သည် အပေါင်းကိန်းပြည့်များအနက် အသေးဆုံးဖြစ်သော tuple (a, b) ကိုပြန်လည်ပေးပို့သော function တစ်ခုကို ဖန်တီးပါ။ အနှုတ် သို့မဟုတ် အပေါင်းကိန်းပြည့်များမရှိပါက None အဖြစ်ပြန်လည်ပေးပို့ပါ။ ဥပမာ: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None)'''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,mya_Mymr,python,"
def compare_one(a, b):
    """"""အတည့်တည့်ကိန်းများ၊ floats များ၊ သို့မဟုတ် string များကို ကိုယ်စားပြုသော function တစ်ခုကို ဖန်တီးပြီး ၎င်း၏ပေးထားသော variable အမျိုးအစားတွင် အကြီးဆုံး variable ကိုပြန်ပေးသည်။ တန်ဖိုးများတူညီပါက None ကိုပြန်ပေးပါ။ မှတ်ချက်: အကယ်၍ အတည့်တည့်ကိန်းတစ်ခုသည် string တစ်ခုအဖြစ်ကိုယ်စားပြုထားပါက floating point သည် . သို့မဟုတ် , compare_one ((1, 2.5) â -> 2.5 compare_one ((1, ""2,3"") â -> ""2,3"" compare_one ((5,1"", ""6"") â -> ""6"" compare_one ((1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,mya_Mymr,python,"
def is_equal_to_sum_even(n):
    """"""ပေးထားသော n ကို အပေါင်းကိန်း ၄ ခု၏ ပေါင်းလဒ်အဖြစ် ရေးနိုင်သည်၊ မရေးနိုင်သည်ကို အကဲဖြတ်ပါ ဥပမာ is_equal_to_sum_even (၄) == မှားသည် is_equal_to_sum_even (၆) == မှားသည် is_equal_to_sum_even (၈) == မှန်သည် """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,mya_Mymr,python,"
def special_factorial(n):
    """"""ဘရာဇီး၏ factorial ကို: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! n > 0 ဥပမာ: >>> special_factorial ((4) 288 လုပ်ဆောင်ချက်သည် ၀ င်ငွေအဖြစ် integer တစ်ခုကိုလက်ခံရရှိပြီးဤ integer ၏ထူးခြားသောအချက်ပြကိန်းကိုပြန်ပေးရမည်။ """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,mya_Mymr,python,"
def fix_spaces(text):
    """"""_ဥပမာ-၃ှင် ၎င်းတွင်ရှိသော နေရာများကို အောက်ခြေဖြတ်အက္ခရာများဖြင့် အစားထိုးပြီး စာတန်းတစ်ခုတွင် အဆက်အသွယ်ရှိသော နေရာ ၂ ခုထက် ပိုပါက အဆက်အသွယ်ရှိသော နေရာများကို - fix_spaces ((""ဥပမာ"") == ""ဥပမာ"" fix_spaces ((""ဥပမာ၁"") == ""ဥပမာ_၁"" fix_spaces (((""ဥပမာ၂"") == ""ဥပမာ_၂"" fix_spaces (((""ဥပမာ ၃"") == ""_ဥပမာ-၃""  ဖြင့် အစားထိုးပါ။""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,mya_Mymr,python,"
def file_name_check(file_name):
    """"""ဖိုင်နာမည်ကို ကိုယ်စားပြုသော string ကိုယူပြီး 'Yes' ပြန်ပေးပြီး ဖိုင်နာမည်မှန်လျှင် 'No' ပြန်ပေးသော function တစ်ခုကို ဖန်တီးပါ။ ဖိုင်နာမည်သည် အောက်ပါ အခြေအနေများအားလုံးပြည့်စုံလျှင်သာ ဖိုင်နာမည်သည် မှန်ကန်သည်ဟု ယူဆရသည်။ - ဖိုင်နာမည်တွင် ဂဏန်းသုံးလုံးထက်ပို၍ မရှိသင့်ပါ။ - ဖိုင်နာမည်တွင် အမှတ်တစ်ခုတည်းသာ ပါဝင်သည်။ - အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အမှတ်အ""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,mya_Mymr,python,"


def sum_squares(lst):
    """""""" ဤလုပ်ဆောင်ချက်သည် ကိန်းပြည့်များစာရင်းကို ယူလိမ့်မည်။ စာရင်းရှိ အဝင်အမှတ်အားလုံးအတွက် ၎င်း၏ညွှန်းကိန်းသည် ၃ ၏မြှောက်ကိန်းဖြစ်ပါက လုပ်ဆောင်ချက်သည် ကိန်းပြည့်အဝင်ကို နှစ်ထပ်တင်ရမည်ဖြစ်ပြီး ၎င်း၏ညွှန်းကိန်းသည် ၄ ၏မြှောက်ကိန်းမဟုတ်ဘဲ ၃ ၏မြှောက်ကိန်းဖြစ်ပါက ကိန်းပြည့်အဝင်ကို သုံးထပ်တင်ရမည်ဖြစ်သည်။ လုပ်ဆောင်ချက်သည် စာရင်းရှိ အဝင်အမှတ်များကို ပြောင်းလဲမည်မဟုတ်ပါ။ ၎င်း၏ညွှန်းကိန်းများသည် ၃ သို့မဟုတ် ၄ ၏မြှောက်ကိန်းမဟုတ်ပါ။ လုပ်ဆောင်ချက်သည် အဝင်အမှတ်အားလုံး၏ ပေါင်းလဒ်ကို ပြန်ပေးရမည်။ ဥပမာ: lst = [1,2,3] အတွက် ထွက်ပေါက်သည် ၆ ဖြစ်သင့်သည်။ lst = [] အတွက် ထွက်ပေါက်သည် ၀ ဖြစ်သင့်သည်။ lst = [-1,-5,2,-1,-5] အတွက် ထွက်ပေါက်သည် -126 ဖြစ်သင့်သည်။""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,mya_Mymr,python,"
def words_in_sentence(sentence):
    """"""သင်ဟာဝါကျကိုကိုယ်စားပြုတဲ့ string ကိုပေးထားတယ်၊ အဆိုပါဝါကျမှာ space နဲ့ခွဲထားတဲ့စကားလုံးတစ်ချို့ပါရှိပြီးအဓိကကိန်းတွေပါရှိတဲ့မူလဝါကျထဲကစကားလုံးတွေပါရှိတဲ့ string တစ်ခုကိုပြန်ပေးရမယ်။ string အသစ်ထဲကစကားလုံးတွေရဲ့အစဉ်အတန်းဟာမူလနဲ့တူသင့်တယ် Example1: Input: sentence = ""This is a test"" Output: ""is"" Example2: Input: sentence = ""lets go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,mya_Mymr,python,"
def simplify(x, n):
    """"""x * n ကို ရိုးရှင်းစေမည့် function ကိုလုပ်ဆောင်ရန်ဖြစ်သည်။ x * n သည် ကိန်းပြည့်တစ်ခုဖြစ်လျှင် function သည် True ကိုပြန်ပေးပြီး အခြားကိစ္စများတွင် False ကိုပြန်ပေးသည်။ x နှင့် n နှစ်ခုလုံးသည် အပိုင်းကိန်းတစ်ခု၏ string ကိုယ်စားပြုမှုဖြစ်ပြီး အောက်ပါပုံစံရှိသည်၊ <numerator> / <denominator> ရှိသည်၊ အဲဒီမှာ အပိုင်းကိန်းနှင့် အမည်ကိန်းနှစ်ခုလုံးသည် အပေါင်းကိန်းပြည့် ကိန်းများဖြစ်သည်။ x နှင့် n သည် မှန်ကန်သော အပိုင်းကိန်းများဖြစ်ပြီး အမည်ကိန်းအဖြစ် သုညမရှိဟုယူဆနိုင်သည်။ simplify "" 1/5 ""၊ ""5/1"") = True simplify "" 1/6 ""၊ ""2/1"") = False simplify "" 7/10 ""၊ ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,mya_Mymr,python,"
def order_by_points(nums):
    """"""ပေးထားသော ကိန်းပြည့်စာရင်းကို ၎င်းတို့၏ ဂဏန်းများစုပေါင်းမှုအရ မြင့်တက်သော အစီအစဉ်ဖြင့် စီစဉ်ပေးသော လုပ်ဆောင်ချက်ကိုရေးပါ။ မှတ်ချက်: တူညီသော ဂဏန်းများစုပေါင်းမှုရှိသော အပိုင်းများစွာရှိပါက မူလစာရင်းရှိအညွှန်းကိန်းကို အခြေခံ၍ စီစဉ်ပါ။ ဥပမာ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,mya_Mymr,python,"
def specialFilter(nums):
    """"""နံပါတ်များ၏ array ကို input အဖြစ်ယူပြီး array ထဲရှိ element အရေအတွက် 10 ထက်ပိုပြီး နံပါတ်၏ပထမနှင့်နောက်ဆုံး digits နှစ်ခုလုံးသည် odd ဖြစ်သည် (၁၊ ၃၊ ၅၊ ၇၊ ၉) ကိုပြန်လည်ပေးပို့သော function တစ်ခုကိုရေးပါ။ ဥပမာ: specialFilter (([၁၅၊ -၇၃၊ ၁၄၊ -၁၅]) => 1 specialFilter (([33, -၂၊ -၃၊ ၄၅၊ ၂၁၊ ၁၀၉)) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,mya_Mymr,python,"
def get_max_triples(n):
    """"""သင်ဟာ အပေါင်းကိန်းတစ်ခု n ကိုပေးထားတယ်။ သင်ဟာ အရှည် n ရှိတဲ့ integer array တစ်ခုကို ဖန်တီးရမယ်။ i (1 ‰¤ i ‰¤ n) တိုင်းအတွက် a[i] = i * i - i + 1 တန်ဖိုးကိုပေးပါ။ a ရဲ့ သုံးထပ်ကိန်း (a[i], a[j], a[k]) အရေအတွက်ကိုပြန်ပေးပါ။ ဒီမှာ i < j < k, ပြီးတော့ a[i] + a[j] + a[k] က 3 ရဲ့ မြှောက်ဖော်ကိန်းပါ။ ဥပမာ: အဝင်: n = 5 ထွက်: 1 ရှင်းလင်းချက်: a = [1, 3, 7, 13, 21] တစ်ခုတည်းသောမှန်ကန်သော သုံးထပ်ကိန်းက (1, 7, 13) ပါ။""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,mya_Mymr,python,"
def bf(planet1, planet2):
    '''နေအဖွဲ့အစည်းတွင် ဂြိုဟ် ၈ လုံးရှိသည်။ နေနှင့်အနီးဆုံးဂြိုဟ်မှာ ဗုဒ္ဓဟူး၊ နောက်တစ်ခုမှာ သောကြာ၊ နောက်ပိုင်းတွင် ကမ္ဘာ၊ အင်္ဂါ၊ ကြာသပတေး၊ စနေ၊ ယူရန်၊ နတ်ပုဒ်။ ဂြိုဟ် ၁ နှင့် ဂြိုဟ် ၂ ဂြိုဟ်များကို ကြိုးအဖြစ်ယူသော လုပ်ဆောင်ချက်တစ်ခုရေးပါ။ ဂြိုဟ် ၁ နှင့် ဂြိုဟ် ၂ ဂြိုဟ်တို့အကြားရှိ ဂြိုဟ်များအားလုံးပါဝင်သော tuple တစ်ခုကို နေနှင့်အနီးဆုံးနေရာတွင်ရွေးချယ်ပြီးပြန်ပေးသင့်သည်။ ဂြိုဟ် ၁ သို့မဟုတ် ဂြိုဟ် ၂ သည်ဂြိုဟ်အမည်မှန်မဟုတ်ပါက လုပ်ဆောင်ချက်သည်အလွတ် tuple တစ်ခုကိုပြန်ပေးသင့်သည်။ ဥပမာ bf""(ဂျူပီတာ"", ""နတ်ပုဒ်"") ==> (""စနေ"", ""ယူရန်"") bf(""မြေ"", ""ဗုဒ္ဓဟူး"") ==> (""ဗုဒ္ဓဟူး"") bf""သတ္တဝါ"", ""ယူရန်"") ==> (""ဗုဒ္ဓဟူး"", ""မြေ"", ""ဂြိုဟ်"", ""ဇူပီတာ"", ""စနေ"") ]]'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,mya_Mymr,python,"
def sorted_list_sum(lst):
    """"""string များစာရင်းကို parameter အဖြစ်လက်ခံပြီး odd length ရှိသော string များကိုပယ်ဖျက်ပြီး sorted order ဖြင့်ရလဒ်စာရင်းကိုပြန်ပေးသော function တစ်ခုရေးပါ။ စာရင်းသည်အမြဲ string များစာရင်းဖြစ်ပြီးကိန်းဂဏန်း array တစ်ခုမဟုတ်ဘဲထပ်တူထပ်တူပါရှိနိုင်သည်။စာရင်း၏အစဉ်သည်စကားလုံးတိုင်း၏အရှည်အတိုင်းတက်လာသင့်ပြီးသင်သည်ဤစည်းမျဉ်းအတိုင်း sorted list ကိုပြန်ပေးသင့်သည်။စကားလုံးနှစ်လုံးသည်အရှည်တူပါကစာရင်းကိုအက္ခရာစဉ်အတိုင်း sort လုပ်ပါ။ function သည် string များစာရင်းကို sorted order ဖြင့်ပြန်ပေးသင့်သည်။စကားလုံးအားလုံးအရှည်တူလိမ့်မည်ဟုသင်ယူဆနိုင်သည်။ဥပမာ: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,mya_Mymr,python,"
def x_or_y(n, x, y):
    """"""n သည် ပရမ်းမကိန်းဖြစ်လျှင် x ၏တန်ဖိုးကိုပြန်ပေးရမည့် ရိုးရှင်းသောပရိုဂရမ်ဖြစ်ပြီး y ၏တန်ဖိုးကိုပြန်ပေးရမည့်သာလျှင်။ ဥပမာများ: x_or_y(7, 34, 12) == 34 x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,mya_Mymr,python,"
def double_the_difference(lst):
    '''နံပါတ်စာရင်းတစ်ခုပေးထားလျှင်၊ စာရင်းထဲရှိ odd နံပါတ်များ၏ နှစ်ထပ်ကိန်းပေါင်းကိုပြန်ပေးပါ။ အနှုတ် သို့မဟုတ် အပြည့်အစုံမဟုတ်သော နံပါတ်များကို လျစ်လျူရှုပါ။ double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 အဝင်စာရင်းကအလွတ်ဆိုရင် 0 ပြန်ပေးပါ။ '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,mya_Mymr,python,"
def compare(game,guess):
    """"""သင်ကအဲဒီလိုပြောလိုက်ရင် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ် သင်ကအဲဒီလိုပြောလိုက်တာပဲဖြစ်မယ်""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,mya_Mymr,python,"
def Strongest_Extension(class_name, extensions):
    """"""သင်ဟာ အတန်းတစ်ခုရဲ့နာမည် (string တစ်ခု) နဲ့ extension တွေရဲ့စာရင်းကိုရမယ်။ extension တွေကို class ထဲကို class တွေထပ်ထည့်ဖို့သုံးရမယ်။ extension ရဲ့အားသာချက်ကတော့ အောက်ပါအတိုင်းဖြစ်တယ်။ CAP က extension ရဲ့နာမည်မှာရှိတဲ့ uppercase စာလုံးအရေအတွက်ဖြစ်ပါစေ၊ SM က extension ရဲ့နာမည်မှာရှိတဲ့ lowercase စာလုံးအရေအတွက်ဖြစ်ပါစေ၊ အားသာချက်က CAP - SM အပိုင်းနဲ့ပေးထားတယ်။ သင်ဟာအခိုင်မာဆုံး extension ကိုရှာပြီး ဒီပုံစံနဲ့ string တစ်ခုကိုပြန်ပို့ရမယ်။ ClassName.StrongestExtensionName။ အားသာချက်တူညီတဲ့ extension နှစ်ခု (သို့) ပိုများရင် စာရင်းမှာ အရင်ဆုံးပေါ်တဲ့ဟာကိုရွေးသင့်တယ်။ ဥပမာ သင်ဟာ ""Slices"" ကို class အဖြစ်နဲ့ extension တွေရဲ့စာရင်းကိုပေးထားတယ်ဆိုရင်၊ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ကတော့ 'Slices.SEviSliNGCes' လို့ပြန်ပို့သင့်တယ်။ ဘာလို့လဲဆိုတော့ 'SEviSliNGCes' က 'mySviSliNGCes' မှာရှိတဲ့ strongest extension ဖြစ်လို့ပါ၊ ဥပမာ 'AA' = 'Strongest_class' (Strongest_Extension) '၊""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,mya_Mymr,python,"
def cycpattern_check(a , b):
    """"""သင်ဟာစကားလုံး ၂ လုံးကိုပေးထားတယ်။ ဒုတိယစကားလုံး သို့မဟုတ် ၎င်း၏လည်ပတ်မှုတစ်ခုခုသည်ပထမဆုံးစကားလုံး၏အောက်ခြေတစ်ခုဖြစ်လျှင် True ကိုပြန်ရဖို့လိုသည်။ cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,mya_Mymr,python,"
def even_odd_count(num):
    """"""ကိန်းပြည့်တစ်ခုပေးလျှင် ကိန်းပြည့်နှင့် ကိန်းတစ်ပုဒ်စီရှိသည့် tuple ကိုပြန်ပေးသည် ဥပမာ: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,mya_Mymr,python,"
def int_to_mini_roman(number):
    """"""အပေါင်းကိန်းပြည့်ကိုပေးလျှင် ၎င်း၏ ရောမကိန်းဂဏန်းကို string အဖြစ်ရယူပြီး အက္ခရာငယ်ဖြင့်ပြန်ပေးပါ။ ကန့်သတ်ချက်များ: 1 <= num <= 1000 ဥပမာများ: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,mya_Mymr,python,"
def right_angle_triangle(a, b, c):
    '''တြိဂံ၏ ၃ ဘက်၏ အလျားများကို ပေးထားသည်။ သုံးဘက်တို့သည် ထောင့်မှန်တြိဂံကို ဖွဲ့စည်းလျှင် မှန်သော၊ အခြားလျှင် မှားသောကို ပြန်ပေးသည်။ ထောင့်မှန်တြိဂံသည် ထောင့်တစ်ခုသည် ထောင့်မှန် သို့မဟုတ် ၉၀ ဒီဂရီရှိသည့် တြိဂံဖြစ်သည်။ ဥပမာ: right_angle_triangle ((၃၊ ၄၊ ၅) == True right_angle_triangle ((၁၊ ၂၊ ၃)) == မှားယွင်း '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,mya_Mymr,python,"
def find_max(words):
    """"""string များစာရင်းကိုလက်ခံသော function တစ်ခုရေးပါ။ စာရင်းတွင်စကားလုံးအမျိုးမျိုးပါဝင်သည်။ ထူးခြားသောစာလုံးများအများဆုံးပါ ၀ င်သောစကားလုံးကိုပြန်ပေးပါ။ string များတွင်ထူးခြားသောစာလုံးများအများဆုံးပါက lexicographical order တွင်ပထမဆုံးပေါ်လာသောတစ်ခုကိုပြန်ပေးပါ။ find_max ((([""name"", ""of"", ""string""]) == ""string"" find_max (([""name"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,mya_Mymr,python,"
def eat(number, need, remaining):
    """"""သင်ဟာ ဆာလောင်နေတဲ့ ယုန်တစ်ကောင်ဖြစ်ပြီး သင်ဟာ ဂေါ်ဖီသီးအချို့ကို စားပြီးသားဖြစ်ပေမဲ့ ဒီနေ့ရဲ့ အစာစားပွဲကို ပြီးမြောက်အောင် ဂေါ်ဖီသီးတွေ ပိုစားဖို့လိုပါတယ်။ သင်ဟာ array တစ်ခုကို ပြန်ရမှာပါ။ [အစာစားပြီးနောက် စားသုံးခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်၊ အစာစားပြီးနောက် ကျန်ရစ်ခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်] ဂေါ်ဖီသီးတွေ လုံလောက်မှုမရှိရင် ကျန်ရစ်တဲ့ ဂေါ်ဖီသီးအားလုံးကို သင်စားမယ်၊ ဒါပေမဲ့ သင်ဟာ ဆာလောင်နေတုန်းပါ။ ဥပမာ: * စားတယ် (၅, ၆, ၁၀) -> [11, 4] * စားတယ် (၄, ၈, ၉) -> [12, 1] * စားတယ် (၁၀, ၁၀) -> [11, 0] * စားတယ် (၂, ၁၁, ၅) -> [၇, ၀] Variables: @number: သင်စားခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်ကို integer လုပ်ပါ။ @need: သင်စားဖို့လိုတဲ့ ဂေါ်ဖီသီးအရေအတွက်ကို integer လုပ်ပါ။ @remaining: ကျန်ရစ်ခဲ့တဲ့ ဂေါ်ဖီသီးအရေအတွက်ကို integer လုပ်ပါ။ Constrain: * 0 = 0 = <= 0 * 0 = <= 1000 * 0 = 0 = 0 = 0 = 0""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,mya_Mymr,python,"
def do_algebra(operator, operand):
    """"""Operator နှင့် Operand နှစ်ခုကို ပေးထားသည်။ ပထမစာရင်းတွင် အခြေခံ အယ်လ်ဂျီဘရာ လုပ်ဆောင်ချက်များရှိပြီး ဒုတိယစာရင်းမှာ ကိန်းပြည့်များစာရင်းဖြစ်သည်။ ပေးထားသော စာရင်းနှစ်ခုကို အယ်လ်ဂျီဘရာ ဖော်ပြချက်ကို တည်ဆောက်ရန်နှင့် ဤဖော်ပြချက်၏ တန်ဖိုးကို ပြန်လည်ပေးရန် အသုံးပြုပါ။ အခြေခံ အယ်လ်ဂျီဘရာ လုပ်ဆောင်ချက်များမှာ ပေါင်းထည့် (+) နှုတ်ယူ (-)) မြှောက် (*) ကြမ်းပြင်ခွဲခြမ်း (//) မြှောက်တင် (**) ဥပမာ: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 မှတ်ချက်: operator စာရင်းအရှည်သည် operand စာရင်းအရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်အရှည်""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,mya_Mymr,python,"
def solve(s):
    """"""သင် string s ကိုပေးထားသည်။ s[i] သည်စာလုံးတစ်လုံးဖြစ်လျှင်၎င်း၏ case ကိုအောက်မှအထက်သို့သို့သို့မဟုတ်တစ်ဖက်တစ်လမ်းသို့ပြောင်းပါ။ သို့မဟုတ်၎င်းကိုထားပါ။ string တွင်စာလုံးများမပါပါရှိပါက string ကိုပြန်လည်သုံးပါ။ လုပ်ဆောင်ချက်သည်ရလဒ် string ကိုပြန်လည်ပေးရမည်။ ဥပမာ solve ((""1234"") = ""4321"" solve ((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,mya_Mymr,python,"
def string_to_md5(text):
    """"""string 'text' ကို ပေးထားလျှင် ၎င်း၏ md5 hash တူညီသော string ကို ပြန်ပေးပါ။ 'text' သည် ဗလာ string ဖြစ်လျှင် None ကို ပြန်ပေးပါ။ >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,mya_Mymr,python,"
def generate_integers(a, b):
    """"""အပေါင်းကိန်းပြည့် a နှင့် b နှစ်ခုကိုပေးလျှင် a နှင့် b ကြားရှိ ကိန်းပြည့်များကို တက်စဉ်အတိုင်းပြန်ပေးပါ။ ဥပမာ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
