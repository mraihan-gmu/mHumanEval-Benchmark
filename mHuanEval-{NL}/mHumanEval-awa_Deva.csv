task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,awa_Deva,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""जांच करा कि का दिया गवा संख्याओं की सूची में, का कउनो दुइ संख्या एक दूसरे से अधिक घनिष्ठ है. उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,awa_Deva,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""इनपुट मा इ फलन कय एक स्ट्रिंग होय जेहमा नेस्टेड कोष्ठक कय कई समूह होत हैं। आपका लक्ष्य ऊ समूह कय अलग-अलग स्ट्रिंग मा अलग करब अहै अउर ऊ सूची लौटाब अहै। अलग-अलग समूह संतुलित (हर खुला कोष्ठक ठीक से बंद होत है) अउर एक दूसरे के भीतर नेस्टेड नाही है इनपुट स्ट्रिंग मा कउनो रिक्त स्थान कय अनदेखा करा। उदाहरणः >>> separate_paren_groups'(( ) (() (()))))))) '['() ', '(()) ', '(() ')) ]""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,awa_Deva,python,"

def truncate_number(number: float) -> float:
    """"""एक सकारात्मक फ्लोटिंग पॉइंट संख्या दिए गए, यह एक पूर्णांक भाग (देए गए संख्या से बड़ा पूर्णांक छोटा) और दशमलव (बाकी भाग हमेशा 1 से छोटा) में विघटित किया जा सकता है। संख्या का दशमलव भाग लौटाएं। उदाहरणः >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,awa_Deva,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""आपके पास बैंक खाता मा जमा अउर निकासी संचालन की सूची है जवन शून्य शेष से शुरू होत है. आपका काम इ पता लगाना है कि अगर कउनो बिंदु पर खाता शेष शून्य से नीचे गिर जात है, अउर उ बिंदु पर फ़ंक्शन को True लौटाया जाना चाहिए. अन्यथा इ गलत लौटाया जाना चाहिए. उदाहरणः >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,awa_Deva,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""इनपुट संख्याओं की दी गई सूची के लिए, इस डेटासेट के माध्य के आसपास औसत निरपेक्ष विचलन की गणना करें। औसत निरपेक्ष विचलन प्रत्येक तत्व और एक केंद्र बिंदु (इस मामले में औसत) के बीच औसत निरपेक्ष अंतर हैः MAD = औसत । x - x_mean । उदाहरण: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,awa_Deva,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""इनपुट सूची के हर दुई लगातार तत्वन के बीच एगो संख्या 'डिलिमिटर' डाली जाय `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,awa_Deva,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""इनपुट इ फलन कय एक स्ट्रिंग होय जवन नेस्टेड कोष्ठक कय खातिर कई समूह कय प्रतिनिधित्व करत है, जवन रिक्त स्थान से अलग होत है। प्रत्येक समूह कय खातिर, कोष्ठक कय नेस्टिंग कय सबसे गहिरा स्तर आउटपुट करा जाय। उदाहरण के लिए (() (()) मा नेस्टिंग कय अधिकतम दुइ स्तर होत है जबकि ((())) मा तीन। >>> parse_nested_parens('((()) ((())) () ((()) ((()))) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,awa_Deva,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""string का इनपुट सूची केवल उन सब्सट्रेड के लिए फ़िल्टर करें जिनमे दिया गया सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,awa_Deva,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""पूर्णांक कय देवल सूची कय खातिर, एक योग अउर सूची में सब पूर्णांक कय गुणनफल से युक्त एक ट्यूपल लौटाय । खाली योग 0 के बराबर होवे चाही अउर खाली गुणनफल 1 के बराबर होवे चाही । >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,awa_Deva,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""पूर्णांक कय दी गई सूची से, अनुक्रम में दी गई समय तक पाये जाय वाले अधिकतम रोलिंग तत्व कय सूची बनाइये। >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,awa_Deva,python,"

def is_palindrome(string: str) -> bool:
    """"""सबसे छोटा पैलिंड्रोम खोजें जउन एक आपूर्ति की गई स्ट्रिंग से शुरू होत है. एल्गोरिथ्म विचार सरल हैः - आपूर्ति की गई स्ट्रिंग का सबसे लंबा पोस्टफिक्स खोजें जो एक पैलिंड्रोम है. - स्ट्रिंग रिवर्स का एक स्ट्रिंग उपसर्ग का अंत करें जो पैलिंड्रोमिक प्रत्यय से पहले आता है। >>> make_palindrome('') ' ' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""जांचें कि क्या दी गई स्ट्रिंग एक पैलिंड्रोम है।""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,awa_Deva,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""इनपुट दुइ स्ट्रिंग a अउर b हयन जिनमा केवल 1 अउर 0 हयन. इन इनपुट पर बाइनरी XOR चलावैं अउर परिणाम को स्ट्रिंग के रूप मा भी लौटावा जाय। >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,awa_Deva,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""string list से, सबसे लम्बा string वापस लाएँ. एक ही लम्बाई के कई strings के मामले में पहला एक वापस लाएँ. इनपुट सूची खाली होने पर None वापस लाएँ. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,awa_Deva,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""दुइ पूर्णांक a अउर b का सबसे बड़ा सामान्य भाजक लौटाई >>> greatest_common_divisor ((3, 5) 1 >>> greatest_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,awa_Deva,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""input string का सबसे छोटा से सबसे लंबा तक सभी prefixes की सूची वापस करें >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,awa_Deva,python,"

def string_sequence(n: int) -> str:
    """"""एगो स्ट्रिंग लौटाई जेमे 0 से n तक के स्थान-सीमित संख्याएं होई. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,awa_Deva,python,"

def count_distinct_characters(string: str) -> int:
    """"""एक स्ट्रिंग दिए गए, पता करें कि कितने अलग-अलग वर्ण (केस के बावजूद) से बना है >>> count_distinct_characters ((('xyzXYZ') 3 >>> count_distinct_characters ((('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,awa_Deva,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""इनपुट इ फलन मा एक विशेष ASCII प्रारूप मा संगीत नोट प्रतिनिधित्व एक तार है. अपने पूर्णांक तार सूची कई धड़कन के अनुरूप पार्स गर्न छ. यहाँ एक लिजेन्ड छः 'o' नोट, पिछले चार धड़कन 'o' - आधा नोट, पिछले दो धड़कन ' - quater नोट, पिछले एक धड़कन >>> parse_music. 'o' . o' . o' . o' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,awa_Deva,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""पता लगावा की मूल स्ट्रिंग मा कितनी बार एक दी गई सबस्ट्रिंग मिल सकत है। ओवरलैपिंग केस का गणना करा। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,awa_Deva,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""इनपुट 'शून्य' से 'नौ' तक संख्याओं का एक अंतरिक्ष-सीमित स्ट्रिंग है. वैध विकल्प 'शून्य', 'एक', 'दो', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' और 'नौ' हैं. संख्याओं के साथ स्ट्रिंग को सबसे छोटे से सबसे बड़े क्रमबद्ध करें >>> sort_numbers (('तीन एक पांच') 'एक तीन पांच' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,awa_Deva,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""एक नंबर से आपूर्ति की गई सूची से (लंबाई कम से कम दो) का चयन करें और दो लौटाएं जो एक दूसरे के करीब हैं और उन्हें क्रम में लौटाएं (छोटी संख्या, बड़ी संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,awa_Deva,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""संख्याओं की सूची दी गई (कम से कम दो तत्वों का), उस सूची पर एक रैखिक परिवर्तन लागू करें, ताकि सबसे छोटी संख्या 0 हो और सबसे बड़ी संख्या 1 हो >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,awa_Deva,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""केवल पूर्णांक खातिर कउनो पायथन मान के सूची के फ़िल्टर करा >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,awa_Deva,python,"

def strlen(string: str) -> int:
    """"""दिए गए स्ट्रिंग की लंबाई का रिटर्न >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,awa_Deva,python,"

def largest_divisor(n: int) -> int:
    """"""एक दिई गई संख्या n के लिए, सबसे बड़ी संख्या का पता लगाएं जो n से छोटा है, n से छोटा है >>> largest_divisor(15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,awa_Deva,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""दिए गए पूर्णांक का अभाज्य गुणनखंड का सूची सबसे छोटा से सबसे बड़ा क्रम में लौटाएं। प्रत्येक गुणनखंड का गुणनखंड संख्या के बराबर होना चाहिए। इनपुट संख्या सभी गुणनखंडों का गुणनफल होना चाहिए >>> factorization (कणनखंड) (२, २, २) >>> factorization (कणनखंड) (२५, ५) >>> factorization (कणनखंड) (७०) [२, ५, ७] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,awa_Deva,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""पूर्णांक सूची से, उन सभी तत्वों का हटाएं जो एक से अधिक बार आते हैं। इनपुट में दिए गए तत्वों का क्रम समान रखें। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,awa_Deva,python,"

def flip_case(string: str) -> str:
    """"""एक दिए गए स्ट्रिंग के लिए, छोटे अक्षरों का अपरकेस और अपरकेस का लोअरकेस पर फ्लिप करें। >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,awa_Deva,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""string का list को एक string मा concatenate गर्नुहोस >>> concatenate([]) ' ' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,awa_Deva,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""string का इनपुट सूची केवल उन लोगों के लिए फ़िल्टर करें जो एक दिए गए उपसर्ग से शुरू होते हैं। >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,awa_Deva,python,"

def get_positive(l: list):
    """"""सूची मा केवल सकारात्मक संख्या लौटाओ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,awa_Deva,python,"

def is_prime(n):
    """"""अगर कउनो दिए गए संख्या अभाज्य बा त true लौटाई, अउर अगर उ अभाज्य बा त false. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,awa_Deva,python,"import math


def poly(xs: list, x: float):
    """"""xs एक बहुपद का गुणांक है. find_zero such that poly ((x) = 0. find_zero returns only only zero point, even if there are many. इसके अलावा, find_zero केवल उन xs का सूची लेता है जिनके पास गुणांक का संख्या भी है और सबसे बड़ा गैर-शून्य गुणांक है क्योंकि यह एक समाधान की गारंटी देता है। >>> round ((find_zero[(1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""बिंदु x पर गुणांक xs के साथ बहुपद का मूल्यांकन करता है. वापसी xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,awa_Deva,python,"

def sort_third(l: list):
    """"""इ फलन एक सूची l लेता है अउर एक सूची l' वापस करत है ताकि l' सूचकांकों मा l के बराबर हो जउन तीन से विभाजित नहीं होते हैं, जबकि तीन से विभाजित सूचकांकों पर इका मान l के संबंधित सूचकांकों के मान के बराबर होते हैं, लेकिन क्रमबद्ध होते हैं। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,awa_Deva,python,"

def unique(l: list):
    """"""एक सूची मा क्रमबद्ध अद्वितीय तत्वहरु लाई फिर्ता आउछ >>> अद्वितीय (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,awa_Deva,python,"

def max_element(l: list):
    """"""सूची मा अधिकतम तत्व लौटाओ. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,awa_Deva,python,"

def fizz_buzz(n: int):
    """"""अगर अंक 7 पूर्णांक से कम बा त का संख्या लौटाई जे 11 या 13 से विभाजित बा. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,awa_Deva,python,"

def sort_even(l: list):
    """"""इ फलन एक सूची l लेता है अउर एक सूची l' वापस करत है ताकि l' विषम सूचकांकों मा l के बराबर हो, जबकि एकर मान सम सूचकांकों मा l के सम सूचकांकों के मान के बराबर हो, लेकिन क्रमबद्ध हो। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,awa_Deva,python,"

def encode_cyclic(s: str):
    """"""encode_cyclic फ़ंक्शन के साथ इनपुट स्ट्रिंग एन्कोड करी. डिकोड कइल स्ट्रिंग लौटाई.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""तीन अक्षर का चक्र समूह द्वारा एन्कोडेड स्ट्रिंग लौटाता है।""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,awa_Deva,python,"

def prime_fib(n: int):
    """"""prime_fib एक फाइबोनैचि संख्या है और यह भी प्राइम है. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,awa_Deva,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero पूर्णांक कय सूची कय इनपुट के रूप मा ले है। इ सत्य लौटाय देत है अगर सूची मा तीन अलग-अलग तत्व हैं जेकर योग शून्य है, अउर अन्यथा गलत। >>> triples_sum_to_zero([1, 3, 5, 0]) गलत >>> triples_sum_to_zero[(1, 3, -2, 1]) सही >>> triples_sum_to_zero([1, 2, 3, 7]) गलत >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) सही >>> triples_sum_to_zero[1]) गलत """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,awa_Deva,python,"

def car_race_collision(n: int):
    """"""एक पूरी तरह से सीधा असीम रूप से लम्बा लाइन है कि एक सड़क की कल्पना करो. n कारें बायीं ओर दाईं ओर जा रही हैं; साथ ही, n कारों का एक अलग सेट दाईं ओर बायीं ओर जा रही हैं. कारों का दो सेट एक दूसरे से बहुत दूर होने से शुरू होता है. सभी कारें एक ही गति से चलती हैं. दो कारों को टक्कर लगी है जब एक कार जो बायीं ओर दाईं ओर जा रही है, दाईं ओर बाईं ओर जा रही कार से टकरा जाती है. हालांकि, कारें असीम रूप से मजबूत और मजबूत हैं; नतीजतन, वे अपने प्रक्षेपवक्र पर चलते रहते हैं जैसे कि वे टकराए नहीं थे. यह फ़ंक्शन ऐसे टक्करों की संख्या का उत्पादन करता है.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,awa_Deva,python,"

def incr_list(l: list):
    """"""1. से वृद्धि वाले तत्वों के साथ सूची लौटाएं >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,awa_Deva,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero पूर्णांक कय सूची कय इनपुट के रूप मा ले है। इ सत्य लौटाय देत है अगर सूची मा दुइ अलग तत्व है जेकर योग शून्य है, अउर अन्यथा गलत। >>> pairs_sum_to_zero([1, 3, 5, 0]) गलत >>> pairs_sum_to_zero[(1, 3, -2, 1]) गलत >>> pairs_sum_to_zero([1, 2, 3, 7]) गलत >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) सही >>> pairs_sum_to_zero[1]) गलत """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,awa_Deva,python,"

def change_base(x: int, base: int):
    """"""इनपुट संख्या x का संख्यात्मक आधार आधार मा बदल द्या. रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाएं. आधार संख्या 10 से कम है. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,awa_Deva,python,"

def triangle_area(a, h):
    """"""एक त्रिकोण का एक पक्ष का लंबाई और उच्च वापसी क्षेत्र दिया गया। >>> triangle_area{5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,awa_Deva,python,"

def fib4(n: int):
    """"""Fib4 संख्या क्रम एक Fibbonacci अनुक्रम समान अनुक्रम हो जो निम्नानुसार परिभाषित है: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया fib4 संख्या क्रम का n-th तत्व कुशलता से गणना करने के लिए एक फ़ंक्शन लिखें। पुनरावृत्ति का उपयोग न करें। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,awa_Deva,python,"

def median(l: list):
    """"""सूची मा तत्वों का वापसी माध्य l. >>> माध्य [3, 1, 2, 4, 5]) 3 >>> माध्य [- 10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,awa_Deva,python,"

def is_palindrome(text: str):
    """"""जांचता है कि क्या दी गई स्ट्रिंग एक पालिंड्रोम है >>> is_palindrome('') True >>> is_palindrome('aba') True >>> is_palindrome('aaaaa') True >>> is_palindrome('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,awa_Deva,python,"

def modp(n: int, p: int):
    """"""वापसी 2^n मोडुलो p (संख्याओं का ध्यान रखें). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,awa_Deva,python,"

def encode_shift(s: str):
    """"""encode_shift फलन से इनपुट स्ट्रिंग के रूप मा एन्कोड करी. डिकोड की गई स्ट्रिंग लौटाई. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""वर्णमाला मा हर अक्षर मा 5 बदलाव करके एन्कोडेड स्ट्रिंग लौटाता है.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,awa_Deva,python,"

def remove_vowels(text):
    """"""remove_vowels एक फ़ंक्शन है जो स्ट्रिंग लेता है और बिना स्वरों के स्ट्रिंग लौटाता है। >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,awa_Deva,python,"

def below_threshold(l: list, t: int):
    """"""अगर सूची l में सब संख्याएँ दहलीज t से नीचे हैं तो True लौटाएं। >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,awa_Deva,python,"

def add(x: int, y: int):
    """"""दुइ संख्या x अउर y जोड़ें >>> जोड़ें (२,३) ५ >>> जोड़ें (५,७) १२ """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,awa_Deva,python,"

def same_chars(s0: str, s1: str):
    """"""जांचें कि क्या दो शब्दों में एक ही अक्षर हैं। >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') True >>> same_chars('eabcd', 'dddddddddabc') False >>> same_chars('abcd', 'dddddddabc') False >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,awa_Deva,python,"

def fib(n: int):
    """"""n-th फाइबोनैचि संख्या लौटाएं. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,awa_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""<"" and "">"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,awa_Deva,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,awa_Deva,python,"

def common(l1: list, l2: list):
    """"""दो सूची के लिए क्रमबद्ध अद्वितीय सामान्य तत्व लौटाएं। >>> सामान्य ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य ([5, 3, 2, 8], [3, 2]) [2, 3] ।""""""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,awa_Deva,python,"

def largest_prime_factor(n: int):
    """"""n का सबसे बड़ा अभाज्य गुणनखंड लौटाई. मान लिहिन कि n > 1 अउर अभाज्य संख्या नाहीं बा. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,awa_Deva,python,"

def sum_to_n(n: int):
    """"""sum_to_n एक फलन है जउन 1 से n तक के संख्याओं का योगफल देत है. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,awa_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""("" and "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,awa_Deva,python,"

def derivative(xs: list):
    """"""xs बहुपद का गुणांक है. xs[0] + xs[1] * x + xs[2] * x^2 + .... इस बहुपद का व्युत्पन्न उसी रूप में लौटाएं. >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,awa_Deva,python,"

def fibfib(n: int):
    """"""FibFib संख्या अनुक्रम Fibbonacci अनुक्रम समान एक अनुक्रम हो जो निम्नानुसार परिभाषित है: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया एक समारोह को फाइबफिन संख्या अनुक्रम का n-th तत्व कुशलता से गणना करने के लिए लिखें। >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,awa_Deva,python,"
FIX = """"""एक फलन vowels_count लिखें जउन इनपुट के रूप मा एक शब्द का प्रतिनिधित्व करै वाली स्ट्रिंग लेता है अउर स्ट्रिंग मा स्वरों की संख्या लौटाता है। इ मामला मा स्वर 'ए', 'ई', 'आई', 'ओ', 'यू' हैं। इहै, 'वाई' भी एक स्वर है, लेकिन केवल तब जब इ दिए गए शब्द के अंत मा है। उदाहरणः >>> vowels_count (((""abcde"") 2 >>> vowels_count (((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""अउर परीक्षण विकी कय सूची कय सुधार करे कय""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,awa_Deva,python,"
def circular_shift(x, shift):
    """"""परिपत्र संख्या x का अंक, अंक दाईं ओर से स्थानांतरित करें और परिणाम को स्ट्रिंग के रूप में लौटाएं। अगर shift > अंक का संख्या, अंक उल्टा लौटाएं। >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,awa_Deva,python,"
def digitSum(s):
    """"""कार्य एक फ़ंक्शन लिखें जउन इनपुट के रूप मा एक स्ट्रिंग लेता है अउर केवल ऊपरी वर्णों का योग वापस कर देत है' ASCII कोड. उदाहरणः digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,awa_Deva,python,"
def fruit_distribution(s,n):
    """"""इ कार्य में, आप को एक स्ट्रिंग दी जायेगी जो एक संख्या का प्रतिनिधित्व करती है सेब और संतरे जो एक फल की टोकरी में वितरित किए जाते हैं इस टोकरी में सेब, संतरे और आम का फल होता है। स्ट्रिंग दी गई जो संतरे और सेब की कुल संख्या का प्रतिनिधित्व करती है और एक पूर्णांक जो टोकरी में फल की कुल संख्या का प्रतिनिधित्व करता है टोकरी में आम के फल की संख्या लौटाएं। उदाहरण के लिए: fruit_distribution""5(सेब और 6 संतरे"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 सेब और 1 संतरे"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 सेब और 3 संतरे"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 सेब और 1 संतरे"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,awa_Deva,python,"
def pluck(arr):
    """"""""एक गैर-नकारात्मक पूर्णांक नोड्स वाले पेड़ की शाखा का प्रतिनिधित्व करने वाली एक सरणी दी गई है, आपका कार्य नोड्स में से एक को चुनना है और उसे वापस करना है। चुनने वाला नोड सबसे छोटा सम मान वाला नोड होना चाहिए। यदि एक ही सबसे छोटा सम मान वाला कई नोड्स पाए जाते हैं, तो सबसे छोटा सूचकांक वाला नोड लौटाएं। चुनने वाला नोड एक सूची में लौटाया जाना चाहिए, [smallest_value, its index], यदि कोई सम मान नहीं है या दिया गया सरणी खाली है, तो वापस करें []। उदाहरणः 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 का सबसे छोटा सम मान है, और 2 का सबसे छोटा सूचकांक है। उदाहरणः 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 का सबसे छोटा मान है, और 2 का सबसे छोटा सम सूचकांक है। उदाहरणः 3: इनपुटः [] आउटपुटः [] इनपुटः [4: 5, 3, 4, 2] आउटपुटः 0, 1 आउटपुटः 0 सबसे छोटा नोड, लेकिन सूचकांक मान शून्य है। उदाहरणः 1 * सबसे छोटा नोड, लेकिन शून्य है, इसलिए हम सबसे छोटा नोड का चयन करेंगे, जो शून्य है। उदाहरणः 1 * लंबाई = 10000 * 1 है, लेकिन शून्य है।""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,awa_Deva,python,"
def search(lst):
    '''अगर आपके पास एक गैर-खाली सूची है, सकारात्मक पूर्णांक का एक गैर-खाली सूची है। सबसे बड़ा पूर्णांक लौटाएं जो शून्य से बड़ा है, और पूर्णांक के मूल्य से अधिक या बराबर आवृत्ति है। एक पूर्णांक की आवृत्ति सूची में दिखाई देने की संख्या है। अगर ऐसा कोई मूल्य मौजूद नहीं है, तो -1 लौटाएं। उदाहरणः खोजें[4, 1, 2, 2, 3, 1]) == 2 खोजें[1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 खोजें[5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,awa_Deva,python,"
def strange_sort_list(lst):
    '''पूर्णांक कय सूची दी गइ, अजीब क्रम में सूची लौटाई जाय. अजीब क्रमबद्धता, जब आप न्यूनतम मान से शुरू करत हैं, तब शेष पूर्णांक कय अधिकतम, तब न्यूनतम अउर आगे. उदाहरण: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,awa_Deva,python,"
def triangle_area(a, b, c):
    '''त्रिकोण का तीन भुजाओं का लंबाई दी गई है. त्रिकोण का क्षेत्रफल 2 दशमलव बिंदुओं पर गोल करें यदि तीन भुजाएँ एक वैध त्रिकोण बनाते हैं. अन्यथा -1 तीन भुजाएँ एक वैध त्रिकोण बनाते हैं जब किसी भी दो भुजाओं का योग तीसरी भुजा से बड़ा होता है. उदाहरण: त्रिकोण_क्षेत्रफल ((3, 4, 5) == 6.00 त्रिकोण_क्षेत्रफल ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,awa_Deva,python,"
def will_it_fly(q,w):
    '''एगो फलन लिखब जवन सही लौटाई अगर वस्तु q उड़ जाई, अउर गलत अगर दूसर तरीका से. वस्तु q उड़ जाई अगर इ संतुलित बा (ई एगो पालिंड्रोमिक सूची बा) अउर एकर तत्वन के योग अधिकतम संभव वजन से कम या बराबर बा w. उदाहरण: will_it_fly([1, 2], 5) â -> False # 1+2 अधिकतम संभव वजन से कम है, लेकिन इ असंतुलित बा. will_it_fly([3, 2, 3], 1) â -> False # इ संतुलित बा, लेकिन 3+2+3 अधिकतम संभव वजन से अधिक है. will_it_fly[3, 2, 3], 9) â -> True # 3+23 अधिकतम संभव वजन से कम है, अउर इ संतुलित बा. will_it_fly([3], 5) â -> True # 3 अधिकतम संभव वजन से कम है, अउर इ संतुलित बा '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,awa_Deva,python,"
def smallest_change(arr):
    """"""पूर्णांक का एक सरणी arr दिए गए, सरणी palindromic बनाने के लिए आवश्यक तत्वों की न्यूनतम संख्या का पता लगाएं। एक palindromic सरणी एक सरणी है कि पीछे और आगे एक ही पढ़ा जाता है। एक बदलाव में, आप एक तत्व को किसी भी अन्य तत्व में बदल सकते हैं। उदाहरण के लिए: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,awa_Deva,python,"
def total_match(lst1, lst2):
    '''अगर दुइ सूचियन मँ एक्कई संख्या होत ह, तउ पहिला सूचि लौटावा। उदाहरण total_match[], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin', ['hi', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['hi', 'admin', ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,awa_Deva,python,"
def is_multiply_prime(a):
    """"""एगो फलन लिखब जउन सही लौटाई अगर देवल गयल संख्या 3 अभाज्य संख्या के गुणनफल ह अउर गलत अगर दूसर तरीका से. इ जानत हुए कि (a) 100 से कम बा. उदाहरण: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,awa_Deva,python,"
def is_simple_power(x, n):
    """"""आपका काम एक फ़ंक्शन लिखना है जो true लौटाता है अगर एक संख्या x n का एक साधारण शक्ति है और अन्य मामलों में false. x n का एक साधारण शक्ति है अगर n**int=x उदाहरण के लिए: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,awa_Deva,python,"
def iscube(a):
    '''एगो फलन लिखब जवन एगो पूर्णांक a लेई अउर अगर इ ingeger कौनो पूर्णांक संख्या का घन बा त True लौटाई. ध्यान दें: आप मान सकत हैं कि इनपुट हमेशा मान्य है. उदाहरण: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,awa_Deva,python,"
def hex_key(num):
    """"""आप कय एगो फलन लिखेक काम करलौ गवा है जवन एक हेक्साडेसिमल संख्या कय स्ट्रिंग के रूप मा प्राप्त करत है औ षटकोन अंकन कय संख्या गिनेकय जवन प्राइम (प्राइम संख्या, या एक प्राइम, 1 से बड़ा प्राकृतिक संख्या होय जवन कि दू छोट प्राकृतिक संख्या कय गुणनफल नाइ होय) । षटकोन अंक 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F हैं। प्राइम संख्या 2, 3, 5, 7, 11, 13, 17,... हय, अतः आप कय निम्नलिखित अंकन कय संख्या निर्धारित करेक अहै: 2, 3, 5, 7, B (= दशमलव 11), D (= दशमलव 13) । नोटः आप मान सकत हैं कि इनपुट हमेशा सही या खाली स्ट्रिंग होत है, औ प्रतीक A,B,C,D,E,F, हमेशा अपरकेस होत हैं। उदाहरणः ""num"" = AB"" का आउटपुट num1 = 1077E होना चाहिये, ""output"" 2 होना चाहिये, ""num"" = AB331EDA होना चाहिये, ""num"" = 4.1289BC होना चाहिये, ""num"" = 6.067DEFD होना चाहिये, ""output"" = 2.020202020 होना चाहिये।""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,awa_Deva,python,"
def decimal_to_binary(decimal):
    """"""आप दशमलव रूप मा एक संख्या दी जायगी और आपका कार्य बाइनरी प्रारूप मा परिवर्तित करना है। फलन को एक स्ट्रिंग लौटावे चाही, प्रत्येक वर्ण बाइनरी संख्या का प्रतिनिधित्व करत है। स्ट्रिंग मा प्रत्येक वर्ण '0' या '1' होगा। स्ट्रिंग की शुरुआत और अंत मा अतिरिक्त वर्ण 'db' होगा। अतिरिक्त वर्ण प्रारूप मा मदद क लिए हैं। उदाहरणः decimal_to_binary(15) # returns ""db1111db"" decimal_to_binary32) # returns ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,awa_Deva,python,"
def is_happy(s):
    """"""आप कय एगो स्ट्रिंग s दिहा गा है। आपका काम ई जांच करैं कि स्ट्रिंग खुश है या नाहीं। एक स्ट्रिंग तब खुश होत है जब एकर लंबाई कम से कम 3 होइ औ हर 3 लगातार अक्षर अलग होइ उदाहरण के लिएः is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,awa_Deva,python,"
def numerical_letter_grade(grades):
    """"""इ सेमेस्टर का अंतिम हफ्ता है अउर शिक्षक का छात्रन का ग्रेड देवे का है। शिक्षक ग्रेडिंग खातिर आपन खुद का एल्गोरिथ्म बना रहा है। एकमात्र समस्या ई है कि, ऊ ग्रेडिंग खातिर इस्तेमाल करे वाला कोड खो चुका है। ऊ आपको कुछ छात्रन खातिर जीपीए की सूची दी है अउर आपको एक फ़ंक्शन लिखना है जो निम्नलिखित तालिका का उपयोग करके अक्षर ग्रेड की सूची का आउटपुट कर सकता हैः जीपीए  अक्षर ग्रेड 4.0 ए + > 3.7 ए > 3.3 ए- > 3.0 बी + > 2.7 बी > 2.3 बी- > 2.0 सी + > 1.7 सी > 1.3 सी- > 1.0 डी + > 0.7 डी > 0.0 डी- 0.0 ई उदाहरण: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['ए+', 'बी', 'सी-', 'सी', 'ए'] -'""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,awa_Deva,python,"
def prime_length(string):
    """"""एगो फलन लिखब जवन एगो स्ट्रिंग लेता है अउर अगर स्ट्रिंग लंबाई एगो अभाज्य संख्या है त True लौटाता है या अन्यथा False उदाहरण prime_length('Hello') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,awa_Deva,python,"
def starts_one_ends(n):
    """"""एक सकारात्मक पूर्णांक n दिए गए, 1 से शुरू या समाप्त होने वाले n-अंकीय सकारात्मक पूर्णांक की संख्या का गणना लौटाएं।""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,awa_Deva,python,"
def solve(N):
    """"""एक धनात्मक पूर्णांक N दिए गए, बाइनरी में अपने अंकों का कुल योग लौटाएं. उदाहरण के लिए N = 1000, अंकों का योग 1 होगा आउटपुट ""1"" होना चाहिए. N = 150 के लिए, अंकों का योग 6 होगा आउटपुट ""110"" होना चाहिए. N = 147 के लिए, अंकों का योग 12 होगा आउटपुट ""1100"" होना चाहिए. चरः @N पूर्णांक बाधाएंः 0 â‰¤ N â‰¤ 10000. आउटपुटः बाइनरी संख्या का एक स्ट्रिंग """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,awa_Deva,python,"
def add(lst):
    """"""पूर्णांक lst का एक गैर-खाली सूची दी गई है। जोड़े गए तत्वों को जोड़ें जो विषम सूचकांक पर हैं। उदाहरणः add (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,awa_Deva,python,"
def anti_shuffle(s):
    """"""string का क्रमबद्ध संस्करण, एक स्ट्रिंग है जहाँ सभी शब्द (स्पेस द्वारा अलग) एक नए शब्द से बदल दिए जाते हैं जहाँ सभी अक्षर ascii मान के आधार पर आरोही क्रम में व्यवस्थित होते हैं। नोट: आप वाक्य में शब्दों और खाली स्थान का क्रम बनाए रखें। उदाहरण के लिए: anti_shuffle ((('Hi') return 'Hi' anti_shuffle ((('hello') returns 'ehllo' anti_shuffle (('Hello World!!!') returns 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,awa_Deva,python,"
def get_row(lst, x):
    """"""आप कय 2 आयामी डेटा, एक नेस्टेड सूची के रूप मा, जे मैट्रिक्स कय समान है, हालांकि, मैट्रिक्स कय विपरीत, हर पंक्ति मा स्तंभन कय अलग संख्या हो सकत है। lst, अउर पूर्णांक x, सूची मा पूर्णांक x खोजे, अउर ट्यूपल्स कय सूची लौटाए, [(x1, y1), (x2, y2) ...] ताकि हर ट्यूपल एक निर्देशांक - (पंक्ति, स्तंभ), 0 से शुरू होइ। निर्देशांक के क्रम मा पंक्तियन द्वारा क्रमबद्ध करें। साथ ही, पंक्ति के निर्देशांक को घटते क्रम में स्तंभों द्वारा क्रमबद्ध करें। उदाहरणः get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_((1), 1) [] == == [[row_[[1, 2, 3, 2]], 3 == [2, 2]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,awa_Deva,python,"
def sort_array(array):
    """"""अगर आप का का एक गैर-नकारात्मक पूर्णांक का एक सरणी दिया है, तो क्रमबद्ध करने के बाद दिए गए सरणी की एक प्रति लौटाएं, आप दिए गए सरणी को आरोही क्रम में क्रमबद्ध करेंगे यदि योग (पहला अनुक्रमणिका मान, अंतिम अनुक्रमणिका मान) विषम है, या इसे अवरोही क्रम में क्रमबद्ध करें यदि योग (पहला अनुक्रमणिका मान, अंतिम अनुक्रमणिका मान) सम है। ध्यान दें: * दिए गए सरणी को न बदलें। उदाहरणः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,awa_Deva,python,"
def encrypt(s):
    """"""एगो फलन एन्क्रिप्ट बनाबय जे एगो स्ट्रिंग के एगो तर्क के रूप में लेला अउर वर्णमाला के घुमाए के साथ एन्क्रिप्टेड एगो स्ट्रिंग लौटाई. वर्णमाला के अइसन तरीका से घुमाए जाए के चाही कि अक्षर दू स्थान पर दू से गुणा करके नीचे जाए. उदाहरण खातिर: encrypt('hi') लौटाता है 'lm' encrypt('asdfghjkl') लौटाता है 'ewhjklnop' encrypt('gf') लौटाता है 'kj' encrypt('et') लौटाता है 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,awa_Deva,python,"
def next_smallest(lst):
    """"""अगर आपके पास एक पूर्णांक सूची है, तो एक फ़ंक्शन लिखें next_smallest() जो सूची का दूसरा सबसे छोटा तत्व लौटाता है। अगर ऐसा कोई तत्व नहीं है तो कोई भी लौटाएं. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,awa_Deva,python,"
def is_bored(S):
    """"""आप कय लगे सब्द कय एक श्रृंखला होइ, अउर आप कय काम बोरडम्स कय संख्या गनब अहै। एक बोरडम एक वाक्य अहै जवन ""I"" शब्द से शुरू होत है। वाक्य '.', '?' या '! ' द्वारा परिसीमित होत हैं। उदाहरण के लिए: >>> is_bored(""हैलो वर्ल्ड"") 0 >>> is_bored(""आकाश नीला है। सूरज चमकत है। मोका इ मौसम पसंद है"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,awa_Deva,python,"
def any_int(x, y, z):
    '''एगो फलन बनावेला जेमे 3 संख्या होई. अगर एक संख्या दूसर दुन्नू संख्या के योग से बराबर होई त उ सही लौटाई, अउर सब संख्या पूर्णांक होई. दूसर मामलन में गलत लौटाई. उदाहरण any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3, 6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,awa_Deva,python,"
def encode(message):
    """"""एगो फलन लिखब जवन एगो संदेश लेई, अउर अइसन तरीका से एन्कोड करी कि ई सब अक्षरन के केस बदल देई, संदेश में सब स्वरन के जगह अंग्रेजी वर्णमाला में उ अक्षर से बदल देई जवन उ स्वर से 2 स्थान आगे दिखाई देई. खाली अक्षर मान लिहीं. उदाहरणः >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,awa_Deva,python,"

def skjkasdkd(lst):
    """"""आप कय पूर्णांक कय सूची दिया गा है। आप सबसे बड़ा अभाज्य मान खोजेक चाही औ एकर अंकन कय योग लौटावेक चाही। उदाहरणः lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] आउटपुट 10 होय lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] आउटपुट 25 होय lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] आउटपुट 13 होय lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] आउटपुट 11 होय lst = [0,81,12,31,21] आउटपुट 3 होय lst = [0,8,1,2,1,7] आउटपुट 7 होय """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,awa_Deva,python,"
def check_dict_case(dict):
    """"""अगर सब्दकोश दिया गवा है, तब अगर सब कुंजी छोट अक्षर में स्ट्रिंग्स हैं या सब कुंजी बड़े अक्षर में स्ट्रिंग्स हैं, तब True लौटाएं, अन्यथा False लौटाएं. फ़ंक्शन को False लौटाएं यदि दिया गया शब्दकोश खाली है. उदाहरण: check_dict_case{""a"":""apple"", ""b"":""banana""}) को True लौटाएं. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) को False लौटाएं. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) को False लौटाएं. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) को False लौटाएं. check_dict_case{""NC"":""STATE"", ""Z"":""IP""} को True लौटाएं.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,awa_Deva,python,"
def count_up_to(n):
    """"""एक फ़ंक्शन लागू करें जउन एक गैर-ऋणात्मक पूर्णांक लेता है अउर पहिले n पूर्णांक का एक सरणी वापस करता है जउन प्राइम संख्या हैं अउर n से कम हैं. उदाहरण के लिए: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,awa_Deva,python,"
def multiply(a, b):
    """"""फलन के पूर करा जउन दुइ पूर्णांक लेत है अउर उनके इकाई अंक के गुणनफल लउटावत है. मान लिही कि इनपुट हमेशा वैध होत है. उदाहरण: गुणा करे (१४८, ४१२) का १६ लौटावे. गुणा करे (१९, २८) का ७२ लौटावे. गुणा करे (२०२०, १८५१) का ० लौटावे. गुणा करे (१४, १५) का २० लौटावे.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,awa_Deva,python,"
def count_upper(s):
    """"""string s दिए गए, सम सूचकांक में अपरकेस स्वरों की संख्या गिनें. उदाहरण के लिए: count_upper{""aBCdEf"") 1 count_upper{""abcdefg"") 0 count_upper{""dBBE"") 0 लौटाता है।""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,awa_Deva,python,"
def closest_integer(value):
    '''एगो फलन बनावेला जवन एगो संख्या के प्रतिनिधित्व करे वाला मान (स्ट्रिंग) लेला अउर सबसे नजदीक पूर्णांक लौटावेला. अगर संख्या दू पूर्णांक से समान दूरी पर बा त ओकरा के शून्य से दूर करी. उदाहरण >>> closest_integer(""10"") 10 >>> closest_integer(""15.3"") 15 नोट: शून्य से दूर करी का मतलब है कि अगर दिहल गईल संख्या दू पूर्णांक से समान दूरी पर बा त रउआ लौटावे के चाही उ संख्या जवन शून्य से सबसे दूर बा. उदाहरण खातिर closest_integer""(14.5"") लौटावे के चाही 15 अउर closest_integer""(-14.5"") लौटावे के चाही -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,awa_Deva,python,"
def make_a_pile(n):
    """"""एक सकारात्मक पूर्णांक n दिए गए, आप पत्थरों का n स्तर का एक ढेर बनाना होगा। पहले स्तर पर n पत्थर हैं। अगले स्तर पर पत्थरों की संख्या हैः - अगर n विषम है तो अगला विषम संख्या है - अगर n सम है तो अगला सम संख्या है। एक सूची में प्रत्येक स्तर पर पत्थरों की संख्या लौटाएं, जहां सूचकांक i पर तत्व स्तर (i+1) पर पत्थरों की संख्या का प्रतिनिधित्व करता है। उदाहरणः >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,awa_Deva,python,"
def words_string(s):
    """"""आप कय पास कॉमा या रिक्त स्थान से अलग कई गवा सब्द कय एक स्ट्रिंग होइ जाई। आपका काम स्ट्रिंग कय सब्द में विभाजित कइके अउर सब्द कय एक सरणी लौटाई। उदाहरण: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,awa_Deva,python,"
def choose_num(x, y):
    """"""अगर इ संख्या बा त इ फ़ंक्शन का -1 लौटाई। उदाहरण के लिए: choose_num_{12}, 15 = 14 choose_num_{13, 12} = -1""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,awa_Deva,python,"
def rounded_avg(n, m):
    """"""अगर आपके पास एक अच्छा नंबर है, तो आप उस नंबर का उपयोग कर सकते हैं जो आपके नंबर पर दिखाई दे रहा है, आप गलत नंबर दर्ज कर रहे हैं या गलत नंबर पर क्लिक कर रहे हैं। आपके पास दो सकारात्मक पूर्णांक n और m हैं, और आपका कार्य n से m तक के पूर्णांक का औसत (n और m सहित) है। उत्तर को निकटतम पूर्णांक तक गोल करें और इसे बाइनरी में परिवर्तित करें। अगर n m से बड़ा है, तो -1 लौटाएं। उदाहरण: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b1111"" rounded_avg(20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,awa_Deva,python,"
def unique_digits(x):
    """"""सकारात्मक पूर्णांक x का सूची दिए गए. सभी तत्वों का एक क्रमबद्ध सूची लौटाएं जिसमें कोई भी अंक नहीं है। नोटः लौटाई गई सूची को बढ़ते क्रम में क्रमबद्ध किया जाना चाहिए। उदाहरण के लिएः >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,awa_Deva,python,"
def by_length(arr):
    """"""पूर्णांक का एक सरणी दिया गया है, पूर्णांक 1 से 9 के बीच हैं, परिणाम सरणी को उल्टा करें, और फिर प्रत्येक अंक को उसके संबंधित नाम से बदलें ""एक"", ""दो"", ""तीन"", ""चार"", ""पांच"", ""छह"", ""सात"", ""आठ"", ""नौ"" से। उदाहरण के लिए: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""आठ"", ""चार"", ""तीन"", ""दो"", ""दो"", ""एक"", ""एक""] अगर सरणी खाली है, तो एक खाली वापसीः arr = [] return [] अगर सरणी में कोई अजीब संख्या है, तो इसे अनदेखा करेंः arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [51] - return ['one' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,awa_Deva,python,"
def f(n):
    """"""फलन f लागू करें जउन n को पैरामीटर के रूप मा लेथे, अउर आकार n की सूची लौटाथे, जइसे कि सूचकांक i मा तत्व का मान i का कारक है अगर i सम है या 1 से i तक के संख्याओं का योग है अन्यथा. i 1 से शुरू होता है. i का कारक 1 से i तक की संख्याओं का गुणन है (1 * 2 * ... * i) उदाहरणः f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,awa_Deva,python,"
def even_odd_palindrome(n):
    """"""एक सकारात्मक पूर्णांक n दिए गए, एक ट्यूपल लौटाएं कि सीमा के भीतर आने वाले सम और विषम पूर्णांक पालिंड्रोम की संख्या है। उदाहरणः1: इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3 हैं, उनमें से एक सम है, और उनमें से दो विषम हैं। उदाहरणः2: इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हैं। उनमें से चार सम हैं, और उनमें से 6 विषम हैं। नोटः 1. 1 <= n <= 10^3 2. ट्यूपल ने क्रमशः सम और विषम पूर्णांक पालिंड्रोम की संख्या लौटाई है। """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,awa_Deva,python,"
def count_nums(arr):
    """"""एगो फलन count_nums लिखब जवन पूर्णांक के एगो सरणी लेई अउर उन तत्वन के संख्या लौटाई जवन अंक के योग बा > 0. अगर कौनो संख्या ऋणात्मक बा त ओकर पहिला हस्ताक्षरित अंक ऋणात्मक होई: उदाहरण खातिर -123 का अंक -1, 2, अउर 3 पर हस्ताक्षरित बा: >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,awa_Deva,python,"
def move_one_ball(arr):
    """"""हम एक सरणी 'arr' N पूर्णांक arr[1], arr[2], ..., arr[N] का है. सरणी मा संख्या यादृच्छिक रूप से आदेश दिया जायेगा. आपका कार्य यह निर्धारित करना है कि क्या यह संभव है कि एक सरणी को गैर-घटे हुए क्रम में क्रमबद्ध किया जाए दिए गए सरणी पर निम्नलिखित ऑपरेशन का प्रदर्शन करके: आपको दाईं ओर शिफ्ट ऑपरेशन का प्रदर्शन करने की अनुमति है. एक दाईं ओर शिफ्ट ऑपरेशन का मतलब है कि सरणी के सभी तत्वों को एक स्थिति से दाईं ओर स्थानांतरित करना। सरणी का अंतिम तत्व सरणी में प्रारंभिक स्थिति पर स्थानांतरित हो जाएगा अर्थात 0 वां सूचकांक। अगर उपरोक्त ऑपरेशन का प्रदर्शन करके क्रमबद्ध सरणी प्राप्त करना संभव है तो सही लौटाएं अन्यथा गलत लौटाएं। यदि दिए गए सरणी खाली है तो सही लौटाएं। नोटः दी गई सूची में अद्वितीय तत्व होने की गारंटी है। उदाहरण के लिएः move_one_{} ball[3, 4, 5, 1] == 2> सही स्पष्टीकरणः 2 द्वारा सही-मिनट 2 ऑपरेशन, गैर-घटे हुए क्रम में क्रमबद्ध किया जा सकता है सरणी के लिए।[3, 4, 4, 2} == 4 द्वारा सही-घटेराई, गैर-घटे हुए क्रमबद्ध संचालन के लिए यह संभव नहीं है।""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,awa_Deva,python,"
def exchange(lst1, lst2):
    """"""इ समस्या मा, आप एक फलन लागू करीन जे संख्याओं की दो सूचियां लेई, अउर निर्धारित करीन कि क्या इ संभव है कि उहौ के बीच तत्वों का आदान-प्रदान करें ताकि lst1 केवल सम संख्याओं की एक सूची बन जाए। lst1 अउर lst2 के बीच आदान-प्रदान तत्वों की संख्या पर कौनो सीमा नाही है। अगर lst1 अउर lst2 के बीच तत्वों का आदान-प्रदान करना संभव है ताकि lst1 के सभी तत्वों को भी सम बनाय जाए, ""YES"" लौटाएं। अन्यथा, ""NO"" लौटाएं। उदाहरण के लिएः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" इ मान लिया जात है कि इनपुट सूची गैर-खाली होइ। """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,awa_Deva,python,"
def histogram(test):
    """"""अगर एक स्ट्रिंग दिए गए है जो एक स्पेस से अलग छोटे अक्षर का प्रतिनिधित्व करता है, तो सबसे अधिक पुनरावृत्ति वाले अक्षर का एक शब्दकोश लौटाएं और संबंधित गिनती शामिल करें। अगर कई अक्षरों में एक ही घटना है, तो उन सभी को लौटाएं। उदाहरण: हिस्टोग्राम ((('a b c') == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम ((('a b b a') == {'a': 2, 'b': 2} हिस्टोग्राम ((('a b c a b') == {'a': 2, 'b': 2} हिस्टोग्राम ((('b b a b') == {'b 4}': हिस्टोग्राम (((')) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,awa_Deva,python,"
def reverse_delete(s,c):
    """"""कार्य हमें दुई स्ट्रिंग s अउर c दिया गवा है, आप को s मा सभी अक्षर हटावे है जो c में किसी भी अक्षर के बराबर है फिर जांच करें कि क्या परिणाम स्ट्रिंग palindrome है। एक स्ट्रिंग को palindrome कहा जाता है यदि यह आगे के रूप में पीछे की तरह ही पढ़ता है। आपको चेक के लिए परिणाम स्ट्रिंग और True/False युक्त एक टपल लौटाएं। उदाहरण के लिए s = ""abcde"", c = ""ae"", परिणाम ('bcd',False) होना चाहिए। s = ""abcdef"", c = ""b"" परिणाम ('acdef',False) होना चाहिए। s = ""abcdedcba"", c = ""ab"", परिणाम ('cdedc',True) होना चाहिए।""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,awa_Deva,python,"
def odd_count(lst):
    """"""स्ट्रिंग्स का एक सूची दी गई, जहां प्रत्येक स्ट्रिंग में केवल अंक होते हैं, एक सूची लौटाएं। आउटपुट का प्रत्येक तत्व i ""इनपुट के स्ट्रिंग i में विषम तत्वों की संख्या"" होना चाहिए। जहां सभी i को इनपुट के i'th स्ट्रिंग में विषम अंक की संख्या से बदल दिया जाना चाहिए। >>> odd_count['1234567']) [""odd_element 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""odd_element 1n the str1ng 1 of the 1nput."", ""odd element 8n the str8ng 8 of the 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,awa_Deva,python,"
def minSubArraySum(nums):
    """"""पूर्णांक संख्याओं का एक सरणी दिया गया है, संख्याओं का किसी भी गैर-खाली उप-सरणी का न्यूनतम योग ज्ञात करें। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,awa_Deva,python,"
def max_fill(grid, capacity):
    import math
    """"""आप कय कुँवन कय आयताकार ग्रिड दिहा जात है। हर पंक्ति एक कुँवन कय निरूपण करत है, औ हर पंक्ति मा 1 एक पानी कय इकाई कय निरूपण करत है। हर कुँवन कय एक बराबर बाल्टी है जेकर उपयोग पानी निकारै कय लिए किहिन जाय, औ सब बाल्टी कय एक्कई क्षमता है। आपका काम कुँवन का खाली करै खातिर बाल्टी कय उपयोग करब है। बक्सन कय नीचे उतारे कय बार संख्या दर्ज कराइ। उदाहरणः1: इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 आउटपुटः 6 उदाहरणः इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 आउटपुटः 5 उदाहरणः इनपुटः [[:0,0,0], [0,0]] bucket_capacity: 5 आउटपुटः 0 * constraints: 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 3 * 2 * 4 * 5 * 6 * 10 * 1 * 1 * 1 * 2 * 2 * 1 * 2 * 2 * 3 * 2 * 2 * 3 * 4 * 5 * 6 * 6 * 7 * 7 * 8 * 9 * 9 * 9 * 10 * 10 * 10 * 10 * 10 * 11 * 11 * 12 * 11 * 12 * 12 * 12 * 12 * 12 * 12 * 12 * 12 * 12 * 13 * 13 * 13 * 14 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 16 * 15 * 15 * 16 * 16 * 16 * 16 * 16 * 16 * 16 * 16 * 16 * 17 * 16 * 17 * 16 * 17 * 18 * 18 * 19 * 19 * 19 * 19 * 19 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15 * 15""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,awa_Deva,python,"
def sort_array(arr):
    """"""इ काटा मा, आप को गैर-नकारात्मक पूर्णांक का एक सरणी को उनके बाइनरी प्रतिनिधित्व मा संख्या के अनुसार क्रमबद्ध करना होगा। एक समान संख्या के लिए, दशमलव मान के आधार पर क्रमबद्ध करें। इ इस तरह लागू किया जाना चाहिएः >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,awa_Deva,python,"
def select_words(s, n):
    """"""string s अउर एक प्राकृतिक संख्या n देई, आप कय एक फ़ंक्शन लागू करेक काम है जवन string s से सब सब्दन् कय सूची वापस करत है जेहमा ठीक n व्यंजन हैं, ताकि इ सब्द string s मा देखाई देई। अगर string s खाली अहै तब फ़ंक्शन को खाली सूची वापस कर देई। नोटः आप इनपुट स्ट्रिंग मा केवल अक्षर अउर रिक्त स्थान शामिल हैं। उदाहरणः select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,awa_Deva,python,"
def get_closest_vowel(word):
    """"""आप कय एक शब्द दिया गा है । आपका काम ई खोजेक अहै कि कौनसा स्वर सबसे नजदीक अहै जवन कि शब्द कय दाईं ओर से दू गो व्यंजन कय बीच खडा है (केस संवेदनशील) । प्रारंभ अउर अंत कय स्वर गिनल जायँ । अगर आप कय उपरोक्त शर्त के अनुसार कौनो स्वर नाहीं मिला, तौ खाली स्ट्रिंग लौटाइ द्या । आप मान सकत हैं कि दिहिला स्ट्रिंग मा केवल अंग्रेजी अक्षर है । उदाहरण: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,awa_Deva,python,"
def match_parens(lst):
    '''अगर आपकय पास एक दो स्ट्रिंग्स कय सूची अहै, तौ दोनों स्ट्रिंग्स मा केवल खुला कोष्ठक '(' या बंद कोष्ठक ') ' होत है। आपका काम इ जांच करैं कि का दुइ स्ट्रिंग्स कय कौनो क्रम मा जोड़ब संभव है, कि परिणामी स्ट्रिंग अच्छा होइ। एक स्ट्रिंग S तब अउर केवल तब ही अच्छा माना जात है जब S मा सब कोष्ठक संतुलित हों। उदाहरण के लिएः स्ट्रिंग '((()) ' अच्छा है, जबकि स्ट्रिंग '()) ' नहीं है। अगर एक अच्छा स्ट्रिंग बनाए कय कउनो तरीका होय, तौ 'हाँ' लौटावा, अउर अगर नाहीं, तउ 'नहि' लौटावा। उदाहरणः match_parens[('() ', ') ']) == 'हाँ' match_parens[(') ', ') ']) == 'नहि' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,awa_Deva,python,"
def maximum(arr, k):
    """"""पूर्णांक arr अउर सकारात्मक पूर्णांक k का एक सरणी दिई, arr में अधिकतम k संख्याओं के साथ लंबाई k का एक क्रमबद्ध सूची लौटाएं. उदाहरण1: इनपुटः arr = [-3, -4, 5], k = 3 आउटपुटः [-4, -3, 5] उदाहरण2: इनपुटः arr = [4, -4, 4], k = 2 आउटपुटः [4, 4] उदाहरण3: इनपुटः arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुटः [2] नोटः 1. सरणी की लंबाई [1, 1000] की सीमा में होगी। 2. सरणी में तत्व [-1000, 1000] की सीमा में होंगे। 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,awa_Deva,python,"
def solution(lst):
    """"""पूर्णांक कय गैर-खाली सूची कय देई गय, उन सब विषम तत्वन कय योग लौटावा जाय जवन सम स्थान पे अहै। उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,awa_Deva,python,"
def add_elements(arr, k):
    """"""पूर्णांक arr और पूर्णांक k का एक गैर-खाली सरणी दिया गया है, arr के पहले k तत्वों से अधिकतम दो अंकों वाले तत्वों का योग लौटाएं। उदाहरण: इनपुटः arr = [111,21,3,4000,5,6,7,8,9], k = 4 आउटपुटः 24 # 21 + 3 का योग बाधाएंः 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,awa_Deva,python,"
def get_odd_collatz(n):
    """"""अगर एक धनात्मक पूर्णांक n दिया गवा है, त एक क्रमबद्ध सूची लौटाएं जेहमा कोलाट्ज़ अनुक्रम में विषम संख्याएं हैं। कोलाट्ज़ अनुमान गणित में एक अनुमान है जो निम्नानुसार परिभाषित अनुक्रम से संबंधित हैः किसी भी धनात्मक पूर्णांक n से शुरू करें। फिर प्रत्येक पद पिछले पद से निम्नानुसार प्राप्त होता हैः यदि पिछला पद सम है, तो अगला पद पिछले पद का आधा है। यदि पिछला पद विषम है, तो अगला पद पिछले पद का 3 गुना है प्लस 1. अनुमान है कि n का कोई भी मान, अनुक्रम हमेशा 1 तक पहुंच जाएगा। नोटः 1. Collatz(1) [1] है। 2. क्रमबद्ध सूची लौटाई गई है। उदाहरण के लिएः get_odd_collatz(5) [1, 5] लौटाता है 5 के लिए कोलाट्ज़ अनुक्रम [5, 8, 16, 4, 2, 1], इसलिए विषम संख्याएं केवल 1 और 5 हैं।""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,awa_Deva,python,"
def valid_date(date):
    """"""आप कय एगो फलन लिखे कय चाही जवन कि कउनो दिहिस दिनांक स्ट्रिंग कय मान्य करी अव अगर दिनांक मान्य है तौ सही लौटाई अन्यथा गलत। दिनांक वैध है अगर निम्नलिखित सब नियम संतुष्ट अहैं: 1. दिनांक स्ट्रिंग खाली नाइ है। 2. दिन कय संख्या महीना 1,3,5,7,8,10,12 खातिर 1 से कम या 31 दिन से अधिक नाइ है। औ दिन कय संख्या महीना 4,6,9,11 खातिर 1 से कम या 30 दिन से अधिक नाइ है। औ, दिन कय संख्या महीना 2 खातिर 1 से कम या 29 से अधिक नाइ है। 3. महीना 1 से कम या 12 से अधिक नाइ होना चाही। 4. दिनांक फ़ॉर्मेट मा होय चाही उदाहरण के लिएः valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-01-2040') => false_date (('06-04-2020') => true (valid_date (('06/04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,awa_Deva,python,"
def split_words(txt):
    '''शब्द का एक स्ट्रिंग दिए गए, रिक्त स्थान पर विभाजित शब्दों की एक सूची लौटाएं, यदि पाठ में कोई रिक्त स्थान मौजूद नहीं है तो आपको अल्पविराम पर विभाजित करना चाहिए ',' यदि कोई अल्पविराम मौजूद नहीं है तो आपको वर्णमाला में विषम क्रम के साथ छोटे अक्षरों की संख्या लौटा देनी चाहिए, ऑर्ड('ए') = 0, ऑर्ड'(बी') = 1, ... ऑर्ड('ज़') = 25 उदाहरण split_words ((""हैलो दुनिया! "") â -> [""हैलो"", ""दुनिया! "") split_words ((""हैलो, दुनिया! "") â -> [""हैलो"", ""दुनिया! "") split_words ((""abcdef"")) == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,awa_Deva,python,"
def is_sorted(lst):
    '''अगर एक संख्या का सूची दिया है, तो वापस करें चाहे वे आरोही क्रम में क्रमबद्ध हों या नहीं। अगर सूची में एक ही संख्या का 1 से अधिक डुप्लिकेट है, तो वापस करें झूठा। कोई नकारात्मक संख्या नहीं और केवल पूर्णांक मानें। उदाहरण is_sorted ({1, 2, 3, 4, 5]) ।'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,awa_Deva,python,"
def intersection(interval1, interval2):
    """"""अगर आपकय अंतराल एक पूर्णांक जोड़ा है, तो आपकय अंतराल बंद है, जेकर अर्थ है कि अंतराल (प्रारंभ, अंत) में प्रारंभ और अंत दोनों शामिल हैं. प्रत्येक अंतराल के लिए, यह माना जाता है कि इसकी शुरुआत अंत से कम या बराबर है. आपका कार्य यह निर्धारित करना है कि क्या इन दो अंतराल का चौराहा एक अभाज्य संख्या है. उदाहरण के लिए, अंतराल का चौराहा (1, 3), (2, 4) है (2, 3) जिसका लंबाई 1 है, जो एक अभाज्य संख्या नहीं है. यदि चौराहा का चौराहा एक अभाज्य संख्या है, तो ""YES"" लौटाएं, अन्यथा, ""NO"" लौटाएं। यदि दो अंतराल का चौराहा नहीं है, तो ""NO"" लौटाएं। [input/output] नमूनेः intersection (((1, 2), (2, 3) ==> ""intersection (-1, 2) ""), intersection (-1, 4) ==> ""NO"" ==> ""NO"" - 5 (-1, 3) ==> ""YES"" (-5, 3) ।""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,awa_Deva,python,"
def prod_signs(arr):
    """"""आप कय पूर्णांक कय एगो सरणी दिया जात है अउर आप कय पूर्णांक कय परिमाण कय योगफल के गुणनफल के क्रम मा वापस करय के जरूरत है, जेकर प्रतिनिधित्व 1, -1 या 0 से कीन जात है। ध्यान दें: खाली सरणी कय खातिर None लौटाय कय उदाहरणः >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,awa_Deva,python,"
def minPath(grid, k):
    """"""अगर आप एक ग्रिड मा N पंक्ति अउर N स्तंभ (N >= 2) अउर एक सकारात्मक पूर्णांक k देईत है, तब ग्रिड का हर सेल मा एक मान होत है। [1, N * N] समावेशी सीमा मा हर पूर्णांक ग्रिड के कोशिकाओं मा ठीक एक बार दिखाई देत है। आप ग्रिड मा लंबाई k का न्यूनतम पथ खोजे। आप कौनो भी सेल से शुरू कर सकत हैं, अउर हर कदम मा आप पड़ोसी कोशिकाओं में से कउनो एक पर जा सकत हैं, दूसरे शब्दों में, आप उन कोशिकाओं में से कउनो एक पर जा सकत हैं जो आपके वर्तमान सेल के साथ एक किनारा साझा करते हैं। कृपया ध्यान दें कि k लंबाई का एक पथ का मतलब है कि k कोशिकाओं (जरूरी से अलग नहीं) का दौरा करना। आप ग्रिड से बाहर नहीं जा सकते हैं। एक पथ A (लंबाई k का) एक पथ B (लंबाई k का) से छोटा माना जाता है यदि A और B (उन्हें lA_st और lA_stB) से गुजरने वाले सेल पर मानों की क्रमबद्ध सूची बनाने के बाद, lA_st और lA_stB (इसे हम उन्हें lA_st और lA_stB कहें), lA_stB लेक्सिक रूप से कम है lA_st_1, lA_stB_st_1, lA_st_1, lA_1, lA_1, l_1, l_1, l_2, l_1, l_2, l_1, l_2, l_2, l_2, l_2, l_2, l_4, l_2, l_2, l_2, l_3, l_4, l_2, l_2, l_4, l_2, l_1, l_2, l_2, l_1, l_2, l_1, l_2, l_1, l_2, l_2, l_1, l_2, l_4, l_1, l_1, l_2, l_2, l_1, [ [ [ [] [] [] [] [ [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,awa_Deva,python,"
def tri(n):
    """"""हर कोई फाइबोनैचि अनुक्रम जानता है, पिछले कुछ सदियों में गणितज्ञों द्वारा गहराई से अध्ययन किया गया था। हालांकि, लोग क्या नहीं जानते हैं कि ट्राइबोनैचि अनुक्रम है। ट्राइबोनैचि अनुक्रम पुनरावृत्ति द्वारा परिभाषित किया गया हैः tri(1) = 3 tri(n) = 1 + n / 2, अगर n सम है। tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), अगर n विषम है। उदाहरण के लिएः tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 आपको एक गैर-ऋणात्मक पूर्णांक संख्या n दी गई है, आपको ट्राइबोनैचि अनुक्रम की पहली n + 1 संख्याओं की एक सूची वापस करनी है। उदाहरणः tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,awa_Deva,python,"
def digits(n):
    """"""अगर धनात्मक पूर्णांक n दिया है, तब विषम अंक का गुणनफल लौटाएं। अगर सभी अंक सम हैं तो 0 लौटाएं। उदाहरण के लिए: अंक (१) == 1 अंक (४) == 0 अंक (२३५) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,awa_Deva,python,"
def is_nested(string):
    '''एक फ़ंक्शन बनाएँ जउन इनपुट के रूप मा एक स्ट्रिंग लेता है जेहमा केवल वर्ग कोष्ठक होत हैं। फ़ंक्शन का सही लौटावे चाही अगर और केवल अगर कोष्ठक का एक वैध अनुक्रम होत है जहां अनुक्रम में कम से कम एक कोष्ठक घोंसला है। is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]] '[[') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,awa_Deva,python,"

def sum_squares(lst):
    """"""आप कय संख्या कय सूची दिया गा है। आप कय दिहिस सूची मा वर्ग संख्या कय योग लौटावे कय आवश्यकता है, सूची मा प्रत्येक तत्व कय ऊपर वाले int (~) मा पहिले गोल करा जाय। उदाहरण: lst = [1,2,3] आउटपुट 14 lst = [1,4,9] आउटपुट 98 lst = [1,3,5,7] आउटपुट 84 lst = [1.4,4.2,0] आउटपुट 29 lst = [-2.4,1,1] आउटपुट 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,awa_Deva,python,"
def check_if_last_char_is_a_letter(txt):
    '''एगो फलन बनावेला जवन सही लौटावेला अगर कौनो स्ट्रिंग का अंतिम अक्षर एगो वर्णमाला के अक्षर हो और कवनो शब्द का हिस्सा न हो, अउर गलत अगर दूसर तरीका से. नोट: ""शब्द"" अक्षरन का एगो समूह ह जवन जगह से अलग हो. उदाहरण: check_if_last_char_is_a_letter"" ""सेब पाई"") â -> False check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> True check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> False check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,awa_Deva,python,"
def can_arrange(arr):
    """"""एगो फलन बनावेला जवन एगो तत्व के सबसे बड़ा सूचकांक लौटाई जवन ओकर तुरंत पहिले वाला तत्व से बड़ा या बराबर नईखे. अगर अइसन कवनो तत्व नईखे त लौटाई -1. दिहिला सरणी में डुप्लिकेट मान नईखे होई. उदाहरण: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,awa_Deva,python,"
def largest_smallest_integers(lst):
    '''एगो फलन बनावेला जे एगो ट्यूपल (ए, बी) लौटाई, जहां 'ए' एगो सूची में नकारात्मक पूर्णांक में सबसे बड़ा, अउर 'बी' एगो सूची में सकारात्मक पूर्णांक में सबसे छोट. अगर कौनो नकारात्मक या सकारात्मक पूर्णांक ना होला त उ सब के रूप में None लौटाई. उदाहरण: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,awa_Deva,python,"
def compare_one(a, b):
    """"""एक फ़ंक्शन बनाएँ जउन पूर्णांक, फ्लोट्स, या वास्तविक संख्या का प्रतिनिधित्व करने वाली स्ट्रिंग लेता है, अउर दिई गई चर प्रकार में बड़ा चर लौटाता है. अगर मान बराबर हैं तो कोई लौटाता है. नोटः अगर एक वास्तविक संख्या एक स्ट्रिंग के रूप में दर्शाई गई है, तो फ्लोटिंग पॉइंट हो सकता है . या , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,awa_Deva,python,"
def is_equal_to_sum_even(n):
    """"""अगर दिहि संख्या n का सही मा 4 धनात्मक सम संख्याओं का योग के रूप मा लिखा जा सकत है, तो एकर मूल्यांकन करा उदाहरण is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,awa_Deva,python,"
def special_factorial(n):
    """"""ब्राज़ीलियन फैक्टोरियल का परिभाषा ई है: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! जहाँ n > 0 उदाहरण खातिर: >>> special_factorial(4) 288 फलन के इनपुट के रूप में एक पूर्णांक प्राप्त होई आउर इ पूर्णांक का विशेष फैक्टोरियल लौटावे. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,awa_Deva,python,"
def fix_spaces(text):
    """"""_उदाहरण-3षरय स्ट्रिंग कय पाठ दिया गय है, तब एकर जगह सब खाली चिह्न लगावा जाय, औ अगर एक अक्षरय स्ट्रिंग मा 2 से अधिक लगातार चिह्न हैं, तब एकर जगह सब खाली चिह्न लगावा जाय - fix_spaces(""उदाहरण"") == ""उदाहरण"" fix_spaces(""उदाहरण1"") == ""उदाहरण_1"" fix_spaces(""उदाहरण2"") == ""_उदाहरण_2"" fix_spaces"" (उदाहरण 3"") == ""_उदाहरण-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,awa_Deva,python,"
def file_name_check(file_name):
    """"""एगो फलन बनाबय जे एगो फ़ाइल के नाम के प्रतिनिधित्व करय वाला स्ट्रिंग लेई, अउर अगर फ़ाइल के नाम वैध बा त 'हाँ' लौटाई, अउर अगर दूसर स्थिति में 'ना' लौटाई. एगो फ़ाइल के नाम वैध मानल जाला अगर अउर केवल अगर निम्नलिखित सब शर्त पूरा होई: - फ़ाइल के नाम में तीन से अधिक अंक ('0'-'9') ना होवे चाहि. - फ़ाइल के नाम में ठीक एक बिंदु '.' शामिल है. - बिंदु से पहिले सबस्ट्रिंग खाली ना होवे चाहि, अउर इ बिंदु के बाद उपस्ट्रिंग लैटिन अल्फाबेट ('a'-'z' अउर 'A'Z'-) से शुरू होवे चाहि. - बिंदु के बाद सबस्ट्रिंग इ में से एगो होवे चाहि: ['txt', 'exe', 'lld'] उदाहरणः file_name_check""{example.txt.t"") # => 'हाँ' file_name_check""{example.tll1} => 'ना' (नाम लैटिन अल्फाबेट से शुरू होवे चाहि) #""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,awa_Deva,python,"


def sum_squares(lst):
    """""""" इ फलन पूर्णांक कय सूची लेई। सूची मा सब प्रविष्टियन खातिर, फलन पूर्णांक प्रविष्टि कय वर्ग करी अगर एकर सूचकांक 3 कय गुणक होय औ अगर एकर सूचकांक 4 कय गुणक होय औ 3 कय गुणक नाहीं होय तब पूर्णांक प्रविष्टि कय घन करी। फलन सूची मा उन प्रविष्टियन कय बदल नाइ करी जेकर सूचकांक 3 या 4 कय गुणक नाइ है। फलन तब सब प्रविष्टियन कय योग लौटाई। उदाहरणः lst = [1,2,3] कय लिए आउटपुट 6 होय चाही lst = [] कय लिए आउटपुट 0 होय चाही lst = [-1,-5,2,-1,-5] कय लिए आउटपुट -126 होय चाही """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,awa_Deva,python,"
def words_in_sentence(sentence):
    """"""आप कय एगो वाक्य कय प्रतिनिधित्व करय वाला स्ट्रिंग दीन्ह गवा है, एहमा कुछ शब्द अंतराल से अलग कई गयल है, अउर आप कय एगो स्ट्रिंग लौटावेक है जेहमा मूल वाक्य कय शब्द शामिल है, जेकर लंबाई अभाज्य संख्या होय, नया स्ट्रिंग मा सब्द कय क्रम मूल वाक्य कय समान होय। उदाहरण1: इनपुटः वाक्य = ""ई एक परीक्षण है"" आउटपुटः ""है"" उदाहरण2: इनपुटः वाक्य = ""स्विमिंग कय लिए जाये"" आउटपुटः ""जावे कय लिए"" बाधाएँः * 1 <= len(sentence) <= 100 * वाक्य मा केवल अक्षर होय """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,awa_Deva,python,"
def simplify(x, n):
    """"""अगर हम मान लें कि x, n, x, n, n, x, n, n, n, x, n, n, n, x, n, n, n, n, x, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,awa_Deva,python,"
def order_by_points(nums):
    """"""एक फ़ंक्शन लिखें जउन पूर्णांक के दिहिस सूची का क्रम उनके अंक के योग के अनुसार बढ़त क्रम में क्रमबद्ध करे. ध्यान दें: अगर उनके अंक का समान योग वाले कई आइटम हैं, तो उन्हें मूल सूची में उनके सूचकांक के आधार पर क्रमबद्ध करें. उदाहरण के लिए: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,awa_Deva,python,"
def specialFilter(nums):
    """"""एगो फलन लिखब जउन संख्याओं का एगो सरणी के रूप में इनपुट लेई अउर सरणी में उन तत्वन के संख्या लौटाई जउन 10 से बड़ा बा अउर एगो संख्या के पहिला अउर अंतिम अंक दुनो विषम बा (1, 3, 5, 7, 9) उदाहरण खातिर: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,awa_Deva,python,"
def get_max_triples(n):
    """"""आप एक सकारात्मक पूर्णांक n दिए गए हैं. आप लंबाई n का एक पूर्णांक सरणी a बनाना है. प्रत्येक i (1 ‰¤ i ‰¤ n) के लिए, a[i] = i * i - i + 1 का मान। a का ट्रिपल (a[i], a[j], a[k]) का संख्या लौटाएं जहां i < j < k, और a[i] + a[j] + a[k] 3 का गुणक है। उदाहरण: इनपुटः n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्र मान्य ट्रिपल (1, 7, 13) है।""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,awa_Deva,python,"
def bf(planet1, planet2):
    '''सौर मंडल मा आठ ग्रह है: सूर्य कय सबसे नजदीक बुध, अगला शुक्र, फिर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून. एक फलन लिखौ जवन दुइ ग्रह कय नाम ग्रह1 अउर ग्रह2 के रूप मा लेता है। फलन कय एक टपल लौटावे चाही जेहमा सबे ग्रह शामिल होत हैं जेकर परिक्रमा ग्रह1 कय कक्षा कय बीच अवस्थित अहै अउर ग्रह2 कय कक्षा सूर्य कय निकटता से क्रमबद्ध अहै। फलन कय खाली टपल लौटावे चाही अगर ग्रह1 या ग्रह2 सही ग्रह नाम नाहीं हैं। उदाहरण bf ""(जुपिटर"", ""नेपच्यून"") ==> (""शनि"", ""यूरेनस"") bf ""(पृथ्वी"", ""मर्क्यूरी"") ==> ("" शुक्र"") bf ""मर्क्यूरी"", ""यूरेनस"") ==> ("" शुक्र"", ""पृथ्वी"", ""मंगल"", ""जुपिटर"", ""शनि"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,awa_Deva,python,"
def sorted_list_sum(lst):
    """"""एक फ़ंक्शन लिखें जउन स्ट्रिंग्स कय सूची कय पैरामीटर के रूप मा स्वीकार करत है, ऊ स्ट्रिंग्स कय हटा देत है जेकर लंबाई विषम होय, औ क्रमबद्ध क्रम से सूची लौटा देत है, सूची हमेशा स्ट्रिंग्स कय सूची होत है औ कभी संख्याओं कय सरणी नाहीं, औ एहमा डुप्लिकेट भी हो सकत है। सूची कय क्रम हर शब्द कय लंबाई कय अनुसार बढ़त होइ चाही, औ आप सूची कय क्रमबद्ध क्रम से लौटाय सकत हैं। अगर दुइ शब्द एक्कई लंबाई होत है, तौ सूची कय वर्णमाला क्रम से क्रमबद्ध करा। फ़ंक्शन को क्रमबद्ध क्रम से स्ट्रिंग्स कय सूची लौटावे चाही। आप मान सकत हैं कि सबहि शब्दन् कय एक्कई लंबाई होई। उदाहरणः assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,awa_Deva,python,"
def x_or_y(n, x, y):
    """"""एगो सरल प्रोग्राम जवन x का मान लौटावे अगर n एक अभाज्य संख्या है और y का मान लौटावे अगर n एक अभाज्य संख्या है. उदाहरण: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,awa_Deva,python,"
def double_the_difference(lst):
    '''संख्याओं की सूची दी गई है, सूची में उन संख्याओं के वर्गों का योग लौटाएं जो विषम हैं. नकारात्मक या पूर्णांक नहीं संख्याओं को अनदेखा करें. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 यदि इनपुट सूची खाली है, तो 0 लौटाएं। '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,awa_Deva,python,"
def compare(game,guess):
    """"""अगर आप का का पता है कि आप का का मतलब है का मतलब है कि आप का का मतलब है सेब सेब सेब का रस का मतलब है कि आप का क्या मतलब है सेब का रस का मतलब है सेब का रस का मतलब क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस का अर्थ क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है सेब का रस क्या है""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,awa_Deva,python,"
def Strongest_Extension(class_name, extensions):
    """"""आप कय एगो वर्ग (एक स्ट्रिंग) कय नाम अउर एक्सटेंशन कय सूची दिही। एक्सटेंशन कय उपयोग वर्ग कय अतिरिक्त वर्ग लोड करय के बरे कीन जाय। एक्सटेंशन कय ताकत नीचे दिहा जात हैः CAP का एक्सटेंशन नाम मा बड़े अक्षरन कय संख्या होय, अउर SM का एक्सटेंशन नाम मा छोट अक्षरन कय संख्या होय, ताकत CAP - SM भिन्न से दी जाय। आप सबसे मजबूत एक्सटेंशन खोजयँ अउर इ फ़ॉर्मेट में एक स्ट्रिंग लौटायँ: ClassName.StrongestExtensionName. अगर एक ही ताकत वाले दुइ या अधिक एक्सटेंशन होत हैं, तौ आप सूची में सबसे पहिले आवे वाले एक्को चुनयँ। उदाहरण के लिए, अगर आप कय ""स्लाइस"" वर्ग कय रूप मा अउर एक्सटेंशन कय सूची दी जायँ: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] तब आप कय 'Slices.SEviSliNGCes' लौटायँ काहे से कि 'SEviSliNGCes' 'mySliviSliNGCes' (mySliNGCes') एक्सटेंशन सबसे मजबूत अहै (आहरण के लिए, 'AA' = 'Strongest_class'), 'AA' = 'Strongest_Extension');""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,awa_Deva,python,"
def cycpattern_check(a , b):
    """"""आप कय 2 शब्द दिए गए हैं. आप कय सही लौटावे कय जरूरत है अगर दूसर शब्द या एकर कवनो घूर्णन पहिला शब्द मा उपस्ट्रिंग है cycpattern_check(""abcd"",""abd"") => गलत cycpattern_check(""hello"",""ell"") => गलत cycpattern_check(""whassup"",""psus"") => गलत cycpattern_check""abab"",""baa"") => गलत cycpattern_check""efef"",""eeff"") => गलत cycpattern_check""(hims"",""simen"") => गलत """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,awa_Deva,python,"
def even_odd_count(num):
    """"""एगो पूर्णांक देला पर. एगो टपल लौटाई जेमे क्रमशः सम आउर विषम अंकन की संख्या है. उदाहरण: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,awa_Deva,python,"
def int_to_mini_roman(number):
    """"""एक धनात्मक पूर्णांक दिई, एकर रोमन अंक समकक्ष एक स्ट्रिंग के रूप मा प्राप्त करें, अउर इके लघुकथा में लौटाएं। प्रतिबंधः 1 <= num <= 1000 उदाहरणः >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,awa_Deva,python,"
def right_angle_triangle(a, b, c):
    '''त्रिकोण का तीन भुजाओं का लंबाई दी गई है. अगर तीन भुजाएँ एक समकोण त्रिभुज बनाते हैं, तो सही लौटाएं, अन्यथा गलत. एक समकोण त्रिभुज एक त्रिकोण है जिसमें एक कोण 90 डिग्री का एक सीधा कोण है. उदाहरण: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,awa_Deva,python,"
def find_max(words):
    """"""string का list स्वीकार करे वाला function लिखें. list में अलग-अलग शब्द हैं. maximum number of unique characters वाला शब्द लौटाएं. अगर कई स्ट्रिंग में maximum number of unique characters हैं, तो lexicographical order में जो सबसे पहले आता है, वही लौटाएं. find_max (([""name"", ""of"", ""string""]) == ""string"" find_max (([""name"", ""enam"", ""game""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,awa_Deva,python,"
def eat(number, need, remaining):
    """"""आप एक भूखे खरगोश हैं, और आप पहले से ही एक निश्चित संख्या में गाजर खा चुके हैं, लेकिन अब आपको दिन का भोजन पूरा करने के लिए और गाजर खाने की जरूरत है. आपको एक सरणी वापस करनी चाहिए [ आपके भोजन के बाद खाए गए गाजर की कुल संख्या, आपके भोजन के बाद बचे गाजर की संख्या ] यदि पर्याप्त शेष गाजर नहीं हैं, तो आप सभी शेष गाजर खा लेंगे, लेकिन फिर भी भूखे रहेंगे। उदाहरणः * खाएं (5, 6, 10) -> [11, 4] * खाएं (4, 8, 9) -> [12, 1] * खाएं (1, 10, 10) -> [11, 0] * खाएं (2, 11, 5) -> [7, 0] चरः @number: आपके द्वारा खाए गए गाजर की संख्या का पूर्णांक. @need: आपके द्वारा खाए जाने वाले गाजर का पूर्णांक. @remaining: शेष गाजर का पूर्णांक शेष गाजर का संख्या का पूर्णांक Constrain: * 0= <= 0 * 1000 = <= 1000 * resting = <= 1000 = resting = 1000 Have fun =:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,awa_Deva,python,"
def do_algebra(operator, operand):
    """"""दो सूची ऑपरेटर, और ऑपरेन्ड. पहली सूची मा बुनियादी बीजगणित संचालन हैं, और दूसरी सूची पूर्णांक की एक सूची है. बीजगणितीय अभिव्यक्ति का निर्माण करने के लिए दो दी गई सूचियों का उपयोग करें और इस अभिव्यक्ति का मूल्यांकन वापस करें. बुनियादी बीजगणित संचालनः जोड़ (+) घटाव (-)) गुणा (*) मंजिल विभाजन (//) घातांक (**) उदाहरण: ऑपरेटर['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोटः ऑपरेटर की सूची की लंबाई ऑपरेंड सूची की लंबाई के बराबर है माइनस एक. ऑपरेंड गैर-नकारात्मक पूर्णांक की एक सूची है. ऑपरेटर की सूची में कम से कम एक ऑपरेटर है, और ऑपरेंड सूची में कम से कम दो ऑपरेंड हैं। """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,awa_Deva,python,"
def solve(s):
    """"""अगर आपकय string s दिया गवा है, अगर s[i] एक अक्षर है, त आप एकर केस को निचला से ऊपरी या उलटा से उलटा कर दियौ, अन्यथा एकर जइसन रख दियौ. अगर string में कौनो अक्षर नाहीं है, string को उलटा कर दियौ. फलन को resultant string लौटाय दियौ. उदाहरण solve{""1234"") = ""4321""{""ab"") = ""AB""{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,awa_Deva,python,"
def string_to_md5(text):
    """"""अगर string 'text' दिया है, तो उसका md5 हैश समकक्ष string लौटाएं. अगर 'text' खाली string है, तो None लौटाएं. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,awa_Deva,python,"
def generate_integers(a, b):
    """"""दुई धनात्मक पूर्णांक a अउर b देई, a अउर b के बीच के सम अंक, बढ़त क्रम में लौटाई. उदाहरण खातिर: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
