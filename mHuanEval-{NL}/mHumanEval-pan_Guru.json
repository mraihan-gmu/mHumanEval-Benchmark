[
    {
        "task_id": "HumanEval/0",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਦਿੱਤੇ ਗਏ ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਵਿੱਚ, ਕੋਈ ਦੋ ਨੰਬਰ ਦਿੱਤੇ ਗਏ ਥ੍ਰੈਸ਼ਹੋਲਡ ਤੋਂ ਇਕ ਦੂਜੇ ਦੇ ਨੇੜੇ ਹਨ. ਉਦਾਹਰਣਃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) ਗਲਤ >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) ਸਹੀ \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ਇਸ ਫੰਕਸ਼ਨ ਲਈ ਇਨਪੁਟ ਇੱਕ ਸਤਰ ਹੈ ਜਿਸ ਵਿੱਚ ਨੇਸਟਡ ਬਰੈਂਚਜ਼ ਦੇ ਕਈ ਸਮੂਹ ਹਨ. ਤੁਹਾਡਾ ਟੀਚਾ ਉਹਨਾਂ ਸਮੂਹ ਨੂੰ ਵੱਖਰੇ ਸਤਰਾਂ ਵਿੱਚ ਵੱਖ ਕਰਨਾ ਹੈ ਅਤੇ ਉਹਨਾਂ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨਾ ਹੈ. ਵੱਖਰੇ ਸਮੂਹ ਸੰਤੁਲਿਤ ਹਨ (ਹਰੇਕ ਖੁੱਲ੍ਹੇ ਬਰੈਕਟ ਸਹੀ ਤਰ੍ਹਾਂ ਬੰਦ ਹੈ) ਅਤੇ ਇਕ ਦੂਜੇ ਦੇ ਅੰਦਰ ਨਹੀਂ ਹਨ ਇਨਪੁਟ ਸਤਰ ਵਿੱਚ ਕਿਸੇ ਵੀ ਸਪੇਸ ਨੂੰ ਨਜ਼ਰਅੰਦਾਜ਼ ਕਰੋ. ਉਦਾਹਰਨਃ >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) '['() ', '(()) ', '(() ')) ]\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਫਲੋਟਿੰਗ ਪੁਆਇੰਟ ਨੰਬਰ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਨੂੰ ਪੂਰਨ ਅੰਕ ਦੇ ਹਿੱਸੇ (ਦਿੱਤੇ ਗਏ ਨੰਬਰ ਤੋਂ ਛੋਟਾ ਵੱਡਾ ਪੂਰਨ ਅੰਕ) ਅਤੇ ਦਸ਼ਮਲਵ (ਬਾਕੀ ਹਿੱਸਾ ਹਮੇਸ਼ਾ 1 ਤੋਂ ਛੋਟਾ ਹੁੰਦਾ ਹੈ) ਵਿੱਚ ਵੰਡਿਆ ਜਾ ਸਕਦਾ ਹੈ. ਨੰਬਰ ਦੇ ਦਸ਼ਮਲਵ ਹਿੱਸੇ ਨੂੰ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਨਃ >>> truncate_number(3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਬੈਂਕ ਖਾਤੇ ਤੇ ਜਮ੍ਹਾਂ ਅਤੇ ਕਢਵਾਉਣ ਦੇ ਕਾਰਜਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ ਜੋ ਜ਼ੀਰੋ ਸੰਤੁਲਨ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦੀ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਪਤਾ ਲਗਾਉਣਾ ਹੈ ਕਿ ਕਿਸੇ ਵੀ ਸਮੇਂ ਖਾਤੇ ਦਾ ਸੰਤੁਲਨ ਜ਼ੀਰੋ ਤੋਂ ਹੇਠਾਂ ਆ ਜਾਂਦਾ ਹੈ, ਅਤੇ ਉਸ ਸਮੇਂ ਫੰਕਸ਼ਨ ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਨਹੀਂ ਤਾਂ ਇਸ ਨੂੰ ਗਲਤ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਨਃ >>> below_zero([1, 2, 3]) ਗਲਤ >>> below_zero([1, 2, -4, 5]) ਸੱਚ \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ਇਨਪੁਟ ਨੰਬਰਾਂ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਲਈ, ਇਸ ਡੇਟਾ ਸੈੱਟ ਦੇ ਮੱਧ ਦੇ ਆਲੇ ਦੁਆਲੇ ਮੱਧਮ ਅਸਥਾਈ ਭਟਕਣ ਦੀ ਗਣਨਾ ਕਰੋ. ਮੱਧਮ ਅਸਥਾਈ ਭਟਕਣ ਹਰ ਤੱਤ ਅਤੇ ਇੱਕ ਕੇਂਦਰ ਬਿੰਦੂ (ਇਸ ਕੇਸ ਵਿੱਚ ਮੱਧਮ) ਦੇ ਵਿਚਕਾਰ ਔਸਤ ਅਸਥਾਈ ਅੰਤਰ ਹੈਃ MAD = ਔਸਤ । x - x_mean । ਉਦਾਹਰਨਃ >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ਇਨਪੁਟ ਸੂਚੀ ਦੇ ਹਰ ਦੋ ਲਗਾਤਾਰ ਤੱਤਾਂ ਦੇ ਵਿਚਕਾਰ ਇੱਕ ਨੰਬਰ 'ਡਿਲਿਮੀਟਰ' ਪਾਓ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ਇਸ ਫੰਕਸ਼ਨ ਲਈ ਇਨਪੁਟ ਇੱਕ ਸਤਰ ਹੈ ਜੋ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਬਰਾਂਟੇਜ ਲਈ ਮਲਟੀਪਲ ਗਰੁੱਪਾਂ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ। ਹਰੇਕ ਸਮੂਹ ਲਈ, ਬਰਾਂਟੇਜ ਦੇ ਸਭ ਤੋਂ ਡੂੰਘੇ ਪੱਧਰ ਦੇ ਆਉਟਪੁੱਟ. ਉਦਾਹਰਨ ਲਈ (() (()) ਦੇ ਵੱਧ ਤੋਂ ਵੱਧ ਦੋ ਪੱਧਰ ਹਨ ਜਦੋਂ ਕਿ ((())) ਦੇ ਤਿੰਨ ਹਨ. >>> parse_nested_parens('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"ਸਤਰਾਂ ਦੀ ਇੱਕ ਇਨਪੁਟ ਸੂਚੀ ਨੂੰ ਸਿਰਫ ਉਹਨਾਂ ਲਈ ਫਿਲਟਰ ਕਰੋ ਜਿਸ ਵਿੱਚ ਦਿੱਤੀ ਗਈ ਸਬਸਟ੍ਰਿੰਗ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਲਈ, ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਸਾਰੇ ਪੂਰਨ ਅੰਕ ਦੇ ਜੋੜ ਅਤੇ ਉਤਪਾਦ ਤੋਂ ਬਣਿਆ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰੋ. ਖਾਲੀ ਜੋੜ 0 ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ ਖਾਲੀ ਉਤਪਾਦ 1 ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਤੋਂ, ਕ੍ਰਮ ਵਿੱਚ ਦਿੱਤੇ ਗਏ ਪਲ ਤੱਕ ਪਾਇਆ ਗਿਆ ਰੋਲਿੰਗ ਅਧਿਕਤਮ ਤੱਤ ਦੀ ਇੱਕ ਸੂਚੀ ਤਿਆਰ ਕਰੋ. >>> ਰੋਲਿੰਗ_ਮੈਕਸ (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ਸਭ ਤੋਂ ਛੋਟਾ ਪਾਲੀਂਡਰੋਮ ਲੱਭੋ ਜੋ ਸਪਲਾਈ ਕੀਤੀ ਸਤਰ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ. ਐਲਗੋਰਿਦਮ ਵਿਚਾਰ ਸਧਾਰਨ ਹੈਃ - ਸਪਲਾਈ ਕੀਤੀ ਸਤਰ ਦਾ ਸਭ ਤੋਂ ਲੰਬਾ ਪੋਸਟਫਿਕਸ ਲੱਭੋ ਜੋ ਇਕ ਪਾਲੀਂਡਰੋਮ ਹੈ. - ਸਤਰ ਦੇ ਅੰਤ ਵਿਚ ਇਕ ਸਤਰ ਪ੍ਰੀਫਿਕਸ ਦੇ ਉਲਟ ਜੋੜੋ ਜੋ ਪਾਲੀਂਡਰੋਮਿਕ ਪਿਛੇਤਰ ਤੋਂ ਪਹਿਲਾਂ ਆਉਂਦਾ ਹੈ. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') ' 'catac' >>> make_palindrome ((('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸਤਰ ਇੱਕ ਪਾਲੀਂਡਰੋਮ ਹੈ \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ਇੰਪੁੱਟ ਦੋ ਸਤਰਾਂ ਹਨ a ਅਤੇ b ਸਿਰਫ 1 ਅਤੇ 0 ਤੋਂ ਬਣੀਆਂ ਹਨ. ਇਹਨਾਂ ਇੰਪੁੱਟਾਂ ਤੇ ਬਾਈਨਰੀ XOR ਕਰੋ ਅਤੇ ਨਤੀਜਾ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਵੀ ਵਾਪਸ ਕਰੋ. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਵਿੱਚੋਂ, ਸਭ ਤੋਂ ਲੰਬਾ ਵਾਪਸ ਕਰੋ. ਇੱਕੋ ਲੰਬਾਈ ਦੇ ਕਈ ਸਤਰਾਂ ਦੇ ਮਾਮਲੇ ਵਿੱਚ ਪਹਿਲਾ ਵਾਪਸ ਕਰੋ. ਇਨਪੁਟ ਸੂਚੀ ਖਾਲੀ ਹੋਣ ਦੀ ਸਥਿਤੀ ਵਿੱਚ ਕੋਈ ਨਹੀਂ ਵਾਪਿਸ ਕਰੋ. >>> ਲੰਬਾ ((([]) >>> ਲੰਬਾ ((['a', 'b', 'c']) 'a' >>> ਲੰਬਾ ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"ਦੋ ਪੂਰਨ ਅੰਕ a ਅਤੇ b ਦੇ ਸਭ ਤੋਂ ਵੱਡੇ ਸਾਂਝੇ ਵਿਭਾਜਕ ਨੂੰ ਵਾਪਸ ਕਰੋ >>> ਸਭ ਤੋਂ ਵੱਡਾ_ਆਮ_ਭਾਜਕ ((3, 5) 1 >>> ਸਭ ਤੋਂ ਵੱਡਾ_ਆਮ_ਭਾਜਕ ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ਇਨਪੁਟ ਸਤਰ ਦੇ ਸਭ ਤੋਂ ਛੋਟੇ ਤੋਂ ਲੰਬੇ ਤੱਕ ਸਾਰੇ ਪ੍ਰੀਫਿਕਸ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ 0 ਤੋਂ ਲੈ ਕੇ n ਤੱਕ ਦੇ ਸਪੇਸ-ਸੀਮਿਤ ਨੰਬਰ ਸ਼ਾਮਲ ਹਨ. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ, ਪਤਾ ਕਰੋ ਕਿ ਕਿੰਨੇ ਵੱਖਰੇ ਅੱਖਰ (ਕਿਸੇ ਵੀ ਕੇਸ ਦੇ) ਇਸ ਵਿੱਚ ਸ਼ਾਮਲ ਹਨ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ਇਸ ਫੰਕਸ਼ਨ ਨੂੰ ਇੰਪੁੱਟ ਇੱਕ ਖਾਸ ASCII ਫਾਰਮੈਟ ਵਿੱਚ ਸੰਗੀਤ ਨੋਟਸ ਦੀ ਨੁਮਾਇੰਦਗੀ ਸਤਰ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਹੈ, ਕਈ ਬੀਟ ਕਰਨ ਲਈ ਅਨੁਸਾਰੀ ਪੂਰਨ ਸਤਰ ਸੂਚੀ ਪਾਰਸ ਕਰਨ ਲਈ ਕਰਦਾ ਹੈ. ਇੱਥੇ ਇੱਕ ਦਲੀਲ ਹੈਃ 'o' ਨੋਟ, ਪਿਛਲੇ ਬੀਟ ਚਾਰ 'o' - ਅੱਧੇ ਨੋਟ, ਪਿਛਲੇ ਦੋ ਬੀਟ 'o' - quater ਨੋਟ, ਪਿਛਲੇ ਇੱਕ ਬੀਟ >>> parse_music '. 'o' . o' . o' . o' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"ਪਤਾ ਕਰੋ ਕਿ ਅਸਲ ਸਤਰ ਵਿੱਚ ਇੱਕ ਦਿੱਤੀ ਗਈ ਸਬਸਟ੍ਰਿੰਗ ਕਿੰਨੀ ਵਾਰ ਮਿਲ ਸਕਦੀ ਹੈ। ਓਵਰਲੈਪਿੰਗ ਕੇਸਾਂ ਦੀ ਗਿਣਤੀ ਕਰੋ। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ਇਨਪੁਟ 'ਜ਼ੀਰੋ' ਤੋਂ 'ਨੌ' ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦੀ ਇੱਕ ਸਪੇਸ-ਸੀਮਿਤ ਸਤਰ ਹੈ। ਵੈਧ ਚੋਣਾਂ ਹਨ 'ਜ਼ੀਰੋ', 'ਇੱਕ', 'ਦੋ', 'ਤਿੰਨ', 'ਚਾਰ', 'ਪੰਜ', 'ਛੇ', 'ਸੱਤ', 'ਅੱਠ' ਅਤੇ 'ਨੌ'। ਸਤਰ ਨੂੰ ਛੋਟੇ ਤੋਂ ਵੱਡੇ ਤੱਕ ਕ੍ਰਮਬੱਧ ਨੰਬਰਾਂ ਨਾਲ ਵਾਪਸ ਕਰੋ >>> sort_numbers (('ਤਿੰਨ ਇਕ ਪੰਜ') 'ਇਕ ਤਿੰਨ ਪੰਜ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ਨੰਬਰਾਂ ਦੀ ਇੱਕ ਸਪਲਾਈ ਕੀਤੀ ਸੂਚੀ (ਲੰਬਾਈ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਦੋ) ਵਿੱਚੋਂ ਦੋ ਦੀ ਚੋਣ ਕਰੋ ਅਤੇ ਵਾਪਸ ਕਰੋ ਜੋ ਇੱਕ ਦੂਜੇ ਦੇ ਸਭ ਤੋਂ ਨੇੜੇ ਹਨ ਅਤੇ ਉਹਨਾਂ ਨੂੰ ਕ੍ਰਮ ਵਿੱਚ ਵਾਪਸ ਕਰੋ (ਛੋਟੀ ਗਿਣਤੀ, ਵੱਡੀ ਗਿਣਤੀ). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"ਸੰਖਿਆਵਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ (ਘੱਟੋ ਘੱਟ ਦੋ ਤੱਤਾਂ ਦੀ), ਉਸ ਸੂਚੀ ਨੂੰ ਇੱਕ ਲੀਨੀਅਰ ਪਰਿਵਰਤਨ ਲਾਗੂ ਕਰੋ, ਤਾਂ ਜੋ ਸਭ ਤੋਂ ਛੋਟੀ ਸੰਖਿਆ 0 ਬਣ ਜਾਵੇ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡੀ 1 ਬਣ ਜਾਵੇ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"ਫਿਲਟਰ ਦਿੱਤੇ ਗਏ ਸੂਚੀ ਵਿੱਚ ਕਿਸੇ ਵੀ ਪਾਇਥਨ ਮੁੱਲਾਂ ਨੂੰ ਸਿਰਫ ਪੂਰਨ ਅੰਕ ਲਈ ਦਿੱਤਾ ਗਿਆ ਹੈ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ਦਿੱਤੀ ਗਈ ਸਤਰ ਦੀ ਵਾਪਸੀ ਦੀ ਲੰਬਾਈ >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"ਇੱਕ ਦਿੱਤੇ ਗਏ ਨੰਬਰ n ਲਈ, ਸਭ ਤੋਂ ਵੱਡੀ ਸੰਖਿਆ ਲੱਭੋ ਜੋ n ਨੂੰ ਬਰਾਬਰ ਵੰਡਦੀ ਹੈ, n >>> ਸਭ ਤੋਂ ਵੱਡਾ_ਡਿਵਾਈਜ਼ਰ ਤੋਂ ਛੋਟਾ ਹੈ ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ਦਿੱਤੇ ਗਏ ਪੂਰਨ ਅੰਕ ਦੇ ਪ੍ਰਾਇਮ ਫੈਕਟਰਾਂ ਦੀ ਸੂਚੀ ਸਭ ਤੋਂ ਛੋਟੇ ਤੋਂ ਲੈ ਕੇ ਸਭ ਤੋਂ ਵੱਡੇ ਤੱਕ ਦੇ ਕ੍ਰਮ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। ਹਰੇਕ ਕਾਰਕ ਨੂੰ ਕਈ ਵਾਰ ਸੂਚੀਬੱਧ ਕੀਤਾ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ ਜੋ ਕਿ ਕਾਰਕਣ ਵਿੱਚ ਕਿੰਨੀ ਵਾਰ ਪ੍ਰਗਟ ਹੁੰਦਾ ਹੈ. ਇੰਪੁੱਟ ਨੰਬਰ ਸਾਰੇ ਕਾਰਕਾਂ ਦੇ ਉਤਪਾਦ ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ >>> ਫੈਕਟਰੋਇਜ਼ੇਟ ((8) [2, 2, 2] >>> ਫੈਕਟਰੋਇਜ਼ੇਟ ((25) [5, 5] >>> ਫੈਕਟਰੋਇਜ਼ੇਟ ((70) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਵਿੱਚੋਂ, ਸਾਰੇ ਤੱਤ ਹਟਾਓ ਜੋ ਇੱਕ ਤੋਂ ਵੱਧ ਵਾਰ ਵਾਪਰਦੇ ਹਨ. ਇੰਪੁੱਟ ਵਿੱਚ ਦਿੱਤੇ ਅਨੁਸਾਰ ਤੱਤਾਂ ਦਾ ਕ੍ਰਮ ਉਹੀ ਰੱਖੋ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"ਇੱਕ ਦਿੱਤੀ ਗਈ ਸਤਰ ਲਈ, ਛੋਟੇ ਅੱਖਰਾਂ ਨੂੰ ਵੱਡੇ ਅੱਖਰਾਂ ਵਿੱਚ ਅਤੇ ਵੱਡੇ ਅੱਖਰਾਂ ਨੂੰ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਬਦਲ ਦਿਓ. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਨੂੰ ਇੱਕ ਸਤਰ ਵਿੱਚ ਜੋੜੋ >>> concatenate (([]) ' ' >>> concatenate ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"ਸਤਰਾਂ ਦੀ ਇੱਕ ਇਨਪੁਟ ਸੂਚੀ ਨੂੰ ਸਿਰਫ ਉਹਨਾਂ ਲਈ ਫਿਲਟਰ ਕਰੋ ਜੋ ਇੱਕ ਦਿੱਤੇ ਗਏ ਪ੍ਰੀਫਿਕਸ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦੇ ਹਨ. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ਸੂਚੀ ਵਿੱਚ ਸਿਰਫ ਸਕਾਰਾਤਮਕ ਨੰਬਰ ਵਾਪਸ ਕਰੋ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ਜੇਕਰ ਦਿੱਤਾ ਗਿਆ ਨੰਬਰ ਪ੍ਰਾਇਮ ਹੈ ਤਾਂ ਸਹੀ ਵਾਪਿਸ ਕਰੋ, ਅਤੇ ਹੋਰ ਗਲਤ ਹੈ। >>> is_prime(6) ਗਲਤ >>> is_prime(101) ਸੱਚਾ >>> is_prime(11) ਸੱਚਾ >>> is_prime(13441) ਸੱਚਾ >>> is_prime(61) ਸੱਚਾ >>> is_prime(4) ਗਲਤ >>> is_prime(1) ਗਲਤ \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs ਇੱਕ ਬਹੁਪੱਖੀ ਦੇ ਗੁਣਾਂਕ ਹਨ. find_zero find x such that poly(x) = 0. find_zero ਸਿਰਫ ਸਿਰਫ ਜ਼ੀਰੋ ਪੁਆਇੰਟ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਭਾਵੇਂ ਕਿ ਬਹੁਤ ਸਾਰੇ ਹਨ. ਇਸ ਤੋਂ ਇਲਾਵਾ, find_zero ਸਿਰਫ ਸੂਚੀ xs ਲੈਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਗੁਣਾਂਕ ਦੀ ਗਿਣਤੀ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡਾ ਗੈਰ-ਜ਼ੀਰੋ ਗੁਣਾਂਕ ਹੁੰਦਾ ਹੈ ਕਿਉਂਕਿ ਇਹ ਇੱਕ ਹੱਲ ਦੀ ਗਰੰਟੀ ਦਿੰਦਾ ਹੈ. >>> ਗੋਲ ((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> ਗੋਲ ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"ਪੁਆਇੰਟ x ਤੇ ਗੁਣਾਂਕ xs ਦੇ ਨਾਲ ਬਹੁਪੱਖੀ ਦਾ ਮੁਲਾਂਕਣ ਕਰਦਾ ਹੈ. xs[0] + xs[1] * x + xs[1] * x ^ 2 + .... xs[n] * x ^ n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ਇਹ ਫੰਕਸ਼ਨ ਇੱਕ ਸੂਚੀ l ਲੈਂਦਾ ਹੈ ਅਤੇ ਇੱਕ ਸੂਚੀ l' ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ l' ਸੂਚਕਾਂਕ ਵਿੱਚ l ਦੇ ਸਮਾਨ ਹੈ ਜੋ ਤਿੰਨ ਨਾਲ ਵੰਡਿਆ ਨਹੀਂ ਜਾ ਸਕਦਾ, ਜਦੋਂ ਕਿ ਸੂਚਕਾਂਕ ਦੇ ਮੁੱਲ ਜੋ ਤਿੰਨ ਨਾਲ ਵੰਡਿਆ ਜਾ ਸਕਦਾ ਹੈ, ਉਹ l ਦੇ ਅਨੁਸਾਰੀ ਸੂਚਕਾਂਕ ਦੇ ਮੁੱਲ ਦੇ ਬਰਾਬਰ ਹਨ, ਪਰ ਕ੍ਰਮਬੱਧ ਹਨ. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਲੜੀਬੱਧ ਵਿਲੱਖਣ ਤੱਤ ਵਾਪਸ ਕਰੋ >>> ਵਿਲੱਖਣ (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ਸੂਚੀ ਵਿੱਚ ਅਧਿਕਤਮ ਤੱਤ ਵਾਪਸ ਕਰੋ. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"ਅੰਕ 7 ਦੀ ਗਿਣਤੀ ਨੂੰ ਵਾਪਸ ਕਰੋ ਜੋ ਕਿ 11 ਜਾਂ 13 ਦੁਆਰਾ ਵੰਡਣ ਵਾਲੇ n ਤੋਂ ਘੱਟ ਪੂਰਨ ਅੰਕ ਵਿੱਚ ਪ੍ਰਗਟ ਹੁੰਦਾ ਹੈ. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ਇਹ ਫੰਕਸ਼ਨ ਇੱਕ ਸੂਚੀ l ਲੈਂਦਾ ਹੈ ਅਤੇ ਇੱਕ ਸੂਚੀ l' ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ l' ਅਨਿਯਮਿਤ ਸੂਚਕਾਂਕ ਵਿੱਚ l ਦੇ ਸਮਾਨ ਹੈ, ਜਦੋਂ ਕਿ ਇਸ ਦੇ ਮੁੱਲ ਵੀ ਸੰਕੇਤ ਦੇ ਮੁੱਲਾਂ ਦੇ ਬਰਾਬਰ ਹਨ l ਦੇ ਵੀ ਸੰਕੇਤ ਦੇ ਮੁੱਲ, ਪਰ ਕ੍ਰਮਬੱਧ. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"ਇੰਕੋਡ_ਸਾਈਕਲਿਕ ਫੰਕਸ਼ਨ ਨਾਲ ਇਨਪੁਟ ਸਤਰ ਵਜੋਂ ਏਨਕੋਡ ਕੀਤੀ ਗਈ ਹੈ. ਡੀਕੋਡ ਕੀਤੀ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ. \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ਤਿੰਨ ਅੱਖਰਾਂ ਦੇ ਸਾਈਕਲਿੰਗ ਗਰੁੱਪਾਂ ਦੁਆਰਾ ਏਨਕੋਡ ਕੀਤੀ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib n-ਵੀਂ ਨੰਬਰ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ ਕਿ ਇੱਕ ਫਿਬੋਨੈਚੀ ਨੰਬਰ ਹੈ ਅਤੇ ਇਹ ਵੀ ਪ੍ਰਾਇਮਰੀ ਹੈ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਸੂਚੀ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ. ਇਹ ਸੱਚ ਹੈ, ਜੇ ਸੂਚੀ ਵਿੱਚ ਤਿੰਨ ਵੱਖਰੇ ਤੱਤ ਹਨ ਜੋ ਜ਼ੀਰੋ ਨੂੰ ਜੋੜਦੇ ਹਨ, ਅਤੇ ਝੂਠੇ ਹੋਰ. >>> triples_sum_to_zero([1, 3, 5, 0]) ਝੂਠੇ >>> triples_sum_to_zero[(1, 3, -2, 1]) ਸੱਚ >>> triples_sum_to_zero([1, 2, 3, 7]) ਝੂਠ >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) ਸੱਚ >>> triples_sum_to_zero[1]) ਝੂਠੇ \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ਇੱਕ ਸੜਕ ਦੀ ਕਲਪਨਾ ਕਰੋ ਜੋ ਇੱਕ ਅਨੰਤ ਲੰਬੀ ਲਾਈਨ ਹੈ. n ਕਾਰਾਂ ਖੱਬੇ ਤੋਂ ਸੱਜੇ ਵੱਲ ਜਾ ਰਹੀਆਂ ਹਨ; ਇੱਕੋ ਸਮੇਂ, n ਕਾਰਾਂ ਦਾ ਇੱਕ ਵੱਖਰਾ ਸਮੂਹ ਸੱਜੇ ਤੋਂ ਖੱਬੇ ਵੱਲ ਜਾ ਰਿਹਾ ਹੈ. ਕਾਰਾਂ ਦੇ ਦੋ ਸੈੱਟ ਇੱਕ ਦੂਜੇ ਤੋਂ ਬਹੁਤ ਦੂਰ ਹੋਣ ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦੇ ਹਨ. ਸਾਰੀਆਂ ਕਾਰਾਂ ਇੱਕੋ ਗਤੀ ਤੇ ਚਲਦੀਆਂ ਹਨ. ਦੋ ਕਾਰਾਂ ਨੂੰ ਟਕਰਾਉਣ ਲਈ ਕਿਹਾ ਜਾਂਦਾ ਹੈ ਜਦੋਂ ਇੱਕ ਕਾਰ ਜੋ ਖੱਬੇ ਤੋਂ ਸੱਜੇ ਵੱਲ ਜਾ ਰਹੀ ਹੈ ਇੱਕ ਕਾਰ ਨੂੰ ਟਕਰਾਉਂਦੀ ਹੈ ਜੋ ਸੱਜੇ ਤੋਂ ਖੱਬੇ ਵੱਲ ਜਾ ਰਹੀ ਹੈ. ਹਾਲਾਂਕਿ, ਕਾਰਾਂ ਬੇਅੰਤ ਮਜ਼ਬੂਤ ਅਤੇ ਮਜ਼ਬੂਤ ਹਨ; ਨਤੀਜੇ ਵਜੋਂ, ਉਹ ਆਪਣੇ ਰਸਤੇ ਵਿੱਚ ਚਲਦੇ ਰਹਿੰਦੇ ਹਨ ਜਿਵੇਂ ਕਿ ਉਹ ਟਕਰਾ ਨਹੀਂ ਰਹੇ ਸਨ. ਇਹ ਫੰਕਸ਼ਨ ਅਜਿਹੇ ਟੱਕਰਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਬਾਹਰ ਕੱਢਦਾ ਹੈ.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. ਨਾਲ ਵਧੇ ਹੋਏ ਤੱਤਾਂ ਦੀ ਵਾਪਸੀ ਸੂਚੀ >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਨੂੰ ਇਨਪੁਟ ਵਜੋਂ ਲੈਂਦਾ ਹੈ. ਇਹ ਸੱਚੇ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇ ਸੂਚੀ ਵਿੱਚ ਦੋ ਵੱਖਰੇ ਤੱਤ ਹਨ ਜੋ ਜ਼ੀਰੋ ਨੂੰ ਜੋੜਦੇ ਹਨ, ਅਤੇ ਹੋਰ ਗਲਤ. >>> pairs_sum_to_zero([1, 3, 5, 0]) ਗਲਤ >>> pairs_sum_to_zero[(1, 3, -2, 1]) ਗਲਤ >>> pairs_sum_to_zero([1, 2, 3, 7]) ਗਲਤ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) ਸੱਚਾ >>> pairs_sum_to_zero[1]) ਗਲਤ \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ਇਨਪੁਟ ਨੰਬਰ x ਦਾ ਅੰਕੀ ਅਧਾਰ ਅਧਾਰ ਵਿੱਚ ਬਦਲੋ. ਪਰਿਵਰਤਨ ਤੋਂ ਬਾਅਦ ਸਤਰ ਪ੍ਰਤੀਨਿਧਤਾ ਵਾਪਸ ਕਰੋ. ਅਧਾਰ ਨੰਬਰ 10 ਤੋਂ ਘੱਟ ਹਨ. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ਇੱਕ ਤਿਕੋਣ ਲਈ ਇੱਕ ਪਾਸੇ ਦੀ ਲੰਬਾਈ ਅਤੇ ਉੱਚ ਵਾਪਸੀ ਖੇਤਰ ਦਿੱਤਾ ਗਿਆ ਹੈ. >>> triangle_area(5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 ਨੰਬਰ ਸੀਕਵੈਂਸ ਫਿਬੋਨੈਕਸੀ ਸੀਕਵੈਂਸ ਵਰਗੀ ਇਕ ਸੀਕਵੈਂਸ ਹੈ ਜੋ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤੀ ਗਈ ਹੈਃ fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ਕਿਰਪਾ ਕਰਕੇ fib4 ਨੰਬਰ ਸੀਕਵੈਂਸ ਦੇ n-th ਐਲੀਮੈਂਟ ਦੀ ਕੁਸ਼ਲਤਾ ਨਾਲ ਗਣਨਾ ਕਰਨ ਲਈ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ. ਰੀਕ੍ਰਿਸ਼ਨ ਦੀ ਵਰਤੋਂ ਨਾ ਕਰੋ. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ਸੂਚੀ ਵਿੱਚ ਤੱਤਾਂ ਦਾ ਵਾਪਸੀ ਦਾ ਮੱਧਮ l. >>> ਮੱਧਮ (([3, 1, 2, 4, 5]) 3 >>> ਮੱਧਮ (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ਜਾਂਚ ਕਰਦਾ ਹੈ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸਤਰ ਇੱਕ ਪਾਲੀਂਡਰੋਮ ਹੈ >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2 ^ n ਮਾਡੂਲੋ ਪੀ (ਅੰਕਾਂ ਤੋਂ ਜਾਣੂ ਹੋਣਾ) ਵਾਪਿਸ ਕਰੋ. >>> ਮਾਡੂਲੋ 3 , 5) 3 >>> ਮਾਡੂਲੋ 1101, 101) 2 >>> ਮਾਡੂਲੋ 0, 101) 1 >>> ਮਾਡੂਲੋ 3, 11) 8 >>> ਮਾਡੂਲੋ 100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"ਇੰਕੋਡ_ਸ਼ਿਫਟ ਫੰਕਸ਼ਨ ਨਾਲ ਇਨਪੁਟ ਸਤਰ ਵਜੋਂ ਇੰਕੋਡ ਕੀਤੀ ਜਾਂਦੀ ਹੈ. ਡੀਕੋਡ ਕੀਤੀ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"ਅੱਖਰ ਵਿੱਚ ਹਰ ਅੱਖਰ ਨੂੰ 5 ਨਾਲ ਬਦਲ ਕੇ ਏਨਕੋਡਡ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ।\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ਇੱਕ ਫੰਕਸ਼ਨ ਹੈ ਜੋ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਬਿਨਾਂ ਵੋਕਲ ਦੇ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') ' ' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"TRUE ਵਾਪਸ ਕਰੋ ਜੇਕਰ ਸੂਚੀ ਵਿੱਚ ਸਾਰੇ ਨੰਬਰ ਥ੍ਰੈਸ਼ਹੋਲਡ ਤੋਂ ਹੇਠਾਂ ਹਨ. >>> below_threshold([1, 2, 4, 10], 100) TRUE >>> below_threshold([1, 20, 4, 10], 5) FALSE \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"ਦੋ ਨੰਬਰ x ਅਤੇ y ਜੋੜੋ >>> ਜੋੜੋ ((2, 3) 5 >>> ਜੋੜੋ ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ਚੈੱਕ ਕਰੋ ਕਿ ਕੀ ਦੋ ਸ਼ਬਦਾਂ ਦੇ ਅੱਖਰ ਇੱਕੋ ਜਿਹੇ ਹਨ। >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddabc') False >>> same_chars (('abcd', 'dddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-ਵੀਂ ਫਿਬੋਨੈਕਸੀ ਸੰਖਿਆ ਵਾਪਸ ਕਰੋ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"<\" ਅਤੇ \">\" ਦੀ ਇੱਕ ਸਤਰ ਹੈ. ਵਾਪਸੀ ਸਹੀ ਹੈ ਜੇ ਹਰੇਕ ਖੁੱਲਣ ਵਾਲੀ ਬਰੈਕਟ ਵਿੱਚ ਇੱਕ ਅਨੁਸਾਰੀ ਬੰਦ ਕਰਨ ਵਾਲੀ ਬਰੈਕਟ ਹੁੰਦੀ ਹੈ. >>> correct_bracketing(\"<\") ਗਲਤ >>> correct_bracketing(\"<>\") ਸੱਚ >>> correct_bracketing(\"<><>>\") ਸੱਚ >>> correct_bracketing(\"><<>\") ਗਲਤ \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"ਵਾਪਸੀ ਸਹੀ ਹੈ ਸੂਚੀ ਤੱਤ ਇਕਸਾਰਤਾ ਨਾਲ ਵੱਧ ਰਹੇ ਹਨ ਜਾਂ ਘਟ ਰਹੇ ਹਨ. >>> ਇਕਸਾਰਤਾ ਨਾਲ (([1, 2, 4, 20]) ਸੱਚ >>> ਇਕਸਾਰਤਾ ਨਾਲ (([1, 20, 4, 10]) ਗਲਤ >>> ਇਕਸਾਰਤਾ ਨਾਲ (([4, 1, 0, -10]) ਸੱਚ \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ਦੋ ਸੂਚੀਆਂ ਲਈ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਗਏ ਵਿਲੱਖਣ ਸਾਂਝੇ ਤੱਤ ਵਾਪਸ ਕਰੋ. >>> ਆਮ (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> ਆਮ (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਪ੍ਰਾਇਮ ਫੈਕਟਰ ਵਾਪਸ ਕਰੋ. ਮੰਨ ਲਓ ਕਿ n > 1 ਹੈ ਅਤੇ ਪ੍ਰਾਇਮ ਨਹੀਂ ਹੈ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ਇੱਕ ਫੰਕਸ਼ਨ ਹੈ ਜੋ 1 ਤੋਂ n ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦਾ ਜੋੜ ਕਰਦਾ ਹੈ। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets \"(\" ਅਤੇ \"\") ਦੀ ਇੱਕ ਸਤਰ ਹੈ. ਵਾਪਸੀ ਸਹੀ ਹੈ ਜੇ ਹਰੇਕ ਖੁੱਲਣ ਵਾਲੀ ਬਰੈਕਟ ਵਿੱਚ ਇੱਕ ਅਨੁਸਾਰੀ ਬੰਦ ਕਰਨ ਵਾਲੀ ਬਰੈਕਟ ਹੁੰਦੀ ਹੈ. >>> correct_bracketing(\"(\") ਗਲਤ >>> correct_bracketing(\"() ਸੱਚ >>> correct_bracketing(\"() \") ਸੱਚ >>> correct_bracketing(\") ਗਲਤ \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ਇੱਕ ਬਹੁਭਾਸ਼ਿਕ ਦੇ ਗੁਣਾਂਕ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ਇਸ ਬਹੁਭਾਸ਼ਿਕ ਦਾ ਉਸੇ ਰੂਪ ਵਿੱਚ ਡੈਰੀਵੇਟਿਵ ਵਾਪਸ ਕਰੋ. >>> ਡੈਰੀਵੇਟਿਵ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ਡੈਰੀਵੇਟਿਵ [(1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"ਫਿਬਫਿਬ ਨੰਬਰ ਸੀਕਵੈਂਸ ਫਿਬਬੋਨੈਕਸੀ ਸੀਕਵੈਂਸ ਵਰਗੀ ਇਕ ਲੜੀ ਹੈ ਜੋ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤੀ ਗਈ ਹੈਃ ਫਿਬਫਿਬ ((0) == 0 ਫਿਬਫਿਬ ((1) == 0 ਫਿਬਫਿਬ ((2) == 1 ਫਿਬਫਿਬ ((n) == ਫਿਬਫਿਬ ((n-1) + ਫਿਬਫਿਬ ((n-2) + ਫਿਬਫਿਬ ((n-3). ਕਿਰਪਾ ਕਰਕੇ ਫਿਬਫਿਬ ਨੰਬਰ ਸੀਕਵੈਂਸ ਦੇ n-th ਐਲੀਮੈਂਟ ਦੀ ਕੁਸ਼ਲਤਾ ਨਾਲ ਗਣਨਾ ਕਰਨ ਲਈ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ. >>> ਫਿਬਫਿਬ ((1) 0 >>> ਫਿਬਫਿਬ ((5) 4 >>> ਫਿਬਫਿਬ ((8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਵੋਕਲਸ_ਕਾਉਂਟ ਲਿਖੋ ਜੋ ਇੱਕ ਸ਼ਬਦ ਨੂੰ ਪ੍ਰਤੀਨਿਧਤਾ ਕਰਨ ਵਾਲੀ ਸਤਰ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਤਰ ਵਿੱਚ ਵੋਕਲਸ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰਦਾ ਹੈ। ਇਸ ਕੇਸ ਵਿੱਚ ਵੋਕਲਸ 'ਏ', 'ਈ', 'ਆਈ', 'ਓ', 'ਯੂ' ਹਨ। ਇੱਥੇ, 'ਵਾਈ' ਵੀ ਇੱਕ ਵੋਕਲ ਹੈ, ਪਰ ਸਿਰਫ ਜਦੋਂ ਇਹ ਦਿੱਤੇ ਗਏ ਸ਼ਬਦ ਦੇ ਅੰਤ ਵਿੱਚ ਹੁੰਦਾ ਹੈ। ਉਦਾਹਰਨਃ >>> ਵੋਕਲਸ_ਕਾਉਂਟ (ਅਤੇ) \"ਅਬਕਡੇ\") 2 >>> ਵੋਕਲਸ_ਕਾਉਂਟ (ਅਤੇ) \"ਅਸੀਡੀ\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"ਹੋਰ ਟੈਸਟ ਕੇਸ ਜੋੜੋ।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"ਸਰਕੂਲਰ ਪੂਰਨ ਅੰਕ x ਦੇ ਅੰਕ ਨੂੰ ਹਿਲਾਓ, ਹਿਲਾ ਕੇ ਅੰਕ ਨੂੰ ਸੱਜੇ ਪਾਸੇ ਹਿਲਾਓ ਅਤੇ ਨਤੀਜਾ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। ਜੇ ਸ਼ਿਫਟ > ਅੰਕ ਦੀ ਗਿਣਤੀ, ਅੰਕ ਨੂੰ ਉਲਟਾ ਦਿੱਤਾ ਜਾਂਦਾ ਹੈ. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"ਟਾਸਕ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਿਰਫ ਉਪਰਲੇ ਅੱਖਰਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰਦਾ ਹੈ' ASCII ਕੋਡ. ਉਦਾਹਰਣਃ digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ਇਸ ਕੰਮ ਵਿੱਚ, ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ ਜੋ ਇੱਕ ਫਲਾਂ ਦੀ ਟੋਕਰੀ ਵਿੱਚ ਵੰਡੀਆਂ ਗਈਆਂ ਸੇਬਾਂ ਅਤੇ ਸੰਤਰੇ ਦੀ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ ਇਸ ਟੋਕਰੀ ਵਿੱਚ ਸੇਬ, ਸੰਤਰੇ ਅਤੇ ਅੰਬ ਦੇ ਫਲ ਹਨ. ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ ਜੋ ਸੰਤਰੇ ਅਤੇ ਸੇਬਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ ਅਤੇ ਇੱਕ ਪੂਰਨ ਅੰਕ ਜੋ ਟੋਕਰੀ ਵਿੱਚ ਫਲਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ ਟੋਕਰੀ ਵਿੱਚ ਅੰਬ ਦੇ ਫਲਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣ ਲਈਃ fruit_distribution\"5(ਸੇਬ ਅਤੇ 6 ਸੰਤਰੇ\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 ਸੇਬ ਅਤੇ 1 ਸੰਤਰੇ\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 ਸੇਬ ਅਤੇ 3 ਸੰਤਰੇ\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 ਸੇਬ ਅਤੇ 1 ਸੰਤਰੇ\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ਇੱਕ ਐਰੇ ਨੂੰ ਇੱਕ ਰੁੱਖ ਦੀ ਇੱਕ ਸ਼ਾਖਾ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਨੋਡ ਹਨ ਤੁਹਾਡਾ ਕੰਮ ਨੋਡਾਂ ਵਿੱਚੋਂ ਇੱਕ ਨੂੰ ਚੁੱਕਣਾ ਅਤੇ ਵਾਪਸ ਕਰਨਾ ਹੈ। ਚੁੱਕਿਆ ਨੋਡ ਸਭ ਤੋਂ ਛੋਟਾ ਬਰਾਬਰ ਮੁੱਲ ਵਾਲਾ ਨੋਡ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ। ਜੇ ਇੱਕੋ ਸਭ ਤੋਂ ਛੋਟਾ ਬਰਾਬਰ ਮੁੱਲ ਵਾਲੇ ਕਈ ਨੋਡ ਮਿਲਦੇ ਹਨ ਤਾਂ ਨੋਡ ਨੂੰ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਵਾਲਾ ਵਾਪਸ ਕਰੋ. ਚੁੱਕਿਆ ਨੋਡ ਨੂੰ ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ, [smallest_value, ਇਸ ਦਾ ਇੰਡੈਕਸ ], ਜੇ ਕੋਈ ਵੀ ਮੁੱਲ ਨਹੀਂ ਹਨ ਜਾਂ ਦਿੱਤੀ ਗਈ ਐਰੇ ਖਾਲੀ ਹੈ, ਵਾਪਸ ਕਰੋ []. ਉਦਾਹਰਨ 1: ਇਨਪੁਟਃ [4,2,3] ਆਉਟਪੁੱਟਃ [2, 1] ਵਿਆਖਿਆਃ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਬਰਾਬਰ ਮੁੱਲ ਹੈ, ਅਤੇ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਹੈ. ਉਦਾਹਰਨ 2: ਇਨਪੁਟਃ [1,2,3] ਆਉਟਪੁੱਟਃ [2, 1] ਵਿਆਖਿਆਃ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਮੁੱਲ ਹੈ, ਅਤੇ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਹੈ. ਉਦਾਹਰਨ 3: ਇਨਪੁਟਃ [] [output] [] [output: [4: [5, 3, 4] [output: 0, 2] [output: 0] ਆਉਟਪੁੱਟਃ 1 ਨੋਡਃ 1 ਸਭ ਤੋਂ ਛੋਟਾ ਨੋਡ, [output] ਜੇ ਕੋਈ ਬਰਾਇੰਟ ਹੈ, ਤਾਂ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਹੈ, ਤਾਂ ਸੂਚੀ ਵਿੱਚ, [smallest] ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ ਮੁੱਲ ਹੈ, [smallest index = 0 ਹੈ, ਪਰ ਪਹਿਲੇ ਨੋ, [smallest value] ਉਦਾਹਰਨੋਟ = 1 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ = 0 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ = 1 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ ਨੋ ਨੋ ਨੋ = 1 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ = 0]\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ਤੁਹਾਨੂੰ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਸਭ ਤੋਂ ਵੱਡਾ ਪੂਰਨ ਅੰਕ ਵਾਪਸ ਕਰੋ ਜੋ ਜ਼ੀਰੋ ਤੋਂ ਵੱਡਾ ਹੈ, ਅਤੇ ਪੂਰਨ ਅੰਕ ਦੇ ਮੁੱਲ ਦੇ ਬਰਾਬਰ ਜਾਂ ਇਸ ਤੋਂ ਵੱਧ ਬਾਰੰਬਾਰਤਾ ਹੈ. ਇੱਕ ਪੂਰਨ ਅੰਕ ਦੀ ਬਾਰੰਬਾਰਤਾ ਉਹ ਵਾਰ ਹੈ ਜਦੋਂ ਇਹ ਸੂਚੀ ਵਿੱਚ ਦਿਖਾਈ ਦਿੰਦੀ ਹੈ. ਜੇ ਅਜਿਹਾ ਕੋਈ ਮੁੱਲ ਮੌਜੂਦ ਨਹੀਂ ਹੈ, ਤਾਂ ਵਾਪਸ ਕਰੋ -1. ਉਦਾਹਰਣਃ ਖੋਜ ਕਰੋ (([4, 1, 2, 2, 3, 1]) == 2 ਖੋਜ ਕਰੋ ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 ਖੋਜ ਕਰੋ ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਅਜੀਬ ਕ੍ਰਮ ਵਿੱਚ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਅਜੀਬ ਲੜੀਬੱਧਤਾ, ਉਹ ਹੈ ਜਦੋਂ ਤੁਸੀਂ ਘੱਟੋ ਘੱਟ ਮੁੱਲ ਨਾਲ ਸ਼ੁਰੂ ਕਰਦੇ ਹੋ, ਫਿਰ ਬਾਕੀ ਪੂਰਨ ਅੰਕ ਦੀ ਵੱਧ ਤੋਂ ਵੱਧ, ਫਿਰ ਘੱਟੋ ਘੱਟ ਅਤੇ ਇਸ ਤਰ੍ਹਾਂ ਜਾਰੀ ਰੱਖੋ. ਉਦਾਹਰਣਃ strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ਤਿਕੋਣ ਦੇ ਤਿੰਨ ਪਾਸਿਆਂ ਦੀ ਲੰਬਾਈ ਦਿੱਤੀ ਗਈ ਹੈ. ਤਿਕੋਣ ਦਾ ਖੇਤਰ 2 ਦਸ਼ਮਲਵ ਬਿੰਦੂਆਂ ਤੱਕ ਗੋਲ ਕਰੋ ਜੇ ਤਿੰਨ ਪਾਸੇ ਇੱਕ ਜਾਇਜ਼ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ. ਨਹੀਂ ਤਾਂ -1 ਵਾਪਸ ਕਰੋ ਤਿੰਨ ਪਾਸੇ ਇੱਕ ਜਾਇਜ਼ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ ਜਦੋਂ ਕਿਸੇ ਵੀ ਦੋ ਪਾਸਿਆਂ ਦਾ ਜੋੜ ਤੀਜੀ ਪਾਸਿਆਂ ਤੋਂ ਵੱਡਾ ਹੁੰਦਾ ਹੈ. ਉਦਾਹਰਣਃ ਤਿਕੋਣ_ ਖੇਤਰ ((3, 4, 5) == 6.00 ਤਿਕੋਣ_ ਖੇਤਰ ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਹੀ ਵਾਪਿਸ ਆਉਂਦੀ ਹੈ ਜੇ ਵਸਤੂ q ਉਡਦੀ ਹੈ, ਅਤੇ ਗਲਤ ਨਹੀਂ. ਵਸਤੂ q ਉਡਦੀ ਹੈ ਜੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ (ਇਹ ਇੱਕ ਪਾਲੀਂਡਰੋਮਿਕ ਸੂਚੀ ਹੈ) ਅਤੇ ਇਸਦੇ ਤੱਤਾਂ ਦਾ ਜੋੜ ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ w ਤੋਂ ਘੱਟ ਜਾਂ ਬਰਾਬਰ ਹੈ. ਉਦਾਹਰਣਃ will_it_fly (([1, 2], 5) â -> ਗਲਤ # 1+2 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਪਰ ਇਹ ਅਸੰਤੁਲਿਤ ਹੈ. will_it_fly (([3, 2, 3], 1) â -> ਗਲਤ # ਇਹ ਸੰਤੁਲਿਤ ਹੈ, ਪਰ 3+2+3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਹੈ. will_it_fly (([3, 2, 3], 9) â -> ਸੱਚਾ # 3+23 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਅਤੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ. will_it_fly ((([3], â 5) -> ਸੱਚਾ # 3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਅਤੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੇ ਇੱਕ ਐਰੇ ਨੂੰ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਐਰੇ ਨੂੰ ਪਾਲੀਂਡਰੋਮਿਕ ਬਣਾਉਣ ਲਈ ਘੱਟੋ ਘੱਟ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਲੱਭੋ। ਇੱਕ ਪਾਲੀਂਡਰੋਮਿਕ ਐਰੇ ਇੱਕ ਐਰੇ ਹੈ ਜੋ ਪਿੱਛੇ ਅਤੇ ਅੱਗੇ ਇਕੋ ਜਿਹਾ ਪੜ੍ਹਿਆ ਜਾਂਦਾ ਹੈ। ਇੱਕ ਤਬਦੀਲੀ ਵਿੱਚ, ਤੁਸੀਂ ਇੱਕ ਤੱਤ ਨੂੰ ਕਿਸੇ ਵੀ ਹੋਰ ਤੱਤ ਵਿੱਚ ਬਦਲ ਸਕਦੇ ਹੋ। ਉਦਾਹਰਣ ਲਈਃ smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਤਰਾਂ ਦੀਆਂ ਦੋ ਸੂਚੀਆਂ ਨੂੰ ਸਵੀਕਾਰ ਕਰਦਾ ਹੈ ਅਤੇ ਉਹ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਸੂਚੀ ਦੇ ਸਾਰੇ ਸਤਰਾਂ ਵਿੱਚ ਦੂਜੇ ਸੂਚੀ ਨਾਲੋਂ ਘੱਟ ਅੱਖਰਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ ਹੈ. ਜੇ ਦੋ ਸੂਚੀਆਂ ਵਿੱਚ ਅੱਖਰਾਂ ਦੀ ਇੱਕੋ ਜਿਹੀ ਗਿਣਤੀ ਹੈ, ਤਾਂ ਪਹਿਲੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣ total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['4']'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਹੀ ਵਾਪਿਸ ਆਉਂਦੀ ਹੈ ਜੇ ਦਿੱਤੀ ਗਈ ਸੰਖਿਆ 3 ਪ੍ਰਾਇਮ ਨੰਬਰਾਂ ਦਾ ਗੁਣਾ ਹੈ ਅਤੇ ਹੋਰ ਗਲਤ ਹੈ. ਇਹ ਜਾਣਨਾ ਕਿ (ਏ) 100 ਤੋਂ ਘੱਟ ਹੈ. ਉਦਾਹਰਨਃ is_multiply_prime(30) == True 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ਤੁਹਾਡਾ ਕੰਮ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣਾ ਹੈ ਜੋ ਸੱਚੇ ਵਾਪਸ ਆਉਂਦੀ ਹੈ ਜੇ ਇੱਕ ਨੰਬਰ x n ਦੀ ਇੱਕ ਸਧਾਰਨ ਸ਼ਕਤੀ ਹੈ ਅਤੇ ਹੋਰ ਮਾਮਲਿਆਂ ਵਿੱਚ ਗਲਤ ਹੈ. x n ਦੀ ਇੱਕ ਸਧਾਰਨ ਸ਼ਕਤੀ ਹੈ ਜੇ n**int=x ਉਦਾਹਰਣ ਲਈਃ is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਪੂਰਨ ਅੰਕ a ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਹੀ ਵਾਪਿਸ ਕਰਦਾ ਹੈ ਜੇ ਇਹ ਇੰਗੇਜਰ ਕਿਸੇ ਪੂਰਨ ਅੰਕ ਦਾ ਘਣ ਹੈ। ਨੋਟਃ ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇੰਪੁੱਟ ਹਮੇਸ਼ਾਂ ਯੋਗ ਹੁੰਦਾ ਹੈ। ਉਦਾਹਰਣਃ iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣ ਦਾ ਕੰਮ ਦਿੱਤਾ ਗਿਆ ਹੈ ਜੋ ਇੱਕ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਹੈਕਸਾਡੇਸਿਮਲ ਨੰਬਰ ਪ੍ਰਾਪਤ ਕਰਦਾ ਹੈ ਅਤੇ ਹੈਕਸਾਡੇਸਿਮਲ ਅੰਕਾਂ ਦੀ ਗਿਣਤੀ ਗਿਣਦਾ ਹੈ ਜੋ ਪ੍ਰਾਇਮਰੀ ਹਨ (ਪ੍ਰਾਈਮ ਨੰਬਰ, ਜਾਂ ਪ੍ਰਾਈਮ, ਇੱਕ ਕੁਦਰਤੀ ਨੰਬਰ ਹੈ ਜੋ 1 ਤੋਂ ਵੱਡਾ ਹੈ ਜੋ ਦੋ ਛੋਟੇ ਕੁਦਰਤੀ ਸੰਖਿਆਵਾਂ ਦਾ ਉਤਪਾਦ ਨਹੀਂ ਹੈ) ਹੈਕਸਾਡੇਸਿਮਲ ਅੰਕ ਹਨ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ਏ, ਬੀ, ਸੀ, ਡੀ, ਈ, ਐਫ. ਪ੍ਰਾਈਮ ਨੰਬਰ ਹਨ 2, 3, 5, 7, 11, 13, 17,... ਇਸ ਲਈ ਤੁਹਾਨੂੰ ਹੇਠ ਲਿਖੇ ਅੰਕ ਦੀ ਗਿਣਤੀ ਨਿਰਧਾਰਤ ਕਰਨੀ ਪਵੇਗੀਃ 2, 3, 5, 7, ਬੀ (= ਦਸਮਲ 11), ਡੀ (= ਦਸਮਲ 13) ਨੋਟਃ ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇਨਪੁਟ ਹਮੇਸ਼ਾਂ ਸਹੀ ਜਾਂ ਖਾਲੀ ਹੈ, ਅਤੇ ਪ੍ਰਤੀਕ ਏ, ਬੀ, ਸੀ, ਡੀ, ਈ, ਐਫ ਹਮੇਸ਼ਾਂ ਵੱਡੇ ਅੱਖਰਾਂ ਦੀ ਸਤਰ ਹੈ. ਉਦਾਹਰਣਃ \"ਨਮ = ਏਬੀ\" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 1. \"ਨਮ = ਏਬੀ\", \"ਨਮ = ਏਬੀ\" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 1. \"ਨਮ = ਏਬੀ\" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 2. \"ਮ = ਏਬੀ = 1. \"ਮ = ਏਬੀ = 1. \"ਮ = ਏਬੀ = 6.06767\" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 2. \"ਮ = 6.04520202020\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ਤੁਹਾਨੂੰ ਦਸ਼ਮਲਵ ਰੂਪ ਵਿੱਚ ਇੱਕ ਨੰਬਰ ਦਿੱਤਾ ਜਾਵੇਗਾ ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਇਸ ਨੂੰ ਬਾਈਨਰੀ ਫਾਰਮੈਟ ਵਿੱਚ ਬਦਲਣਾ ਹੈ. ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ, ਜਿਸ ਵਿੱਚ ਹਰੇਕ ਅੱਖਰ ਇੱਕ ਬਾਈਨਰੀ ਨੰਬਰ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ. ਸਤਰ ਵਿੱਚ ਹਰੇਕ ਅੱਖਰ '0' ਜਾਂ '1' ਹੋਵੇਗਾ. ਸਤਰ ਦੇ ਸ਼ੁਰੂ ਅਤੇ ਅੰਤ ਵਿੱਚ ਇੱਕ ਵਾਧੂ ਜੋੜਾ ਅੱਖਰ 'db' ਹੋਣਗੇ. ਵਾਧੂ ਅੱਖਰ ਫਾਰਮੈਟ ਵਿੱਚ ਮਦਦ ਕਰਨ ਲਈ ਹਨ. ਉਦਾਹਰਣਃ decimal_to_binary(15) # ਵਾਪਿਸ \"db1111db\" decimal_to_binary32) # ਵਾਪਿਸ \"db100000db\"\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਗਈ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਜਾਂਚ ਕਰਨਾ ਹੈ ਕਿ ਸਤਰ ਖੁਸ਼ ਹੈ ਜਾਂ ਨਹੀਂ. ਇੱਕ ਸਤਰ ਖੁਸ਼ ਹੈ ਜੇ ਇਸ ਦੀ ਲੰਬਾਈ ਘੱਟੋ ਘੱਟ 3 ਹੈ ਅਤੇ ਹਰ 3 ਲਗਾਤਾਰ ਅੱਖਰ ਵੱਖਰੇ ਹਨ ਉਦਾਹਰਣ ਲਈਃ is_happy (a) => False is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (a) => False is_happy (a) => False is_happy (adb) => True is_happy (x) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ਇਹ ਸੈਮੇਸਟਰ ਦਾ ਆਖਰੀ ਹਫ਼ਤਾ ਹੈ ਅਤੇ ਅਧਿਆਪਕ ਨੂੰ ਵਿਦਿਆਰਥੀਆਂ ਨੂੰ ਗ੍ਰੇਡ ਦੇਣਾ ਹੈ. ਅਧਿਆਪਕ ਗਰੇਡਿੰਗ ਲਈ ਆਪਣਾ ਐਲਗੋਰਿਥਮ ਬਣਾ ਰਹੀ ਹੈ. ਸਿਰਫ ਸਮੱਸਿਆ ਇਹ ਹੈ ਕਿ ਉਸਨੇ ਗਰੇਡਿੰਗ ਲਈ ਵਰਤਿਆ ਕੋਡ ਗੁਆ ਦਿੱਤਾ ਹੈ. ਉਸਨੇ ਤੁਹਾਨੂੰ ਕੁਝ ਵਿਦਿਆਰਥੀਆਂ ਲਈ ਗਰੇਡਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਹੈ ਅਤੇ ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣਾ ਹੈ ਜੋ ਹੇਠਲੀ ਸਾਰਣੀ ਦੀ ਵਰਤੋਂ ਕਰਕੇ ਪੱਤਰ ਗ੍ਰੇਡਾਂ ਦੀ ਸੂਚੀ ਬਣਾ ਸਕਦਾ ਹੈਃ ਗਰੇਡ ਗ੍ਰੇਡ 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 ਉਦਾਹਰਣਃ grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਵਾਪਸ ਕਰਦਾ ਹੈ ਸੱਚ ਹੈ ਜੇ ਸਤਰ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਇਮਰੀ ਨੰਬਰ ਹੈ ਜਾਂ ਗਲਤ ਹੈ ਨਹੀਂ ਤਾਂ ਉਦਾਹਰਣ prime_length (('ਹੈਲੋ') == ਸੱਚਾ ਪ੍ਰਾਇਮਰੀ_ਲੰਬਾਈ (('ਅਬਕਡਕਬਾ') == ਸੱਚਾ ਪ੍ਰਾਇਮਰੀ_ਲੰਬਾਈ (('ਕਿੱਟੀਆਂ') == ਸੱਚਾ ਪ੍ਰਾਇਮਰੀ_ਲੰਬਾਈ (('ਸੰਤਰੀ') == ਗਲਤ \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, n-ਅੰਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਗਿਣਤੀ ਨੂੰ ਵਾਪਸ ਕਰੋ ਜੋ 1 ਨਾਲ ਸ਼ੁਰੂ ਜਾਂ ਖ਼ਤਮ ਹੁੰਦਾ ਹੈ।\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ N ਦਿੱਤਾ ਗਿਆ ਹੈ, ਬਾਈਨਰੀ ਵਿੱਚ ਇਸਦੇ ਅੰਕ ਦੇ ਕੁੱਲ ਜੋੜ ਨੂੰ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਨ ਲਈ N = 1000 ਲਈ, ਅੰਕ ਦਾ ਜੋੜ 1 ਹੋਵੇਗਾ ਆਉਟਪੁੱਟ \"1\" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. N = 150 ਲਈ, ਅੰਕ ਦਾ ਜੋੜ 6 ਹੋਵੇਗਾ ਆਉਟਪੁੱਟ \"110\" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. N = 147 ਲਈ, ਅੰਕ ਦਾ ਜੋੜ 12 ਹੋਵੇਗਾ ਆਉਟਪੁੱਟ \"1100\" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. ਵੇਰੀਏਬਲਃ @N ਪੂਰਨ ਅੰਕ ਕੰਟਰੈਕਟਸਃ 0 â‰¤ N â‰¤ 10000. ਆਉਟਪੁੱਟਃ ਬਾਈਨਰੀ ਨੰਬਰ ਦੀ ਇੱਕ ਸਤਰ \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ lst. ਜੋੜੇ ਤੱਤ ਜੋੜੋ ਜੋ ਅਜੀਬ ਸੂਚਕਾਂਕ ਤੇ ਹਨ. ਉਦਾਹਰਣਃ ਜੋੜੋ (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਇਸਦਾ ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੰਸਕਰਣ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਸਤਰ ਦਾ ਕ੍ਰਮਬੱਧ ਸੰਸਕਰਣ, ਇੱਕ ਸਤਰ ਹੈ ਜਿੱਥੇ ਸਾਰੇ ਸ਼ਬਦ (ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਗਏ) ਨੂੰ ਇੱਕ ਨਵੇਂ ਸ਼ਬਦ ਦੁਆਰਾ ਬਦਲਿਆ ਜਾਂਦਾ ਹੈ ਜਿੱਥੇ ਸਾਰੇ ਅੱਖਰ ASCII ਮੁੱਲ ਦੇ ਅਧਾਰ ਤੇ ਵੱਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਵਿਵਸਥਿਤ ਹੁੰਦੇ ਹਨ. ਨੋਟਃ ਤੁਹਾਨੂੰ ਵਾਕ ਵਿੱਚ ਸ਼ਬਦਾਂ ਅਤੇ ਖਾਲੀ ਥਾਂਵਾਂ ਦਾ ਕ੍ਰਮ ਰੱਖਣਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ anti_shuffle ((('Hi') ਵਾਪਸ ਕਰਦਾ ਹੈ 'Hi' anti_shuffle (('hello') ਵਾਪਸ ਕਰਦਾ ਹੈ 'ehllo' anti_shuffle (('Hello World!!!') ਵਾਪਸ ਕਰਦਾ ਹੈ 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ 2 ਅਯਾਮੀ ਡਾਟਾ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਨੇਸਟਡ ਲਿਸਟ ਦੇ ਰੂਪ ਵਿੱਚ, ਜੋ ਕਿ ਮੈਟ੍ਰਿਕਸ ਦੇ ਸਮਾਨ ਹੈ, ਹਾਲਾਂਕਿ, ਮੈਟ੍ਰਿਕਸ ਦੇ ਉਲਟ, ਹਰੇਕ ਕਤਾਰ ਵਿੱਚ ਵੱਖ ਵੱਖ ਕਾਲਮਾਂ ਦੀ ਸੰਖਿਆ ਹੋ ਸਕਦੀ ਹੈ. lst, ਅਤੇ ਪੂਰਨ ਅੰਕ x ਦਿੱਤੇ ਗਏ ਹਨ, ਸੂਚੀ ਵਿੱਚ ਪੂਰਨ ਅੰਕ x ਲੱਭੋ, ਅਤੇ ਟੁਪਲਸ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ, [(x1, y1), (x2, y2) ...] ਜਿਵੇਂ ਕਿ ਹਰੇਕ ਟੁਪਲ ਇੱਕ ਤਾਲਮੇਲ ਹੈ - (ਕਤਾਰ, ਕਾਲਮ), 0 ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ. ਸ਼ੁਰੂ ਵਿੱਚ ਕਤਾਰਾਂ ਦੁਆਰਾ ਤਾਲਮੇਲ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਨਾਲ ਹੀ, ਕਤਾਰ ਦੇ ਤਾਲਮੇਲ ਨੂੰ ਕਾਲਮਾਂ ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਉਦਾਹਰਣਃ get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] == == [[ਰੋਅੰਤਲਾ, 1, 2, 3]], == 2, 2]] ]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਕ੍ਰਮਬੱਧ ਕਰਨ ਤੋਂ ਬਾਅਦ ਦਿੱਤੀ ਗਈ ਐਰੇ ਦੀ ਇੱਕ ਕਾਪੀ ਵਾਪਸ ਕਰੋ, ਤੁਸੀਂ ਦਿੱਤੀ ਗਈ ਐਰੇ ਨੂੰ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋਗੇ ਜੇ ਜੋੜ ((ਪਹਿਲਾ ਇੰਡੈਕਸ ਮੁੱਲ, ਆਖਰੀ ਇੰਡੈਕਸ ਮੁੱਲ) ਅਜੀਬ ਹੈ, ਜਾਂ ਜੇ ਜੋੜ ((ਪਹਿਲਾ ਇੰਡੈਕਸ ਮੁੱਲ, ਆਖਰੀ ਇੰਡੈਕਸ ਮੁੱਲ) ਬਰਾਬਰ ਹੈ ਤਾਂ ਇਸਨੂੰ ਘਟਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਨੋਟਃ * ਦਿੱਤੀ ਗਈ ਐਰੇ ਨੂੰ ਨਾ ਬਦਲੋ. ਉਦਾਹਰਣਃ * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਐਨਕ੍ਰਿਪਟ ਬਣਾਓ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇੱਕ ਆਰਗੂਮੈਂਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਇੱਕ ਸਤਰ ਨੂੰ ਏਨਕ੍ਰਿਪਟ ਕੀਤਾ ਗਿਆ ਹੈ ਜਿਸ ਨਾਲ ਵਰਣਮਾਲਾ ਘੁੰਮਿਆ ਜਾ ਰਿਹਾ ਹੈ। ਵਰਣਮਾਲਾ ਨੂੰ ਇਸ ਤਰੀਕੇ ਨਾਲ ਘੁੰਮਾਇਆ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ ਕਿ ਅੱਖਰ ਦੋ ਵਾਰ ਦੋ ਸਥਾਨਾਂ ਤੇ ਹੇਠਾਂ ਆਉਂਦੇ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ ਐਨਕ੍ਰਿਪਟ (('hi') ਵਾਪਸ 'lm' ਐਨਕ੍ਰਿਪਟ (('asdfghjkl') ਵਾਪਸ 'ewhjklnop' ਐਨਕ੍ਰਿਪਟ (('gf') ਵਾਪਸ 'kj' ਐਨਕ੍ਰਿਪਟ (('et') ਵਾਪਸ 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਇੱਕ ਫੰਕਸ਼ਨ next_smallest ਲਿਖੋ ਜੋ ਸੂਚੀ ਦੇ ਦੂਜੇ ਸਭ ਤੋਂ ਛੋਟੇ ਤੱਤ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਜੇ ਅਜਿਹਾ ਕੋਈ ਤੱਤ ਨਹੀਂ ਹੈ ਤਾਂ ਕੋਈ ਨਹੀਂ ਵਾਪਸ ਕਰੋ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == ਕੋਈ ਨਹੀਂ next_smallest (([1, 1]) == ਕੋਈ ਨਹੀਂ \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ਤੁਹਾਨੂੰ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ, ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਬੋਰਡਮ ਦੀ ਗਿਣਤੀ ਕਰਨਾ ਹੈ. ਇੱਕ ਬੋਰਡਮ ਇੱਕ ਵਾਕ ਹੈ ਜੋ \"I\" ਸ਼ਬਦ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ। ਵਾਕਾਂ ਨੂੰ '.', '?' ਜਾਂ '! ' ਨਾਲ ਸੀਮਿਤ ਕੀਤਾ ਜਾਂਦਾ ਹੈ। ਉਦਾਹਰਣ ਲਈਃ >>> is_bored(\"ਹੈਲੋ ਵਰਲਡ\") 0 >>> is_bored(\"ਅਕਾਸ਼ ਨੀਲਾ ਹੈ. ਸੂਰਜ ਚਮਕ ਰਿਹਾ ਹੈ. ਮੈਨੂੰ ਇਹ ਮੌਸਮ ਪਸੰਦ ਹੈ\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ 3 ਨੰਬਰ ਲੈਂਦਾ ਹੈ. ਇਹ ਸਹੀ ਵਾਪਿਸ ਆਉਂਦਾ ਹੈ ਜੇ ਇੱਕ ਨੰਬਰ ਦੂਜਿਆਂ ਦੋ ਦੇ ਜੋੜ ਦੇ ਬਰਾਬਰ ਹੁੰਦਾ ਹੈ, ਅਤੇ ਸਾਰੇ ਨੰਬਰ ਪੂਰਨ ਅੰਕ ਹੁੰਦੇ ਹਨ. ਕਿਸੇ ਵੀ ਹੋਰ ਮਾਮਲਿਆਂ ਵਿੱਚ ਗਲਤ ਵਾਪਿਸ ਆਉਂਦਾ ਹੈ. ਉਦਾਹਰਣ any_int{5, 2, 7} â -> True any_int{3, 2, 2} â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸੁਨੇਹਾ ਲੈਂਦਾ ਹੈ, ਅਤੇ ਇਸ ਤਰ੍ਹਾਂ ਇੰਕੋਡ ਕਰਦਾ ਹੈ ਕਿ ਇਹ ਸਾਰੇ ਅੱਖਰਾਂ ਦੇ ਕੇਸ ਨੂੰ ਬਦਲਦਾ ਹੈ, ਸੰਦੇਸ਼ ਵਿੱਚ ਸਾਰੇ ਵੋਕਲ ਨੂੰ ਉਸ ਅੱਖਰ ਨਾਲ ਬਦਲਦਾ ਹੈ ਜੋ ਅੰਗਰੇਜ਼ੀ ਵਰਣਮਾਲਾ ਵਿੱਚ ਉਸ ਵੋਕਲ ਤੋਂ 2 ਸਥਾਨਾਂ ਦੇ ਅੱਗੇ ਪ੍ਰਗਟ ਹੁੰਦਾ ਹੈ. ਸਿਰਫ ਅੱਖਰਾਂ ਨੂੰ ਮੰਨੋ. ਉਦਾਹਰਣਃ >>> ਇੰਕੋਡ 'ਤੇ 'ਟੈਸਟ') 'TGST' >>> ਇੰਕੋਡ 'ਇਹ ਇੱਕ ਸੰਦੇਸ਼ ਹੈ') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਵੱਡਾ ਪ੍ਰਾਇਮਰੀ ਮੁੱਲ ਲੱਭਣ ਅਤੇ ਇਸਦੇ ਅੰਕ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰਨ ਦੀ ਲੋੜ ਹੈ. ਉਦਾਹਰਣਃ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ਲਈ ਆਉਟਪੁੱਟ 10 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ਲਈ ਆਉਟਪੁੱਟ 25 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ਲਈ ਆਉਟਪੁੱਟ 13 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ਲਈ ਆਉਟਪੁੱਟ 11 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [0,81,12,31,21] ਲਈ ਆਉਟਪੁੱਟ 3 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [0,1,8,1,2,1,7] ਲਈ ਆਉਟਪੁੱਟ 7 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ\"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ਇੱਕ ਸ਼ਬਦਕੋਸ਼ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਵਾਪਸ ਕਰੋ True ਜੇ ਸਾਰੀਆਂ ਕੁੰਜੀਆਂ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਸਤਰਾਂ ਹਨ ਜਾਂ ਸਾਰੀਆਂ ਕੁੰਜੀਆਂ ਵੱਡੇ ਅੱਖਰਾਂ ਵਿੱਚ ਸਤਰਾਂ ਹਨ, ਨਹੀਂ ਤਾਂ ਵਾਪਸ ਕਰੋ False. ਫੰਕਸ਼ਨ ਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False ਦਿੱਤਾ ਗਿਆ ਸ਼ਬਦਕੋਸ਼ ਖਾਲੀ ਹੈ. ਉਦਾਹਰਣਃ check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ True. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ True.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰੋ ਜੋ ਇੱਕ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਲੈਂਦਾ ਹੈ ਅਤੇ ਪਹਿਲੇ n ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ ਪ੍ਰਾਇਮਰੀ ਨੰਬਰ ਹੁੰਦੇ ਹਨ ਅਤੇ n ਤੋਂ ਘੱਟ ਹੁੰਦੇ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"ਫੰਕਸ਼ਨ ਨੂੰ ਪੂਰਾ ਕਰੋ ਜੋ ਦੋ ਪੂਰਨ ਅੰਕ ਲੈਂਦਾ ਹੈ ਅਤੇ ਉਹਨਾਂ ਦੇ ਯੂਨਿਟ ਅੰਕ ਦੇ ਉਤਪਾਦ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਮੰਨ ਲਓ ਕਿ ਇੰਪੁੱਟ ਹਮੇਸ਼ਾਂ ਯੋਗ ਹੁੰਦਾ ਹੈ. ਉਦਾਹਰਣਃ ਗੁਣਾ ਕਰਨਾ ((148, 412) ਨੂੰ 16. ਗੁਣਾ ਕਰਨਾ ((19, 28) ਨੂੰ 72. ਗੁਣਾ ਕਰਨਾ ((2020, 1851) ਨੂੰ 0. ਗੁਣਾ ਕਰਨਾ ((14,-15) ਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ 20. \"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਗਈ ਹੈ, ਜੋ ਕਿ ਵੀ ਸੂਚਕਾਂਕ ਵਿੱਚ ਵੱਡੇ ਅੱਖਰਾਂ ਦੇ ਵੋਕਲ ਦੀ ਗਿਣਤੀ ਕਰੋ. ਉਦਾਹਰਨ ਲਈਃ count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 ਵਾਪਸ ਕਰਦਾ ਹੈ \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਨੰਬਰ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ ਅਤੇ ਇਸ ਦੇ ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਜੇ ਨੰਬਰ ਦੋ ਪੂਰਨ ਅੰਕ ਤੋਂ ਬਰਾਬਰ ਹੈ, ਤਾਂ ਇਸ ਨੂੰ ਜ਼ੀਰੋ ਤੋਂ ਦੂਰ ਕਰ ਦਿਓ. ਉਦਾਹਰਣ >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 ਨੋਟਃ ਜ਼ੀਰੋ ਤੋਂ ਦੂਰ ਕਰਨ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਜੇ ਦਿੱਤਾ ਗਿਆ ਨੰਬਰ ਦੋ ਪੂਰਨ ਅੰਕ ਤੋਂ ਬਰਾਬਰ ਹੈ, ਤਾਂ ਤੁਹਾਨੂੰ ਉਹ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੋ ਜ਼ੀਰੋ ਤੋਂ ਸਭ ਤੋਂ ਦੂਰ ਹੈ. ਉਦਾਹਰਣ ਲਈ closest_integer \" ((14.5\") ਨੂੰ 15 ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ closest_integer \" ((-14.5\") ਨੂੰ -15. ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤੁਹਾਨੂੰ ਪੱਥਰਾਂ ਦੇ n ਪੱਧਰਾਂ ਦਾ ਇੱਕ ਢੇਰ ਬਣਾਉਣਾ ਹੈ. ਪਹਿਲੇ ਪੱਧਰ ਵਿੱਚ n ਪੱਥਰ ਹਨ. ਅਗਲੇ ਪੱਧਰ ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈਃ - ਅਗਲਾ ਅਜੀਬ ਨੰਬਰ ਜੇ n ਅਜੀਬ ਹੈ. - ਅਗਲਾ ਜੋੜ ਨੰਬਰ ਜੇ n ਜੋੜ ਹੈ. ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਹਰੇਕ ਪੱਧਰ ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ, ਜਿੱਥੇ ਸੂਚਕ i ਤੇ ਤੱਤ ਪੱਧਰ (i+1) ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ. ਉਦਾਹਰਣਃ >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ਤੁਹਾਨੂੰ ਕਾਮੇ ਜਾਂ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ. ਤੁਹਾਡਾ ਕੰਮ ਸਤਰ ਨੂੰ ਸ਼ਬਦਾਂ ਵਿੱਚ ਵੰਡਣਾ ਅਤੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰਨਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ words_string ((\"ਹਾਇ, ਮੇਰਾ ਨਾਮ ਜੌਨ ਹੈ\") == [\"ਹਾਇ\", \"ਮੇਰਾ\", \"ਨਾਮ\", \"ਹੈ\", \"ਜੌਨ\"] words_string ((\"ਇੱਕ, ਦੋ, ਤਿੰਨ, ਚਾਰ, ਪੰਜ, ਛੇ\") == [\"ਇੱਕ\", \"ਦੋ\", \"ਤਿੰਨ\", \"ਚਾਰ\", \"ਪੰਜ\", \"ਛੇ\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ਇਹ ਫੰਕਸ਼ਨ ਦੋ ਸਕਾਰਾਤਮਕ ਨੰਬਰ x ਅਤੇ y ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡਾ ਜੋੜ ਪੂਰਨ ਅੰਕ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ [x, y] ਦੀ ਰੇਂਜ ਵਿੱਚ ਹੈ। ਜੇ ਅਜਿਹੀ ਕੋਈ ਸੰਖਿਆ ਨਹੀਂ ਹੈ, ਤਾਂ ਫੰਕਸ਼ਨ ਨੂੰ -1 ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ਤੁਹਾਨੂੰ ਦੋ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਅਤੇ m ਦਿੱਤੇ ਗਏ ਹਨ, ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ n ਤੋਂ m ਤੱਕ ਪੂਰਨ ਅੰਕ ਦੀ ਔਸਤ ਗਣਨਾ ਕਰਨਾ ਹੈ (n ਅਤੇ m ਸਮੇਤ) । ਜਵਾਬ ਨੂੰ ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ ਤੱਕ ਗੋਲ ਕਰੋ ਅਤੇ ਇਸਨੂੰ ਬਾਈਨਰੀ ਵਿੱਚ ਤਬਦੀਲ ਕਰੋ। ਜੇ n m ਤੋਂ ਵੱਡਾ ਹੈ, ਤਾਂ ਵਾਪਸ ਕਰੋ -1. ਉਦਾਹਰਨਃ ਗੋਲ_ਆਵਗ ((1, 5) => \"0b11\" ਗੋਲ_ਆਵਗ ((7, 5) => -1 ਗੋਲ_ਆਵਗ ((10, 20) => \"0b1111\" ਗੋਲ_ਆਵਗ ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ x. ਸਾਰੇ ਤੱਤਾਂ ਦੀ ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਕੋਈ ਵੀ ਅੰਕ ਨਹੀਂ ਹੈ. ਨੋਟਃ ਵਾਪਸ ਕੀਤੀ ਸੂਚੀ ਨੂੰ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕੀਤਾ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ >>> ਵਿਲੱਖਣ_ਅੰਕ (([15, 33, 1422, 1]) [1, 15, 33] >>> ਵਿਲੱਖਣ_ਅੰਕ (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਪੂਰਨ ਅੰਕ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕਰੋ ਜੋ 1 ਅਤੇ 9 ਦੇ ਵਿਚਕਾਰ ਹਨ, ਨਤੀਜੇ ਵਾਲੀ ਐਰੇ ਨੂੰ ਉਲਟਾਓ, ਅਤੇ ਫਿਰ ਹਰੇਕ ਅੰਕ ਨੂੰ ਇਸਦੇ ਅਨੁਸਾਰੀ ਨਾਮ ਨਾਲ \"ਇੱਕ\", \"ਦੋ\", \"ਤਿੰਨ\", \"ਚਾਰ\", \"ਪੰਜ\", \"ਛੇ\", \"ਸੱਤ\", \"ਅੱਠ\", \"ਨੌ\" ਤੋਂ ਬਦਲੋ। ਉਦਾਹਰਣ ਲਈਃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ਤਰਤੀਬ arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ਉਲਟਾ arr -> [8, 5, 4, 3, 2, 2, 1, 1] ਵਾਪਸੀ [\"ਅੱਠ\", \"ਚਾਰ\", \"ਤਿੰਨ\", \"ਦੋ\", \"ਦੋ\", \"ਇੱਕ\", \"ਇੱਕ\"] ਜੇ ਐਰੇ ਖਾਲੀ ਹੈ, ਤਾਂ ਇੱਕ ਵਾਪਸੀ ਵਾਪਸੀਃ arr = [] ਵਾਪਸੀ ਐਰੇ [] ਜੇ ਐਰੇ ਵਿੱਚ ਕੋਈ ਅਜੀਬ ਨੰਬਰ ਹੈ ਤਾਂ ਇਸ ਨੂੰ ਨਜ਼ਰ ਅੰਦਾਜ਼ ਕਰੋਃ arr = [1, 1 , 55 -> arr -1, 55 -> arr -1, 55 -> reverse -5, arr = [51] ਵਾਪਸੀ -1, 'ਇੱਕ' ]\"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"ਫੰਕਸ਼ਨ f ਨੂੰ ਲਾਗੂ ਕਰੋ ਜੋ n ਨੂੰ ਇੱਕ ਪੈਰਾਮੀਟਰ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ, ਅਤੇ ਆਕਾਰ n ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ ਇੰਡੈਕਸ i ਤੇ ਤੱਤ ਦਾ ਮੁੱਲ i ਦਾ ਫੈਕਟਰਿਅਲ ਹੁੰਦਾ ਹੈ ਜੇ i ਵੀ ਹੋਵੇ ਜਾਂ 1 ਤੋਂ i ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦਾ ਜੋੜ ਨਹੀਂ. i 1 ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ. i ਦਾ ਫੈਕਟਰਿਅਲ 1 ਤੋਂ i ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦਾ ਗੁਣਾ ਹੈ (1 * 2 * . . . * i). ਉਦਾਹਰਨਃ f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਟੂਪਲ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਜੋੜ ਅਤੇ ਅਜੀਬ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ ਦੀ ਗਿਣਤੀ ਹੈ ਜੋ ਰੇਂਜ ਦੇ ਅੰਦਰ ਆਉਂਦੀ ਹੈ ((1, n), ਸਮੇਤ. ਉਦਾਹਰਣ 1: ਇਨਪੁਟਃ 3 ਆਉਟਪੁੱਟਃ (1, 2) ਵਿਆਖਿਆਃ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ 1, 2, 3 ਹਨ, ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ ਇੱਕ ਜੋੜਾ ਹੈ, ਅਤੇ ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ ਦੋ ਅਜੀਬ ਹਨ. ਉਦਾਹਰਣ 2: ਇਨਪੁਟਃ 12 ਆਉਟਪੁੱਟਃ (4, 6) ਵਿਆਖਿਆਃ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 ਹਨ. ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ ਚਾਰ ਜੋੜੇ ਹਨ, ਅਤੇ ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ 6 ਅਜੀਬ ਹਨ. ਨੋਟਃ 1. 1 <= n <= 10 ^ 3 2. ਟੂਪਲ ਨੇ ਕ੍ਰਮਵਾਰ ਜੋੜ ਅਤੇ ਅਜੀਬ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕੀਤੀ ਹੈ. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ count_nums ਲਿਖੋ ਜੋ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਤੱਤਾਂ ਦੀ ਸੰਖਿਆ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਅੰਕ ਦਾ ਜੋੜ ਹੈ > 0. ਜੇ ਕੋਈ ਨੰਬਰ ਨਕਾਰਾਤਮਕ ਹੈ, ਤਾਂ ਇਸਦਾ ਪਹਿਲਾ ਦਸਤਖਤ ਕੀਤਾ ਅੰਕ ਨਕਾਰਾਤਮਕ ਹੋਵੇਗਾਃ ਉਦਾਹਰਣ ਵਜੋਂ -123 ਦੇ ਦਸਤਖਤ ਕੀਤੇ ਅੰਕ ਹਨ -1, 2, ਅਤੇ 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ਸਾਡੇ ਕੋਲ N ਪੂਰਨ ਅੰਕ arr[1], arr[2], ..., arr[N] ਦੀ ਇੱਕ ਐਰੇ 'arr' ਹੈ। ਐਰੇ ਵਿੱਚ ਨੰਬਰ ਬੇਤਰਤੀਬੇ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਜਾਣਗੇ। ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਦਿੱਤੇ ਗਏ ਐਰੇ ਤੇ ਹੇਠ ਲਿਖੀ ਕਾਰਵਾਈ ਕਰਕੇ ਗੈਰ-ਘਟਾਉਣ ਵਾਲੇ ਕ੍ਰਮ ਵਿੱਚ ਐਰੇ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕਰਨਾ ਸੰਭਵ ਹੈ: ਤੁਹਾਨੂੰ ਦਿੱਤੀ ਗਈ ਐਰੇ ਤੇ ਕਈ ਵਾਰ ਸੱਜੇ ਪਾਸੇ ਜਾਣ ਦੀ ਕਾਰਵਾਈ ਕਰਨ ਦੀ ਆਗਿਆ ਹੈ। ਇੱਕ ਸੱਜੇ ਪਾਸੇ ਜਾਣ ਦੀ ਕਾਰਵਾਈ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਐਰੇ ਦੇ ਸਾਰੇ ਤੱਤਾਂ ਨੂੰ ਇੱਕ ਸਥਿਤੀ ਵਿੱਚ ਸੱਜੇ ਦਿਸ਼ਾ ਵਿੱਚ ਬਦਲਣਾ। ਐਰੇ ਦਾ ਆਖਰੀ ਤੱਤ ਐਰੇ ਵਿੱਚ ਸ਼ੁਰੂਆਤੀ ਸਥਿਤੀ ਵਿੱਚ ਚਲੇ ਜਾਵੇਗਾ ਭਾਵ 0 ਵਾਂ ਇੰਡੈਕਸ. ਜੇ ਉਪਰੋਕਤ ਕਾਰਵਾਈ ਕਰਕੇ ਕ੍ਰਮਬੱਧ ਐਰੇ ਪ੍ਰਾਪਤ ਕਰਨਾ ਸੰਭਵ ਹੈ ਤਾਂ ਵਾਪਸੀ ਸਹੀ ਹੈ ਤਾਂ ਵਾਪਸੀ ਗਲਤ ਹੈ. ਜੇ ਦਿੱਤੀ ਗਈ ਐਰੇ ਖਾਲੀ ਹੈ ਤਾਂ ਵਾਪਸੀ ਸਹੀ ਹੈ। ਨੋਟਃ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਵਿੱਚ ਵਿਲੱਖਣ ਤੱਤ ਹੋਣ ਦੀ ਗਰੰਟੀ ਹੈ। ਉਦਾਹਰਣ ਲਈਃ move_one_(ball[3, 4, 5, 2===>True ਵਿਆਖਿਆਃ ਸਹੀ ਵਿਆਖਿਆਃ 2 ਦੁਆਰਾ ਸਹੀ ਕਾਰਵਾਈਆਂ, ਗੈਰ-ਘਟਾਉਣ ਵਾਲੇ ਕ੍ਰਮ ਨੂੰ ਪ੍ਰਾਪਤ ਕੀਤਾ ਜਾ ਸਕਦਾ ਹੈ. ਐਰੇ ਲਈ ਦਿੱਤੇ ਗਏ ਐਰੇ ਨੂੰ ਇੱਕ ਵਾਰ ਸੱਜੇ ਪਾਸੇ ਜਾਣ ਦੀ ਕਾਰਵਾਈ ਕਰਨ ਦੀ ਆਗਿਆ ਹੈ।[,===4, 3, 4, 5,=== ਗਲਤ===> ਇਹ ਕਿਸੇ ਵੀ ਨੰਬਰ ਦੇ ਨਾਲ ਸਹੀ ਕ੍ਰਮਬੱਧਰੀ ਕਾਰਵਾਈਆਂ ਕਰਨ ਲਈ ਸੰਭਵ ਨਹੀਂ ਹੈ।\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"ਇਸ ਸਮੱਸਿਆ ਵਿੱਚ, ਤੁਸੀਂ ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰੋਗੇ ਜੋ ਸੰਖਿਆਵਾਂ ਦੀਆਂ ਦੋ ਸੂਚੀਆਂ ਲੈਂਦਾ ਹੈ, ਅਤੇ ਇਹ ਨਿਰਧਾਰਤ ਕਰਦਾ ਹੈ ਕਿ ਕੀ ਉਹਨਾਂ ਦੇ ਵਿਚਕਾਰ ਤੱਤਾਂ ਦਾ ਆਦਾਨ-ਪ੍ਰਦਾਨ ਕਰਨਾ ਸੰਭਵ ਹੈ ਤਾਂ ਜੋ lst1 ਨੂੰ ਸਿਰਫ ਜੋੜਿਆਂ ਦੀ ਸੂਚੀ ਬਣਾਇਆ ਜਾ ਸਕੇ। lst1 ਅਤੇ lst2 ਦੇ ਵਿਚਕਾਰ ਵਟਾਂਦਰੇ ਵਾਲੇ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਦੀ ਕੋਈ ਸੀਮਾ ਨਹੀਂ ਹੈ। ਜੇ lst1 ਅਤੇ lst2 ਦੇ ਵਿਚਕਾਰ ਤੱਤਾਂ ਦਾ ਆਦਾਨ-ਪ੍ਰਦਾਨ ਕਰਨਾ ਸੰਭਵ ਹੈ ਤਾਂ ਜੋ lst1 ਦੇ ਸਾਰੇ ਤੱਤ ਜੋੜਿਆਂ ਦੇ ਹੋਣ, \"YES\" ਵਾਪਸ ਕਰੋ। ਨਹੀਂ ਤਾਂ, \"NO\" ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣ ਲਈਃ exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ਇਹ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਕਿ ਇੰਪੁੱਟ ਸੂਚੀਆਂ ਗੈਰ-ਖਾਲੀ ਹੋਣਗੀਆਂ। \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ ਜੋ ਸਪੇਸ ਵੱਖ ਕੀਤੇ ਛੋਟੇ ਅੱਖਰਾਂ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ, ਸਭ ਤੋਂ ਵੱਧ ਦੁਹਰਾਉਣ ਵਾਲੇ ਅੱਖਰ ਦਾ ਸ਼ਬਦਕੋਸ਼ ਵਾਪਸ ਕਰੋ ਅਤੇ ਇਸਦੀ ਅਨੁਸਾਰੀ ਗਿਣਤੀ ਸ਼ਾਮਲ ਕਰੋ. ਜੇ ਕਈ ਅੱਖਰਾਂ ਦੀ ਇੱਕੋ ਜਿਹੀ ਘਟਨਾ ਹੈ, ਤਾਂ ਉਨ੍ਹਾਂ ਸਾਰਿਆਂ ਨੂੰ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ ਹਿਸਟੋਗ੍ਰਾਮ (('a b c') == {'a': 1, 'b': 1, 'c': 1} ਹਿਸਟੋਗ੍ਰਾਮ (('a b b a') == {'a': 2, 'b': 2} ਹਿਸਟੋਗ੍ਰਾਮ (('a b c a b') == {'a': 2, 'b': 2} ਹਿਸਟੋਗ੍ਰਾਮ (('b b a b') == {'b 4}': ਹਿਸਟੋਗ੍ਰਾਮ (('a') == {'b 4}'}) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"ਟਾਸਕ ਸਾਨੂੰ ਦੋ ਸਤਰਾਂ s ਅਤੇ c ਦਿੱਤੀਆਂ ਗਈਆਂ ਹਨ, ਤੁਹਾਨੂੰ s ਵਿੱਚ ਸਾਰੇ ਅੱਖਰਾਂ ਨੂੰ ਮਿਟਾਉਣਾ ਪਵੇਗਾ ਜੋ c ਵਿੱਚ ਕਿਸੇ ਵੀ ਅੱਖਰ ਦੇ ਬਰਾਬਰ ਹਨ ਫਿਰ ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਨਤੀਜਾ ਸਤਰ ਪਾਲੀਂਡਰੋਮ ਹੈ. ਇੱਕ ਸਤਰ ਨੂੰ ਪਾਲੀਂਡਰੋਮ ਕਿਹਾ ਜਾਂਦਾ ਹੈ ਜੇ ਇਹ ਅੱਗੇ ਦੇ ਨਾਲ ਉਸੇ ਤਰ੍ਹਾਂ ਪਿੱਛੇ ਪੜ੍ਹਦਾ ਹੈ. ਤੁਹਾਨੂੰ ਜਾਂਚ ਲਈ ਨਤੀਜਾ ਸਤਰ ਅਤੇ True/False ਵਾਲੀ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਉਦਾਹਰਨ ਲਈ s = \"abcde\", c = \"ae\", ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('bcd',False) ਲਈ s = \"abcdef\", c = \"b\" ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('acdef',False) ਲਈ s = \"abcdedcba\", c = \"ab\", ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('cdedc',True) \"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਜਿੱਥੇ ਹਰ ਸਤਰ ਸਿਰਫ ਅੰਕ ਹਨ, ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਆਉਟਪੁੱਟ ਦੇ ਹਰੇਕ ਤੱਤ i ਨੂੰ \"ਇਨਪੁਟ ਦੇ ਸਤਰ i ਵਿੱਚ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ\" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ਜਿੱਥੇ ਸਾਰੇ i ਨੂੰ ਇੰਪੁੱਟ ਦੇ i'th ਸਤਰ ਵਿੱਚ ਅਜੀਬ ਅੰਕ ਦੀ ਗਿਣਤੀ ਨਾਲ ਬਦਲਿਆ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ. >>> odd_count['1234567']) [\"4n str4ng 4 ਦੇ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ 4nput.\"] >>> odd_count['3',\"111111\"]) [\"1n str1ng 1 ਦੇ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ 1nput. \",\" 8n str8ng 8 ਦੇ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ 8nput. \"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ਪੂਰਨ ਅੰਕ n ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, n ਦੇ ਕਿਸੇ ਵੀ ਗੈਰ-ਖਾਲੀ ਸਬ-ਐਰੇ ਦਾ ਘੱਟੋ ਘੱਟ ਜੋੜ ਲੱਭੋ. ਉਦਾਹਰਨ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ਤੁਹਾਨੂੰ ਖੂਹਾਂ ਦੀ ਇੱਕ ਆਇਤਾਕਾਰ ਗਰਿੱਡ ਦਿੱਤੀ ਗਈ ਹੈ. ਹਰ ਕਤਾਰ ਇੱਕ ਸਿੰਗਲ ਖੂਹ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ, ਅਤੇ ਹਰ ਇੱਕ ਕਤਾਰ ਵਿੱਚ 1 ਪਾਣੀ ਦੀ ਇੱਕ ਇਕਾਈ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ. ਹਰੇਕ ਖੂਹ ਵਿੱਚ ਇੱਕ ਸੰਬੰਧਿਤ ਬਾਲਟੀ ਹੁੰਦੀ ਹੈ ਜਿਸਦੀ ਵਰਤੋਂ ਇਸ ਤੋਂ ਪਾਣੀ ਕੱractਣ ਲਈ ਕੀਤੀ ਜਾ ਸਕਦੀ ਹੈ, ਅਤੇ ਸਾਰੀਆਂ ਬਾਲਟੀਆਂ ਦੀ ਇਕੋ ਸਮਰੱਥਾ ਹੁੰਦੀ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਖੂਹਾਂ ਨੂੰ ਖਾਲੀ ਕਰਨ ਲਈ ਬਾਲਟੀਆਂ ਦੀ ਵਰਤੋਂ ਕਰਨਾ ਹੈ. ਬਾਲਟੀਆਂ ਨੂੰ ਘੱਟ ਕਰਨ ਲਈ ਤੁਹਾਨੂੰ ਕਿੰਨੀ ਵਾਰ ਲੋੜੀਂਦੀ ਹੈ ਦੀ ਗਿਣਤੀ ਕਰੋ. ਉਦਾਹਰਣ 1: ਇਨਪੁਟਃ ਗਰਿੱਡਃ [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ਆਉਟਪੁੱਟਃ 6 ਉਦਾਹਰਣ 2: ਇਨਪੁਟਃ ਗਰਿੱਡਃ [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 ਆਉਟਪੁੱਟਃ 5 ਉਦਾਹਰਣਃ [[ਇਨਪੁਟ: :0,0], [0,0,0]] bucket_capacity: 5 ਆਉਟਪੁੱਟਃ 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * * 1 * 1 * * * * * 1 * 2 * * * * * * * * * * * 2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ਇਸ ਕਾਟਾ ਵਿੱਚ, ਤੁਹਾਨੂੰ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਨੂੰ ਉਨ੍ਹਾਂ ਦੀ ਬਾਈਨਰੀ ਪ੍ਰਤੀਨਿਧਤਾ ਵਿੱਚ ਉਭਰਦੇ ਕ੍ਰਮ ਵਿੱਚ ਇੱਕ ਦੀ ਗਿਣਤੀ ਦੇ ਅਨੁਸਾਰ ਕ੍ਰਮਬੱਧ ਕਰਨਾ ਹੈ। ਇੱਕ ਦੀ ਸਮਾਨ ਗਿਣਤੀ ਲਈ, ਦਸ਼ਮਲਵ ਮੁੱਲ ਦੇ ਅਧਾਰ ਤੇ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਇਸ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਲਾਗੂ ਕੀਤਾ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈਃ >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"ਇੱਕ ਸਤਰ s ਅਤੇ ਇੱਕ ਕੁਦਰਤੀ ਸੰਖਿਆ n ਦਿੱਤੀ ਗਈ ਹੈ, ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰਨ ਦਾ ਕੰਮ ਦਿੱਤਾ ਗਿਆ ਹੈ ਜੋ ਸਤਰ s ਤੋਂ ਸਾਰੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਬਿਲਕੁਲ n ਵਿਅੰਗਾਤਮਕ ਹੁੰਦੇ ਹਨ, ਤਾਂ ਜੋ ਇਹ ਸ਼ਬਦ ਸਤਰ s ਵਿੱਚ ਦਿਖਾਈ ਦੇਣ। ਜੇ ਸਤਰ s ਖਾਲੀ ਹੈ ਤਾਂ ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਖਾਲੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। ਨੋਟਃ ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇਨਪੁਟ ਸਤਰ ਵਿੱਚ ਸਿਰਫ ਅੱਖਰ ਅਤੇ ਸਪੇਸ ਹਨ। ਉਦਾਹਰਣਃ select_words \"ਮੈਰੀ ਕੋਲ ਇੱਕ ਛੋਟਾ ਲੇਲਾ ਸੀ\", 4) ==> [\"little\"] select_words \"ਮੈਰੀ ਕੋਲ ਇੱਕ ਛੋਟਾ ਲੇਲਾ ਸੀ\", 3) ==> [\"ਮੈਰੀ\", \"ਲੇਲਾ\"] select_words \"ਸਧਾਰਨ ਚਿੱਟਾ ਸਪੇਸ\", 2) ==> [] select_words \"ਹੈਲੋ ਵਰਲਡ\", 4) ==> [\"world\"] select_words \"ਅੰਕਲ ਸੈਮ\", 3) ==> [\"ਅੰਕਲ\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਸ਼ਬਦ ਦਿੱਤਾ ਗਿਆ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਸੱਜੇ ਪਾਸੇ ਤੋਂ ਦੋ ਧੁਨੀ ਦੇ ਵਿਚਕਾਰ ਖੜ੍ਹੇ ਸਭ ਤੋਂ ਨਜ਼ਦੀਕੀ ਸਵਰ ਨੂੰ ਲੱਭਣਾ ਹੈ (ਕੇਸ ਸੰਵੇਦਨਸ਼ੀਲ). ਸ਼ੁਰੂ ਅਤੇ ਅੰਤ ਵਿੱਚ ਸਵਰਾਂ ਦੀ ਗਿਣਤੀ ਨਹੀਂ ਕੀਤੀ ਜਾਂਦੀ. ਜੇ ਤੁਸੀਂ ਉਪਰੋਕਤ ਸ਼ਰਤ ਨੂੰ ਪੂਰਾ ਕਰਨ ਵਾਲੇ ਕੋਈ ਵੀ ਸਵਰ ਨਹੀਂ ਲੱਭਦੇ ਤਾਂ ਖਾਲੀ ਸਤਰ ਵਾਪਸ ਕਰੋ. ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਦਿੱਤੀ ਗਈ ਸਤਰ ਵਿੱਚ ਕੇਵਲ ਅੰਗਰੇਜ਼ੀ ਅੱਖਰ ਹਨ. ਉਦਾਹਰਨਃ get_closest_vowel ((\"yogurt\") ==> \"u\" get_closest_vowel ((\"F\") ==> \"U\" get_closest_vowel ((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ਤੁਹਾਨੂੰ ਦੋ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਦੋਵੇਂ ਸਤਰਾਂ ਵਿੱਚ ਸਿਰਫ ਖੁੱਲੇ ਪੈਰਾੰਟੈਸੇਜ਼ '(' ਜਾਂ ਬੰਦ ਪੈਰਾੰਟੈਸੇਜ਼ ') ' ਸ਼ਾਮਲ ਹਨ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਜਾਂਚਣਾ ਹੈ ਕਿ ਕੀ ਦੋ ਸਤਰਾਂ ਨੂੰ ਕਿਸੇ ਕ੍ਰਮ ਵਿੱਚ ਜੋੜਨਾ ਸੰਭਵ ਹੈ, ਕਿ ਨਤੀਜਾ ਸਤਰ ਚੰਗੀ ਹੋਵੇਗੀ. ਇੱਕ ਸਤਰ S ਨੂੰ ਚੰਗੀ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਜੇ S ਵਿੱਚ ਸਾਰੇ ਪੈਰਾੰਟੈਸੇ ਸੰਤੁਲਿਤ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ ਸਤਰ '((())' ਚੰਗੀ ਹੈ, ਜਦੋਂ ਕਿ ਸਤਰ '()) 'ਨਹੀਂ ਹੈ. ਜੇ ਇੱਕ ਚੰਗੀ ਸਤਰ ਬਣਾਉਣ ਦਾ ਕੋਈ ਤਰੀਕਾ ਹੈ, ਤਾਂ 'ਹਾਂ' ਵਾਪਸ ਕਰੋ, ਅਤੇ ਨਹੀਂ ਤਾਂ 'ਨਹੀਂ' ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ match_parens[('() ', ') ']) == 'ਹਾਂ' match_parens[(') ', ') ']) == 'ਨਹੀਂ' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"ਪੂਰਨ ਅੰਕ ਅਤੇ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ k ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਐਰੇ ਵਿੱਚ ਵੱਧ ਤੋਂ ਵੱਧ k ਨੰਬਰਾਂ ਦੇ ਨਾਲ ਲੰਬਾਈ k ਦੀ ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਨ 1: ਇਨਪੁਟਃ arr = [-3, -4, 5], k = 3 ਆਉਟਪੁੱਟਃ [-4, -3, 5] ਉਦਾਹਰਨ 2: ਇਨਪੁਟਃ arr = [4, -4, 4], k = 2 ਆਉਟਪੁੱਟਃ [4, 4] ਉਦਾਹਰਨ 3: ਇਨਪੁਟਃ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ਆਉਟਪੁੱਟਃ [2] ਨੋਟਃ 1. ਐਰੇ ਦੀ ਲੰਬਾਈ [1, 1000] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹੋਵੇਗੀ. 2. ਐਰੇ ਦੇ ਤੱਤ [-1000, 1000] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹੋਣਗੇ. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਸਾਰੇ ਅਜੀਬ ਤੱਤਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰੋ ਜੋ ਕਿ ਵੀ ਅਹੁਦਿਆਂ 'ਤੇ ਹਨ. ਉਦਾਹਰਣ ਹੱਲ (([5, 8, 7, 1]) ==> 12 ਹੱਲ (([3, 3, 3, 3, 3]) ==> 9 ਹੱਲ (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ਪੂਰਨ ਅੰਕ arr ਅਤੇ ਪੂਰਨ ਅੰਕ k ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਐਰ ਦੇ ਪਹਿਲੇ k ਤੱਤਾਂ ਦੇ ਵੱਧ ਤੋਂ ਵੱਧ ਦੋ ਅੰਕਾਂ ਵਾਲੇ ਤੱਤਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ ਇਨਪੁਟਃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 ਆਉਟਪੁੱਟਃ 24 # 21 + 3 ਦੇ ਜੋੜ ਸੰਜਮਃ 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਕਾਲੈਟਜ਼ ਕ੍ਰਮ ਵਿੱਚ ਅਜੀਬ ਨੰਬਰ ਹਨ. ਕੋਲੈਟਜ਼ ਅਨੁਮਾਨ ਗਣਿਤ ਵਿੱਚ ਇੱਕ ਅਨੁਮਾਨ ਹੈ ਜੋ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕ੍ਰਮ ਨਾਲ ਸਬੰਧਤ ਹੈਃ ਕਿਸੇ ਵੀ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਨਾਲ ਸ਼ੁਰੂ ਕਰੋ. ਫਿਰ ਹਰੇਕ ਅਵਧੀ ਨੂੰ ਪਿਛਲੇ ਅਵਧੀ ਤੋਂ ਪ੍ਰਾਪਤ ਕੀਤਾ ਜਾਂਦਾ ਹੈ ਜਿਵੇਂ ਕਿਃ ਜੇ ਪਿਛਲੀ ਅਵਧੀ ਜਮ੍ਹਾ ਹੈ, ਤਾਂ ਅਗਲੀ ਅਵਧੀ ਪਿਛਲੀ ਅਵਧੀ ਦਾ ਅੱਧਾ ਹੈ. ਜੇ ਪਿਛਲੀ ਅਵਧੀ ਅਜੀਬ ਹੈ, ਤਾਂ ਅਗਲੀ ਅਵਧੀ ਪਿਛਲੀ ਅਵਧੀ ਦੇ 3 ਗੁਣਾ ਹੈ ਅਤੇ 1. ਅਨੁਮਾਨ ਇਹ ਹੈ ਕਿ n ਦਾ ਕੋਈ ਵੀ ਮੁੱਲ ਹੋਵੇ, ਕ੍ਰਮ ਹਮੇਸ਼ਾਂ 1 ਤੇ ਪਹੁੰਚੇਗਾ. ਨੋਟਃ 1. ਕੋਲੈਟਜ਼ (((1) [1] ਹੈ. 2. ਵਾਪਸ ਕੀਤੀ ਸੂਚੀ ਨੂੰ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕੀਤਾ ਗਿਆ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ get_odd_collatz ((5) ਵਾਪਸ ਕਰਦਾ ਹੈ [1, 5] 5 ਲਈ ਕੋਲੈਟਜ਼ ਕ੍ਰਮ [5, 8, 16, 4, 2, 1], ਇਸ ਲਈ ਅਜੀਬ ਨੰਬਰ ਸਿਰਫ 1 ਅਤੇ 5 ਹਨ. \"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣਾ ਹੈ ਜੋ ਇੱਕ ਦਿੱਤੀ ਗਈ ਤਾਰੀਖ ਸਤਰ ਨੂੰ ਪ੍ਰਮਾਣਿਤ ਕਰਦਾ ਹੈ ਅਤੇ ਸਹੀ ਵਾਪਿਸ ਕਰਦਾ ਹੈ ਜੇ ਤਾਰੀਖ ਪ੍ਰਮਾਣਿਤ ਹੈ ਨਹੀਂ ਤਾਂ ਗਲਤ ਹੈ. ਤਾਰੀਖ ਪ੍ਰਮਾਣਿਤ ਹੈ ਜੇ ਹੇਠ ਲਿਖੇ ਸਾਰੇ ਨਿਯਮ ਸੰਤੁਸ਼ਟ ਹਨਃ 1. ਤਾਰੀਖ ਸਤਰ ਖਾਲੀ ਨਹੀਂ ਹੈ. 2. ਮਹੀਨਿਆਂ ਲਈ ਦਿਨ ਦੀ ਗਿਣਤੀ 1 ਤੋਂ ਘੱਟ ਜਾਂ 31 ਦਿਨਾਂ ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੈ 1,3,5,7,8,10,12. ਅਤੇ ਮਹੀਨਿਆਂ ਲਈ ਦਿਨ ਦੀ ਗਿਣਤੀ 1 ਤੋਂ ਘੱਟ ਜਾਂ 30 ਦਿਨਾਂ ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੈ 4,6,9,11. ਅਤੇ, ਮਹੀਨੇ ਲਈ ਦਿਨ ਦੀ ਗਿਣਤੀ 1 ਤੋਂ ਘੱਟ ਜਾਂ 29 ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੈ 2. 3. ਮਹੀਨੇ 1 ਤੋਂ ਘੱਟ ਜਾਂ 12 ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੋਣੇ ਚਾਹੀਦੇ 4. ਤਾਰੀਖ ਫਾਰਮੈਟ ਵਿੱਚ ਹੋਣੀ ਚਾਹੀਦੀ ਹੈਃ mm-dd-yyyy ਉਦਾਹਰਣ ਲਈਃ valid_date (('03-11-2000') => True_valid_date (('15-01-2012') => False valid_date (('04-01-2040') => False_valid_date (('06-04-2020') => True_valid_date (('06/04/2020') => False\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ, ਚਿੱਟੇ ਸਥਾਨ ਤੇ ਵੰਡਿਆ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰੋ, ਜੇ ਪਾਠ ਵਿੱਚ ਕੋਈ ਚਿੱਟੇ ਸਥਾਨ ਮੌਜੂਦ ਨਹੀਂ ਹਨ ਤਾਂ ਤੁਹਾਨੂੰ ਕਾਮਿਆਂ 'ਤੇ ਵੰਡਣਾ ਚਾਹੀਦਾ ਹੈ,' ਜੇ ਕੋਈ ਕਾਮੇ ਮੌਜੂਦ ਨਹੀਂ ਹਨ ਤਾਂ ਤੁਹਾਨੂੰ ਅਲਫ਼ਾਬੈੱਟ ਵਿੱਚ ਅਜੀਬ ਕ੍ਰਮ ਦੇ ਨਾਲ ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ, ਆਰਡਰ (a) = 0, ਆਰਡਰ (b) = 1, . . . ਆਰਡਰ (z) = 25 ਉਦਾਹਰਣ ਵੰਡ_ ਸ਼ਬਦ (ਹੈਲੋ ਵਿਸ਼ਵ!'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਵਾਪਸ ਕਰੋ ਕਿ ਕੀ ਉਹ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਗਏ ਹਨ ਜਾਂ ਨਹੀਂ. ਜੇ ਸੂਚੀ ਵਿੱਚ ਇੱਕੋ ਨੰਬਰ ਦੀ 1 ਤੋਂ ਵੱਧ ਡੁਪਲੀਕੇਟ ਹੈ, ਤਾਂ ਗਲਤ ਵਾਪਸ ਕਰੋ. ਕੋਈ ਨਕਾਰਾਤਮਕ ਨੰਬਰ ਅਤੇ ਸਿਰਫ ਪੂਰਨ ਅੰਕ ਨਾ ਮੰਨੋ. ਉਦਾਹਰਣ is_sorted ((([5]) â -> ਸੱਚ ਹੈ is_sorted (([1, 2, 3, 4, 5]) â -> ਸੱਚ ਹੈ is_sorted (([1, 2, 3, 4, 5, 6]) â -> ਝੂਠ ਹੈ is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> ਸੱਚ ਹੈ is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> ਸੱਚ ਹੈ is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> ਝੂਠ ਹੈ is_sorted (([1, 2, 2, 3, 3, 4]) â -> ਸੱਚ ਹੈ is_sorted (([1, 2, 2, 2, 3, 4 -> ਝੂਠ ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ਤੁਹਾਨੂੰ ਦੋ ਅੰਤਰਾਲ ਦਿੱਤੇ ਗਏ ਹਨ, ਜਿੱਥੇ ਹਰ ਅੰਤਰਾਲ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਜੋੜੀ ਹੈ। ਉਦਾਹਰਣ ਲਈ, ਅੰਤਰਾਲ = (ਸ਼ੁਰੂਆਤ, ਅੰਤ) = (1, 2). ਦਿੱਤੇ ਗਏ ਅੰਤਰਾਲ ਬੰਦ ਹਨ ਜਿਸਦਾ ਮਤਲਬ ਹੈ ਕਿ ਅੰਤਰਾਲ (ਸ਼ੁਰੂਆਤ, ਅੰਤ) ਵਿੱਚ ਸ਼ੁਰੂਆਤ ਅਤੇ ਅੰਤ ਦੋਵੇਂ ਸ਼ਾਮਲ ਹਨ। ਹਰੇਕ ਦਿੱਤੇ ਗਏ ਅੰਤਰਾਲ ਲਈ, ਇਹ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਕਿ ਇਸਦੀ ਸ਼ੁਰੂਆਤ ਇਸ ਦੇ ਅੰਤ ਦੇ ਬਰਾਬਰ ਜਾਂ ਘੱਟ ਹੈ। ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਇਨ੍ਹਾਂ ਦੋਵਾਂ ਅੰਤਰਾਲਾਂ ਦੀ ਲੜੀ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਇਮ ਨੰਬਰ ਹੈ। ਉਦਾਹਰਣ ਵਜੋਂ, ਅੰਤਰਾਲਾਂ (1, 3), (2, 4) ਦਾ ਅੰਤਰਾਲ (2, 3) ਹੈ, ਜਿਸਦੀ ਲੰਬਾਈ 1 ਹੈ, ਜੋ ਕਿ ਇੱਕ ਪ੍ਰਾਇਮ ਨੰਬਰ ਨਹੀਂ ਹੈ। ਜੇ ਅੰਤਰਾਲ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਇਮ ਨੰਬਰ ਹੈ, ਤਾਂ \"ਹਾਂ\" ਵਾਪਸ ਕਰੋ, ਨਹੀਂ ਤਾਂ \"ਨਹੀਂ\" ਵਾਪਸ ਕਰੋ। ਜੇ ਦੋ ਅੰਤਰਾਲ ਨਹੀਂ ਕੱਟਦੇ, ਤਾਂ \"ਨਹੀਂ\" ਵਾਪਸ ਕਰੋ। [input/output] ਨਮੂਨੇਃ ਅੰਤਰਾਲ (((1, 2), (2, 3) ==> \"ਇੰਟਰਸੈਕਸ਼ਨ-1, ((1), 4) ==> \"ਇੰਟਰਸੈਕਸ਼ਨ (0,\" - 5), ((1, (((5, \"ਈਐਸ\",))\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ ਅਤੇ ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੇ ਅਕਾਰ ਦੇ ਜੋੜ ਨੂੰ ਐਰੇ ਵਿੱਚ ਹਰੇਕ ਨੰਬਰ ਦੇ ਸਾਰੇ ਸੰਕੇਤਾਂ ਦੇ ਉਤਪਾਦ ਦੁਆਰਾ ਗੁਣਾ ਕਰਨ ਦੀ ਲੋੜ ਹੈ, ਜਿਸਦਾ ਪ੍ਰਤੀਨਿਧਤਾ 1, -1 ਜਾਂ 0 ਦੁਆਰਾ ਕੀਤੀ ਜਾਂਦੀ ਹੈ. ਨੋਟਃ ਖਾਲੀ ਐਰੇ ਲਈ ਕੋਈ ਨਹੀਂ ਵਾਪਿਸ ਨਹੀਂ ਆਉਂਦਾ. ਉਦਾਹਰਣਃ >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == ਕੋਈ ਨਹੀਂ\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N ਕਤਾਰਾਂ ਅਤੇ N ਕਾਲਮਾਂ (N >= 2) ਅਤੇ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ k ਦੇ ਨਾਲ ਇੱਕ ਗਰਿੱਡ ਦਿੱਤੀ ਗਈ ਹੈ, ਗਰਿੱਡ ਦੇ ਹਰੇਕ ਸੈੱਲ ਵਿੱਚ ਇੱਕ ਮੁੱਲ ਹੁੰਦਾ ਹੈ. [1, N * N] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹਰ ਪੂਰਨ ਅੰਕ ਗਰਿੱਡ ਦੇ ਸੈੱਲਾਂ ਤੇ ਬਿਲਕੁਲ ਇੱਕ ਵਾਰ ਦਿਖਾਈ ਦਿੰਦਾ ਹੈ. ਤੁਹਾਨੂੰ ਗਰਿੱਡ ਵਿੱਚ ਲੰਬਾਈ k ਦਾ ਘੱਟੋ ਘੱਟ ਮਾਰਗ ਲੱਭਣਾ ਪਵੇਗਾ. ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਸੈੱਲ ਤੋਂ ਸ਼ੁਰੂ ਕਰ ਸਕਦੇ ਹੋ, ਅਤੇ ਹਰ ਕਦਮ ਵਿੱਚ ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਗੁਆਂਢੀ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ ਜੋ ਤੁਹਾਡੇ ਨਾਲ ਇੱਕ ਕਿਨਾਰੇ ਨੂੰ ਸਾਂਝਾ ਕਰਦੇ ਹਨ ਮੌਜੂਦਾ ਸੈੱਲ. ਕਿਰਪਾ ਕਰਕੇ ਨੋਟ ਕਰੋ ਕਿ k ਦੀ ਲੰਬਾਈ ਦਾ ਮਾਰਗ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਬਿਲਕੁਲ k ਸੈੱਲਾਂ (ਜ਼ਰੂਰੀ ਤੌਰ ਤੇ ਵੱਖਰੇ ਨਹੀਂ) ਦਾ ਦੌਰਾ ਕਰਨਾ. ਤੁਸੀਂ ਗਰਿੱਡ ਤੋਂ ਬਾਹਰ ਨਹੀਂ ਜਾ ਸਕਦੇ. ਇੱਕ ਮਾਰਗ A (ਲੰਬਾਈ k) ਨੂੰ ਇੱਕ ਮਾਰਗ B (ਲੰਬਾਈ k) ਤੋਂ ਘੱਟ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਜੇ A ਅਤੇ B (ਉਨ੍ਹਾਂ ਨੂੰ lA_st ਅਤੇ l_stB) ਕਹਿੰਦੇ ਹਨ) ਦੇ ਕ੍ਰਮਬੱਧ ਸੂਚੀਬੱਧ ਸੂਚੀਬੱਧ ਕਰਨ ਤੋਂ ਬਾਅਦ, l_stA_st ਲੈਕਸੀਵਿਕ ਤੌਰ ਤੇ l_stB_st ਤੋਂ ਘੱਟ ਹੈ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਗੁਆਂਢੇ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਗੁਆਂਢੇ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਕਿਰਪਾ ਕਰਕੇ ਨੋਟ ਕਰੋ ਕਿ k_ ਕਿਰਪਾ ਕਰਕੇ ਨੋਟ ਕਰੋ ਕਿ k ਦੀ ਲੰਬੱਧਕ ਲੰਬੱਧਕ ਲੰਬਾਈ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਤੁਸੀਂ ਬਿਲਕੁਲ k ਸੈੱਲਾਂ (ਨ) ਦੇ ਨਾਲ ਇੱਕ ਕਿਨ ਦਾ ਦੌਰਾ ਕੀਤਾ ਹੈ (ਲੋਡ ਤੋਂ ਬਿਲਕੁਲ k ਸੈੱਲਾਂ ਦੇ ਨਾਲ) (ਨ ਤੋਂ ਵੱਖਰੇ ਦਾ ਮਤਲਬ ਹੈ) (ਨ ਨਹੀਂ ਹੈ) (ਤੁਹਾਈ = k, k, k = k, k, k, k, k, k, k, k, k, k, k, k, k, j, j, j, j, j, j, j, j, j, j, j, j, j, k, k, k, k, k, k, [1, [1, [4, [1, [1, j, l\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ਹਰ ਕੋਈ ਫਿਬੋਨਾਚੀ ਕ੍ਰਮ ਨੂੰ ਜਾਣਦਾ ਹੈ, ਇਸ ਨੂੰ ਪਿਛਲੇ ਦੋ ਸਦੀਆਂ ਵਿੱਚ ਗਣਿਤ ਵਿਗਿਆਨੀਆਂ ਦੁਆਰਾ ਡੂੰਘਾਈ ਨਾਲ ਅਧਿਐਨ ਕੀਤਾ ਗਿਆ ਸੀ. ਹਾਲਾਂਕਿ, ਜੋ ਲੋਕ ਨਹੀਂ ਜਾਣਦੇ ਉਹ ਟ੍ਰਿਬੋਨੈਚੀ ਕ੍ਰਮ ਹੈ. ਟ੍ਰਿਬੋਨੈਚੀ ਕ੍ਰਮ ਦੀ ਪਰਿਭਾਸ਼ਾ ਦੁਹਰਾਓ ਦੁਆਰਾ ਕੀਤੀ ਗਈ ਹੈਃ tri(1) = 3 tri(n) = 1 + n / 2, ਜੇ n ਜੂੜ ਹੈ. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ਜੇ n ਅਜੀਬ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ਤੁਹਾਨੂੰ ਇੱਕ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤੁਹਾਨੂੰ ਟ੍ਰਿਬੋਨੈਚੀ ਕ੍ਰਮ ਦੇ ਪਹਿਲੇ n + 1 ਨੰਬਰ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਪਵੇਗੀ. ਉਦਾਹਰਣਃ tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਅਜੀਬ ਅੰਕ ਦੇ ਉਤਪਾਦ ਨੂੰ ਵਾਪਸ ਕਰੋ. 0 ਵਾਪਸ ਕਰੋ ਜੇ ਸਾਰੇ ਅੰਕ ਵੀ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ ਅੰਕ                                                                                                                                                                                                                                             \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇੰਪੁੱਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਸਿਰਫ ਵਰਗ ਬਰੈਕਟ ਹੁੰਦੇ ਹਨ. ਫੰਕਸ਼ਨ ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਜੇ ਬਰੈਕਟਾਂ ਦਾ ਇੱਕ ਵੈਧ ਉਪ-ਕ੍ਰਮ ਹੈ ਜਿੱਥੇ ਘੱਟੋ ਘੱਟ ਇੱਕ ਬਰੈਕਟ ਉਪ-ਕ੍ਰਮ ਵਿੱਚ ਘੁੰਮਿਆ ਹੋਇਆ ਹੈ. is_nested '[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]]') â -> True is_nested'[[]]]]]]]]]]'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ਤੁਹਾਨੂੰ ਨੰਬਰ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਤੁਹਾਨੂੰ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਵਿੱਚ ਵਰਗ ਨੰਬਰ ਦੇ ਜੋੜ ਨੂੰ ਵਾਪਸ ਕਰਨ ਦੀ ਲੋੜ ਹੈ, ਸੂਚੀ ਵਿੱਚ ਹਰੇਕ ਤੱਤ ਨੂੰ ਉਪਰਲੇ int ((Ceiling) ਤੇ ਪਹਿਲਾਂ ਗੋਲ ਕਰੋ. ਉਦਾਹਰਣਃ lst = [1,2,3] ਲਈ ਆਉਟਪੁੱਟ 14 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [1,4,9] ਲਈ ਆਉਟਪੁੱਟ 98 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [1,3,5,7] ਲਈ ਆਉਟਪੁੱਟ 84 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [1.4,4.2,0] ਲਈ ਆਉਟਪੁੱਟ 29 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [-2.4,1,1] ਲਈ ਆਉਟਪੁੱਟ 6 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਸਹੀ ਵਾਪਿਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਇੱਕ ਦਿੱਤੀ ਗਈ ਸਤਰ ਦਾ ਆਖਰੀ ਅੱਖਰ ਇੱਕ ਵਰਣਮਾਲਾ ਅੱਖਰ ਹੈ ਅਤੇ ਇੱਕ ਸ਼ਬਦ ਦਾ ਹਿੱਸਾ ਨਹੀਂ ਹੈ, ਅਤੇ ਹੋਰ ਗਲਤ ਹੈ। ਨੋਟਃ \"ਸ਼ਬਦ\" ਅੱਖਰਾਂ ਦਾ ਇੱਕ ਸਮੂਹ ਹੈ ਜੋ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤਾ ਗਿਆ ਹੈ। ਉਦਾਹਰਣਃ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ ((\"ਐਪਲ ਪਾਈ\") â -> ਗਲਤ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ ((\"ਐਪਲ ਪਾਈ ਈ\") â -> ਸੱਚਾ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ ((\"ਐਪਲ ਪਾਈ ਈ\") â -> ਗਲਤ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ\" ((\") â -> ਗਲਤ '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਕਿਸੇ ਐਲੀਮੈਂਟ ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਇੰਡੈਕਸ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ ਇਸ ਤੋਂ ਪਹਿਲਾਂ ਦੇ ਐਲੀਮੈਂਟ ਦੇ ਬਰਾਬਰ ਜਾਂ ਬਰਾਬਰ ਨਹੀਂ ਹੁੰਦਾ। ਜੇ ਅਜਿਹਾ ਕੋਈ ਐਲੀਮੈਂਟ ਮੌਜੂਦ ਨਹੀਂ ਹੈ ਤਾਂ ਵਾਪਸ ਕਰੋ -1. ਦਿੱਤੀ ਗਈ ਐਰੇ ਵਿੱਚ ਡੁਪਲਿਕੇਟ ਮੁੱਲ ਨਹੀਂ ਹੋਣਗੇ। ਉਦਾਹਰਣਃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਟੁਪਲ (ਏ, ਬੀ) ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿੱਥੇ 'ਏ' ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਹੈ, ਅਤੇ 'ਬੀ' ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਹੈ। ਜੇ ਕੋਈ ਨਕਾਰਾਤਮਕ ਜਾਂ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਨਹੀਂ ਹਨ, ਤਾਂ ਉਹਨਾਂ ਨੂੰ ਨਾਨ ਦੇ ਤੌਰ ਤੇ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ ਸਭ ਤੋਂ ਵੱਡਾ_ਸਭ ਤੋਂ ਛੋਟਾ_ਇੰਟੇਜਰ[2, 4, 1, 3, 5, 7]) == (ਕੋਈ ਨਹੀਂ, 1) ਸਭ ਤੋਂ ਵੱਡਾ_ਸਭ ਤੋਂ ਛੋਟਾ_ਇੰਟੇਜਰ[]) == (ਕੋਈ ਨਹੀਂ, ਕੋਈ ਨਹੀਂ) ਸਭ ਤੋਂ ਵੱਡਾ_ਸਭ ਤੋਂ ਛੋਟਾ_ਇੰਟੇਜਰ[0]) == (ਕੋਈ ਨਹੀਂ, ਕੋਈ ਨਹੀਂ) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਪੂਰਨ ਅੰਕ, ਫਲੋਟਸ, ਜਾਂ ਸਤਰਾਂ ਨੂੰ ਅਸਲ ਨੰਬਰਾਂ ਦੀ ਨੁਮਾਇੰਦਗੀ ਕਰਦਾ ਹੈ, ਅਤੇ ਇਸ ਦੇ ਦਿੱਤੇ ਗਏ ਪਰਿਵਰਤਨਸ਼ੀਲ ਕਿਸਮ ਵਿੱਚ ਵੱਡਾ ਪਰਿਵਰਤਨਸ਼ੀਲ ਵਾਪਸ ਕਰਦਾ ਹੈ। ਜੇ ਮੁੱਲ ਬਰਾਬਰ ਹੁੰਦੇ ਹਨ ਤਾਂ ਕੋਈ ਨਹੀਂ ਵਾਪਸ ਕਰਦਾ ਹੈ। ਨੋਟਃ ਜੇ ਇੱਕ ਅਸਲੀ ਨੰਬਰ ਨੂੰ ਸਤਰ ਦੇ ਤੌਰ ਤੇ ਦਰਸਾਇਆ ਜਾਂਦਾ ਹੈ, ਤਾਂ ਫਲੋਟਿੰਗ ਪੁਆਇੰਟ ਹੋ ਸਕਦਾ ਹੈ . ਜਾਂ , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> ਕੋਈ ਨਹੀਂ \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ਮੁਲਾਂਕਣ ਕਰੋ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸੰਖਿਆ n ਨੂੰ ਬਿਲਕੁਲ 4 ਸਕਾਰਾਤਮਕ ਜੋੜ ਸੰਖਿਆਵਾਂ ਦੇ ਜੋੜ ਦੇ ਰੂਪ ਵਿੱਚ ਲਿਖਿਆ ਜਾ ਸਕਦਾ ਹੈ ਉਦਾਹਰਣ is_equal_to_sum_even ((4) == False is_equal_to_sum_even ((6) == False is_equal_to_sum_even ((8) == True \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ਬ੍ਰਾਜ਼ੀਲੀਅਨ ਫੈਕਟੋਰੀਅਲ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤਾ ਗਿਆ ਹੈਃ ਬ੍ਰਾਜ਼ੀਲੀਅਨ_ਫੈਕਟੋਰੀਅਲ ((n) = n! * (n-1)! * (n-2)! * ... * 1! ਜਿੱਥੇ n > 0 ਉਦਾਹਰਣ ਲਈਃ >>> ਵਿਸ਼ੇਸ਼_ਫੈਕਟੋਰੀਅਲ ((4) 288 ਫੰਕਸ਼ਨ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਇੱਕ ਪੂਰਨ ਅੰਕ ਪ੍ਰਾਪਤ ਹੋਵੇਗਾ ਅਤੇ ਇਸ ਪੂਰਨ ਅੰਕ ਦਾ ਵਿਸ਼ੇਸ਼ ਫੈਕਟੋਰੀਅਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ਉਦਾਹਰਨ-3ਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਵਿੱਚ ਸਾਰੇ ਸਪੇਸ ਨੂੰ ਅੰਡਰਸਕੋਰ ਨਾਲ ਬਦਲੋ, ਅਤੇ ਜੇ ਇੱਕ ਸਤਰ ਵਿੱਚ 2 ਤੋਂ ਵੱਧ ਲਗਾਤਾਰ ਸਪੇਸ ਹਨ, ਤਾਂ ਸਾਰੇ ਲਗਾਤਾਰ ਸਪੇਸ ਨੂੰ - ਫਿਕਸ_ਸਪੇਸ ਨਾਲ ਬਦਲੋ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == \"ਉਦਾਹਰਣ\" ਫਿਕਸ_ ਉਦਾਹਰਣ\"\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਫਾਈਲ ਦੇ ਨਾਮ ਨੂੰ ਦਰਸਾਉਂਦੀ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ, ਅਤੇ 'ਹਾਂ' ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇ ਫਾਈਲ ਦਾ ਨਾਮ ਵੈਧ ਹੈ, ਅਤੇ 'ਨਹੀਂ' ਵਾਪਸ ਕਰਦਾ ਹੈ. ਇੱਕ ਫਾਈਲ ਦਾ ਨਾਮ ਵੈਧ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਤਾਂ ਹੀ ਜੇ ਫਾਈਲ ਦੇ ਨਾਮ ਵਿੱਚ ਹੇਠ ਲਿਖੀਆਂ ਸਾਰੀਆਂ ਸ਼ਰਤਾਂ ਪੂਰੀਆਂ ਹੁੰਦੀਆਂ ਹਨਃ - ਫਾਈਲ ਦੇ ਨਾਮ ਵਿੱਚ ਤਿੰਨ ਤੋਂ ਵੱਧ ਅੰਕ ('0'-'9') ਨਹੀਂ ਹੋਣੇ ਚਾਹੀਦੇ. - ਫਾਈਲ ਦੇ ਨਾਮ ਵਿੱਚ ਬਿਲਕੁਲ ਇੱਕ ਬਿੰਦੀ '.' ਸ਼ਾਮਲ ਹੈ. - ਬਿੰਦੀ ਤੋਂ ਪਹਿਲਾਂ ਸਬਸਟ੍ਰਿੰਗ ਖਾਲੀ ਨਹੀਂ ਹੋਣੀ ਚਾਹੀਦੀ, ਅਤੇ ਇਹ ਲਾਤੀਨੀ ਅੱਖਰ ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦੀ ਹੈ ('a'-'z' ਅਤੇ 'A'Z'). - ਬਿੰਦੀ ਤੋਂ ਬਾਅਦ ਸਬਸਟ੍ਰਿੰਗ ਇਹਨਾਂ ਵਿੱਚੋਂ ਇੱਕ ਹੋਣੀ ਚਾਹੀਦੀ ਹੈਃ ['txt', 'exe', 'll'] ਉਦਾਹਰਣਃ file_name_check\"(example.txt\") # => 'ਹਾਂ' file_name_check\"(example.dll1\") => 'ਨਹੀਂ' # (ਲਾਤੀਨੀ ਅੱਖਰ ਨਾਲ ਨਾਮ ਸ਼ੁਰੂ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ਇਹ ਫੰਕਸ਼ਨ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਲਵੇਗਾ। ਸੂਚੀ ਵਿਚਲੇ ਸਾਰੇ ਇੰਦਰਾਜ਼ਾਂ ਲਈ, ਫੰਕਸ਼ਨ ਪੂਰਨ ਅੰਕ ਇੰਦਰਾਜ਼ ਨੂੰ ਵਰਗ ਬਣਾਏਗਾ ਜੇ ਇਸ ਦਾ ਇੰਡੈਕਸ 3 ਦਾ ਗੁਣਾ ਹੈ ਅਤੇ ਪੂਰਨ ਅੰਕ ਇੰਦਰਾਜ਼ ਨੂੰ ਘਣ ਕਰੇਗਾ ਜੇ ਇਸ ਦਾ ਇੰਡੈਕਸ 4 ਦਾ ਗੁਣਾ ਹੈ ਅਤੇ 3 ਦਾ ਗੁਣਾ ਨਹੀਂ ਹੈ। ਫੰਕਸ਼ਨ ਸੂਚੀ ਵਿਚਲੀਆਂ ਇੰਦਰਾਜ਼ਾਂ ਨੂੰ ਨਹੀਂ ਬਦਲਦਾ ਜਿਸਦਾ ਇੰਡੈਕਸ 3 ਜਾਂ 4 ਦਾ ਗੁਣਾ ਨਹੀਂ ਹੈ। ਫੰਕਸ਼ਨ ਫਿਰ ਸਾਰੇ ਇੰਦਰਾਜ਼ਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰੇਗਾ। ਉਦਾਹਰਣਃ lst = [1,2,3] ਲਈ ਆਉਟਪੁੱਟ 6 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [] ਲਈ ਆਉਟਪੁੱਟ 0 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [-1,-5,2,-1,-5] ਲਈ ਆਉਟਪੁੱਟ -126 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਵਾਕ ਨੂੰ ਦਰਸਾਉਣ ਵਾਲੀ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ, ਵਾਕ ਵਿੱਚ ਕੁਝ ਸ਼ਬਦ ਹਨ ਜੋ ਇੱਕ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਗਏ ਹਨ, ਅਤੇ ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਪਵੇਗੀ ਜਿਸ ਵਿੱਚ ਮੂਲ ਵਾਕ ਦੇ ਸ਼ਬਦ ਹਨ, ਜਿਸ ਦੀ ਲੰਬਾਈ ਪ੍ਰਾਇਮ ਨੰਬਰ ਹਨ, ਨਵੀਂ ਸਤਰ ਵਿੱਚ ਸ਼ਬਦਾਂ ਦਾ ਕ੍ਰਮ ਮੂਲ ਦੇ ਸਮਾਨ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਨ 1: ਇਨਪੁਟਃ ਵਾਕ = \"ਇਹ ਇੱਕ ਟੈਸਟ ਹੈ\" ਆਉਟਪੁੱਟਃ \"ਹੈ\" ਉਦਾਹਰਨ 2: ਇਨਪੁਟਃ ਵਾਕ = \"ਸੁਆਇੰਗ ਲਈ ਜਾਣ ਦਿਓ\" ਆਉਟਪੁੱਟਃ \"ਜਾਓ\" ਪਾਬੰਦੀਆਂਃ * 1 <= len(sentence) <= 100 * ਵਾਕ ਵਿੱਚ ਸਿਰਫ ਅੱਖਰ ਹਨ \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ਤੁਹਾਡਾ ਕੰਮ ਇੱਕ ਫੰਕਸ਼ਨ ਨੂੰ ਲਾਗੂ ਕਰਨਾ ਹੈ ਜੋ ਐਕਸਪ੍ਰੈਸ x * n ਨੂੰ ਸਰਲ ਬਣਾਏਗਾ. ਫੰਕਸ਼ਨ ਵਾਪਸ ਆਉਂਦੀ ਹੈ ਜੇ x * n ਇੱਕ ਪੂਰਨ ਸੰਖਿਆ ਅਤੇ ਝੂਠੀ ਮੁਲਾਂਕਣ ਕਰਦਾ ਹੈ. x ਅਤੇ n, ਇੱਕ ਭੰਡਾਰ ਦੀ ਸਤਰ ਪ੍ਰਤੀਨਿਧਤਾ ਹਨ, ਅਤੇ ਹੇਠ ਲਿਖੇ ਫਾਰਮੈਟ ਹਨ, <numerator>/<denominator> ਜਿੱਥੇ ਦੋਵੇਂ ਨੰਬਰ ਅਤੇ ਡੋਮੇਨਟਰ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਸੰਖਿਆਵਾਂ ਹਨ. ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ x, ਅਤੇ n ਵੈਧ ਭੰਡਾਰ ਹਨ, ਅਤੇ ਡੋਮੇਨਟਰ ਦੇ ਤੌਰ ਤੇ ਜ਼ੀਰੋ ਨਹੀਂ ਹੈ. ਸਰਲ ਬਣਾਓ (((\"1/5\", \"5/1\") = ਸੱਚ ਹੈ (ਸਧਾਰਨ ਬਣਾਓ\"1/6\", \"2/1\") = ਝੂਠੀ (ਸਧਾਰਨ ਬਣਾਓ) (((\"7/10\", \"10/2\") = ਝੂਠੀ \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਪੂਰਨ ਅੰਕ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਨੂੰ ਉਨ੍ਹਾਂ ਦੇ ਅੰਕ ਦੇ ਜੋੜ ਦੇ ਅਨੁਸਾਰ ਵੱਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰਦਾ ਹੈ। ਨੋਟਃ ਜੇ ਉਨ੍ਹਾਂ ਦੇ ਅੰਕ ਦੇ ਸਮਾਨ ਜੋੜ ਦੇ ਨਾਲ ਕਈ ਆਈਟਮਾਂ ਹਨ, ਤਾਂ ਉਹਨਾਂ ਨੂੰ ਅਸਲ ਸੂਚੀ ਵਿੱਚ ਉਹਨਾਂ ਦੇ ਇੰਡੈਕਸ ਦੇ ਅਧਾਰ ਤੇ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਉਦਾਹਰਣ ਲਈਃ >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਨੰਬਰਾਂ ਦੀ ਇੱਕ ਐਰੇ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਐਰੇ ਵਿੱਚ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ 10 ਤੋਂ ਵੱਧ ਹੈ ਅਤੇ ਇੱਕ ਨੰਬਰ ਦੇ ਪਹਿਲੇ ਅਤੇ ਆਖਰੀ ਅੰਕ ਦੋਵੇਂ ਅਜੀਬ ਹਨ (1, 3, 5, 7, 9). ਉਦਾਹਰਣ ਲਈਃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ. ਤੁਹਾਨੂੰ ਲੰਬਾਈ n ਦੀ ਇੱਕ ਪੂਰਨ ਅੰਕ ਐਰੇ ਬਣਾਉਣਾ ਹੈ. ਹਰ i (1 â ‰¤ i â ‰¤ n) ਲਈ, a[i] = i * i - i + 1 ਦਾ ਮੁੱਲ. a ਦੇ ਟ੍ਰਿਪਲਜ਼ (a[i], a[j], a[k]) ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ ਜਿੱਥੇ i < j < k, ਅਤੇ a[i] + a[j] + a[k] 3 ਦਾ ਗੁਣਾ ਹੈ. ਉਦਾਹਰਨਃ ਇਨਪੁਟਃ n = 5 ਆਉਟਪੁੱਟਃ 1 ਵਿਆਖਿਆਃ a = [1, 3, 7, 13, 21] ਸਿਰਫ ਯੋਗ ਟ੍ਰਿਪਲ (1, 7, 13) ਹੈ.\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ਸਾਡੇ ਸੂਰਜੀ ਪ੍ਰਣਾਲੀ ਵਿੱਚ ਅੱਠ ਗ੍ਰਹਿ ਹਨਃ ਸੂਰਜ ਦੇ ਸਭ ਤੋਂ ਨੇੜੇ ਮਰਕੁਰੀ ਹੈ, ਅਗਲਾ ਸ਼ੁੱਕਰ ਹੈ, ਫਿਰ ਧਰਤੀ, ਮੰਗਲ, ਜੁਪੀਟਰ, ਸ਼ਨੀ, ਯੂਰੇਨਸ, ਨੈਪਚੂਨ ਹੈ। ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਦੋ ਗ੍ਰਹਿ ਨਾਮਾਂ ਨੂੰ ਸਤਰਾਂ ਦੇ ਰੂਪ ਵਿੱਚ ਲੈਂਦਾ ਹੈ ਗ੍ਰਹਿ1 ਅਤੇ ਗ੍ਰਹਿ2. ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਉਹ ਸਾਰੇ ਗ੍ਰਹਿ ਹੁੰਦੇ ਹਨ ਜਿਨ੍ਹਾਂ ਦੀਆਂ ਗੋਲੀਆਂ ਗ੍ਰਹਿ1 ਦੇ ਚੱਕਰ ਅਤੇ ਗ੍ਰਹਿ2 ਦੇ ਚੱਕਰ ਦੇ ਵਿਚਕਾਰ ਸਥਿਤ ਹੁੰਦੀਆਂ ਹਨ, ਸੂਰਜ ਦੀ ਨੇੜਤਾ ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ ਕੀਤੀਆਂ ਜਾਂਦੀਆਂ ਹਨ। ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਖਾਲੀ ਟੁਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇ ਗ੍ਰਹਿ1 ਜਾਂ ਗ੍ਰਹਿ2 ਸਹੀ ਗ੍ਰਹਿ ਨਾਮ ਨਹੀਂ ਹਨ. ਉਦਾਹਰਣ bf \"(ਜੁਪੀਟਰ\", \"ਨੈਪਚੂਨ\") ==> (\"ਸ਼ਨੀ\", \"ਯੂਰਨਸ\") bf \"(\" ਧਰਤੀ\", \"ਮਰਕੁਰੀ\") ==> (\"ਸ਼ੁੱਕਰ\", \"ਧਰਤੀ\", \"ਮਾਰਕ\", \"ਸ਼ਨੀ\", \"ਸ਼ਨੀ\", \"ਸ਼ਨੀ\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਨੂੰ ਇੱਕ ਪੈਰਾਮੀਟਰ ਦੇ ਤੌਰ ਤੇ ਸਵੀਕਾਰ ਕਰਦਾ ਹੈ, ਸਤਰਾਂ ਨੂੰ ਹਟਾ ਦਿੰਦਾ ਹੈ ਜਿਸਦੀ ਅਣਗਿਣਤ ਲੰਬਾਈ ਹੈ, ਅਤੇ ਨਤੀਜਾ ਸੂਚੀ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕ੍ਰਮ ਨਾਲ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਸੂਚੀ ਹਮੇਸ਼ਾਂ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਹੁੰਦੀ ਹੈ ਅਤੇ ਕਦੇ ਵੀ ਸੰਖਿਆਵਾਂ ਦੀ ਐਰੇ ਨਹੀਂ ਹੁੰਦੀ, ਅਤੇ ਇਸ ਵਿੱਚ ਡੁਪਲਿਕੇਟ ਸ਼ਾਮਲ ਹੋ ਸਕਦੇ ਹਨ. ਸੂਚੀ ਦਾ ਕ੍ਰਮ ਹਰੇਕ ਸ਼ਬਦ ਦੀ ਲੰਬਾਈ ਦੁਆਰਾ ਵਧਣਾ ਚਾਹੀਦਾ ਹੈ, ਅਤੇ ਤੁਹਾਨੂੰ ਉਸ ਨਿਯਮ ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਜੇ ਦੋ ਸ਼ਬਦਾਂ ਦੀ ਲੰਬਾਈ ਇਕੋ ਜਿਹੀ ਹੈ, ਤਾਂ ਸੂਚੀ ਨੂੰ ਵਰਣਮਾਲਾ ਅਨੁਸਾਰ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਫੰਕਸ਼ਨ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕ੍ਰਮ ਵਿੱਚ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਸਾਰੇ ਸ਼ਬਦਾਂ ਦੀ ਲੰਬਾਈ ਇਕੋ ਜਿਹੀ ਹੋਵੇਗੀ. ਉਦਾਹਰਣ ਲਈਃ assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd\")\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"ਇੱਕ ਸਧਾਰਨ ਪ੍ਰੋਗਰਾਮ ਜਿਸ ਨੂੰ x ਦਾ ਮੁੱਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇਕਰ n ਇੱਕ ਪ੍ਰਾਇਮਰੀ ਨੰਬਰ ਹੈ ਅਤੇ y ਦਾ ਮੁੱਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣਃ x_or_y ਲਈ {7, 34, 12) == 34 x_or_y ਲਈ {15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਸੂਚੀ ਵਿੱਚ ਨੰਬਰਾਂ ਦੇ ਵਰਗ ਦੇ ਜੋੜ ਨੂੰ ਵਾਪਸ ਕਰੋ ਜੋ ਅਜੀਬ ਹਨ. ਨਕਾਰਾਤਮਕ ਨੰਬਰਾਂ ਨੂੰ ਨਜ਼ਰਅੰਦਾਜ਼ ਕਰੋ ਜਾਂ ਪੂਰਨ ਅੰਕ ਨਹੀਂ ਹਨ. ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([-1, -2, 0]) == 0 ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([9, -2]) == 81 ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([0]) == 0 ਜੇ ਇੰਪੁੱਟ ਸੂਚੀ ਖਾਲੀ ਹੈ, 0 ਵਾਪਸ ਕਰੋ '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ਮੈਨੂੰ ਲਗਦਾ ਹੈ ਕਿ ਅਸੀਂ ਸਾਰੇ ਉਸ ਭਾਵਨਾ ਨੂੰ ਯਾਦ ਕਰਦੇ ਹਾਂ ਜਦੋਂ ਕਿਸੇ ਲੰਬੇ ਸਮੇਂ ਤੋਂ ਉਡੀਕ ਕੀਤੀ ਗਈ ਘਟਨਾ ਦਾ ਨਤੀਜਾ ਅੰਤ ਵਿੱਚ ਜਾਣਿਆ ਜਾਂਦਾ ਹੈ. ਉਸ ਪਲ ਦੀਆਂ ਭਾਵਨਾਵਾਂ ਅਤੇ ਵਿਚਾਰਾਂ ਨੂੰ ਨਿਸ਼ਚਤ ਤੌਰ ਤੇ ਨੋਟ ਕਰਨਾ ਅਤੇ ਤੁਲਨਾ ਕਰਨਾ ਮਹੱਤਵਪੂਰਣ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਕਿਸੇ ਵਿਅਕਤੀ ਨੇ ਕਈ ਮੈਚਾਂ ਦੇ ਨਤੀਜਿਆਂ ਦਾ ਸਹੀ ਅੰਦਾਜ਼ਾ ਲਗਾਇਆ ਹੈ. ਤੁਹਾਨੂੰ ਸਕੋਰਾਂ ਅਤੇ ਅੰਦਾਜ਼ਿਆਂ ਦੀਆਂ ਦੋ ਐਰੇ ਦਿੱਤੀਆਂ ਜਾਂਦੀਆਂ ਹਨ, ਜਿੱਥੇ ਹਰ ਇੰਡੈਕਸ ਇਕ ਮੈਚ ਦਰਸਾਉਂਦਾ ਹੈ. ਉਸੇ ਲੰਬਾਈ ਦੀ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰੋ ਜੋ ਦਰਸਾਉਂਦੀ ਹੈ ਕਿ ਹਰੇਕ ਅੰਦਾਜ਼ਾ ਕਿੰਨਾ ਦੂਰ ਸੀ. ਜੇ ਉਨ੍ਹਾਂ ਨੇ ਸਹੀ ਅੰਦਾਜ਼ਾ ਲਗਾਇਆ ਹੈ, ਤਾਂ ਮੁੱਲ 0 ਹੈ, ਅਤੇ ਜੇ ਨਹੀਂ, ਤਾਂ ਮੁੱਲ ਅੰਦਾਜ਼ਾ ਅਤੇ ਸਕੋਰ ਦੇ ਵਿਚਕਾਰ ਪੂਰਨ ਅੰਤਰ ਹੈ. ਉਦਾਹਰਣਃ (([1,2,3,4,5,1], [1,2,3,4,2,]) -> [0,0,0,0,3,3] ਤੁਲਨਾ ਕਰੋ (([0,5,0,0,4], [4,1,0,1,0,6]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਕਲਾਸ ਦਾ ਨਾਮ (ਇੱਕ ਸਤਰ) ਅਤੇ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਜਾਵੇਗੀ। ਐਕਸਟੈਂਸ਼ਨਾਂ ਨੂੰ ਕਲਾਸ ਵਿੱਚ ਵਾਧੂ ਕਲਾਸਾਂ ਲੋਡ ਕਰਨ ਲਈ ਵਰਤਿਆ ਜਾਣਾ ਹੈ। ਐਕਸਟੈਂਸ਼ਨ ਦੀ ਤਾਕਤ ਇਸ ਪ੍ਰਕਾਰ ਹੈਃ CAP ਨੂੰ ਐਕਸਟੈਂਸ਼ਨ ਦੇ ਨਾਮ ਵਿੱਚ ਵੱਡੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੋਣ ਦਿਓ, ਅਤੇ SM ਨੂੰ ਐਕਸਟੈਂਸ਼ਨ ਦੇ ਨਾਮ ਵਿੱਚ ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੋਣ ਦਿਓ, ਤਾਕਤ CAP - SM ਦ੍ਰਿੜ੍ਹਤਾ ਦੁਆਰਾ ਦਿੱਤੀ ਗਈ ਹੈ। ਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਮਜ਼ਬੂਤ ਐਕਸਟੈਂਸ਼ਨ ਲੱਭਣੀ ਚਾਹੀਦੀ ਹੈ ਅਤੇ ਇਸ ਫਾਰਮੈਟ ਵਿੱਚ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈਃ ClassName.StrongestExtensionName. ਜੇ ਦੋ ਜਾਂ ਵੱਧ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਤਾਕਤ ਇਕੋ ਜਿਹੀ ਹੈ, ਤਾਂ ਤੁਹਾਨੂੰ ਸੂਚੀ ਵਿੱਚ ਪਹਿਲਾਂ ਆਉਣ ਵਾਲੀ ਇੱਕ ਦੀ ਚੋਣ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। ਉਦਾਹਰਣ ਲਈ, ਜੇ ਤੁਹਾਨੂੰ ਕਲਾਸ ਅਤੇ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਸੂਚੀ ਦੇ ਤੌਰ ਤੇ \"ਸਲਾਇਸ\" ਦਿੱਤਾ ਗਿਆ ਹੈਃ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ਤਾਂ ਤੁਹਾਨੂੰ 'Slices.SEviSliNGCes' ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਕਿਉਂਕਿ 'SviSliNGCes' ਵਿੱਚ ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈ, ਤਾਂ ਤਾਕਤ CAP - SM ਦੇ ਦ੍ਰਿਅੰਕਸ਼ਨ ਦੁਆਰਾ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। ਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਮਜ਼ਬੂਤ ਐਕਸਟੈਂਸ਼ਨ ਲੱਭਣਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ ਇਸ ਫਾਰਮੈਟ ਵਿੱਚ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈਃ ClassName.StrongestExtensionName.StrongestExtensionName = 'StrongestExtensionName' (ਮਾਤਰ) । ਉਦਾਹਰਣ ਲਈ, ਜੇ ਤੁਹਾਨੂੰ ਦੋ ਜਾਂ ਵੱਧ ਐਕਸਟੈਂਸ਼ਨ ਦੇ ਤੌਰ ਤੇ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤਾਂ ਤੁਹਾਨੂੰ \"Slices\" ਦੇ ਤੌਰ ਤੇ \"Slices\" ਦੀ ਸੂਚੀ ਦੇ ਰੂਪ ਵਿੱਚ ਪਹਿਲਾ ਨੰਬਰ ਦਿੱਤਾ ਜਾਵੇਗਾ।\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ਤੁਹਾਨੂੰ 2 ਸ਼ਬਦ ਦਿੱਤੇ ਗਏ ਹਨ. ਤੁਹਾਨੂੰ True ਵਾਪਸ ਕਰਨ ਦੀ ਲੋੜ ਹੈ ਜੇ ਦੂਜਾ ਸ਼ਬਦ ਜਾਂ ਇਸਦੇ ਕਿਸੇ ਵੀ ਘੁੰਮਣ ਪਹਿਲੇ ਸ਼ਬਦ ਵਿੱਚ ਇੱਕ ਸਬਸਟ੍ਰਿੰਗ ਹੈ cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ਇੱਕ ਪੂਰਨ ਅੰਕ ਦਿੱਤਾ ਗਿਆ ਹੈ. ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਕ੍ਰਮਵਾਰ ਵੀ ਅਤੇ ਅਜੀਬ ਅੰਕ ਦੀ ਗਿਣਤੀ ਹੈ. ਉਦਾਹਰਨਃ ਵੀ_ਓਡ_ਕਾਉਂਟ ((-12) ==> (1, 1) ਵੀ_ਓਡ_ਕਾਉਂਟ ((123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਦੇ ਰੋਮਨ ਅੰਕਾਂ ਦੇ ਬਰਾਬਰ ਨੂੰ ਇੱਕ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਪ੍ਰਾਪਤ ਕਰੋ, ਅਤੇ ਇਸਨੂੰ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। ਪਾਬੰਦੀਆਂਃ 1 <= num <= 1000 ਉਦਾਹਰਣਃ >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ਇੱਕ ਤਿਕੋਣ ਦੇ ਤਿੰਨ ਪਾਸਿਆਂ ਦੀ ਲੰਬਾਈ ਦਿੱਤੀ ਗਈ ਹੈ. ਵਾਪਸੀ ਸਹੀ ਹੈ ਜੇ ਤਿੰਨ ਪਾਸਿਆਂ ਨੂੰ ਇੱਕ ਸਹੀ ਕੋਣ ਵਾਲਾ ਤਿਕੋਣ ਬਣਾਉਂਦਾ ਹੈ, ਨਹੀਂ ਤਾਂ ਗਲਤ ਹੈ. ਇੱਕ ਸਹੀ ਕੋਣ ਵਾਲਾ ਤਿਕੋਣ ਇੱਕ ਤਿਕੋਣ ਹੈ ਜਿਸ ਵਿੱਚ ਇੱਕ ਕੋਣ ਸਹੀ ਕੋਣ ਜਾਂ 90 ਡਿਗਰੀ ਹੈ. ਉਦਾਹਰਨਃ right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == ਗਲਤ '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਨੂੰ ਸਵੀਕਾਰ ਕਰਦਾ ਹੈ। ਸੂਚੀ ਵਿੱਚ ਵੱਖਰੇ ਸ਼ਬਦ ਹਨ। ਵੱਧ ਤੋਂ ਵੱਧ ਵਿਲੱਖਣ ਅੱਖਰਾਂ ਦੇ ਨਾਲ ਸ਼ਬਦ ਵਾਪਸ ਕਰੋ। ਜੇ ਮਲਟੀਪਲ ਸਤਰਾਂ ਵਿੱਚ ਵੱਧ ਤੋਂ ਵੱਧ ਵਿਲੱਖਣ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈ, ਤਾਂ ਉਹ ਸ਼ਬਦ ਵਾਪਸ ਕਰੋ ਜੋ ਸ਼ਬਦਕੋਸ਼ਿਕ ਕ੍ਰਮ ਵਿੱਚ ਪਹਿਲਾਂ ਆਉਂਦਾ ਹੈ. find_max (([\"ਨਾਮ\", \"ਦੇ\", \"ਸਤਰ\"]) == \"ਸਤਰ\" find_max (([\"ਨਾਮ\", \"enam\", \"ਖੇਡ\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ਤੁਸੀਂ ਭੁੱਖੇ ਖਰਗੋਸ਼ ਹੋ, ਅਤੇ ਤੁਸੀਂ ਪਹਿਲਾਂ ਹੀ ਕੁਝ ਗਾਜਰ ਖਾ ਚੁੱਕੇ ਹੋ, ਪਰ ਹੁਣ ਤੁਹਾਨੂੰ ਦਿਨ ਦੇ ਖਾਣੇ ਨੂੰ ਪੂਰਾ ਕਰਨ ਲਈ ਹੋਰ ਗਾਜਰ ਖਾਣ ਦੀ ਜ਼ਰੂਰਤ ਹੈ. ਤੁਹਾਨੂੰ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ [ਤੁਹਾਡੇ ਖਾਣੇ ਤੋਂ ਬਾਅਦ ਖਾਧੇ ਗਏ ਗਾਜਰਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ, ਤੁਹਾਡੇ ਖਾਣੇ ਤੋਂ ਬਾਅਦ ਗਾਜਰ ਦੀ ਗਿਣਤੀ ] ਜੇ ਤੁਹਾਡੇ ਕੋਲ ਕਾਫ਼ੀ ਬਾਕੀ ਗਾਜਰ ਨਹੀਂ ਹਨ, ਤਾਂ ਤੁਸੀਂ ਬਾਕੀ ਸਾਰੇ ਗਾਜਰ ਖਾਓਗੇ, ਪਰ ਫਿਰ ਵੀ ਭੁੱਖੇ ਹੋਵੋਗੇ. ਉਦਾਹਰਣਃ * ਖਾਓ ((5, 6, 10) -> [11, 4] * ਖਾਓ ((4, 8, 9) -> [12, 1] * ਖਾਓ ((1, 10, 10) -> [11, 0] * ਖਾਓ ((2, 11, 5) -> [7, 0] ਵੇਰੀਏਬਲਃ @ ਨੰਬਰਃ ਤੁਹਾਡੇ ਦੁਆਰਾ ਖਾਧੇ ਗਏ ਗਾਜਰਾਂ ਦੀ ਪੂਰਨ ਗਿਣਤੀ. @ ਲੋੜਃ ਗਾਜਰਾਂ ਦੀ ਪੂਰਨ ਗਿਣਤੀ ਜੋ ਤੁਹਾਨੂੰ ਖਾਣ ਦੀ ਜ਼ਰੂਰਤ ਹੈ. @ ਬਾਕੀਃ ਸਟਾਕ ਵਿਚ ਬਾਕੀ ਗਾਜਰਾਂ ਦੀ ਪੂਰਨ ਗਿਣਤੀ. ਕੰਟਰੈਕਟਃ * 0 = <= 0 * 1000 = <= 1000 * 0 = <= 1000 ਬਾਕੀ ਰਹਿਣਾ = <= 1000 = ਮਜ਼ੇਦਾਰ ਹੈ = 1000:\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ਦੋ ਸੂਚੀਆਂ ਆਪਰੇਟਰ ਅਤੇ ਓਪਰੇਂਡ. ਪਹਿਲੀ ਸੂਚੀ ਵਿੱਚ ਬੁਨਿਆਦੀ ਅਲਜਬਰਾ ਓਪਰੇਸ਼ਨ ਹਨ, ਅਤੇ ਦੂਜੀ ਸੂਚੀ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਹੈ. ਅਲਜਬਰਾ ਸਮੀਕਰਨ ਬਣਾਉਣ ਲਈ ਦੋ ਦਿੱਤੀਆਂ ਸੂਚੀਆਂ ਦੀ ਵਰਤੋਂ ਕਰੋ ਅਤੇ ਇਸ ਸਮੀਕਰਨ ਦਾ ਮੁਲਾਂਕਣ ਵਾਪਸ ਕਰੋ. ਬੁਨਿਆਦੀ ਅਲਜਬਰਾ ਓਪਰੇਸ਼ਨਃ ਜੋੜ (+) ਘਟਾਓ ( - ) ਗੁਣਾ ( *) ਫਲੋਰ ਡਿਵੀਜ਼ਨ ( //) ਐਕਸਪੋਨੈਂਸ਼ਨ ( ** ਉਦਾਹਰਨ): ਆਪਰੇਟਰ['+', '*', '-'] ਐਰੇ = [2, 3, 4, 5] ਨਤੀਜਾ = 2 + 3 * 4 - 5 => ਨਤੀਜਾ = 9 ਨੋਟਃ ਆਪਰੇਟਰ ਦੀ ਸੂਚੀ ਦੀ ਲੰਬਾਈ ਓਪਰੇਂਡ ਸੂਚੀ ਦੀ ਲੰਬਾਈ ਦੇ ਬਰਾਬਰ ਹੈ ਘਟਾਓ ਇੱਕ. ਓਪਰੇਂਡ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਹੈ. ਆਪਰੇਟਰ ਦੀ ਸੂਚੀ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਇੱਕ ਆਪਰੇਟਰ ਹੈ, ਅਤੇ ਓਪਰੇਂਡ ਸੂਚੀ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਦੋ ਓਪਰੇਂਡ ਹਨ. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਗਈ ਹੈ. ਜੇ s[i] ਇੱਕ ਅੱਖਰ ਹੈ, ਤਾਂ ਇਸਦੇ ਕੇਸ ਨੂੰ ਹੇਠਲੇ ਤੋਂ ਉੱਪਰ ਜਾਂ ਉਪਰ ਵੱਲ ਉਲਟਾ ਕਰੋ, ਨਹੀਂ ਤਾਂ ਇਸ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਹੀ ਰੱਖੋ. ਜੇ ਸਤਰ ਵਿੱਚ ਕੋਈ ਅੱਖਰ ਨਹੀਂ ਹਨ, ਤਾਂ ਸਤਰ ਨੂੰ ਉਲਟਾ ਦਿਓ. ਫੰਕਸ਼ਨ ਨੂੰ ਨਤੀਜੇ ਵਾਲੀ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਉਦਾਹਰਣ ਹੱਲ ਕਰੋ ((\"1234\") = \"4321\" ਹੱਲ ਕਰੋ ((\"ab\") = \"AB\" ਹੱਲ ਕਰੋ ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"ਇੱਕ ਸਤਰ 'text' ਦਿੱਤੀ ਗਈ ਹੈ, ਤਾਂ ਇਸਦੀ md5 ਹੈਸ਼ ਸਮਾਨ ਸਤਰ ਵਾਪਸ ਕਰੋ। ਜੇਕਰ 'text' ਇੱਕ ਖਾਲੀ ਸਤਰ ਹੈ, ਤਾਂ None ਵਾਪਸ ਕਰੋ। >>> string_to_md5('ਹੈਲੋ ਵਰਲਡ') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "pan_Guru",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ਦੋ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ a ਅਤੇ b ਦਿੱਤੇ ਗਏ ਹਨ, a ਅਤੇ b ਦੇ ਵਿਚਕਾਰ ਵੀ ਅੰਕ ਵਾਪਸ ਕਰੋ, ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ. ਉਦਾਹਰਣ ਲਈਃ generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]