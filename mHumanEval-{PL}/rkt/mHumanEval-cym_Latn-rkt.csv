task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,cym_Latn,rkt,"#lang racket

;;trothwy. ;;Gwiriwch a oes unrhyw ddau rif yn agosach at ei gilydd na ;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)
;; #f
;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)
;; #t
(define (has_close_elements numbers threshold)
","#lang racket

(define (has_close_elements numbers threshold)
  (define (pair-closer-than-threshold? pair)
    (< (abs (- (first pair) (second pair))) threshold))
  (define sorted-numbers (sort numbers <))
  (ormap pair-closer-than-threshold? (map list sorted-numbers (rest sorted-numbers))))

;; Example usage:
;; (has_close_elements (list 1.0 2.0 3.0) 0.5) ; #f
;; (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3) ; #t","(require rackunit)

(define (test-humaneval) 

  (let (( candidate has_close_elements))
    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)
    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)
    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)
    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)
    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)
    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)
    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)
))

(test-humaneval)"
HumanEval_1,cym_Latn,rkt,"#lang racket

;;Anwybyddu unrhyw leoliadau yn y llinell mewnbwn.;;Mae grwpiau ar wahân yn cydbwys (mae pob braced agored wedi'i chau'n briodol) ac nid ydynt wedi'u nythru o fewn ei gilydd.;;gwahanu'r grŵp hynny i mewn i gyfres o gyfresiau a dychwelyd y rhestr o'r rhai hynny. ;;Mae mewnbwn i'r swyddogaeth hon yn llinyn sy'n cynnwys nifer o grwpiau o ffraincynnau wedi'u rhestredig. Eich nod yw i ;; >>> (separate_paren_groups ""( ) (( )) (( )( ))"")
;; (list ""()"" ""(())"" ""(()())"")
(define (separate_paren_groups paren_string)
","#lang racket

(define (separate_paren_groups paren_string)
  (define cleaned-str (string-replace paren_string "" "" """"))
  (define (separate-helper str level acc result)
    (cond
      [(string-empty? str)
       (if (= level 0)
           (reverse result)
           (error ""Unbalanced parentheses""))]
      [(char=? (string-ref str 0) #\()
       (if (= level 0)
           (separate-helper (string-drop str 1) (add1 level) """" result)
           (separate-helper (string-drop str 1) (add1 level) (string-append acc ""("") result))]
      [(char=? (string-ref str 0) #\))
       (let ([new-level (sub1 level)])
         (if (= new-level 0)
             (separate-helper (string-drop str 1) new-level """" (cons (string-append acc "")"") result))
             (separate-helper (string-drop str 1) new-level (string-append acc "")"") result)))]
      [else (separate-helper (string-drop str 1) level acc result)]))
  (separate-helper cleaned-str 0 """" '()))

;; Testing the function
;(separate_paren_groups ""( ) (( )) (( )( ))"") ; should return (list ""()"" ""(())"" ""(()())"")","(require rackunit)

(define (test-humaneval) 

  (let (( candidate separate_paren_groups))
    (check-within (candidate ""(()()) ((())) () ((())()())"") (list ""(()())"" ""((()))"" ""()"" ""((())()())"") 0.001)
    (check-within (candidate ""() (()) ((())) (((())))"") (list ""()"" ""(())"" ""((()))"" ""(((())))"") 0.001)
    (check-within (candidate ""(()(())((())))"") (list ""(()(())((())))"") 0.001)
    (check-within (candidate ""( ) (( )) (( )( ))"") (list ""()"" ""(())"" ""(()())"") 0.001)
))

(test-humaneval)"
HumanEval_2,cym_Latn,rkt,"#lang racket

;;Dychwelyd rhan ddegol y rhif. ;;(rhan weddill bob amser yn llai na 1).;;a rhan rhif cyfan (rhif cyfan fwyaf sy'n llai na rhif penodol) a deciwmellau ;;Gan fod rhif pwynt symudol yn bositif, gellir ei ddadlennu i mewn i ;; >>> (truncate_number 3.5)
;; 0.5
(define (truncate_number number)
","(define (truncate_number number)
  (- number (floor number)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate truncate_number))
    (check-within (candidate 3.5) 0.5 0.001)
    (check-within (candidate 1.25) 0.25 0.001)
    (check-within (candidate 123.0) 0.0 0.001)
))

(test-humaneval)"
HumanEval_3,cym_Latn,rkt,"#lang racket

;;ar y pwynt hwnnw dylai swyddogaeth ddychwelyd #t. Fel arall dylai ddychwelyd #f. ;;eich tasg yw canfod os yw'r balans cyfrif yn gostwng o dan sero ar unrhyw adeg, ac ;;Rydych yn cael rhestr o weithrediadau blaendal a thynnu allan ar gyfrif banc sy'n dechrau gyda ;; >>> (below_zero (list 1 2 3))
;; #f
;; >>> (below_zero (list 1 2 -4 5))
;; #t
(define (below_zero operations)
","#lang racket

(define (below_zero operations)
  (let loop ([ops operations] [balance 0])
    (cond
      [(empty? ops) #f]
      [((< balance 0)) #t]
      [else (loop (rest ops) (+ balance (first ops)))])))

;; Test cases
(below_zero (list 1 2 3))      ; #f
(below_zero (list 1 2 -4 5))   ; #t","(require rackunit)

(define (test-humaneval) 

  (let (( candidate below_zero))
    (check-within (candidate (list )) #f 0.001)
    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)
    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)
    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)
    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)
    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)
))

(test-humaneval)"
HumanEval_4,cym_Latn,rkt,"#lang racket

;;MAD = cyfartaledd. x - x_mean. ;;elfen a phwynt canol (mean yn yr achos hwn): ;;Mae'r Diffyg Absolwth Cyffredin yn y gwahaniaeth absolut cyfartalog rhwng pob un o'r ddau .;;tua chyfartaledd y set ddata hwn. ;;Ar gyfer rhestr benodol o rifau mewnbwn, cyfrifo'r Cyfyngder Absoliwt Canolradd ;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
","#lang racket

(define (mean numbers)
  (/ (apply + numbers) (length numbers)))

(define (mean_absolute_deviation numbers)
  (let* ((x_mean (mean numbers))
         (deviations (map (lambda (x) (abs (- x x_mean))) numbers)))
    (/ (apply + deviations) (length deviations))))

;; Example usage:
;; (mean_absolute_deviation (list 1.0 2.0 3.0 4.0)) ; => 1.0","(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)
    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)
    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)
))

(test-humaneval)"
HumanEval_5,cym_Latn,rkt,"#lang racket

;;Ychwanegwch rhif ""delimedydd"" rhwng pob dau elfen olynol o restr mewnbwn `rhifau' ;; >>> (intersperse (list ) 4)
;; (list )
;; >>> (intersperse (list 1 2 3) 4)
;; (list 1 4 2 4 3)
(define (intersperse numbers delimeter)
","#lang racket

(define (intersperse numbers delimiter)
  (if (null? numbers)
      numbers
      (let loop ((lst (cdr numbers)) (result (list (car numbers))))
        (if (null? lst)
            (reverse result)
            (loop (cdr lst) (cons (car lst) (cons delimiter result)))))))

;; Examples
(intersperse (list) 4)        ; => (list)
(intersperse (list 1 2 3) 4)  ; => (list 1 4 2 4 3)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate intersperse))
    (check-within (candidate (list ) 7) (list ) 0.001)
    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)
    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)
))

(test-humaneval)"
HumanEval_6,cym_Latn,rkt,"#lang racket

;;Er enghraifft, mae gan (() (()) uchafswm o ddwy lefel o nesgwrn tra bod gan ((())) dri. ;;Ar gyfer pob un o'r grŵp, ewch â'r lefel dwfn o'r ymgynnwys o'r parentesi. ;;Mae mewnbwn i'r swyddogaeth hon yn llinyn sy'n cynrychioli sawl grŵp ar gyfer parenthesis wedi'u rhestredig wedi'u gwahanu gan ofod.;; >>> (parse_nested_parens ""(()()) ((())) () ((())()())"")
;; (list 2 3 1 3)
(define (parse_nested_parens paren_string)
","(define (parse_nested_parens paren_string)
  (define (max-nesting s)
    (define (helper chars current-depth max-depth)
      (cond
        [(empty? chars) max-depth]
        [(eq? (first chars) #\( )
         (helper (rest chars) (add1 current-depth) (max (add1 current-depth) max-depth))]
        [(eq? (first chars) #\) )
         (helper (rest chars) (sub1 current-depth) max-depth)]
        [else
         (helper (rest chars) current-depth max-depth)]))
    (helper (string->list s) 0 0))
  (let ([groups (string-split paren_string "" "")])
    (map max-nesting groups)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate parse_nested_parens))
    (check-within (candidate ""(()()) ((())) () ((())()())"") (list 2 3 1 3) 0.001)
    (check-within (candidate ""() (()) ((())) (((())))"") (list 1 2 3 4) 0.001)
    (check-within (candidate ""(()(())((())))"") (list 4) 0.001)
))

(test-humaneval)"
HumanEval_7,cym_Latn,rkt,"#lang racket

;;Ffiltrwch rhestr mewnbwn o ryseitiau dim ond ar gyfer y rhai sy'n cynnwys is-ryseitiau penodol ;; >>> (filter_by_substring (list ) ""a"")
;; (list )
;; >>> (filter_by_substring (list ""abc"" ""bacd"" ""cde"" ""array"") ""a"")
;; (list ""abc"" ""bacd"" ""array"")
(define (filter_by_substring strings substring)
","#lang racket

(define (filter_by_substring strings substring)
  (filter (lambda (s) (regexp-match? (regexp substring) s)) strings))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate filter_by_substring))
    (check-within (candidate (list ) ""john"") (list ) 0.001)
    (check-within (candidate (list ""xxx"" ""asd"" ""xxy"" ""john doe"" ""xxxAAA"" ""xxx"") ""xxx"") (list ""xxx"" ""xxxAAA"" ""xxx"") 0.001)
    (check-within (candidate (list ""xxx"" ""asd"" ""aaaxxy"" ""john doe"" ""xxxAAA"" ""xxx"") ""xx"") (list ""xxx"" ""aaaxxy"" ""xxxAAA"" ""xxx"") 0.001)
    (check-within (candidate (list ""grunt"" ""trumpet"" ""prune"" ""gruesome"") ""run"") (list ""grunt"" ""prune"") 0.001)
))

(test-humaneval)"
HumanEval_8,cym_Latn,rkt,"#lang racket

;;Dylai'r cyfanswm gwag fod yn hafal i 0 a'r cynnyrch gwag yn hafal i 1. ;;Ar gyfer rhestr benodol o integers, dychwelyd rhestr sy'n cynnwys cyfanswm a chynhyrchiad o'r holl integers yn y rhestr. ;; >>> (sum_product (list ))
;; (list 0 1)
;; >>> (sum_product (list 1 2 3 4))
;; (list 10 24)
(define (sum_product numbers)
","(define (sum_product numbers)
  (define sum (apply + numbers))
  (define product (apply * (if (null? numbers) '(1) numbers)))
  (list sum product))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_product))
    (check-within (candidate (list )) (list 0 1) 0.001)
    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)
    (check-within (candidate (list 100 0)) (list 100 0) 0.001)
    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)
    (check-within (candidate (list 10)) (list 10 10) 0.001)
))

(test-humaneval)"
HumanEval_9,cym_Latn,rkt,"#lang racket

;;yn y dilyniant.;;O restr o integrau a roddir, cynhyrchu rhestr o elfen uchafswm cylchog a ddarganfuwyd tan bryd penodol ;; >>> (rolling_max (list 1 2 3 2 3 4 2))
;; (list 1 2 3 3 3 4 4)
(define (rolling_max numbers)
","#lang racket

(define (rolling_max numbers)
  (define (helper nums current-max)
    (match nums
      [(cons x xs)
       (let ([new-max (max x current-max)])
         (cons new-max (helper xs new-max)))]
      [empty empty]))
  (if (empty? numbers)
      empty
      (helper numbers (first numbers))))

;; Example usage
(rolling_max (list 1 2 3 2 3 4 2)) ; => (list 1 2 3 3 3 4 4)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate rolling_max))
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)
    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)
    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)
))

(test-humaneval)"
HumanEval_10,cym_Latn,rkt,"#lang racket

;;- Ychwanegu at ddiwedd y llinell wrth gefn cyn-drefnau llinell sy'n dod cyn y atodiad palindromig. ;;- Dod o hyd i'r postfix hiraf o'r llinyn a ddarperir sy'n palindrom. ;;Mae syniad algorithm yn syml: ;;Dod o hyd i'r palindrom byrffordd sy'n dechrau gyda chadernid a ddarperir. ;; >>> (make_palindrome """")
;; """"
;; >>> (make_palindrome ""cat"")
;; ""catac""
;; >>> (make_palindrome ""cata"")
;; ""catac""
(define (make_palindrome string)
","(define (is-palindrome? str)
  (equal? str (reverse str)))

(define (longest-palindrome-suffix str)
  (define (helper n)
    (if (or (negative? n) (is-palindrome? (substring str n)))
        (substring str n)
        (helper (sub1 n))))
  (helper (sub1 (string-length str))))

(define (make-palindrome string)
  (let* ((suffix (longest-palindrome-suffix string))
         (prefix (substring string 0 (- (string-length string) (string-length suffix)))))
    (string-append string (list->string (reverse (string->list prefix))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate make_palindrome))
    (check-within (candidate """") """" 0.001)
    (check-within (candidate ""x"") ""x"" 0.001)
    (check-within (candidate ""xyz"") ""xyzyx"" 0.001)
    (check-within (candidate ""xyx"") ""xyx"" 0.001)
    (check-within (candidate ""jerry"") ""jerryrrej"" 0.001)
))

(test-humaneval)"
HumanEval_11,cym_Latn,rkt,"#lang racket

;;Perfformiwch XOR ddeuaidd ar y meini prawf hyn a dychwelwch y canlyniad hefyd fel llinyn. ;;Mae mewnbwn yn ddau llinell a a b yn cynnwys 1s a 0s yn unig.;; >>> (string_xor ""010"" ""110"")
;; ""100""
(define (string_xor a b)
","#lang racket

(define (string_xor a b)
  (apply string
         (map
          (lambda (char-a char-b)
            (if (= char-a char-b) 
                #\0 
                #\1))
          (string->list a)
          (string->list b))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_xor))
    (check-within (candidate ""111000"" ""101010"") ""010010"" 0.001)
    (check-within (candidate ""1"" ""1"") ""0"" 0.001)
    (check-within (candidate ""0101"" ""0000"") ""0101"" 0.001)
))

(test-humaneval)"
HumanEval_12,cym_Latn,rkt,"#lang racket

;;yn ôl #f os yw'r rhestr mewnbwn yn wag.;;O'r rhestr o ryseitiau, dychwelyd yr un hiraf. dychwelyd y un cyntaf mewn achos o lawer ;; >>> (longest (list ))
;; #f
;; >>> (longest (list ""a"" ""b"" ""c""))
;; ""a""
;; >>> (longest (list ""a"" ""bb"" ""ccc""))
;; ""ccc""
(define (longest strings)
","(define (longest strings)
  (if (empty? strings)
      #f
      (foldl (lambda (s1 s2) (if (> (string-length s1) (string-length s2)) s1 s2))
             (first strings)
             strings)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate longest))
    (check-within (candidate (list )) #f 0.001)
    (check-within (candidate (list ""x"" ""y"" ""z"")) ""x"" 0.001)
    (check-within (candidate (list ""x"" ""yyy"" ""zzzz"" ""www"" ""kkkk"" ""abc"")) ""zzzz"" 0.001)
))

(test-humaneval)"
HumanEval_13,cym_Latn,rkt,"#lang racket

;;Dychwelyd y rhanydd cyffredin mwyaf o ddau rhif cyflawn a a b ;; >>> (greatest_common_divisor 3 5)
;; 1
;; >>> (greatest_common_divisor 25 15)
;; 5
(define (greatest_common_divisor a b)
","#lang racket

(define (greatest_common_divisor a b)
  (if (= b 0)
      a
      (greatest_common_divisor b (remainder a b))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate greatest_common_divisor))
    (check-within (candidate 3 7) 1 0.001)
    (check-within (candidate 10 15) 5 0.001)
    (check-within (candidate 49 14) 7 0.001)
    (check-within (candidate 144 60) 12 0.001)
))

(test-humaneval)"
HumanEval_14,cym_Latn,rkt,"#lang racket

;;Dychwelyd rhestr o'r holl flaen-ddyfyniadau o'r cyfnodau byr i'r hiraf o'r llinell mewnbwn ;; >>> (all_prefixes ""abc"")
;; (list ""a"" ""ab"" ""abc"")
(define (all_prefixes string)
","(define (all_prefixes string)
  (define length (string-length string))
  (define (helper n)
    (if (> n length)
        '()
        (cons (substring string 0 n) (helper (+ n 1)))))
  (helper 1))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate all_prefixes))
    (check-within (candidate """") (list ) 0.001)
    (check-within (candidate ""asdfgh"") (list ""a"" ""as"" ""asd"" ""asdf"" ""asdfg"" ""asdfgh"") 0.001)
    (check-within (candidate ""WWW"") (list ""W"" ""WW"" ""WWW"") 0.001)
))

(test-humaneval)"
HumanEval_15,cym_Latn,rkt,"#lang racket

;;Yn dychwelyd llinyn sy'n cynnwys rhifau wedi'u terfynnu gan le yn dechrau o 0 hyd at n yn cynnwys. ;; >>> (string_sequence 0)
;; ""0""
;; >>> (string_sequence 5)
;; ""0 1 2 3 4 5""
(define (string_sequence n)
","#lang racket

(define (string_sequence n)
  (let loop ((i 0) (accum """"))
    (if (> i n)
        accum
        (loop (add1 i) 
              (if (zero? accum)
                  (number->string i)
                  (string-append accum "" "" (number->string i)))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_sequence))
    (check-within (candidate 0) ""0"" 0.001)
    (check-within (candidate 3) ""0 1 2 3"" 0.001)
    (check-within (candidate 10) ""0 1 2 3 4 5 6 7 8 9 10"" 0.001)
))

(test-humaneval)"
HumanEval_16,cym_Latn,rkt,"#lang racket

;;Gan roi llinyn, darganfyddwch faint o gymeriadau gwahanol (yn ddibynnol ar achos) y mae'n cynnwys ;; >>> (count_distinct_characters ""xyzXYZ"")
;; 3
;; >>> (count_distinct_characters ""Jerry"")
;; 4
(define (count_distinct_characters string)
","#lang racket

(define (count_distinct_characters string)
  (length
   (remove-duplicates
    (string->list
     (string-downcase string)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate count_distinct_characters))
    (check-within (candidate """") 0 0.001)
    (check-within (candidate ""abcde"") 5 0.001)
    (check-within (candidate ""abcdecadeCADE"") 5 0.001)
    (check-within (candidate ""aaaaAAAAaaaa"") 1 0.001)
    (check-within (candidate ""Jerry jERRY JeRRRY"") 5 0.001)
))

(test-humaneval)"
HumanEval_17,cym_Latn,rkt,"#lang racket

;;'.Nod' - nodyn chwarter, yn para un cwymp ;;'o sa' - hanner nodyn, yn para dwy guro ;;'o' - nodyn cyfan, yn para pedwar curo ;;Dyma chwedl: ;;nid yn olaf. ;;Eich tasg yw i barsio'r llinyn hwn ac yn dychwelyd rhestr o integers cyfatebol i faint o beats mae pob un yn ei wneud ;;Mae'r swyddogaeth hon yn mewnbwn i llinyn sy'n cynrychioli nodiadau cerddorol mewn fformat arbennig ASCII.;; >>> (parse_music ""o o| .| o| o| .| .| .| .| o o"")
;; (list 4 2 1 2 2 1 1 1 1 4 4)
(define (parse_music music_string)
","(define (parse_music music_string)
  (define notes (string-split music_string))
  (define (note-to-beats note)
    (cond
      [(equal? note ""o"") 4]
      [(equal? note ""o|"") 2]
      [(equal? note "".|"") 1]
      [else (error ""Unrecognized note format"")]))
  (map note-to-beats notes))

;; Example usage:
;; (parse_music ""o o| .| o| o| .| .| .| .| o o"")
;; => (list 4 2 1 2 2 1 1 1 1 4 4)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate parse_music))
    (check-within (candidate """") (list ) 0.001)
    (check-within (candidate ""o o o o"") (list 4 4 4 4) 0.001)
    (check-within (candidate "".| .| .| .|"") (list 1 1 1 1) 0.001)
    (check-within (candidate ""o| o| .| .| o o o o"") (list 2 2 1 1 4 4 4 4) 0.001)
    (check-within (candidate ""o| .| o| .| o o| o o|"") (list 2 1 2 1 4 2 4 2) 0.001)
))

(test-humaneval)"
HumanEval_18,cym_Latn,rkt,"#lang racket

;;Darganfyddwch faint o weithiau y gellir dod o hyd i is-string penodol yn y string gwreiddiol. Cyfrifiwch achosion sy'n gorgyffwrdd. ;; >>> (how_many_times """" ""a"")
;; 0
;; >>> (how_many_times ""aaa"" ""a"")
;; 3
;; >>> (how_many_times ""aaaa"" ""aa"")
;; 3
(define (how_many_times string substring)
","#lang racket

(define (how_many_times string substring)
  (define sub-len (string-length substring))
  (define str-len (string-length string))
  (define (count-helper start count)
    (if (<= (+ start sub-len) str-len)
        (if (string=? (substring string start (+ start sub-len)) substring)
            (count-helper (add1 start) (add1 count))
            (count-helper (add1 start) count))
        count))
  (if (or (zero? sub-len) (> sub-len str-len))
      0
      (count-helper 0 0)))

(how_many_times """" ""a"")    ; 0
(how_many_times ""aaa"" ""a"") ; 3
(how_many_times ""aaaa"" ""aa"") ; 3","(require rackunit)

(define (test-humaneval) 

  (let (( candidate how_many_times))
    (check-within (candidate """" ""x"") 0 0.001)
    (check-within (candidate ""xyxyxyx"" ""x"") 4 0.001)
    (check-within (candidate ""cacacacac"" ""cac"") 4 0.001)
    (check-within (candidate ""john doe"" ""john"") 1 0.001)
))

(test-humaneval)"
HumanEval_19,cym_Latn,rkt,"#lang racket

;;Dychwelyd y llinell gyda rhifau wedi'u sortio o'r lleiaf i'r mwyaf ;;Dewisiau dilys yw 'sero', 'un', 'dau', 'tri', ' pedair', ' pum', ' chwe', ' saith', ' wyth' a ' naw'. ;;Mae mewnbwn yn gyfres o rhifau sy'n cael eu terfynnu gan le o 'sero' i 'nawr'.;; >>> (sort_numbers ""three one five"")
;; ""one three five""
(define (sort_numbers numbers)
","#lang racket

(define (sort_numbers numbers)
  (define num-to-str 
    (list ""zero"" ""one"" ""two"" ""three"" ""four"" ""five"" ""six"" ""seven"" ""eight"" ""nine""))
  (define str-to-num 
    (hash ""zero"" 0 ""one"" 1 ""two"" 2 ""three"" 3 ""four"" 4 ""five"" 5 ""six"" 6 ""seven"" 7 ""eight"" 8 ""nine"" 9))
  (define word-list (string-split numbers "" ""))
  (define sorted-nums 
    (sort (map (lambda (word) (hash-ref str-to-num word)) word-list) <))
  (string-join (map (lambda (num) (list-ref num-to-str num)) sorted-nums) "" ""))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_numbers))
    (check-within (candidate """") """" 0.001)
    (check-within (candidate ""three"") ""three"" 0.001)
    (check-within (candidate ""three five nine"") ""three five nine"" 0.001)
    (check-within (candidate ""five zero four seven nine eight"") ""zero four five seven eight nine"" 0.001)
    (check-within (candidate ""six five four three two one zero"") ""zero one two three four five six"" 0.001)
))

(test-humaneval)"
HumanEval_20,cym_Latn,rkt,"#lang racket

;;(y nifer lleiaf, y nifer mwyaf).;;O restr o rifau a ddarperir (o hyd o leiaf dau) dewiswch a dychwelyd y ddau sydd agosaf at bob un ;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))
;; (list 2.0 2.2)
;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))
;; (list 2.0 2.0)
(define (find_closest_elements numbers)
","#lang racket

(define (find_closest_elements numbers)
  (define sorted (sort numbers <))
  (define closest-pair (list (first sorted) (second sorted)))
  (define min-diff (abs (- (first sorted) (second sorted))))
  (for ([i (in-range 1 (- (length sorted) 1))])
    (define diff (abs (- (list-ref sorted i) (list-ref sorted (+ i 1)))))
    (when (< diff min-diff)
      (set! min-diff diff)
      (set! closest-pair (list (list-ref sorted i) (list-ref sorted (+ i 1))))))
  closest-pair)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate find_closest_elements))
    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)
    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)
    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)
    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)
    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)
))

(test-humaneval)"
HumanEval_21,cym_Latn,rkt,"#lang racket

;;fel y bydd y rhif lleiaf yn dod yn 0 a'r mwyaf yn dod yn 1 ;;Gan roi rhestr o rifau (o o leiaf dau elfen), cymhwyso trawsnewid llinol i'r rhestr honno, ;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))
;; (list 0.0 0.25 0.5 0.75 1.0)
(define (rescale_to_unit numbers)
","(define (rescale_to_unit numbers)
  (let* ((min-val (apply min numbers))
         (max-val (apply max numbers))
         (range (- max-val min-val)))
    (map (lambda (x)
           (/ (- x min-val) range))
         numbers)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate rescale_to_unit))
    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)
    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)
    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)
    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)
    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)
))

(test-humaneval)"
HumanEval_22,cym_Latn,rkt,"#lang racket

;;Ffiltrwch y rhestr a roddir o unrhyw werthoedd rktthon ar gyfer rhifau cyfan yn unig ;; >>> (filter_integers (list ""a"" 3.14 5))
;; (list 5)
;; >>> (filter_integers (list 1 2 3 ""abc"" #hash() (list )))
;; (list 1 2 3)
(define (filter_integers values)
","(define (filter_integers values)
  (filter integer? values))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate filter_integers))
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 4 #hash() (list ) 23.2 9 ""adasd"")) (list 4 9) 0.001)
    (check-within (candidate (list 3 ""c"" 3 3 ""a"" ""b"")) (list 3 3 3) 0.001)
))

(test-humaneval)"
HumanEval_23,cym_Latn,rkt,"#lang racket

;;Dychwelyd hyd y llinell a roddir ;; >>> (strlen """")
;; 0
;; >>> (strlen ""abc"")
;; 3
(define (strlen string)
","#lang racket

(define (strlen string)
  (string-length string))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate strlen))
    (check-within (candidate """") 0 0.001)
    (check-within (candidate ""x"") 1 0.001)
    (check-within (candidate ""asdasnakj"") 9 0.001)
))

(test-humaneval)"
HumanEval_24,cym_Latn,rkt,"#lang racket

;;Ar gyfer rhif n, ceisiwch y rhif mwyaf sy'n rhannu n yn gyfartal, llai na n ;; >>> (largest_divisor 15)
;; 5
(define (largest_divisor n)
","#lang racket

(define (largest_divisor n)
  (define (find-divisor d)
    (if (= (modulo n d) 0)
        d
        (find-divisor (- d 1))))
  (find-divisor (- n 1)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate largest_divisor))
    (check-within (candidate 3) 1 0.001)
    (check-within (candidate 7) 1 0.001)
    (check-within (candidate 10) 5 0.001)
    (check-within (candidate 100) 50 0.001)
    (check-within (candidate 49) 7 0.001)
))

(test-humaneval)"
HumanEval_25,cym_Latn,rkt,"#lang racket

;;Dylai rhif mewnbwn fod yn hafal i'r cynnyrch o'r holl ffactorau ;;Dylai pob un o'r ffactorau gael eu rhestru nifer o weithiau sy'n cyfateb i faint o weithiau y mae'n ymddangos mewn ffactoriad.;;Dychwelyd rhestr o ffactorau cynta'r rhif cyfan a roddir yn yr ordrefn o'r lleiaf i'r mwyaf. ;; >>> (factorize 8)
;; (list 2 2 2)
;; >>> (factorize 25)
;; (list 5 5)
;; >>> (factorize 70)
;; (list 2 5 7)
(define (factorize n)
","#lang racket

(define (factorize n)
  (define (smallest-factor k)
    (define (find-factor start)
      (cond [(> (* start start) k) k]
            [(= (remainder k start) 0) start]
            [else (find-factor (+ start 1))]))
    (find-factor 2))
  
  (define (iter k factors)
    (if (= k 1)
        factors
        (let ([factor (smallest-factor k)])
          (iter (/ k factor) (append factors (list factor))))))
  
  (iter n '()))

;; Examples
(factorize 8)  ; (list 2 2 2)
(factorize 25) ; (list 5 5)
(factorize 70) ; (list 2 5 7)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate factorize))
    (check-within (candidate 2) (list 2) 0.001)
    (check-within (candidate 4) (list 2 2) 0.001)
    (check-within (candidate 8) (list 2 2 2) 0.001)
    (check-within (candidate 57) (list 3 19) 0.001)
    (check-within (candidate 3249) (list 3 3 19 19) 0.001)
    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)
    (check-within (candidate 20577) (list 3 19 19 19) 0.001)
    (check-within (candidate 18) (list 2 3 3) 0.001)
))

(test-humaneval)"
HumanEval_26,cym_Latn,rkt,"#lang racket

;;Cadwch drefn yr elfennau ar y chwith yr un fath â'r mewnbwn.;;O restr o integrau, tynnu'r holl elfennau sy'n digwydd mwy nag unwaith. ;; >>> (remove_duplicates (list 1 2 3 2 4))
;; (list 1 3 4)
(define (remove_duplicates numbers)
","#lang racket

(define (remove_duplicates numbers)
  (define (helper lst seen accum)
    (cond
      [(empty? lst) (reverse accum)]
      [(member (first lst) seen) (helper (rest lst) seen accum)]
      [else (helper (rest lst) (cons (first lst) seen) (cons (first lst) accum))]))
  (helper numbers '() '()))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate remove_duplicates))
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)
    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)
))

(test-humaneval)"
HumanEval_27,cym_Latn,rkt,"#lang racket

;;Ar gyfer llinell benodol, trowch gymeriadau lleiaf yn fawr ac yn fawr i lleiaf. ;; >>> (flip_case ""Hello"")
;; ""hELLO""
(define (flip_case string)
","#lang racket

(define (flip_case string)
  (list->string
   (map (lambda (char)
          (if (char-upper-case? char)
              (char-downcase char)
              (char-upcase char)))
        (string->list string))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate flip_case))
    (check-within (candidate """") """" 0.001)
    (check-within (candidate ""Hello!"") ""hELLO!"" 0.001)
    (check-within (candidate ""These violent delights have violent ends"") ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"" 0.001)
))

(test-humaneval)"
HumanEval_28,cym_Latn,rkt,"#lang racket

;;Cyd-gynnwys rhestr o llinellau i mewn i un llinell ;; >>> (concatenate (list ))
;; """"
;; >>> (concatenate (list ""a"" ""b"" ""c""))
;; ""abc""
(define (concatenate strings)
","(define (concatenate strings)
  (apply string-append strings))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate concatenate))
    (check-within (candidate (list )) """" 0.001)
    (check-within (candidate (list ""x"" ""y"" ""z"")) ""xyz"" 0.001)
    (check-within (candidate (list ""x"" ""y"" ""z"" ""w"" ""k"")) ""xyzwk"" 0.001)
))

(test-humaneval)"
HumanEval_29,cym_Latn,rkt,"#lang racket

;;Ffiltrwch rhestr mewnbwn o llinellau dim ond ar gyfer y rhai sy'n dechrau gyda chyn-fynd penodol. ;; >>> (filter_by_prefix (list ) ""a"")
;; (list )
;; >>> (filter_by_prefix (list ""abc"" ""bcd"" ""cde"" ""array"") ""a"")
;; (list ""abc"" ""array"")
(define (filter_by_prefix strings prefix)
","#lang racket

(define (filter_by_prefix strings prefix)
  (filter (lambda (s)
            (string-prefix? prefix s))
          strings))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate filter_by_prefix))
    (check-within (candidate (list ) ""john"") (list ) 0.001)
    (check-within (candidate (list ""xxx"" ""asd"" ""xxy"" ""john doe"" ""xxxAAA"" ""xxx"") ""xxx"") (list ""xxx"" ""xxxAAA"" ""xxx"") 0.001)
))

(test-humaneval)"
HumanEval_30,cym_Latn,rkt,"#lang racket

;;Dychwelyd rhifau cadarnhaol yn y rhestr yn unig. ;; >>> (get_positive (list -1 2 -4 5 6))
;; (list 2 5 6)
;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))
;; (list 5 3 2 3 9 123 1)
(define (get_positive l)
","#lang racket

(define (get_positive l)
  (filter positive? l))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_positive))
    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)
    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)
    (check-within (candidate (list -1 -2)) (list ) 0.001)
    (check-within (candidate (list )) (list ) 0.001)
))

(test-humaneval)"
HumanEval_31,cym_Latn,rkt,"#lang racket

;;Dychwelyd gwir os yw rhif penodol yn brif, ac yn anghywir fel arall. ;; >>> (is_prime 6)
;; #f
;; >>> (is_prime 101)
;; #t
;; >>> (is_prime 11)
;; #t
;; >>> (is_prime 13441)
;; #t
;; >>> (is_prime 61)
;; #t
;; >>> (is_prime 4)
;; #f
;; >>> (is_prime 1)
;; #f
(define (is_prime n)
","#lang racket

(define (is_prime n)
  (define (check-prime i)
    (cond
      [(>= i n) #t]
      [(zero? (remainder n i)) #f]
      [else (check-prime (add1 i))]))
  (cond
    [(<= n 1) #f]
    [(= n 2) #t]
    [else (check-prime 2)]))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_prime))
    (check-within (candidate 6) #f 0.001)
    (check-within (candidate 101) #t 0.001)
    (check-within (candidate 11) #t 0.001)
    (check-within (candidate 13441) #t 0.001)
    (check-within (candidate 61) #t 0.001)
    (check-within (candidate 4) #f 0.001)
    (check-within (candidate 1) #f 0.001)
    (check-within (candidate 5) #t 0.001)
    (check-within (candidate 11) #t 0.001)
    (check-within (candidate 17) #t 0.001)
    (check-within (candidate 85) #f 0.001)
    (check-within (candidate 77) #f 0.001)
    (check-within (candidate 255379) #f 0.001)
))

(test-humaneval)"
HumanEval_33,cym_Latn,rkt,"#lang racket

;;i'r gwerthoedd o'r indices cyfatebol o l, ond wedi'u sortio. ;;Mae l' yn union yr un fath â l yn y nodweddion nad ydynt yn ddiwydiol gan dri, tra bod ei werthoedd yn y nodweddion sy'n ddiwydiol gan dri yn gyfartal ;;Mae'r swyddogaeth hon yn cymryd rhestr l ac yn dychwelyd rhestr l ' fel bod ;; >>> (sort_third (list 1 2 3))
;; (list 1 2 3)
;; >>> (sort_third (list 5 6 3 4 8 9 2))
;; (list 2 6 3 4 8 9 5)
(define (sort_third l)
","(define (sort_third l)
  (define (helper lst index sorted-third)
    (cond
      [(null? lst) null]
      [(= (modulo index 3) 0)
       (cons (first sorted-third) (helper (rest lst) (+ index 1) (rest sorted-third)))]
      [else (cons (first lst) (helper (rest lst) (+ index 1) sorted-third))]))
  (let* ([third-indices-values (filter (λ (x) (= 0 (modulo (car x) 3))) (map list (range (length l)) l))]
         [sorted-third (sort (map cadr third-indices-values) <)])
    (helper l 0 sorted-third)))

;; Examples
(sort_third (list 1 2 3))             ; (list 1 2 3)
(sort_third (list 5 6 3 4 8 9 2))     ; (list 2 6 3 4 8 9 5)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_third))
    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)
    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)
    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)
    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)
))

(test-humaneval)"
HumanEval_34,cym_Latn,rkt,"#lang racket

;;Dangos elfennau unigryw wedi'u sortio mewn rhestr ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))
;; (list 0 2 3 5 9 123)
(define (unique l)
","(define (unique l)
  (sort (remove-duplicates l) <))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate unique))
    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)
))

(test-humaneval)"
HumanEval_35,cym_Latn,rkt,"#lang racket

;;Dylai'r ddata hwn ddychwelyd yr elfen uchaf yn y rhestr.;; >>> (max_element (list 1 2 3))
;; 3
;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))
;; 123
(define (max_element l)
","#lang racket

(define (max_element l)
  (cond [(empty? l) (error ""List is empty"")]
        [else (apply max l)]))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate max_element))
    (check-within (candidate (list 1 2 3)) 3 0.001)
    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)
))

(test-humaneval)"
HumanEval_36,cym_Latn,rkt,"#lang racket

;;Dychwelyd nifer y cyfnodau y mae'r rhif 7 yn ymddangos mewn rhifau cyfan llai na n sy'n rhanadwy gan 11 neu 13. ;; >>> (fizz_buzz 50)
;; 0
;; >>> (fizz_buzz 78)
;; 2
;; >>> (fizz_buzz 79)
;; 3
(define (fizz_buzz n)
","#lang racket

(define (fizz_buzz n)
  (define (count-sevens num)
    (if (< num 10)
        (if (= num 7) 1 0)
        (+ (if (= (modulo num 10) 7) 1 0)
           (count-sevens (quotient num 10)))))
  (define (check-nums acc num)
    (if (>= num n)
        acc
        (check-nums 
         (+ acc (if (or (= (modulo num 11) 0) (= (modulo num 13) 0))
                    (count-sevens num)
                    0))
         (+ num 1))))
  (check-nums 0 1))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate fizz_buzz))
    (check-within (candidate 50) 0 0.001)
    (check-within (candidate 78) 2 0.001)
    (check-within (candidate 79) 3 0.001)
    (check-within (candidate 100) 3 0.001)
    (check-within (candidate 200) 6 0.001)
    (check-within (candidate 4000) 192 0.001)
    (check-within (candidate 10000) 639 0.001)
    (check-within (candidate 100000) 8026 0.001)
))

(test-humaneval)"
HumanEval_37,cym_Latn,rkt,"#lang racket

;;i'r gwerthoedd o'r indices hyd yn oed o l, ond sortio. ;;Mae l' yn union yr un fath â l yn y nodweddion anhygoel, tra bod ei werthoedd yn yr nodweddion hyd yn oed yr un fath ;;Mae'r swyddogaeth hon yn cymryd rhestr l ac yn dychwelyd rhestr l ' fel bod ;; >>> (sort_even (list 1 2 3))
;; (list 1 2 3)
;; >>> (sort_even (list 5 6 3 4))
;; (list 3 6 5 4)
(define (sort_even l)
","#lang racket

(define (sort-even l)
  (let loop ([lst l] [evens '()] [odds '()] [idx 0])
    (cond
      [(null? lst)
       (let ([sorted-evens (sort evens <)])
         (let loop2 ([lst l] [result '()] [idx 0] [ev-idx 0] [odd-idx 0])
           (cond
             [(null? lst) (reverse result)]
             [(even? idx)
              (loop2 (cdr lst) (cons (list-ref sorted-evens ev-idx) result) (add1 idx) (add1 ev-idx) odd-idx)]
             [else
              (loop2 (cdr lst) (cons (list-ref odds odd-idx) result) (add1 idx) ev-idx (add1 odd-idx))]))))]
      [(even? idx)
       (loop (cdr lst) (cons (car lst) evens) odds (add1 idx))]
      [else
       (loop (cdr lst) evens (cons (car lst) odds) (add1 idx))])))

;; Test cases
;(sort-even (list 1 2 3)) ;; => '(1 2 3)
;(sort-even (list 5 6 3 4)) ;; => '(3 6 5 4)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_even))
    (check-within (candidate (list 1 2 3)) (list 1 2 3) 0.001)
    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123) 0.001)
    (check-within (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10) 0.001)
))

(test-humaneval)"
HumanEval_39,cym_Latn,rkt,"#lang racket

;;prime_fib yn dychwelyd rhif n-th sy'n rhif Fibonacci ac mae hefyd yn brif. ;; >>> (prime_fib 1)
;; 2
;; >>> (prime_fib 2)
;; 3
;; >>> (prime_fib 3)
;; 5
;; >>> (prime_fib 4)
;; 13
;; >>> (prime_fib 5)
;; 89
(define (prime_fib n)
","#lang racket

(define (is-prime? num)
  (define (check-divisor d)
    (cond [(= d 1) #t]
          [(= (remainder num d) 0) #f]
          [else (check-divisor (- d 1))]))
  (and (> num 1) (check-divisor (sqrt num))))

(define (fib-seq)
  (define (fib-gen a b)
    (cons a (lazy (fib-gen b (+ a b)))))
  (fib-gen 0 1))

(define (prime_fib n)
  (define prime-fibs
    (stream-filter is-prime? (stream-filter (λ (x) (>= x 2)) (fib-seq))))
  (stream-ref prime-fibs (- n 1)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate prime_fib))
    (check-within (candidate 1) 2 0.001)
    (check-within (candidate 2) 3 0.001)
    (check-within (candidate 3) 5 0.001)
    (check-within (candidate 4) 13 0.001)
    (check-within (candidate 5) 89 0.001)
    (check-within (candidate 6) 233 0.001)
    (check-within (candidate 7) 1597 0.001)
    (check-within (candidate 8) 28657 0.001)
    (check-within (candidate 9) 514229 0.001)
    (check-within (candidate 10) 433494437 0.001)
))

(test-humaneval)"
HumanEval_40,cym_Latn,rkt,"#lang racket

;;cyfanswm i sero, a #f fel arall. ;;mae'n dychwelyd #t os oes tair elfen wahanol yn y rhestr sy'n ;;Mae triples_sum_to_zero yn cymryd rhestr o integers fel mewnbwn.;; >>> (triples_sum_to_zero (list 1 3 5 0))
;; #f
;; >>> (triples_sum_to_zero (list 1 3 -2 1))
;; #t
;; >>> (triples_sum_to_zero (list 1 2 3 7))
;; #f
;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))
;; #t
;; >>> (triples_sum_to_zero (list 1))
;; #f
(define (triples_sum_to_zero l)
","(define (triples_sum_to_zero l)
  (define (has-three-sum-zero? lst)
    (for*/or ([i (in-naturals)]
              [x (in-list lst)]
              [j (in-range i (length lst))]
              [y (in-list (drop lst (add1 i)))]
              [k (in-range j (length lst))]
              [z (in-list (drop lst (add1 j)))]
              #:when (and (not (= i j k))
                          (= 0 (+ x y z))))
      #t))
  (has-three-sum-zero? l))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate triples_sum_to_zero))
    (check-within (candidate (list 1 3 5 0)) #f 0.001)
    (check-within (candidate (list 1 3 5 -1)) #f 0.001)
    (check-within (candidate (list 1 3 -2 1)) #t 0.001)
    (check-within (candidate (list 1 2 3 7)) #f 0.001)
    (check-within (candidate (list 1 2 5 7)) #f 0.001)
    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)
    (check-within (candidate (list 1)) #f 0.001)
    (check-within (candidate (list 1 3 5 -100)) #f 0.001)
    (check-within (candidate (list 100 3 5 -100)) #f 0.001)
))

(test-humaneval)"
HumanEval_41,cym_Latn,rkt,"#lang racket

;;Mae'r swyddogaeth hon yn allforio nifer y gwrthdrawiadau o'r fath. ;;yn eu llwybr fel pe na bai'n gwrthdrawiad.;;Fodd bynnag, mae'r ceir yn ddi-fudd ac yn gryf; o ganlyniad, maent yn parhau i symud.;;pan fydd car sy'n symud o'r chwith i'r dde yn taro car sy'n symud o'r dde i'r chwith.;;Mae'r ddau gar yn gwrthdaro.;;yn gyrru'n dde i'r chwith. Mae'r ddau set o geir yn dechrau bod yn bell iawn oddi wrth ;;n ceir yn gyrru i'r chwith i'r dde; ar yr un pryd, set wahanol o n ceir ;;Dychmygwch ffordd sy'n llinell ddi-fynnon yn berffaith sy'n syth.(define (car_race_collision n)
","#lang racket

(define (car_race_collision n)
  n)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate car_race_collision))
    (check-within (candidate 2) 4 0.001)
    (check-within (candidate 3) 9 0.001)
    (check-within (candidate 4) 16 0.001)
    (check-within (candidate 8) 64 0.001)
    (check-within (candidate 10) 100 0.001)
))

(test-humaneval)"
HumanEval_42,cym_Latn,rkt,"#lang racket

;;Rhestr dychwelyd gyda elfennau wedi'u cynyddu 1. ;; >>> (incr_list (list 1 2 3))
;; (list 2 3 4)
;; >>> (incr_list (list 5 3 5 2 3 3 9 0 123))
;; (list 6 4 6 3 4 4 10 1 124)
(define (incr_list l)
","#lang racket

(define (incr_list l)
  (map add1 l))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate incr_list))
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)
    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)
))

(test-humaneval)"
HumanEval_43,cym_Latn,rkt,"#lang racket

;;cyfanswm i sero, a #f fel arall. ;;mae'n dychwelyd #t os oes dau elfen wahanol yn y rhestr sy'n ;;Mae pairs_sum_to_zero yn cymryd rhestr o integers fel mewnbwn.;; >>> (pairs_sum_to_zero (list 1 3 5 0))
;; #f
;; >>> (pairs_sum_to_zero (list 1 3 -2 1))
;; #f
;; >>> (pairs_sum_to_zero (list 1 2 3 7))
;; #f
;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))
;; #t
;; >>> (pairs_sum_to_zero (list 1))
;; #f
(define (pairs_sum_to_zero l)
","(define (pairs_sum_to_zero l)
  (define (helper seen rest)
    (cond
      [(null? rest) #f]
      [(member (- (car rest)) seen) #t]
      [else (helper (cons (car rest) seen) (cdr rest))]))
  (helper '() l))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate pairs_sum_to_zero))
    (check-within (candidate (list 1 3 5 0)) #f 0.001)
    (check-within (candidate (list 1 3 -2 1)) #f 0.001)
    (check-within (candidate (list 1 2 3 7)) #f 0.001)
    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)
    (check-within (candidate (list 1)) #f 0.001)
    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)
    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)
    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)
    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)
))

(test-humaneval)"
HumanEval_44,cym_Latn,rkt,"#lang racket

;;mae rhifau sylfaen yn llai na 10.;;dychwelyd cynrychiolaeth llinyn ar ôl y trosiad. ;;Newid sylfaen rhifol rhif mewnbwn x i sylfaen. ;; >>> (change_base 8 3)
;; ""22""
;; >>> (change_base 8 2)
;; ""1000""
;; >>> (change_base 7 2)
;; ""111""
(define (change_base x base)
","#lang racket

(define (change_base x base)
  (define (convert num base)
    (if (< num base)
        (number->string num)
        (string-append 
         (convert (quotient num base) base)
         (number->string (remainder num base)))))
  (convert x base))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate change_base))
    (check-within (candidate 8 3) ""22"" 0.001)
    (check-within (candidate 9 3) ""100"" 0.001)
    (check-within (candidate 234 2) ""11101010"" 0.001)
    (check-within (candidate 16 2) ""10000"" 0.001)
    (check-within (candidate 8 2) ""1000"" 0.001)
    (check-within (candidate 7 2) ""111"" 0.001)
    (check-within (candidate 2 3) ""2"" 0.001)
    (check-within (candidate 3 4) ""3"" 0.001)
    (check-within (candidate 4 5) ""4"" 0.001)
    (check-within (candidate 5 6) ""5"" 0.001)
    (check-within (candidate 6 7) ""6"" 0.001)
    (check-within (candidate 7 8) ""7"" 0.001)
))

(test-humaneval)"
HumanEval_45,cym_Latn,rkt,"#lang racket

;;Gan roi hyd ochr a ardal dychwelyd uchel ar gyfer triongl.;; >>> (triangle_area 5 3)
;; 7.5
(define (triangle_area a h)
","#lang racket

(define (triangle_area a h)
  (* 0.5 a h))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate triangle_area))
    (check-within (candidate 5 3) 7.5 0.001)
    (check-within (candidate 2 2) 2.0 0.001)
    (check-within (candidate 10 8) 40.0 0.001)
))

(test-humaneval)"
HumanEval_46,cym_Latn,rkt,"#lang racket

;;Ysgrifennwch swyddogaeth er mwyn cyfrifo'r elfen n-ed o'r dilyniant rhifau fib4 yn effeithlon. Peidiwch â defnyddio ailgyfeirio. ;;fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).;;fib4(3) -> 0 ;;fib4(2) -> 2 ;;fib4(1) -> 0 ;;fib4(0) -> 0 ;;Mae dilyniant rhifau Fib4 yn ddilyniant tebyg i ddilyniant Fibbonacci a ddiffinnir fel a ganlyn: ;; >>> (fib4 5)
;; 4
;; >>> (fib4 6)
;; 8
;; >>> (fib4 7)
;; 14
(define (fib4 n)
","#lang racket

(define (fib4 n)
  (cond
    [(= n 0) 0]
    [(= n 1) 0]
    [(= n 2) 2]
    [(= n 3) 0]
    [else
     (let loop ([i 4] [a 0] [b 0] [c 2] [d 0])
       (if (= i n)
           (+ a b c d)
           (loop (add1 i) b c d (+ a b c d))))]))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate fib4))
    (check-within (candidate 5) 4 0.001)
    (check-within (candidate 8) 28 0.001)
    (check-within (candidate 10) 104 0.001)
    (check-within (candidate 12) 386 0.001)
))

(test-humaneval)"
HumanEval_47,cym_Latn,rkt,"#lang racket

;;Cyfrolwr dychwelyd yr elfennau yn y rhestr l. ;; >>> (median (list 3 1 2 4 5))
;; 3
;; >>> (median (list -10 4 6 1000 10 20))
;; 15.0
(define (median l)
","#lang racket

(define (median l)
  (let* ([sorted-l (sort l <)]
         [n (length sorted-l)]
         [mid (/ n 2)])
    (if (odd? n)
        (list-ref sorted-l mid)
        (/ (+ (list-ref sorted-l (sub1 mid))
              (list-ref sorted-l mid))
           2))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate median))
    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)
    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)
    (check-within (candidate (list 5)) 5 0.001)
    (check-within (candidate (list 6 5)) 5.5 0.001)
    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)
))

(test-humaneval)"
HumanEval_48,cym_Latn,rkt,"#lang racket

;;Mae'n gwirio a yw'r llinyn a roddir yn palindrom ;; >>> (is_palindrome """")
;; #t
;; >>> (is_palindrome ""aba"")
;; #t
;; >>> (is_palindrome ""aaaaa"")
;; #t
;; >>> (is_palindrome ""zbcd"")
;; #f
(define (is_palindrome text)
","#lang racket

(define (is_palindrome text)
  (define clean-text (string-downcase (string-trim text)))
  (define length (string-length clean-text))
  (define (check start end)
    (cond [(>= start end) #t]
          [(char=? (string-ref clean-text start) (string-ref clean-text end))
           (check (add1 start) (sub1 end))]
          [else #f]))
  (check 0 (sub1 length)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_palindrome))
    (check-within (candidate """") #t 0.001)
    (check-within (candidate ""aba"") #t 0.001)
    (check-within (candidate ""aaaaa"") #t 0.001)
    (check-within (candidate ""zbcd"") #f 0.001)
    (check-within (candidate ""xywyx"") #t 0.001)
    (check-within (candidate ""xywyz"") #f 0.001)
    (check-within (candidate ""xywzx"") #f 0.001)
))

(test-humaneval)"
HumanEval_49,cym_Latn,rkt,"#lang racket

;;Dychwelyd 2^n modulo p (gweler y rhifau).;; >>> (modp 3 5)
;; 3
;; >>> (modp 1101 101)
;; 2
;; >>> (modp 0 101)
;; 1
;; >>> (modp 3 11)
;; 8
;; >>> (modp 100 101)
;; 1
(define (modp n p)
","(define (modp n p)
  (remainder (expt 2 n) p))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate modp))
    (check-within (candidate 3 5) 3 0.001)
    (check-within (candidate 1101 101) 2 0.001)
    (check-within (candidate 0 101) 1 0.001)
    (check-within (candidate 3 11) 8 0.001)
    (check-within (candidate 100 101) 1 0.001)
    (check-within (candidate 30 5) 4 0.001)
    (check-within (candidate 31 5) 3 0.001)
))

(test-humaneval)"
HumanEval_51,cym_Latn,rkt,"#lang racket

;;remove_vowels yw swyddogaeth sy'n cymryd llinyn ac yn dychwelyd llinyn heb wlawnoedd. ;; >>> (remove_vowels """")
;; """"
;; >>> (remove_vowels ""abcdef"")
;; ""bcdf""
;; >>> (remove_vowels ""aaaaa"")
;; """"
;; >>> (remove_vowels ""aaBAA"")
;; ""B""
;; >>> (remove_vowels ""zbcd"")
;; ""zbcd""
(define (remove_vowels text)
","(define vowels (set ""a"" ""e"" ""i"" ""o"" ""u"" ""A"" ""E"" ""I"" ""O"" ""U""))
  (list->string (filter (lambda (char) (not (set-member? vowels (string char)))) (string->list text)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate remove_vowels))
    (check-within (candidate """") """" 0.001)
    (check-within (candidate ""abcdef
ghijklm"") ""bcdf
ghjklm"" 0.001)
    (check-within (candidate ""fedcba"") ""fdcb"" 0.001)
    (check-within (candidate ""eeeee"") """" 0.001)
    (check-within (candidate ""acBAA"") ""cB"" 0.001)
    (check-within (candidate ""EcBOO"") ""cB"" 0.001)
    (check-within (candidate ""ybcd"") ""ybcd"" 0.001)
))

(test-humaneval)"
HumanEval_52,cym_Latn,rkt,"#lang racket

;;Yn dychwelyd #t os yw pob rhif yn y rhestr l o dan y trothwy t. ;; >>> (below_threshold (list 1 2 4 10) 100)
;; #t
;; >>> (below_threshold (list 1 20 4 10) 5)
;; #f
(define (below_threshold l t)
","(define (below_threshold l t)
  (for/and ([x l])
    (< x t)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate below_threshold))
    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)
    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)
    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)
    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)
    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)
    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)
))

(test-humaneval)"
HumanEval_53,cym_Latn,rkt,"#lang racket

;;Ychwanegwch ddau rif x ac y ;; >>> (add 2 3)
;; 5
;; >>> (add 5 7)
;; 12
(define (add x y)
","#lang racket

(define (add x y)
  (+ x y))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate add))
    (check-within (candidate 0 1) 1 0.001)
    (check-within (candidate 1 0) 1 0.001)
    (check-within (candidate 2 3) 5 0.001)
    (check-within (candidate 5 7) 12 0.001)
    (check-within (candidate 7 5) 12 0.001)
))

(test-humaneval)"
HumanEval_54,cym_Latn,rkt,"#lang racket

;;Gwiriwch a oes gan ddau air yr un cymeriadau. ;; >>> (same_chars ""eabcdzzzz"" ""dddzzzzzzzddeddabc"")
;; #t
;; >>> (same_chars ""abcd"" ""dddddddabc"")
;; #t
;; >>> (same_chars ""dddddddabc"" ""abcd"")
;; #t
;; >>> (same_chars ""eabcd"" ""dddddddabc"")
;; #f
;; >>> (same_chars ""abcd"" ""dddddddabce"")
;; #f
;; >>> (same_chars ""eabcdzzzz"" ""dddzzzzzzzddddabc"")
;; #f
(define (same_chars s0 s1)
","(define (same_chars s0 s1)
  (let ([chars-s0 (string->set s0)]
        [chars-s1 (string->set s1)])
    (set=? chars-s0 chars-s1)))

(define (string->set s)
  (let loop ([chars (string->list s)]
             [acc (set)])
    (if (null? chars)
        acc
        (loop (cdr chars) (set-add acc (car chars))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate same_chars))
    (check-within (candidate ""eabcdzzzz"" ""dddzzzzzzzddeddabc"") #t 0.001)
    (check-within (candidate ""abcd"" ""dddddddabc"") #t 0.001)
    (check-within (candidate ""dddddddabc"" ""abcd"") #t 0.001)
    (check-within (candidate ""eabcd"" ""dddddddabc"") #f 0.001)
    (check-within (candidate ""abcd"" ""dddddddabcf"") #f 0.001)
    (check-within (candidate ""eabcdzzzz"" ""dddzzzzzzzddddabc"") #f 0.001)
    (check-within (candidate ""aabb"" ""aaccc"") #f 0.001)
))

(test-humaneval)"
HumanEval_55,cym_Latn,rkt,"#lang racket

;;Dychwelyd rhif Fibonacci n-ed. ;; >>> (fib 10)
;; 55
;; >>> (fib 1)
;; 1
;; >>> (fib 8)
;; 21
(define (fib n)
","#lang racket

(define (fib n)
  (define (fib-helper a b count)
    (if (= count 0)
        a
        (fib-helper b (+ a b) (- count 1))))
  (fib-helper 0 1 n))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate fib))
    (check-within (candidate 10) 55 0.001)
    (check-within (candidate 1) 1 0.001)
    (check-within (candidate 8) 21 0.001)
    (check-within (candidate 11) 89 0.001)
    (check-within (candidate 12) 144 0.001)
))

(test-humaneval)"
HumanEval_56,cym_Latn,rkt,"#lang racket

;;return #t os oes gan bob braced agoriadol braced cau cyfatebol. ;;brackets yn gyfres o ""<"" a "">"". ;; >>> (correct_bracketing ""<"")
;; #f
;; >>> (correct_bracketing ""<>"")
;; #t
;; >>> (correct_bracketing ""<<><>>"")
;; #t
;; >>> (correct_bracketing ""><<>"")
;; #f
(define (correct_bracketing brackets)
","#lang racket

(define (correct_bracketing brackets)
  (define (helper lst count)
    (cond
      [(< count 0) #f]
      [(empty? lst) (= count 0)]
      [(equal? (first lst) #\<) (helper (rest lst) (add1 count))]
      [(equal? (first lst) #\>) (helper (rest lst) (sub1 count))]))
  (helper (string->list brackets) 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate correct_bracketing))
    (check-within (candidate ""<>"") #t 0.001)
    (check-within (candidate ""<<><>>"") #t 0.001)
    (check-within (candidate ""<><><<><>><>"") #t 0.001)
    (check-within (candidate ""<><><<<><><>><>><<><><<>>>"") #t 0.001)
    (check-within (candidate ""<<<><>>>>"") #f 0.001)
    (check-within (candidate ""><<>"") #f 0.001)
    (check-within (candidate ""<"") #f 0.001)
    (check-within (candidate ""<<<<"") #f 0.001)
    (check-within (candidate "">"") #f 0.001)
    (check-within (candidate ""<<>"") #f 0.001)
    (check-within (candidate ""<><><<><>><>><<>"") #f 0.001)
    (check-within (candidate ""<><><<><>><>>><>"") #f 0.001)
))

(test-humaneval)"
HumanEval_57,cym_Latn,rkt,"#lang racket

;;Mae'n dychwelyd #t yw bod elfennau'r rhestr yn cynyddu neu'n lleihau'n unol.;; >>> (monotonic (list 1 2 4 20))
;; #t
;; >>> (monotonic (list 1 20 4 10))
;; #f
;; >>> (monotonic (list 4 1 0 -10))
;; #t
(define (monotonic l)
","(define (monotonic l)
  (or (apply <= l)
      (apply >= l)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate monotonic))
    (check-within (candidate (list 1 2 4 10)) #t 0.001)
    (check-within (candidate (list 1 2 4 20)) #t 0.001)
    (check-within (candidate (list 1 20 4 10)) #f 0.001)
    (check-within (candidate (list 4 1 0 -10)) #t 0.001)
    (check-within (candidate (list 4 1 1 0)) #t 0.001)
    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)
    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)
    (check-within (candidate (list 9 9 9 9)) #t 0.001)
))

(test-humaneval)"
HumanEval_58,cym_Latn,rkt,"#lang racket

;;Dychwelyd elfennau cyffredin unigryw a drefnwyd ar gyfer dau restr. ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))
;; (list 1 5 653)
;; >>> (common (list 5 3 2 8) (list 3 2))
;; (list 2 3)
(define (common l1 l2)
","(define (common l1 l2)
  (define commons (filter (lambda (x) (member x l2)) l1))
  (define unique-commons (remove-duplicates commons))
  (sort unique-commons <))

;; Testing the function
;; (display (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))) ; Should display (list 1 5 653)
;; (display (common (list 5 3 2 8) (list 3 2)))                          ; Should display (list 2 3)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate common))
    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)
    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)
    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)
    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)
))

(test-humaneval)"
HumanEval_59,cym_Latn,rkt,"#lang racket

;;Dychwelyd y ffactor prif fwyaf o n. Gwiriwch n > 1 ac nad yw'n brif. ;; >>> (largest_prime_factor 13195)
;; 29
;; >>> (largest_prime_factor 2048)
;; 2
(define (largest_prime_factor n)
","#lang racket

(define (largest_prime_factor n)
  (define (is-prime? num)
    (if (< num 2)
        #f
        (let loop ([i 2])
          (cond
            [(> (* i i) num) #t]
            [(zero? (modulo num i)) #f]
            [else (loop (add1 i))]))))
  
  (define (largest-factor n d)
    (cond
      [(= n 1) d]
      [(zero? (modulo n d))
       (if (is-prime? (/ n d))
           (/ n d)
           (largest-factor (/ n d) d))]
      [else (largest-factor n (add1 d))]))

  (largest-factor n 2))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate largest_prime_factor))
    (check-within (candidate 15) 5 0.001)
    (check-within (candidate 27) 3 0.001)
    (check-within (candidate 63) 7 0.001)
    (check-within (candidate 330) 11 0.001)
    (check-within (candidate 13195) 29 0.001)
))

(test-humaneval)"
HumanEval_60,cym_Latn,rkt,"#lang racket

;;Mae sum_to_n yn swyddogaeth sy'n cyfanswm rhifau o 1 i n. ;; >>> (sum_to_n 30)
;; 465
;; >>> (sum_to_n 100)
;; 5050
;; >>> (sum_to_n 5)
;; 15
;; >>> (sum_to_n 10)
;; 55
;; >>> (sum_to_n 1)
;; 1
(define (sum_to_n n)
","#lang racket

(define (sum_to_n n)
  (define (helper current sum)
    (if (> current n)
        sum
        (helper (add1 current) (+ sum current))))
  (helper 1 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_to_n))
    (check-within (candidate 1) 1 0.001)
    (check-within (candidate 6) 21 0.001)
    (check-within (candidate 11) 66 0.001)
    (check-within (candidate 30) 465 0.001)
    (check-within (candidate 100) 5050 0.001)
))

(test-humaneval)"
HumanEval_61,cym_Latn,rkt,"#lang racket

;;return #t os oes gan bob braced agoriadol braced cau cyfatebol. ;;brackets yn gyfres o ""("" a "")"". ;; >>> (correct_bracketing ""("")
;; #f
;; >>> (correct_bracketing ""()"")
;; #t
;; >>> (correct_bracketing ""(()())"")
;; #t
;; >>> (correct_bracketing "")(()"")
;; #f
(define (correct_bracketing brackets)
","(define (correct_bracketing brackets)
  (define (helper str count)
    (cond
      [(negative? count) #f]
      [(empty? str) (zero? count)]
      [(char=? (first str) #\() (helper (rest str) (add1 count))]
      [(char=? (first str) #\)) (helper (rest str) (sub1 count))]
      [else (helper (rest str) count)]))
  (helper (string->list brackets) 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate correct_bracketing))
    (check-within (candidate ""()"") #t 0.001)
    (check-within (candidate ""(()())"") #t 0.001)
    (check-within (candidate ""()()(()())()"") #t 0.001)
    (check-within (candidate ""()()((()()())())(()()(()))"") #t 0.001)
    (check-within (candidate ""((()())))"") #f 0.001)
    (check-within (candidate "")(()"") #f 0.001)
    (check-within (candidate ""("") #f 0.001)
    (check-within (candidate ""(((("") #f 0.001)
    (check-within (candidate "")"") #f 0.001)
    (check-within (candidate ""(()"") #f 0.001)
    (check-within (candidate ""()()(()())())(()"") #f 0.001)
    (check-within (candidate ""()()(()())()))()"") #f 0.001)
))

(test-humaneval)"
HumanEval_62,cym_Latn,rkt,"#lang racket

;;Dychwelyd deilliad o'r polynom hwn yn yr un ffurf. ;;xs[0] + xs[1] * x + xs[2] * x^2 + .... ;;xs yn cynrychioli coeffisiyntau polynom. ;; >>> (derivative (list 3 1 2 4 5))
;; (list 1 4 12 20)
;; >>> (derivative (list 1 2 3))
;; (list 2 6)
(define (derivative xs)
","#lang racket

(define (derivative xs)
  (let loop ((coeffs (rest xs))
             (n 1)
             (result '()))
    (if (null? coeffs)
        (reverse result)
        (loop (rest coeffs)
              (add1 n)
              (cons (* (car coeffs) n) result)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate derivative))
    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)
    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)
    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)
    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)
    (check-within (candidate (list 1)) (list ) 0.001)
))

(test-humaneval)"
HumanEval_63,cym_Latn,rkt,"#lang racket

;;Ysgrifennwch swyddogaeth er mwyn cyfrifo'r elfen n-fed o'r dilyniant rhifau fibfib yn effeithlon. ;;fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). ;;ffib ffib ((2) == 1 ;;ffib ffib ((1) == 0 ;;ffib ffib ((0) == 0 ;;Mae'r dilyniant rhifau FibFib yn ddilyniant tebyg i ddilyniant Fibbonacci a ddiffinnir fel a ganlyn: ;; >>> (fibfib 1)
;; 0
;; >>> (fibfib 5)
;; 4
;; >>> (fibfib 8)
;; 24
(define (fibfib n)
","(define (fibfib n)
  (define fibfib-memo (make-vector (+ n 1) 0))
  (vector-set! fibfib-memo 0 0)
  (vector-set! fibfib-memo 1 0)
  (vector-set! fibfib-memo 2 1)
  (define (helper k)
    (if (< k 3)
        (vector-ref fibfib-memo k)
        (let ([val (vector-ref fibfib-memo k)])
          (if (= val 0)
              (let ([result (+ (helper (- k 1))
                               (helper (- k 2))
                               (helper (- k 3)))])
                (vector-set! fibfib-memo k result)
                result)
              val))))
  (helper n))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate fibfib))
    (check-within (candidate 2) 1 0.001)
    (check-within (candidate 1) 0 0.001)
    (check-within (candidate 5) 4 0.001)
    (check-within (candidate 8) 24 0.001)
    (check-within (candidate 10) 81 0.001)
    (check-within (candidate 12) 274 0.001)
    (check-within (candidate 14) 927 0.001)
))

(test-humaneval)"
HumanEval_64,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;llafar, ond dim ond pan fydd yn ddiwedd y gair a roddir. ;;Y llafar yn yr achos hwn yw 'a', 'e', 'i', 'o', 'u'.;;gair fel mewnbwn ac yn dychwelyd nifer y llaisiau yn y llinell. ;;Ysgrifennwch swyddogaeth vowels_count sy'n cymryd llinyn sy'n cynrychioli ;; >>> (vowels_count ""abcde"")
;; 2
;; >>> (vowels_count ""ACEDY"")
;; 3
(define (vowels_count s)
","(define vowels (set ""aeiouAEIOU""))
  (define (vowel? c pos)
    (or (set-member? vowels c)
        (and (char-ci=? c #\y) (= pos (- (string-length s) 1)))))
  (define (count-vowels pos count)
    (if (< pos (string-length s))
        (count-vowels
         (+ pos 1)
         (if (vowel? (string-ref s pos) pos)
             (+ count 1)
             count))
        count))
  (count-vowels 0 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate vowels_count))
    (check-within (candidate ""abcde"") 2 0.001)
    (check-within (candidate ""Alone"") 3 0.001)
    (check-within (candidate ""key"") 2 0.001)
    (check-within (candidate ""bye"") 1 0.001)
    (check-within (candidate ""keY"") 2 0.001)
    (check-within (candidate ""bYe"") 1 0.001)
    (check-within (candidate ""ACEDY"") 3 0.001)
))

(test-humaneval)"
HumanEval_65,cym_Latn,rkt,"#lang racket

;;Os yw'r cyfran o ddisgiau > cyfran o ddisgiau, dychwelwch ddisgiau wedi'u gwrthdroi. ;;ac yn dychwelyd y canlyniad fel llinyn. ;;Cyfeirwol symud y digidau o'r rhif cyfan x, symud y digidau i'r dde gan symud ;; >>> (circular_shift 12 1)
;; ""21""
;; >>> (circular_shift 12 2)
;; ""12""
(define (circular_shift x shift)
","(define (circular_shift x shift)
  (let* ([digits (number->string x)]
         [len (string-length digits)])
    (if (> shift len)
        (list->string (reverse (string->list digits)))
        (let ([shifted-index (- len (modulo shift len))])
          (string-append (substring digits shifted-index len)
                         (substring digits 0 shifted-index))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate circular_shift))
    (check-within (candidate 100 2) ""001"" 0.001)
    (check-within (candidate 12 2) ""12"" 0.001)
    (check-within (candidate 97 8) ""79"" 0.001)
    (check-within (candidate 12 1) ""21"" 0.001)
    (check-within (candidate 11 101) ""11"" 0.001)
))

(test-humaneval)"
HumanEval_66,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Codiadau ASCII. ;;Ysgrifennwch swyddogaeth sy'n cymryd llinyn fel mewnbwn ac yn dychwelyd cyfanswm y cymeriadau uchaf yn unig' ;;Gweithrediad ;; >>> (digitSum """")
;; 0
;; >>> (digitSum ""abAB"")
;; 131
;; >>> (digitSum ""abcCd"")
;; 67
;; >>> (digitSum ""helloE"")
;; 69
;; >>> (digitSum ""woArBld"")
;; 131
;; >>> (digitSum ""aAaaaXa"")
;; 153
(define (digitSum s)
","(define (digitSum s)
  (define (upper-char? c)
    (and (char? c) (char-upper-case? c)))
  (define (ascii-sum chars sum)
    (if (null? chars)
        sum
        (let ([c (car chars)])
          (if (upper-char? c)
              (ascii-sum (cdr chars) (+ sum (char->integer c)))
              (ascii-sum (cdr chars) sum)))))
  (ascii-sum (string->list s) 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate digitSum))
    (check-within (candidate """") 0 0.001)
    (check-within (candidate ""abAB"") 131 0.001)
    (check-within (candidate ""abcCd"") 67 0.001)
    (check-within (candidate ""helloE"") 69 0.001)
    (check-within (candidate ""woArBld"") 131 0.001)
    (check-within (candidate ""aAaaaXa"") 153 0.001)
    (check-within (candidate "" How are yOu?"") 151 0.001)
    (check-within (candidate ""You arE Very Smart"") 327 0.001)
))

(test-humaneval)"
HumanEval_67,cym_Latn,rkt,"#lang racket

;;ar gyfer examble: ;;yn y basged dychwelyd nifer y ffrwythau mango yn y basged. ;;y orencs a'r afal a rhif cyfan sy'n cynrychioli cyfanswm y ffrwythau ;;Mae'r llinell yn cynrychioli'r cyfanswm o ;;sy'n cael eu dosbarthu mewn basg o ffrwythau mae'r basg hwn yn cynnwys ;;Yn y dasg hwn, byddwch yn cael llinell sy'n cynrychioli nifer o afal a pherthiniaid ;; >>> (fruit_distribution ""5 apples and 6 oranges"" 19)
;; 8
;; >>> (fruit_distribution ""0 apples and 1 oranges"" 3)
;; 2
;; >>> (fruit_distribution ""2 apples and 3 oranges"" 100)
;; 95
;; >>> (fruit_distribution ""100 apples and 1 oranges"" 120)
;; 19
(define (fruit_distribution s n)
","(define (fruit_distribution s n)
  (define (parse-fruit str)
    (match (regexp-match #px""([0-9]+) apples and ([0-9]+) oranges"" str)
      [(list _ apples oranges)
       (list (string->number apples) (string->number oranges))]))
  (define-values (apples oranges) (apply values (parse-fruit s)))
  (- n (+ apples oranges)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate fruit_distribution))
    (check-within (candidate ""5 apples and 6 oranges"" 19) 8 0.001)
    (check-within (candidate ""5 apples and 6 oranges"" 21) 10 0.001)
    (check-within (candidate ""0 apples and 1 oranges"" 3) 2 0.001)
    (check-within (candidate ""1 apples and 0 oranges"" 3) 2 0.001)
    (check-within (candidate ""2 apples and 3 oranges"" 100) 95 0.001)
    (check-within (candidate ""2 apples and 3 oranges"" 5) 0 0.001)
    (check-within (candidate ""1 apples and 100 oranges"" 120) 19 0.001)
))

(test-humaneval)"
HumanEval_68,cym_Latn,rkt,"#lang racket

;;Enghraifft 1: ;;Os nad oes unrhyw werthoedd hyd yn oed neu os yw'r rhestr a roddir yn wag, dychwelyd []. ;;Dylai'r nod a ddadlwyd gael ei ddychwelyd mewn rhestr, [smalest_value, ei index ], ;;Os ceir sawl nod gyda'r un gwerth hyd yn oed lleiaf, dychwelwch y nod sydd â'r index lleiaf. ;;Dylai'r nod a ddadlwyd fod yn nod gyda'r gwerth hyd yn oed lleiaf.;;eich tasg yw i dynnu un o'r nodiau a'i ddychwelyd.;;""Gadeir rhestr sy'n cynrychioli cangen o goeden sydd â nodiau rhif cyfan nad ydynt yn negyddol ;; >>> (pluck (list 4 2 3))
;; (list 2 1)
;; Explanation: 2 has the smallest even value, and 2 has the smallest index.
;; Example 2:
;; >>> (pluck (list 1 2 3))
;; (list 2 1)
;; Explanation: 2 has the smallest even value, and 2 has the smallest index.
;; Example 3:
;; >>> (pluck (list ))
;; (list )
;; Example 4:
;; >>> (pluck (list 5 0 3 0 4 2))
;; (list 0 1)
;; Explanation: 0 is the smallest value, but  there are two zeros,
;;              so we will choose the first zero, which has the smallest index.
;; Constraints:
;;     * 1 <= nodes.length <= 10000
;;     * 0 <= node.value
(define (pluck arr)
","(define (pluck arr)
  (define (find-smallest-even lst idx smallest-even smallest-index)
    (cond
      [(null? lst) (if (eq? smallest-even #f) '() (list smallest-even smallest-index))]
      [(and (even? (car lst))
            (or (eq? smallest-even #f) (< (car lst) smallest-even)))
       (find-smallest-even (cdr lst) (+ idx 1) (car lst) idx)]
      [else (find-smallest-even (cdr lst) (+ idx 1) smallest-even smallest-index)]))
  (find-smallest-even arr 0 #f #f))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate pluck))
    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)
    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)
    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)
    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)
    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)
    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)
))

(test-humaneval)"
HumanEval_69,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Os nad oes gwerth o'r fath yn bodoli, dychwelyd -1.;;Mae amlder rhif cyfan yn nifer y weithiau y mae'n ymddangos yn y rhestr.;;sero, ac mae'n amlder mwy na neu gyfartal â gwerth y rhif cyfan ei hun. ;;Mae rhestr o integrau cadarnhaol wedi'i roi i chi. Dychwelwch yr integwr mwyaf sy'n fwy na ;; >>> (search (list 4 1 2 2 3 1))
;; 2
;; >>> (search (list 1 2 2 3 3 3 4 4 4))
;; 3
;; >>> (search (list 5 5 4 4 4))
;; -1
(define (search lst)
","(define (search lst)
  (define freq-map (hash)) ; Hash table to store frequency of each integer
  (for-each (lambda (x)
              (hash-set! freq-map x (add1 (hash-ref freq-map x 0))))
            lst)
  (define result -1)
  (for-each (lambda (key)
              (let ((frequency (hash-ref freq-map key)))
                (when (and (>= frequency key)
                           (> key result))
                  (set! result key))))
            (hash-keys freq-map))
  result)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate search))
    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)
    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)
    (check-within (candidate (list 3 3)) -1 0.001)
    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)
    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)
    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)
    (check-within (candidate (list 3 2 8 2)) 2 0.001)
    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)
    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)
    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)
    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)
    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)
    (check-within (candidate (list 1)) 1 0.001)
    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)
    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)
    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)
    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)
    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)
    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)
    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)
    (check-within (candidate (list 10)) -1 0.001)
    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)
    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)
    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)
    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)
))

(test-humaneval)"
HumanEval_70,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;yna uchafswm y rhifau cyfan sy'n weddill, yna lleiafrif ac yn y blaen.;;Sortio rhyfedd, yw pan fyddwch yn dechrau gyda'r gwerth lleiaf, ;;Wedi rhoi rhestr o integers, dychwelyd rhestr mewn trefn rhyfedd.;; >>> (strange_sort_list (list 1 2 3 4))
;; (list 1 4 2 3)
;; >>> (strange_sort_list (list 5 5 5 5))
;; (list 5 5 5 5)
;; >>> (strange_sort_list (list ))
;; (list )
(define (strange_sort_list lst)
","(define (strange_sort_list lst)
  (define (pick-extreme lst cmp)
    (apply cmp lst))
  
  (define (remove-first lst item)
    (let loop ((lst lst) (acc '()))
      (cond
        [(null? lst) (reverse acc)]
        [(equal? (car lst) item) (append (reverse acc) (cdr lst))]
        [else (loop (cdr lst) (cons (car lst) acc))])))

  (define (alternating-sort lst result switch)
    (cond
      [(null? lst) (reverse result)]
      [else
       (let* ([extreme (pick-extreme lst (if switch min max))]
              [new-lst (remove-first lst extreme)])
         (alternating-sort new-lst (cons extreme result) (not switch)))]))

  (alternating-sort lst '() #t))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate strange_sort_list))
    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)
    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)
    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)
    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)
    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)
    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)
    (check-within (candidate (list 111111)) (list 111111) 0.001)
))

(test-humaneval)"
HumanEval_71,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;na'r trydydd ochr.;;Mae tri ochr yn gwneud triongl dilys pan fydd cyfanswm unrhyw ddau ochr yn fwy .;;Fel arall, dychwelyd -1 ;;y triongl wedi'i gylcho i 2 pwynt decifol os yw'r tri ochr yn ffurfio triongl dilys. ;;Gan fod hyd y tri ochr o drigoleg yn cael ei roi, dychwelwch yr ardal o ;; >>> (triangle_area 3 4 5)
;; 6.0
;; >>> (triangle_area 1 2 10)
;; -1
(define (triangle_area a b c)
","#lang racket

(define (triangle_area a b c)
  (define (is-valid-triangle a b c)
    (and (> (+ a b) c)
         (> (+ a c) b)
         (> (+ b c) a)))
  (define (heron-area a b c)
    (let* ([s (/ (+ a b c) 2)]
           [area (sqrt (* s (- s a) (- s b) (- s c)))])
      (round (* area 100))))
  (if (is-valid-triangle a b c)
      (/ (heron-area a b c) 100.0)
      -1))

;; Examples
;(triangle_area 3 4 5)  ; 6.0
;(triangle_area 1 2 10) ; -1","(require rackunit)

(define (test-humaneval) 

  (let (( candidate triangle_area))
    (check-within (candidate 3 4 5) 6.0 0.001)
    (check-within (candidate 1 2 10) -1 0.001)
    (check-within (candidate 4 8 5) 8.18 0.001)
    (check-within (candidate 2 2 2) 1.73 0.001)
    (check-within (candidate 1 2 3) -1 0.001)
    (check-within (candidate 10 5 7) 16.25 0.001)
    (check-within (candidate 2 6 3) -1 0.001)
    (check-within (candidate 1 1 1) 0.43 0.001)
    (check-within (candidate 2 2 10) -1 0.001)
))

(test-humaneval)"
HumanEval_72,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Bydd y gwrthrych q yn hedfan os yw'n gydbwys (mae'n rhestr palindromig) ac os yw cyfanswm ei elfennau yn llai na neu'n hafal i'r pwysau mwyaf posibl w.;;Ysgrifennwch swyddogaeth sy'n dychwelyd #t os bydd y gwrthrych q yn hedfan, a #f fel arall. ;; >>> (will_it_fly (list 1 2) 5)
;; #f
;; # 1+2 is less than the maximum possible weight, but it's unbalanced.
;; >>> (will_it_fly (list 3 2 3) 1)
;; #f
;; # it's balanced, but 3+2+3 is more than the maximum possible weight.
;; >>> (will_it_fly (list 3 2 3) 9)
;; #t
;; # 3+2+3 is less than the maximum possible weight, and it's balanced.
;; >>> (will_it_fly (list 3) 5)
;; #t
;; # 3 is less than the maximum possible weight, and it's balanced.
(define (will_it_fly q w)
","(define (will_it_fly q w)
  (define (palindromic? lst)
    (equal? lst (reverse lst)))

  (and (palindromic? q)
       (<= (apply + q) w)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate will_it_fly))
    (check-within (candidate (list 3 2 3) 9) #t 0.001)
    (check-within (candidate (list 1 2) 5) #f 0.001)
    (check-within (candidate (list 3) 5) #t 0.001)
    (check-within (candidate (list 3 2 3) 1) #f 0.001)
    (check-within (candidate (list 1 2 3) 6) #f 0.001)
    (check-within (candidate (list 5) 5) #t 0.001)
))

(test-humaneval)"
HumanEval_73,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Mae'r ddolen yn cael ei ddarllen yr un fath yn ôl ac ymlaen.;;Mae angen newid y rhestr i'w gwneud yn palindromig.;;O ystyried rhestr arr o integers, darganfyddwch y nifer lleiaf o elfennau y gall ;; >>> (smallest_change (list 1 2 3 5 4 7 9 6))
;; 4
;; >>> (smallest_change (list 1 2 3 4 3 2 2))
;; 1
;; >>> (smallest_change (list 1 2 3 2 1))
;; 0
(define (smallest_change arr)
","(define (smallest_change arr)
  (define len (length arr))
  (define half-len (quotient len 2))
  (define changes 0)
  (for ([i (in-range half-len)])
    (when (not (= (list-ref arr i) (list-ref arr (- len i 1))))
      (set! changes (+ changes 1))))
  changes)

;; Test cases
(displayln (smallest_change (list 1 2 3 5 4 7 9 6))) ; 4
(displayln (smallest_change (list 1 2 3 4 3 2 2)))   ; 1
(displayln (smallest_change (list 1 2 3 2 1)))       ; 0","(require rackunit)

(define (test-humaneval) 

  (let (( candidate smallest_change))
    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)
    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)
    (check-within (candidate (list 1 4 2)) 1 0.001)
    (check-within (candidate (list 1 4 4 2)) 1 0.001)
    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)
    (check-within (candidate (list 3 1 1 3)) 0 0.001)
    (check-within (candidate (list 1)) 0 0.001)
    (check-within (candidate (list 0 1)) 1 0.001)
))

(test-humaneval)"
HumanEval_74,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;os yw'r ddau restr yn cynnwys yr un nifer o siariau, dychwelwch y rhestr gyntaf. ;;cyfanswm nifer y chars yn yr holl llinellau o'r rhestr yn llai na'r rhestr arall. ;;Ysgrifennwch swyddogaeth sy'n derbyn dau restr o ryseitiau ac yn dychwelyd y rhestr sydd â ;; >>> (total_match (list ) (list ))
;; (list )
;; >>> (total_match (list ""hi"" ""admin"") (list ""hI"" ""Hi""))
;; (list ""hI"" ""Hi"")
;; >>> (total_match (list ""hi"" ""admin"") (list ""hi"" ""hi"" ""admin"" ""project""))
;; (list ""hi"" ""admin"")
;; >>> (total_match (list ""hi"" ""admin"") (list ""hI"" ""hi"" ""hi""))
;; (list ""hI"" ""hi"" ""hi"")
;; >>> (total_match (list ""4"") (list ""1"" ""2"" ""3"" ""4"" ""5""))
;; (list ""4"")
(define (total_match lst1 lst2)
","(define (total_match lst1 lst2)
  (define (total-chars lst)
    (apply + (map string-length lst)))
  (let ((char-count1 (total-chars lst1))
        (char-count2 (total-chars lst2)))
    (if (< char-count1 char-count2)
        lst1
        lst2)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate total_match))
    (check-within (candidate (list ) (list )) (list ) 0.001)
    (check-within (candidate (list ""hi"" ""admin"") (list ""hi"" ""hi"")) (list ""hi"" ""hi"") 0.001)
    (check-within (candidate (list ""hi"" ""admin"") (list ""hi"" ""hi"" ""admin"" ""project"")) (list ""hi"" ""admin"") 0.001)
    (check-within (candidate (list ""4"") (list ""1"" ""2"" ""3"" ""4"" ""5"")) (list ""4"") 0.001)
    (check-within (candidate (list ""hi"" ""admin"") (list ""hI"" ""Hi"")) (list ""hI"" ""Hi"") 0.001)
    (check-within (candidate (list ""hi"" ""admin"") (list ""hI"" ""hi"" ""hi"")) (list ""hI"" ""hi"" ""hi"") 0.001)
    (check-within (candidate (list ""hi"" ""admin"") (list ""hI"" ""hi"" ""hii"")) (list ""hi"" ""admin"") 0.001)
    (check-within (candidate (list ) (list ""this"")) (list ) 0.001)
    (check-within (candidate (list ""this"") (list )) (list ) 0.001)
))

(test-humaneval)"
HumanEval_75,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Gan wybod bod (a) yn llai na 100.;;ac yn ffug fel arall. ;;Ysgrifennwch swyddogaeth sy'n dychwelyd gwir os yw'r rhif a roddir yn amlwaith 3 rhif cynta ;; >>> (is_multiply_prime 30)
;; #t
;; 30 = 2 * 3 * 5
(define (is_multiply_prime a)
","#lang racket

(define (is-prime? n)
  (cond
    [(<= n 1) #f]
    [(= n 2) #t]
    [else
     (let loop ([i 2])
       (cond
         [(> (* i i) n) #t]
         [(= (remainder n i) 0) #f]
         [else (loop (add1 i))]))]))

(define (is_multiply_prime a)
  (let loop ([primes (filter is-prime? (range 2 a))])
    (cond
      [(empty? primes) #f]
      [else
       (let* ([p1 (first primes)]
              [rest (rest primes)]
              [numbers (filter (lambda (x) (= (remainder a (* p1 x)) 0))
                               rest)])
         (or (ormap
              (lambda (p2)
                (member (quotient a (* p1 p2)) rest))
              numbers)
             (loop rest)))])))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_multiply_prime))
    (check-within (candidate 5) #f 0.001)
    (check-within (candidate 30) #t 0.001)
    (check-within (candidate 8) #t 0.001)
    (check-within (candidate 10) #f 0.001)
    (check-within (candidate 125) #t 0.001)
    (check-within (candidate 105) #t 0.001)
    (check-within (candidate 126) #f 0.001)
    (check-within (candidate 729) #f 0.001)
    (check-within (candidate 891) #f 0.001)
    (check-within (candidate 1001) #t 0.001)
))

(test-humaneval)"
HumanEval_76,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;x yw pwysedd syml o n os yw n**int=x ;;grym o n ac yn anghywir mewn achosion eraill. ;;Eich tasg yw ysgrifennu swyddogaeth sy'n dychwelyd gwir os yw rhif x yn syml ;; >>> (is_simple_power 1 4)
;; #t
;; >>> (is_simple_power 2 2)
;; #t
;; >>> (is_simple_power 8 2)
;; #t
;; >>> (is_simple_power 3 2)
;; #f
;; >>> (is_simple_power 3 1)
;; #f
;; >>> (is_simple_power 5 3)
;; #f
(define (is_simple_power x n)
","(define (is_simple_power x n)
  (define (power-helper x n current-power)
    (cond
      [(= x (expt n current-power)) #t]
      [(> (expt n current-power) x) #f]
      [else (power-helper x n (+ current-power 1))]))
  (cond
    [(= x 1) #t]
    [(= n 1) (= x 1)]
    [(<= x 0) #f]
    [else (power-helper x n 1)]))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_simple_power))
    (check-within (candidate 16 2) #t 0.001)
    (check-within (candidate 143214 16) #f 0.001)
    (check-within (candidate 4 2) #t 0.001)
    (check-within (candidate 9 3) #t 0.001)
    (check-within (candidate 16 4) #t 0.001)
    (check-within (candidate 24 2) #f 0.001)
    (check-within (candidate 128 4) #f 0.001)
    (check-within (candidate 12 6) #f 0.001)
    (check-within (candidate 1 1) #t 0.001)
    (check-within (candidate 1 12) #t 0.001)
))

(test-humaneval)"
HumanEval_77,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Nodyn: gallwch gymryd yn ganiataol bod y mewnbwn bob amser yn ddilys.;;os yw'r ingeger hwn yn gwisg o ryw rhif cyfanrhyth.;;Ysgrifennwch swyddogaeth sy'n cymryd rhif cyfan a ac yn dychwelyd #t ;; >>> (iscube 1)
;; #t
;; >>> (iscube 2)
;; #f
;; >>> (iscube -1)
;; #t
;; >>> (iscube 64)
;; #t
;; >>> (iscube 0)
;; #t
;; >>> (iscube 180)
;; #f
(define (iscube a)
","(define (iscube a)
  (define abs-a (abs a))
  (define root (round (expt abs-a (/ 1 3))))
  (equal? (* root root root) abs-a))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate iscube))
    (check-within (candidate 1) #t 0.001)
    (check-within (candidate 2) #f 0.001)
    (check-within (candidate -1) #t 0.001)
    (check-within (candidate 64) #t 0.001)
    (check-within (candidate 180) #f 0.001)
    (check-within (candidate 1000) #t 0.001)
    (check-within (candidate 0) #t 0.001)
    (check-within (candidate 1729) #f 0.001)
))

(test-humaneval)"
HumanEval_78,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;a'r symbolau A,B,C,D,E,F bob amser yn llythrennau mawr. ;;Nodyn: gallwch gymryd yn ganiataol bod y mewnbwn bob amser yn gywir neu yn llong llinyn, ;;B (= decifol 11), D (= decifol 13). ;;Felly mae'n rhaid i chi benderfynu ar nifer o'r rhifau canlynol: 2, 3, 5, 7, ;;Mae rhifau cynta'n 2, 3, 5, 7, 11, 13, 17,...;;Digwyddiadau'r cyfrif hecsadesimal yw 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ;;mwy na 1 nad yw'n gynnyrch o ddau rif naturiol llai).;;digidau sy'n rhifau cynta (rhyf cynta, neu rhif cynta, yw rhif naturiol ;;rhif hecsadecimal fel llinell ac yn cyfrif nifer y hecsadecimal ;;Mae gennych tasg i ysgrifennu swyddogaeth sy'n derbyn ;; >>> (hex_key ""AB"")
;; 1
;; >>> (hex_key ""1077E"")
;; 2
;; >>> (hex_key ""ABED1A33"")
;; 4
;; >>> (hex_key ""123456789ABCDEF0"")
;; 6
;; >>> (hex_key ""2020"")
;; 2
(define (hex_key num)
","#lang racket

(define (hex_key num)
  (define prime-digits '(#\2 #\3 #\5 #\7 #\B #\D))
  (define (is-prime-digit? digit)
    (member digit prime-digits))
  (define (count-prime-hex-digits str count)
    (cond
      [(empty? str) count]
      [(is-prime-digit? (first str))
       (count-prime-hex-digits (rest str) (add1 count))]
      [else
       (count-prime-hex-digits (rest str) count)]))
  (count-prime-hex-digits (string->list num) 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate hex_key))
    (check-within (candidate ""AB"") 1 0.001)
    (check-within (candidate ""1077E"") 2 0.001)
    (check-within (candidate ""ABED1A33"") 4 0.001)
    (check-within (candidate ""2020"") 2 0.001)
    (check-within (candidate ""123456789ABCDEF0"") 6 0.001)
    (check-within (candidate ""112233445566778899AABBCCDDEEFF00"") 12 0.001)
))

(test-humaneval)"
HumanEval_79,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Mae'r cymeriadau ychwanegol yno i helpu gyda'r fformat. ;;Bydd cwpl ychwanegol o gymeriadau 'db' ar ddechrau a diwedd y llinyn. ;;Bydd pob cymeriad yn y llinell yn '0' neu '1'.;;fformat deuaidd. Dylai'r swyddogaeth ddychwelyd llinyn, gyda phob cymeriad yn cynrychioli deuaidd ;;Byddwch yn cael rhif mewn ffurf ddegfol a'ch tasg yw ei drosi i ;; >>> (decimal_to_binary 15)
;; ""db1111db""
;; >>> (decimal_to_binary 32)
;; ""db100000db""
(define (decimal_to_binary decimal)
","#lang racket

(define (decimal_to_binary decimal)
  (define binary-str (number->string decimal 2))
  (string-append ""db"" binary-str ""db""))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate decimal_to_binary))
    (check-within (candidate 0) ""db0db"" 0.001)
    (check-within (candidate 32) ""db100000db"" 0.001)
    (check-within (candidate 103) ""db1100111db"" 0.001)
    (check-within (candidate 15) ""db1111db"" 0.001)
))

(test-humaneval)"
HumanEval_80,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Mae llinell yn haprkt os yw ei hyd o leiaf 3 ac mae pob 3 llythyren yn olynol yn wahanol ;;Eich tasg yw i wirio os yw'r llinyn yn haprkt neu beidio.;;Rydych yn cael llinell s.;; >>> (is_happy ""a"")
;; #f
;; >>> (is_happy ""aa"")
;; #f
;; >>> (is_happy ""abcd"")
;; #t
;; >>> (is_happy ""aabb"")
;; #f
;; >>> (is_happy ""adb"")
;; #t
;; >>> (is_happy ""xyy"")
;; #f
(define (is_happy s)
","(define (is_happy s)
  (define len (string-length s))
  (if (< len 3)
      #f
      (for/and ([i (in-range (- len 2))])
        (let ([a (string-ref s i)]
              [b (string-ref s (+ i 1))]
              [c (string-ref s (+ i 2))])
          (and (not (equal? a b))
               (not (equal? a c))
               (not (equal? b c)))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_happy))
    (check-within (candidate ""a"") #f 0.001)
    (check-within (candidate ""aa"") #f 0.001)
    (check-within (candidate ""abcd"") #t 0.001)
    (check-within (candidate ""aabb"") #f 0.001)
    (check-within (candidate ""adb"") #t 0.001)
    (check-within (candidate ""xyy"") #f 0.001)
    (check-within (candidate ""iopaxpoi"") #t 0.001)
    (check-within (candidate ""iopaxioi"") #f 0.001)
))

(test-humaneval)"
HumanEval_81,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;0.0 E ;;> 0.0 D- ;;> 0.7 D ;;> 1.0 D+ ;;> 1.3 C- ;;> 1.7 C ;;> 2.0 C+ ;;> 2.3 B- ;;> 2.7 B ;;> 3.0 B+ ;;> 3.3 A- ;;> 3.7 A ;;4.0 A+ ;;GPA. Gradd llythrennau.;;swyddogaeth sy'n gallu allbwn rhestr o raddau llythrennau gan ddefnyddio'r tabl canlynol: ;;Mae hi wedi rhoi rhestr o GPAs i chi ar gyfer rhai myfyrwyr ac mae'n rhaid i chi ysgrifennu .;;Yr unig broblem yw, ei bod wedi colli'r cod ei bod yn ei ddefnyddio ar gyfer graddio.;;Mae'r athro wedi bod yn gwneud ei algorithm ei hun ar gyfer graddio.;;Mae'n wythnos olaf y semester ac mae'n rhaid i'r athro roi'r graddau.;; >>> (grade_equation (list 4.0 3 1.7 2 3.5))
;; (list ""A+"" ""B"" ""C-"" ""C"" ""A-"")
(define (numerical_letter_grade grades)
","(define (numerical_letter_grade grades)
  (map (lambda (gpa)
         (cond
           [(= gpa 4.0) ""A+""]
           [(> gpa 3.7) ""A""]
           [(> gpa 3.3) ""A-""]
           [(> gpa 3.0) ""B+""]
           [(> gpa 2.7) ""B""]
           [(> gpa 2.3) ""B-""]
           [(> gpa 2.0) ""C+""]
           [(> gpa 1.7) ""C""]
           [(> gpa 1.3) ""C-""]
           [(> gpa 1.0) ""D+""]
           [(> gpa 0.7) ""D""]
           [(> gpa 0.0) ""D-""]
           [else ""E""]))
       grades))

;; Example usage
(numerical_letter_grade (list 4.0 3 1.7 2 3.5))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate numerical_letter_grade))
    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list ""A+"" ""B"" ""C-"" ""C"" ""A-"") 0.001)
    (check-within (candidate (list 1.2)) (list ""D+"") 0.001)
    (check-within (candidate (list 0.5)) (list ""D-"") 0.001)
    (check-within (candidate (list 0.0)) (list ""E"") 0.001)
    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list ""D"" ""D-"" ""C-"" ""B"" ""B+"") 0.001)
    (check-within (candidate (list 0.0 0.7)) (list ""E"" ""D-"") 0.001)
))

(test-humaneval)"
HumanEval_82,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;hyd yn rhif cynta neu #f fel arall ;;Ysgrifennwch swyddogaeth sy'n cymryd llinyn ac yn dychwelyd #t os yw'r llinyn ;; >>> (prime_length ""Hello"")
;; #t
;; >>> (prime_length ""abcdcba"")
;; #t
;; >>> (prime_length ""kittens"")
;; #t
;; >>> (prime_length ""orange"")
;; #f
(define (prime_length string)
","#lang racket

(define (is-prime? n)
  (cond
    [(<= n 1) #f]
    [(= n 2) #t]
    [else
     (define (has-divisor? d)
       (cond
         [(> (* d d) n) #f]
         [(= 0 (remainder n d)) #t]
         [else (has-divisor? (+ d 1))]))
     (not (has-divisor? 2))]))

(define (prime-length string)
  (is-prime? (string-length string)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate prime_length))
    (check-within (candidate ""Hello"") #t 0.001)
    (check-within (candidate ""abcdcba"") #t 0.001)
    (check-within (candidate ""kittens"") #t 0.001)
    (check-within (candidate ""orange"") #f 0.001)
    (check-within (candidate ""wow"") #t 0.001)
    (check-within (candidate ""world"") #t 0.001)
    (check-within (candidate ""MadaM"") #t 0.001)
    (check-within (candidate ""Wow"") #t 0.001)
    (check-within (candidate """") #f 0.001)
    (check-within (candidate ""HI"") #t 0.001)
    (check-within (candidate ""go"") #t 0.001)
    (check-within (candidate ""gogo"") #f 0.001)
    (check-within (candidate ""aaaaaaaaaaaaaaa"") #f 0.001)
    (check-within (candidate ""Madam"") #t 0.001)
    (check-within (candidate ""M"") #f 0.001)
    (check-within (candidate ""0"") #f 0.001)
))

(test-humaneval)"
HumanEval_83,cym_Latn,rkt,"#lang racket

;;rhifau cyfan cyflawn cadarnhaol sy'n dechrau neu'n dod i ben gyda 1. ;;Gan roi rhif gyfan bositif n, dychwelyd y cyfrif o'r rhifau o n-digit (define (starts_one_ends n)
","#lang racket

(define (starts_one_ends n)
  (define total-n-digit (expt 10 (- n 1))) ;; Total n-digit numbers is 9 * 10^(n-1)
  ;; Count the numbers starting with 1 and those ending with 1, but remove overlap
  (- (+ total-n-digit total-n-digit) (if (> n 1) (expt 10 (- n 2)) 1)))

;; Testing the function
(starts_one_ends 1) ;; Should return 1 (1)
(starts_one_ends 2) ;; Should return 18 (10–19, 11)
(starts_one_ends 3) ;; Should return 198 (100–199, 101, 111, ..., 119, 121, ..., 191)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate starts_one_ends))
    (check-within (candidate 1) 1 0.001)
    (check-within (candidate 2) 18 0.001)
    (check-within (candidate 3) 180 0.001)
    (check-within (candidate 4) 1800 0.001)
    (check-within (candidate 5) 18000 0.001)
))

(test-humaneval)"
HumanEval_84,cym_Latn,rkt,"#lang racket

;;Enghraifft ;;Gan roi rhif cyfan bositif N, dychwelyd cyfanswm ei digidiau mewn dau lythr. ;; >>> (solve 1000)
;; ""1""
;; >>> (solve 150)
;; ""110""
;; >>> (solve 147)
;; ""1100""
;; Variables:
;;     @N integer
;;          Constraints: 0 ≤ N ≤ 10000.
;; Output:
;;      a string of binary number
(define (solve N)
","(define (solve N)
  (define (sum-digits n)
    (if (= n 0)
        0
        (+ (modulo n 10) (sum-digits (quotient n 10)))))
  (number->string (sum-digits N) 2))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate solve))
    (check-within (candidate 1000) ""1"" 0.001)
    (check-within (candidate 150) ""110"" 0.001)
    (check-within (candidate 147) ""1100"" 0.001)
    (check-within (candidate 333) ""1001"" 0.001)
    (check-within (candidate 963) ""10010"" 0.001)
))

(test-humaneval)"
HumanEval_85,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Gan fod rhestr o integrau nad ydynt yn wag, yn gyntaf, ychwanegwch yr elfennau hyd yn oed sydd ar y cyfraddau anhygoel.;; >>> (add (list 4 2 6 7))
;; 2
(define (add lst)
","#lang racket

(define (add lst)
  (define (helper lst idx acc)
    (cond
      [(null? lst) acc]
      [(and (even? (car lst)) (odd? idx))
       (helper (cdr lst) (+ idx 1) (+ acc (car lst)))]
      [else
       (helper (cdr lst) (+ idx 1) acc)]))
  (helper lst 0 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate add))
    (check-within (candidate (list 4 88)) 88 0.001)
    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)
    (check-within (candidate (list 4 0 6 7)) 0 0.001)
    (check-within (candidate (list 4 4 6 8)) 12 0.001)
))

(test-humaneval)"
HumanEval_86,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Nodyn: Dylech gadw trefn y geiriau a'r gofod wag yn y brawddeg.;;trefn godiadol yn seiliedig ar werth ascii. ;;yn cael eu disodli gan air newydd lle mae'r holl gymeriadau wedi'u trefnu yn ;;Mae fersiwn ordeiniedig o llinyn, yn llinyn lle mae pob gair (yn cael ei wahanu gan leoliad) ;;Ysgrifennwch swyddogaeth sy'n cymryd llinyn ac yn dychwelyd fersiwn orchymynedig ohono.;; >>> (anti_shuffle ""Hi"")
;; ""Hi""
;; >>> (anti_shuffle ""hello"")
;; ""ehllo""
;; >>> (anti_shuffle ""Hello World!!!"")
;; ""Hello !!!Wdlor""
(define (anti_shuffle s)
","(define (anti_shuffle s)
  (define (sort-word w)
    (list->string (sort (string->list w) char<?)))
  (define words (regexp-split #px""\\s+"" s))
  (define sorted-words (map sort-word words))
  (regexp-replace* #px""\\S+"" s (λ (match) (sort-word match))))

;; Example usage:
;; (anti_shuffle ""Hi"")
;; (anti_shuffle ""hello"")
;; (anti_shuffle ""Hello World!!!"")","(require rackunit)

(define (test-humaneval) 

  (let (( candidate anti_shuffle))
    (check-within (candidate ""Hi"") ""Hi"" 0.001)
    (check-within (candidate ""hello"") ""ehllo"" 0.001)
    (check-within (candidate ""number"") ""bemnru"" 0.001)
    (check-within (candidate ""abcd"") ""abcd"" 0.001)
    (check-within (candidate ""Hello World!!!"") ""Hello !!!Wdlor"" 0.001)
    (check-within (candidate """") """" 0.001)
    (check-within (candidate ""Hi. My name is Mister Robot. How are you?"") "".Hi My aemn is Meirst .Rboot How aer ?ouy"" 0.001)
))

(test-humaneval)"
HumanEval_87,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Hefyd, sortio cydlyniadau'r llinell gan golofn mewn trefn ddisgyn.;;Trefnwch gyfeirnod yn gyntaf yn ôl rhesi mewn trefn godiadol.;;mae pob rhestr yn gyfeirnod - (rhwng, cologau), gan ddechrau gyda 0. ;;a dychwelyd rhestr o restr, [(x1, y1), (x2, y2) ...] fel bod ;;Wedi rhoi lst, a rhif cyfan x, dod o hyd i rhifau cyfan x yn y rhestr, ;;gall pob rhif gynnwys nifer wahanol o golofn.;;sy'n debyg i matrix, fodd bynnag, yn wahanol i matrisiau, ;;Rydych yn cael data 2 dimensiwn, fel rhestrau rhestredig, ;; >>> (get_row (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)
;; (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0))
;; >>> (get_row (list ) 1)
;; (list )
;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)
;; (list (list 2 2))
(define (get_row lst x)
","(define (get_row lst x)
  (define (find-coordinates row idx)
    (map (lambda (col_idx val)
           (if (= val x) (list idx col_idx) #f))
         (range (length row))
         row))
  (define (filter-coordinates coordinates)
    (filter (lambda (coord) coord) coordinates))
  (define (process-row row idx)
    (filter-coordinates (find-coordinates row idx)))
  (define all-coordinates
    (apply append
           (map-indexed process-row lst)))
  (define (sort-by-row col-list)
    (sort col-list
          (lambda (c1 c2)
            (or (< (first c1) (first c2))
                (and (= (first c1) (first c2))
                     (> (second c1) (second c2)))))))
  (sort-by-row all-coordinates))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_row))
    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)
    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)
    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)
    (check-within (candidate (list ) 1) (list ) 0.001)
    (check-within (candidate (list (list 1)) 2) (list ) 0.001)
    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)
))

(test-humaneval)"
HumanEval_88,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;* peidiwch â newid y rhestr a roddir. ;;Nodyn: ;;neu ei sortio mewn trefn ddisgynol os yw'r cyfanswm ((rhyngwerth index cyntaf, gwerth index olaf) yn hyd yn oed. ;;byddwch yn sortio'r rhestr a roddir mewn trefn godiadol os yw'r cyfanswm ((rhyngwerth index cyntaf, gwerth index olaf) yn afreolaidd, ;;Wedi rhoi rhestr o integrau an-negyddol, dychwelyd corkt o'r rhestr a roddir ar ôl sortio, ;; >>> (sort_array (list ))
;; (list )
;; >>> (sort_array (list 5))
;; (list 5)
;; >>> (sort_array (list 2 4 3 0 1 5))
;; (list 0 1 2 3 4 5)
;; >>> (sort_array (list 2 4 3 0 1 5 6))
;; (list 6 5 4 3 2 1 0)
(define (sort_array array)
","(define (sort_array array)
  (if (null? array)
      array
      (let* ((first-val (first array))
             (last-val (last array))
             (sum (+ first-val last-val))
             (sorted-array (sort array <)))
        (if (odd? sum)
            sorted-array
            (reverse sorted-array)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_array))
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 5)) (list 5) 0.001)
    (check-within (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3 4 5) 0.001)
    (check-within (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0) 0.001)
    (check-within (candidate (list 2 1)) (list 1 2) 0.001)
    (check-within (candidate (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87) 0.001)
    (check-within (candidate (list 21 14 23 11)) (list 23 21 14 11) 0.001)
))

(test-humaneval)"
HumanEval_89,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;symud i lawr gan ddwy wrth ddwy le.;;Dylai'r alfabet gael ei droi mewn modd fel bod y llythrennau ;;yn dychwelyd llinyn wedi'i amgryptio gyda'r alfabet yn cael ei droi. ;;Creu ffynhonnell cryptio sy'n cymryd llinyn fel argwment ac ;; >>> (encrypt ""hi"")
;; ""lm""
;; >>> (encrypt ""asdfghjkl"")
;; ""ewhjklnop""
;; >>> (encrypt ""gf"")
;; ""kj""
;; >>> (encrypt ""et"")
;; ""ix""
(define (encrypt s)
","#lang racket

(define (encrypt-char c)
  (define offset (* 2 2))
  (define base (if (char<=? c #\Z) #\A #\a))
  (define shifted (integer->char (+ (modulo (+ (- (char->integer c) (char->integer base)) offset) 26)
                                    (char->integer base))))
  shifted)

(define (encrypt s)
  (list->string (map encrypt-char (string->list s))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate encrypt))
    (check-within (candidate ""hi"") ""lm"" 0.001)
    (check-within (candidate ""asdfghjkl"") ""ewhjklnop"" 0.001)
    (check-within (candidate ""gf"") ""kj"" 0.001)
    (check-within (candidate ""et"") ""ix"" 0.001)
    (check-within (candidate ""faewfawefaewg"") ""jeiajeaijeiak"" 0.001)
    (check-within (candidate ""hellomyfriend"") ""lippsqcjvmirh"" 0.001)
    (check-within (candidate ""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"") ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"" 0.001)
    (check-within (candidate ""a"") ""e"" 0.001)
))

(test-humaneval)"
HumanEval_90,cym_Latn,rkt,"#lang racket

;;Yn dychwelyd #f os nad oes yr elfen o'r fath. ;;Ysgrifennwch swyddogaeth next_smallest (() sy'n dychwelyd yr elfen 2fed lleiaf yn y rhestr. ;;Rydych yn cael rhestr o integers.;; >>> (next_smallest (list 1 2 3 4 5))
;; 2
;; >>> (next_smallest (list 5 1 4 3 2))
;; 2
;; >>> (next_smallest (list ))
;; #f
;; >>> (next_smallest (list 1 1))
;; #f
(define (next_smallest lst)
","(define (next_smallest lst)
  (let ([sorted-lst (sort (remove-duplicates lst) <)])
    (if (>= (length sorted-lst) 2)
        (second sorted-lst)
        #f)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate next_smallest))
    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)
    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)
    (check-within (candidate (list )) #f 0.001)
    (check-within (candidate (list 1 1)) #f 0.001)
    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)
    (check-within (candidate (list 1 1)) #f 0.001)
    (check-within (candidate (list -35 34 12 -45)) -35 0.001)
))

(test-humaneval)"
HumanEval_91,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Mae'r ymadroddion yn cael eu deillio gan '.', '?' neu '!'. ;;Mae bore yn frawddeg sy'n dechrau gyda'r gair ""I"".;;Byddwch yn cael llinell o eiriau, a'ch tasg yw cyfrif y rhif.;; >>> (is_bored ""Hello world"")
;; 0
;; >>> (is_bored ""The sky is blue. The sun is shining. I love this weather"")
;; 1
(define (is_bored S)
","(define (is_bored S)
  (define sentences 
    (regexp-split #""[.!?]"" S))
  (define (starts-with-i? sentence)
    (regexp-match #""\s*I\b"" (string-trim sentence)))
  (define boredom-sentences
    (filter starts-with-i? sentences))
  (length boredom-sentences))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_bored))
    (check-within (candidate ""Hello world"") 0 0.001)
    (check-within (candidate ""Is the sky blue?"") 0 0.001)
    (check-within (candidate ""I love It !"") 1 0.001)
    (check-within (candidate ""bIt"") 0 0.001)
    (check-within (candidate ""I feel good today. I will be productive. will kill It"") 2 0.001)
    (check-within (candidate ""You and I are going for a walk"") 0 0.001)
))

(test-humaneval)"
HumanEval_92,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;Mae'n dychwelyd false mewn unrhyw achosion eraill. ;;Mae'n dychwelyd gwir os yw un o'r rhifau'n gyfartal â chyfanswm y ddau arall, ac mae'r holl rifau'n rhifau cyfan.;;Creu swyddogaeth sy'n cymryd 3 rhifau.;; >>> (any_int 5 2 7)
;; #t
;; >>> (any_int 3 2 2)
;; #f
;; >>> (any_int 3 -2 1)
;; #t
;; >>> (any_int 3.6 -2.2 2)
;; #f
(define (any_int x y z)
","(define (any_int x y z)
  (and (integer? x) (integer? y) (integer? z)
       (or (= x (+ y z))
           (= y (+ x z))
           (= z (+ x y)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate any_int))
    (check-within (candidate 2 3 1) #t 0.001)
    (check-within (candidate 2.5 2 3) #f 0.001)
    (check-within (candidate 1.5 5 3.5) #f 0.001)
    (check-within (candidate 2 6 2) #f 0.001)
    (check-within (candidate 4 2 2) #t 0.001)
    (check-within (candidate 2.2 2.2 2.2) #f 0.001)
    (check-within (candidate -4 6 2) #t 0.001)
    (check-within (candidate 2 1 1) #t 0.001)
    (check-within (candidate 3 4 7) #t 0.001)
    (check-within (candidate 3.0 4 7) #f 0.001)
))

(test-humaneval)"
HumanEval_93,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Dim ond llythrennau i'w cymryd.;;llafar yn yr wyddor Saesneg.;;y neges gyda'r llythyren sy'n ymddangos 2 lle cyn hynny ;;ffordd y mae'n cyfnewid achos o bob llythyren, yn disodli pob llafar yn ;;Ysgrifennwch swyddogaeth sy'n cymryd neges, ac yn codi mewn cyfeiriad fel ;; >>> (encode ""test"")
;; ""TGST""
;; >>> (encode ""This is a message"")
;; ""tHKS KS C MGSSCGG""
(define (encode message)
","(define (encode message)
  (define vowels (string->list ""aeiouAEIOU""))
  (define replacements (string->list ""cgkqwCGKQW""))
  
  (define (swap-case char)
    (if (char-upper-case? char)
        (char-downcase char)
        (char-upcase char)))
  
  (define (replace-vowel char)
    (let ([index (ormap (lambda (vowel)
                           (if (char=? char vowel)
                               (list-index (lambda (x) (char=? x vowel)) vowels)
                               #f))
                         vowels)])
      (if (not (false? index))
          (list-ref replacements index)
          char)))
  
  (list->string
   (map (lambda (char)
          (let ([swapped (swap-case char)])
            (replace-vowel swapped)))
        (string->list message))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate encode))
    (check-within (candidate ""TEST"") ""tgst"" 0.001)
    (check-within (candidate ""Mudasir"") ""mWDCSKR"" 0.001)
    (check-within (candidate ""YES"") ""ygs"" 0.001)
    (check-within (candidate ""This is a message"") ""tHKS KS C MGSSCGG"" 0.001)
    (check-within (candidate ""I DoNt KnOw WhAt tO WrItE"") ""k dQnT kNqW wHcT Tq wRkTg"" 0.001)
))

(test-humaneval)"
HumanEval_94,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Mae angen i chi ddod o hyd i'r gwerth prif mwyaf ac yn dychwelyd y cyfanswm o'i digidiau.;;Rydych yn cael rhestr o integers.;; >>> (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))
;; 10
;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))
;; 25
;; >>> (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))
;; 13
;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))
;; 11
;; >>> (skjkasdkd (list 0 81 12 3 1 21))
;; 3
;; >>> (skjkasdkd (list 0 8 1 2 1 7))
;; 7
(define (skjkasdkd lst)
","#lang racket

(define (prime? n)
  (define (is-prime? n divisor)
    (cond
      [(< n 2) #f]
      [(= divisor 1) #t]
      [(= (remainder n divisor) 0) #f]
      [else (is-prime? n (sub1 divisor))]))
  (is-prime? n (sqrt n)))

(define (sum-of-digits n)
  (if (zero? n)
      0
      (+ (remainder n 10) (sum-of-digits (quotient n 10)))))

(define (skjkasdkd lst)
  (let loop ([lst lst] [max-prime -1])
    (cond
      [(null? lst) (if (= max-prime -1) 0 (sum-of-digits max-prime))]
      [(prime? (car lst))
       (loop (cdr lst) (max (car lst) max-prime))]
      [else
       (loop (cdr lst) max-prime)])))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate skjkasdkd))
    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)
    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)
    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)
    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)
    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)
    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)
    (check-within (candidate (list 8191)) 19 0.001)
    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)
    (check-within (candidate (list 127 97 8192)) 10 0.001)
))

(test-humaneval)"
HumanEval_95,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Dylai'r swyddogaeth ddychwelyd #f yw'r hash a roddir yn wag. ;;case neu'r holl allweddi yn llinellau mewn llythyren fawr, fel arall dychwelyd #f. ;;Wedi rhoi hash, dychwelyd # t os yw'r holl allweddi yn llinellau yn is ;; >>> (check_dict_case #hash((""a"" .  ""apple"") (""b"" .  ""banana"")))
;; #t
;; >>> (check_dict_case #hash((""a"" .  ""apple"") (""A"" .  ""banana"") (""B"" .  ""banana"")))
;; #f
;; >>> (check_dict_case #hash((""a"" .  ""apple"") (8 .  ""banana"") (""a"" .  ""apple"")))
;; #f
;; >>> (check_dict_case #hash((""Name"" .  ""John"") (""Age"" .  ""36"") (""City"" .  ""Houston"")))
;; #f
;; >>> (check_dict_case #hash((""STATE"" .  ""NC"") (""ZIP"" .  ""12345"")))
;; #t
(define (check_dict_case dict)
","(define (check_dict_case dict)
  (if (or (hash-empty? dict)
          (not (andmap string? (hash-keys dict))))
      #f
      (let ([keys (hash-keys dict)])
        (or (andmap (λ (key) (string=? key (string-downcase key))) keys)
            (andmap (λ (key) (string=? key (string-upcase key))) keys)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate check_dict_case))
    (check-within (candidate #hash((""p"" .  ""pineapple"") (""b"" .  ""banana""))) #t 0.001)
    (check-within (candidate #hash((""p"" .  ""pineapple"") (""A"" .  ""banana"") (""B"" .  ""banana""))) #f 0.001)
    (check-within (candidate #hash((""p"" .  ""pineapple"") (""5"" .  ""banana"") (""a"" .  ""apple""))) #f 0.001)
    (check-within (candidate #hash((""Name"" .  ""John"") (""Age"" .  ""36"") (""City"" .  ""Houston""))) #f 0.001)
    (check-within (candidate #hash((""STATE"" .  ""NC"") (""ZIP"" .  ""12345""))) #t 0.001)
    (check-within (candidate #hash((""fruit"" .  ""Orange"") (""taste"" .  ""Sweet""))) #t 0.001)
    (check-within (candidate #hash()) #f 0.001)
))

(test-humaneval)"
HumanEval_96,cym_Latn,rkt,"#lang racket

;;er enghraifft: ;;rhifau cyfan sy'n rhifau cynta a llai na n. ;;Mae'n gweithredu swyddogaeth sy'n cymryd rhif cyfan nad yw'n negyddol ac yn dychwelyd rhestr o'r n cyntaf .;; >>> (count_up_to 5)
;; (list 2 3)
;; >>> (count_up_to 11)
;; (list 2 3 5 7)
;; >>> (count_up_to 0)
;; (list )
;; >>> (count_up_to 20)
;; (list 2 3 5 7 11 13 17 19)
;; >>> (count_up_to 1)
;; (list )
;; >>> (count_up_to 18)
;; (list 2 3 5 7 11 13 17)
(define (count_up_to n)
","#lang racket

(define (is-prime? num)
  (cond
    [(< num 2) #f]
    [else
     (define (check-divisor divisor)
       (cond
         [(> (* divisor divisor) num) #t]
         [(= (remainder num divisor) 0) #f]
         [else (check-divisor (+ divisor 1))]))
     (check-divisor 2)]))

(define (count_up_to n)
  (define (helper current result)
    (cond
      [(>= current n) (reverse result)]
      [(is-prime? current) (helper (+ current 1) (cons current result))]
      [else (helper (+ current 1) result)]))
  (helper 2 '()))

;; Examples for testing
(count_up_to 5)    ;; (list 2 3)
(count_up_to 11)   ;; (list 2 3 5 7)
(count_up_to 0)    ;; (list )
(count_up_to 20)   ;; (list 2 3 5 7 11 13 17 19)
(count_up_to 1)    ;; (list )
(count_up_to 18)   ;; (list 2 3 5 7 11 13 17)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate count_up_to))
    (check-within (candidate 5) (list 2 3) 0.001)
    (check-within (candidate 6) (list 2 3 5) 0.001)
    (check-within (candidate 7) (list 2 3 5) 0.001)
    (check-within (candidate 10) (list 2 3 5 7) 0.001)
    (check-within (candidate 0) (list ) 0.001)
    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)
    (check-within (candidate 1) (list ) 0.001)
    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)
    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)
    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)
))

(test-humaneval)"
HumanEval_97,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Dylid tybio bod y mewnbwn yn ddilys bob amser.;;y cynhyrchiad o'u digedau uned. ;;Cwblhau'r swyddogaeth sy'n cymryd dau gyfanswm ac yn dychwelyd ;; >>> (multiply 148 412)
;; 16
;; >>> (multiply 19 28)
;; 72
;; >>> (multiply 2020 1851)
;; 0
;; >>> (multiply 14 -15)
;; 20
(define (multiply a b)
","(define (multiply a b)
  (* (remainder (abs a) 10) (remainder (abs b) 10)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate multiply))
    (check-within (candidate 148 412) 16 0.001)
    (check-within (candidate 19 28) 72 0.001)
    (check-within (candidate 2020 1851) 0 0.001)
    (check-within (candidate 14 -15) 20 0.001)
    (check-within (candidate 76 67) 42 0.001)
    (check-within (candidate 17 27) 49 0.001)
    (check-within (candidate 0 1) 0 0.001)
    (check-within (candidate 0 0) 0 0.001)
))

(test-humaneval)"
HumanEval_98,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;O ystyried llinell s, cyfrifwch nifer y llaisiau llafar mawr mewn indices hyd yn oed. ;; >>> (count_upper ""aBCdEf"")
;; 1
;; >>> (count_upper ""abcdefg"")
;; 0
;; >>> (count_upper ""dBBE"")
;; 0
(define (count_upper s)
","#lang racket

(define (count_upper s)
  (define vowels (set ""AEIOU""))
  (define (is-even? n) (= (modulo n 2) 0))
  (define (count-upper-at-indices lst idx)
    (cond
      [(null? lst) 0]
      [(and (is-even? idx) (set-member? vowels (car lst))) 
       (+ 1 (count-upper-at-indices (cdr lst) (+ idx 1)))]
      [else (count-upper-at-indices (cdr lst) (+ idx 1))]))
  (count-upper-at-indices (string->list s) 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate count_upper))
    (check-within (candidate ""aBCdEf"") 1 0.001)
    (check-within (candidate ""abcdefg"") 0 0.001)
    (check-within (candidate ""dBBE"") 0 0.001)
    (check-within (candidate ""B"") 0 0.001)
    (check-within (candidate ""U"") 1 0.001)
    (check-within (candidate """") 0 0.001)
    (check-within (candidate ""EEEE"") 2 0.001)
))

(test-humaneval)"
HumanEval_99,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;o ddau rhif cyfan, ei gylchredeg i ffwrdd o sero.;;ac yn dychwelyd y rhif cyfan agosaf iddo. Os yw'r rhif yn gyfartal â hi ;;Creu swyddogaeth sy'n cymryd gwerth (string) sy'n cynrychioli rhif ;; >>> (closest_integer ""10"")
;; 10
;; >>> (closest_integer ""15.3"")
;; 15
;; Note:
;; Rounding away from zero means that if the given number is equidistant
;; from two integers, the one you should return is the one that is the
;; farthest from zero. For example closest_integer(""14.5"") should
;; return 15 and closest_integer(""-14.5"") should return -15.
(define (closest_integer value)
","(define (closest_integer value)
  (let* ((num (string->number value))
         (floor-num (floor num))
         (ceil-num (ceiling num))
         (halfway? (= (+ floor-num 0.5) num)))
    (if halfway?
        (if (positive? num) ceil-num floor-num)
        (round num))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate closest_integer))
    (check-within (candidate ""10"") 10 0.001)
    (check-within (candidate ""14.5"") 15 0.001)
    (check-within (candidate ""-15.5"") -16 0.001)
    (check-within (candidate ""15.3"") 15 0.001)
    (check-within (candidate ""0"") 0 0.001)
))

(test-humaneval)"
HumanEval_100,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;i yn cynrychioli nifer y cerrig yn y lefel (i+1). ;;Dychwelyd nifer y cerrig ym mhob lefel mewn rhestr, lle mae elfen yn y mynegai ;;- y rhif pari nesaf os yw n yn pari. ;;- y rhif anhygoel nesaf os yw n yn anhygoel. ;;Y nifer o gerrig yn y lefel nesaf yw: ;;Mae gan y lefel gyntaf n garreg.;;Gan fod rhif cyfan bositif n, mae'n rhaid i chi wneud pentwr o n lefel o gerrig.;; >>> (make_a_pile 3)
;; (list 3 5 7)
(define (make_a_pile n)
","#lang racket

(define (make-a-pile n)
  (define (next-odd x)
    (if (odd? x)
        (+ x 2)
        (+ x 1)))
  (define (next-even x)
    (if (even? x)
        (+ x 2)
        (+ x 1)))
  (define (pile-helper current-level current-value)
    (if (> current-level n)
        '()
        (cons current-value
              (pile-helper (+ current-level 1)
                           (if (odd? n)
                               (next-odd current-value)
                               (next-even current-value))))))
  (pile-helper 1 n))

;; Example
;; (make-a-pile 3) should return (list 3 5 7)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate make_a_pile))
    (check-within (candidate 3) (list 3 5 7) 0.001)
    (check-within (candidate 4) (list 4 6 8 10) 0.001)
    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)
    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)
    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)
))

(test-humaneval)"
HumanEval_101,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;i rannu'r llinyn yn eiriau ac i ddychwelyd rhestr o'r geiriau. ;;Bydd yn cael ei roi i chi llinell o eiriau wedi'u gwahanu gan gomion neu leoliadau.;; >>> (words_string ""Hi, my name is John"")
;; (list ""Hi"" ""my"" ""name"" ""is"" ""John"")
;; >>> (words_string ""One, two, three, four, five, six"")
;; (list ""One"" ""two"" ""three"" ""four"" ""five"" ""six"")
(define (words_string s)
","#lang racket

(define (split-at-delimiters s delimiters)
  (regexp-split (regexp (string-join delimiters ""|"")) s))

(define (words_string s)
  (filter (lambda (word) (not (string=? word """")))
          (split-at-delimiters s '(""[ ,]""))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate words_string))
    (check-within (candidate ""Hi, my name is John"") (list ""Hi"" ""my"" ""name"" ""is"" ""John"") 0.001)
    (check-within (candidate ""One, two, three, four, five, six"") (list ""One"" ""two"" ""three"" ""four"" ""five"" ""six"") 0.001)
    (check-within (candidate ""Hi, my name"") (list ""Hi"" ""my"" ""name"") 0.001)
    (check-within (candidate ""One,, two, three, four, five, six,"") (list ""One"" ""two"" ""three"" ""four"" ""five"" ""six"") 0.001)
    (check-within (candidate """") (list ) 0.001)
    (check-within (candidate ""ahmed     , gamal"") (list ""ahmed"" ""gamal"") 0.001)
))

(test-humaneval)"
HumanEval_102,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;nid oes unrhyw rif o'r fath, yna dylai'r swyddogaeth yn dychwelyd -1.;;rhif cyfan mwyaf hyd yn oed sy'n y ystod [x, y] yn cynnwys. Os ;;Mae'r swyddogaeth hon yn cymryd dau rif cadarnhaol x ac y ac yn dychwelyd y ;; >>> (choose_num 12 15)
;; 14
;; >>> (choose_num 13 12)
;; -1
(define (choose_num x y)
","(define (choose_num x y)
  (define min (min x y))
  (define max (max x y))
  (define biggest-even
    (if (even? max)
        max
        (- max 1)))
  (if (>= biggest-even min)
      biggest-even
      -1))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate choose_num))
    (check-within (candidate 12 15) 14 0.001)
    (check-within (candidate 13 12) -1 0.001)
    (check-within (candidate 33 12354) 12354 0.001)
    (check-within (candidate 5234 5233) -1 0.001)
    (check-within (candidate 6 29) 28 0.001)
    (check-within (candidate 27 10) -1 0.001)
    (check-within (candidate 7 7) -1 0.001)
    (check-within (candidate 546 546) 546 0.001)
))

(test-humaneval)"
HumanEval_103,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Os yw n yn fwy na m, dychwelyd -1.;;Cerddwch yr ateb i'r rhif cyfan agosaf a trosi hynny i ddeuaidd.;;cyfartalog y rhifau cyfan o n i m (gan gynnwys n ac m). ;;Mae dau integers cadarnhaol n ac m yn cael eu rhoi i chi, ac eich tasg yw cyfrifo'r ;; >>> (rounded_avg 1 5)
;; ""0b11""
;; >>> (rounded_avg 7 5)
;; -1
;; >>> (rounded_avg 10 20)
;; ""0b1111""
;; >>> (rounded_avg 20 33)
;; ""0b11010""
(define (rounded_avg n m)
","(define (rounded_avg n m)
  (if (> n m)
      -1
      (let* ((count (+ 1 (- m n)))
             (sum (* (+ n m) count) 0.5)
             (average (round (/ sum count))))
        (string-append ""0b"" (number->string average 2)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate rounded_avg))
    (check-within (candidate 1 5) ""0b11"" 0.001)
    (check-within (candidate 7 13) ""0b1010"" 0.001)
    (check-within (candidate 964 977) ""0b1111001010"" 0.001)
    (check-within (candidate 996 997) ""0b1111100100"" 0.001)
    (check-within (candidate 560 851) ""0b1011000010"" 0.001)
    (check-within (candidate 185 546) ""0b101101110"" 0.001)
    (check-within (candidate 362 496) ""0b110101101"" 0.001)
    (check-within (candidate 350 902) ""0b1001110010"" 0.001)
    (check-within (candidate 197 233) ""0b11010111"" 0.001)
    (check-within (candidate 7 5) -1 0.001)
    (check-within (candidate 5 1) -1 0.001)
    (check-within (candidate 5 5) ""0b101"" 0.001)
))

(test-humaneval)"
HumanEval_104,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Nodyn: Dylai'r rhestr a ddychwelwyd gael ei threfnu mewn trefn gynyddol.;;elfennau nad oes ganddynt unrhyw ddigid hyd yn oed.;;Wedi rhoi rhestr o integrau cadarnhaol x. dychwelyd rhestr sortio o'r holl ;; >>> (unique_digits (list 15 33 1422 1))
;; (list 1 15 33)
;; >>> (unique_digits (list 152 323 1422 10))
;; (list )
(define (unique_digits x)
","#lang racket

(define (has-even-digit? n)
  (let loop ((n n))
    (cond
      [(zero? n) #f]
      [(even? (modulo n 10)) #t]
      [else (loop (quotient n 10))])))

(define (unique_digits x)
  (sort 
   (filter 
    (lambda (n) (not (has-even-digit? n)))
    x)
   <))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate unique_digits))
    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)
    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)
    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)
    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)
))

(test-humaneval)"
HumanEval_105,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Un, dau, tri, pedair, pum, chwe, saith, wyth, naw.;;gwrthdroi'r rhestr a gafwyd, ac yna disodli pob rhif gan ei henw cyfatebol o ;;Wedi rhoi rhestr o integers, sortio'r integers sydd rhwng 1 a 9 yn cynnwys, ;; >>> (by_length (list 2 1 1 4 5 8 2 3))
;; (list ""Eight"" ""Five"" ""Four"" ""Three"" ""Two"" ""Two"" ""One"" ""One"")
;;   If the list is empty, return an empty list:
;; >>> (by_length (list ))
;; (list )
;;   If the list has any strange number ignore it:
;; >>> (by_length (list 1 -1 55))
;; (list ""One"")
(define (by_length arr)
","(define (by_length arr)
  (define digit-names
    (list ""One"" ""Two"" ""Three"" ""Four"" ""Five"" ""Six"" ""Seven"" ""Eight"" ""Nine""))
  
  (map (lambda (n) (list-ref digit-names (- n 1)))
       (reverse (sort (filter (lambda (x) (and (>= x 1) (<= x 9))) arr) <))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate by_length))
    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list ""Eight"" ""Five"" ""Four"" ""Three"" ""Two"" ""Two"" ""One"" ""One"") 0.001)
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 1 -1 55)) (list ""One"") 0.001)
    (check-within (candidate (list 1 -1 3 2)) (list ""Three"" ""Two"" ""One"") 0.001)
    (check-within (candidate (list 9 4 8)) (list ""Nine"" ""Eight"" ""Four"") 0.001)
))

(test-humaneval)"
HumanEval_106,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;y ffactoriol i yw lluosiad y rhifau o 1 i i (1 * 2 * ... * i).;;i yn dechrau o 1. ;;neu gyfanswm y rhifau o 1 i i fel arall. ;;ac yn dychwelyd rhestr o faint n, fel bod gwerth yr elfen yn y mynegai i yn y ffactoriol o i os yw i hyd yn oed ;;Defnyddiwch y swyddogaeth f sy'n cymryd n fel paramedr, ;; >>> (f 5)
;; (list 1 2 6 24 15)
(define (f n)
","(define (factorial x)
  (if (zero? x)
      1
      (* x (factorial (- x 1)))))

(define (sum-to x)
  (foldl + 0 (range 1 (+ x 1))))

(define (f n)
  (map (lambda (i)
         (if (even? i)
             (factorial i)
             (sum-to i)))
       (range 1 (+ n 1))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate f))
    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)
    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)
    (check-within (candidate 1) (list 1) 0.001)
    (check-within (candidate 3) (list 1 2 6) 0.001)
))

(test-humaneval)"
HumanEval_107,cym_Latn,rkt,"#lang racket

;;Enghraifft 1: ;;palindromau rhif cyfan sy'n dod o fewn y ystod ((1, n), yn cynnwys. ;;Gan roi rhif gyfan bositif n, dychwelyd rhestr sydd â nifer o hyd yn oed a'r anhygoel ;; >>> (even_odd_palindrome 3)
;; (list 1 2)
;;     Explanation:
;;     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
;; Example 2:
;; >>> (even_odd_palindrome 12)
;; (list 4 6)
;;     Explanation:
;;     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
;; Note:
;;     1. 1 <= n <= 10^3
;;     2. returned list has the number of even and odd integer palindromes respectively.
(define (even_odd_palindrome n)
","#lang racket

(define (is-palindrome? num)
  (let ([num-str (number->string num)])
    (string=? num-str (string-reverse num-str))))

(define (even_odd_palindrome n)
  (define even-count 0)
  (define odd-count 0)
  (for ([i (in-range 1 (+ n 1))])
    (when (is-palindrome? i)
      (if (even? i)
          (set! even-count (+ even-count 1))
          (set! odd-count (+ odd-count 1)))))
  (list even-count odd-count))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate even_odd_palindrome))
    (check-within (candidate 123) (list 8 13) 0.001)
    (check-within (candidate 12) (list 4 6) 0.001)
    (check-within (candidate 3) (list 1 2) 0.001)
    (check-within (candidate 63) (list 6 8) 0.001)
    (check-within (candidate 25) (list 5 6) 0.001)
    (check-within (candidate 19) (list 4 6) 0.001)
    (check-within (candidate 9) (list 4 5) 0.001)
    (check-within (candidate 1) (list 0 1) 0.001)
))

(test-humaneval)"
HumanEval_108,cym_Latn,rkt,"#lang racket

;;er enghraifft, mae gan -123 ddifrifau wedi'u llofnodi -1, 2, a 3. ;;Os yw rhif yn negyddol, yna bydd ei digid cyntaf wedi'i lofnodi yn negyddol: ;;nifer yr elfennau sydd â chyfanswm o ddifrifau > 0. ;;Ysgrifennwch swyddogaeth count_nums sy'n cymryd rhestr o integrau ac yn dychwelyd ;; >>> (count_nums (list ))
;; 0
;; >>> (count_nums (list -1 11 -11))
;; 1
;; >>> (count_nums (list 1 1 2))
;; 3
(define (count_nums arr)
","(define (sum-of-digits n)
  (define abs-n (abs n))
  (define (sum-helper num)
    (if (zero? num)
        0
        (+ (modulo num 10) (sum-helper (quotient num 10)))))
  (if (negative? n)
      (- (sum-helper abs-n (* 10 (floor-quotient abs-n 10))))
      (sum-helper abs-n)))

(define (count_nums arr)
  (define (count-helper lst count)
    (cond
      [(empty? lst) count]
      [(> (sum-of-digits (first lst)) 0) (count-helper (rest lst) (+ 1 count))]
      [else (count-helper (rest lst) count)]))
  (count-helper arr 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate count_nums))
    (check-within (candidate (list )) 0 0.001)
    (check-within (candidate (list -1 -2 0)) 0 0.001)
    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)
    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)
    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)
    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)
    (check-within (candidate (list 0 1)) 1 0.001)
    (check-within (candidate (list 1)) 1 0.001)
))

(test-humaneval)"
HumanEval_109,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Nodyn: Mae'r rhestr a roddir yn sicr o fod â elfennau unigryw.;;Os yw'r rhestr a roddir yn wag yna dychwelwch #t. ;;yna dychwelyd #t arall dychwelyd #f. ;;Os yw'n bosibl cael y rhestr drefnus trwy wneud y gweithrediad uchod ;;y safle cychwyn yn y rhestr, sef 0eg index. ;;Bydd yr elfen olaf yn cael ei symud i ;;Mae un gweithrediad symud i'r dde yn golygu symud yr holl elfennau o'r rhestr am un.;;Gallwch wneud gwaith newid i'r dde unrhyw nifer o weithiau.;;y gweithrediad canlynol ar y rhestr a roddir: ;;mae'n bosibl cael rhestr wedi'i sortio mewn trefn nad yw'n gostwng trwy gyflawni ;;Bydd rhifau yn y rhestr yn cael eu trefnu'n ddamweiniol.;;Mae gennym restr 'arr' o N o integers arr[1], arr[2], ..., arr[N].;; >>> (move_one_ball (list 3 4 5 1 2))
;; #t
;; Explanation: By performin 2 right shift operations, non-decreasing order can
;;              be achieved for the given list.
;; >>> (move_one_ball (list 3 5 4 1 2))
;; #f
;; Explanation:It is not possible to get non-decreasing order for the given
;;             list by performing any number of right shift operations.
(define (move_one_ball arr)
","(define (move_one_ball arr)
  (define n (length arr))
  (define (is-non-decreasing lst)
    (or (null? lst) (null? (cdr lst))
        (and (<= (car lst) (cadr lst)) (is-non-decreasing (cdr lst)))))
  (define (can-be-sorted-by-shifting lst shifts)
    (if (is-non-decreasing lst)
        #t
        (if (= shifts n)
            #f
            (can-be-sorted-by-shifting (append (list (last lst)) (take lst (- n 1))) (+ shifts 1)))))
  (if (null? arr)
      #t
      (can-be-sorted-by-shifting arr 0)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate move_one_ball))
    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)
    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)
    (check-within (candidate (list 4 3 1 2)) #f 0.001)
    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)
    (check-within (candidate (list )) #t 0.001)
))

(test-humaneval)"
HumanEval_110,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Fel arall, dychwelwch ""NO"". ;;i fod yr holl elfennau o lst1 yn gyfartal, dychwelyd ""YY"". ;;Os yw'n bosibl i gyfnewid elfennau rhwng y lst1 a lst2 i wneud ;;Nid oes terfyn ar nifer yr elfennau a gyfnewidir rhwng lst1 a lst2. ;;rhwng nhw i wneud ll1 rhestr o rifiau par yn unig.;;ac yn penderfynu a yw'n bosibl cynnal cyfnewid elfennau ;;Yn y broblem hon, byddwch yn gweithredu swyddogaeth sy'n cymryd dau restr o rifau, ;; >>> (exchange (list 1 2 3 4) (list 1 2 3 4))
;; ""YES""
;; >>> (exchange (list 1 2 3 4) (list 1 5 3 4))
;; ""NO""
;; It is assumed that the input lists will be non-empty.
(define (exchange lst1 lst2)
","#lang racket

(define (is-even n)
  (= (modulo n 2) 0))

(define (exchange lst1 lst2)
  (define evens-lst1 (filter is-even lst1))
  (define odds-lst1 (filter (lambda (x) (not (is-even x))) lst1))
  (define evens-lst2 (filter is-even lst2))
  
  (if (>= (+ (length evens-lst1) (length evens-lst2)) (length lst1))
      ""YES""
      ""NO""))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate exchange))
    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) ""YES"" 0.001)
    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) ""NO"" 0.001)
    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) ""YES"" 0.001)
    (check-within (candidate (list 5 7 3) (list 2 6 4)) ""YES"" 0.001)
    (check-within (candidate (list 5 7 3) (list 2 6 3)) ""NO"" 0.001)
    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) ""NO"" 0.001)
    (check-within (candidate (list 100 200) (list 200 200)) ""YES"" 0.001)
))

(test-humaneval)"
HumanEval_111,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Os oes sawl llythyren yn cael yr un achosion, dychwelwch yr holl lythrennau. ;;o'r llythyr sydd â'r nifer fwyaf o ailadrodd ac sy'n cynnwys y cyfrif cyfatebol. ;;Gan fod llinyn yn cynrychioli llythrennau bach wedi'u gwahanu gan leoliadau, dychwelyd hash ;; >>> (histogram ""a b c"")
;; #hash((""a"" .  1) (""b"" .  1) (""c"" .  1))
;; >>> (histogram ""a b b a"")
;; #hash((""a"" .  2) (""b"" .  2))
;; >>> (histogram ""a b c a b"")
;; #hash((""a"" .  2) (""b"" .  2))
;; >>> (histogram ""b b b b a"")
;; #hash((""b"" .  4))
;; >>> (histogram """")
;; #hash()
(define (histogram test)
","(define (histogram test)
  (define words (string-split test))
  (define occurrences (make-hash))
  
  (for ([word words])
    (hash-update! occurrences word (lambda (x) (+ x 1)) 0))
  
  (define max-count
    (apply max (hash-values occurrences)))
  
  (define result (make-hash))
  
  (for ([(key val) (in-hash occurrences)])
    (when (= val max-count)
      (hash-set! result key val)))
  
  result)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate histogram))
    (check-within (candidate ""a b b a"") #hash((""a"" .  2) (""b"" .  2)) 0.001)
    (check-within (candidate ""a b c a b"") #hash((""a"" .  2) (""b"" .  2)) 0.001)
    (check-within (candidate ""a b c d g"") #hash((""a"" .  1) (""b"" .  1) (""c"" .  1) (""d"" .  1) (""g"" .  1)) 0.001)
    (check-within (candidate ""r t g"") #hash((""r"" .  1) (""t"" .  1) (""g"" .  1)) 0.001)
    (check-within (candidate ""b b b b a"") #hash((""b"" .  4)) 0.001)
    (check-within (candidate ""r t g"") #hash((""r"" .  1) (""t"" .  1) (""g"" .  1)) 0.001)
    (check-within (candidate """") #hash() 0.001)
    (check-within (candidate ""a"") #hash((""a"" .  1)) 0.001)
))

(test-humaneval)"
HumanEval_112,cym_Latn,rkt,"#lang racket

;;Enghraifft ;;Dylech ddychwelyd rhestr sy'n cynnwys y llinyn canlyniad a #t/#f ar gyfer y cof. ;;Gelwir llinyn yn palindrom os yw'n darllen yr un ffordd yn ôl ac ymlaen.;;yna gwiriwch a yw'r llinyn canlyniad yn palindrom. ;;Rydym yn cael dau llinynnau s ac c, mae'n rhaid i chi ddileu'r holl gymeriadau yn s sy'n gyfartal i unrhyw gymeriad yn c ;;Gweithrediad ;; >>> (reverse_delete ""abcde"" ""ae"")
;; (list ""bcd"" #f)
;; >>> (reverse_delete ""abcdef"" ""b"")
;; (list ""acdef"" #f)
;; >>> (reverse_delete ""abcdedcba"" ""ab"")
;; (list ""cdedc"" #t)
(define (reverse_delete s c)
","#lang racket

(define (reverse_delete s c)
  (let* ([chars-to-delete (set (string->list c))]
         [filtered-string (list->string (filter (lambda (ch) (not (set-member? chars-to-delete ch)))
                                                (string->list s)))]
         [is-palindrome (= (string->list filtered-string)
                           (reverse (string->list filtered-string)))])
    (list filtered-string is-palindrome)))

;; Example usage:
(reverse_delete ""abcde"" ""ae"")   ; => (list ""bcd"" #f)
(reverse_delete ""abcdef"" ""b"")   ; => (list ""acdef"" #f)
(reverse_delete ""abcdedcba"" ""ab"") ; => (list ""cdedc"" #t)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate reverse_delete))
    (check-within (candidate ""abcde"" ""ae"") (list ""bcd"" #f) 0.001)
    (check-within (candidate ""abcdef"" ""b"") (list ""acdef"" #f) 0.001)
    (check-within (candidate ""abcdedcba"" ""ab"") (list ""cdedc"" #t) 0.001)
    (check-within (candidate ""dwik"" ""w"") (list ""dik"" #f) 0.001)
    (check-within (candidate ""a"" ""a"") (list """" #t) 0.001)
    (check-within (candidate ""abcdedcba"" """") (list ""abcdedcba"" #t) 0.001)
    (check-within (candidate ""abcdedcba"" ""v"") (list ""abcdedcba"" #t) 0.001)
    (check-within (candidate ""vabba"" ""v"") (list ""abba"" #t) 0.001)
    (check-within (candidate ""mamma"" ""mia"") (list """" #t) 0.001)
))

(test-humaneval)"
HumanEval_113,cym_Latn,rkt,"#lang racket

;;o ddigiteu anhygoel yn y llinell i'th y mewnbwn.;;llinell i o'r mewnbwn. "" lle dylai'r holl i gael eu disodli gan y rhif ;;Dylai pob elfen i o'r allbwn fod yn ""y nifer o elfennau anhygoel yn y ;;Gan gael rhestr o ryseitiau, lle mae pob ryseit yn cynnwys digidiau yn unig, dychwelyd rhestr. ;; >>> (odd_count (list ""1234567""))
;; (list ""the number of odd elements 4n the str4ng 4 of the 4nput."")
;; >>> (odd_count (list ""3"" ""11111111""))
;; (list ""the number of odd elements 1n the str1ng 1 of the 1nput."" ""the number of odd elements 8n the str8ng 8 of the 8nput."")
(define (odd_count lst)
","#lang racket

(define (count-odd-digits s)
  (length (filter (λ (ch) (member ch '(#\1 #\3 #\5 #\7 #\9))) s)))

(define (replace-i-with-odd s odd-count)
  (regexp-replace* #px""i"" s (number->string odd-count)))

(define (odd_count lst)
  (map (λ (s)
         (let ([odd-count (count-odd-digits s)])
           (replace-i-with-odd ""the number of odd elements in the string i of the input."" odd-count)))
       lst))

;; Test cases
(odd_count (list ""1234567"")) ;=> (list ""the number of odd elements 4n the str4ng 4 of the 4nput."")
(odd_count (list ""3"" ""11111111"")) ;=> (list ""the number of odd elements 1n the str1ng 1 of the 1nput."" ""the number of odd elements 8n the str8ng 8 of the 8nput."")","(require rackunit)

(define (test-humaneval) 

  (let (( candidate odd_count))
    (check-within (candidate (list ""1234567"")) (list ""the number of odd elements 4n the str4ng 4 of the 4nput."") 0.001)
    (check-within (candidate (list ""3"" ""11111111"")) (list ""the number of odd elements 1n the str1ng 1 of the 1nput."" ""the number of odd elements 8n the str8ng 8 of the 8nput."") 0.001)
    (check-within (candidate (list ""271"" ""137"" ""314"")) (list ""the number of odd elements 2n the str2ng 2 of the 2nput."" ""the number of odd elements 3n the str3ng 3 of the 3nput."" ""the number of odd elements 2n the str2ng 2 of the 2nput."") 0.001)
))

(test-humaneval)"
HumanEval_114,cym_Latn,rkt,"#lang racket

;;Enghraifft ;;o nums. ;;O ystyried rhestr o gyfnodau cyfan, darganfyddwch y cyfanswm lleiaf o unrhyw is-lened nad yw'n wag ;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
","(define (minSubArraySum nums)
  (define (find-min-sum lst)
    (define (helper current-sum min-sum rest)
      (cond
        [(null? rest) min-sum]
        [else
         (let* ([new-current-sum (+ current-sum (car rest))]
                [new-min-sum (min min-sum new-current-sum (car rest))])
           (helper (max 0 new-current-sum) new-min-sum (cdr rest)))]))
    (helper 0 (first lst) lst))
  (find-min-sum nums))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)
    (check-within (candidate (list -1 -2 -3)) -6 0.001)
    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)
    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)
    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)
    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)
    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)
    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)
    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)
    (check-within (candidate (list -10)) -10 0.001)
    (check-within (candidate (list 7)) 7 0.001)
    (check-within (candidate (list 1 -1)) -1 0.001)
))

(test-humaneval)"
HumanEval_115,cym_Latn,rkt,"#lang racket

;;Enghraifft 1: ;;Cyflwyno'r nifer o weithiau y mae angen i chi i lawr y bwced.;;Eich tasg yw defnyddio'r bwced i golchi'r pwll.;;ac mae gan bob bwced yr un gallu.;;Mae gan bob ffynnon bwthyn cyfatebol y gellir ei ddefnyddio i dynnu dŵr ohono, ;;ac mae pob 1 mewn rheng yn cynrychioli un uned o ddŵr. ;;Mae grid llym-gyfeiriad o ffynhonnau wedi'i roi i chi. Mae pob llinell yn cynrychioli un ffynnon, ;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1)
;; 6
;; Example 2:
;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2)
;; 5
;; Example 3:
;; >>> (max_fill (list (list 0 0 0) (list 0 0 0)) 5)
;; 0
;; Constraints:
;;     * all wells have the same length
;;     * 1 <= grid.length <= 10^2
;;     * 1 <= grid[:,1].length <= 10^2
;;     * grid[i][j] -> 0 | 1
;;     * 1 <= capacity <= 10
(define (max_fill grid capacity)
","(define (max_fill grid capacity)
  (define (count-ones row)
    (foldl (lambda (x acc) (+ x acc))
           0
           row))
  (define total-water (foldl (lambda (row acc) (+ (count-ones row) acc))
                             0
                             grid))
  (ceiling (/ total-water capacity)))

;; Testing the function with provided examples
(max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) ; => 6
(max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) ; => 5
(max_fill (list (list 0 0 0) (list 0 0 0)) 5) ; => 0","(require rackunit)

(define (test-humaneval) 

  (let (( candidate max_fill))
    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)
    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)
    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)
    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)
    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)
))

(test-humaneval)"
HumanEval_116,cym_Latn,rkt,"#lang racket

;;Rhaid ei weithredu fel hyn: ;;Ar gyfer nifer tebyg o unedau, sortio yn seiliedig ar werth deciwmol. ;;nifer yr unedau yn eu cynrychiolaeth ddynol mewn trefn gynyddol. ;;Yn y Kata hwn, mae'n rhaid i chi sortio rhestr o integrau an-negyddol yn ôl ;; >>> (sort_array (list 1 5 2 3 4))
;; (list 1 2 3 4 5)
;; >>> (sort_array (list -2 -3 -4 -5 -6))
;; (list -6 -5 -4 -3 -2)
;; >>> (sort_array (list 1 0 2 3 4))
;; (list 0 1 2 3 4)
(define (sort_array arr)
","(define (count-ones n)
  (let loop ([n n] [count 0])
    (if (= n 0)
        count
        (loop (arithmetic-shift n -1) (+ count (bitwise-and n 1))))))

(define (sort-key n)
  (list (count-ones n) n))

(define (sort-array arr)
  (sort arr #:key sort-key #:cache-keys? #t))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_array))
    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)
    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)
    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)
    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)
    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)
    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)
))

(test-humaneval)"
HumanEval_117,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Nodyn: gallwch gymryd yn ganiataol bod y llinell mewnbwn yn cynnwys llythrennau a gofod yn unig.;;Os yw'r llinyn s yn wag yna dylai'r swyddogaeth ddychwelyd rhestr wag. ;;n gwnsonedd, er mwyn i'r geiriau hyn ymddangos yn y llinell s. ;;swyddogaeth sy'n dychwelyd rhestr o'r holl eiriau o string s sy'n cynnwys yn union ;;Gan roi llinyn s a rhif naturiol n, rydych wedi cael y dasg i weithredu ;; >>> (select_words ""Mary had a little lamb"" 4)
;; (list ""little"")
;; >>> (select_words ""Mary had a little lamb"" 3)
;; (list ""Mary"" ""lamb"")
;; >>> (select_words ""simple white space"" 2)
;; (list )
;; >>> (select_words ""Hello world"" 4)
;; (list ""world"")
;; >>> (select_words ""Uncle sam"" 3)
;; (list ""Uncle"")
(define (select_words s n)
","(define (select_words s n)
  (define consonants '(#\b #\c #\d #\f #\g #\h #\j #\k #\l #\m #\n #\p #\q #\r #\s #\t #\v #\w #\x #\y #\z
                      #\B #\C #\D #\F #\G #\H #\J #\K #\L #\M #\N #\P #\Q #\R #\S #\T #\V #\W #\X #\Y #\Z))

  (define (count-consonants word)
    (length (filter (lambda (char) (member char consonants)) (string->list word))))

  (let ((words (string-split s "" "")))
    (filter (lambda (word)
              (= (count-consonants word) n))
            words)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate select_words))
    (check-within (candidate ""Mary had a little lamb"" 4) (list ""little"") 0.001)
    (check-within (candidate ""Mary had a little lamb"" 3) (list ""Mary"" ""lamb"") 0.001)
    (check-within (candidate ""simple white space"" 2) (list ) 0.001)
    (check-within (candidate ""Hello world"" 4) (list ""world"") 0.001)
    (check-within (candidate ""Uncle sam"" 3) (list ""Uncle"") 0.001)
    (check-within (candidate """" 4) (list ) 0.001)
    (check-within (candidate ""a b c d e f"" 1) (list ""b"" ""c"" ""d"" ""f"") 0.001)
))

(test-humaneval)"
HumanEval_118,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Gallwch gymryd yn ganiataol bod y llinell a roddir yn cynnwys llythyren Saesneg yn unig.;;dod o hyd i unrhyw un o'r llaisiau sy'n bodloni'r amod uchod.;;Nid yw llefnau yn y dechrau a'r diwedd yn cyfrif. Dychwelyd llinell wag os nad ydych wedi gwneud hynny.;;dau gyd-gysylltiad o ochr dde'r gair (gwybodaeth am achosion). ;;Mae gair yn cael ei roi i chi. Eich tasg yw dod o hyd i'r llais mwyaf agos sy'n sefyll rhwng y ddau.;; >>> (get_closest_vowel ""yogurt"")
;; ""u""
;; >>> (get_closest_vowel ""FULL"")
;; ""U""
;; >>> (get_closest_vowel ""quick"")
;; """"
;; >>> (get_closest_vowel ""ab"")
;; """"
(define (get_closest_vowel word)
","(define (get_closest_vowel word)
  (define vowels (set ""a"" ""e"" ""i"" ""o"" ""u"" ""A"" ""E"" ""I"" ""O"" ""U""))
  
  (define (helper word i)
    (if (< i 1)
        """"
        (let ([curr-char (string-ref word i)]
              [prev-char (string-ref word (- i 1))]
              [next-char (string-ref word (+ i 1))])
          (if (and (set-member? vowels curr-char)
                   (not (set-member? vowels prev-char))
                   (not (set-member? vowels next-char)))
              (string curr-char)
              (helper word (- i 1))))))

  (if (< (string-length word) 3)
      """"
      (helper word (- (string-length word) 2))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_closest_vowel))
    (check-within (candidate ""yogurt"") ""u"" 0.001)
    (check-within (candidate ""full"") ""u"" 0.001)
    (check-within (candidate ""easy"") """" 0.001)
    (check-within (candidate ""eAsy"") """" 0.001)
    (check-within (candidate ""ali"") """" 0.001)
    (check-within (candidate ""bad"") ""a"" 0.001)
    (check-within (candidate ""most"") ""o"" 0.001)
    (check-within (candidate ""ab"") """" 0.001)
    (check-within (candidate ""ba"") """" 0.001)
    (check-within (candidate ""quick"") """" 0.001)
    (check-within (candidate ""anime"") ""i"" 0.001)
    (check-within (candidate ""Asia"") """" 0.001)
    (check-within (candidate ""Above"") ""o"" 0.001)
))

(test-humaneval)"
HumanEval_119,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Dychwelyd 'Ydw' os oes ffordd i wneud llinell dda, ac yn dychwelyd 'Na' fel arall. ;;Nid yw ""()) "" yn berthnasol. ;;yn cydbwys. Er enghraifft: mae'r llinyn '(((() ' yn dda, tra bod y llinyn ;;Mae llinyn S yn cael ei ystyried yn dda os a dim ond os yw pob parentheses yn S ;;rhywfaint o drefn, y bydd y llinyn sy'n deillio yn dda.;;Eich gwaith yw i wirio os yw'n bosibl i gyfeirio'r ddau llinynnau mewn ;;parthenes ""("" neu parthenes agos "") "" yn unig. ;;Rydych yn cael rhestr o ddau llinynnau, mae'r ddau llinynnau yn cynnwys agored ;; >>> (match_parens (list ""()("" "")""))
;; ""Yes""
;; >>> (match_parens (list "")"" "")""))
;; ""No""
(define (match_parens lst)
","(define (match-parens lst)
  (define (is-good-string? s)
    (let loop ([s s] [balance 0])
      (cond
        [(empty? s) (= balance 0)]
        [(< balance 0) #f]
        [else
         (loop (cdr s) (+ balance (if (equal? (car s) #\() 1 -1)))])))
  
  (define str1 (list-ref lst 0))
  (define str2 (list-ref lst 1))
  
  (define concatenations
    (list (string-append str1 str2)
          (string-append str2 str1)))
  
  (if (ormap is-good-string? concatenations)
      ""Yes""
      ""No""))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate match_parens))
    (check-within (candidate (list ""()("" "")"")) ""Yes"" 0.001)
    (check-within (candidate (list "")"" "")"")) ""No"" 0.001)
    (check-within (candidate (list ""(()(())"" ""())())"")) ""No"" 0.001)
    (check-within (candidate (list "")())"" ""(()()("")) ""Yes"" 0.001)
    (check-within (candidate (list ""(())))"" ""(()())(("")) ""Yes"" 0.001)
    (check-within (candidate (list ""()"" ""())"")) ""No"" 0.001)
    (check-within (candidate (list ""(()("" ""()))()"")) ""Yes"" 0.001)
    (check-within (candidate (list ""(((("" ""((())"")) ""No"" 0.001)
    (check-within (candidate (list "")(()"" ""(()("")) ""No"" 0.001)
    (check-within (candidate (list "")("" "")("")) ""No"" 0.001)
    (check-within (candidate (list ""("" "")"")) ""Yes"" 0.001)
    (check-within (candidate (list "")"" ""("")) ""Yes"" 0.001)
))

(test-humaneval)"
HumanEval_120,cym_Latn,rkt,"#lang racket

;;Enghraifft 1: ;;o hyd k gyda'r uchafswm o k rhifau mewn arr. ;;Gan roi rhestr arr o integers ac integers k bositif, dychwelyd rhestr sortio ;; >>> (maximum (list -3 -4 5) 3)
;; (list -4 -3 5)
;; Example 2:
;; >>> (maximum (list 4 -4 4) 2)
;; (list 4 4)
;; Example 3:
;; >>> (maximum (list -3 2 1 2 -1 -2 1) 1)
;; (list 2)
;; Note:
;;     1. The length of the list will be in the range of [1, 1000].
;;     2. The elements in the list will be in the range of [-1000, 1000].
;;     3. 0 <= k <= len(arr)
(define (maximum arr k)
","(define (maximum arr k)
  (let ((sorted (sort arr <)))
    (take-right sorted k)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate maximum))
    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)
    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)
    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)
    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)
    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)
    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)
    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)
    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)
    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)
    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)
    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)
))

(test-humaneval)"
HumanEval_121,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;O ystyried rhestr o integrau nad ydynt yn wag, dychwelyd cyfanswm yr holl elfennau anhygoel sydd mewn sefyllfaoedd hyd yn oed.;; >>> (solution (list 5 8 7 1))
;; 12
;; >>> (solution (list 3 3 3 3 3))
;; 9
;; >>> (solution (list 30 13 24 321))
;; 0
(define (solution lst)
","(define (solution lst)
  (define (helper lst idx acc)
    (cond
      [(empty? lst) acc]
      [else
       (let ([current (first lst)])
         (if (and (odd? current) (even? idx))
             (helper (rest lst) (add1 idx) (+ acc current))
             (helper (rest lst) (add1 idx) acc)))]))
  (helper lst 0 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate solution))
    (check-within (candidate (list 5 8 7 1)) 12 0.001)
    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)
    (check-within (candidate (list 30 13 24 321)) 0 0.001)
    (check-within (candidate (list 5 9)) 5 0.001)
    (check-within (candidate (list 2 4 8)) 0 0.001)
    (check-within (candidate (list 30 13 23 32)) 23 0.001)
    (check-within (candidate (list 3 13 2 9)) 3 0.001)
))

(test-humaneval)"
HumanEval_122,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;cyfanswm yr elfennau sydd â dau ddiffyg o'r k elfennau cyntaf o arr ar y mwyaf. ;;Gan fod rhestr nad yw'n wag o rhifau cyfan arr ac rhif cyfan k, dychwelyd ;; >>> (add_elements (list 111 21 3 4000 5 6 7 8 9) 4)
;; 24
;; Constraints:
;;     1. 1 <= len(arr) <= 100
;;     2. 1 <= k <= len(arr)
(define (add_elements arr k)
","#lang racket

(define (add_elements arr k)
  (define (two-digit? n)
    (and (>= n 0)
         (or (<= n 99)
             (>= n -99)
             (= n 0))))
  (define (sum-two-digit lst count acc)
    (if (or (null? lst) (<= count 0))
        acc
        (let ((head (car lst))
              (tail (cdr lst)))
          (if (two-digit? head)
              (sum-two-digit tail (- count 1) (+ acc head))
              (sum-two-digit tail (- count 1) acc)))))
  (sum-two-digit arr k 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate add_elements))
    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)
    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)
    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)
    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)
    (check-within (candidate (list 1) 1) 1 0.001)
))

(test-humaneval)"
HumanEval_123,cym_Latn,rkt,"#lang racket

;;get_odd_collatz(5) yn dychwelyd [1, 5] # Y dilyniant collatz ar gyfer 5 yw [5, 16, 8, 4, 2, 1], felly dim ond 1, a 5 yw'r rhifau anhygoel. ;;Er enghraifft: ;;2. rhestr a ddychwelwyd wedi'i threfnu mewn trefn gynyddol. ;;1. Collatz(1) yw [1]. ;;Nodyn: ;;term a 1. Mae'r dyfalu yn golygu, beth bynnag yw gwerth n, y bydd y dilyniant bob amser yn cyrraedd 1. ;;os yw'r terfyn blaenorol yn anhygoel, mae'r terfyn nesaf yn 3 gwaith y terfyn blaenorol.;;terfyn blaenorol fel a ganlyn: os yw'r terfyn blaenorol yn gyfartal, mae'r terfyn nesaf yn hanner o ;;fel a ganlyn: dechrau gydag unrhyw gyfrif cyflawn positif n. Yna caiff pob term ei gael o'r ;;Mae amheuaeth Collatz yn amheuaeth mewn mathemateg sy'n ymwneud â dilyniant a ddiffiniwyd ;;Gan fod rhif cyfan cadarnhaol n, dychwelyd rhestr drefnedig sy'n cynnwys y rhifau anhygoel mewn dilyniant collatz. ;; >>> (get_odd_collatz 5)
;; (list 1 5)
(define (get_odd_collatz n)
","#lang racket

(define (collatz-sequence n)
  (if (= n 1)
      (list 1)
      (cons n (collatz-sequence (if (even? n)
                                    (/ n 2)
                                    (+ (* 3 n) 1))))))

(define (get-odd-collatz n)
  (sort (filter odd? (collatz-sequence n)) <))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_odd_collatz))
    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)
    (check-within (candidate 5) (list 1 5) 0.001)
    (check-within (candidate 12) (list 1 3 5) 0.001)
    (check-within (candidate 1) (list 1) 0.001)
))

(test-humaneval)"
HumanEval_124,cym_Latn,rkt,"#lang racket

;;4. Dylai'r dyddiad fod yn y fformat: mm-dd-yyyy ;;Ni ddylai'r misoedd fod yn llai na 1 neu'n uwch na 12.;;2. Nid yw'r nifer o ddiwrnodau yn llai na 1 neu'n uwch na 31 diwrnod ar gyfer misoedd 1,3,5,7,8,10,12. Ac nid yw'r nifer o ddiwrnodau yn llai na 1 na'n uwch na 30 diwrnod ar gyfer misoedd 4,6,9,11. Ac, nid yw'r nifer o ddiwrnodau yn llai na 1 na'n uwch na 29 ar gyfer mis 2. ;;1. Nid yw'r llinell ddyddiad yn wag.;;Mae'r dyddiad yn ddilys os yw'r holl reolau canlynol yn cael eu bodloni: ;;yn dychwelyd #t os yw'r dyddiad yn ddilys fel arall #f. ;;Mae'n rhaid i chi ysgrifennu swyddogaeth sy'n dilysu llinyn dyddiad a ;; >>> (valid_date ""03-11-2000"")
;; #t
;; >>> (valid_date ""15-01-2012"")
;; #f
;; >>> (valid_date ""04-0-2040"")
;; #f
;; >>> (valid_date ""06-04-2020"")
;; #t
;; >>> (valid_date ""06/04/2020"")
;; #f
(define (valid_date date)
","#lang racket

(define (valid_date date)
  (define (parse-int str)
    (string->number str))
  
  (define (valid-day? day month)
    (cond
      [(member month '(1 3 5 7 8 10 12)) (and (>= day 1) (<= day 31))]
      [(member month '(4 6 9 11)) (and (>= day 1) (<= day 30))]
      [(= month 2) (and (>= day 1) (<= day 29))]
      [else #f]))

  (define parts (string-split date ""-""))
  (if (not (= (length parts) 3))
      #f
      (let ([month (parse-int (list-ref parts 0))]
            [day (parse-int (list-ref parts 1))]
            [year (parse-int (list-ref parts 2))])
        (and month day year
             (>= month 1) (<= month 12)
             (valid-day? day month)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate valid_date))
    (check-within (candidate ""03-11-2000"") #t 0.001)
    (check-within (candidate ""15-01-2012"") #f 0.001)
    (check-within (candidate ""04-0-2040"") #f 0.001)
    (check-within (candidate ""06-04-2020"") #t 0.001)
    (check-within (candidate ""01-01-2007"") #t 0.001)
    (check-within (candidate ""03-32-2011"") #f 0.001)
    (check-within (candidate """") #f 0.001)
    (check-within (candidate ""04-31-3000"") #f 0.001)
    (check-within (candidate ""06-06-2005"") #t 0.001)
    (check-within (candidate ""21-31-2000"") #f 0.001)
    (check-within (candidate ""04-12-2003"") #t 0.001)
    (check-within (candidate ""04122003"") #f 0.001)
    (check-within (candidate ""20030412"") #f 0.001)
    (check-within (candidate ""2003-04"") #f 0.001)
    (check-within (candidate ""2003-04-12"") #f 0.001)
    (check-within (candidate ""04-2003"") #f 0.001)
))

(test-humaneval)"
HumanEval_125,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;alfabet, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 ;;dylai ei rannu ar gomiau ',' os nad oes comiau yn bodoli dylech ddychwelyd nifer y llythrennau bach gyda drefn anhygoel yn y ;;Wedi rhoi llinell o eiriau, dychwelyd rhestr o eiriau wedi'u rhannu ar leoliadau, os nad oes lleoliadau yn bodoli yn y testun rydych yn ei ;; >>> (split_words ""Hello world!"")
;; (list ""Hello"" ""world!"")
;; >>> (split_words ""Hello,world!"")
;; (list ""Hello"" ""world!"")
;; >>> (split_words ""abcdef"")
;; 3
(define (split_words txt)
","(define (split_words txt)
  (define (split-on-whitespace s)
    (if (regexp-match #px""\\s"" s)
        (regexp-split #px""\\s+"" s)
        #f))
  
  (define (split-on-comma s)
    (if (string-contains? s "","")
        (string-split s "","")
        #f))

  (define (count-odd-order-lower-case s)
    (define (odd-order? c)
      (let ([order (- (char->integer c) (char->integer #\a))])
        (odd? order)))
    (length (filter odd-order? (string->list (string-downcase s)))))

  (or (split-on-whitespace txt)
      (split-on-comma txt)
      (count-odd-order-lower-case txt)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate split_words))
    (check-within (candidate ""Hello world!"") (list ""Hello"" ""world!"") 0.001)
    (check-within (candidate ""Hello,world!"") (list ""Hello"" ""world!"") 0.001)
    (check-within (candidate ""Hello world,!"") (list ""Hello"" ""world,!"") 0.001)
    (check-within (candidate ""Hello,Hello,world !"") (list ""Hello,Hello,world"" ""!"") 0.001)
    (check-within (candidate ""abcdef"") 3 0.001)
    (check-within (candidate ""aaabb"") 2 0.001)
    (check-within (candidate ""aaaBb"") 1 0.001)
    (check-within (candidate """") 0 0.001)
))

(test-humaneval)"
HumanEval_126,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;rhif, dychwelyd #f. Gwiriwch nad oes unrhyw rifiau negyddol ac unig rhifau cyfan. ;;mewn trefn godiadol. Os oes gan y rhestr fwy nag un ddopicyn o'r un peth ;;Wedi rhoi rhestr o rifau, dychwelyd os ydynt yn sortio neu beidio ;; >>> (is_sorted (list 5))
;; #t
;; >>> (is_sorted (list 1 2 3 4 5))
;; #t
;; >>> (is_sorted (list 1 3 2 4 5))
;; #f
;; >>> (is_sorted (list 1 2 3 4 5 6))
;; #t
;; >>> (is_sorted (list 1 2 3 4 5 6 7))
;; #t
;; >>> (is_sorted (list 1 3 2 4 5 6 7))
;; #f
;; >>> (is_sorted (list 1 2 2 3 3 4))
;; #t
;; >>> (is_sorted (list 1 2 2 2 3 4))
;; #f
(define (is_sorted lst)
","#lang racket

(define (is_sorted lst)
  (define (check-sorted lst last-item seen-dupes)
    (cond
      [(empty? lst) (not seen-dupes)]
      [else
       (let ([current (first lst)]
             [rest (rest lst)])
         (cond
           [(< current last-item) #f] ; Not sorted
           [(= current last-item)
            (if seen-dupes
                #f ; More than one duplicate
                (check-sorted rest current #t))]
           [else
            (check-sorted rest current seen-dupes)]))]))
  (or (empty? lst)
      (check-sorted (rest lst) (first lst) #f)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_sorted))
    (check-within (candidate (list 5)) #t 0.001)
    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)
    (check-within (candidate (list 1 3 2 4 5)) #f 0.001)
    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)
    (check-within (candidate (list 1 2 3 4 5 6 7)) #t 0.001)
    (check-within (candidate (list 1 3 2 4 5 6 7)) #f 0.001)
    (check-within (candidate (list )) #t 0.001)
    (check-within (candidate (list 1)) #t 0.001)
    (check-within (candidate (list 3 2 1)) #f 0.001)
    (check-within (candidate (list 1 2 2 2 3 4)) #f 0.001)
    (check-within (candidate (list 1 2 3 3 3 4)) #f 0.001)
    (check-within (candidate (list 1 2 2 3 3 4)) #t 0.001)
    (check-within (candidate (list 1 2 3 4)) #t 0.001)
))

(test-humaneval)"
HumanEval_127,cym_Latn,rkt,"#lang racket

;;[ddyfodion/ddyfodion] sampl: ;;Os nad yw'r ddau gyfnodau yn croesi, dychwelyd ""NO"". ;;fel arall, dychwelyd ""NO"". ;;Os yw hyd y groesfan yn rhif cynta', dychwelyd ""YES"", ;;sy'n ei hyd yn 1, nad yw rhif prif.;;Enghraifft, mae croesiad y cyfnodau (1, 3), (2, 4) yn (2, 3) ;;mae cyfnodau cyflym yn rhif cynta'.;;Eich tasg yw i benderfynu a yw hyd y groesfan y ddau ;;Ar gyfer pob cyfweliad penodol, mae'n cael ei dybio bod ei ddechrau yn llai na neu'n hafal i'w diwedd.;;yn cynnwys dechrau a diwedd. ;;Mae'r cyfnodau a roddir yn gau sy'n golygu bod yr gyfnodau (gan ddechrau, diwedd) ;;lle mae pob cyfweliad yn pâr o integrau. Er enghraifft, cyfweliad = (gan ddechrau, diwedd) = (1, 2).;;Mae gennych ddwy gyfnodau, ;; >>> (intersection (list 1 2) (list 2 3))
;; ""NO""
;; >>> (intersection (list -1 1) (list 0 4))
;; ""NO""
;; >>> (intersection (list -3 -1) (list -5 5))
;; ""YES""
(define (intersection interval1 interval2)
","#lang racket

(define (prime? n)
  (cond
    [(<= n 1) #f]
    [(= n 2) #t]
    [else
     (define (is-divisible d)
       (if (> (* d d) n)
           #f
           (if (= (remainder n d) 0)
               #t
               (is-divisible (+ d 1)))))
     (not (is-divisible 2))]))

(define (intersection interval1 interval2)
  (define start1 (first interval1))
  (define end1 (second interval1))
  (define start2 (first interval2))
  (define end2 (second interval2))
  
  (define inter-start (max start1 start2))
  (define inter-end (min end1 end2))
  
  (define len (- inter-end inter-start))
  
  (if (and (<= inter-start inter-end) (prime? len))
      ""YES""
      ""NO""))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate intersection))
    (check-within (candidate (list 1 2) (list 2 3)) ""NO"" 0.001)
    (check-within (candidate (list -1 1) (list 0 4)) ""NO"" 0.001)
    (check-within (candidate (list -3 -1) (list -5 5)) ""YES"" 0.001)
    (check-within (candidate (list -2 2) (list -4 0)) ""YES"" 0.001)
    (check-within (candidate (list -11 2) (list -1 -1)) ""NO"" 0.001)
    (check-within (candidate (list 1 2) (list 3 5)) ""NO"" 0.001)
    (check-within (candidate (list 1 2) (list 1 2)) ""NO"" 0.001)
    (check-within (candidate (list -2 -2) (list -3 -2)) ""NO"" 0.001)
))

(test-humaneval)"
HumanEval_128,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Nodyn: dychwelyd #f ar gyfer arr gwag. ;;o bob rhif yn y rhestr, a gynrychiolwyd gan 1, -1 neu 0. ;;cyfanswm maint rhifau cyfan a amlwyd â chynhyrchiad yr holl arwyddion ;;Rydych yn cael rhestr arr o integers ac mae angen i chi ddychwelyd ;; >>> (prod_signs (list 1 2 2 -4))
;; 9
;; >>> (prod_signs (list 0 1))
;; 0
;; >>> (prod_signs (list ))
;; #f
(define (prod_signs arr)
","(define (prod_signs arr)
  (if (empty? arr)
      #f
      (let loop ([lst arr] [sum 0] [prod-sign 1])
        (if (empty? lst)
            (* sum prod-sign)
            (let ([n (first lst)])
              (loop (rest lst)
                    (+ sum (abs n))
                    (* prod-sign (cond [(positive? n) 1]
                                       [(negative? n) -1]
                                       [else 0]))))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate prod_signs))
    (check-within (candidate (list 1 2 2 -4)) -9 0.001)
    (check-within (candidate (list 0 1)) 0 0.001)
    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)
    (check-within (candidate (list )) #f 0.001)
    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)
    (check-within (candidate (list -1 1 -1 1)) 4 0.001)
    (check-within (candidate (list -1 1 1 1)) -4 0.001)
    (check-within (candidate (list -1 1 1 0)) 0 0.001)
))

(test-humaneval)"
HumanEval_129,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Dychwelyd rhestr ordeiniedig o'r gwerthoedd ar y celloedd y mae'r llwybr lleiaf yn mynd drwyddo. ;;Mae'n sicr bod yr ateb yn unigryw. ;;lst_A[j] = lst_B[j].;;fel bod lst_A[i] < lst_B[i] ac ar gyfer unrhyw j (1 <= j < i) mae gennym ;;yn fwy na lst_B, mewn geiriau eraill, mae yna gyfrol rhif cyfan i (1 <= i <= k) ;;drwy (rhaid i ni eu galw nhw yn lst_A ac yn lst_B), mae lst_A yn llai o ran llesicolegol ;;ar ôl gwneud y rhestrau ordeiniedig o'r gwerthoedd ar y celloedd y mae A a B yn mynd ;;Mae llwybr A (o hyd k) yn cael ei ystyried yn llai na llwybr B (o hyd k) os yw ;;NI ALLwch fynd oddi ar y grid. ;;yn hollol wahanol).;;Nodwch fod llwybr o hyd k yn golygu ymweld â k o gelloedd yn union (nid ;;celloedd. ;;mewn geiriau eraill, gallwch fynd i gelloedd sy'n rhannu ymyl gyda chi yn gyfredol ;;o unrhyw gelloedd, ac yn bob cam gallwch symud i unrhyw un o'r celloedd cyfagos, ;;Mae'n rhaid i chi ddod o hyd i'r llwybr lleiaf o hyd k yn y grid.;;Mae'r rhif 'inclusive' yn ymddangos un tro yn union ar gelloedd y grid.;;Mae pob celloedd yn y grid yn cynnwys gwerth.;;Gan roi grid gyda N o linellau a N o golofn (N >= 2) a rhif cyfan cadarnhaol k, ;; >>> (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)
;; (list 1 2 1)
;; >>> (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)
;; (list 1)
(define (minPath grid k)
","#lang racket

(define (minPath grid k)
  (define N (length grid))
  
  (define (in-bounds? x y)
    (and (>= x 0) (< x N) (>= y 0) (< y N)))
  
  (define (neighbors x y)
    (filter (lambda (pos) (in-bounds? (car pos) (cadr pos)))
            (list (list (- x 1) y)
                  (list (+ x 1) y)
                  (list x (- y 1))
                  (list x (+ y 1)))))
  
  (define (get-value x y)
    (list-ref (list-ref grid x) y))
  
  (define (find-path path remaining-length)
    (if (= remaining-length 0)
        (list path)
        (let* ((last-pos (car path))
               (x (car last-pos))
               (y (cadr last-pos))
               (neigh (neighbors x y)))
          (flatten
           (map (lambda (n)
                  (find-path (cons n path) (- remaining-length 1)))
                neigh)))))
  
  (define (path-values path)
    (map (lambda (pos) (get-value (car pos) (cadr pos))) path))
  
  (define (all-paths)
    (flatten
     (map (lambda (x)
            (map (lambda (y)
                   (find-path (list (list x y)) (- k 1)))
                 (range N)))
          (range N))))
  
  (define (min-lexico-path-path paths)
    (minimize paths
              (lambda (pathA pathB)
                (lexicographical<
                 (path-values pathA)
                 (path-values pathB)))))
  
  (define (lexicographical< lstA lstB)
    (cond
      [(null? lstA) #f]
      [(null? lstB) #t]
      [(< (car lstA) (car lstB)) #t]
      [(> (car lstA) (car lstB)) #f]
      [else (lexicographical< (cdr lstA) (cdr lstB))]))
  
  (define (minimize lst pred)
    (let loop ([lst lst] [best-so-far (car lst)])
      (cond
        [(null? lst) best-so-far]
        [(pred (car lst) best-so-far) (loop (cdr lst) (car lst))]
        [else (loop (cdr lst) best-so-far)])))
  
  (path-values (min-lexico-path-path (all-paths))))

;; Examples:
;; (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)
;; => (list 1 2 1)
;; (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)
;; => (list 1)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate minPath))
    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)
    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)
    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)
    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)
    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)
    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)
    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)
    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)
    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)
    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)
    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)
))

(test-humaneval)"
HumanEval_130,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;rhifau n + 1 cyntaf o gyfres Tribonacci. ;;Rydych yn cael rhif cyfan an-negyddol n, mae'n rhaid i chi a dychwelyd rhestr o'r ;;= 2 + 3 + 3 = 8 ;;tri(3) = tri(2) + tri(1) + tri(4) ;;tri(4) = 3 ;;tri(2) = 1 + (2 / 2) = 2 ;;Er enghraifft: ;;tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), os yw n yn anhygoel. ;;tri (n) = 1 + n / 2, os yw n yn hyd yn oed. ;;tri(1) = 3 ;;Mae dilyniant Tribonacci yn cael ei ddiffinio gan yr ailgyfeirio: ;;Fodd bynnag, yr hyn nad yw pobl yn gwybod yw cyfieithiad Tribonacci.;;Mae pawb yn gwybod am olrhain Fibonacci, fe'i hastudwyd yn ddwfn gan mathemategwyr yn ;; >>> (tri 3)
;; (list 1 3 2 8)
(define (tri n)
","#lang racket

(define (tri n)
  (define (tribonacci k)
    (cond
      [(= k 1) 3]
      [(even? k) (+ 1 (/ k 2))]
      [else (+ (tribonacci (- k 1))
               (tribonacci (- k 2))
               (tribonacci (+ k 1)))]))
  (map tribonacci (range 1 (+ n 2))))

;; Example usage:
(tri 3) ; should return '(3 2 3 8)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate tri))
    (check-within (candidate 3) (list 1 3 2 8) 0.001)
    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)
    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)
    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)
    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)
    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)
    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)
    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)
    (check-within (candidate 0) (list 1) 0.001)
    (check-within (candidate 1) (list 1 3) 0.001)
))

(test-humaneval)"
HumanEval_131,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Dylai 0 gael ei ddychwelyd os yw'r holl ddigideu'n gyfartal. ;;Gan fod rhif cyfan bositif n, dychwelyd y cynnyrch o'r digidiau anhygoel. ;; >>> (digits 1)
;; 1
;; >>> (digits 4)
;; 0
;; >>> (digits 235)
;; 15
(define (digits n)
","#lang racket

(define (digits n)
  (define (product-of-odds lst)
    (let loop ((lst lst) (product 1) (found-odd? #f))
      (cond
        [(null? lst) (if found-odd? product 0)]
        [(odd? (car lst)) (loop (cdr lst) (* product (car lst)) #t)]
        [else (loop (cdr lst) product found-odd?)])))
  (product-of-odds (map (compose string->number string) (string->list (number->string n)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate digits))
    (check-within (candidate 5) 5 0.001)
    (check-within (candidate 54) 5 0.001)
    (check-within (candidate 120) 1 0.001)
    (check-within (candidate 5014) 5 0.001)
    (check-within (candidate 98765) 315 0.001)
    (check-within (candidate 5576543) 2625 0.001)
    (check-within (candidate 2468) 0 0.001)
))

(test-humaneval)"
HumanEval_132,cym_Latn,rkt,"#lang racket

;;lle mae o leiaf un braced yn y is-gyfeiriad wedi'i gwasgu. ;;Dylai'r swyddogaeth ddychwelyd #t os ac dim ond os oes is-ilyniant dilys o bracsiau ;;Creu swyddogaeth sy'n cymryd llinyn fel mewnbwn sy'n cynnwys braced sgwâr yn unig. ;; >>> (is_nested ""[[]]"")
;; #t
;; >>> (is_nested ""[]]]]]]][[[[[]"")
;; #f
;; >>> (is_nested ""[][]"")
;; #f
;; >>> (is_nested ""[]"")
;; #f
;; >>> (is_nested ""[[][]]"")
;; #t
;; >>> (is_nested ""[[]][["")
;; #t
(define (is_nested string)
","(define (is_nested string)
  (define (check-nesting str depth)
    (cond
      [(empty? str) #f]
      [(> depth 1) #t]
      [else
       (let ([char (first str)])
         (cond
           [(char=? char #\[) (check-nesting (rest str) (+ depth 1))]
           [(char=? char #\]) (and (> depth 0) (check-nesting (rest str) (- depth 1)))]
           [else (check-nesting (rest str) depth)]))]))
  (check-nesting (string->list string) 0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_nested))
    (check-within (candidate ""[[]]"") #t 0.001)
    (check-within (candidate ""[]]]]]]][[[[[]"") #f 0.001)
    (check-within (candidate ""[][]"") #f 0.001)
    (check-within (candidate ""[]"") #f 0.001)
    (check-within (candidate ""[[[[]]]]"") #t 0.001)
    (check-within (candidate ""[]]]]]]]]]]"") #f 0.001)
    (check-within (candidate ""[][][[]]"") #t 0.001)
    (check-within (candidate ""[[]"") #f 0.001)
    (check-within (candidate ""[]]"") #f 0.001)
    (check-within (candidate ""[[]][["") #t 0.001)
    (check-within (candidate ""[[][]]"") #t 0.001)
    (check-within (candidate """") #f 0.001)
    (check-within (candidate ""[[[[[[[["") #f 0.001)
    (check-within (candidate ""]]]]]]]]"") #f 0.001)
))

(test-humaneval)"
HumanEval_133,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;rowndwch bob elfen yn y rhestr i'r int uchaf ((Tafl) yn gyntaf. ;;Mae angen i chi ddychwelyd y cyfanswm o rifiau wedi'u crogi yn y rhestr a roddir, ;;Mae rhestr o rifau yn cael ei roi i chi.;; >>> (lst (list 1.0 2.0 3.0))
;; 14
;; >>> (lst (list 1.0 4.0 9.0))
;; 98
;; >>> (lst (list 1.0 3.0 5.0 7.0))
;; 84
;; >>> (lst (list 1.4 4.2 0.0))
;; 29
;; >>> (lst (list -2.4 1.0 1.0))
;; 6
(define (sum_squares lst)
","#lang racket

(define (sum_squares lst)
  (define (square x) (* x x))
  (apply + (map (compose square ceiling) lst)))

;; Example usage:
;; (sum_squares (list 1.0 2.0 3.0))
;; (sum_squares (list 1.0 4.0 9.0))
;; (sum_squares (list 1.0 3.0 5.0 7.0))
;; (sum_squares (list 1.4 4.2 0.0))
;; (sum_squares (list -2.4 1.0 1.0))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_squares))
    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)
    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)
    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)
    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)
    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)
    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)
    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)
    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)
    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)
    (check-within (candidate (list 0.0)) 0 0.001)
    (check-within (candidate (list -1.0)) 1 0.001)
    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)
))

(test-humaneval)"
HumanEval_134,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Nodyn: Mae ""word"" yn grŵp o gymeriadau wedi'u gwahanu gan leoliad. ;;rhan o air, ac #f fel arall. ;;o llinell benodol yn gymeriad alfabetaidd ac nid yw ;;Creu swyddogaeth sy'n dychwelyd #t os yw'r cymeriad olaf ;; >>> (check_if_last_char_is_a_letter ""apple pie"")
;; #f
;; >>> (check_if_last_char_is_a_letter ""apple pi e"")
;; #t
;; >>> (check_if_last_char_is_a_letter ""apple pi e "")
;; #f
;; >>> (check_if_last_char_is_a_letter """")
;; #f
(define (check_if_last_char_is_a_letter txt)
","#lang racket

(define (check_if_last_char_is_a_letter txt)
  (let ([trimmed (string-trim-right txt)])
    (if (string-empty? trimmed)
        #f
        (let* ([last-char (string-ref trimmed (- (string-length trimmed) 1))]
               [pre-last-char (if (> (string-length trimmed) 1)
                                  (string-ref trimmed (- (string-length trimmed) 2))
                                  #\space)])
          (and (char-alphabetic? last-char)
               (char-whitespace? pre-last-char))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate check_if_last_char_is_a_letter))
    (check-within (candidate ""apple"") #f 0.001)
    (check-within (candidate ""apple pi e"") #t 0.001)
    (check-within (candidate ""eeeee"") #f 0.001)
    (check-within (candidate ""A"") #t 0.001)
    (check-within (candidate ""Pumpkin pie "") #f 0.001)
    (check-within (candidate ""Pumpkin pie 1"") #f 0.001)
    (check-within (candidate """") #f 0.001)
    (check-within (candidate ""eeeee e "") #f 0.001)
    (check-within (candidate ""apple pie"") #f 0.001)
    (check-within (candidate ""apple pi e "") #f 0.001)
))

(test-humaneval)"
HumanEval_135,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;gwerthoedd dyblyg. ;;os nad oes yr elfen hwnnw yn bodoli yna dychwelyd -1. Ni fydd y rhestr a roddwyd yn cynnwys ;;nid yw'n fwy na neu'n hafal i'r elfen sy'n ei flaen yn syth. Os yw'n ;;Creu swyddogaeth sy'n dychwelyd y mynegai mwyaf o elfen sy'n ;; >>> (can_arrange (list 1 2 4 3 5))
;; 3
;; >>> (can_arrange (list 1 2 3))
;; -1
(define (can_arrange arr)
","#lang racket

(define (can_arrange arr)
  (define (helper lst idx)
    (cond
      [(or (null? lst) (null? (cdr lst))) -1]
      [(>= (car lst) (cadr lst)) idx]
      [else (helper (cdr lst) (+ idx 1))]))
  (helper arr 1))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate can_arrange))
    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)
    (check-within (candidate (list 1 2 4 5)) -1 0.001)
    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)
    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)
    (check-within (candidate (list )) -1 0.001)
))

(test-humaneval)"
HumanEval_136,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Os nad oes unrhyw integrau negyddol neu gadarnhaol, dychwelyd fel # f. ;;o rhifau cyfan cadarnhaol mewn rhestr. ;;y mwyaf o integrau negyddol, ac 'b' yw'r lleiaf ;;Creu swyddogaeth sy'n dychwelyd rhestr (a, b), lle mae 'a' yn ;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))
;; (list #f 1)
;; >>> (largest_smallest_integers (list ))
;; (list #f #f)
;; >>> (largest_smallest_integers (list 0))
;; (list #f #f)
(define (largest_smallest_integers lst)
","(define (largest_smallest_integers lst)
  (let loop ([lst lst] 
             [largest-neg #f] 
             [smallest-pos #f])
    (cond
      [(null? lst) (list largest-neg smallest-pos)]
      [else 
       (let ([x (car lst)])
         (cond
           [(< x 0) 
            (loop (cdr lst) 
                  (if (or (not largest-neg) (> x largest-neg)) x largest-neg) 
                  smallest-pos)]
           [(> x 0) 
            (loop (cdr lst) 
                  largest-neg 
                  (if (or (not smallest-pos) (< x smallest-pos)) x smallest-pos))]
           [else 
            (loop (cdr lst) largest-neg smallest-pos)]))])))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate largest_smallest_integers))
    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)
    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)
    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)
    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)
    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)
    (check-within (candidate (list )) (list #f #f) 0.001)
    (check-within (candidate (list 0)) (list #f #f) 0.001)
    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)
    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)
    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)
    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)
))

(test-humaneval)"
HumanEval_137,cym_Latn,rkt,"#lang racket

;;Nodyn: Os yw rhif go iawn yn cael ei gynrychioli fel llinyn, gallai'r pwynt symudol fod yn . neu , ;;Yn dychwelyd #f os yw'r gwerthoedd yn gyfartal. ;;rhifau go iawn, ac yn dychwelyd y newidyn mwy yn ei math newidyn penodol. ;;Creu swyddogaeth sy'n cymryd rhifau cyfan, floats, neu llinynnau sy'n cynrychioli ;; >>> (compare_one 1 2.5)
;; 2.5
;; >>> (compare_one 1 ""2,3"")
;; ""2,3""
;; >>> (compare_one ""5,1"" ""6"")
;; ""6""
;; >>> (compare_one ""1"" 1)
;; #f
(define (compare_one a b)
","(define (compare_one a b)
  (define (parse-number x)
    (cond
      [(integer? x) x]
      [(real? x) x]
      [(string? x)
       (let ([x (string-replace x "","" ""."")])
         (string->number x))]
      [else (error ""Unsupported type"")]))
  (let ([num-a (parse-number a)]
        [num-b (parse-number b)])
    (cond
      [(= num-a num-b) #f]
      [(> num-a num-b) a]
      [else b])))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate compare_one))
    (check-within (candidate 1 2) 2 0.001)
    (check-within (candidate 1 2.5) 2.5 0.001)
    (check-within (candidate 2 3) 3 0.001)
    (check-within (candidate 5 6) 6 0.001)
    (check-within (candidate 1 ""2,3"") ""2,3"" 0.001)
    (check-within (candidate ""5,1"" ""6"") ""6"" 0.001)
    (check-within (candidate ""1"" ""2"") ""2"" 0.001)
    (check-within (candidate ""1"" 1) #f 0.001)
))

(test-humaneval)"
HumanEval_138,cym_Latn,rkt,"#lang racket

;;Enghraifft ;;Asesu a ellir ysgrifennu'r rhif n a roddir fel cyfanswm o union 4 rhif hyd yn oed positif ;; >>> (is_equal_to_sum_even 4)
;; #f
;; >>> (is_equal_to_sum_even 6)
;; #f
;; >>> (is_equal_to_sum_even 8)
;; #t
(define (is_equal_to_sum_even n)
","#lang racket

(define (is_equal_to_sum_even n)
  (and (>= n 8) (even? n)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_equal_to_sum_even))
    (check-within (candidate 4) #f 0.001)
    (check-within (candidate 6) #f 0.001)
    (check-within (candidate 8) #t 0.001)
    (check-within (candidate 10) #t 0.001)
    (check-within (candidate 11) #f 0.001)
    (check-within (candidate 12) #t 0.001)
    (check-within (candidate 13) #f 0.001)
    (check-within (candidate 16) #t 0.001)
))

(test-humaneval)"
HumanEval_139,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;lle mae n > 0 ;;brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! ;;Mae'r ffactoriol Brasil yn cael ei ddiffinio fel: ;; >>> (special_factorial 4)
;; 288
;; The function will receive an integer as input and should return the special
;; factorial of this integer.
(define (special_factorial n)
","#lang racket

(define (factorial n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(define (special_factorial n)
  (if (= n 1)
      1
      (* (factorial n) (special_factorial (- n 1)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate special_factorial))
    (check-within (candidate 4) 288 0.001)
    (check-within (candidate 5) 34560 0.001)
    (check-within (candidate 7) 125411328000 0.001)
    (check-within (candidate 1) 1 0.001)
))

(test-humaneval)"
HumanEval_140,cym_Latn,rkt,"#lang racket

;;yna disodli'r holl ofynion yn olynol â - ;;ac os oes gan llinyn fwy na 2 o leoliadau yn olynol, ;;Gan roi llinell testun, disodli'r holl leoliadau ynddo â is-gwelin, ;; >>> (fix_spaces "" Example"")
;; ""Example""
;; >>> (fix_spaces "" Example 1"")
;; ""Example_1""
;; >>> (fix_spaces "" Example 2"")
;; ""_Example_2""
;; >>> (fix_spaces "" Example 3"")
;; ""_Example-3""
(define (fix_spaces text)
","(define (fix_spaces text)
  (let loop ((chars (string->list text))
             (prev-space? #f)
             (count 0)
             (result '()))
    (match chars
      [(cons c rest)
       (cond
         [(char=? c #\space)
          (if prev-space?
              (loop rest #t (add1 count) result)
              (loop rest #t (add1 count) (cons c result)))]
         [else
          (let ([new-result (cond
                              [(and prev-space? (> count 2)) (cons #\- result)]
                              [(and prev-space? (= count 1)) (cons #\_ result)]
                              [prev-space? (cons #\_ result)]
                              [else result])])
            (loop rest #f 0 (cons c new-result)))])]
      [else
       (let ([final-result (if (and prev-space? (> count 2))
                               (cons #\- result)
                               (if prev-space?
                                   (cons #\_ result)
                                   result))])
         (list->string (reverse final-result)))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate fix_spaces))
    (check-within (candidate ""Example"") ""Example"" 0.001)
    (check-within (candidate ""Mudasir Hanif "") ""Mudasir_Hanif_"" 0.001)
    (check-within (candidate ""Yellow Yellow  Dirty  Fellow"") ""Yellow_Yellow__Dirty__Fellow"" 0.001)
    (check-within (candidate ""Exa   mple"") ""Exa-mple"" 0.001)
    (check-within (candidate ""   Exa 1 2 2 mple"") ""-Exa_1_2_2_mple"" 0.001)
))

(test-humaneval)"
HumanEval_141,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;- Dylai'r is-string ar ôl y pwynt fod yn un o'r rhain: ['txt', 'exe', 'dll'] ;;y llythrennau Lladin ('a'-'z' ac 'A'-'Z'). ;;- Ni ddylai'r isstring cyn y pwynt fod yn wag, ac mae'n dechrau gyda llythyren o ;;- Mae enw'r ffeil yn cynnwys un dot yn union '.' ;;- Ni ddylai fod mwy na thri digid ('0'-'9') yn enw'r ffeil. ;;yn cael eu bodloni: ;;Ystyrir enw ffeil yn ddilys os yw'r holl amodau canlynol yn cael eu cyflawni ac yn unig.;;'Ie' os yw enw'r ffeil yn ddilys, ac yn dychwelyd 'Na' fel arall. ;;Creu swyddogaeth sy'n cymryd llinyn sy'n cynrychioli enw ffeil, ac yn dychwelyd ;; >>> (file_name_check ""example.txt"")
;; ""Yes""
;; >>> (file_name_check ""1example.dll"")
;; ""No""
(define (file_name_check file_name)
","(define (file_name_check file_name)
  (define valid-extensions (list ""txt"" ""exe"" ""dll""))
  (define parts (string-split file_name #\.))
  (cond
    [(not (= (length parts) 2)) ""No""]
    [else
     (let ([prefix (first parts)]
           [suffix (second parts)])
       (cond
         [(or (string-contains? (substring prefix 0 1) #rx""[^a-zA-Z]"")
              (empty? prefix)
              (> (length (regexp-match* #rx""[0-9]"" prefix)) 3)) ""No""]
         [(not (member suffix valid-extensions)) ""No""]
         [else ""Yes""]))]))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate file_name_check))
    (check-within (candidate ""example.txt"") ""Yes"" 0.001)
    (check-within (candidate ""1example.dll"") ""No"" 0.001)
    (check-within (candidate ""s1sdf3.asd"") ""No"" 0.001)
    (check-within (candidate ""K.dll"") ""Yes"" 0.001)
    (check-within (candidate ""MY16FILE3.exe"") ""Yes"" 0.001)
    (check-within (candidate ""His12FILE94.exe"") ""No"" 0.001)
    (check-within (candidate ""_Y.txt"") ""No"" 0.001)
    (check-within (candidate ""?aREYA.exe"") ""No"" 0.001)
    (check-within (candidate ""/this_is_valid.dll"") ""No"" 0.001)
    (check-within (candidate ""this_is_valid.wow"") ""No"" 0.001)
    (check-within (candidate ""this_is_valid.txt"") ""Yes"" 0.001)
    (check-within (candidate ""this_is_valid.txtexe"") ""No"" 0.001)
    (check-within (candidate ""#this2_i4s_5valid.ten"") ""No"" 0.001)
    (check-within (candidate ""@this1_is6_valid.exe"") ""No"" 0.001)
    (check-within (candidate ""this_is_12valid.6exe4.txt"") ""No"" 0.001)
    (check-within (candidate ""all.exe.txt"") ""No"" 0.001)
    (check-within (candidate ""I563_No.exe"") ""Yes"" 0.001)
    (check-within (candidate ""Is3youfault.txt"") ""Yes"" 0.001)
    (check-within (candidate ""no_one#knows.dll"") ""Yes"" 0.001)
    (check-within (candidate ""1I563_Yes3.exe"") ""No"" 0.001)
    (check-within (candidate ""I563_Yes3.txtt"") ""No"" 0.001)
    (check-within (candidate ""final..txt"") ""No"" 0.001)
    (check-within (candidate ""final132"") ""No"" 0.001)
    (check-within (candidate ""_f4indsartal132."") ""No"" 0.001)
    (check-within (candidate "".txt"") ""No"" 0.001)
    (check-within (candidate ""s."") ""No"" 0.001)
))

(test-humaneval)"
HumanEval_142,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;newid yr eitemau yn y rhestr nad yw eu haintod yn amlwaith o 3 neu 4. Yna bydd y swyddogaeth yn dychwelyd cyfanswm yr holl eitemau. ;;Mae'r swyddogaeth yn amlgyfradd o 3 ac yn ei wneud yn gywbiad i'r rhif cyfan os yw ei is-ennod yn amlgyfradd o 4 ac nid yn amlgyfradd o 3.;;Bydd y swyddogaeth hon yn cymryd rhestr o integrau. Ar gyfer pob cofnod yn y rhestr, bydd y swyddogaeth yn ailgyfeirio'r cofnod rhif cyfan os yw ei index yn ;;"" ;; >>> lst
;; (list 1 2 3)
;; >>> lst
;; (list )
;; >>> lst
;; (list -1 -5 2 -1 -5)
(define (sum_squares lst)
","#lang racket

(define (sum_squares lst)
  (define (helper idx lst)
    (cond
      [(empty? lst) 0]
      [(= (remainder idx 3) 0) (+ (sqr (first lst)) (helper (add1 idx) (rest lst)))]
      [(= (remainder idx 4) 0) (+ (expt (first lst) 3) (helper (add1 idx) (rest lst)))]
      [else (+ (first lst) (helper (add1 idx) (rest lst)))]))
  (helper 0 lst))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sum_squares))
    (check-within (candidate (list 1 2 3)) 6 0.001)
    (check-within (candidate (list 1 4 9)) 14 0.001)
    (check-within (candidate (list )) 0 0.001)
    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)
    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)
    (check-within (candidate (list 0)) 0 0.001)
    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)
    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)
    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)
    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)
    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)
))

(test-humaneval)"
HumanEval_143,cym_Latn,rkt,"#lang racket

;;Enghraifft 1: ;;dylai'r drefn o eiriau yn y llinell newydd fod yr un fath â'r un gwreiddiol. ;;y mae ei hyd yn rhifau cynta', ;;ac mae'n rhaid i chi ddychwelyd llinyn sy'n cynnwys y geiriau o'r frawddeg wreiddiol, ;;mae'r frawddeg yn cynnwys rhai geiriau wedi'u gwahanu gan ofod, ;;Rydych yn cael llinell sy'n cynrychioli frawddeg, ;; >>> (words_in_sentence ""This is a test"")
;; ""is""
;; Example 2:
;; >>> (words_in_sentence ""lets go for swimming"")
;; ""go for""
;; Constraints:
;;     * 1 <= len(sentence) <= 100
;;     * sentence contains only letters
(define (words_in_sentence sentence)
","#lang racket

(define (is-prime? n)
  (cond
    [(< n 2) #f]
    [else (let loop ([i 2])
            (cond
              [(= i n) #t]
              [(= (modulo n i) 0) #f]
              [else (loop (add1 i))]))]))

(define (words_in_sentence sentence)
  (define words (string-split sentence "" ""))
  (define prime-length-words
    (filter (lambda (word)
              (is-prime? (string-length word)))
            words))
  (string-join prime-length-words "" ""))

;; Example usage:
; (words_in_sentence ""This is a test"")       ; Returns ""is""
; (words_in_sentence ""lets go for swimming"") ; Returns ""go for""","(require rackunit)

(define (test-humaneval) 

  (let (( candidate words_in_sentence))
    (check-within (candidate ""This is a test"") ""is"" 0.001)
    (check-within (candidate ""lets go for swimming"") ""go for"" 0.001)
    (check-within (candidate ""there is no place available here"") ""there is no place"" 0.001)
    (check-within (candidate ""Hi I am Hussein"") ""Hi am Hussein"" 0.001)
    (check-within (candidate ""go for it"") ""go for it"" 0.001)
    (check-within (candidate ""here"") """" 0.001)
    (check-within (candidate ""here is"") ""is"" 0.001)
))

(test-humaneval)"
HumanEval_144,cym_Latn,rkt,"#lang racket

;;Gallwch gymryd yn ganiataol bod x, a n yn ffracsiynau dilys, ac nid oes gan sero fel enwadwr.;;<arrif>/<arrif> lle mae'r rhifydd a'r anrhydedd yn rhifau cyfan cadarnhaol.;;fel arall. Mae'r ddau x ac n, yn gynrychiolaeth llinyn o ffracsiwn, ac mae ganddynt y fformat canlynol, ;;x * n. Mae'r swyddogaeth yn dychwelyd #t os yw x * n yn cael ei werthuso i rhif cyfan a #f ;;Eich tasg yw gweithredu swyddogaeth a fydd yn symleiddio'r ymadrodd ;; >>> (simplify ""1/5"" ""5/1"")
;; #t
;; >>> (simplify ""1/6"" ""2/1"")
;; #f
;; >>> (simplify ""7/10"" ""10/2"")
;; #f
(define (simplify x n)
","(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (modulo a b))))

(define (parse-fraction frac)
  (let* ([parts (string-split frac #""/"")]
         [numerator (string->number (first parts))]
         [denominator (string->number (second parts))])
    (cons numerator denominator)))

(define (simplify x n)
  (let* ([x-frac (parse-fraction x)]
         [n-frac (parse-fraction n)]
         [num-product (* (car x-frac) (car n-frac))]
         [den-product (* (cdr x-frac) (cdr n-frac))]
         [common-divisor (gcd num-product den-product)])
    (= (modulo num-product common-divisor)
       (modulo den-product common-divisor)
       0)))

;; Test cases
(simplify ""1/5"" ""5/1"")  ; #t
(simplify ""1/6"" ""2/1"")  ; #f
(simplify ""7/10"" ""10/2"") ; #f","(require rackunit)

(define (test-humaneval) 

  (let (( candidate simplify))
    (check-within (candidate ""1/5"" ""5/1"") #t 0.001)
    (check-within (candidate ""1/6"" ""2/1"") #f 0.001)
    (check-within (candidate ""5/1"" ""3/1"") #t 0.001)
    (check-within (candidate ""7/10"" ""10/2"") #f 0.001)
    (check-within (candidate ""2/10"" ""50/10"") #t 0.001)
    (check-within (candidate ""7/2"" ""4/2"") #t 0.001)
    (check-within (candidate ""11/6"" ""6/1"") #t 0.001)
    (check-within (candidate ""2/3"" ""5/2"") #f 0.001)
    (check-within (candidate ""5/2"" ""3/5"") #f 0.001)
    (check-within (candidate ""2/4"" ""8/4"") #t 0.001)
    (check-within (candidate ""2/4"" ""4/2"") #t 0.001)
    (check-within (candidate ""1/5"" ""5/1"") #t 0.001)
    (check-within (candidate ""1/5"" ""1/5"") #f 0.001)
))

(test-humaneval)"
HumanEval_145,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;trefnu'r rhain yn seiliedig ar eu hadnoddau yn y rhestr wreiddiol.;;Nodyn: os oes sawl eitem gyda chyfanswm tebyg o'u digid, ;;mewn trefn godiadol yn ôl cyfanswm eu digidiau. ;;Ysgrifennwch swyddogaeth sy'n sortio'r rhestr o integrau a roddir ;; >>> (order_by_points (list 1 11 -1 -11 -12))
;; (list -1 -11 1 -12 11)
;; >>> (order_by_points (list ))
;; (list )
(define (order_by_points nums)
","#lang racket

(define (digit-sum n)
  (define abs-n (abs n))
  (if (< abs-n 10)
      abs-n
      (+ (modulo abs-n 10) (digit-sum (quotient abs-n 10)))))

(define (order_by_points nums)
  (sort nums
        (lambda (a b)
          (let ((sum-a (digit-sum a))
                (sum-b (digit-sum b)))
            (if (= sum-a sum-b)
                #t
                (< sum-a sum-b))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate order_by_points))
    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)
    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)
    (check-within (candidate (list )) (list ) 0.001)
    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)
    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)
    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)
))

(test-humaneval)"
HumanEval_146,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;mae rhifau cyntaf a diweddar rhif yn anhygoel (1, 3, 5, 7, 9).;;nifer yr elfennau yn y rhestr sy'n fwy na 10 a'r ddau ;;Ysgrifennwch swyddogaeth sy'n cymryd rhestr o rifau fel mewnbwn ac yn dychwelyd ;; >>> (specialFilter (list 15 -73 14 -15))
;; 1
;; >>> (specialFilter (list 33 -2 -3 45 21 109))
;; 2
(define (specialFilter nums)
","(define (specialFilter nums)
  (define (odd? n)
    (member n '(1 3 5 7 9)))
  (define (check-num n)
    (and (> (abs n) 10)
         (odd? (modulo (abs n) 10))
         (odd? (string->number (substring (number->string (abs n)) 0 1)))))
  (length (filter check-num nums)))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate specialFilter))
    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)
    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)
    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)
    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)
    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)
    (check-within (candidate (list 1)) 0 0.001)
    (check-within (candidate (list )) 0 0.001)
))

(test-humaneval)"
HumanEval_147,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;a a[i] + a[j] + a[k] yn amlwaith o 3. ;;Dychwelyd nifer y tri phrofion (a[i], a[j], a[k]) o a lle i < j < k, ;;Ar gyfer pob i (1 ≤ i ≤ n), gwerth a[i] = i * i - i + 1. ;;Mae rhif cyfan cadarnhaol n wedi'i roi i chi. Mae'n rhaid i chi greu rhestr o rhifau cyfan a o hyd n.;;     >>> (get_max_triples 5)
;;     1
;; Explanation: 
;; a = [1, 3, 7, 13, 21]
;; The only valid triple is (1, 7, 13).
(define (get_max_triples n)
","#lang racket

(define (get_max_triples n)
  (define a
    (for/list ([i (in-range 1 (+ n 1))])
      (+ (* i i) (- i) 1)))
  
  (define count 0)
  
  (for ([i (in-range 0 (- n 2))])
    (for ([j (in-range (+ i 1) (- n 1))])
      (for ([k (in-range (+ j 1) n)])
        (when (zero? (modulo (+ (list-ref a i) (list-ref a j) (list-ref a k)) 3))
          (set! count (+ count 1))))))
  
  count)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_max_triples))
    (check-within (candidate 5) 1 0.001)
    (check-within (candidate 6) 4 0.001)
    (check-within (candidate 10) 36 0.001)
    (check-within (candidate 100) 53361 0.001)
))

(test-humaneval)"
HumanEval_148,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;nid enwau planed cywir.;;Dylai'r swyddogaeth ddychwelyd rhestr wag os yw planet1 neu planet2 ;;y agosatrwydd at yr haul. ;;wedi'i leoli rhwng orbit planed1 a orbit planed2, wedi'i threfnu gan ;;Dylai'r swyddogaeth ddychwelyd rhestr sy'n cynnwys yr holl blanediau y mae eu holiaduron yn ;;Ysgrifennwch swyddogaeth sy'n cymryd dau enw planed fel llinynnau planet1 a planet2. ;;Uranus, Neptun. ;;yw Mercurius, y nesaf yw Venus, yna Ddaear, Mars, Jupiter, Saturn, ;;Mae wyth o blaned yn ein system solar: y rhai agosaf at yr Haul .;; >>> (bf ""Jupiter"" ""Neptune"")
;; (list ""Saturn"" ""Uranus"")
;; >>> (bf ""Earth"" ""Mercury"")
;; ""Venus""
;; >>> (bf ""Mercury"" ""Uranus"")
;; (list ""Venus"" ""Earth"" ""Mars"" ""Jupiter"" ""Saturn"")
(define (bf planet1 planet2)
","#lang racket

(define planets '(""Mercury"" ""Venus"" ""Earth"" ""Mars"" ""Jupiter"" ""Saturn"" ""Uranus"" ""Neptune""))

(define (bf planet1 planet2)
  (let ((index1 (member planet1 planets))
        (index2 (member planet2 planets)))
    (if (and index1 index2)
        (let* ((pos1 (index-of planets planet1))
               (pos2 (index-of planets planet2))
               (start (min pos1 pos2))
               (end (max pos1 pos2)))
          (list->string
            (if (< pos1 pos2)
              (take (drop planets (+ 1 start)) (- end start 1))
              (take (drop planets (min (+ 1 end) (- (length planets) 1))) (max (- start end 1) 1)))))
        '())))

(require rackunit)
(check-equal? (bf ""Jupiter"" ""Neptune"") (list ""Saturn"" ""Uranus""))
(check-equal? (bf ""Earth"" ""Mercury"") ""Venus"")
(check-equal? (bf ""Mercury"" ""Uranus"") (list ""Venus"" ""Earth"" ""Mars"" ""Jupiter"" ""Saturn""))
(check-equal? (bf ""X"" ""Uranus"") '())
(check-equal? (bf ""Mars"" ""X"") '())","(require rackunit)

(define (test-humaneval) 

  (let (( candidate bf))
    (check-within (candidate ""Jupiter"" ""Neptune"") (list ""Saturn"" ""Uranus"") 0.001)
    (check-within (candidate ""Earth"" ""Mercury"") (list ""Venus"") 0.001)
    (check-within (candidate ""Mercury"" ""Uranus"") (list ""Venus"" ""Earth"" ""Mars"" ""Jupiter"" ""Saturn"") 0.001)
    (check-within (candidate ""Neptune"" ""Venus"") (list ""Earth"" ""Mars"" ""Jupiter"" ""Saturn"" ""Uranus"") 0.001)
    (check-within (candidate ""Earth"" ""Earth"") (list ) 0.001)
    (check-within (candidate ""Mars"" ""Earth"") (list ) 0.001)
    (check-within (candidate ""Jupiter"" ""Makemake"") (list ) 0.001)
))

(test-humaneval)"
HumanEval_149,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;Efallai y byddwch yn tybio y bydd yr holl eiriau'n yr un hyd.;;Dylai'r swyddogaeth ddychwelyd rhestr o llinynnau mewn trefn drefnus. ;;Os oes gan ddau air yr un hyd, trefnu'r rhestr yn ôl yr wyddor. ;;Dylai'r rhestr gael ei threfnu gan y rheol honno.;;Dylai'r trefn y rhestr fod yn codi yn ôl hyd pob gair, a chi ;;a gall gynnwys dyblygiadau.;;Mae'r rhestr bob amser yn rhestr o llinellau ac byth yn rhestr o rifau, ;;ac yn dychwelyd y rhestr a gafwyd gyda threfn sortio, ;;yn dileu'r llinellau sydd â hydiau anhygoel oddi wrtho, ;;Ysgrifennwch swyddogaeth sy'n derbyn rhestr o llinellau fel paramedr, ;; >>> (list_sort (list ""aa"" ""a"" ""aaa""))
;; (list ""aa"")
;; >>> (list_sort (list ""ab"" ""a"" ""aaa"" ""cd""))
;; (list ""ab"" ""cd"")
(define (sorted_list_sum lst)
","#lang racket

(define (sorted_list_sum lst)
  (define (even-length? str)
    (even? (string-length str)))
  (define (compare-strings s1 s2)
    (let ((len1 (string-length s1))
          (len2 (string-length s2)))
      (cond
        ((< len1 len2) #t)
        ((> len1 len2) #f)
        (else (string<? s1 s2)))))
  (sort (filter even-length? lst) compare-strings))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate sorted_list_sum))
    (check-within (candidate (list ""aa"" ""a"" ""aaa"")) (list ""aa"") 0.001)
    (check-within (candidate (list ""school"" ""AI"" ""asdf"" ""b"")) (list ""AI"" ""asdf"" ""school"") 0.001)
    (check-within (candidate (list ""d"" ""b"" ""c"" ""a"")) (list ) 0.001)
    (check-within (candidate (list ""d"" ""dcba"" ""abcd"" ""a"")) (list ""abcd"" ""dcba"") 0.001)
    (check-within (candidate (list ""AI"" ""ai"" ""au"")) (list ""AI"" ""ai"" ""au"") 0.001)
    (check-within (candidate (list ""a"" ""b"" ""b"" ""c"" ""c"" ""a"")) (list ) 0.001)
    (check-within (candidate (list ""aaaa"" ""bbbb"" ""dd"" ""cc"")) (list ""cc"" ""dd"" ""aaaa"" ""bbbb"") 0.001)
))

(test-humaneval)"
HumanEval_150,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;rhif prif a dylai ddychwelyd gwerth y fel arall. ;;Rhaglen syml a ddylai ddychwelyd gwerth x os yw n yn ;; >>> (x_or_y 7 34 12)
;; 34
;; >>> (x_or_y 15 8 5)
;; 5
(define (x_or_y n x y)
","#lang racket

(define (is-prime? n)
  (define (is-divisible? a b)
    (= (modulo a b) 0))
  (define (check-divisors-from i)
    (cond
      ((> (* i i) n) true)
      ((is-divisible? n i) false)
      (else (check-divisors-from (+ i 1)))))
  (cond
    ((< n 2) false)
    ((= n 2) true)
    ((is-divisible? n 2) false)
    (else (check-divisors-from 3))))

(define (x_or_y n x y)
  (if (is-prime? n) x y))

;; Examples:
;; (x_or_y 7 34 12)  ; returns 34
;; (x_or_y 15 8 5)  ; returns 5","(require rackunit)

(define (test-humaneval) 

  (let (( candidate x_or_y))
    (check-within (candidate 7 34 12) 34 0.001)
    (check-within (candidate 15 8 5) 5 0.001)
    (check-within (candidate 3 33 5212) 33 0.001)
    (check-within (candidate 1259 3 52) 3 0.001)
    (check-within (candidate 7919 -1 12) -1 0.001)
    (check-within (candidate 3609 1245 583) 583 0.001)
    (check-within (candidate 91 56 129) 129 0.001)
    (check-within (candidate 6 34 1234) 1234 0.001)
    (check-within (candidate 1 2 0) 0 0.001)
    (check-within (candidate 2 2 0) 2 0.001)
))

(test-humaneval)"
HumanEval_151,cym_Latn,rkt,"#lang racket

;;yn y rhestr sy'n anhygoel. esgeuluso rhifau sy'n negyddol neu nad yw integers.;;Wedi rhoi rhestr o rifau, dychwelyd y cyfanswm o sgwâr y rhifau ;; >>> (double_the_difference (list 1 3 2 0))
;; 10
;; >>> (double_the_difference (list -1 -2 0))
;; 0
;; >>> (double_the_difference (list 9 -2))
;; 81
;; >>> (double_the_difference (list 0))
;; 0
;; If the input list is empty, return 0.
(define (double_the_difference lst)
","(define (double_the_difference lst)
  (define (square x) (* x x))
  (define (odd-integer? x) (and (integer? x) (odd? x)))
  (define (valid-number? x) (and (not (negative? x)) (odd-integer? x)))
  (foldl + 0 (map square (filter valid-number? lst))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate double_the_difference))
    (check-within (candidate (list )) 0 0.001)
    (check-within (candidate (list 5.0 4.0)) 25 0.001)
    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)
    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)
    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)
    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)
    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)
))

(test-humaneval)"
HumanEval_152,cym_Latn,rkt,"#lang racket

;;enghraifft: ;;y gwerth yw 0, ac os nad yw, y gwerth yw'r gwahaniaeth absoliwt rhwng y dybiaeth a'r sgôr. ;;Dychwelyd rhestr o'r un hyd yn nodi pa mor bell oddi wrth bob dyfalu oedd. Os ydynt wedi dyfalu'n gywir, ;;Mae gennych ddau restr o sgorio a dyfalu o hyd yr un fath, lle mae pob index yn dangos cyfatebolrwydd.;;Eich tasg yw penderfynu a yw person wedi dyfalu canlyniadau nifer o gemau yn gywir.;;yn sicr yn werth nodi a chymharu.;;Mae'r digwyddiad yn cael ei adnabod o'r diwedd.;;Rwy'n credu ein bod i gyd yn cofio'r teimlad hwnnw pan fydd y canlyniad o ryw hir-ddisgwyliedig;; >>> (compare (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2))
;; (list 0 0 0 0 3 3)
;; >>> (compare (list 0 5 0 0 0 4) (list 4 1 1 0 0 -2))
;; (list 4 4 1 0 0 6)
(define (compare game guess)
","(define (compare game guess)
  (map (lambda (g s) (if (= g s) 0 (abs (- g s)))) game guess))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate compare))
    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)
    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)
    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)
    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)
))

(test-humaneval)"
HumanEval_153,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;(mae ei gryfder yn -1).;;dychwelyd 'Slices.SErviNGSliCes' gan fod 'SErviNGSliCes' yn ehangu cryf ;;['SErviNGSliCes', 'Cheese', 'StuFfed'] yna dylech ;;Er enghraifft, os ydych yn cael ""Slices"" fel y dosbarth a rhestr o'r ;;dewiswch yr un sy'n dod yn gyntaf yn y rhestr. ;;Os oes dau neu fwy o estyniadau gyda'r un cryfder, dylech ;;fformat: ClassName.StrongestExtensionName. ;;Dylech ddod o hyd i'r estyniad cryf ac yn dychwelyd llinyn yn hyn ;;yn enw'r estyniad, caiff y cryfder ei roi gan y darn CAP - SM. ;;llythrennau yn enw'r estyniad, a gadewch i SM fod yn nifer y llythrennau bach ;;cryfder yr estyniad yw'r canlynol: Gadewch i CAP fod yn rhif y llythyren fawr ;;Mae'r estyniadau i'w defnyddio i gludo dosbarthiadau ychwanegol i'r dosbarth.;;Byddwch yn cael enw dosbarth (string) a rhestr o estyniadau.;; >>> (Strongest_Extension ""my_class"" (list ""AA"" ""Be"" ""CC""))
;; ""my_class.AA""
(define (Strongest_Extension class_name extensions)
","#lang racket

(define (Strongest_Extension class_name extensions)
  (define (extension-strength extension)
    (let* ([CAP (length (filter char-uppercase? (string->list extension)))]
           [SM (length (filter char-lowercase? (string->list extension)))])
      (- CAP SM)))
  (define strongest (car extensions))
  (define max-strength (extension-strength strongest))
  (for-each
   (lambda (extension)
     (let ([current-strength (extension-strength extension)])
       (when (> current-strength max-strength)
         (set! strongest extension)
         (set! max-strength current-strength))))
   (cdr extensions))
  (string-append class_name ""."" strongest))

;; Example usage:
;; (Strongest_Extension ""Slices"" (list ""SErviNGSliCes"" ""Cheese"" ""StuFfed""))
;; => ""Slices.SErviNGSliCes""","(require rackunit)

(define (test-humaneval) 

  (let (( candidate Strongest_Extension))
    (check-within (candidate ""Watashi"" (list ""tEN"" ""niNE"" ""eIGHt8OKe"")) ""Watashi.eIGHt8OKe"" 0.001)
    (check-within (candidate ""Boku123"" (list ""nani"" ""NazeDa"" ""YEs.WeCaNe"" ""32145tggg"")) ""Boku123.YEs.WeCaNe"" 0.001)
    (check-within (candidate ""__YESIMHERE"" (list ""t"" ""eMptY"" ""nothing"" ""zeR00"" ""NuLl__"" ""123NoooneB321"")) ""__YESIMHERE.NuLl__"" 0.001)
    (check-within (candidate ""K"" (list ""Ta"" ""TAR"" ""t234An"" ""cosSo"")) ""K.TAR"" 0.001)
    (check-within (candidate ""__HAHA"" (list ""Tab"" ""123"" ""781345"" ""-_-"")) ""__HAHA.123"" 0.001)
    (check-within (candidate ""YameRore"" (list ""HhAas"" ""okIWILL123"" ""WorkOut"" ""Fails"" ""-_-"")) ""YameRore.okIWILL123"" 0.001)
    (check-within (candidate ""finNNalLLly"" (list ""Die"" ""NowW"" ""Wow"" ""WoW"")) ""finNNalLLly.WoW"" 0.001)
    (check-within (candidate ""_"" (list ""Bb"" ""91245"")) ""_.Bb"" 0.001)
    (check-within (candidate ""Sp"" (list ""671235"" ""Bb"")) ""Sp.671235"" 0.001)
))

(test-humaneval)"
HumanEval_154,cym_Latn,rkt,"#lang racket

;;Mae gennych 2 gair. Mae angen i chi ddychwelyd #t os yw'r ail gair neu unrhyw un o'i droi yn is-string yn y gair cyntaf ;; >>> (cycpattern_check ""abcd"" ""abd"")
;; #f
;; >>> (cycpattern_check ""hello"" ""ell"")
;; #t
;; >>> (cycpattern_check ""whassup"" ""psus"")
;; #f
;; >>> (cycpattern_check ""abab"" ""baa"")
;; #t
;; >>> (cycpattern_check ""efef"" ""eeff"")
;; #f
;; >>> (cycpattern_check ""himenss"" ""simen"")
;; #t
(define (cycpattern_check a b)
","(define (cycpattern_check a b)
  (define (is-rotation? s1 s2)
    (let loop ([n (string-length s1)])
      (if (= n (string-length s2))
          #t
          (let ([rotated (string-append (substring s1 (- (string-length s1) 1))
                                        (substring s1 0 (- (string-length s1) 1)))])
            (if (equal? rotated s2)
                #t
                (loop (- n 1)))))))
  (let loop ([n (string-length b)] [original-b b])
    (if (< n 0)
        #f
        (or (string-contains? a original-b)
            (loop (- n 1)
                  (string-append (substring b 1) (substring b 0 1)))))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate cycpattern_check))
    (check-within (candidate ""xyzw"" ""xyw"") #f 0.001)
    (check-within (candidate ""yello"" ""ell"") #t 0.001)
    (check-within (candidate ""whattup"" ""ptut"") #f 0.001)
    (check-within (candidate ""efef"" ""fee"") #t 0.001)
    (check-within (candidate ""abab"" ""aabb"") #f 0.001)
    (check-within (candidate ""winemtt"" ""tinem"") #t 0.001)
))

(test-humaneval)"
HumanEval_155,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;Wedi rhoi rhif cyfan. dychwelyd rhestr sy'n cynnwys nifer y rhifau pari a'r digid yn y drefn honno. ;;     >>> (even_odd_count -12)
;;     (list 1 1)
;;     >>> (even_odd_count 123)
;;     (list 1 2)
(define (even_odd_count num)
","#lang racket

(define (even_odd_count num)
  (let loop ([n (abs num)] [even-count 0] [odd-count 0])
    (cond
      [(zero? n) (list even-count odd-count)]
      [else
       (if (even? (modulo n 10))
           (loop (quotient n 10) (add1 even-count) odd-count)
           (loop (quotient n 10) even-count (add1 odd-count)))])))

;; Example Usage:
;; (even_odd_count -12) => (list 1 1)
;; (even_odd_count 123) => (list 1 2)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate even_odd_count))
    (check-within (candidate 7) (list 0 1) 0.001)
    (check-within (candidate -78) (list 1 1) 0.001)
    (check-within (candidate 3452) (list 2 2) 0.001)
    (check-within (candidate 346211) (list 3 3) 0.001)
    (check-within (candidate -345821) (list 3 3) 0.001)
    (check-within (candidate -2) (list 1 0) 0.001)
    (check-within (candidate -45347) (list 2 3) 0.001)
    (check-within (candidate 0) (list 1 0) 0.001)
))

(test-humaneval)"
HumanEval_156,cym_Latn,rkt,"#lang racket

;;Enghreifftiau: ;;Cyfyngiadau: 1 <= num <= 1000 ;;ac yn ei ddychwelyd mewn llythyren fach. ;;Gan roi rhif cyfan bositif, ceisiwch ei gyfatebol rhifau Rhufeinig fel llinyn, ;; >>> (int_to_mini_roman 19)
;; ""xix""
;; >>> (int_to_mini_roman 152)
;; ""clii""
;; >>> (int_to_mini_roman 426)
;; ""cdxxvi""
(define (int_to_mini_roman number)
","#lang racket

(define (int_to_mini_roman number)
  (define roman-numerals
    '((1000 . ""m"") (900 . ""cm"") (500 . ""d"") (400 . ""cd"")
      (100 . ""c"") (90 . ""xc"") (50 . ""l"") (40 . ""xl"")
      (10 . ""x"") (9 . ""ix"") (5 . ""v"") (4 . ""iv"")
      (1 . ""i"")))

  (define (convert n roman-list result)
    (cond
      [(zero? n) result]
      [(null? roman-list) result]
      [(>= n (caar roman-list))
       (convert (- n (caar roman-list)) roman-list
                (string-append result (cdar roman-list)))]
      [else (convert n (cdr roman-list) result)]))

  (convert number roman-numerals """"))

;; Examples:
;; (int_to_mini_roman 19)  ; => ""xix""
;; (int_to_mini_roman 152) ; => ""clii""
;; (int_to_mini_roman 426) ; => ""cdxxvi""","(require rackunit)

(define (test-humaneval) 

  (let (( candidate int_to_mini_roman))
    (check-within (candidate 19) ""xix"" 0.001)
    (check-within (candidate 152) ""clii"" 0.001)
    (check-within (candidate 251) ""ccli"" 0.001)
    (check-within (candidate 426) ""cdxxvi"" 0.001)
    (check-within (candidate 500) ""d"" 0.001)
    (check-within (candidate 1) ""i"" 0.001)
    (check-within (candidate 4) ""iv"" 0.001)
    (check-within (candidate 43) ""xliii"" 0.001)
    (check-within (candidate 90) ""xc"" 0.001)
    (check-within (candidate 94) ""xciv"" 0.001)
    (check-within (candidate 532) ""dxxxii"" 0.001)
    (check-within (candidate 900) ""cm"" 0.001)
    (check-within (candidate 994) ""cmxciv"" 0.001)
    (check-within (candidate 1000) ""m"" 0.001)
))

(test-humaneval)"
HumanEval_157,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;90 gradd. ;;Triongl gywir-angled yw triongl lle mae un o'r onglau yn un cywir neu ;;mae'r ochr yn ffurfio triongl gywir-angled, #f fel arall. ;;Gan fod hyd y tri ochr o driongl. dychwelyd #t os yw'r tri ;; >>> (right_angle_triangle 3 4 5)
;; #t
;; >>> (right_angle_triangle 1 2 3)
;; #f
(define (right_angle_triangle a b c)
","#lang racket

(define (right_angle_triangle a b c)
  (let* ((sides (list a b c))
         (sorted-sides (sort sides <))
         (x (first sorted-sides))
         (y (second sorted-sides))
         (z (third sorted-sides)))
    (= (+ (* x x) (* y y)) (* z z))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate right_angle_triangle))
    (check-within (candidate 3 4 5) #t 0.001)
    (check-within (candidate 1 2 3) #f 0.001)
    (check-within (candidate 10 6 8) #t 0.001)
    (check-within (candidate 2 2 2) #f 0.001)
    (check-within (candidate 7 24 25) #t 0.001)
    (check-within (candidate 10 5 7) #f 0.001)
    (check-within (candidate 5 12 13) #t 0.001)
    (check-within (candidate 15 8 17) #t 0.001)
    (check-within (candidate 48 55 73) #t 0.001)
    (check-within (candidate 1 1 1) #f 0.001)
    (check-within (candidate 2 2 10) #f 0.001)
))

(test-humaneval)"
HumanEval_158,cym_Latn,rkt,"#lang racket

;;cymeriadau, dychwelyd yr un sy'n dod yn gyntaf yn yr ordrefn lexicograffig. ;;o gymeriadau unigryw. Os oes gan gyfres o gyfresiau unigryw uchafswm o gymeriadau unigryw ;;Mae'r rhestr yn cynnwys geiriau gwahanol.;;Ysgrifennwch swyddogaeth sy'n derbyn rhestr o llinynnau. ;; >>> (find_max (list ""name"" ""of"" ""string""))
;; ""string""
;; >>> (find_max (list ""name"" ""enam"" ""game""))
;; ""enam""
;; >>> (find_max (list ""aaaaaaa"" ""bb"" ""cc""))
;; ""aaaaaaa""
(define (find_max words)
","(define (find_max words)
  (define (unique-char-count word)
    (length (remove-duplicates (string->list word))))
  (define (compare-words w1 w2)
    (let ((count1 (unique-char-count w1))
          (count2 (unique-char-count w2)))
      (cond [(> count1 count2) w1]
            [(< count1 count2) w2]
            [else (if (string<? w1 w2) w1 w2)])))
  (foldl compare-words (first words) (rest words)))

;; Example usage:
(find_max (list ""name"" ""of"" ""string""))  ; => ""string""
(find_max (list ""name"" ""enam"" ""game"")) ; => ""enam""
(find_max (list ""aaaaaaa"" ""bb"" ""cc""))  ; => ""aaaaaaa""","(require rackunit)

(define (test-humaneval) 

  (let (( candidate find_max))
    (check-within (candidate (list ""name"" ""of"" ""string"")) ""string"" 0.001)
    (check-within (candidate (list ""name"" ""enam"" ""game"")) ""enam"" 0.001)
    (check-within (candidate (list ""aaaaaaa"" ""bb"" ""cc"")) ""aaaaaaa"" 0.001)
    (check-within (candidate (list ""abc"" ""cba"")) ""abc"" 0.001)
    (check-within (candidate (list ""play"" ""this"" ""game"" ""of"" ""footbott"")) ""footbott"" 0.001)
    (check-within (candidate (list ""we"" ""are"" ""gonna"" ""rock"")) ""gonna"" 0.001)
    (check-within (candidate (list ""we"" ""are"" ""a"" ""mad"" ""nation"")) ""nation"" 0.001)
    (check-within (candidate (list ""this"" ""is"" ""a"" ""prrk"")) ""this"" 0.001)
    (check-within (candidate (list ""b"")) ""b"" 0.001)
    (check-within (candidate (list ""play"" ""play"" ""play"")) ""play"" 0.001)
))

(test-humaneval)"
HumanEval_159,cym_Latn,rkt,"#lang racket

;;Enghraifft: ;;os nad oes digon o garwts ar ôl, byddwch yn bwyta'r holl garwts sydd wedi'u hachosi, ond byddwch yn dal i fod yn newynog.;;nifer y cwrwres sy'n weddill ar ôl eich prydau bwyd ] ;;dylech ddychwelyd rhestr o [y cyfanswm o garwts a fwytawyd ar ôl eich prydau, ;;ond nawr mae angen i chi fwyta mwy o garwts i gwblhau prydau'r dydd.;;Rydych yn llusgwr newynog, ac rydych eisoes wedi bwyta nifer penodol o garwts, ;; >>> (eat 5 6 10)
;; (list 11 4)
;; >>> (eat 4 8 9)
;; (list 12 1)
;; >>> (eat 1 10 10)
;; (list 11 0)
;; >>> (eat 2 11 5)
;; (list 7 0)
;; Variables:
;; @number : integer
;;     the number of carrots that you have eaten.
;; @need : integer
;;     the number of carrots that you need to eat.
;; @remaining : integer
;;     the number of remaining carrots thet exist in stock
;; Constrain:
;; * 0 <= number <= 1000
;; * 0 <= need <= 1000
;; * 0 <= remaining <= 1000
;; Have fun :)
(define (eat number need remaining)
","(define (eat number need remaining)
  (let* ([total-needed (+ number need)]
         [carrots-eaten (min need remaining)]
         [total-eaten (+ number carrots-eaten)]
         [carrots-left (- remaining carrots-eaten)])
    (list total-eaten carrots-left)))

;; Examples for testing the function
(eat 5 6 10)  ; (list 11 4)
(eat 4 8 9)   ; (list 12 1)
(eat 1 10 10) ; (list 11 0)
(eat 2 11 5)  ; (list 7 0)","(require rackunit)

(define (test-humaneval) 

  (let (( candidate eat))
    (check-within (candidate 5 6 10) (list 11 4) 0.001)
    (check-within (candidate 4 8 9) (list 12 1) 0.001)
    (check-within (candidate 1 10 10) (list 11 0) 0.001)
    (check-within (candidate 2 11 5) (list 7 0) 0.001)
    (check-within (candidate 4 5 7) (list 9 2) 0.001)
    (check-within (candidate 4 5 1) (list 5 0) 0.001)
))

(test-humaneval)"
HumanEval_160,cym_Latn,rkt,"#lang racket

;;Mae gan restr gweithredwyr o leiaf un gweithredwr, ac mae gan restr operandiau o leiaf ddau operand. ;;Mae operand yn rhestr o integrau an-negyddol.;;Mae hyd y rhestr weithredwyr yn hafal i hyd y rhestr operand minus un. ;;Nodyn: ;;=> canlyniad = 9 ;;canlyniad = 2 + 3 * 4 - 5 ;;rhestr = [2, 3, 4, 5] ;;gweithredwr['+', '*', '-'] ;;Enghraifft: ;;Arlwysiant (**) ;;Rhannu llawr ( // ) ;;Cynyddu (*) ;;Tynnu ( - ) ;;Ychwanegu ( + ) ;;Y gweithrediadau algebra sylfaenol: ;;mynegiant ac yn dychwelyd gwerthusiad y mynegiant hwn. ;;Mae'r ail restr yn rhestr o integrau. Defnyddiwch y ddau restr a roddir i adeiladu'r algebraig ;;Gan fod dau restr operator, ac operand. Mae'r rhestr gyntaf yn gweithredu algebra sylfaenol, ac (define (do_algebra operator operand)
","#lang racket

(define (do-algebra operator operand)
  (define ops {'+ + '- - '* * '// / '** expt})
  (define expr (first operand))
  (for ([op (in-list operator)]
        [num (in-list (rest operand))])
    (set! expr (eval `(,(hash-ref ops op) ,expr ,num))))
  expr)

;; Example usage
(do-algebra '(+ * -) '(2 3 4 5)) ; => 9","(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-within (candidate (list ""**"" ""*"" ""+"") (list 2 3 4 5)) 37 0.001)
    (check-within (candidate (list ""+"" ""*"" ""-"") (list 2 3 4 5)) 9 0.001)
    (check-within (candidate (list ""//"" ""*"") (list 7 3 4)) 8 0.001)
))

(test-humaneval)"
HumanEval_161,cym_Latn,rkt,"#lang racket

;;Enghreifftiau ;;Dylai'r swyddogaeth ddychwelyd y llinyn a enillwyd. ;;Os nad oes unrhyw lythrennau yn y llinell, gwrthdroi'r llinell.;;fel arall gadewch iddo fod fel y mae. ;;os yw s[i] yn llythyren, trowch ei achos o'r isaf i'r uchaf neu'r gwrthwyneb, ;;Rydych yn cael llinell s.;; >>> (solve ""1234"")
;; ""4321""
;; >>> (solve ""ab"")
;; ""AB""
;; >>> (solve ""#a@C"")
;; ""#A@c""
(define (solve s)
","(define (solve s)
  (if (string-any char-alphabetic? s)
      (string-map (lambda (c)
                    (if (char-alphabetic? c)
                        (if (char-lower-case? c)
                            (char-upcase c)
                            (char-downcase c))
                        c))
                  s)
      (list->string (reverse (string->list s)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate solve))
    (check-within (candidate ""AsDf"") ""aSdF"" 0.001)
    (check-within (candidate ""1234"") ""4321"" 0.001)
    (check-within (candidate ""ab"") ""AB"" 0.001)
    (check-within (candidate ""#a@C"") ""#A@c"" 0.001)
    (check-within (candidate ""#AsdfW^45"") ""#aSDFw^45"" 0.001)
    (check-within (candidate ""#6@2"") ""2@6#"" 0.001)
    (check-within (candidate ""#$a^D"") ""#$A^d"" 0.001)
    (check-within (candidate ""#ccc"") ""#CCC"" 0.001)
))

(test-humaneval)"
HumanEval_162,cym_Latn,rkt,"#lang racket

;;Os yw 'text' yn llinyn wag, dychwelwch #f. ;;Gan roi llinyn 'text', dychwelwch ei llinyn cyfatebol md5 hash. ;; >>> (string_to_md5 ""Hello world"")
;; ""3e25960a79dbc69b674cd4ec67a72c62""
(define (string_to_md5 text)
","#lang racket

(require net/md5)

(define (string_to_md5 text)
  (if (string-empty? text)
      #f
      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_to_md5))
    (check-within (candidate ""Hello world"") ""3e25960a79dbc69b674cd4ec67a72c62"" 0.001)
    (check-within (candidate """") #f 0.001)
    (check-within (candidate ""A B C"") ""0ef78513b0cb8cef12743f5aeb35f888"" 0.001)
    (check-within (candidate ""password"") ""5f4dcc3b5aa765d61d8327deb882cf99"" 0.001)
))

(test-humaneval)"
HumanEval_163,cym_Latn,rkt,"#lang racket

;;Er enghraifft: ;;a b, mewn trefn godiadol. ;;Gan roi dau integers cadarnhaol a a b, dychwelyd y digid hyd yn oed rhwng a ;; >>> (generate_integers 2 8)
;; (list 2 4 6 8)
;; >>> (generate_integers 8 2)
;; (list 2 4 6 8)
;; >>> (generate_integers 10 14)
;; (list )
(define (generate_integers a b)
","#lang racket

(define (generate_integers a b)
  (define start (min a b))
  (define end (max a b))
  (filter even? (range start (+ end 1))))","(require rackunit)

(define (test-humaneval) 

  (let (( candidate generate_integers))
    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)
    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)
    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)
    (check-within (candidate 17 89) (list ) 0.001)
))

(test-humaneval)"
