[{"task_id":"HumanEval_0","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;ei gjevne grense. ;;Sjå om det er to tal som er meir nære enn 1.;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n","canonical_solution":"#lang racket\n\n(define (has_close_elements numbers threshold)\n  (define (pair-closer-than-threshold? pair)\n    (< (abs (- (first pair) (second pair))) threshold))\n  (define sorted-numbers (sort numbers <))\n  (ormap pair-closer-than-threshold? (map list sorted-numbers (rest sorted-numbers))))\n\n;; Example usage:\n;; (has_close_elements (list 1.0 2.0 3.0) 0.5) ; #f\n;; (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3) ; #t","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_1","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Ikkje bruk mellomrom i inndata.;;Separate grupper er balanserte (eit og eit opent brace er godt lukka) og ikkje nestla i kvarandre.;;Vel, desse to gruppene brukar me den same heimen og det same ordet overordnar seg til desse tre gruppene.;;Input til denne funksjonen er ei streng som inneheld fleire grupper av nested parentesar. Målet ditt er å ;; >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n;; (list \"()\" \"(())\" \"(()())\")\n(define (separate_paren_groups paren_string)\n","canonical_solution":"#lang racket\n\n(define (separate_paren_groups paren_string)\n  (define cleaned-str (string-replace paren_string \" \" \"\"))\n  (define (separate-helper str level acc result)\n    (cond\n      [(string-empty? str)\n       (if (= level 0)\n           (reverse result)\n           (error \"Unbalanced parentheses\"))]\n      [(char=? (string-ref str 0) #\\()\n       (if (= level 0)\n           (separate-helper (string-drop str 1) (add1 level) \"\" result)\n           (separate-helper (string-drop str 1) (add1 level) (string-append acc \"(\") result))]\n      [(char=? (string-ref str 0) #\\))\n       (let ([new-level (sub1 level)])\n         (if (= new-level 0)\n             (separate-helper (string-drop str 1) new-level \"\" (cons (string-append acc \")\") result))\n             (separate-helper (string-drop str 1) new-level (string-append acc \")\") result)))]\n      [else (separate-helper (string-drop str 1) level acc result)]))\n  (separate-helper cleaned-str 0 \"\" '()))\n\n;; Testing the function\n;(separate_paren_groups \"( ) (( )) (( )( ))\") ; should return (list \"()\" \"(())\" \"(()())\")","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\" \"((()))\" \"()\" \"((())()())\") 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\") 0.001)\n    (check-within (candidate \"(()(())((())))\") (list \"(()(())((())))\") 0.001)\n    (check-within (candidate \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_2","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Berettar den desimale delen av talet. ;;(Restdelen er alltid mindre enn 1).;;og heiltal (største heiltal mindre enn gjeve tal) og desimal ;;Gjeve eit positivt flytande tal, kan det skiljast inn i ;; >>> (truncate_number 3.5)\n;; 0.5\n(define (truncate_number number)\n","canonical_solution":"(define (truncate_number number)\n  (- number (floor number)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n    (check-within (candidate 3.5) 0.5 0.001)\n    (check-within (candidate 1.25) 0.25 0.001)\n    (check-within (candidate 123.0) 0.0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_3","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Då må funksjonen returnere #t.;;0-balansen. Arbeidet ditt er å sjå om saldoen på kontoen din når som helst fall under null, og;;Du får ein oversikt over alle insamlingar og uttak på kontoen din, som startar med;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n(define (below_zero operations)\n","canonical_solution":"#lang racket\n\n(define (below_zero operations)\n  (let loop ([ops operations] [balance 0])\n    (cond\n      [(empty? ops) #f]\n      [((< balance 0)) #t]\n      [else (loop (rest ops) (+ balance (first ops)))])))\n\n;; Test cases\n(below_zero (list 1 2 3))      ; #f\n(below_zero (list 1 2 -4 5))   ; #t","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)\n    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)\n    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_4","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;MAD = gjennomsnittleg. x - x_mean. ;;element og eit middelpunkt (gjennomsnitt i dette tilfellet): ;;Gjennomsnittleg absolutt avvik er den gjennomsnittlege, absolutt skilnaden mellom kvar av desse to mengdene.;;Omtrent gjennomsnittet i dette datasettet. ;;For ei gjevne lista med inndata tal, berekna Mean Absolute Deviation ;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n","canonical_solution":"#lang racket\n\n(define (mean numbers)\n  (\/ (apply + numbers) (length numbers)))\n\n(define (mean_absolute_deviation numbers)\n  (let* ((x_mean (mean numbers))\n         (deviations (map (lambda (x) (abs (- x x_mean))) numbers)))\n    (\/ (apply + deviations) (length deviations))))\n\n;; Example usage:\n;; (mean_absolute_deviation (list 1.0 2.0 3.0 4.0)) ; => 1.0","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_5","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;\"Del\" er eit tal som vert sett mellom to påfølgjande element i inndatalista.;; >>> (intersperse (list ) 4)\n;; (list )\n;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse numbers delimeter)\n","canonical_solution":"#lang racket\n\n(define (intersperse numbers delimiter)\n  (if (null? numbers)\n      numbers\n      (let loop ((lst (cdr numbers)) (result (list (car numbers))))\n        (if (null? lst)\n            (reverse result)\n            (loop (cdr lst) (cons (car lst) (cons delimiter result)))))))\n\n;; Examples\n(intersperse (list) 4)        ; => (list)\n(intersperse (list 1 2 3) 4)  ; => (list 1 4 2 4 3)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-within (candidate (list ) 7) (list ) 0.001)\n    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)\n    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_6","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes har (() (()) maksimalt to nestingnivå medan ((())) har tre. ;;For kvar av gruppene, skriv ned det djupaste nivået av parentesar. ;;Inntak til denne funksjonen er ei streng representert som fleire grupper for nested parentesar skilde med mellomrom.;; >>> (parse_nested_parens \"(()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens paren_string)\n","canonical_solution":"(define (parse_nested_parens paren_string)\n  (define (max-nesting s)\n    (define (helper chars current-depth max-depth)\n      (cond\n        [(empty? chars) max-depth]\n        [(eq? (first chars) #\\( )\n         (helper (rest chars) (add1 current-depth) (max (add1 current-depth) max-depth))]\n        [(eq? (first chars) #\\) )\n         (helper (rest chars) (sub1 current-depth) max-depth)]\n        [else\n         (helper (rest chars) current-depth max-depth)]))\n    (helper (string->list s) 0 0))\n  (let ([groups (string-split paren_string \" \")])\n    (map max-nesting groups)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3) 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4) 0.001)\n    (check-within (candidate \"(()(())((())))\") (list 4) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_7","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Filtrera ein inputlista over strengar for å finne dei som inneheld ein viss understring;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n(define (filter_by_substring strings substring)\n","canonical_solution":"#lang racket\n\n(define (filter_by_substring strings substring)\n  (filter (lambda (s) (regexp-match? (regexp substring) s)) strings))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_8","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Den tomme summen burde vera lik 0 og det tomme produktet burde vera lik 1.;;For ei gjeve liste over heile tal, må ein gje tilbake ei liste som består av ein sum og eit produkt av alle alle alle tal i ei liste. ;; >>> (sum_product (list ))\n;; (list 0 1)\n;; >>> (sum_product (list 1 2 3 4))\n;; (list 10 24)\n(define (sum_product numbers)\n","canonical_solution":"(define (sum_product numbers)\n  (define sum (apply + numbers))\n  (define product (apply * (if (null? numbers) '(1) numbers)))\n  (list sum product))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n    (check-within (candidate (list )) (list 0 1) 0.001)\n    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)\n    (check-within (candidate (list 100 0)) (list 100 0) 0.001)\n    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)\n    (check-within (candidate (list 10)) (list 10 10) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_9","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;i rekkjefølgje.;;Frå ei gjeve liste over heile tal, generer vi ei liste over det mest rullende elementet som er funne fram til det givne øyeblikket.;; >>> (rolling_max (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n","canonical_solution":"#lang racket\n\n(define (rolling_max numbers)\n  (define (helper nums current-max)\n    (match nums\n      [(cons x xs)\n       (let ([new-max (max x current-max)])\n         (cons new-max (helper xs new-max)))]\n      [empty empty]))\n  (if (empty? numbers)\n      empty\n      (helper numbers (first numbers))))\n\n;; Example usage\n(rolling_max (list 1 2 3 2 3 4 2)) ; => (list 1 2 3 3 3 4 4)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_10","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;- Legg til ein ending av strengen med ein strengeprefiks som kjem før det palindromiske sufikset.;;Finn den lengste postfix-en i ei strenge som er ein palindrom.;;Algoritme er ein enkel ide: ;;Finn det kortaste palindromet som byrjar med ei strenge. ;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n","canonical_solution":"(define (is-palindrome? str)\n  (equal? str (reverse str)))\n\n(define (longest-palindrome-suffix str)\n  (define (helper n)\n    (if (or (negative? n) (is-palindrome? (substring str n)))\n        (substring str n)\n        (helper (sub1 n))))\n  (helper (sub1 (string-length str))))\n\n(define (make-palindrome string)\n  (let* ((suffix (longest-palindrome-suffix string))\n         (prefix (substring string 0 (- (string-length string) (string-length suffix)))))\n    (string-append string (list->string (reverse (string->list prefix))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"x\") \"x\" 0.001)\n    (check-within (candidate \"xyz\") \"xyzyx\" 0.001)\n    (check-within (candidate \"xyx\") \"xyx\" 0.001)\n    (check-within (candidate \"jerry\") \"jerryrrej\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_11","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Utfør ein binær XOR på desse inngangane og få resultatet som ei streng. ;;Input er to strengar a og b som berre har 1 og 0 i dei.;; >>> (string_xor \"010\" \"110\")\n;; \"100\"\n(define (string_xor a b)\n","canonical_solution":"#lang racket\n\n(define (string_xor a b)\n  (apply string\n         (map\n          (lambda (char-a char-b)\n            (if (= char-a char-b) \n                #\\0 \n                #\\1))\n          (string->list a)\n          (string->list b))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n    (check-within (candidate \"111000\" \"101010\") \"010010\" 0.001)\n    (check-within (candidate \"1\" \"1\") \"0\" 0.001)\n    (check-within (candidate \"0101\" \"0000\") \"0101\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_12","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;returnere #f i tilfelle inputlista er tom. ;;Returnerer den lengste i ei rekkje, og den første i tilfelle det er fleire tal.;; >>> (longest (list ))\n;; #f\n;; >>> (longest (list \"a\" \"b\" \"c\"))\n;; \"a\"\n;; >>> (longest (list \"a\" \"bb\" \"ccc\"))\n;; \"ccc\"\n(define (longest strings)\n","canonical_solution":"(define (longest strings)\n  (if (empty? strings)\n      #f\n      (foldl (lambda (s1 s2) (if (> (string-length s1) (string-length s2)) s1 s2))\n             (first strings)\n             strings)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"x\" 0.001)\n    (check-within (candidate (list \"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\")) \"zzzz\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_13","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Berr ein storste felles divisor av to heiltall a og b ;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n","canonical_solution":"#lang racket\n\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n      (greatest_common_divisor b (remainder a b))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-within (candidate 3 7) 1 0.001)\n    (check-within (candidate 10 15) 5 0.001)\n    (check-within (candidate 49 14) 7 0.001)\n    (check-within (candidate 144 60) 12 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_14","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerar lista over alle prefiksa frå kortast til lengst av inngangsstrengen ;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\")\n(define (all_prefixes string)\n","canonical_solution":"(define (all_prefixes string)\n  (define length (string-length string))\n  (define (helper n)\n    (if (> n length)\n        '()\n        (cons (substring string 0 n) (helper (+ n 1)))))\n  (helper 1))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\") 0.001)\n    (check-within (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_15","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerar ei streng som inneheld tal med romgrens frå 0 til og med n. ;; >>> (string_sequence 0)\n;; \"0\"\n;; >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n","canonical_solution":"#lang racket\n\n(define (string_sequence n)\n  (let loop ((i 0) (accum \"\"))\n    (if (> i n)\n        accum\n        (loop (add1 i) \n              (if (zero? accum)\n                  (number->string i)\n                  (string-append accum \" \" (number->string i)))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-within (candidate 0) \"0\" 0.001)\n    (check-within (candidate 3) \"0 1 2 3\" 0.001)\n    (check-within (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_16","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Ta ein streng og finn ut kor mange ulike teikn den har (uansett kva for ein bokstav det er);; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4\n(define (count_distinct_characters string)\n","canonical_solution":"#lang racket\n\n(define (count_distinct_characters string)\n  (length\n   (remove-duplicates\n    (string->list\n     (string-downcase string)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abcde\") 5 0.001)\n    (check-within (candidate \"abcdecadeCADE\") 5 0.001)\n    (check-within (candidate \"aaaaAAAAaaaa\") 1 0.001)\n    (check-within (candidate \"Jerry jERRY JeRRRY\") 5 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_17","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;'Hadde' - kvartal, varer éin beat.;;\"O\" er ein halv note, som varer to takter.;;\"O\" -- heile noten, fire takter --;;Her er ein legende:;;ikkje sist.;;Det er oppgjer å analysera denne strengen og få tilbake ei liste over ulike tal som er like sannsynlege som eit \" nei \" til å verta \" nei \";;Inntak til denne funksjonen er ein streng som representerer musikknoter i eit spesielt ASCII format. ;; >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n;; (list 4 2 1 2 2 1 1 1 1 4 4)\n(define (parse_music music_string)\n","canonical_solution":"(define (parse_music music_string)\n  (define notes (string-split music_string))\n  (define (note-to-beats note)\n    (cond\n      [(equal? note \"o\") 4]\n      [(equal? note \"o|\") 2]\n      [(equal? note \".|\") 1]\n      [else (error \"Unrecognized note format\")]))\n  (map note-to-beats notes))\n\n;; Example usage:\n;; (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n;; => (list 4 2 1 2 2 1 1 1 1 4 4)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_music))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"o o o o\") (list 4 4 4 4) 0.001)\n    (check-within (candidate \".| .| .| .|\") (list 1 1 1 1) 0.001)\n    (check-within (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4 4 4 4) 0.001)\n    (check-within (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1 4 2 4 2) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_18","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Finn ut kor mange gonger ein gitt understreng kan finnast i den originale strengen. Tel overlappende tilfelle. ;; >>> (how_many_times \"\" \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n","canonical_solution":"#lang racket\n\n(define (how_many_times string substring)\n  (define sub-len (string-length substring))\n  (define str-len (string-length string))\n  (define (count-helper start count)\n    (if (<= (+ start sub-len) str-len)\n        (if (string=? (substring string start (+ start sub-len)) substring)\n            (count-helper (add1 start) (add1 count))\n            (count-helper (add1 start) count))\n        count))\n  (if (or (zero? sub-len) (> sub-len str-len))\n      0\n      (count-helper 0 0)))\n\n(how_many_times \"\" \"a\")    ; 0\n(how_many_times \"aaa\" \"a\") ; 3\n(how_many_times \"aaaa\" \"aa\") ; 3","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-within (candidate \"\" \"x\") 0 0.001)\n    (check-within (candidate \"xyxyxyx\" \"x\") 4 0.001)\n    (check-within (candidate \"cacacacac\" \"cac\") 4 0.001)\n    (check-within (candidate \"john doe\" \"john\") 1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_19","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerer ei rekkje tal som er rangert frå minste til største.;;Dei gyldige valane er null, ein, to, tre, fire, fem, seks, sju, åtte og ni. ;;Input er ein rom-avgrensa streng av nummer frå \"null\" til \"negen\".;; >>> (sort_numbers \"three one five\")\n;; \"one three five\"\n(define (sort_numbers numbers)\n","canonical_solution":"#lang racket\n\n(define (sort_numbers numbers)\n  (define num-to-str \n    (list \"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\"))\n  (define str-to-num \n    (hash \"zero\" 0 \"one\" 1 \"two\" 2 \"three\" 3 \"four\" 4 \"five\" 5 \"six\" 6 \"seven\" 7 \"eight\" 8 \"nine\" 9))\n  (define word-list (string-split numbers \" \"))\n  (define sorted-nums \n    (sort (map (lambda (word) (hash-ref str-to-num word)) word-list) <))\n  (string-join (map (lambda (num) (list-ref num-to-str num)) sorted-nums) \" \"))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"three\") \"three\" 0.001)\n    (check-within (candidate \"three five nine\") \"three five nine\" 0.001)\n    (check-within (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\" 0.001)\n    (check-within (candidate \"six five four three two one zero\") \"zero one two three four five six\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_20","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Dei skal leggjast inn i rekkjefølgje (mindre tal, større tal).;;Frå ei tilgjevne liste over tal (med lengd minst to) vel og send tilbake to som er nærast kvar av dei ;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n","canonical_solution":"#lang racket\n\n(define (find_closest_elements numbers)\n  (define sorted (sort numbers <))\n  (define closest-pair (list (first sorted) (second sorted)))\n  (define min-diff (abs (- (first sorted) (second sorted))))\n  (for ([i (in-range 1 (- (length sorted) 1))])\n    (define diff (abs (- (list-ref sorted i) (list-ref sorted (+ i 1)))))\n    (when (< diff min-diff)\n      (set! min-diff diff)\n      (set! closest-pair (list (list-ref sorted i) (list-ref sorted (+ i 1))))))\n  closest-pair)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_21","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Så det minste talet blir 0 og det største blir 1.;;Gjeve ei liste med tal (av minst to element), bruk ein lineær omdanning til denne lista, ;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n","canonical_solution":"(define (rescale_to_unit numbers)\n  (let* ((min-val (apply min numbers))\n         (max-val (apply max numbers))\n         (range (- max-val min-val)))\n    (map (lambda (x)\n           (\/ (- x min-val) range))\n         numbers)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)\n    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)\n    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_22","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Filter gjevna lista over alle rktthon verdiar berre for heiltall ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers values)\n","canonical_solution":"(define (filter_integers values)\n  (filter integer? values))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9) 0.001)\n    (check-within (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_23","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returlengd for den givne strengen ;; >>> (strlen \"\")\n;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n","canonical_solution":"#lang racket\n\n(define (strlen string)\n  (string-length string))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"x\") 1 0.001)\n    (check-within (candidate \"asdasnakj\") 9 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_24","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;For eit gjeve tal n, finn det største talet som deler n, mindre enn n.;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor n)\n","canonical_solution":"#lang racket\n\n(define (largest_divisor n)\n  (define (find-divisor d)\n    (if (= (modulo n d) 0)\n        d\n        (find-divisor (- d 1))))\n  (find-divisor (- n 1)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 10) 5 0.001)\n    (check-within (candidate 100) 50 0.001)\n    (check-within (candidate 49) 7 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_25","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Talet på talet må alltid vera lik produktet av alle faktorane.;;Kvar faktor skal oppførast så mange gonger som han er oppført i faktorisering.;;Returnerer lista over primære faktorar av gjeve heiltal i rekkjefølgje frå minste til største. ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n(define (factorize n)\n","canonical_solution":"#lang racket\n\n(define (factorize n)\n  (define (smallest-factor k)\n    (define (find-factor start)\n      (cond [(> (* start start) k) k]\n            [(= (remainder k start) 0) start]\n            [else (find-factor (+ start 1))]))\n    (find-factor 2))\n  \n  (define (iter k factors)\n    (if (= k 1)\n        factors\n        (let ([factor (smallest-factor k)])\n          (iter (\/ k factor) (append factors (list factor))))))\n  \n  (iter n '()))\n\n;; Examples\n(factorize 8)  ; (list 2 2 2)\n(factorize 25) ; (list 5 5)\n(factorize 70) ; (list 2 5 7)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n    (check-within (candidate 2) (list 2) 0.001)\n    (check-within (candidate 4) (list 2 2) 0.001)\n    (check-within (candidate 8) (list 2 2 2) 0.001)\n    (check-within (candidate 57) (list 3 19) 0.001)\n    (check-within (candidate 3249) (list 3 3 19 19) 0.001)\n    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)\n    (check-within (candidate 20577) (list 3 19 19 19) 0.001)\n    (check-within (candidate 18) (list 2 3 3) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_26","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Lat elementane stå i same rekkefølgje som i inndata.;;Frå ei liste over heile tal, trekk alle element som dukkar opp fleire enn ein gong.;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates numbers)\n","canonical_solution":"#lang racket\n\n(define (remove_duplicates numbers)\n  (define (helper lst seen accum)\n    (cond\n      [(empty? lst) (reverse accum)]\n      [(member (first lst) seen) (helper (rest lst) seen accum)]\n      [else (helper (rest lst) (cons (first lst) seen) (cons (first lst) accum))]))\n  (helper numbers '() '()))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_27","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;For ei gitt streng, kan du skifta små bokstavar til store og store bokstavar til små bokstavar. ;; >>> (flip_case \"Hello\")\n;; \"hELLO\"\n(define (flip_case string)\n","canonical_solution":"#lang racket\n\n(define (flip_case string)\n  (list->string\n   (map (lambda (char)\n          (if (char-upper-case? char)\n              (char-downcase char)\n              (char-upcase char)))\n        (string->list string))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hello!\") \"hELLO!\" 0.001)\n    (check-within (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_28","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Ta ein tilgjengeleg lista over strengar;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"c\"))\n;; \"abc\"\n(define (concatenate strings)\n","canonical_solution":"(define (concatenate strings)\n  (apply string-append strings))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n    (check-within (candidate (list )) \"\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"xyz\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_29","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Filtrera ein inndatalista over strengar berre for dei som byrjar med eit gjeve prefiks. ;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n","canonical_solution":"#lang racket\n\n(define (filter_by_prefix strings prefix)\n  (filter (lambda (s)\n            (string-prefix? prefix s))\n          strings))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_30","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Berre gjev berre positive tal i lista.;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n","canonical_solution":"#lang racket\n\n(define (get_positive l)\n  (filter positive? l))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)\n    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)\n    (check-within (candidate (list -1 -2)) (list ) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_31","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerer sann om eit gjeve tal er førstel, og falskt om det ikkje er. ;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n","canonical_solution":"#lang racket\n\n(define (is_prime n)\n  (define (check-prime i)\n    (cond\n      [(>= i n) #t]\n      [(zero? (remainder n i)) #f]\n      [else (check-prime (add1 i))]))\n  (cond\n    [(<= n 1) #f]\n    [(= n 2) #t]\n    [else (check-prime 2)]))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 101) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 13441) #t 0.001)\n    (check-within (candidate 61) #t 0.001)\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 17) #t 0.001)\n    (check-within (candidate 85) #f 0.001)\n    (check-within (candidate 77) #f 0.001)\n    (check-within (candidate 255379) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_33","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;til verdiane til dei tilhøyrande indeksa av l, men sortert.;;l' er identisk med l i indekser som ikkje er delbare med tre, medan verdiane i indekser som er delbare med tre er like.;;Denne funksjonen tek ein liste l og returnerer ei liste l' slik at ;; >>> (sort_third (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_third (list 5 6 3 4 8 9 2))\n;; (list 2 6 3 4 8 9 5)\n(define (sort_third l)\n","canonical_solution":"(define (sort_third l)\n  (define (helper lst index sorted-third)\n    (cond\n      [(null? lst) null]\n      [(= (modulo index 3) 0)\n       (cons (first sorted-third) (helper (rest lst) (+ index 1) (rest sorted-third)))]\n      [else (cons (first lst) (helper (rest lst) (+ index 1) sorted-third))]))\n  (let* ([third-indices-values (filter (λ (x) (= 0 (modulo (car x) 3))) (map list (range (length l)) l))]\n         [sorted-third (sort (map cadr third-indices-values) <)])\n    (helper l 0 sorted-third)))\n\n;; Examples\n(sort_third (list 1 2 3))             ; (list 1 2 3)\n(sort_third (list 5 6 3 4 8 9 2))     ; (list 2 6 3 4 8 9 5)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_third))\n    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)\n    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)\n    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)\n    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_34","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Ber om ein einaste element i ei liste som er ortert;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n","canonical_solution":"(define (unique l)\n  (sort (remove-duplicates l) <))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_35","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerer det største elementet i lista.;; >>> (max_element (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; 123\n(define (max_element l)\n","canonical_solution":"#lang racket\n\n(define (max_element l)\n  (cond [(empty? l) (error \"List is empty\")]\n        [else (apply max l)]))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_36","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerer talet på gonger sifferet 7 kjem opp i heile tal som er delbare med 11 eller 13. ;; >>> (fizz_buzz 50)\n;; 0\n;; >>> (fizz_buzz 78)\n;; 2\n;; >>> (fizz_buzz 79)\n;; 3\n(define (fizz_buzz n)\n","canonical_solution":"#lang racket\n\n(define (fizz_buzz n)\n  (define (count-sevens num)\n    (if (< num 10)\n        (if (= num 7) 1 0)\n        (+ (if (= (modulo num 10) 7) 1 0)\n           (count-sevens (quotient num 10)))))\n  (define (check-nums acc num)\n    (if (>= num n)\n        acc\n        (check-nums \n         (+ acc (if (or (= (modulo num 11) 0) (= (modulo num 13) 0))\n                    (count-sevens num)\n                    0))\n         (+ num 1))))\n  (check-nums 0 1))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 3 0.001)\n    (check-within (candidate 100) 3 0.001)\n    (check-within (candidate 200) 6 0.001)\n    (check-within (candidate 4000) 192 0.001)\n    (check-within (candidate 10000) 639 0.001)\n    (check-within (candidate 100000) 8026 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_37","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;til verdiane av dei jevne indeksane i l, men sortert. ;;l' er identisk med l i dei ulige indeksa, medan verdien i dei jevne indeksa er lik ;;Denne funksjonen tek ein liste l og returnerer ei liste l' slik at ;; >>> (sort_even (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_even (list 5 6 3 4))\n;; (list 3 6 5 4)\n(define (sort_even l)\n","canonical_solution":"#lang racket\n\n(define (sort-even l)\n  (let loop ([lst l] [evens '()] [odds '()] [idx 0])\n    (cond\n      [(null? lst)\n       (let ([sorted-evens (sort evens <)])\n         (let loop2 ([lst l] [result '()] [idx 0] [ev-idx 0] [odd-idx 0])\n           (cond\n             [(null? lst) (reverse result)]\n             [(even? idx)\n              (loop2 (cdr lst) (cons (list-ref sorted-evens ev-idx) result) (add1 idx) (add1 ev-idx) odd-idx)]\n             [else\n              (loop2 (cdr lst) (cons (list-ref odds odd-idx) result) (add1 idx) ev-idx (add1 odd-idx))]))))]\n      [(even? idx)\n       (loop (cdr lst) (cons (car lst) evens) odds (add1 idx))]\n      [else\n       (loop (cdr lst) evens (cons (car lst) odds) (add1 idx))])))\n\n;; Test cases\n;(sort-even (list 1 2 3)) ;; => '(1 2 3)\n;(sort-even (list 5 6 3 4)) ;; => '(3 6 5 4)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_even))\n    (check-within (candidate (list 1 2 3)) (list 1 2 3) 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123) 0.001)\n    (check-within (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_39","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;prime_fib returnerer det n-te tallet som er eit Fibonacci-tal og det er òg eit primtal. ;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n;; 89\n(define (prime_fib n)\n","canonical_solution":"#lang racket\n\n(define (is-prime? num)\n  (define (check-divisor d)\n    (cond [(= d 1) #t]\n          [(= (remainder num d) 0) #f]\n          [else (check-divisor (- d 1))]))\n  (and (> num 1) (check-divisor (sqrt num))))\n\n(define (fib-seq)\n  (define (fib-gen a b)\n    (cons a (lazy (fib-gen b (+ a b)))))\n  (fib-gen 0 1))\n\n(define (prime_fib n)\n  (define prime-fibs\n    (stream-filter is-prime? (stream-filter (λ (x) (>= x 2)) (fib-seq))))\n  (stream-ref prime-fibs (- n 1)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n    (check-within (candidate 1) 2 0.001)\n    (check-within (candidate 2) 3 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 13 0.001)\n    (check-within (candidate 5) 89 0.001)\n    (check-within (candidate 6) 233 0.001)\n    (check-within (candidate 7) 1597 0.001)\n    (check-within (candidate 8) 28657 0.001)\n    (check-within (candidate 9) 514229 0.001)\n    (check-within (candidate 10) 433494437 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_40","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;sum til null, og #f elles.;;Det kjem tilbake med #t viss det finst tre ulike element i lista som ;;triples_sum_to_zero tek eit tall av heile tal som input.;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;; #f\n;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n","canonical_solution":"(define (triples_sum_to_zero l)\n  (define (has-three-sum-zero? lst)\n    (for*\/or ([i (in-naturals)]\n              [x (in-list lst)]\n              [j (in-range i (length lst))]\n              [y (in-list (drop lst (add1 i)))]\n              [k (in-range j (length lst))]\n              [z (in-list (drop lst (add1 j)))]\n              #:when (and (not (= i j k))\n                          (= 0 (+ x y z))))\n      #t))\n  (has-three-sum-zero? l))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -1)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #t 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 1 2 5 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -100)) #f 0.001)\n    (check-within (candidate (list 100 3 5 -100)) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_41","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Denne funksjonen gjev ut talet på slike kollisjonar. ;;på farten som om dei ikkje hadde kome saman;;Men bilane er så robuste og sterke at dei kan fortsette å flyge.;;Når ein bil går frå venstre mot høgre, slår han inn i ein annan bil.;;Alle bilar har same hastighet som ein annan bilar. Vi seier at to bilar er i ein samanrøring.;;Dei to bilane som kom ut av vegen, var langt borte frå kvarandre.;;N bilar køyr frå venstre mot høgre. Samtidig, eit anna par med bilar.;;Tenk deg ein lang, høg veg.(define (car_race_collision n)\n","canonical_solution":"#lang racket\n\n(define (car_race_collision n)\n  n)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 9 0.001)\n    (check-within (candidate 4) 16 0.001)\n    (check-within (candidate 8) 64 0.001)\n    (check-within (candidate 10) 100 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_42","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Tilbakeliste med element som er auka med 1.;; >>> (incr_list (list 1 2 3))\n;; (list 2 3 4)\n;; >>> (incr_list (list 5 3 5 2 3 3 9 0 123))\n;; (list 6 4 6 3 4 4 10 1 124)\n(define (incr_list l)\n","canonical_solution":"#lang racket\n\n(define (incr_list l)\n  (map add1 l))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incr_list))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)\n    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_43","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;sum til null, og #f elles.;;Det kjem tilbake med #t viss det finst to ulike element i lista som er ;;pairs_sum_to_zero tek eit tall som input.;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;; >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n","canonical_solution":"(define (pairs_sum_to_zero l)\n  (define (helper seen rest)\n    (cond\n      [(null? rest) #f]\n      [(member (- (car rest)) seen) #t]\n      [else (helper (cons (car rest) seen) (cdr rest))]))\n  (helper '() l))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_44","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Dei er mindre enn 10.;;return string representasjon etter omsetjing. ;;Endra den numeriske basen av inngangsnummeret x til basen.;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>> (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n","canonical_solution":"#lang racket\n\n(define (change_base x base)\n  (define (convert num base)\n    (if (< num base)\n        (number->string num)\n        (string-append \n         (convert (quotient num base) base)\n         (number->string (remainder num base)))))\n  (convert x base))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n    (check-within (candidate 8 3) \"22\" 0.001)\n    (check-within (candidate 9 3) \"100\" 0.001)\n    (check-within (candidate 234 2) \"11101010\" 0.001)\n    (check-within (candidate 16 2) \"10000\" 0.001)\n    (check-within (candidate 8 2) \"1000\" 0.001)\n    (check-within (candidate 7 2) \"111\" 0.001)\n    (check-within (candidate 2 3) \"2\" 0.001)\n    (check-within (candidate 3 4) \"3\" 0.001)\n    (check-within (candidate 4 5) \"4\" 0.001)\n    (check-within (candidate 5 6) \"5\" 0.001)\n    (check-within (candidate 6 7) \"6\" 0.001)\n    (check-within (candidate 7 8) \"7\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_45","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Gjeve lengd på ein side og høgt returareal for ein triangel.;; >>> (triangle_area 5 3)\n;; 7.5\n(define (triangle_area a h)\n","canonical_solution":"#lang racket\n\n(define (triangle_area a h)\n  (* 0.5 a h))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 5 3) 7.5 0.001)\n    (check-within (candidate 2 2) 2.0 0.001)\n    (check-within (candidate 10 8) 40.0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_46","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Skriv ein funksjon for å rekna ut det n-te elementet i fib4-teljesekvensen. Bruk ikkje rekursion. ;;fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).;;fib4(3) -> 0 ;;fib4(2) -> 2 ;;fib4(1) -> 0 ;;fib4(0) -> 0 ;;Fib4-trekkjefølgje er ein trekkjefølgje lik Fibbonacci-trekkjefølgje som er definert slik:;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n","canonical_solution":"#lang racket\n\n(define (fib4 n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else\n     (let loop ([i 4] [a 0] [b 0] [c 2] [d 0])\n       (if (= i n)\n           (+ a b c d)\n           (loop (add1 i) b c d (+ a b c d))))]))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 28 0.001)\n    (check-within (candidate 10) 104 0.001)\n    (check-within (candidate 12) 386 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_47","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Median av element i lista l. ;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n(define (median l)\n","canonical_solution":"#lang racket\n\n(define (median l)\n  (let* ([sorted-l (sort l <)]\n         [n (length sorted-l)]\n         [mid (\/ n 2)])\n    (if (odd? n)\n        (list-ref sorted-l mid)\n        (\/ (+ (list-ref sorted-l (sub1 mid))\n              (list-ref sorted-l mid))\n           2))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)\n    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 6 5)) 5.5 0.001)\n    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_48","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Kontrollerer om strengen er ein palindrom;; >>> (is_palindrome \"\")\n;; #t\n;; >>> (is_palindrome \"aba\")\n;; #t\n;; >>> (is_palindrome \"aaaaa\")\n;; #t\n;; >>> (is_palindrome \"zbcd\")\n;; #f\n(define (is_palindrome text)\n","canonical_solution":"#lang racket\n\n(define (is_palindrome text)\n  (define clean-text (string-downcase (string-trim text)))\n  (define length (string-length clean-text))\n  (define (check start end)\n    (cond [(>= start end) #t]\n          [(char=? (string-ref clean-text start) (string-ref clean-text end))\n           (check (add1 start) (sub1 end))]\n          [else #f]))\n  (check 0 (sub1 length)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n    (check-within (candidate \"\") #t 0.001)\n    (check-within (candidate \"aba\") #t 0.001)\n    (check-within (candidate \"aaaaa\") #t 0.001)\n    (check-within (candidate \"zbcd\") #f 0.001)\n    (check-within (candidate \"xywyx\") #t 0.001)\n    (check-within (candidate \"xywyz\") #f 0.001)\n    (check-within (candidate \"xywzx\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_49","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Return 2^n modulo p (ver klar over tallinng).;; >>> (modp 3 5)\n;; 3\n;; >>> (modp 1101 101)\n;; 2\n;; >>> (modp 0 101)\n;; 1\n;; >>> (modp 3 11)\n;; 8\n;; >>> (modp 100 101)\n;; 1\n(define (modp n p)\n","canonical_solution":"(define (modp n p)\n  (remainder (expt 2 n) p))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n    (check-within (candidate 3 5) 3 0.001)\n    (check-within (candidate 1101 101) 2 0.001)\n    (check-within (candidate 0 101) 1 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 100 101) 1 0.001)\n    (check-within (candidate 30 5) 4 0.001)\n    (check-within (candidate 31 5) 3 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_51","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;remove_vowels er ein funksjon som tek string og returnerer string utan vokaler. ;; >>> (remove_vowels \"\")\n;; \"\"\n;; >>> (remove_vowels \"abcdef\")\n;; \"bcdf\"\n;; >>> (remove_vowels \"aaaaa\")\n;; \"\"\n;; >>> (remove_vowels \"aaBAA\")\n;; \"B\"\n;; >>> (remove_vowels \"zbcd\")\n;; \"zbcd\"\n(define (remove_vowels text)\n","canonical_solution":"(define vowels (set \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n  (list->string (filter (lambda (char) (not (set-member? vowels (string char)))) (string->list text)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"abcdef\nghijklm\") \"bcdf\nghjklm\" 0.001)\n    (check-within (candidate \"fedcba\") \"fdcb\" 0.001)\n    (check-within (candidate \"eeeee\") \"\" 0.001)\n    (check-within (candidate \"acBAA\") \"cB\" 0.001)\n    (check-within (candidate \"EcBOO\") \"cB\" 0.001)\n    (check-within (candidate \"ybcd\") \"ybcd\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_52","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerar #t viss alle tala i lista l er under t-tråskel. ;; >>> (below_threshold (list 1 2 4 10) 100)\n;; #t\n;; >>> (below_threshold (list 1 20 4 10) 5)\n;; #f\n(define (below_threshold l t)\n","canonical_solution":"(define (below_threshold l t)\n  (for\/and ([x l])\n    (< x t)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)\n    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_53","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Legg til to tal x og y.;; >>> (add 2 3)\n;; 5\n;; >>> (add 5 7)\n;; 12\n(define (add x y)\n","canonical_solution":"#lang racket\n\n(define (add x y)\n  (+ x y))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate 0 1) 1 0.001)\n    (check-within (candidate 1 0) 1 0.001)\n    (check-within (candidate 2 3) 5 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 5) 12 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_54","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Sjekk om to ord har same teikn. ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f\n(define (same_chars s0 s1)\n","canonical_solution":"(define (same_chars s0 s1)\n  (let ([chars-s0 (string->set s0)]\n        [chars-s1 (string->set s1)])\n    (set=? chars-s0 chars-s1)))\n\n(define (string->set s)\n  (let loop ([chars (string->list s)]\n             [acc (set)])\n    (if (null? chars)\n        acc\n        (loop (cdr chars) (set-add acc (car chars))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabc\") #t 0.001)\n    (check-within (candidate \"dddddddabc\" \"abcd\") #t 0.001)\n    (check-within (candidate \"eabcd\" \"dddddddabc\") #f 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabcf\") #f 0.001)\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f 0.001)\n    (check-within (candidate \"aabb\" \"aaccc\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_55","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Berr tilbake det n-te Fibonacci-talet. ;; >>> (fib 10)\n;; 55\n;; >>> (fib 1)\n;; 1\n;; >>> (fib 8)\n;; 21\n(define (fib n)\n","canonical_solution":"#lang racket\n\n(define (fib n)\n  (define (fib-helper a b count)\n    (if (= count 0)\n        a\n        (fib-helper b (+ a b) (- count 1))))\n  (fib-helper 0 1 n))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-within (candidate 10) 55 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 8) 21 0.001)\n    (check-within (candidate 11) 89 0.001)\n    (check-within (candidate 12) 144 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_56","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;return #t if kvar opnings- og avslutningsklausel har ein motsvarande avslutningsklausel. ;;Parentes er ei streng av \"<\" og \">\". ;; >>> (correct_bracketing \"<\")\n;; #f\n;; >>> (correct_bracketing \"<>\")\n;; #t\n;; >>> (correct_bracketing \"<<><>>\")\n;; #t\n;; >>> (correct_bracketing \"><<>\")\n;; #f\n(define (correct_bracketing brackets)\n","canonical_solution":"#lang racket\n\n(define (correct_bracketing brackets)\n  (define (helper lst count)\n    (cond\n      [(< count 0) #f]\n      [(empty? lst) (= count 0)]\n      [(equal? (first lst) #\\<) (helper (rest lst) (add1 count))]\n      [(equal? (first lst) #\\>) (helper (rest lst) (sub1 count))]))\n  (helper (string->list brackets) 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"<>\") #t 0.001)\n    (check-within (candidate \"<<><>>\") #t 0.001)\n    (check-within (candidate \"<><><<><>><>\") #t 0.001)\n    (check-within (candidate \"<><><<<><><>><>><<><><<>>>\") #t 0.001)\n    (check-within (candidate \"<<<><>>>>\") #f 0.001)\n    (check-within (candidate \"><<>\") #f 0.001)\n    (check-within (candidate \"<\") #f 0.001)\n    (check-within (candidate \"<<<<\") #f 0.001)\n    (check-within (candidate \">\") #f 0.001)\n    (check-within (candidate \"<<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>><<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>>><>\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_57","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Return #t er ein einstemmig auke eller minke for alle listaelement.;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic l)\n","canonical_solution":"(define (monotonic l)\n  (or (apply <= l)\n      (apply >= l)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-within (candidate (list 1 2 4 10)) #t 0.001)\n    (check-within (candidate (list 1 2 4 20)) #t 0.001)\n    (check-within (candidate (list 1 20 4 10)) #f 0.001)\n    (check-within (candidate (list 4 1 0 -10)) #t 0.001)\n    (check-within (candidate (list 4 1 1 0)) #t 0.001)\n    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)\n    (check-within (candidate (list 9 9 9 9)) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_58","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerar sorterte einaste felles element for to listar.;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common l1 l2)\n","canonical_solution":"(define (common l1 l2)\n  (define commons (filter (lambda (x) (member x l2)) l1))\n  (define unique-commons (remove-duplicates commons))\n  (sort unique-commons <))\n\n;; Testing the function\n;; (display (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))) ; Should display (list 1 5 653)\n;; (display (common (list 5 3 2 8) (list 3 2)))                          ; Should display (list 2 3)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)\n    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_59","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Forklar den største primfaktoren for n. Ta n > 1 og lat som at det ikkje er ein primfaktor. ;; >>> (largest_prime_factor 13195)\n;; 29\n;; >>> (largest_prime_factor 2048)\n;; 2\n(define (largest_prime_factor n)\n","canonical_solution":"#lang racket\n\n(define (largest_prime_factor n)\n  (define (is-prime? num)\n    (if (< num 2)\n        #f\n        (let loop ([i 2])\n          (cond\n            [(> (* i i) num) #t]\n            [(zero? (modulo num i)) #f]\n            [else (loop (add1 i))]))))\n  \n  (define (largest-factor n d)\n    (cond\n      [(= n 1) d]\n      [(zero? (modulo n d))\n       (if (is-prime? (\/ n d))\n           (\/ n d)\n           (largest-factor (\/ n d) d))]\n      [else (largest-factor n (add1 d))]))\n\n  (largest-factor n 2))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n    (check-within (candidate 15) 5 0.001)\n    (check-within (candidate 27) 3 0.001)\n    (check-within (candidate 63) 7 0.001)\n    (check-within (candidate 330) 11 0.001)\n    (check-within (candidate 13195) 29 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_60","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;sum_to_n er ein funksjon som summer nummer frå 1 til n. ;; >>> (sum_to_n 30)\n;; 465\n;; >>> (sum_to_n 100)\n;; 5050\n;; >>> (sum_to_n 5)\n;; 15\n;; >>> (sum_to_n 10)\n;; 55\n;; >>> (sum_to_n 1)\n;; 1\n(define (sum_to_n n)\n","canonical_solution":"#lang racket\n\n(define (sum_to_n n)\n  (define (helper current sum)\n    (if (> current n)\n        sum\n        (helper (add1 current) (+ sum current))))\n  (helper 1 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 6) 21 0.001)\n    (check-within (candidate 11) 66 0.001)\n    (check-within (candidate 30) 465 0.001)\n    (check-within (candidate 100) 5050 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_61","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;return #t if kvar opnings- og avslutningsklausel har ein motsvarande avslutningsklausel. ;;Parentes er ei streng av \"(\" og \")\". ;; >>> (correct_bracketing \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing brackets)\n","canonical_solution":"(define (correct_bracketing brackets)\n  (define (helper str count)\n    (cond\n      [(negative? count) #f]\n      [(empty? str) (zero? count)]\n      [(char=? (first str) #\\() (helper (rest str) (add1 count))]\n      [(char=? (first str) #\\)) (helper (rest str) (sub1 count))]\n      [else (helper (rest str) count)]))\n  (helper (string->list brackets) 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"()\") #t 0.001)\n    (check-within (candidate \"(()())\") #t 0.001)\n    (check-within (candidate \"()()(()())()\") #t 0.001)\n    (check-within (candidate \"()()((()()())())(()()(()))\") #t 0.001)\n    (check-within (candidate \"((()())))\") #f 0.001)\n    (check-within (candidate \")(()\") #f 0.001)\n    (check-within (candidate \"(\") #f 0.001)\n    (check-within (candidate \"((((\") #f 0.001)\n    (check-within (candidate \")\") #f 0.001)\n    (check-within (candidate \"(()\") #f 0.001)\n    (check-within (candidate \"()()(()())())(()\") #f 0.001)\n    (check-within (candidate \"()()(()())()))()\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_62","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerar avleiing av dette polynomet i same form. ;;xs[0] + xs[1] * x + xs[2] * x^2 + .... ;;x er koefficientane til eit polynom.;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list 2 6)\n(define (derivative xs)\n","canonical_solution":"#lang racket\n\n(define (derivative xs)\n  (let loop ((coeffs (rest xs))\n             (n 1)\n             (result '()))\n    (if (null? coeffs)\n        (reverse result)\n        (loop (rest coeffs)\n              (add1 n)\n              (cons (* (car coeffs) n) result)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)\n    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)\n    (check-within (candidate (list 1)) (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_63","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Skriv ein funksjon for å effektivt rekna ut det n-te elementet i fibfib tallekvensen. ;;fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3). ;;fibfib(2) == 1 ;;fibfib ((1) == 0 ;;fibfib(0) == 0 ;;FibFib-tallrekning er ein rekning som liknar Fibbonacci-rekninga som er definert slik: ;; >>> (fibfib 1)\n;; 0\n;; >>> (fibfib 5)\n;; 4\n;; >>> (fibfib 8)\n;; 24\n(define (fibfib n)\n","canonical_solution":"(define (fibfib n)\n  (define fibfib-memo (make-vector (+ n 1) 0))\n  (vector-set! fibfib-memo 0 0)\n  (vector-set! fibfib-memo 1 0)\n  (vector-set! fibfib-memo 2 1)\n  (define (helper k)\n    (if (< k 3)\n        (vector-ref fibfib-memo k)\n        (let ([val (vector-ref fibfib-memo k)])\n          (if (= val 0)\n              (let ([result (+ (helper (- k 1))\n                               (helper (- k 2))\n                               (helper (- k 3)))])\n                (vector-set! fibfib-memo k result)\n                result)\n              val))))\n  (helper n))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 24 0.001)\n    (check-within (candidate 10) 81 0.001)\n    (check-within (candidate 12) 274 0.001)\n    (check-within (candidate 14) 927 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_64","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Det er ein vokal, men berre når det er på slutten av eit gitt ord.;;Vokaler i dette tilfellet er \"a\", \"e\", \"i\", \"o\", \"u\". Her er \"y\" òg a ;;eit ord som input og returnerer tal på vokalar i strengene.;;Skriv ein funksjon som tek ei streng som representerer ;; >>> (vowels_count \"abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n","canonical_solution":"(define vowels (set \"aeiouAEIOU\"))\n  (define (vowel? c pos)\n    (or (set-member? vowels c)\n        (and (char-ci=? c #\\y) (= pos (- (string-length s) 1)))))\n  (define (count-vowels pos count)\n    (if (< pos (string-length s))\n        (count-vowels\n         (+ pos 1)\n         (if (vowel? (string-ref s pos) pos)\n             (+ count 1)\n             count))\n        count))\n  (count-vowels 0 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n    (check-within (candidate \"abcde\") 2 0.001)\n    (check-within (candidate \"Alone\") 3 0.001)\n    (check-within (candidate \"key\") 2 0.001)\n    (check-within (candidate \"bye\") 1 0.001)\n    (check-within (candidate \"keY\") 2 0.001)\n    (check-within (candidate \"bYe\") 1 0.001)\n    (check-within (candidate \"ACEDY\") 3 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_65","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Om skift > tal siffer, vert sifferane vendt om. ;;og returnerer resultatet som ein streng. ;;La oss sjå nærare på tallinja. Vi skiftar tallina til høgre for å sjå nærare på tallina.;; >>> (circular_shift 12 1)\n;; \"21\"\n;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n","canonical_solution":"(define (circular_shift x shift)\n  (let* ([digits (number->string x)]\n         [len (string-length digits)])\n    (if (> shift len)\n        (list->string (reverse (string->list digits)))\n        (let ([shifted-index (- len (modulo shift len))])\n          (string-append (substring digits shifted-index len)\n                         (substring digits 0 shifted-index))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n    (check-within (candidate 100 2) \"001\" 0.001)\n    (check-within (candidate 12 2) \"12\" 0.001)\n    (check-within (candidate 97 8) \"79\" 0.001)\n    (check-within (candidate 12 1) \"21\" 0.001)\n    (check-within (candidate 11 101) \"11\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_66","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;ASCII-kodar ;;Skriv ein funksjon som tek ein streng som inngang og berre returnerer summen av dei øvre teikna.;;Oppgåve ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n","canonical_solution":"(define (digitSum s)\n  (define (upper-char? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (ascii-sum chars sum)\n    (if (null? chars)\n        sum\n        (let ([c (car chars)])\n          (if (upper-char? c)\n              (ascii-sum (cdr chars) (+ sum (char->integer c)))\n              (ascii-sum (cdr chars) sum)))))\n  (ascii-sum (string->list s) 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abAB\") 131 0.001)\n    (check-within (candidate \"abcCd\") 67 0.001)\n    (check-within (candidate \"helloE\") 69 0.001)\n    (check-within (candidate \"woArBld\") 131 0.001)\n    (check-within (candidate \"aAaaaXa\") 153 0.001)\n    (check-within (candidate \" How are yOu?\") 151 0.001)\n    (check-within (candidate \"You arE Very Smart\") 327 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_67","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;for examble: ;;i korgen angir mengden mangoar i korgen. ;;Appelsinane og epla og ein heil tal som viser det totale talet på fruktane;;Det er ein haug med appelsin, appelsin og mangoar på eit strenge som representerer det totale talet på ;;som er delt ut i ei kurv med frukt denne kurven inneheld ;;I denne oppgåva, vil du få ei rekkje fleire eple og appelsiner.;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19\n(define (fruit_distribution s n)\n","canonical_solution":"(define (fruit_distribution s n)\n  (define (parse-fruit str)\n    (match (regexp-match #px\"([0-9]+) apples and ([0-9]+) oranges\" str)\n      [(list _ apples oranges)\n       (list (string->number apples) (string->number oranges))]))\n  (define-values (apples oranges) (apply values (parse-fruit s)))\n  (- n (+ apples oranges)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n    (check-within (candidate \"5 apples and 6 oranges\" 19) 8 0.001)\n    (check-within (candidate \"5 apples and 6 oranges\" 21) 10 0.001)\n    (check-within (candidate \"0 apples and 1 oranges\" 3) 2 0.001)\n    (check-within (candidate \"1 apples and 0 oranges\" 3) 2 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 100) 95 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 5) 0 0.001)\n    (check-within (candidate \"1 apples and 100 oranges\" 120) 19 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_68","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel 1: ;;Viss det ikkje finst par verdiar eller lista er tom, må du returnera [].;;Den plukka noten skal returnerast i ei liste, [ smalest_value, its index ], ;;Viss det finst fleire noder med same minste partalverda, vert det returnert noder med minste indeks. ;;Den plukka knuten burde vera den knuten med den minste partemålet.;;Jobben din er berre å fjerne ein av desse faktorane og få det tilbake.;;\"Er det ei liste over alle grene av eit tre som har ikkje-negative nummer?;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>> (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;;              so we will choose the first zero, which has the smallest index.\n;; Constraints:\n;;     * 1 <= nodes.length <= 10000\n;;     * 0 <= node.value\n(define (pluck arr)\n","canonical_solution":"(define (pluck arr)\n  (define (find-smallest-even lst idx smallest-even smallest-index)\n    (cond\n      [(null? lst) (if (eq? smallest-even #f) '() (list smallest-even smallest-index))]\n      [(and (even? (car lst))\n            (or (eq? smallest-even #f) (< (car lst) smallest-even)))\n       (find-smallest-even (cdr lst) (+ idx 1) (car lst) idx)]\n      [else (find-smallest-even (cdr lst) (+ idx 1) smallest-even smallest-index)]))\n  (find-smallest-even arr 0 #f #f))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)\n    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)\n    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)\n    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)\n    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_69","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Viss ingen slik verdi finst, må du returnere -1.;;Frekvensen på eit heilt tal er det talet på gonger det dukkar opp i lista.;;0 og har ei frekvens som er større enn eller lik verdien av heile talet.;;Du får ei liste over alle positive tal som er større enn 0.;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list 1 2 2 3 3 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search lst)\n","canonical_solution":"(define (search lst)\n  (define freq-map (hash)) ; Hash table to store frequency of each integer\n  (for-each (lambda (x)\n              (hash-set! freq-map x (add1 (hash-ref freq-map x 0))))\n            lst)\n  (define result -1)\n  (for-each (lambda (key)\n              (let ((frequency (hash-ref freq-map key)))\n                (when (and (>= frequency key)\n                           (> key result))\n                  (set! result key))))\n            (hash-keys freq-map))\n  result)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)\n    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)\n    (check-within (candidate (list 3 3)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)\n    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)\n    (check-within (candidate (list 3 2 8 2)) 2 0.001)\n    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)\n    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)\n    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)\n    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)\n    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)\n    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)\n    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)\n    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)\n    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)\n    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)\n    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)\n    (check-within (candidate (list 10)) -1 0.001)\n    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)\n    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_70","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;så er det ein maksimum for dei gjenværende heile talane, og så er det ein minimum for dei gjenværende talane, og så vidare.;;Merkeleg at du startar med ein interessant karakter.;;Når me gir ei liste over heile tal, vil me gje tilbake ei liste med alle dei same tal som ei særskild rekkefølge.;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list lst)\n","canonical_solution":"(define (strange_sort_list lst)\n  (define (pick-extreme lst cmp)\n    (apply cmp lst))\n  \n  (define (remove-first lst item)\n    (let loop ((lst lst) (acc '()))\n      (cond\n        [(null? lst) (reverse acc)]\n        [(equal? (car lst) item) (append (reverse acc) (cdr lst))]\n        [else (loop (cdr lst) (cons (car lst) acc))])))\n\n  (define (alternating-sort lst result switch)\n    (cond\n      [(null? lst) (reverse result)]\n      [else\n       (let* ([extreme (pick-extreme lst (if switch min max))]\n              [new-lst (remove-first lst extreme)])\n         (alternating-sort new-lst (cons extreme result) (not switch)))]))\n\n  (alternating-sort lst '() #t))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)\n    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)\n    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)\n    (check-within (candidate (list 111111)) (list 111111) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_71","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Så det er den tredje sida.;;Tre sider gir ein gyldig trekant når sumen av to sider er større enn .;;Elles kjem det til å koma tilbake -1.;;Trekanten blir avrunda til to desimalpunkt om dei tre sidene dannar ein gyldig trekant. ;;Gjeve lengdene på dei tre sidene av ein trekanter, må me finna feltet på trekanter.;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define (triangle_area a b c)\n","canonical_solution":"#lang racket\n\n(define (triangle_area a b c)\n  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (heron-area a b c)\n    (let* ([s (\/ (+ a b c) 2)]\n           [area (sqrt (* s (- s a) (- s b) (- s c)))])\n      (round (* area 100))))\n  (if (is-valid-triangle a b c)\n      (\/ (heron-area a b c) 100.0)\n      -1))\n\n;; Examples\n;(triangle_area 3 4 5)  ; 6.0\n;(triangle_area 1 2 10) ; -1","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 3 4 5) 6.0 0.001)\n    (check-within (candidate 1 2 10) -1 0.001)\n    (check-within (candidate 4 8 5) 8.18 0.001)\n    (check-within (candidate 2 2 2) 1.73 0.001)\n    (check-within (candidate 1 2 3) -1 0.001)\n    (check-within (candidate 10 5 7) 16.25 0.001)\n    (check-within (candidate 2 6 3) -1 0.001)\n    (check-within (candidate 1 1 1) 0.43 0.001)\n    (check-within (candidate 2 2 10) -1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_72","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Objektet q vil fly om det er balansert (det er ein palindromisk liste) og sumen av elementane er mindre enn eller lik den høgaste vekta w.;;Skriv ei funksjon som gjev #t viss objektet q vil fly, og #f om det ikkje er. ;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum possible weight.\n;; >>> (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.\n(define (will_it_fly q w)\n","canonical_solution":"(define (will_it_fly q w)\n  (define (palindromic? lst)\n    (equal? lst (reverse lst)))\n\n  (and (palindromic? q)\n       (<= (apply + q) w)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n    (check-within (candidate (list 3 2 3) 9) #t 0.001)\n    (check-within (candidate (list 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 5) #t 0.001)\n    (check-within (candidate (list 3 2 3) 1) #f 0.001)\n    (check-within (candidate (list 1 2 3) 6) #f 0.001)\n    (check-within (candidate (list 5) 5) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_73","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;er det same på ein og same måte. Du kan endre eit element til eit anna element.;;Ei palindromisk liste er ei liste som ;;Når eg har ei liste over eit ar av heile tal, finn eg det minste talet på element som er ;; >>> (smallest_change (list 1 2 3 5 4 7 9 6))\n;; 4\n;; >>> (smallest_change (list 1 2 3 4 3 2 2))\n;; 1\n;; >>> (smallest_change (list 1 2 3 2 1))\n;; 0\n(define (smallest_change arr)\n","canonical_solution":"(define (smallest_change arr)\n  (define len (length arr))\n  (define half-len (quotient len 2))\n  (define changes 0)\n  (for ([i (in-range half-len)])\n    (when (not (= (list-ref arr i) (list-ref arr (- len i 1))))\n      (set! changes (+ changes 1))))\n  changes)\n\n;; Test cases\n(displayln (smallest_change (list 1 2 3 5 4 7 9 6))) ; 4\n(displayln (smallest_change (list 1 2 3 4 3 2 2)))   ; 1\n(displayln (smallest_change (list 1 2 3 2 1)))       ; 0","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_change))\n    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 4 2)) 1 0.001)\n    (check-within (candidate (list 1 4 4 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_74","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;Om dei to lista har det same talet på tegn, må den fyrste lista returnerast.;;Det totale talet på karakterar i alle rekkjene på lista er mindre enn på den andre lista.;;Skriv ein funksjon som tek imot to strenger og returnerer den som har ;; >>> (total_match (list ) (list ))\n;; (list )\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"Hi\"))\n;; (list \"hI\" \"Hi\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\"))\n;; (list \"hi\" \"admin\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\"))\n;; (list \"hI\" \"hi\" \"hi\")\n;; >>> (total_match (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\"))\n;; (list \"4\")\n(define (total_match lst1 lst2)\n","canonical_solution":"(define (total_match lst1 lst2)\n  (define (total-chars lst)\n    (apply + (map string-length lst)))\n  (let ((char-count1 (total-chars lst1))\n        (char-count2 (total-chars lst2)))\n    (if (< char-count1 char-count2)\n        lst1\n        lst2)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n    (check-within (candidate (list ) (list )) (list ) 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\")) (list \"4\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hii\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list ) (list \"this\")) (list ) 0.001)\n    (check-within (candidate (list \"this\") (list )) (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_75","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Viss me veit at a er mindre enn 100 då kva er femti prosent?;;og falske på det andre.;;Skriv ei funksjon som gjev sann om det oppgjevne talet er ei multiplikasjon av 3 primtal ;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n(define (is_multiply_prime a)\n","canonical_solution":"#lang racket\n\n(define (is-prime? n)\n  (cond\n    [(<= n 1) #f]\n    [(= n 2) #t]\n    [else\n     (let loop ([i 2])\n       (cond\n         [(> (* i i) n) #t]\n         [(= (remainder n i) 0) #f]\n         [else (loop (add1 i))]))]))\n\n(define (is_multiply_prime a)\n  (let loop ([primes (filter is-prime? (range 2 a))])\n    (cond\n      [(empty? primes) #f]\n      [else\n       (let* ([p1 (first primes)]\n              [rest (rest primes)]\n              [numbers (filter (lambda (x) (= (remainder a (* p1 x)) 0))\n                               rest)])\n         (or (ormap\n              (lambda (p2)\n                (member (quotient a (* p1 p2)) rest))\n              numbers)\n             (loop rest)))])))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n    (check-within (candidate 5) #f 0.001)\n    (check-within (candidate 30) #t 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n    (check-within (candidate 105) #t 0.001)\n    (check-within (candidate 126) #f 0.001)\n    (check-within (candidate 729) #f 0.001)\n    (check-within (candidate 891) #f 0.001)\n    (check-within (candidate 1001) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_76","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;x er ein enkel potens av n viss n**int=x ;;potensia av n og falsk i andre tilfelle. ;;Talet ditt er å skrive ei funksjon som gjev sann om eit tal x er eit enkelt ;; >>> (is_simple_power 1 4)\n;; #t\n;; >>> (is_simple_power 2 2)\n;; #t\n;; >>> (is_simple_power 8 2)\n;; #t\n;; >>> (is_simple_power 3 2)\n;; #f\n;; >>> (is_simple_power 3 1)\n;; #f\n;; >>> (is_simple_power 5 3)\n;; #f\n(define (is_simple_power x n)\n","canonical_solution":"(define (is_simple_power x n)\n  (define (power-helper x n current-power)\n    (cond\n      [(= x (expt n current-power)) #t]\n      [(> (expt n current-power) x) #f]\n      [else (power-helper x n (+ current-power 1))]))\n  (cond\n    [(= x 1) #t]\n    [(= n 1) (= x 1)]\n    [(<= x 0) #f]\n    [else (power-helper x n 1)]))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-within (candidate 16 2) #t 0.001)\n    (check-within (candidate 143214 16) #f 0.001)\n    (check-within (candidate 4 2) #t 0.001)\n    (check-within (candidate 9 3) #t 0.001)\n    (check-within (candidate 16 4) #t 0.001)\n    (check-within (candidate 24 2) #f 0.001)\n    (check-within (candidate 128 4) #f 0.001)\n    (check-within (candidate 12 6) #f 0.001)\n    (check-within (candidate 1 1) #t 0.001)\n    (check-within (candidate 1 12) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_77","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Merke: Du kan rekna som at inndata alltid er gyldige. ;;Så, viss denne tallinja er ein tomme tallinja.;;Skriv ei funksjon som tek eit heil tal a og gir tilbake #t ;; >>> (iscube 1)\n;; #t\n;; >>> (iscube 2)\n;; #f\n;; >>> (iscube -1)\n;; #t\n;; >>> (iscube 64)\n;; #t\n;; >>> (iscube 0)\n;; #t\n;; >>> (iscube 180)\n;; #f\n(define (iscube a)\n","canonical_solution":"(define (iscube a)\n  (define abs-a (abs a))\n  (define root (round (expt abs-a (\/ 1 3))))\n  (equal? (* root root root) abs-a))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate iscube))\n    (check-within (candidate 1) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate -1) #t 0.001)\n    (check-within (candidate 64) #t 0.001)\n    (check-within (candidate 180) #f 0.001)\n    (check-within (candidate 1000) #t 0.001)\n    (check-within (candidate 0) #t 0.001)\n    (check-within (candidate 1729) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_78","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;og A,B,C,D,E,F er alltid store bokstavar.;;Merke: Du kan alltid gå ut frå at inndata er rett eller tom streng, ;;B (= desimal 11), D (= desimal 13). ;;Så du må gjere ei mengd av dei neste sifrane: 2, 3, 5, 7, ;;Dei fyrste talane er 2, 3, 5, 7, 11, 13, 17...;;Hexadecimaltal er 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.;;større enn 1 som ikkje er eit produkt av to mindre naturlege tal).;;Det er eit naturleg tal.;;Det kan telle fleire sitronar enn seks;;Du har fått til oppgåve å skrive ei funksjon som tek imot;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\")\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n","canonical_solution":"#lang racket\n\n(define (hex_key num)\n  (define prime-digits '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D))\n  (define (is-prime-digit? digit)\n    (member digit prime-digits))\n  (define (count-prime-hex-digits str count)\n    (cond\n      [(empty? str) count]\n      [(is-prime-digit? (first str))\n       (count-prime-hex-digits (rest str) (add1 count))]\n      [else\n       (count-prime-hex-digits (rest str) count)]))\n  (count-prime-hex-digits (string->list num) 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n    (check-within (candidate \"AB\") 1 0.001)\n    (check-within (candidate \"1077E\") 2 0.001)\n    (check-within (candidate \"ABED1A33\") 4 0.001)\n    (check-within (candidate \"2020\") 2 0.001)\n    (check-within (candidate \"123456789ABCDEF0\") 6 0.001)\n    (check-within (candidate \"112233445566778899AABBCCDDEEFF00\") 12 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_79","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Dei ekstra teikna er til for å hjelpa med formatet.;;Det vert eit ekstra par teikn \"db\" i byrjinga og på enden av strengen. ;;Kvar teikneset i ei streng er ein \"0\" eller ein \"1\".;;Funksjonen skal returnere ein streng, der kvar teikn representerer ein binær ;;Du får ein siffer i tiande form og du må omsetje det til ...;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n","canonical_solution":"#lang racket\n\n(define (decimal_to_binary decimal)\n  (define binary-str (number->string decimal 2))\n  (string-append \"db\" binary-str \"db\"))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 0) \"db0db\" 0.001)\n    (check-within (candidate 32) \"db100000db\" 0.001)\n    (check-within (candidate 103) \"db1100111db\" 0.001)\n    (check-within (candidate 15) \"db1111db\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_80","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Ei streng er haprkt viss den er minst 3 bokstavar lang og alle 3 på rad er særskilde.;;Jobben din er å sjå om stringane er \"haprkt\" eller ikkje.;;Du får ein H. Dette er ein H. Den neste noten er ein C.;; >>> (is_happy \"a\")\n;; #f\n;; >>> (is_happy \"aa\")\n;; #f\n;; >>> (is_happy \"abcd\")\n;; #t\n;; >>> (is_happy \"aabb\")\n;; #f\n;; >>> (is_happy \"adb\")\n;; #t\n;; >>> (is_happy \"xyy\")\n;; #f\n(define (is_happy s)\n","canonical_solution":"(define (is_happy s)\n  (define len (string-length s))\n  (if (< len 3)\n      #f\n      (for\/and ([i (in-range (- len 2))])\n        (let ([a (string-ref s i)]\n              [b (string-ref s (+ i 1))]\n              [c (string-ref s (+ i 2))])\n          (and (not (equal? a b))\n               (not (equal? a c))\n               (not (equal? b c)))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-within (candidate \"a\") #f 0.001)\n    (check-within (candidate \"aa\") #f 0.001)\n    (check-within (candidate \"abcd\") #t 0.001)\n    (check-within (candidate \"aabb\") #f 0.001)\n    (check-within (candidate \"adb\") #t 0.001)\n    (check-within (candidate \"xyy\") #f 0.001)\n    (check-within (candidate \"iopaxpoi\") #t 0.001)\n    (check-within (candidate \"iopaxioi\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_81","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;0.0 E ;;> 0, 0 D- ;;> 0,7 D ;;> 1,0 D+ ;;> 1,3 C- ;;> 1,7 C ;;> 2,0 C+ ;;> 2.3 B- ;;> 2,7 B ;;> 3,0 B+ ;;> 3.3 A- ;;> 3,7 A ;;4.0 A+ ;;Me er ein historiefortellar.;;ein funksjon som kan gje ut ei liste over bokstavar med følgjande tabel: ;;Ho har gjeve deg ei liste over alle studentane dine, og du må skrive det ned.;;Det einaste problemet er at ho har mista visninga.;;Læraren utviklar ein algoritme for å karakterisere karakterane.;;Det er siste uken i semesteret, og læraren må måle karakterane.;; >>> (grade_equation (list 4.0 3 1.7 2 3.5))\n;; (list \"A+\" \"B\" \"C-\" \"C\" \"A-\")\n(define (numerical_letter_grade grades)\n","canonical_solution":"(define (numerical_letter_grade grades)\n  (map (lambda (gpa)\n         (cond\n           [(= gpa 4.0) \"A+\"]\n           [(> gpa 3.7) \"A\"]\n           [(> gpa 3.3) \"A-\"]\n           [(> gpa 3.0) \"B+\"]\n           [(> gpa 2.7) \"B\"]\n           [(> gpa 2.3) \"B-\"]\n           [(> gpa 2.0) \"C+\"]\n           [(> gpa 1.7) \"C\"]\n           [(> gpa 1.3) \"C-\"]\n           [(> gpa 1.0) \"D+\"]\n           [(> gpa 0.7) \"D\"]\n           [(> gpa 0.0) \"D-\"]\n           [else \"E\"]))\n       grades))\n\n;; Example usage\n(numerical_letter_grade (list 4.0 3 1.7 2 3.5))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\" \"C\" \"A-\") 0.001)\n    (check-within (candidate (list 1.2)) (list \"D+\") 0.001)\n    (check-within (candidate (list 0.5)) (list \"D-\") 0.001)\n    (check-within (candidate (list 0.0)) (list \"E\") 0.001)\n    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list \"D\" \"D-\" \"C-\" \"B\" \"B+\") 0.001)\n    (check-within (candidate (list 0.0 0.7)) (list \"E\" \"D-\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_82","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;Lengd er eit primt tal eller #f elles ;;Skriv ei funksjon som tek ein streng og gjev #t viss strengen ;; >>> (prime_length \"Hello\")\n;; #t\n;; >>> (prime_length \"abcdcba\")\n;; #t\n;; >>> (prime_length \"kittens\")\n;; #t\n;; >>> (prime_length \"orange\")\n;; #f\n(define (prime_length string)\n","canonical_solution":"#lang racket\n\n(define (is-prime? n)\n  (cond\n    [(<= n 1) #f]\n    [(= n 2) #t]\n    [else\n     (define (has-divisor? d)\n       (cond\n         [(> (* d d) n) #f]\n         [(= 0 (remainder n d)) #t]\n         [else (has-divisor? (+ d 1))]))\n     (not (has-divisor? 2))]))\n\n(define (prime-length string)\n  (is-prime? (string-length string)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n    (check-within (candidate \"Hello\") #t 0.001)\n    (check-within (candidate \"abcdcba\") #t 0.001)\n    (check-within (candidate \"kittens\") #t 0.001)\n    (check-within (candidate \"orange\") #f 0.001)\n    (check-within (candidate \"wow\") #t 0.001)\n    (check-within (candidate \"world\") #t 0.001)\n    (check-within (candidate \"MadaM\") #t 0.001)\n    (check-within (candidate \"Wow\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"HI\") #t 0.001)\n    (check-within (candidate \"go\") #t 0.001)\n    (check-within (candidate \"gogo\") #f 0.001)\n    (check-within (candidate \"aaaaaaaaaaaaaaa\") #f 0.001)\n    (check-within (candidate \"Madam\") #t 0.001)\n    (check-within (candidate \"M\") #f 0.001)\n    (check-within (candidate \"0\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_83","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Positive heile tal som byrjar eller endar på 1.;;Gjeve eit positivt heiltal n, skal vi gje talet på talet på tal med n siffer (define (starts_one_ends n)\n","canonical_solution":"#lang racket\n\n(define (starts_one_ends n)\n  (define total-n-digit (expt 10 (- n 1))) ;; Total n-digit numbers is 9 * 10^(n-1)\n  ;; Count the numbers starting with 1 and those ending with 1, but remove overlap\n  (- (+ total-n-digit total-n-digit) (if (> n 1) (expt 10 (- n 2)) 1)))\n\n;; Testing the function\n(starts_one_ends 1) ;; Should return 1 (1)\n(starts_one_ends 2) ;; Should return 18 (10–19, 11)\n(starts_one_ends 3) ;; Should return 198 (100–199, 101, 111, ..., 119, 121, ..., 191)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 18 0.001)\n    (check-within (candidate 3) 180 0.001)\n    (check-within (candidate 4) 1800 0.001)\n    (check-within (candidate 5) 18000 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_84","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel ;;Gjeve eit positivt heiltal N, skal du gje den totale summen av si siffer i binær. ;; >>> (solve 1000)\n;; \"1\"\n;; >>> (solve 150)\n;; \"110\"\n;; >>> (solve 147)\n;; \"1100\"\n;; Variables:\n;;     @N integer\n;;          Constraints: 0 ≤ N ≤ 10000.\n;; Output:\n;;      a string of binary number\n(define (solve N)\n","canonical_solution":"(define (solve N)\n  (define (sum-digits n)\n    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (number->string (sum-digits N) 2))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate 1000) \"1\" 0.001)\n    (check-within (candidate 150) \"110\" 0.001)\n    (check-within (candidate 147) \"1100\" 0.001)\n    (check-within (candidate 333) \"1001\" 0.001)\n    (check-within (candidate 963) \"10010\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_85","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Med ei liste over alle tall som er uheldige skal du først leggje til dei jevne elementane som er uheldige.;; >>> (add (list 4 2 6 7))\n;; 2\n(define (add lst)\n","canonical_solution":"#lang racket\n\n(define (add lst)\n  (define (helper lst idx acc)\n    (cond\n      [(null? lst) acc]\n      [(and (even? (car lst)) (odd? idx))\n       (helper (cdr lst) (+ idx 1) (+ acc (car lst)))]\n      [else\n       (helper (cdr lst) (+ idx 1) acc)]))\n  (helper lst 0 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate (list 4 88)) 88 0.001)\n    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)\n    (check-within (candidate (list 4 0 6 7)) 0 0.001)\n    (check-within (candidate (list 4 4 6 8)) 12 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_86","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Merke: Du bør halda ordren på ord og ledige ramar i setninga. ;;oppstigande orden basert på ASCII-verda. ;;blir erstatta med eit nytt ord der alle teikna er ordna i ;;Ein strenge er ei ordentleg versjon av ein streng der alle orda er (avgrensa med mellomrom) ;;Skriv ei funksjon som tek ein streng og gir ein ordenert versjon av han. ;; >>> (anti_shuffle \"Hi\")\n;; \"Hi\"\n;; >>> (anti_shuffle \"hello\")\n;; \"ehllo\"\n;; >>> (anti_shuffle \"Hello World!!!\")\n;; \"Hello !!!Wdlor\"\n(define (anti_shuffle s)\n","canonical_solution":"(define (anti_shuffle s)\n  (define (sort-word w)\n    (list->string (sort (string->list w) char<?)))\n  (define words (regexp-split #px\"\\\\s+\" s))\n  (define sorted-words (map sort-word words))\n  (regexp-replace* #px\"\\\\S+\" s (λ (match) (sort-word match))))\n\n;; Example usage:\n;; (anti_shuffle \"Hi\")\n;; (anti_shuffle \"hello\")\n;; (anti_shuffle \"Hello World!!!\")","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate anti_shuffle))\n    (check-within (candidate \"Hi\") \"Hi\" 0.001)\n    (check-within (candidate \"hello\") \"ehllo\" 0.001)\n    (check-within (candidate \"number\") \"bemnru\" 0.001)\n    (check-within (candidate \"abcd\") \"abcd\" 0.001)\n    (check-within (candidate \"Hello World!!!\") \"Hello !!!Wdlor\" 0.001)\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_87","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Så lat oss settje koordinatane i rekkjefølgje etter kolonner.;;Koordinatar skal først sorteres etter rekkje i oppstigande rekkefølge.;;kvar liste er ein koordinat - (rad, kolonne), som byrjar med 0. ;;og returnerer lista over lista, [(x1, y1), (x2, y2) ...] slik at ;;Gjeve lst, og heile tal x, finn heile tal x i lista, ;;kvar rekkje kan innehalda eit anna tal kolumn. ;;som er den same som Matrix, men ikkje som ein matriks;;Du får eit to-dimensjonalt databoks i form av ein serie data.;; >>> (get_row (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n;; (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0))\n;; >>> (get_row (list ) 1)\n;; (list )\n;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n;; (list (list 2 2))\n(define (get_row lst x)\n","canonical_solution":"(define (get_row lst x)\n  (define (find-coordinates row idx)\n    (map (lambda (col_idx val)\n           (if (= val x) (list idx col_idx) #f))\n         (range (length row))\n         row))\n  (define (filter-coordinates coordinates)\n    (filter (lambda (coord) coord) coordinates))\n  (define (process-row row idx)\n    (filter-coordinates (find-coordinates row idx)))\n  (define all-coordinates\n    (apply append\n           (map-indexed process-row lst)))\n  (define (sort-by-row col-list)\n    (sort col-list\n          (lambda (c1 c2)\n            (or (< (first c1) (first c2))\n                (and (= (first c1) (first c2))\n                     (> (second c1) (second c2)))))))\n  (sort-by-row all-coordinates))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)\n    (check-within (candidate (list ) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_88","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;* Endra ikkje lista som er gjeven. ;;Merk: ;;Eller sortera den i fallande rekkefølge om sumen ((første indeksverdien, siste indeksverdien) er jevn. ;;Du vil orte lista oppover om sumen ((første indeksverdien, siste indeksverdien) er ujevn, ;;Gjeve ei liste over ikkje-negative heile tal, må ein returnere ein corkt av lista etter å ha sortert, ;; >>> (sort_array (list ))\n;; (list )\n;; >>> (sort_array (list 5))\n;; (list 5)\n;; >>> (sort_array (list 2 4 3 0 1 5))\n;; (list 0 1 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n(define (sort_array array)\n","canonical_solution":"(define (sort_array array)\n  (if (null? array)\n      array\n      (let* ((first-val (first array))\n             (last-val (last array))\n             (sum (+ first-val last-val))\n             (sorted-array (sort array <)))\n        (if (odd? sum)\n            sorted-array\n            (reverse sorted-array)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5)) (list 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3 4 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0) 0.001)\n    (check-within (candidate (list 2 1)) (list 1 2) 0.001)\n    (check-within (candidate (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87) 0.001)\n    (check-within (candidate (list 21 14 23 11)) (list 23 21 14 11) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_89","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Eg skal skifte to ganger to plasser.;;Alfabetet skal roterast slik at bokstavane ;;returnerer ein streng kryptert med alfabetet som vert rotert. ;;Ta ein streng som argument og skriv inn ein funksjon.;; >>> (encrypt \"hi\")\n;; \"lm\"\n;; >>> (encrypt \"asdfghjkl\")\n;; \"ewhjklnop\"\n;; >>> (encrypt \"gf\")\n;; \"kj\"\n;; >>> (encrypt \"et\")\n;; \"ix\"\n(define (encrypt s)\n","canonical_solution":"#lang racket\n\n(define (encrypt-char c)\n  (define offset (* 2 2))\n  (define base (if (char<=? c #\\Z) #\\A #\\a))\n  (define shifted (integer->char (+ (modulo (+ (- (char->integer c) (char->integer base)) offset) 26)\n                                    (char->integer base))))\n  shifted)\n\n(define (encrypt s)\n  (list->string (map encrypt-char (string->list s))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n    (check-within (candidate \"hi\") \"lm\" 0.001)\n    (check-within (candidate \"asdfghjkl\") \"ewhjklnop\" 0.001)\n    (check-within (candidate \"gf\") \"kj\" 0.001)\n    (check-within (candidate \"et\") \"ix\" 0.001)\n    (check-within (candidate \"faewfawefaewg\") \"jeiajeaijeiak\" 0.001)\n    (check-within (candidate \"hellomyfriend\") \"lippsqcjvmirh\" 0.001)\n    (check-within (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" 0.001)\n    (check-within (candidate \"a\") \"e\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_90","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Returnerer #f viss det ikkje finst noko slikt element. ;;Skriv ein funksjon next_smallest (() som returnerer det andre minste elementet i lista. ;;Du får ei liste over alle dei like sannsynlege utfalla.;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n(define (next_smallest lst)\n","canonical_solution":"(define (next_smallest lst)\n  (let ([sorted-lst (sort (remove-duplicates lst) <)])\n    (if (>= (length sorted-lst) 2)\n        (second sorted-lst)\n        #f)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)\n    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list -35 34 12 -45)) -35 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_91","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Fråder er avgrensa med \"\", \"?\" eller \"!\". ;;\"Boredom\" er ein setning som byrjar med \"i\".;;Du får ein haug med ord og du må telle tala.;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n","canonical_solution":"(define (is_bored S)\n  (define sentences \n    (regexp-split #\"[.!?]\" S))\n  (define (starts-with-i? sentence)\n    (regexp-match #\"\\s*I\\b\" (string-trim sentence)))\n  (define boredom-sentences\n    (filter starts-with-i? sentences))\n  (length boredom-sentences))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-within (candidate \"Hello world\") 0 0.001)\n    (check-within (candidate \"Is the sky blue?\") 0 0.001)\n    (check-within (candidate \"I love It !\") 1 0.001)\n    (check-within (candidate \"bIt\") 0 0.001)\n    (check-within (candidate \"I feel good today. I will be productive. will kill It\") 2 0.001)\n    (check-within (candidate \"You and I are going for a walk\") 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_92","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;Gjev false i alle andre tilfelle. ;;Gjev sann viss ein av tala er lik summen av dei andre to, og alle tala er heilt tal. ;;Ta ein funksjon som tek 3 tal.;; >>> (any_int 5 2 7)\n;; #t\n;; >>> (any_int 3 2 2)\n;; #f\n;; >>> (any_int 3 -2 1)\n;; #t\n;; >>> (any_int 3.6 -2.2 2)\n;; #f\n(define (any_int x y z)\n","canonical_solution":"(define (any_int x y z)\n  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z))\n           (= y (+ x z))\n           (= z (+ x y)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n    (check-within (candidate 2 3 1) #t 0.001)\n    (check-within (candidate 2.5 2 3) #f 0.001)\n    (check-within (candidate 1.5 5 3.5) #f 0.001)\n    (check-within (candidate 2 6 2) #f 0.001)\n    (check-within (candidate 4 2 2) #t 0.001)\n    (check-within (candidate 2.2 2.2 2.2) #f 0.001)\n    (check-within (candidate -4 6 2) #t 0.001)\n    (check-within (candidate 2 1 1) #t 0.001)\n    (check-within (candidate 3 4 7) #t 0.001)\n    (check-within (candidate 3.0 4 7) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_93","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Ta berre bokstavar.;;Det er ein bokstav i det engelske alfabetet.;;Det er ei melding med bokstaven \"A\" som er to plassar foran dette.;;Så det er ein måte å skifte høvur, der alle bokstavane er i ulike språk.;;Skriv ei funksjon som tek imot ei melding og set inn ein slik kode;; >>> (encode \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n(define (encode message)\n","canonical_solution":"(define (encode message)\n  (define vowels (string->list \"aeiouAEIOU\"))\n  (define replacements (string->list \"cgkqwCGKQW\"))\n  \n  (define (swap-case char)\n    (if (char-upper-case? char)\n        (char-downcase char)\n        (char-upcase char)))\n  \n  (define (replace-vowel char)\n    (let ([index (ormap (lambda (vowel)\n                           (if (char=? char vowel)\n                               (list-index (lambda (x) (char=? x vowel)) vowels)\n                               #f))\n                         vowels)])\n      (if (not (false? index))\n          (list-ref replacements index)\n          char)))\n  \n  (list->string\n   (map (lambda (char)\n          (let ([swapped (swap-case char)])\n            (replace-vowel swapped)))\n        (string->list message))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-within (candidate \"TEST\") \"tgst\" 0.001)\n    (check-within (candidate \"Mudasir\") \"mWDCSKR\" 0.001)\n    (check-within (candidate \"YES\") \"ygs\" 0.001)\n    (check-within (candidate \"This is a message\") \"tHKS KS C MGSSCGG\" 0.001)\n    (check-within (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_94","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Du må finna den største verdien og få tilbake summen av dei same sifrane.;;Du får ei liste over alle dei like sannsynlege utfalla.;; >>> (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n;; 10\n;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n;; 25\n;; >>> (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n;; 13\n;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))\n;; 11\n;; >>> (skjkasdkd (list 0 81 12 3 1 21))\n;; 3\n;; >>> (skjkasdkd (list 0 8 1 2 1 7))\n;; 7\n(define (skjkasdkd lst)\n","canonical_solution":"#lang racket\n\n(define (prime? n)\n  (define (is-prime? n divisor)\n    (cond\n      [(< n 2) #f]\n      [(= divisor 1) #t]\n      [(= (remainder n divisor) 0) #f]\n      [else (is-prime? n (sub1 divisor))]))\n  (is-prime? n (sqrt n)))\n\n(define (sum-of-digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10) (sum-of-digits (quotient n 10)))))\n\n(define (skjkasdkd lst)\n  (let loop ([lst lst] [max-prime -1])\n    (cond\n      [(null? lst) (if (= max-prime -1) 0 (sum-of-digits max-prime))]\n      [(prime? (car lst))\n       (loop (cdr lst) (max (car lst) max-prime))]\n      [else\n       (loop (cdr lst) max-prime)])))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)\n    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)\n    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)\n    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)\n    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)\n    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)\n    (check-within (candidate (list 8191)) 19 0.001)\n    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)\n    (check-within (candidate (list 127 97 8192)) 10 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_95","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Funksjonen skal returnere #f er den gjevne hashen er tom. ;;case eller alle typar er strenger i store bokstavar, annars returnerar #f. ;;Når ein har ein hash, skal ein returnere #t viss alle tyvar er strenger i underordna ;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n","canonical_solution":"(define (check_dict_case dict)\n  (if (or (hash-empty? dict)\n          (not (andmap string? (hash-keys dict))))\n      #f\n      (let ([keys (hash-keys dict)])\n        (or (andmap (λ (key) (string=? key (string-downcase key))) keys)\n            (andmap (λ (key) (string=? key (string-upcase key))) keys)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f 0.001)\n    (check-within (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f 0.001)\n    (check-within (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t 0.001)\n    (check-within (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t 0.001)\n    (check-within (candidate #hash()) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_96","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;til dømes: ;;Dei er grunntal og mindre enn n.;;Implementer ein funksjon som tek eit ikkje-negativt heiltal og returnerer ei liste over dei første n ;; >>> (count_up_to 5)\n;; (list 2 3)\n;; >>> (count_up_to 11)\n;; (list 2 3 5 7)\n;; >>> (count_up_to 0)\n;; (list )\n;; >>> (count_up_to 20)\n;; (list 2 3 5 7 11 13 17 19)\n;; >>> (count_up_to 1)\n;; (list )\n;; >>> (count_up_to 18)\n;; (list 2 3 5 7 11 13 17)\n(define (count_up_to n)\n","canonical_solution":"#lang racket\n\n(define (is-prime? num)\n  (cond\n    [(< num 2) #f]\n    [else\n     (define (check-divisor divisor)\n       (cond\n         [(> (* divisor divisor) num) #t]\n         [(= (remainder num divisor) 0) #f]\n         [else (check-divisor (+ divisor 1))]))\n     (check-divisor 2)]))\n\n(define (count_up_to n)\n  (define (helper current result)\n    (cond\n      [(>= current n) (reverse result)]\n      [(is-prime? current) (helper (+ current 1) (cons current result))]\n      [else (helper (+ current 1) result)]))\n  (helper 2 '()))\n\n;; Examples for testing\n(count_up_to 5)    ;; (list 2 3)\n(count_up_to 11)   ;; (list 2 3 5 7)\n(count_up_to 0)    ;; (list )\n(count_up_to 20)   ;; (list 2 3 5 7 11 13 17 19)\n(count_up_to 1)    ;; (list )\n(count_up_to 18)   ;; (list 2 3 5 7 11 13 17)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_up_to))\n    (check-within (candidate 5) (list 2 3) 0.001)\n    (check-within (candidate 6) (list 2 3 5) 0.001)\n    (check-within (candidate 7) (list 2 3 5) 0.001)\n    (check-within (candidate 10) (list 2 3 5 7) 0.001)\n    (check-within (candidate 0) (list ) 0.001)\n    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)\n    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)\n    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_97","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Lat oss rekna med at dataen er gyldig.;;Produktet av einingssiffra deira. ;;Komplett funksjonen som tek to heiltall og returnerer ;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n(define (multiply a b)\n","canonical_solution":"(define (multiply a b)\n  (* (remainder (abs a) 10) (remainder (abs b) 10)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n    (check-within (candidate 148 412) 16 0.001)\n    (check-within (candidate 19 28) 72 0.001)\n    (check-within (candidate 2020 1851) 0 0.001)\n    (check-within (candidate 14 -15) 20 0.001)\n    (check-within (candidate 76 67) 42 0.001)\n    (check-within (candidate 17 27) 49 0.001)\n    (check-within (candidate 0 1) 0 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_98","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Ta til dømes ei streng s, tel tel tellet på alle hovudbokstavar i parteklassar. ;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>> (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define (count_upper s)\n","canonical_solution":"#lang racket\n\n(define (count_upper s)\n  (define vowels (set \"AEIOU\"))\n  (define (is-even? n) (= (modulo n 2) 0))\n  (define (count-upper-at-indices lst idx)\n    (cond\n      [(null? lst) 0]\n      [(and (is-even? idx) (set-member? vowels (car lst))) \n       (+ 1 (count-upper-at-indices (cdr lst) (+ idx 1)))]\n      [else (count-upper-at-indices (cdr lst) (+ idx 1))]))\n  (count-upper-at-indices (string->list s) 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-within (candidate \"aBCdEf\") 1 0.001)\n    (check-within (candidate \"abcdefg\") 0 0.001)\n    (check-within (candidate \"dBBE\") 0 0.001)\n    (check-within (candidate \"B\") 0 0.001)\n    (check-within (candidate \"U\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"EEEE\") 2 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_99","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;Frå to heile tal, rundar me frå null.;;og returnerer det nærmeste heile talet til eit likverdig tal.;;Berre ei funksjon som tek ein verdi (streng) som representerer eit tal ;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding away from zero means that if the given number is equidistant\n;; from two integers, the one you should return is the one that is the\n;; farthest from zero. For example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"-14.5\") should return -15.\n(define (closest_integer value)\n","canonical_solution":"(define (closest_integer value)\n  (let* ((num (string->number value))\n         (floor-num (floor num))\n         (ceil-num (ceiling num))\n         (halfway? (= (+ floor-num 0.5) num)))\n    (if halfway?\n        (if (positive? num) ceil-num floor-num)\n        (round num))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-within (candidate \"10\") 10 0.001)\n    (check-within (candidate \"14.5\") 15 0.001)\n    (check-within (candidate \"-15.5\") -16 0.001)\n    (check-within (candidate \"15.3\") 15 0.001)\n    (check-within (candidate \"0\") 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_100","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;i er talet på steinar i nivået (i+1). ;;Returnerer talet på steinar i kvar nivå i ei liste, der elementet er i indekset ;;- Det neste jevne talet, viss n er jevnt.;;- det neste ujevne talet viss n er ujevnt. ;;Talet på steinar i neste nivå er: ;;Det fyrste nivået har n steinar.;;Gjeve eit positivt tal n, må du laga ein haug med n ulike nivå.;; >>> (make_a_pile 3)\n;; (list 3 5 7)\n(define (make_a_pile n)\n","canonical_solution":"#lang racket\n\n(define (make-a-pile n)\n  (define (next-odd x)\n    (if (odd? x)\n        (+ x 2)\n        (+ x 1)))\n  (define (next-even x)\n    (if (even? x)\n        (+ x 2)\n        (+ x 1)))\n  (define (pile-helper current-level current-value)\n    (if (> current-level n)\n        '()\n        (cons current-value\n              (pile-helper (+ current-level 1)\n                           (if (odd? n)\n                               (next-odd current-value)\n                               (next-even current-value))))))\n  (pile-helper 1 n))\n\n;; Example\n;; (make-a-pile 3) should return (list 3 5 7)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n    (check-within (candidate 3) (list 3 5 7) 0.001)\n    (check-within (candidate 4) (list 4 6 8 10) 0.001)\n    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)\n    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)\n    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_101","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;for å bryta opp ei rekkje ord og få tilbake ein oversikt over alle ord som vert brukt.;;Du får ein rekkje ord som er skilde med komma eller mellomrom.;; >>> (words_string \"Hi, my name is John\")\n;; (list \"Hi\" \"my\" \"name\" \"is\" \"John\")\n;; >>> (words_string \"One, two, three, four, five, six\")\n;; (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\")\n(define (words_string s)\n","canonical_solution":"#lang racket\n\n(define (split-at-delimiters s delimiters)\n  (regexp-split (regexp (string-join delimiters \"|\")) s))\n\n(define (words_string s)\n  (filter (lambda (word) (not (string=? word \"\")))\n          (split-at-delimiters s '(\"[ ,]\"))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_string))\n    (check-within (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\" \"is\" \"John\") 0.001)\n    (check-within (candidate \"One, two, three, four, five, six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\") 0.001)\n    (check-within (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_102","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;viss det ikkje finst noko slikt tal, må funksjonen gje -1.;;Det største, jamne heile talet som er i området [x,y] inkludert.;;Denne funksjonen tek to positive tal x og y og gjev tilbake ;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num x y)\n","canonical_solution":"(define (choose_num x y)\n  (define min (min x y))\n  (define max (max x y))\n  (define biggest-even\n    (if (even? max)\n        max\n        (- max 1)))\n  (if (>= biggest-even min)\n      biggest-even\n      -1))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n    (check-within (candidate 12 15) 14 0.001)\n    (check-within (candidate 13 12) -1 0.001)\n    (check-within (candidate 33 12354) 12354 0.001)\n    (check-within (candidate 5234 5233) -1 0.001)\n    (check-within (candidate 6 29) 28 0.001)\n    (check-within (candidate 27 10) -1 0.001)\n    (check-within (candidate 7 7) -1 0.001)\n    (check-within (candidate 546 546) 546 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_103","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Viss n er større enn m, vert det -1.;;Rundt opp svaret til det nærmeste heile talet og omset det til binært tal.;;gjennomsnittet av heile tal frå n til m (inkludert n og m).;;Du har to tal, n og m, og du skal gjere ei addisjon av dei to.;; >>> (rounded_avg 1 5)\n;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n","canonical_solution":"(define (rounded_avg n m)\n  (if (> n m)\n      -1\n      (let* ((count (+ 1 (- m n)))\n             (sum (* (+ n m) count) 0.5)\n             (average (round (\/ sum count))))\n        (string-append \"0b\" (number->string average 2)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n    (check-within (candidate 1 5) \"0b11\" 0.001)\n    (check-within (candidate 7 13) \"0b1010\" 0.001)\n    (check-within (candidate 964 977) \"0b1111001010\" 0.001)\n    (check-within (candidate 996 997) \"0b1111100100\" 0.001)\n    (check-within (candidate 560 851) \"0b1011000010\" 0.001)\n    (check-within (candidate 185 546) \"0b101101110\" 0.001)\n    (check-within (candidate 362 496) \"0b110101101\" 0.001)\n    (check-within (candidate 350 902) \"0b1001110010\" 0.001)\n    (check-within (candidate 197 233) \"0b11010111\" 0.001)\n    (check-within (candidate 7 5) -1 0.001)\n    (check-within (candidate 5 1) -1 0.001)\n    (check-within (candidate 5 5) \"0b101\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_104","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Merke: Listen som vert returnert, skal sorteres i aukande rekkefølge.;;Elemente som ikkje har noko partalnummer.;;Gjeve ei liste over positive heile tal x. Gjev tilbake ei sortert liste over alle ;; >>> (unique_digits (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n;; (list )\n(define (unique_digits x)\n","canonical_solution":"#lang racket\n\n(define (has-even-digit? n)\n  (let loop ((n n))\n    (cond\n      [(zero? n) #f]\n      [(even? (modulo n 10)) #t]\n      [else (loop (quotient n 10))])))\n\n(define (unique_digits x)\n  (sort \n   (filter \n    (lambda (n) (not (has-even-digit? n)))\n    x)\n   <))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)\n    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)\n    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)\n    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_105","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;1, 2, 3, 4, 5, 6, 7, 8 og 9. Du veit det kanskje ikkje.;;Omvend resultata, og erstatta kvar siffer med det tilhøyrande namnet frå ;;Ta ein tilgjengeleg tal, så lat oss settje dei mellom 1 og 9.;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;;   If the list is empty, return an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;;   If the list has any strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\")\n(define (by_length arr)\n","canonical_solution":"(define (by_length arr)\n  (define digit-names\n    (list \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n  \n  (map (lambda (n) (list-ref digit-names (- n 1)))\n       (reverse (sort (filter (lambda (x) (and (>= x 1) (<= x 9))) arr) <))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\") 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -1 55)) (list \"One\") 0.001)\n    (check-within (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\") 0.001)\n    (check-within (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_106","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Faktorialen av i er multiplikasjonen av tala frå 1 til i (1 * 2 * ... * i).;;Eg startar frå 1.;;eller summen av tala frå 1 til i. ;;og gir tilbake ei liste av storleik n, slik at verdien av elementet ved indeksen i er faktorialet av i om i er jevnt ;;Implementer funksjonen f som tek n som parameter, ;; >>> (f 5)\n;; (list 1 2 6 24 15)\n(define (f n)\n","canonical_solution":"(define (factorial x)\n  (if (zero? x)\n      1\n      (* x (factorial (- x 1)))))\n\n(define (sum-to x)\n  (foldl + 0 (range 1 (+ x 1))))\n\n(define (f n)\n  (map (lambda (i)\n         (if (even? i)\n             (factorial i)\n             (sum-to i)))\n       (range 1 (+ n 1))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)\n    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n    (check-within (candidate 3) (list 1 2 6) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_107","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel 1: ;;heile tal palindrom som ligg innanfor området ((1, n), inklusiv. ;;Gjeve eit positivt heiltal n, skal vi gje tilbake ei liste som har talet på ujevne og partake tall ;; >>> (even_odd_palindrome 3)\n;; (list 1 2)\n;;     Explanation:\n;;     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n;; Example 2:\n;; >>> (even_odd_palindrome 12)\n;; (list 4 6)\n;;     Explanation:\n;;     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n;; Note:\n;;     1. 1 <= n <= 10^3\n;;     2. returned list has the number of even and odd integer palindromes respectively.\n(define (even_odd_palindrome n)\n","canonical_solution":"#lang racket\n\n(define (is-palindrome? num)\n  (let ([num-str (number->string num)])\n    (string=? num-str (string-reverse num-str))))\n\n(define (even_odd_palindrome n)\n  (define even-count 0)\n  (define odd-count 0)\n  (for ([i (in-range 1 (+ n 1))])\n    (when (is-palindrome? i)\n      (if (even? i)\n          (set! even-count (+ even-count 1))\n          (set! odd-count (+ odd-count 1)))))\n  (list even-count odd-count))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_palindrome))\n    (check-within (candidate 123) (list 8 13) 0.001)\n    (check-within (candidate 12) (list 4 6) 0.001)\n    (check-within (candidate 3) (list 1 2) 0.001)\n    (check-within (candidate 63) (list 6 8) 0.001)\n    (check-within (candidate 25) (list 5 6) 0.001)\n    (check-within (candidate 19) (list 4 6) 0.001)\n    (check-within (candidate 9) (list 4 5) 0.001)\n    (check-within (candidate 1) (list 0 1) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_108","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Så, -123 har teikna siffer -1, 2 og 3.;;Viss eit tal er negativt, så er det første teikna sifferet negativt: ;;Det er eit tal element som har ein sum av siffer > 0. ;;Skriv ein funksjon som tek inn ein liste over heile tal og returnerer ;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n","canonical_solution":"(define (sum-of-digits n)\n  (define abs-n (abs n))\n  (define (sum-helper num)\n    (if (zero? num)\n        0\n        (+ (modulo num 10) (sum-helper (quotient num 10)))))\n  (if (negative? n)\n      (- (sum-helper abs-n (* 10 (floor-quotient abs-n 10))))\n      (sum-helper abs-n)))\n\n(define (count_nums arr)\n  (define (count-helper lst count)\n    (cond\n      [(empty? lst) count]\n      [(> (sum-of-digits (first lst)) 0) (count-helper (rest lst) (+ 1 count))]\n      [else (count-helper (rest lst) count)]))\n  (count-helper arr 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list -1 -2 0)) 0 0.001)\n    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)\n    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)\n    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)\n    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_109","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Merke: Det er garantert at lista har unike element.;;Viss lista er tom, så returnerer #t. ;;så return #t else return #f. ;;Om det er mogleg å få den sorterte lista ved å utføra den ovennevnte handlinga ;;Utgangspunktet i lista, det vil seia 0-nde indeksen.;;Det siste elementet i lista vert flytta til ;;Ein høgre-skift-operasjon tyder at alle element i lista blir skifta med éin.;;Du kan gjera dette fleire gonger.;;Følgende handlemåte på lista: ;;Det er mogleg å få ei liste sortert i ikkje-dekkjande rekkje ved å utføra ;;Tall i lista vert satt tilfeldig, så du må vite når du skal fylgje tallene.;;Vi har ei liste 'arr' av N heiltall arr[1], arr[2], ..., arr[N].;; >>> (move_one_ball (list 3 4 5 1 2))\n;; #t\n;; Explanation: By performin 2 right shift operations, non-decreasing order can\n;;              be achieved for the given list.\n;; >>> (move_one_ball (list 3 5 4 1 2))\n;; #f\n;; Explanation:It is not possible to get non-decreasing order for the given\n;;             list by performing any number of right shift operations.\n(define (move_one_ball arr)\n","canonical_solution":"(define (move_one_ball arr)\n  (define n (length arr))\n  (define (is-non-decreasing lst)\n    (or (null? lst) (null? (cdr lst))\n        (and (<= (car lst) (cadr lst)) (is-non-decreasing (cdr lst)))))\n  (define (can-be-sorted-by-shifting lst shifts)\n    (if (is-non-decreasing lst)\n        #t\n        (if (= shifts n)\n            #f\n            (can-be-sorted-by-shifting (append (list (last lst)) (take lst (- n 1))) (+ shifts 1)))))\n  (if (null? arr)\n      #t\n      (can-be-sorted-by-shifting arr 0)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_one_ball))\n    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)\n    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)\n    (check-within (candidate (list 4 3 1 2)) #f 0.001)\n    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_110","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;I motsett fall, returnerer du \"NO\". ;;For å få alle elementane i lst1 til å vera jevne, må du seie \"JA\".;;Om det er mogleg å bytte element mellom lst1 og lst2 for å laga ;;Det finst ingen grense for mengden utveksla element mellom lst1 og lst2. ;;Så la oss sjå på ei lista over alle par tall som er \"kron\".;;og bestemmer om det er mogleg å utveksla element ;;I dette problemet, vil du implementere ei funksjon som tek to tal frå lista,;; >>> (exchange (list 1 2 3 4) (list 1 2 3 4))\n;; \"YES\"\n;; >>> (exchange (list 1 2 3 4) (list 1 5 3 4))\n;; \"NO\"\n;; It is assumed that the input lists will be non-empty.\n(define (exchange lst1 lst2)\n","canonical_solution":"#lang racket\n\n(define (is-even n)\n  (= (modulo n 2) 0))\n\n(define (exchange lst1 lst2)\n  (define evens-lst1 (filter is-even lst1))\n  (define odds-lst1 (filter (lambda (x) (not (is-even x))) lst1))\n  (define evens-lst2 (filter is-even lst2))\n  \n  (if (>= (+ (length evens-lst1) (length evens-lst2)) (length lst1))\n      \"YES\"\n      \"NO\"))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate exchange))\n    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) \"YES\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 4)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 3)) \"NO\" 0.001)\n    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) \"NO\" 0.001)\n    (check-within (candidate (list 100 200) (list 200 200)) \"YES\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_111","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Om det finst fleire bokstavar med same opphav, må alle skrivast.;;Det er ein av dei bokstavar som har flest gonger vorte gjenta, og har det tilsvarande talet på seter.;;Gjeve ei streng som representerer ein plass-skilde små bokstavar, returnerer ein hash ;; >>> (histogram \"a b c\")\n;; #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1))\n;; >>> (histogram \"a b b a\")\n;; #hash((\"a\" .  2) (\"b\" .  2))\n;; >>> (histogram \"a b c a b\")\n;; #hash((\"a\" .  2) (\"b\" .  2))\n;; >>> (histogram \"b b b b a\")\n;; #hash((\"b\" .  4))\n;; >>> (histogram \"\")\n;; #hash()\n(define (histogram test)\n","canonical_solution":"(define (histogram test)\n  (define words (string-split test))\n  (define occurrences (make-hash))\n  \n  (for ([word words])\n    (hash-update! occurrences word (lambda (x) (+ x 1)) 0))\n  \n  (define max-count\n    (apply max (hash-values occurrences)))\n  \n  (define result (make-hash))\n  \n  (for ([(key val) (in-hash occurrences)])\n    (when (= val max-count)\n      (hash-set! result key val)))\n  \n  result)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n    (check-within (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1) (\"d\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"b b b b a\") #hash((\"b\" .  4)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"\") #hash() 0.001)\n    (check-within (candidate \"a\") #hash((\"a\" .  1)) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_112","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel ;;Du burde returnere ei liste som inneheldt resultatstrengen og #t\/#f for kontroll.;;Ei streng blir kalla palindrom om den les oppover på same måte som framover.;;så kan du sjå om resultaten er ein palindrom. ;;Vi har to karakterstreng s og c, og du må slette alle bokstavane i s som er lik alle bokstavane i c.;;Oppgåve ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n(define (reverse_delete s c)\n","canonical_solution":"#lang racket\n\n(define (reverse_delete s c)\n  (let* ([chars-to-delete (set (string->list c))]\n         [filtered-string (list->string (filter (lambda (ch) (not (set-member? chars-to-delete ch)))\n                                                (string->list s)))]\n         [is-palindrome (= (string->list filtered-string)\n                           (reverse (string->list filtered-string)))])\n    (list filtered-string is-palindrome)))\n\n;; Example usage:\n(reverse_delete \"abcde\" \"ae\")   ; => (list \"bcd\" #f)\n(reverse_delete \"abcdef\" \"b\")   ; => (list \"acdef\" #f)\n(reverse_delete \"abcdedcba\" \"ab\") ; => (list \"cdedc\" #t)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n    (check-within (candidate \"abcde\" \"ae\") (list \"bcd\" #f) 0.001)\n    (check-within (candidate \"abcdef\" \"b\") (list \"acdef\" #f) 0.001)\n    (check-within (candidate \"abcdedcba\" \"ab\") (list \"cdedc\" #t) 0.001)\n    (check-within (candidate \"dwik\" \"w\") (list \"dik\" #f) 0.001)\n    (check-within (candidate \"a\" \"a\") (list \"\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"vabba\" \"v\") (list \"abba\" #t) 0.001)\n    (check-within (candidate \"mamma\" \"mia\") (list \"\" #t) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_113","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;av ujevne siffer i den i'te streng av input. ;;\"der alle i'ane skal erstatta med tallet ;;Kvar element i av utgangen burde vera \"antallet av ulige element i den same mengden\".;;Gjeve ei liste over strenger, der kvar streng berre består av siffer, må ein returnere ei liste. ;; >>> (odd_count (list \"1234567\"))\n;; (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n;; >>> (odd_count (list \"3\" \"11111111\"))\n;; (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\n(define (odd_count lst)\n","canonical_solution":"#lang racket\n\n(define (count-odd-digits s)\n  (length (filter (λ (ch) (member ch '(#\\1 #\\3 #\\5 #\\7 #\\9))) s)))\n\n(define (replace-i-with-odd s odd-count)\n  (regexp-replace* #px\"i\" s (number->string odd-count)))\n\n(define (odd_count lst)\n  (map (λ (s)\n         (let ([odd-count (count-odd-digits s)])\n           (replace-i-with-odd \"the number of odd elements in the string i of the input.\" odd-count)))\n       lst))\n\n;; Test cases\n(odd_count (list \"1234567\")) ;=> (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n(odd_count (list \"3\" \"11111111\")) ;=> (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\")","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n    (check-within (candidate (list \"1234567\")) (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\") 0.001)\n    (check-within (candidate (list \"3\" \"11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\") 0.001)\n    (check-within (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_114","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel ;;av eit nums. ;;Når du har ei liste over heile tal, finn du den minste mengden av dei som ikkje er tomme.;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum nums)\n","canonical_solution":"(define (minSubArraySum nums)\n  (define (find-min-sum lst)\n    (define (helper current-sum min-sum rest)\n      (cond\n        [(null? rest) min-sum]\n        [else\n         (let* ([new-current-sum (+ current-sum (car rest))]\n                [new-min-sum (min min-sum new-current-sum (car rest))])\n           (helper (max 0 new-current-sum) new-min-sum (cdr rest)))]))\n    (helper 0 (first lst) lst))\n  (find-min-sum nums))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)\n    (check-within (candidate (list -1 -2 -3)) -6 0.001)\n    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)\n    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)\n    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)\n    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)\n    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)\n    (check-within (candidate (list -10)) -10 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 1 -1)) -1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_115","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel 1: ;;Ta ut det talet på gonger du treng å senka bøttene.;;Jobben din er å bruka bøtene og tømma brunnar.;;og alle flaska har same kapasitet.;;Kvar brunn har ein tilhøyrande bøtte som kan brukast til å uttrekkja vatn frå han, ;;og kvar éin i ei rekkje er ein eining for vatn.;;Du får ein rettvinkulær rettleiing av ei enkelt røy.;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;;     * all wells have the same length\n;;     * 1 <= grid.length <= 10^2\n;;     * 1 <= grid[:,1].length <= 10^2\n;;     * grid[i][j] -> 0 | 1\n;;     * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n","canonical_solution":"(define (max_fill grid capacity)\n  (define (count-ones row)\n    (foldl (lambda (x acc) (+ x acc))\n           0\n           row))\n  (define total-water (foldl (lambda (row acc) (+ (count-ones row) acc))\n                             0\n                             grid))\n  (ceiling (\/ total-water capacity)))\n\n;; Testing the function with provided examples\n(max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) ; => 6\n(max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) ; => 5\n(max_fill (list (list 0 0 0) (list 0 0 0)) 5) ; => 0","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_116","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Det må gjennomførast slik:;;For like mange einar, bør du orte etter desimalverda.;;Talet på einar i den binære representasjonen i oppstigande rekkefølge.;;I denne kataen, må du sette opp ei liste over ikkje-negative tall etter;; >>> (sort_array (list 1 5 2 3 4))\n;; (list 1 2 3 4 5)\n;; >>> (sort_array (list -2 -3 -4 -5 -6))\n;; (list -6 -5 -4 -3 -2)\n;; >>> (sort_array (list 1 0 2 3 4))\n;; (list 0 1 2 3 4)\n(define (sort_array arr)\n","canonical_solution":"(define (count-ones n)\n  (let loop ([n n] [count 0])\n    (if (= n 0)\n        count\n        (loop (arithmetic-shift n -1) (+ count (bitwise-and n 1))))))\n\n(define (sort-key n)\n  (list (count-ones n) n))\n\n(define (sort-array arr)\n  (sort arr #:key sort-key #:cache-keys? #t))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)\n    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)\n    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)\n    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_117","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Merk: Du kan rekna med at inndata-strengen berre inneheld bokstavar og mellomrom.;;Dersom strengen s er tom, skal funksjonen gje tilbake ei tom liste. ;;n konsonantar, i rekkjefølgje.;;ein funksjon som returnerer ein liste over alle ord frå streng s som inneber nøyaktig ;;Gjeve ei streng s og eit naturleg tal n, har du fått til oppgåve å implementera ;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n","canonical_solution":"(define (select_words s n)\n  (define consonants '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z\n                      #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n\n  (define (count-consonants word)\n    (length (filter (lambda (char) (member char consonants)) (string->list word))))\n\n  (let ((words (string-split s \" \")))\n    (filter (lambda (word)\n              (= (count-consonants word) n))\n            words)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-within (candidate \"Mary had a little lamb\" 4) (list \"little\") 0.001)\n    (check-within (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\") 0.001)\n    (check-within (candidate \"simple white space\" 2) (list ) 0.001)\n    (check-within (candidate \"Hello world\" 4) (list \"world\") 0.001)\n    (check-within (candidate \"Uncle sam\" 3) (list \"Uncle\") 0.001)\n    (check-within (candidate \"\" 4) (list ) 0.001)\n    (check-within (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_118","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Du kan tenkja at strengen berre inneheld engelsk bokstav.;;finn kvar einaste vokal som oppfyller føremålet.;;Vokaler i byrjinga og slutten tel ikkje. Viss du ikkje gjorde det, skriv tom streng tilbake.;;to konsonantar frå høgre sida av ordet (større bokstaver). ;;Det er eit ord du må gjere og det er oppgåven din, den nærmeste samtale som ligg mellom dei to.;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\")\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n","canonical_solution":"(define (get_closest_vowel word)\n  (define vowels (set \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n  \n  (define (helper word i)\n    (if (< i 1)\n        \"\"\n        (let ([curr-char (string-ref word i)]\n              [prev-char (string-ref word (- i 1))]\n              [next-char (string-ref word (+ i 1))])\n          (if (and (set-member? vowels curr-char)\n                   (not (set-member? vowels prev-char))\n                   (not (set-member? vowels next-char)))\n              (string curr-char)\n              (helper word (- i 1))))))\n\n  (if (< (string-length word) 3)\n      \"\"\n      (helper word (- (string-length word) 2))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n    (check-within (candidate \"yogurt\") \"u\" 0.001)\n    (check-within (candidate \"full\") \"u\" 0.001)\n    (check-within (candidate \"easy\") \"\" 0.001)\n    (check-within (candidate \"eAsy\") \"\" 0.001)\n    (check-within (candidate \"ali\") \"\" 0.001)\n    (check-within (candidate \"bad\") \"a\" 0.001)\n    (check-within (candidate \"most\") \"o\" 0.001)\n    (check-within (candidate \"ab\") \"\" 0.001)\n    (check-within (candidate \"ba\") \"\" 0.001)\n    (check-within (candidate \"quick\") \"\" 0.001)\n    (check-within (candidate \"anime\") \"i\" 0.001)\n    (check-within (candidate \"Asia\") \"\" 0.001)\n    (check-within (candidate \"Above\") \"o\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_119","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Viss det er ein måte å lage ei god streng på, må du returnere \"Ja\", og viss det ikkje er ein måte å lage ein god streng på, må du returnere \"Nei\".;;\" (()) \" er ikkje. ;;er balanserte. Til dømes: Strengen '(((() ' er god, medan strengen ;;Ei streng S vert rekna som god viss og berre viss alle parentesane i S ;;Det er ein viss grad, at den resulterande strengen er god.;;Jobben din er å sjå om det er mogleg å koble saman dei to elementane.;;berre parentesane \" ((\") eller nær parentesane \") \".;;Du får ein liste med to ulike karaktertrekk, og begge er \"opent\".;; >>> (match_parens (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n;; \"No\"\n(define (match_parens lst)\n","canonical_solution":"(define (match-parens lst)\n  (define (is-good-string? s)\n    (let loop ([s s] [balance 0])\n      (cond\n        [(empty? s) (= balance 0)]\n        [(< balance 0) #f]\n        [else\n         (loop (cdr s) (+ balance (if (equal? (car s) #\\() 1 -1)))])))\n  \n  (define str1 (list-ref lst 0))\n  (define str2 (list-ref lst 1))\n  \n  (define concatenations\n    (list (string-append str1 str2)\n          (string-append str2 str1)))\n  \n  (if (ormap is-good-string? concatenations)\n      \"Yes\"\n      \"No\"))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n    (check-within (candidate (list \"()(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \")\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(())\" \"())())\")) \"No\" 0.001)\n    (check-within (candidate (list \")())\" \"(()()(\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"(())))\" \"(()())((\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"()\" \"())\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(\" \"()))()\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"((((\" \"((())\")) \"No\" 0.001)\n    (check-within (candidate (list \")(()\" \"(()(\")) \"No\" 0.001)\n    (check-within (candidate (list \")(\" \")(\")) \"No\" 0.001)\n    (check-within (candidate (list \"(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \"(\")) \"Yes\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_120","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel 1: ;;av lengd k med maksimum k tal i arr. ;;Gjeve ei liste med arr heiltall og eit positivt heiltall k, vert det ei sortert liste.;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example 2:\n;; >>> (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum (list -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;;     1. The length of the list will be in the range of [1, 1000].\n;;     2. The elements in the list will be in the range of [-1000, 1000].\n;;     3. 0 <= k <= len(arr)\n(define (maximum arr k)\n","canonical_solution":"(define (maximum arr k)\n  (let ((sorted (sort arr <)))\n    (take-right sorted k)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)\n    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)\n    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)\n    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)\n    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)\n    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)\n    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)\n    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)\n    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)\n    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)\n    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_121","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;Når me har ei liste over alle reine tall, skal me finna summen av alle ujevne tal som er i part. ;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n","canonical_solution":"(define (solution lst)\n  (define (helper lst idx acc)\n    (cond\n      [(empty? lst) acc]\n      [else\n       (let ([current (first lst)])\n         (if (and (odd? current) (even? idx))\n             (helper (rest lst) (add1 idx) (+ acc current))\n             (helper (rest lst) (add1 idx) acc)))]))\n  (helper lst 0 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-within (candidate (list 5 8 7 1)) 12 0.001)\n    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)\n    (check-within (candidate (list 30 13 24 321)) 0 0.001)\n    (check-within (candidate (list 5 9)) 5 0.001)\n    (check-within (candidate (list 2 4 8)) 0 0.001)\n    (check-within (candidate (list 30 13 23 32)) 23 0.001)\n    (check-within (candidate (list 3 13 2 9)) 3 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_122","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;summen av elementane med høgare enn to siffer frå dei første k elementane i arr. ;;Gjeve ei ikkje-tom liste over heile tal arr og eit heilt tal k, skal returnerer ;; >>> (add_elements (list 111 21 3 4000 5 6 7 8 9) 4)\n;; 24\n;; Constraints:\n;;     1. 1 <= len(arr) <= 100\n;;     2. 1 <= k <= len(arr)\n(define (add_elements arr k)\n","canonical_solution":"#lang racket\n\n(define (add_elements arr k)\n  (define (two-digit? n)\n    (and (>= n 0)\n         (or (<= n 99)\n             (>= n -99)\n             (= n 0))))\n  (define (sum-two-digit lst count acc)\n    (if (or (null? lst) (<= count 0))\n        acc\n        (let ((head (car lst))\n              (tail (cdr lst)))\n          (if (two-digit? head)\n              (sum-two-digit tail (- count 1) (+ acc head))\n              (sum-two-digit tail (- count 1) acc)))))\n  (sum-two-digit arr k 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)\n    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)\n    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)\n    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_123","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;get_odd_collatz(5) gjev tilbake [1, 5] # Collatz-sekvensen for 5 er [5, 16, 8, 4, 2, 1], så dei udane tala er berre 1, og 5. ;;Til dømes: ;;2. returnerte lista sortert i aukande rekkefølge. ;;1. Collatz(1) er [1]. ;;Merk: ;;Denne rekneskapen er at uansett kva verdi n har, er følgje alltid 1.;;Den fyrste termen er ein ujevn faktor, så den neste termen er 3 ganger den fyrste termen.;;Den forrige delen er like stor som den neste delen.;;som følgjer: start med eit positivt heiltal n. Så vert kvar uttrykk hent frå ;;Collatz-gjettera er ein gjetter i matematikk som omhandlar ei sekvens definert ;;Gjeve eit positivt heiltal n, vert det sett inn ei sortert liste som har dei ujevne tala i Collatz-sekvens. ;; >>> (get_odd_collatz 5)\n;; (list 1 5)\n(define (get_odd_collatz n)\n","canonical_solution":"#lang racket\n\n(define (collatz-sequence n)\n  (if (= n 1)\n      (list 1)\n      (cons n (collatz-sequence (if (even? n)\n                                    (\/ n 2)\n                                    (+ (* 3 n) 1))))))\n\n(define (get-odd-collatz n)\n  (sort (filter odd? (collatz-sequence n)) <))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)\n    (check-within (candidate 5) (list 1 5) 0.001)\n    (check-within (candidate 12) (list 1 3 5) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_124","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;4. datoen skal vera i formatet: mm-dd-yyyy ;;3. månarane må ikkje vera mindre enn 1 eller meir enn 12.;;2. det er minst 1 dag i månaden 1,3,5,7,8,10,12 og minst 1 dag i månaden 4,6,9,11. det er minst 1 dag i månaden 2, og det er minst 29 dagar i månaden 2.;;1. Datumstrengen er ikkje tom.;;Denne datoen er gyldig dersom alle dei følgjande reglane er oppfylte: ;;returnerer #t om datoen er gyldig annars #f. ;;Du må skrive ein funksjon som validerer ein gitt dato og ;; >>> (valid_date \"03-11-2000\")\n;; #t\n;; >>> (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date \"04-0-2040\")\n;; #f\n;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date \"06\/04\/2020\")\n;; #f\n(define (valid_date date)\n","canonical_solution":"#lang racket\n\n(define (valid_date date)\n  (define (parse-int str)\n    (string->number str))\n  \n  (define (valid-day? day month)\n    (cond\n      [(member month '(1 3 5 7 8 10 12)) (and (>= day 1) (<= day 31))]\n      [(member month '(4 6 9 11)) (and (>= day 1) (<= day 30))]\n      [(= month 2) (and (>= day 1) (<= day 29))]\n      [else #f]))\n\n  (define parts (string-split date \"-\"))\n  (if (not (= (length parts) 3))\n      #f\n      (let ([month (parse-int (list-ref parts 0))]\n            [day (parse-int (list-ref parts 1))]\n            [year (parse-int (list-ref parts 2))])\n        (and month day year\n             (>= month 1) (<= month 12)\n             (valid-day? day month)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n    (check-within (candidate \"03-11-2000\") #t 0.001)\n    (check-within (candidate \"15-01-2012\") #f 0.001)\n    (check-within (candidate \"04-0-2040\") #f 0.001)\n    (check-within (candidate \"06-04-2020\") #t 0.001)\n    (check-within (candidate \"01-01-2007\") #t 0.001)\n    (check-within (candidate \"03-32-2011\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"04-31-3000\") #f 0.001)\n    (check-within (candidate \"06-06-2005\") #t 0.001)\n    (check-within (candidate \"21-31-2000\") #f 0.001)\n    (check-within (candidate \"04-12-2003\") #t 0.001)\n    (check-within (candidate \"04122003\") #f 0.001)\n    (check-within (candidate \"20030412\") #f 0.001)\n    (check-within (candidate \"2003-04\") #f 0.001)\n    (check-within (candidate \"2003-04-12\") #f 0.001)\n    (check-within (candidate \"04-2003\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_125","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;alfabet, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 ;;skal skiljast på komma ',' viss ingen komma finst, må du returnere talet på små bokstavar i ujevn rekkefølge i ;;Når ein har ei ordrekke, må ein gje tilbake ei liste over ord som er delt opp i ledige mellomrom, dersom det ikkje finst ledige mellomrom i teksta.;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n","canonical_solution":"(define (split_words txt)\n  (define (split-on-whitespace s)\n    (if (regexp-match #px\"\\\\s\" s)\n        (regexp-split #px\"\\\\s+\" s)\n        #f))\n  \n  (define (split-on-comma s)\n    (if (string-contains? s \",\")\n        (string-split s \",\")\n        #f))\n\n  (define (count-odd-order-lower-case s)\n    (define (odd-order? c)\n      (let ([order (- (char->integer c) (char->integer #\\a))])\n        (odd? order)))\n    (length (filter odd-order? (string->list (string-downcase s)))))\n\n  (or (split-on-whitespace txt)\n      (split-on-comma txt)\n      (count-odd-order-lower-case txt)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n    (check-within (candidate \"Hello world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello,world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello world,!\") (list \"Hello\" \"world,!\") 0.001)\n    (check-within (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\" \"!\") 0.001)\n    (check-within (candidate \"abcdef\") 3 0.001)\n    (check-within (candidate \"aaabb\") 2 0.001)\n    (check-within (candidate \"aaaBb\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_126","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;return #f. Ta berre heilt tal.;;Om lista har fleire enn eitt eksemplar av same nummer ;;Når du har ei liste over nummer, må du seie at dei er orterte eller ikkje.;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n","canonical_solution":"#lang racket\n\n(define (is_sorted lst)\n  (define (check-sorted lst last-item seen-dupes)\n    (cond\n      [(empty? lst) (not seen-dupes)]\n      [else\n       (let ([current (first lst)]\n             [rest (rest lst)])\n         (cond\n           [(< current last-item) #f] ; Not sorted\n           [(= current last-item)\n            (if seen-dupes\n                #f ; More than one duplicate\n                (check-sorted rest current #t))]\n           [else\n            (check-sorted rest current seen-dupes)]))]))\n  (or (empty? lst)\n      (check-sorted (rest lst) (first lst) #f)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n    (check-within (candidate (list 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 7)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n    (check-within (candidate (list 1)) #t 0.001)\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 2 2 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 3 3 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4)) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_127","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;[input\/output] prøvar: ;;Viss dei to intervallane ikkje kryssar kvarandre, må du seie nei.;;i anna fall, returnerer \"NO\". ;;Om lengda på kryssinga er eit primt tal, må du svara \"YES\", ;;som er ei primtal.;;Eksempelvis er det ein snitt mellom intervallet (1, 3), (2, 4) er (2, 3) ;;Det er eit primt tal.;;Jobben din er å finne ut om det er ein rettvis linje;;For kvar gitt intervall vert det teke for at byrjinga er mindre enn eller lik enden.;;inkluderer både start og slutt. ;;Dei oppgjevne intervallane er lukka, som tyder at intervallet (start, slutt) ;;der kvart interval er eit par heiltall.;;Du har to høve til å velja mellom to høve.;; >>> (intersection (list 1 2) (list 2 3))\n;; \"NO\"\n;; >>> (intersection (list -1 1) (list 0 4))\n;; \"NO\"\n;; >>> (intersection (list -3 -1) (list -5 5))\n;; \"YES\"\n(define (intersection interval1 interval2)\n","canonical_solution":"#lang racket\n\n(define (prime? n)\n  (cond\n    [(<= n 1) #f]\n    [(= n 2) #t]\n    [else\n     (define (is-divisible d)\n       (if (> (* d d) n)\n           #f\n           (if (= (remainder n d) 0)\n               #t\n               (is-divisible (+ d 1)))))\n     (not (is-divisible 2))]))\n\n(define (intersection interval1 interval2)\n  (define start1 (first interval1))\n  (define end1 (second interval1))\n  (define start2 (first interval2))\n  (define end2 (second interval2))\n  \n  (define inter-start (max start1 start2))\n  (define inter-end (min end1 end2))\n  \n  (define len (- inter-end inter-start))\n  \n  (if (and (<= inter-start inter-end) (prime? len))\n      \"YES\"\n      \"NO\"))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection))\n    (check-within (candidate (list 1 2) (list 2 3)) \"NO\" 0.001)\n    (check-within (candidate (list -1 1) (list 0 4)) \"NO\" 0.001)\n    (check-within (candidate (list -3 -1) (list -5 5)) \"YES\" 0.001)\n    (check-within (candidate (list -2 2) (list -4 0)) \"YES\" 0.001)\n    (check-within (candidate (list -11 2) (list -1 -1)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 3 5)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 1 2)) \"NO\" 0.001)\n    (check-within (candidate (list -2 -2) (list -3 -2)) \"NO\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_128","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Merknad: return #f for tomme arr. ;;av kvar tal i lista, representert med 1, -1 eller 0. ;;Summen av heltal som er multiplikert med produktet av alle teikn ;;Du får ei liste over alle dei like sannsynlege utfalla. Du må berre falla ein toar.;; >>> (prod_signs (list 1 2 2 -4))\n;; 9\n;; >>> (prod_signs (list 0 1))\n;; 0\n;; >>> (prod_signs (list ))\n;; #f\n(define (prod_signs arr)\n","canonical_solution":"(define (prod_signs arr)\n  (if (empty? arr)\n      #f\n      (let loop ([lst arr] [sum 0] [prod-sign 1])\n        (if (empty? lst)\n            (* sum prod-sign)\n            (let ([n (first lst)])\n              (loop (rest lst)\n                    (+ sum (abs n))\n                    (* prod-sign (cond [(positive? n) 1]\n                                       [(negative? n) -1]\n                                       [else 0]))))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n    (check-within (candidate (list 1 2 2 -4)) -9 0.001)\n    (check-within (candidate (list 0 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)\n    (check-within (candidate (list -1 1 -1 1)) 4 0.001)\n    (check-within (candidate (list -1 1 1 1)) -4 0.001)\n    (check-within (candidate (list -1 1 1 0)) 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_129","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Returnerer ei rangordna liste over verdiar på dei cellea som den minste vegen går gjennom. ;;Det er garantert eit unikt svar.;;lst_A[j] = lst_B[j]. ;;slik at lst_A[i] < lst_B[i] og for ein j (1 <= j < i) har vi ;;enn lst_B, med andre ord, det finst eit heiltal indeks i (1 <= i <= k) ;;gjennom (lat oss kalla dei lst_A og lst_B), lst_A er leksikografisk mindre ;;Når du har laga ei rekkjefølgje av verdien i eit dataelement, skal du alltid følgje reglane for verdien i dei to neste elementane.;;Ei bane A (med lengd k) vert rekna som mindre enn ei bane B (med lengd k) om ;;Du kan ikkje gå vekk frå nettet.;;Dei er ikkje nødvendigvis skiljande.);;Legg merke til at ein vegg med lengd k tyder at ein går inn i nøyaktig k celler ( ikkje ;;ei mobil. ;;med andre ord, kan du gå til celler som deler ei avgrensing med røyrsla;;Frå ein hvilken som helst celle og i hvert trinn kan du flytte til kvar av dei neste celleane.;;Du må finne den minste vegen for å ta langen k i nettet.;;inclusive kjem berre fram ein gong i alle celleane på rutenettet. ;;kvar celle i rutnettet har ein verdi. kvart heiltal i området [1, N * N] ;;Gjeve eit rutnett med N radar og N kolonner (N >= 2) og eit positivt heiltal k, ;; >>> (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)\n;; (list 1 2 1)\n;; >>> (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)\n;; (list 1)\n(define (minPath grid k)\n","canonical_solution":"#lang racket\n\n(define (minPath grid k)\n  (define N (length grid))\n  \n  (define (in-bounds? x y)\n    (and (>= x 0) (< x N) (>= y 0) (< y N)))\n  \n  (define (neighbors x y)\n    (filter (lambda (pos) (in-bounds? (car pos) (cadr pos)))\n            (list (list (- x 1) y)\n                  (list (+ x 1) y)\n                  (list x (- y 1))\n                  (list x (+ y 1)))))\n  \n  (define (get-value x y)\n    (list-ref (list-ref grid x) y))\n  \n  (define (find-path path remaining-length)\n    (if (= remaining-length 0)\n        (list path)\n        (let* ((last-pos (car path))\n               (x (car last-pos))\n               (y (cadr last-pos))\n               (neigh (neighbors x y)))\n          (flatten\n           (map (lambda (n)\n                  (find-path (cons n path) (- remaining-length 1)))\n                neigh)))))\n  \n  (define (path-values path)\n    (map (lambda (pos) (get-value (car pos) (cadr pos))) path))\n  \n  (define (all-paths)\n    (flatten\n     (map (lambda (x)\n            (map (lambda (y)\n                   (find-path (list (list x y)) (- k 1)))\n                 (range N)))\n          (range N))))\n  \n  (define (min-lexico-path-path paths)\n    (minimize paths\n              (lambda (pathA pathB)\n                (lexicographical<\n                 (path-values pathA)\n                 (path-values pathB)))))\n  \n  (define (lexicographical< lstA lstB)\n    (cond\n      [(null? lstA) #f]\n      [(null? lstB) #t]\n      [(< (car lstA) (car lstB)) #t]\n      [(> (car lstA) (car lstB)) #f]\n      [else (lexicographical< (cdr lstA) (cdr lstB))]))\n  \n  (define (minimize lst pred)\n    (let loop ([lst lst] [best-so-far (car lst)])\n      (cond\n        [(null? lst) best-so-far]\n        [(pred (car lst) best-so-far) (loop (cdr lst) (car lst))]\n        [else (loop (cdr lst) best-so-far)])))\n  \n  (path-values (min-lexico-path-path (all-paths))))\n\n;; Examples:\n;; (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)\n;; => (list 1 2 1)\n;; (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)\n;; => (list 1)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minPath))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)\n    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)\n    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)\n    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)\n    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)\n    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)\n    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_130","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Dei første n + 1 tala i Tribonacci-sekvensen.;;Du har eit ikkje-negativt tall, og du må berre returnere ein liste over alle dei like sannsynlege utfalla.;;= 2 + 3 + 3 = 8 ;;tri(3) = tri(2) + tri(1) + tri(4) ;;tri(4) = 3 ;;tri(2) = 1 + (2 \/ 2) = 2 ;;Til dømes: ;;tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), om n er ujevnt. ;;tri (n) = 1 + n \/ 2, om n er eit partal. ;;tri(1) = 3 ;;Tribonacci-sekvensen er definert ved at den endrar seg: ;;Men det som mange ikkje veit er kva Tribonacci-sekvensen gjer.;;Alle kjenner til Fibonacci-sekvensen, og den blei studert mykje av matematikkutdanningar i;; >>> (tri 3)\n;; (list 1 3 2 8)\n(define (tri n)\n","canonical_solution":"#lang racket\n\n(define (tri n)\n  (define (tribonacci k)\n    (cond\n      [(= k 1) 3]\n      [(even? k) (+ 1 (\/ k 2))]\n      [else (+ (tribonacci (- k 1))\n               (tribonacci (- k 2))\n               (tribonacci (+ k 1)))]))\n  (map tribonacci (range 1 (+ n 2))))\n\n;; Example usage:\n(tri 3) ; should return '(3 2 3 8)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-within (candidate 3) (list 1 3 2 8) 0.001)\n    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)\n    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)\n    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)\n    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)\n    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)\n    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)\n    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)\n    (check-within (candidate 0) (list 1) 0.001)\n    (check-within (candidate 1) (list 1 3) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_131","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Viss alle sifre er partekall, skal det returnerast 0.;;Gjeve eit positivt heiltal n, må du gje produktet av dei ujevne sifrane. ;; >>> (digits 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits n)\n","canonical_solution":"#lang racket\n\n(define (digits n)\n  (define (product-of-odds lst)\n    (let loop ((lst lst) (product 1) (found-odd? #f))\n      (cond\n        [(null? lst) (if found-odd? product 0)]\n        [(odd? (car lst)) (loop (cdr lst) (* product (car lst)) #t)]\n        [else (loop (cdr lst) product found-odd?)])))\n  (product-of-odds (map (compose string->number string) (string->list (number->string n)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n    (check-within (candidate 5) 5 0.001)\n    (check-within (candidate 54) 5 0.001)\n    (check-within (candidate 120) 1 0.001)\n    (check-within (candidate 5014) 5 0.001)\n    (check-within (candidate 98765) 315 0.001)\n    (check-within (candidate 5576543) 2625 0.001)\n    (check-within (candidate 2468) 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_132","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;der minst ein braket i etterfølginga er nested. ;;Funksjonen skal returnere #t viss og berre om det finst ei gyldig etterfølging av parenteser ;;Opprett ei funksjon som tek ein streng som inngang som berre inneheld parentes. ;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\")\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define (is_nested string)\n","canonical_solution":"(define (is_nested string)\n  (define (check-nesting str depth)\n    (cond\n      [(empty? str) #f]\n      [(> depth 1) #t]\n      [else\n       (let ([char (first str)])\n         (cond\n           [(char=? char #\\[) (check-nesting (rest str) (+ depth 1))]\n           [(char=? char #\\]) (and (> depth 0) (check-nesting (rest str) (- depth 1)))]\n           [else (check-nesting (rest str) depth)]))]))\n  (check-nesting (string->list string) 0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n    (check-within (candidate \"[[]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]][[[[[]\") #f 0.001)\n    (check-within (candidate \"[][]\") #f 0.001)\n    (check-within (candidate \"[]\") #f 0.001)\n    (check-within (candidate \"[[[[]]]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]]]]]\") #f 0.001)\n    (check-within (candidate \"[][][[]]\") #t 0.001)\n    (check-within (candidate \"[[]\") #f 0.001)\n    (check-within (candidate \"[]]\") #f 0.001)\n    (check-within (candidate \"[[]][[\") #t 0.001)\n    (check-within (candidate \"[[][]]\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"[[[[[[[[\") #f 0.001)\n    (check-within (candidate \"]]]]]]]]\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_133","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Rundt kvart element i lista til det øvste innlegget.;;Du må berre returnere summen av dei to i lista her.;;Du får ei rekkje med nummer.;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n","canonical_solution":"#lang racket\n\n(define (sum_squares lst)\n  (define (square x) (* x x))\n  (apply + (map (compose square ceiling) lst)))\n\n;; Example usage:\n;; (sum_squares (list 1.0 2.0 3.0))\n;; (sum_squares (list 1.0 4.0 9.0))\n;; (sum_squares (list 1.0 3.0 5.0 7.0))\n;; (sum_squares (list 1.4 4.2 0.0))\n;; (sum_squares (list -2.4 1.0 1.0))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)\n    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)\n    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)\n    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)\n    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)\n    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)\n    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)\n    (check-within (candidate (list 0.0)) 0 0.001)\n    (check-within (candidate (list -1.0)) 1 0.001)\n    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_134","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Merk: \"ord\" er ei gruppe teikn skilt med mellomrom. ;;ein del av eit ord, og #f anna.;;av ei gitt streng er eit alfabetisk karakter og er ikkje ;;La oss oppretta ei funksjon som returnerer #t viss det siste teiknet er ;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n(define (check_if_last_char_is_a_letter txt)\n","canonical_solution":"#lang racket\n\n(define (check_if_last_char_is_a_letter txt)\n  (let ([trimmed (string-trim-right txt)])\n    (if (string-empty? trimmed)\n        #f\n        (let* ([last-char (string-ref trimmed (- (string-length trimmed) 1))]\n               [pre-last-char (if (> (string-length trimmed) 1)\n                                  (string-ref trimmed (- (string-length trimmed) 2))\n                                  #\\space)])\n          (and (char-alphabetic? last-char)\n               (char-whitespace? pre-last-char))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n    (check-within (candidate \"apple\") #f 0.001)\n    (check-within (candidate \"apple pi e\") #t 0.001)\n    (check-within (candidate \"eeeee\") #f 0.001)\n    (check-within (candidate \"A\") #t 0.001)\n    (check-within (candidate \"Pumpkin pie \") #f 0.001)\n    (check-within (candidate \"Pumpkin pie 1\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"eeeee e \") #f 0.001)\n    (check-within (candidate \"apple pie\") #f 0.001)\n    (check-within (candidate \"apple pi e \") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_135","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Dual-verdier.;;Det finst ikkje noko slikt element, så returnerar -1.;;er ikkje større enn eller lik det elementet som ligg rett framfor det.;;Berre ei funksjon som gjev tilbake den største indeksen til eit element som ;; >>> (can_arrange (list 1 2 4 3 5))\n;; 3\n;; >>> (can_arrange (list 1 2 3))\n;; -1\n(define (can_arrange arr)\n","canonical_solution":"#lang racket\n\n(define (can_arrange arr)\n  (define (helper lst idx)\n    (cond\n      [(or (null? lst) (null? (cdr lst))) -1]\n      [(>= (car lst) (cadr lst)) idx]\n      [else (helper (cdr lst) (+ idx 1))]))\n  (helper arr 1))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate can_arrange))\n    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)\n    (check-within (candidate (list 1 2 4 5)) -1 0.001)\n    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)\n    (check-within (candidate (list )) -1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_136","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Viss det ikkje finst noka negativt eller positivt heilt tal, vert det #f.;;av positive heile tal i ein liste.;;og \"b\" er den minste.;;Sjå til at ein funksjon som gjev tilbake ei liste (a, b) der a er ;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers lst)\n","canonical_solution":"(define (largest_smallest_integers lst)\n  (let loop ([lst lst] \n             [largest-neg #f] \n             [smallest-pos #f])\n    (cond\n      [(null? lst) (list largest-neg smallest-pos)]\n      [else \n       (let ([x (car lst)])\n         (cond\n           [(< x 0) \n            (loop (cdr lst) \n                  (if (or (not largest-neg) (> x largest-neg)) x largest-neg) \n                  smallest-pos)]\n           [(> x 0) \n            (loop (cdr lst) \n                  largest-neg \n                  (if (or (not smallest-pos) (< x smallest-pos)) x smallest-pos))]\n           [else \n            (loop (cdr lst) largest-neg smallest-pos)]))])))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)\n    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)\n    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)\n    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)\n    (check-within (candidate (list )) (list #f #f) 0.001)\n    (check-within (candidate (list 0)) (list #f #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_137","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Merke: Om eit reelt tal vert representert som ei streng, kan det flytande punktet vera . eller , ;;Returnerar #f viss verdiane er like. ;;reelle tal, og returnerer den største variabelen i den gjevne variabeltypen. ;;La oss lage ei funksjon som tek imot heile tal, flytande tal eller streng som representerer;; >>> (compare_one 1 2.5)\n;; 2.5\n;; >>> (compare_one 1 \"2,3\")\n;; \"2,3\"\n;; >>> (compare_one \"5,1\" \"6\")\n;; \"6\"\n;; >>> (compare_one \"1\" 1)\n;; #f\n(define (compare_one a b)\n","canonical_solution":"(define (compare_one a b)\n  (define (parse-number x)\n    (cond\n      [(integer? x) x]\n      [(real? x) x]\n      [(string? x)\n       (let ([x (string-replace x \",\" \".\")])\n         (string->number x))]\n      [else (error \"Unsupported type\")]))\n  (let ([num-a (parse-number a)]\n        [num-b (parse-number b)])\n    (cond\n      [(= num-a num-b) #f]\n      [(> num-a num-b) a]\n      [else b])))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare_one))\n    (check-within (candidate 1 2) 2 0.001)\n    (check-within (candidate 1 2.5) 2.5 0.001)\n    (check-within (candidate 2 3) 3 0.001)\n    (check-within (candidate 5 6) 6 0.001)\n    (check-within (candidate 1 \"2,3\") \"2,3\" 0.001)\n    (check-within (candidate \"5,1\" \"6\") \"6\" 0.001)\n    (check-within (candidate \"1\" \"2\") \"2\" 0.001)\n    (check-within (candidate \"1\" 1) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_138","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel ;;Berreiterar om det gjevne talet n kan skrivast som summen av nøyaktig 4 positive partal.;; >>> (is_equal_to_sum_even 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even 8)\n;; #t\n(define (is_equal_to_sum_even n)\n","canonical_solution":"#lang racket\n\n(define (is_equal_to_sum_even n)\n  (and (>= n 8) (even? n)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 11) #f 0.001)\n    (check-within (candidate 12) #t 0.001)\n    (check-within (candidate 13) #f 0.001)\n    (check-within (candidate 16) #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_139","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;der n > 0 ;;brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! ;;Den brasilianske faktorialet er definert som: ;; >>> (special_factorial 4)\n;; 288\n;; The function will receive an integer as input and should return the special\n;; factorial of this integer.\n(define (special_factorial n)\n","canonical_solution":"#lang racket\n\n(define (factorial n)\n  (if (<= n 1)\n      1\n      (* n (factorial (- n 1)))))\n\n(define (special_factorial n)\n  (if (= n 1)\n      1\n      (* (factorial n) (special_factorial (- n 1)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n    (check-within (candidate 4) 288 0.001)\n    (check-within (candidate 5) 34560 0.001)\n    (check-within (candidate 7) 125411328000 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_140","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;så erstatta alle påfølgende lemer med - ;;og viss ein streng har meir enn to påfølgende mellomrom, ;;Når du har ein tekststreng, erstatta alle mellomrom med undersøkjarer.;; >>> (fix_spaces \" Example\")\n;; \"Example\"\n;; >>> (fix_spaces \" Example 1\")\n;; \"Example_1\"\n;; >>> (fix_spaces \" Example 2\")\n;; \"_Example_2\"\n;; >>> (fix_spaces \" Example 3\")\n;; \"_Example-3\"\n(define (fix_spaces text)\n","canonical_solution":"(define (fix_spaces text)\n  (let loop ((chars (string->list text))\n             (prev-space? #f)\n             (count 0)\n             (result '()))\n    (match chars\n      [(cons c rest)\n       (cond\n         [(char=? c #\\space)\n          (if prev-space?\n              (loop rest #t (add1 count) result)\n              (loop rest #t (add1 count) (cons c result)))]\n         [else\n          (let ([new-result (cond\n                              [(and prev-space? (> count 2)) (cons #\\- result)]\n                              [(and prev-space? (= count 1)) (cons #\\_ result)]\n                              [prev-space? (cons #\\_ result)]\n                              [else result])])\n            (loop rest #f 0 (cons c new-result)))])]\n      [else\n       (let ([final-result (if (and prev-space? (> count 2))\n                               (cons #\\- result)\n                               (if prev-space?\n                                   (cons #\\_ result)\n                                   result))])\n         (list->string (reverse final-result)))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n    (check-within (candidate \"Example\") \"Example\" 0.001)\n    (check-within (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\" 0.001)\n    (check-within (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\" 0.001)\n    (check-within (candidate \"Exa   mple\") \"Exa-mple\" 0.001)\n    (check-within (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_141","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;- Substrengen etter punktet burde vere ein av desse: ['txt', 'exe', 'dll'] ;;Det latinske alfabetet ('a'-'z' og 'A'-'Z').;;- substringa før prikken må ikkje vera tom, og den startar med ein bokstav frå ;;- Namnet på datafilen er ein tomme.;;- Namnet på databasen må ikkje vera meir enn tre siffer (0-9). ;;er oppfylt: ;;Det vert rekna som gyldig eit namn på ein databoks berre om alle dei følgjande vilkårane oppfyllast:;;\"Ja\" om namnet på dataen er gyldig, og \"Nei\" om det ikkje er. ;;Opprett ei funksjon som tek ein streng som representerer namnet på ei fil, og returnerer ;; >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n","canonical_solution":"(define (file_name_check file_name)\n  (define valid-extensions (list \"txt\" \"exe\" \"dll\"))\n  (define parts (string-split file_name #\\.))\n  (cond\n    [(not (= (length parts) 2)) \"No\"]\n    [else\n     (let ([prefix (first parts)]\n           [suffix (second parts)])\n       (cond\n         [(or (string-contains? (substring prefix 0 1) #rx\"[^a-zA-Z]\")\n              (empty? prefix)\n              (> (length (regexp-match* #rx\"[0-9]\" prefix)) 3)) \"No\"]\n         [(not (member suffix valid-extensions)) \"No\"]\n         [else \"Yes\"]))]))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-within (candidate \"example.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"1example.dll\") \"No\" 0.001)\n    (check-within (candidate \"s1sdf3.asd\") \"No\" 0.001)\n    (check-within (candidate \"K.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"MY16FILE3.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"His12FILE94.exe\") \"No\" 0.001)\n    (check-within (candidate \"_Y.txt\") \"No\" 0.001)\n    (check-within (candidate \"?aREYA.exe\") \"No\" 0.001)\n    (check-within (candidate \"\/this_is_valid.dll\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.wow\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"this_is_valid.txtexe\") \"No\" 0.001)\n    (check-within (candidate \"#this2_i4s_5valid.ten\") \"No\" 0.001)\n    (check-within (candidate \"@this1_is6_valid.exe\") \"No\" 0.001)\n    (check-within (candidate \"this_is_12valid.6exe4.txt\") \"No\" 0.001)\n    (check-within (candidate \"all.exe.txt\") \"No\" 0.001)\n    (check-within (candidate \"I563_No.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"Is3youfault.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"no_one#knows.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"1I563_Yes3.exe\") \"No\" 0.001)\n    (check-within (candidate \"I563_Yes3.txtt\") \"No\" 0.001)\n    (check-within (candidate \"final..txt\") \"No\" 0.001)\n    (check-within (candidate \"final132\") \"No\" 0.001)\n    (check-within (candidate \"_f4indsartal132.\") \"No\" 0.001)\n    (check-within (candidate \".txt\") \"No\" 0.001)\n    (check-within (candidate \"s.\") \"No\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_142","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;endra oppgåvene i lista som ikkje er multiplikasjon av 3 eller 4.;;Dette er eit multiplik av 3 og vil kubbe det heile talet om indeksen er eit multiplik av 4 og ikkje eit multiplik av 3.;;Denne funksjonen tek ei liste over heile tal. For alle oppgåver i lista, skal funksjonen kvadrere den heile taloppgåva om indeksen er a ;;\"  Det er ein kamp.;; >>> lst\n;; (list 1 2 3)\n;; >>> lst\n;; (list )\n;; >>> lst\n;; (list -1 -5 2 -1 -5)\n(define (sum_squares lst)\n","canonical_solution":"#lang racket\n\n(define (sum_squares lst)\n  (define (helper idx lst)\n    (cond\n      [(empty? lst) 0]\n      [(= (remainder idx 3) 0) (+ (sqr (first lst)) (helper (add1 idx) (rest lst)))]\n      [(= (remainder idx 4) 0) (+ (expt (first lst) 3) (helper (add1 idx) (rest lst)))]\n      [else (+ (first lst) (helper (add1 idx) (rest lst)))]))\n  (helper 0 lst))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 4 9)) 14 0.001)\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)\n    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)\n    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)\n    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)\n    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_143","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel 1: ;;Ordren i den nye strengen skal vera den same som den originale.;;og dei er alle tal som er grunnleggjande, ;;og du må gje tilbake ein streng med orda som kjem frå den opprinnelege setninga.;;setninga inneheld nokre ord som er skilde med mellomrom, ;;Du får ein impuls på setninga.;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;;     * 1 <= len(sentence) <= 100\n;;     * sentence contains only letters\n(define (words_in_sentence sentence)\n","canonical_solution":"#lang racket\n\n(define (is-prime? n)\n  (cond\n    [(< n 2) #f]\n    [else (let loop ([i 2])\n            (cond\n              [(= i n) #t]\n              [(= (modulo n i) 0) #f]\n              [else (loop (add1 i))]))]))\n\n(define (words_in_sentence sentence)\n  (define words (string-split sentence \" \"))\n  (define prime-length-words\n    (filter (lambda (word)\n              (is-prime? (string-length word)))\n            words))\n  (string-join prime-length-words \" \"))\n\n;; Example usage:\n; (words_in_sentence \"This is a test\")       ; Returns \"is\"\n; (words_in_sentence \"lets go for swimming\") ; Returns \"go for\"","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n    (check-within (candidate \"This is a test\") \"is\" 0.001)\n    (check-within (candidate \"lets go for swimming\") \"go for\" 0.001)\n    (check-within (candidate \"there is no place available here\") \"there is no place\" 0.001)\n    (check-within (candidate \"Hi I am Hussein\") \"Hi am Hussein\" 0.001)\n    (check-within (candidate \"go for it\") \"go for it\" 0.001)\n    (check-within (candidate \"here\") \"\" 0.001)\n    (check-within (candidate \"here is\") \"is\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_144","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Du kan seie at x, og n er gyldige brekningar, og at dei ikkje har null som nemnar.;;<teljar>\/<nemner> der både teljar og nemnar er positive heile tal. ;;Både x og n er strenge representasjonar av ein brøkdel, og har følgjande format:;;x * n. Funkjonen gjev #t viss x * n vert evaluert til eit heil tal og #f ;;Det er oppgjevinga dykkar å implementera ei funksjon som forenklar uttrykket.;; >>> (simplify \"1\/5\" \"5\/1\")\n;; #t\n;; >>> (simplify \"1\/6\" \"2\/1\")\n;; #f\n;; >>> (simplify \"7\/10\" \"10\/2\")\n;; #f\n(define (simplify x n)\n","canonical_solution":"(define (gcd a b)\n  (if (= b 0)\n      a\n      (gcd b (modulo a b))))\n\n(define (parse-fraction frac)\n  (let* ([parts (string-split frac #\"\/\")]\n         [numerator (string->number (first parts))]\n         [denominator (string->number (second parts))])\n    (cons numerator denominator)))\n\n(define (simplify x n)\n  (let* ([x-frac (parse-fraction x)]\n         [n-frac (parse-fraction n)]\n         [num-product (* (car x-frac) (car n-frac))]\n         [den-product (* (cdr x-frac) (cdr n-frac))]\n         [common-divisor (gcd num-product den-product)])\n    (= (modulo num-product common-divisor)\n       (modulo den-product common-divisor)\n       0)))\n\n;; Test cases\n(simplify \"1\/5\" \"5\/1\")  ; #t\n(simplify \"1\/6\" \"2\/1\")  ; #f\n(simplify \"7\/10\" \"10\/2\") ; #f","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n    (check-within (candidate \"1\/5\" \"5\/1\") #t 0.001)\n    (check-within (candidate \"1\/6\" \"2\/1\") #f 0.001)\n    (check-within (candidate \"5\/1\" \"3\/1\") #t 0.001)\n    (check-within (candidate \"7\/10\" \"10\/2\") #f 0.001)\n    (check-within (candidate \"2\/10\" \"50\/10\") #t 0.001)\n    (check-within (candidate \"7\/2\" \"4\/2\") #t 0.001)\n    (check-within (candidate \"11\/6\" \"6\/1\") #t 0.001)\n    (check-within (candidate \"2\/3\" \"5\/2\") #f 0.001)\n    (check-within (candidate \"5\/2\" \"3\/5\") #f 0.001)\n    (check-within (candidate \"2\/4\" \"8\/4\") #t 0.001)\n    (check-within (candidate \"2\/4\" \"4\/2\") #t 0.001)\n    (check-within (candidate \"1\/5\" \"5\/1\") #t 0.001)\n    (check-within (candidate \"1\/5\" \"1\/5\") #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_145","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Dei vert rangordna ut frå indeksen i den opphavlege lista.;;Merke: Om det finst fleire element med same sum av siffer, ;;Dei er rangert etter summen av sifferane.;;Skriv ein funksjon som sorterer den gjevne lista med heiltall ;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )\n(define (order_by_points nums)\n","canonical_solution":"#lang racket\n\n(define (digit-sum n)\n  (define abs-n (abs n))\n  (if (< abs-n 10)\n      abs-n\n      (+ (modulo abs-n 10) (digit-sum (quotient abs-n 10)))))\n\n(define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n          (let ((sum-a (digit-sum a))\n                (sum-b (digit-sum b)))\n            (if (= sum-a sum-b)\n                #t\n                (< sum-a sum-b))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)\n    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_146","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Det fyrste og siste sifferet i eit tal er ujevnt (1, 3, 5, 7, 9).;;Det er fleire element i lista enn 10 og begge deler ;;Skriv ein funksjon som tek imot ei liste med tal som input og returnerer ;; >>> (specialFilter (list 15 -73 14 -15))\n;; 1\n;; >>> (specialFilter (list 33 -2 -3 45 21 109))\n;; 2\n(define (specialFilter nums)\n","canonical_solution":"(define (specialFilter nums)\n  (define (odd? n)\n    (member n '(1 3 5 7 9)))\n  (define (check-num n)\n    (and (> (abs n) 10)\n         (odd? (modulo (abs n) 10))\n         (odd? (string->number (substring (number->string (abs n)) 0 1)))))\n  (length (filter check-num nums)))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)\n    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)\n    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)\n    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)\n    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list )) 0 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_147","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;og a[i] + a[j] + a[k] er ein multipel av 3.;;Berettar talet på trippel (a[i], a[j], a[k]) av a der i < j < k, ;;For kvar i (1 ≤ i ≤ n) er verdien av a[i] = i * i - i + 1. ;;Du får eit positivt heiltal, n. Du må laga ei liste over heiltal a som er lang som n.;;     >>> (get_max_triples 5)\n;;     1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n","canonical_solution":"#lang racket\n\n(define (get_max_triples n)\n  (define a\n    (for\/list ([i (in-range 1 (+ n 1))])\n      (+ (* i i) (- i) 1)))\n  \n  (define count 0)\n  \n  (for ([i (in-range 0 (- n 2))])\n    (for ([j (in-range (+ i 1) (- n 1))])\n      (for ([k (in-range (+ j 1) n)])\n        (when (zero? (modulo (+ (list-ref a i) (list-ref a j) (list-ref a k)) 3))\n          (set! count (+ count 1))))))\n  \n  count)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 4 0.001)\n    (check-within (candidate 10) 36 0.001)\n    (check-within (candidate 100) 53361 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_148","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;er ikkje korrekte planetar.;;Funksjonen skal gje tilbake ei tom liste om planet1 eller planet2 ;;nærleiken til sola.;;mellom baneplanet 1 og baneplanet 2, sortert etter ;;Funksjonen burde gje tilbake ei liste med alle planetar som har ;;Skriv ein funksjon som tek to planetnamn som strenger planet1 og planet2.;;Uranus, Neptun. ;;er Merkur, den neste er Venus, og så er det Jorda, Mars, Jupiter, Saturn,;;I vårt solsystem er det åtte planetar, som er dei næraste sola.;; >>> (bf \"Jupiter\" \"Neptune\")\n;; (list \"Saturn\" \"Uranus\")\n;; >>> (bf \"Earth\" \"Mercury\")\n;; \"Venus\"\n;; >>> (bf \"Mercury\" \"Uranus\")\n;; (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\")\n(define (bf planet1 planet2)\n","canonical_solution":"#lang racket\n\n(define planets '(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"))\n\n(define (bf planet1 planet2)\n  (let ((index1 (member planet1 planets))\n        (index2 (member planet2 planets)))\n    (if (and index1 index2)\n        (let* ((pos1 (index-of planets planet1))\n               (pos2 (index-of planets planet2))\n               (start (min pos1 pos2))\n               (end (max pos1 pos2)))\n          (list->string\n            (if (< pos1 pos2)\n              (take (drop planets (+ 1 start)) (- end start 1))\n              (take (drop planets (min (+ 1 end) (- (length planets) 1))) (max (- start end 1) 1)))))\n        '())))\n\n(require rackunit)\n(check-equal? (bf \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\"))\n(check-equal? (bf \"Earth\" \"Mercury\") \"Venus\")\n(check-equal? (bf \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"))\n(check-equal? (bf \"X\" \"Uranus\") '())\n(check-equal? (bf \"Mars\" \"X\") '())","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bf))\n    (check-within (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Mercury\") (list \"Venus\") 0.001)\n    (check-within (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\") 0.001)\n    (check-within (candidate \"Neptune\" \"Venus\") (list \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Mars\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Jupiter\" \"Makemake\") (list ) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_149","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;Du kan tenkja at alle orda er like lange.;;Funksjonen skal gje tilbake ei rekkje strenger i orden.;;Om to ord er like lange, så lat dei gå i alfabetisk rekkjefølgje. ;;skal sende tilbake lista sortert etter denne regelen. ;;Orda på lista burde gå oppover etter lengda på kvar ord, og du ville ikkje vita det.;;og det kan innehålla duplikat. ;;Listen er berre ein oversikt over karaktertrekk og aldri ein oversikt over nummer.;;og returnerer den resulterande lista med ein sortert orden, ;;slettar dei same strengen som har ujevne lengder frå den, ;;Skriv ein funksjon som tek imot ei rekkje strengar som parameter.;; >>> (list_sort (list \"aa\" \"a\" \"aaa\"))\n;; (list \"aa\")\n;; >>> (list_sort (list \"ab\" \"a\" \"aaa\" \"cd\"))\n;; (list \"ab\" \"cd\")\n(define (sorted_list_sum lst)\n","canonical_solution":"#lang racket\n\n(define (sorted_list_sum lst)\n  (define (even-length? str)\n    (even? (string-length str)))\n  (define (compare-strings s1 s2)\n    (let ((len1 (string-length s1))\n          (len2 (string-length s2)))\n      (cond\n        ((< len1 len2) #t)\n        ((> len1 len2) #f)\n        (else (string<? s1 s2)))))\n  (sort (filter even-length? lst) compare-strings))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n    (check-within (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\") 0.001)\n    (check-within (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\") 0.001)\n    (check-within (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\") 0.001)\n    (check-within (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"au\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\")) (list \"cc\" \"dd\" \"aaaa\" \"bbbb\") 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_150","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Det er ein rettvis tal og skal gje ein verdi for y i andre tilfelle.;;Eit enkelt program som skal gje tilbake verdien av x viss n er ;; >>> (x_or_y 7 34 12)\n;; 34\n;; >>> (x_or_y 15 8 5)\n;; 5\n(define (x_or_y n x y)\n","canonical_solution":"#lang racket\n\n(define (is-prime? n)\n  (define (is-divisible? a b)\n    (= (modulo a b) 0))\n  (define (check-divisors-from i)\n    (cond\n      ((> (* i i) n) true)\n      ((is-divisible? n i) false)\n      (else (check-divisors-from (+ i 1)))))\n  (cond\n    ((< n 2) false)\n    ((= n 2) true)\n    ((is-divisible? n 2) false)\n    (else (check-divisors-from 3))))\n\n(define (x_or_y n x y)\n  (if (is-prime? n) x y))\n\n;; Examples:\n;; (x_or_y 7 34 12)  ; returns 34\n;; (x_or_y 15 8 5)  ; returns 5","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n    (check-within (candidate 7 34 12) 34 0.001)\n    (check-within (candidate 15 8 5) 5 0.001)\n    (check-within (candidate 3 33 5212) 33 0.001)\n    (check-within (candidate 1259 3 52) 3 0.001)\n    (check-within (candidate 7919 -1 12) -1 0.001)\n    (check-within (candidate 3609 1245 583) 583 0.001)\n    (check-within (candidate 91 56 129) 129 0.001)\n    (check-within (candidate 6 34 1234) 1234 0.001)\n    (check-within (candidate 1 2 0) 0 0.001)\n    (check-within (candidate 2 2 0) 2 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_151","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Ikkje bruk negative tal eller ikkje-eintal.;;Når eg har ei liste over tala, skal eg gje summen av kvadratane til tala.;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n","canonical_solution":"(define (double_the_difference lst)\n  (define (square x) (* x x))\n  (define (odd-integer? x) (and (integer? x) (odd? x)))\n  (define (valid-number? x) (and (not (negative? x)) (odd-integer? x)))\n  (foldl + 0 (map square (filter valid-number? lst))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 5.0 4.0)) 25 0.001)\n    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)\n    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)\n    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)\n    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)\n    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_152","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;døme: ;;Velda er 0, og viss ikkje, er verdien den absolutte skilnaden mellom gjevinga og poenget. ;;Han gjev tilbake ein liste med same lengde, og kvar meining er kor langt unna.;;Du får to listear med like langar, kvar med eit match.;;Oppgåva er å sjå om personen du kontaktar, rett og slett kan ha gjeve deg det rette svaret på ein av spurningane.;;Det er absolutt verdt å merke seg og samanlikna.;;Til slutt kjennar du kenslene og tankene dine på det tidspunktet.;;Eg trur me alle kjenner igjen den kjensla når ein blir sett på som eit resultat av eit eller anna åreivigt øvingar i livet sitt.;; >>> (compare (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2))\n;; (list 0 0 0 0 3 3)\n;; >>> (compare (list 0 5 0 0 0 4) (list 4 1 1 0 0 -2))\n;; (list 4 4 1 0 0 6)\n(define (compare game guess)\n","canonical_solution":"(define (compare game guess)\n  (map (lambda (g s) (if (= g s) 0 (abs (- g s)))) game guess))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)\n    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_153","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;(styrken er -1). ;;return \"Slices.SErviNGSliCes\" sidan \"SErviNGSliCes\" er den sterkaste utvidinga ;;så burde du gjere det.;;Til dømes, viss du får \"Slices\" som klasse og ei liste over alle klassane i klassen din, vil du sjå at du får \"Slices\" for å sjå at du får \"Slices\" for å sjå at du får \"Slices\".;;Velg den som er først på lista.;;Om det er to eller fleire utvidingar med same styrke, bør du ;;format: ClassName.StrongestExtensionName. ;;Du burde finne den sterkaste framsetningen og returnere ei streng i denne ;;I namnet på utbygginga vert styrken gjeve ved frakten CAP - SM. ;;bokstavar i namnet på utbygginga, og lat SM vera talet på små bokstavar ;;styrken til utvidinga er som følgjer: Lat CAP vera nummeret i store bokstavar ;;Utvidingane skal brukast til å lasta tilleggsklassar til klassen.;;Du får namnet på ein klasse (ein streng) og ei liste over tillegningar.;; >>> (Strongest_Extension \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension class_name extensions)\n","canonical_solution":"#lang racket\n\n(define (Strongest_Extension class_name extensions)\n  (define (extension-strength extension)\n    (let* ([CAP (length (filter char-uppercase? (string->list extension)))]\n           [SM (length (filter char-lowercase? (string->list extension)))])\n      (- CAP SM)))\n  (define strongest (car extensions))\n  (define max-strength (extension-strength strongest))\n  (for-each\n   (lambda (extension)\n     (let ([current-strength (extension-strength extension)])\n       (when (> current-strength max-strength)\n         (set! strongest extension)\n         (set! max-strength current-strength))))\n   (cdr extensions))\n  (string-append class_name \".\" strongest))\n\n;; Example usage:\n;; (Strongest_Extension \"Slices\" (list \"SErviNGSliCes\" \"Cheese\" \"StuFfed\"))\n;; => \"Slices.SErviNGSliCes\"","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-within (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\" 0.001)\n    (check-within (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\" 0.001)\n    (check-within (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\" 0.001)\n    (check-within (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\" 0.001)\n    (check-within (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\" 0.001)\n    (check-within (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\" 0.001)\n    (check-within (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\" 0.001)\n    (check-within (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\" 0.001)\n    (check-within (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_154","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Du får to ord. Du må gje tilbake #t viss det andre ordet eller ei av dei andre orda er ein understreng i det første ordet.;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n(define (cycpattern_check a b)\n","canonical_solution":"(define (cycpattern_check a b)\n  (define (is-rotation? s1 s2)\n    (let loop ([n (string-length s1)])\n      (if (= n (string-length s2))\n          #t\n          (let ([rotated (string-append (substring s1 (- (string-length s1) 1))\n                                        (substring s1 0 (- (string-length s1) 1)))])\n            (if (equal? rotated s2)\n                #t\n                (loop (- n 1)))))))\n  (let loop ([n (string-length b)] [original-b b])\n    (if (< n 0)\n        #f\n        (or (string-contains? a original-b)\n            (loop (- n 1)\n                  (string-append (substring b 1) (substring b 0 1)))))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n    (check-within (candidate \"xyzw\" \"xyw\") #f 0.001)\n    (check-within (candidate \"yello\" \"ell\") #t 0.001)\n    (check-within (candidate \"whattup\" \"ptut\") #f 0.001)\n    (check-within (candidate \"efef\" \"fee\") #t 0.001)\n    (check-within (candidate \"abab\" \"aabb\") #f 0.001)\n    (check-within (candidate \"winemtt\" \"tinem\") #t 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_155","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;Gjeve eit heil tal. returnerer ei liste som har eit antal part og uort siffer. ;;     >>> (even_odd_count -12)\n;;     (list 1 1)\n;;     >>> (even_odd_count 123)\n;;     (list 1 2)\n(define (even_odd_count num)\n","canonical_solution":"#lang racket\n\n(define (even_odd_count num)\n  (let loop ([n (abs num)] [even-count 0] [odd-count 0])\n    (cond\n      [(zero? n) (list even-count odd-count)]\n      [else\n       (if (even? (modulo n 10))\n           (loop (quotient n 10) (add1 even-count) odd-count)\n           (loop (quotient n 10) even-count (add1 odd-count)))])))\n\n;; Example Usage:\n;; (even_odd_count -12) => (list 1 1)\n;; (even_odd_count 123) => (list 1 2)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-within (candidate 7) (list 0 1) 0.001)\n    (check-within (candidate -78) (list 1 1) 0.001)\n    (check-within (candidate 3452) (list 2 2) 0.001)\n    (check-within (candidate 346211) (list 3 3) 0.001)\n    (check-within (candidate -345821) (list 3 3) 0.001)\n    (check-within (candidate -2) (list 1 0) 0.001)\n    (check-within (candidate -45347) (list 2 3) 0.001)\n    (check-within (candidate 0) (list 1 0) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_156","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme: ;;Avgrensingar: 1 <= num <= 1000 ;;og legg han til i små bokstavar.;;Gjeve eit positivt heiltal, finn ut det romerske likvalet som ei streng, ;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman number)\n","canonical_solution":"#lang racket\n\n(define (int_to_mini_roman number)\n  (define roman-numerals\n    '((1000 . \"m\") (900 . \"cm\") (500 . \"d\") (400 . \"cd\")\n      (100 . \"c\") (90 . \"xc\") (50 . \"l\") (40 . \"xl\")\n      (10 . \"x\") (9 . \"ix\") (5 . \"v\") (4 . \"iv\")\n      (1 . \"i\")))\n\n  (define (convert n roman-list result)\n    (cond\n      [(zero? n) result]\n      [(null? roman-list) result]\n      [(>= n (caar roman-list))\n       (convert (- n (caar roman-list)) roman-list\n                (string-append result (cdar roman-list)))]\n      [else (convert n (cdr roman-list) result)]))\n\n  (convert number roman-numerals \"\"))\n\n;; Examples:\n;; (int_to_mini_roman 19)  ; => \"xix\"\n;; (int_to_mini_roman 152) ; => \"clii\"\n;; (int_to_mini_roman 426) ; => \"cdxxvi\"","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n    (check-within (candidate 19) \"xix\" 0.001)\n    (check-within (candidate 152) \"clii\" 0.001)\n    (check-within (candidate 251) \"ccli\" 0.001)\n    (check-within (candidate 426) \"cdxxvi\" 0.001)\n    (check-within (candidate 500) \"d\" 0.001)\n    (check-within (candidate 1) \"i\" 0.001)\n    (check-within (candidate 4) \"iv\" 0.001)\n    (check-within (candidate 43) \"xliii\" 0.001)\n    (check-within (candidate 90) \"xc\" 0.001)\n    (check-within (candidate 94) \"xciv\" 0.001)\n    (check-within (candidate 532) \"dxxxii\" 0.001)\n    (check-within (candidate 900) \"cm\" 0.001)\n    (check-within (candidate 994) \"cmxciv\" 0.001)\n    (check-within (candidate 1000) \"m\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_157","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;90 graders høgare.;;Ein rettvinkul trekant er ein trekant der ein vinkel er rettvinkul eller rettvinkul;;Hender kan utgjere ein rettvinkulær trekanse, #f i andre fall.;;Gjeve lengdene på dei tre sida av ein trekanter.;; >>> (right_angle_triangle 3 4 5)\n;; #t\n;; >>> (right_angle_triangle 1 2 3)\n;; #f\n(define (right_angle_triangle a b c)\n","canonical_solution":"#lang racket\n\n(define (right_angle_triangle a b c)\n  (let* ((sides (list a b c))\n         (sorted-sides (sort sides <))\n         (x (first sorted-sides))\n         (y (second sorted-sides))\n         (z (third sorted-sides)))\n    (= (+ (* x x) (* y y)) (* z z))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n    (check-within (candidate 3 4 5) #t 0.001)\n    (check-within (candidate 1 2 3) #f 0.001)\n    (check-within (candidate 10 6 8) #t 0.001)\n    (check-within (candidate 2 2 2) #f 0.001)\n    (check-within (candidate 7 24 25) #t 0.001)\n    (check-within (candidate 10 5 7) #f 0.001)\n    (check-within (candidate 5 12 13) #t 0.001)\n    (check-within (candidate 15 8 17) #t 0.001)\n    (check-within (candidate 48 55 73) #t 0.001)\n    (check-within (candidate 1 1 1) #f 0.001)\n    (check-within (candidate 2 2 10) #f 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_158","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;I den første setninga er det ein som er fyrst i ordlisteord.;;Om fleire strengar har maksimum antal unike ;;Listen inneheld ulike ord.;;Skriv ein funksjon som tek imot ei rekkje strengar. ;; >>> (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n","canonical_solution":"(define (find_max words)\n  (define (unique-char-count word)\n    (length (remove-duplicates (string->list word))))\n  (define (compare-words w1 w2)\n    (let ((count1 (unique-char-count w1))\n          (count2 (unique-char-count w2)))\n      (cond [(> count1 count2) w1]\n            [(< count1 count2) w2]\n            [else (if (string<? w1 w2) w1 w2)])))\n  (foldl compare-words (first words) (rest words)))\n\n;; Example usage:\n(find_max (list \"name\" \"of\" \"string\"))  ; => \"string\"\n(find_max (list \"name\" \"enam\" \"game\")) ; => \"enam\"\n(find_max (list \"aaaaaaa\" \"bb\" \"cc\"))  ; => \"aaaaaaa\"","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-within (candidate (list \"name\" \"of\" \"string\")) \"string\" 0.001)\n    (check-within (candidate (list \"name\" \"enam\" \"game\")) \"enam\" 0.001)\n    (check-within (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\" 0.001)\n    (check-within (candidate (list \"abc\" \"cba\")) \"abc\" 0.001)\n    (check-within (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\" 0.001)\n    (check-within (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\" 0.001)\n    (check-within (candidate (list \"b\")) \"b\" 0.001)\n    (check-within (candidate (list \"play\" \"play\" \"play\")) \"play\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_159","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Eksempel: ;;viss det ikkje er nok av dei, vil du eta dei alle, men du vil framleis vere svolten.;;Det er kor mange gulrøtter du har att etter måltidet.] ;;du skal senda tilbake ein liste over [total antal spiste gulrøtter etter måltidet ditt, ;;Men no må du eta meir gulrøter for å få måltidet ditt ferdig.;;Du er ein svolten kanin, og du har allerede ete eit visst antal gulrøtur.;; >>> (eat 5 6 10)\n;; (list 11 4)\n;; >>> (eat 4 8 9)\n;; (list 12 1)\n;; >>> (eat 1 10 10)\n;; (list 11 0)\n;; >>> (eat 2 11 5)\n;; (list 7 0)\n;; Variables:\n;; @number : integer\n;;     the number of carrots that you have eaten.\n;; @need : integer\n;;     the number of carrots that you need to eat.\n;; @remaining : integer\n;;     the number of remaining carrots thet exist in stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <= 1000\n;; * 0 <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n","canonical_solution":"(define (eat number need remaining)\n  (let* ([total-needed (+ number need)]\n         [carrots-eaten (min need remaining)]\n         [total-eaten (+ number carrots-eaten)]\n         [carrots-left (- remaining carrots-eaten)])\n    (list total-eaten carrots-left)))\n\n;; Examples for testing the function\n(eat 5 6 10)  ; (list 11 4)\n(eat 4 8 9)   ; (list 12 1)\n(eat 1 10 10) ; (list 11 0)\n(eat 2 11 5)  ; (list 7 0)","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n    (check-within (candidate 5 6 10) (list 11 4) 0.001)\n    (check-within (candidate 4 8 9) (list 12 1) 0.001)\n    (check-within (candidate 1 10 10) (list 11 0) 0.001)\n    (check-within (candidate 2 11 5) (list 7 0) 0.001)\n    (check-within (candidate 4 5 7) (list 9 2) 0.001)\n    (check-within (candidate 4 5 1) (list 5 0) 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_160","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Operatorlista har minst ein operator, og operandlista har minst to operander.;;Operand er ei liste over ikkje-negative heile tal.;;Lengda på operatorlista er lik lengda på operandlista minus ein.;;Merk: ;;=> Resultatet er 9 ;;Resultatet er 2 + 3 * 4 - 5 ;;lista = [2, 3, 4, 5] ;;Operator['+', '*', '-'] ;;Eksempel: ;;Eksponentiering (**) ;;Gårdsdeling ( \/\/) ;;Multiplikasjon (*) ;;Trekk frå ( - ) ;;Tillegg (+) ;;Dei grunnleggende algebra-operasjonane: ;;Uttrykket er ei form for ein form for evaluering av uttrykk.;;Den andre lista er ei liste over heile tal. Bruka dei to lista for å laga ein algebra.;;Den fyrste lista har grunnleggjande algebra-operasjonar, og  er ei mengd av ein setning av ei mengd av ei setning.(define (do_algebra operator operand)\n","canonical_solution":"#lang racket\n\n(define (do-algebra operator operand)\n  (define ops {'+ + '- - '* * '\/\/ \/ '** expt})\n  (define expr (first operand))\n  (for ([op (in-list operator)]\n        [num (in-list (rest operand))])\n    (set! expr (eval `(,(hash-ref ops op) ,expr ,num))))\n  expr)\n\n;; Example usage\n(do-algebra '(+ * -) '(2 3 4 5)) ; => 9","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n    (check-within (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37 0.001)\n    (check-within (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9 0.001)\n    (check-within (candidate (list \"\/\/\" \"*\") (list 7 3 4)) 8 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_161","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Døme ;;Funksjonen skal gje tilbake den resulterande strengen.;;Viss ingen bokstavar finst i strengen, kan du venda strengen.;;elles får du halde fram med å laga den slik du vil at den skal vera.;;Om s[i] er ein bokstav, kan du venda bokstaven frå nedre til øvre eller vice versa.;;Du får ein H. Dette er ein H. Den neste noten er ein C.;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n","canonical_solution":"(define (solve s)\n  (if (string-any char-alphabetic? s)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n                        (if (char-lower-case? c)\n                            (char-upcase c)\n                            (char-downcase c))\n                        c))\n                  s)\n      (list->string (reverse (string->list s)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate \"AsDf\") \"aSdF\" 0.001)\n    (check-within (candidate \"1234\") \"4321\" 0.001)\n    (check-within (candidate \"ab\") \"AB\" 0.001)\n    (check-within (candidate \"#a@C\") \"#A@c\" 0.001)\n    (check-within (candidate \"#AsdfW^45\") \"#aSDFw^45\" 0.001)\n    (check-within (candidate \"#6@2\") \"2@6#\" 0.001)\n    (check-within (candidate \"#$a^D\") \"#$A^d\" 0.001)\n    (check-within (candidate \"#ccc\") \"#CCC\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_162","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Om 'text' er ein tom streng, returnerer #f. ;;Gjeve ei streng 'text', skal du returnera den md5 hashekvivalente strengen. ;; >>> (string_to_md5 \"Hello world\")\n;; \"3e25960a79dbc69b674cd4ec67a72c62\"\n(define (string_to_md5 text)\n","canonical_solution":"#lang racket\n\n(require net\/md5)\n\n(define (string_to_md5 text)\n  (if (string-empty? text)\n      #f\n      (bytes->hex-string (md5 (string->bytes\/utf-8 text)))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n    (check-within (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\" 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\" 0.001)\n    (check-within (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\" 0.001)\n))\n\n(test-humaneval)"},{"task_id":"HumanEval_163","nl":"nno_Latn","pl":"rkt","prompt":"#lang racket\n\n;;Til dømes: ;;og b, i oppstigande rekkefølge. ;;Gjeve to positive heile tal, a og b, skal eg gje dei jevne sifrane mellom a og b.;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n(define (generate_integers a b)\n","canonical_solution":"#lang racket\n\n(define (generate_integers a b)\n  (define start (min a b))\n  (define end (max a b))\n  (filter even? (range start (+ end 1))))","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)\n    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 17 89) (list ) 0.001)\n))\n\n(test-humaneval)"}]