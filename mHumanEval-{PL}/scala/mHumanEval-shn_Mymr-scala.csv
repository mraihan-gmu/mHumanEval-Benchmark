task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //လွင်ႈမၵ်းမၼ်ႈၶွပ်ႇ။    //တူၺ်းတူၺ်းဝႃႈ ၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တူဝ်ၼပ်ႉဢၼ်ၸမ်ၵၼ်တင်းသွင်ဢၼ်ၼၼ်ႉ မီးၼမ်လိူဝ်သေ  ၼႆႉယူႇႁႃႉ။    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)), (0.5f))
    // (false)
    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))
    // (true)
    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {
","def hasCloseElements(numbers: List[Float], threshold: Float): Boolean = {
      val sortedNumbers = numbers.sorted
      for (i <- 1 until sortedNumbers.length) {
        if (abs(sortedNumbers(i) - sortedNumbers(i - 1)) < threshold) {
          return true
        }
      }
      false
    }
}","    }
    def main(args: Array[String]) = {
    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));
    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));
    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));
    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));
    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));
    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));
    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));
    }

}
"
HumanEval_1,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ဢမ်ႇလႆႈသႂ်ႇပၼ် လွင်ႈပဝ်ႇၼွၵ်ႈ တီႈၼႂ်း သဵၼ်ႈမၢႆ ဢၼ်တေသႂ်ႇပၼ်ၼၼ်ႉ။    //ၸုမ်းဢၼ်ၽၢတ်ႇၵၼ်ၼၼ်ႉ ၽဵင်ႇပဵင်းၵၼ် (ႁွႆးဢၼ်ပိုတ်ႇဝႆႉဢၼ်လႂ်ဢၼ်ၼၼ်ႉ လႆႈထုၵ်ႇပိၵ်ႉဝႆႉလီလီ) လႄႈ ဢမ်ႇလႆႈဢဝ်သႂ်ႇၵၼ်ဝႆႉၼ်ႂးၵၼ်ၼၼ်ႉယဝ်ႉ။    //ၸႅၵ်ႇဢွၵ်ႇ ၸုမ်းၸိူဝ်းၼၼ်ႉ ႁႂ်ႈပဵၼ် ထႅဝ်လိၵ်ႈဢၼ်ၽၢတ်ႇဢွၵ်ႇသေ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ၸိူဝ်းၼၼ်ႉ လၢႆႈပၼ်။    //Input to this function is a string containing multiple groups of nested parentheses. ယိူင်းဢၢၼ်းၸဝ်ႈၵဝ်ႇၼႆႉပဵၼ်တႃႇ     // >>> separateParenGroups((""( ) (( )) (( )( ))""))
    // (List[String](""()"", ""(())"", ""(()())""))
    def separateParenGroups(paren_string : String) : List[String] = {
","def separateParenGroups(paren_string: String): List[String] = {
    val result = ListBuffer[String]()
    val sanitizedInput = paren_string.replaceAll(""\\s"", """")
    var balance = 0
    var currentGroup = new StringBuilder()

    for (char <- sanitizedInput) {
        currentGroup.append(char)
        if (char == '(') balance += 1
        else if (char == ')') balance -= 1

        if (balance == 0 && currentGroup.nonEmpty) {
            result += currentGroup.toString()
            currentGroup = new StringBuilder()
        }
    }

    result.toList
}","    }
    def main(args: Array[String]) = {
    assert(separateParenGroups((""(()()) ((())) () ((())()())"")).equals((List[String](""(()())"", ""((()))"", ""()"", ""((())()())""))));
    assert(separateParenGroups((""() (()) ((())) (((())))"")).equals((List[String](""()"", ""(())"", ""((()))"", ""(((())))""))));
    assert(separateParenGroups((""(()(())((())))"")).equals((List[String](""(()(())((())))""))));
    assert(separateParenGroups((""( ) (( )) (( )( ))"")).equals((List[String](""()"", ""(())"", ""(()())""))));
    }

}
"
HumanEval_2,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉႁူဝ်သိပ်းၼၼ်ႉမႃး။    //(တွၼ်ႈဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ၵႆႉၵႆႉလဵၵ်ႉလိူဝ်သေ 1) ။    //လႄႈ တူဝ်ၼပ်ႉတဵမ် (တူဝ်ၼပ်ႉတဵမ် ဢၼ်ယႂ်ႇသုတ်း ဢၼ်လဵၵ်ႉလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉ) လႄႈ တူဝ်ၼပ်ႉၸုတ်ႉ    //ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉ floating point ဢၼ်လီၼႆၸိုင် မၼ်းတေၸႅၵ်ႇပဵၼ်     // >>> truncateNumber((3.5f))
    // (0.5f)
    def truncateNumber(number : Float) : Float = {
","val integerPart = number.floor
        val decimalPart = number - integerPart
        decimalPart.toFloat
    }
}","    }
    def main(args: Array[String]) = {
    assert(truncateNumber((3.5f)) == (0.5f));
    assert(truncateNumber((1.25f)) == (0.25f));
    assert(truncateNumber((123.0f)) == (0.0f));
    }

}
"
HumanEval_3,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ပေႃးဢမ်ႇၼၼ် မၼ်းတေၶိုၼ်းပၼ် false    //လွင်ႈၵိုတ်းယိုဝ်းဢၼ်ဢမ်ႇမီးလွင်ႈၵိုတ်းယိုဝ်းၼၼ်ႉ ပဵၼ်လွင်ႈဢၼ်လႆႈႁၼ်ဝႃႈ တီႈဢၼ်လႂ်သေဢမ်ႇဝႃႈ လွင်ႈၵိုတ်းယိုဝ်းၶွင် သဵၼ်ႈမၢႆငိုၼ်းၼႆႉ တူၵ်းလူင်းဝႆႉတႂ်ႈ သုၼ်သေယဝ်ႉ    //သူတေလႆႈပၼ်သဵၼ်ႈမၢႆ ၵၢၼ်သႂ်ႇငိုၼ်း လႄႈ ၵၢၼ်ထွၼ်ငိုၼ်း တီႈၼႂ်းမၢႆတွင်းပၢၼ်ႇ ဢၼ်တႄႇတီႈ     // >>> belowZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (false)
    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong)))
    // (true)
    def belowZero(operations : List[Long]) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def belowZero(operations: List[Long]): Boolean = {
    var balance: Long = 0
    for (operation <- operations) {
      balance += operation
      if (balance < 0) {
        return true
      }
    }
    false
  }

  def main(args: Array[String]): Unit = {
    println(belowZero(List(1L, 2L, 3L)))         // false
    println(belowZero(List(1L, 2L, -4L, 5L)))    // true
  }
}","    }
    def main(args: Array[String]) = {
    assert(belowZero((List[Long]())) == (false));
    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));
    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));
    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));
    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));
    assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));
    }

}
"
HumanEval_4,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //MAD = average x - x_mean     //လွင်ႈဢၼ်မီးတီႈၵၢင်လႄႈ တီႈဢၼ်မီးတီႈၵၢင် (တီႈဢၼ်ၼႆႉတႄႉ ပဵၼ်လွင်ႈတၢင်းဢၼ်မီးတီႈၵၢင်)    //Mean Absolute Deviation ၼႆႉပဵၼ် လမ်ႉၵတ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် ၼႂ်းၵႄႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။    //ၼ်ႂးၵႃႈ ၶေႃႈမုၼ်းဢၼ်လႆႈမႃးၼႆႉ    //တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉ တူဝ်ၼပ်ႉ ဢၼ်ၶဝ်ႈၼၼ်ႉ၊ ထတ်းသၢင်ႈ လွင်ႈယိူင်းၸူး ဢၼ်ဢမ်ႇပိူင်ႈၵၼ် ဢၼ်မၢၼ်ႇမႅၼ်ႈၼၼ်ႉ။    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))
    // (1.0f)
    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {
","val mean = numbers.sum / numbers.size
    val deviations = numbers.map(num => math.abs(num - mean))
    val mad = deviations.sum / deviations.size
    mad
  }
}","    }
    def main(args: Array[String]) = {
    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) == (0.5f));
    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));
    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));
    }

}
"
HumanEval_5,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //သႂ်ႇမၢႆ ""delimeter"" ၼႂ်းၵႄႈ တူဝ်ၼပ်ႉ သွင်ဢၼ် ဢၼ်ၸပ်းၵၼ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်သႂ်ႇဝႆႉၼၼ်ႉ ∀numbers""     // >>> intersperse((List[Long]()), (4l))
    // (List[Long]())
    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))
    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))
    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {
","if (numbers.isEmpty) {
        List()
      } else {
        numbers.init.flatMap(n => List(n, delimeter)) :+ numbers.last
      }
    }
}","    }
    def main(args: Array[String]) = {
    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));
    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));
    assert(intersperse((List[Long](2l.toLong, 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));
    }

}
"
HumanEval_6,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း (() (()) ၼႆႉ မီးဝႆႉ ၸၼ်ႉဢၼ်ႁဵတ်းႁၢင်ႇဝႆႉသွင်ဢၼ်သေတႃႉ ((())) ၼႆႉ မီးဝႆႉ သၢမ်ဢၼ်ယဝ်ႉ။    //တွၼ်ႈတႃႇၸုမ်းဢၼ်လႂ်သေဢမ်ႇဝႃႈ၊ ဢွၵ်ႇပၼ် ထၢၼ်ႈဢၼ်လိုၵ်ႉသုတ်းၶွင် လွင်ႈဢဝ်ပႅတ်ႇၵႅၼ်ႇဢၼ်မီးၼ်ႂးၵႄႈ parentheses ၼၼ်ႉယဝ်ႉ။    //Input to this function is a string represented multiple groups for nested parentheses separated by spaces. ဢၼ်ၶဝ်ႈၸူးၼႂ်းၽွၼ်ႉၼႆႉ ပဵၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင်ဝႆႉ လၢႆလၢႆၸုမ်း တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်မီးဝႆႉ ႁင်းၶေႃ ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈၵိုတ်းဝႆႉ။    // >>> parseNestedParens((""(()()) ((())) () ((())()())""))
    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))
    def parseNestedParens(paren_string : String) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def parseNestedParens(paren_string: String): List[Long] = {
    paren_string.split("" "").toList.map { group =>
      var maxDepth = 0
      var currentDepth = 0
      group.foreach {
        case '(' => 
          currentDepth += 1
          maxDepth = max(maxDepth, currentDepth)
        case ')' => 
          currentDepth -= 1
      }
      maxDepth.toLong
    }
  }

  // Example usage
  def main(args: Array[String]): Unit = {
    val result = parseNestedParens(""(()()) ((())) () ((())()())"")
    println(s""Result: ${result.mkString("", "")}"")
  }
}","    }
    def main(args: Array[String]) = {
    assert(parseNestedParens((""(()()) ((())) () ((())()())"")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));
    assert(parseNestedParens((""() (()) ((())) (((())))"")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));
    assert(parseNestedParens((""(()(())((())))"")).equals((List[Long](4l.toLong))));
    }

}
"
HumanEval_7,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၸၼ်ဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ပႃး သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ၸၼ်ဢဝ်။    // >>> filterBySubstring((List[String]()), (""a""))
    // (List[String]())
    // >>> filterBySubstring((List[String](""abc"", ""bacd"", ""cde"", ""array"")), (""a""))
    // (List[String](""abc"", ""bacd"", ""array""))
    def filterBySubstring(strings : List[String], substring : String) : List[String] = {
","strings.filter(_.contains(substring))
    }
}","    }
    def main(args: Array[String]) = {
    assert(filterBySubstring((List[String]()), (""john"")).equals((List[String]())));
    assert(filterBySubstring((List[String](""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"")), (""xxx"")).equals((List[String](""xxx"", ""xxxAAA"", ""xxx""))));
    assert(filterBySubstring((List[String](""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx"")), (""xx"")).equals((List[String](""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""))));
    assert(filterBySubstring((List[String](""grunt"", ""trumpet"", ""prune"", ""gruesome"")), (""run"")).equals((List[String](""grunt"", ""prune""))));
    }

}
"
HumanEval_8,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈပဵၼ် 0 လႄႈ တူဝ်ၵုၼ်းဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ တေလႆႈပဵၼ် 1 ၼၼ်ႉယဝ်ႉ။    //တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်လေႃး လႄႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃး။    // >>> sumProduct((List[Long]()))
    // ((0l, 1l))
    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))
    // ((10l, 24l))
    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {
","def sumProduct(numbers: List[Long]): (Long, Long) = {
        val sum = numbers.sum
        val product = numbers.foldLeft(1L)(_ * _)
        (sum, product)
    }

    def main(args: Array[String]): Unit = {
        // Test examples
        println(sumProduct(List[Long]())) // (0L, 1L)
        println(sumProduct(List[Long](1L, 2L, 3L, 4L))) // (10L, 24L)
    }
}","    }
    def main(args: Array[String]) = {
    assert(sumProduct((List[Long]())).equals(((0l, 1l))));
    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));
    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));
    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));
    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));
    }

}
"
HumanEval_9,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၼႂ်းလွင်ႈၶပ်ႉၶိုင်။    //လုၵ်ႉတီႈ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉသေ ႁဵတ်းဢွၵ်ႇ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ၼမ်သုတ်း ဢၼ်လႆႈႁၼ် တေႃႇထိုင် ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ    // >>> rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))
    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))
    def rollingMax(numbers : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    def rollingMax(numbers: List[Long]): List[Long] = {
        var maxSoFar = Long.MinValue
        numbers.map { num =>
            maxSoFar = max(maxSoFar, num)
            maxSoFar
        }
    }
}","    }
    def main(args: Array[String]) = {
    assert(rollingMax((List[Long]())).equals((List[Long]())));
    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));
    assert(rollingMax((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));
    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 100l.toLong, 100l.toLong))));
    }

}
"
HumanEval_10,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //- သႂ်ႇပၼ်တီႈသုတ်းၶွင် string ဢၼ်ၽိတ်းပိူင်ႈၶွင် string prefix ဢၼ်မႃးၼႃႈ palindromic suffix။    //- သွၵ်ႈႁႃ postfix ဢၼ်ယၢဝ်းသေပိူၼ်ႈ ၼႂ်းသဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ဢၼ်ပဵၼ် palindrome ၼၼ်ႉ    //ပၢႆးဝူၼ်ႉ ဢႄႇလ်ၵေႃးရိတ်ႉသမ်ႇၼႆႉ ငၢႆႈၼႃႇ၊    //သွၵ်ႈႁႃ palindrome ဢၼ်တိုၵ်ႉသုတ်း ဢၼ်တႄႇလူၺ်ႈ သဵၼ်ႈဢၼ်ပၼ်ဝႆႉၼၼ်ႉယဝ်ႉ။    // >>> makePalindrome((""""))
    // ("""")
    // >>> makePalindrome((""cat""))
    // (""catac"")
    // >>> makePalindrome((""cata""))
    // (""catac"")
    def makePalindrome(string : String) : String = {
","def makePalindrome(string: String): String = {
    // Helper function to check if a string is a palindrome
    def isPalindrome(s: String): Boolean = s == s.reverse

    // Find the longest palindromic suffix
    var endIndex = string.length
    while (endIndex > 0 && !isPalindrome(string.substring(endIndex - 1))) {
      endIndex -= 1
    }

    // Extract the non-palindromic prefix
    val prefix = string.substring(0, endIndex - 1)

    // Append the reverse of the prefix to form the shortest palindrome
    string + prefix.reverse
  }
}","    }
    def main(args: Array[String]) = {
    assert(makePalindrome(("""")).equals(("""")));
    assert(makePalindrome((""x"")).equals((""x"")));
    assert(makePalindrome((""xyz"")).equals((""xyzyx"")));
    assert(makePalindrome((""xyx"")).equals((""xyx"")));
    assert(makePalindrome((""jerry"")).equals((""jerryrrej"")));
    }

}
"
HumanEval_11,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ႁဵတ်းသၢင်ႈ binary XOR ၼိူဝ် inputs ၸိူဝ်းၼႆႉလႄႈ ၶိုၼ်းဢဝ်ၼမ်ႉတွၼ်းမၼ်းမႃးပဵၼ် string။    //Input ၼႆႉပဵၼ် သွင်တူဝ်ဢၼ်ပဵၼ် a လႄႈ b ဢၼ်ပႃးဝႆႉ တူဝ် 1 လႄႈ 0 ၼၼ်ႉၵူၺ်းယဝ်ႉ။    // >>> stringXor((""010""), (""110""))
    // (""100"")
    def stringXor(a : String, b : String) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def stringXor(a: String, b: String): String = {
    (a zip b).map { case (charA, charB) => 
      if (charA == charB) '0' else '1'
    }.mkString
  }
}","    }
    def main(args: Array[String]) = {
    assert(stringXor((""111000""), (""101010"")).equals((""010010"")));
    assert(stringXor((""1""), (""1"")).equals((""0"")));
    assert(stringXor((""0101""), (""0000"")).equals((""0101"")));
    }

}
"
HumanEval_12,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //Return None in case the input list is empty. ပေႃးဝႃႈ သဵၼ်ႈမၢႆ ဢၼ်တေဢဝ်ၶဝ်ႈၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးၼႆၸိုင် ၶိုၼ်းဢဝ် None လၢႆႈပၼ်    //ၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ထႅဝ်လိၵ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ်ဢၼ်ယၢဝ်းသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းဢဝ် ဢၼ်ဢွၼ်တၢင်းသုတ်းၼၼ်ႉၶိုၼ်း ပေႃးပဵၼ်တူဝ်ထႅဝ်လိၵ်ႈၼမ်လိူဝ်ၼၼ်ႉ    // >>> longest((List[String]()))
    // None
    // >>> longest((List[String](""a"", ""b"", ""c"")))
    // Some(""a"")
    // >>> longest((List[String](""a"", ""bb"", ""ccc"")))
    // Some(""ccc"")
    def longest(strings : List[String]) : Option[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // Out of list of strings, return the longest one. Return the first one in case of multiple
    // strings of the same length. Return None in case the input list is empty.
    def longest(strings: List[String]): Option[String] = {
        if (strings.isEmpty) None
        else Some(strings.maxBy(_.length))
    }
}","    }
    def main(args: Array[String]) = {
    assert(longest((List[String]())).equals(None));
    assert(longest((List[String](""x"", ""y"", ""z""))).equals(Some(""x"")));
    assert(longest((List[String](""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""))).equals(Some(""zzzz"")));
    }

}
"
HumanEval_13,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇၽႄဢၼ်ၵဵဝ်ႇၵၼ်ဢၼ်ယ်ႂႇသေပိူၼ်ႈ ၶွင်တူဝ်ၼပ်ႉတဵမ် a လႄႈ b သွင်တူဝ်ၼၼ်ႉမႃး    // >>> greatestCommonDivisor((3l), (5l))
    // (1l)
    // >>> greatestCommonDivisor((25l), (15l))
    // (5l)
    def greatestCommonDivisor(a : Long, b : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // Return a greatest common divisor of two integers a and b
    // >>> greatestCommonDivisor((3l), (5l))
    // (1l)
    // >>> greatestCommonDivisor((25l), (15l))
    // (5l)
    def greatestCommonDivisor(a: Long, b: Long): Long = {
        if (b == 0) a else greatestCommonDivisor(b, a % b)
    }
}","    }
    def main(args: Array[String]) = {
    assert(greatestCommonDivisor((3l), (7l)) == (1l));
    assert(greatestCommonDivisor((10l), (15l)) == (5l));
    assert(greatestCommonDivisor((49l), (14l)) == (7l));
    assert(greatestCommonDivisor((144l), (60l)) == (12l));
    }

}
"
HumanEval_14,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ prefix တင်းမူတ်း ဢၼ်လုၵ်ႉတီႈ ဢၼ်ယၢဝ်းသေပိူၼ်ႈ တေႃႇထိုင် ဢၼ်ပွတ်းသေပိူၼ်ႈ ၶွင် string input ၼၼ်ႉၶိုၼ်းမႃး    // >>> allPrefixes((""abc""))
    // (List[String](""a"", ""ab"", ""abc""))
    def allPrefixes(string : String) : List[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Return list of all prefixes from shortest to longest of the input string
  // >>> allPrefixes((""abc""))
  // (List[String](""a"", ""ab"", ""abc""))
  def allPrefixes(string: String): List[String] = {
    (1 to string.length).map(i => string.substring(0, i)).toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(allPrefixes(("""")).equals((List[String]())));
    assert(allPrefixes((""asdfgh"")).equals((List[String](""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""))));
    assert(allPrefixes((""WWW"")).equals((List[String](""W"", ""WW"", ""WWW""))));
    }

}
"
HumanEval_15,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် string ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈသေ တူဝ်ၼပ်ႉတႄႇတီႈ 0 တေႃႇထိုင် n ႁူမ်ႈပႃးၼၼ်ႉ။     // >>> stringSequence((0l))
    // (""0"")
    // >>> stringSequence((5l))
    // (""0 1 2 3 4 5"")
    def stringSequence(n : Long) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def stringSequence(n: Long): String = {
    (0L to n).mkString("" "")
  }
}","    }
    def main(args: Array[String]) = {
    assert(stringSequence((0l)).equals((""0"")));
    assert(stringSequence((3l)).equals((""0 1 2 3"")));
    assert(stringSequence((10l)).equals((""0 1 2 3 4 5 6 7 8 9 10"")));
    }

}
"
HumanEval_16,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ပေႃးဝႃႈႁဝ်းပၼ် string ၼႆ ႁဝ်းတေႁႃတူဝ်လိၵ်ႈဢၼ်ဢမ်ႇမိူၼ်ၵၼ်မၼ်း (ဢမ်ႇဝႃႈတူဝ်ယႂ်ႇလႄႈတူဝ်ယၢဝ်း) မၼ်းတေမီးလၢႆတူဝ်    // >>> countDistinctCharacters((""xyzXYZ""))
    // (3l)
    // >>> countDistinctCharacters((""Jerry""))
    // (4l)
    def countDistinctCharacters(string : String) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Given a string, find out how many distinct characters (regardless of case) does it consist of
  // >>> countDistinctCharacters((""xyzXYZ""))
  // (3l)
  // >>> countDistinctCharacters((""Jerry""))
  // (4l)
  def countDistinctCharacters(string: String): Long = {
    string.toLowerCase.toSet.size.toLong
  }
}","    }
    def main(args: Array[String]) = {
    assert(countDistinctCharacters(("""")) == (0l));
    assert(countDistinctCharacters((""abcde"")) == (5l));
    assert(countDistinctCharacters((""abcdecadeCADE"")) == (5l));
    assert(countDistinctCharacters((""aaaaAAAAaaaa"")) == (1l));
    assert(countDistinctCharacters((""Jerry jERRY JeRRRY"")) == (5l));
    }

}
"
HumanEval_17,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //'ႁႃႈ' - ၶွတ်ႇတႃႇၼေႃႇတႄႇ၊ ယိုတ်းဝႆႉ သဵင်ဢၼ်ၼိူင်ႈ။    //'o Saji' - ၶိုင်ႈၼူၵ်ႉ၊ ၸူဝ်ႈၶၢဝ်းသွင်ၵမ်း     //'o' - ပဵၼ်ၼူၵ်ႉဢၼ်တဵမ်ထူၼ်ႈ၊ ၸူဝ်ႈၶၢဝ်း 4 သႅၼ်း။    //တီႈၼႆႈၼႆႉ မီးဝႆႉ မၢႆတွင်းဢၼ်ၼိုင်ႈ။    //ဢမ်ႇပဵၼ်ၵမ်းလိုၼ်းသုတ်း။    //ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇၸႅၵ်ႇထႅဝ်လိၵ်ႈဢၼ်ၼႆႉ လႄႈ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵပ်းၵၢႆႇလူၺ်ႈတင်း တၢင်းၼမ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်ဢၼ်    //Input to this function is a string representing musical notes in a special ASCII format. ဢၼ်ၶဝ်ႈၸူးၼႂ်းၽွၼ်ႉၼႆႉ ပဵၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင် ၼေႃႇတႃႇၽဵင်းၵႂၢမ်း ၼႂ်းပိူင်ၾၢင် ASCII ဢၼ်ၶိုၵ်ႉတွၼ်း။    // >>> parseMusic((""o o| .| o| o| .| .| .| .| o o""))
    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))
    def parseMusic(music_string : String) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def parseMusic(music_string: String): List[Long] = {
    val noteMap = Map(""o"" -> 4L, ""o|"" -> 2L, "".|"" -> 1L)
    val notes = music_string.split("" "")
    notes.toList.map(note => noteMap(note))
  }
}","    }
    def main(args: Array[String]) = {
    assert(parseMusic(("""")).equals((List[Long]())));
    assert(parseMusic((""o o o o"")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));
    assert(parseMusic(("".| .| .| .|"")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));
    assert(parseMusic((""o| o| .| .| o o o o"")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));
    assert(parseMusic((""o| .| o| .| o o| o o|"")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));
    }

}
"
HumanEval_18,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶူၼ်ႉႁႃတူၺ်းဝႃႈ ၸႅၼ်ႇထႅဝ်ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေၸၢင်ႈႁၼ်လႆႈတီႈၼႂ်း ၸႅၼ်ႇထႅဝ်ငဝ်ႈမၼ်းလၢႆလၢႆၵမ်းၼႆသေ ၵဵပ်းဢဝ် ဢၼ်ၶပ်ႉၵၼ်ဝႆႉၸိူဝ်းၼၼ်ႉ    // >>> howManyTimes((""""), (""a""))
    // (0l)
    // >>> howManyTimes((""aaa""), (""a""))
    // (3l)
    // >>> howManyTimes((""aaaa""), (""aa""))
    // (3l)
    def howManyTimes(string : String, substring : String) : Long = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    def howManyTimes(string: String, substring: String): Long = {
        if (substring.isEmpty || string.isEmpty) return 0L
        var count: Long = 0L
        for (i <- 0 to (string.length - substring.length)) {
            if (string.substring(i, i + substring.length) == substring) {
                count += 1
            }
        }
        count
    }

    // Test cases
    def main(args: Array[String]): Unit = {
        println(howManyTimes("""", ""a""))    // Output: 0
        println(howManyTimes(""aaa"", ""a"")) // Output: 3
        println(howManyTimes(""aaaa"", ""aa"")) // Output: 3
    }
}","    }
    def main(args: Array[String]) = {
    assert(howManyTimes((""""), (""x"")) == (0l));
    assert(howManyTimes((""xyxyxyx""), (""x"")) == (4l));
    assert(howManyTimes((""cacacacac""), (""cac"")) == (4l));
    assert(howManyTimes((""john doe""), (""john"")) == (1l));
    }

}
"
HumanEval_19,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉတီႈလဵၵ်ႉသုတ်း တေႃႇထိုင် ဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ    //ဢၼ်ထုၵ်ႇမႅၼ်ႈဢၼ်လိူၵ်ႈလႆႈၼၼ်ႉပဵၼ် 'သုၼ်'၊ 'ၼိုင်ႈ'၊ 'သွင်'၊ 'သၢမ်'၊ 'သီႇ'၊ 'ႁႃႈ'၊ 'ႁူၵ်း'၊ 'ၸဵတ်း'၊ 'ဢဵတ်း' လႄႈ 'သိပ်း' ၼႆယဝ်ႉ။    //Input ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉတီႈၵႄႈ တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ သုၼ် တေႃႇထိုင် တူဝ်ၼပ်ႉဢၼ်မီးတီႈပွင်ႇတီႈၼွၵ်ႈၼၼ်ႉယဝ်ႉ။    // >>> sortNumbers((""three one five""))
    // (""one three five"")
    def sortNumbers(numbers : String) : String = {
","def sortNumbers(numbers: String): String = {
    val numberWords = Map(
      ""zero"" -> 0,
      ""one"" -> 1,
      ""two"" -> 2,
      ""three"" -> 3,
      ""four"" -> 4,
      ""five"" -> 5,
      ""six"" -> 6,
      ""seven"" -> 7,
      ""eight"" -> 8,
      ""nine"" -> 9
    )
    
    numbers.split("" "")
      .sortBy(word => numberWords(word))
      .mkString("" "")
  }
}","    }
    def main(args: Array[String]) = {
    assert(sortNumbers(("""")).equals(("""")));
    assert(sortNumbers((""three"")).equals((""three"")));
    assert(sortNumbers((""three five nine"")).equals((""three five nine"")));
    assert(sortNumbers((""five zero four seven nine eight"")).equals((""zero four five seven eight nine"")));
    assert(sortNumbers((""six five four three two one zero"")).equals((""zero one two three four five six"")));
    }

}
"
HumanEval_20,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တၢင်ႇၸိူဝ်းလႄႈ ၶိုၼ်းဢဝ်ၶဝ်မႃးၸွမ်းၼင်ႇပိူင် (တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉလိူဝ်၊ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇလိူဝ်) ။    //တီႈၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ (တၢင်းယၢဝ်းမၼ်းဢမ်ႇယွမ်း 2 တူဝ်) လိူၵ်ႈဢဝ်သေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဢၼ်ၸမ်သုတ်းတင်းမူတ်း 2 တူဝ်     // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))
    // ((2.0f, 2.2f))
    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))
    // ((2.0f, 2.0f))
    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def findClosestElements(numbers: List[Float]): (Float, Float) = {
    require(numbers.length >= 2, ""List must contain at least two elements"")
    val sortedNumbers = numbers.sorted

    var minDiff = Float.MaxValue
    var closestPair = (0.0f, 0.0f)

    for(i <- 0 until sortedNumbers.length - 1) {
      val currentDiff = abs(sortedNumbers(i) - sortedNumbers(i + 1))
      if(currentDiff < minDiff) {
        minDiff = currentDiff
        closestPair = (sortedNumbers(i), sortedNumbers(i + 1))
      }
    }
    
    closestPair
  }
}","    }
    def main(args: Array[String]) = {
    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));
    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));
    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));
    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));
    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));
    }

}
"
HumanEval_21,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ တေပဵၼ် 0 လႄႈ ဢၼ်ယႂ်ႇသုတ်းၼၼ်ႉ တေပဵၼ် 1    //ပေႃးလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ (ဢၼ်ပႃးဝႆႉ တူဝ်ၼပ်ႉ တီႈဢေႇသုတ်းသွင်တူဝ်) ၼႆၸိုင် ဢဝ်လွင်ႈလႅၵ်ႈလၢႆႈ ထႅဝ်ၸႅတ်ႈၼၼ်ႉသေ ႁဵတ်းၸွမ်း သဵၼ်ႈမၢႆၼၼ်ႉ၊    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))
    // (List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))
    def rescaleToUnit(numbers : List[Float]) : List[Float] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Given list of numbers (of at least two elements), apply a linear transform to that list,
  // such that the smallest number will become 0 and the largest will become 1
  def rescaleToUnit(numbers: List[Float]): List[Float] = {
    val minVal = numbers.min
    val maxVal = numbers.max
    numbers.map(num => (num - minVal) / (maxVal - minVal))
  }
}

// Usage example
object Main extends App {
  val numbers = List[Float](1.0f, 2.0f, 3.0f, 4.0f, 5.0f)
  val rescaledNumbers = Problem.rescaleToUnit(numbers)
  println(rescaledNumbers) // Output: List(0.0, 0.25, 0.5, 0.75, 1.0)
}","    }
    def main(args: Array[String]) = {
    assert(rescaleToUnit((List[Float](2.0f.toFloat, 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));
    assert(rescaleToUnit((List[Float](100.0f.toFloat, 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));
    assert(rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));
    assert(rescaleToUnit((List[Float](2.0f.toFloat, 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));
    assert(rescaleToUnit((List[Float](12.0f.toFloat, 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));
    }

}
"
HumanEval_22,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၸၢၵ်ႈၸႅၵ်ႉ ဢၼ်ပၼ်ဝႆႉ သဵၼ်ႈမၢႆၶွင် ၵႃႈၶၼ် scalathon ဢၼ်လႂ်သေဢမ်ႇဝႃႈ တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း    // >>> filterIntegers((List[Any](""a"", 3.14f, 5l)))
    // (List[Long](5l.toLong))
    // >>> filterIntegers((List[Any](1l, 2l, 3l, ""abc"", Map[Long,Long](), List[Long]())))
    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))
    def filterIntegers(values : List[Any]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def filterIntegers(values: List[Any]): List[Long] = {
    values.collect {
      case l: Long => l
    }
  }

  def main(args: Array[String]): Unit = {
    println(filterIntegers(List[Any](""a"", 3.14f, 5l))) // List(5)
    println(filterIntegers(List[Any](1l, 2l, 3l, ""abc"", Map[Long, Long](), List[Long]()))) // List(1, 2, 3)
  }
}","    }
    def main(args: Array[String]) = {
    assert(filterIntegers((List[Any]())).equals((List[Long]())));
    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f, 9l, ""adasd""))).equals((List[Long](4l.toLong, 9l.toLong))));
    assert(filterIntegers((List[Any](3l, ""c"", 3l, 3l, ""a"", ""b""))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));
    }

}
"
HumanEval_23,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ်တၢင်းယၢဝ်း string ဢၼ်ပၼ်ဝႆႉၼၼ်ႉမႃး    // >>> stringLength((""""))
    // (0l)
    // >>> stringLength((""abc""))
    // (3l)
    def strlen(string : String) : Long = {
","def strlen(string: String): Long = {
        string.length.toLong
    }
}","    }
    def main(args: Array[String]) = {
    assert(strlen(("""")) == (0l));
    assert(strlen((""x"")) == (1l));
    assert(strlen((""asdasnakj"")) == (9l));
    }

}
"
HumanEval_24,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉ n ၼၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ဢၼ်ၸႅၵ်ႇ n ႁ်ႂႈပဵၼ်ဢၼ်ၽဵင်ႇပဵင်းၼၼ်ႉ၊ ဢၼ်လဵၵ်ႉလိူဝ် n ၼၼ်ႉ။    // >>> largestDivisor((15l))
    // (5l)
    def largestDivisor(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // For a given number n, find the largest number that divides n evenly, smaller than n
    // >>> largestDivisor(15l)
    // (5l)
    def largestDivisor(n: Long): Long = {
        for (i <- (n / 2) to 1 by -1) {
            if (n % i == 0) return i
        }
        1L  // if no divisor found, return 1 (since 1 divides any number)
    }
}","    }
    def main(args: Array[String]) = {
    assert(largestDivisor((3l)) == (1l));
    assert(largestDivisor((7l)) == (1l));
    assert(largestDivisor((10l)) == (5l));
    assert(largestDivisor((100l)) == (50l));
    assert(largestDivisor((49l)) == (7l));
    }

}
"
HumanEval_25,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈၼႆႉ တေလႆႈၽဵင်ႇပဵင်းၵၼ်တၢင်း တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉတင်းမူတ်းၼၼ်ႉယဝ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ထုၵ်ႇလီၸီႉၸမ်ႈဝႆႉဝႃႈ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တၢင်း တူဝ်ၼပ်ႉဢၼ်မၼ်းလႆႈမႃးတီႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉယဝ်ႉ။    //ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ ဢၼ်တႄႇဢဝ် တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသေပိူၼ်ႈ တေႃႇထိုင် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈၼၼ်ႉ ၶိုၼ်းမႃး။    // >>> factorize((8l))
    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))
    // >>> factorize((25l))
    // (List[Long](5l.toLong, 5l.toLong))
    // >>> factorize((70l))
    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))
    def factorize(n : Long) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def factorize(n: Long): List[Long] = {
    var num = n
    val factors = ListBuffer[Long]()
    
    var i = 2L
    while (i <= sqrt(num).toLong) {
      while (num % i == 0) {
        factors += i
        num /= i
      }
      i += 1
    }
    
    if (num > 1) {
      factors += num
    }
    
    factors.toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(factorize((2l)).equals((List[Long](2l.toLong))));
    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));
    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));
    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));
    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));
    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));
    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));
    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));
    }

}
"
HumanEval_26,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //မႄးထတ်းပၼ် လွင်ႈၵွင်ႉၵၢႆႇ ဢၼ်ဢမ်ႇပိူင်ႈၵၼ်တင်း ဢၼ်သႂ်ႇဝႆႉ။    //တီႈၼႂ်းသဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ ထွၼ်ပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးမႃး ၼမ်လိူဝ်ၼိုင်ႈပွၵ်ႈၼၼ်ႉ။    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))
    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))
    def removeDuplicates(numbers : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def removeDuplicates(numbers: List[Long]): List[Long] = {
    val elementCount = numbers.groupBy(identity).mapValues(_.size)
    numbers.filter(num => elementCount(num) == 1)
  }

  def main(args: Array[String]): Unit = {
    val numbers = List[Long](1L, 2L, 3L, 2L, 4L)
    println(removeDuplicates(numbers)) // Output: List(1, 3, 4)
  }
}","    }
    def main(args: Array[String]) = {
    assert(removeDuplicates((List[Long]())).equals((List[Long]())));
    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));
    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));
    }

}
"
HumanEval_27,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊ ဢဝ်တူဝ်လိၵ်ႈတူဝ်လဵၵ်ႉသေ လႅၵ်ႈပဵၼ် တူဝ်လိၵ်ႈတူဝ်ယႂ်ႇ လႄႈ တူဝ်လိၵ်ႈတူဝ်ယႂ်ႇ လႅၵ်ႈပဵၼ်တူဝ်လဵၵ်ႉ။     // >>> flipCase((""Hello""))
    // (""hELLO"")
    def flipCase(string : String) : String = {
","def flipCase(string: String): String = {
    string.map {
      case c if c.isLower => c.toUpper
      case c if c.isUpper => c.toLower
      case c => c
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(flipCase(("""")).equals(("""")));
    assert(flipCase((""Hello!"")).equals((""hELLO!"")));
    assert(flipCase((""These violent delights have violent ends"")).equals((""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"")));
    }

}
"
HumanEval_28,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //Concatenate list of strings into a single string  သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ပႃးဝႆႉ သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉသဵၼ်ႈလဵဝ်    // >>> concatenate((List[String]()))
    // ("""")
    // >>> concatenate((List[String](""a"", ""b"", ""c"")))
    // (""abc"")
    def concatenate(strings : List[String]) : String = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    // Concatenate list of strings into a single string
    // >>> concatenate((List[String]()))
    // ("""")
    // >>> concatenate((List[String](""a"", ""b"", ""c"")))
    // (""abc"")
    def concatenate(strings: List[String]): String = {
        strings.mkString("""")
    }
}","    }
    def main(args: Array[String]) = {
    assert(concatenate((List[String]())).equals(("""")));
    assert(concatenate((List[String](""x"", ""y"", ""z""))).equals((""xyz"")));
    assert(concatenate((List[String](""x"", ""y"", ""z"", ""w"", ""k""))).equals((""xyzwk"")));
    }

}
"
HumanEval_29,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၸၼ်ဢဝ် သဵၼ်ႈမၢႆ ဢၼ်တေၶဝ်ႈမႃးၼၼ်ႉသေ ၸၼ်ဢဝ် ဢၼ်တေတႄႇမႃးတီႈ prefix ၼၼ်ႉၵူၺ်း။    // >>> filterByPrefix((List[String]()), (""a""))
    // (List[String]())
    // >>> filterByPrefix((List[String](""abc"", ""bcd"", ""cde"", ""array"")), (""a""))
    // (List[String](""abc"", ""array""))
    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {
","strings.filter(_.startsWith(prefix))
    }
}","    }
    def main(args: Array[String]) = {
    assert(filterByPrefix((List[String]()), (""john"")).equals((List[String]())));
    assert(filterByPrefix((List[String](""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"")), (""xxx"")).equals((List[String](""xxx"", ""xxxAAA"", ""xxx""))));
    }

}
"
HumanEval_30,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ ဢၼ်တဵမ်ထူၼ်ႈ ဢၼ်မီးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉၵူၺ်း    // >>> getPositive((List[Long](-1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))
    // (List[Long](2l.toLong, 5l.toLong, 6l.toLong))
    // >>> getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))
    // (List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))
    def getPositive(l : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    def getPositive(l: List[Long]): List[Long] = {
        l.filter(_ > 0)
    }
}","    }
    def main(args: Array[String]) = {
    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));
    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));
    assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));
    assert(getPositive((List[Long]())).equals((List[Long]())));
    }

}
"
HumanEval_31,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ်လွင်ႈမၢၼ်ႇမႅၼ်ႈမၼ်းၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆၸိုင် ပဵၼ်ၽိတ်းယဝ်ႉ။    // >>> isPrime((6l))
    // (false)
    // >>> isPrime((101l))
    // (true)
    // >>> isPrime((11l))
    // (true)
    // >>> isPrime((13441l))
    // (true)
    // >>> isPrime((61l))
    // (true)
    // >>> isPrime((4l))
    // (false)
    // >>> isPrime((1l))
    // (false)
    def isPrime(n : Long) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Return true if a given number is prime, and false otherwise.
  def isPrime(n: Long): Boolean = {
    if (n <= 1) return false
    if (n <= 3) return true
    if (n % 2 == 0 || n % 3 == 0) return false
    var i = 5
    while (i * i <= n) {
      if (n % i == 0 || n % (i + 2) == 0) return false
      i += 6
    }
    true
  }
}","    }
    def main(args: Array[String]) = {
    assert(isPrime((6l)) == (false));
    assert(isPrime((101l)) == (true));
    assert(isPrime((11l)) == (true));
    assert(isPrime((13441l)) == (true));
    assert(isPrime((61l)) == (true));
    assert(isPrime((4l)) == (false));
    assert(isPrime((1l)) == (false));
    assert(isPrime((5l)) == (true));
    assert(isPrime((11l)) == (true));
    assert(isPrime((17l)) == (true));
    assert(isPrime((85l)) == (false));
    assert(isPrime((77l)) == (false));
    assert(isPrime((255379l)) == (false));
    }

}
"
HumanEval_33,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉၸွမ်း ၵႃႈၶၼ်ဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း ထႅဝ်လိၵ်ႈဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း l ၼၼ်ႉယူႇ၊ ၵူၺ်းၵႃႈ မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉၸွမ်းၵၼ်။    //l' ၼႆႉမိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇၸႅၵ်ႇလႆႈ သၢမ်တူဝ်ၼၼ်ႉသေ ၵႃႈၶၼ်မၼ်းတီႈတူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႇလႆႈ သၢမ်တူဝ်ၼၼ်ႉၵေႃႈ မိူၼ်ၵၼ်ယူႇယဝ်ႉ။    //ပိူင်ဢၼ်ၼႆႉ ဢဝ်သဵၼ်ႈမၢႆ l လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ l' ၼင်ႇၼႆ     // >>> sortThird((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))
    // >>> sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))
    // (List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))
    def sortThird(l : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  
  def sortThird(l: List[Long]): List[Long] = {
    // Get the elements at indices divisible by 3
    val elementsAtThirdIndices = l.zipWithIndex.collect {
      case (value, index) if index % 3 == 0 => value
    }
    
    // Sort the collected elements
    val sortedElements = elementsAtThirdIndices.sorted
    
    // Replace elements at indices divisible by 3 with the sorted ones
    l.zipWithIndex.map {
      case (_, index) if index % 3 == 0 => sortedElements(index / 3)
      case (value, _) => value
    }
  }

  // Example usage:
  def main(args: Array[String]): Unit = {
    println(sortThird(List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    println(sortThird(List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))
  }
}","    }
    def main(args: Array[String]) = {
    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))));
    assert(sortThird((List[Long](5l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 5l.toLong))));
    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 5l.toLong))));
    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong, 1l.toLong))));
    }

}
"
HumanEval_34,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် ၶူဝ်းၶွင်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉတီႈၼႂ်း သဵၼ်ႈမၢႆၼၼ်ႉ ၶိုၼ်းဢဝ်မႃး    // >>> unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))
    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))
    def unique(l : List[Long]) : List[Long] = {
","def unique(l: List[Long]): List[Long] = {
    l.toSet.toList.sorted
  }
}","    }
    def main(args: Array[String]) = {
    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));
    }

}
"
HumanEval_35,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသုတ်း ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉမႃး    // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (3l)
    // >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))
    // (123l)
    def maxElement(l : List[Long]) : Long = {
","def maxElement(l: List[Long]): Long = {
    l.max
  }
}","    }
    def main(args: Array[String]) = {
    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));
    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));
    }

}
"
HumanEval_36,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ 7 မႃးၶိုၼ်း ၼႂ်းတူဝ်ၼပ်ႉတဵမ် ဢၼ်လဵၵ်ႉလိူဝ် n ဢၼ်ၸႅၵ်ႇလႆႈ 11 ဢမ်ႇၼၼ် 13 ၼၼ်ႉ။    // >>> fizzBuzz((50l))
    // (0l)
    // >>> fizzBuzz((78l))
    // (2l)
    // >>> fizzBuzz((79l))
    // (3l)
    def fizzBuzz(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def fizzBuzz(n: Long): Long = {
    var count = 0L
    for (i <- 1L until n) {
      if (i % 11 == 0 || i % 13 == 0) {
        count += i.toString.count(_ == '7')
      }
    }
    count
  }
}","    }
    def main(args: Array[String]) = {
    assert(fizzBuzz((50l)) == (0l));
    assert(fizzBuzz((78l)) == (2l));
    assert(fizzBuzz((79l)) == (3l));
    assert(fizzBuzz((100l)) == (3l));
    assert(fizzBuzz((200l)) == (6l));
    assert(fizzBuzz((4000l)) == (192l));
    assert(fizzBuzz((10000l)) == (639l));
    assert(fizzBuzz((100000l)) == (8026l));
    }

}
"
HumanEval_37,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉပဵၼ် ထႅဝ်ဢၼ်ၼိူင်ႈ တေႃႇ ထႅဝ်ဢၼ်ၼိူင်ႈ ၶွင် တူဝ်ၼပ်ႉ l၊ ၵူၺ်းၵႃႈ မၼ်းတေလႆႈၸႅၵ်ႇဝႆႉ။    //l' ၼႆႉမိူၼ်ၵၼ်တၢင်း l တီႈၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ၊ ၵူၺ်းၵႃႈ ၵႃႈၶၼ်မၼ်းတီႈ တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉတႄႉ ပဵၼ်မိူၼ်ၵၼ်ယူႇယဝ်ႉ။    //ပိူင်ဢၼ်ၼႆႉ ဢဝ်သဵၼ်ႈမၢႆ l လႄႈ ၶိုၼ်းပၼ်သဵၼ်ႈမၢႆ l' ၼင်ႇၼႆ     // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))
    // >>> sortEven((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong)))
    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong, 4l.toLong))
    def sortEven(l : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // This function takes a list l and returns a list l' such that
  // l' is identical to l in the odd indicies, while its values at the even indicies are equal
  // to the values of the even indicies of l, but sorted.
  def sortEven(l: List[Long]): List[Long] = {
    val evenIndices = l.indices.filter(_ % 2 == 0)
    val sortedEvens = evenIndices.map(l(_)).sorted

    l.indices.map { index =>
      if (index % 2 == 0) sortedEvens(evenIndices.indexOf(index))
      else l(index)
    }.toList
  }

  // Examples
  def main(args: Array[String]): Unit = {
    println(sortEven(List[Long](1L, 2L, 3L)))
    println(sortEven(List[Long](5L, 6L, 3L, 4L)))
  }
}","    }
    def main(args: Array[String]) = {
    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));
    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong, 123l.toLong))));
    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));
    }

}
"
HumanEval_39,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //prime_fib ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉ n-th ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉ Fibonacci လႄႈ မၼ်းပဵၼ် prime ၵေႃႈလႆႈ    // >>> primeFib((1l))
    // (2l)
    // >>> primeFib((2l))
    // (3l)
    // >>> primeFib((3l))
    // (5l)
    // >>> primeFib((4l))
    // (13l)
    // >>> primeFib((5l))
    // (89l)
    def primeFib(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def primeFib(n: Long): Long = {
    // Function to check if a number is prime
    def isPrime(num: Long): Boolean = {
      if (num <= 1) return false
      if (num == 2) return true
      if (num % 2 == 0) return false
      for (i <- Range(3, math.sqrt(num).toInt + 1, 2)) {
        if (num % i == 0) return false
      }
      true
    }

    // Function to generate Fibonacci numbers
    def fibonacciStream(): Stream[Long] = {
      def fibs(a: Long, b: Long): Stream[Long] = a #:: fibs(b, a + b)
      fibs(0, 1)
    }

    // Find the n-th Fibonacci number that is also prime
    val primeFibs = fibonacciStream().filter(isPrime)
    primeFibs.take(n.toInt).last
  }

  // Test the function
  def main(args: Array[String]): Unit = {
    println(primeFib(1L)) // 2
    println(primeFib(2L)) // 3
    println(primeFib(3L)) // 5
    println(primeFib(4L)) // 13
    println(primeFib(5L)) // 89
  }
}","    }
    def main(args: Array[String]) = {
    assert(primeFib((1l)) == (2l));
    assert(primeFib((2l)) == (3l));
    assert(primeFib((3l)) == (5l));
    assert(primeFib((4l)) == (13l));
    assert(primeFib((5l)) == (89l));
    assert(primeFib((6l)) == (233l));
    assert(primeFib((7l)) == (1597l));
    assert(primeFib((8l)) == (28657l));
    assert(primeFib((9l)) == (514229l));
    assert(primeFib((10l)) == (433494437l));
    }

}
"
HumanEval_40,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //လွင်ႈႁူမ်ႈၵၼ်ပဵၼ်သုၼ် လႄႈ လွင်ႈၽိတ်းၽိတ်းတၢင်ႇၸိူဝ်း။    //မၼ်းတေၶိုၼ်းမိူဝ်း true သင်ၸိူဝ်ႉဝႃႈ မီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် သၢမ်တူဝ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်     //triple_sum_to_zero ၼႆႉ ဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပႃးဝႆႉၼႂ်း သဵၼ်ႈမၢႆၼၼ်ႉသေ ႁဵတ်းပဵၼ် ၶူဝ်းၶွင်ဢၼ်သႂ်ႇဝႆႉၼၼ်ႉယဝ်ႉ။    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))
    // (false)
    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))
    // (true)
    // >>> triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))
    // (false)
    // >>> triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))
    // (true)
    // >>> triplesSumToZero((List[Long](1l.toLong)))
    // (false)
    def triplesSumToZero(l : List[Long]) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // triples_sum_to_zero takes a list of integers as an input.
    // it returns true if there are three distinct elements in the list that
    // sum to zero, and false otherwise.
    def triplesSumToZero(l: List[Long]): Boolean = {
        val n = l.length
        if (n < 3) return false

        // Sort the list to use the two-pointer technique
        val sortedList = l.sorted

        // Iterate over the list
        for (i <- 0 until n - 2) {
            var left = i + 1
            var right = n - 1

            // Use two pointers to find the remaining two numbers
            while (left < right) {
                val currentSum = sortedList(i) + sortedList(left) + sortedList(right)
                if (currentSum == 0) {
                    return true
                } else if (currentSum < 0) {
                    left += 1
                } else {
                    right -= 1
                }
            }
        }

        false
    }
}","    }
    def main(args: Array[String]) = {
    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));
    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -1l.toLong))) == (false));
    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (true));
    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));
    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 7l.toLong))) == (false));
    assert(triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));
    assert(triplesSumToZero((List[Long](1l.toLong))) == (false));
    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));
    assert(triplesSumToZero((List[Long](100l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));
    }

}
"
HumanEval_41,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ မၼ်းဢွၵ်ႇမႃး တူဝ်ၼပ်ႉ လွင်ႈတုမ်ႉတိူဝ်ႉၸိူင်ႉၼၼ်။    //ၼႂ်းသဵၼ်ႈတၢင်းၶဝ် မိူၼ်ၼင်ႇဝႃႈ ၶဝ်ဢမ်ႇလႆႈတုမ်ႉတိူဝ်ႉၵၼ်။    //ၵူၺ်းၵႃႈ လူတ်ႉၵႃးၼႆႉ ႁႅင်းယႂ်ႇလႄႈ ႁႅင်းၶၢမ်ႇလီတႄႉတႄႉ၊ ယွၼ်ႉၼၼ်လႄႈ ၶဝ်တိုၵ်ႉၶၢႆႉယူႇတိၵ်းတိၵ်းယဝ်ႉ။    //မိူဝ်ႈလူတ်ႉၶိူင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉ ၽၢႆႇၶႂႃ မႃးၽႃႇၺႃးလူတ်ႉၶိူင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇသၢႆႉ ၽၢႆႇၶႂႃၼၼ်ႉယဝ်ႉ။    //ၵႃးၵူႈလမ်း ၶီႇတၢင်းဝႆးလဵဝ်ၵၼ် ၵႃးသွင်လမ်းၼႆႉ လၢတ်ႈဝႃႈ ၶီႇၵၼ်ၼႆယဝ်ႉ။    //ၵႃးသွင်လမ်းၼႆႉ တႄႇမႃးတီႈၵႆၵႆၵၼ်    //ၵႃး n လမ်းၼႆႉ ၶီႇၵႂႃႇၽၢႆႇသၢႆႉၸူးၽၢႆႇၶႂႃ၊ မိူဝ်ႈလဵဝ်ၵၼ် ၵႃး n လမ်းၵေႃႈ ၶီႇၵႂႃႇၸွမ်းၵၼ်။    //ဝူၼ်ႉဝႃႈ သဵၼ်ႈတၢင်းဢၼ်သိုဝ်ႈယူဝ်းၼၼ်ႉ ပဵၼ်သဵၼ်ႈတၢင်းဢၼ်ယၢဝ်းဢမ်ႇမီးတီႈသုတ်းၼႆ။    def carRaceCollision(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Imagine a road that's a perfectly straight infinitely long line.
  // n cars are driving left to right; simultaneously, a different set of n cars
  // are driving right to left. The two sets of cars start out being very far from
  // each other. All cars move at the same speed. Two cars are said to collide
  // when a car that's moving left to right hits a car that's moving right to left.
  // However, the cars are infinitely sturdy and strong; as a result, they continue moving
  // in their trajectory as if they did not collide.
  // This function outputs the number of such collisions.
  def carRaceCollision(n: Long): Long = {
    n
  }
}","    }
    def main(args: Array[String]) = {
    assert(carRaceCollision((2l)) == (4l));
    assert(carRaceCollision((3l)) == (9l));
    assert(carRaceCollision((4l)) == (16l));
    assert(carRaceCollision((8l)) == (64l));
    assert(carRaceCollision((10l)) == (100l));
    }

}
"
HumanEval_42,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //သဵၼ်ႈမၢႆ ဢၼ်လႆႈၶိုၼ်းမႃးၼၼ်ႉ မီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်တိူဝ်းလိူဝ်မႃးထႅင်ႈ 1.    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))
    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))
    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))
    def incrList(l : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // Return list with elements incremented by 1.
    def incrList(l: List[Long]): List[Long] = {
        l.map(_ + 1)
    }
}","    }
    def main(args: Array[String]) = {
    assert(incrList((List[Long]())).equals((List[Long]())));
    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));
    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong, 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))));
    }

}
"
HumanEval_43,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //လွင်ႈႁူမ်ႈၵၼ်ပဵၼ်သုၼ် လႄႈ လွင်ႈၽိတ်းၽိတ်းတၢင်ႇၸိူဝ်း။    //မၼ်းတေၶိုၼ်းမွၵ်ႇၵႂႃႇ true သင်ၸိူဝ်ႉဝႃႈ မီးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ပႅၵ်ႇပိူင်ႈၵၼ် သွင်ဢၼ် ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်     //pairs_sum_to_zero ဢဝ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ပဵၼ်ၶေႃႈၶဝ်ႈ။    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))
    // (false)
    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))
    // (false)
    // >>> pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))
    // (false)
    // >>> pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))
    // (true)
    // >>> pairsSumToZero((List[Long](1l.toLong)))
    // (false)
    def pairsSumToZero(l : List[Long]) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def pairsSumToZero(l: List[Long]): Boolean = {
        val seen = HashSet[Long]()
        for (num <- l) {
            if (seen.contains(-num)) {
                return true
            }
            seen.add(num)
        }
        false
    }
}","    }
    def main(args: Array[String]) = {
    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));
    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (false));
    assert(pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));
    assert(pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));
    assert(pairsSumToZero((List[Long](1l.toLong))) == (false));
    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 30l.toLong))) == (true));
    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));
    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));
    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));
    }

}
"
HumanEval_44,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ၼပ်ႉငဝ်ႈမၼ်းၼႆႉ ဢေႇလိူဝ်သေ 10 ၼၼ်ႉယဝ်ႉ။    //ၶိုၼ်းဢဝ် တူဝ်တႅၼ်း သဵၼ်ႈမၢႆ ဢၼ်လႆႈပိၼ်ႇပဵၼ်မႃး။    //လႅၵ်ႈလၢႆႈ တူဝ်ၼပ်ႉငဝ်ႈတႄႇ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈ x ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉငဝ်ႈတႄႇ။    // >>> changeBase((8l), (3l))
    // (""22"")
    // >>> changeBase((8l), (2l))
    // (""1000"")
    // >>> changeBase((7l), (2l))
    // (""111"")
    def changeBase(x : Long, base : Long) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def changeBase(x: Long, base: Long): String = {
        require(base > 1 && base < 10, ""Base must be between 2 and 9"")
        
        if (x == 0) return ""0""

        val result = new StringBuilder()
        var number = x

        while (number > 0) {
            val remainder = number % base
            result.append(remainder.toString)
            number /= base
        }

        result.reverse.toString()
    }
}","    }
    def main(args: Array[String]) = {
    assert(changeBase((8l), (3l)).equals((""22"")));
    assert(changeBase((9l), (3l)).equals((""100"")));
    assert(changeBase((234l), (2l)).equals((""11101010"")));
    assert(changeBase((16l), (2l)).equals((""10000"")));
    assert(changeBase((8l), (2l)).equals((""1000"")));
    assert(changeBase((7l), (2l)).equals((""111"")));
    assert(changeBase((2l), (3l)).equals((""2"")));
    assert(changeBase((3l), (4l)).equals((""3"")));
    assert(changeBase((4l), (5l)).equals((""4"")));
    assert(changeBase((5l), (6l)).equals((""5"")));
    assert(changeBase((6l), (7l)).equals((""6"")));
    assert(changeBase((7l), (8l)).equals((""7"")));
    }

}
"
HumanEval_45,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ပေႃးႁဝ်းတူၺ်းတၢင်းယၢဝ်းၽၢႆႇဢၼ်ၼိူင်ႈလႄႈ ၼႃႈလိၼ်ဢၼ်လႆႈၶိုၼ်းသုင်သုတ်း တွၼ်ႈတႃႇသၢမ်ၸဵင်ႇဢၼ်ၼိူင်ႈၼႆၸိုင်    // >>> triangleArea((5l), (3l))
    // (7.5f)
    def triangleArea(a : Long, h : Long) : Float = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // Given length of a side and height, return area for a triangle.
    // >>> triangleArea(5l, 3l)
    // (7.5f)
    def triangleArea(a: Long, h: Long): Float = {
        (a * h / 2.0).toFloat
    }
}","    }
    def main(args: Array[String]) = {
    assert(triangleArea((5l), (3l)) == (7.5f));
    assert(triangleArea((2l), (2l)) == (2.0f));
    assert(triangleArea((10l), (8l)) == (40.0f));
    }

}
"
HumanEval_46,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ဢိင် တႃႇတေၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fib4 ၼၼ်ႉ လူၺ်ႈမီးၼမ်ႉတွၼ်းလီ။ ယႃႇပေၸႂ်ႉတိုဝ်း လွင်ႈၶိုၼ်းတႄႇ။    //fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)    //fib4(3) -> 0     //fib4(2) -> 2     //fib4(1) -> 0     //fib4(0) -> 0     //လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ Fib4 ၼႆႉ ပဵၼ်လွင်ႈၶပ်ႉၸႅၼ်ႇ ဢၼ်ငၢႆးၵၼ်တၢင်း လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ Fibbonacci ဢၼ်မၵ်းမၼ်ႈဝႆႉၼင်ႇပႃႈတႂ်ႈၼႆႉ:    // >>> fib4((5l))
    // (4l)
    // >>> fib4((6l))
    // (8l)
    // >>> fib4((7l))
    // (14l)
    def fib4(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def fib4(n: Long): Long = {
    if (n == 0 || n == 1) return 0
    if (n == 2) return 2
    if (n == 3) return 0

    var a: Long = 0
    var b: Long = 0
    var c: Long = 2
    var d: Long = 0
    
    var result: Long = 0
    
    for (i <- 4L to n) {
      result = a + b + c + d
      a = b
      b = c
      c = d
      d = result
    }
    
    result
  }
}","    }
    def main(args: Array[String]) = {
    assert(fib4((5l)) == (4l));
    assert(fib4((8l)) == (28l));
    assert(fib4((10l)) == (104l));
    assert(fib4((12l)) == (386l));
    }

}
"
HumanEval_47,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် သၢႆၵၢၼ်မိၼ် ဢီႇလႅမ်ႇထိူဝ်ႇ တီႈၼႂ်းသဵၼ်ႈမၢႆ l ၼၼ်ႉမႃး။    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))
    // 3l
    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))
    // (15.0f)
    def median(l : List[Long]) : Float = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Return median of elements in the list l.
  def median(l: List[Long]): Float = {
    val sortedList = l.sorted
    val n = sortedList.length
    if (n % 2 == 1) {
      sortedList(n / 2).toFloat
    } else {
      (sortedList(n / 2 - 1) + sortedList(n / 2)).toFloat / 2
    }
  }

  def main(args: Array[String]): Unit = {
    println(median(List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) // 3.0
    println(median(List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) // 15.0
  }
}","    }
    def main(args: Array[String]) = {
    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);
    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));
    assert(median((List[Long](5l.toLong))) == 5l);
    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));
    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);
    }

}
"
HumanEval_48,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၸၢမ်းတူၺ်းဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် palindrome ႁိုဝ်ၼႆ    // >>> isPalindrome((""""))
    // (true)
    // >>> isPalindrome((""aba""))
    // (true)
    // >>> isPalindrome((""aaaaa""))
    // (true)
    // >>> isPalindrome((""zbcd""))
    // (false)
    def isPalindrome(text : String) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Checks if given string is a palindrome
  def isPalindrome(text: String): Boolean = {
    val length = text.length
    for (i <- 0 until length / 2) {
      if (text(i) != text(length - i - 1)) return false
    }
    true
  }
}","    }
    def main(args: Array[String]) = {
    assert(isPalindrome(("""")) == (true));
    assert(isPalindrome((""aba"")) == (true));
    assert(isPalindrome((""aaaaa"")) == (true));
    assert(isPalindrome((""zbcd"")) == (false));
    assert(isPalindrome((""xywyx"")) == (true));
    assert(isPalindrome((""xywyz"")) == (false));
    assert(isPalindrome((""xywzx"")) == (false));
    }

}
"
HumanEval_49,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် 2^n modulo p (ဝႆႉၸႂ်ၼိူဝ် တူဝ်ၼပ်ႉ)    // >>> modp((3l), (5l))
    // (3l)
    // >>> modp((1101l), (101l))
    // (2l)
    // >>> modp((0l), (101l))
    // (1l)
    // >>> modp((3l), (11l))
    // (8l)
    // >>> modp((100l), (101l))
    // (1l)
    def modp(n : Long, p : Long) : Long = {
","def modp(n: Long, p: Long): Long = {
    // Calculate 2^n modulo p using iterative exponentiation by squaring.
    def powMod(base: Long, exp: Long, mod: Long): Long = {
      var result = 1L
      var b = base % mod
      var e = exp
      
      while (e > 0) {
        if ((e & 1) == 1) { // Check if e is odd
          result = (result * b) % mod
        }
        e >>= 1
        b = (b * b) % mod
      }

      result
    }

    powMod(2, n, p)
  }
}","    }
    def main(args: Array[String]) = {
    assert(modp((3l), (5l)) == (3l));
    assert(modp((1101l), (101l)) == (2l));
    assert(modp((0l), (101l)) == (1l));
    assert(modp((3l), (11l)) == (8l));
    assert(modp((100l), (101l)) == (1l));
    assert(modp((30l), (5l)) == (4l));
    assert(modp((31l), (5l)) == (3l));
    }

}
"
HumanEval_51,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //remove_vowels ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ လႄႈ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ ဢၼ်ဢမ်ႇမီး တူဝ်လိၵ်ႈ သဵင်ဢွၵ်ႇ ၼၼ်ႉမႃး။    // >>> removeVowels((""""))
    // ("""")
    // >>> removeVowels((""abcdef""))
    // (""bcdf"")
    // >>> removeVowels((""aaaaa""))
    // ("""")
    // >>> removeVowels((""aaBAA""))
    // (""B"")
    // >>> removeVowels((""zbcd""))
    // (""zbcd"")
    def removeVowels(text : String) : String = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    def removeVowels(text: String): String = {
        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
        text.filterNot(vowels.contains)
    }
}","    }
    def main(args: Array[String]) = {
    assert(removeVowels(("""")).equals(("""")));
    assert(removeVowels((""abcdef\nghijklm"")).equals((""bcdf\nghjklm"")));
    assert(removeVowels((""fedcba"")).equals((""fdcb"")));
    assert(removeVowels((""eeeee"")).equals(("""")));
    assert(removeVowels((""acBAA"")).equals((""cB"")));
    assert(removeVowels((""EcBOO"")).equals((""cB"")));
    assert(removeVowels((""ybcd"")).equals((""ybcd"")));
    }

}
"
HumanEval_52,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်း ၼႂ်းသဵၼ်ႈမၢႆ l ၼႆႉ မီးယူႇၽၢႆႇတႂ်ႈ threshold t ၼၼ်ႉၼႆယဝ်ႉ။    // >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))
    // (true)
    // >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))
    // (false)
    def belowThreshold(l : List[Long], t : Long) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Return true if all numbers in the list l are below threshold t.
  // >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))
  // (true)
  // >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))
  // (false)
  def belowThreshold(l: List[Long], t: Long): Boolean = {
    l.forall(_ < t)
  }
}","    }
    def main(args: Array[String]) = {
    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));
    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));
    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));
    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));
    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));
    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));
    }

}
"
HumanEval_53,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ထႅမ်သႂ်ႇတူဝ်ၼပ်ႉသွင်တူဝ် x လႄႈ y    // >>> add((2l), (3l))
    // (5l)
    // >>> add((5l), (7l))
    // (12l)
    def add(x : Long, y : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    // Add two numbers x and y
    // >>> add((2l), (3l))
    // (5l)
    // >>> add((5l), (7l))
    // (12l)
    def add(x: Long, y: Long): Long = {
        x + y
    }
}","    }
    def main(args: Array[String]) = {
    assert(add((0l), (1l)) == (1l));
    assert(add((1l), (0l)) == (1l));
    assert(add((2l), (3l)) == (5l));
    assert(add((5l), (7l)) == (12l));
    assert(add((7l), (5l)) == (12l));
    }

}
"
HumanEval_54,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူၺ်းဝႃႈ ၶေႃႈၵႂၢမ်းသွင်ၶေႃႈၼႆႉ မီးတူဝ်လိၵ်ႈမိူၼ်ၵၼ်ႁႃႉၼႆလႄႈ။    // >>> sameChars((""eabcdzzzz""), (""dddzzzzzzzddeddabc""))
    // (true)
    // >>> sameChars((""abcd""), (""dddddddabc""))
    // (true)
    // >>> sameChars((""dddddddabc""), (""abcd""))
    // (true)
    // >>> sameChars((""eabcd""), (""dddddddabc""))
    // (false)
    // >>> sameChars((""abcd""), (""dddddddabce""))
    // (false)
    // >>> sameChars((""eabcdzzzz""), (""dddzzzzzzzddddabc""))
    // (false)
    def sameChars(s0 : String, s1 : String) : Boolean = {
","import scala.collection.mutable._

object Problem {
  def sameChars(s0: String, s1: String): Boolean = {
    def charSet(s: String): Set[Char] = s.toSet
    charSet(s0) == charSet(s1) && charSet(s0).forall(c => s0.count(_ == c) <= s1.count(_ == c) && s1.count(_ == c) <= s0.count(_ == c))
  }
}","    }
    def main(args: Array[String]) = {
    assert(sameChars((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(sameChars((""abcd""), (""dddddddabc"")) == (true));
    assert(sameChars((""dddddddabc""), (""abcd"")) == (true));
    assert(sameChars((""eabcd""), (""dddddddabc"")) == (false));
    assert(sameChars((""abcd""), (""dddddddabcf"")) == (false));
    assert(sameChars((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(sameChars((""aabb""), (""aaccc"")) == (false));
    }

}
"
HumanEval_55,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉ Fibonacci ဢၼ်ပဵၼ် ထီႉ n ၼၼ်ႉမႃး။    // >>> fib((10l))
    // (55l)
    // >>> fib((1l))
    // (1l)
    // >>> fib((8l))
    // (21l)
    def fib(n : Long) : Long = {
","def fib(n: Long): Long = {
        if (n <= 1) n
        else {
            var a: Long = 0
            var b: Long = 1
            for (_ <- 2L to n) {
                val temp = a + b
                a = b
                b = temp
            }
            b
        }
    }
}","    }
    def main(args: Array[String]) = {
    assert(fib((10l)) == (55l));
    assert(fib((1l)) == (1l));
    assert(fib((8l)) == (21l));
    assert(fib((11l)) == (89l));
    assert(fib((12l)) == (144l));
    }

}
"
HumanEval_56,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //return true သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉ မီးဝႆႉ သဵၼ်ႈမၢႆဢၼ်ဢိုတ်းဝႆႉဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    //brackets ၼႆႉပဵၼ် string ဢၼ်ပႃးဝႆႉ ""<"" လႄႈ "">"" ၼၼ်ႉယဝ်ႉ။    // >>> correctBracketing((""<""))
    // (false)
    // >>> correctBracketing((""<>""))
    // (true)
    // >>> correctBracketing((""<<><>>""))
    // (true)
    // >>> correctBracketing((""><<>""))
    // (false)
    def correctBracketing(brackets : String) : Boolean = {
","import scala.collection.mutable.Stack

object Problem {
  def correctBracketing(brackets: String): Boolean = {
    val stack = new Stack[Char]()
    for (char <- brackets) {
      if (char == '<') {
        stack.push(char)
      } else if (char == '>') {
        if (stack.isEmpty || stack.pop() != '<') {
          return false
        }
      }
    }
    stack.isEmpty
  }
}","    }
    def main(args: Array[String]) = {
    assert(correctBracketing((""<>"")) == (true));
    assert(correctBracketing((""<<><>>"")) == (true));
    assert(correctBracketing((""<><><<><>><>"")) == (true));
    assert(correctBracketing((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(correctBracketing((""<<<><>>>>"")) == (false));
    assert(correctBracketing((""><<>"")) == (false));
    assert(correctBracketing((""<"")) == (false));
    assert(correctBracketing((""<<<<"")) == (false));
    assert(correctBracketing(("">"")) == (false));
    assert(correctBracketing((""<<>"")) == (false));
    assert(correctBracketing((""<><><<><>><>><<>"")) == (false));
    assert(correctBracketing((""<><><<><>><>>><>"")) == (false));
    }

}
"
HumanEval_57,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //Return true is သဵၼ်ႈမၢႆ ဢၼ်တူဝ်ၼပ်ႉမၼ်း တိူဝ်းၶိုၼ်ႈမႃး ဢမ်ႇၼၼ် လူတ်းယွမ်းမႃး လူၺ်ႈဢမ်ႇမီးလွင်ႈမၵ်းမၼ်ႈ။    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))
    // (true)
    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))
    // (false)
    // >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))
    // (true)
    def monotonic(l : List[Long]) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Return true if list elements are monotonically increasing or decreasing.
  // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))
  // (true)
  // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))
  // (false)
  // >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))
  // (true)
  def monotonic(l: List[Long]): Boolean = {
    if (l.isEmpty || l.length == 1) return true

    val increasing = l.sliding(2).forall { case List(a, b) => a <= b }
    val decreasing = l.sliding(2).forall { case List(a, b) => a >= b }

    increasing || decreasing
  }
}","    }
    def main(args: Array[String]) = {
    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong))) == (true));
    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong))) == (true));
    assert(monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong))) == (false));
    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong))) == (true));
    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))) == (true));
    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));
    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));
    assert(monotonic((List[Long](9l.toLong, 9l.toLong, 9l.toLong, 9l.toLong))) == (true));
    }

}
"
HumanEval_58,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် လွင်ႈမၵ်းမၼ်ႈ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်လႆႈၸႅၵ်ႇဝႆႉ တွၼ်ႈတႃႇ သဵၼ်ႈမၢႆသွင်ဢၼ်ၼၼ်ႉ။    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))
    // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))
    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))
    // (List[Long](2l.toLong, 3l.toLong))
    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Return sorted unique common elements for two lists.
  def common(l1: List[Long], l2: List[Long]): List[Long] = {
    (l1.toSet intersect l2.toSet).toList.sorted
  }

  // Example usage
  def main(args: Array[String]): Unit = {
    println(common(List[Long](1L, 4L, 3L, 34L, 653L, 2L, 5L), List[Long](5L, 7L, 1L, 5L, 9L, 653L, 121L)))
    println(common(List[Long](5L, 3L, 2L, 8L), List[Long](3L, 2L)))
  }
}","    }
    def main(args: Array[String]) = {
    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 653l.toLong))));
    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong))));
    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong))));
    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));
    }

}
"
HumanEval_59,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ ၶွင်တူဝ်ၼပ်ႉ n ၼၼ်ႉၶိုၼ်း၊ ဝူၼ်ႉဝႃႈ n > 1 လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်ၼပ်ႉဢၼ်ယႂ်ႇသေပိူၼ်ႈ။     // >>> largestPrimeFactor((13195l))
    // (29l)
    // >>> largestPrimeFactor((2048l))
    // (2l)
    def largestPrimeFactor(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def largestPrimeFactor(n: Long): Long = {
        var number = n
        var largestFactor = 1L

        // Check for number of 2s that divide n
        while (number % 2 == 0) {
            largestFactor = 2L
            number /= 2
        }

        // n must be odd at this point, so a skip of 2 (i = i + 2) can be used
        var i = 3
        while (i <= sqrt(number)) {
            while (number % i == 0) {
                largestFactor = i
                number /= i
            }
            i += 2
        }

        // This condition is to check if number is a prime number greater than 2
        if (number > 2) {
            largestFactor = number
        }

        largestFactor
    }
}","    }
    def main(args: Array[String]) = {
    assert(largestPrimeFactor((15l)) == (5l));
    assert(largestPrimeFactor((27l)) == (3l));
    assert(largestPrimeFactor((63l)) == (7l));
    assert(largestPrimeFactor((330l)) == (11l));
    assert(largestPrimeFactor((13195l)) == (29l));
    }

}
"
HumanEval_60,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //sum_to_n ၼႆႉပဵၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉ 1 တေႃႇထိုင် n မႃးႁူမ်ႈၵၼ်ၼၼ်ႉယဝ်ႉ။    // >>> sumToN((30l))
    // (465l)
    // >>> sumToN((100l))
    // (5050l)
    // >>> sumToN((5l))
    // (15l)
    // >>> sumToN((10l))
    // (55l)
    // >>> sumToN((1l))
    // (1l)
    def sumToN(n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    def sumToN(n: Long): Long = {
        (1L to n).sum
    }
}","    }
    def main(args: Array[String]) = {
    assert(sumToN((1l)) == (1l));
    assert(sumToN((6l)) == (21l));
    assert(sumToN((11l)) == (66l));
    assert(sumToN((30l)) == (465l));
    assert(sumToN((100l)) == (5050l));
    }

}
"
HumanEval_61,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //return true သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပိုတ်ႇဝႆႉၼၼ်ႉ မီးဝႆႉ သဵၼ်ႈမၢႆဢၼ်ဢိုတ်းဝႆႉဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    //brackets ၼႆႉပဵၼ် string ဢၼ်ပႃးတူဝ် ""("" လႄႈ """") ၼၼ်ႉယဝ်ႉ။    // >>> correctBracketing((""(""))
    // (false)
    // >>> correctBracketing((""()""))
    // (true)
    // >>> correctBracketing((""(()())""))
    // (true)
    // >>> correctBracketing(("")(()""))
    // (false)
    def correctBracketing(brackets : String) : Boolean = {
","var balance = 0
        for (ch <- brackets) {
            if (ch == '(') balance += 1
            else if (ch == ')') balance -= 1
            
            if (balance < 0) return false
        }
        balance == 0
    }
}","    }
    def main(args: Array[String]) = {
    assert(correctBracketing((""()"")) == (true));
    assert(correctBracketing((""(()())"")) == (true));
    assert(correctBracketing((""()()(()())()"")) == (true));
    assert(correctBracketing((""()()((()()())())(()()(()))"")) == (true));
    assert(correctBracketing((""((()())))"")) == (false));
    assert(correctBracketing(("")(()"")) == (false));
    assert(correctBracketing((""("")) == (false));
    assert(correctBracketing((""(((("")) == (false));
    assert(correctBracketing(("")"")) == (false));
    assert(correctBracketing((""(()"")) == (false));
    assert(correctBracketing((""()()(()())())(()"")) == (false));
    assert(correctBracketing((""()()(()())()))()"")) == (false));
    }

}
"
HumanEval_62,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶိုၼ်းဢဝ် တူဝ်ဢိင် ဢၼ်လုၵ်ႉတီႈ polynomial ဢၼ်ၼႆႉမႃးၶိုၼ်း ၼႂ်းပိူင်ၾၢင်မိူၼ်ၵၼ်။    //xs[0] + xs[1] * x + xs[2] * x^2 + ....     //xs ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်းတင်း တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉၼမ်ထပ်ႈႁူဝ်ၼၼ်ႉယဝ်ႉ။    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))
    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))
    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (List[Long](2l.toLong, 6l.toLong))
    def derivative(xs : List[Long]) : List[Long] = {
","import scala.collection.mutable._

object Problem {
  def derivative(xs: List[Long]): List[Long] = {
    xs.zipWithIndex.tail.map { case (coeff, index) => coeff * index }
  }
}","    }
    def main(args: Array[String]) = {
    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));
    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));
    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));
    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));
    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));
    }

}
"
HumanEval_63,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ၶႅၼ်းတေႃႈ တႅမ်ႈပၼ် တူဝ်ဢိင် တႃႇတေၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ n-th ၶွင် တူဝ်ၼပ်ႉ fibfib ဢၼ်ၸွမ်းၵၼ်ဝႆႉၼၼ်ႉ။     //fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3)    //fib fib (((2) == 1     //fib fib ((1)) == 0     //fib fib ((0) == 0     //လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ FibFib ၼႆႉ မၼ်းမိူၼ်ၵၼ်တင်း လွင်ႈၶပ်ႉၸႅၼ်ႇတူဝ်ၼပ်ႉ Fibbonacci ဢၼ်မၵ်းမၼ်ႈဝႆႉၼင်ႇပႃႈတႂ်ႈၼႆႉ    // >>> fibfib((1l))
    // (0l)
    // >>> fibfib((5l))
    // (4l)
    // >>> fibfib((8l))
    // (24l)
    def fibfib(n : Long) : Long = {
","def fibfib(n: Long): Long = {
    if (n == 0) return 0
    if (n == 1) return 0
    if (n == 2) return 1

    var a: Long = 0
    var b: Long = 0
    var c: Long = 1
    var d: Long = 0

    for (_ <- 3L to n) {
      d = a + b + c
      a = b
      b = c
      c = d
    }
    d
  }
}","    }
    def main(args: Array[String]) = {
    assert(fibfib((2l)) == (1l));
    assert(fibfib((1l)) == (0l));
    assert(fibfib((5l)) == (4l));
    assert(fibfib((8l)) == (24l));
    assert(fibfib((10l)) == (81l));
    assert(fibfib((12l)) == (274l));
    assert(fibfib((14l)) == (927l));
    }

}
"
HumanEval_64,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //တူဝ်ၸဵင်၊ ၵူၺ်းၵႃႈ မၼ်းမီးတီႈသုတ်း ၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉၵူၺ်း။    //တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈ ၼႂ်းလွင်ႈၼႆႉပဵၼ် 'a', 'e', 'i', 'o', 'u' တီႈၼႆႈ 'y' ၵေႃႈပဵၼ် a     //ၶေႃႈၵႂၢမ်းဢၼ်ၶဝ်ႈမႃး လႄႈ မိူဝ်းၶိုၼ်း တူဝ်မႄႈလိၵ်ႈတူဝ်ထႅဝ် ၼႂ်းသဵၼ်ႈမၢႆတူဝ်ထႅဝ်။    //တႅမ်ႈပၼ် တူဝ်ဢိင် vowels_count ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်တႅၼ်းတၢင်     // >>> vowelsCount((""abcde""))
    // (2l)
    // >>> vowelsCount((""ACEDY""))
    // (3l)
    def vowelsCount(s : String) : Long = {
","def vowelsCount(s: String): Long = {
    val vowels = Set('a', 'e', 'i', 'o', 'u')
    val lowerCaseWord = s.toLowerCase
    var count = 0L

    for (i <- lowerCaseWord.indices) {
      if (vowels.contains(lowerCaseWord(i)) || (lowerCaseWord(i) == 'y' && i == lowerCaseWord.length - 1)) {
        count += 1
      }
    }

    count
  }
}","    }
    def main(args: Array[String]) = {
    assert(vowelsCount((""abcde"")) == (2l));
    assert(vowelsCount((""Alone"")) == (3l));
    assert(vowelsCount((""key"")) == (2l));
    assert(vowelsCount((""bye"")) == (1l));
    assert(vowelsCount((""keY"")) == (2l));
    assert(vowelsCount((""bYe"")) == (1l));
    assert(vowelsCount((""ACEDY"")) == (3l));
    }

}
"
HumanEval_65,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ပေႃး shift > တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်ၶိုၼ်းမႃးၼၼ်ႉ ၶိုၼ်းပိၼ်ႇဝၢႆႇတူဝ်ၼပ်ႉဢၼ်ၶိုၼ်းမႃးၼၼ်ႉ။    //လႄႈ ၶိုၼ်းဢဝ် ၶေႃႈတွပ်ႇမၼ်းပဵၼ် တူဝ်ထႅဝ်လိၵ်ႈ (string) ၼၼ်ႉယဝ်ႉ။    //လွၵ်းဝူင်းၼႆႉ ၶၢႆႉတူဝ်ၼပ်ႉ တူဝ်ၼပ်ႉတဵမ် x၊ ၶၢႆႉတူဝ်ၼပ်ႉၵႂႃႇၽၢႆႇၶႂႃ လူၺ်ႈလွင်ႈၶၢႆႉ။    // >>> circularShift((12l), (1l))
    // (""21"")
    // >>> circularShift((12l), (2l))
    // (""12"")
    def circularShift(x : Long, shift : Long) : String = {
","def circularShift(x: Long, shift: Long): String = {
  val digits = x.toString
  val length = digits.length
  
  if (shift >= length) {
    digits.reverse
  } else {
    val effectiveShift = (length - shift % length).toInt
    (digits.drop(effectiveShift) + digits.take(effectiveShift))
  }
}","    }
    def main(args: Array[String]) = {
    assert(circularShift((100l), (2l)).equals((""001"")));
    assert(circularShift((12l), (2l)).equals((""12"")));
    assert(circularShift((97l), (8l)).equals((""79"")));
    assert(circularShift((12l), (1l)).equals((""21"")));
    assert(circularShift((11l), (101l)).equals((""11"")));
    }

}
"
HumanEval_66,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //မၢႆမီႈ ASCII     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် string ပဵၼ်ၶေႃႈသႂ်ႇသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၽၢႆႇၼိူဝ်ၼၼ်ႉၵူၺ်း'     //ၵၢၼ်ငၢၼ်း     // >>> digitSum((""""))
    // (0l)
    // >>> digitSum((""abAB""))
    // (131l)
    // >>> digitSum((""abcCd""))
    // (67l)
    // >>> digitSum((""helloE""))
    // (69l)
    // >>> digitSum((""woArBld""))
    // (131l)
    // >>> digitSum((""aAaaaXa""))
    // (153l)
    def digitSum(s : String) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def digitSum(s: String): Long = {
    s.filter(_.isUpper).map(_.toLong).sum
  }
}","    }
    def main(args: Array[String]) = {
    assert(digitSum(("""")) == (0l));
    assert(digitSum((""abAB"")) == (131l));
    assert(digitSum((""abcCd"")) == (67l));
    assert(digitSum((""helloE"")) == (69l));
    assert(digitSum((""woArBld"")) == (131l));
    assert(digitSum((""aAaaaXa"")) == (153l));
    assert(digitSum(("" How are yOu?"")) == (151l));
    assert(digitSum((""You arE Very Smart"")) == (327l));
    }

}
"
HumanEval_67,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တွၼ်ႈတႃႇ examble:     //တီႈၼႂ်းၵၢတ်ႇၼၼ်ႉ ၶိုၼ်းပၼ် မၢၵ်ႇမႆႉ မၢၵ်ႇဢူမ် ဢၼ်မီးၼႂ်းၵၢတ်ႇၼၼ်ႉ။    //မၢၵ်ႇဢႅပ်ႇၵႅၼ်ႇ လႄႈ မၢၵ်ႇဢႅပ်ႇပႃႇ လႄႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တၢင်တူဝ် မၢၵ်ႇဢႅပ်ႇၵႅၼ်ႇ တင်းမူတ်း     //apples, oranges, and mango fruits. ပၼ် string ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉတင်းမူတ်း     //ဢၼ်လႆႈၸႅၵ်ႇၽႄဝႆႉၼႂ်း ၵၢတ်ႇၼမ်ႉ ဢၼ်ၵၢတ်ႇၼမ်ႉၼႆႉပႃးဝႆႉ     //ၼႂ်းၵၢၼ်ဢၼ်ၼႆႉ ၸဝ်ႈၵဝ်ႇတေလႆႈပၼ် သဵၼ်ႈမၢႆ ဢၼ်တႅၼ်းတၢင် တူဝ်ၼပ်ႉၽၵ်းၶဵဝ် လႄႈ မၢၵ်ႇဢိတ်ႇ။    // >>> fruitDistribution((""5 apples and 6 oranges""), (19l))
    // (8l)
    // >>> fruitDistribution((""0 apples and 1 oranges""), (3l))
    // (2l)
    // >>> fruitDistribution((""2 apples and 3 oranges""), (100l))
    // (95l)
    // >>> fruitDistribution((""100 apples and 1 oranges""), (120l))
    // (19l)
    def fruitDistribution(s : String, n : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def fruitDistribution(s: String, n: Long): Long = {
    val fruits = s.split("" and "").map(_.split("" "")(0).toLong)
    val totalApplesAndOranges = fruits.sum
    n - totalApplesAndOranges
  }
}","    }
    def main(args: Array[String]) = {
    assert(fruitDistribution((""5 apples and 6 oranges""), (19l)) == (8l));
    assert(fruitDistribution((""5 apples and 6 oranges""), (21l)) == (10l));
    assert(fruitDistribution((""0 apples and 1 oranges""), (3l)) == (2l));
    assert(fruitDistribution((""1 apples and 0 oranges""), (3l)) == (2l));
    assert(fruitDistribution((""2 apples and 3 oranges""), (100l)) == (95l));
    assert(fruitDistribution((""2 apples and 3 oranges""), (5l)) == (0l));
    assert(fruitDistribution((""1 apples and 100 oranges""), (120l)) == (19l));
    }

}
"
HumanEval_68,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ 1:    //သင်ဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ဢမ်ႇၼၼ် သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆ ၶိုၼ်းဢဝ် [] ၼၼ်ႉၶိုၼ်း။    //လွင်ႈဢၼ်လႆႈဢဝ်ဢွၵ်ႇၼၼ်ႉ ထုၵ်ႇလီၶိုၼ်းဢဝ်မႃးၼႂ်းသဵၼ်ႈမၢႆ၊ [smallest_value၊ its index]၊     //သင်ဝႃႈ လႆႈႁၼ် ၼေႃႇတႅၼ်းတင်းၼမ် ဢၼ်မီး ၵႃႈၶၼ်ဢၼ်လဵၵ်ႉသုတ်းဢၼ်မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းဢဝ် ၼေႃႇတႅၼ်း ဢၼ်မီး ထႅဝ်ဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉ လွၵ်ႈမႃးယဝ်ႉ။    //လွင်ႈဢၼ်လႆႈဢဝ်ဢွၵ်ႇၼၼ်ႉ ထုၵ်ႇလီပဵၼ် လွင်ႈဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်လဵၵ်ႉသုတ်းၼၼ်ႉယဝ်ႉ။    //ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေဢဝ် ၼူၵ်ႉဢၼ်ၼိူင်ႈသေ ၶိုၼ်းဢဝ်မၼ်းမႃးၶိုၼ်းၼၼ်ႉယဝ်ႉ။    //""ပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်တၢင်တူဝ် ၵိင်ႇၽႄ တူၼ်ႈမႆႉ ဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇပဵၼ် တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼၼ်ႉ။    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))
    // (List[Long](2l.toLong, 1l.toLong))
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.
    // Example 2:
    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (List[Long](2l.toLong, 1l.toLong))
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.
    // Example 3:
    // >>> pluck((List[Long]()))
    // (List[Long]())
    // Example 4:
    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))
    // (List[Long](0l.toLong, 1l.toLong))
    // Explanation: 0 is the smallest value, but  there are two zeros,
    // so we will choose the first zero, which has the smallest index.
    // Constraints:
    // * 1 <= nodes.length <= 10000
    // * 0 <= node.value
    def pluck(arr : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def pluck(arr: List[Long]): List[Long] = {
    val evenNodes = arr.zipWithIndex.filter { case (value, _) => value % 2 == 0 }
    if (evenNodes.isEmpty) {
      List.empty[Long]
    } else {
      val (smallestValue, index) = evenNodes.minBy { case (value, index) => (value, index) }
      List(smallestValue, index.toLong)
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));
    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));
    assert(pluck((List[Long]())).equals((List[Long]())));
    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));
    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong, 3l.toLong))));
    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong, 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));
    assert(pluck((List[Long](7l.toLong, 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));
    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));
    }

}
"
HumanEval_69,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ပေႃးဢမ်ႇမီးၵႃႈၶၼ်ဢၼ်ၼႆႉၼႆ ၶိုၼ်းဢဝ် - 1    //လွင်ႈၵႆႉပဵၼ်ၶွင် တူဝ်ၼပ်ႉတဵမ်ၼႆႉ ပဵၼ်တၢင်းၼမ်မၼ်း ဢၼ်လႆႈႁၼ်ၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉယဝ်ႉ။    //သုၼ် လႄႈ မီးလွင်ႈၵႆႉၼမ်လိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်းၵႃႈၶၼ် တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉႁင်းမၼ်းယဝ်ႉ။    //ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ် ဢၼ်ယႂ်ႇသေ     // >>> search((List[Long](4l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))
    // (2l)
    // >>> search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))
    // (3l)
    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))
    // (-1l)
    def search(lst : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def search(lst: List[Long]): Long = {
    val frequencyMap = lst.groupBy(identity).mapValues(_.size)
    lst.filter(num => frequencyMap(num) >= num).sorted(Ordering[Long].reverse) match {
      case x :: _ => x
      case Nil => -1L
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(search((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));
    assert(search((List[Long](4l.toLong, 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));
    assert(search((List[Long](3l.toLong, 3l.toLong))) == (-1l));
    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));
    assert(search((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));
    assert(search((List[Long](2l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong, 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));
    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) == (2l));
    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (1l));
    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong, 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));
    assert(search((List[Long](6l.toLong, 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))) == (1l));
    assert(search((List[Long](1l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));
    assert(search((List[Long](6l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong, 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (5l));
    assert(search((List[Long](1l.toLong))) == (1l));
    assert(search((List[Long](8l.toLong, 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong, 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 5l.toLong))) == (4l));
    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong))) == (2l));
    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong, 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong, 3l.toLong))) == (1l));
    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));
    assert(search((List[Long](2l.toLong, 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong))) == (4l));
    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (2l));
    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong, 10l.toLong, 8l.toLong))) == (-1l));
    assert(search((List[Long](10l.toLong))) == (-1l));
    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 7l.toLong, 2l.toLong))) == (2l));
    assert(search((List[Long](5l.toLong, 4l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 8l.toLong))) == (1l));
    assert(search((List[Long](7l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));
    assert(search((List[Long](3l.toLong, 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));
    }

}
"
HumanEval_70,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ယဝ်ႉၵေႃႈ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵိုတ်းဝႆႉၼၼ်ႉ ၼမ်သုတ်း၊ ယဝ်ႉၵေႃႈ တီႈဢေႇသုတ်း လႄႈ တၢင်ႇၸိူဝ်း။    //လွင်ႈၸႅၵ်ႇၽႄဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆႉ ပဵၼ်မိူဝ်ႈဢၼ်ႁဝ်းတႄႇဢဝ် ၵႃႈၶၼ်ဢၼ်ဢေႇသုတ်းၼၼ်ႉ၊    //ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ယဝ်ႉၼႆ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းမႃးပၼ်။    // >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))
    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))
    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))
    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))
    // >>> strangeSortList((List[Long]()))
    // (List[Long]())
    def strangeSortList(lst : List[Long]) : List[Long] = {
","def strangeSortList(lst: List[Long]): List[Long] = {
    val buffer = lst.sorted.toBuffer
    val result = ArrayBuffer[Long]()
    var takeMin = true

    while (buffer.nonEmpty) {
      if (takeMin) {
        result += buffer.remove(0) // take the minimum
      } else {
        result += buffer.remove(buffer.length - 1) // take the maximum of the remaining
      }
      takeMin = !takeMin
    }

    result.toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));
    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));
    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));
    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));
    assert(strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));
    assert(strangeSortList((List[Long]())).equals((List[Long]())));
    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));
    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));
    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));
    }

}
"
HumanEval_71,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //လိူဝ်သေၽၢႆႇသၢမ်ၽၢႆႇ။    //သၢမ်ၽၢႆႇၼႆႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မၢၼ်ႇမႅၼ်ႈ မိူဝ်ႈဢၼ် သွင်ၽၢႆႇဢၼ်လႂ်ၼၼ်ႉ ႁူမ်ႈၵၼ်ၼမ်လိူဝ်ၼၼ်ႉယဝ်ႉ။    //ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် -1     //သၢမ်ၸဵင်ႇၼႆႉ ပေႃးဝႃႈ သၢမ်ၽၢႆႇမၼ်း ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မၢၼ်ႇမႅၼ်ႈၼႆ မၼ်းတေလႆႈဢဝ် သွင်ၸဵင်ႇသေ ၵုမ်ႈဝႆႉယဝ်ႉ။    //ပေႃးႁဝ်းတူၺ်းတၢင်းယၢဝ်းသၢမ်ၽၢႆႇၶွင် သၢမ်ၸဵင်ႇၼႆ ၶိုၼ်းဢဝ် ၼႃႈလိၼ်ၶွင်    // >>> triangleArea((3l), (4l), (5l))
    // (6.0f)
    // >>> triangleArea((1l), (2l), (10l))
    // -1l
    def triangleArea(a : Long, b : Long, c : Long) : Float = {
","import scala.math._

object Problem {
  def triangleArea(a: Long, b: Long, c: Long): Float = {
    if (a + b > c && a + c > b && b + c > a) {
      val s = (a + b + c) / 2.0
      val area = sqrt(s * (s - a) * (s - b) * (s - c))
      BigDecimal(area).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat
    } else {
      -1f
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(triangleArea((3l), (4l), (5l)) == (6.0f));
    assert(triangleArea((1l), (2l), (10l)) == -1l);
    assert(triangleArea((4l), (8l), (5l)) == (8.18f));
    assert(triangleArea((2l), (2l), (2l)) == (1.73f));
    assert(triangleArea((1l), (2l), (3l)) == -1l);
    assert(triangleArea((10l), (5l), (7l)) == (16.25f));
    assert(triangleArea((2l), (6l), (3l)) == -1l);
    assert(triangleArea((1l), (1l), (1l)) == (0.43f));
    assert(triangleArea((2l), (2l), (10l)) == -1l);
    }

}
"
HumanEval_72,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //ၶူဝ်းၶွင် q ၼႆႉ ပေႃးမၼ်းၽဵင်ႇပဵင်း (မၼ်းပဵၼ် palindromic list) လႄႈ တူဝ်ၼပ်ႉၶွင်မၼ်းၼၼ်ႉ ပေႃးဢေႇလိူဝ် ဢမ်ႇၼၼ် ပေႃးၽဵင်ႇပဵင်းၵၼ်တၢင်း တၢင်းၼၵ်းဢၼ်တိူဝ်းသုတ်းဢၼ်ပဵၼ်လႆႈ w ၼႆ မၼ်းတေပၢႆႈၵႂႃႇယူႇယဝ်ႉ။    //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်တေၶိုၼ်းပၼ် true သင်ၸိူဝ်ႉဝႃႈ ၶူဝ်းၶွင် q တေပၢႆႈၵႂႃႇလႄႈ false သင်ဢမ်ႇၼၼ်။    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))
    // (false)
    // # 1+2 is less than the maximum possible weight, but it's unbalanced.
    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))
    // (false)
    // # it's balanced, but 3+2+3 is more than the maximum possible weight.
    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))
    // (true)
    // # 3+2+3 is less than the maximum possible weight, and it's balanced.
    // >>> willItFly((List[Long](3l.toLong)), (5l))
    // (true)
    // # 3 is less than the maximum possible weight, and it's balanced.
    def willItFly(q : List[Long], w : Long) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def willItFly(q: List[Long], w: Long): Boolean = {
    val isPalindromic = q == q.reverse
    val sumOfElements = q.sum
    isPalindromic && sumOfElements <= w
  }

  def main(args: Array[String]): Unit = {
    println(willItFly(List[Long](1L, 2L), 5L)) // false
    println(willItFly(List[Long](3L, 2L, 3L), 1L)) // false
    println(willItFly(List[Long](3L, 2L, 3L), 9L)) // true
    println(willItFly(List[Long](3L), 5L)) // true
  }
}","    }
    def main(args: Array[String]) = {
    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));
    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));
    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));
    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));
    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));
    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));
    }

}
"
HumanEval_73,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ပေႃးဝႃႈႁဝ်းလႅၵ်ႈလၢႆႈယဝ်ႉၼႆ ႁဝ်းတေလႅၵ်ႈလၢႆႈလႆႈ ၶူဝ်းၶွင်ဢၼ်ၼိုင်ႈသေ ၶူဝ်းၶွင်တၢင်ႇဢၼ်။    //ပေႃးၶႂ်ႈႁႂ်ႈပဵၼ် palindromic list ၼႆ တေလႆႈလႅၵ်ႈလၢႆႈပၼ်။    //ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် arr ၼႆၸိုင် ၶူၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်း ဢၼ်တေလႆႈပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ။    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))
    // (4l)
    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))
    // (1l)
    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)))
    // (0l)
    def smallestChange(arr : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Given a list arr of integers, find the minimum number of elements that
  // need to be changed to make the list palindromic.

  def smallestChange(arr: List[Long]): Long = {
    var changes: Long = 0

    for (i <- 0 until arr.length / 2) {
      if (arr(i) != arr(arr.length - 1 - i)) {
        changes += 1
      }
    }

    changes
  }

  // Example usage
  def main(args: Array[String]): Unit = {
    println(smallestChange(List(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))  // Output: 4
    println(smallestChange(List(1L, 2L, 3L, 4L, 3L, 2L, 2L)))  // Output: 1
    println(smallestChange(List(1L, 2L, 3L, 2L, 1L)))  // Output: 0
  }
}","    }
    def main(args: Array[String]) = {
    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong))) == (4l));
    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));
    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 2l.toLong))) == (1l));
    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));
    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));
    assert(smallestChange((List[Long](3l.toLong, 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));
    assert(smallestChange((List[Long](1l.toLong))) == (0l));
    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));
    }

}
"
HumanEval_74,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //သင်ဝႃႈ သဵၼ်ႈမၢႆသွင်ဢၼ်ၼၼ်ႉ မီးတူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၼႆၸိုင် ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၼိူင်ႈၼၼ်ႉ လၢႆႈပၼ်ၶိုၼ်း။    //တူဝ်ၼပ်ႉဢၼ်မီးတီႈၼႂ်း သဵၼ်ႈမၢႆ ဢၼ်ၼိူင်ႈၼၼ်ႉ မၼ်းဢေႇလိူဝ်သေ တူဝ်ၼပ်ႉဢၼ်မီးတီႈ သဵၼ်ႈမၢႆတၢင်ႇဢၼ်ၼၼ်ႉယဝ်ႉ။    //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉသဵၼ်ႈ သွင်ဢၼ်သေ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆဢၼ်မီး တူဝ်ၼပ်ႉသဵၼ်ႈ  ၼၼ်ႉ    // >>> totalMatch((List[String]()), (List[String]()))
    // (List[String]())
    // >>> totalMatch((List[String](""hi"", ""admin"")), (List[String](""hI"", ""Hi"")))
    // (List[String](""hI"", ""Hi""))
    // >>> totalMatch((List[String](""hi"", ""admin"")), (List[String](""hi"", ""hi"", ""admin"", ""project"")))
    // (List[String](""hi"", ""admin""))
    // >>> totalMatch((List[String](""hi"", ""admin"")), (List[String](""hI"", ""hi"", ""hi"")))
    // (List[String](""hI"", ""hi"", ""hi""))
    // >>> totalMatch((List[String](""4"")), (List[String](""1"", ""2"", ""3"", ""4"", ""5"")))
    // (List[String](""4""))
    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def totalMatch(lst1: List[String], lst2: List[String]): List[String] = {
    val sum1 = lst1.map(_.length).sum
    val sum2 = lst2.map(_.length).sum
    if (sum1 <= sum2) lst1 else lst2
  }
}","    }
    def main(args: Array[String]) = {
    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));
    assert(totalMatch((List[String](""hi"", ""admin"")), (List[String](""hi"", ""hi""))).equals((List[String](""hi"", ""hi""))));
    assert(totalMatch((List[String](""hi"", ""admin"")), (List[String](""hi"", ""hi"", ""admin"", ""project""))).equals((List[String](""hi"", ""admin""))));
    assert(totalMatch((List[String](""4"")), (List[String](""1"", ""2"", ""3"", ""4"", ""5""))).equals((List[String](""4""))));
    assert(totalMatch((List[String](""hi"", ""admin"")), (List[String](""hI"", ""Hi""))).equals((List[String](""hI"", ""Hi""))));
    assert(totalMatch((List[String](""hi"", ""admin"")), (List[String](""hI"", ""hi"", ""hi""))).equals((List[String](""hI"", ""hi"", ""hi""))));
    assert(totalMatch((List[String](""hi"", ""admin"")), (List[String](""hI"", ""hi"", ""hii""))).equals((List[String](""hi"", ""admin""))));
    assert(totalMatch((List[String]()), (List[String](""this""))).equals((List[String]())));
    assert(totalMatch((List[String](""this"")), (List[String]())).equals((List[String]())));
    }

}
"
HumanEval_75,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //ပေႃးႁဝ်းႁူႉဝႃႈ (a) ၼႆႉဢေႇလိူဝ် 100 ၼႆၸိုင်    //ဢမ်ႇမၢၼ်ႇမႅၼ်ႈၵေႃႈလႆႈ။    //တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်မၵ်းမၼ်ႈဝႃႈ ပဵၼ်လွင်ႈမၢၼ်ႇမႅၼ်ႈယူႇၼႆ သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၵုၼ်း တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ 3 တူဝ်ၼႆၸိုင်    // >>> isMultiplyPrime((30l))
    // (true)
    // 30 = 2 * 3 * 5
    def isMultiplyPrime(a : Long) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def isMultiplyPrime(a: Long): Boolean = {
    def isPrime(num: Long): Boolean = {
      if (num <= 1) return false
      if (num <= 3) return true
      if (num % 2 == 0 || num % 3 == 0) return false
      var i = 5
      while (i * i <= num) {
        if (num % i == 0 || num % (i + 2) == 0) return false
        i += 6
      }
      true
    }

    val primes = (2L to 100L).filter(isPrime)
    val primeList = primes.toList

    for {
      i <- primeList.indices
      j <- i until primeList.size
      k <- j until primeList.size
      if primeList(i) * primeList(j) * primeList(k) == a
    } return true

    false
  }
}","    }
    def main(args: Array[String]) = {
    assert(isMultiplyPrime((5l)) == (false));
    assert(isMultiplyPrime((30l)) == (true));
    assert(isMultiplyPrime((8l)) == (true));
    assert(isMultiplyPrime((10l)) == (false));
    assert(isMultiplyPrime((125l)) == (true));
    assert(isMultiplyPrime((105l)) == (true));
    assert(isMultiplyPrime((126l)) == (false));
    assert(isMultiplyPrime((729l)) == (false));
    assert(isMultiplyPrime((891l)) == (false));
    assert(isMultiplyPrime((1001l)) == (true));
    }

}
"
HumanEval_76,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //x ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၶိုၵ်ႉတွၼ်းၶွင် n သင်ၸိူဝ်ႉဝႃႈ n**int=x ၼႆယူႇယဝ်ႉ။    //လွင်ႈမၵ်းမၼ်ႈ n လႄႈ false ၼႂ်းလွင်ႈတၢင်ႇၸိူဝ်း။    //ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတႅမ်ႈ function ဢၼ်ၶိုၼ်းမႃး true သင်တူဝ်ၼပ်ႉ x ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ငၢႆႈ    // >>> isSimplePower((1l), (4l))
    // (true)
    // >>> isSimplePower((2l), (2l))
    // (true)
    // >>> isSimplePower((8l), (2l))
    // (true)
    // >>> isSimplePower((3l), (2l))
    // (false)
    // >>> isSimplePower((3l), (1l))
    // (false)
    // >>> isSimplePower((5l), (3l))
    // (false)
    def isSimplePower(x : Long, n : Long) : Boolean = {
","def isSimplePower(x: Long, n: Long): Boolean = {
        if (n == 1) {
            return x == 1
        }
        
        var value: Long = n
        while (value <= x) {
            if (value == x) {
                return true
            }
            
            if (value > Long.MaxValue / n) {
                return false
            }
            value *= n
        }
        
        false
    }
}","    }
    def main(args: Array[String]) = {
    assert(isSimplePower((16l), (2l)) == (true));
    assert(isSimplePower((143214l), (16l)) == (false));
    assert(isSimplePower((4l), (2l)) == (true));
    assert(isSimplePower((9l), (3l)) == (true));
    assert(isSimplePower((16l), (4l)) == (true));
    assert(isSimplePower((24l), (2l)) == (false));
    assert(isSimplePower((128l), (4l)) == (false));
    assert(isSimplePower((12l), (6l)) == (false));
    assert(isSimplePower((1l), (1l)) == (true));
    assert(isSimplePower((1l), (12l)) == (true));
    }

}
"
HumanEval_77,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ ၶေႃႈလႆႈၸႂ်ၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ။    //ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်ဢၼ်ၼိူင်ႈ ဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉယဝ်ႉ။    //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် a သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တႄႉ    // >>> iscube((1l))
    // (true)
    // >>> iscube((2l))
    // (false)
    // >>> iscube((-1l))
    // (true)
    // >>> iscube((64l))
    // (true)
    // >>> iscube((0l))
    // (true)
    // >>> iscube((180l))
    // (false)
    def iscube(a : Long) : Boolean = {
","def iscube(a: Long): Boolean = {
  val cubeRoot = math.cbrt(a.toDouble).round
  cubeRoot * cubeRoot * cubeRoot == a
}","    }
    def main(args: Array[String]) = {
    assert(iscube((1l)) == (true));
    assert(iscube((2l)) == (false));
    assert(iscube((-1l)) == (true));
    assert(iscube((64l)) == (true));
    assert(iscube((180l)) == (false));
    assert(iscube((1000l)) == (true));
    assert(iscube((0l)) == (true));
    assert(iscube((1729l)) == (false));
    }

}
"
HumanEval_78,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //တူဝ်လိၵ်ႈ A,B,C,D,E,F ၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈယႂ်ႇသေပိူၼ်ႈယဝ်ႉ။    //မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၢၼ်ႇမႅၼ်ႈယူႇတႃႇသေႇ ဢမ်ႇၼၼ် ပဵၼ် string ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉယူႇ၊    //B (= သဵၼ်ႈမၢႆသိပ်းလပ်း 11), D (= သဵၼ်ႈမၢႆသိပ်းလပ်း 13)     //ၵွပ်ႈၼၼ်လႄႈ တေလႆႈလိူၵ်ႈ တူဝ်ၼပ်ႉဢၼ်မီးတီႈတႂ်ႈၼႆႉ 2, 3, 5, 7,     //တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉၼႆႉပဵၼ် 2, 3, 5, 7, 11, 13, 17,...    //တူဝ်ၼပ်ႉသႅၼ်တူဝ်ၼႆႉပဵၼ် 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.    //ဢၼ်ယႂ်ႇလိူဝ် 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉသၽႃႇဝ ဢၼ်လဵၵ်ႉလိူဝ်သွင်တူဝ်) ။    //တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸဝ်ႉ (တူဝ်ၼပ်ႉဢၼ်ၸဝ်ႉ ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်ၸဝ်ႉၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉသၽႃႇဝ     //တူဝ်ၼပ်ႉ hexadecimal ဢၼ်ၼိူင်ႈ ဢၼ်မိူၼ်ၼင်ႇ သဵၼ်ႈသၢႆမၢႆ လႄႈ မၢႆၼပ်ႉ တူဝ်ၼပ်ႉ hexadecimal     //ၸဝ်ႈၵဝ်ႇထုၵ်ႇလႆႈတႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်ႁပ်ႉဝႆႉ    // >>> hexKey((""AB""))
    // (1l)
    // >>> hexKey((""1077E""))
    // (2l)
    // >>> hexKey((""ABED1A33""))
    // (4l)
    // >>> hexKey((""123456789ABCDEF0""))
    // (6l)
    // >>> hexKey((""2020""))
    // (2l)
    def hexKey(num : String) : Long = {
","def hexKey(num: String): Long = {
  val primeHexDigits = Set('2', '3', '5', '7', 'B', 'D')
  num.count(ch => primeHexDigits.contains(ch)).toLong
}","    }
    def main(args: Array[String]) = {
    assert(hexKey((""AB"")) == (1l));
    assert(hexKey((""1077E"")) == (2l));
    assert(hexKey((""ABED1A33"")) == (4l));
    assert(hexKey((""2020"")) == (2l));
    assert(hexKey((""123456789ABCDEF0"")) == (6l));
    assert(hexKey((""112233445566778899AABBCCDDEEFF00"")) == (12l));
    }

}
"
HumanEval_79,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //တူဝ်လိၵ်ႈဢၼ်လိူဝ်ၼႆႉ ပဵၼ်တႃႇတေၸွႆႈထႅမ် ပိူင်ၾၢင်မၼ်းၼၼ်ႉယဝ်ႉ။    //တေမီးတူဝ်လိၵ်ႈထႅင်ႈသွင်တူဝ် 'db' တီႈတႄႇလႄႈ တီႈသုတ်းၶွင် string ၼၼ်ႉ။    //တူဝ်လိၵ်ႈၵူႈတူဝ် ၼႂ်းသတၢႆႇၼႆႉ တေပဵၼ် ""0"" ဢမ်ႇၼၼ် ""1""    //တူဝ်လိၵ်ႈဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈ သွင်တူဝ် ဢၼ်ၼိူင်ႈဢၼ်ယဝ်ႉ။    //တေပၼ်တူဝ်ၼပ်ႉ တီႈတူဝ်ၼပ်ႉႁူဝ်သိပ်းသေ ၼႃႈၵၢၼ်သူတေလႆႈ လႅၵ်ႈလၢႆႈပဵၼ်     // >>> decimalToBinary((15l))
    // (""db1111db"")
    // >>> decimalToBinary((32l))
    // (""db100000db"")
    def decimalToBinary(decimal : Long) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def decimalToBinary(decimal: Long): String = {
    ""db"" + decimal.toBinaryString + ""db""
  }
}","    }
    def main(args: Array[String]) = {
    assert(decimalToBinary((0l)).equals((""db0db"")));
    assert(decimalToBinary((32l)).equals((""db100000db"")));
    assert(decimalToBinary((103l)).equals((""db1100111db"")));
    assert(decimalToBinary((15l)).equals((""db1111db"")));
    }

}
"
HumanEval_80,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //သဵၼ်ႈသၢႆမၼ်းပဵၼ် hapscala သင်ဝႃႈ တၢင်းယၢဝ်းမၼ်းဢမ်ႇယွမ်း 3 လႄႈ သၢမ်တူဝ်လိၵ်ႈဢၼ်သိုပ်ႇၵၼ်ၼၼ်ႉ မီးလွင်ႈပႅၵ်ႇပိူင်ႈၵၼ်ယူႇၼႆယဝ်ႉ။    //ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇထတ်းတူၺ်းဝႃႈ သဵၼ်ႈၼၼ်ႉ ပဵၼ် hapscala ႁိုဝ် ဢမ်ႇၸႂ်ႈၼၼ်ႉယဝ်ႉ။    //သူတေလႆႈပၼ် string s.    // >>> isHappy((""a""))
    // (false)
    // >>> isHappy((""aa""))
    // (false)
    // >>> isHappy((""abcd""))
    // (true)
    // >>> isHappy((""aabb""))
    // (false)
    // >>> isHappy((""adb""))
    // (true)
    // >>> isHappy((""xyy""))
    // (false)
    def isHappy(s : String) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def isHappy(s: String): Boolean = {
    if (s.length < 3) return false 

    for (i <- 0 until s.length - 2) {
      if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {
        return false
      }
    }
    true
  }
}","    }
    def main(args: Array[String]) = {
    assert(isHappy((""a"")) == (false));
    assert(isHappy((""aa"")) == (false));
    assert(isHappy((""abcd"")) == (true));
    assert(isHappy((""aabb"")) == (false));
    assert(isHappy((""adb"")) == (true));
    assert(isHappy((""xyy"")) == (false));
    assert(isHappy((""iopaxpoi"")) == (true));
    assert(isHappy((""iopaxioi"")) == (false));
    }

}
"
HumanEval_81,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //0.0 E     //> 0.0 D-     //> 0.7 D ႉ    //> 1.0 D+     //> 1.3 C- ႉ    //> 1.7 C     //> 2.0 C+     //> 2.3 B-     //> 2.7 B     //> 3.0 B+     //> 3.3 A- ႉ    //> 3.7 A     //4.0 A+     //GPA ၊ သရၽူႇလိၵ်ႈ     //မၼ်းပဵၼ် function ဢၼ်တေဢွၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်လိၵ်ႈ ဢၼ်ၸႂ်ႉတိုဝ်း ထႅဝ်လိၵ်ႈဢၼ်ၼႆႉ:     //မၼ်းၼၢင်းပၼ်သဵၼ်ႈမၢႆ GPA လုၵ်ႈႁဵၼ်းမၢင်ၵေႃႉလႄႈ သူတေလႆႈတႅမ်ႈလိၵ်ႈ။    //ပၼ်ႁႃဢၼ်လဵဝ်ၵူၺ်းတႄႉ မၼ်းၼၢင်းလႆႈႁၢႆလပ်ႉဝႆႉ မၢႆလပ်ႉဢၼ်မၼ်းၼၢင်းၸႂ်ႉတိုဝ်းတွၼ်ႈတႃႇ မၵ်းမၼ်ႈၼၼ်ႉယဝ်ႉ။    //ၶူးသွၼ်ၶဝ် လႆႈႁဵတ်းဢွၵ်ႇမႃး လွၵ်းလၢႆးမၼ်း တႃႇတေပၼ်လႆႈ မၢႆလပ်ႉမၼ်းယဝ်ႉ။    //ပဵၼ်ဝူင်ႈလိုၼ်းသုတ်း ၼႂ်းသႅပ်ႇထႅမ်ႇပႃႇလႄႈ ၶူးသွၼ်ၶဝ်တေလႆႈပၼ် မၢႆလပ်ႉၶဝ်ယဝ်ႉ။    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))
    // (List[String](""A+"", ""B"", ""C-"", ""C"", ""A-""))
    def numericalLetterGrade(grades : List[Float]) : List[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def numericalLetterGrade(grades: List[Float]): List[String] = {
    grades.map { gpa =>
      gpa match {
        case g if g == 4.0 => ""A+""
        case g if g > 3.7 => ""A""
        case g if g > 3.3 => ""A-""
        case g if g > 3.0 => ""B+""
        case g if g > 2.7 => ""B""
        case g if g > 2.3 => ""B-""
        case g if g > 2.0 => ""C+""
        case g if g > 1.7 => ""C""
        case g if g > 1.3 => ""C-""
        case g if g > 1.0 => ""D+""
        case g if g > 0.7 => ""D""
        case g if g > 0.0 => ""D-""
        case _ => ""E""
      }
    }
  }

  def main(args: Array[String]): Unit = {
    val grades = List[Float](4.0f, 3.0f, 1.7f, 2.0f, 3.5f)
    println(numericalLetterGrade(grades)) // Output: List(A+, B, C-, C, A-)
  }
}","    }
    def main(args: Array[String]) = {
    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](""A+"", ""B"", ""C-"", ""C"", ""A-""))));
    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](""D+""))));
    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](""D-""))));
    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](""E""))));
    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](""D"", ""D-"", ""C-"", ""B"", ""B+""))));
    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](""E"", ""D-""))));
    }

}
"
HumanEval_82,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //length ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ဢမ်ႇၼၼ် false ပေႃးဢမ်ႇၼၼ်     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တႄႉ သင်ဝႃႈ တူဝ်ၼပ်ႉသဵၼ်ႈၼၼ်ႉ ပဵၼ်     // >>> primeLength((""Hello""))
    // (true)
    // >>> primeLength((""abcdcba""))
    // (true)
    // >>> primeLength((""kittens""))
    // (true)
    // >>> primeLength((""orange""))
    // (false)
    def primeLength(string : String) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def primeLength(string: String): Boolean = {
    val length = string.length

    if (length <= 1) return false
    
    for (i <- 2 to sqrt(length).toInt) {
      if (length % i == 0) return false
    }
    true
  }
}","    }
    def main(args: Array[String]) = {
    assert(primeLength((""Hello"")) == (true));
    assert(primeLength((""abcdcba"")) == (true));
    assert(primeLength((""kittens"")) == (true));
    assert(primeLength((""orange"")) == (false));
    assert(primeLength((""wow"")) == (true));
    assert(primeLength((""world"")) == (true));
    assert(primeLength((""MadaM"")) == (true));
    assert(primeLength((""Wow"")) == (true));
    assert(primeLength(("""")) == (false));
    assert(primeLength((""HI"")) == (true));
    assert(primeLength((""go"")) == (true));
    assert(primeLength((""gogo"")) == (false));
    assert(primeLength((""aaaaaaaaaaaaaaa"")) == (false));
    assert(primeLength((""Madam"")) == (true));
    assert(primeLength((""M"")) == (false));
    assert(primeLength((""0"")) == (false));
    }

}
"
HumanEval_83,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးတူဝ်ထွၼ် ဢၼ်တႄႇ ဢမ်ႇၼၼ် သုတ်းတီႈ 1 ၼၼ်ႉ။    //ပေႃးဝႃႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းၼပ်ႉဢၢၼ်ႇ တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉ n ၼၼ်ႉၶိုၼ်း    def startsOneEnds(n : Long) : Long = {
","def startsOneEnds(n: Long): Long = {
        if (n <= 0) return 0
        
        // Calculate numbers starting with 1: 1XX...X (n-1) digits after 1
        val startWithOne: Long = math.pow(10, n - 1).toLong
        
        // Calculate numbers ending with 1: XX...X1 (n-1) digits before 1
        // but without leading zeroes allowed, i.e., the first digit can't be zero
        val endWithOne: Long = math.pow(10, n - 1).toLong
        
        // Reverse counting: numbers starting and ending with 1 (11XX...X)
        val bothStartAndEndWithOne: Long = if (n > 1) math.pow(10, n - 2).toLong else 0
        
        // The total numbers starting or ending, or both, with 1
        startWithOne + endWithOne - bothStartAndEndWithOne
    }
}","    }
    def main(args: Array[String]) = {
    assert(startsOneEnds((1l)) == (1l));
    assert(startsOneEnds((2l)) == (18l));
    assert(startsOneEnds((3l)) == (180l));
    assert(startsOneEnds((4l)) == (1800l));
    assert(startsOneEnds((5l)) == (18000l));
    }

}
"
HumanEval_84,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //ပေႃးဝႃႈလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ N ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသွင်တူဝ်ၼၼ်ႉ ၶိုၼ်းမႃးပၼ်ယဝ်ႉ။    // >>> solve((1000l))
    // (""1"")
    // >>> solve((150l))
    // (""110"")
    // >>> solve((147l))
    // (""1100"")
    // Variables:
    // @N integer
    // Constraints: 0 ≤ N ≤ 10000.
    // Output:
    // a string of binary number
    def solve(N : Long) : String = {
","import scala.math._
import scala.collection.mutable._
object Problem {
    // Given a positive integer N, return the total sum of its digits in binary.
    def solve(N: Long): String = {
        val sumOfDigits = N.toString.map(_.asDigit).sum
        sumOfDigits.toBinaryString
    }

    def main(args: Array[String]): Unit = {
        println(solve(1000L))  // should print ""1""
        println(solve(150L))   // should print ""110""
        println(solve(147L))   // should print ""1100""
    }
}","    }
    def main(args: Array[String]) = {
    assert(solve((1000l)).equals((""1"")));
    assert(solve((150l)).equals((""110"")));
    assert(solve((147l)).equals((""1100"")));
    assert(solve((333l)).equals((""1001"")));
    assert(solve((963l)).equals((""10010"")));
    }

}
"
HumanEval_85,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇသုမ်းၼၼ်ႉၼႆ ဢွၼ်တၢင်းသုတ်း ထႅမ်သႂ်ႇ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ဢၼ်မီးတီႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ။    // >>> add((List[Long](4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong)))
    // (2l)
    def add(lst : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Given a non-empty list of integers lst. add the even elements that are at odd indices.
  def add(lst: List[Long]): Long = {
    lst.zipWithIndex.collect {
      case (value, index) if index % 2 == 1 && value % 2 == 0 => value
    }.sum
  }
}","    }
    def main(args: Array[String]) = {
    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));
    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));
    assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));
    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));
    }

}
"
HumanEval_86,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //မၢႆတွင်း: သူတေလႆႈထိင်းသိမ်းဝႆႉ လွင်ႈၶပ်ႉၶိုင်ၶွင် ၶေႃႈၵႂၢမ်းလႄႈ လွင်ႈဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ တီႈၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉယူႇယဝ်ႉ။    //လွင်ႈၶၢႆႉယိူင်းၶိုၼ်ႈမႃးၸွမ်း ၵႃႈၶၼ် ascii။    //လႆႈထုၵ်ႇတႅၼ်းတၢင် လူၺ်ႈၶေႃႈၵႂၢမ်းမႂ်ႇ တီႈတူဝ်လိၵ်ႈတင်းမူတ်း လႆႈထုၵ်ႇၶပ်ႉဝႆႉ ၼႂ်း     //Ordered version of string, ၼႆႉပဵၼ် string ဢၼ်ၶေႃႈၵႂၢမ်းတင်းမူတ်း (ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈ)     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်မီးဝႆႉပိူင်ထၢၼ်ႈမၼ်းၼၼ်ႉ။    // >>> antiShuffle((""Hi""))
    // (""Hi"")
    // >>> antiShuffle((""hello""))
    // (""ehllo"")
    // >>> antiShuffle((""Hello World!!!""))
    // (""Hello !!!Wdlor"")
    def antiShuffle(s : String) : String = {
","import scala.collection.mutable.ArrayBuffer

object Problem {
  def antiShuffle(s: String): String = {
    val words = s.split(""(?<=\\s)"")
    val sortedWords = words.map(word => {
      val trimmedWord = word.trim
      val sortedChars = trimmedWord.sorted
      word.replace(trimmedWord, sortedChars)
    })
    sortedWords.mkString("""")
  }

  def main(args: Array[String]): Unit = {
    println(antiShuffle(""Hi""))
    println(antiShuffle(""hello""))
    println(antiShuffle(""Hello World!!!""))
  }
}","    }
    def main(args: Array[String]) = {
    assert(antiShuffle((""Hi"")).equals((""Hi"")));
    assert(antiShuffle((""hello"")).equals((""ehllo"")));
    assert(antiShuffle((""number"")).equals((""bemnru"")));
    assert(antiShuffle((""abcd"")).equals((""abcd"")));
    assert(antiShuffle((""Hello World!!!"")).equals((""Hello !!!Wdlor"")));
    assert(antiShuffle(("""")).equals(("""")));
    assert(antiShuffle((""Hi. My name is Mister Robot. How are you?"")).equals(("".Hi My aemn is Meirst .Rboot How aer ?ouy"")));
    }

}
"
HumanEval_87,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ယဝ်ႉၵေႃႈ ၸႅၵ်ႇမႅင်ႇ coordinates ၶွင် row ၸွမ်း column ၸွမ်းၼင်ႇ ၶၵ်ႉတွၼ်ႈဢၼ်ယွမ်းလူင်းမႃးၼၼ်ႉယဝ်ႉ။    //ၸႅၵ်ႇမႅင်ႇ coordinates ၸွမ်းၼင်ႇ ထႅဝ်ဢၼ်တႄႇမႃးၼၼ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်ပဵၼ်တူဝ်ၸႅၵ်ႇဢၼ်ၼိူင်ႈၼႆႉ ပဵၼ် coordinate (ထႅဝ်၊ ၵူဝ်ႇလမ်ႇ) ဢၼ်တႄႇတီႈ 0 ၼၼ်ႉယဝ်ႉ။    //လႄႈ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ် ထႅဝ်ဢၼ်ၼိူင်ႈ၊ [(x1, y1), (x2, y2) ...] ၼင်ႇႁိုဝ်     //ပေႃးႁဝ်းပၼ် lst လႄႈ တူဝ်ၼပ်ႉတဵမ် x ၼႆၸိုင် ႁႃတူဝ်ၼပ်ႉတဵမ် x တီႈၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ၊     //ထႅဝ်ဢၼ်ၼိူင်ႈၼႆႉ ၸၢင်ႈမီးဝႆႉ ၵွၼ်ႈထႅဝ် ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    //ဢၼ်မိူၼ်ၵၼ်တင်း matrix ၵူၺ်းဢမ်ႇမိူၼ်ၵၼ်တင်း matrix၊    //ပေႃးႁဝ်းပၼ်ၶေႃႈမုၼ်း 2D ၼႆ မၼ်းတေပဵၼ်မႃး သဵၼ်ႈမၢႆဢၼ်မီးလွင်ႈၸုၵ်းၵၼ်ဝႆႉ၊    // >>> getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))
    // (List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))
    // >>> getRow((List[List[Long]]()), (1l))
    // (List[Tuple2[Long, Long]]())
    // >>> getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))
    // (List[Tuple2[Long, Long]]((2l, 2l)))
    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def getRow(lst: List[List[Long]], x: Long): List[(Long, Long)] = {
    val coordinates = for {
      (row, rowIndex) <- lst.zipWithIndex
      (value, colIndex) <- row.zipWithIndex
      if value == x
    } yield (rowIndex.toLong, colIndex.toLong)

    coordinates
      .groupBy(_._1)
      .toList
      .sortBy(_._1)
      .flatMap { case (rowIndex, coords) =>
        coords.sortBy(-_._2)
      }
  }
}","    }
    def main(args: Array[String]) = {
    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));
    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));
    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l, 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));
    assert(getRow((List[List[Long]]()), (1l)).equals((List[Tuple2[Long, Long]]())));
    assert(getRow((List[List[Long]](List[Long](1l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]())));
    assert(getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long, Long]]((2l, 2l)))));
    }

}
"
HumanEval_88,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //* ယႃႇပေမူၼ်ႉမႄး သဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ။    //မၢႆတွင်း:    //ဢမ်ႇၼၼ် ၸႅၵ်ႇမၼ်းၸွမ်းၼင်ႇ လွင်ႈၶၢႆႉယၢႆႈမၼ်း သင်ဝႃႈ တူဝ်လေႃး ((ၵႃႈၶၼ် index ဢွၼ်တၢင်းသုတ်း၊ ၵႃႈၶၼ် index လိုၼ်းသုတ်း) ၼႆႉပဵၼ် even ယဝ်ႉ။    //ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉ (ၵႃႈၶၼ် index ဢွၼ်တၢင်းသုတ်း၊ ၵႃႈၶၼ် index လိုၼ်းသုတ်း) ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆၸိုင် တေၸႅၵ်ႇပၼ်သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ၸွမ်းၼင်ႇဢၼ်ၶိုၼ်ႈမႃးၼၼ်ႉယူႇ၊    //ပေႃးဝႃႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼႆ၊ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼၼ်ႉသေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း ဝၢႆးသေ ၸႅၵ်ႇၽႄဝႆႉယဝ်ႉၼႆ၊    // >>> sortArray((List[Long]()))
    // (List[Long]())
    // >>> sortArray((List[Long](5l.toLong)))
    // (List[Long](5l.toLong))
    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong)))
    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))
    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))
    // (List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))
    def sortArray(array : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def sortArray(array: List[Long]): List[Long] = {
    if (array.isEmpty) {
      array
    } else {
      val first = array.head
      val last = array.last
      val sum = first + last
      if (sum % 2 == 0) {
        array.sorted(Ordering[Long].reverse)
      } else {
        array.sorted
      }
    }
  }

  def main(args: Array[String]): Unit = {
    println(sortArray(List[Long]())) // (List[Long]())
    println(sortArray(List[Long](5L))) // (List[Long](5L))
    println(sortArray(List[Long](2L, 4L, 3L, 0L, 1L, 5L))) // (List[Long](0L, 1L, 2L, 3L, 4L, 5L))
    println(sortArray(List[Long](2L, 4L, 3L, 0L, 1L, 5L, 6L))) // (List[Long](6L, 5L, 4L, 3L, 2L, 1L, 0L))
  }
}","    }
    def main(args: Array[String]) = {
    assert(sortArray((List[Long]())).equals((List[Long]())));
    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));
    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));
    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));
    assert(sortArray((List[Long](2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));
    assert(sortArray((List[Long](15l.toLong, 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));
    assert(sortArray((List[Long](21l.toLong, 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong, 14l.toLong, 11l.toLong))));
    }

}
"
HumanEval_89,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ၶၢႆႉလူင်းၵႂႃႇ 2 ဢၼ် ပေႃႉသႂ်ႇတီႈ 2 တီႈ    //တူဝ်လိၵ်ႈၼႆႉ ထုၵ်ႇလီလႅၵ်ႈလၢႆႈ ႁႂ်ႈပဵၼ် တူဝ်လိၵ်ႈ     //ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈဢၼ်မီးဝႆႉတီႈ တူဝ်လိၵ်ႈၸီႉၼၼ်ႉသေ သွၵ်ႈႁႃၶိုၼ်း    //ႁဵတ်းပၼ် encrypt ဢၼ်ဢဝ် string ပဵၼ် arguments လႄႈ     // >>> encrypt((""hi""))
    // (""lm"")
    // >>> encrypt((""asdfghjkl""))
    // (""ewhjklnop"")
    // >>> encrypt((""gf""))
    // (""kj"")
    // >>> encrypt((""et""))
    // (""ix"")
    def encrypt(s : String) : String = {
","def encrypt(s: String): String = {
  s.map(c => {
    val rotatedChar = (c - 'a' + 4) % 26 + 'a'
    rotatedChar.toChar
  })
}","    }
    def main(args: Array[String]) = {
    assert(encrypt((""hi"")).equals((""lm"")));
    assert(encrypt((""asdfghjkl"")).equals((""ewhjklnop"")));
    assert(encrypt((""gf"")).equals((""kj"")));
    assert(encrypt((""et"")).equals((""ix"")));
    assert(encrypt((""faewfawefaewg"")).equals((""jeiajeaijeiak"")));
    assert(encrypt((""hellomyfriend"")).equals((""lippsqcjvmirh"")));
    assert(encrypt((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")).equals((""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"")));
    assert(encrypt((""a"")).equals((""e"")));
    }

}
"
HumanEval_90,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //Return None သင်ၸိူဝ်ႉဝႃႈ ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ၼၼ်ႉၼႆၸိုင်။    //တႅမ်ႈပၼ် တူဝ်ဢိင်ဢၼ်လဵၵ်ႉသုတ်းဢၼ်ၼိူင်ႈ (next_smallest) ဢၼ်တေၶိုၼ်းပၼ် တူဝ်ဢိင်ဢၼ်လဵၵ်ႉသုတ်းထူၼ်ႈသွင် ၶွင်သဵၼ်ႈမၢႆၼၼ်ႉ။     //သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်။    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))
    // Some(2l)
    // >>> nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))
    // Some(2l)
    // >>> nextSmallest((List[Long]()))
    // None
    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))
    // None
    def nextSmallest(lst : List[Long]) : Option[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def nextSmallest(lst: List[Long]): Option[Long] = {
    if (lst.size < 2) return None

    val distinctSorted = lst.distinct.sorted
    if (distinctSorted.size < 2) None
    else Some(distinctSorted(1))
  }
}","    }
    def main(args: Array[String]) = {
    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(Some(2l)));
    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(Some(2l)));
    assert(nextSmallest((List[Long]())).equals(None));
    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));
    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(1l)));
    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));
    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(Some(-35l)));
    }

}
"
HumanEval_91,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ၶေႃႈၵႂၢမ်းဢၼ်တေလႆႈဢဝ် "" "" ၊ "" "" ဢမ်ႇၼၼ်လွင်ႈဢၼ်ယၢပ်ႇၸႂ်ၼႆႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်တႄႇဢဝ် ""ၵဝ်"" ၼၼ်ႉယဝ်ႉ    //သူတေလႆႈပၼ်ၶေႃႈၵႂၢမ်းတင်းၼမ် လႄႈ ၼႃႈၵၢၼ်သူတေလႆႈၼပ်ႉဢၢၼ်ႇ တူဝ်ၼပ်ႉမၼ်း    // >>> isBored((""Hello world""))
    // (0l)
    // >>> isBored((""The sky is blue. The sun is shining. I love this weather""))
    // (1l)
    def isBored(S : String) : Long = {
","def isBored(S: String): Long = {
    // Split the input string into sentences using '.', '?' or '!' as delimiters
    val sentences = S.split(""[.!?]"").map(_.trim)

    // Filter sentences that start with 'I' and count them
    sentences.count(sentence => sentence.startsWith(""I""))
  }
}","    }
    def main(args: Array[String]) = {
    assert(isBored((""Hello world"")) == (0l));
    assert(isBored((""Is the sky blue?"")) == (0l));
    assert(isBored((""I love It !"")) == (1l));
    assert(isBored((""bIt"")) == (0l));
    assert(isBored((""I feel good today. I will be productive. will kill It"")) == (2l));
    assert(isBored((""You and I are going for a walk"")) == (0l));
    }

}
"
HumanEval_92,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //မၢႆမီႈတၢင်ႇဢၼ်ၵေႃႈ မၢႆမီႈ false ၼႆႉတေၶိုၼ်းပၼ်ယဝ်ႉ။    //ၶိုၼ်းပၼ် true သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ ပဵၼ်ၼင်ႇ တူဝ်ၼပ်ႉသွင်ဢၼ်ၼၼ်ႉ ႁူမ်ႈၵၼ်သေ တူဝ်ၼပ်ႉတင်းမူတ်းပဵၼ် တူဝ်ၼပ်ႉတဵမ်ၼႆယဝ်ႉ။    //ႁဵတ်းပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉ 3 တူဝ်    // >>> anyInt(5l, 2l, 7l)
    // (true)
    // >>> anyInt(3l, 2l, 2l)
    // (false)
    // >>> anyInt(3l, -2l, 1l)
    // (true)
    // >>> anyInt((3.6f), (-2.2f), 2l)
    // (false)
    def anyInt(x : Float, y : Float, z : Float) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  // Create a function that takes 3 numbers.
  // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
  // Returns false in any other cases.
  def anyInt(x: Float, y: Float, z: Float): Boolean = {
    val xLong = x.toLong
    val yLong = y.toLong
    val zLong = z.toLong

    // Check if all inputs are actually integers
    if (xLong == x && yLong == y && zLong == z) {
      return xLong + yLong == zLong || xLong + zLong == yLong || yLong + zLong == xLong
    }
    false
  }
}","    }
    def main(args: Array[String]) = {
    assert(anyInt(2l, 3l, 1l) == (true));
    assert(anyInt((2.5f), 2l, 3l) == (false));
    assert(anyInt((1.5f), 5l, (3.5f)) == (false));
    assert(anyInt(2l, 6l, 2l) == (false));
    assert(anyInt(4l, 2l, 2l) == (true));
    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));
    assert(anyInt(-4l, 6l, 2l) == (true));
    assert(anyInt(2l, 1l, 1l) == (true));
    assert(anyInt(3l, 4l, 7l) == (true));
    assert(anyInt((3.0f), 4l, 7l) == (false));
    }

}
"
HumanEval_93,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ဢဝ်တူဝ်လိၵ်ႈၵူၺ်း။    //တူဝ်မႄႈလိၵ်ႈဢၼ်ပဵၼ် တူဝ်ၸဵင် ၼႂ်းတူဝ်လိၵ်ႈဢင်းၵိတ်း။    //ၶေႃႈၵႂၢမ်းဢၼ်ပႃးတူဝ်လိၵ်ႈ ဢၼ်ဢွၵ်ႇမႃးတီႈၼႃႈ 2 တီႈၼၼ်ႉ    //မၼ်းလႅၵ်ႈလၢႆႈ တူဝ်လိၵ်ႈၵူႈတူဝ်၊ သႂ်ႇတူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈၵူႈတူဝ် ၼႂ်း     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၶေႃႈၶၢဝ်ႇသေ သႂ်ႇသႂ်ႇၼႂ်း တူဝ်ၼပ်ႉ     // >>> encode((""test""))
    // (""TGST"")
    // >>> encode((""This is a message""))
    // (""tHKS KS C MGSSCGG"")
    def encode(message : String) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def encode(message: String): String = {
    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
    val vowelMap = Map(
      'a' -> 'c', 'e' -> 'g', 'i' -> 'k', 'o' -> 'q', 'u' -> 'w',
      'A' -> 'C', 'E' -> 'G', 'I' -> 'K', 'O' -> 'Q', 'U' -> 'W'
    )
    
    message.map { char =>
      if (vowels.contains(char)) {
        vowelMap(char)
      } else if (char.isLetter) {
        if (char.isLower) char.toUpper else char.toLower
      } else {
        char
      }
    }.mkString
  }

  // Test cases
  def main(args: Array[String]): Unit = {
    println(encode(""test""))            // should print ""TGST""
    println(encode(""This is a message"")) // should print ""tHKS KS C MGSSCGG""
  }
}","    }
    def main(args: Array[String]) = {
    assert(encode((""TEST"")).equals((""tgst"")));
    assert(encode((""Mudasir"")).equals((""mWDCSKR"")));
    assert(encode((""YES"")).equals((""ygs"")));
    assert(encode((""This is a message"")).equals((""tHKS KS C MGSSCGG"")));
    assert(encode((""I DoNt KnOw WhAt tO WrItE"")).equals((""k dQnT kNqW wHcT Tq wRkTg"")));
    }

}
"
HumanEval_94,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //တေလႆႈႁႃ တူဝ်ၼပ်ႉ prime ဢၼ်ယႂ်ႇသေပိူၼ်ႈသေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉမၼ်းၼၼ်ႉၶိုၼ်းယဝ်ႉ။    //သူတေလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်။    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))
    // (10l)
    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))
    // (25l)
    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))
    // (13l)
    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))
    // (11l)
    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))
    // (3l)
    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))
    // (7l)
    def skjkasdkd(lst : List[Long]) : Long = {
","def skjkasdkd(lst: List[Long]): Long = {
  def isPrime(n: Long): Boolean = {
    if (n <= 1) false
    else if (n == 2) true
    else if (n % 2 == 0) false
    else !(3L to math.sqrt(n).toLong by 2).exists(n % _ == 0)
  }

  def sumOfDigits(n: Long): Long = n.toString.map(_.asDigit).sum

  val largestPrime = lst.filter(isPrime).sorted.lastOption.getOrElse(0L)
  sumOfDigits(largestPrime)
}","    }
    def main(args: Array[String]) = {
    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));
    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));
    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));
    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));
    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));
    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));
    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));
    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));
    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));
    }

}
"
HumanEval_95,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် false ပေႃးဝႃႈ map ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီး။    //ပေႃးဢမ်ႇၼၼ် တူဝ်လိၵ်ႈဢၼ်ပႃးတူဝ်ယႂ်ႇၼၼ်ႉ ပဵၼ်တူဝ်ၸႅၼ်ႇတူဝ်လိၵ်ႈ ဢမ်ႇၼၼ် တူဝ်ၸႅၼ်ႇတူဝ်လိၵ်ႈတင်းမူတ်းၼၼ်ႉ ပဵၼ်တူဝ်ၸႅၼ်ႇတူဝ်လိၵ်ႈ ဢၼ်ပႃးတူဝ်ယႂ်ႇ၊ ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းဢဝ် false မႃးၶိုၼ်း။    //ပေႃးဝႃႈႁဝ်းပၼ်ၽႅၼ်ႇလိၼ်ၼႆ ပေႃးဝႃႈၶီးတၢင်းမူတ်းပဵၼ် string တီႈတႂ်ႈၼႆႉၼႆ မၼ်းတေၶိုၼ်းပဵၼ် true    // >>> checkDictCase((Map[String,String](""a"" -> ""apple"", ""b"" -> ""banana"")))
    // (true)
    // >>> checkDictCase((Map[String,String](""a"" -> ""apple"", ""A"" -> ""banana"", ""B"" -> ""banana"")))
    // (false)
    // >>> checkDictCase((Map[String,String](""a"" -> ""apple"", 8l -> ""banana"", ""a"" -> ""apple"")))
    // (false)
    // >>> checkDictCase((Map[String,String](""Name"" -> ""John"", ""Age"" -> ""36"", ""City"" -> ""Houston"")))
    // (false)
    // >>> checkDictCase((Map[String,String](""STATE"" -> ""NC"", ""ZIP"" -> ""12345"")))
    // (true)
    def checkDictCase(dict : Map[String,String]) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def checkDictCase(dict: Map[String, String]): Boolean = {
    if (dict.isEmpty) return false

    val keys = dict.keys.toList
    val allLowerCase = keys.forall(key => key == key.toLowerCase)
    val allUpperCase = keys.forall(key => key == key.toUpperCase)

    allLowerCase || allUpperCase
  }
}","    }
    def main(args: Array[String]) = {
    assert(checkDictCase((Map[String,String](""p"" -> ""pineapple"", ""b"" -> ""banana""))) == (true));
    assert(checkDictCase((Map[String,String](""p"" -> ""pineapple"", ""A"" -> ""banana"", ""B"" -> ""banana""))) == (false));
    assert(checkDictCase((Map[String,String](""p"" -> ""pineapple"", ""5"" -> ""banana"", ""a"" -> ""apple""))) == (false));
    assert(checkDictCase((Map[String,String](""Name"" -> ""John"", ""Age"" -> ""36"", ""City"" -> ""Houston""))) == (false));
    assert(checkDictCase((Map[String,String](""STATE"" -> ""NC"", ""ZIP"" -> ""12345""))) == (true));
    assert(checkDictCase((Map[String,String](""fruit"" -> ""Orange"", ""taste"" -> ""Sweet""))) == (true));
    assert(checkDictCase((Map[String,String]())) == (false));
    }

}
"
HumanEval_96,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅတ်ႈၸၢင်ႇ လႄႈ ဢေႇလိူဝ် n ၼၼ်ႉယဝ်ႉ။    //ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းသေ မိူဝ်းၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉ n ဢၼ်ဢွၼ်တၢင်းသုတ်း    // >>> countUpTo((5l))
    // (List[Long](2l.toLong, 3l.toLong))
    // >>> countUpTo((11l))
    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))
    // >>> countUpTo((0l))
    // (List[Long]())
    // >>> countUpTo((20l))
    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))
    // >>> countUpTo((1l))
    // (List[Long]())
    // >>> countUpTo((18l))
    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))
    def countUpTo(n : Long) : List[Long] = {
","def countUpTo(n: Long): List[Long] = {
    def isPrime(num: Long): Boolean = {
      if (num < 2) return false
      for (i <- 2L to math.sqrt(num).toLong) {
        if (num % i == 0) return false
      }
      true
    }

    (2L until n).filter(isPrime).map(_.toLong).toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));
    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));
    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));
    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));
    assert(countUpTo((0l)).equals((List[Long]())));
    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));
    assert(countUpTo((1l)).equals((List[Long]())));
    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));
    assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));
    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong))));
    }

}
"
HumanEval_97,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ထၢင်ႇဝႃႈ ၶေႃႈၶဝ်ႈၼႆႉ မၼ်းထုၵ်ႇမႅၼ်ႈယူႇတႃႇသေႇ။    //တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၶွင်တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၶွင်တူဝ်ၼပ်ႉၶဝ်ၼၼ်ႉ။    //တမ်းဝၢင်း တူဝ်ၼပ်ႉတဵမ်သွင်တူဝ်သေ ၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉတဵမ်     // >>> multiply((148l), (412l))
    // (16l)
    // >>> multiply((19l), (28l))
    // (72l)
    // >>> multiply((2020l), (1851l))
    // (0l)
    // >>> multiply((14l), (-15l))
    // (20l)
    def multiply(a : Long, b : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def multiply(a: Long, b: Long): Long = {
        val unitDigitA = abs(a % 10)
        val unitDigitB = abs(b % 10)
        unitDigitA * unitDigitB
    }

    def main(args: Array[String]): Unit = {
        println(multiply(148l, 412l))  // 16l
        println(multiply(19l, 28l))    // 72l
        println(multiply(2020l, 1851l)) // 0l
        println(multiply(14l, -15l))   // 20l
    }
}","    }
    def main(args: Array[String]) = {
    assert(multiply((148l), (412l)) == (16l));
    assert(multiply((19l), (28l)) == (72l));
    assert(multiply((2020l), (1851l)) == (0l));
    assert(multiply((14l), (-15l)) == (20l));
    assert(multiply((76l), (67l)) == (42l));
    assert(multiply((17l), (27l)) == (49l));
    assert(multiply((0l), (1l)) == (0l));
    assert(multiply((0l), (0l)) == (0l));
    }

}
"
HumanEval_98,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ပေႃးဝႃႈႁဝ်းပၼ် string s ၼႆၸိုင် ၵဵပ်းဢဝ် တူဝ်လိၵ်ႈတူဝ်မႄႈလိၵ်ႈတူဝ်ယႂ်ႇ ဢၼ်ပႃး တူဝ်ၼပ်ႉၸႅၼ်ႇတူဝ်ၼၼ်ႉသေ ၼပ်ႉတူၺ်း    // >>> countUpper((""aBCdEf""))
    // (1l)
    // >>> countUpper((""abcdefg""))
    // (0l)
    // >>> countUpper((""dBBE""))
    // (0l)
    def countUpper(s : String) : Long = {
","def countUpper(s: String): Long = {
  val uppercaseVowels = Set('A', 'E', 'I', 'O', 'U')
  s.zipWithIndex.collect {
    case (ch, index) if index % 2 == 0 && uppercaseVowels.contains(ch) => ch
  }.size.toLong
}","    }
    def main(args: Array[String]) = {
    assert(countUpper((""aBCdEf"")) == (1l));
    assert(countUpper((""abcdefg"")) == (0l));
    assert(countUpper((""dBBE"")) == (0l));
    assert(countUpper((""B"")) == (0l));
    assert(countUpper((""U"")) == (1l));
    assert(countUpper(("""")) == (0l));
    assert(countUpper((""EEEE"")) == (2l));
    }

}
"
HumanEval_99,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //လုၵ်ႉတီႈ တူဝ်ၼပ်ႉတဵမ် သွင်တူဝ်ၼၼ်ႉသေ ဢဝ်မၼ်းၸုၵ်းၵႂႃႇတီႈ သုၼ်ၼၼ်ႉယဝ်ႉ။    //ပေႃးဝႃႈ တူဝ်ၼပ်ႉၼၼ်ႉ မီးတၢင်းၵႆၵၼ်ၽဵင်ႇပဵင်းၵၼ်ၼႆ    //ႁဵတ်းပၼ် function ဢၼ်ဢဝ် ၵႃႈၶၼ် (string) ဢၼ်တၢင်တူဝ် တူဝ်ၼပ်ႉၼၼ်ႉ    // >>> closestInteger((""10""))
    // (10l)
    // >>> closestInteger((""15.3""))
    // (15l)
    // Note:
    // Rounding away from zero means that if the given number is equidistant
    // from two integers, the one you should return is the one that is the
    // farthest from zero. For example closest_integer(""14.5"") should
    // return 15 and closest_integer(""-14.5"") should return -15.
    def closestInteger(value : String) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def closestInteger(value: String): Long = {
    val num = value.toDouble
    val lower = floor(num).toLong
    val upper = ceil(num).toLong
    
    if (abs(num - lower) == abs(num - upper)) {
      if (num > 0) upper else lower
    } else {
      round(num)
    }
  }

  def main(args: Array[String]): Unit = {
    println(closestInteger(""10""))  // 10
    println(closestInteger(""15.3"")) // 15
    println(closestInteger(""14.5"")) // 15
    println(closestInteger(""-14.5"")) // -15
  }
}","    }
    def main(args: Array[String]) = {
    assert(closestInteger((""10"")) == (10l));
    assert(closestInteger((""14.5"")) == (15l));
    assert(closestInteger((""-15.5"")) == (-16l));
    assert(closestInteger((""15.3"")) == (15l));
    assert(closestInteger((""0"")) == (0l));
    }

}
"
HumanEval_100,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //i ၼႆႉပဵၼ် တူဝ်ၼပ်ႉႁိၼ် ဢၼ်မီးတီႈၸၼ်ႉ (i+1) ၼၼ်ႉယဝ်ႉ။    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉႁိၼ် တီႈၸၼ်ႉလႂ်ၸၼ်ႉၼၼ်ႉ ၶိုၼ်းမႃးၶိုၼ်း တီႈၼႂ်းသဵၼ်ႈမၢႆ၊ တီႈဢၼ် တူဝ်ၼပ်ႉဢၼ်မီးတီႈ index ၼၼ်ႉ     //- တူဝ်ၼပ်ႉဢၼ်ၸမ်သုတ်း သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼပ်ႉၸမ်သုတ်းၼႆယဝ်ႉ။    //- တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မႃးၸွမ်းလင် သင်ဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆယဝ်ႉ။    //တူဝ်ၼပ်ႉႁိၼ် ဢၼ်မီးတီႈၸၼ်ႉထၢၼ်ႈၼႃႈၼၼ်ႉတႄႉပဵၼ်:     //ၸၼ်ႉဢွၼ် မီးမၢၵ်ႇႁိၼ် n တၼ်။    //ပေႃးဝႃႈႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ႁဝ်းတေလႆႈႁဵတ်းႁုပ်ႈႁုၼ်ႈမၢၵ်ႇႁိၼ် ဢၼ်မီးၸၼ်ႉ n ၼၼ်ႉယူႇယဝ်ႉ။    // >>> makeAPile((3l))
    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))
    def makeAPile(n : Long) : List[Long] = {
","import scala.collection.mutable.ListBuffer

object Problem {
    def makeAPile(n: Long): List[Long] = {
        val pile = ListBuffer[Long]()
        var currentStones = n
        for (_ <- 0 until n.toInt) {
            pile += currentStones
            currentStones += (if (currentStones % 2 == 0) 2 else 2)
        }
        pile.toList
    }

    def main(args: Array[String]): Unit = {
        val result = makeAPile(3L)
        println(result)
    }
}","    }
    def main(args: Array[String]) = {
    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));
    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));
    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));
    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));
    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));
    }

}
"
HumanEval_101,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //တႃႇၸႅၵ်ႇထႅဝ်လိၵ်ႈဢွၵ်ႇပဵၼ် ၶေႃႈၵႂၢမ်း လႄႈ ၶိုၼ်းဢဝ် ထႅဝ်လိၵ်ႈဢွၵ်ႇမႃး    //ၸဝ်ႈၵဝ်ႇတေလႆႈပၼ်ၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈ ၶမ်း (comma) ဢမ်ႇၼၼ် သဵပ်ႇ (space) သေလႄႈ ၼႃႈၵၢၼ်ၸဝ်ႈၵဝ်ႇတႄႉပဵၼ်    // >>> wordsString((""Hi, my name is John""))
    // (List[String](""Hi"", ""my"", ""name"", ""is"", ""John""))
    // >>> wordsString((""One, two, three, four, five, six""))
    // (List[String](""One"", ""two"", ""three"", ""four"", ""five"", ""six""))
    def wordsString(s : String) : List[String] = {
","def wordsString(s: String): List[String] = {
    s.split(""[, ]+"").toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(wordsString((""Hi, my name is John"")).equals((List[String](""Hi"", ""my"", ""name"", ""is"", ""John""))));
    assert(wordsString((""One, two, three, four, five, six"")).equals((List[String](""One"", ""two"", ""three"", ""four"", ""five"", ""six""))));
    assert(wordsString((""Hi, my name"")).equals((List[String](""Hi"", ""my"", ""name""))));
    assert(wordsString((""One,, two, three, four, five, six,"")).equals((List[String](""One"", ""two"", ""three"", ""four"", ""five"", ""six""))));
    assert(wordsString(("""")).equals((List[String]())));
    assert(wordsString((""ahmed     , gamal"")).equals((List[String](""ahmed"", ""gamal""))));
    }

}
"
HumanEval_102,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ပေႃးဢမ်ႇမီး တူဝ်ၼပ်ႉၸိူင်ႉၼၼ်ၸိုင် တူဝ်ဢိင်ၼႆႉ တေလႆႈၶိုၼ်းပၼ် - 1    //တူဝ်ၼပ်ႉတဵမ်ဢၼ်ယႂ်ႇသေပိူၼ်ႈ ဢၼ်ပႃးၼႂ်းၵႄႈ [x, y] ၼၼ်ႉ သင်ဝႃႈ     //တူဝ်ဢိင်ဢၼ်ၼႆႉ ဢဝ်တူဝ်ၼပ်ႉသုတ်ႉ x လႄႈ y သွင်တူဝ်သေ ၶိုၼ်းပၼ်တူဝ်ၼပ်ႉ     // >>> chooseNum((12l), (15l))
    // (14l)
    // >>> chooseNum((13l), (12l))
    // (-1l)
    def chooseNum(x : Long, y : Long) : Long = {
","def chooseNum(x: Long, y: Long): Long = {
    // Ensure x is the lesser value and y is the greater value
    val (start, end) = if (x > y) (y, x) else (x, y)
    
    // Start from the end of the range and search backwards for an even number
    for (i <- end to start by -1 if i % 2 == 0) {
      return i
    }
    
    // If no even number is found, return -1
    -1
  }
}","    }
    def main(args: Array[String]) = {
    assert(chooseNum((12l), (15l)) == (14l));
    assert(chooseNum((13l), (12l)) == (-1l));
    assert(chooseNum((33l), (12354l)) == (12354l));
    assert(chooseNum((5234l), (5233l)) == (-1l));
    assert(chooseNum((6l), (29l)) == (28l));
    assert(chooseNum((27l), (10l)) == (-1l));
    assert(chooseNum((7l), (7l)) == (-1l));
    assert(chooseNum((546l), (546l)) == (546l));
    }

}
"
HumanEval_103,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉယႂ်ႇလိူဝ်သေ m ၼႆၸိုင် ၶိုၼ်းဢဝ် -1 မႃးၶိုၼ်းယဝ်ႉ။    //ဢဝ်ၶေႃႈတွပ်ႇၼၼ်ႉ ၶွပ်ႇဝၢႆႇၸူး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၸမ်သုတ်းသေ လႅၵ်ႈလၢႆႈပဵၼ် တူဝ်ၼပ်ႉသွင်တူဝ်။    //တူဝ်ၼပ်ႉတဵမ်ဢၼ်မီးတီႈ n တေႃႇထိုင် m (ၶဝ်ႈပႃး n လႄႈ m) ၼၼ်ႉပဵၼ်ၵႃႊၶၼ်ၵၢင်ယဝ်ႉ။    //လႆႈပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n လႄႈ m သွင်တူဝ် လႄႈ ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇၼပ်ႉသွၼ်ႇ တူဝ်ၼပ်ႉ     // >>> roundedAvg((1l), (5l))
    // ""0b11""
    // >>> roundedAvg((7l), (5l))
    // -1l
    // >>> roundedAvg((10l), (20l))
    // ""0b1111""
    // >>> roundedAvg((20l), (33l))
    // ""0b11010""
    def roundedAvg(n : Long, m : Long) : Either[String, Long] = {
","import scala.math._
import scala.collection.mutable._
object Problem {
  // Function to compute the average of the integers from n through m
  def roundedAvg(n: Long, m: Long): Either[String, Long] = {
    if (n > m) {
      Right(-1L)
    } else {
      val count = m - n + 1
      val sum = (n + m) * count / 2
      val average = round(sum.toDouble / count)
      Left(""0b"" + average.toLong.toBinaryString)
    }
  }

  def main(args: Array[String]): Unit = {
    println(roundedAvg(1L, 5L))    // Left(""0b11"")
    println(roundedAvg(7L, 5L))    // Right(-1L)
    println(roundedAvg(10L, 20L))  // Left(""0b1111"")
    println(roundedAvg(20L, 33L))  // Left(""0b11010"")
  }
}","    }
    def main(args: Array[String]) = {
    assert(roundedAvg((1l), (5l)).equals(""0b11""));
    assert(roundedAvg((7l), (13l)).equals(""0b1010""));
    assert(roundedAvg((964l), (977l)).equals(""0b1111001010""));
    assert(roundedAvg((996l), (997l)).equals(""0b1111100100""));
    assert(roundedAvg((560l), (851l)).equals(""0b1011000010""));
    assert(roundedAvg((185l), (546l)).equals(""0b101101110""));
    assert(roundedAvg((362l), (496l)).equals(""0b110101101""));
    assert(roundedAvg((350l), (902l)).equals(""0b1001110010""));
    assert(roundedAvg((197l), (233l)).equals(""0b11010111""));
    assert(roundedAvg((7l), (5l)).equals(-1l));
    assert(roundedAvg((5l), (1l)).equals(-1l));
    assert(roundedAvg((5l), (5l)).equals(""0b101""));
    }

}
"
HumanEval_104,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //မၢႆတွင်း: သဵၼ်ႈမၢႆဢၼ်လႆႈၶိုၼ်းၼၼ်ႉ ထုၵ်ႇလီၸႅၵ်ႇဝႆႉၸွမ်းၼင်ႇ လွင်ႈၶိုၼ်ႈယႂ်ႇၶိုပ်ႈၼႃႈၼၼ်ႉယဝ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉၸႅၵ်ႈဢၼ်ၼိူင်ႈၼၼ်ႉ    //ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်တူဝ်မႄႈလိၵ်ႈ ဢၼ်တဵမ်ထူၼ်ႈ x ၼႆ မၼ်းတေၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉတင်းမူတ်း     // >>> uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong)))
    // (List[Long](1l.toLong, 15l.toLong, 33l.toLong))
    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong)))
    // (List[Long]())
    def uniqueDigits(x : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def uniqueDigits(x: List[Long]): List[Long] = {
    def hasEvenDigit(n: Long): Boolean = {
      n.toString.exists(c => (c - '0') % 2 == 0)
    }

    x.filterNot(hasEvenDigit).sorted
  }

  // Example usage
  def main(args: Array[String]): Unit = {
    println(uniqueDigits(List[Long](15L, 33L, 1422L, 1L)))
    println(uniqueDigits(List[Long](152L, 323L, 1422L, 10L)))
  }
}","    }
    def main(args: Array[String]) = {
    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));
    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));
    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));
    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));
    }

}
"
HumanEval_105,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //""ၼိုင်ႈ၊ သွင်၊ သၢမ်၊ သီႇ၊ ႁႃႈ၊ ႁူၵ်း၊ သီႇၸဵတ်း၊ ပႅတ်ႇ၊ ၵဝ်ႈ""    //ၶိုၼ်းမႄးၶိုၼ်း သဵၼ်ႈမၢႆဢၼ်လႆႈမႃးၼၼ်ႉသေ ၶိုၼ်းဢဝ်တူဝ်ၼပ်ႉဢၼ်လႂ်ဢၼ်ၼၼ်ႉ လႅၵ်ႈလၢႆႈပဵၼ် ၸိုဝ်ႈဢၼ်ၵွင်ႉၵၢႆႇၵၼ်တင်း     //ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်ၼႆ ၸႅၵ်ႇပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်မီးၼႂ်းၵႄႈ 1 လႄႈ 9 ပႃးၸဵမ်ၸိူဝ်းၼႆႉ၊    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))
    // (List[String](""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""))
    // If the list is empty, return an empty list:
    // >>> byLength((List[Long]()))
    // (List[String]())
    // If the list has any strange number ignore it:
    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))
    // (List[String](""One""))
    def byLength(arr : List[Long]) : List[String] = {
","import scala.collection.mutable._

object Problem {
  def byLength(arr: List[Long]): List[String] = {
    // Map of digit to its corresponding name
    val numToName = Map(
      1L -> ""One"",
      2L -> ""Two"",
      3L -> ""Three"",
      4L -> ""Four"",
      5L -> ""Five"",
      6L -> ""Six"",
      7L -> ""Seven"",
      8L -> ""Eight"",
      9L -> ""Nine""
    )

    // Filter numbers between 1 and 9
    val filteredAndSorted = arr.filter(num => num >= 1 && num <= 9).sorted(Ordering[Long].reverse)
    // Map filtered and sorted numbers to their corresponding names
    filteredAndSorted.map(numToName)
  }
}","    }
    def main(args: Array[String]) = {
    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""))));
    assert(byLength((List[Long]())).equals((List[String]())));
    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](""One""))));
    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](""Three"", ""Two"", ""One""))));
    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](""Nine"", ""Eight"", ""Four""))));
    }

}
"
HumanEval_106,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းတူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တိူဝ်းတူဝ်ၼပ်ႉ 1 တေႃႇထိုင် i (1 * 2 * ... * i) ၼၼ်ႉယဝ်ႉ။    //i တႄႇတီႈ 1.    //ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉဢၼ်တႄႇတီႈ 1 တေႃႇထိုင် i ၼၼ်ႉၵေႃႈ တဵမ်ထူၼ်ႈယဝ်ႉ။    //လႄႈ ၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ဢၼ်ယႂ်ႇ n၊ မိူၼ်ၼင်ႇ ၵႃႈၶၼ်ၶွင် တူဝ်ၼပ်ႉဢၼ်မီးတီႈ index i ၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းတူဝ်ၼပ်ႉၶွင် i သင်ဝႃႈ i ၼႆႉပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၸႅၵ်ႈၵၼ်ၼႆယဝ်ႉ။    //ႁဵတ်းသၢင်ႈၼႃႈၵၢၼ် f ဢၼ်ဢဝ် n ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တႅၵ်ႈ၊     // >>> f((5l))
    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))
    def f(n : Long) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def f(n: Long): List[Long] = {
        def factorial(x: Long): Long = if (x == 0) 1 else x * factorial(x - 1)
        
        (1L to n).map { i =>
            if (i % 2 == 0) factorial(i) else (1L to i).sum
        }.toList
    }
}","    }
    def main(args: Array[String]) = {
    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));
    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));
    assert(f((1l)).equals((List[Long](1l.toLong))));
    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));
    }

}
"
HumanEval_107,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ 1:    //တူဝ်ၼပ်ႉတဵမ် palindromes ဢၼ်ၶဝ်ႈပႃးၼႂ်း တၢင်းၼမ်တၢင်းလၢႆ ((1, n) ပႃးၸဵမ်) ။    //ပေႃးႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉၸႅၵ်ႈ လႄႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ၶိုၼ်းမႃး    // >>> evenOddPalindrome((3l))
    // ((1l, 2l))
    // Explanation:
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
    // Example 2:
    // >>> evenOddPalindrome((12l))
    // ((4l, 6l))
    // Explanation:
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
    // Note:
    // 1. 1 <= n <= 10^3
    // 2. returned tuple has the number of even and odd integer palindromes respectively.
    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {
","def evenOddPalindrome(n: Long): (Long, Long) = {
  def isPalindrome(x: Long): Boolean = {
    val str = x.toString
    str == str.reverse
  }

  var evenCount: Long = 0
  var oddCount: Long = 0

  for (i <- 1L to n) {
    if (isPalindrome(i)) {
      if (i % 2 == 0) evenCount += 1
      else oddCount += 1
    }
  }

  (evenCount, oddCount)
}","    }
    def main(args: Array[String]) = {
    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));
    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));
    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));
    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));
    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));
    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));
    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));
    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));
    }

}
"
HumanEval_108,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း -123 ၼႆႉ မီးတူဝ်ၼပ်ႉ -1, 2, လႄႈ 3 ယဝ်ႉ။    //သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈပဵၼ် တူဝ်ထွၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်မီးမၢႆလပ်ႉမၼ်းဢွၼ်တၢင်းသုတ်းၼၼ်ႉ တေပဵၼ် တူဝ်ထွၼ်ယဝ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ႁူမ်ႈၵၼ်ဝႆႉၼၼ်ႉ ပဵၼ် 0 ယဝ်ႉ။    //တႅမ်ႈပၼ် တူဝ်ၼပ်ႉတဵမ် count_nums ဢၼ်ဢဝ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ်သေ ၶိုၼ်းပၼ်ၶိုၼ်း    // >>> countNums((List[Long]()))
    // (0l)
    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))
    // (1l)
    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))
    // (3l)
    def countNums(arr : List[Long]) : Long = {
","def countNums(arr: List[Long]): Long = {
  arr.count(num => {
    val sumOfDigits = num.toString.foldLeft(0) { (acc, char) =>
      if (char == '-') acc else acc + (char - '0')
    }
    sumOfDigits > 0
  }).toLong
}","    }
    def main(args: Array[String]) = {
    assert(countNums((List[Long]())) == (0l));
    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));
    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));
    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));
    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));
    assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));
    assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));
    assert(countNums((List[Long](1l.toLong))) == (1l));
    }

}
"
HumanEval_109,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //မၢႆတွင်း: သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼႆႉ မၼ်းတေမီးဝႆႉ လွင်ႈမၵ်းမၢႆဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    //သင်ဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ဢၼ်ဢမ်ႇမီးသင်ၼႆ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်းယဝ်ႉ။    //ပေႃးၼၼ် ၶိုၼ်းဢဝ် true ဢမ်ႇၼၼ် return false။    //သင်ဝႃႈ မၼ်းပဵၼ်လႆႈ တႃႇတေလႆႈ သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉ လူၺ်ႈလွင်ႈႁဵတ်းသၢင်ႈ တၢင်းၼိူဝ်ၼႆႉၼႆ    //တီႈတႄႇမၼ်း ၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ဝႃႈၼၼ်ႉ ပဵၼ် 0th index။    //လွင်ႈဢၼ်ပဵၼ် ထႅဝ်ပွင်ႈလိုၼ်းသုတ်းၶွင် သဵၼ်ႈမၢႆၼၼ်ႉ တေၶၢႆႉၵႂႃႇၸူး     //လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼိုင်ႈဢၼ်ၶၢႆႉၵႂႃႇၽၢႆႇၶႂႃၼႆႉ ပွင်ႇဝႃႈ ၶၢႆႉၶူဝ်းၶွင်ၼႂ်းသဵၼ်ႈမၢႆတင်းမူတ်း ၼိုင်ႈဢၼ်။    //ၸဝ်ႈၵဝ်ႇၼႆႉ မီးသုၼ်ႇႁဵတ်းသၢင်ႈလႆႈ လွင်ႈလႅၵ်ႈလၢႆႈၽၢႆႇၶႂႃ လၢႆပွၵ်ႈလၢႆၵမ်းယူႇယဝ်ႉ။    //လွင်ႈႁဵတ်းသၢင်ႈဢၼ်ၼႆႉ မၼ်းတေၼႄပၼ် တီႈၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ:    //မၼ်းပဵၼ်လႆႈတႃႇတေၸႅၵ်ႇၽႄ သဵၼ်ႈမၢႆ ဢၼ်ဢမ်ႇမီးလွင်ႈယွမ်းလူင်း လူၺ်ႈႁဵတ်းသၢင်ႈ     //တူဝ်ၼပ်ႉၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ တေထုၵ်ႇၸႅၵ်ႇဝႆႉၸွမ်းလွင်ႈဢမ်ႇၸွမ်းပိူင်။ ၼႃႈၵၢၼ်ၶွင်သူၼၼ်ႉ ပဵၼ်တႃႇတႅပ်းတတ်းဝႃႈ     //ႁဝ်းမီးသဵၼ်ႈမၢႆ 'arr' ၶွင်တူဝ်ၼပ်ႉတဵမ် N ဢၼ်ဝႃႈ arr[1], arr[2], ..., arr[N]။    // >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))
    // (true)
    // Explanation: By performin 2 right shift operations, non-decreasing order can
    // be achieved for the given list.
    // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong)))
    // (false)
    // Explanation:It is not possible to get non-decreasing order for the given
    // list by performing any number of right shift operations.
    def moveOneBall(arr : List[Long]) : Boolean = {
","def moveOneBall(arr: List[Long]): Boolean = {
  if (arr.isEmpty) return true

  // Find how many times the array needs to be shifted to become sorted
  val n = arr.length
  var shiftIndex = -1

  for (i <- 0 until n) {
    if (arr(i) > arr((i + 1) % n)) {
      // More than one place where the order breaks means it can't be sorted with a shift
      if (shiftIndex != -1) return false
      shiftIndex = i + 1
    }
  }

  // If no break in order was found, the array is already sorted
  if (shiftIndex == -1) return true

  // Check if shifting by the found index sorts the array
  for (i <- 1 until n) {
    if (arr((shiftIndex + i) % n) < arr((shiftIndex + i - 1) % n)) return false
  }
  
  true
}","    }
    def main(args: Array[String]) = {
    assert(moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));
    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));
    assert(moveOneBall((List[Long](4l.toLong, 3l.toLong, 1l.toLong, 2l.toLong))) == (false));
    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));
    assert(moveOneBall((List[Long]())) == (true));
    }

}
"
HumanEval_110,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် ""ဢမ်ႇ""    //လွင်ႈဢၼ် တူဝ်ၼပ်ႉ lst1 တင်းမူတ်းၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၼိူင်ႈဢၼ်ၼၼ်ႉ၊ ၶိုၼ်းပၼ်ၶေႃႈတွပ်ႇ ""YES""    //ပေႃးဝႃႈမၼ်းပဵၼ်လႆႈ တႃႇလႅၵ်ႈလၢႆႈ ၶူဝ်းၶွင် ၼႂ်းၵႄႈ lst1 လႄႈ lst2 တႃႇႁဵတ်း     //ဢမ်ႇမီးလွင်ႈမၵ်းမၼ်ႈၼိူဝ် တူဝ်ၼပ်ႉၶွင် ဢၼ်လႅၵ်ႈလၢႆႈၵၼ်ၼ်ႂးၵႄႈ lst1 လႄႈ lst2 ၼၼ်ႉယဝ်ႉ။    //ၼႂ်းၵႄႈၶဝ်ၼၼ်ႉ တႃႇတေႁဵတ်းဢွၵ်ႇ lst1 ဢၼ်ပဵၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ်ၵူၺ်းၼၼ်ႉယဝ်ႉ။    //မၼ်းတေတႅပ်းတတ်းဝႃႈ ၸွင်ႇမၼ်းတေၸၢင်ႈႁဵတ်းလႆႈ လွင်ႈလႅၵ်ႈလၢႆႈၶွင် ၶူဝ်းၶွင်ဢၼ်ၼိူင်ႈဢၼ်ႁိုဝ်ၼႆၼၼ်ႉယဝ်ႉ။    //ၼႂ်းပုစ္ဆာၼႆႉ ၸဝ်ႈၵဝ်ႇတေႁဵတ်းသၢင်ႈ တူဝ်ဢိင် ဢၼ်ဢဝ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉ သွင်ဢၼ်၊     // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))
    // (""YES"")
    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))
    // (""NO"")
    // It is assumed that the input lists will be non-empty.
    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def exchange(lst1: List[Long], lst2: List[Long]): String = {
    // Check if all elements in lst1 are already even
    if (lst1.forall(_ % 2 == 0)) return ""YES""

    // Find if there's any even number in lst2 to exchange with lst1
    val lst2EvensExist = lst2.exists(_ % 2 == 0)

    // Check if there's also at least one odd in lst1 to swap it out
    val lst1OddsExist = lst1.exists(_ % 2 != 0)

    // Only possible if both an even element in lst2 and an odd element in lst1 exist
    if (lst2EvensExist && lst1OddsExist) ""YES"" else ""NO""
  }
}","    }
    def main(args: Array[String]) = {
    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((""YES"")));
    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((""NO"")));
    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((""YES"")));
    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 4l.toLong))).equals((""YES"")));
    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((""NO"")));
    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong, 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((""NO"")));
    assert(exchange((List[Long](100l.toLong, 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((""YES"")));
    }

}
"
HumanEval_111,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //သင်ဝႃႈ တူဝ်လိၵ်ႈတင်းၼမ် မီးလွင်ႈပဵၼ်မိူၼ်ၵၼ်ၼႆ ၶိုၼ်းဢဝ်တင်းမူတ်းၼၼ်ႉၶိုၼ်း။    //တူဝ်လိၵ်ႈဢၼ်မီးလွင်ႈၽိုၼ်မိူၼ်ၼမ်သေလႄႈ ပႃးဝႆႉ တူဝ်ၼပ်ႉဢၼ်ၵွင်ႉၵၢႆႇၵၼ်ၼၼ်ႉယဝ်ႉ။    //ပေႃးဝႃႈႁဝ်းပၼ် string ဢၼ်တႅၼ်းတၢင် တူဝ်လိၵ်ႈလဵၵ်ႉလဵၵ်ႉ ဢၼ်ၽႄဝႆႉလူၺ်ႈႁွင်ႈၵိုတ်းၼႆ မၼ်းတေၶိုၼ်းပၼ်ၽႅၼ်ႇလိၼ်ဢၼ်ၼိုင်ႈ    // >>> histogram((""a b c""))
    // (Map[String,Long](""a"" -> 1l, ""b"" -> 1l, ""c"" -> 1l))
    // >>> histogram((""a b b a""))
    // (Map[String,Long](""a"" -> 2l, ""b"" -> 2l))
    // >>> histogram((""a b c a b""))
    // (Map[String,Long](""a"" -> 2l, ""b"" -> 2l))
    // >>> histogram((""b b b b a""))
    // (Map[String,Long](""b"" -> 4l))
    // >>> histogram((""""))
    // (Map[String,Long]())
    def histogram(test : String) : Map[String,Long] = {
","def histogram(test: String): Map[String, Long] = {
        val words = test.split("" "")
        val frequencyMap = words.groupBy(identity).mapValues(_.length.toLong)

        if (frequencyMap.isEmpty) return Map.empty[String, Long]

        val maxCount = frequencyMap.values.max
        frequencyMap.filter { case (_, count) => count == maxCount }
    }
}","    }
    def main(args: Array[String]) = {
    assert(histogram((""a b b a"")).equals((Map[String,Long](""a"" -> 2l, ""b"" -> 2l))));
    assert(histogram((""a b c a b"")).equals((Map[String,Long](""a"" -> 2l, ""b"" -> 2l))));
    assert(histogram((""a b c d g"")).equals((Map[String,Long](""a"" -> 1l, ""b"" -> 1l, ""c"" -> 1l, ""d"" -> 1l, ""g"" -> 1l))));
    assert(histogram((""r t g"")).equals((Map[String,Long](""r"" -> 1l, ""t"" -> 1l, ""g"" -> 1l))));
    assert(histogram((""b b b b a"")).equals((Map[String,Long](""b"" -> 4l))));
    assert(histogram((""r t g"")).equals((Map[String,Long](""r"" -> 1l, ""t"" -> 1l, ""g"" -> 1l))));
    assert(histogram(("""")).equals((Map[String,Long]())));
    assert(histogram((""a"")).equals((Map[String,Long](""a"" -> 1l))));
    }

}
"
HumanEval_112,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //တေလႆႈၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပႃး တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်လႆႈမႃး လႄႈ true/false တွၼ်ႈတႃႇ လွင်ႈထတ်းသၢင်ႈၼၼ်ႉ။    //သဵၼ်ႈသၢႆဢၼ်ၼိူင်ႈၼႆႉ ႁွင်ႉဝႃႈ palindrome (လွင်ႈတႅၵ်ႈၼိူင်း) သင်ဝႃႈ မၼ်းလႆႈဢၢၼ်ႇၵႂႃႇၽၢႆႇလင်မိူၼ်ၵၼ်တင်း ၽၢႆႇၼႃႈၼၼ်ႉယဝ်ႉ။    //ပေႃးၼၼ် တူၺ်းဝႃႈ တူဝ်ၵိုတ်းမၼ်းပဵၼ် palindrome ႁိုဝ်းၼႆ။    //ႁဝ်းလႆႈပၼ်ဝႆႉ သွင်တူဝ်ထႅဝ် s လႄႈ c ႁဝ်းတေလႆႈမွတ်ႇပႅတ်ႈ တူဝ်လိၵ်ႈတင်းမူတ်း ၼႂ်း s ဢၼ်ၽဵင်ႇပဵင်းၵၼ်တင်း တူဝ်လိၵ်ႈၼႂ်း c    //ၵၢၼ်ငၢၼ်း     // >>> reverseDelete((""abcde""), (""ae""))
    // ((""bcd"", false))
    // >>> reverseDelete((""abcdef""), (""b""))
    // ((""acdef"", false))
    // >>> reverseDelete((""abcdedcba""), (""ab""))
    // ((""cdedc"", true))
    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {
","def reverseDelete(s: String, c: String): Tuple2[String, Boolean] = {
    // Convert the characters to be deleted into a set for quick lookup
    val deleteSet = c.toSet
    
    // Filter out characters from s that are present in deleteSet
    val filteredString = s.filterNot(deleteSet.contains)
    
    // Check if the filtered string is a palindrome
    val isPalindrome = filteredString == filteredString.reverse
    
    // Return the tuple with the filtered string and the palindrome check result
    (filteredString, isPalindrome)
  }
}","    }
    def main(args: Array[String]) = {
    assert(reverseDelete((""abcde""), (""ae"")).equals(((""bcd"", false))));
    assert(reverseDelete((""abcdef""), (""b"")).equals(((""acdef"", false))));
    assert(reverseDelete((""abcdedcba""), (""ab"")).equals(((""cdedc"", true))));
    assert(reverseDelete((""dwik""), (""w"")).equals(((""dik"", false))));
    assert(reverseDelete((""a""), (""a"")).equals((("""", true))));
    assert(reverseDelete((""abcdedcba""), ("""")).equals(((""abcdedcba"", true))));
    assert(reverseDelete((""abcdedcba""), (""v"")).equals(((""abcdedcba"", true))));
    assert(reverseDelete((""vabba""), (""v"")).equals(((""abba"", true))));
    assert(reverseDelete((""mamma""), (""mia"")).equals((("""", true))));
    }

}
"
HumanEval_113,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တီႈတူဝ်ထႅဝ် i'th ၶွင် တူဝ်ၶဝ်ႈၼၼ်ႉ။    //string i ၶွင် input ၼၼ်ႉ။ တီႈၼႆႈ တူဝ်ၼပ်ႉ i တင်းမူတ်းၼႆႉ ထုၵ်ႇလီဢဝ် တူဝ်ၼပ်ႉ  ၼၼ်ႉသေ သႂ်ႇပၼ်။    //တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃးၵူႈတူဝ် i ၼႆႉ တေလႆႈပဵၼ် တူဝ်ၼပ်ႉ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်းတူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃး။    //ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ string ဢၼ်ၼိူင်ႈဢၼ်ၼၼ်ႉသေ သဵၼ်ႈမၢႆမၼ်းၼႆႉ မၼ်းမီးတူဝ်ၼပ်ႉၵူၺ်းၼႆၸိုင် ၶိုၼ်းဢဝ် list ၼၼ်ႉမႃးပၼ်။    // >>> oddCount((List[String](""1234567"")))
    // (List[String](""the number of odd elements 4n the str4ng 4 of the 4nput.""))
    // >>> oddCount((List[String](""3"", ""11111111"")))
    // (List[String](""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""))
    def oddCount(lst : List[String]) : List[String] = {
","def oddCount(lst: List[String]): List[String] = {
    lst.map { str =>
      val oddCount = str.count(c => c.asDigit % 2 != 0)
      val replacedString = s""the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.""
      replacedString
    }
  }

  // Example usage
  def main(args: Array[String]): Unit = {
    println(oddCount(List(""1234567"")))  // List(""the number of odd elements 4n the str4ng 4 of the 4nput."")
    println(oddCount(List(""3"", ""11111111"")))  // List(""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput."")
  }
}","    }
    def main(args: Array[String]) = {
    assert(oddCount((List[String](""1234567""))).equals((List[String](""the number of odd elements 4n the str4ng 4 of the 4nput.""))));
    assert(oddCount((List[String](""3"", ""11111111""))).equals((List[String](""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""))));
    assert(oddCount((List[String](""271"", ""137"", ""314""))).equals((List[String](""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""))));
    }

}
"
HumanEval_114,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //လွင်ႈၼပ်ႉဢၢၼ်ႇ။    //ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် n ၼႆၸိုင် ၶူၼ်ႉႁႃ တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်း ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉဢၼ်ဢေႇသုတ်းၼၼ်ႉလႄႈ။    // >>> minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))
    // (1l)
    // >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))
    // (-6l)
    def minSubArraySum(nums : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def minSubArraySum(nums: List[Long]): Long = {
    var minEndingHere = nums.head
    var minSoFar = nums.head
    
    for (i <- 1 until nums.length) {
      minEndingHere = min(nums(i), minEndingHere + nums(i))
      minSoFar = min(minSoFar, minEndingHere)
    }
    
    minSoFar
  }

  // Test Cases
  def main(args: Array[String]): Unit = {
    println(minSubArraySum(List(2l, 3l, 4l, 1l, 2l, 4l))) // Output: 1
    println(minSubArraySum(List(-1l, -2l, -3l))) // Output: -6
  }
}","    }
    def main(args: Array[String]) = {
    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));
    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong))) == (-6l));
    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));
    assert(minSubArraySum((List[Long](-9999999999999999l.toLong))) == (-9999999999999999l));
    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));
    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));
    assert(minSubArraySum((List[Long](100l.toLong, -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));
    assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong, 3l.toLong, 4l.toLong))) == (3l));
    assert(minSubArraySum((List[Long](100l.toLong, -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));
    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));
    assert(minSubArraySum((List[Long](7l.toLong))) == (7l));
    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));
    }

}
"
HumanEval_115,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ 1:    //ၼႄပၼ်ဝႃႈ တေလႆႈလူင်းၵၢၼ်ႉ ၵႃႊႁိုဝ်။    //ၼႃႈၵၢၼ်သူတႄႉ တေၸႂ်ႉတိုဝ်းမေႃႈတႃႇလုတ်ႇ တႃႇလုတ်ႇၼမ်ႉ။    //ၼမ်ႉၼၵ်းမၼ်းၵေႃႈ မိူၼ်ၵၼ်။    //ၼမ်ႉတွင်းၵူႈဢၼ်ၼၼ်ႉ မီးဝႆႉ ၵွၵ်းဢၼ်ၵဵဝ်ႇၵၼ်ဢၼ်ၼိူင်ႈ ဢၼ်တေၸၢင်ႈၸႂ်ႉတိုဝ်းတွၼ်ႈတႃႇတေ ဢဝ်ၼမ်ႉဢွၵ်ႇမႃး၊    //1 တီႈၼိူင်ႈဢၼ်ၼႆႉ ပဵၼ်တူဝ်တႅၼ်းၶွင် ၼမ်ႉဢၼ်လဵဝ်ၼၼ်ႉယဝ်ႉ။    //သင်ဝႃႈႁဝ်းလႆႈပၼ်ဝႆႉ ႁူးၼမ်ႉဢၼ်မီးသီႇၸဵင်ႇဢၼ်ၼိုင်ႈၼႆၸိုင် သဵၼ်ႈၼိုင်ႈဢၼ်ၼႆႉ တေတၢင်တူဝ်ႁူးၼမ်ႉဢၼ်လဵဝ်ၵူၺ်း၊    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))
    // (6l)
    // Example 2:
    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))
    // (5l)
    // Example 3:
    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))
    // (0l)
    // Constraints:
    // * all wells have the same length
    // * 1 <= grid.length <= 10^2
    // * 1 <= grid[:,1].length <= 10^2
    // * grid[i][j] -> 0 | 1
    // * 1 <= capacity <= 10
    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {
","def maxFill(grid: List[List[Long]], capacity: Long): Long = {
  var totalWaterUnits = 0L

  for (row <- grid) {
    totalWaterUnits += row.sum
  }

  // Calculate the number of times you need to lower the buckets
  val bucketOperations = totalWaterUnits / capacity + (if (totalWaterUnits % capacity != 0) 1 else 0)

  bucketOperations
}","    }
    def main(args: Array[String]) = {
    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));
    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));
    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));
    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));
    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));
    }

}
"
HumanEval_116,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //မၼ်းတေလႆႈႁဵတ်းသၢင်ႈၵႂႃႇ ၼင်ႇၼႆယဝ်ႉ။    //တွၼ်ႈတႃႇ တူဝ်ၼပ်ႉဢၼ်မိူၼ်ၵၼ်ၶွင် တူဝ်ၼပ်ႉ 1 ၼၼ်ႉ ၸႅၵ်ႇၽႄၸွမ်း ၵႃႈၶၼ်တူဝ်ၼပ်ႉႁူဝ်သိပ်းၼၼ်ႉယဝ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈ ၼႂ်းတူဝ်တႅၼ်းတူဝ်ၼပ်ႉသွင်ဢၼ်ၶဝ်ၼၼ်ႉ ၸွမ်းၼင်ႇၶၵ်ႉတွၼ်ႈဢၼ်ၶိုၼ်ႈမႃးၼၼ်ႉယဝ်ႉ။    //ၼႂ်း Kata ၼႆႉ ႁဝ်းတေလႆႈၸႅၵ်ႇဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ် ၸွမ်းၼင်ႇ     // >>> sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))
    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))
    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong)))
    // (List[Long](-6l.toLong, -5l.toLong, -4l.toLong, -3l.toLong, -2l.toLong))
    // >>> sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))
    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))
    def sortArray(arr : List[Long]) : List[Long] = {
","def sortArray(arr: List[Long]): List[Long] = {
        arr.sortBy(n => (n.toBinaryString.count(_ == '1'), n))
    }
}","    }
    def main(args: Array[String]) = {
    assert(sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))));
    assert(sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong, -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));
    assert(sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));
    assert(sortArray((List[Long]())).equals((List[Long]())));
    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 77l.toLong))));
    assert(sortArray((List[Long](3l.toLong, 6l.toLong, 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));
    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));
    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));
    }

}
"
HumanEval_117,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //မၢႆတွင်း: သူတေၸၢင်ႈဝူၼ်ႉဝႃႈ သဵၼ်ႈမၢႆၶေႃႈမုၼ်းဢၼ်ၶဝ်ႈဝႆႉၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈလႄႈ လွင်ႈပဝ်ႇပႅတ်ႈၵူၺ်း။    //ပေႃးဝႃႈ string s ၼႆႉပဵၼ် empty ၼႆၸိုင် တူဝ်ဢိင်မၼ်းတေလႆႈၶိုၼ်းပၼ်ဝႆႉ empty list ၼၼ်ႉယူႇယဝ်ႉ။    //n တူဝ်လေႃးၵၼ်၊ ၼင်ႇႁိုဝ် ၶေႃႈၵႂၢမ်းၸိူဝ်းၼႆႉ တေဢွၵ်ႇမႃးတီႈ သရူဝ်ႊ (s) ၼၼ်ႉ။    //မၼ်းတေၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ ၶေႃႈၵႂၢမ်းတင်းမူတ်း ဢၼ်ပႃးဝႆႉ တီႈၼႂ်း string s ၼၼ်ႉ    //ပေႃးႁဝ်းပၼ် string s လႄႈ တူဝ်ၼပ်ႉသၽႃႇဝ n ၼႆ ႁဝ်းတေလႆႈၸႂ်ႉတိုဝ်း     // >>> selectWords((""Mary had a little lamb""), (4l))
    // (List[String](""little""))
    // >>> selectWords((""Mary had a little lamb""), (3l))
    // (List[String](""Mary"", ""lamb""))
    // >>> selectWords((""simple white space""), (2l))
    // (List[String]())
    // >>> selectWords((""Hello world""), (4l))
    // (List[String](""world""))
    // >>> selectWords((""Uncle sam""), (3l))
    // (List[String](""Uncle""))
    def selectWords(s : String, n : Long) : List[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def selectWords(s: String, n: Long): List[String] = {
    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
    
    def consonantCount(word: String): Int = {
      word.count(c => c.isLetter && !vowels.contains(c))
    }

    if (s.isEmpty) {
      List()
    } else {
      s.split(""\\s+"").filter(word => consonantCount(word) == n).toList
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(selectWords((""Mary had a little lamb""), (4l)).equals((List[String](""little""))));
    assert(selectWords((""Mary had a little lamb""), (3l)).equals((List[String](""Mary"", ""lamb""))));
    assert(selectWords((""simple white space""), (2l)).equals((List[String]())));
    assert(selectWords((""Hello world""), (4l)).equals((List[String](""world""))));
    assert(selectWords((""Uncle sam""), (3l)).equals((List[String](""Uncle""))));
    assert(selectWords((""""), (4l)).equals((List[String]())));
    assert(selectWords((""a b c d e f""), (1l)).equals((List[String](""b"", ""c"", ""d"", ""f""))));
    }

}
"
HumanEval_118,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //သူတေၸၢင်ႈထၢင်ႇဝႃႈ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပႃးတူဝ်လိၵ်ႈ ဢင်းၵိတ်ႉၵူၺ်း။    //ႁႃတူဝ်မႄႈသဵင် ဢၼ်လႆႈႁပ်ႉ ၶေႃႈမၼ်ႈၵႅၼ်ႇၽၢႆႇၼိူဝ်။    //တူဝ်ၸီႉဢၼ်မီးတီႈတႄႇလႄႈ တီႈသုတ်းၼၼ်ႉ ဢမ်ႇၼပ်ႉသွၼ်ႇ သင်ဢမ်ႇၼပ်ႉသွၼ်ႇၼႆ ၶိုၼ်းဢဝ် string ဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉ လၢႆႈပၼ်    //သွင်တူဝ်လေႃးၵၼ် ဢၼ်လုၵ်ႉတီႈၽၢႆႇၶႂႃ ၶေႃႈၵႂၢမ်း ( case sensitive) ။    //ၶေႃႈၵႂၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ပဵၼ်ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်ၸီႉၸမ်သုတ်း ဢၼ်ယူႇၼႂ်းၵႄႈ  လႄႈ  ၼၼ်ႉၼႆယဝ်ႉ။    // >>> getClosestVowel((""yogurt""))
    // (""u"")
    // >>> getClosestVowel((""FULL""))
    // (""U"")
    // >>> getClosestVowel((""quick""))
    // ("""")
    // >>> getClosestVowel((""ab""))
    // ("""")
    def getClosestVowel(word : String) : String = {
","def getClosestVowel(word: String): String = {
    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
    
    for (i <- word.length - 2 until 0 by -1) {
      if (!vowels.contains(word(i)) && vowels.contains(word(i + 1)) && !vowels.contains(word(i + 2))) {
        return word(i + 1).toString
      }
    }
    
    """"
  }
}","    }
    def main(args: Array[String]) = {
    assert(getClosestVowel((""yogurt"")).equals((""u"")));
    assert(getClosestVowel((""full"")).equals((""u"")));
    assert(getClosestVowel((""easy"")).equals(("""")));
    assert(getClosestVowel((""eAsy"")).equals(("""")));
    assert(getClosestVowel((""ali"")).equals(("""")));
    assert(getClosestVowel((""bad"")).equals((""a"")));
    assert(getClosestVowel((""most"")).equals((""o"")));
    assert(getClosestVowel((""ab"")).equals(("""")));
    assert(getClosestVowel((""ba"")).equals(("""")));
    assert(getClosestVowel((""quick"")).equals(("""")));
    assert(getClosestVowel((""anime"")).equals((""i"")));
    assert(getClosestVowel((""Asia"")).equals(("""")));
    assert(getClosestVowel((""Above"")).equals((""o"")));
    }

}
"
HumanEval_119,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ၶိုၼ်းပၼ် 'yes' သင်ဝႃႈမီးလၢႆးႁဵတ်း သ်ႂႇဢၼ်လီ လႄႈ ၶိုၼ်းပၼ် 'no' သင်ဢမ်ႇၼၼ်    //""()) "" ဢမ်ႇပဵၼ်။    //တူဝ်ယၢင်ႇမၼ်း မိူၼ်ၼင်ႇ string '((((() ' ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ၊ string  ၼႆႉ လီဝႆႉ။    //သဵၼ်ႈသၢႆ S ၼႆႉ ပေႃးဝႃႈ မၼ်းပဵၼ်ဢၼ်လီၼႆၸိုင် သင်ဝႃႈ သဵၼ်ႈသၢႆ S  ၼႆႉ မီးဝႆႉ တူဝ်ၸုၵ်းၸွမ်တင်းသဵင်ႈၼႆၸိုင်    //လွင်ႈမၵ်းမၼ်ႈဢၼ်ၼိူင်ႈ၊ ဢၼ်လႆႈမႃးတီႈ သဵၼ်ႈသၢႆမၼ်းၼၼ်ႉ တေပဵၼ်ဢၼ်လီၼၼ်ႉယဝ်ႉ။    //ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေထတ်းတူၺ်းဝႃႈ ၸွင်ႇမၼ်းပဵၼ်လႆႈ တႃႇတေၵွင်ႉၵၢႆႇ သွင်ထႅဝ်ထႅဝ်ၼၼ်ႉယူႇႁႃႉ    //မၢႆတွင်းဢၼ်ပႃးဝႆႉ ""("" ဢမ်ႇၼၼ် မၢႆတွင်းဢၼ်ပႃးဝႆႉ "") "" ၼၼ်ႉၵူၺ်း။    //ဢၼ်ႁဝ်းလႆႈပၼ်ဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်ပႃး သွင်ဢၼ်ၼၼ်ႉ သဵၼ်ႈမၢႆ တင်းသွင်ဢၼ်ၼႆႉ ပဵၼ် open     // >>> matchParens((List[String](""()("", "")"")))
    // (""Yes"")
    // >>> matchParens((List[String]("")"", "")"")))
    // (""No"")
    def matchParens(lst : List[String]) : String = {
","def matchParens(lst: List[String]): String = {
    def isBalanced(s: String): Boolean = {
      var balance = 0
      for (char <- s) {
        if (char == '(') balance += 1
        else if (char == ')') balance -= 1
        if (balance < 0) return false
      }
      balance == 0
    }
    
    val combinations = List(
      lst(0) + lst(1),
      lst(1) + lst(0)
    )
    
    if (combinations.exists(isBalanced)) ""Yes"" else ""No""
  }
}","    }
    def main(args: Array[String]) = {
    assert(matchParens((List[String](""()("", "")""))).equals((""Yes"")));
    assert(matchParens((List[String]("")"", "")""))).equals((""No"")));
    assert(matchParens((List[String](""(()(())"", ""())())""))).equals((""No"")));
    assert(matchParens((List[String]("")())"", ""(()()(""))).equals((""Yes"")));
    assert(matchParens((List[String](""(())))"", ""(()())((""))).equals((""Yes"")));
    assert(matchParens((List[String](""()"", ""())""))).equals((""No"")));
    assert(matchParens((List[String](""(()("", ""()))()""))).equals((""Yes"")));
    assert(matchParens((List[String](""(((("", ""((())""))).equals((""No"")));
    assert(matchParens((List[String]("")(()"", ""(()(""))).equals((""No"")));
    assert(matchParens((List[String]("")("", "")(""))).equals((""No"")));
    assert(matchParens((List[String](""("", "")""))).equals((""Yes"")));
    assert(matchParens((List[String]("")"", ""(""))).equals((""Yes"")));
    }

}
"
HumanEval_120,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ 1:    //တၢင်းယၢဝ်း k ဢၼ်ပႃး တူဝ်ၼပ်ႉ k ဢၼ်ၼမ်သုတ်း ၼႂ်း arr။    //ပေႃးပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် arr လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်တဵမ်ထူၼ်ႈၼႆ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉၼၼ်ႉ လွၵ်ႈလၢႆႈမႃး    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))
    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))
    // Example 2:
    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))
    // (List[Long](4l.toLong, 4l.toLong))
    // Example 3:
    // >>> maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))
    // (List[Long](2l.toLong))
    // Note:
    // 1. The length of the list will be in the range of [1, 1000].
    // 2. The elements in the list will be in the range of [-1000, 1000].
    // 3. 0 <= k <= len(arr)
    def maximum(arr : List[Long], k : Long) : List[Long] = {
","def maximum(arr: List[Long], k: Long): List[Long] = {
    arr.sorted(Ordering[Long].reverse).take(k.toInt).sorted
  }
}","    }
    def main(args: Array[String]) = {
    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));
    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));
    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));
    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong, 123l.toLong))));
    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 20l.toLong))));
    assert(maximum((List[Long](5l.toLong, 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong, -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));
    assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));
    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));
    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));
    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));
    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));
    }

}
"
HumanEval_121,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးတူဝ်ၼၼ်ႉၼႆ ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢၼ်မီးတီႈယူႇၽဵင်ႇပဵင်းၼၼ်ႉ ၶိုၼ်းမႃးပၼ်။    // >>> solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))
    // (12l)
    // >>> solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))
    // (9l)
    // >>> solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))
    // (0l)
    def solution(lst : List[Long]) : Long = {
","def solution(lst: List[Long]): Long = {
  lst.zipWithIndex.collect {
    case (num, idx) if idx % 2 == 0 && num % 2 != 0 => num
  }.sum
}","    }
    def main(args: Array[String]) = {
    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));
    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));
    assert(solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));
    assert(solution((List[Long](5l.toLong, 9l.toLong))) == (5l));
    assert(solution((List[Long](2l.toLong, 4l.toLong, 8l.toLong))) == (0l));
    assert(solution((List[Long](30l.toLong, 13l.toLong, 23l.toLong, 32l.toLong))) == (23l));
    assert(solution((List[Long](3l.toLong, 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));
    }

}
"
HumanEval_122,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //တူဝ်ၼပ်ႉဢၼ်မီးတူဝ်ၼပ်ႉသွင်တူဝ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်တႄႇဢဝ် တူဝ်ၼပ်ႉ k ဢၼ်ဢွၼ်တၢင်းသုတ်းၶွင် တူဝ်ၼပ်ႉ arr ၼၼ်ႉသေ ႁူမ်ႈၵၼ်ဝႆႉယဝ်ႉ။    //ပေႃးပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ဢမ်ႇပဵၼ်ဝၢင်းဝႆႉၼၼ်ႉလႄႈ တူဝ်ၼပ်ႉတဵမ် k ၼႆၸိုင် ၶိုၼ်းဢဝ်     // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))
    // (24l)
    // Constraints:
    // 1. 1 <= len(arr) <= 100
    // 2. 1 <= k <= len(arr)
    def addElements(arr : List[Long], k : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def addElements(arr: List[Long], k: Long): Long = {
    arr.take(k.toInt).filter(x => x >= -99 && x <= 99).sum
  }

  def main(args: Array[String]): Unit = {
    val result = addElements(List[Long](111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L), 4L)
    println(result) // Output will be 24L
  }
}","    }
    def main(args: Array[String]) = {
    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));
    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));
    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));
    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));
    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));
    }

}
"
HumanEval_123,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //get_odd_collatz(5) ၶိုၼ်းပၼ် [1, 5] # လွင်ႈၶပ်ႉၸႅၼ်ႇ collatz တွၼ်ႈတႃႇ 5 ၼႆႉပဵၼ် [5, 16, 8, 4, 2, 1], ၵွပ်ႈၼၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉပဵၼ် 1 လႄႈ 5 ၵူၺ်းယဝ်ႉ။     //တူဝ်ယၢင်ႇမၼ်း-    //2. သဵၼ်ႈမၢႆဢၼ်လႆႈသူင်ႇမႃးၼၼ်ႉ ၸႅၵ်ႇဝႆႉၸွမ်းၼင်ႇ လွင်ႈၶိုၼ်ႈယႂ်ႇၶိုပ်ႈၼႃႈၼၼ်ႉယဝ်ႉ။    //1. Collatz(1) ၼႆႉပဵၼ် [1].    //မၢႆတွင်း:    //ၶေႃႈလၢမ်းၶၢတ်ႈမၼ်းတႄႉ ပဵၼ်ဝႃႈ ဢမ်ႇဝႃႈၵႃႈၶၼ်ၶွင် n ၼႆႉပဵၼ်သင်၊ လွင်ႈၶပ်ႉၸႅၼ်ႇၼႆႉ တေႁွတ်ႈထိုင် 1 တႃႇသေႇယဝ်ႉ။    //ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်မႃးဝၢႆႇၼႃႈၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼႆ တူဝ်ၼပ်ႉဢၼ်မႃးဝၢႆႇၼႃႈၼႆႉ တေပဵၼ် 3 ပုၼ်ႈ တူဝ်ၼပ်ႉဢၼ်မႃးဝၢႆႇၼႃႈၼၼ်ႉၼႆယဝ်ႉ။    //ပေႃးဝႃႈ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈၼႃႈၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉၸႅၵ်ႈၼႆ တူဝ်ၼပ်ႉဢၼ်မႃးတီႈလင်ၼၼ်ႉ ပဵၼ်ၶိုင်ႈၼိူင်ႈ ၶွင် တူဝ်ၼပ်ႉၸႅၵ်ႈၼႆႉယဝ်ႉ။    //မိူၼ်ၼင်ႇ: တႄႇဢဝ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်မၼ်ႈသေဢၼ်ဢၼ် n ယဝ်ႉၵေႃႈ ထႅမ်းပလဵၵ်ႉၵူႈဢၼ်ၼႆႉ လႆႈမႃးတီႈ     //လွင်ႈလၢမ်းၶၢတ်ႈ Collatz ၼႆႉ ပဵၼ်လွင်ႈလၢမ်းၶၢတ်ႈ ၼႂ်းပၢႆးၼပ်ႉ ဢၼ်ၵဵဝ်ႇလူၺ်ႈ လွင်ႈမၵ်းမၼ်ႈဝႆႉ လွင်ႈၶပ်ႉၶိုင်ဝႆႉၼၼ်ႉယဝ်ႉ။    //ပေႃးဝႃႈလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ၼႆၸိုင် ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉ ဢၼ်ပႃး တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် တီႈၼႂ်း လွင်ႈၶပ်ႉၶိုင် collatz ၼၼ်ႉၶိုၼ်း။    // >>> getOddCollatz((5l))
    // (List[Long](1l.toLong, 5l.toLong))
    def getOddCollatz(n : Long) : List[Long] = {
","import scala.collection.mutable.ListBuffer

object Problem {
  def getOddCollatz(n: Long): List[Long] = {
    val oddNumbers = ListBuffer[Long]()
    var number = n
    while (number != 1) {
      if (number % 2 == 1) {
        oddNumbers += number
      }
      number = if (number % 2 == 0) number / 2 else 3 * number + 1
    }
    oddNumbers += 1
    oddNumbers.sorted.toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));
    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong, 5l.toLong))));
    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));
    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));
    }

}
"
HumanEval_124,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //4. ဝၼ်းတေႇတေႇၼႆႉ တေလႆႈပဵၼ်ၼႂ်းပိူင်ၾၢင်: mm-dd-yyyy     //3. လိူၼ်ဢၼ်ဢမ်ႇထုၵ်ႇလီမီးဢေႇလိူဝ် 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 12 လႅမ်ႈ။    //2. ဝၼ်းထီႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 31 ဝၼ်း တွၼ်ႈတႃႇ လိူၼ် 1,3,5,7,8,10,12 လႄႈ ဝၼ်းထီႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 30 ဝၼ်း တွၼ်ႈတႃႇ လိူၼ် 4,6,9,11 လႄႈ ဝၼ်းထီႉ ဢမ်ႇယွမ်း 1 ဢမ်ႇၼၼ် ၼမ်လိူဝ် 29 တွၼ်ႈတႃႇ လိူၼ် 2။    //1. ၶၢဝ်းယၢမ်းဢၼ်ၼိူင်ႈၼႆႉ ဢမ်ႇလႆႈပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ။    //ဝၼ်းၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ ပၵ်းပိူင်ဢၼ်ၸွမ်းမႃးၸိူဝ်းၼႆႉ တင်းမူတ်းလႆႈထုၵ်ႇၸွမ်းၸွမ်းၼႆယဝ်ႉ။    //ပေႃးဝႃႈ ဝၼ်းမၼ်းမၢၼ်ႇမႅၼ်ႈၼႆ တေလႆႈၶိုၼ်း true ပေႃးဢမ်ႇၼၼ် တေလႆႈၶိုၼ်း false    //တေလႆႈတႅမ်ႈ function ဢၼ်တေမၵ်းမၼ်ႈပၼ် string ဝၼ်း လႄႈ     // >>> validDate((""03-11-2000""))
    // (true)
    // >>> validDate((""15-01-2012""))
    // (false)
    // >>> validDate((""04-0-2040""))
    // (false)
    // >>> validDate((""06-04-2020""))
    // (true)
    // >>> validDate((""06/04/2020""))
    // (false)
    def validDate(date : String) : Boolean = {
","import scala.util.Try

object Problem {
  def validDate(date: String): Boolean = {
    if (date.isEmpty) return false
    
    val datePattern = """"""^(\d{2})-(\d{2})-(\d{4})$"""""".r

    date match {
      case datePattern(monthStr, dayStr, yearStr) => 
        (Try(monthStr.toInt).toOption, Try(dayStr.toInt).toOption) match {
          case (Some(month), Some(day)) if month >= 1 && month <= 12 =>
            month match {
              case 1 | 3 | 5 | 7 | 8 | 10 | 12 => day >= 1 && day <= 31
              case 4 | 6 | 9 | 11 => day >= 1 && day <= 30
              case 2 => day >= 1 && day <= 29
              case _ => false
            }
          case _ => false
        }
      case _ => false
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(validDate((""03-11-2000"")) == (true));
    assert(validDate((""15-01-2012"")) == (false));
    assert(validDate((""04-0-2040"")) == (false));
    assert(validDate((""06-04-2020"")) == (true));
    assert(validDate((""01-01-2007"")) == (true));
    assert(validDate((""03-32-2011"")) == (false));
    assert(validDate(("""")) == (false));
    assert(validDate((""04-31-3000"")) == (false));
    assert(validDate((""06-06-2005"")) == (true));
    assert(validDate((""21-31-2000"")) == (false));
    assert(validDate((""04-12-2003"")) == (true));
    assert(validDate((""04122003"")) == (false));
    assert(validDate((""20030412"")) == (false));
    assert(validDate((""2003-04"")) == (false));
    assert(validDate((""2003-04-12"")) == (false));
    assert(validDate((""04-2003"")) == (false));
    }

}
"
HumanEval_125,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //တူဝ်လိၵ်ႈ၊ ord (a) = 0, ord (b) = 1, ... ord (z) = 25    //ပေႃးဢမ်ႇမီး တူဝ်ၼပ်ႉၶမ်ၼႆ တေလႆႈၶိုၼ်း မၢႆတူဝ်လိၵ်ႈဢွၼ်ႇ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ၼႂ်းတူဝ်လိၵ်ႈ     //ပေႃးဝႃႈႁဝ်းလႆႈပၼ်ၶေႃႈၵႂၢမ်းတင်းၼမ်ၼႆ သင်ဝႃႈဢမ်ႇမီးၶေႃႈၵႂၢမ်းဢၼ်ပႃးဝႆႉတီႈၼႂ်း လိၵ်ႈဢၼ်ႁဝ်းၶႂ်ႈတႅမ်ႈၼၼ်ႉၼႆ ႁဝ်းတေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆၶေႃႈၵႂၢမ်း ဢၼ်ၸႅၵ်ႇဝႆႉတီႈၼႂ်းႁွင်ႈဢၼ်ပႃးဝႆႉတီႈၼႂ်းႁွင်ႈၼၼ်ႉယူႇယဝ်ႉ။    // >>> splitWords((""Hello world!""))
    // List[String](""Hello"", ""world!"")
    // >>> splitWords((""Hello,world!""))
    // List[String](""Hello"", ""world!"")
    // >>> splitWords((""abcdef""))
    // 3l
    def splitWords(txt : String) : Either[List[String], Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def splitWords(txt: String): Either[List[String], Long] = {
    if (txt.contains("" "")) {
      Left(txt.split(""\\s+"").toList)
    } else if (txt.contains("","")) {
      Left(txt.split("","").toList)
    } else {
      val oddOrderCount = txt.toCharArray
        .count(c => ('a' to 'z').contains(c) && (c - 'a') % 2 == 0)
      Right(oddOrderCount.toLong)
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(splitWords((""Hello world!"")).equals(List[String](""Hello"", ""world!"")));
    assert(splitWords((""Hello,world!"")).equals(List[String](""Hello"", ""world!"")));
    assert(splitWords((""Hello world,!"")).equals(List[String](""Hello"", ""world,!"")));
    assert(splitWords((""Hello,Hello,world !"")).equals(List[String](""Hello,Hello,world"", ""!"")));
    assert(splitWords((""abcdef"")).equals(3l));
    assert(splitWords((""aaabb"")).equals(2l));
    assert(splitWords((""aaaBb"")).equals(1l));
    assert(splitWords(("""")).equals(0l));
    }

}
"
HumanEval_126,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီး တူဝ်ၼပ်ႉထွၼ် လႄႈ တူဝ်ၼပ်ႉတဵမ်ၵူၺ်း။    //ပေႃးဝႃႈမီးဝႆႉ သဵၼ်ႈမၢႆ ဢၼ်မိူၼ်ၵၼ် ၼမ်လိူဝ် 1 ဢၼ်ၼႆၸိုင်    //ပေႃးလႆႈပၼ် သဵၼ်ႈမၢႆ မၢႆလပ်ႉၼႆ ၶိုၼ်းပၼ် မၢႆလပ်ႉ ဢၼ်ၸႅၵ်ႇဝႆႉ ဢမ်ႇၼၼ် ဢမ်ႇၸႅၵ်ႇဝႆႉၼၼ်ႉ    // >>> isSorted((List[Long](5l.toLong)))
    // (true)
    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))
    // (true)
    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))
    // (false)
    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))
    // (true)
    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))
    // (true)
    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))
    // (false)
    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)))
    // (true)
    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))
    // (false)
    def isSorted(lst : List[Long]) : Boolean = {
","def isSorted(lst: List[Long]): Boolean = {
    if (lst.isEmpty || lst.length == 1) return true

    var hasDuplicate = false

    for (i <- 1 until lst.length) {
        if (lst(i) < lst(i - 1)) {
            return false
        }
        if (lst(i) == lst(i - 1)) {
            if (hasDuplicate) return false
            hasDuplicate = true
        } else {
            hasDuplicate = false
        }
    }

    true
}","    }
    def main(args: Array[String]) = {
    assert(isSorted((List[Long](5l.toLong))) == (true));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));
    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));
    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (false));
    assert(isSorted((List[Long]())) == (true));
    assert(isSorted((List[Long](1l.toLong))) == (true));
    assert(isSorted((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));
    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (true));
    }

}
"
HumanEval_127,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ (input/output) ꧦ    //သင်ဝႃႈ သွင်ဢၼ်ၼႆႉ ဢမ်ႇၶွပ်ႇၵၼ်ၼႆ ၶိုၼ်းပၼ် ""NO""    //ပေႃးဢမ်ႇၼၼ် ၶိုၼ်းပၼ် ""NO""    //သင်ဝႃႈ တၢင်းယၢဝ်းၶွင် လွင်ႈၶွပ်ႇၵၼ်ၼၼ်ႉ ပဵၼ် တူဝ်ၼပ်ႉဢၼ်လမ်ႇလွင်ႈၼႆၸိုင် ၶိုၼ်းပၼ်ၶေႃႈတွပ်ႇ ""YES""၊     //ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် 1 ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ။    //တူဝ်ယၢင်ႇမၼ်း လွင်ႈၸတ်းတွၼ်ႈၶွင် ၶၢဝ်းယၢမ်း (1,3) ၊ (2,4) ၼႆႉပဵၼ် (2,3)     //လွင်ႈၵိုတ်းယိုဝ်းၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈယဝ်ႉ။    //ၼႃႈၵၢၼ်သူၼႆႉတေႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ တၢင်းယၢဝ်းဢၼ်ၶွပ်ႇၵၼ်သွင်ဢၼ်ၼႆႉ     //တွၼ်ႈတႃႇ ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉဢၼ်လႂ်သေဢမ်ႇဝႃႈ မၼ်းထုၵ်ႇလီဝူၼ်ႉဝႃႈ လွင်ႈတႄႇမၼ်းၼႆႉ လဵၵ်ႉလိူဝ် ဢမ်ႇၼၼ် မိူၼ်ၵၼ်တၢင်းသုတ်းမၼ်းၼၼ်ႉယဝ်ႉ။    //ၶဝ်ႈပႃးဝႆႉ တီႈတႄႇလႄႈ တီႈသုတ်းၼၼ်ႉယဝ်ႉ။    //ၶၢဝ်းယၢမ်းဢၼ်ပၼ်ဝႆႉၼၼ်ႉ လႆႈပိၵ်ႉဢိုတ်းဝႆႉသေ ဢၼ်ၼႆႉပွင်ႇဝႃႈ ၶၢဝ်းယၢမ်း (တႄႇ၊ သုတ်း) ၼၼ်ႉ လႆႈပိၵ်ႉဢိုတ်းဝႆႉယဝ်ႉ။    //တီႈဢၼ် ၶၢဝ်းယၢမ်းဢၼ်လႂ်ဢၼ်ၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ်သွင်ဢၼ်၊ တူဝ်ယၢင်ႇမၼ်း ၶၢဝ်းယၢမ်း = (တႄႇ၊ သုတ်း) = (1, 2) ။    //သူတေလႆႈပၼ်ၶၢဝ်းယၢမ်း သွင်ပွၵ်ႈ၊    // >>> intersection(((1l, 2l)), ((2l, 3l)))
    // (""NO"")
    // >>> intersection(((-1l, 1l)), ((0l, 4l)))
    // (""NO"")
    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))
    // (""YES"")
    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {
","import scala.math._

object Problem {
  def isPrime(n: Long): Boolean = {
    if (n <= 1) return false
    if (n <= 3) return true
    if (n % 2 == 0 || n % 3 == 0) return false
    var i = 5
    while (i * i <= n) {
      if (n % i == 0 || n % (i + 2) == 0) return false
      i += 6
    }
    true
  }

  def intersection(interval1: (Long, Long), interval2: (Long, Long)): String = {
    val start = max(interval1._1, interval2._1)
    val end = min(interval1._2, interval2._2)
    if (start > end) return ""NO""

    val length = end - start
    if (isPrime(length)) ""YES"" else ""NO""
  }
}","    }
    def main(args: Array[String]) = {
    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((""NO"")));
    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((""NO"")));
    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((""YES"")));
    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((""YES"")));
    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((""NO"")));
    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((""NO"")));
    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((""NO"")));
    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((""NO"")));
    }

}
"
HumanEval_128,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //မၢႆတွင်း: return None တွၼ်ႈတႃႇ empty arr.     //တူဝ်ၼပ်ႉဢၼ်ၼိူင်ႈဢၼ်ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉ 1, -1 ဢမ်ႇၼၼ် 0 ၼၼ်ႉယဝ်ႉ။    //လွင်ႈႁူမ်ႈပွင်းၶွင် တၢင်းၼမ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၵုၼ်းလူၺ်ႈ လွင်ႈၵုၼ်းၶွင် တူဝ်ယၢင်ႇတၢင်းမူတ်းၼၼ်ႉ    //ႁဝ်းတေလႆႈပၼ်ဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ၼိူင်ႈလႄႈ ႁဝ်းတေလႆႈၶိုၼ်းမႃး    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))
    // Some(9l)
    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))
    // Some(0l)
    // >>> prodSigns((List[Long]()))
    // None
    def prodSigns(arr : List[Long]) : Option[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def prodSigns(arr: List[Long]): Option[Long] = {
    if (arr.isEmpty) return None

    val productOfSigns = arr.foldLeft(1l)((acc, num) => acc * sign(num))
    val sumOfMagnitudes = arr.map(_.abs).sum

    Some(sumOfMagnitudes * productOfSigns)
  }

  private def sign(num: Long): Long = {
    if (num > 0) 1
    else if (num < 0) -1
    else 0
  }
}","    }
    def main(args: Array[String]) = {
    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(Some(-9l)));
    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(Some(0l)));
    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(Some(-10l)));
    assert(prodSigns((List[Long]())).equals(None));
    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(Some(20l)));
    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(Some(4l)));
    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(Some(-4l)));
    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(0l)));
    }

}
"
HumanEval_129,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၶပ်ႉဝႆႉပၼ် တီႈၼႂ်း သႄး (လ်) ဢၼ် သဵၼ်ႈတၢင်းဢၼ်ဢေႇသုတ်းၼၼ်ႉ လတ်းၵႂႃႇၼၼ်ႉယဝ်ႉ။    //မၼ်းလႆႈႁပ်ႉလွင်ႈမၼ်ႈၵႅၼ်ႇဝႃႈ ၶေႃႈတွပ်ႇမၼ်းၼႆႉ ပဵၼ်ဢၼ်လဵဝ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    //lst_A[j] = lst_B[j]။    //lst_A[i] < lst_B[i] လႄႈ တွၼ်ႈတႃႇ j (1 <= j < i) ႁဝ်းမီး     //လိူဝ်သေ lst_B၊ ပေႃးဢဝ်ၶေႃႈၵႂၢမ်းတၢင်ႇဢၼ်ဝႃႈၼႆ မၼ်းမီးဝႆႉ တူဝ်ၼပ်ႉတဵမ်ဢၼ်ပဵၼ် index i (1 <= i <= k)     //ပေႃးႁဝ်းၸႂ်ႉ lst_A လႄႈ lst_B ၼႆ lst_A ၼႆႉ မၼ်းတေမီးတီႈပွင်ႇဢေႇလိူဝ်သေ lst_A ၼႆယူႇယဝ်ႉ။    //ဝၢႆးသေႁဵတ်းဝႆႉ သဵၼ်ႈမၢႆဢၼ်မီးလွင်ႈမၵ်းမၼ်ႈဝႆႉၶွင် ၵႃႈၶၼ်ၼိူဝ် သႄး (လ်) ဢၼ် A လႄႈ B ၵႂႃႇၼၼ်ႉယဝ်ႉ    //သဵၼ်ႈတၢင်း A (တၢင်းယၢဝ်း k) ၼႆႉ ပေႃးဝႃႈ     //သူဢမ်ႇၸၢင်ႈဢွၵ်ႇပႅတ်ႈတီႈၼႃႈလိၼ်။    //ဢၼ်ဢမ်ႇလူဝ်ႇပႅၵ်ႇပိူင်ႈၵၼ်) ။    //ၶႅၼ်းတေႃႈမၢႆတွင်းဝႃႈ သဵၼ်ႈတၢင်းတၢင်းဢၼ်ယၢဝ်း k ၼၼ်ႉ ပွင်ႇဝႃႈ လႅပ်ႈတေၵႂႃႇတီႈ သႄးလ် k (ဢမ်ႇၸႂ်ႈ     //cell  ၸွင်ႇတေလႆႈ    //ပေႃးလၢတ်ႈထႅင်ႈလၢႆးၼိုင်ႈ၊ သူတေၵႂႃႇၸူး သႄး (လ်) ဢၼ်ၽႄဝႆႉ ၽၢႆဢၼ်လဵဝ်ၵၼ်တင်း သူၼၼ်ႉယူႇယဝ်ႉ။    //တီႈၶၵ်ႉတွၼ်ႈလႂ်သေဢမ်ႇဝႃႈ မၼ်းတေၶၢႆႉၵႂႃႇၸူး တီႈၶၵ်ႉတွၼ်ႈဢၼ်မီးႁိမ်းႁွမ်းမၼ်းၼၼ်ႉသေ    //တေလႆႈႁႃ သဵၼ်ႈတၢင်းဢၼ်လဵၵ်ႉသုတ်း ဢၼ်မီးတၢင်းယၢဝ်း k တီႈၼႂ်းၵွင်ႉၼၼ်ႉ။    //inclusive ၼႆႉ တေဢွၵ်ႇမႃးၵမ်းလဵဝ် တီႈၼႂ်းၶွပ်ႇၶွင် grid ၼၼ်ႉယူႇယဝ်ႉ။    //သႄး (လ်) ၶွင်ၵရဵၵ်ႉ (လ်) ၼႆႉ မၼ်းမီးၵႃႈၶၼ်ဢၼ်ၼိူင်ႈယူႇယဝ်ႉ။ တူဝ်ၼပ်ႉတဵမ်ၵူႈဢၼ်ဢၼ် ၼႂ်းၵႄႈ [1, N * N] ၼၼ်ႉ    //ပေႃးဝႃႈမီးဝႆႉ grid ဢၼ်ၼိူင်ႈဢၼ်ဢၼ်ဢၼ်မီး ထႅဝ် N လႄႈ ၵႅၼ် N (N >= 2) လႄႈ တူဝ်ၼပ်ႉတဵမ် k ဢၼ်တဵမ်ထူၼ်ႈၼၼ်ႉၼႆ     // >>> minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l))
    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))
    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l))
    // (List[Long](1l.toLong))
    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def minPath(grid: List[List[Long]], k: Long): List[Long] = {
    val n = grid.length
    val directions = List((0, 1), (1, 0), (0, -1), (-1, 0))

    def isValid(x: Int, y: Int): Boolean = x >= 0 && y >= 0 && x < n && y < n

    def dfs(x: Int, y: Int, path: List[Long]): List[Long] = {
      if (path.length == k) return path
      var minPath: List[Long] = List.fill(k)(Long.MaxValue)
      for ((dx, dy) <- directions) {
        val nx = x + dx
        val ny = y + dy
        if (isValid(nx, ny)) {
          val newPath = dfs(nx, ny, path :+ grid(nx)(ny))
          if (lexCompare(newPath, minPath)) {
            minPath = newPath
          }
        }
      }
      minPath
    }

    def lexCompare(a: List[Long], b: List[Long]): Boolean = {
      a.zip(b).find { case (x, y) => x != y } match {
        case Some((x, y)) => x < y
        case None => false
      }
    }

    var minPathOverall = List.fill(k)(Long.MaxValue)
    for {
      i <- 0 until n
      j <- 0 until n
    } {
      val startingPath = List(grid(i)(j))
      val currentPath = dfs(i, j, startingPath)
      if (lexCompare(currentPath, minPathOverall)) {
        minPathOverall = currentPath
      }
    }
    minPathOverall
  }
}","    }
    def main(args: Array[String]) = {
    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));
    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));
    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));
    assert(minPath((List[List[Long]](List[Long](6l.toLong, 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong, 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));
    assert(minPath((List[List[Long]](List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong, 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong, 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 1l.toLong))));
    assert(minPath((List[List[Long]](List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));
    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));
    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));
    assert(minPath((List[List[Long]](List[Long](6l.toLong, 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong, 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));
    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));
    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));
    }

}
"
HumanEval_130,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //တူဝ်ၼပ်ႉ n + 1 ဢၼ်ဢွၼ်တၢင်းသုတ်း ၶွင် လွင်ႈၶပ်ႉၸႅၼ်ႇ Tribonacci ၼၼ်ႉယဝ်ႉ။    //ပေႃးႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ် n ၼႆ ႁဝ်းတေလႆႈၶိုၼ်း သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ထွၼ်ၼၼ်ႉ    //= 2 + 3 + 3 = 8    //tri(3) = tri(2) + tri(1) + tri(4)     //tri(4) = 3     //tri(2) = 1 + (2 / 2) = 2     //တူဝ်ယၢင်ႇမၼ်း-    //tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၼိူင်ႈၼႆယဝ်ႉ။    //tri (n) = 1 + n / 2၊ သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်တူဝ်ၵူပ်ႉၼႆယဝ်ႉ။    //tri(1) = 3     //လွင်ႈၸႅၵ်ႇၽႄၸႆႉႁေႇ Tribonacci ၼႆႉ မၵ်းမၼ်ႈလူၺ်ႈ လွင်ႈပဵၼ်မႃးၶိုၼ်း:    //ၵူၺ်းၵႃႈ ဢၼ်ၵူၼ်းႁဝ်းဢမ်ႇႁူႉၼၼ်ႉတႄႉ ပဵၼ်လွင်ႈၸႅၵ်ႇမႅင်ႇၶွင် Tribonacci ၼၼ်ႉယဝ်ႉ။    //ၵူၼ်းၵူႈၵေႃႉႁူႉၸၵ်း လွင်ႈထႅဝ် Fibonacci မၼ်းလႆႈထုၵ်ႇလဵပ်ႈႁဵၼ်းဝႆႉႁၢဝ်ႈႁႅင်း လူၺ်ႈ ၽူႈလူင်ႉလႅၼ်ႇပၢႆးၼပ်ႉၶဝ် ၼ်ႂးပီႊ ႐႐႐ ၼၼ်ႉယဝ်ႉ။    // >>> tri((3l))
    // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))
    def tri(n : Long) : List[Long] = {
","import scala.collection.mutable.ListBuffer

object Problem {
  def tri(n: Long): List[Long] = {
    // Initialize list with the first element of the Tribonacci sequence
    val tribonacciSeq = ListBuffer[Long](3)

    // Generate remaining elements up to the nth element
    for (i <- 1L to n) {
      if (i % 2 == 0) {
        // If even, the formula is 1 + n / 2
        tribonacciSeq.append(1 + i / 2)
      } else {
        // If odd, the formula is tri(n - 1) + tri(n - 2) + tri(n + 1)
        // tri(n + 1) is handled as we iterate further
        val tri_i_minus_1 = if (i - 1 >= 0) tribonacciSeq((i - 1).toInt) else 0
        val tri_i_minus_2 = if (i - 2 >= 0) tribonacciSeq((i - 2).toInt) else 0
        val tri_i_plus_1 = if (i + 1 <= n) 1 + (i + 1) / 2 else 0 // calculated as if the next is even
        tribonacciSeq.append(tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1)
      }
    }

    // Return as a list
    tribonacciSeq.toList
  }

  // Test examples
  def main(args: Array[String]): Unit = {
    println(tri(3)) // List(3, 2, 8)
  }
}","    }
    def main(args: Array[String]) = {
    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));
    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));
    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));
    assert(tri((6l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));
    assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));
    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));
    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong))));
    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));
    assert(tri((0l)).equals((List[Long](1l.toLong))));
    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));
    }

}
"
HumanEval_131,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ၶိုၼ်းပၼ် 0 သင်ဝႃႈ တူဝ်ၼပ်ႉတင်းမူတ်းပဵၼ်တူဝ်ၸႅၼ်ႇၼၼ်ႉယဝ်ႉ။    //ပေႃးဝႃႈလႆႈပၼ် တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ n ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၵုၼ်း တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉမႃး။    // >>> digits((1l))
    // (1l)
    // >>> digits((4l))
    // (0l)
    // >>> digits((235l))
    // (15l)
    def digits(n : Long) : Long = {
","def digits(n: Long): Long = {
    val product = n.toString.map(_.asDigit).filter(_ % 2 != 0).product
    if (product == 1 && n.toString.forall(_.asDigit % 2 == 0)) 0L else product
}","    }
    def main(args: Array[String]) = {
    assert(digits((5l)) == (5l));
    assert(digits((54l)) == (5l));
    assert(digits((120l)) == (1l));
    assert(digits((5014l)) == (5l));
    assert(digits((98765l)) == (315l));
    assert(digits((5576543l)) == (2625l));
    assert(digits((2468l)) == (0l));
    }

}
"
HumanEval_132,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တီႈဢေႇသုတ်းမၼ်း သဵၼ်ႈမၢႆဢၼ်ၼိုင်ႈ ၼႂ်းၸႄႈတွၼ်ႈၼၼ်ႉ လႆႈထုၵ်ႇသႂ်ႇဝႆႉတီႈၼႂ်းၵွင်ႉမၼ်းယဝ်ႉ။    //Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် true သင်ၸိူဝ်ႉဝႃႈ မၼ်းမီးဝႆႉ brackets ဢၼ်မၢၼ်ႇမႅၼ်ႈၼႆၵူၺ်း    //ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်ပႃး square brackets ၼၼ်ႉသေ သႂ်ႇပၼ်။    // >>> isNested((""[[]]""))
    // (true)
    // >>> isNested((""[]]]]]]][[[[[]""))
    // (false)
    // >>> isNested((""[][]""))
    // (false)
    // >>> isNested((""[]""))
    // (false)
    // >>> isNested((""[[][]]""))
    // (true)
    // >>> isNested((""[[]][[""))
    // (true)
    def isNested(string : String) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def isNested(string: String): Boolean = {
    var stack = new Stack[Char]()
    var nested = false

    for (char <- string) {
      char match {
        case '[' => stack.push(char)
        case ']' =>
          if (stack.nonEmpty) {
            stack.pop()
            if (stack.nonEmpty) {
              nested = true
            }
          }
      }
      if (nested) return true
    }

    false
  }
}","    }
    def main(args: Array[String]) = {
    assert(isNested((""[[]]"")) == (true));
    assert(isNested((""[]]]]]]][[[[[]"")) == (false));
    assert(isNested((""[][]"")) == (false));
    assert(isNested((""[]"")) == (false));
    assert(isNested((""[[[[]]]]"")) == (true));
    assert(isNested((""[]]]]]]]]]]"")) == (false));
    assert(isNested((""[][][[]]"")) == (true));
    assert(isNested((""[[]"")) == (false));
    assert(isNested((""[]]"")) == (false));
    assert(isNested((""[[]][["")) == (true));
    assert(isNested((""[[][]]"")) == (true));
    assert(isNested(("""")) == (false));
    assert(isNested((""[[[[[[[["")) == (false));
    assert(isNested((""]]]]]]]]"")) == (false));
    }

}
"
HumanEval_133,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //ၶႅပ်းႁၢင်ႈဢၼ်မီးဝႆႉၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ ႁႂ်ႈပဵၼ်ဢၼ်ၸီႉၸမ်ႈဝႆႉ တီႈၼိူဝ်သုတ်း int ((ceiling)) ဢွၼ်တၢင်းသုတ်း။    //တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉသီႇၸဵင်ႇ တီႈၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ၊     //သူတေလႆႈပၼ် သဵၼ်ႈမၢႆမၢႆ မၢႆလပ်ႉ။    // >>> lst((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)))
    // (14l)
    // >>> lst((List[Float](1.0f.toFloat, 4.0f.toFloat, 9.0f.toFloat)))
    // (98l)
    // >>> lst((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))
    // (84l)
    // >>> lst((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat)))
    // (29l)
    // >>> lst((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat)))
    // (6l)
    def sumSquares(lst : List[Float]) : Long = {
","import scala.math._

object Problem {
  def sumSquares(lst: List[Float]): Long = {
    lst.map(x => ceil(x.toDouble).toLong)
      .map(x => x * x)
      .sum
  }

  // Example usage, you can test the function with the given examples:
  def main(args: Array[String]): Unit = {
    println(sumSquares(List(1.0f, 2.0f, 3.0f))) // Output: 14
    println(sumSquares(List(1.0f, 4.0f, 9.0f))) // Output: 98
    println(sumSquares(List(1.0f, 3.0f, 5.0f, 7.0f))) // Output: 84
    println(sumSquares(List(1.4f, 4.2f, 0.0f))) // Output: 29
    println(sumSquares(List(-2.4f, 1.0f, 1.0f))) // Output: 6
  }
}","    }
    def main(args: Array[String]) = {
    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));
    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));
    assert(sumSquares((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));
    assert(sumSquares((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat))) == (29l));
    assert(sumSquares((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat))) == (6l));
    assert(sumSquares((List[Float](100.0f.toFloat, 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));
    assert(sumSquares((List[Float](10000.0f.toFloat, 10000.0f.toFloat))) == (200000000l));
    assert(sumSquares((List[Float](-1.4f.toFloat, 4.6f.toFloat, 6.3f.toFloat))) == (75l));
    assert(sumSquares((List[Float](-1.4f.toFloat, 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));
    assert(sumSquares((List[Float](0.0f.toFloat))) == (0l));
    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));
    assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) == (2l));
    }

}
"
HumanEval_134,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //မၢႆတွင်း: ""ၶေႃႈၵႂၢမ်း"" ၼႆႉ ပဵၼ်ၸုမ်းတူဝ်လိၵ်ႈ ဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈႁွင်ႈ။    //ၶေႃႈၵႂၢမ်းဢၼ်ၼိုင်ႈ၊ ၶေႃႈၵႂၢမ်းဢၼ်ၼိုင်ႈ ဢၼ်ၽိတ်း။    //တူဝ်လိၵ်ႈၸီႉၼႆႉ ပဵၼ်တူဝ်လိၵ်ႈ တူဝ်လိၵ်ႈၸီႉ လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်လိၵ်ႈၸီႉ     //ၵေႃႇသၢင်ႈပၼ် တူဝ်ဢိင် ဢၼ်တေၶိုၼ်းပၼ် true သင်တူဝ်လိၵ်ႈလိုၼ်းသုတ်း     // >>> checkIfLastCharIsALetter((""apple pie""))
    // (false)
    // >>> checkIfLastCharIsALetter((""apple pi e""))
    // (true)
    // >>> checkIfLastCharIsALetter((""apple pi e ""))
    // (false)
    // >>> checkIfLastCharIsALetter((""""))
    // (false)
    def checkIfLastCharIsALetter(txt : String) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def checkIfLastCharIsALetter(txt: String): Boolean = {
        if (txt.isEmpty) return false
        val trimmed = txt.trim
        if (trimmed.isEmpty) return false
        val parts = trimmed.split("" "")
        val lastChars = parts.map(_.last)
        if (lastChars.isEmpty) return false
        val lastChar = trimmed.last
        lastChars.contains(lastChar) && lastChar.isLetter
    }
}","    }
    def main(args: Array[String]) = {
    assert(checkIfLastCharIsALetter((""apple"")) == (false));
    assert(checkIfLastCharIsALetter((""apple pi e"")) == (true));
    assert(checkIfLastCharIsALetter((""eeeee"")) == (false));
    assert(checkIfLastCharIsALetter((""A"")) == (true));
    assert(checkIfLastCharIsALetter((""Pumpkin pie "")) == (false));
    assert(checkIfLastCharIsALetter((""Pumpkin pie 1"")) == (false));
    assert(checkIfLastCharIsALetter(("""")) == (false));
    assert(checkIfLastCharIsALetter((""eeeee e "")) == (false));
    assert(checkIfLastCharIsALetter((""apple pie"")) == (false));
    assert(checkIfLastCharIsALetter((""apple pi e "")) == (false));
    }

}
"
HumanEval_135,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //လွင်ႈဢၼ်လႆႈၽိတ်းပိူင်ႈၵၼ်ၼၼ်ႉ    //ပေႃးဢမ်ႇမီး တူဝ်ထႅဝ်ဢၼ်ၼႆႉၼႆ ၶိုၼ်းဢဝ် - 1 မႃး။ သဵၼ်ႈမၢႆဢၼ်ပၼ်ဝႆႉၼၼ်ႉ တေဢမ်ႇပႃး     //ဢမ်ႇလႆႈယႂ်ႇလိူဝ် ဢမ်ႇၼၼ် ဢမ်ႇလႆႈၽဵင်ႇပဵင်းၵၼ်တင်း တူဝ်ၼပ်ႉဢၼ်မီးဝႆႉၸမ်မၼ်းၼၼ်ႉ သင်ဝႃႈ    //ႁဵတ်းပၼ် function ဢၼ်ၼိူင်ႈ ဢၼ်တေၶိုၼ်းပၼ် index ဢၼ်ယႂ်ႇသုတ်းၶွင် ၶူဝ်းၶွင်ဢၼ်ၼိူင်ႈ ဢၼ်တေလႆႈၸႂ်ႉတိုဝ်း     // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))
    // (3l)
    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))
    // (-1l)
    def canArrange(arr : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._
object Problem {
  def canArrange(arr: List[Long]): Long = {
    for (i <- arr.indices.drop(1)) {
      if (arr(i) < arr(i - 1)) return i.toLong
    }
    -1L
  }
}","    }
    def main(args: Array[String]) = {
    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));
    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));
    assert(canArrange((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));
    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));
    assert(canArrange((List[Long]())) == (-1l));
    }

}
"
HumanEval_136,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //သင်ဢမ်ႇမီး တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇမီးလွင်ႈထွၼ် ဢမ်ႇၼၼ် ဢၼ်မီးလွင်ႈထွၼ်ၼႆ ၶိုၼ်းဢဝ်မႃးၶိုၼ်းမိူၼ်ၼင်ႇ None    //တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇ ၼႂ်းသဵၼ်ႈမၢႆ။    //တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇတဵမ်ၼၼ်ႉ ဢၼ်ယႂ်ႇသေပိူၼ်ႈ လႄႈ b ၼႆႉ ပဵၼ်ဢၼ်လဵၵ်ႉသေပိူၼ်ႈ    //ႁဵတ်းပၼ် function ဢၼ်ၶိုၼ်းပၼ် tuple (a, b) တီႈဢၼ် 'a' ပဵၼ်     // >>> largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))
    // (Some(None), Some(1l))
    // >>> largestSmallestIntegers((List[Long]()))
    // (Some(None), Some(None))
    // >>> largestSmallestIntegers((List[Long](0l.toLong)))
    // (Some(None), Some(None))
    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def largestSmallestIntegers(lst: List[Long]): Tuple2[Option[Long], Option[Long]] = {
    val negativeIntegers = lst.filter(_ < 0)
    val positiveIntegers = lst.filter(_ > 0)

    val largestNegative = if (negativeIntegers.nonEmpty) Some(negativeIntegers.max) else None
    val smallestPositive = if (positiveIntegers.nonEmpty) Some(positiveIntegers.min) else None

    (largestNegative, smallestPositive)
  }
}","    }
    def main(args: Array[String]) = {
    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));
    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));
    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));
    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));
    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));
    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));
    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None), Some(None))));
    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));
    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));
    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, 1l.toLong))).equals((-3l, 1l)));
    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));
    }

}
"
HumanEval_138,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //ထတ်းသၢင်ႈတူၺ်းဝႃႈ တူဝ်ၼပ်ႉ n ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ ၸွင်ႇတေတႅမ်ႈလႆႈဝႃႈ ပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ႁူမ်ႈၵၼ်ဝႆႉ တူဝ်ၼပ်ႉသီႇတူဝ် ဢၼ်ၸၢပ်ႈဝႆႉၼၼ်ႉယူႇႁႃႉၼႆယူႇ    // >>> isEqualToSumEven((4l))
    // (false)
    // >>> isEqualToSumEven((6l))
    // (false)
    // >>> isEqualToSumEven((8l))
    // (true)
    def isEqualToSumEven(n : Long) : Boolean = {
","def isEqualToSumEven(n: Long): Boolean = {
    // Explanation: A number is the sum of 4 positive even numbers if it is at least 8 and even.
    n >= 8 && n % 2 == 0
  }
}","    }
    def main(args: Array[String]) = {
    assert(isEqualToSumEven((4l)) == (false));
    assert(isEqualToSumEven((6l)) == (false));
    assert(isEqualToSumEven((8l)) == (true));
    assert(isEqualToSumEven((10l)) == (true));
    assert(isEqualToSumEven((11l)) == (false));
    assert(isEqualToSumEven((12l)) == (true));
    assert(isEqualToSumEven((13l)) == (false));
    assert(isEqualToSumEven((16l)) == (true));
    }

}
"
HumanEval_139,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //တီႈဢၼ် n > 0     //brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!     //Brazil ၼႆႉ လႆႈမၵ်းမၼ်ႈဝႆႉဝႃႈ ပဵၼ် factorial ၼႆသေ ပဵၼ်ဝႆႉၼင်ႇၼႆယဝ်ႉ။    // >>> specialFactorial((4l))
    // (288l)
    // The function will receive an integer as input and should return the special
    // factorial of this integer.
    def specialFactorial(n : Long) : Long = {
","def specialFactorial(n: Long): Long = {
        def factorial(x: Long): Long = {
            if (x == 0 || x == 1) 1L
            else x * factorial(x - 1)
        }

        (1L to n).map(factorial).product
    }
}","    }
    def main(args: Array[String]) = {
    assert(specialFactorial((4l)) == (288l));
    assert(specialFactorial((5l)) == (34560l));
    assert(specialFactorial((7l)) == (125411328000l));
    assert(specialFactorial((1l)) == (1l));
    }

}
"
HumanEval_140,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ယဝ်ႉၵေႃႈ ဢဝ်တူဝ် -  သႂ်ႇတႅၼ်းတီႈ တူဝ်ဢၼ်ဢမ်ႇပႃးတူဝ်ၼၼ်ႉ။    //လႄႈ သင်ဝႃႈ သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉၼၼ်ႉ မီးဝႆႉ တူဝ်ဢၼ်ဢမ်ႇမိူၼ်ၵၼ် 2 တူဝ်လိူဝ်ၼၼ်ႉၼႆၸိုင်    //ပေႃးဝႃႈႁဝ်းလႆႈပၼ် string text ၼႆ ဢဝ် တူဝ်လိၵ်ႈဢၼ်ၸီႉဝႆႉတႂ်ႈၼႆႉ လႅၵ်ႈလၢႆႈပၼ်တီႈ space တင်းမူတ်း၊    // >>> fixSpaces(("" Example""))
    // (""Example"")
    // >>> fixSpaces(("" Example 1""))
    // (""Example_1"")
    // >>> fixSpaces(("" Example 2""))
    // (""_Example_2"")
    // >>> fixSpaces(("" Example 3""))
    // (""_Example-3"")
    def fixSpaces(text : String) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def fixSpaces(text: String): String = {
    val result = new StringBuilder()
    var spaceCount = 0
    var leadingSpace = true
    
    for (ch <- text) {
      if (ch == ' ') {
        spaceCount += 1
      } else {
        if (spaceCount > 0) {
          if (leadingSpace && result.isEmpty) {
            result.append('_')
          } else if (spaceCount == 1) {
            result.append('_')
          } else if (spaceCount > 1) {
            result.append('-')
          }
          spaceCount = 0
        }
        result.append(ch)
        leadingSpace = false
      }
    }
    
    if (spaceCount == 1) {
      result.append('_')
    } else if (spaceCount > 1) {
      result.append('-')
    }
    
    result.toString()
  }
}","    }
    def main(args: Array[String]) = {
    assert(fixSpaces((""Example"")).equals((""Example"")));
    assert(fixSpaces((""Mudasir Hanif "")).equals((""Mudasir_Hanif_"")));
    assert(fixSpaces((""Yellow Yellow  Dirty  Fellow"")).equals((""Yellow_Yellow__Dirty__Fellow"")));
    assert(fixSpaces((""Exa   mple"")).equals((""Exa-mple"")));
    assert(fixSpaces((""   Exa 1 2 2 mple"")).equals((""-Exa_1_2_2_mple"")));
    }

}
"
HumanEval_141,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //- substring ဝၢႆးသေ dot ၼၼ်ႉ ထုၵ်ႇလီပဵၼ်ဢၼ်ၼိူင်ႈၼႂ်းဢၼ်ၼႆႉ: ['txt', 'exe', 'dll']     //တူဝ်လိၵ်ႈ လႅတ်ႇတိၼ်ႇ (Latin alphabet) ('a'-'z' လႄႈ 'A'-'Z') ။    //- သၢႆထႅဝ်ဢၼ်မီးၼႃႈတႃတႃတႃၼၼ်ႉ ဢမ်ႇထုၵ်ႇလီပဵၼ်ဢၼ်ဢမ်ႇမီးတီႈသုတ်း လႄႈ မၼ်းတေတႄႇလူၺ်ႈ တူဝ်လိၵ်ႈဢၼ်လုၵ်ႉတီႈ     //- ၸိုဝ်ႈၾၢႆႇဢၼ်ပႃးဝႆႉ တူၺ်းတီႈၼိူင်ႈဢၼ်ၼၼ်ႉ '.'     //- ၸိုဝ်ႈၾၢႆႇဢၼ်တေတၢင်ႇၼၼ်ႉ တေဢမ်ႇလႆႈမီးတူဝ်ၼပ်ႉလိူဝ်သေသၢမ်တူဝ် (0-9) ။    //လႆႈႁူပ်ႉထူပ်းၵၼ်     //ၸိုဝ်ႈၾၢႆႇဢၼ်ၼိုင်ႈၼႆႉ တေလႆႈဝႃႈပဵၼ်ၸိုဝ်ႈဢၼ်ထုၵ်ႇမႅၼ်ႈယူႇ သင်ဝႃႈ မၼ်းမီးလွင်ႈမၵ်းမၼ်ႈတင်းသဵင်ႈ ၼင်ႇပႃႈတႂ်ႈၼႆႉယဝ်ႉ     //'Yes' သင်ဝႃႈ ၸိုဝ်ႈၾၢႆႇဢၼ်ပၼ်ဝႆႉၼၼ်ႉ မၢၼ်ႇမႅၼ်ႈၼႆလႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ ၶိုၼ်းပၼ်ၶေႃႈၵႂၢမ်း 'No'    //ႁဵတ်းပၼ် function ဢၼ်ဢဝ် string ဢၼ်တၢင်တူဝ်ၸိုဝ်ႈ file သေ ၶိုၼ်းဢဝ်မႃးၶိုၼ်း    // >>> fileNameCheck((""example.txt""))
    // (""Yes"")
    // >>> fileNameCheck((""1example.dll""))
    // (""No"")
    def fileNameCheck(file_name : String) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def fileNameCheck(file_name: String): String = {
    val validExtensions = Set(""txt"", ""exe"", ""dll"")
    val dotIndex = file_name.lastIndexOf('.')

    if (dotIndex == -1) return ""No""

    val beforeDot = file_name.substring(0, dotIndex)
    val afterDot = file_name.substring(dotIndex + 1)

    if (beforeDot.isEmpty || !beforeDot.head.isLetter) return ""No""

    val digitCount = beforeDot.count(_.isDigit)
    if (digitCount > 3) return ""No""

    if (!validExtensions.contains(afterDot)) return ""No""

    ""Yes""
  }

  def main(args: Array[String]): Unit = {
    println(fileNameCheck(""example.txt"")) // ""Yes""
    println(fileNameCheck(""1example.dll"")) // ""No""
    println(fileNameCheck(""test123.exe"")) // ""Yes""
    println(fileNameCheck("".hidden.txt"")) // ""No""
    println(fileNameCheck(""file..txt"")) // ""No""
  }
}","    }
    def main(args: Array[String]) = {
    assert(fileNameCheck((""example.txt"")).equals((""Yes"")));
    assert(fileNameCheck((""1example.dll"")).equals((""No"")));
    assert(fileNameCheck((""s1sdf3.asd"")).equals((""No"")));
    assert(fileNameCheck((""K.dll"")).equals((""Yes"")));
    assert(fileNameCheck((""MY16FILE3.exe"")).equals((""Yes"")));
    assert(fileNameCheck((""His12FILE94.exe"")).equals((""No"")));
    assert(fileNameCheck((""_Y.txt"")).equals((""No"")));
    assert(fileNameCheck((""?aREYA.exe"")).equals((""No"")));
    assert(fileNameCheck((""/this_is_valid.dll"")).equals((""No"")));
    assert(fileNameCheck((""this_is_valid.wow"")).equals((""No"")));
    assert(fileNameCheck((""this_is_valid.txt"")).equals((""Yes"")));
    assert(fileNameCheck((""this_is_valid.txtexe"")).equals((""No"")));
    assert(fileNameCheck((""#this2_i4s_5valid.ten"")).equals((""No"")));
    assert(fileNameCheck((""@this1_is6_valid.exe"")).equals((""No"")));
    assert(fileNameCheck((""this_is_12valid.6exe4.txt"")).equals((""No"")));
    assert(fileNameCheck((""all.exe.txt"")).equals((""No"")));
    assert(fileNameCheck((""I563_No.exe"")).equals((""Yes"")));
    assert(fileNameCheck((""Is3youfault.txt"")).equals((""Yes"")));
    assert(fileNameCheck((""no_one#knows.dll"")).equals((""Yes"")));
    assert(fileNameCheck((""1I563_Yes3.exe"")).equals((""No"")));
    assert(fileNameCheck((""I563_Yes3.txtt"")).equals((""No"")));
    assert(fileNameCheck((""final..txt"")).equals((""No"")));
    assert(fileNameCheck((""final132"")).equals((""No"")));
    assert(fileNameCheck((""_f4indsartal132."")).equals((""No"")));
    assert(fileNameCheck(("".txt"")).equals((""No"")));
    assert(fileNameCheck((""s."")).equals((""No"")));
    }

}
"
HumanEval_142,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //လႅၵ်ႈလၢႆႈပၼ် လွင်ႈသႂ်ႇၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်တူဝ်ၼပ်ႉမၼ်းဢမ်ႇမိူၼ်ၵၼ်တင်း 3 ဢမ်ႇၼၼ် 4 ၼၼ်ႉသေယဝ်ႉ ၽွၼ်ႉၸေႃႇၵျီႇၼႆႉ တေလႆႈၶိုၼ်းပၼ် လွင်ႈသႂ်ႇတင်းမူတ်းၼၼ်ႉယဝ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်ၼမ်လိူဝ် 3 လႄႈ တေဢဝ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ ႁဵတ်းပဵၼ် တူဝ်ၼပ်ႉသၢမ်တူဝ် သင်ဝႃႈ တူဝ်ၼပ်ႉဢၼ်ၶဝ်ႈမႃးၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉၼမ်လိူဝ် 4 လႄႈ ဢမ်ႇၸႂ်ႈတူဝ်ၼပ်ႉၼမ်လိူဝ် 3 ၼႆၸိုင် ၽွၼ်ႉၸေႃႇၵျီႇၼႆႉ တေဢမ်ႇႁဵတ်းႁႂ်ႈ     //Function ၼႆႉတေဢဝ် တူဝ်ၼပ်ႉတဵမ်တင်းမူတ်း ဢၼ်ပႃးၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉသေ ႁဵတ်းပဵၼ် quad ဢၼ်ပႃးတူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ သင်ဝႃႈ index မၼ်းပဵၼ်     //""     // >>> lst
    // List[Long](1l.toLong, 2l.toLong, 3l.toLong)
    // >>> lst
    // List[Long]()
    // >>> lst
    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)
    def sumSquares(lst : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def sumSquares(lst: List[Long]): Long = {
        lst.zipWithIndex.map { case (value, index) =>
            if (index % 3 == 0) {
                value * value
            } else if (index % 4 == 0) {
                value * value * value
            } else {
                value
            }
        }.sum
    }
}","    }
    def main(args: Array[String]) = {
    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));
    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));
    assert(sumSquares((List[Long]())) == (0l));
    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));
    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong))) == (-3l));
    assert(sumSquares((List[Long](0l.toLong))) == (0l));
    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));
    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));
    assert(sumSquares((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong))) == (0l));
    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));
    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));
    }

}
"
HumanEval_143,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ 1:    //လွင်ႈၸႅၼ်ႇထႅဝ်လိၵ်ႈ ၼႂ်း string ဢၼ်မႂ်ႇၼႆႉ ထုၵ်ႇလီမိူၼ်ၵၼ်တင်း ဢၼ်ၵဝ်ႇၼၼ်ႉ။    //ဢၼ်တၢင်းယၢဝ်းမၼ်းပဵၼ် တူဝ်ၼပ်ႉၸႅတ်ႈၸၢင်ႇ၊     //ယဝ်ႉၵေႃႈ တေလႆႈၶိုၼ်းပၼ် string ဢၼ်ပႃးၶေႃႈၵႂၢမ်း တီႈၼႂ်းၶေႃႈၵႂၢမ်းငဝ်ႈမၼ်း၊     //ၼႂ်းၶေႃႈၵႂၢမ်းၼၼ်ႉ မီးဝႆႉ ၶေႃႈၵႂၢမ်းဢၼ်ၸႅၵ်ႇဝႆႉလူၺ်ႈ သဵင်ၵွင်၊    //ႄလႈ သူတေလႆႈပၼ် string ဢၼ်တႅၼ်းတၢင်ၶေႃႈၵႂၢမ်းဢၼ်ၼိူင်ႈ    // >>> wordsInSentence((""This is a test""))
    // (""is"")
    // Example 2:
    // >>> wordsInSentence((""lets go for swimming""))
    // (""go for"")
    // Constraints:
    // * 1 <= len(sentence) <= 100
    // * sentence contains only letters
    def wordsInSentence(sentence : String) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def isPrime(n: Int): Boolean = {
    if (n < 2) false
    else if (n == 2) true
    else !(2 to sqrt(n).toInt).exists(n % _ == 0)
  }

  def wordsInSentence(sentence: String): String = {
    val words = sentence.split("" "")
    val primeLengthWords = words.filter(word => isPrime(word.length))
    primeLengthWords.mkString("" "")
  }
  
  // Example usage:
  // println(wordsInSentence(""This is a test""))
  // println(wordsInSentence(""lets go for swimming""))
}","    }
    def main(args: Array[String]) = {
    assert(wordsInSentence((""This is a test"")).equals((""is"")));
    assert(wordsInSentence((""lets go for swimming"")).equals((""go for"")));
    assert(wordsInSentence((""there is no place available here"")).equals((""there is no place"")));
    assert(wordsInSentence((""Hi I am Hussein"")).equals((""Hi am Hussein"")));
    assert(wordsInSentence((""go for it"")).equals((""go for it"")));
    assert(wordsInSentence((""here"")).equals(("""")));
    assert(wordsInSentence((""here is"")).equals((""is"")));
    }

}
"
HumanEval_144,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //ႁဝ်းၸၢင်ႈဝူၼ်ႉဝႃႈ x, လႄႈ n ၼႆႉပဵၼ် တူဝ်ၼပ်ႉပုၼ်ႈဢၼ်ထုၵ်ႇမႅၼ်ႈ လႄႈ ဢမ်ႇမီးသုၼ်ပဵၼ် တူဝ်ၼပ်ႉၸႅၵ်ႇ။    //တီႈဢၼ် တူဝ်ၼပ်ႉလႄႈ တူဝ်ၼပ်ႉဢၼ်ပႃး တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ဝႆႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ဝႆႉၼၼ်ႉယဝ်ႉ။    //x လႄႈ n ၼႆႉ ပဵၼ်တူဝ်တႅၼ်း တူဝ်ၼပ်ႉသွၼ်ႇ ၶွင် တူဝ်ၼပ်ႉပုၼ်ႈသေ မီးပိူင်ၾၢင်ၼင်ႇၼႆယဝ်ႉ။    //x * n ၼႆႉ ပေႃးဝႃႈ x * n ၼႆႉ ပဵၼ်တူဝ်ၼပ်ႉတဵမ် လႄႈ false ၼႆၸိုင် တူဝ်ဢိင်ၼႆႉ တေၶိုၼ်းပၼ် true    //ၼႃႈၵၢၼ်ၶွင်ႁဝ်းၼႆႉ ပဵၼ်တႃႇတေႁဵတ်းသၢင်ႈ တူဝ်ဢိင်ဢၼ်တေႁဵတ်းႁႂ်ႈ လွင်ႈလၢတ်ႈဢွၵ်ႇၼၼ်ႉ ငၢႆႈငၢႆႈ။    // >>> simplify((""1/5""), (""5/1""))
    // (true)
    // >>> simplify((""1/6""), (""2/1""))
    // (false)
    // >>> simplify((""7/10""), (""10/2""))
    // (false)
    def simplify(x : String, n : String) : Boolean = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def simplify(x: String, n: String): Boolean = {
    def parseFraction(fraction: String): (Int, Int) = {
      val parts = fraction.split(""/"")
      (parts(0).toInt, parts(1).toInt)
    }

    val (numX, denX) = parseFraction(x)
    val (numN, denN) = parseFraction(n)

    val multipliedNumerator = numX * numN
    val multipliedDenominator = denX * denN

    multipliedNumerator % multipliedDenominator == 0
  }
}","    }
    def main(args: Array[String]) = {
    assert(simplify((""1/5""), (""5/1"")) == (true));
    assert(simplify((""1/6""), (""2/1"")) == (false));
    assert(simplify((""5/1""), (""3/1"")) == (true));
    assert(simplify((""7/10""), (""10/2"")) == (false));
    assert(simplify((""2/10""), (""50/10"")) == (true));
    assert(simplify((""7/2""), (""4/2"")) == (true));
    assert(simplify((""11/6""), (""6/1"")) == (true));
    assert(simplify((""2/3""), (""5/2"")) == (false));
    assert(simplify((""5/2""), (""3/5"")) == (false));
    assert(simplify((""2/4""), (""8/4"")) == (true));
    assert(simplify((""2/4""), (""4/2"")) == (true));
    assert(simplify((""1/5""), (""5/1"")) == (true));
    assert(simplify((""1/5""), (""1/5"")) == (false));
    }

}
"
HumanEval_145,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //ၸႅၵ်ႇမႅင်ႇၶဝ်ၸွမ်းၼင်ႇ သဵၼ်ႈမၢႆၶဝ် တီႈၼႂ်းသဵၼ်ႈမၢႆငဝ်ႈငႃႇၼၼ်ႉယဝ်ႉ။    //မၢႆတွင်း: သင်ဝႃႈ မီးဝႆႉ ထႅမ်းပလဵၵ်ႉတၢင်းၼမ် ဢၼ်တူဝ်ၼပ်ႉမၼ်းမိူၼ်ၵၼ်ၼႆ    //ၸွမ်းၼင်ႇ တူဝ်ၼပ်ႉတူဝ်ၼပ်ႉဢၼ်တဵမ်မႃးၼၼ်ႉသေ ၶၢႆႉသႂ်ႇၶဝ်ႈ တီႈၼႂ်း တူဝ်ၼပ်ႉဢၼ်တဵမ်မႃးၼၼ်ႉလႄႈ။    //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ၸႅၵ်ႇပၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ပၼ်ဝႆႉၼၼ်ႉ    // >>> orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))
    // (List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))
    // >>> orderByPoints((List[Long]()))
    // (List[Long]())
    def orderByPoints(nums : List[Long]) : List[Long] = {
","def orderByPoints(nums: List[Long]): List[Long] = {
    def digitSum(n: Long): Int = n.abs.toString.map(_.asDigit).sum
    
    nums.zipWithIndex
      .sortBy { case (num, index) => (digitSum(num), index) }
      .map(_._1)
  }
}","    }
    def main(args: Array[String]) = {
    assert(orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));
    assert(orderByPoints((List[Long](1234l.toLong, 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong, 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong, 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));
    assert(orderByPoints((List[Long]())).equals((List[Long]())));
    assert(orderByPoints((List[Long](1l.toLong, -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong, -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));
    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));
    assert(orderByPoints((List[Long](0l.toLong, 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong, -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));
    }

}
"
HumanEval_146,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉဢွၼ်တၢင်းသုတ်းလႄႈ တူဝ်ၼပ်ႉလိုၼ်းသုတ်း ၶွင်တူဝ်ၼပ်ႉၼၼ်ႉ ပဵၼ်တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် (1, 3, 5, 7, 9) ၼၼ်ႉယဝ်ႉ။    //တူဝ်ၼပ်ႉဢၼ်မီးၼႂ်းသဵၼ်ႈမၢႆ ဢၼ်ယႂ်ႇလိူဝ်သေ 10 လႄႈ တင်းသွင်ဢၼ်     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ် တူဝ်ၼပ်ႉသဵၼ်ႈမၢႆပဵၼ် တူဝ်ၶဝ်ႈ လႄႈ တူဝ်ၶိုၼ်း    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))
    // (1l)
    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))
    // (2l)
    def specialFilter(nums : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def specialFilter(nums: List[Long]): Long = {
    def isOddDigit(c: Char): Boolean = c == '1' || c == '3' || c == '5' || c == '7' || c == '9'
    
    nums.count { num =>
      val absNumStr = num.abs.toString
      val firstDigit = absNumStr.head
      val lastDigit = absNumStr.last
      
      num > 10 && isOddDigit(firstDigit) && isOddDigit(lastDigit)
    }.toLong
  }

  def main(args: Array[String]): Unit = {
    println(specialFilter(List(15L, -73L, 14L, -15L))) // Output: 1
    println(specialFilter(List(33L, -2L, -3L, 45L, 21L, 109L))) // Output: 2
  }
}","    }
    def main(args: Array[String]) = {
    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));
    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));
    assert(specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));
    assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));
    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));
    assert(specialFilter((List[Long](1l.toLong))) == (0l));
    assert(specialFilter((List[Long]())) == (0l));
    }

}
"
HumanEval_147,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //a[i] + a[j] + a[k] ၼႆႉပဵၼ်တူဝ်ၼပ်ႉ ဢၼ်ၵုၼ်းၵၼ်တင်း 3 ယဝ်ႉ။    //ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ် သၢမ်တူဝ် (a[i], a[j], a[k]) ၶွင် a တီႈ i < j < k,     //တွၼ်ႈတႃႇ i ၵူႈဢၼ် (1 ≤ i ≤ n) ၼၼ်ႉ ၵႃႈၶၼ်ၶွင် a[i] = i * i - i + 1 ၼၼ်ႉၼႆယဝ်ႉ။    //ပေႃးႁဝ်းပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်တဵမ်ထူၼ်ႈ n ႁဝ်းတေလႆႈႁဵတ်းပၼ် သဵၼ်ႈမၢႆတူဝ်ၼပ်ႉတဵမ်ထူၼ်ႈ a တၢင်းယၢဝ်းမၼ်းပဵၼ် n    // >>> getMaxTriples((5l))
    // (1l)
    // Explanation: 
    // a = [1, 3, 7, 13, 21]
    // The only valid triple is (1, 7, 13).
    def getMaxTriples(n : Long) : Long = {
","def getMaxTriples(n: Long): Long = {
    val a = (1L to n).map(i => i * i - i + 1).toList
    var count = 0L

    for {
      i <- 0L until n
      j <- i + 1 until n
      k <- j + 1 until n
    } {
      if ((a(i.toInt) + a(j.toInt) + a(k.toInt)) % 3 == 0) {
        count += 1
      }
    }

    count
  }
}","    }
    def main(args: Array[String]) = {
    assert(getMaxTriples((5l)) == (1l));
    assert(getMaxTriples((6l)) == (4l));
    assert(getMaxTriples((10l)) == (36l));
    assert(getMaxTriples((100l)) == (53361l));
    }

}
"
HumanEval_148,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //ဢမ်ႇၸႂ်ႈၸိုဝ်ႈၽႆၢႇလူၵ်ႈ ဢၼ်ထုၵ်ႇမႅၼ်ႈ။    //လွင်ႈႁဵတ်းသၢင်ႈၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမီးသင် သင်ပဵၼ် planet1 ဢမ်ႇၼၼ် planet2 ၼႆယူႇယဝ်ႉ။    //လွင်ႈၸမ်ၵႆၵၼ်တင်း လႅတ်ႇ။    //ဢၼ်ယူႇၼႂ်းၵႄႈ လႅင်ႊလၢဝ် 1 လႄႈ လႅင်ႊလၢဝ် 2 ၼၼ်ႉ ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ    //လွင်ႈႁဵတ်းသၢင်ႈၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ပႃး လၢဝ်ဢၼ်မီး လႅပ်ႈပဵၼ်     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ဢဝ်ၸိုဝ်ႈ ၵျူဝ်ႇ 2 ဢၼ်ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉသဵၼ်ႈ planet1 လႄႈ planet2 ၼၼ်ႉၶႃႈ။    //ယူႇရၢၼ်ႇ၊ ၼႅပ်ႉပုၼ်ႇ။    //Mercury ၊ ဢၼ်မႃးထႅင်ႈၼၼ်ႉပဵၼ် Venus ၊ Earth ၊ Mars ၊ Jupiter ၊ Saturn ၊     //ၼႂ်းပိူင်လႅတ်ႇႁဝ်းၼႆႉ မီးၵျူဝ်ႇ 8 လုၵ်ႈ၊ ဢၼ်ၸမ်ႁွမ်းၵၼ်တင်းလႅတ်ႇသေပိူၼ်ႈ။    // >>> bf((""Jupiter""), (""Neptune""))
    // (List[String](""Saturn"", ""Uranus""))
    // >>> bf((""Earth""), (""Mercury""))
    // (List[String](""Venus""))
    // >>> bf((""Mercury""), (""Uranus""))
    // (List[String](""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""))
    def bf(planet1 : String, planet2 : String) : List[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def bf(planet1: String, planet2: String): List[String] = {
    val planets = List(""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    
    // Find the indices of the given planets
    val index1Opt = planets.indexOf(planet1)
    val index2Opt = planets.indexOf(planet2)
    
    // If either planet is not found, return an empty list
    if (index1Opt == -1 || index2Opt == -1) {
      return List.empty
    }
    
    // Sort indices to ensure proper traversal direction
    val (startIndex, endIndex) = if (index1Opt < index2Opt) (index1Opt, index2Opt) else (index2Opt, index1Opt)
    
    // Get the planets between the indices
    planets.slice(startIndex + 1, endIndex)
  }
}","    }
    def main(args: Array[String]) = {
    assert(bf((""Jupiter""), (""Neptune"")).equals((List[String](""Saturn"", ""Uranus""))));
    assert(bf((""Earth""), (""Mercury"")).equals((List[String](""Venus""))));
    assert(bf((""Mercury""), (""Uranus"")).equals((List[String](""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""))));
    assert(bf((""Neptune""), (""Venus"")).equals((List[String](""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""))));
    assert(bf((""Earth""), (""Earth"")).equals((List[String]())));
    assert(bf((""Mars""), (""Earth"")).equals((List[String]())));
    assert(bf((""Jupiter""), (""Makemake"")).equals((List[String]())));
    }

}
"
HumanEval_149,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //သူတေထၢင်ႇဝႃႈ ၶေႃႈၵႂၢမ်းတင်းမူတ်း တေမီးတၢင်းယၢဝ်းမိူၼ်ၵၼ်ယူႇၼႆယဝ်ႉ။    //Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် သဵၼ်ႈမၢႆ string ဢၼ်ၶပ်ႉဝႆႉၸွမ်းၼင်ႇပိူင်မၼ်းၼၼ်ႉ။    //သင်ဝႃႈ သွင်ၶေႃႈၵႂၢမ်းမီးတၢင်းယၢဝ်းမိူၼ်ၵၼ်ၼႆ ၸႅၵ်ႇပၼ်ၸွမ်းပိူင်တူဝ်လိၵ်ႈ။    //တေလႆႈၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ၸႅၵ်ႇဝႆႉၸွမ်း ပၵ်းပိူင်ၼၼ်ႉ။    //လွင်ႈၸႅၵ်ႇမႅင်ႇၶွင်သဵၼ်ႈမၢႆၼႆႉ ထုၵ်ႇလီၶိုၼ်ႈမႃး ၸွမ်းၼင်ႇ တၢင်းယၢဝ်းၶွင် ၶေႃႈၵႂၢမ်းဢၼ်လႂ်ဢၼ်ၼၼ်ႉသေယဝ်ႉ    //မၼ်းတေပႃးဝႆႉ duplicates ၼၼ်ႉယူႇယဝ်ႉ။    //သဵၼ်ႈမၢႆၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသႅၼ် ဢၼ်ဢမ်ႇၸႂ်ႈ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသေပွၵ်ႈ။    //လႄႈ ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်လႆႈမႃးၼၼ်ႉ ၶိုၼ်းဢဝ် ၸႅၵ်ႇဝႆႉ ၸွမ်းၼင်ႇ ပိူင်ထၢၼ်ႈမၼ်းၼၼ်ႉ၊    //ထွၼ်ဢွၵ်ႇ string ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်တၢင်းၵႂၢင်ႈမၼ်း၊     //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသဵၼ်ႈ ဢၼ်ၼိူင်ႈ ဢၼ်ပဵၼ် ပႃႇရႃႇမီႇတႃႇမၼ်း၊    // >>> listSort((List[String](""aa"", ""a"", ""aaa"")))
    // (List[String](""aa""))
    // >>> listSort((List[String](""ab"", ""a"", ""aaa"", ""cd"")))
    // (List[String](""ab"", ""cd""))
    def sortedListSum(lst : List[String]) : List[String] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
    def listSort(lst: List[String]): List[String] = {
        lst.filter(_.length % 2 == 0)
           .sorted
           .sortBy(_.length)
    }
}","    }
    def main(args: Array[String]) = {
    assert(sortedListSum((List[String](""aa"", ""a"", ""aaa""))).equals((List[String](""aa""))));
    assert(sortedListSum((List[String](""school"", ""AI"", ""asdf"", ""b""))).equals((List[String](""AI"", ""asdf"", ""school""))));
    assert(sortedListSum((List[String](""d"", ""b"", ""c"", ""a""))).equals((List[String]())));
    assert(sortedListSum((List[String](""d"", ""dcba"", ""abcd"", ""a""))).equals((List[String](""abcd"", ""dcba""))));
    assert(sortedListSum((List[String](""AI"", ""ai"", ""au""))).equals((List[String](""AI"", ""ai"", ""au""))));
    assert(sortedListSum((List[String](""a"", ""b"", ""b"", ""c"", ""c"", ""a""))).equals((List[String]())));
    assert(sortedListSum((List[String](""aaaa"", ""bbbb"", ""dd"", ""cc""))).equals((List[String](""cc"", ""dd"", ""aaaa"", ""bbbb""))));
    }

}
"
HumanEval_150,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၼပ်ႉၶမ်ႇပိုၼ်ႉ လႄႈ တေလႆႈၶိုၼ်းပၼ် ၵႃႈၶၼ်ၶွင် y ပေႃးဢမ်ႇၼၼ်။    //ပရူဝ်ႇၵရမ်ႇဢၼ်ငၢႆႈ ဢၼ်တေလႆႈၶိုၼ်း ၵႃႈၶၼ်ၶွင် x သင်ၸိူဝ်ႉဝႃႈ n ၼႆႉပဵၼ်     // >>> xOrY((7l), (34l), (12l))
    // (34l)
    // >>> xOrY((15l), (8l), (5l))
    // (5l)
    def xOrY(n : Long, x : Long, y : Long) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  
  def isPrime(num: Long): Boolean = {
    if (num <= 1) return false
    if (num <= 3) return true
    if (num % 2 == 0 || num % 3 == 0) return false
    var i = 5
    while (i * i <= num) {
      if (num % i == 0 || num % (i + 2) == 0) return false
      i += 6
    }
    true
  }

  def xOrY(n: Long, x: Long, y: Long): Long = {
    if (isPrime(n)) x else y
  }
}","    }
    def main(args: Array[String]) = {
    assert(xOrY((7l), (34l), (12l)) == (34l));
    assert(xOrY((15l), (8l), (5l)) == (5l));
    assert(xOrY((3l), (33l), (5212l)) == (33l));
    assert(xOrY((1259l), (3l), (52l)) == (3l));
    assert(xOrY((7919l), (-1l), (12l)) == (-1l));
    assert(xOrY((3609l), (1245l), (583l)) == (583l));
    assert(xOrY((91l), (56l), (129l)) == (129l));
    assert(xOrY((6l), (34l), (1234l)) == (1234l));
    assert(xOrY((1l), (2l), (0l)) == (0l));
    assert(xOrY((2l), (2l), (0l)) == (2l));
    }

}
"
HumanEval_151,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တီႈၼႂ်းသဵၼ်ႈမၢႆၼၼ်ႉ ဢၼ်ဢမ်ႇမိူၼ်ၵၼ်ၼၼ်ႉ ပႅတ်ႈပႅတ်ႈ တူဝ်ၼပ်ႉဢၼ်ဢမ်ႇမိူၼ်ၵၼ် ဢမ်ႇၼၼ် တူဝ်ၼပ်ႉတဵမ်ၸိူဝ်းၼၼ်ႉ။    //ပေႃးဝႃႈႁဝ်းပၼ်ဝႆႉ သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉၸိူဝ်းၼၼ်ႉ မႃးပဵၼ် တူဝ်ၵိုတ်းႁွမ်းၵၼ်သေ ၶိုၼ်းပၼ်ၶိုၼ်း။    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))
    // (10l)
    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong, 0l.toLong)))
    // (0l)
    // >>> doubleTheDifference((List[Float](9l.toLong, -2l.toLong)))
    // (81l)
    // >>> doubleTheDifference((List[Float](0l.toLong)))
    // (0l)
    // If the input list is empty, return 0.
    def doubleTheDifference(lst : List[Float]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def doubleTheDifference(lst: List[Float]): Long = {
    lst.filter(x => x > 0 && x.isValidLong && x.toLong % 2 != 0)
      .map(x => x.toLong * x.toLong)
      .sum
  }
}","    }
    def main(args: Array[String]) = {
    assert(doubleTheDifference((List[Float]())) == (0l));
    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) == (25l));
    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat, 0.3f.toFloat))) == (0l));
    assert(doubleTheDifference((List[Float](-10.0f.toFloat, -20.0f.toFloat, -30.0f.toFloat))) == (0l));
    assert(doubleTheDifference((List[Float](-1.0f.toFloat, -2.0f.toFloat, 8.0f.toFloat))) == (0l));
    assert(doubleTheDifference((List[Float](0.2f.toFloat, 3.0f.toFloat, 5.0f.toFloat))) == (34l));
    assert(doubleTheDifference((List[Float](-9.0f.toFloat, -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));
    }

}
"
HumanEval_152,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //ၵႃႈၶၼ်မၼ်းပဵၼ် 0 လႄႈ သင်ဢမ်ႇၸႂ်ႈၼႆ ၵႃႈၶၼ်မၼ်းပဵၼ် လွင်ႈပႅၵ်ႇပိူင်ႈဢၼ်ဢမ်ႇမီးတီႈပွင်ႇ ၼႂ်းၵႄႈ လွင်ႈလၢမ်းၶၢတ်ႈလႄႈ လွင်ႈလႆႈၶၢမ်ႇတွပ်ႇ။    //ၶိုၼ်းဢဝ် သဵၼ်ႈမၢႆ ဢၼ်ယၢဝ်းမိူၼ်ၵၼ် ဢၼ်ၼႄပၼ်ဝႃႈ လွင်ႈလၢမ်းၶၢတ်ႈဢၼ်လႂ်ၼၼ်ႉ မၼ်းၵႆၵႃႈႁိုဝ်ၼႆယဝ်ႉ။ ပေႃးၶဝ်လၢမ်းၶၢတ်ႈမႅၼ်ႈၼႆ     //တေလႆႈပၼ် သဵၼ်ႈမၢႆ ဢၼ်ပႃးဝႆႉ သၢႆမၢႆလႄႈ လွင်ႈလၢမ်းၶၢတ်ႈ ဢၼ်ယၢဝ်းမိူၼ်ၵၼ် သွင်ဢၼ်၊ တီႈဢၼ် သဵၼ်ႈမၢႆၵူႈဢၼ်ၼၼ်ႉ ၼႄဝႆႉ လွင်ႈဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉယဝ်ႉ။    //ၼႃႈၵၢၼ်ၶွင်သူၼႆႉ ပဵၼ်တႃႇတေတႅပ်းတတ်းဝႃႈ ၵူၼ်းၵေႃႉၼိူင်ႈၵေႃႉၼၼ်ႉ ထၢင်ႇၸႅင်ႈလီ လွင်ႈလႆႈမႃးတီႈ လွင်ႈၶဵင်ႇၵၼ်တၢင်းၼမ်ၼၼ်ႉႁိုဝ်ၼႆၼၼ်ႉယဝ်ႉ။    //ဢၼ်ထၢင်ႇၸႅင်ႈတႄႉတႄႉတႄႉဝႃႈဝႃႈ ပဵၼ်ဢၼ်လီမၢႆတွင်းလႄႈ တႅၵ်ႈၼိူင်းၵၼ်ၼၼ်ႉယဝ်ႉ။    //လွင်ႈပဵၼ်မႃးၼၼ်ႉ ပဵၼ်ဢၼ်ႁူႉဝႆႉယဝ်ႉသေတႃႉ၊ တၢင်းၶႆႈၸ်ႂလႄႈ တၢင်းဝူၼ်ႉဢၼ်သူမီးဝႆႉ မိူဝ်ႈယၢမ်းၼၼ်ႉၼၼ်ႉ ပဵၼ်ဢၼ်ႁူႉဝႆႉယဝ်ႉ။    //ႁဝ်းတေလႆႈတွင်းဝႆႉ လွင်ႈဢၼ်ႁဝ်းလႆႈၶၢမ်ႇမႃး မိူဝ်ႈႁဝ်းလႆႈထူပ်းၽွၼ်းလီ ဢၼ်ႁဝ်းမုင်ႈမွင်းမႃးႁိုင်ၼၼ်ႉယူႇယဝ်ႉ။    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))
    // (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))
    // >>> compare((List[Long](0l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))
    // (List[Long](4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))
    def compare(game : List[Long], guess : List[Long]) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def compare(game: List[Long], guess: List[Long]): List[Long] = {
    game.zip(guess).map { case (g, gs) => abs(g - gs) }
  }
}","    }
    def main(args: Array[String]) = {
    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));
    assert(compare((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));
    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));
    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))));
    }

}
"
HumanEval_153,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //(ဢဵၼ်ႁႅင်းမၼ်းပဵၼ် -1) ။    //return ""Slices.SErviNGSliCes"" ယွၼ်ႉဝႃႈ ""SErviNGSliCes"" ၼႆႉ ပဵၼ်လွင်ႈၶႂၢၵ်ႈဢၼ်ၶိုၵ်ႉၶႅမ်ႉသုတ်း    //extension: ['SERVINGSliCes', 'Cheese', 'StuFfed'] ၼႆၸိုင် ၸဝ်ႈၵဝ်ႇ ထုၵ်ႇလီ     //တူဝ်ယၢင်ႇမၼ်း သင်ဝႃႈႁဝ်းပၼ် ""Slices"" မိူၼ်ၼင်ႇ class လႄႈ သဵၼ်ႈမၢႆၶွင်     //လိူၵ်ႈဢဝ် ဢၼ်ဢွၵ်ႇမႃးတီႈၼႃႈသုတ်း ၼႂ်းသဵၼ်ႈမၢႆ။    //သင်ဝႃႈ မီးလွင်ႈၶႂၢၵ်ႈဢၼ်မိူၼ်ၵၼ် သွင်ဢၼ်ဢမ်ႇၼၼ် ၼမ်လိူဝ်ၼၼ်ႉၼႆၸိုင်    //format: ClassName.StrongestExtensionName.  ၶႅပ်းႁၢင်ႈဢၼ်ၼႆႉ မၼ်းပဵၼ် ၶႅပ်းႁၢင်ႈဢၼ်ၵႅၼ်ႇၶႅင်သေပိူၼ်ႈ    //တေလႆႈႁႃ တူဝ်ၶႂၢၵ်ႈဢၼ်ၶိုၵ်ႉၶႅမ်ႉသေပိူၼ်ႈ လႄႈ ၶိုၼ်းဢဝ် string ဢၼ်ၼႆႉမႃးၶိုၼ်း    //ၼႂ်းၸိုဝ်ႈ extension ၼၼ်ႉ ႁႅင်းမၼ်းတေမီး CAP - SM ၼႆယဝ်ႉ။    //တူဝ်လိၵ်ႈၼႂ်းၸိုဝ်ႈ extension လႄႈ SM ပဵၼ်တူဝ်ၼပ်ႉတူဝ်လိၵ်ႈလဵၵ်ႉလဵၵ်ႉ    //ႁႅင်းၶွင်လွင်ႈၶႂၢၵ်ႈမၼ်းၼႆႉပဵၼ် ၼင်ႇတႂ်ႈၼႆႉ CAP ၼၼ်ႉပဵၼ် တူဝ်ၼပ်ႉၶွင် တူဝ်လိၵ်ႈဢၼ်ယႂ်ႇ     //Extensions ၼႆႉတေလႆႈၸႂ်ႉတိုဝ်းတႃႇတၢင်ႇ class တၢင်ႇဢၼ်ၶိုၼ်ႈၼိူဝ် class ၼၼ်ႉ။    //တေပၼ်ၸိုဝ်ႈ class (string) လႄႈ သဵၼ်ႈမၢႆ extension မၼ်း။    // >>> StrongestExtension((""my_class""), (List[String](""AA"", ""Be"", ""CC"")))
    // (""my_class.AA"")
    def StrongestExtension(class_name : String, extensions : List[String]) : String = {
","def StrongestExtension(class_name: String, extensions: List[String]): String = {
        extensions.map { extension =>
            val capCount = extension.count(_.isUpper)
            val lowerCount = extension.count(_.isLower)
            val strength = capCount - lowerCount
            (extension, strength)
        }.maxBy(_._2)._1
    } match {
        case strongest => s""$class_name.$strongest""
    }
}","    }
    def main(args: Array[String]) = {
    assert(StrongestExtension((""Watashi""), (List[String](""tEN"", ""niNE"", ""eIGHt8OKe""))).equals((""Watashi.eIGHt8OKe"")));
    assert(StrongestExtension((""Boku123""), (List[String](""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""))).equals((""Boku123.YEs.WeCaNe"")));
    assert(StrongestExtension((""__YESIMHERE""), (List[String](""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""))).equals((""__YESIMHERE.NuLl__"")));
    assert(StrongestExtension((""K""), (List[String](""Ta"", ""TAR"", ""t234An"", ""cosSo""))).equals((""K.TAR"")));
    assert(StrongestExtension((""__HAHA""), (List[String](""Tab"", ""123"", ""781345"", ""-_-""))).equals((""__HAHA.123"")));
    assert(StrongestExtension((""YameRore""), (List[String](""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""))).equals((""YameRore.okIWILL123"")));
    assert(StrongestExtension((""finNNalLLly""), (List[String](""Die"", ""NowW"", ""Wow"", ""WoW""))).equals((""finNNalLLly.WoW"")));
    assert(StrongestExtension((""_""), (List[String](""Bb"", ""91245""))).equals((""_.Bb"")));
    assert(StrongestExtension((""Sp""), (List[String](""671235"", ""Bb""))).equals((""Sp.671235"")));
    }

}
"
HumanEval_154,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //သင်ဝႃႈႁဝ်းလႆႈၶေႃႈၵႂၢမ်း 2 ၶေႃႈၼႆ ႁဝ်းတေလႆႈၶိုၼ်း true ပေႃးဝႃႈၶေႃႈၵႂၢမ်းၵမ်းသွင် ဢမ်ႇၼၼ် လွင်ႈလႅၵ်ႈလၢႆႈမၼ်းပဵၼ် substring ၼႂ်းၶေႃႈၵႂၢမ်းၵမ်းဢွၼ်တၢင်းသုတ်းၼႆ    // >>> cycpatternCheck((""abcd""), (""abd""))
    // (false)
    // >>> cycpatternCheck((""hello""), (""ell""))
    // (true)
    // >>> cycpatternCheck((""whassup""), (""psus""))
    // (false)
    // >>> cycpatternCheck((""abab""), (""baa""))
    // (true)
    // >>> cycpatternCheck((""efef""), (""eeff""))
    // (false)
    // >>> cycpatternCheck((""himenss""), (""simen""))
    // (true)
    def cycpatternCheck(a : String, b : String) : Boolean = {
","def cycpatternCheck(a: String, b: String): Boolean = {
  val bLength = b.length
  val bDouble = b + b // Create a string with b concatenated with itself to represent all rotations
  for (i <- 0 until bLength) {
    val rotation = bDouble.substring(i, i + bLength) // Get the current rotation
    if (a.contains(rotation)) return true
  }
  false
}","    }
    def main(args: Array[String]) = {
    assert(cycpatternCheck((""xyzw""), (""xyw"")) == (false));
    assert(cycpatternCheck((""yello""), (""ell"")) == (true));
    assert(cycpatternCheck((""whattup""), (""ptut"")) == (false));
    assert(cycpatternCheck((""efef""), (""fee"")) == (true));
    assert(cycpatternCheck((""abab""), (""aabb"")) == (false));
    assert(cycpatternCheck((""winemtt""), (""tinem"")) == (true));
    }

}
"
HumanEval_155,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ်ၼႆ မၼ်းတေၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်မီး တူဝ်ၼပ်ႉဢၼ်ပဵၼ် တူဝ်ၸီႉ လႄႈ တူဝ်ၸီႉ ဢၼ်ဢမ်ႇပဵၼ် တူဝ်ၸီႉၼၼ်ႉယူႇယဝ်ႉ။    // >>> evenOddCount((-12l))
    // ((1l, 1l))
    // >>> evenOddCount((123l))
    // ((1l, 2l))
    def evenOddCount(num : Long) : Tuple2[Long, Long] = {
","def evenOddCount(num: Long): Tuple2[Long, Long] = {
  val digits = num.abs.toString.map(_.asDigit)
  val evenCount = digits.count(_ % 2 == 0).toLong
  val oddCount = digits.count(_ % 2 != 0).toLong
  (evenCount, oddCount)
}","    }
    def main(args: Array[String]) = {
    assert(evenOddCount((7l)).equals(((0l, 1l))));
    assert(evenOddCount((-78l)).equals(((1l, 1l))));
    assert(evenOddCount((3452l)).equals(((2l, 2l))));
    assert(evenOddCount((346211l)).equals(((3l, 3l))));
    assert(evenOddCount((-345821l)).equals(((3l, 3l))));
    assert(evenOddCount((-2l)).equals(((1l, 0l))));
    assert(evenOddCount((-45347l)).equals(((2l, 3l))));
    assert(evenOddCount((0l)).equals(((1l, 0l))));
    }

}
"
HumanEval_156,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်းတႄႉ    //လွင်ႈမၵ်းၶၢၼ်း: 1 <= num <= 1000     //ဢဝ်တူဝ်လိၵ်ႈလဵၵ်ႉသေ တႅမ်ႈၶိုၼ်း။    //ပေႃးဝႃႈပၼ်တူဝ်ၼပ်ႉတဵမ် ဢၼ်သၢင်ႇထုၵ်ႇၼႆ ဢဝ်တူဝ်ၼပ်ႉ ရေႃးမ ဢၼ်မိူၼ်ၵၼ်ၼၼ်ႉသေ ႁဵတ်းပဵၼ် တူဝ်ထႅဝ်၊     // >>> intToMiniRoman((19l))
    // (""xix"")
    // >>> intToMiniRoman((152l))
    // (""clii"")
    // >>> intToMiniRoman((426l))
    // (""cdxxvi"")
    def intToMiniRoman(number : Long) : String = {
","import scala.collection.mutable._

object Problem {
  def intToMiniRoman(number: Long): String = {
    val romanMap: List[(Int, String)] = List(
      (1000, ""m""),
      (900, ""cm""),
      (500, ""d""),
      (400, ""cd""),
      (100, ""c""),
      (90, ""xc""),
      (50, ""l""),
      (40, ""xl""),
      (10, ""x""),
      (9, ""ix""),
      (5, ""v""),
      (4, ""iv""),
      (1, ""i"")
    )

    var num = number.toInt
    val stringBuilder = new StringBuilder

    for ((value, roman) <- romanMap) {
      while (num >= value) {
        stringBuilder.append(roman)
        num -= value
      }
    }

    stringBuilder.toString()
  }
}","    }
    def main(args: Array[String]) = {
    assert(intToMiniRoman((19l)).equals((""xix"")));
    assert(intToMiniRoman((152l)).equals((""clii"")));
    assert(intToMiniRoman((251l)).equals((""ccli"")));
    assert(intToMiniRoman((426l)).equals((""cdxxvi"")));
    assert(intToMiniRoman((500l)).equals((""d"")));
    assert(intToMiniRoman((1l)).equals((""i"")));
    assert(intToMiniRoman((4l)).equals((""iv"")));
    assert(intToMiniRoman((43l)).equals((""xliii"")));
    assert(intToMiniRoman((90l)).equals((""xc"")));
    assert(intToMiniRoman((94l)).equals((""xciv"")));
    assert(intToMiniRoman((532l)).equals((""dxxxii"")));
    assert(intToMiniRoman((900l)).equals((""cm"")));
    assert(intToMiniRoman((994l)).equals((""cmxciv"")));
    assert(intToMiniRoman((1000l)).equals((""m"")));
    }

}
"
HumanEval_157,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //90 တီႇၵရီႇ။    //ထႅဝ်သၢမ်ၸဵင်ႇဢၼ်မီးသဵၼ်ႈတႃသိုဝ်ႈၼၼ်ႉ ပဵၼ်သၢမ်ၸဵင်ႇဢၼ်မီးသဵၼ်ႈတႃသိုဝ်ႈ ဢမ်ႇၼၼ် သဵၼ်ႈတႃသိုဝ်ႈၼၼ်ႉပဵၼ်သဵၼ်ႈတႃသိုဝ်ႈ။    //ၽၢႆႇမၼ်းပဵၼ်သၢမ်ၸဵင်ႇၽဵင်ႇသုင်၊ ပေႃးဢမ်ႇၼၼ်တႄႉ ၽိတ်း။    //ပေႃးဝႃႈႁဝ်းပၼ်တၢင်းယၢဝ်းသၢမ်ၽၢႆႇၶွင် သၢမ်ၸဵင်ႇၼႆ ၶိုၼ်းဢဝ် true မႃးၶိုၼ်း သင်ၸိူဝ်ႉဝႃႈ သၢမ်ၽၢႆႇၼႆႉ    // >>> rightAngleTriangle((3l), (4l), (5l))
    // (true)
    // >>> rightAngleTriangle((1l), (2l), (3l))
    // (false)
    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {
","def rightAngleTriangle(a: Long, b: Long, c: Long): Boolean = {
        val sides = List(a, b, c).sorted
        pow(sides(0), 2) + pow(sides(1), 2) == pow(sides(2), 2)
    }
}","    }
    def main(args: Array[String]) = {
    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));
    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));
    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));
    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));
    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));
    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));
    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));
    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));
    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));
    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));
    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));
    }

}
"
HumanEval_158,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်လိၵ်ႈ၊ ၶိုၼ်းဢဝ် တူဝ်လိၵ်ႈ ဢၼ်မႃးတီႈၼႃႈလိၵ်ႈ ၼႂ်းပိူင်ထၢၼ်ႈပွင်ႈၵႂၢမ်းၼၼ်ႉ။    //သင်ၸိူဝ်ႉဝႃႈ သဵၼ်ႈမၢႆတူဝ်လိၵ်ႈၼမ်လိူဝ်ပိူၼ်ႈၼၼ်ႉ မီးတူဝ်လိၵ်ႈၼမ်လိူဝ်ပိူၼ်ႈၼႆၸိုင်    //သဵၼ်ႈမၢႆၼႆႉ ပႃးဝႆႉ ၶေႃႈၵႂၢမ်းလၢႆလၢႆဢၼ်သေ ၶိုၼ်းဢဝ် ၶေႃႈၵႂၢမ်းဢၼ်မီး တူဝ်ၼပ်ႉသုင်သုတ်းၼၼ်ႉ ၶိုၼ်းပၼ်    //တႅမ်ႈပၼ် တူဝ်ဢိင် ဢၼ်ႁပ်ႉဢဝ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉသဵၼ်ႈၼၼ်ႉယဝ်ႉ။    // >>> findMax((List[String](""name"", ""of"", ""string"")))
    // (""string"")
    // >>> findMax((List[String](""name"", ""enam"", ""game"")))
    // (""enam"")
    // >>> findMax((List[String](""aaaaaaa"", ""bb"", ""cc"")))
    // (""aaaaaaa"")
    def findMax(words : List[String]) : String = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def findMax(words: List[String]): String = {
    words.maxBy(word => (word.toSet.size, -word.toLowerCase))
  }
}","    }
    def main(args: Array[String]) = {
    assert(findMax((List[String](""name"", ""of"", ""string""))).equals((""string"")));
    assert(findMax((List[String](""name"", ""enam"", ""game""))).equals((""enam"")));
    assert(findMax((List[String](""aaaaaaa"", ""bb"", ""cc""))).equals((""aaaaaaa"")));
    assert(findMax((List[String](""abc"", ""cba""))).equals((""abc"")));
    assert(findMax((List[String](""play"", ""this"", ""game"", ""of"", ""footbott""))).equals((""footbott"")));
    assert(findMax((List[String](""we"", ""are"", ""gonna"", ""rock""))).equals((""gonna"")));
    assert(findMax((List[String](""we"", ""are"", ""a"", ""mad"", ""nation""))).equals((""nation"")));
    assert(findMax((List[String](""this"", ""is"", ""a"", ""prrk""))).equals((""this"")));
    assert(findMax((List[String](""b""))).equals((""b"")));
    assert(findMax((List[String](""play"", ""play"", ""play""))).equals((""play"")));
    }

}
"
HumanEval_159,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ:     //သင်ဝႃႈ ဢမ်ႇမီးၵိူဝ်ဝၢၼ် ဢၼ်ၵိုတ်းဝႆႉတင်းၼမ်ၸိုင် သူတေၵိၼ်ၵိူဝ်ဝၢၼ် ဢၼ်ၵိုတ်းဝႆႉတင်းမူတ်းသေတႃႉၵေႃႈ သူတိုၵ်ႉတေၵႂင်ယူႇယဝ်ႉ။    //တူဝ်ၼပ်ႉ ၵရူဝ်ႇတိတ်ႉ ဢၼ်ၵိုတ်းဝႆႉ ဝႆးသေ ၵိၼ်ၶဝ်ႈၼၼ်ႉ]     //[ ႁူဝ်ၼပ်ႉ ၵရူဝ်ႇတိတ်ႉ ဢၼ်ၵိၼ်ယဝ်ႉ ၼ်ႂးၶၢဝ်းတၢင်း ၵိၼ်ၶဝ်ႈ]    //ၵူၺ်းၵႃႈ မိူဝ်ႈလဵဝ်ၼႆႉ သူလူဝ်ႇၵိၼ် မၢၵ်ႇၶိူဝ်သူမ်ႈၼမ်လိူဝ်ၼႆႉယဝ်ႉ တႃႇတေၵိၼ်ၶဝ်ႈဝၼ်းတဵမ်ထူၼ်ႈ။    //မႂ်းပဵၼ်ၶီႈလဵၵ်းဢၼ်ၵႂင်၊ မႂ်းၵေႃႈၵိၼ်လႆႈ မၢၵ်ႇၶိူဝ်သူမ်ႈမၢင်မဵဝ်းယဝ်ႉ    // >>> eat((5l), (6l), (10l))
    // (List[Long](11l.toLong, 4l.toLong))
    // >>> eat((4l), (8l), (9l))
    // (List[Long](12l.toLong, 1l.toLong))
    // >>> eat((1l), (10l), (10l))
    // (List[Long](11l.toLong, 0l.toLong))
    // >>> eat((2l), (11l), (5l))
    // (List[Long](7l.toLong, 0l.toLong))
    // Variables:
    // @number : integer
    // the number of carrots that you have eaten.
    // @need : integer
    // the number of carrots that you need to eat.
    // @remaining : integer
    // the number of remaining carrots thet exist in stock
    // Constrain:
    // * 0 <= number <= 1000
    // * 0 <= need <= 1000
    // * 0 <= remaining <= 1000
    // Have fun :)
    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def eat(number: Long, need: Long, remaining: Long): List[Long] = {
    val totalNeeded = number + need
    if (remaining >= need) {
      List(totalNeeded, remaining - need)
    } else {
      List(number + remaining, 0)
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));
    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));
    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));
    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));
    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));
    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));
    }

}
"
HumanEval_160,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //Operator list မီးဝႆႉ operator တီႈဢေႇသုတ်းမၼ်း 1 ၵေႃႉ လႄႈ operand list မီးဝႆႉ operand တီႈဢေႇသုတ်းမၼ်း 2 ၵေႃႉ    //Operand ၼႆႉပဵၼ် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ဢမ်ႇၸႂ်ႈ တူဝ်ၼပ်ႉၶိုၵ်ႉတွၼ်းၼၼ်ႉယဝ်ႉ။    //တၢင်းယၢဝ်းၶွင် သဵၼ်ႈမၢႆ ၽူႈႁဵတ်းၵၢၼ်ၼၼ်ႉ ပဵၼ်တၢင်းယၢဝ်းၶွင် သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းၵၢၼ်ၼၼ်ႉ ယွမ်းၼိူင်ႈဢၼ်ၼၼ်ႉယဝ်ႉ။    //မၢႆတွင်း:    //=> ၶေႃႈလႆႈၸႂ် = 9     //ၶေႃႈတွပ်ႇ = 2 + 3 * 4 - 5     //သဵၼ်ႈမၢႆ = [2, 3, 4, 5]     //ၽူႈၸႂ်ႉတိုဝ်း['+', '*', '-']     //တူဝ်ယၢင်ႇ:     //လွင်ႈၼႄလၵ်းထၢၼ် (**)     //လွင်ႈၸႅၵ်ႇၽႄၸၼ်ႉ (//)    //လွင်ႈၵုၼ်း ( * )     //လွင်ႈထွၼ် (- )     //လွင်ႈထႅမ်သႂ်ႇ (+)     //လွင်ႈႁဵတ်းသၢင်ႈ algebra ဢၼ်လမ်ႇလွင်ႈၼႆႉ-    //လွင်ႈလၢတ်ႈၼႄ လႄႈ ၶိုၼ်းဢဝ် လွင်ႈထတ်းသၢင်ႈ လွင်ႈလၢတ်ႈၼႄ ဢၼ်ၼႆႉမႃး။    //သဵၼ်ႈမၢႆမၢႆသွင်ၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ တူဝ်ၼပ်ႉတဵမ် ဢၼ်ၸႂ်ႉတိုဝ်း သဵၼ်ႈမၢႆသွင်ဢၼ် တွၼ်ႈတႃႇတေၵေႃႇသၢင်ႈ တူဝ်ၼပ်ႉတဵမ်ၼၼ်ႉ။    //သွင်ဢၼ်ၼႆႉ ပဵၼ်သဵၼ်ႈမၢႆ ၽူႈႁဵတ်းၵၢၼ် လႄႈ တူဝ်ၼပ်ႉဢၼ်ႁဵတ်းၵၢၼ် သဵၼ်ႈမၢႆဢွၼ်တၢင်းသုတ်းၼႆႉ မီးလွင်ႈႁဵတ်းၵၢၼ် algebra ဢၼ်လမ်ႇလွင်ႈ လႄႈ     def doAlgebra(op : List[String], operand : List[Long]) : Long = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def doAlgebra(op: List[String], operand: List[Long]): Long = {
    var result = operand.head
    for (i <- 0 until op.length) {
      op(i) match {
        case ""+"" => result += operand(i + 1)
        case ""-"" => result -= operand(i + 1)
        case ""*"" => result *= operand(i + 1)
        case ""//"" => result /= operand(i + 1)
        case ""**"" => result = pow(result.toDouble, operand(i + 1).toDouble).toLong
      }
    }
    result
  }

  def main(args: Array[String]): Unit = {
    val operators = List(""+"", ""*"", ""-"")
    val operands = List(2L, 3L, 4L, 5L)
    println(doAlgebra(operators, operands)) // Output: 9
  }
}","    }
    def main(args: Array[String]) = {
    assert(doAlgebra((List[String](""**"", ""*"", ""+"")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));
    assert(doAlgebra((List[String](""+"", ""*"", ""-"")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));
    assert(doAlgebra((List[String](""//"", ""*"")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));
    }

}
"
HumanEval_161,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇ     //Function ၼႆႉ တေလႆႈၶိုၼ်းပၼ် တူဝ်ၼပ်ႉဢၼ်ဢွၵ်ႇမႃးၼၼ်ႉယဝ်ႉ။    //သင်ဝႃႈ string ဢမ်ႇမီးတူဝ်လိၵ်ႈသင်ၼႆ ၶိုၼ်းပိၼ်ႇဝၢႆႇ string ၼၼ်ႉ။    //ပေႃးဢမ်ႇၼၼ် ႁႂ်ႈမၼ်းမီးၼင်ႇၼၼ်။    //သင်ဝႃႈ s[i] ပဵၼ်တူဝ်လိၵ်ႈၼႆ ဢဝ်တူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ ပိၼ်ႇပၢႆႇၵႂႃႇၸူးတူဝ်လိၵ်ႈဢၼ်မီးတီႈၼိူဝ် ဢမ်ႇၼၼ် ပိၼ်ႇပၢႆႇၵႂႃႇၸူးတူဝ်လိၵ်ႈဢၼ်မီးတီႈတႂ်ႈၼၼ်ႉ။    //သူတေလႆႈပၼ် string s.    // >>> solve((""1234""))
    // (""4321"")
    // >>> solve((""ab""))
    // (""AB"")
    // >>> solve((""#a@C""))
    // (""#A@c"")
    def solve(s : String) : String = {
","def solve(s: String): String = {
    if (s.exists(_.isLetter)) {
      s.map {
        case c if c.isLetter && c.isLower => c.toUpper
        case c if c.isLetter && c.isUpper => c.toLower
        case c => c
      }.mkString
    } else {
      s.reverse
    }
  }
}","    }
    def main(args: Array[String]) = {
    assert(solve((""AsDf"")).equals((""aSdF"")));
    assert(solve((""1234"")).equals((""4321"")));
    assert(solve((""ab"")).equals((""AB"")));
    assert(solve((""#a@C"")).equals((""#A@c"")));
    assert(solve((""#AsdfW^45"")).equals((""#aSDFw^45"")));
    assert(solve((""#6@2"")).equals((""2@6#"")));
    assert(solve((""#$a^D"")).equals((""#$A^d"")));
    assert(solve((""#ccc"")).equals((""#CCC"")));
    }

}
"
HumanEval_162,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //သင်ဝႃႈ 'text' ၼႆႉပဵၼ် ထႅဝ်လိၵ်ႈဢၼ်ဢမ်ႇမီးတူဝ်သင်ၼႆ ၶိုၼ်းဢဝ် None လၢႆႈမႃး    //ပေႃးဝႃႈလႆႈပၼ် string 'text' ၼႆၸိုင် ၶိုၼ်းဢဝ် md5 hash equivalent string မၼ်းၼၼ်ႉ ၶိုၼ်းပၼ်။    // >>> stringToMd5((""Hello world""))
    // Some(""3e25960a79dbc69b674cd4ec67a72c62"")
    def stringToMd5(text : String) : Option[String] = {
","import java.security.MessageDigest

object Problem {
  def stringToMd5(text: String): Option[String] = {
    if (text.isEmpty) None
    else {
      val md = MessageDigest.getInstance(""MD5"")
      val digest = md.digest(text.getBytes)
      Some(digest.map(""%02x"".format(_)).mkString)
    }
  }
}

// Example usage:
// println(Problem.stringToMd5(""Hello world""))  // Output: Some(""3e25960a79dbc69b674cd4ec67a72c62"")","    }
    def main(args: Array[String]) = {
    assert(stringToMd5((""Hello world"")).equals(Some(""3e25960a79dbc69b674cd4ec67a72c62"")));
    assert(stringToMd5(("""")).equals(None));
    assert(stringToMd5((""A B C"")).equals(Some(""0ef78513b0cb8cef12743f5aeb35f888"")));
    assert(stringToMd5((""password"")).equals(Some(""5f4dcc3b5aa765d61d8327deb882cf99"")));
    }

}
"
HumanEval_163,shn_Mymr,scala,"import scala.math._
import scala.collection.mutable._
object Problem {
    //တူဝ်ယၢင်ႇမၼ်း-    //လႄႈ b၊ ၶိုၼ်ႈမႃးၸွမ်းၵၼ်။    //ပေႃးဝႃႈႁဝ်းပၼ် တူဝ်ၼပ်ႉတဵမ်သႂ် သွင်တူဝ် a လႄႈ b ၼႆၸိုင် ၶိုၼ်းဢဝ် တူဝ်ၼပ်ႉဢၼ်ပဵၼ်ၸဵင်ႇၵၼ် ၼႂ်းၵႄႈ a  လႄႈ b ၼၼ်ႉၶိုၼ်း    // >>> generateIntegers((2l), (8l))
    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))
    // >>> generateIntegers((8l), (2l))
    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))
    // >>> generateIntegers((10l), (14l))
    // (List[Long]())
    def generateIntegers(a : Long, b : Long) : List[Long] = {
","import scala.math._
import scala.collection.mutable._

object Problem {
  def generateIntegers(a: Long, b: Long): List[Long] = {
    val start = min(a, b)
    val end = max(a, b)
    val evenNumbers = for (i <- start to end if i % 2 == 0) yield i
    evenNumbers.map(_.toLong).toList
  }
}","    }
    def main(args: Array[String]) = {
    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));
    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));
    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));
    assert(generateIntegers((17l), (89l)).equals((List[Long]())));
    }

}
"
