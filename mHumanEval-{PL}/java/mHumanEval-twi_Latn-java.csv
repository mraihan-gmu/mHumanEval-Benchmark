task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / ɛdan a wɔde ama no.     / Hwɛ sɛ wɔ ahwehwɛ a wɔama no din no mu no, sɛ wɔhwɛ a, ɛbɛn a, ɛbɛn a, ɛbɛn.    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))
    // (false)
    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))
    // (true)
    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {
","import java.util.ArrayList;
import java.util.Collections;

class Problem {
    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {
        if(numbers == null || numbers.size() < 2) {
            return false;
        }
        Collections.sort(numbers);
        for (int i = 0; i < numbers.size() - 1; i++) {
            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        ArrayList<Float> numbers1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f));
        System.out.println(hasCloseElements(numbers1, 0.5f)); // Output: false

        ArrayList<Float> numbers2 = new ArrayList<>(Arrays.asList(1.0f, 2.8f, 3.0f, 4.0f, 5.0f, 2.0f));
        System.out.println(hasCloseElements(numbers2, 0.3f)); // Output: true
    }
}","    }
    public static void main(String[] args) {
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));
    assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));
    }

}
"
HumanEval_1,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Kwati ntweemu biara wɔ input string no mu.     / Nkorɔfo a wɔakyekyɛ no mu biara wɔ ne ho a ɔfã biara a wɔabue no mu biara yɛ nea ɛkata yiye, na wɔn mu biara nni hɔ a ɔhyɛ ne yɔnko mu.    / kyekyɛ saa kuw no mu wɔ ahoma a wɔn ho wɔn ho na fa wɔn a wɔn ho wɔn ho din no ma no.     / Saa adwuma yi mu no, nea wode bɛhyɛ mu ne ahoma a ɛwɔ ntini a wɔato mu. Wo botae ne sɛ     // >>> separateParenGroups((""( ) (( )) (( )( ))""))
    // (new ArrayList<String>(Arrays.asList((String)""()"", (String)""(())"", (String)""(()())"")))
    public static ArrayList<String> separateParenGroups(String paren_string) {
","import java.util.ArrayList;

public class Problem {
    public static ArrayList<String> separateParenGroups(String paren_string) {
        ArrayList<String> groups = new ArrayList<>();
        int balance = 0;
        StringBuilder currentGroup = new StringBuilder();

        for (char c : paren_string.toCharArray()) {
            if (c == '(') {
                balance++;
                currentGroup.append(c);
            } else if (c == ')') {
                balance--;
                currentGroup.append(c);
            }

            if (balance == 0 && currentGroup.length() > 0) {
                groups.add(currentGroup.toString());
                currentGroup.setLength(0);
            }
        }

        return groups;
    }

    public static void main(String[] args) {
        ArrayList<String> result = separateParenGroups(""( ) (( )) (( )( ))"");
        System.out.println(result); // Output: [""()"", ""(())"", ""(()())""]
    }
}","    }
    public static void main(String[] args) {
    assert(separateParenGroups((""(()()) ((())) () ((())()())"")).equals((new ArrayList<String>(Arrays.asList((String)""(()())"", (String)""((()))"", (String)""()"", (String)""((())()())"")))));
    assert(separateParenGroups((""() (()) ((())) (((())))"")).equals((new ArrayList<String>(Arrays.asList((String)""()"", (String)""(())"", (String)""((()))"", (String)""(((())))"")))));
    assert(separateParenGroups((""(()(())((())))"")).equals((new ArrayList<String>(Arrays.asList((String)""(()(())((())))"")))));
    assert(separateParenGroups((""( ) (( )) (( )( ))"")).equals((new ArrayList<String>(Arrays.asList((String)""()"", (String)""(())"", (String)""(()())"")))));
    }

}
"
HumanEval_2,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa nkyekyɛm a ɛwɔ ɔpepepem mu no ma.     / (nea aka no so sen 1 bere nyinaa).     / ne integers (nteɛso a ɛkyɛn so a ɛboro dodow a wɔde ama no so) ne decimals     / Sɛ wɔde adikan a ɛtrɛw a, wobetumi atete mu ayɛ     // >>> truncateNumber((3.5f))
    // (0.5f)
    public static float truncateNumber(float number) {
","int integerPart = (int) number;
        return number - integerPart;
    }
}","    }
    public static void main(String[] args) {
    assert(truncateNumber((3.5f)) == (0.5f));
    assert(truncateNumber((1.25f)) == (0.25f));
    assert(truncateNumber((123.0f)) == (0.0f));
    }

}
"
HumanEval_3,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / saa bere no ɛsɛ sɛ function no san true. Anyɛ saa a ɛsɛ sɛ san false.     Wo adwuma ne sɛ wubehu sɛ wo sika a ɛda wo kɔn mu no so atew ase, na sɛ ɛba saa a, wubehu sɛ wo sika a ɛda wo kɔn mu no so atew.    Wode wo ho hyɛ bank account a efi ase wɔ  no mu na wuyi sika fi mu.    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (false)
    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))
    // (true)
    public static boolean belowZero(ArrayList<Long> operations) {
","import java.util.ArrayList;

public class Problem {
    public static boolean belowZero(ArrayList<Long> operations) {
        long balance = 0;
        for (Long operation : operations) {
            balance += operation;
            if (balance < 0) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        ArrayList<Long> operations1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));
        System.out.println(belowZero(operations1)); // false

        ArrayList<Long> operations2 = new ArrayList<Long>(Arrays.asList(1L, 2L, -4L, 5L));
        System.out.println(belowZero(operations2)); // true
    }
}","    }
    public static void main(String[] args) {
    assert(belowZero((new ArrayList<Long>(Arrays.asList()))) == (false));
    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-3l, (long)1l, (long)2l, (long)-3l)))) == (false));
    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l, (long)6l)))) == (true));
    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (false));
    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-5l)))) == (true));
    assert(belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)2l, (long)-2l, (long)5l, (long)-5l, (long)4l, (long)-4l)))) == (true));
    }

}
"
HumanEval_4,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / MAD = average.  -       / ne ne mfinimfini (ɛno mu no, ne mfinimfini yɛ nea ɛwɔ ha):     / Mean Absolute Deviation ne nsonsonoe a ɛda wɔn mu biara ntam     / wɔ saa data yi mu.     / Sɛ wode input numbers a ɛwɔ array list bi mu a, bu Mean Absolute Deviation     // >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))
    // (1.0f)
    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {
","import java.util.ArrayList;

class Problem {
    // For a given array list of input numbers, calculate Mean Absolute Deviation
    // around the mean of this dataset.
    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {
        if (numbers == null || numbers.isEmpty()) {
            throw new IllegalArgumentException(""The list should not be null or empty"");
        }
        
        // Calculate mean
        float sum = 0.0f;
        for (float num : numbers) {
            sum += num;
        }
        float mean = sum / numbers.size();
        
        // Calculate Mean Absolute Deviation
        float madSum = 0.0f;
        for (float num : numbers) {
            madSum += Math.abs(num - mean);
        }
        
        return madSum / numbers.size();
    }

    // A main method to demonstrate functionality
    public static void main(String[] args) {
        ArrayList<Float> numbers = new ArrayList<Float>();
        numbers.add(1.0f);
        numbers.add(2.0f);
        numbers.add(3.0f);
        numbers.add(4.0f);

        float mad = meanAbsoluteDeviation(numbers);
        System.out.println(""Mean Absolute Deviation: "" + mad);
    }
}","    }
    public static void main(String[] args) {
    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));
    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f)))) == (1.0f));
    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));
    }

}
"
HumanEval_5,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa 'delimeter' ka biribi ho wɔ nsɛm a edi hɔ abien biara a ɛwɔ input array list `numbers'     // >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))
    // (new ArrayList<Long>(Arrays.asList()))
    // >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))
    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    // Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'
    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {
        if (numbers == null || numbers.size() <= 1) {
            return numbers;
        }

        ArrayList<Long> result = new ArrayList<>();
        for (int i = 0; i < numbers.size(); i++) {
            result.add(numbers.get(i));
            if (i != numbers.size() - 1) {
                result.add(delimeter);
            }
        }
        return result;
    }
    
    public static void main(String[] args) {
        ArrayList<Long> numbers1 = new ArrayList<>(Arrays.asList());
        ArrayList<Long> result1 = intersperse(numbers1, 4L);
        System.out.println(result1);

        ArrayList<Long> numbers2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));
        ArrayList<Long> result2 = intersperse(numbers2, 4L);
        System.out.println(result2);
    }
}","    }
    public static void main(String[] args) {
    assert(intersperse((new ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));
    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));
    }

}
"
HumanEval_6,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso no, nea ɛwɔ (() (()) no wɔ ne ntini a ɛboro so abien, na nea ɛwɔ ((())) no wɔ abiɛsa.     / Sɛ́ kuw no mu biara, fa ntini a ɛkorɔn paa a wɔde ayɛ ntini no ma.     / Saa adwuma yi mu no, nea wɔde ba ne ahoma a wɔde mpaawa atetew mu a wɔaka abom no.    // >>> parseNestedParens((""(()()) ((())) () ((())()())""))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))
    public static ArrayList<Long> parseNestedParens(String paren_string) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static ArrayList<Long> parseNestedParens(String paren_string) {
        String[] groups = paren_string.split("" "");
        ArrayList<Long> depths = new ArrayList<>();

        for (String group : groups) {
            long currentDepth = 0;
            long maxDepth = 0;

            for (char c : group.toCharArray()) {
                if (c == '(') {
                    currentDepth++;
                    if (currentDepth > maxDepth) {
                        maxDepth = currentDepth;
                    }
                } else if (c == ')') {
                    currentDepth--;
                }
            }

            depths.add(maxDepth);
        }

        return depths;
    }

    public static void main(String[] args) {
        String input = ""(()()) ((())) () ((())()())"";
        System.out.println(parseNestedParens(input));
    }
}","    }
    public static void main(String[] args) {
    assert(parseNestedParens((""(()()) ((())) () ((())()())"")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));
    assert(parseNestedParens((""() (()) ((())) (((())))"")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));
    assert(parseNestedParens((""(()(())((())))"")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));
    }

}
"
HumanEval_7,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa ahyɛnsode a ɛwɔ substring no mu nkutoo yɛ ahyɛnsode a ɛwɔ ahyɛnsode no mu no mu nhwehwɛmu     // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (""a""))
    // (new ArrayList<String>(Arrays.asList()))
    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)""abc"", (String)""bacd"", (String)""cde"", (String)""array""))), (""a""))
    // (new ArrayList<String>(Arrays.asList((String)""abc"", (String)""bacd"", (String)""array"")))
    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {
","public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {
        return strings.stream()
                .filter(s -> s.contains(substring))
                .collect(Collectors.toCollection(ArrayList::new));
    }
}","    }
    public static void main(String[] args) {
    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (""john"")).equals((new ArrayList<String>(Arrays.asList()))));
    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)""xxx"", (String)""asd"", (String)""xxy"", (String)""john doe"", (String)""xxxAAA"", (String)""xxx""))), (""xxx"")).equals((new ArrayList<String>(Arrays.asList((String)""xxx"", (String)""xxxAAA"", (String)""xxx"")))));
    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)""xxx"", (String)""asd"", (String)""aaaxxy"", (String)""john doe"", (String)""xxxAAA"", (String)""xxx""))), (""xx"")).equals((new ArrayList<String>(Arrays.asList((String)""xxx"", (String)""aaaxxy"", (String)""xxxAAA"", (String)""xxx"")))));
    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)""grunt"", (String)""trumpet"", (String)""prune"", (String)""gruesome""))), (""run"")).equals((new ArrayList<String>(Arrays.asList((String)""grunt"", (String)""prune"")))));
    }

}
"
HumanEval_8,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ wɔto no a, ɛsɛ sɛ ɛyɛ 0 na sɛ wɔto no a, ɛsɛ sɛ ɛyɛ 1.     / Sɛ wode integers a ɛwɔ array list bi mu no rebɔ a, fa paara a ɛne integers a ɛwɔ array array list no mu no nyinaa ka ne wɔn mmɔfra no mu baako.    // >>> sumProduct((new ArrayList<Long>(Arrays.asList())))
    // (Pair.with(0l, 1l))
    // >>> sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))
    // (Pair.with(10l, 24l))
    public static Pair<Long, Long> sumProduct(ArrayList<Long> numbers) {
","long sum = 0L;
        long product = 1L;
        
        for (Long number : numbers) {
            sum += number;
            product *= number;
        }
        
        return Pair.with(sum, product);
    }
}","    }
    public static void main(String[] args) {
    assert(sumProduct((new ArrayList<Long>(Arrays.asList()))).equals((Pair.with(0l, 1l))));
    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((Pair.with(3l, 1l))));
    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)100l, (long)0l)))).equals((Pair.with(100l, 0l))));
    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))).equals((Pair.with(15l, 105l))));
    assert(sumProduct((new ArrayList<Long>(Arrays.asList((long)10l)))).equals((Pair.with(10l, 10l))));
    }

}
"
HumanEval_9,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / wɔ nea edi hɔ no mu.     / Fi ɔfã bi a wɔde akyerɛw ɔfã a ɛkorɔn a wɔaka ho asɛm no mu, yɛ ɔfã a wɔaka ho asɛm no ho ɔfã a ɛkorɔn a wɔaka ho asɛm de abedu bere bi a wɔde ama no     // >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))
    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {
","import java.util.*;

class Problem {
    // From a given array list of integers, generate an array list of rolling maximum element found until given moment
    // in the sequence.
    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {
        ArrayList<Long> result = new ArrayList<>();
        if (numbers == null || numbers.isEmpty()) {
            return result;
        }
        long currentMax = Long.MIN_VALUE;
        for (Long number : numbers) {
            currentMax = Math.max(currentMax, number);
            result.add(currentMax);
        }
        return result;
    }

    public static void main(String[] args) {
        ArrayList<Long> numbers = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 3L, 4L, 2L));
        ArrayList<Long> rollingMaxNumbers = rollingMax(numbers);
        System.out.println(rollingMaxNumbers); // Output: [1, 2, 3, 3, 3, 4, 4]
    }
}","    }
    public static void main(String[] args) {
    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));
    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));
    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)100l, (long)100l)))));
    }

}
"
HumanEval_10,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / - Fa ntweamu a edi kan a edi kan wɔ palindromic suffix no ho ka ntweamu a edi kan a edi kan wɔ ntweamu a edi kan no ho.    / - Hwehwɛ ntweaa a ɛware paa a ɛwɔ ntweaa a wɔde ama no mu a ɛyɛ palindrome.     / Adwene a ɛwɔ algorithm no mu yɛ tiawa:     / Hwehwɛ palindrome a ɛware paa a efi ase wɔ ahama a wɔde ama no so.     // >>> makePalindrome((""""))
    // ("""")
    // >>> makePalindrome((""cat""))
    // (""catac"")
    // >>> makePalindrome((""cata""))
    // (""catac"")
    public static String makePalindrome(String string) {
","public static String makePalindrome(String string) {
    if (string == null || string.length() <= 1) {
        return string;
    }

    // Function to check if a given string is a palindrome
    boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        
        while (left < right) {
            if (s.charAt(left++) != s.charAt(right--)) {
                return false;
            }
        }
        
        return true;
    }

    // Find longest palindromic suffix
    int n = string.length();
    for (int i = n; i > 0; i--) {
        if (isPalindrome(string.substring(0, i))) {
            StringBuilder sb = new StringBuilder(string.substring(i));
            sb.reverse();
            return string + sb.toString();
        }
    }
    
    return string; // fallback should not be reached
}","    }
    public static void main(String[] args) {
    assert(makePalindrome(("""")).equals(("""")));
    assert(makePalindrome((""x"")).equals((""x"")));
    assert(makePalindrome((""xyz"")).equals((""xyzyx"")));
    assert(makePalindrome((""xyx"")).equals((""xyx"")));
    assert(makePalindrome((""jerry"")).equals((""jerryrrej"")));
    }

}
"
HumanEval_11,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Yɛ binary XOR wɔ saa input yi so na san ma no yɛ string.     / Input yɛ ahama abien a a ne b yɛ 1 ne 0 pɛ.     // >>> stringXor((""010""), (""110""))
    // (""100"")
    public static String stringXor(String a, String b) {
","if (a.length() != b.length()) {
            throw new IllegalArgumentException(""Input strings must have the same length."");
        }
        
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < a.length(); i++) {
            char charA = a.charAt(i);
            char charB = b.charAt(i);
            
            if (charA != '0' && charA != '1' || charB != '0' && charB != '1') {
                throw new IllegalArgumentException(""Input strings must consist only of '0' and '1'."");
            }
            
            // Perform XOR operation and append to the result
            result.append(charA == charB ? '0' : '1');
        }
        
        return result.toString();
    }
}","    }
    public static void main(String[] args) {
    assert(stringXor((""111000""), (""101010"")).equals((""010010"")));
    assert(stringXor((""1""), (""1"")).equals((""0"")));
    assert(stringXor((""0101""), (""0000"")).equals((""0101"")));
    }

}
"
HumanEval_12,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / ntweaa a ne tenten yɛ pɛ. Sɛ input array list no yɛ hwee a, de null ma.     / Fi ahama a wɔabɔ ho din no mu, fa nea ɛware no san. Fa nea edi kan no san wɔ nea ɛboro     // >>> longest((new ArrayList<String>(Arrays.asList())))
    // Optional.empty()
    // >>> longest((new ArrayList<String>(Arrays.asList((String)""a"", (String)""b"", (String)""c""))))
    // Optional.of(""a"")
    // >>> longest((new ArrayList<String>(Arrays.asList((String)""a"", (String)""bb"", (String)""ccc""))))
    // Optional.of(""ccc"")
    public static Optional<String> longest(ArrayList<String> strings) {
","if (strings == null || strings.isEmpty()) {
            return Optional.empty();
        }
        return strings.stream()
                .max(Comparator.comparingInt(String::length)
                .thenComparing(Comparator.naturalOrder()));
    }
}","    }
    public static void main(String[] args) {
    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));
    assert(longest((new ArrayList<String>(Arrays.asList((String)""x"", (String)""y"", (String)""z"")))).equals(Optional.of(""x"")));
    assert(longest((new ArrayList<String>(Arrays.asList((String)""x"", (String)""yyy"", (String)""zzzz"", (String)""www"", (String)""kkkk"", (String)""abc"")))).equals(Optional.of(""zzzz"")));
    }

}
"
HumanEval_13,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa a a ne b yɛ wɔn a wɔkyekyɛ a ɛsen biara a ɛwɔ anohyeto abien mu no ma no     // >>> greatestCommonDivisor((3l), (5l))
    // (1l)
    // >>> greatestCommonDivisor((25l), (15l))
    // (5l)
    public static long greatestCommonDivisor(long a, long b) {
","if (b == 0) {
        return a;
    }
    return greatestCommonDivisor(b, a % b);
}","    }
    public static void main(String[] args) {
    assert(greatestCommonDivisor((3l), (7l)) == (1l));
    assert(greatestCommonDivisor((10l), (15l)) == (5l));
    assert(greatestCommonDivisor((49l), (14l)) == (7l));
    assert(greatestCommonDivisor((144l), (60l)) == (12l));
    }

}
"
HumanEval_14,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / De ntweaseɛ a ɛwɔ ntweaseɛ no nyinaa ho din fi ntweaseɛ a ɛware paa no so kɔ ntweaseɛ a ɛware paa no so ba     // >>> allPrefixes((""abc""))
    // (new ArrayList<String>(Arrays.asList((String)""a"", (String)""ab"", (String)""abc"")))
    public static ArrayList<String> allPrefixes(String string) {
","ArrayList<String> prefixes = new ArrayList<>();
        for (int i = 1; i <= string.length(); i++) {
            prefixes.add(string.substring(0, i));
        }
        return prefixes;
    }
}","    }
    public static void main(String[] args) {
    assert(allPrefixes(("""")).equals((new ArrayList<String>(Arrays.asList()))));
    assert(allPrefixes((""asdfgh"")).equals((new ArrayList<String>(Arrays.asList((String)""a"", (String)""as"", (String)""asd"", (String)""asdf"", (String)""asdfg"", (String)""asdfgh"")))));
    assert(allPrefixes((""WWW"")).equals((new ArrayList<String>(Arrays.asList((String)""W"", (String)""WW"", (String)""WWW"")))));
    }

}
"
HumanEval_15,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Deɛ ɛwɔ 0 kɔsi n nyinaa mu no yɛ string a ɛwɔ space-delimited numbers.     // >>> stringSequence((0l))
    // (""0"")
    // >>> stringSequence((5l))
    // (""0 1 2 3 4 5"")
    public static String stringSequence(long n) {
","import java.util.stream.Collectors;
import java.util.stream.LongStream;

class Problem {
    public static String stringSequence(long n) {
        return LongStream.rangeClosed(0, n)
                         .mapToObj(Long::toString)
                         .collect(Collectors.joining("" ""));
    }
}","    }
    public static void main(String[] args) {
    assert(stringSequence((0l)).equals((""0"")));
    assert(stringSequence((3l)).equals((""0 1 2 3"")));
    assert(stringSequence((10l)).equals((""0 1 2 3 4 5 6 7 8 9 10"")));
    }

}
"
HumanEval_16,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ wɔde string bi ma wo a, hwehwɛ nkyerɛwde ahorow a ɛwɔ mu (a wonhwɛ nsɛmfua a ɛwɔ mu)    // >>> countDistinctCharacters((""xyzXYZ""))
    // (3l)
    // >>> countDistinctCharacters((""Jerry""))
    // (4l)
    public static long countDistinctCharacters(String string) {
","import java.util.*;

public class Problem {
    // Given a string, find out how many distinct characters (regardless of case) does it consist of
    public static long countDistinctCharacters(String string) {
        // Convert the string to lowercase to ensure case-insensitivity
        String lowerCaseString = string.toLowerCase();
        // Use a HashSet to store unique characters
        Set<Character> uniqueChars = new HashSet<>();
        
        // Iterate over each character in the string and add it to the set
        for (char c : lowerCaseString.toCharArray()) {
            uniqueChars.add(c);
        }
        
        // Return the size of the set, i.e., the number of distinct characters
        return uniqueChars.size();
    }
}","    }
    public static void main(String[] args) {
    assert(countDistinctCharacters(("""")) == (0l));
    assert(countDistinctCharacters((""abcde"")) == (5l));
    assert(countDistinctCharacters((""abcdecadeCADE"")) == (5l));
    assert(countDistinctCharacters((""aaaaAAAAaaaa"")) == (1l));
    assert(countDistinctCharacters((""Jerry jERRY JeRRRY"")) == (5l));
    }

}
"
HumanEval_17,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    ' 'Daw' - nnwom a wɔto no mprɛnson, na etumi di dɔnkoro.    /'oidiye' - ɔfã bi, ɛtra hɔ nnɔnhwerew abien     / 'o' - ɛnne no nyinaa, etumi di nnwom anan     / Anansesɛm bi wɔ hɔ:     / ɛnnyɛ nea etwa to.     / Wo adwuma ne sɛ wobɛhwehwɛ saa ahoma yi mu na woane ahoma a ɛgyina hɔ ma mpɛn dodow a emu biara bɔ no     / Nea wɔde kɔ adwuma yi mu ne nnwom a wɔto no wɔ ASCII soronko bi mu.     // >>> parseMusic((""o o| .| o| o| .| .| .| .| o o""))
    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))
    public static ArrayList<Long> parseMusic(String music_string) {
","import java.util.ArrayList;

class Problem {
    public static ArrayList<Long> parseMusic(String music_string) {
        ArrayList<Long> beats = new ArrayList<>();
        String[] notes = music_string.split("" "");
        
        for (String note : notes) {
            if (note.equals(""o"")) {
                beats.add(4L);
            } else if (note.equals(""o|"")) {
                beats.add(2L);
            } else if (note.equals("".|"")) {
                beats.add(1L);
            }
        }
        
        return beats;
    }
}","    }
    public static void main(String[] args) {
    assert(parseMusic(("""")).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(parseMusic((""o o o o"")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));
    assert(parseMusic(("".| .| .| .|"")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));
    assert(parseMusic((""o| o| .| .| o o o o"")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));
    assert(parseMusic((""o| .| o| .| o o| o o|"")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));
    }

}
"
HumanEval_18,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Hwehwɛ mpɛn dodow a wobetumi ahu substring bi wɔ mfitiaseɛ no mu. Hwehwɛ nsɛm a ɛboro so.     // >>> howManyTimes((""""), (""a""))
    // (0l)
    // >>> howManyTimes((""aaa""), (""a""))
    // (3l)
    // >>> howManyTimes((""aaaa""), (""aa""))
    // (3l)
    public static long howManyTimes(String string, String substring) {
","public static long howManyTimes(String string, String substring) {
        long count = 0;
        for (int i = 0; i <= string.length() - substring.length(); i++) {
            if (string.substring(i, i + substring.length()).equals(substring)) {
                count++;
            }
        }
        return count;
    }
}","    }
    public static void main(String[] args) {
    assert(howManyTimes((""""), (""x"")) == (0l));
    assert(howManyTimes((""xyxyxyx""), (""x"")) == (4l));
    assert(howManyTimes((""cacacacac""), (""cac"")) == (4l));
    assert(howManyTimes((""john doe""), (""john"")) == (1l));
    }

}
"
HumanEval_19,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa akontaahyɛde a wɔasiesie no fi ketewa kɔ kɛse mu no san kɔ     / Nhyehyɛe a ɛfata ne 'nsa', 'biako', 'nsa', 'nan', 'mmienu', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa', 'mmiɛnsa'.    / Nkɔanim yɛ nsensan a wɔde atoto nneɛma ho fi 'nsa' kosi 'akron' ho.     // >>> sortNumbers((""three one five""))
    // (""one three five"")
    public static String sortNumbers(String numbers) {
","public static String sortNumbers(String numbers) {
        List<String> numeralList = Arrays.asList(numbers.split("" ""));
        Map<String, Integer> numeralToValue = new HashMap<>();
        numeralToValue.put(""zero"", 0);
        numeralToValue.put(""one"", 1);
        numeralToValue.put(""two"", 2);
        numeralToValue.put(""three"", 3);
        numeralToValue.put(""four"", 4);
        numeralToValue.put(""five"", 5);
        numeralToValue.put(""six"", 6);
        numeralToValue.put(""seven"", 7);
        numeralToValue.put(""eight"", 8);
        numeralToValue.put(""nine"", 9);

        numeralList.sort(Comparator.comparingInt(numeralToValue::get));

        return String.join("" "", numeralList);
    }
}","    }
    public static void main(String[] args) {
    assert(sortNumbers(("""")).equals(("""")));
    assert(sortNumbers((""three"")).equals((""three"")));
    assert(sortNumbers((""three five nine"")).equals((""three five nine"")));
    assert(sortNumbers((""five zero four seven nine eight"")).equals((""zero four five seven eight nine"")));
    assert(sortNumbers((""six five four three two one zero"")).equals((""zero one two three four five six"")));
    }

}
"
HumanEval_20,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / afoforo na fa di wɔn akyi (nsa a ɛyɛ ketewa, nea ɛyɛ kɛse).    / Fi adaka a wɔde ama no mu a ɛwowɔ (ɛno tenten bɛyɛ abien) yi na fa mmienu a ɛbɛn biara ma no     // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f))))
    // (Pair.with(2.0f, 2.2f))
    // >>> findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))))
    // (Pair.with(2.0f, 2.0f))
    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {
","import java.util.*;
import org.javatuples.*;

class Problem {
    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {
        if (numbers == null || numbers.size() < 2) {
            throw new IllegalArgumentException(""List must contain at least two numbers."");
        }

        Collections.sort(numbers);
        float minDiff = Float.MAX_VALUE;
        Pair<Float, Float> closestPair = null;

        for (int i = 0; i < numbers.size() - 1; i++) {
            float current = numbers.get(i);
            float next = numbers.get(i + 1);
            float diff = Math.abs(current - next);

            if (diff < minDiff) {
                minDiff = diff;
                closestPair = Pair.with(current, next);
            }
        }

        return closestPair;
    }

    public static void main(String[] args) {
        ArrayList<Float> list1 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.2f));
        ArrayList<Float> list2 = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.0f));
        
        System.out.println(findClosestElements(list1)); // Output: (2.0, 2.2)
        System.out.println(findClosestElements(list2)); // Output: (2.0, 2.0)
    }
}","    }
    public static void main(String[] args) {
    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(3.9f, 4.0f))));
    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f)))).equals((Pair.with(5.0f, 5.9f))));
    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f)))).equals((Pair.with(2.0f, 2.2f))));
    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f)))).equals((Pair.with(2.0f, 2.0f))));
    assert(findClosestElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f)))).equals((Pair.with(2.2f, 3.1f))));
    }

}
"
HumanEval_21,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / a sɛ wohwɛ mu a, ɛbere a ɛbɛn no mu biara bɛyɛ 0 na nea ɛbɛn no nso ayɛ 1     / Sɛ wɔama wo din ahorow (a anyɛ yiye koraa no, emu mmienu), fa linear transform yɛ saa din no,     // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))
    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))
    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    // Given array list of numbers (of at least two elements), apply a linear transform to that array list,
    // such that the smallest number will become 0 and the largest will become 1
    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {
        if (numbers == null || numbers.size() < 2) {
            throw new IllegalArgumentException(""Input list must contain at least two elements."");
        }
        
        float min = Float.MAX_VALUE;
        float max = Float.MIN_VALUE;
        
        for (float num : numbers) {
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }
        
        ArrayList<Float> rescaled = new ArrayList<>(numbers.size());
        for (float num : numbers) {
            float normalized = (num - min) / (max - min);
            rescaled.add(normalized);
        }
        
        return rescaled;
    }
    
    public static void main(String[] args) {
        ArrayList<Float> numbers = new ArrayList<>(Arrays.asList(1.0f, 2.0f, 3.0f, 4.0f, 5.0f));
        ArrayList<Float> normalizedNumbers = rescaleToUnit(numbers);
        System.out.println(normalizedNumbers); // Output should be [0.0, 0.25, 0.5, 0.75, 1.0]
    }
}","    }
    public static void main(String[] args) {
    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));
    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));
    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));
    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));
    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f)))));
    }

}
"
HumanEval_22,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Filter a wɔde ama array list biara a ɛwɔ javathon no mu no ma integers nkutoo     // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)""a"", (String)3.14f, (String)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)5l)))
    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, ""abc"", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))
    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    // Filter given array list of any javathon values only for integers
    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {
        ArrayList<Long> result = new ArrayList<>();
        for (Object value : values) {
            if (value instanceof Long) {
                result.add((Long) value);
            }
        }
        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(filterIntegers((new ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, ""adasd"")))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)))));
    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l, ""c"", 3l, 3l, ""a"", ""b"")))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)))));
    }

}
"
HumanEval_23,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Ma ntweaa a wɔde ama no no tenten     // >>> stringLength((""""))
    // (0l)
    // >>> stringLength((""abc""))
    // (3l)
    public static long strlen(String string) {
","// Check if the string is null
        if (string == null) {
            return 0L;
        }
        // Return the length of the string
        return (long) string.length();
    }
}","    }
    public static void main(String[] args) {
    assert(strlen(("""")) == (0l));
    assert(strlen((""x"")) == (1l));
    assert(strlen((""asdasnakj"")) == (9l));
    }

}
"
HumanEval_24,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ wɔama dodow bi a, hwehwɛ dodow a ɛboro so a ɛkyekyɛ n pɛ, a ɛboro n so     // >>> largestDivisor((15l))
    // (5l)
    public static long largestDivisor(long n) {
","if (n <= 1) {
            throw new IllegalArgumentException(""n must be greater than 1"");
        }
        for (long i = n / 2; i >= 1; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1; // This line is actually never reached if the function is used correctly
    }
}","    }
    public static void main(String[] args) {
    assert(largestDivisor((3l)) == (1l));
    assert(largestDivisor((7l)) == (1l));
    assert(largestDivisor((10l)) == (5l));
    assert(largestDivisor((100l)) == (50l));
    assert(largestDivisor((49l)) == (7l));
    }

}
"
HumanEval_25,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ wode nneɛma a ɛwɔ mu no nyinaa yɛ adwuma a, ɛsɛ sɛ wode nea ɛwɔ mu no yɛ adwuma.    / Ɛsɛ sɛ wɔde nneɛma a ɛboa no biara di dwuma mpɛn dodow a ɛboa no wɔ nea wɔde yɛ no mu.     / De ɔprammire a wɔakyekyɛ a ɛwɔ ɔfrafra a wɔde ama no mu no ma no, fi ɔfra a ɛyɛ ketewa paa so kɔ ɔfra a ɛyɛ kɛse paa so.     // >>> factorize((8l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))
    // >>> factorize((25l))
    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))
    // >>> factorize((70l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))
    public static ArrayList<Long> factorize(long n) {
","import java.util.ArrayList;

class Problem {
    public static ArrayList<Long> factorize(long n) {
        ArrayList<Long> factors = new ArrayList<>();
        for (long factor = 2; factor * factor <= n; factor++) {
            while (n % factor == 0) {
                factors.add(factor);
                n /= factor;
            }
        }
        if (n > 1) {
            factors.add(n);
        }
        return factors;
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(factorize(8l));   // Output: [2, 2, 2]
        System.out.println(factorize(25l));  // Output: [5, 5]
        System.out.println(factorize(70l));  // Output: [2, 5, 7]
    }
}","    }
    public static void main(String[] args) {
    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));
    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));
    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));
    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));
    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));
    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));
    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));
    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));
    }

}
"
HumanEval_26,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa nneɛma a ɛwɔ hɔ no di kan wɔ nea wɔde aba no mu.     / Fi ɔfã a wɔato din integers no mu yi nneɛma a ɛtaa ba no nyinaa fi hɔ.     // >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))
    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {
","import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class Problem {
    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {
        // Create a HashSet to keep track of duplicates
        HashSet<Long> seen = new HashSet<>();
        // Create a list for results
        ArrayList<Long> result = new ArrayList<>();
        // Create a temporary HashSet to track elements that are counted more than once
        HashSet<Long> duplicates = new HashSet<>();

        for (Long number : numbers) {
            if (seen.contains(number)) {
                // If already seen and not added to duplicates, add to duplicates
                duplicates.add(number);
            } else {
                // Mark this number as seen
                seen.add(number);
            }
        }

        for (Long number : numbers) {
            // Add only those numbers to result which are not in duplicates
            if (!duplicates.contains(number)) {
                result.add(number);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        ArrayList<Long> input = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 2L, 4L));
        ArrayList<Long> output = removeDuplicates(input);
        System.out.println(output);  // Output: [1, 3, 4]
    }
}","    }
    public static void main(String[] args) {
    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));
    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));
    }

}
"
HumanEval_27,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ wode kyerɛ sɛ ahama bi wɔ hɔ a, dan nkyerɛwde a wɔde nkyerɛwde akɛse na wɔde nkyerɛwde akɛse na wɔde nkyerɛwde nketewa.     // >>> flipCase((""Hello""))
    // (""hELLO"")
    public static String flipCase(String string) {
","StringBuilder flipped = new StringBuilder();
        for (char c : string.toCharArray()) {
            if (Character.isUpperCase(c)) {
                flipped.append(Character.toLowerCase(c));
            } else if (Character.isLowerCase(c)) {
                flipped.append(Character.toUpperCase(c));
            } else {
                flipped.append(c);
            }
        }
        return flipped.toString();
    }
}","    }
    public static void main(String[] args) {
    assert(flipCase(("""")).equals(("""")));
    assert(flipCase((""Hello!"")).equals((""hELLO!"")));
    assert(flipCase((""These violent delights have violent ends"")).equals((""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"")));
    }

}
"
HumanEval_28,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa ahama a ɛwɔ din din mu no nyinaa yɛ ahama biako     // >>> concatenate((new ArrayList<String>(Arrays.asList())))
    // ("""")
    // >>> concatenate((new ArrayList<String>(Arrays.asList((String)""a"", (String)""b"", (String)""c""))))
    // (""abc"")
    public static String concatenate(ArrayList<String> strings) {
","return String.join("""", strings);
    }
}","    }
    public static void main(String[] args) {
    assert(concatenate((new ArrayList<String>(Arrays.asList()))).equals(("""")));
    assert(concatenate((new ArrayList<String>(Arrays.asList((String)""x"", (String)""y"", (String)""z"")))).equals((""xyz"")));
    assert(concatenate((new ArrayList<String>(Arrays.asList((String)""x"", (String)""y"", (String)""z"", (String)""w"", (String)""k"")))).equals((""xyzwk"")));
    }

}
"
HumanEval_29,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa ahyɛnsode a wɔde di kan a wɔde di kan no nkutoo na yɛ ahyɛnsode a ɛwɔ ahyɛnsode a wɔde di kan no mu.     // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (""a""))
    // (new ArrayList<String>(Arrays.asList()))
    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)""abc"", (String)""bcd"", (String)""cde"", (String)""array""))), (""a""))
    // (new ArrayList<String>(Arrays.asList((String)""abc"", (String)""array"")))
    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {
","return strings.stream()
                      .filter(s -> s.startsWith(prefix))
                      .collect(Collectors.toCollection(ArrayList::new));
    }
}","    }
    public static void main(String[] args) {
    assert(filterByPrefix((new ArrayList<String>(Arrays.asList())), (""john"")).equals((new ArrayList<String>(Arrays.asList()))));
    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)""xxx"", (String)""asd"", (String)""xxy"", (String)""john doe"", (String)""xxxAAA"", (String)""xxx""))), (""xxx"")).equals((new ArrayList<String>(Arrays.asList((String)""xxx"", (String)""xxxAAA"", (String)""xxx"")))));
    }

}
"
HumanEval_30,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / De adwenkyerɛ a ɛwɔ ɔfã a wɔato din array no mu nkutoo na ɛba.     // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))
    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))
    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))
    public static ArrayList<Long> getPositive(ArrayList<Long> l) {
","import java.util.ArrayList;

class Problem {
    // Return only positive numbers in the array list.
    public static ArrayList<Long> getPositive(ArrayList<Long> l) {
        ArrayList<Long> positives = new ArrayList<>();
        for (Long number : l) {
            if (number > 0) {
                positives.add(number);
            }
        }
        return positives;
    }
}","    }
    public static void main(String[] args) {
    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));
    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));
    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    }

}
"
HumanEval_31,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ wɔde akontaahyɛde bi ma a, yɛ true, na sɛ ɛnte saa a yɛ false.     // >>> isPrime((6l))
    // (false)
    // >>> isPrime((101l))
    // (true)
    // >>> isPrime((11l))
    // (true)
    // >>> isPrime((13441l))
    // (true)
    // >>> isPrime((61l))
    // (true)
    // >>> isPrime((4l))
    // (false)
    // >>> isPrime((1l))
    // (false)
    public static boolean isPrime(long n) {
","if (n <= 1) {
            return false;
        }
        if (n <= 3) {
            return true;
        }
        if (n % 2 == 0 || n % 3 == 0) {
            return false;
        }
        for (long i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(isPrime((6l)) == (false));
    assert(isPrime((101l)) == (true));
    assert(isPrime((11l)) == (true));
    assert(isPrime((13441l)) == (true));
    assert(isPrime((61l)) == (true));
    assert(isPrime((4l)) == (false));
    assert(isPrime((1l)) == (false));
    assert(isPrime((5l)) == (true));
    assert(isPrime((11l)) == (true));
    assert(isPrime((17l)) == (true));
    assert(isPrime((85l)) == (false));
    assert(isPrime((77l)) == (false));
    assert(isPrime((255379l)) == (false));
    }

}
"
HumanEval_33,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / na wɔde toto nea ɛne no hyia ho.    / l' yɛ pɛ sɛ l wɔ index ahorow a enni mu a wɔkyekyɛ mu abiɛsa mu, bere a ne bo wɔ index ahorow a wɔkyekyɛ mu abiɛsa mu yɛ pɛ     / Saa adwuma yi fa ɔmo a ɔmo a ɔmo list l na ɛde ɔmo a ɔmo list l' a ɛte sɛ     // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))
    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))
    public static ArrayList<Long> sortThird(ArrayList<Long> l) {
","import java.util.*;

class Problem {
    public static ArrayList<Long> sortThird(ArrayList<Long> l) {
        // Create a new list to store elements at indices divisible by three
        ArrayList<Long> extracted = new ArrayList<>();

        // Extract the elements at indices divisible by three
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                extracted.add(l.get(i));
            }
        }

        // Sort the extracted elements
        Collections.sort(extracted);

        // Create a new list to store the resultant elements
        ArrayList<Long> result = new ArrayList<>(l);

        // Replace the original elements at indices divisible by three with the sorted ones
        int sortedIndex = 0;
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                result.set(i, extracted.get(sortedIndex));
                sortedIndex++;
            }
        }

        return result;
    }

    public static void main(String[] args) {
        ArrayList<Long> list1 = new ArrayList<Long>(Arrays.asList(1L, 2L, 3L));
        ArrayList<Long> result1 = sortThird(list1);
        System.out.println(result1);

        ArrayList<Long> list2 = new ArrayList<Long>(Arrays.asList(5L, 6L, 3L, 4L, 8L, 9L, 2L));
        ArrayList<Long> result2 = sortThird(list2);
        System.out.println(result2);
    }
}","    }
    public static void main(String[] args) {
    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))));
    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)3l, (long)4l, (long)6l, (long)9l, (long)5l)))));
    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)9l, (long)4l, (long)8l, (long)3l, (long)5l)))));
    assert(sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l, (long)1l)))));
    }

}
"
HumanEval_34,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / De nneɛma soronko a wɔasiesie no san ba wɔ ɔfã ɔfã din mu     // >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))
    public static ArrayList<Long> unique(ArrayList<Long> l) {
","import java.util.*;
import java.util.stream.*;

class Problem {
    // Return sorted unique elements in an array array list
    public static ArrayList<Long> unique(ArrayList<Long> l) {
        return l.stream()
                .distinct()
                .sorted()
                .collect(Collectors.toCollection(ArrayList::new));
    }

    public static void main(String[] args) {
        ArrayList<Long> inputList = new ArrayList<>(Arrays.asList(5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L));
        ArrayList<Long> uniqueSortedList = unique(inputList);
        System.out.println(uniqueSortedList);
    }
}","    }
    public static void main(String[] args) {
    assert(unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));
    }

}
"
HumanEval_35,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / De nneɛma a ɛboro so wɔ ɔfã no din mu no ma.     // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (3l)
    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))
    // (123l)
    public static long maxElement(ArrayList<Long> l) {
","public static long maxElement(ArrayList<Long> l) {
        if (l == null || l.isEmpty()) {
            throw new IllegalArgumentException(""List cannot be null or empty"");
        }
        long max = Long.MIN_VALUE;
        for (Long num : l) {
            max = Math.max(max, num);
        }
        return max;
    }
}","    }
    public static void main(String[] args) {
    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));
    assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l)))) == (124l));
    }

}
"
HumanEval_36,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa mpɛn dodow a 7 no pue wɔ integers a wɔn mu yɛ ketewa sen n a 11 anaa 13 yɛ no mu.     // >>> fizzBuzz((50l))
    // (0l)
    // >>> fizzBuzz((78l))
    // (2l)
    // >>> fizzBuzz((79l))
    // (3l)
    public static long fizzBuzz(long n) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    public static long fizzBuzz(long n) {
        long count = 0;
        for (long i = 1; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                count += countSevens(i);
            }
        }
        return count;
    }

    private static int countSevens(long number) {
        int count = 0;
        while (number > 0) {
            if (number % 10 == 7) {
                count++;
            }
            number /= 10;
        }
        return count;
    }
}","    }
    public static void main(String[] args) {
    assert(fizzBuzz((50l)) == (0l));
    assert(fizzBuzz((78l)) == (2l));
    assert(fizzBuzz((79l)) == (3l));
    assert(fizzBuzz((100l)) == (3l));
    assert(fizzBuzz((200l)) == (6l));
    assert(fizzBuzz((4000l)) == (192l));
    assert(fizzBuzz((10000l)) == (639l));
    assert(fizzBuzz((100000l)) == (8026l));
    }

}
"
HumanEval_37,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / kɔ ɛmu a ɛmu yɛ pɛ mu, nanso wɔasiesie no.     / l' yɛ pɛ sɛ l wɔ ntontow mu, bere a ne bo wɔ ntontow mu yɛ pɛ     / Saa adwuma yi fa ɔmo a ɔmo a ɔmo list l na ɛde ɔmo a ɔmo list l' a ɛte sɛ     // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))
    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))
    public static ArrayList<Long> sortEven(ArrayList<Long> l) {
","public static ArrayList<Long> sortEven(ArrayList<Long> l) {
        ArrayList<Long> evenIndicesValues = new ArrayList<>();
        
        // Collect values from even indices
        for (int i = 0; i < l.size(); i += 2) {
            evenIndicesValues.add(l.get(i));
        }
        
        // Sort values collected from even indices
        Collections.sort(evenIndicesValues);
        
        // Create an iterator for sorted even values
        Iterator<Long> iterator = evenIndicesValues.iterator();
        
        // Form the result list by setting sorted even values and copying odd values
        for (int i = 0; i < l.size(); i++) {
            if (i % 2 == 0) {
                // Set sorted values at even indices
                l.set(i, iterator.next());
            }
            // Values at odd indices remain the same
        }
        
        return l;
    }
}","    }
    public static void main(String[] args) {
    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));
    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)5l, (long)0l, (long)9l, (long)1l, (long)123l)))));
    assert(sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)-12l, (long)4l, (long)23l, (long)2l, (long)3l, (long)11l, (long)12l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)-12l, (long)8l, (long)3l, (long)4l, (long)5l, (long)2l, (long)12l, (long)11l, (long)23l, (long)-10l)))));
    }

}
"
HumanEval_39,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / prime_fib ma yɛn n-nkyekyɛmu a ɛyɛ Fibonacci nɔma na ɛyɛ prime nso.     // >>> primeFib((1l))
    // (2l)
    // >>> primeFib((2l))
    // (3l)
    // >>> primeFib((3l))
    // (5l)
    // >>> primeFib((4l))
    // (13l)
    // >>> primeFib((5l))
    // (89l)
    public static long primeFib(long n) {
","import java.util.*;
import org.javatuples.*;

class Problem {
    // Function to check if a number is prime
    public static boolean isPrime(long num) {
        if (num <= 1) return false;
        if (num <= 3) return true; // 2 and 3 are prime
        if (num % 2 == 0 || num % 3 == 0) return false;
        for (long i = 5; i * i <= num; i += 6) {
            if (num % i == 0 || num % (i + 2) == 0) return false;
        }
        return true;
    }

    // Function to get the n-th Fibonacci number that is also prime
    public static long primeFib(long n) {
        long count = 0;
        long a = 0;
        long b = 1;
        
        while (true) {
            long next = a + b;
            a = b;
            b = next;
            
            if (isPrime(next)) {
                count++;
                if (count == n) {
                    return next;
                }
            }
        }
    }
}","    }
    public static void main(String[] args) {
    assert(primeFib((1l)) == (2l));
    assert(primeFib((2l)) == (3l));
    assert(primeFib((3l)) == (5l));
    assert(primeFib((4l)) == (13l));
    assert(primeFib((5l)) == (89l));
    assert(primeFib((6l)) == (233l));
    assert(primeFib((7l)) == (1597l));
    assert(primeFib((8l)) == (28657l));
    assert(primeFib((9l)) == (514229l));
    assert(primeFib((10l)) == (433494437l));
    }

}
"
HumanEval_40,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / ne nyinaa yɛ zero, na sɛ ɛnte saa a ɛyɛ atoro.     / sɛ nneɛma abiɛsa a ɛsono wɔ ɔfã no mu wɔ hɔ a ɛyɛ nokware a     /triple_sum_to_zero fa akontaahyɛde a ɛwɔ ahoroɛ ahoroɛ a wɔaka ho asɛm sɛ nea wɔde ba.     // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))
    // (false)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))
    // (true)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))
    // (false)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))
    // (true)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))
    // (false)
    public static boolean triplesSumToZero(ArrayList<Long> l) {
","import java.util.*;

class Problem {
    public static boolean triplesSumToZero(ArrayList<Long> l) {
        Collections.sort(l);
        int n = l.size();
        for (int i = 0; i < n - 2; i++) {
            int left = i + 1, right = n - 1;
            while (left < right) {
                long sum = l.get(i) + l.get(left) + l.get(right);
                if (sum == 0) {
                    return true;
                } else if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return false;
    }
}","    }
    public static void main(String[] args) {
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) == (false));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (true));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) == (false));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l)))) == (false));
    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l)))) == (false));
    }

}
"
HumanEval_41,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Saa adwuma yi ma yehu sɛnea akwanhyia a ɛte saa no dodow te.     / wɔ wɔn akwan mu te sɛ nea wɔnhyiae.     Nanso, kar ahorow no yɛ den na emu yɛ den yiye; enti wɔkɔ so tu kwan.    / bere a kar a ɛrekɔ benkum kɔ nifa de kar a ɛrekɔ nifa kɔ benkum ato kar foforo so.     Wɔka sɛ kar abien hyia.    Wɔrekɔ no, na kar abien a wɔatwa wɔn ho ahyia no fi akyirikyiri.    /n kar ahorow no nam benkum kɔ nifa; bere koro no ara, kar ahorow ahorow a ɛsono wɔn mu biara     / Susuw ɔkwan bi a ɛyɛ tee a enni ano ho.     public static long carRaceCollision(long n) {
","public static long carRaceCollision(long n) {
    // Each car moving left to right will collide with each car moving right to left
    // as they are infinitely far apart initially and moving towards each other.
    // Therefore, the total number of collisions will be n * n.
    return n * n;
}","    }
    public static void main(String[] args) {
    assert(carRaceCollision((2l)) == (4l));
    assert(carRaceCollision((3l)) == (9l));
    assert(carRaceCollision((4l)) == (16l));
    assert(carRaceCollision((8l)) == (64l));
    assert(carRaceCollision((10l)) == (100l));
    }

}
"
HumanEval_42,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / San kɔfa nneɛma a wɔakyekyɛ no 1.     // >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))
    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))
    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))
    public static ArrayList<Long> incrList(ArrayList<Long> l) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    // Return array list with elements incremented by 1.
    public static ArrayList<Long> incrList(ArrayList<Long> l) {
        return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));
    }
}","    }
    public static void main(String[] args) {
    assert(incrList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(incrList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l)))));
    assert(incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)2l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))));
    }

}
"
HumanEval_43,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / ne nyinaa yɛ zero, na sɛ ɛnte saa a ɛyɛ atoro.     / sɛ nneɛma abien a ɛsono wɔ ɔfã a wɔato din no mu a ɛyɛ     /pairs_sum_to_zero fa akontaahyɛde a ɛwɔ ahoroɛ ahoroɛ no mu sɛ input.     // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))
    // (false)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))
    // (false)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))
    // (false)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))
    // (true)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))
    // (false)
    public static boolean pairsSumToZero(ArrayList<Long> l) {
","import java.util.ArrayList;
import java.util.HashSet;

class Problem {
    public static boolean pairsSumToZero(ArrayList<Long> l) {
        HashSet<Long> set = new HashSet<>();

        for (Long num : l) {
            if (set.contains(-num)) {
                return true;
            }
            set.add(num);
        }
        
        return false;
    }
}","    }
    public static void main(String[] args) {
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) == (false));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) == (false));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) == (false));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l)))) == (true));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)30l)))) == (true));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)3l, (long)2l, (long)31l)))) == (true));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)30l)))) == (false));
    assert(pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)-3l, (long)9l, (long)-1l, (long)4l, (long)2l, (long)31l)))) == (false));
    }

}
"
HumanEval_44,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / ne nnyinaso ahorow no nnu 10.     / de ahama a wɔsakra no no ma wɔsan gyina hɔ ma no.     / Sesa adaka a wɔde di dwuma wɔ adaka a wɔde di dwuma x no mu.     // >>> changeBase((8l), (3l))
    // (""22"")
    // >>> changeBase((8l), (2l))
    // (""1000"")
    // >>> changeBase((7l), (2l))
    // (""111"")
    public static String changeBase(long x, long base) {
","StringBuilder result = new StringBuilder();
    while (x > 0) {
        result.append(x % base);
        x /= base;
    }
    return result.reverse().toString();
}","    }
    public static void main(String[] args) {
    assert(changeBase((8l), (3l)).equals((""22"")));
    assert(changeBase((9l), (3l)).equals((""100"")));
    assert(changeBase((234l), (2l)).equals((""11101010"")));
    assert(changeBase((16l), (2l)).equals((""10000"")));
    assert(changeBase((8l), (2l)).equals((""1000"")));
    assert(changeBase((7l), (2l)).equals((""111"")));
    assert(changeBase((2l), (3l)).equals((""2"")));
    assert(changeBase((3l), (4l)).equals((""3"")));
    assert(changeBase((4l), (5l)).equals((""4"")));
    assert(changeBase((5l), (6l)).equals((""5"")));
    assert(changeBase((6l), (7l)).equals((""6"")));
    assert(changeBase((7l), (8l)).equals((""7"")));
    }

}
"
HumanEval_45,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ yɛhwɛ ahinasa bi a, ne nkyɛnmu ne ne nsase a ɛsan ba no tenten.     // >>> triangleArea((5l), (3l))
    // (7.5f)
    public static float triangleArea(long a, long h) {
","public class Problem {
    // Given length of a side and height, return area for a triangle.
    // >>> triangleArea((5l), (3l))
    // (7.5f)
    public static float triangleArea(long a, long h) {
        return (a * h) / 2.0f;
    }

    public static void main(String[] args) {
        System.out.println(triangleArea(5l, 3l)); // Output: 7.5
    }
}","    }
    public static void main(String[] args) {
    assert(triangleArea((5l), (3l)) == (7.5f));
    assert(triangleArea((2l), (2l)) == (2.0f));
    assert(triangleArea((10l), (8l)) == (40.0f));
    }

}
"
HumanEval_46,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Yɛsrɛ sɛ kyerɛw adwuma bi a ɛbɛma woatumi abue nnidiso nnidiso a ɛto so n a ɛwɔ fib4 mu no.    / fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).     / fib4(3) -> 0     / fib4(2) -> 2     / fib4(1) -> 0     / fib4(0) -> 0     / Fib4 dodow a ɛredi no yɛ nea edi hɔ a ɛte sɛ Fibbonacci a ɔredi no:     // >>> fib4((5l))
    // (4l)
    // >>> fib4((6l))
    // (8l)
    // >>> fib4((7l))
    // (14l)
    public static long fib4(long n) {
","public static long fib4(long n) {
    if (n == 0) return 0;
    if (n == 1) return 0;
    if (n == 2) return 2;
    if (n == 3) return 0;

    long a = 0, b = 0, c = 2, d = 0;
    for (long i = 4; i <= n; i++) {
        long temp = a + b + c + d;
        a = b;
        b = c;
        c = d;
        d = temp;
    }
    return d;
}","    }
    public static void main(String[] args) {
    assert(fib4((5l)) == (4l));
    assert(fib4((8l)) == (28l));
    assert(fib4((10l)) == (104l));
    assert(fib4((12l)) == (386l));
    }

}
"
HumanEval_47,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa nneɛma a ɛwɔ array list no mu no mu no median kyerɛ no kwan.    // >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))
    // (float)3l
    // >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))
    // (15.0f)
    public static float median(ArrayList<Long> l) {
","Collections.sort(l);
    int n = l.size();
    if (n % 2 == 1) {
        return l.get(n / 2);
    } else {
        return (float)(l.get(n / 2 - 1) + l.get(n / 2)) / 2;
    }
}","    }
    public static void main(String[] args) {
    assert(median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))) == (float)3l);
    assert(median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l)))) == (8.0f));
    assert(median((new ArrayList<Long>(Arrays.asList((long)5l)))) == (float)5l);
    assert(median((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)))) == (5.5f));
    assert(median((new ArrayList<Long>(Arrays.asList((long)8l, (long)1l, (long)3l, (long)9l, (long)9l, (long)2l, (long)7l)))) == (float)7l);
    }

}
"
HumanEval_48,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Hwɛ sɛ nea wɔde ama no yɛ palindrome     // >>> isPalindrome((""""))
    // (true)
    // >>> isPalindrome((""aba""))
    // (true)
    // >>> isPalindrome((""aaaaa""))
    // (true)
    // >>> isPalindrome((""zbcd""))
    // (false)
    public static boolean isPalindrome(String text) {
","if (text == null) {
            return false;
        }
        int left = 0;
        int right = text.length() - 1;
        while (left < right) {
            if (text.charAt(left) != text.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(isPalindrome(("""")) == (true));
    assert(isPalindrome((""aba"")) == (true));
    assert(isPalindrome((""aaaaa"")) == (true));
    assert(isPalindrome((""zbcd"")) == (false));
    assert(isPalindrome((""xywyx"")) == (true));
    assert(isPalindrome((""xywyz"")) == (false));
    assert(isPalindrome((""xywzx"")) == (false));
    }

}
"
HumanEval_49,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa 2^n modulo p (nkyerɛw no sɛ ɛyɛ akontaahyɛde).     // >>> modp((3l), (5l))
    // (3l)
    // >>> modp((1101l), (101l))
    // (2l)
    // >>> modp((0l), (101l))
    // (1l)
    // >>> modp((3l), (11l))
    // (8l)
    // >>> modp((100l), (101l))
    // (1l)
    public static long modp(long n, long p) {
","import java.math.BigInteger;

public class Problem {
    // Return 2^n modulo p (be aware of numerics).
    public static long modp(long n, long p) {
        BigInteger base = BigInteger.valueOf(2);
        BigInteger exponent = BigInteger.valueOf(n);
        BigInteger modulo = BigInteger.valueOf(p);
        
        return base.modPow(exponent, modulo).longValue();
    }

    public static void main(String[] args) {
        System.out.println(modp(3L, 5L)); // Output: 3
        System.out.println(modp(1101L, 101L)); // Output: 2
        System.out.println(modp(0L, 101L)); // Output: 1
        System.out.println(modp(3L, 11L)); // Output: 8
        System.out.println(modp(100L, 101L)); // Output: 1
    }
}","    }
    public static void main(String[] args) {
    assert(modp((3l), (5l)) == (3l));
    assert(modp((1101l), (101l)) == (2l));
    assert(modp((0l), (101l)) == (1l));
    assert(modp((3l), (11l)) == (8l));
    assert(modp((100l), (101l)) == (1l));
    assert(modp((30l), (5l)) == (4l));
    assert(modp((31l), (5l)) == (3l));
    }

}
"
HumanEval_51,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / remove_vowels yɛ adwuma a ɛgye string na ɛde string a ɛnni vowels ma.     // >>> removeVowels((""""))
    // ("""")
    // >>> removeVowels((""abcdef""))
    // (""bcdf"")
    // >>> removeVowels((""aaaaa""))
    // ("""")
    // >>> removeVowels((""aaBAA""))
    // (""B"")
    // >>> removeVowels((""zbcd""))
    // (""zbcd"")
    public static String removeVowels(String text) {
","public static String removeVowels(String text) {
        return text.replaceAll(""(?i)[aeiou]"", """");
    }
}","    }
    public static void main(String[] args) {
    assert(removeVowels(("""")).equals(("""")));
    assert(removeVowels((""abcdef\nghijklm"")).equals((""bcdf\nghjklm"")));
    assert(removeVowels((""fedcba"")).equals((""fdcb"")));
    assert(removeVowels((""eeeee"")).equals(("""")));
    assert(removeVowels((""acBAA"")).equals((""cB"")));
    assert(removeVowels((""EcBOO"")).equals((""cB"")));
    assert(removeVowels((""ybcd"")).equals((""ybcd"")));
    }

}
"
HumanEval_52,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ a, true na ɛde ma sɛ a, ne nyinaa wɔ ase a ɛboro t.     // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))
    // (true)
    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))
    // (false)
    public static boolean belowThreshold(ArrayList<Long> l, long t) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    // Return true if all numbers in the array list l are below threshold t.
    public static boolean belowThreshold(ArrayList<Long> l, long t) {
        for (Long num : l) {
            if (num >= t) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 2L, 4L, 10L)), 100L)); // true
        System.out.println(belowThreshold(new ArrayList<Long>(Arrays.asList(1L, 20L, 4L, 10L)), 5L));  // false
    }
}","    }
    public static void main(String[] args) {
    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l)) == (true));
    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l)) == (false));
    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (21l)) == (true));
    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (22l)) == (true));
    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (11l)) == (true));
    assert(belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)4l, (long)10l))), (10l)) == (false));
    }

}
"
HumanEval_53,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Ka nnumero abien x ne y bom     // >>> add((2l), (3l))
    // (5l)
    // >>> add((5l), (7l))
    // (12l)
    public static long add(long x, long y) {
","return x + y;
    }

    public static void main(String[] args) {
        System.out.println(add(2L, 3L)); // Outputs: 5
        System.out.println(add(5L, 7L)); // Outputs: 12
    }
}","    }
    public static void main(String[] args) {
    assert(add((0l), (1l)) == (1l));
    assert(add((1l), (0l)) == (1l));
    assert(add((2l), (3l)) == (5l));
    assert(add((5l), (7l)) == (12l));
    assert(add((7l), (5l)) == (12l));
    }

}
"
HumanEval_54,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Hwɛ sɛ nsɛmfua abien no nyinaa yɛ pɛ anaa.     // >>> sameChars((""eabcdzzzz""), (""dddzzzzzzzddeddabc""))
    // (true)
    // >>> sameChars((""abcd""), (""dddddddabc""))
    // (true)
    // >>> sameChars((""dddddddabc""), (""abcd""))
    // (true)
    // >>> sameChars((""eabcd""), (""dddddddabc""))
    // (false)
    // >>> sameChars((""abcd""), (""dddddddabce""))
    // (false)
    // >>> sameChars((""eabcdzzzz""), (""dddzzzzzzzddddabc""))
    // (false)
    public static boolean sameChars(String s0, String s1) {
","public static boolean sameChars(String s0, String s1) {
        Set<Character> set0 = s0.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());
        Set<Character> set1 = s1.chars().mapToObj(e -> (char)e).collect(Collectors.toSet());
        return set0.equals(set1);
    }

    public static void main(String[] args) {
        System.out.println(sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")); // true
        System.out.println(sameChars(""abcd"", ""dddddddabc"")); // true
        System.out.println(sameChars(""dddddddabc"", ""abcd"")); // true
        System.out.println(sameChars(""eabcd"", ""dddddddabc"")); // false
        System.out.println(sameChars(""abcd"", ""dddddddabce"")); // false
        System.out.println(sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")); // false
    }
}","    }
    public static void main(String[] args) {
    assert(sameChars((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(sameChars((""abcd""), (""dddddddabc"")) == (true));
    assert(sameChars((""dddddddabc""), (""abcd"")) == (true));
    assert(sameChars((""eabcd""), (""dddddddabc"")) == (false));
    assert(sameChars((""abcd""), (""dddddddabcf"")) == (false));
    assert(sameChars((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(sameChars((""aabb""), (""aaccc"")) == (false));
    }

}
"
HumanEval_55,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa Fibonacci nɔma a ɛtɔ so n no ma.     // >>> fib((10l))
    // (55l)
    // >>> fib((1l))
    // (1l)
    // >>> fib((8l))
    // (21l)
    public static long fib(long n) {
","if (n <= 1) {
            return n;
        }
        long a = 0, b = 1, c = 0;
        for (int i = 2; i <= n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
}","    }
    public static void main(String[] args) {
    assert(fib((10l)) == (55l));
    assert(fib((1l)) == (1l));
    assert(fib((8l)) == (21l));
    assert(fib((11l)) == (89l));
    assert(fib((12l)) == (144l));
    }

}
"
HumanEval_56,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / de true ba sɛ bracket biara a ɛbue no wɔ bracket a ɛtwa to a ɛne no hyia.     / brackets yɛ ""<"" ne "">"" ahoroɛ.     // >>> correctBracketing((""<""))
    // (false)
    // >>> correctBracketing((""<>""))
    // (true)
    // >>> correctBracketing((""<<><>>""))
    // (true)
    // >>> correctBracketing((""><<>""))
    // (false)
    public static boolean correctBracketing(String brackets) {
","import java.util.*;

class Problem {

    public static boolean correctBracketing(String brackets) {
        int balance = 0;
        for (char ch : brackets.toCharArray()) {
            if (ch == '<') {
                balance++;
            } else if (ch == '>') {
                balance--;
                if (balance < 0) {
                    return false;
                }
            }
        }
        return balance == 0;
    }
}","    }
    public static void main(String[] args) {
    assert(correctBracketing((""<>"")) == (true));
    assert(correctBracketing((""<<><>>"")) == (true));
    assert(correctBracketing((""<><><<><>><>"")) == (true));
    assert(correctBracketing((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(correctBracketing((""<<<><>>>>"")) == (false));
    assert(correctBracketing((""><<>"")) == (false));
    assert(correctBracketing((""<"")) == (false));
    assert(correctBracketing((""<<<<"")) == (false));
    assert(correctBracketing(("">"")) == (false));
    assert(correctBracketing((""<<>"")) == (false));
    assert(correctBracketing((""<><><<><>><>><<>"")) == (false));
    assert(correctBracketing((""<><><<><>><>>><>"")) == (false));
    }

}
"
HumanEval_57,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Return true is array list elements are monotonically increasing or decreasing.  Ɛsan kyerɛ sɛ nneɛma a ɛwɔ ɔfã no mu no yɛ kɛse anaa ɛreyɛ ketee.    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))
    // (true)
    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))
    // (false)
    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))
    // (true)
    public static boolean monotonic(ArrayList<Long> l) {
","import java.util.ArrayList;

class Problem {
    // Return true if array list elements are monotonically increasing or decreasing.
    public static boolean monotonic(ArrayList<Long> l) {
        if (l.size() <= 1) {
            return true;
        }
        
        boolean increasing = true;
        boolean decreasing = true;
        
        for (int i = 1; i < l.size(); i++) {
            if (l.get(i) > l.get(i - 1)) {
                decreasing = false;
            }
            if (l.get(i) < l.get(i - 1)) {
                increasing = false;
            }
        }
        
        return increasing || decreasing;
    }

    public static void main(String[] args) {
        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 20L));
        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 20L, 4L, 10L));
        ArrayList<Long> list3 = new ArrayList<>(Arrays.asList(4L, 1L, 0L, -10L));

        System.out.println(monotonic(list1)); // true
        System.out.println(monotonic(list2)); // false
        System.out.println(monotonic(list3)); // true
    }
}","    }
    public static void main(String[] args) {
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l)))) == (true));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l)))) == (false));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))) == (true));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l)))) == (true));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)60l)))) == (true));
    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l, (long)9l, (long)9l, (long)9l)))) == (true));
    }

}
"
HumanEval_58,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / De nneɛma a ɛwɔ hɔ a wɔasiesie no ma emu biara a ɛwɔ hɔ ma nnipakan abien no san ba.     // >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))
    // >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))
    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {
","import java.util.*;
import java.util.stream.Collectors;

class Problem {
    // Return sorted unique common elements for two array lists.
    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {
        Set<Long> set1 = new HashSet<>(l1);
        Set<Long> set2 = new HashSet<>(l2);
        
        // Retain only the elements in set1 that are contained in set2
        set1.retainAll(set2);
        
        // Convert to list and sort
        ArrayList<Long> result = new ArrayList<>(set1);
        Collections.sort(result);
        
        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))));
    assert(common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));
    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));
    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    }

}
"
HumanEval_59,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa n a ne kɛse yɛ kan ade a ɛboro so no ma no. Fa no sɛ n > 1 na ɛnyɛ kan ade.     // >>> largestPrimeFactor((13195l))
    // (29l)
    // >>> largestPrimeFactor((2048l))
    // (2l)
    public static long largestPrimeFactor(long n) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    public static long largestPrimeFactor(long n) {
        long largestFactor = 1;
        long factor = 2;
        
        // Test for number of 2s that divide n
        while (n % factor == 0) {
            largestFactor = factor;
            n /= factor;
        }
        
        // n must be odd at this point, so a skip of 2 is used (i.e., 3, 5, 7, 9, ...)
        factor = 3;
        while (factor * factor <= n) {
            while (n % factor == 0) {
                largestFactor = factor;
                n /= factor;
            }
            factor += 2;
        }
        
        // This condition checks if n is a prime number greater than 2
        if (n > 2) {
            largestFactor = n;
        }
        
        return largestFactor;
    }
}","    }
    public static void main(String[] args) {
    assert(largestPrimeFactor((15l)) == (5l));
    assert(largestPrimeFactor((27l)) == (3l));
    assert(largestPrimeFactor((63l)) == (7l));
    assert(largestPrimeFactor((330l)) == (11l));
    assert(largestPrimeFactor((13195l)) == (29l));
    }

}
"
HumanEval_60,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / sum_to_n yɛ adwuma a ɛboaboa 1 kɔsi n ano.     // >>> sumToN((30l))
    // (465l)
    // >>> sumToN((100l))
    // (5050l)
    // >>> sumToN((5l))
    // (15l)
    // >>> sumToN((10l))
    // (55l)
    // >>> sumToN((1l))
    // (1l)
    public static long sumToN(long n) {
","public static long sumToN(long n) {
    return n * (n + 1) / 2;
}","    }
    public static void main(String[] args) {
    assert(sumToN((1l)) == (1l));
    assert(sumToN((6l)) == (21l));
    assert(sumToN((11l)) == (66l));
    assert(sumToN((30l)) == (465l));
    assert(sumToN((100l)) == (5050l));
    }

}
"
HumanEval_61,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / de true ba sɛ bracket biara a ɛbue no wɔ bracket a ɛtwa to a ɛne no hyia.     / brackets yɛ ""("" ne """") ahyɛnsode.     // >>> correctBracketing((""(""))
    // (false)
    // >>> correctBracketing((""()""))
    // (true)
    // >>> correctBracketing((""(()())""))
    // (true)
    // >>> correctBracketing(("")(()""))
    // (false)
    public static boolean correctBracketing(String brackets) {
","public static boolean correctBracketing(String brackets) {
    int balance = 0;
    for (int i = 0; i < brackets.length(); i++) {
        if (brackets.charAt(i) == '(') {
            balance++;
        } else if (brackets.charAt(i) == ')') {
            balance--;
        }
        if (balance < 0) {
            return false;
        }
    }
    return balance == 0;
}","    }
    public static void main(String[] args) {
    assert(correctBracketing((""()"")) == (true));
    assert(correctBracketing((""(()())"")) == (true));
    assert(correctBracketing((""()()(()())()"")) == (true));
    assert(correctBracketing((""()()((()()())())(()()(()))"")) == (true));
    assert(correctBracketing((""((()())))"")) == (false));
    assert(correctBracketing(("")(()"")) == (false));
    assert(correctBracketing((""("")) == (false));
    assert(correctBracketing((""(((("")) == (false));
    assert(correctBracketing(("")"")) == (false));
    assert(correctBracketing((""(()"")) == (false));
    assert(correctBracketing((""()()(()())())(()"")) == (false));
    assert(correctBracketing((""()()(()())()))()"")) == (false));
    }

}
"
HumanEval_62,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Fa polynomial yi a ɛwɔ saa kwan no ara so no mu nsunsuanso no ma no.     / xs[0] + xs[1] * x + xs[2] * x^2 + ....     / xs gyina hɔ ma nsɛmfua a ɛwɔ pii mu no coefficients.     // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))
    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))
    public static ArrayList<Long> derivative(ArrayList<Long> xs) {
","import java.util.ArrayList;

public class Problem {
    // xs represent coefficients of a polynomial.
    // xs[0] + xs[1] * x + xs[2] * x^2 + ....
    // Return derivative of this polynomial in the same form.
    public static ArrayList<Long> derivative(ArrayList<Long> xs) {
        ArrayList<Long> result = new ArrayList<>();
        for (int i = 1; i < xs.size(); i++) {
            result.add(xs.get(i) * i);
        }
        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));
    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));
    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));
    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l, (long)16l)))));
    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));
    }

}
"
HumanEval_63,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Yɛsrɛ sɛ kyerɛw dwumadi bi a ɛbɛma yɛatumi asusuw nnidiso a ɛto so n wɔ nnidiso a ɛto so nnum no ho yiye.     / fibfib{n) == fibfib{n-1) + fibfib{n-2) + fibfib{n-3).     / fib fib ((2) == 1     / fib fib ((1) == 0     / fib fib ((0) == 0     / FibFib akontaabu a ɛwɔ hɔ no te sɛ Fibbonacci akontaabu a wɔaka ho asɛm no:     // >>> fibfib((1l))
    // (0l)
    // >>> fibfib((5l))
    // (4l)
    // >>> fibfib((8l))
    // (24l)
    public static long fibfib(long n) {
","public static long fibfib(long n) {
        if (n == 0) return 0;
        if (n == 1) return 0;
        if (n == 2) return 1;
        
        long[] fibfibSequence = new long[(int) n + 1];
        fibfibSequence[0] = 0;
        fibfibSequence[1] = 0;
        fibfibSequence[2] = 1;
        
        for (int i = 3; i <= n; i++) {
            fibfibSequence[i] = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];
        }
        
        return fibfibSequence[(int) n];
    }
}","    }
    public static void main(String[] args) {
    assert(fibfib((2l)) == (1l));
    assert(fibfib((1l)) == (0l));
    assert(fibfib((5l)) == (4l));
    assert(fibfib((8l)) == (24l));
    assert(fibfib((10l)) == (81l));
    assert(fibfib((12l)) == (274l));
    assert(fibfib((14l)) == (927l));
    }

}
"
HumanEval_64,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / ɛnne nkyerɛwde, nanso sɛ ɛwɔ asɛmfua bi awiei nkutoo a.     / Sɛ wohwɛ nsɛmfua a ɛwɔ ha yi a, ɛyɛ 'a', 'e', 'i', 'o', 'u.'    / a word as input na ɛde vowels dodow a ɛwɔ ɔkra no mu ma.     / Kyerɛw adwuma a wɔfrɛ no vowels_count a ɛfa ntweaa a ɛkyerɛ     // >>> vowelsCount((""abcde""))
    // (2l)
    // >>> vowelsCount((""ACEDY""))
    // (3l)
    public static long vowelsCount(String s) {
","if (s == null || s.isEmpty()) {
            return 0L;
        }

        s = s.toLowerCase();
        long count = 0L;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (""aeiou"".indexOf(c) >= 0) {
                count++;
            } else if (c == 'y' && i == s.length() - 1) {
                count++;
            }
        }

        return count;
    }
}","    }
    public static void main(String[] args) {
    assert(vowelsCount((""abcde"")) == (2l));
    assert(vowelsCount((""Alone"")) == (3l));
    assert(vowelsCount((""key"")) == (2l));
    assert(vowelsCount((""bye"")) == (1l));
    assert(vowelsCount((""keY"")) == (2l));
    assert(vowelsCount((""bYe"")) == (1l));
    assert(vowelsCount((""ACEDY"")) == (3l));
    }

}
"
HumanEval_65,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ shift > digits dodow a, ma digits no ntra so.     / na fa nea ebefi mu aba no yɛ string.     / Kwati no twe akontaahyɛde x no mu nkontaahyɛde no kɔ benkum so nkontaahyɛde no mu nkontaahyɛde no mu kɔ benkum so     // >>> circularShift((12l), (1l))
    // (""21"")
    // >>> circularShift((12l), (2l))
    // (""12"")
    public static String circularShift(long x, long shift) {
","import java.util.*;

public class Problem {
    public static String circularShift(long x, long shift) {
        String numStr = Long.toString(x);
        int len = numStr.length();

        // If shift is greater than or equal to the number of digits, reverse the digits.
        if (shift >= len) {
            return new StringBuilder(numStr).reverse().toString();
        }

        // Otherwise, perform a circular shift.
        int actualShift = (int)(shift % len);
        StringBuilder shifted = new StringBuilder();
        shifted.append(numStr.substring(len - actualShift));
        shifted.append(numStr.substring(0, len - actualShift));

        return shifted.toString();
    }

    public static void main(String[] args) {
        // Test cases
        System.out.println(circularShift(12L, 1L));  // Output: ""21""
        System.out.println(circularShift(12L, 2L));  // Output: ""12""
        System.out.println(circularShift(12345L, 3L));  // Output: ""34512""
        System.out.println(circularShift(12345L, 5L));  // Output: ""54321""
        System.out.println(circularShift(12345L, 7L));  // Output: ""54321""
    }
}","    }
    public static void main(String[] args) {
    assert(circularShift((100l), (2l)).equals((""001"")));
    assert(circularShift((12l), (2l)).equals((""12"")));
    assert(circularShift((97l), (8l)).equals((""79"")));
    assert(circularShift((12l), (1l)).equals((""21"")));
    assert(circularShift((11l), (101l)).equals((""11"")));
    }

}
"
HumanEval_66,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / ASCII nkyerɛwde.     / Kyerɛw adwuma bi a ɛfa string sɛ input na ɛde ne nkyerɛwde a ɛkorɔn no nko ara ka ho'     / Adwuma     // >>> digitSum((""""))
    // (0l)
    // >>> digitSum((""abAB""))
    // (131l)
    // >>> digitSum((""abcCd""))
    // (67l)
    // >>> digitSum((""helloE""))
    // (69l)
    // >>> digitSum((""woArBld""))
    // (131l)
    // >>> digitSum((""aAaaaXa""))
    // (153l)
    public static long digitSum(String s) {
","public static long digitSum(String s) {
        long sum = 0;
        for (char c : s.toCharArray()) {
            if (Character.isUpperCase(c)) {
                sum += (long) c;
            }
        }
        return sum;
    }
}","    }
    public static void main(String[] args) {
    assert(digitSum(("""")) == (0l));
    assert(digitSum((""abAB"")) == (131l));
    assert(digitSum((""abcCd"")) == (67l));
    assert(digitSum((""helloE"")) == (69l));
    assert(digitSum((""woArBld"")) == (131l));
    assert(digitSum((""aAaaaXa"")) == (153l));
    assert(digitSum(("" How are yOu?"")) == (151l));
    assert(digitSum((""You arE Very Smart"")) == (327l));
    }

}
"
HumanEval_67,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / sɛ nea wɔaka no nyinaa:     / wɔ dwetikɛse no mu kyerɛ dwetikɛse no mu nnuaba dodow a ɛwɔ dwetikɛse no mu.     / aburosiam ne aduaba ne dodow mũ a ɛkyerɛ nnuaba no nyinaa     / aduaba, nkran, ne mango aba. Sɛ wɔde ahama a ɛkyerɛ dodow a     / a wɔkyekyɛ wɔ nnuaba daka a daka yi wɔ mu mu     / Wɔ saa dwumadi yi mu no, wɔbɛma wo akwaa bi a egyina hɔ ma aduaba ne aburokyiri     // >>> fruitDistribution((""5 apples and 6 oranges""), (19l))
    // (8l)
    // >>> fruitDistribution((""0 apples and 1 oranges""), (3l))
    // (2l)
    // >>> fruitDistribution((""2 apples and 3 oranges""), (100l))
    // (95l)
    // >>> fruitDistribution((""100 apples and 1 oranges""), (120l))
    // (19l)
    public static long fruitDistribution(String s, long n) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    public static long fruitDistribution(String s, long n) {
        String[] parts = s.split("" "");
        long apples = Long.parseLong(parts[0]);
        long oranges = Long.parseLong(parts[3]);
        long mangoes = n - (apples + oranges);
        return mangoes;
    }
}","    }
    public static void main(String[] args) {
    assert(fruitDistribution((""5 apples and 6 oranges""), (19l)) == (8l));
    assert(fruitDistribution((""5 apples and 6 oranges""), (21l)) == (10l));
    assert(fruitDistribution((""0 apples and 1 oranges""), (3l)) == (2l));
    assert(fruitDistribution((""1 apples and 0 oranges""), (3l)) == (2l));
    assert(fruitDistribution((""2 apples and 3 oranges""), (100l)) == (95l));
    assert(fruitDistribution((""2 apples and 3 oranges""), (5l)) == (0l));
    assert(fruitDistribution((""1 apples and 100 oranges""), (120l)) == (19l));
    }

}
"
HumanEval_68,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso 1:     / Sɛ no nni hɔ mpo a, anaasɛ nea wɔde ama no no yɛ nea enni hɔ a, san kɔ [].     / Ɛsɛ sɛ wɔsan de node a wɔayi no no ba wɔ array list, [ smalest_value, ne index ],     / Sɛ wohu node bebree a wɔn nyinaa wɔ ne pɛ a ɛtra so no a, ma no nsane nkyerɛ node a ne index yɛ ketewa paa no.     / Ɛsɛ sɛ node a wɔayi no no yɛ node a emu nsensan yɛ ketewaa paa.     / wo adwuma ne sɛ wobɛtwe ntini no mu biako na woasan de no ama.     / ""Wɔama ɔfã bi a ɛyɛ ɔfã din a ɛkyerɛ dua bi a ɛwɔ ntini a ɛnnyɛ negative     // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.
    // Example 2:
    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.
    // Example 3:
    // >>> pluck((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<Long>(Arrays.asList()))
    // Example 4:
    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))
    // Explanation: 0 is the smallest value, but  there are two zeros,
    // so we will choose the first zero, which has the smallest index.
    // Constraints:
    // * 1 <= nodes.length <= 10000
    // * 0 <= node.value
    public static ArrayList<Long> pluck(ArrayList<Long> arr) {
","public static ArrayList<Long> pluck(ArrayList<Long> arr) {
        ArrayList<Long> result = new ArrayList<>();
        long smallestEvenValue = Long.MAX_VALUE;
        int index = -1;

        for (int i = 0; i < arr.size(); i++) {
            long value = arr.get(i);
            if (value % 2 == 0 && value < smallestEvenValue) {
                smallestEvenValue = value;
                index = i;
            }
        }

        if (index != -1) {
            result.add(smallestEvenValue);
            result.add((long) index);
        }

        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));
    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l)))));
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l)))));
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));
    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));
    }

}
"
HumanEval_69,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Sɛ biribi a ɛte saa nni hɔ a, dan -1.     / Nkyekyem a ɛkorɔn wɔ ɔmansin bi mu no yɛ mpɛn dodow a ɛkorɔn wɔ ɔmansin no mu.     / yɛ zero, na ɛtaa yɛ kɛse sen, anaa ɛtaa yɛ pɛ sɛ, integer no ankasa no.     / Wɔama wo ɔmo a ɛnyɛ hwee a ɛyɛ positive integers. Ma no integer a ɛsõ sen     // >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))
    // (2l)
    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))
    // (3l)
    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))
    // (-1l)
    public static long search(ArrayList<Long> lst) {
","import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

class Problem {
    public static long search(ArrayList<Long> lst) {
        HashMap<Long, Integer> frequencyMap = new HashMap<>();

        // Count frequencies of each number
        for (Long num : lst) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        long result = -1;
        
        // Find the greatest integer that fulfills the condition
        for (Long num : frequencyMap.keySet()) {
            int frequency = frequencyMap.get(num);
            if (frequency >= num && num > result) {
                result = num;
            }
        }
        
        return result;
    }

    public static void main(String[] args) {
        System.out.println(search(new ArrayList<Long>(Arrays.asList(4L, 1L, 2L, 2L, 3L, 1L)))); // 2L
        System.out.println(search(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L)))); // 3L
        System.out.println(search(new ArrayList<Long>(Arrays.asList(5L, 5L, 4L, 4L, 4L)))); // -1L
    }
}","    }
    public static void main(String[] args) {
    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) == (8l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) == (2l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l, (long)10l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l, (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l, (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l, (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l, (long)1l, (long)3l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l, (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l, (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) == (5l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l, (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l, (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l, (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l, (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l, (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l, (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l, (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l, (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l, (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l, (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l, (long)10l, (long)7l)))) == (4l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l, (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l, (long)1l)))) == (2l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l, (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l, (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l, (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l)))) == (2l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l, (long)8l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l, (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l, (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));
    assert(search((new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l)))) == (-1l));
    }

}
"
HumanEval_70,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / na afei dodow a ɛboro integers a aka no so, na afei emu kakraa bi, na ɛkɔ so saa ara.     / Sɛ wufi ase wɔ nea ɛsom bo paa no so a, ɛyɛ soronko.    / Sɛ wode integers a ɛwɔ array list no mu ma a, ma array list no mmra wɔ strange mu.     // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))
    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))
    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<Long>(Arrays.asList()))
    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {
","import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;

class Problem {
    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {
        ArrayList<Long> result = new ArrayList<>();
        Collections.sort(lst);
        
        int left = 0;
        int right = lst.size() - 1;
        boolean flag = true; // true indicates minimum, false indicates maximum
        
        while (left <= right) {
            if (flag) {
                result.add(lst.get(left));
                left++;
            } else {
                result.add(lst.get(right));
                right--;
            }
            flag = !flag;
        }
        
        return result;
    }
    
    // Main method for test purposes
    public static void main(String[] args) {
        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));
        System.out.println(strangeSortList(list1)); // Outputs: [1, 4, 2, 3]
        
        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(5L, 5L, 5L, 5L));
        System.out.println(strangeSortList(list2)); // Outputs: [5, 5, 5, 5]
        
        ArrayList<Long> list3 = new ArrayList<>();
        System.out.println(strangeSortList(list3)); // Outputs: []
    }
}","    }
    public static void main(String[] args) {
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)6l, (long)8l, (long)7l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));
    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new ArrayList<Long>(Arrays.asList((long)111111l)))));
    }

}
"
HumanEval_71,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / sen ɔfã a ɛto so abiɛsa no.     / Sɛ n'afa abien biara ka bom a, ɛne ahinasa a edi mu.    / Sɛ ɛnte saa a, dan -1     / a, sɛ n'afã ahorow no yɛ mfitiasede a, wɔtwe kɔ n'afã a ɛto so abien.     / Sɛ yɛfa ntweaa bi afã ahorow no tenten a, yɛfa no sɛ     // >>> triangleArea((3l), (4l), (5l))
    // (6.0f)
    // >>> triangleArea((1l), (2l), (10l))
    // (float)-1l
    public static float triangleArea(long a, long b, long c) {
","public static float triangleArea(long a, long b, long c) {
        if (a + b > c && a + c > b && b + c > a) {
            double s = (a + b + c) / 2.0;
            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
            return Math.round(area * 100.0) / 100.0f;
        } else {
            return -1f;
        }
    }

    public static void main(String[] args) {
        System.out.println(triangleArea(3, 4, 5)); // Output: 6.0
        System.out.println(triangleArea(1, 2, 10)); // Output: -1
    }
}","    }
    public static void main(String[] args) {
    assert(triangleArea((3l), (4l), (5l)) == (6.0f));
    assert(triangleArea((1l), (2l), (10l)) == (float)-1l);
    assert(triangleArea((4l), (8l), (5l)) == (8.18f));
    assert(triangleArea((2l), (2l), (2l)) == (1.73f));
    assert(triangleArea((1l), (2l), (3l)) == (float)-1l);
    assert(triangleArea((10l), (5l), (7l)) == (16.25f));
    assert(triangleArea((2l), (6l), (3l)) == (float)-1l);
    assert(triangleArea((1l), (1l), (1l)) == (0.43f));
    assert(triangleArea((2l), (2l), (10l)) == (float)-1l);
    }

}
"
HumanEval_72,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / Sɛ biribi a wɔfrɛ no q yɛ pɛ (ɛyɛ palindromic array list) na ne nneɛma dodow yɛ kɛse anaa ɛboro emu kɛse a, ebetumi atu.    / Kyerɛw adwuma bi a sɛ ade a q bɛtu a, ɛde true ba, na sɛ ɛnte saa a ɛde false ba.     // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))
    // (false)
    // # 1+2 is less than the maximum possible weight, but it's unbalanced.
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))
    // (false)
    // # it's balanced, but 3+2+3 is more than the maximum possible weight.
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))
    // (true)
    // # 3+2+3 is less than the maximum possible weight, and it's balanced.
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))
    // (true)
    // # 3 is less than the maximum possible weight, and it's balanced.
    public static boolean willItFly(ArrayList<Long> q, long w) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static boolean willItFly(ArrayList<Long> q, long w) {
        if (!isPalindromic(q)) {
            return false;
        }
        long sum = 0;
        for (Long num : q) {
            sum += num;
        }
        return sum <= w;
    }

    private static boolean isPalindromic(ArrayList<Long> q) {
        int size = q.size();
        for (int i = 0; i < size / 2; i++) {
            if (!q.get(i).equals(q.get(size - i - 1))) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(1L, 2L)), 5L)); // false
        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 1L)); // false
        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L, 2L, 3L)), 9L)); // true
        System.out.println(willItFly(new ArrayList<Long>(Arrays.asList(3L)), 5L)); // true
    }
}","    }
    public static void main(String[] args) {
    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));
    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l)) == (false));
    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l)) == (true));
    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l)) == (false));
    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (6l)) == (false));
    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))), (5l)) == (true));
    }

}
"
HumanEval_73,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / yɛ ade koro no ara wɔ anim ne akyi. Wubetumi asesa ade biako de akenkan ade foforo biara.     / ɛhia sɛ wɔsesa no ma ɛyɛ a ɔmoɔ no mu no yɛ palindromic.    / Sɛ wɔde anohyetoɔ bi a ɛyɛ anohyetoɔ a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a ɛboro so a, hwehwɛ nneɛma a ɛboro so a     // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))
    // (4l)
    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))
    // (1l)
    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))
    // (0l)
    public static long smallestChange(ArrayList<Long> arr) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    // Given an array list arr of integers, finds the minimum number of changes
    // to make the list palindromic.
    public static long smallestChange(ArrayList<Long> arr) {
        int left = 0;
        int right = arr.size() - 1;
        long changes = 0;
        
        while (left < right) {
            if (!arr.get(left).equals(arr.get(right))) {
                changes++;
            }
            left++;
            right--;
        }
        return changes;
    }
    
    public static void main(String[] args) {
        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L)))); // 4
        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 4L, 3L, 2L, 2L)))); // 1
        System.out.println(smallestChange(new ArrayList<Long>(Arrays.asList(1L, 2L, 3L, 2L, 1L)))); // 0
    }
}","    }
    public static void main(String[] args) {
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)4l, (long)2l)))) == (1l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) == (0l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));
    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));
    }

}
"
HumanEval_74,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / sɛ ahwehwɛmu a ɛwɔ ahwehwɛmu no mu abien no wɔ nkyerɛwde dodow koro a, ma ahwehwɛmu a edi kan no mmra.     / ne nkyerɛwde dodow a ɛwɔ ahwehwɛ no mu nyinaa yɛ ketewa sen ahwehwɛ foforo no.     / Kyerɛw adwuma a wogye ntweaa a ɛwɔ ntweaa mmienu mu na ɛde nea ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa a ɛwɔ ntweaa    // >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))
    // (new ArrayList<String>(Arrays.asList()))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""Hi""))))
    // (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""Hi"")))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hi"", (String)""hi"", (String)""admin"", (String)""project""))))
    // (new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin"")))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hi""))))
    // (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hi"")))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""4""))), (new ArrayList<String>(Arrays.asList((String)""1"", (String)""2"", (String)""3"", (String)""4"", (String)""5""))))
    // (new ArrayList<String>(Arrays.asList((String)""4"")))
    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {
","public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {
        int charCount1 = lst1.stream().mapToInt(String::length).sum();
        int charCount2 = lst2.stream().mapToInt(String::length).sum();

        if (charCount1 < charCount2) {
            return lst1;
        } else if (charCount2 < charCount1) {
            return lst2;
        } else {
            return lst1;
        }
    }
}","    }
    public static void main(String[] args) {
    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hi"", (String)""hi"")))).equals((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""hi"")))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hi"", (String)""hi"", (String)""admin"", (String)""project"")))).equals((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin"")))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""4""))), (new ArrayList<String>(Arrays.asList((String)""1"", (String)""2"", (String)""3"", (String)""4"", (String)""5"")))).equals((new ArrayList<String>(Arrays.asList((String)""4"")))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""Hi"")))).equals((new ArrayList<String>(Arrays.asList((String)""hI"", (String)""Hi"")))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hi"")))).equals((new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hi"")))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hii"")))).equals((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin"")))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList((String)""this"")))).equals((new ArrayList<String>(Arrays.asList()))));
    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)""this""))), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));
    }

}
"
HumanEval_75,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / Sɛ yenim sɛ a) yɛ ketewa sen 100 a.     / na sɛ ɛnte saa a ɛyɛ atoro.     / Kyerɛw adwuma a sɛ wode 3 yɛ a, ne nyinaa yɛ nokware     // >>> isMultiplyPrime((30l))
    // (true)
    // 30 = 2 * 3 * 5
    public static boolean isMultiplyPrime(long a) {
","if (a >= 2 && a < 8) return false;

        List<Integer> primes = sieveOfEratosthenes(100);
        for (int i = 0; i < primes.size(); i++) {
            for (int j = i; j < primes.size(); j++) {
                for (int k = j; k < primes.size(); k++) {
                    long product = (long) primes.get(i) * primes.get(j) * primes.get(k);
                    if (product == a) {
                        return true;
                    }
                    if (product > a) {
                        break;
                    }
                }
            }
        }
        return false;
    }

    private static List<Integer> sieveOfEratosthenes(int limit) {
        boolean[] isPrime = new boolean[limit + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 2; i * i <= limit; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= limit; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        List<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= limit; i++) {
            if (isPrime[i]) {
                primes.add(i);
            }
        }
        return primes;
    }
}","    }
    public static void main(String[] args) {
    assert(isMultiplyPrime((5l)) == (false));
    assert(isMultiplyPrime((30l)) == (true));
    assert(isMultiplyPrime((8l)) == (true));
    assert(isMultiplyPrime((10l)) == (false));
    assert(isMultiplyPrime((125l)) == (true));
    assert(isMultiplyPrime((105l)) == (true));
    assert(isMultiplyPrime((126l)) == (false));
    assert(isMultiplyPrime((729l)) == (false));
    assert(isMultiplyPrime((891l)) == (false));
    assert(isMultiplyPrime((1001l)) == (true));
    }

}
"
HumanEval_76,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     /x yɛ n mu tumi a emu yɛ den bere a n**int=x     / tumi a wɔde di dwuma wɔ n mu na ɛyɛ atoro wɔ nsɛm foforo mu.     / Wo adwuma ne sɛ wobɛkyerɛ adwuma a sɛ ɛmu no yɛ simple a, ɛyɛ true    // >>> isSimplePower((1l), (4l))
    // (true)
    // >>> isSimplePower((2l), (2l))
    // (true)
    // >>> isSimplePower((8l), (2l))
    // (true)
    // >>> isSimplePower((3l), (2l))
    // (false)
    // >>> isSimplePower((3l), (1l))
    // (false)
    // >>> isSimplePower((5l), (3l))
    // (false)
    public static boolean isSimplePower(long x, long n) {
","public static boolean isSimplePower(long x, long n) {
        if (x < 1 || n < 1) {
            return false;
        }
        if (n == 1) {
            return x == 1;
        }
        long power = 1;
        while (power < x) {
            power *= n;
        }
        return power == x;
    }

    public static void main(String[] args) {
        System.out.println(isSimplePower(1l, 4l)); // true
        System.out.println(isSimplePower(2l, 2l)); // true
        System.out.println(isSimplePower(8l, 2l)); // true
        System.out.println(isSimplePower(3l, 2l)); // false
        System.out.println(isSimplePower(3l, 1l)); // false
        System.out.println(isSimplePower(5l, 3l)); // false
    }
}","    }
    public static void main(String[] args) {
    assert(isSimplePower((16l), (2l)) == (true));
    assert(isSimplePower((143214l), (16l)) == (false));
    assert(isSimplePower((4l), (2l)) == (true));
    assert(isSimplePower((9l), (3l)) == (true));
    assert(isSimplePower((16l), (4l)) == (true));
    assert(isSimplePower((24l), (2l)) == (false));
    assert(isSimplePower((128l), (4l)) == (false));
    assert(isSimplePower((12l), (6l)) == (false));
    assert(isSimplePower((1l), (1l)) == (true));
    assert(isSimplePower((1l), (12l)) == (true));
    }

}
"
HumanEval_77,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Hyɛ no nsow: wubetumi aka sɛ nea wɔde aba no yɛ nokware bere nyinaa.     / sɛ saa ingeger yi yɛ anammɔn a ɛboro so bi a wɔaka ho asɛm.     Kyerɛw adwuma a ɛgye akontabuo a na ɛde true ma     // >>> iscube((1l))
    // (true)
    // >>> iscube((2l))
    // (false)
    // >>> iscube((-1l))
    // (true)
    // >>> iscube((64l))
    // (true)
    // >>> iscube((0l))
    // (true)
    // >>> iscube((180l))
    // (false)
    public static boolean iscube(long a) {
","public static boolean iscube(long a) {
        if (a < 0) {
            a = -a;
        }
        long cubeRoot = Math.round(Math.cbrt(a));
        return cubeRoot * cubeRoot * cubeRoot == a;
    }
}","    }
    public static void main(String[] args) {
    assert(iscube((1l)) == (true));
    assert(iscube((2l)) == (false));
    assert(iscube((-1l)) == (true));
    assert(iscube((64l)) == (true));
    assert(iscube((180l)) == (false));
    assert(iscube((1000l)) == (true));
    assert(iscube((0l)) == (true));
    assert(iscube((1729l)) == (false));
    }

}
"
HumanEval_78,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / na nkyerɛwde A,B,C,D,E,F yɛ akɛse bere nyinaa.     / Hyɛ no nsow: wubetumi agye adi sɛ nea wɔde aba no yɛ nea ɛteɛ bere nyinaa anaa ɛnka hwee,     / B (= ɔpepepem 11), D (= ɔpepepem 13).     Enti ɛsɛ sɛ wuhu akontaahyɛde a edidi so yi mu biara: 2, 3, 5, 7,     / Prɛko ne 2, 3, 5, 7, 11, 13, 17,...     / Hexadecimal digits yɛ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.     / kɛse sen 1 a ɛnyɛ nneɛma nketenkete abien a wɔde adi dwuma).    / digits a ɛyɛ prime (prime number, anaa prime, yɛ nipa dodow     / hexadecimal dodow sɛ ɔtweaa na ɛkan hexadecimal dodow     / Wɔama wo dwumadi sɛ kyerɛw dwumadi a wogye     // >>> hexKey((""AB""))
    // (1l)
    // >>> hexKey((""1077E""))
    // (2l)
    // >>> hexKey((""ABED1A33""))
    // (4l)
    // >>> hexKey((""123456789ABCDEF0""))
    // (6l)
    // >>> hexKey((""2020""))
    // (2l)
    public static long hexKey(String num) {
","import java.util.*;

class Problem {
    public static long hexKey(String num) {
        // Set of hexadecimal ""digits"" that are prime numbers.
        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));
        
        // Count prime digits in the hexadecimal number.
        long count = 0;
        for (char ch : num.toCharArray()) {
            if (primeHexDigits.contains(ch)) {
                count++;
            }
        }
        return count;
    }

    // You can include this main method for testing the function
    public static void main(String[] args) {
        System.out.println(hexKey(""AB"")); // Output: 1
        System.out.println(hexKey(""1077E"")); // Output: 2
        System.out.println(hexKey(""ABED1A33"")); // Output: 4
        System.out.println(hexKey(""123456789ABCDEF0"")); // Output: 6
        System.out.println(hexKey(""2020"")); // Output: 2
    }
}","    }
    public static void main(String[] args) {
    assert(hexKey((""AB"")) == (1l));
    assert(hexKey((""1077E"")) == (2l));
    assert(hexKey((""ABED1A33"")) == (4l));
    assert(hexKey((""2020"")) == (2l));
    assert(hexKey((""123456789ABCDEF0"")) == (6l));
    assert(hexKey((""112233445566778899AABBCCDDEEFF00"")) == (12l));
    }

}
"
HumanEval_79,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Nkyerɛwde a ɛboro so no boa ma wotumi kyerɛ sɛnea wɔyɛ no.     / Ebɛyɛ dɛ nkrataa a wɔato dzin 'db' no bi wɔ mfitiase na ewiei no.    / number. Akwankyerɛ biara a ɛwɔ ahoma no mu bɛyɛ '0' anaa '1'.     / binary format. Ɛsɛ sɛ adwuma no san san ahinasa, a nkyerɛwde biara gyina hɔ ma binary     / Wobɛma wo nɔma wɔ ɔpepepem kwan so na w'adwuma ne sɛ wobɛsesa no akɔ     // >>> decimalToBinary((15l))
    // (""db1111db"")
    // >>> decimalToBinary((32l))
    // (""db100000db"")
    public static String decimalToBinary(long decimal) {
","public static String decimalToBinary(long decimal) {
        // Convert the decimal number to binary string
        String binaryStr = Long.toBinaryString(decimal);
        // Add 'db' at the beginning and the end of the binary string
        return ""db"" + binaryStr + ""db"";
    }
}","    }
    public static void main(String[] args) {
    assert(decimalToBinary((0l)).equals((""db0db"")));
    assert(decimalToBinary((32l)).equals((""db100000db"")));
    assert(decimalToBinary((103l)).equals((""db1100111db"")));
    assert(decimalToBinary((15l)).equals((""db1111db"")));
    }

}
"
HumanEval_80,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Sɛ ɛwo 3 na nkyerɛwde 3 biara a edi hɔ no yɛ soronko a, ɛnneɛ sɛ ahama bi yɛ hapjava     / Wo adwuma ne sɛ wobɛhwɛ sɛ ahwehwɛ no yɛ hapjava anaa ɛnyɛ.     / Wɔama wo ahama bi.     // >>> isHappy((""a""))
    // (false)
    // >>> isHappy((""aa""))
    // (false)
    // >>> isHappy((""abcd""))
    // (true)
    // >>> isHappy((""aabb""))
    // (false)
    // >>> isHappy((""adb""))
    // (true)
    // >>> isHappy((""xyy""))
    // (false)
    public static boolean isHappy(String s) {
","public static boolean isHappy(String s) {
    if (s.length() < 3) {
        return false;
    }
    for (int i = 0; i <= s.length() - 3; i++) {
        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {
            return false;
        }
    }
    return true;
}","    }
    public static void main(String[] args) {
    assert(isHappy((""a"")) == (false));
    assert(isHappy((""aa"")) == (false));
    assert(isHappy((""abcd"")) == (true));
    assert(isHappy((""aabb"")) == (false));
    assert(isHappy((""adb"")) == (true));
    assert(isHappy((""xyy"")) == (false));
    assert(isHappy((""iopaxpoi"")) == (true));
    assert(isHappy((""iopaxioi"")) == (false));
    }

}
"
HumanEval_81,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / 0.0 E     / > 0.0 D-     / > 0.7 D     / > 1.0 D+     / > 1.3 C-     / > 1.7 C     / > 2.0 C+     / > 2.3 B-     / > 2.7 B     / > 3.0 B+     / > 3.3 A-     / > 3.7 A     / 4.0 A+     / GPA.  Nkrataa mu nkontaabu     / yɛ adwuma a etumi kyerɛ ɔfã a wɔato din array a wɔde nkyerɛwde ahorow a ɛwɔ hɔ no din kyerɛ wɔ ɔfã a edi so yi mu:     / Ɔde sukuufo bi GPA ho nsɛm pii ama wo na ɛsɛ sɛ wuhyehyɛ mu     Ɔhaw no ara ne sɛ, ne kyerɛwtohɔ a ɔde yɛɛ ne nhwehwɛmu no ayera.    Ɔkyerɛkyerɛfo no ayɛ ne ankasa algorithm a ɔde bɛkyerɛ no.    / Ɛyɛ dapɛn a etwa to wɔ sukuu mu no mu na ɛsɛ sɛ ɔkyerɛkyerɛfo no de adesua no ho nsɛntitiriw ma     // >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))
    // (new ArrayList<String>(Arrays.asList((String)""A+"", (String)""B"", (String)""C-"", (String)""C"", (String)""A-"")))
    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {
","import java.util.ArrayList;

public class Problem {
    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {
        ArrayList<String> letterGrades = new ArrayList<>();
        for (Float gpa : grades) {
            if (gpa == 4.0) {
                letterGrades.add(""A+"");
            } else if (gpa > 3.7) {
                letterGrades.add(""A"");
            } else if (gpa > 3.3) {
                letterGrades.add(""A-"");
            } else if (gpa > 3.0) {
                letterGrades.add(""B+"");
            } else if (gpa > 2.7) {
                letterGrades.add(""B"");
            } else if (gpa > 2.3) {
                letterGrades.add(""B-"");
            } else if (gpa > 2.0) {
                letterGrades.add(""C+"");
            } else if (gpa > 1.7) {
                letterGrades.add(""C"");
            } else if (gpa > 1.3) {
                letterGrades.add(""C-"");
            } else if (gpa > 1.0) {
                letterGrades.add(""D+"");
            } else if (gpa > 0.7) {
                letterGrades.add(""D"");
            } else if (gpa > 0.0) {
                letterGrades.add(""D-"");
            } else if (gpa == 0.0) {
                letterGrades.add(""E"");
            }
        }
        return letterGrades;
    }
    
    public static void main(String[] args) {
        ArrayList<Float> gpas = new ArrayList<>();
        gpas.add(4.0f);
        gpas.add(3.0f);
        gpas.add(1.7f);
        gpas.add(2.0f);
        gpas.add(3.5f);
        ArrayList<String> grades = numericalLetterGrade(gpas);
        System.out.println(grades);
    }
}","    }
    public static void main(String[] args) {
    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f)))).equals((new ArrayList<String>(Arrays.asList((String)""A+"", (String)""B"", (String)""C-"", (String)""C"", (String)""A-"")))));
    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.2f)))).equals((new ArrayList<String>(Arrays.asList((String)""D+"")))));
    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.5f)))).equals((new ArrayList<String>(Arrays.asList((String)""D-"")))));
    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f)))).equals((new ArrayList<String>(Arrays.asList((String)""E"")))));
    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f)))).equals((new ArrayList<String>(Arrays.asList((String)""D"", (String)""D-"", (String)""C-"", (String)""B"", (String)""B+"")))));
    assert(numericalLetterGrade((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.7f)))).equals((new ArrayList<String>(Arrays.asList((String)""E"", (String)""D-"")))));
    }

}
"
HumanEval_82,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / tenten yɛ ɔkan a enni mu anaa ɛnte saa     / Kyerɛw adwuma a fa ahinasa na ɛde true ba sɛ ahinasa no     // >>> primeLength((""Hello""))
    // (true)
    // >>> primeLength((""abcdcba""))
    // (true)
    // >>> primeLength((""kittens""))
    // (true)
    // >>> primeLength((""orange""))
    // (false)
    public static boolean primeLength(String string) {
","public static boolean primeLength(String string) {
    int length = string.length();
    if (length <= 1) return false;
    for (int i = 2; i <= Math.sqrt(length); i++) {
        if (length % i == 0) {
            return false;
        }
    }
    return true;
}","    }
    public static void main(String[] args) {
    assert(primeLength((""Hello"")) == (true));
    assert(primeLength((""abcdcba"")) == (true));
    assert(primeLength((""kittens"")) == (true));
    assert(primeLength((""orange"")) == (false));
    assert(primeLength((""wow"")) == (true));
    assert(primeLength((""world"")) == (true));
    assert(primeLength((""MadaM"")) == (true));
    assert(primeLength((""Wow"")) == (true));
    assert(primeLength(("""")) == (false));
    assert(primeLength((""HI"")) == (true));
    assert(primeLength((""go"")) == (true));
    assert(primeLength((""gogo"")) == (false));
    assert(primeLength((""aaaaaaaaaaaaaaa"")) == (false));
    assert(primeLength((""Madam"")) == (true));
    assert(primeLength((""M"")) == (false));
    assert(primeLength((""0"")) == (false));
    }

}
"
HumanEval_83,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / yɛ akontaahyɛde a edi kan anaa awiei yɛ 1     / Sɛ wɔde adansedie a ɛyɛ pɛ n ama a, ma no nkyerɛ n-nkyekyɛmu no mu dodow     public static long startsOneEnds(long n) {
","import java.util.*;

class Problem {
    // Given a positive integer n, return the count of the numbers of n-digit
    // positive integers that start or end with 1.
    public static long startsOneEnds(long n) {
        if (n == 1) return 1; // Only the number '1' is a one-digit number that starts or ends with 1.

        // Total numbers with n digits: 9 * (10^(n-1))
        long totalNDigitNumbers = 9 * (long)Math.pow(10, n - 1);

        // Numbers that start with 1 and are n-digits: 1 * (10^(n-1))
        long startsWithOne = (long)Math.pow(10, n - 1);

        // Numbers that end with 1: 9 * (10^(n-1))/10
        long endsWithOne = totalNDigitNumbers / 10;

        // Since numbers starting and ending with 1 are counted twice, we subtract the overlap.
        return startsWithOne + endsWithOne - 1;
    }

    public static void main(String[] args) {
        System.out.println(startsOneEnds(1)); // Expected output: 1
        System.out.println(startsOneEnds(2)); // Expected output: 19
        System.out.println(startsOneEnds(3)); // Expected output: 190
        System.out.println(startsOneEnds(4)); // Expected output: 1900
    }
}","    }
    public static void main(String[] args) {
    assert(startsOneEnds((1l)) == (1l));
    assert(startsOneEnds((2l)) == (18l));
    assert(startsOneEnds((3l)) == (180l));
    assert(startsOneEnds((4l)) == (1800l));
    assert(startsOneEnds((5l)) == (18000l));
    }

}
"
HumanEval_84,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso     / Sɛ wɔde adikanfo a N wɔ hɔ a, ma ne nkontabuo nyinaa mmra wɔ binary mu.     // >>> solve((1000l))
    // (""1"")
    // >>> solve((150l))
    // (""110"")
    // >>> solve((147l))
    // (""1100"")
    // Variables:
    // @N integer
    // Constraints: 0 ≤ N ≤ 10000.
    // Output:
    // a string of binary number
    public static String solve(long N) {
","public static String solve(long N) {
        long sum = 0;
        while (N > 0) {
            sum += N % 10;
            N /= 10;
        }
        return Long.toBinaryString(sum);
    }
}","    }
    public static void main(String[] args) {
    assert(solve((1000l)).equals((""1"")));
    assert(solve((150l)).equals((""110"")));
    assert(solve((147l)).equals((""1100"")));
    assert(solve((333l)).equals((""1001"")));
    assert(solve((963l)).equals((""10010"")));
    }

}
"
HumanEval_85,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Sɛ yɛma no sɛ yɛrehwehwɛ integers a wɔnnyɛ hwee a, di kan ka emu even a ɛwɔ odd index mu no bom..     // >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))
    // (2l)
    public static long add(ArrayList<Long> lst) {
","long sum = 0;
        for (int i = 1; i < lst.size(); i += 2) {
            if (lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}","    }
    public static void main(String[] args) {
    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)88l)))) == (88l));
    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));
    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));
    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l, (long)8l)))) == (12l));
    }

}
"
HumanEval_86,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Hyɛ no nsow: Ɛsɛ sɛ wode nsɛmfua ne nsɛm a wɔde to hɔ wɔ ɔkasamu no mu di dwuma.     / dibea a ɛrenya nkɔanim a egyina ascii so.     / wɔde asɛmfua foforo a nkyerɛwde a wɔahyehyɛ no nyinaa wɔ mu no besi ananmu     / Sɛ wohwɛ string a, ɛyɛ string a nsɛmfua nyinaa (a mpaemu da wɔn ntam) wɔ mu.    / Kyerɛw adwuma bi a ebegye ahinasa bi na ɛde ne nkyerɛwee a wɔahyehyɛ aba.     // >>> antiShuffle((""Hi""))
    // (""Hi"")
    // >>> antiShuffle((""hello""))
    // (""ehllo"")
    // >>> antiShuffle((""Hello World!!!""))
    // (""Hello !!!Wdlor"")
    public static String antiShuffle(String s) {
","public static String antiShuffle(String s) {
    StringBuilder result = new StringBuilder();
    String[] words = s.split(""(?<=\\s)|(?=\\s)"");
    
    for (String word : words) {
        if (word.trim().isEmpty()) {
            result.append(word);
        } else {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            result.append(new String(chars));
        }
    }
    
    return result.toString();
}","    }
    public static void main(String[] args) {
    assert(antiShuffle((""Hi"")).equals((""Hi"")));
    assert(antiShuffle((""hello"")).equals((""ehllo"")));
    assert(antiShuffle((""number"")).equals((""bemnru"")));
    assert(antiShuffle((""abcd"")).equals((""abcd"")));
    assert(antiShuffle((""Hello World!!!"")).equals((""Hello !!!Wdlor"")));
    assert(antiShuffle(("""")).equals(("""")));
    assert(antiShuffle((""Hi. My name is Mister Robot. How are you?"")).equals(("".Hi My aemn is Meirst .Rboot How aer ?ouy"")));
    }

}
"
HumanEval_87,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Afei nso, fa nea ɛwɔ ɔfã no mu no toto nea ɛwɔ ɔfã no mu no ho wɔ nea ɛrekɔ so no mu.     / Di kan toto nneɛma a ɛwɔ hɔ no ho wɔ ahyɛnsode no mu.     / a ɔfã biara yɛ - (nsa, nkontaabu), a efi ase wɔ 0 so.     / na ma no nsɛso a ɛbom, [(x1, y1), (x2, y2) ...] saa na     / Sɛ wode lst, ne integer x, hwehwɛ integer x wɔ array list no mu,     / ɔfã biara mu no, wobetumi de ɔfã ahorow bi adi dwuma.     / a ɛte sɛ matrix, nanso ɛnte sɛ matrices,     Wode 2 dimensional data, a ɛyɛ nea wɔaka ho asɛm wɔ ɔfã bi mu,     // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))
    // (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))
    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l))
    // (new ArrayList<Pair<Long, Long>>(Arrays.asList()))
    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))
    // (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))
    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {
","public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>> lst, long x) {
        ArrayList<Pair<Long, Long>> result = new ArrayList<>();

        for (long i = 0; i < lst.size(); i++) {
            ArrayList<Long> row = lst.get((int)i);
            for (long j = 0; j < row.size(); j++) {
                if (row.get((int)j) == x) {
                    result.add(Pair.with(i, j));
                }
            }
        }

        result.sort(new Comparator<Pair<Long, Long>>() {
            @Override
            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {
                int rowComparison = Long.compare(p1.getValue0(), p2.getValue0());
                if (rowComparison != 0) {
                    return rowComparison;
                } else {
                    return Long.compare(p2.getValue1(), p1.getValue1());  // Descending order by column
                }
            }
        });

        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(2l, 0l))))));
    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));
    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l), (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 0l))))));
    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())), (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));
    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))), (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));
    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));
    }

}
"
HumanEval_88,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / * mma no nsesa nea wɔde ama no array array list.     / Hyɛ no nsow:     / anaa yɛ no wɔ nea ɛrekɔ so no mu sɛ wɔaka no wɔ nea ɛrekɔ so no mu a, ne nyinaa yɛ pɛ.    / wobɛhwɛ sɛ nea ɛwɔ ɔfã a wɔayi no so no yɛ nea ɛrekɔ soro a, sɛ nea wɔaka no nyinaa yɛ nea wɔnka a,     / Sɛ wɔde nnipakan nnipakan a wɔnnyɛ negative integers, a, yɛ no cojava a wɔde di dwuma wɔ nnipakan nnipakan no mu wɔ akyire yi,     // >>> sortArray((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<Long>(Arrays.asList()))
    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)5l)))
    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))
    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))
    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))
    public static ArrayList<Long> sortArray(ArrayList<Long> array) {
","import java.util.ArrayList;
import java.util.Collections;

class Problem {
    public static ArrayList<Long> sortArray(ArrayList<Long> array) {
        if (array.isEmpty()) {
            return new ArrayList<>(array);
        }

        long firstValue = array.get(0);
        long lastValue = array.get(array.size() - 1);
        long sum = firstValue + lastValue;

        ArrayList<Long> result = new ArrayList<>(array);
        
        if (sum % 2 == 0) {
            // Sort in descending order
            result.sort(Collections.reverseOrder());
        } else {
            // Sort in ascending order
            Collections.sort(result);
        }

        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l, (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));
    }

}
"
HumanEval_89,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / twe ase kɔ fam de fa abien a wɔakyɛ no mu abien.     / Ɛsɛ sɛ wɔsakra nkyerɛwde no wɔ ɔkwan bi so ma nkyerɛwde no     / de nkyerɛwde a wɔde asensɛnkyerɛw no bi a wɔde nkyerɛwde no asesae ma.     / Yɛ adwuma bi a ɛgye ahyɛnsode sɛ argument na     // >>> encrypt((""hi""))
    // (""lm"")
    // >>> encrypt((""asdfghjkl""))
    // (""ewhjklnop"")
    // >>> encrypt((""gf""))
    // (""kj"")
    // >>> encrypt((""et""))
    // (""ix"")
    public static String encrypt(String s) {
","import java.util.*;

public class Problem {
    // Create a function encrypt that takes a string as an argument and returns
    // a string encrypted with the alphabet being rotated by 2 * 2 = 4 places.
    public static String encrypt(String s) {
        StringBuilder encryptedString = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (Character.isLowerCase(c)) {
                char shifted = (char) ((c - 'a' + 4) % 26 + 'a');
                encryptedString.append(shifted);
            } else if (Character.isUpperCase(c)) {
                char shifted = (char) ((c - 'A' + 4) % 26 + 'A');
                encryptedString.append(shifted);
            } else {
                // If the character is not a letter, append it unchanged.
                encryptedString.append(c);
            }
        }
        return encryptedString.toString();
    }

    public static void main(String[] args) {
        // Test examples
        System.out.println(encrypt(""hi""));          // Output: lm
        System.out.println(encrypt(""asdfghjkl""));   // Output: ewhjklnop
        System.out.println(encrypt(""gf""));          // Output: kj
        System.out.println(encrypt(""et""));          // Output: ix
    }
}","    }
    public static void main(String[] args) {
    assert(encrypt((""hi"")).equals((""lm"")));
    assert(encrypt((""asdfghjkl"")).equals((""ewhjklnop"")));
    assert(encrypt((""gf"")).equals((""kj"")));
    assert(encrypt((""et"")).equals((""ix"")));
    assert(encrypt((""faewfawefaewg"")).equals((""jeiajeaijeiak"")));
    assert(encrypt((""hellomyfriend"")).equals((""lippsqcjvmirh"")));
    assert(encrypt((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")).equals((""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"")));
    assert(encrypt((""a"")).equals((""e"")));
    }

}
"
HumanEval_90,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ saa ade yi nni hɔ a, de null ma.     / Kyerɛw adwuma next_smallest (() a ɛde nea ɛtɔ so 2 a ɛyɛ ketewa paa wɔ ɔfã no mu ba.     / Wɔama wo akontaahyɛde a ɛwɔ din ahoro so.    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))
    // Optional.of(2l)
    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))
    // Optional.of(2l)
    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))
    // Optional.empty()
    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))
    // Optional.empty()
    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {
","import java.util.*;

class Problem {
    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {
        if (lst == null || lst.size() < 2) {
            return Optional.empty();
        }

        Set<Long> uniqueSet = new HashSet<>(lst);
        List<Long> uniqueList = new ArrayList<>(uniqueSet);
        if (uniqueList.size() < 2) {
            return Optional.empty();
        }

        Collections.sort(uniqueList);
        return Optional.of(uniqueList.get(1));
    }
}","    }
    public static void main(String[] args) {
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(Optional.of(2l)));
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l)))).equals(Optional.of(2l)));
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(1l)));
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));
    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l, (long)34l, (long)12l, (long)-45l)))).equals(Optional.of(-35l)));
    }

}
"
HumanEval_91,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Wɔde '.', '?' anaa '!' na ɛtwa nsɛmfua ntam.     Sɛ wɔka sɛ obi yɛ obi a n'ani bere a, ɛkyerɛ sɛ ɔredaadaa ne ho.    / Wobɛma wo nsɛmfua a wɔahyehyɛ, na wo adwuma ne sɛ wobɛkan dodow no.    // >>> isBored((""Hello world""))
    // (0l)
    // >>> isBored((""The sky is blue. The sun is shining. I love this weather""))
    // (1l)
    public static long isBored(String S) {
","long boredomCount = 0;
        String[] sentences = S.split(""[.!?]"");
        for (String sentence : sentences) {
            sentence = sentence.trim();
            if (sentence.startsWith(""I"")) {
                boredomCount++;
            }
        }
        return boredomCount;
    }
}","    }
    public static void main(String[] args) {
    assert(isBored((""Hello world"")) == (0l));
    assert(isBored((""Is the sky blue?"")) == (0l));
    assert(isBored((""I love It !"")) == (1l));
    assert(isBored((""bIt"")) == (0l));
    assert(isBored((""I feel good today. I will be productive. will kill It"")) == (2l));
    assert(isBored((""You and I are going for a walk"")) == (0l));
    }

}
"
HumanEval_92,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / Ɛsan ma yɛhu sɛ ɛyɛ atoro wɔ nsɛm foforo biara mu.     / Sɛ nnum no mu biako yɛ nnum a aka no nyinaa ka a, na ne nyinaa yɛ integers a, ɛkyerɛ sɛ ɛyɛ nokware.     / Yɛ adwuma bi a egye nnum.     // >>> anyInt((float)5l, (float)2l, (float)7l)
    // (true)
    // >>> anyInt((float)3l, (float)2l, (float)2l)
    // (false)
    // >>> anyInt((float)3l, (float)-2l, (float)1l)
    // (true)
    // >>> anyInt((3.6f), (-2.2f), (float)2l)
    // (false)
    public static boolean anyInt(float x, float y, float z) {
","public static boolean anyInt(float x, float y, float z) {
        // Check if any of the numbers is the sum of the other two
        // To ensure all are integers, they must be equal to their integer counterpart
        if (x == (int) x && y == (int) y && z == (int) z) {
            // Convert numbers to integers
            int xi = (int) x;
            int yi = (int) y;
            int zi = (int) z;
            return (xi == yi + zi) || (yi == xi + zi) || (zi == xi + yi);
        }
        return false;
    }
}","    }
    public static void main(String[] args) {
    assert(anyInt((float)2l, (float)3l, (float)1l) == (true));
    assert(anyInt((2.5f), (float)2l, (float)3l) == (false));
    assert(anyInt((1.5f), (float)5l, (3.5f)) == (false));
    assert(anyInt((float)2l, (float)6l, (float)2l) == (false));
    assert(anyInt((float)4l, (float)2l, (float)2l) == (true));
    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));
    assert(anyInt((float)-4l, (float)6l, (float)2l) == (true));
    assert(anyInt((float)2l, (float)1l, (float)1l) == (true));
    assert(anyInt((float)3l, (float)4l, (float)7l) == (true));
    assert(anyInt((3.0f), (float)4l, (float)7l) == (false));
    }

}
"
HumanEval_93,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Gye sɛ nkyerɛwde nkutoo na ɛwɔ hɔ.     / ɛnne nkyerɛwde a ɛwɔ Borɔfo nkyerɛwde mu.     / nkrataa a ɛwɔ krataa a ɛwɔ hɔ no anim no     / ɔkwan a ɛfa so de nsɛmfua a ɛwɔ  mu no nyinaa sesa nsɛmfua a ɛwɔ  mu no nyinaa.    / Kyerɛw adwuma bi a ebegye asɛm bi, na wakyerɛw wɔ saa kwan yi so     // >>> encode((""test""))
    // (""TGST"")
    // >>> encode((""This is a message""))
    // (""tHKS KS C MGSSCGG"")
    public static String encode(String message) {
","public static String encode(String message) {
    StringBuilder encodedMessage = new StringBuilder();
    for (char c : message.toCharArray()) {
        if (Character.isLetter(c)) {
            // Swap case
            char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);

            // Replace vowels
            if (""AEIOUaeiou"".indexOf(c) != -1) {
                // Determine the offset for vowel replacement
                char replacementChar = (char) (swappedCaseChar + 2);
                encodedMessage.append(replacementChar);
            } else {
                encodedMessage.append(swappedCaseChar);
            }
        }
    }
    return encodedMessage.toString();
}","    }
    public static void main(String[] args) {
    assert(encode((""TEST"")).equals((""tgst"")));
    assert(encode((""Mudasir"")).equals((""mWDCSKR"")));
    assert(encode((""YES"")).equals((""ygs"")));
    assert(encode((""This is a message"")).equals((""tHKS KS C MGSSCGG"")));
    assert(encode((""I DoNt KnOw WhAt tO WrItE"")).equals((""k dQnT kNqW wHcT Tq wRkTg"")));
    }

}
"
HumanEval_94,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Ɛsɛ sɛ wuhu nea ne kɛse yɛ a ɛsom bo na wosan de ne nkyekyɛm ahorow no ka ho.     / Wɔama wo akontaahyɛde a ɛwɔ din ahoro so.    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))
    // (10l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))
    // (25l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))
    // (13l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))
    // (11l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))
    // (3l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))
    // (7l)
    public static long skjkasdkd(ArrayList<Long> lst) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static boolean isPrime(long n) {
        if (n <= 1) return false;
        if (n <= 3) return true;

        if (n % 2 == 0 || n % 3 == 0) return false;

        for (long i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0)
                return false;
        }

        return true;
    }

    public static long sumOfDigits(long n) {
        long sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }

    public static long skjkasdkd(ArrayList<Long> lst) {
        long largestPrime = -1;

        for (long num : lst) {
            if (isPrime(num)) {
                largestPrime = Math.max(largestPrime, num);
            }
        }

        return largestPrime != -1 ? sumOfDigits(largestPrime) : 0;
    }

    public static void main(String[] args) {
        System.out.println(skjkasdkd(new ArrayList<Long>(Arrays.asList(0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L))));
    }
}","    }
    public static void main(String[] args) {
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l)))) == (10l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l)))) == (25l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l)))) == (13l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l)))) == (11l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l)))) == (3l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l)))) == (7l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l)))) == (19l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)8191l, (long)123456l, (long)127l, (long)7l)))) == (19l));
    assert(skjkasdkd((new ArrayList<Long>(Arrays.asList((long)127l, (long)97l, (long)8192l)))) == (10l));
    }

}
"
HumanEval_95,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Sɛ hash map a wɔde ama no yɛ hwee a, ɛsɛ sɛ adwuma no san false.     / case anaa keys nyinaa yɛ string a ɛwɔ capital mu, anyɛ saa a ɛde false bɛba.     / Sɛ hash map bi wɔ hɔ a, ma true sɛ keys nyinaa yɛ string wɔ lower     // >>> checkDictCase((new HashMap<String,String>(Map.of(""a"", ""apple"", ""b"", ""banana""))))
    // (true)
    // >>> checkDictCase((new HashMap<String,String>(Map.of(""a"", ""apple"", ""A"", ""banana"", ""B"", ""banana""))))
    // (false)
    // >>> checkDictCase((new HashMap<String,String>(Map.of(""a"", ""apple"", 8l, ""banana"", ""a"", ""apple""))))
    // (false)
    // >>> checkDictCase((new HashMap<String,String>(Map.of(""Name"", ""John"", ""Age"", ""36"", ""City"", ""Houston""))))
    // (false)
    // >>> checkDictCase((new HashMap<String,String>(Map.of(""STATE"", ""NC"", ""ZIP"", ""12345""))))
    // (true)
    public static boolean checkDictCase(HashMap<String,String> dict) {
","import java.util.HashMap;

class Problem {
    public static boolean checkDictCase(HashMap<String, String> dict) {
        if (dict.isEmpty()) {
            return false;
        }

        boolean allLower = true;
        boolean allUpper = true;

        for (String key : dict.keySet()) {
            if (!key.equals(key.toLowerCase())) {
                allLower = false;
            }
            if (!key.equals(key.toUpperCase())) {
                allUpper = false;
            }
        }

        return allLower || allUpper;
    }

    public static void main(String[] args) {
        HashMap<String, String> map1 = new HashMap<>(Map.of(""a"", ""apple"", ""b"", ""banana""));
        HashMap<String, String> map2 = new HashMap<>(Map.of(""a"", ""apple"", ""A"", ""banana"", ""B"", ""banana""));
        HashMap<String, String> map3 = new HashMap<>(Map.of(""a"", ""apple"", ""8"", ""banana"", ""A"", ""apple""));
        HashMap<String, String> map4 = new HashMap<>(Map.of(""Name"", ""John"", ""Age"", ""36"", ""City"", ""Houston""));
        HashMap<String, String> map5 = new HashMap<>(Map.of(""STATE"", ""NC"", ""ZIP"", ""12345""));

        System.out.println(checkDictCase(map1)); // true
        System.out.println(checkDictCase(map2)); // false
        System.out.println(checkDictCase(map3)); // false
        System.out.println(checkDictCase(map4)); // false
        System.out.println(checkDictCase(map5)); // true
    }
}","    }
    public static void main(String[] args) {
    assert(checkDictCase((new HashMap<String,String>(Map.of(""p"", ""pineapple"", ""b"", ""banana"")))) == (true));
    assert(checkDictCase((new HashMap<String,String>(Map.of(""p"", ""pineapple"", ""A"", ""banana"", ""B"", ""banana"")))) == (false));
    assert(checkDictCase((new HashMap<String,String>(Map.of(""p"", ""pineapple"", ""5"", ""banana"", ""a"", ""apple"")))) == (false));
    assert(checkDictCase((new HashMap<String,String>(Map.of(""Name"", ""John"", ""Age"", ""36"", ""City"", ""Houston"")))) == (false));
    assert(checkDictCase((new HashMap<String,String>(Map.of(""STATE"", ""NC"", ""ZIP"", ""12345"")))) == (true));
    assert(checkDictCase((new HashMap<String,String>(Map.of(""fruit"", ""Orange"", ""taste"", ""Sweet"")))) == (true));
    assert(checkDictCase((new HashMap<String,String>())) == (false));
    }

}
"
HumanEval_96,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / sɛ nhwɛso:     / integers a ɛyɛ prime numbers na ɛnnyɛ n.     / Yɛ adwuma a ɛgye akontabuo a ɛnnyɛ negative na ɛde nea edi kan no mu n a ɛwɔ ɔfã bi mu ba.    // >>> countUpTo((5l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))
    // >>> countUpTo((11l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))
    // >>> countUpTo((0l))
    // (new ArrayList<Long>(Arrays.asList()))
    // >>> countUpTo((20l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))
    // >>> countUpTo((1l))
    // (new ArrayList<Long>(Arrays.asList()))
    // >>> countUpTo((18l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))
    public static ArrayList<Long> countUpTo(long n) {
","import java.util.ArrayList;

public class Problem {
    
    public static ArrayList<Long> countUpTo(long n) {
        ArrayList<Long> primes = new ArrayList<>();
        for (long i = 2; i < n; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        return primes;
    }
    
    private static boolean isPrime(long num) {
        if (num <= 1) return false;
        if (num <= 3) return true;
        if (num % 2 == 0 || num % 3 == 0) return false;
        for (long i = 5; i * i <= num; i += 6) {
            if (num % i == 0 || num % (i + 2) == 0) return false;
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(countUpTo((5l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));
    assert(countUpTo((6l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));
    assert(countUpTo((7l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l)))));
    assert(countUpTo((10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))));
    assert(countUpTo((0l)).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(countUpTo((22l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))));
    assert(countUpTo((1l)).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(countUpTo((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));
    assert(countUpTo((47l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l)))));
    assert(countUpTo((101l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l, (long)23l, (long)29l, (long)31l, (long)37l, (long)41l, (long)43l, (long)47l, (long)53l, (long)59l, (long)61l, (long)67l, (long)71l, (long)73l, (long)79l, (long)83l, (long)89l, (long)97l)))));
    }

}
"
HumanEval_97,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Gye tom sɛ nea wɔde aba no yɛ nokware bere nyinaa.     / wɔn dodow a wɔaka abom.     / Yɛ adwuma a ɛgye akontabuo mmienu na ɛsan de     // >>> multiply((148l), (412l))
    // (16l)
    // >>> multiply((19l), (28l))
    // (72l)
    // >>> multiply((2020l), (1851l))
    // (0l)
    // >>> multiply((14l), (-15l))
    // (20l)
    public static long multiply(long a, long b) {
","long unitDigitA = Math.abs(a % 10);
        long unitDigitB = Math.abs(b % 10);
        return unitDigitA * unitDigitB;
    }
}","    }
    public static void main(String[] args) {
    assert(multiply((148l), (412l)) == (16l));
    assert(multiply((19l), (28l)) == (72l));
    assert(multiply((2020l), (1851l)) == (0l));
    assert(multiply((14l), (-15l)) == (20l));
    assert(multiply((76l), (67l)) == (42l));
    assert(multiply((17l), (27l)) == (49l));
    assert(multiply((0l), (1l)) == (0l));
    assert(multiply((0l), (0l)) == (0l));
    }

}
"
HumanEval_98,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Sɛ wɔde ahama s bi ma wo a, ka ɛnne akɛse a ɛwɔ nkyerɛwde a emu yɛ pɛ mu no dodow.     // >>> countUpper((""aBCdEf""))
    // (1l)
    // >>> countUpper((""abcdefg""))
    // (0l)
    // >>> countUpper((""dBBE""))
    // (0l)
    public static long countUpper(String s) {
","long count = 0;
        for (int i = 0; i < s.length(); i += 2) {
            char c = s.charAt(i);
            if (""AEIOU"".indexOf(c) != -1) {
                count++;
            }
        }
        return count;
    }
}","    }
    public static void main(String[] args) {
    assert(countUpper((""aBCdEf"")) == (1l));
    assert(countUpper((""abcdefg"")) == (0l));
    assert(countUpper((""dBBE"")) == (0l));
    assert(countUpper((""B"")) == (0l));
    assert(countUpper((""U"")) == (1l));
    assert(countUpper(("""")) == (0l));
    assert(countUpper((""EEEE"")) == (2l));
    }

}
"
HumanEval_99,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / fi integers abien mu, yɛ no kɔ akyiri fi zero ho.     Sɛ ne nyinaa yɛ pɛ a,     / Yɛ adwuma a ɛgye akontaahyɛde (string) a ɛkyerɛ nɔma     // >>> closestInteger((""10""))
    // (10l)
    // >>> closestInteger((""15.3""))
    // (15l)
    // Note:
    // Rounding away from zero means that if the given number is equidistant
    // from two integers, the one you should return is the one that is the
    // farthest from zero. For example closest_integer(""14.5"") should
    // return 15 and closest_integer(""-14.5"") should return -15.
    public static long closestInteger(String value) {
","public static long closestInteger(String value) {
        double number = Double.parseDouble(value);
        long rounded = Math.round(number);
        if (Math.abs(number - rounded) == 0.5) {
            // Rounding away from zero
            if (number > 0) {
                return rounded + 1;
            } else {
                return rounded - 1;
            }
        }
        return rounded;
    }

    public static void main(String[] args) {
        System.out.println(closestInteger(""10""));   // 10
        System.out.println(closestInteger(""15.3"")); // 15
        System.out.println(closestInteger(""14.5"")); // 15
        System.out.println(closestInteger(""-14.5""));// -15
    }
}","    }
    public static void main(String[] args) {
    assert(closestInteger((""10"")) == (10l));
    assert(closestInteger((""14.5"")) == (15l));
    assert(closestInteger((""-15.5"")) == (-16l));
    assert(closestInteger((""15.3"")) == (15l));
    assert(closestInteger((""0"")) == (0l));
    }

}
"
HumanEval_100,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / i kyerɛ abo a ɛwɔ ɔdan no mu dodow (i+1).     / De aboɔ dodow a ɛwɔ ɔfã biara mu wɔ ɔfã a wɔato din array list, baabi a element wɔ index     / - nea edi hɔ a ɛyɛ mpo, sɛ n yɛ mpo a.     / - nea edi hɔ a ne ho nni nsɛ bere a n yɛ animhwɛ.     / Abo a ɛwɔ ɔdan a edi hɔ no mu dodow yɛ:     / Nsuo a edi kan no yɛ abo n.    / Sɛ wode ɔpepepem a ɛne n di dwuma a, ɛsɛ sɛ woyɛ abo a ɛwɔ afã n.     // >>> makeAPile((3l))
    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))
    public static ArrayList<Long> makeAPile(long n) {
","public static ArrayList<Long> makeAPile(long n) {
        ArrayList<Long> pile = new ArrayList<>();
        long stones = n;
        boolean isOdd = stones % 2 != 0;

        for (int i = 0; i < n; i++) {
            pile.add(stones);
            if (isOdd) {
                stones += 2; // Next odd number
            } else {
                stones += 2; // Next even number
            }
        }

        return pile;
    }
}","    }
    public static void main(String[] args) {
    assert(makeAPile((3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))));
    assert(makeAPile((4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)10l)))));
    assert(makeAPile((5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)11l, (long)13l)))));
    assert(makeAPile((6l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l)))));
    assert(makeAPile((8l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)18l, (long)20l, (long)22l)))));
    }

}
"
HumanEval_101,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / sɛ ɔbɛkyekyɛ ahyɛnsode no mu nsɛmfua na ɔde nsɛmfua no mu ahyɛnsode a wɔahyehyɛ no aba.     Wode nsɛmfua a wɔde ntweaa anaa ntweaa apaapae no bɛhyɛ wo nsa.    // >>> wordsString((""Hi, my name is John""))
    // (new ArrayList<String>(Arrays.asList((String)""Hi"", (String)""my"", (String)""name"", (String)""is"", (String)""John"")))
    // >>> wordsString((""One, two, three, four, five, six""))
    // (new ArrayList<String>(Arrays.asList((String)""One"", (String)""two"", (String)""three"", (String)""four"", (String)""five"", (String)""six"")))
    public static ArrayList<String> wordsString(String s) {
","import java.util.*;

class Problem {
    public static ArrayList<String> wordsString(String s) {
        String[] words = s.split(""[,\\s]+"");
        return new ArrayList<String>(Arrays.asList(words));
    }

    public static void main(String[] args) {
        System.out.println(wordsString(""Hi, my name is John""));
        System.out.println(wordsString(""One, two, three, four, five, six""));
    }
}","    }
    public static void main(String[] args) {
    assert(wordsString((""Hi, my name is John"")).equals((new ArrayList<String>(Arrays.asList((String)""Hi"", (String)""my"", (String)""name"", (String)""is"", (String)""John"")))));
    assert(wordsString((""One, two, three, four, five, six"")).equals((new ArrayList<String>(Arrays.asList((String)""One"", (String)""two"", (String)""three"", (String)""four"", (String)""five"", (String)""six"")))));
    assert(wordsString((""Hi, my name"")).equals((new ArrayList<String>(Arrays.asList((String)""Hi"", (String)""my"", (String)""name"")))));
    assert(wordsString((""One,, two, three, four, five, six,"")).equals((new ArrayList<String>(Arrays.asList((String)""One"", (String)""two"", (String)""three"", (String)""four"", (String)""five"", (String)""six"")))));
    assert(wordsString(("""")).equals((new ArrayList<String>(Arrays.asList()))));
    assert(wordsString((""ahmed     , gamal"")).equals((new ArrayList<String>(Arrays.asList((String)""ahmed"", (String)""gamal"")))));
    }

}
"
HumanEval_102,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / sɛ nnipakan bi nni hɔ a, ɛnde ɛsɛ sɛ adwuma no san ba -1.     / ne kɛse paa a ɛwɔ [x, y] mu. Sɛ     / Eyi fa akontaahyɛde x ne y na ɛde     // >>> chooseNum((12l), (15l))
    // (14l)
    // >>> chooseNum((13l), (12l))
    // (-1l)
    public static long chooseNum(long x, long y) {
","if (x > y) {
            return -1l;
        }
        
        long maxEven = y % 2 == 0 ? y : y - 1;
        if (maxEven >= x) {
            return maxEven;
        } else {
            return -1l;
        }
    }
}","    }
    public static void main(String[] args) {
    assert(chooseNum((12l), (15l)) == (14l));
    assert(chooseNum((13l), (12l)) == (-1l));
    assert(chooseNum((33l), (12354l)) == (12354l));
    assert(chooseNum((5234l), (5233l)) == (-1l));
    assert(chooseNum((6l), (29l)) == (28l));
    assert(chooseNum((27l), (10l)) == (-1l));
    assert(chooseNum((7l), (7l)) == (-1l));
    assert(chooseNum((546l), (546l)) == (546l));
    }

}
"
HumanEval_104,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Hyɛ no nsow: Ɛsɛ sɛ wɔhyehyɛ ntini a wɔsan de ba no mu no mu nea ɛrenyin.     / nneɛma a ɛnni nkyekyɛm biara.     / Sɛ wɔde anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ anohyetoɔ a ɛwɔ    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))
    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))
    // (new ArrayList<Long>(Arrays.asList()))
    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {
","public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {
        return x.stream()
                .filter(num -> hasNoEvenDigits(num))
                .sorted()
                .collect(Collectors.toCollection(ArrayList::new));
    }

    private static boolean hasNoEvenDigits(long num) {
        while (num > 0) {
            long digit = num % 10;
            if (digit % 2 == 0) {
                return false;
            }
            num /= 10;
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))));
    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)12345l, (long)2033l, (long)111l, (long)151l)))).equals((new ArrayList<Long>(Arrays.asList((long)111l, (long)151l)))));
    assert(uniqueDigits((new ArrayList<Long>(Arrays.asList((long)135l, (long)103l, (long)31l)))).equals((new ArrayList<Long>(Arrays.asList((long)31l, (long)135l)))));
    }

}
"
HumanEval_105,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / ""Akan"", ""Afa"", ""Afa"", ""Anan"", ""Afa"", ""Afa asia"", ""Afa nson"", ""Afa nwɔtwe"", ""Afa akron"".     / yɛ nsunsuanso no mu nsunsuanso no mu nsunsuanso no mu nsunsuanso no, na afei fa din a ɛne no hyia no si ananmu wɔ     / Sɛ wode anokwafo a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm wɔ anohyetofo bi a wɔaka wɔn ho asɛm no mu no adi a,    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))
    // (new ArrayList<String>(Arrays.asList((String)""Eight"", (String)""Five"", (String)""Four"", (String)""Three"", (String)""Two"", (String)""Two"", (String)""One"", (String)""One"")))
    // If the array array list is empty, return an empty array array list:
    // >>> byLength((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<String>(Arrays.asList()))
    // If the array array list has any strange number ignore it:
    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))
    // (new ArrayList<String>(Arrays.asList((String)""One"")))
    public static ArrayList<String> byLength(ArrayList<Long> arr) {
","import java.util.*;

public class Problem {
    public static ArrayList<String> byLength(ArrayList<Long> arr) {
        List<String> names = Arrays.asList("""", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"");
        ArrayList<Long> filtered = new ArrayList<>();

        // Filter the numbers between 1 and 9
        for (Long num : arr) {
            if (num >= 1 && num <= 9) {
                filtered.add(num);
            }
        }

        // Sort the filtered numbers
        Collections.sort(filtered);

        // Reverse the sorted list
        Collections.reverse(filtered);

        // Replace each number with its corresponding name
        ArrayList<String> result = new ArrayList<>();
        for (Long num : filtered) {
            result.add(names.get(num.intValue()));
        }

        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l)))).equals((new ArrayList<String>(Arrays.asList((String)""Eight"", (String)""Five"", (String)""Four"", (String)""Three"", (String)""Two"", (String)""Two"", (String)""One"", (String)""One"")))));
    assert(byLength((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));
    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l)))).equals((new ArrayList<String>(Arrays.asList((String)""One"")))));
    assert(byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)3l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)""Three"", (String)""Two"", (String)""One"")))));
    assert(byLength((new ArrayList<Long>(Arrays.asList((long)9l, (long)4l, (long)8l)))).equals((new ArrayList<String>(Arrays.asList((String)""Nine"", (String)""Eight"", (String)""Four"")))));
    }

}
"
HumanEval_106,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / i mu nsensan yɛ 1 kɔsi i mu nsensan no mmɔho (1 * 2 * ... * i).     / i fi ase fi 1.     / anaa nea ɛboro 1 kosi i so.     / na ɛde array array list a ne kɛse yɛ n, a ne de no ne ne ne mu a ɛkorɔn a ɛwɔ index i mu no yɛ factor of i sɛ i yɛ mpo     / Yɛ adwuma a f yɛ a fa n yɛ parameter,     // >>> f((5l))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))
    public static ArrayList<Long> f(long n) {
","import java.util.ArrayList;

public class Problem {
    public static ArrayList<Long> f(long n) {
        ArrayList<Long> result = new ArrayList<>();
        
        for (long i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                result.add(factorial(i));
            } else {
                result.add(sumUpTo(i));
            }
        }
        
        return result;
    }

    private static long factorial(long num) {
        long result = 1;
        for (long i = 1; i <= num; i++) {
            result *= i;
        }
        return result;
    }

    private static long sumUpTo(long num) {
        return num * (num + 1) / 2;
    }

    public static void main(String[] args) {
        System.out.println(f(5));
    }
}","    }
    public static void main(String[] args) {
    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))));
    assert(f((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l, (long)720l, (long)28l)))));
    assert(f((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));
    assert(f((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l)))));
    }

}
"
HumanEval_107,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso 1:     / integer palindromes a ɛwɔ ɔbra no mu (a wɔaka ho)    / Sɛ wɔde adansedie a ɛyɛ pɛ n ma a, ma yɛmfa nsɛsoɔ a ɛboro so ne nea ɛnsɛ     // >>> evenOddPalindrome((3l))
    // (Pair.with(1l, 2l))
    // Explanation:
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
    // Example 2:
    // >>> evenOddPalindrome((12l))
    // (Pair.with(4l, 6l))
    // Explanation:
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
    // Note:
    // 1. 1 <= n <= 10^3
    // 2. returned pair has the number of even and odd integer palindromes respectively.
    public static Pair<Long, Long> evenOddPalindrome(long n) {
","import org.javatuples.Pair;

public class Problem {
    public static Pair<Long, Long> evenOddPalindrome(long n) {
        long evenCount = 0;
        long oddCount = 0;
        
        for (long i = 1; i <= n; i++) {
            if (isPalindrome(i)) {
                if (i % 2 == 0) {
                    evenCount++;
                } else {
                    oddCount++;
                }
            }
        }
        
        return Pair.with(evenCount, oddCount);
    }
    
    private static boolean isPalindrome(long number) {
        long original = number;
        long reversed = 0;
        
        while (number > 0) {
            long digit = number % 10;
            reversed = reversed * 10 + digit;
            number /= 10;
        }
        
        return original == reversed;
    }

    public static void main(String[] args) {
        System.out.println(evenOddPalindrome(3));  // Output: (Pair.with(1l, 2l))
        System.out.println(evenOddPalindrome(12)); // Output: (Pair.with(4l, 6l))
    }
}","    }
    public static void main(String[] args) {
    assert(evenOddPalindrome((123l)).equals((Pair.with(8l, 13l))));
    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));
    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));
    assert(evenOddPalindrome((63l)).equals((Pair.with(6l, 8l))));
    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));
    assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));
    assert(evenOddPalindrome((9l)).equals((Pair.with(4l, 5l))));
    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));
    }

}
"
HumanEval_108,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    Sɛ nhwɛso no, -123 wɔ nkyerɛwde -1, 2, ne 3.    / Sɛ ɛboɔ bi yɛ negative a, ɛnneɛ ne nkyerɛwde a edi kan bɛyɛ negative:     / nneɛma dodow a ne dodow yɛ > 0 no.     / Kyerɛw adwuma count_nums a ɛfa integers a ɛwɔ array list na ɛde     // >>> countNums((new ArrayList<Long>(Arrays.asList())))
    // (0l)
    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))
    // (1l)
    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))
    // (3l)
    public static long countNums(ArrayList<Long> arr) {
","public static long countNums(ArrayList<Long> arr) {
        return arr.stream().filter(num -> {
            long sumOfDigits = 0;
            long n = Math.abs(num);
            while (n > 0) {
                sumOfDigits += n % 10;
                n /= 10;
            }
            return (num < 0 ? sumOfDigits - 2 * (num % 10) : sumOfDigits) > 0;
        }).count();
    }

    public static void main(String[] args) {
        ArrayList<Long> inputs1 = new ArrayList<Long>(Arrays.asList());
        ArrayList<Long> inputs2 = new ArrayList<Long>(Arrays.asList(-1L, 11L, -11L));
        ArrayList<Long> inputs3 = new ArrayList<Long>(Arrays.asList(1L, 1L, 2L));

        System.out.println(countNums(inputs1)); // Output: 0
        System.out.println(countNums(inputs2)); // Output: 1
        System.out.println(countNums(inputs3)); // Output: 3
    }
}","    }
    public static void main(String[] args) {
    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));
    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));
    }

}
"
HumanEval_109,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Hyɛ no nsow: Wɔama ahwehwɛ a wɔama no no anya nneɛma a edi mũ.    / Sɛ nea wɔde ama no yɛ list a ɛnni hɔ a, na wɔsan de true.     / na san kɔ true anaa san kɔ false.     / Sɛ ɛtumi yɛ nea yɛaka wɔ atifi hɔ no a, yɛ bɛtumi anya ahosiesie ahosiesie no     / mfitiase gyinabea wɔ ɔfã no mu, kyerɛ sɛ 0 a ɛwowɔ no.     / gyinabea wɔ ɔkwan pa so. Nnyinaso a etwa to wɔ array no mu no bɛsan akɔ     / Sɛ wode ade baako pɛ si nea ɛwɔ array no so a, ɛkyerɛ sɛ wode baako pɛ asi nea ɛwɔ array no so no nyinaa so.    Wubetumi ayɛ adwuma a ɛne sɛ wobɛdan akɔ benkum mpɛn dodow biara a wopɛ.    / adwuma a edi so wɔ ɔfã a wɔde ama no:     / ɛyɛ a wobɛtumi anya array array list a wɔasiesie no wɔ ne ntetemu a ɛnnkekae mu denam a wobɛyɛ     / a ɛwɔ ɔfã a wɔato din array list no mu no bɛhyɛ hɔ a wɔankɔfa ɔkwan biara so. Wo adwuma ne sɛ wobɛkyerɛ sɛ     / Yɛwɔ ɔmoɔ a ɔmoɔ din 'arr' a ɛgyina hɔ ma N integers arr[1], arr[2], ..., arr[N].    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))
    // (true)
    // Explanation: By performin 2 right shift operations, non-decreasing order can
    // be achieved for the given array array list.
    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))
    // (false)
    // Explanation:It is not possible to get non-decreasing order for the given
    // array array list by performing any number of right shift operations.
    public static boolean moveOneBall(ArrayList<Long> arr) {
","import java.util.ArrayList;
import java.util.Collections;

class Problem {
    public static boolean moveOneBall(ArrayList<Long> arr) {
        if (arr.isEmpty()) {
            return true;
        }
        
        int n = arr.size();
        
        // Find the number of increasing points
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (arr.get(i) < arr.get(i - 1)) {
                count++;
            }
        }
        
        // Check the end and start to be a breaking point
        if (arr.get(n - 1) > arr.get(0)) {
            count++;
        }
        
        // If there is at most one such transition, it can be rotated
        return count <= 1;
    }
}","    }
    public static void main(String[] args) {
    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l)))) == (true));
    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)10l, (long)1l, (long)2l)))) == (true));
    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)1l, (long)2l)))) == (false));
    assert(moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l)))) == (false));
    assert(moveOneBall((new ArrayList<Long>(Arrays.asList()))) == (true));
    }

}
"
HumanEval_110,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Sɛ ɛnte saa a, dan ""Dabi"" ma no.     / sɛ lst1 mu nneɛma nyinaa yɛ pɛ a, dan ""YES""    / Sɛ ebetumi ayɛ yiye sɛ wɔbɛsesa nneɛma a ɛwɔ lst1 ne lst2 ntam ma ayɛ     / Nkyɛn nea wobetumi de nneɛma a ɛwɔ lst1 ne lst2 mu no dodow.     / ne wɔn ntam ma lst1 yɛ ɔfã ɔfã a ɛbobɔ mpɛtɛw din.     / na ɛkyerɛ sɛ ebia wobetumi de nneɛma no asesa     / Wɔ saa haw yi mu no, wobɛfa adwuma bi a ɛfa nnipakan a ɛwɔ din ahorow mu,     // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))
    // (""YES"")
    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))
    // (""NO"")
    // It is assumed that the input array lists will be non-empty.
    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {
        // Check if all elements in lst1 are already even
        boolean allEvenInLst1 = lst1.stream().allMatch(num -> num % 2 == 0);
        if (allEvenInLst1) {
            return ""YES"";
        }

        // Check if there is at least one even number in lst2
        boolean hasEvenInLst2 = lst2.stream().anyMatch(num -> num % 2 == 0);
        if (hasEvenInLst2) {
            return ""YES"";
        } else {
            return ""NO"";
        }
    }

    public static void main(String[] args) {
        ArrayList<Long> lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));
        ArrayList<Long> lst2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));
        System.out.println(exchange(lst1, lst2));  // Output: ""YES""

        lst1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L));
        lst2 = new ArrayList<>(Arrays.asList(1L, 5L, 3L, 4L));
        System.out.println(exchange(lst1, lst2));  // Output: ""NO""
    }
}","    }
    public static void main(String[] args) {
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((""YES"")));
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l)))).equals((""NO"")));
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l)))).equals((""YES"")));
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l)))).equals((""YES"")));
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l)))).equals((""NO"")));
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)6l, (long)1l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)5l, (long)1l, (long)1l, (long)1l)))).equals((""NO"")));
    assert(exchange((new ArrayList<Long>(Arrays.asList((long)100l, (long)200l))), (new ArrayList<Long>(Arrays.asList((long)200l, (long)200l)))).equals((""YES"")));
    }

}
"
HumanEval_111,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     Sɛ nsɛmfua pii wɔ hɔ a, fa wɔn nyinaa ma wɔn.    / a ɛwɔ nkyerɛwde a wɔaka ho asɛm mpɛn pii na emu dodow yɛ dodow no ara no.     / Sɛ wɔde ahama a ɛkyerɛ nsensan a wɔtetew mu a, ma hash map     // >>> histogram((""a b c""))
    // (new HashMap<String,Long>(Map.of(""a"", 1l, ""b"", 1l, ""c"", 1l)))
    // >>> histogram((""a b b a""))
    // (new HashMap<String,Long>(Map.of(""a"", 2l, ""b"", 2l)))
    // >>> histogram((""a b c a b""))
    // (new HashMap<String,Long>(Map.of(""a"", 2l, ""b"", 2l)))
    // >>> histogram((""b b b b a""))
    // (new HashMap<String,Long>(Map.of(""b"", 4l)))
    // >>> histogram((""""))
    // (new HashMap<String,Long>())
    public static HashMap<String,Long> histogram(String test) {
","import java.util.HashMap;

class Problem {
    public static HashMap<String, Long> histogram(String test) {
        HashMap<String, Long> countMap = new HashMap<>();
        
        if(test == null || test.isEmpty()) {
            return countMap;
        }
        
        String[] letters = test.split(""\\s+"");
        
        long maxCount = 0;
        
        for(String letter : letters) {
            countMap.put(letter, countMap.getOrDefault(letter, 0L) + 1);
            maxCount = Math.max(maxCount, countMap.get(letter));
        }
        
        HashMap<String, Long> result = new HashMap<>();
        
        for(Map.Entry<String, Long> entry : countMap.entrySet()) {
            if(entry.getValue() == maxCount) {
                result.put(entry.getKey(), entry.getValue());
            }
        }
        
        return result;
    }
}","    }
    public static void main(String[] args) {
    assert(histogram((""a b b a"")).equals((new HashMap<String,Long>(Map.of(""a"", 2l, ""b"", 2l)))));
    assert(histogram((""a b c a b"")).equals((new HashMap<String,Long>(Map.of(""a"", 2l, ""b"", 2l)))));
    assert(histogram((""a b c d g"")).equals((new HashMap<String,Long>(Map.of(""a"", 1l, ""b"", 1l, ""c"", 1l, ""d"", 1l, ""g"", 1l)))));
    assert(histogram((""r t g"")).equals((new HashMap<String,Long>(Map.of(""r"", 1l, ""t"", 1l, ""g"", 1l)))));
    assert(histogram((""b b b b a"")).equals((new HashMap<String,Long>(Map.of(""b"", 4l)))));
    assert(histogram((""r t g"")).equals((new HashMap<String,Long>(Map.of(""r"", 1l, ""t"", 1l, ""g"", 1l)))));
    assert(histogram(("""")).equals((new HashMap<String,Long>())));
    assert(histogram((""a"")).equals((new HashMap<String,Long>(Map.of(""a"", 1l)))));
    }

}
"
HumanEval_112,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso     / Ɛsɛ sɛ wosan de nsunsuanso a ɛwɔ mu ne true/false ma sɔ hwɛ.     / Sɛ wɔkenkan ahama bi a ɛwɔ anim ne nea ɛwɔ akyi no pɛ a, wɔfrɛ no palindrome.     / afei hwɛ sɛ nea efi mu ba no yɛ palindrome.     / Wɔama yɛn nnwoma abien s ne c, ɛsɛ sɛ wuyi nkyerɛwde a ɛwɔ s mu a ɛne nkyerɛwde biara a ɛwɔ c yɛ pɛ no nyinaa.    / Adwuma     // >>> reverseDelete((""abcde""), (""ae""))
    // (Pair.with(""bcd"", false))
    // >>> reverseDelete((""abcdef""), (""b""))
    // (Pair.with(""acdef"", false))
    // >>> reverseDelete((""abcdedcba""), (""ab""))
    // (Pair.with(""cdedc"", true))
    public static Pair<String, Boolean> reverseDelete(String s, String c) {
","import org.javatuples.Pair;

public class Problem {

    public static Pair<String, Boolean> reverseDelete(String s, String c) {
        Set<Character> charsToDelete = new HashSet<>();
        for (char ch : c.toCharArray()) {
            charsToDelete.add(ch);
        }
        
        StringBuilder filteredString = new StringBuilder();
        for (char ch : s.toCharArray()) {
            if (!charsToDelete.contains(ch)) {
                filteredString.append(ch);
            }
        }
        
        String resultString = filteredString.toString();
        boolean isPalindrome = isPalindrome(resultString);
        
        return Pair.with(resultString, isPalindrome);
    }

    private static boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(reverseDelete((""abcde""), (""ae"")).equals((Pair.with(""bcd"", false))));
    assert(reverseDelete((""abcdef""), (""b"")).equals((Pair.with(""acdef"", false))));
    assert(reverseDelete((""abcdedcba""), (""ab"")).equals((Pair.with(""cdedc"", true))));
    assert(reverseDelete((""dwik""), (""w"")).equals((Pair.with(""dik"", false))));
    assert(reverseDelete((""a""), (""a"")).equals((Pair.with("""", true))));
    assert(reverseDelete((""abcdedcba""), ("""")).equals((Pair.with(""abcdedcba"", true))));
    assert(reverseDelete((""abcdedcba""), (""v"")).equals((Pair.with(""abcdedcba"", true))));
    assert(reverseDelete((""vabba""), (""v"")).equals((Pair.with(""abba"", true))));
    assert(reverseDelete((""mamma""), (""mia"")).equals((Pair.with("""", true))));
    }

}
"
HumanEval_113,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / a ɛwɔ ntini a ɛnnyɛ pɛ mu wɔ nea wɔde aba no mu.     / string i of the input. "" baabi a ɛsɛ sɛ wɔde nɔma  si ananmu wɔ i nyinaa so.    / Ɛsɛ sɛ nea wɔde fi mu biara yɛ ""nkyekyem a ɛyɛ soronko wɔ nea wɔde fi mu no mu""    / Sɛ wɔde ahama a wɔato din array array list, a ahama biara wɔ hɔ a, ɛsan kyerɛ sɛ ɛyɛ array array list.    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)""1234567""))))
    // (new ArrayList<String>(Arrays.asList((String)""the number of odd elements 4n the str4ng 4 of the 4nput."")))
    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)""3"", (String)""11111111""))))
    // (new ArrayList<String>(Arrays.asList((String)""the number of odd elements 1n the str1ng 1 of the 1nput."", (String)""the number of odd elements 8n the str8ng 8 of the 8nput."")))
    public static ArrayList<String> oddCount(ArrayList<String> lst) {
","import java.util.*;

class Problem {
    public static ArrayList<String> oddCount(ArrayList<String> lst) {
        ArrayList<String> result = new ArrayList<>();

        for (String s : lst) {
            int oddCount = 0;
            for (char c : s.toCharArray()) {
                if (Character.isDigit(c)) {
                    int digit = c - '0';
                    if (digit % 2 != 0) {
                        oddCount++;
                    }
                }
            }

            String output = ""the number of odd elements "" + oddCount +
                            ""n the str"" + oddCount + ""ng "" + oddCount + "" of the "" + oddCount + ""nput."";
            result.add(output);
        }

        return result;
    }
    
    public static void main(String[] args) {
        ArrayList<String> input1 = new ArrayList<String>(Arrays.asList(""1234567""));
        ArrayList<String> result1 = oddCount(input1);
        System.out.println(result1);

        ArrayList<String> input2 = new ArrayList<String>(Arrays.asList(""3"", ""11111111""));
        ArrayList<String> result2 = oddCount(input2);
        System.out.println(result2);
    }
}","    }
    public static void main(String[] args) {
    assert(oddCount((new ArrayList<String>(Arrays.asList((String)""1234567"")))).equals((new ArrayList<String>(Arrays.asList((String)""the number of odd elements 4n the str4ng 4 of the 4nput."")))));
    assert(oddCount((new ArrayList<String>(Arrays.asList((String)""3"", (String)""11111111"")))).equals((new ArrayList<String>(Arrays.asList((String)""the number of odd elements 1n the str1ng 1 of the 1nput."", (String)""the number of odd elements 8n the str8ng 8 of the 8nput."")))));
    assert(oddCount((new ArrayList<String>(Arrays.asList((String)""271"", (String)""137"", (String)""314"")))).equals((new ArrayList<String>(Arrays.asList((String)""the number of odd elements 2n the str2ng 2 of the 2nput."", (String)""the number of odd elements 3n the str3ng 3 of the 3nput."", (String)""the number of odd elements 2n the str2ng 2 of the 2nput."")))));
    }

}
"
HumanEval_114,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso     / a wɔaka ho asɛm.     / Sɛ wode anohyetoɔ a wɔama no wɔ anohyetoɔ a wɔama no wɔ anohyetoɔ a wɔama no wɔ anohyetoɔ a wɔama no wɔ anohyetoɔ a wɔnhyɛ no mu no nyinaa kabea a ɛtra ase no yɛ nea ɛtra ase a ɛtra ase no     // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))
    // (1l)
    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))
    // (-6l)
    public static long minSubArraySum(ArrayList<Long> nums) {
","import java.util.*;

public class Problem {
    public static long minSubArraySum(ArrayList<Long> nums) {
        if (nums == null || nums.isEmpty()) {
            throw new IllegalArgumentException(""The input list cannot be null or empty"");
        }

        long minSum = Long.MAX_VALUE;
        long currentSum = 0;

        for (Long num : nums) {
            currentSum = Math.min(currentSum + num, num);
            minSum = Math.min(minSum, currentSum);
        }

        return minSum;
    }

    public static void main(String[] args) {
        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(2L, 3L, 4L, 1L, 2L, 4L))));
        System.out.println(minSubArraySum(new ArrayList<Long>(Arrays.asList(-1L, -2L, -3L))));
    }
}","    }
    public static void main(String[] args) {
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l, (long)20l, (long)1000000l)))) == (0l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l, (long)-2l)))) == (-33l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l)))) == (-10l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l)))) == (7l));
    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l)))) == (-1l));
    }

}
"
HumanEval_115,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso 1:     / Fa mpɛn dodow a ehia sɛ wotwe nkotoku no gu fam no to hɔ.     / Wo adwuma ne sɛ wode nkotoku no bɛpra ahina no mu.     / na nkɛntɛn no nyinaa tumi yɛ pɛ.     / Abo biara wɔ bokiti a wɔde fa nsu a ɛwɔ mu,     / na 1 biara a ɛwɔ ɔfã biara mu no gyina hɔ ma nsu biako pɛ.     Wode abura ahorow a ɛwɔ ntentenso a ɛbom biako no na ɛbɛkyerɛ wo.    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))
    // (6l)
    // Example 2:
    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))
    // (5l)
    // Example 3:
    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))
    // (0l)
    // Constraints:
    // * all wells have the same length
    // * 1 <= grid.length <= 10^2
    // * 1 <= grid[:,1].length <= 10^2
    // * grid[i][j] -> 0 | 1
    // * 1 <= capacity <= 10
    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {
        long totalWater = 0;
        
        for (ArrayList<Long> row : grid) {
            for (Long cell : row) {
                totalWater += cell;
            }
        }

        return (long)Math.ceil((double)totalWater / capacity);
    }

    public static void main(String[] args) {
        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 0L)),
            new ArrayList<>(Arrays.asList(0L, 1L, 0L, 0L)),
            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L))
        ));
        System.out.println(maxFill(grid1, 1L)); // Output: 6

        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0L, 0L, 1L, 1L)),
            new ArrayList<>(Arrays.asList(0L, 0L, 0L, 0L)),
            new ArrayList<>(Arrays.asList(1L, 1L, 1L, 1L)),
            new ArrayList<>(Arrays.asList(0L, 1L, 1L, 1L))
        ));
        System.out.println(maxFill(grid2, 2L)); // Output: 5

        ArrayList<ArrayList<Long>> grid3 = new ArrayList<>(Arrays.asList(
            new ArrayList<>(Arrays.asList(0L, 0L, 0L)),
            new ArrayList<>(Arrays.asList(0L, 0L, 0L))
        ));
        System.out.println(maxFill(grid3, 5L)); // Output: 0
    }
}","    }
    public static void main(String[] args) {
    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));
    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l)) == (5l));
    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));
    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l)) == (4l));
    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l)) == (2l));
    }

}
"
HumanEval_116,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Ɛsɛ sɛ wɔde di dwuma saa kwan yi so:     / Sɛ nnipa a wɔn dodow yɛ pɛ a, fa ɔpepepem mu a wɔtwe no no so toto.     / dodow a emu biara yɛ biako wɔ ne nkyekyɛm a ɛsen biara mu.     / Wɔ saa Kata yi mu no, ɛsɛ sɛ wo hwehwɛ ntini a ɛnyɛ negative integers wɔ so, sɛnea     // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))
    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))
    // (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))
    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))
    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {
","import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

class Problem {

    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {
        Collections.sort(arr, (a, b) -> {
            int countOnesA = Long.bitCount(a);
            int countOnesB = Long.bitCount(b);
            
            if (countOnesA != countOnesB) {
                return countOnesA - countOnesB;
            } else {
                return a.compareTo(b);
            }
        });
        return arr;
    }
    
    public static void main(String[] args) {
        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 5L, 2L, 3L, 4L))));
        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(-2L, -3L, -4L, -5L, -6L))));
        System.out.println(sortArray(new ArrayList<Long>(Arrays.asList(1L, 0L, 2L, 3L, 4L))));
    }
}","    }
    public static void main(String[] args) {
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));
    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));
    }

}
"
HumanEval_117,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Hyɛ no nsow: wubetumi aka sɛ nkyerɛwde ne ntweaa nkutoo na ɛwɔ input string no mu.     / Sɛ string s yɛ empty a, ɛnde ɛsɛ sɛ adwuma no san ma yɛhu sɛ array list no yɛ empty.     / n ɛnne nkyerɛwde, sɛnea nsɛmfua yi bɛtra so wɔ s mu.     / yɛ adwuma a ɛde nsɛmfua a ɛwɔ ahoma s mu a emu biara wɔ  pɛpɛɛpɛ ma no kɔ ahoma a wɔabɔ din no mu.    / Sɛ wɔde string s ne natural number n ma wo a, wɔde adwuma ahyɛ wo nsa sɛ yɛ     // >>> selectWords((""Mary had a little lamb""), (4l))
    // (new ArrayList<String>(Arrays.asList((String)""little"")))
    // >>> selectWords((""Mary had a little lamb""), (3l))
    // (new ArrayList<String>(Arrays.asList((String)""Mary"", (String)""lamb"")))
    // >>> selectWords((""simple white space""), (2l))
    // (new ArrayList<String>(Arrays.asList()))
    // >>> selectWords((""Hello world""), (4l))
    // (new ArrayList<String>(Arrays.asList((String)""world"")))
    // >>> selectWords((""Uncle sam""), (3l))
    // (new ArrayList<String>(Arrays.asList((String)""Uncle"")))
    public static ArrayList<String> selectWords(String s, long n) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static ArrayList<String> selectWords(String s, long n) {
        ArrayList<String> result = new ArrayList<>();
        if (s == null || s.isEmpty()) {
            return result;
        }
        
        String[] words = s.split("" "");
        for (String word : words) {
            long consonantCount = countConsonants(word);
            if (consonantCount == n) {
                result.add(word);
            }
        }
        
        return result;
    }
    
    private static long countConsonants(String word) {
        long count = 0;
        for (char c : word.toCharArray()) {
            if (isConsonant(c)) {
                count++;
            }
        }
        return count;
    }
    
    private static boolean isConsonant(char c) {
        c = Character.toLowerCase(c);
        return ""bcdfghjklmnpqrstvwxyz"".indexOf(c) != -1;
    }
}","    }
    public static void main(String[] args) {
    assert(selectWords((""Mary had a little lamb""), (4l)).equals((new ArrayList<String>(Arrays.asList((String)""little"")))));
    assert(selectWords((""Mary had a little lamb""), (3l)).equals((new ArrayList<String>(Arrays.asList((String)""Mary"", (String)""lamb"")))));
    assert(selectWords((""simple white space""), (2l)).equals((new ArrayList<String>(Arrays.asList()))));
    assert(selectWords((""Hello world""), (4l)).equals((new ArrayList<String>(Arrays.asList((String)""world"")))));
    assert(selectWords((""Uncle sam""), (3l)).equals((new ArrayList<String>(Arrays.asList((String)""Uncle"")))));
    assert(selectWords((""""), (4l)).equals((new ArrayList<String>(Arrays.asList()))));
    assert(selectWords((""a b c d e f""), (1l)).equals((new ArrayList<String>(Arrays.asList((String)""b"", (String)""c"", (String)""d"", (String)""f"")))));
    }

}
"
HumanEval_118,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / Wubetumi aka sɛ nkyerɛwde a wɔde ama no yɛ Borɔfo nkyerɛwde nkutoo.     / hu ɛnne biara a ɛfata wɔ asɛm a ɛwɔ atifi hɔ no mu.     / Vowels a ɛwɔ mfitiase ne awiei no nka ho. Sɛ woanyɛ saa a, dan string hunu.    / ɛnne nkyerɛwde abien fi asɛm no nifa so (sɛ wɔtwe asɛmfua no mu biara to hɔ).     / Wɔama wo asɛmfua bi. Wo adwuma ne sɛ wubenya ɛnne nkyerɛwde a ɛbɛn no paa a ɛda     // >>> getClosestVowel((""yogurt""))
    // (""u"")
    // >>> getClosestVowel((""FULL""))
    // (""U"")
    // >>> getClosestVowel((""quick""))
    // ("""")
    // >>> getClosestVowel((""ab""))
    // ("""")
    public static String getClosestVowel(String word) {
","public static String getClosestVowel(String word) {
    String vowels = ""AEIOUaeiou"";
    int len = word.length();
    if (len < 3) {
        return """";
    }
    
    for (int i = len - 2; i > 0; i--) {
        char currentChar = word.charAt(i);
        if (vowels.indexOf(currentChar) != -1) {
            char prevChar = word.charAt(i - 1);
            char nextChar = word.charAt(i + 1);
            if (vowels.indexOf(prevChar) == -1 && vowels.indexOf(nextChar) == -1) {
                return String.valueOf(currentChar);
            }
        }
    }
    
    return """";
}","    }
    public static void main(String[] args) {
    assert(getClosestVowel((""yogurt"")).equals((""u"")));
    assert(getClosestVowel((""full"")).equals((""u"")));
    assert(getClosestVowel((""easy"")).equals(("""")));
    assert(getClosestVowel((""eAsy"")).equals(("""")));
    assert(getClosestVowel((""ali"")).equals(("""")));
    assert(getClosestVowel((""bad"")).equals((""a"")));
    assert(getClosestVowel((""most"")).equals((""o"")));
    assert(getClosestVowel((""ab"")).equals(("""")));
    assert(getClosestVowel((""ba"")).equals(("""")));
    assert(getClosestVowel((""quick"")).equals(("""")));
    assert(getClosestVowel((""anime"")).equals((""i"")));
    assert(getClosestVowel((""Asia"")).equals(("""")));
    assert(getClosestVowel((""Above"")).equals((""o"")));
    }

}
"
HumanEval_119,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Sɛ ɔkwan bi wɔ hɔ a yɛbɛfa so ayɛ string pa a yɛ de 'Yiw' na ɛbɛba, na sɛ ɛnte saa a yɛ de 'Dabi' na ɛbɛba.     / ""()) "" nyɛ saa.     / yɛ pɛ. Sɛ nhwɛso: ɔkyere '(()))) yɛ papa, bere a ɔkyere     / Sɛ na S yɛ ɔfa a, na ɛyɛ papa sɛ ne ntini nyinaa wɔ S mu     / sɛ ɛbɛyɛ yiye a, nea ebefi mu aba no bɛyɛ papa.     Wo adwuma ne sɛ wobɛhwɛ sɛ wubetumi de nnua abien no abom anaa.    / ntweaa mu "" (("" anaa ntweaa a etwa to "") "" nkutoo.     / Wɔama wo array array list a ɛwɔ ahama mmienu, ahama mmienu no nyinaa wɔ open     // >>> matchParens((new ArrayList<String>(Arrays.asList((String)""()("", (String)"")""))))
    // (""Yes"")
    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)"")"", (String)"")""))))
    // (""No"")
    public static String matchParens(ArrayList<String> lst) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static String matchParens(ArrayList<String> lst) {
        String s1 = lst.get(0);
        String s2 = lst.get(1);

        // Check s1 + s2
        if (isBalanced(s1 + s2)) {
            return ""Yes"";
        }

        // Check s2 + s1
        if (isBalanced(s2 + s1)) {
            return ""Yes"";
        }

        // None are balanced
        return ""No"";
    }
    
    private static boolean isBalanced(String str) {
        int balance = 0;
        for (char c : str.toCharArray()) {
            if (c == '(') {
                balance++;
            } else if (c == ')') {
                balance--;
            }
            if (balance < 0) { 
                return false; 
            }
        }
        return balance == 0;
    }

    public static void main(String[] args) {
        ArrayList<String> test1 = new ArrayList<>(Arrays.asList(""()("", "")""));
        System.out.println(matchParens(test1)); // Output: Yes

        ArrayList<String> test2 = new ArrayList<>(Arrays.asList("")"", "")""));
        System.out.println(matchParens(test2)); // Output: No
    }
}","    }
    public static void main(String[] args) {
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""()("", (String)"")"")))).equals((""Yes"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)"")"", (String)"")"")))).equals((""No"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""(()(())"", (String)""())())"")))).equals((""No"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)"")())"", (String)""(()()("")))).equals((""Yes"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""(())))"", (String)""(()())(("")))).equals((""Yes"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""()"", (String)""())"")))).equals((""No"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""(()("", (String)""()))()"")))).equals((""Yes"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""(((("", (String)""((())"")))).equals((""No"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)"")(()"", (String)""(()("")))).equals((""No"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)"")("", (String)"")("")))).equals((""No"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)""("", (String)"")"")))).equals((""Yes"")));
    assert(matchParens((new ArrayList<String>(Arrays.asList((String)"")"", (String)""("")))).equals((""Yes"")));
    }

}
"
HumanEval_120,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso 1:     / a ne tenten yɛ k a emu dodow yɛ k wɔ arr mu.     / Sɛ wɔde anohyetoɔ bi a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ a ɛyɛ anohyetoɔ    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))
    // (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))
    // Example 2:
    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))
    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))
    // Example 3:
    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))
    // (new ArrayList<Long>(Arrays.asList((long)2l)))
    // Note:
    // 1. The length of the array array list will be in the range of [1, 1000].
    // 2. The elements in the array array list will be in the range of [-1000, 1000].
    // 3. 0 <= k <= len(arr)
    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {
","import java.util.ArrayList;
import java.util.Collections;

class Problem {

    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {
        // Sort the array list in descending order
        Collections.sort(arr, Collections.reverseOrder());
        
        // Prepare the result list to store the maximum k elements
        ArrayList<Long> result = new ArrayList<Long>();

        // Add the first k elements to the result list
        for (int i = 0; i < k; i++) {
            result.add(arr.get(i));
        }
        
        // Sort the result in ascending order as per the problem statement
        Collections.sort(result);
        
        return result;
    }

    public static void main(String[] args) {
        // Example 1
        ArrayList<Long> example1 = new ArrayList<Long>();
        Collections.addAll(example1, -3L, -4L, 5L);
        System.out.println(maximum(example1, 3));

        // Example 2
        ArrayList<Long> example2 = new ArrayList<Long>();
        Collections.addAll(example2, 4L, -4L, 4L);
        System.out.println(maximum(example2, 2));

        // Example 3
        ArrayList<Long> example3 = new ArrayList<Long>();
        Collections.addAll(example3, -3L, 2L, 1L, 2L, -1L, -2L, 1L);
        System.out.println(maximum(example3, 1));
    }
}","    }
    public static void main(String[] args) {
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)20l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l, (long)5l, (long)15l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));
    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));
    }

}
"
HumanEval_121,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / Sɛ wɔde integers a ɛnnyɛ hwee a ɛwɔ ɔfã bi a wɔabɔ din no ho nsɛm ma a, ma no nsɛso a ɛwɔ emu biara a ɛwɔ ne baabi a ɛgyina no ho.     // >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))
    // (12l)
    // >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))
    // (9l)
    // >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))
    // (0l)
    public static long solution(ArrayList<Long> lst) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    // Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.
    public static long solution(ArrayList<Long> lst) {
        long sum = 0;
        for (int i = 0; i < lst.size(); i += 2) { // Iterate over even indices (0-based)
            long num = lst.get(i);
            if (num % 2 != 0) { // Check if the element is odd
                sum += num;
            }
        }
        return sum;
    }

    // Test the solution method
    public static void main(String[] args) {
        System.out.println(solution(new ArrayList<>(Arrays.asList(5L, 8L, 7L, 1L)))); // Expected output: 12
        System.out.println(solution(new ArrayList<>(Arrays.asList(3L, 3L, 3L, 3L, 3L)))); // Expected output: 9
        System.out.println(solution(new ArrayList<>(Arrays.asList(30L, 13L, 24L, 321L)))); // Expected output: 0
    }
}","    }
    public static void main(String[] args) {
    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));
    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l)))) == (9l));
    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l)))) == (0l));
    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l)))) == (5l));
    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l)))) == (0l));
    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)23l, (long)32l)))) == (23l));
    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)13l, (long)2l, (long)9l)))) == (3l));
    }

}
"
HumanEval_122,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / ne ne nyinaa a ne dodow yɛ k a edi kan no mu biara a ne din wɔ arr mu no.    / Sɛ wɔde anohyetoɔ a ɛnyɛ hwee ama a, ɔmo a ɛwowɔ akontaahyɛde arr ne akontaahyɛde k, san kɔ     // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))
    // (24l)
    // Constraints:
    // 1. 1 <= len(arr) <= 100
    // 2. 1 <= k <= len(arr)
    public static long addElements(ArrayList<Long> arr, long k) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    public static long addElements(ArrayList<Long> arr, long k) {
        long sum = 0;
        for (int i = 0; i < k; i++) {
            long element = arr.get(i);
            if (element < 100) {
                sum += element;
            }
        }
        return sum;
    }
}","    }
    public static void main(String[] args) {
    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)41l, (long)57l, (long)76l, (long)87l, (long)88l, (long)99l))), (3l)) == (-4l));
    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)121l, (long)3l, (long)4000l, (long)5l, (long)6l))), (2l)) == (0l));
    assert(addElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)3l, (long)90l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (125l));
    assert(addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l)) == (24l));
    assert(addElements((new ArrayList<Long>(Arrays.asList((long)1l))), (1l)) == (1l));
    }

}
"
HumanEval_123,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / get_odd_collatz(5) san ma [1, 5] # Collatz a ɛtoa so wɔ 5 yɛ [5, 16, 8, 4, 2, 1], enti nea ɛtoa so wɔ hɔ no yɛ 1 ne 5 pɛ.     / Sɛ nhwɛso:     / 2. ɔsan de ahwehwɛ din a wɔasiesie no kɔ soro.     / 1. Collatz(1) yɛ [1].     / Hyɛ no nsow:     /term plus 1. Ɛmfa ho sɛ n yɛ dodow sɛn, nea ɛwɔ mu no nyinaa bɛyɛ 1 bere nyinaa.    / a edi kan no. Sɛ edi kan no yɛ anohyeto a, nea edi hɔ no yɛ nea edi kan no mmɔho 3     / a edi kan no te sɛ nea edidi so yi: sɛ nea edi kan no yɛ mpo a, nea edi hɔ no yɛ  no fã    / sɛ: fi ase wɔ akontaahyɛde a ɛyɛ pa biara n. Afei yɛfa  so nya nkyekyɛm biara.    / Collatz nsusuwii no yɛ nsusuwii a ɛwɔ akontaabu mu a ɛfa nea wɔaka ho asɛm ho     / Sɛ wɔde adansedie a ɛyɛ pɛ n ma a, ma no nya ahosiesie a wɔasiesie a ɛwɔ nsɛso a ɛnni ano wɔ collatz mu.     // >>> getOddCollatz((5l))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))
    public static ArrayList<Long> getOddCollatz(long n) {
","import java.util.*;

class Problem {
    public static ArrayList<Long> getOddCollatz(long n) {
        TreeSet<Long> oddNumbers = new TreeSet<>();
        while (n != 1) {
            if (n % 2 == 1) {
                oddNumbers.add(n);
            }
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                n = 3 * n + 1;
            }
        }
        oddNumbers.add(1L); // Adding 1 as it is always included in the sequence
        return new ArrayList<>(oddNumbers);
    }
    
    public static void main(String[] args) {
        System.out.println(getOddCollatz(5)); // Example usage
    }
}","    }
    public static void main(String[] args) {
    assert(getOddCollatz((14l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))));
    assert(getOddCollatz((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))));
    assert(getOddCollatz((12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));
    assert(getOddCollatz((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));
    }

}
"
HumanEval_124,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / 4.Ɛsɛ sɛ wɔde da no di dwuma wɔ ɔkwan a edi so yi so: mm-dd-yyyy     / 3. Ɛnsɛ sɛ asram no yɛ kabea biako anaa nea ɛboro saa.    / 2. Nna dodow no nyɛ 1 anaa nea ɛboro 31 nna wɔ bosome 1,3,5,7,8,10,12 mu. Na nna dodow no nyɛ 1 anaa nea ɛboro 30 nna wɔ bosome 4,6,9,11 mu. Na, nna dodow no nyɛ 1 anaa nea ɛboro 29 wɔ bosome 2 mu.    / 1. Nnansa a wɔde ato hɔ no nyɛ hwee.     / Sɛ mmara a edidi so yi nyinaa hyia a, ɛda no yɛ nea ɛfata:     / de nokware ba sɛ da no yɛ nokware a, na sɛ ɛnte saa a ɛyɛ atoro.     / Ɛsɛ sɛ w'akyerɛw adwuma bi a ɛhwehwɛ da bi a wɔde ama no mu na     // >>> validDate((""03-11-2000""))
    // (true)
    // >>> validDate((""15-01-2012""))
    // (false)
    // >>> validDate((""04-0-2040""))
    // (false)
    // >>> validDate((""06-04-2020""))
    // (true)
    // >>> validDate((""06/04/2020""))
    // (false)
    public static boolean validDate(String date) {
","import java.util.*;

class Problem {
    public static boolean validDate(String date) {
        if (date == null || date.isEmpty() || date.length() != 10) {
            return false;
        }

        // Check if format is mm-dd-yyyy
        if (date.charAt(2) != '-' || date.charAt(5) != '-') {
            return false;
        }

        try {
            int month = Integer.parseInt(date.substring(0, 2));
            int day = Integer.parseInt(date.substring(3, 5));
            int year = Integer.parseInt(date.substring(6, 10));
            
            if (month < 1 || month > 12) {
                return false;
            }

            boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
            int[] daysInMonth = {0, 31, (isLeapYear ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
            
            if (day < 1 || day > daysInMonth[month]) {
                return false;
            }
            
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}","    }
    public static void main(String[] args) {
    assert(validDate((""03-11-2000"")) == (true));
    assert(validDate((""15-01-2012"")) == (false));
    assert(validDate((""04-0-2040"")) == (false));
    assert(validDate((""06-04-2020"")) == (true));
    assert(validDate((""01-01-2007"")) == (true));
    assert(validDate((""03-32-2011"")) == (false));
    assert(validDate(("""")) == (false));
    assert(validDate((""04-31-3000"")) == (false));
    assert(validDate((""06-06-2005"")) == (true));
    assert(validDate((""21-31-2000"")) == (false));
    assert(validDate((""04-12-2003"")) == (true));
    assert(validDate((""04122003"")) == (false));
    assert(validDate((""20030412"")) == (false));
    assert(validDate((""2003-04"")) == (false));
    assert(validDate((""2003-04-12"")) == (false));
    assert(validDate((""04-2003"")) == (false));
    }

}
"
HumanEval_126,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / number, return false. Gye tom sɛ annyɛ negative numbers na integers nko ara.     Sɛ array list wɔ nea ɛboro 1 a, nea edi kan no ara na ɛwɔ hɔ.    / Sɛ wɔama wo din a ɛwɔ din a wɔato din din no mu a, kyerɛ sɛ wɔasiesie no anaa wɔasiesie no anaa wɔansiesie no.    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))
    // (false)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))
    // (false)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))
    // (false)
    public static boolean isSorted(ArrayList<Long> lst) {
","public static boolean isSorted(ArrayList<Long> lst) {
        if (lst == null || lst.size() <= 1) {
            return true;
        }
        int duplicateCount = 0;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) < lst.get(i - 1)) {
                return false;
            }
            if (lst.get(i).equals(lst.get(i - 1))) {
                duplicateCount++;
                if (duplicateCount > 1) {
                    return false;
                }
            } else {
                duplicateCount = 0;
            }
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));
    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l)))) == (false));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));
    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (true));
    }

}
"
HumanEval_127,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / [nfidie a wɔde kɔ mu/nfidie a wɔde kɔ mu]    / Sɛ ntenten abien no nhyia a, dan ""NO""    / anyɛ saa a, fa ""Dabi"" ma.     / Sɛ ntweaseɛ no tenten yɛ ɔkan a, dan ""YES"",     / a ne tenten yɛ 1, a ɛnyɛ prime number.     / Nhwɛso, ntenten a ɛtwa (1, 3), (2, 4) no yɛ (2, 3)     / bere a emu yɛ pɛ.     / Wo adwuma ne sɛ wobɛhu sɛ saa nneɛma abien yi ntam kwan tenten no yɛ     / Sɛ wɔhwɛ bere a wɔde hyɛ da biara a, wogye di sɛ ne mfiase yɛ ketewa anaa ne awiei yɛ pɛ.     / a mfiase ne awiei nyinaa ka ho.     / Bere a wɔhyɛ no no yɛ nea wɔato mu, kyerɛ sɛ bere a wɔhyɛ no (fiase, awiei)     / baabi a ntemmu biara yɛ anokwafo abien. Sɛ nhwɛso, ntemmu = (fiase, awiei) = (1, 2).    / Wɔama wo bere abien,     // >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))
    // (""NO"")
    // >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))
    // (""NO"")
    // >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l)))
    // (""YES"")
    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {
","import org.javatuples.Pair;

public class Problem {
    public static String intersection(Pair<Long, Long> interval1, Pair<Long, Long> interval2) {
        long start1 = interval1.getValue0();
        long end1 = interval1.getValue1();
        long start2 = interval2.getValue0();
        long end2 = interval2.getValue1();

        long startIntersection = Math.max(start1, start2);
        long endIntersection = Math.min(end1, end2);

        if (startIntersection > endIntersection) {
            return ""NO"";
        }

        long intersectionLength = endIntersection - startIntersection;

        if (isPrime(intersectionLength)) {
            return ""YES"";
        } else {
            return ""NO"";
        }
    }

    private static boolean isPrime(long n) {
        if (n <= 1) {
            return false;
        }
        if (n <= 3) {
            return true;
        }
        if (n % 2 == 0 || n % 3 == 0) {
            return false;
        }
        for (long i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(intersection(Pair.with(1L, 2L), Pair.with(2L, 3L))); // ""NO""
        System.out.println(intersection(Pair.with(-1L, 1L), Pair.with(0L, 4L))); // ""NO""
        System.out.println(intersection(Pair.with(-3L, -1L), Pair.with(-5L, 5L))); // ""YES""
    }
}","    }
    public static void main(String[] args) {
    assert(intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l))).equals((""NO"")));
    assert(intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l))).equals((""NO"")));
    assert(intersection((Pair.with(-3l, -1l)), (Pair.with(-5l, 5l))).equals((""YES"")));
    assert(intersection((Pair.with(-2l, 2l)), (Pair.with(-4l, 0l))).equals((""YES"")));
    assert(intersection((Pair.with(-11l, 2l)), (Pair.with(-1l, -1l))).equals((""NO"")));
    assert(intersection((Pair.with(1l, 2l)), (Pair.with(3l, 5l))).equals((""NO"")));
    assert(intersection((Pair.with(1l, 2l)), (Pair.with(1l, 2l))).equals((""NO"")));
    assert(intersection((Pair.with(-2l, -2l)), (Pair.with(-3l, -2l))).equals((""NO"")));
    }

}
"
HumanEval_128,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / Hyɛ no nsow: san ma null ma arr a ɛnni hwee.     / biara wɔ ɔfã a wɔato din array array list no mu, a wɔde 1, -1 anaa 0 gyina hɔ ma no.     / dodow a wɔde ano a wɔaka abom a wɔde nsɛnkyerɛnne nyinaa yɛ     / Wɔama wo ɔmo a ɔmo ahoroɛ a ɔmo ahoroɛ a ɔmo ahoroɛ a ɛmo nyinaa wɔ hɔ na ɛsɛ sɛ wosan de     // >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l))))
    // Optional.of(9l)
    // >>> prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l))))
    // Optional.of(0l)
    // >>> prodSigns((new ArrayList<Long>(Arrays.asList())))
    // Optional.empty()
    public static Optional<Long> prodSigns(ArrayList<Long> arr) {
","import java.util.*;

public class Problem {

    public static Optional<Long> prodSigns(ArrayList<Long> arr) {
        if (arr.isEmpty()) {
            return Optional.empty();
        }

        long sumOfMagnitudes = 0;
        long productOfSigns = 1;

        for (Long num : arr) {
            sumOfMagnitudes += Math.abs(num);
            if (num < 0) {
                productOfSigns *= -1;
            } else if (num == 0) {
                productOfSigns = 0;
            }
        }

        return Optional.of(sumOfMagnitudes * productOfSigns);
    }
    
    public static void main(String[] args) {
        // Test cases
        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(1L, 2L, 2L, -4L)))); // Optional[9]
        System.out.println(prodSigns(new ArrayList<Long>(Arrays.asList(0L, 1L)))); // Optional[0]
        System.out.println(prodSigns(new ArrayList<Long>())); // Optional.empty
    }
}","    }
    public static void main(String[] args) {
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l, (long)-1l, (long)9l)))).equals(Optional.of(20l)));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)1l)))).equals(Optional.of(-4l)));
    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));
    }

}
"
HumanEval_129,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / De nneɛma a ɛwɔ nkwammoaa a ɔkwan a ɛtra so no so no ho din a wɔahyehyɛ no ma.     / Yɛhyɛ no bɔ sɛ mmuae no yɛ soronko.     / w_A[j] = w_B[j].     / saa na lst_A[i] < lst_B[i] na sɛ j biara (1 <= j < i) a yɛwɔ     / sen lst_B, kyerɛ sɛ, wɔ hɔ a, ɛwɔ akontaahyɛde a ɛne i (1 <= i <= k)     / mu (ma yɛfrɛ wɔn lst_A ne lst_B), lst_A yɛ nsɛm asekyerɛ mu nsɛm a ɛnnyɛ den     / sɛ yɛhyehyɛ ntini a wɔahyehyɛ no a, yɛkyerɛ nea ɛwɔ nkwammoaa a A ne B kɔ mu no mu     / Sɛ ɔkwan A (a ne tenten yɛ k) yɛ ketewa sen ɔkwan B (a ne tenten yɛ k) a,     / WUNTUMI nkɔ baabi a wonhu.     / ne nyinaa yɛ soronko).     / Yɛsrɛ wo hyɛ no nsow sɛ kwan a ne tenten yɛ k no kyerɛ sɛ wobɛkɔ nkwammoaa k (ɛnyɛ     / nkwammoaa.     / kyerɛ sɛ, wubetumi akɔ nkwammoaa a wo ne wɔn wɔ ano biako no mu     / fi dan biara mu, na wɔ ɔkwampa biara mu no wubetumi akɔ dan biara a ɛbɛn hɔ mu,     Ɛsɛ sɛ wuhu ɔkwan a ɛware k wɔ grid no mu. Wubetumi afi ase     / inclusive ba pɛnkoro pɛ wɔ nkwammoaa a ɛwɔ grid no mu.     / kratafa biara wɔ ne mu.    / Sɛ wɔde asete bi a ɛwɔ ahinanan ne afã horow a ɛyɛ N (N >= 2) ne akontaahyɛde pa k,     // >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))
    // >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l))
    // (new ArrayList<Long>(Arrays.asList((long)1l)))
    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {
","import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;

class Problem {

    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long k) {
        int n = grid.size();
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        PriorityQueue<Path> pq = new PriorityQueue<>();
        // Start from each cell and try to find the minimum path
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                pq.add(new Path(i, j, k, grid.get(i).get(j)));
            }
        }

        while (!pq.isEmpty()) {
            Path current = pq.poll();
            if (current.k == 1) {
                return current.path;
            }
            for (int dir = 0; dir < 4; dir++) {
                int ni = current.x + dx[dir];
                int nj = current.y + dy[dir];
                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {
                    ArrayList<Long> newPath = new ArrayList<>(current.path);
                    newPath.add(grid.get(ni).get(nj));
                    pq.add(new Path(ni, nj, current.k - 1, newPath));
                }
            }
        }

        return new ArrayList<>();
    }

    static class Path implements Comparable<Path> {
        int x, y;
        long k;
        ArrayList<Long> path;

        Path(int x, int y, long k, long value) {
            this.x = x;
            this.y = y;
            this.k = k;
            this.path = new ArrayList<>();
            this.path.add(value);
        }

        Path(int x, int y, long k, ArrayList<Long> path) {
            this.x = x;
            this.y = y;
            this.k = k;
            this.path = path;
        }

        @Override
        public int compareTo(Path other) {
            for (int i = 0; i < this.path.size(); i++) {
                int comparison = Long.compare(this.path.get(i), other.path.get(i));
                if (comparison != 0) {
                    return comparison;
                }
            }
            return 0;
        }
    }

    public static void main(String[] args) {
        ArrayList<ArrayList<Long>> grid1 = new ArrayList<>();
        grid1.add(new ArrayList<>(Arrays.asList(1L, 2L, 3L)));
        grid1.add(new ArrayList<>(Arrays.asList(4L, 5L, 6L)));
        grid1.add(new ArrayList<>(Arrays.asList(7L, 8L, 9L)));
        System.out.println(minPath(grid1, 3L));

        ArrayList<ArrayList<Long>> grid2 = new ArrayList<>();
        grid2.add(new ArrayList<>(Arrays.asList(5L, 9L, 3L)));
        grid2.add(new ArrayList<>(Arrays.asList(4L, 1L, 6L)));
        grid2.add(new ArrayList<>(Arrays.asList(7L, 8L, 2L)));
        System.out.println(minPath(grid2, 1L));
    }
}","    }
    public static void main(String[] args) {
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l, (long)10l, (long)1l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l, (long)7l, (long)1l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l, (long)1l, (long)5l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));
    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));
    }

}
"
HumanEval_130,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / n + 1 kan Tribonacci a odi hɔ no.     / Wɔama wo akontaahyɛde a ɛnnyɛ negative a ɛne n, ɛsɛ sɛ wosan de a yɛ ɔfã a ɛyɛ ɔfã din a ɛwɔ     / = 2 + 3 + 3 = 8     / tri(3) = tri(2) + tri(1) + tri(4)     / tri(4) = 3     / tri(2) = 1 + (2 / 2) = 2     / Sɛ nhwɛso:     /tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), sɛ n yɛ anohyetofo a.     /tri{n}=1 + n/2, sɛ n yɛ mpo a.     / tri(1) = 3     / Tribonacci akwan a wɔfa so yɛ adwuma no gyina nea edi so yi so:     Nanso, nea nnipa nnim ne Tribonacci a ɔtraa ase wɔ afeha abien a etwaam no mu no.    Obiara nim Fibonacci a wɔto no din no, na wɔasua ho ade kɔɔ akyiri wɔ akontaabufo mu wɔ     // >>> tri((3l))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))
    public static ArrayList<Long> tri(long n) {
","import java.util.ArrayList;
import java.util.Arrays;

public class Problem {
    public static ArrayList<Long> tri(long n) {
        // Return empty list if n is negative
        if (n < 0) {
            return new ArrayList<>();
        }
        
        // Create an ArrayList to store the Tribonacci sequence
        ArrayList<Long> tribonacci = new ArrayList<>();
        
        // Define the base cases
        if (n >= 0) {
            tribonacci.add(1L);  // tri(0)
        }
        if (n >= 1) {
            tribonacci.add(3L);  // tri(1)
        }
        
        // Calculate the values for the sequence from tri(2) to tri(n)
        for (long i = 2; i <= n; i++) {
            if (i % 2 == 0) {
                tribonacci.add(1 + i / 2);
            } else {
                long value = tribonacci.get((int)(i - 1)) 
                           + tribonacci.get((int)(i - 2)) 
                           + tribonacci.get((int)(i + 1 - 2)); // i+1-2 = i-1 (next i is processed)
                tribonacci.add(value);
            }
        }
        
        return tribonacci;
    }
    
    public static void main(String[] args) {
        System.out.println(tri(3)); // Outputs: [1, 3, 2, 8]
    }
}","    }
    public static void main(String[] args) {
    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));
    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l)))));
    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));
    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));
    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));
    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));
    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));
    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l, (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l, (long)10l, (long)120l, (long)11l)))));
    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));
    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));
    }

}
"
HumanEval_131,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / Sɛ nkontabuo no nyinaa yɛ baako a, yɛ 0    / Sɛ wɔde adikanfo a wɔn dodow yɛ n ma a, ma no nsensanee a wɔakyekyere no yɛ anammɔn a ɛnnyɛ pɛ no.     // >>> digits((1l))
    // (1l)
    // >>> digits((4l))
    // (0l)
    // >>> digits((235l))
    // (15l)
    public static long digits(long n) {
","public static long digits(long n) {
        long product = 1;
        boolean hasOddDigit = false;
        
        while (n > 0) {
            long digit = n % 10;
            if (digit % 2 != 0) {
                product *= digit;
                hasOddDigit = true;
            }
            n /= 10;
        }
        
        return hasOddDigit ? product : 0;
    }
}","    }
    public static void main(String[] args) {
    assert(digits((5l)) == (5l));
    assert(digits((54l)) == (5l));
    assert(digits((120l)) == (1l));
    assert(digits((5014l)) == (5l));
    assert(digits((98765l)) == (315l));
    assert(digits((5576543l)) == (2625l));
    assert(digits((2468l)) == (0l));
    }

}
"
HumanEval_132,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / a ɔfa bi wɔ hɔ a, anyɛ yiye koraa no, wɔaka ho.    / Sɛ na brackets no yɛ nea edi mu a, ɛno nko ara na ɛsɛ sɛ function no san true     / Yɛ adwuma bi a ɛgye ntweaa bi a ntweaa a ɛkura ntweaa a ɛtwe ntweaa nko ara.     // >>> isNested((""[[]]""))
    // (true)
    // >>> isNested((""[]]]]]]][[[[[]""))
    // (false)
    // >>> isNested((""[][]""))
    // (false)
    // >>> isNested((""[]""))
    // (false)
    // >>> isNested((""[[][]]""))
    // (true)
    // >>> isNested((""[[]][[""))
    // (true)
    public static boolean isNested(String string) {
","import java.util.*;

class Problem {
    public static boolean isNested(String string) {
        int openCount = 0;
        boolean hasNested = false;
        
        for (char c : string.toCharArray()) {
            if (c == '[') {
                openCount++;
            } else if (c == ']') {
                if (openCount > 0) {
                    openCount--;
                    // If we find a pair and there was an unmatched '[' before this ']'
                    // it means there was nesting.
                    hasNested = true;
                }
                
                if (openCount < 0) {
                    // If at any point we have more closing brackets than opening ones,
                    // it's invalid, so reset openCount.
                    openCount = 0;
                }
            }
        }
        
        return hasNested;
    }

    public static void main(String[] args) {
        System.out.println(isNested(""[[]]"")); // true
        System.out.println(isNested(""[]]]]]]][[[[[]"")); // false
        System.out.println(isNested(""[][]"")); // false
        System.out.println(isNested(""[]"")); // false
        System.out.println(isNested(""[[][]]"")); // true
        System.out.println(isNested(""[[]][["")); // true
    }
}","    }
    public static void main(String[] args) {
    assert(isNested((""[[]]"")) == (true));
    assert(isNested((""[]]]]]]][[[[[]"")) == (false));
    assert(isNested((""[][]"")) == (false));
    assert(isNested((""[]"")) == (false));
    assert(isNested((""[[[[]]]]"")) == (true));
    assert(isNested((""[]]]]]]]]]]"")) == (false));
    assert(isNested((""[][][[]]"")) == (true));
    assert(isNested((""[[]"")) == (false));
    assert(isNested((""[]]"")) == (false));
    assert(isNested((""[[]][["")) == (true));
    assert(isNested((""[[][]]"")) == (true));
    assert(isNested(("""")) == (false));
    assert(isNested((""[[[[[[[["")) == (false));
    assert(isNested((""]]]]]]]]"")) == (false));
    }

}
"
HumanEval_133,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / kɔfa ade biara wɔ ɔfã a ɛkorɔn no mu.    / Ehia sɛ wosan de nnumru a wɔakyekyere no ananmu wɔ ɔfã a wɔama no mu,     / Wɔama wo akontaahyɛde ahorow a ɛwɔ ɔfa bi mu.    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))
    // (14l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))
    // (98l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))
    // (84l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))
    // (29l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))
    // (6l)
    public static long sumSquares(ArrayList<Float> lst) {
","public static long sumSquares(ArrayList<Float> lst) {
        return lst.stream()
                  .mapToInt(f -> (int) Math.ceil(f))
                  .map(i -> i * i)
                  .sum();
    }
}","    }
    public static void main(String[] args) {
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f)))) == (6l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f, (float)6.3f)))) == (75l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));
    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));
    }

}
"
HumanEval_134,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Hyɛ no nsow: ""asɛmfua"" yɛ nkyerɛwde ahorow a wɔde mpaawa tetew mu.     / nsɛmfua bi fã, na sɛ ɛnte saa a ɛyɛ atoro.     / a ɛwɔ ɔkrataa mu no yɛ nkyerɛwde a ɛwɔ nkyerɛwde no mu na ɛnyɛ     / Yɛ adwuma a sɛ nea etwa to no yɛ     // >>> checkIfLastCharIsALetter((""apple pie""))
    // (false)
    // >>> checkIfLastCharIsALetter((""apple pi e""))
    // (true)
    // >>> checkIfLastCharIsALetter((""apple pi e ""))
    // (false)
    // >>> checkIfLastCharIsALetter((""""))
    // (false)
    public static boolean checkIfLastCharIsALetter(String txt) {
","public static boolean checkIfLastCharIsALetter(String txt) {
    txt = txt.trim();
    if (txt.isEmpty()) {
        return false;
    }
    String[] words = txt.split("" "");
    String lastWord = words[words.length - 1];
    if (lastWord.isEmpty()) {
        return false;
    }
    char lastChar = lastWord.charAt(lastWord.length() - 1);
    return Character.isLetter(lastChar);
}","    }
    public static void main(String[] args) {
    assert(checkIfLastCharIsALetter((""apple"")) == (false));
    assert(checkIfLastCharIsALetter((""apple pi e"")) == (true));
    assert(checkIfLastCharIsALetter((""eeeee"")) == (false));
    assert(checkIfLastCharIsALetter((""A"")) == (true));
    assert(checkIfLastCharIsALetter((""Pumpkin pie "")) == (false));
    assert(checkIfLastCharIsALetter((""Pumpkin pie 1"")) == (false));
    assert(checkIfLastCharIsALetter(("""")) == (false));
    assert(checkIfLastCharIsALetter((""eeeee e "")) == (false));
    assert(checkIfLastCharIsALetter((""apple pie"")) == (false));
    assert(checkIfLastCharIsALetter((""apple pi e "")) == (false));
    }

}
"
HumanEval_135,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / yɛ nneɛma abien.     / no such element exists then return -1. Ntam a wɔama no ntam a wɔama no no nni mu.    / nyɛ kɛse anaa ɛmpɛ sɛ nea edi kan no. Sɛ     / Yɛ adwuma bi a ɛde ade a ɛkorɔn paa a ɛwɔ hɔ no ma     // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))
    // (3l)
    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (-1l)
    public static long canArrange(ArrayList<Long> arr) {
","import java.util.*;

class Problem {
    // Create a function which returns the largest index of an element which
    // is not greater than or equal to the element immediately preceding it.
    // If no such element exists then return -1. The given array list will not
    // contain duplicate values.

    public static long canArrange(ArrayList<Long> arr) {
        for (int i = arr.size() - 1; i > 0; i--) {
            if (arr.get(i) < arr.get(i - 1)) {
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 2L, 4L, 3L, 5L));
        System.out.println(canArrange(list1)); // Output: 3
        
        ArrayList<Long> list2 = new ArrayList<>(Arrays.asList(1L, 2L, 3L));
        System.out.println(canArrange(list2)); // Output: -1
    }
}","    }
    public static void main(String[] args) {
    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));
    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) == (-1l));
    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));
    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));
    assert(canArrange((new ArrayList<Long>(Arrays.asList()))) == (-1l));
    }

}
"
HumanEval_136,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Sɛ negative anaa positive integers biara nni hɔ a, ma no nsane nyɛ null.     / a ɛwɔ ɔfã a wɔato din array list mu.     / ne kɛse a ɛtra akontaahyɛde a ɛnnyɛ yiye mu, na 'b' ne ketewa paa     / Yɛ adwuma bi a ɛde (a, b) paara ba, baabi a 'a' yɛ     // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l))))
    // Pair.with(Optional.of(Optional.empty()), Optional.of(1l))
    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))
    // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))
    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))
    // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))
    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {
","import java.util.*;
import org.javatuples.*;

class Problem {
    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {
        Optional<Long> largestNegative = Optional.empty();
        Optional<Long> smallestPositive = Optional.empty();

        for (Long num : lst) {
            if (num < 0) {
                if (!largestNegative.isPresent() || num > largestNegative.get()) {
                    largestNegative = Optional.of(num);
                }
            } else if (num > 0) {
                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {
                    smallestPositive = Optional.of(num);
                }
            }
        }
        
        return Pair.with(largestNegative, smallestPositive);
    }
}","    }
    public static void main(String[] args) {
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Optional.of(Pair.with(-2l, 1l))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Optional.of(Pair.with(-7l, 2l))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Optional.of(Pair.with(-9l, 2l))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));
    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Optional.of(Pair.with(-3l, 1l))));
    }

}
"
HumanEval_138,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso     / Hwɛ sɛ ebia wobetumi akyerɛw ɔpepepem a wɔde ama no sɛ emu 4 yɛ akwaa pa a emu yɛ biako     // >>> isEqualToSumEven((4l))
    // (false)
    // >>> isEqualToSumEven((6l))
    // (false)
    // >>> isEqualToSumEven((8l))
    // (true)
    public static boolean isEqualToSumEven(long n) {
","// Check if the number n is at least 8 since the smallest sum of 4 positive even numbers is 2+2+2+2=8
        if (n < 8) {
            return false;
        }

        // If n is divisible by 2 and n/2 is even, then n can be expressed as the sum of 4 positive even numbers
        return n % 2 == 0;
    }
}","    }
    public static void main(String[] args) {
    assert(isEqualToSumEven((4l)) == (false));
    assert(isEqualToSumEven((6l)) == (false));
    assert(isEqualToSumEven((8l)) == (true));
    assert(isEqualToSumEven((10l)) == (true));
    assert(isEqualToSumEven((11l)) == (false));
    assert(isEqualToSumEven((12l)) == (true));
    assert(isEqualToSumEven((13l)) == (false));
    assert(isEqualToSumEven((16l)) == (true));
    }

}
"
HumanEval_139,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / baabi a n > 0     / brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!     / Wɔkyerɛ Brazil adeyɛ no ase sɛ:     // >>> specialFactorial((4l))
    // (288l)
    // The function will receive an integer as input and should return the special
    // factorial of this integer.
    public static long specialFactorial(long n) {
","import java.util.stream.LongStream;

public class Problem {
    // The Brazilian factorial is defined as:
    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    // where n > 0

    public static long specialFactorial(long n) {
        return LongStream.rangeClosed(1, n)
                .map(Problem::factorial)
                .reduce(1, (a, b) -> a * b);
    }

    private static long factorial(long num) {
        return LongStream.rangeClosed(1, num)
                .reduce(1, (a, b) -> a * b);
    }

    public static void main(String[] args) {
        System.out.println(specialFactorial(4)); // Output: 288
    }
}","    }
    public static void main(String[] args) {
    assert(specialFactorial((4l)) == (288l));
    assert(specialFactorial((5l)) == (34560l));
    assert(specialFactorial((7l)) == (125411328000l));
    assert(specialFactorial((1l)) == (1l));
    }

}
"
HumanEval_140,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / afei fa -  si ananmu wɔ ntentan nyinaa mu    / na sɛ ahwehwɛ no wɔ ntwerew a ɛboro 2 a edi hɔ a,     / Sɛ wode kyerɛwsɛm a ɛwɔ hɔ no yɛ adwuma a, fa ase nkyerɛwde si ananmu,     // >>> fixSpaces(("" Example""))
    // (""Example"")
    // >>> fixSpaces(("" Example 1""))
    // (""Example_1"")
    // >>> fixSpaces(("" Example 2""))
    // (""_Example_2"")
    // >>> fixSpaces(("" Example 3""))
    // (""_Example-3"")
    public static String fixSpaces(String text) {
","if (text == null || text.isEmpty()) {
        return text;
    }
    
    StringBuilder result = new StringBuilder();
    int spaceCount = 0;
    for (char c : text.toCharArray()) {
        if (c == ' ') {
            spaceCount++;
        } else {
            if (spaceCount == 1) {
                result.append('_');
            } else if (spaceCount > 1) {
                result.append('-');
            }
            result.append(c);
            spaceCount = 0;
        }
    }
    
    // Handle trailing spaces
    if (spaceCount == 1) {
        result.append('_');
    } else if (spaceCount > 1) {
        result.append('-');
    }
    
    return result.toString();
}","    }
    public static void main(String[] args) {
    assert(fixSpaces((""Example"")).equals((""Example"")));
    assert(fixSpaces((""Mudasir Hanif "")).equals((""Mudasir_Hanif_"")));
    assert(fixSpaces((""Yellow Yellow  Dirty  Fellow"")).equals((""Yellow_Yellow__Dirty__Fellow"")));
    assert(fixSpaces((""Exa   mple"")).equals((""Exa-mple"")));
    assert(fixSpaces((""   Exa 1 2 2 mple"")).equals((""-Exa_1_2_2_mple"")));
    }

}
"
HumanEval_141,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / - Substring a ɛwɔ ɔtweaseɛ no akyi no yɛ nea edidi so yi mu biako: ['txt', 'exe', 'dll']     / Latin nkyerɛwde a wɔde di dwuma ('a'-'z' ne 'A'-'Z').     / - ɛnnyɛ sɛ ɔtweaseɛ no yɛ hwee, na ɛfi ase wɔ nkyerɛwde a ɛne     / - Nkyerɛwee no din no wɔ nsensan biako pɛ '.'     / - Ɛnsɛ sɛ asɛm no din yɛ nsɛnkyerɛnne ahorow (""0""-""9"") bɛboro abiɛsa.     / wɔadi so:     / Sɛ nea edidi so yi nyinaa hyia a, ɛno nkutoo na wobu no sɛ ɛyɛ din a edi mu.    / Sɛ nea yɛreka yi yɛ nokware a, ɛkyerɛ sɛ 'Yiw,' na sɛ ɛnte saa a, ɛkyerɛ sɛ 'Dabi.'     / Yɛ adwuma bi a ɛfa ɔfã din a ɛgyina hɔ ma ɔfã din, na ɛde     // >>> fileNameCheck((""example.txt""))
    // (""Yes"")
    // >>> fileNameCheck((""1example.dll""))
    // (""No"")
    public static String fileNameCheck(String file_name) {
","if (file_name == null || file_name.isEmpty()) {
        return ""No"";
    }
    
    // Split the file name into two parts: before and after the dot.
    String[] parts = file_name.split(""\\."");
    
    // Check for exactly one dot and non-empty parts.
    if (parts.length != 2 || parts[0].isEmpty() || parts[1].isEmpty()) {
        return ""No"";
    }
    
    // Check the extension validity.
    Set<String> validExtensions = new HashSet<>(Arrays.asList(""txt"", ""exe"", ""dll""));
    if (!validExtensions.contains(parts[1])) {
        return ""No"";
    }

    // Check that the first character before the dot is a letter.
    if (!Character.isLetter(parts[0].charAt(0))) {
        return ""No"";
    }

    // Count the number of digits in the part before the dot.
    int digitCount = 0;
    for (char c : parts[0].toCharArray()) {
        if (Character.isDigit(c)) {
            digitCount++;
        }
        if (digitCount > 3) {
            return ""No"";
        }
    }

    // All conditions are satisfied, return ""Yes"".
    return ""Yes"";
}","    }
    public static void main(String[] args) {
    assert(fileNameCheck((""example.txt"")).equals((""Yes"")));
    assert(fileNameCheck((""1example.dll"")).equals((""No"")));
    assert(fileNameCheck((""s1sdf3.asd"")).equals((""No"")));
    assert(fileNameCheck((""K.dll"")).equals((""Yes"")));
    assert(fileNameCheck((""MY16FILE3.exe"")).equals((""Yes"")));
    assert(fileNameCheck((""His12FILE94.exe"")).equals((""No"")));
    assert(fileNameCheck((""_Y.txt"")).equals((""No"")));
    assert(fileNameCheck((""?aREYA.exe"")).equals((""No"")));
    assert(fileNameCheck((""/this_is_valid.dll"")).equals((""No"")));
    assert(fileNameCheck((""this_is_valid.wow"")).equals((""No"")));
    assert(fileNameCheck((""this_is_valid.txt"")).equals((""Yes"")));
    assert(fileNameCheck((""this_is_valid.txtexe"")).equals((""No"")));
    assert(fileNameCheck((""#this2_i4s_5valid.ten"")).equals((""No"")));
    assert(fileNameCheck((""@this1_is6_valid.exe"")).equals((""No"")));
    assert(fileNameCheck((""this_is_12valid.6exe4.txt"")).equals((""No"")));
    assert(fileNameCheck((""all.exe.txt"")).equals((""No"")));
    assert(fileNameCheck((""I563_No.exe"")).equals((""Yes"")));
    assert(fileNameCheck((""Is3youfault.txt"")).equals((""Yes"")));
    assert(fileNameCheck((""no_one#knows.dll"")).equals((""Yes"")));
    assert(fileNameCheck((""1I563_Yes3.exe"")).equals((""No"")));
    assert(fileNameCheck((""I563_Yes3.txtt"")).equals((""No"")));
    assert(fileNameCheck((""final..txt"")).equals((""No"")));
    assert(fileNameCheck((""final132"")).equals((""No"")));
    assert(fileNameCheck((""_f4indsartal132."")).equals((""No"")));
    assert(fileNameCheck(("".txt"")).equals((""No"")));
    assert(fileNameCheck((""s."")).equals((""No"")));
    }

}
"
HumanEval_142,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / bɛsesa entries no wɔ array list no mu a wɔn index no nyɛ 3 anaa 4 bebree.    / yɛ 3 mu bebree na sɛ ne index yɛ 4 mu bebree na ɛnyɛ 3 mu bebree a, ɛbɛka akontaahyɛde no ho.    / Saa adwuma yi bɛfa integers a ɛwɔ array list.    / ""     // >>> lst
    // (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))
    // >>> lst
    // (long)new ArrayList<Long>(Arrays.asList())
    // >>> lst
    // (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))
    public static long sumSquares(ArrayList<Long> lst) {
","import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;

class Problem {
    public static long sumSquares(ArrayList<Long> lst) {
        long sum = 0;

        for (int i = 0; i < lst.size(); i++) {
            Long number = lst.get(i);
            if (i % 3 == 0) {
                sum += Math.pow(number, 2);
            } else if (i % 4 == 0) {
                sum += Math.pow(number, 3);
            } else {
                sum += number;
            }
        }

        return sum;
    }
}","    }
    public static void main(String[] args) {
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l)))) == (14l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList()))) == (0l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))) == (9l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l, (long)-1l)))) == (-3l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)0l)))) == (0l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l)))) == (-126l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-56l, (long)-99l, (long)1l, (long)0l, (long)-2l)))) == (3030l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)-1l)))) == (0l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-16l, (long)-9l, (long)-2l, (long)36l, (long)36l, (long)26l, (long)-20l, (long)25l, (long)-40l, (long)20l, (long)-4l, (long)12l, (long)-26l, (long)35l, (long)37l)))) == (-14196l));
    assert(sumSquares((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)17l, (long)-1l, (long)-15l, (long)13l, (long)-1l, (long)14l, (long)-14l, (long)-12l, (long)-5l, (long)14l, (long)-14l, (long)6l, (long)13l, (long)11l, (long)16l, (long)16l, (long)4l, (long)10l)))) == (-1448l));
    }

}
"
HumanEval_143,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso 1:     / nsɛmfua a ɛwɔ ahama foforo no mu no, ɛsɛ sɛ edi kan no mu pɛpɛɛpɛ.     / a ne tenten yɛ akontaahyɛde,     / na ɛsɛ sɛ wosan de ahyɛnsode a ɛwɔ nsɛmfua a ɛwɔ ɔkasamu a edi kan no mu,     / nsɛmfua bi wɔ asɛm no mu a wɔde mpaawa tetew ntam,     / Wɔma wo ahama a egyina hɔ ma asɛm bi,     // >>> wordsInSentence((""This is a test""))
    // (""is"")
    // Example 2:
    // >>> wordsInSentence((""lets go for swimming""))
    // (""go for"")
    // Constraints:
    // * 1 <= len(sentence) <= 100
    // * sentence contains only letters
    public static String wordsInSentence(String sentence) {
","public static String wordsInSentence(String sentence) {
        String[] words = sentence.split("" "");
        List<String> primeLengthWords = new ArrayList<>();
        
        for (String word : words) {
            if (isPrime(word.length())) {
                primeLengthWords.add(word);
            }
        }
        
        return String.join("" "", primeLengthWords);
    }

    private static boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 == 0 || n % 3 == 0) return false;
        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }
}","    }
    public static void main(String[] args) {
    assert(wordsInSentence((""This is a test"")).equals((""is"")));
    assert(wordsInSentence((""lets go for swimming"")).equals((""go for"")));
    assert(wordsInSentence((""there is no place available here"")).equals((""there is no place"")));
    assert(wordsInSentence((""Hi I am Hussein"")).equals((""Hi am Hussein"")));
    assert(wordsInSentence((""go for it"")).equals((""go for it"")));
    assert(wordsInSentence((""here"")).equals(("""")));
    assert(wordsInSentence((""here is"")).equals((""is"")));
    }

}
"
HumanEval_144,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Wubetumi aka sɛ x, ne n yɛ fraction a edi mu, na ɛnni zero sɛ emu din.     / <numerator>/<denominator> a emu numerator ne dinominer nyinaa yɛ dodow a emu yɛ pɛ.     / a ɛnnyɛ saa. x ne n nyinaa yɛ nkyekyɛm a wɔakyinkyim no, na wɔadi nea edidi so yi:     / x * n. Sɛ x * n yɛ ɔkra nyinaa na false     / Wo adwuma ne sɛ wobɛfa adwuma bi adi dwuma a ɛbɛma asɛm no ayɛ tiawa     // >>> simplify((""1/5""), (""5/1""))
    // (true)
    // >>> simplify((""1/6""), (""2/1""))
    // (false)
    // >>> simplify((""7/10""), (""10/2""))
    // (false)
    public static boolean simplify(String x, String n) {
","public static boolean simplify(String x, String n) {
    // Split the fractions into numerators and denominators
    String[] fracX = x.split(""/"");
    String[] fracN = n.split(""/"");
    
    // Parse numerators and denominators as integers
    int numX = Integer.parseInt(fracX[0]);
    int denX = Integer.parseInt(fracX[1]);
    int numN = Integer.parseInt(fracN[0]);
    int denN = Integer.parseInt(fracN[1]);

    // Calculate the product of x * n
    int productNumerator = numX * numN;
    int productDenominator = denX * denN;

    // Simplify the product fraction
    int gcd = gcd(productNumerator, productDenominator);

    // If the simplified denominator is 1, then it is a whole number
    return productDenominator / gcd == 1;
}

// Helper method to calculate the greatest common divisor
private static int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}","    }
    public static void main(String[] args) {
    assert(simplify((""1/5""), (""5/1"")) == (true));
    assert(simplify((""1/6""), (""2/1"")) == (false));
    assert(simplify((""5/1""), (""3/1"")) == (true));
    assert(simplify((""7/10""), (""10/2"")) == (false));
    assert(simplify((""2/10""), (""50/10"")) == (true));
    assert(simplify((""7/2""), (""4/2"")) == (true));
    assert(simplify((""11/6""), (""6/1"")) == (true));
    assert(simplify((""2/3""), (""5/2"")) == (false));
    assert(simplify((""5/2""), (""3/5"")) == (false));
    assert(simplify((""2/4""), (""8/4"")) == (true));
    assert(simplify((""2/4""), (""4/2"")) == (true));
    assert(simplify((""1/5""), (""5/1"")) == (true));
    assert(simplify((""1/5""), (""1/5"")) == (false));
    }

}
"
HumanEval_145,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / fa wɔn din a ɛwɔ mfitiase din no so.     / Hyɛ no nsow: sɛ nneɛma pii wɔ hɔ a wɔn akontaahyɛde dodow yɛ pɛ a,     / wɔ ne nkyerɛwde dodow a ɛsen biara no so.     / Kyerɛw adwuma bi a ebesiesie integers a wɔabɔ wɔn din wɔ ɔfã bi so     // >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))
    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))
    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<Long>(Arrays.asList()))
    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {
","import java.util.*;

public class Problem {
    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {
        return nums.stream()
            .sorted(Comparator.comparingLong(Problem::sumOfDigits).thenComparingLong(nums::indexOf))
            .collect(Collectors.toCollection(ArrayList::new));
    }

    private static long sumOfDigits(Long num) {
        num = Math.abs(num);
        long sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }

    public static void main(String[] args) {
        ArrayList<Long> list1 = new ArrayList<>(Arrays.asList(1L, 11L, -1L, -11L, -12L));
        ArrayList<Long> result1 = orderByPoints(list1);
        System.out.println(result1);

        ArrayList<Long> list2 = new ArrayList<>();
        ArrayList<Long> result2 = orderByPoints(list2);
        System.out.println(result2);
    }
}","    }
    public static void main(String[] args) {
    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));
    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));
    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));
    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l, (long)2l, (long)43l, (long)54l)))));
    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));
    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));
    }

}
"
HumanEval_146,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / a edi kan ne nea etwa to wɔ akontaabu bi mu no yɛ anohyeto (1, 3, 5, 7, 9).     / ne nneɛma a ɛwɔ ɔfã a wɔato din array list a ɛboro 10 ne ne nyinaa     / Kyerɛw adwuma bi a ɛfa akontaahyɛde a ɛwɔ ɔfã bi mu sɛ input na ɛde ma     // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))
    // (1l)
    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))
    // (2l)
    public static long specialFilter(ArrayList<Long> nums) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    // Function to check if a number has odd first and last digits
    private static boolean hasOddFirstAndLastDigit(long num) {
        num = Math.abs(num); // Consider absolute value to handle negative numbers

        String numStr = Long.toString(num);

        // Check first digit
        char firstDigit = numStr.charAt(0);
        if ((firstDigit - '0') % 2 == 0) {
            return false;
        }

        // Check last digit
        char lastDigit = numStr.charAt(numStr.length() - 1);
        return (lastDigit - '0') % 2 != 0;
    }

    public static long specialFilter(ArrayList<Long> nums) {
        return nums.stream()
            .filter(num -> num > 10 && hasOddFirstAndLastDigit(num))
            .count();
    }

    public static void main(String[] args) {
        ArrayList<Long> nums1 = new ArrayList<>(Arrays.asList(15L, -73L, 14L, -15L));
        System.out.println(specialFilter(nums1)); // Output: 1

        ArrayList<Long> nums2 = new ArrayList<>(Arrays.asList(33L, -2L, -3L, 45L, 21L, 109L));
        System.out.println(specialFilter(nums2)); // Output: 2
    }
}","    }
    public static void main(String[] args) {
    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) == (0l));
    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l)))) == (1l));
    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l)))) == (2l));
    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l, (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));
    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l, (long)19l)))) == (3l));
    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l)))) == (0l));
    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) == (0l));
    }

}
"
HumanEval_147,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / na a[i] + a[j] + a[k] yɛ 3 mu mmɔho.     / Fa a mprɛnsa dodow no (a[i], a[j], a[k]) ma a i < j < k,     / Sɛ i biara (1 ≤ i ≤ n) a, a[i] = i * i - i + 1 no mu biara.     / Wɔama wo akontaahyɛde a ɛyɛ pa n. Ɛsɛ sɛ woyɛ akontaahyɛde a ɛyɛ a ɛboro n.    // >>> getMaxTriples((5l))
    // (1l)
    // Explanation: 
    // a = [1, 3, 7, 13, 21]
    // The only valid triple is (1, 7, 13).
    public static long getMaxTriples(long n) {
","import java.util.*;

class Problem {
    public static long getMaxTriples(long n) {
        // Generate the array list a based on the given formula
        int[] a = new int[(int) n];
        for (int i = 1; i <= n; i++) {
            a[i - 1] = i * i - i + 1;
        }
        
        long count = 0;
        
        // Iterate through triple combinations and count those whose sum is a multiple of 3
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if ((a[i] + a[j] + a[k]) % 3 == 0) {
                        count++;
                    }
                }
            }
        }
        
        return count;
    }

    public static void main(String[] args) {
        System.out.println(getMaxTriples(5)); // Example usage
    }
}","    }
    public static void main(String[] args) {
    assert(getMaxTriples((5l)) == (1l));
    assert(getMaxTriples((6l)) == (4l));
    assert(getMaxTriples((10l)) == (36l));
    assert(getMaxTriples((100l)) == (53361l));
    }

}
"
HumanEval_148,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / nyɛ nsoromma din a ɛfata.     / Sɛ planet1 anaa planet2     / sɛ ɛbɛn owia.     / a ɛwɔ okyinnsoromma1 ne okyinnsoromma2 ntam, a wɔasiesie no     / Ɔsɛsɛ dɛ yɛdze nsɛɛ a wiadze nyinara a wɔn amansan nye     / Kyerɛw adwuma bi a ɛfa nsoromma din abien sɛ ntweaa planet1 ne planet2.     / Uranus, Neptune.     / yɛ Mercury, nea edi hɔ ne Venus, afei Earth, Mars, Jupiter, Saturn,     / Nsoromma awotwe na ɛwɔ yɛn owia nhyehyɛe mu: nea ɛbɛn owia paa no .    // >>> bf((""Jupiter""), (""Neptune""))
    // (new ArrayList<String>(Arrays.asList((String)""Saturn"", (String)""Uranus"")))
    // >>> bf((""Earth""), (""Mercury""))
    // (ArrayList<String>(""Venus""))
    // >>> bf((""Mercury""), (""Uranus""))
    // (new ArrayList<String>(Arrays.asList((String)""Venus"", (String)""Earth"", (String)""Mars"", (String)""Jupiter"", (String)""Saturn"")))
    public static ArrayList<String> bf(String planet1, String planet2) {
","import java.util.*;
import org.javatuples.*;

public class Problem {
    // There are eight planets in our solar system arranged by distance from the Sun
    private static final List<String> PLANETS = Arrays.asList(
            ""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    );

    public static Pair<ArrayList<String>, ArrayList<String>> bf(String planet1, String planet2) {
        // Validate planet names
        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {
            return new Pair<>(new ArrayList<>(), new ArrayList<>());
        }

        // Find indices of the planets
        int index1 = PLANETS.indexOf(planet1);
        int index2 = PLANETS.indexOf(planet2);

        // Sort the indices
        int start = Math.min(index1, index2);
        int end = Math.max(index1, index2);

        // Extract planets between the given two planets
        ArrayList<String> planetsBetween = new ArrayList<>(PLANETS.subList(start + 1, end));

        return new Pair<>(planetsBetween, new ArrayList<>());
    }
}","    }
    public static void main(String[] args) {
    assert(bf((""Jupiter""), (""Neptune"")).equals((new ArrayList<String>(Arrays.asList((String)""Saturn"", (String)""Uranus"")))));
    assert(bf((""Earth""), (""Mercury"")).equals((new ArrayList<String>(Arrays.asList((String)""Venus"")))));
    assert(bf((""Mercury""), (""Uranus"")).equals((new ArrayList<String>(Arrays.asList((String)""Venus"", (String)""Earth"", (String)""Mars"", (String)""Jupiter"", (String)""Saturn"")))));
    assert(bf((""Neptune""), (""Venus"")).equals((new ArrayList<String>(Arrays.asList((String)""Earth"", (String)""Mars"", (String)""Jupiter"", (String)""Saturn"", (String)""Uranus"")))));
    assert(bf((""Earth""), (""Earth"")).equals((new ArrayList<String>(Arrays.asList()))));
    assert(bf((""Mars""), (""Earth"")).equals((new ArrayList<String>(Arrays.asList()))));
    assert(bf((""Jupiter""), (""Makemake"")).equals((new ArrayList<String>(Arrays.asList()))));
    }

}
"
HumanEval_149,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     Wubetumi aka sɛ nsɛmfua no nyinaa tenten bɛyɛ pɛ.    / Ɛwɔ sɛ adwuma no san ahwehwɛ ahwehwɛ a ahwehwɛ no yɛ ahwehwɛ a ahwehwɛ no yɛ ahwehwɛ a ahwehwɛ no yɛ ahwehwɛ a ahwehwɛ no yɛ ahwehwɛ a ahwehwɛ no yɛ ahwehwɛ a ahwehwɛ no yɛ ahwehwɛ.     / Sɛ nsɛmfua abien a ne tenten yɛ pɛ a, fa nkyerɛwde mu di nsɛmfua no ho nhyehyɛe.     / ɛsɛ sɛ ɛde ɔfã a wɔasiesie no saa mmara no so no ba.     / Sɛ wohwɛ nnipakan no a, ɛsɛ sɛ wohwɛ sɛnea asɛmfua biara tenten kɔ soro no so, na wohwɛ mu a, wubehu sɛ     / na ebetumi akyerɛw nsɛm a ɛsono emu nsɛm no bi wom.     / Ntam no yɛ ntam a wɔtoto no ntweaso ntweaso, na ɛnyɛ ntam a wɔtoto no ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso ntweaso nt nt nt ntweaso nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt nt    / na ɛde nea efi mu ba no ma no a wɔasiesie no,     / yi ntwe a ne tenten yɛ anohyeto fi mu,     / Kyerɛw adwuma bi a wogye ntweaa a wɔaka ho nsɛm wɔ ntweaa ho no sɛ parameter,     // >>> listSort((new ArrayList<String>(Arrays.asList((String)""aa"", (String)""a"", (String)""aaa""))))
    // (new ArrayList<String>(Arrays.asList((String)""aa"")))
    // >>> listSort((new ArrayList<String>(Arrays.asList((String)""ab"", (String)""a"", (String)""aaa"", (String)""cd""))))
    // (new ArrayList<String>(Arrays.asList((String)""ab"", (String)""cd"")))
    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {
","import java.util.*;

class Problem {
    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {
        // Remove strings with odd lengths
        lst.removeIf(s -> s.length() % 2 != 0);

        // Sort the remaining strings first by length, then alphabetically
        lst.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));

        return lst;
    }

    public static void main(String[] args) {
        ArrayList<String> test1 = new ArrayList<String>(Arrays.asList(""aa"", ""a"", ""aaa""));
        ArrayList<String> test2 = new ArrayList<String>(Arrays.asList(""ab"", ""a"", ""aaa"", ""cd""));

        System.out.println(sortedListSum(test1)); // Output: [aa]
        System.out.println(sortedListSum(test2)); // Output: [ab, cd]
    }
}","    }
    public static void main(String[] args) {
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""aa"", (String)""a"", (String)""aaa"")))).equals((new ArrayList<String>(Arrays.asList((String)""aa"")))));
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""school"", (String)""AI"", (String)""asdf"", (String)""b"")))).equals((new ArrayList<String>(Arrays.asList((String)""AI"", (String)""asdf"", (String)""school"")))));
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""d"", (String)""b"", (String)""c"", (String)""a"")))).equals((new ArrayList<String>(Arrays.asList()))));
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""d"", (String)""dcba"", (String)""abcd"", (String)""a"")))).equals((new ArrayList<String>(Arrays.asList((String)""abcd"", (String)""dcba"")))));
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""AI"", (String)""ai"", (String)""au"")))).equals((new ArrayList<String>(Arrays.asList((String)""AI"", (String)""ai"", (String)""au"")))));
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""a"", (String)""b"", (String)""b"", (String)""c"", (String)""c"", (String)""a"")))).equals((new ArrayList<String>(Arrays.asList()))));
    assert(sortedListSum((new ArrayList<String>(Arrays.asList((String)""aaaa"", (String)""bbbb"", (String)""dd"", (String)""cc"")))).equals((new ArrayList<String>(Arrays.asList((String)""cc"", (String)""dd"", (String)""aaaa"", (String)""bbbb"")))));
    }

}
"
HumanEval_150,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / yɛ prime number na ɛsɛ sɛ ɛde y no ma otherwise.     / Nhyehyɛe tiawa a ɛsɛ sɛ ɛde x a sɛ n yɛ     // >>> xOrY((7l), (34l), (12l))
    // (34l)
    // >>> xOrY((15l), (8l), (5l))
    // (5l)
    public static long xOrY(long n, long x, long y) {
","import java.math.BigInteger;

public class Problem {
    public static long xOrY(long n, long x, long y) {
        // Check if n is prime
        if (isPrime(n)) {
            return x;
        } else {
            return y;
        }
    }

    private static boolean isPrime(long n) {
        if (n < 2) return false;
        if (n == 2 || n == 3) return true;
        if (n % 2 == 0) return false;

        for (long i = 3; i <= Math.sqrt(n); i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(xOrY(7L, 34L, 12L));  // Output: 34
        System.out.println(xOrY(15L, 8L, 5L));  // Output: 5
    }
}","    }
    public static void main(String[] args) {
    assert(xOrY((7l), (34l), (12l)) == (34l));
    assert(xOrY((15l), (8l), (5l)) == (5l));
    assert(xOrY((3l), (33l), (5212l)) == (33l));
    assert(xOrY((1259l), (3l), (52l)) == (3l));
    assert(xOrY((7919l), (-1l), (12l)) == (-1l));
    assert(xOrY((3609l), (1245l), (583l)) == (583l));
    assert(xOrY((91l), (56l), (129l)) == (129l));
    assert(xOrY((6l), (34l), (1234l)) == (1234l));
    assert(xOrY((1l), (2l), (0l)) == (0l));
    assert(xOrY((2l), (2l), (0l)) == (2l));
    }

}
"
HumanEval_151,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / wɔ ɔfã a wɔnka ho no mu. Nkan a wɔnka ho anaasɛ wɔnka ho no.    / Sɛ wɔama wo din a ɛwɔ din a wɔato din din no mu a, fa nea ɛkyɛn so wɔ din no mu no ka ho.    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))
    // (10l)
    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))
    // (0l)
    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))
    // (81l)
    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))
    // (0l)
    // If the input array list is empty, return 0.
    public static long doubleTheDifference(ArrayList<Float> lst) {
","import java.util.ArrayList;

class Problem {
    public static long doubleTheDifference(ArrayList<Float> lst) {
        long sum = 0;
        
        for (Float number : lst) {
            if (number != null && number >= 0 && number % 1 == 0) {
                long num = number.longValue();
                if (num % 2 != 0) {
                    sum += num * num;
                }
            }
        }
        
        return sum;
    }
}","    }
    public static void main(String[] args) {
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList()))) == (0l));
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)5.0f, (float)4.0f)))) == (25l));
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.1f, (float)0.2f, (float)0.3f)))) == (0l));
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-10.0f, (float)-20.0f, (float)-30.0f)))) == (0l));
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-1.0f, (float)-2.0f, (float)8.0f)))) == (0l));
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)0.2f, (float)3.0f, (float)5.0f)))) == (34l));
    assert(doubleTheDifference((new ArrayList<Float>(Arrays.asList((float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f)))) == (165l));
    }

}
"
HumanEval_152,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / nhwɛso:     / a, ne dodow yɛ 0, na sɛ ɛnte saa a, ne dodow yɛ nsonsonoe a ɛda nea wɔaka no ne nea wɔaka no ntam.     / De ɔfã a wɔaka ho asɛm no nyinaa kɔ akyiri yɛ pɛ. Sɛ wɔaka no yiye a,     / Wɔma wo akontaahyɛde ahorow ne nsusuwho ahorow a ne tenten yɛ pɛ, a kyerɛwsɛm biara kyerɛ sɛ ɛne no hyia.     / Wo adwuma ne sɛ wubehu sɛ obi ahu nea ɛkɔ so wɔ agoru ahorow bi mu no mu.     / sɛ yɛbɛhwɛ ne ho ahwɛ.     Sɛ w'adwene ne nkate a wowɔ saa bere no yɛ nea wunim ankasa a, ɛyɛ wo sɛ w'adwene ne wo nkate no nyinaa yɛ wo de.    / Migye di sɛ yɛn nyinaa kae saa nkate no bere a biribi a na yɛatwɛn akyɛ bae no     // >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))
    // >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))
    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))
    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {
","import java.util.ArrayList;
import java.util.Arrays;

public class Problem {
    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {
        ArrayList<Long> result = new ArrayList<>();
        for (int i = 0; i < game.size(); i++) {
            result.add(Math.abs(game.get(i) - guess.get(i)));
        }
        return result;
    }

    public static void main(String[] args) {
        ArrayList<Long> game1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L, 1L));
        ArrayList<Long> guess1 = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 2L, -2L));
        System.out.println(compare(game1, guess1));

        ArrayList<Long> game2 = new ArrayList<>(Arrays.asList(0L, 5L, 0L, 0L, 0L, 4L));
        ArrayList<Long> guess2 = new ArrayList<>(Arrays.asList(4L, 1L, 1L, 0L, 0L, -2L));
        System.out.println(compare(game2, guess2));
    }
}","    }
    public static void main(String[] args) {
    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));
    assert(compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));
    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));
    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)0l, (long)1l)))));
    }

}
"
HumanEval_153,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / (ne mu ahoɔden yɛ -1).     / return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension                                                                                                                                                                                                                                                                                                                                                                / extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] saa a ɛsɛ sɛ     / Sɛ nhwɛso, sɛ wɔde ""Slices"" ama wo sɛ ɔfese ne ɔfese a wɔabɔ din wɔ     / yi nea edi kan wɔ ɔfã no mu.     Sɛ wowɔ ntade abien anaa nea ɛboro saa a emu ahoɔden yɛ pɛ a, ɛsɛ sɛ wofa no wɔ wo nsa ano.    / format: ClassName.StrongestExtensionName.     / Ɛsɛ sɛ wuhu nea ɛkyɛn so na wosan de ahama yi kɔ     / wɔ din a wɔde ma no mu no, wɔde CAP - SM fraction no na ɛkyerɛ ahoɔden no.     / nkyerɛwde wɔ ɔmansin no din mu, na ma SM nyɛ nkyerɛwde nketewa no dodow     / tumi a ɛwɔ asɛm no mu no te sɛ nea edidi so yi: Ma CAP nyɛ nkyerɛwde a wɔde nkyerɛwde akɛse akyerɛw no     / Wɔbɛfa saa nkekaho no so de akyerɛkyerɛ adesua afoforo mu.    / Wobɛhu su a ɛwɔ sukuu no mu (a string) ne ɔfã a wɔabɔ din no.    // >>> StrongestExtension((""my_class""), (new ArrayList<String>(Arrays.asList((String)""AA"", (String)""Be"", (String)""CC""))))
    // (""my_class.AA"")
    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {
","public static String StrongestExtension(String class_name, ArrayList<String> extensions) {
        String strongestExtension = """";
        double maxStrength = Double.NEGATIVE_INFINITY;

        for (String extension : extensions) {
            int capCount = 0;
            int smCount = 0;

            for (char c : extension.toCharArray()) {
                if (Character.isUpperCase(c)) {
                    capCount++;
                } else if (Character.isLowerCase(c)) {
                    smCount++;
                }
            }

            double strength = capCount - smCount;

            if (strength > maxStrength) {
                maxStrength = strength;
                strongestExtension = extension;
            }
        }

        return class_name + ""."" + strongestExtension;
    }
}","    }
    public static void main(String[] args) {
    assert(StrongestExtension((""Watashi""), (new ArrayList<String>(Arrays.asList((String)""tEN"", (String)""niNE"", (String)""eIGHt8OKe"")))).equals((""Watashi.eIGHt8OKe"")));
    assert(StrongestExtension((""Boku123""), (new ArrayList<String>(Arrays.asList((String)""nani"", (String)""NazeDa"", (String)""YEs.WeCaNe"", (String)""32145tggg"")))).equals((""Boku123.YEs.WeCaNe"")));
    assert(StrongestExtension((""__YESIMHERE""), (new ArrayList<String>(Arrays.asList((String)""t"", (String)""eMptY"", (String)""nothing"", (String)""zeR00"", (String)""NuLl__"", (String)""123NoooneB321"")))).equals((""__YESIMHERE.NuLl__"")));
    assert(StrongestExtension((""K""), (new ArrayList<String>(Arrays.asList((String)""Ta"", (String)""TAR"", (String)""t234An"", (String)""cosSo"")))).equals((""K.TAR"")));
    assert(StrongestExtension((""__HAHA""), (new ArrayList<String>(Arrays.asList((String)""Tab"", (String)""123"", (String)""781345"", (String)""-_-"")))).equals((""__HAHA.123"")));
    assert(StrongestExtension((""YameRore""), (new ArrayList<String>(Arrays.asList((String)""HhAas"", (String)""okIWILL123"", (String)""WorkOut"", (String)""Fails"", (String)""-_-"")))).equals((""YameRore.okIWILL123"")));
    assert(StrongestExtension((""finNNalLLly""), (new ArrayList<String>(Arrays.asList((String)""Die"", (String)""NowW"", (String)""Wow"", (String)""WoW"")))).equals((""finNNalLLly.WoW"")));
    assert(StrongestExtension((""_""), (new ArrayList<String>(Arrays.asList((String)""Bb"", (String)""91245"")))).equals((""_.Bb"")));
    assert(StrongestExtension((""Sp""), (new ArrayList<String>(Arrays.asList((String)""671235"", (String)""Bb"")))).equals((""Sp.671235"")));
    }

}
"
HumanEval_154,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Wɔama wo nsɛmfua 2. Sɛ asɛmfua a ɛtɔ so abien no anaa ne nsesa no bi yɛ asɛmfua a edi kan no mu nsensan a, ɛsɛ sɛ wosan true.    // >>> cycpatternCheck((""abcd""), (""abd""))
    // (false)
    // >>> cycpatternCheck((""hello""), (""ell""))
    // (true)
    // >>> cycpatternCheck((""whassup""), (""psus""))
    // (false)
    // >>> cycpatternCheck((""abab""), (""baa""))
    // (true)
    // >>> cycpatternCheck((""efef""), (""eeff""))
    // (false)
    // >>> cycpatternCheck((""himenss""), (""simen""))
    // (true)
    public static boolean cycpatternCheck(String a, String b) {
","public static boolean cycpatternCheck(String a, String b) {
        if (b.length() > a.length()) {
            return false;
        }
        
        String doubledB = b + b;
        
        for (int i = 0; i < b.length(); i++) {
            String rotation = doubledB.substring(i, i + b.length());
            if (a.contains(rotation)) {
                return true;
            }
        }
        
        return false;
    }
}","    }
    public static void main(String[] args) {
    assert(cycpatternCheck((""xyzw""), (""xyw"")) == (false));
    assert(cycpatternCheck((""yello""), (""ell"")) == (true));
    assert(cycpatternCheck((""whattup""), (""ptut"")) == (false));
    assert(cycpatternCheck((""efef""), (""fee"")) == (true));
    assert(cycpatternCheck((""abab""), (""aabb"")) == (false));
    assert(cycpatternCheck((""winemtt""), (""tinem"")) == (true));
    }

}
"
HumanEval_155,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / Sɛ wɔde ɔpepepem bi ma a, ma no nya ɔpepepem a ɛmmoro so ne ɔpepepem a ɛmmoro so.     // >>> evenOddCount((-12l))
    // (Pair.with(1l, 1l))
    // >>> evenOddCount((123l))
    // (Pair.with(1l, 2l))
    public static Pair<Long, Long> evenOddCount(long num) {
","long evenCount = 0;
        long oddCount = 0;
        num = Math.abs(num); // Handle negative numbers by taking the absolute value

        while (num > 0) {
            long digit = num % 10;
            if (digit % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
            num /= 10;
        }

        return Pair.with(evenCount, oddCount);
    }

    public static void main(String[] args) {
        System.out.println(evenOddCount(-12L)); // Output: (1, 1)
        System.out.println(evenOddCount(123L)); // Output: (1, 2)
    }
}","    }
    public static void main(String[] args) {
    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));
    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));
    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));
    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));
    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));
    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));
    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));
    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));
    }

}
"
HumanEval_156,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow:     / Ahyɛde: 1 <= num <= 1000     / na fa nkyerɛwde nketewa na kyerɛ no.     / Sɛ wɔde ɔkra a ɛyɛ pɛ bi ma a, fa Romanfo akontaahyɛde a ɛne no yɛ pɛ no yɛ ahama,     // >>> intToMiniRoman((19l))
    // (""xix"")
    // >>> intToMiniRoman((152l))
    // (""clii"")
    // >>> intToMiniRoman((426l))
    // (""cdxxvi"")
    public static String intToMiniRoman(long number) {
","String[] thousands = {"""", ""m""};
        String[] hundreds = {"""", ""c"", ""cc"", ""ccc"", ""cd"", ""d"", ""dc"", ""dcc"", ""dccc"", ""cm""};
        String[] tens = {"""", ""x"", ""xx"", ""xxx"", ""xl"", ""l"", ""lx"", ""lxx"", ""lxxx"", ""xc""};
        String[] units = {"""", ""i"", ""ii"", ""iii"", ""iv"", ""v"", ""vi"", ""vii"", ""viii"", ""ix""};
        
        String roman = """";

        roman += thousands[(int)(number / 1000)];
        number %= 1000;
        
        roman += hundreds[(int)(number / 100)];
        number %= 100;
        
        roman += tens[(int)(number / 10)];
        number %= 10;
        
        roman += units[(int)(number)];
        
        return roman;
    }
}","    }
    public static void main(String[] args) {
    assert(intToMiniRoman((19l)).equals((""xix"")));
    assert(intToMiniRoman((152l)).equals((""clii"")));
    assert(intToMiniRoman((251l)).equals((""ccli"")));
    assert(intToMiniRoman((426l)).equals((""cdxxvi"")));
    assert(intToMiniRoman((500l)).equals((""d"")));
    assert(intToMiniRoman((1l)).equals((""i"")));
    assert(intToMiniRoman((4l)).equals((""iv"")));
    assert(intToMiniRoman((43l)).equals((""xliii"")));
    assert(intToMiniRoman((90l)).equals((""xc"")));
    assert(intToMiniRoman((94l)).equals((""xciv"")));
    assert(intToMiniRoman((532l)).equals((""dxxxii"")));
    assert(intToMiniRoman((900l)).equals((""cm"")));
    assert(intToMiniRoman((994l)).equals((""cmxciv"")));
    assert(intToMiniRoman((1000l)).equals((""m"")));
    }

}
"
HumanEval_157,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     / Nnyinaso 90     / Abenfo a wɔaka abom no yɛ abenfo a ne mfimfini biako yɛ ɔbenfo anaa     / n'afanan nyinaa yɛ mfitiaseɛ a ɛyɛ tee, anyɛ saa a ɛnyɛ nokware.     Sɛ wɔde ahinasa afã abiɛsa no tenten ma a, de true ma sɛ     // >>> rightAngleTriangle((3l), (4l), (5l))
    // (true)
    // >>> rightAngleTriangle((1l), (2l), (3l))
    // (false)
    public static boolean rightAngleTriangle(long a, long b, long c) {
","public class Problem {
    // Given the lengths of the three sides of a triangle. Return true if the three
    // sides form a right-angled triangle, false otherwise.
    public static boolean rightAngleTriangle(long a, long b, long c) {
        // Sort the sides so that c is always the largest one
        long[] sides = {a, b, c};
        Arrays.sort(sides);
        // Check the Pythagorean theorem: a^2 + b^2 == c^2
        return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];
    }
}","    }
    public static void main(String[] args) {
    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));
    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));
    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));
    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));
    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));
    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));
    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));
    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));
    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));
    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));
    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));
    }

}
"
HumanEval_158,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / nkyerɛwde, de nea edi kan wɔ nsɛm asekyerɛ mu no na ɛbɛba.     Sɛ ntweaa pii wɔ ntweaa soronko dodow a ɛboro so a,     / Nsɛmfua ahorow wɔ ɔfã a wɔato din array no mu. Ma asɛmfua a ɛboro dodow no mu     / Kyerɛw adwuma bi a wogye ntweaa a wɔato din array list.     // >>> findMax((new ArrayList<String>(Arrays.asList((String)""name"", (String)""of"", (String)""string""))))
    // (""string"")
    // >>> findMax((new ArrayList<String>(Arrays.asList((String)""name"", (String)""enam"", (String)""game""))))
    // (""enam"")
    // >>> findMax((new ArrayList<String>(Arrays.asList((String)""aaaaaaa"", (String)""bb"", (String)""cc""))))
    // (""aaaaaaa"")
    public static String findMax(ArrayList<String> words) {
","import java.util.*;

public class UniqueCharacterFinder {

    public static String findMax(ArrayList<String> words) {
        String maxWord = """";
        int maxUniqueCount = 0;

        for (String word : words) {
            int uniqueCount = (int) word.chars().distinct().count();
            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {
                maxUniqueCount = uniqueCount;
                maxWord = word;
            }
        }

        return maxWord;
    }

    public static void main(String[] args) {
        System.out.println(findMax(new ArrayList<>(Arrays.asList(""name"", ""of"", ""string"")))); // Output: ""string""
        System.out.println(findMax(new ArrayList<>(Arrays.asList(""name"", ""enam"", ""game"")))); // Output: ""enam""
        System.out.println(findMax(new ArrayList<>(Arrays.asList(""aaaaaaa"", ""bb"", ""cc"")))); // Output: ""aaaaaaa""
    }
}","    }
    public static void main(String[] args) {
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""name"", (String)""of"", (String)""string"")))).equals((""string"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""name"", (String)""enam"", (String)""game"")))).equals((""enam"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""aaaaaaa"", (String)""bb"", (String)""cc"")))).equals((""aaaaaaa"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""abc"", (String)""cba"")))).equals((""abc"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""play"", (String)""this"", (String)""game"", (String)""of"", (String)""footbott"")))).equals((""footbott"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""we"", (String)""are"", (String)""gonna"", (String)""rock"")))).equals((""gonna"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""we"", (String)""are"", (String)""a"", (String)""mad"", (String)""nation"")))).equals((""nation"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""this"", (String)""is"", (String)""a"", (String)""prrk"")))).equals((""this"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""b"")))).equals((""b"")));
    assert(findMax((new ArrayList<String>(Arrays.asList((String)""play"", (String)""play"", (String)""play"")))).equals((""play"")));
    }

}
"
HumanEval_159,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso:     Sɛ ɛmo no nnɔɔso a, wubedi ɛmo a aka no nyinaa, nanso ɔkɔm de wo.    / karoti dodow a aka wɔ aduan a wubedi akyi ]     / ɛsɛ sɛ woma no [ carrot dodow a wodii wɔ aduan a wodii akyi,     Nanso seesei ɛsɛ sɛ wudi korow pii de wie da no mu aduan.    / Woyɛ ɔsebɔ a ɔkɔm de wo, na woadi nkrataa kakra dedaw,     // >>> eat((5l), (6l), (10l))
    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))
    // >>> eat((4l), (8l), (9l))
    // (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))
    // >>> eat((1l), (10l), (10l))
    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))
    // >>> eat((2l), (11l), (5l))
    // (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))
    // Variables:
    // @number : integer
    // the number of carrots that you have eaten.
    // @need : integer
    // the number of carrots that you need to eat.
    // @remaining : integer
    // the number of remaining carrots thet exist in stock
    // Constrain:
    // * 0 <= number <= 1000
    // * 0 <= need <= 1000
    // * 0 <= remaining <= 1000
    // Have fun :)
    public static ArrayList<Long> eat(long number, long need, long remaining) {
","import java.util.ArrayList;
import java.util.Arrays;

class Problem {
    public static ArrayList<Long> eat(long number, long need, long remaining) {
        long totalEaten = number;
        long carrotsToEat = Math.min(need, remaining);
        totalEaten += carrotsToEat;
        long carrotsLeft = remaining - carrotsToEat;
        
        return new ArrayList<Long>(Arrays.asList(totalEaten, carrotsLeft));
    }
}","    }
    public static void main(String[] args) {
    assert(eat((5l), (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));
    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))));
    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))));
    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))));
    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l)))));
    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l)))));
    }

}
"
HumanEval_160,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Operator array list wɔ operator baako, na operand array list wɔ operands mmienu.     / Operand yɛ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm wɔ ɔfã a wɔaka ho asɛm no.     / Ɔfã a wɔfa so yɛ adwuma no tenten yɛ pɛ sɛ nea wɔfa so yɛ adwuma no tenten so yɛ biako.     / Hyɛ no nsow:     / => nea efi mu ba = 9     / nea ebefi mu aba = 2 + 3 * 4 - 5     / array array list = [2, 3, 4, 5]     / operator['+', '*', '-']     / Nhwɛso:     / Nkɔso (**)     / Asa so nketewa ( // )     / Nkɔso (* )     / Afa ( - )     / Adaka (+)     / Abɔde a ɛwɔ algebra mu:     / asɛm na fa asɛm yi ho nsusude ma no.     / a ɛtɔ so mmienu no yɛ integers a ɛwɔ array array list. Fa array lists mmienu a wɔde ama no yɛ algebraic no.    / Sɛ yɛma no ɔfã a edi kan a, ne nyinaa yɛ algebra mu adwuma, na     public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {
","import java.util.ArrayList;

class Problem {
    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {
        if (operand.isEmpty() || op.isEmpty() || operand.size() - 1 != op.size()) {
            throw new IllegalArgumentException(""Invalid input."");
        }

        // Start with the first operand.
        long result = operand.get(0);

        // Apply the operators in sequence.
        for (int i = 0; i < op.size(); i++) {
            String operator = op.get(i);
            long nextOperand = operand.get(i + 1);

            switch (operator) {
                case ""+"":
                    result += nextOperand;
                    break;
                case ""-"":
                    result -= nextOperand;
                    break;
                case ""*"":
                    result *= nextOperand;
                    break;
                case ""//"":
                    if (nextOperand == 0) {
                        throw new ArithmeticException(""Division by zero."");
                    }
                    result /= nextOperand;
                    break;
                case ""**"":
                    result = (long) Math.pow(result, nextOperand);
                    break;
                default:
                    throw new IllegalArgumentException(""Invalid operator: "" + operator);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        ArrayList<String> operators = new ArrayList<>();
        operators.add(""+"");
        operators.add(""*"");
        operators.add(""-"");

        ArrayList<Long> operands = new ArrayList<>();
        operands.add(2L);
        operands.add(3L);
        operands.add(4L);
        operands.add(5L);

        System.out.println(doAlgebra(operators, operands));  // Output: 9
    }
}","    }
    public static void main(String[] args) {
    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)""**"", (String)""*"", (String)""+""))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));
    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)""+"", (String)""*"", (String)""-""))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));
    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)""//"", (String)""*""))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));
    }

}
"
HumanEval_161,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Nhwɛso ahorow     / Ɛwɔ sɛ adwuma no san de nea efi mu ba no ma.     / Sɛ nkyerɛwde biara nni nni mu a, dan kyerɛ no kwan foforo.     / anyɛ saa a, ma ɛntena hɔ sɛnea ɛte.     / sɛ s[i] yɛ nkyerɛwde a, dan ne kɛse no fi ase kɔ soro anaa nea ɛne no bɔ abira,     / Wɔama wo ahama bi.     // >>> solve((""1234""))
    // (""4321"")
    // >>> solve((""ab""))
    // (""AB"")
    // >>> solve((""#a@C""))
    // (""#A@c"")
    public static String solve(String s) {
","public static String solve(String s) {
        boolean hasLetters = false;
        StringBuilder result = new StringBuilder();
        
        // Check if the string contains any letters and process the string
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                hasLetters = true;
                if (Character.isUpperCase(c)) {
                    result.append(Character.toLowerCase(c));
                } else {
                    result.append(Character.toUpperCase(c));
                }
            } else {
                result.append(c);
            }
        }
        
        // If no letters are present, reverse the string
        if (!hasLetters) {
            result.reverse();
        }
        
        return result.toString();
    }
}","    }
    public static void main(String[] args) {
    assert(solve((""AsDf"")).equals((""aSdF"")));
    assert(solve((""1234"")).equals((""4321"")));
    assert(solve((""ab"")).equals((""AB"")));
    assert(solve((""#a@C"")).equals((""#A@c"")));
    assert(solve((""#AsdfW^45"")).equals((""#aSDFw^45"")));
    assert(solve((""#6@2"")).equals((""2@6#"")));
    assert(solve((""#$a^D"")).equals((""#$A^d"")));
    assert(solve((""#ccc"")).equals((""#CCC"")));
    }

}
"
HumanEval_162,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ 'twerɛsɛm' yɛ ahwehwɛde biara a, dan null.     / Sɛ wɔde 'text' ahyɛnsode bi ma a, fa md5 hash ahyɛnsode a ɛne no yɛ pɛ no ma no.     // >>> stringToMd5((""Hello world""))
    // Optional.of(""3e25960a79dbc69b674cd4ec67a72c62"")
    public static Optional<String> stringToMd5(String text) {
","import java.security.*;
import java.util.*;

class Problem {
    public static Optional<String> stringToMd5(String text) {
        if (text.isEmpty()) {
            return Optional.empty();
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            byte[] messageDigest = md.digest(text.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : messageDigest) {
                sb.append(String.format(""%02x"", b));
            }
            return Optional.of(sb.toString());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return Optional.empty();
        }
    }
}","    }
    public static void main(String[] args) {
    assert(stringToMd5((""Hello world"")).equals(Optional.of(""3e25960a79dbc69b674cd4ec67a72c62"")));
    assert(stringToMd5(("""")).equals(Optional.empty()));
    assert(stringToMd5((""A B C"")).equals(Optional.of(""0ef78513b0cb8cef12743f5aeb35f888"")));
    assert(stringToMd5((""password"")).equals(Optional.of(""5f4dcc3b5aa765d61d8327deb882cf99"")));
    }

}
"
HumanEval_163,twi_Latn,java,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    / Sɛ nhwɛso:     / ne b, wɔ nea ɛrekɔ so mu.     / Sɛ wɔama no akontaahyɛde a ne b a, ma no nkyerɛwde a ɛwɔ a ne b ntam no mu biako.    // >>> generateIntegers((2l), (8l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))
    // >>> generateIntegers((8l), (2l))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))
    // >>> generateIntegers((10l), (14l))
    // (new ArrayList<Long>(Arrays.asList()))
    public static ArrayList<Long> generateIntegers(long a, long b) {
","import java.util.*;

public class Problem {
    // Given two positive integers a and b, return the even digits between a
    // and b, in ascending order.
    public static ArrayList<Long> generateIntegers(long a, long b) {
        ArrayList<Long> result = new ArrayList<>();

        // Ensure a is the smaller number and b is the larger number
        long start = Math.min(a, b);
        long end = Math.max(a, b);

        // Find and add even numbers in the range [start, end] to the result list
        for (long i = start; i <= end; i++) {
            if (i % 2 == 0) {
                result.add(i);
            }
        }
        
        return result;
    }

    public static void main(String[] args) {
        System.out.println(generateIntegers(2, 8)); // [2, 4, 6, 8]
        System.out.println(generateIntegers(8, 2)); // [2, 4, 6, 8]
        System.out.println(generateIntegers(10, 14)); // []
    }
}","    }
    public static void main(String[] args) {
    assert(generateIntegers((2l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));
    assert(generateIntegers((10l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));
    assert(generateIntegers((132l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));
    assert(generateIntegers((17l), (89l)).equals((new ArrayList<Long>(Arrays.asList()))));
    }

}
"
