task_id,nl,pl,prompt,canonical_solutions,test
HumanEval/0,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦତ୍ତ ସଂଖ୍ୟାର ଭେକ୍ଟରରେ, କୌଣସି ଦୁଇଟି ସଂଖ୍ୟା ଦତ୍ତ ସୀମା ଠାରୁ ପରସ୍ପରର ନିକଟତର କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ. >>> has_close_elements{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}{}}{}{}}{}{}}{}{}}{}{}}{}}{}}{}}{}}{}}{}}{}}}{}}{}}}{}}{}}}{}}}{}}}{}}}{}}}{}}}}{}}}{}}}}}{}}}}{}}}}{}}}}{}}}}}}{}}}}}}{}}}}}}}}}{}}}}}}}}}}{}}}}}}}}}}{}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}
bool has_close_elements(std::vector<float> numbers, float threshold) {
","bool has_close_elements(std::vector<float> numbers, float threshold) {
    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order
    for (size_t i = 1; i < numbers.size(); i++) {
        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = has_close_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));
}
"
HumanEval/1,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ଫଳନ ପାଇଁ ଇନପୁଟ୍ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯେଉଁଥିରେ ନେଷ୍ଟେଡ୍ ବନ୍ଧନୀ ର ଏକାଧିକ ଗୋଷ୍ଠୀ ଅଛି। ଆପଣଙ୍କର ଲକ୍ଷ୍ୟ ହେଉଛି ସେହି ଗୋଷ୍ଠୀକୁ ପୃଥକ ଷ୍ଟ୍ରିଙ୍ଗରେ ଅଲଗା କରିବା ଏବଂ ସେଗୁଡିକର ଭେକ୍ଟର ଫେରସ୍ତ କରିବା। ପୃଥକ ଗୋଷ୍ଠୀ ସନ୍ତୁଳିତ (ପ୍ରତ୍ୟେକ ଖୋଲା ବନ୍ଧନୀ ସଠିକ୍ ଭାବରେ ବନ୍ଦ ହୋଇଛି) ଏବଂ ପରସ୍ପର ମଧ୍ୟରେ ନେଷ୍ଟେଡ୍ ନୁହେଁ _ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗରେ କୌଣସି ସ୍ପେସ୍ ଅଣଦେଖା କରନ୍ତୁ _ >>> ପୃଥକ_ପ୍ୟାରେନ୍_ଗ୍ରୁପ୍ _ "" ()) "" ()) "" ()) "" ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ())
std::vector<std::string> separate_paren_groups(std::string paren_string) {
","std::vector<std::string> separate_paren_groups(std::string paren_string) {
    std::vector<std::string> groups;
    std::string current_group;
    int balance = 0;

    for (char ch : paren_string) {
        if (ch == ' ') continue;  // Ignore spaces

        current_group += ch;
        if (ch == '(') {
            balance++;
        } else if (ch == ')') {
            balance--;
            if (balance == 0) {  // Found a balanced group
                groups.push_back(current_group);
                current_group.clear();
            }
        }
    }

    return groups;
}","}
int main() {
    auto candidate = separate_paren_groups;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<std::string>({(std::string)""(()())"", (std::string)""((()))"", (std::string)""()"", (std::string)""((())()())""})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""((()))"", (std::string)""(((())))""})));
    assert(candidate((""(()(())((())))"")) == (std::vector<std::string>({(std::string)""(()(())((())))""})));
    assert(candidate((""( ) (( )) (( )( ))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""(()())""})));
}
"
HumanEval/2,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ଫ୍ଲୋଟିଂ ପଏଣ୍ଟ ସଂଖ୍ୟା ଦିଆଯାଇଥିବା ବେଳେ ଏହାକୁ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (ଦତ୍ତ ସଂଖ୍ୟା ଠାରୁ ବଡ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା) ଏବଂ ଦଶମିକ ସଂଖ୍ୟା (ବାକି ଅଂଶ ସର୍ବଦା 1 ରୁ ଛୋଟ) ରେ ବିଭକ୍ତ କରାଯାଇପାରିବ । ସଂଖ୍ୟା ର ଦଶମିକ ଅଂଶକୁ ଫେରାନ୍ତୁ । >>> truncate_number((3.5f)) (0.5f)
float truncate_number(float number) {
","float truncate_number(float number) {
    return number - std::floor(number);
}","}
int main() {
    auto candidate = truncate_number;
    assert(candidate((3.5f)) == (0.5f));
    assert(candidate((1.25f)) == (0.25f));
    assert(candidate((123.0f)) == (0.0f));
}
"
HumanEval/3,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ବ୍ୟାଙ୍କ ଖାତାରେ ଜମା ଏବଂ ଉଠାଣ କାରବାରର ଭେକ୍ଟର ଦିଆଯାଇଛି ଯାହା ଶୂନ ସନ୍ତୁଳନ ସହିତ ଆରମ୍ଭ ହୁଏ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଯେ କୌଣସି ସମୟରେ ଖାତାର ସନ୍ତୁଳନ ଶୂନ ତଳେ ପଡ଼େ, ଏବଂ ସେହି ସମୟରେ ଫଳନଟି ସତ୍ୟ ଫେରସ୍ତ ହେବା ଉଚିତ । ଅନ୍ୟଥା ଏହା ମିଥ୍ୟା ଫେରସ୍ତ ହେବା ଉଚିତ । >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) 3}))) (ମିଥ୍ୟା) >>> below_zero(std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5}))) (true)
bool below_zero(std::vector<long> operations) {
","bool below_zero(std::vector<long> operations) {
    long balance = 0;
    for (long op : operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = below_zero;
    assert(candidate((std::vector<long>())) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));
}
"
HumanEval/4,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଇନପୁଟ୍ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ପାଇଁ, ଏହି ଡାଟାସେଟର ମଧ୍ୟମ ଆଖପାଖରେ ମିଆନ୍ ଅବ୍ ସଲ୍ଟ ଡିଭିଆଏନ୍ ଗଣନା କରନ୍ତୁ । ମିଆନ୍ ଅବ୍ ସଲ୍ଟ ଡିଭିଆଏନ୍ ହେଉଛି ପ୍ରତ୍ୟେକ ଉପାଦାନ ଏବଂ ଏକ କେନ୍ଦ୍ର ବିନ୍ଦୁ (ଏହି କ୍ଷେତ୍ରରେ ମଧ୍ୟମ) ମଧ୍ୟରେ ହାରାହାରି ଅବ୍ ସଲ୍ଟ ଡିଭିଆନ୍: MAD = ̊ x - x_mean ̊ >>> mean_absolute_deviation (((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) (1.0f)
float mean_absolute_deviation(std::vector<float> numbers) {
","float mean_absolute_deviation(std::vector<float> numbers) {
    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();
    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, 
                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) 
                / numbers.size();
    return mad;
}","}
int main() {
    auto candidate = mean_absolute_deviation;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));
}
"
HumanEval/5,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ପ୍ରବେଶ ଭେକ୍ଟର ର ପ୍ରତ୍ୟେକ ଦୁଇ କ୍ରମିକ ଉପାଦାନ ମଧ୍ୟରେ ଏକ ସଂଖ୍ୟା 'ଡିଲିମିଟର' ଭର୍ତ୍ତି କରନ୍ତୁ `numbers' >>> intersperse((std::vector<long>()), (4)) (std::vector<long>()) >>> intersperse((std::vector<long>({long) 1, (long) 2, (long) 3}), (4)) (std::vector<long>({long) 1, (long) 4, (long) 2, (long) 4, (long) 3}))
std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
","std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
    if (numbers.empty()) return numbers;

    std::vector<long> result;
    for (size_t i = 0; i < numbers.size(); i++) {
        result.push_back(numbers[i]);
        if (i < numbers.size() - 1) {
            result.push_back(delimeter);
        }
    }
    return result;
}","}
int main() {
    auto candidate = intersperse;
    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));
    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));
}
"
HumanEval/6,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ଫଳନ ପାଇଁ ଇନପୁଟ୍ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯାହାକି ଅନ୍ତଃସ୍ଥଳ ବନ୍ଧନୀ ପାଇଁ ଏକାଧିକ ଗୋଷ୍ଠୀକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ। ପ୍ରତ୍ୟେକ ଗୋଷ୍ଠୀ ପାଇଁ, ବନ୍ଧନୀଗୁଡ଼ିକର ଗଭୀରତମ ସ୍ତରର ନେଷ୍ଟିଂକୁ ଆଉଟପୁଟ୍ କରନ୍ତୁ। ଉଦାହରଣ ସ୍ୱରୂପ (() (()) ରେ ସର୍ବାଧିକ ଦୁଇଟି ସ୍ତର ଅଛି ଯେତେବେଳେ ((())) ରେ ତିନୋଟି ଅଛି। >>> parse_nested_parens ((((((()) ((())) () (((()))))))) (std::vector<long>({(long) 2, (long) 3, (long) 1, (long) 3}))
std::vector<long> parse_nested_parens(std::string paren_string) {
","std::vector<long> parse_nested_parens(std::string paren_string) {
    std::vector<long> depths;
    long current_depth = 0, max_depth = 0;

    for (char ch : paren_string) {
        if (ch == ' ') {
            if (max_depth > 0) {
                depths.push_back(max_depth);
                max_depth = 0;
            }
            current_depth = 0;
        } else if (ch == '(') {
            current_depth++;
            max_depth = std::max(max_depth, current_depth);
        } else if (ch == ')') {
            current_depth--;
        }
    }

    if (max_depth > 0) {
        depths.push_back(max_depth);
    }

    return depths;
}","}
int main() {
    auto candidate = parse_nested_parens;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((""(()(())((())))"")) == (std::vector<long>({(long)4})));
}
"
HumanEval/7,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଇନପୁଟ୍ ଭେକ୍ଟରକୁ କେବଳ ସେହିସବୁ ସ୍ଟ୍ରିଙ୍ଗ୍ ପାଇଁ ଫିଲ୍ଟର୍ କରନ୍ତୁ ଯେଉଁଥିରେ ଦିଆଯାଇଥିବା ସ୍ଟ୍ରିଙ୍ଗ୍ >>> filter_by_substring(((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_substring((((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bacd"", (std::string) ""cde"", (std::string) ""array""})), (""a"") (std::vector<std::string>(({(std::string) abc"", (std::string) ""bacd"", (std::string) ""array""}))
std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
","std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.find(substring) != std::string::npos) {
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_substring;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""aaaxxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""aaaxxy"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""grunt"", (std::string)""trumpet"", (std::string)""prune"", (std::string)""gruesome""})), (""run"")) == (std::vector<std::string>({(std::string)""grunt"", (std::string)""prune""})));
}
"
HumanEval/8,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଭେକ୍ଟର ପାଇଁ, ଏକ ଟାପଲ୍ ଫେରାନ୍ତୁ ଯାହା ଏକ ଭେକ୍ଟରରେ ଥିବା ସମସ୍ତ ଇଣ୍ଟେଜରଗୁଡିକର ସମୁଦାୟ ଏବଂ ଉତ୍ପାଦିତ _ ଖାଲି ସମୁଦାୟ 0 ସହିତ ସମାନ ହେବା ଉଚିତ ଏବଂ ଖାଲି ଉତ୍ପାଦ 1 ସହିତ ସମାନ ହେବା ଉଚିତ _ >>> ସମ_ ଉତ୍ପାଦ _ (((std:: ଭେକ୍ଟର _<long> _))) (std::make_tuple _0, 1)) >>> ସମ_ ଉତ୍ପାଦ _ (((std:: ଭେକ୍ଟର _<long> _{long) 1, (long) 2, (long) 3, (long) 4}))) (std::make_tuple _________, 24))
std::tuple<long, long> sum_product(std::vector<long> numbers) {
","std::tuple<long, long> sum_product(std::vector<long> numbers) {
    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);
    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());
    return std::make_tuple(sum, product);
}","}
int main() {
    auto candidate = sum_product;
    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));
    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));
    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));
}
"
HumanEval/9,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଭେକ୍ଟରରୁ, କ୍ରମରେ ଦିଆଯାଇଥିବା ମୁହୂର୍ତ୍ତ ପର୍ଯ୍ୟନ୍ତ ମିଳିଥିବା ରୋଲିଂ ସର୍ବାଧିକ ଉପାଦାନର ଭେକ୍ଟର ସୃଷ୍ଟି କରନ୍ତୁ. >>> rolling_max(((std::vector<long>({long) 1, (long) 2, (long) 3, (long) 2, (long) 3, (long) 4, (long) 2}))) (std::vector<long>({long) 1, (long) 2, (long) 3, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4}))
std::vector<long> rolling_max(std::vector<long> numbers) {
","std::vector<long> rolling_max(std::vector<long> numbers) {
    std::vector<long> result;
    long max_so_far = LONG_MIN;

    for (long num : numbers) {
        max_so_far = std::max(max_so_far, num);
        result.push_back(max_so_far);
    }

    return result;
}","}
int main() {
    auto candidate = rolling_max;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));
}
"
HumanEval/10,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ହେଉଛିଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମ ଖୋଜନ୍ତୁଃ - ପାଲିଣ୍ଡ୍ରୋମିକ୍ ସଫିକ୍ସ ପୂର୍ବରୁ ଆସୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପ୍ରିଫିକ୍ସର ଷ୍ଟ୍ରିଙ୍ଗ୍ ରିଭର୍ସକୁ ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଶେଷକୁ ଯୋଡନ୍ତୁଃ >>> make_palindrome ((("""")) ("""") >>> make_palindrome (((""cat"")) (""catac"") >>> make_palindrome (((""cata"")) (""catac"")
std::string make_palindrome(std::string string) {
","std::string make_palindrome(std::string string) {
    auto is_palindrome = [](const std::string &s) {
        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());
    };

    for (size_t i = 0; i < string.size(); ++i) {
        if (is_palindrome(string.substr(i))) {
            std::string prefix = string.substr(0, i);
            std::reverse(prefix.begin(), prefix.end());
            return string + prefix;
        }
    }

    return string;
}","}
int main() {
    auto candidate = make_palindrome;
    assert(candidate(("""")) == (""""));
    assert(candidate((""x"")) == (""x""));
    assert(candidate((""xyz"")) == (""xyzyx""));
    assert(candidate((""xyx"")) == (""xyx""));
    assert(candidate((""jerry"")) == (""jerryrrej""));
}
"
HumanEval/11,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଇନପୁଟ୍ ହେଉଛି ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ୍ a ଏବଂ b ଯାହା କେବଳ 1s ଏବଂ 0s ରେ ଗଠିତ । ଏହି ଇନପୁଟ୍ ଉପରେ ବାଇନାରୀ XOR କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ଫେରାନ୍ତୁ । >>> string_xor((""010""), (""110"")) (""100"")
std::string string_xor(std::string a, std::string b) {
","std::string string_xor(std::string a, std::string b) {
    std::string result;
    for (size_t i = 0; i < a.size(); ++i) {
        result += (a[i] == b[i]) ? '0' : '1';
    }
    return result;
}","}
int main() {
    auto candidate = string_xor;
    assert(candidate((""111000""), (""101010"")) == (""010010""));
    assert(candidate((""1""), (""1"")) == (""0""));
    assert(candidate((""0101""), (""0000"")) == (""0101""));
}
"
HumanEval/12,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// string ର ଭେକ୍ଟର ମଧ୍ୟରୁ, ସବୁଠାରୁ ଲମ୍ବାକୁ ଫେରାଇଦିଅନ୍ତୁ. ସମାନ ଲମ୍ବର ଏକାଧିକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଥିଲେ ପ୍ରଥମକୁ ଫେରାଇଦିଅନ୍ତୁ. ଇନପୁଟ୍ ଭେକ୍ଟର ଖାଲି ଥିଲେ None କୁ ଫେରାଇଦିଅନ୍ତୁ. >>> longest(((std::vector<std::string>())) std::nullopt >>> longest(((std::vector<std::string>{(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) ""a"" >>> longest(((std::vector<std::string>({(std::string) ""a"", (std::string) ""bb"", (stdstring) ""ccc""}))) ""ccc""
std::optional<std::string> longest(std::vector<std::string> strings) {
","std::optional<std::string> longest(std::vector<std::string> strings) {
    if (strings.empty()) return std::nullopt;

    return *std::max_element(strings.begin(), strings.end(), 
                             [](const std::string& a, const std::string& b) {
                                 return a.size() < b.size();
                             });
}","}
int main() {
    auto candidate = longest;
    assert(candidate((std::vector<std::string>())) == std::nullopt);
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == ""x"");
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""yyy"", (std::string)""zzzz"", (std::string)""www"", (std::string)""kkkk"", (std::string)""abc""}))) == ""zzzz"");
}
"
HumanEval/13,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ସର୍ବୋଚ୍ଚ ସାଧାରଣ ବିଭାଜକ a ଏବଂ b >>> ସର୍ବୋଚ୍ଚ_ସମାନ_ବିଭାଜକ (((3), (5)) (1) >>> ସର୍ବୋଚ୍ଚ_ସମାନ_ବିଭାଜକ (((25), (15)) (5)
long greatest_common_divisor(long a, long b) {
","long greatest_common_divisor(long a, long b) {
    return std::gcd(a, b);
}","}
int main() {
    auto candidate = greatest_common_divisor;
    assert(candidate((3), (7)) == (1));
    assert(candidate((10), (15)) == (5));
    assert(candidate((49), (14)) == (7));
    assert(candidate((144), (60)) == (12));
}
"
HumanEval/14,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ସମସ୍ତ ଉପସର୍ଗର ଭେକ୍ଟରକୁ ଫେରାଇଥାଏ, ଯାହାକି ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗର ସବୁଠାରୁ ଛୋଟରୁ ସବୁଠାରୁ ଲମ୍ବା ପର୍ଯ୍ୟନ୍ତ ହୋଇଥାଏ ।
std::vector<std::string> all_prefixes(std::string string) {
","std::vector<std::string> all_prefixes(std::string string) {
    std::vector<std::string> prefixes;
    for (size_t i = 1; i <= string.size(); ++i) {
        prefixes.push_back(string.substr(0, i));
    }
    return prefixes;
}","}
int main() {
    auto candidate = all_prefixes;
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""asdfgh"")) == (std::vector<std::string>({(std::string)""a"", (std::string)""as"", (std::string)""asd"", (std::string)""asdf"", (std::string)""asdfg"", (std::string)""asdfgh""})));
    assert(candidate((""WWW"")) == (std::vector<std::string>({(std::string)""W"", (std::string)""WW"", (std::string)""WWW""})));
}
"
HumanEval/15,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 0 ରୁ ଆରମ୍ଭ କରି n ପର୍ଯ୍ୟନ୍ତ ଅନ୍ତର୍ଭୁକ୍ତ ଥିବା ସ୍ଥାନ-ସୀମିତ ସଂଖ୍ୟା ବିଶିଷ୍ଟ ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇଥାଏ. >>> string_sequence((0)) (""0"") >>> string_sequence((5)) (""0 1 2 3 4 5"")
std::string string_sequence(long n) {
","std::string string_sequence(long n) {
    std::ostringstream oss;
    for (long i = 0; i <= n; ++i) {
        if (i > 0) oss << "" "";
        oss << i;
    }
    return oss.str();
}","}
int main() {
    auto candidate = string_sequence;
    assert(candidate((0)) == (""0""));
    assert(candidate((3)) == (""0 1 2 3""));
    assert(candidate((10)) == (""0 1 2 3 4 5 6 7 8 9 10""));
}
"
HumanEval/16,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଗଲା, କେତେ ଅଲଗା ଅକ୍ଷର (କେସକୁ ନେଇ ନିର୍ବିଶେଷରେ) ଏହା ତିଆରି ହୁଏ ଜାଣନ୍ତୁ >>> count_distinct_characters (((""xyzXYZ"")) (3) >>> count_distinct_characters (((""Jerry"")) (4)
long count_distinct_characters(std::string string) {
","long count_distinct_characters(std::string string) {
    std::unordered_set<char> distinct_chars;
    for (char ch : string) {
        distinct_chars.insert(std::tolower(ch));
    }
    return distinct_chars.size();
}","}
int main() {
    auto candidate = count_distinct_characters;
    assert(candidate(("""")) == (0));
    assert(candidate((""abcde"")) == (5));
    assert(candidate((""abcdecadeCADE"")) == (5));
    assert(candidate((""aaaaAAAAaaaa"")) == (1));
    assert(candidate((""Jerry jERRY JeRRRY"")) == (5));
}
"
HumanEval/17,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ଫଙ୍କସନକୁ ଇନପୁଟ କରିବା ପାଇଁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଅଛି ଯାହା ASCII ଫର୍ମାଟରେ ମ୍ୟୁଜିକାଲ ନୋଟସ୍ କୁ ଦର୍ଶାଏ । ଆପଣଙ୍କର କାମ ହେଉଛି ଅନେକ ବିଟ୍ କୁ ସନ୍ତୁଳିତ ଇଣ୍ଟେଜର ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର କୁ ବିଶ୍ଳେଷଣ କରିବା: 'o' ନୋଟ୍, ଶେଷ ଚାରି ବିଟ୍ 'o' ର ର' - ଅଧା ନୋଟ୍, ଶେଷ ଦୁଇ ବିଟ୍ 'ର' - ଚତୁର୍ଥ ନୋଟ୍, ଶେଷ ଏକ ବିଟ୍ >>> parse_music. ((""o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o
std::vector<long> parse_music(std::string music_string) {
","std::vector<long> parse_music(std::string music_string) {
    std::vector<long> beats;
    std::istringstream iss(music_string);
    std::string note;
    
    while (iss >> note) {
        if (note == ""o"") beats.push_back(4);
        else if (note == ""o|"") beats.push_back(2);
        else if (note == "".|"") beats.push_back(1);
    }

    return beats;
}","}
int main() {
    auto candidate = parse_music;
    assert(candidate(("""")) == (std::vector<long>()));
    assert(candidate((""o o o o"")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate(("".| .| .| .|"")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));
    assert(candidate((""o| o| .| .| o o o o"")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));
    assert(candidate((""o| .| o| .| o o| o o|"")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));
}
"
HumanEval/18,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ମୂଳ ବାକ୍ୟଖଣ୍ଡରେ କେତେଥର ଗୋଟିଏ ଉପବାକ୍ୟଖଣ୍ଡ ମିଳିପାରିବ ତାହା ଖୋଜନ୍ତୁ. ପରସ୍ପର ଉପରେ ଅତିବାହିତ ହେଉଥିବା ଘଟଣା ଗୁଡିକୁ ଗଣନା କରନ୍ତୁ. >>> how_many_times((""""), (""a"")) (0) >>> how_many_times(""aaa""), (""a"")) (3) >>> how_many_times(""aaaa""), (""aa"") (3)
long how_many_times(std::string string, std::string substring) {
","long how_many_times(std::string string, std::string substring) {
    if (substring.empty()) return 0;
    
    long count = 0;
    size_t pos = 0;
    
    while ((pos = string.find(substring, pos)) != std::string::npos) {
        count++;
        pos++;  // Move one position forward to count overlapping occurrences
    }
    
    return count;
}","}
int main() {
    auto candidate = how_many_times;
    assert(candidate((""""), (""x"")) == (0));
    assert(candidate((""xyxyxyx""), (""x"")) == (4));
    assert(candidate((""cacacacac""), (""cac"")) == (4));
    assert(candidate((""john doe""), (""john"")) == (1));
}
"
HumanEval/19,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ନିବେଶ ହେଉଛି 'ଶୂନ'ରୁ 'ନଅ' ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ସ୍ପେସ୍-ସୀମିତ ଷ୍ଟ୍ରିଙ୍ଗ୍. ବୈଧ ବିକଳ୍ପଗୁଡ଼ିକ ହେଉଛି 'ଶୂନ', 'ଏକ', 'ଦୁଇ', 'ତିନି', 'ଚାରି', 'ପାଞ୍ଚ', 'ଛଅ', 'ସାତ', 'ଆଠ' ଏବଂ 'ନଅ'। ସଂଖ୍ୟାଗୁଡ଼ିକ ସହିତ ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ଛୋଟରୁ ବଡ଼ ପର୍ଯ୍ୟନ୍ତ ସର୍ଟ କରନ୍ତୁ >>> sort_numbers (((""ତିନି ଏକ ପାଞ୍ଚ"")) (""ଏକ ତିନି ପାଞ୍ଚ"")
std::string sort_numbers(std::string numbers) {
","std::string sort_numbers(std::string numbers) {
    std::unordered_map<std::string, int> num_map = {
        {""zero"", 0}, {""one"", 1}, {""two"", 2}, {""three"", 3}, {""four"", 4},
        {""five"", 5}, {""six"", 6}, {""seven"", 7}, {""eight"", 8}, {""nine"", 9}
    };

    std::unordered_map<int, std::string> rev_map = {
        {0, ""zero""}, {1, ""one""}, {2, ""two""}, {3, ""three""}, {4, ""four""},
        {5, ""five""}, {6, ""six""}, {7, ""seven""}, {8, ""eight""}, {9, ""nine""}
    };

    std::istringstream iss(numbers);
    std::vector<int> num_list;
    std::string word;

    while (iss >> word) {
        num_list.push_back(num_map[word]);
    }

    std::sort(num_list.begin(), num_list.end());

    std::ostringstream oss;
    for (size_t i = 0; i < num_list.size(); ++i) {
        if (i > 0) oss << "" "";
        oss << rev_map[num_list[i]];
    }

    return oss.str();
}","}
int main() {
    auto candidate = sort_numbers;
    assert(candidate(("""")) == (""""));
    assert(candidate((""three"")) == (""three""));
    assert(candidate((""three five nine"")) == (""three five nine""));
    assert(candidate((""five zero four seven nine eight"")) == (""zero four five seven eight nine""));
    assert(candidate((""six five four three two one zero"")) == (""zero one two three four five six""));
}
"
HumanEval/20,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଯୋଗାଣ ଭେକ୍ଟରରୁ (ଅତିକମରେ ଦୁଇଟି ଲମ୍ବ) ଦୁଇଗୋଟିକୁ ବାଛନ୍ତୁ ଏବଂ ପରସ୍ପରର ନିକଟତମ ହୋଇଥିବା ଦୁଇଟିକୁ ଫେରାନ୍ତୁ ଏବଂ ସେଗୁଡିକୁ କ୍ରମରେ ଫେରାନ୍ତୁ (ଛୋଟ ସଂଖ୍ୟା, ବଡ ସଂଖ୍ୟା) । >>> find_closest_elements (ନିଜ ନିକଟତମ ଉପାଦାନ) >>> find_closest_elements (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ)) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ) (ନିଜ ନିକଟତମ ଉପାଦାନ)
std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
","std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
    std::sort(numbers.begin(), numbers.end());
    float min_diff = std::numeric_limits<float>::max();
    float num1 = 0, num2 = 0;

    for (size_t i = 1; i < numbers.size(); ++i) {
        float diff = numbers[i] - numbers[i - 1];
        if (diff < min_diff) {
            min_diff = diff;
            num1 = numbers[i - 1];
            num2 = numbers[i];
        }
    }

    return std::make_tuple(num1, num2);
}","}
int main() {
    auto candidate = find_closest_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));
}
"
HumanEval/21,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ସଂଖ୍ୟା (ଅତିକମରେ ଦୁଇଟି ଉପାଦାନର) ଦିଆଗଲା, ସେହି ଭେକ୍ଟରକୁ ଏକ ସରଳ ପରିବର୍ତ୍ତନ ପ୍ରୟୋଗ କରନ୍ତୁ, ଯେପରି ସର୍ବନିମ୍ନ ସଂଖ୍ୟା 0 ହେବ ଏବଂ ସର୍ବବୃହତ 1 ହେବ >>> rescale_to_unit{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}}{}}{}{}}{}}{}{}}{}}{}}{}{}}{}}{}{}{}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}}{}}}{}}}{}}}{}}}{}}}{}}}}{}}}}{}}}}}{}}}}}{}}}}}}{}}}}}}}{}}}}}}}{}}}}}}}}}{}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
std::vector<float> rescale_to_unit(std::vector<float> numbers) {
","std::vector<float> rescale_to_unit(std::vector<float> numbers) {
    float min_val = *std::min_element(numbers.begin(), numbers.end());
    float max_val = *std::max_element(numbers.begin(), numbers.end());

    if (min_val == max_val) {
        std::fill(numbers.begin(), numbers.end(), 0.0f);
        return numbers;
    }

    for (float &num : numbers) {
        num = (num - min_val) / (max_val - min_val);
    }

    return numbers;
}","}
int main() {
    auto candidate = rescale_to_unit;
    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
}
"
HumanEval/22,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଫିଲ୍ଟର ଯେକୌଣସି cppthon ମୂଲ୍ୟର ଦିଆଯାଇଥିବା ଭେକ୍ଟର କେବଳ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପାଇଁ >>> ଫିଲ୍ଟର_ଇଣ୍ଟିଜରସ (((std::vector<std::any>({(std::string) ""a"", (std::string) 3.14f, (std::string) 5}))) (std::vector<long>({(long) 5})) >>> ଫିଲ୍ଟର_ଇଣ୍ଟିଜରସ (((std::vector<std::any>({1, 2, 3, ""abc"", std::<long,map>), std::vector<long>()))) (std::vector<long>({(long) 1, (long) 2, (long) 3}))
std::vector<long> filter_integers(std::vector<std::any> values) {
","std::vector<long> filter_integers(std::vector<std::any> values) {
    std::vector<long> result;
    for (const auto& val : values) {
        if (val.type() == typeid(long)) {
            result.push_back(std::any_cast<long>(val));
        } else if (val.type() == typeid(int)) {
            result.push_back(std::any_cast<int>(val));
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_integers;
    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));
    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, ""adasd""}))) == (std::vector<long>({(long)4, (long)9})));
    assert(candidate((std::vector<std::any>({3, ""c"", 3, 3, ""a"", ""b""}))) == (std::vector<long>({(long)3, (long)3, (long)3})));
}
"
HumanEval/23,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗର ଲମ୍ବକୁ ଫେରାଇଥାଏ >>> string_length(("""")) (0) >>> string_length((""abc"")) (3)
long string_length(std::string string) {
","long string_length(std::string string) {
    return string.length();
}","}
int main() {
    auto candidate = string_length;
    assert(candidate(("""")) == (0));
    assert(candidate((""x"")) == (1));
    assert(candidate((""asdasnakj"")) == (9));
}
"
HumanEval/24,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// n ପାଇଁ, ସବୁଠାରୁ ବଡ ସଂଖ୍ୟା ଖୋଜନ୍ତୁ ଯାହା n କୁ ସମାନ ଭାବରେ ବିଭକ୍ତ କରେ, n ଠାରୁ ଛୋଟ >>> ସବୁଠାରୁ ବଡ_ବିଭାଜକ (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_) (_BAR_) (_) (_BAR_) (_BAR_) (_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_BAR_) (_) (_BAR_
long largest_divisor(long n) {
","long largest_divisor(long n) {
    for (long i = n / 2; i > 0; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return 1;
}","}
int main() {
    auto candidate = largest_divisor;
    assert(candidate((3)) == (1));
    assert(candidate((7)) == (1));
    assert(candidate((10)) == (5));
    assert(candidate((100)) == (50));
    assert(candidate((49)) == (7));
}
"
HumanEval/25,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ ନିର୍ଦ୍ଦିଷ୍ଟ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ପ୍ରାଥମିକ ଗୁଣକଗୁଡ଼ିକର ଭେକ୍ଟର ଫେରାନ୍ତୁ, ଛୋଟରୁ ବଡ଼ ପର୍ଯ୍ୟନ୍ତ କ୍ରମରେ _ ପ୍ରତ୍ୟେକ ଗୁଣକକୁ କେତେଥର ଫ୍ୟାକ୍ଟୋରିଜରେ ଦେଖାଯାଏ ତାହା ସହିତ ସମାନ ହେବା ଉଚିତ _ ଇନପୁଟ୍ ସଂଖ୍ୟା ସମସ୍ତ ଗୁଣକଗୁଡ଼ିକର ଗୁଣନ ସହିତ ସମାନ ହେବା ଉଚିତ _ >>> ଫ୍ୟାକ୍ଟୋରିଜ କରନ୍ତୁ _ (((8)) (std::vector<long>{(long) 2, (long) 2, (long) 2})) >>> ଫ୍ୟାକ୍ଟୋରିଜ କରନ୍ତୁ _ (((25)) (std::vector<long>{(long) 5, (long) 5})) >>> >>> ଫ୍ୟାକ୍ଟୋରିଜ କରନ୍ତୁ _ ((((70)) (std::vector<long>{(long) 2, (long) 5, (long) 7}))
std::vector<long> factorize(long n) {
","std::vector<long> factorize(long n) {
    std::vector<long> factors;
    for (long i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 1) {
        factors.push_back(n);
    }
    return factors;
}","}
int main() {
    auto candidate = factorize;
    assert(candidate((2)) == (std::vector<long>({(long)2})));
    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));
    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));
    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));
    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));
    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));
}
"
HumanEval/26,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟରରୁ, ସମସ୍ତ ଉପାଦାନଗୁଡ଼ିକୁ କାଢ଼ି ଦିଅନ୍ତୁ ଯାହା ଏକାଧିକ ଥର ଦେଖାଯାଏ। ଉପାଦାନଗୁଡ଼ିକର କ୍ରମାଙ୍କକୁ ଇନପୁଟରେ ଥିବା ସମାନ ରଖନ୍ତୁ। >>> remove_duplicates((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 4}))) (std::vector<long>({(long) 1, (long) 3, (long) 4}))
std::vector<long> remove_duplicates(std::vector<long> numbers) {
","std::vector<long> remove_duplicates(std::vector<long> numbers) {
    std::unordered_map<long, int> freq;
    for (long num : numbers) {
        freq[num]++;
    }

    std::vector<long> result;
    for (long num : numbers) {
        if (freq[num] == 1) {
            result.push_back(num);
        }
    }

    return result;
}","}
int main() {
    auto candidate = remove_duplicates;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));
}
"
HumanEval/27,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ ଧାଡ଼ି ପାଇଁ, ଛୋଟ ଅକ୍ଷରକୁ ବଡ଼ ଅକ୍ଷର ଓ ବଡ଼ ଅକ୍ଷରକୁ ଛୋଟ ଅକ୍ଷର ଭାବରେ ଫ୍ଲପ୍ କରନ୍ତୁ. >>> flip_case (((""Hello"")) (""HELLO"")
std::string flip_case(std::string string) {
","std::string flip_case(std::string string) {
    for (char &ch : string) {
        if (std::islower(ch)) {
            ch = std::toupper(ch);
        } else if (std::isupper(ch)) {
            ch = std::tolower(ch);
        }
    }
    return string;
}","}
int main() {
    auto candidate = flip_case;
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hello!"")) == (""hELLO!""));
    assert(candidate((""These violent delights have violent ends"")) == (""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""));
}
"
HumanEval/28,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକକ ଷ୍ଟ୍ରିଙ୍ଗ ରେ ଷ୍ଟ୍ରିଙ୍ଗ ଗୁଡିକର କନକଟେନେଟ ଭେକ୍ଟର >>> କନକଟେନେଟ ((((std::vector<std::string>())) ("""") >>> କନକଟେନେଟ ((((std::vector<std::string>({(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) (""abc"")
std::string concatenate(std::vector<std::string> strings) {
","std::string concatenate(std::vector<std::string> strings) {
    std::string result;
    for (const auto& str : strings) {
        result += str;
    }
    return result;
}","}
int main() {
    auto candidate = concatenate;
    assert(candidate((std::vector<std::string>())) == (""""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == (""xyz""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z"", (std::string)""w"", (std::string)""k""}))) == (""xyzwk""));
}
"
HumanEval/29,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଇନପୁଟ୍ ଭେକ୍ଟର ରେ କେବଳ ସେହି ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ଫିଲ୍ଟର୍ କରନ୍ତୁ ଯାହା ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଉପସର୍ଗ ସହିତ ଆରମ୍ଭ ହୋଇଥାଏ. >>> filter_by_prefix((std::vector<std::string>()), (""a"")) (std::vector<std::string>()) >>> filter_by_prefix(((std::vector<std::string>({(std::string) ""abc"", (std::string) ""bcd"", (std::string) ""cde"", (stdstring) ""array""})), (""a"") (std::vector<std::string>({(std::string) ""abc"", (std::string) ""array""}))
std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
","std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_prefix;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
}
"
HumanEval/30,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> get_positive(std::vector<long> l) {
","std::vector<long> get_positive(std::vector<long> l) {
    std::vector<long> result;
    for (long num : l) {
        if (num > 0) {
            result.push_back(num);
        }
    }
    return result;
}","}
int main() {
    auto candidate = get_positive;
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));
    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/31,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଯଦି କୌଣସି ସଂଖ୍ୟା ଅଶୂନ୍ୟ ହୋଇଥାଏ ତେବେ ଏହା ସତ୍ୟ ହୋଇଥାଏ ଏବଂ ଅନ୍ୟଥା ଭୁଲ ହୋଇଥାଏ । >>> is_prime((6)) (false) >>> is_prime((101)) (true) >>> is_prime((11) (true) >>> is_prime((13441)) (true) >>> is_prime(61)) (true) >>> is_prime(4)) (false) >>> is_prime(1)) (false)
bool is_prime(long n) {
","bool is_prime(long n) {
    if (n < 2) return false;
    if (n < 4) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (long i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_prime;
    assert(candidate((6)) == (false));
    assert(candidate((101)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((13441)) == (true));
    assert(candidate((61)) == (true));
    assert(candidate((4)) == (false));
    assert(candidate((1)) == (false));
    assert(candidate((5)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((17)) == (true));
    assert(candidate((85)) == (false));
    assert(candidate((77)) == (false));
    assert(candidate((255379)) == (false));
}
"
HumanEval/33,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ଫଙ୍କସନ ଏକ ଭେକ୍ଟର l ନେଇଥାଏ ଏବଂ ଏକ ଭେକ୍ଟର l' ଫେରାଇଥାଏ, ଯେପରିକି l' ସେହି ସବୁ ସୂଚକାଙ୍କରେ l ସହିତ ସମାନ ହୋଇଥାଏ ଯାହା ତିନି ଭାଗରେ ବିଭକ୍ତ ହୋଇନଥାଏ, କିନ୍ତୁ ଏହାର ମୂଲ୍ୟ ସେହି ସବୁ ସୂଚକାଙ୍କରେ lର ମୂଲ୍ୟ ସହିତ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ସର୍ଟ ହୋଇଥାଏ । >>> sort_third: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_third: vector<long>{(long>{(long) 5, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 2}))) (std: vector<(long>{(long>{(long) 2, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 5})
std::vector<long> sort_third(std::vector<long> l) {
","std::vector<long> sort_third(std::vector<long> l) {
    std::vector<long> third_indices;
    for (size_t i = 0; i < l.size(); i += 3) {
        third_indices.push_back(l[i]);
    }
    std::sort(third_indices.begin(), third_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 3) {
        l[i] = third_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_third;
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));
}
"
HumanEval/34,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟରରେ ସର୍ଟ ହୋଇଥିବା ଅନନ୍ୟ ଉପାଦାନଗୁଡ଼ିକୁ ଫେରାଇଥାଏ >>> unique((std::vector<long>({(long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))
std::vector<long> unique(std::vector<long> l) {
","std::vector<long> unique(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    return l;
}","}
int main() {
    auto candidate = unique;
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));
}
"
HumanEval/35,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଭେକ୍ଟରରେ ସର୍ବାଧିକ ଉପାଦାନକୁ ଫେରାଇଥାଏ. >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long) -5, (long) 2, (long) -3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)
long max_element(std::vector<long> l) {
","long max_element(std::vector<long> l) {
    return *std::max_element(l.begin(), l.end());
}","}
int main() {
    auto candidate = max_element;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));
}
"
HumanEval/36,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 7 ଅଙ୍କଟି 11 କିମ୍ବା 13 ଦ୍ବାରା ବିଭକ୍ତ ହେଉଥିବା n ଠାରୁ କମ୍ ସଂଖ୍ଯା ରେ କେତେଥର ଦେଖାଯାଏ ତାହା ଫେରାଇଥାଏ. >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)
long fizz_buzz(long n) {
","long fizz_buzz(long n) {
    long count = 0;
    for (long i = 0; i < n; i++) {
        if (i % 11 == 0 || i % 13 == 0) {
            long temp = i;
            while (temp > 0) {
                if (temp % 10 == 7) count++;
                temp /= 10;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = fizz_buzz;
    assert(candidate((50)) == (0));
    assert(candidate((78)) == (2));
    assert(candidate((79)) == (3));
    assert(candidate((100)) == (3));
    assert(candidate((200)) == (6));
    assert(candidate((4000)) == (192));
    assert(candidate((10000)) == (639));
    assert(candidate((100000)) == (8026));
}
"
HumanEval/37,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ଫଙ୍କସନ ଏକ ଭେକ୍ଟର l ନେଇଥାଏ ଏବଂ ଏକ ଭେକ୍ଟର l' ଫେରାଇଥାଏ, ଯେପରିକି l ଅଜଣା ସୂଚକାଙ୍କରେ l ସହିତ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ଏହାର ମୂଲ୍ୟ l ର ଯୁଗ୍ମ ସୂଚକାଙ୍କରେ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ସର୍ଟ ହୋଇଥାଏ । >>> sort_even: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_even: vector<long>{(long) 5, (long) 6, (long) 3, (long) 4}))) (std: vector<long>{(long) 3, (long) 6, (long) 5, (long) 4}))
std::vector<long> sort_even(std::vector<long> l) {
","std::vector<long> sort_even(std::vector<long> l) {
    std::vector<long> even_indices;
    for (size_t i = 0; i < l.size(); i += 2) {
        even_indices.push_back(l[i]);
    }
    std::sort(even_indices.begin(), even_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 2) {
        l[i] = even_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_even;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));
}
"
HumanEval/39,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// prime_fib n-ତମ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହାକି ଏକ ଫିବୋନାସୀ ସଂଖ୍ୟା ଅଟେ ଏବଂ ଏହା ମଧ୍ୟ ଏକ ପ୍ରାଇମ ଅଟେ. >>> prime_fib((1)) (2) >>> prime_fib(2)) (3) >>> prime_fib(3)) (5) >>> prime_fib(4)) (13) >>> prime_fib(5)) (89)
long prime_fib(long n) {
","bool is_prime(long num) {
    if (num < 2) return false;
    if (num < 4) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (long i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

long prime_fib(long n) {
    std::vector<long> prime_fibs;
    long a = 1, b = 1;
    while (prime_fibs.size() < n) {
        long next = a + b;
        a = b;
        b = next;
        if (is_prime(next)) {
            prime_fibs.push_back(next);
        }
    }
    return prime_fibs[n - 1];
}","}
int main() {
    auto candidate = prime_fib;
    assert(candidate((1)) == (2));
    assert(candidate((2)) == (3));
    assert(candidate((3)) == (5));
    assert(candidate((4)) == (13));
    assert(candidate((5)) == (89));
    assert(candidate((6)) == (233));
    assert(candidate((7)) == (1597));
    assert(candidate((8)) == (28657));
    assert(candidate((9)) == (514229));
    assert(candidate((10)) == (433494437));
}
"
HumanEval/40,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଟ୍ରିପଲ୍ସସମ୍-ଟୁ-ଜିରୋ ଏକ ଭେକ୍ଟର ଇଣ୍ଟିଜରକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ । ଏହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଭେକ୍ଟରରେ ତିନୋଟି ଭିନ୍ନ ଉପାଦାନ ଅଛି ଯାହା ଶୂନ୍ୟକୁ ଯୋଗ କରିଥାଏ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା ଅନ୍ୟଥା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା ଅନ୍ୟଥା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା ଅନ୍ୟଥା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା । >>> ଟ୍ରିପଲ୍ସମ୍-ଟୁ-ଜିରୋ, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ଏବଂ ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମିଥ୍ୟା, ମି
bool triples_sum_to_zero(std::vector<long> l) {
","bool triples_sum_to_zero(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    for (size_t i = 0; i < n - 2; i++) {
        size_t left = i + 1, right = n - 1;
        while (left < right) {
            long sum = l[i] + l[left] + l[right];
            if (sum == 0) return true;
            else if (sum < 0) left++;
            else right--;
        }
    }
    
    return false;
}","}
int main() {
    auto candidate = triples_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));
    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));
}
"
HumanEval/41,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସଡକ କୁ କଳ୍ପନା କର ଯାହା ଏକ ଅନନ୍ତ ରୂପରେ ସଠିକ ଅଟେ. n ଗାଡି ବାମ ରୁ ଡାହାଣ କୁ ଯାଉଛି; ଏକ ସମୟରେ, n ଗାଡି ର ଅଲଗା ସେଟ ଡାହାଣ ରୁ ବାମ କୁ ଯାଉଛି. ଗାଡି ର ଦୁଇ ସେଟ ପରସ୍ପର ଠାରୁ ବହୁତ ଦୂରରେ ଆରମ୍ଭ ହୁଏ. ସବୁ ଗାଡି ସମାନ ବେଗ ରେ ଗତି କରେ. ଦୁଇ ଗାଡି କୁ ଧକ୍କା ଲାଗେ ଯେବେ ବାମ ରୁ ଡାହାଣ କୁ ଯାଉଥିବା ଗାଡି ଡାହାଣ ରୁ ବାମ କୁ ଯାଉଥିବା ଗାଡି କୁ ଧକ୍କା ଦିଏ. କିନ୍ତୁ ଗାଡି ଗୁଡିକ ଅନନ୍ତ ରୂପରେ ଦୃଢ ଓ ମଜବୁତ; ଫଳ ସ୍ବରୂପ ସେମାନେ ନିଜ ଗତି ପଥ ରେ ଗତି ଜାରି ରଖନ୍ତି ଯେପରି ସେମାନେ ଧକ୍କା ଖାଇ ନାହାଁନ୍ତି. ଏହି ଫଳନ ଏହିପରି ଧକ୍କା ର ସଂଖ୍ୟା କୁ output କରେ.
long car_race_collision(long n) {
","long car_race_collision(long n) {
    return n * n;
}","}
int main() {
    auto candidate = car_race_collision;
    assert(candidate((2)) == (4));
    assert(candidate((3)) == (9));
    assert(candidate((4)) == (16));
    assert(candidate((8)) == (64));
    assert(candidate((10)) == (100));
}
"
HumanEval/42,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଉପାଦାନ ସହିତ ଭେକ୍ଟରକୁ ୧ ଦ୍ୱାରା ବୃଦ୍ଧି କରନ୍ତୁ. >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>{long>(5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{(long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))
std::vector<long> incr_list(std::vector<long> l) {
","std::vector<long> incr_list(std::vector<long> l) {
    for (long &num : l) {
        num++;
    }
    return l;
}","}
int main() {
    auto candidate = incr_list;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));
    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));
}
"
HumanEval/43,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// pairs_sum_to_zero ଏକ ଭେକ୍ଟର ଇଣ୍ଟେଜରକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରିଥାଏ । ଏହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଭେକ୍ଟରରେ ଦୁଇଟି ଭିନ୍ନ ଉପାଦାନ ଅଛି ଯାହା ଶୂନ୍ୟକୁ ଯୋଗ କରିଥାଏ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା । >>> pairs_sum_to_zero(std::vector<long>(long) 1, (long) 3, (long) 5, (long) 0}))) (false) >>> pairs_sum_to_zero(std::vector<long>(long) 1, (long) 3, (long)-2, (long) 1} >>> (false) pairs_sum_to_zero(std::vector<long>(long) 1, (long) 2, (long) 3, (long) 7}))) (se) pairs >>>_sum_to_zero(std::vector<long>{(long>{(long>), (long) 2, (long) 4, (long) 5, (long) 3, (long) 5, (long) 7))) >>> (true) pairs_sum_to_zero))) (long_long) >>> (long_long) >>> (long)
bool pairs_sum_to_zero(std::vector<long> l) {
","bool pairs_sum_to_zero(std::vector<long> l) {
    std::unordered_set<long> seen;
    for (long num : l) {
        if (seen.count(-num)) {
            return true;
        }
        seen.insert(num);
    }
    return false;
}","}
int main() {
    auto candidate = pairs_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));
}
"
HumanEval/44,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ପ୍ରବେଶ ସଂଖ୍ଯା x ର ସଂଖ୍ଯା ଭିତ୍ତିକୁ ଭିତ୍ତିରେ ପରିବର୍ତ୍ତନ କରନ୍ତୁ. ରୂପାନ୍ତର ପରେ ଶୃଙ୍ଖଳ ପ୍ରତିନିଧିତ୍ବକୁ ଫେରାନ୍ତୁ. ଭିତ୍ତି ସଂଖ୍ୟା 10 ରୁ କମ୍. >>> change_base((8), (3)) (""22"") >>> change_base(8), (2)) (""1000"") >>> change_base((7), (2)) (""111"")
std::string change_base(long x, long base) {
","std::string change_base(long x, long base) {
    if (x == 0) return ""0"";
    
    std::string result;
    while (x > 0) {
        result += std::to_string(x % base);
        x /= base;
    }
    
    std::reverse(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = change_base;
    assert(candidate((8), (3)) == (""22""));
    assert(candidate((9), (3)) == (""100""));
    assert(candidate((234), (2)) == (""11101010""));
    assert(candidate((16), (2)) == (""10000""));
    assert(candidate((8), (2)) == (""1000""));
    assert(candidate((7), (2)) == (""111""));
    assert(candidate((2), (3)) == (""2""));
    assert(candidate((3), (4)) == (""3""));
    assert(candidate((4), (5)) == (""4""));
    assert(candidate((5), (6)) == (""5""));
    assert(candidate((6), (7)) == (""6""));
    assert(candidate((7), (8)) == (""7""));
}
"
HumanEval/45,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ତ୍ରିଭୁଜ ପାଇଁ ଏକ ପାର୍ଶ୍ବ ଏବଂ ଉଚ୍ଚ ରିଟର୍ଣ୍ଣ କ୍ଷେତ୍ରର ଦତ୍ତ ଦୈର୍ଘ୍ୟ. >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ର (), (), ()) (7.5f)
float triangle_area(long a, long h) {
","float triangle_area(long a, long h) {
    return 0.5f * a * h;
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((5), (3)) == (7.5f));
    assert(candidate((2), (2)) == (2.0f));
    assert(candidate((10), (8)) == (40.0f));
}
"
HumanEval/46,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Fib4 ସଂଖ୍ୟା କ୍ରମ ହେଉଛି Fibbonacci କ୍ରମ ପରି ଏକ କ୍ରମ ଯାହା ନିମ୍ନଲିଖିତ ପରିଭାଷା ପ୍ରାପ୍ତ ହୋଇଥାଏ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ଦୟାକରି fib4 ସଂଖ୍ୟା କ୍ରମର n-ତମ ଉପାଦାନକୁ ଦକ୍ଷତାର ସହିତ ଗଣନା କରିବା ପାଇଁ ଏକ ଫଳନ ଲେଖନ୍ତୁ । ପୁନଃସକ୍ରିୟତା ବ୍ୟବହାର କରନ୍ତୁ ନାହିଁ । >>> fib4((5)) (4) >>> fib4(6)) (8) >>> fib4(7)) (14)
long fib4(long n) {
","long fib4(long n) {
    if (n == 0 || n == 1 || n == 3) return 0;
    if (n == 2) return 2;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 2;

    for (long i = 4; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fib4;
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (28));
    assert(candidate((10)) == (104));
    assert(candidate((12)) == (386));
}
"
HumanEval/47,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଭେକ୍ଟର l ରେ ଥିବା ଉପାଦାନ ଗୁଡିକର ରିଟର୍ଣ୍ଣ ମିଡିୟାନ. >>> ମିଡିୟାନ (((std::vector<long> (((long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (ଫ୍ଲୋଟ୍ (((3)) >>> ମିଡିୟାନ (((std::vector<long> (((long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20}))) (15.0f)
float median(std::vector<long> l) {
","float median(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    if (n % 2 == 1) {
        return static_cast<float>(l[n / 2]);
    } else {
        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;
    }
}","}
int main() {
    auto candidate = median;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));
    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));
    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));
    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));
    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));
}
"
HumanEval/48,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଯାଞ୍ଚ କରେ ଯେ ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏକ ପାଲିଣ୍ଡ୍ରୋମ୍ >>> is_palindrome ((("""")) (true) >>> is_palindrome (((""aba"")) (true) >>> is_palindrome (((""aaaaa"")) (true) >>> is_palindrome (((""zbcd"")) (false)
bool is_palindrome(std::string text) {
","bool is_palindrome(std::string text) {
    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());
}","}
int main() {
    auto candidate = is_palindrome;
    assert(candidate(("""")) == (true));
    assert(candidate((""aba"")) == (true));
    assert(candidate((""aaaaa"")) == (true));
    assert(candidate((""zbcd"")) == (false));
    assert(candidate((""xywyx"")) == (true));
    assert(candidate((""xywyz"")) == (false));
    assert(candidate((""xywzx"")) == (false));
}
"
HumanEval/49,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 2^n ମଡୁଲୋ p (ସଂଖ୍ୟାନକୁ ଧ୍ୟାନରେ ରଖନ୍ତୁ) କୁ ଫେରାଇଦିଏ. >>> ମଡୁଲୋ
long modp(long n, long p) {
","long modp(long n, long p) {
    return std::pow(2, n) % p;
}","}
int main() {
    auto candidate = modp;
    assert(candidate((3), (5)) == (3));
    assert(candidate((1101), (101)) == (2));
    assert(candidate((0), (101)) == (1));
    assert(candidate((3), (11)) == (8));
    assert(candidate((100), (101)) == (1));
    assert(candidate((30), (5)) == (4));
    assert(candidate((31), (5)) == (3));
}
"
HumanEval/51,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// remove_vowels ହେଉଛି ଏକ ଫଙ୍କସନ୍ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ନେଇଥାଏ ଏବଂ ବିନା ସ୍ୱରରେ ଷ୍ଟ୍ରିଙ୍ଗ୍ ରିଟର୍ନ କରିଥାଏ. >>> remove_vowels("""")) ("""") >>> remove_vowels((""abcdef"")) (""bcdf"") >>> remove_vowels((""aaaaa"")) ("""") >>> remove_vowels(""aaBAA"")) (""B"") >>> remove_vowels((""zbcd"")) (""zbcd"")
std::string remove_vowels(std::string text) {
","std::string remove_vowels(std::string text) {
    std::string result;
    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
    
    for (char ch : text) {
        if (vowels.find(ch) == vowels.end()) {
            result += ch;
        }
    }
    
    return result;
}","}
int main() {
    auto candidate = remove_vowels;
    assert(candidate(("""")) == (""""));
    assert(candidate((""abcdef\nghijklm"")) == (""bcdf\nghjklm""));
    assert(candidate((""fedcba"")) == (""fdcb""));
    assert(candidate((""eeeee"")) == (""""));
    assert(candidate((""acBAA"")) == (""cB""));
    assert(candidate((""EcBOO"")) == (""cB""));
    assert(candidate((""ybcd"")) == (""ybcd""));
}
"
HumanEval/52,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଯଦି ଭେକ୍ଟର l ରେ ଥିବା ସମସ୍ତ ସଂଖ୍ୟା threshold t ତଳେ ଥାଏ ତେବେ true କୁ ଫେରାଇଦେବେ. >>> below_threshold((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (true) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (false)
bool below_threshold(std::vector<long> l, long t) {
","bool below_threshold(std::vector<long> l, long t) {
    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });
}","}
int main() {
    auto candidate = below_threshold;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));
}
"
HumanEval/53,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦୁଇଟି ସଂଖ୍ୟା x ଓ y ଯୋଡିବା >>> ଯୋଡିବା (), (3)) (5) >>> ଯୋଡିବା (), (7) (12)
long add(long x, long y) {
","long add(long x, long y) {
    return x + y;
}","}
int main() {
    auto candidate = add;
    assert(candidate((0), (1)) == (1));
    assert(candidate((1), (0)) == (1));
    assert(candidate((2), (3)) == (5));
    assert(candidate((5), (7)) == (12));
    assert(candidate((7), (5)) == (12));
}
"
HumanEval/54,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦୁଇଟି ଶବ୍ଦର ସମାନ ଅକ୍ଷର ଅଛି କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ. >>> same_chars(""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) (true) >>> same_chars((""abcd""), (""dddddddabc"")) (true) >>> same_chars(""dddddddabc""), (""abcd"") (true) >>> same_chars(""eabcd""), (""dddddddabc"")) (false) >>> same_chars >>>""((abcd""), (""dddddddabce"") (false) (false) >>> same_chars((""eabcd""), (""ddddzzzzzdzddddabc"") (false) (true)
bool same_chars(std::string s0, std::string s1) {
","bool same_chars(std::string s0, std::string s1) {
    std::unordered_set<char> set0(s0.begin(), s0.end());
    std::unordered_set<char> set1(s1.begin(), s1.end());
    return set0 == set1;
}","}
int main() {
    auto candidate = same_chars;
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(candidate((""abcd""), (""dddddddabc"")) == (true));
    assert(candidate((""dddddddabc""), (""abcd"")) == (true));
    assert(candidate((""eabcd""), (""dddddddabc"")) == (false));
    assert(candidate((""abcd""), (""dddddddabcf"")) == (false));
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(candidate((""aabb""), (""aaccc"")) == (false));
}
"
HumanEval/55,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// n-ତମ ଫାଇବୋନ୍ୟାଚି ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ. >>> ଫାଇବନ୍ୟାଚି (୧୦) (୫୫) >>> ଫାଇବନ୍ୟାଚି (୧) (୧) >>> ଫାଇବନ୍ୟାଚି (୮) (୨୧)
long fib(long n) {
","long fib(long n) {
    if (n <= 1) return n;
    
    long a = 0, b = 1, c;
    for (long i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    
    return b;
}","}
int main() {
    auto candidate = fib;
    assert(candidate((10)) == (55));
    assert(candidate((1)) == (1));
    assert(candidate((8)) == (21));
    assert(candidate((11)) == (89));
    assert(candidate((12)) == (144));
}
"
HumanEval/56,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets ହେଉଛି ""<"" ଏବଂ "">"" ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ. ଯଦି ପ୍ରତ୍ୟେକ ଖୋଲିବା ବ୍ରାକେଟରେ ସମାନ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ ତେବେ true ଫେରାଇଦିଅନ୍ତୁ. >>> correct_bracketing((""<"")) (false) >>> correct_bracketing(""<>"")) (true) >>> correct_bracketing(""<><>"")) (true) >>> correct_bracketing("">(<>"") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '<') balance++;
        else if (ch == '>') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""<>"")) == (true));
    assert(candidate((""<<><>>"")) == (true));
    assert(candidate((""<><><<><>><>"")) == (true));
    assert(candidate((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(candidate((""<<<><>>>>"")) == (false));
    assert(candidate((""><<>"")) == (false));
    assert(candidate((""<"")) == (false));
    assert(candidate((""<<<<"")) == (false));
    assert(candidate(("">"")) == (false));
    assert(candidate((""<<>"")) == (false));
    assert(candidate((""<><><<><>><>><<>"")) == (false));
    assert(candidate((""<><><<><>><>>><>"")) == (false));
}
"
HumanEval/57,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// Return true is ଭେକ୍ଟର ଉପାଦାନଗୁଡ଼ିକ ଏକକ ଭାବରେ ବୃଦ୍ଧି କିମ୍ବା ହ୍ରାସ ହେଉଛି. >>> ଏକକ ଭାବରେ (long) 1, (long) 2, (long) 4, (long) 20))) (true) >>> ଏକକ ଭାବରେ (long) 1, (long) 20, (long) 4, (long) 10))) (false) >>> ଏକକ ଭାବରେ (monotonic)
bool monotonic(std::vector<long> l) {
","bool monotonic(std::vector<long> l) {
    bool increasing = true, decreasing = true;
    
    for (size_t i = 1; i < l.size(); i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
    }
    
    return increasing || decreasing;
}","}
int main() {
    auto candidate = monotonic;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));
    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));
}
"
HumanEval/58,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦୁଇ ଭେକ୍ଟର ପାଇଁ ସର୍ଟ ହୋଇଥିବା ଅନନ୍ୟ ସାଧାରଣ ଉପାଦାନକୁ ଫେରାଇଥାଏ. >>> common((std::vector<long>({long) 1, (long) 4, (long) 3, (long) 34, (long) 653, (long) 2, (long) 5), (std::vector<long>({long) 5, (long) 7, (long) 1, (long) 5, (long) 9, (long) 653, (long) 121}))) (std::vector<long>({long) 1, (long) 5, (long) 653})) >>> common(std::vector<long>{(long) 5, (long) 3, (long) 2, (long) 8}), (std::vector<long>{(long) 3, (long) 2))) (std::vector<long>{(long>{long} 2, (long) 3))
std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
","std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
    std::unordered_set<long> set1(l1.begin(), l1.end());
    std::unordered_set<long> result_set;
    
    for (long num : l2) {
        if (set1.count(num)) {
            result_set.insert(num);
        }
    }
    
    std::vector<long> result(result_set.begin(), result_set.end());
    std::sort(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = common;
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/59,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// n ର ସବୁଠାରୁ ବଡ ଅକ୍ଷର ଫ୍ୟାକ୍ଟର ଫେରାଇ ଦିଅନ୍ତୁ. n > 1 କୁ ଧରି ନିଅନ୍ତୁ ଏବଂ ଏହା ଅକ୍ଷର ନୁହେଁ. >>> ସବୁଠାରୁ ବଡ_ଅକ୍ଷର_ଫ୍ୟାକ୍ଟର ({13195)) (29) >>> ସବୁଠାରୁ ବଡ_ଅକ୍ଷର_ଫ୍ୟାକ୍ଟର ({2048)) (2)
long largest_prime_factor(long n) {
","long largest_prime_factor(long n) {
    long largest = -1;
    
    while (n % 2 == 0) {
        largest = 2;
        n /= 2;
    }
    
    for (long i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            largest = i;
            n /= i;
        }
    }
    
    if (n > 1) largest = n;
    
    return largest;
}","}
int main() {
    auto candidate = largest_prime_factor;
    assert(candidate((15)) == (5));
    assert(candidate((27)) == (3));
    assert(candidate((63)) == (7));
    assert(candidate((330)) == (11));
    assert(candidate((13195)) == (29));
}
"
HumanEval/60,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// sum_to_n ହେଉଛି ଏକ ଫଙ୍କସନ୍ ଯାହା 1 ରୁ n ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡିକୁ ଯୋଗ କରିଥାଏ । >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1)) (1)
long sum_to_n(long n) {
","long sum_to_n(long n) {
    return n * (n + 1) / 2;
}","}
int main() {
    auto candidate = sum_to_n;
    assert(candidate((1)) == (1));
    assert(candidate((6)) == (21));
    assert(candidate((11)) == (66));
    assert(candidate((30)) == (465));
    assert(candidate((100)) == (5050));
}
"
HumanEval/61,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// brackets ହେଉଛି ""("" ଏବଂ """") ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ. ଯଦି ପ୍ରତ୍ୟେକ ଖୋଲିବା ବ୍ରାକେଟରେ ସମାନ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ ତେବେ TRUE ଫେରାଇଥାଏ. >>> correct_bracketing((""("")) (false) >>> correct_bracketing(""() (true) >>> correct_bracketing(""(()))) (true) >>> correct_bracketing(("") (false)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '(') balance++;
        else if (ch == ')') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""()"")) == (true));
    assert(candidate((""(()())"")) == (true));
    assert(candidate((""()()(()())()"")) == (true));
    assert(candidate((""()()((()()())())(()()(()))"")) == (true));
    assert(candidate((""((()())))"")) == (false));
    assert(candidate(("")(()"")) == (false));
    assert(candidate((""("")) == (false));
    assert(candidate((""(((("")) == (false));
    assert(candidate(("")"")) == (false));
    assert(candidate((""(()"")) == (false));
    assert(candidate((""()()(()())())(()"")) == (false));
    assert(candidate((""()()(()())()))()"")) == (false));
}
"
HumanEval/62,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// xs ଏକ ବହୁଖଣ୍ଡର ଗୁଣକକୁ ଦର୍ଶାଏ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ଏହି ବହୁଖଣ୍ଡର ନିର୍ଗମକୁ ସମାନ ଫର୍ମରେ ଫେରାଇଦିଅନ୍ତୁ. >>> derivative((std::vector<long>({long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (std::vector<long>{(long) 1, (long) 4, (long) 12, (long) 20})) >>> derivative::std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<(long>{(long) 2, (long) 6}))
std::vector<long> derivative(std::vector<long> xs) {
","std::vector<long> derivative(std::vector<long> xs) {
    std::vector<long> result;
    for (size_t i = 1; i < xs.size(); i++) {
        result.push_back(xs[i] * i);
    }
    return result;
}","}
int main() {
    auto candidate = derivative;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));
    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));
}
"
HumanEval/63,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଫିବିବ ସଂଖ୍ୟା କ୍ରମ ହେଉଛି ଫିବୋନାସୀ କ୍ରମ ପରି ଏକ କ୍ରମ ଯାହାକି ନିମ୍ନଲିଖିତ ପରିଭାଷା ପ୍ରାପ୍ତ ହୋଇଥାଏ: ଫିବିବ (୦) == ୦ ଫିବିବ (୧) == ୦ ଫିବିବ (୨) == ୧ ଫିବିବ (ଏନ) == ଫିବିବ (ଏନ -୧) + ଫିବିବ (ଏନ -୨) + ଫିବିବ (ଏନ -୩) ଦୟାକରି ଫିବିବ ସଂଖ୍ୟା କ୍ରମର n-ତମ ଉପାଦାନକୁ ଦକ୍ଷତାର ସହିତ ଗଣନା କରିବା ପାଇଁ ଏକ ଫଳନ ଲେଖନ୍ତୁ । >>> ଫିବିବ (ଏନ -୧) (0) >>> ଫିବ (ଏନ -୫) (4) >>> ଫିବ (ଏନ -୮) (24)
long fibfib(long n) {
","long fibfib(long n) {
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 1;

    for (long i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fibfib;
    assert(candidate((2)) == (1));
    assert(candidate((1)) == (0));
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (24));
    assert(candidate((10)) == (81));
    assert(candidate((12)) == (274));
    assert(candidate((14)) == (927));
}
"
HumanEval/64,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଙ୍କସନ୍ vowels_count ଲେଖନ୍ତୁ ଯାହା ଏକ ଶବ୍ଦକୁ ସୂଚାଉଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଷ୍ଟ୍ରିଙ୍ଗରେ ଥିବା ସ୍ୱରଗୁଡ଼ିକର ସଂଖ୍ୟା ଫେରାଇଥାଏ । ଏହି କ୍ଷେତ୍ରରେ ସ୍ୱରଗୁଡ଼ିକ ହେଉଛି 'a', 'e', 'i', 'o', 'u' । ଏଠାରେ, 'y' ମଧ୍ୟ ଏକ ସ୍ୱର ଅଟେ, କିନ୍ତୁ କେବଳ ଯେତେବେଳେ ଏହା ଦିଆଯାଇଥିବା ଶବ୍ଦର ଶେଷରେ ଥାଏ । ଉଦାହରଣଃ >>> vowels_count ({""abcde"")) (2) >>> vowels_count ({""ACEDY"")) (3)
long vowels_count(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long vowels_count(std::string s) {
  long count = 0;
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  for (char c : s) {
    if (vowels.count(c)) {
      count++;
    }
  }
  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {
    count++;
  }
  return count;
}","}
int main() {
    auto candidate = vowels_count;
    assert(candidate((""abcde"")) == (2));
    assert(candidate((""Alone"")) == (3));
    assert(candidate((""key"")) == (2));
    assert(candidate((""bye"")) == (1));
    assert(candidate((""keY"")) == (2));
    assert(candidate((""bYe"")) == (1));
    assert(candidate((""ACEDY"")) == (3));
}
"
HumanEval/65,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ସର୍କୁଲାର ଭାବରେ x ର ଅଙ୍କକୁ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ, ସ୍ଥାନାନ୍ତର ଦ୍ୱାରା ଅଙ୍କକୁ ଡାହାଣକୁ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଫେରାନ୍ତୁ _ ଯଦି ସ୍ଥାନାନ୍ତର > ଅଙ୍କ ସଂଖ୍ୟା, ଅଙ୍କକୁ ବିପରୀତ ଭାବରେ ଫେରାନ୍ତୁ _ >>> ସର୍କୁଲାର_ସିଫ୍ଟ (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift)) (_shift) (_shift) (_shift) (_shift) (_shift)) (_shift) (_shift) (_shift) (_shift) (_shift)) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift) (_shift)
std::string circular_shift(long x, long shift) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string circular_shift(long x, long shift) {
  std::string s = std::to_string(x);
  long n = s.length();
  if (n == 0) {
    return """";
  }
  shift %= n;
  if (shift < 0) {
    shift += n;
  }
  if (shift == 0) {
    return s;
  }
  if (shift > n) {
    std::reverse(s.begin(), s.end());
    return s;
  }
  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);
  return shifted_s;
}","}
int main() {
    auto candidate = circular_shift;
    assert(candidate((100), (2)) == (""001""));
    assert(candidate((12), (2)) == (""12""));
    assert(candidate((97), (8)) == (""79""));
    assert(candidate((12), (1)) == (""21""));
    assert(candidate((11), (101)) == (""11""));
}
"
HumanEval/66,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// କାର୍ଯ୍ୟ ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ କେବଳ ଉପର ଅକ୍ଷରର ସମୁଦାୟକୁ ଫେରାଇଥାଏ। ଉଦାହରଣଃ >>> digitSum(("""")) (0) >>> digitSum((""abAB"")) (131) >>> digitSum(""abcCd"")) (67) >>> digitSum((""helloE"")) (69) >>> digitSum((""woArBld"")) (131) >>> digitSum((""aAXaaaa"") (153)
long digitSum(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long digitSum(std::string s) {
  long sum = 0;
  for (char c : s) {
    if (isupper(c)) {
      sum += static_cast<long>(c);
    }
  }
  return sum;
}","}
int main() {
    auto candidate = digitSum;
    assert(candidate(("""")) == (0));
    assert(candidate((""abAB"")) == (131));
    assert(candidate((""abcCd"")) == (67));
    assert(candidate((""helloE"")) == (69));
    assert(candidate((""woArBld"")) == (131));
    assert(candidate((""aAaaaXa"")) == (153));
    assert(candidate(("" How are yOu?"")) == (151));
    assert(candidate((""You arE Very Smart"")) == (327));
}
"
HumanEval/67,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି କାର୍ଯ୍ୟରେ, ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯିବ ଯାହା ଏକ ଫଳ ବାସ୍କେଟରେ ବିତରଣ ହୋଇଥିବା ଆପଲ୍ ଏବଂ କମଳା ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଏହି ବାସ୍କେଟରେ ସେଓ, କମଳା ଏବଂ ଆମ୍ବ ଫଳ ଅଛି _ ଯେଉଁ ଷ୍ଟ୍ରିଙ୍ଗ ମୋଟ କମଳା ଏବଂ ସେଓ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଏବଂ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଯାହା ବାସ୍କେଟରେ ଫଳ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ, ବାସ୍କେଟରେ ଆମ୍ବ ଫଳ ସଂଖ୍ୟା ଫେରାଇଥାଏ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଫଳ_ ବିତରଣ (_) ((((""୫ଟି ସେଓ ଏବଂ ୬ଟି କମଳା""), (19)) (8) >>> ଫଳ_ ବିତରଣ (_) (((""0ଟି ସେଓ ଏବଂ 1ଟି କମଳା""), (3)) (2) >>> ଫଳ_ ବିତରଣ (_) (((""2ଟି ସେଓ ଏବଂ 3ଟି କମଳା""), (100)) (95) >>> ଫଳ_ ବିତରଣ (_) ((""100ଟି ସେଓ ଏବଂ 1ଟି କମଳା""), (120)) (19)
long fruit_distribution(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long fruit_distribution(std::string s, long n) {
  long apples = 0;
  long oranges = 0;
  size_t apples_pos = s.find(""apples"");
  if (apples_pos != std::string::npos) {
    size_t start = 0;
    while (!isdigit(s[start])) {
      start++;
    }
    apples = std::stoll(s.substr(start, apples_pos - start));
  }
  size_t oranges_pos = s.find(""oranges"");
  if (oranges_pos != std::string::npos) {
    size_t and_pos = s.find(""and"");
    size_t start = and_pos + 3;
    while (!isdigit(s[start])) {
      start++;
    }
    oranges = std::stoll(s.substr(start, oranges_pos - start));
  }
  return n - apples - oranges;
}","}
int main() {
    auto candidate = fruit_distribution;
    assert(candidate((""5 apples and 6 oranges""), (19)) == (8));
    assert(candidate((""5 apples and 6 oranges""), (21)) == (10));
    assert(candidate((""0 apples and 1 oranges""), (3)) == (2));
    assert(candidate((""1 apples and 0 oranges""), (3)) == (2));
    assert(candidate((""2 apples and 3 oranges""), (100)) == (95));
    assert(candidate((""2 apples and 3 oranges""), (5)) == (0));
    assert(candidate((""1 apples and 100 oranges""), (120)) == (19));
}
"
HumanEval/68,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""ଯଦି ଏକ ଭେକ୍ଟର ଏକ ବୃକ୍ଷର ଏକ ଶାଖାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଯେଉଁଥିରେ ଅଣ-ନକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ନୋଡ ଅଛି, ତେବେ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଗୋଟିଏ ନୋଡକୁ କାଢ଼ିବା ଏବଂ ଏହାକୁ ଫେରସ୍ତ କରିବା _ କାଢ଼ାଯାଇଥିବା ନୋଡଟି ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ସହିତ ନୋଡ ହେବା ଉଚିତ _ ଯଦି ସମାନ ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ସହିତ ଏକାଧିକ ନୋଡ ମିଳନ୍ତି ତେବେ ସର୍ବନିମ୍ନ ସୂଚକାଙ୍କ ଥିବା ନୋଡକୁ ଫେରସ୍ତ କରନ୍ତୁ _ ଏକ ଭେକ୍ଟରରେ କାଢ଼ାଯାଇଥିବା ନୋଡକୁ ଫେରସ୍ତ କରିବା ଉଚିତ, [smallest_value, ଏହାର ସୂଚକାଙ୍କ] _ ଯଦି କୌଣସି ଯୁଗ୍ମ ମୂଲ୍ୟ ନାହିଁ କିମ୍ବା ଦିଆଯାଇଥିବା ଭେକ୍ଟର ଖାଲି ଅଛି, ଫେରସ୍ତ କରନ୍ତୁ _ ଉଦାହରଣ 1: >>> pluck((stdvector<<(long>{(long) 4, (long) 2, (long) 3}))) (stdvector:::::::::::::: long) 2)) (long) 0 (long) 0 (long) 0 (long) 0 (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
std::vector<long> pluck(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> pluck(std::vector<long> arr) {
  if (arr.empty()) {
    return {};
  }
  long min_even = -1;
  long min_index = -1;
  for (long i = 0; i < arr.size(); ++i) {
    if (arr[i] % 2 == 0) {
      if (min_even == -1 || arr[i] < min_even) {
        min_even = arr[i];
        min_index = i;
      }
    }
  }
  if (min_even == -1) {
    return {};
  }
  return {min_even, min_index};
}","}
int main() {
    auto candidate = pluck;
    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));
}
"
HumanEval/69,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଅଣ-ଖାଲି ଭେକ୍ଟର ଦିଆଯାଇଛି. ଏହା ହେଉଛି ସର୍ବ ବୃହତ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଯାହା ଶୂନ ଠାରୁ ବଡ ଏବଂ ଏହାର ଫ୍ରିକ୍ୱେନ୍ସି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ଅଧିକ କିମ୍ବା ସମାନ ଅଟେ. ଏକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ର ଫ୍ରିକ୍ୱେନ୍ସି ହେଉଛି ଭେକ୍ଟରରେ ଏହା କେତେ ଥର ଦେଖାଯାଏ. ଯଦି ଏପରି କୌଣସି ମୂଲ୍ୟ ନାହିଁ, ତେବେ -୧ ଫେରାନ୍ତୁ. ଉଦାହରଣଃ >>> search:{(std::vector<long>{(long) 4, (long) 1, (long) 2, (long) 3, (long) 1}))) (2) >>> search:{(std::vector<(long>1, (long) 2, (long) 2, (long) 3, (long) 3, (long) 3, (long) 4, (long) 4, (long) 4} (3)))) >>> >>> search:{(std::vector<(long>5, (long) 5, (long) 4, (long) 4, (long) 4}-1 (long)))
long search(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long search(std::vector<long> lst) {
  std::map<long, long> counts;
  for (long x : lst) {
    counts[x]++;
  }
  long result = -1;
  for (auto const& [value, count] : counts) {
    if (value > 0 && count >= value) {
      result = std::max(result, value);
    }
  }
  return result;
}","}
int main() {
    auto candidate = search;
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));
    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));
    assert(candidate((std::vector<long>({(long)10}))) == (-1));
    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));
}
"
HumanEval/70,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ଦିଆଯାଇଥିବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା, ଏକ ଅଜବ କ୍ରମରେ ଭେକ୍ଟର ଫେରାଇଥାଏ _ ଅଜବ ସର୍ଟ, ଯେତେବେଳେ ଆପଣ ସର୍ବନିମ୍ନ ମୂଲ୍ୟ ସହିତ ଆରମ୍ଭ କରନ୍ତି, ତାପରେ ଅବଶିଷ୍ଟ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ସର୍ବାଧିକ, ତାପରେ ସର୍ବନିମ୍ନ ଏବଂ ଅନ୍ୟାନ୍ୟ _ ଉଦାହରଣଃ >>> ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ _ (std::vector<long>{long) 1, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{long) 1, (long) 4, (long) 2, (long) 3})) >>> ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ _ (std::vector<long>{long) 5, (long) 5, (long) 5}))) (std::vector<long>{long) 5, (long) 5, (long) 5}))) >>> ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ _ (std::vector<long>))) (std::vector<long>))
std::vector<long> strange_sort_list(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> strange_sort_list(std::vector<long> lst) {
  if (lst.empty()) {
    return {};
  }
  std::sort(lst.begin(), lst.end());
  std::vector<long> result;
  long left = 0;
  long right = lst.size() - 1;
  bool take_min = true;
  while (left <= right) {
    if (take_min) {
      result.push_back(lst[left++]);
    } else {
      result.push_back(lst[right--]);
    }
    take_min = !take_min;
  }
  return result;
}","}
int main() {
    auto candidate = strange_sort_list;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));
}
"
HumanEval/71,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ତ୍ରିଭୁଜର ତିନି ପାର୍ଶ୍ବ ର ଲମ୍ବ ଦିଆଗଲା. ତ୍ରିଭୁଜର କ୍ଷେତ୍ରଫଳକୁ 2 ଦଶମିକ ବିନ୍ଦୁରେ ଗୋଲ କରନ୍ତୁ ଯଦି ତିନୋଟି ପାର୍ଶ୍ବ ଏକ ବୈଧ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି. ଅନ୍ୟଥା -1 ଫେରାନ୍ତୁ ତିନୋଟି ପାର୍ଶ୍ବ ଏକ ବୈଧ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି ଯେତେବେଳେ କୌଣସି ଦୁଇଟି ପାର୍ଶ୍ବ ର ସମୁଦାୟ ତୃତୀୟ ପାର୍ଶ୍ବ ଠାରୁ ବଡ _ ଉଦାହରଣଃ >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ରଫଳ (), (), (), ()) (6.0f) >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ରଫଳ (), (), ()) (float-1))
float triangle_area(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>
float triangle_area(long a, long b, long c) {
  if (a + b <= c || a + c <= b || b + c <= a) {
    return -1.0f;
  }
  double s = static_cast<double>(a + b + c) / 2.0;
  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << area;
  return std::stof(ss.str());
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((3), (4), (5)) == (6.0f));
    assert(candidate((1), (2), (10)) == (float(-1)));
    assert(candidate((4), (8), (5)) == (8.18f));
    assert(candidate((2), (2), (2)) == (1.73f));
    assert(candidate((1), (2), (3)) == (float(-1)));
    assert(candidate((10), (5), (7)) == (16.25f));
    assert(candidate((2), (6), (3)) == (float(-1)));
    assert(candidate((1), (1), (1)) == (0.43f));
    assert(candidate((2), (2), (10)) == (float(-1)));
}
"
HumanEval/72,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ବସ୍ତୁ q ଉଡିଯିବ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ବସ୍ତୁ q ଉଡିଯିବ ଯଦି ଏହା ସନ୍ତୁଳିତ (ଏହା ଏକ ପାଲିଣ୍ଡ୍ରୋମିକ ଭେକ୍ଟର) ଏବଂ ଏହାର ଉପାଦାନଗୁଡିକର ସମୁଦାୟ ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍ କିମ୍ବା ସମାନ _ ଉଦାହରଣଃ >>> will_it_fly((std::vector<long>({long) 1, (long) 2}), (5)) (false) # 1+2 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍, କିନ୍ତୁ ଏହା ଅସନ୍ତୁଳିତ _ >>> will_it_fly((std::vector<long>((long) 3, (long) 2, (long) 3})), (1)) (ମିଥ୍ୟା) # ଏହା ସନ୍ତୁଳିତ, କିନ୍ତୁ 3+2+3 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ ଅଧିକ _ >>> will_it_fly(std::vector<long>{(long>{long}3, (long) 2, (long) 3}), (9) (true) # 3+2::vector<long>3 ହେଉଛି ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ, କିନ୍ତୁ ଏହା ସନ୍ତୁଳିତ _ (5) _ (long_true) # ଏହା ସନ୍ତୁଳିତ, କିନ୍ତୁ ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍ _
bool will_it_fly(std::vector<long> q, long w) {
","#include<assert.h>
#include<bits/stdc++.h>
bool will_it_fly(std::vector<long> q, long w) {
  std::vector<long> reversed_q = q;
  std::reverse(reversed_q.begin(), reversed_q.end());
  if (q != reversed_q) {
    return false;
  }
  long sum = 0;
  for (long val : q) {
    sum += val;
  }
  return sum <= w;
}","}
int main() {
    auto candidate = will_it_fly;
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));
    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));
}
"
HumanEval/73,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ଆର୍ ରେ ଦିଆଯାଇଥିବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ, ଭେକ୍ଟରକୁ ପାଲିଣ୍ଡ୍ରୋମିକ କରିବା ପାଇଁ ସର୍ବନିମ୍ନ ସଂଖ୍ୟା ପରିବର୍ତ୍ତନ କରିବାକୁ ପଡିବ _ ପାଲିଣ୍ଡ୍ରୋମିକ ଭେକ୍ଟର ହେଉଛି ଏକ ଭେକ୍ଟର ଯାହା ସମାନ ଭାବରେ ପଛକୁ ଏବଂ ଆଗକୁ ପ read ାଯାଏ _ ଗୋଟିଏ ପରିବର୍ତ୍ତନରେ, ଆପଣ ଗୋଟିଏ ଉପାଦାନକୁ ଅନ୍ୟ ଯେକ any ଣସି ଉପାଦାନରେ ପରିବର୍ତ୍ତନ କରିପାରିବେ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> smallest_change(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 2} (1)))) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 1, (long) 0)))
long smallest_change(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long smallest_change(std::vector<long> arr) {
  long n = arr.size();
  long changes = 0;
  for (long i = 0; i < n / 2; ++i) {
    if (arr[i] != arr[n - 1 - i]) {
      changes++;
    }
  }
  return changes;
}","}
int main() {
    auto candidate = smallest_change;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
}
"
HumanEval/74,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଗ୍ରହଣ କରେ ଏବଂ ସେହି ଭେକ୍ଟରକୁ ଫେରାଇଥାଏ ଯାହାର ସମସ୍ତ ଷ୍ଟ୍ରିଙ୍ଗ୍ ରେ ଥିବା ଅକ୍ଷର ସଂଖ୍ୟା ଅନ୍ୟ ଭେକ୍ଟର ତୁଳନାରେ କମ୍ ହୋଇଥାଏ । ଯଦି ଦୁଇଟି ଭେକ୍ଟରରେ ଅକ୍ଷର ସଂଖ୍ୟା ସମାନ ଥାଏ, ତେବେ ପ୍ରଥମ ଭେକ୍ଟରକୁ ଫେରାଇଥାଏ । ଉଦାହରଣ >>> total_match (), (std::vector (), (std::string (), (std::string (), (std::string (), (std::string (), (std::string (), (std:string (), (std:string (), (std:string (), (std:string ()) (), (std:string ()) (), (std:string (), (std:string ()) (), (std:string ()) (), (std:string ()) (), (std:string (), (std:string ()) (), (std:string ()) (), (std:string ()) (), (std:string (), (string) (string) (string) (string) (string) (string) (string) (string) (string) (string) (string (string) (string) (string) (string) (string) (string) (string) (string (string) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (str) (
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
  long count1 = 0;
  for (const std::string& s : lst1) {
    count1 += s.length();
  }
  long count2 = 0;
  for (const std::string& s : lst2) {
    count2 += s.length();
  }
  if (count1 <= count2) {
    return lst1;
  } else {
    return lst2;
  }
}","}
int main() {
    auto candidate = total_match;
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi"", (std::string)""admin"", (std::string)""project""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>({(std::string)""4""})), (std::vector<std::string>({(std::string)""1"", (std::string)""2"", (std::string)""3"", (std::string)""4"", (std::string)""5""}))) == (std::vector<std::string>({(std::string)""4""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hii""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)""this""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""this""})), (std::vector<std::string>())) == (std::vector<std::string>()));
}
"
HumanEval/75,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଦିଆଯାଇଥିବା ସଂଖ୍ୟା 3 ଟି ଅଶୂର ସଂଖ୍ୟା ଗୁଡ଼ିକର ଗୁଣନ ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା ଅଟେ । ଜାଣି ରଖନ୍ତୁ ଯେ (a) 100 ରୁ କମ୍ ଅଟେ _ ଉଦାହରଣଃ >>> is_multiply_prime((30)) (true) 30 = 2 * 3 * 5
bool is_multiply_prime(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_multiply_prime(long a) {
  if (a <= 0) {
    return false;
  }
  std::vector<int> primes;
  std::vector<bool> is_prime(100, true);
  is_prime[0] = is_prime[1] = false;
  for (int p = 2; p * p < 100; p++) {
    if (is_prime[p]) {
      for (int i = p * p; i < 100; i += p)
        is_prime[i] = false;
    }
  }
  for (int p = 2; p < 100; p++) {
    if (is_prime[p]) {
      primes.push_back(p);
    }
  }
  int count = 0;
  for (int p1 : primes) {
    if (a % p1 == 0) {
      count++;
      int rem = a / p1;
      for (int p2 : primes) {
        if (rem % p2 == 0) {
          count++;
          int rem2 = rem / p2;
          for (int p3 : primes) {
            if (rem2 == p3) {
              count++;
              if (count == 3) {
                return true;
              }
              count--;
            }
          }
          count--;
        }
      }
      count--;
    }
  }
  return false;
}","}
int main() {
    auto candidate = is_multiply_prime;
    assert(candidate((5)) == (false));
    assert(candidate((30)) == (true));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (false));
    assert(candidate((125)) == (true));
    assert(candidate((105)) == (true));
    assert(candidate((126)) == (false));
    assert(candidate((729)) == (false));
    assert(candidate((891)) == (false));
    assert(candidate((1001)) == (true));
}
"
HumanEval/76,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କର କାମ ହେଉଛି ଏକ ଫଙ୍କସନ ଲେଖିବା ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଏକ ସଂଖ୍ୟା x ହେଉଛି n ର ଏକ ସରଳ ଶକ୍ତି ଏବଂ ଅନ୍ୟାନ୍ୟ କ୍ଷେତ୍ରରେ ମିଥ୍ୟା ଅଟେ. x ହେଉଛି n ର ଏକ ସରଳ ଶକ୍ତି ଯଦି n**int=x ଉଦାହରଣ ସ୍ୱରୂପଃ >>> is_simple_power((1), (4)) (true) >>> is_simple_power(2), (2)) (true) >>> is_simple_power(8), (2)) (true) >>> is_simple_power(3), (2)) (false) >>> is_simple_power(3), (1)) (false) >>> is_simple_power(5), (3)) (false)
bool is_simple_power(long x, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_simple_power(long x, long n) {
  if (x == n) return true;
  if (n == 1) return x == 1;
  if (n == 0) return x == 0;
  if (x == 0) return false;
  if (x == 1) return true;
  long power = n;
  while (power < x) {
    if (x % n != 0) return false;
    if (power > x / n) return false;
    power *= n;
  }
  return power == x;
}","}
int main() {
    auto candidate = is_simple_power;
    assert(candidate((16), (2)) == (true));
    assert(candidate((143214), (16)) == (false));
    assert(candidate((4), (2)) == (true));
    assert(candidate((9), (3)) == (true));
    assert(candidate((16), (4)) == (true));
    assert(candidate((24), (2)) == (false));
    assert(candidate((128), (4)) == (false));
    assert(candidate((12), (6)) == (false));
    assert(candidate((1), (1)) == (true));
    assert(candidate((1), (12)) == (true));
}
"
HumanEval/77,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା a କୁ ନେଇଥାଏ ଏବଂ ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଏହି ଇନଗେଜର କିଛି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଘନ ହୋଇଥାଏ। ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ବୈଧ ଅଟେ। ଉଦାହରଣଃ >>> iscube (((1)) (true) >>> iscube (((2)) (false) >>> iscube (((-1)) (true) >>> iscube (((64)) (true) >>> iscube (((0)) (true) >>> iscube (((180)) (false)
bool iscube(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool iscube(long a) {
  if (a == 0) return true;
  long abs_a = std::abs(a);
  long root = round(std::cbrt(abs_a));
  return root * root * root == abs_a;
}","}
int main() {
    auto candidate = iscube;
    assert(candidate((1)) == (true));
    assert(candidate((2)) == (false));
    assert(candidate((-1)) == (true));
    assert(candidate((64)) == (true));
    assert(candidate((180)) == (false));
    assert(candidate((1000)) == (true));
    assert(candidate((0)) == (true));
    assert(candidate((1729)) == (false));
}
"
HumanEval/78,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ ଲେଖିବାକୁ କୁହାଯାଇଥିଲା ଯାହା ଏକ ହେକ୍ସାଡେସିମାଲ ସଂଖ୍ୟାକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ହେକ୍ସାଡେସିମାଲ ଅଙ୍କ ସଂଖ୍ୟା ଗଣନା କରେ ଯାହା ପ୍ରାଇମ ଅଟେ (ପ୍ରାଇମ ସଂଖ୍ୟା, କିମ୍ବା ଏକ ପ୍ରାଇମ, ହେଉଛି 1 ରୁ ବଡ ପ୍ରାକୃତିକ ସଂଖ୍ୟା ଯାହା ଦୁଇଟି ଛୋଟ ପ୍ରାକୃତିକ ସଂଖ୍ୟା ର ଉତ୍ପାଦ ନୁହେଁ) । ହେକ୍ସାଡେସିମାଲ ଅଙ୍କ ହେଉଛି 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ପ୍ରାଇମ ସଂଖ୍ୟା ହେଉଛି 2, 3, 5, 7, 11, 13, 17,... ତେଣୁ ଆପଣଙ୍କୁ ନିମ୍ନଲିଖିତ ଅଙ୍କ ମଧ୍ୟରୁ ଏକ ସଂଖ୍ୟା ନିର୍ଣ୍ଣୟ କରିବାକୁ ପଡିବଃ 2, 3, 5, 7, B (= ଦଶମିକ 11), D (= ଦଶମିକ 13) ଟିପ୍ପଣୀଃ ଆପଣ ଧରିବା ଉଚିତ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ସଠିକ୍ କିମ୍ବା ଖାଲି, ଏବଂ ପ୍ରତୀକ A,B,C,D,E,F ସର୍ବଦା ବଡ଼ ଅକ୍ଷର ଅଟେ । ଉଦାହରଣଃ >>> hex_((AB""key"") >>> hex_(AB""key"") >>> hex_(10"") >>> hex_(77"") >>> hex_(AB""key"") >>> hex_(1"") hex_33"") hex_(ABC""((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
long hex_key(std::string num) {
","#include<assert.h>
#include<bits/stdc++.h>
long hex_key(std::string num) {
  long count = 0;
  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};
  for (char c : num) {
    if (prime_hex.count(c)) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = hex_key;
    assert(candidate((""AB"")) == (1));
    assert(candidate((""1077E"")) == (2));
    assert(candidate((""ABED1A33"")) == (4));
    assert(candidate((""2020"")) == (2));
    assert(candidate((""123456789ABCDEF0"")) == (6));
    assert(candidate((""112233445566778899AABBCCDDEEFF00"")) == (12));
}
"
HumanEval/79,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଦଶମିକ ରୂପରେ ଏକ ସଂଖ୍ୟା ଦିଆଯିବ ଏବଂ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏହାକୁ ବାଇନାରୀ ଫର୍ମାଟରେ ରୂପାନ୍ତର କରିବା. ଫଳନକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇବ, ଯେଉଁଥିରେ ପ୍ରତ୍ୟେକ ଅକ୍ଷର ଏକ ବାଇନାରୀ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରିଥାଏ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ରେ ପ୍ରତ୍ୟେକ ଅକ୍ଷର '0' କିମ୍ବା '1' ହେବ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଆରମ୍ଭରେ ଏବଂ ଶେଷରେ ଏକ ଅତିରିକ୍ତ ଯୋଡି ଅକ୍ଷର 'db' ରହିବ. ଫର୍ମାଟ୍ ସହିତ ସାହାଯ୍ୟ କରିବାକୁ ଅତିରିକ୍ତ ଅକ୍ଷର ଅଛି. ଉଦାହରଣଃ >>> ଦଶମିକ_ବାୟିନାରୀକୁ_ବିନାରୀକୁ (((15)) (""db1111db"") >>> ଦଶମିକ_ବାୟିନାରୀକୁ_ବାୟିନାରୀକୁ_ବିନାରୀକୁ ((32)) (""db100000db"")
std::string decimal_to_binary(long decimal) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string decimal_to_binary(long decimal) {
  if (decimal == 0) {
    return ""db0db"";
  }
  std::string binaryString = """";
  long temp = std::abs(decimal);
  while (temp > 0) {
    binaryString = (temp % 2 == 0 ? ""0"" : ""1"") + binaryString;
    temp /= 2;
  }
  return ""db"" + binaryString + ""db"";
}","}
int main() {
    auto candidate = decimal_to_binary;
    assert(candidate((0)) == (""db0db""));
    assert(candidate((32)) == (""db100000db""));
    assert(candidate((103)) == (""db1100111db""));
    assert(candidate((15)) == (""db1111db""));
}
"
HumanEval/80,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆ ଯାଇଛି. ଆପଣଙ୍କର କାମ ହେଉଛି ଷ୍ଟ୍ରିଙ୍ଗଟି hapcpp କି ନୁହେଁ ତାହା ଯାଞ୍ଚ କରିବା. ଗୋଟିଏ ଷ୍ଟ୍ରିଙ୍ଗ hapcpp ଅଟେ ଯଦି ଏହାର ଲମ୍ବ ଅତି କମରେ 3 ଏବଂ ପ୍ରତ୍ୟେକ 3 କ୍ରମିକ ଅକ୍ଷର ଅଲଗା ଅଲଗା ଅଟେ ଉଦାହରଣ ସ୍ୱରୂପ: >>> is_happy(""a"")) (false) >>> is_happy(""aa"")) (false) >>> is_happy(""abcd"")) (true) >>> is_happy(""aabb"")) (false) >>> is_happy(""adb"")) (true) >>> is_happy(""xyy"") (false)
bool is_happy(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_happy(std::string s) {
  if (s.length() < 3) {
    return false;
  }
  for (size_t i = 0; i <= s.length() - 3; ++i) {
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_happy;
    assert(candidate((""a"")) == (false));
    assert(candidate((""aa"")) == (false));
    assert(candidate((""abcd"")) == (true));
    assert(candidate((""aabb"")) == (false));
    assert(candidate((""adb"")) == (true));
    assert(candidate((""xyy"")) == (false));
    assert(candidate((""iopaxpoi"")) == (true));
    assert(candidate((""iopaxioi"")) == (false));
}
"
HumanEval/81,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହା ସେମିଷ୍ଟରର ଶେଷ ସପ୍ତାହ ଏବଂ ଶିକ୍ଷକଙ୍କୁ ଛାତ୍ରଛାତ୍ରୀଙ୍କୁ ଗ୍ରେଡ୍ ଦେବାକୁ ପଡିବ _ ଶିକ୍ଷକ ଗ୍ରେଡ୍ ପାଇଁ ନିଜର ଆଲଗୋରିଦମ ତିଆରି କରୁଛନ୍ତି _ କେବଳ ସମସ୍ୟା ହେଉଛି ସେ ଗ୍ରେଡ୍ ପାଇଁ ବ୍ୟବହାର କରିଥିବା କୋଡ୍ ହଜିଯାଇଛି _ ସେ ଆପଣଙ୍କୁ କିଛି ଛାତ୍ରଙ୍କ ପାଇଁ GPA ର ଭେକ୍ଟର ଦେଇଛନ୍ତି ଏବଂ ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ପଡିବ ଯାହା ନିମ୍ନଲିଖିତ ଟେବୁଲ୍ ବ୍ୟବହାର କରି ଅକ୍ଷର ଗ୍ରେଡ୍ ର ଭେକ୍ଟର output କରିପାରିବ _ GPA ଅକ୍ଷର ଗ୍ରେଡ୍ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E ଉଦାହରଣଃ >>>_grade_equation:
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
  std::vector<std::string> letter_grades;
  for (float gpa : grades) {
    if (gpa == 4.0f) {
      letter_grades.push_back(""A+"");
    } else if (gpa > 3.7f) {
      letter_grades.push_back(""A"");
    } else if (gpa > 3.3f) {
      letter_grades.push_back(""A-"");
    } else if (gpa > 3.0f) {
      letter_grades.push_back(""B+"");
    } else if (gpa > 2.7f) {
      letter_grades.push_back(""B"");
    } else if (gpa > 2.3f) {
      letter_grades.push_back(""B-"");
    } else if (gpa > 2.0f) {
      letter_grades.push_back(""C+"");
    } else if (gpa > 1.7f) {
      letter_grades.push_back(""C"");
    } else if (gpa > 1.3f) {
      letter_grades.push_back(""C-"");
    } else if (gpa > 1.0f) {
      letter_grades.push_back(""D+"");
    } else if (gpa > 0.7f) {
      letter_grades.push_back(""D"");
    } else if (gpa > 0.0f) {
      letter_grades.push_back(""D-"");
    } else {
      letter_grades.push_back(""E"");
    }
  }
  return letter_grades;
}","}
int main() {
    auto candidate = numerical_letter_grade;
    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)""A+"", (std::string)""B"", (std::string)""C-"", (std::string)""C"", (std::string)""A-""})));
    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)""D+""})));
    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)""D-""})));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)""E""})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)""D"", (std::string)""D-"", (std::string)""C-"", (std::string)""B"", (std::string)""B+""})));
    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)""E"", (std::string)""D-""})));
}
"
HumanEval/82,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ ଏବଂ ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଷ୍ଟ୍ରିଙ୍ଗର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା ହୋଇଥାଏ କିମ୍ବା ଅନ୍ୟଥା ମିଥ୍ୟା ଉଦାହରଣ >>> prime_length((""ହାଲୋ"")) (true) >>> prime_length((""abcdcba"")) (true) >>> prime_length((""କିଟନ୍ସ"")) (true) >>> prime_length((""ଅରେଞ୍ଜ"")) (false)
bool prime_length(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(int n) {
  if (n <= 1) return false;
  for (int i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

bool prime_length(std::string string) {
  return is_prime(string.length());
}","}
int main() {
    auto candidate = prime_length;
    assert(candidate((""Hello"")) == (true));
    assert(candidate((""abcdcba"")) == (true));
    assert(candidate((""kittens"")) == (true));
    assert(candidate((""orange"")) == (false));
    assert(candidate((""wow"")) == (true));
    assert(candidate((""world"")) == (true));
    assert(candidate((""MadaM"")) == (true));
    assert(candidate((""Wow"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""HI"")) == (true));
    assert(candidate((""go"")) == (true));
    assert(candidate((""gogo"")) == (false));
    assert(candidate((""aaaaaaaaaaaaaaa"")) == (false));
    assert(candidate((""Madam"")) == (true));
    assert(candidate((""M"")) == (false));
    assert(candidate((""0"")) == (false));
}
"
HumanEval/83,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, 1 ସହିତ ଆରମ୍ଭ ହେଉଥିବା କିମ୍ବା ସମାପ୍ତ ହେଉଥିବା n-ଅଙ୍କ ବିଶିଷ୍ଟ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଗଣନା ଫେରାଇବ.
long starts_one_ends(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long starts_one_ends(long n) {
  if (n <= 0) {
    return 0;
  }
  if (n == 1) {
    return 1;
  }
  long starts_with_one = std::pow(10, n - 1);
  long ends_with_one = std::pow(10, n - 1);
  long starts_and_ends_with_one = std::pow(10, n - 2);
  return starts_with_one + ends_with_one - starts_and_ends_with_one;
}","}
int main() {
    auto candidate = starts_one_ends;
    assert(candidate((1)) == (1));
    assert(candidate((2)) == (18));
    assert(candidate((3)) == (180));
    assert(candidate((4)) == (1800));
    assert(candidate((5)) == (18000));
}
"
HumanEval/84,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା N ଦିଆଗଲା, ଏହାର ଅଙ୍କଗୁଡ଼ିକର ସମୁଦାୟ ସମୁଦାୟକୁ ବାଇନାରୀରେ ଫେରାଇବ. ଉଦାହରଣ >>> solve((1000)) (""1"") >>> solve((150)) (""110"") >>> solve((147)) (""1100"") ଭେରିଏବଲ୍ସ: @N ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା କଣ୍ଟ୍ରାଇଣ୍ଟସ୍: 0 ≤ N ≤ 10000. ଆଉଟପୁଟ୍: ବାଇନାରୀ ସଂଖ୍ୟାର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍
std::string solve(long N) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string solve(long N) {
  if (N < 0 || N > 10000) {
    return """"; // Or handle invalid input as needed
  }
  long sum = 0;
  std::string s = std::to_string(N);
  for (char c : s) {
    sum += c - '0';
  }
  if (sum == 0) {
    return ""0"";
  }
  std::string binary_sum = """";
  while (sum > 0) {
    binary_sum = (sum % 2 == 0 ? ""0"" : ""1"") + binary_sum;
    sum /= 2;
  }
  return binary_sum;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((1000)) == (""1""));
    assert(candidate((150)) == (""110""));
    assert(candidate((147)) == (""1100""));
    assert(candidate((333)) == (""1001""));
    assert(candidate((963)) == (""10010""));
}
"
HumanEval/85,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଅସରନ୍ତି ଭେକ୍ଟର ଦିଆଯାଇଥିବା lst. ଅଙ୍କରେ ଥିବା ଯୁଗ୍ମ ଉପାଦାନଗୁଡିକୁ ଯୋଗ କରନ୍ତୁ. ଉଦାହରଣଃ >>> add((std::vector<long>({(long) 4, (long) 2, (long) 6, (long) 7}))) (2)
long add(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long add(std::vector<long> lst) {
  long sum = 0;
  for (long i = 1; i < lst.size(); i += 2) {
    if (lst[i] % 2 == 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add;
    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));
    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));
    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));
}
"
HumanEval/86,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ନେଇଥାଏ ଏବଂ ଏହାର ଏକ ଅର୍ଡର ହୋଇଥିବା ସଂସ୍କରଣ ଫେରାଇଥାଏ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଅର୍ଡର ହୋଇଥିବା ସଂସ୍କରଣ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଯେଉଁଠାରେ ସମସ୍ତ ଶବ୍ଦ (ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ) ଏକ ନୂତନ ଶବ୍ଦ ଦ୍ୱାରା ବଦଳାଯାଇଥାଏ ଯେଉଁଠାରେ ସମସ୍ତ ଅକ୍ଷର ASCII ମୂଲ୍ୟ ଉପରେ ଆଧାର କରି କ୍ରମାନୁସାରେ ସଜାଯାଇଛି _ ଟିପ୍ପଣୀଃ ଆପଣ ବାକ୍ୟରେ ଶବ୍ଦ ଏବଂ ଖାଲି ସ୍ଥାନର କ୍ରମାନୁସାରେ ରଖିବା ଉଚିତ୍ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଆଣ୍ଟି_ସଫଲ୍ (((""ହାଏ"")) (""ହାଏ"") >>> ଆଣ୍ଟି_ସଫଲ୍ (((""ହାଲୋ"")) (""ehllo"") >>> ଆଣ୍ଟି_ସଫଲ୍ (((""ହାଲୋ ୱାର୍ଲ୍ଡ! !"") (""ହାଲୋ !!!Wdlor"")
std::string anti_shuffle(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string anti_shuffle(std::string s) {
  std::string result = """";
  std::string current_word = """";
  for (char c : s) {
    if (c == ' ') {
      std::sort(current_word.begin(), current_word.end());
      result += current_word;
      result += c;
      current_word = """";
    } else {
      current_word += c;
    }
  }
  std::sort(current_word.begin(), current_word.end());
  result += current_word;
  return result;
}","}
int main() {
    auto candidate = anti_shuffle;
    assert(candidate((""Hi"")) == (""Hi""));
    assert(candidate((""hello"")) == (""ehllo""));
    assert(candidate((""number"")) == (""bemnru""));
    assert(candidate((""abcd"")) == (""abcd""));
    assert(candidate((""Hello World!!!"")) == (""Hello !!!Wdlor""));
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hi. My name is Mister Robot. How are you?"")) == ("".Hi My aemn is Meirst .Rboot How aer ?ouy""));
}
"
HumanEval/87,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ 2D ତଥ୍ୟ ଦିଆଯାଇଛି, ଯାହାକି ଏକ ନେଷ୍ଟେଡ୍ ଭେକ୍ଟର ଭାବରେ ଅଛି, ଯାହା ମାଟ୍ରିକ୍ସ ପରି, କିନ୍ତୁ ମାଟ୍ରିକ୍ସ ପରି ନୁହେଁ, ପ୍ରତ୍ୟେକ ଧାଡ଼ିରେ ଭିନ୍ନ ସଂଖ୍ୟକ କ୍ଲୋମ୍ ରହିପାରେ _ lst, ଏବଂ integer x ଦିଆଯାଇଥିବା, ଭେକ୍ଟରରେ x ସଂଖ୍ୟକ ଖୋଜନ୍ତୁ, ଏବଂ ଟାପଲ୍ସର ରିଟର୍ଣ୍ଣ ଭେକ୍ଟର, [(x1, y1), (x2, y2) ...] ଏପରି ଯେ ପ୍ରତ୍ୟେକ ଟାପଲ୍ ହେଉଛି ଏକ କୋର୍ଡିନେଟ୍ - (row, columns), 0 ରୁ ଆରମ୍ଭ କରି _ ଆରମ୍ଭରେ କ୍ରମିକ କ୍ରମରେ ଧାଡ଼ିଗୁଡ଼ିକ ଦ୍ୱାରା ଆରମ୍ଭ କରନ୍ତୁ _ ଏହା ସହିତ, କ୍ରମିକ କ୍ରମରେ କ୍ରମିକ କ୍ରମରେ ଧାଡ଼ିଗୁଡ଼ିକ ଦ୍ୱାରା ଧାଡ଼ିଗୁଡ଼ିକର କୋର୍ଡିନେଟ୍ ସର୍ଟ କରନ୍ତୁ _ ଉଦାହରଣଃ >>> get_row(std::vector<std::vector<d>, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
  std::vector<std::tuple<long, long>> coordinates;
  for (long i = 0; i < lst.size(); ++i) {
    std::vector<std::pair<long, long>> row_coords;
    for (long j = 0; j < lst[i].size(); ++j) {
      if (lst[i][j] == x) {
        row_coords.push_back({j, i});
      }
    }
    std::sort(row_coords.rbegin(), row_coords.rend());
    for (const auto& coord_pair : row_coords) {
      coordinates.emplace_back(coord_pair.second, coord_pair.first);
    }
  }
  return coordinates;
}","}
int main() {
    auto candidate = get_row;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));
    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));
}
"
HumanEval/88,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ନନ୍-ନଗେଟିଭ୍ ଇଣ୍ଟେଜର ଭେକ୍ଟର ଦିଆଯାଇଥାଏ, ସର୍ଟ କରିବା ପରେ ଦିଆଯାଇଥିବା ଭେକ୍ଟରର ଏକ କୋକ୍ପି ଫେରାଇ ଦିଅନ୍ତୁ, ଯଦି ସମୁଦାୟ (ପ୍ରଥମ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ, ଶେଷ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ) ଅଙ୍କକୋଷୀୟ ହୋଇଥାଏ ତେବେ ଆପଣ ଦିଆଯାଇଥିବା ଭେକ୍ଟରକୁ ଉର୍ଦ୍ଧମାନ କ୍ରମରେ ସର୍ଟ କରିବେ, କିମ୍ବା ଯଦି ସମୁଦାୟ (ପ୍ରଥମ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ, ଶେଷ ଇଣ୍ଡେକ୍ସ ମୂଲ୍ୟ) ଯୁଗ୍ମ ହୋଇଥାଏ ତେବେ ଏହାକୁ ତଳୁ କ୍ରମରେ ସର୍ଟ କରିବେ _ ଟିପ୍ପଣୀଃ * ଦିଆଯାଇଥିବା ଭେକ୍ଟରକୁ ପରିବର୍ତ୍ତନ କରନ୍ତୁ ନାହିଁ _ ଉଦାହରଣଃ >>> sort_array (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (
std::vector<long> sort_array(std::vector<long> array) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> sort_array(std::vector<long> array) {
  std::vector<long> sorted_array = array;
  if (sorted_array.empty()) {
    return sorted_array;
  }
  long first = 0;
  long last = sorted_array.size() - 1;
  if ((first + last) % 2 != 0) {
    std::sort(sorted_array.begin(), sorted_array.end());
  } else {
    std::sort(sorted_array.rbegin(), sorted_array.rend());
  }
  return sorted_array;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));
    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));
    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));
    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));
}
"
HumanEval/89,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଙ୍କସନ୍ encrypt ତିଆରି କରନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଏକ ଆର୍ଗୁମେଣ୍ଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଆଲଫାବେଟ୍ ଘୂର୍ଣ୍ଣନ ସହିତ ଏକ ଏନକ୍ରିପ୍ଟ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇଥାଏ। ଆଲଫାବେଟ୍ ଏପରି ଭାବରେ ଘୂର୍ଣ୍ଣନ କରାଯିବା ଉଚିତ ଯେ ଅକ୍ଷରଗୁଡିକ ଦୁଇଗୁଣିତ ଦୁଇ ସ୍ଥାନକୁ ଘୁଞ୍ଚିଯାଏ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> encrypt((""hi"")) (""lm"") >>> encrypt((""asdfghjkl"")) (""ewhjklnop"") >>> encrypt(""gf"")) (""kj"") >>> encrypt((""et"")) (""ix"")
std::string encrypt(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encrypt(std::string s) {
  std::string encrypted_s = """";
  int shift = 2 * 2;
  for (char c : s) {
    if (isalpha(c)) {
      char base = islower(c) ? 'a' : 'A';
      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);
    } else {
      encrypted_s += c;
    }
  }
  return encrypted_s;
}","}
int main() {
    auto candidate = encrypt;
    assert(candidate((""hi"")) == (""lm""));
    assert(candidate((""asdfghjkl"")) == (""ewhjklnop""));
    assert(candidate((""gf"")) == (""kj""));
    assert(candidate((""et"")) == (""ix""));
    assert(candidate((""faewfawefaewg"")) == (""jeiajeaijeiak""));
    assert(candidate((""hellomyfriend"")) == (""lippsqcjvmirh""));
    assert(candidate((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")) == (""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""));
    assert(candidate((""a"")) == (""e""));
}
"
HumanEval/90,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଭେକ୍ଟର ଦିଆ ଯାଇଛି. ଏକ ଫଙ୍କସନ next_smallest ଲେଖନ୍ତୁ ଯାହା ଭେକ୍ଟରର ଦ୍ବିତୀୟ କ୍ଷୁଦ୍ରତମ ଉପାଦାନକୁ ଫେରାଇବ. ଯଦି ଏପରି କୌଣସି ଉପାଦାନ ନଥାଏ ତେବେ None ଫେରାଇବ. >>> next_smallest:st:vector<long>{long> (long) 1, (long) 2, (long) 3, (long) 4, (long) 5}))) 2 >>> next_smallest:st:vector<long>{long) 5, (long) 1, (long) 4, (long) 3, (long) 2))) >>> 2 next_smallest:st:vector<long>(long))) st:nullopt >>> next_smallest:st:vector<long>{long} 1, (long) 1))) st:nullopt >>> next_smallest:st:vector<long>{long} 1, (long) 1))) st:nullopt
std::optional<long> next_smallest(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> next_smallest(std::vector<long> lst) {
  if (lst.size() < 2) {
    return std::nullopt;
  }
  std::sort(lst.begin(), lst.end());
  if (lst[0] == lst[1]) {
    return std::nullopt;
  }
  return lst[1];
}","}
int main() {
    auto candidate = next_smallest;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);
    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);
}
"
HumanEval/91,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯିବ, ଏବଂ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ବିରକ୍ତିକର ସଂଖ୍ୟା ଗଣନା କରିବା । ଏକ ବିରକ୍ତିକର ହେଉଛି ଏକ ବାକ୍ୟ ଯାହା ""I"" ଶବ୍ଦ ସହିତ ଆରମ୍ଭ ହୁଏ । ବାକ୍ୟଗୁଡ଼ିକ '.', '?' କିମ୍ବା '! ' ଦ୍ୱାରା ସୀମିତ । ଉଦାହରଣ ସ୍ୱରୂପଃ >>> is_bored((""ହାଲୋ ୱାର୍ଲ୍ଡ"")) (0) >>> is_bored((""ଆକାଶ ନୀଳ । ସୂର୍ଯ୍ୟ ଉଜ୍ଜ୍ୱଳ । ମୁଁ ଏହି ପାଣିପାଗକୁ ଭଲ ପାଏ"")) (1)
long is_bored(std::string S) {
","#include<assert.h>
#include<bits/stdc++.h>
long is_bored(std::string S) {
  long boredom_count = 0;
  std::string current_sentence = """";
  for (char c : S) {
    current_sentence += c;
    if (c == '.' || c == '?' || c == '!') {
      std::stringstream ss(current_sentence);
      std::string first_word;
      ss >> first_word;
      if (first_word == ""I"") {
        boredom_count++;
      }
      current_sentence = """";
    }
  }
  return boredom_count;
}","}
int main() {
    auto candidate = is_bored;
    assert(candidate((""Hello world"")) == (0));
    assert(candidate((""Is the sky blue?"")) == (0));
    assert(candidate((""I love It !"")) == (1));
    assert(candidate((""bIt"")) == (0));
    assert(candidate((""I feel good today. I will be productive. will kill It"")) == (2));
    assert(candidate((""You and I are going for a walk"")) == (0));
}
"
HumanEval/92,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା 3ଟି ସଂଖ୍ୟା ଗ୍ରହଣ କରେ. ଯଦି ଗୋଟିଏ ସଂଖ୍ୟା ଅନ୍ୟ ଦୁଇଟିର ସମୁଦାୟ ସହିତ ସମାନ ହୋଇଥାଏ ଏବଂ ସମସ୍ତ ସଂଖ୍ୟା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ହୋଇଥାଏ ତେବେ ଏହା ସତ୍ୟ ଫେରାଇଥାଏ _ ଅନ୍ୟ ସମସ୍ତ କ୍ଷେତ୍ରରେ ଏହା ଭୁଲ ଫେରାଇଥାଏ _ ଉଦାହରଣ >>> any_int (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float)) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float)) (float) (float) (float) (float)) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float) (float (float) (float) (float (float)) (float) (float (float) (float (float) (float (float) (float (float)) (float (float) (float) (float (float) (float (float) (float (float)) (float (float) (float (float) (float) (float (float) (flo) (flo) (flo) (flo) (float (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo) (flo
bool any_int(float x, float y, float z) {
","#include<assert.h>
#include<bits/stdc++.h>
bool any_int(float x, float y, float z) {
  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {
    return false;
  }
  long ix = static_cast<long>(x);
  long iy = static_cast<long>(y);
  long iz = static_cast<long>(z);
  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);
}","}
int main() {
    auto candidate = any_int;
    assert(candidate((float(2)), (float(3)), (float(1))) == (true));
    assert(candidate((2.5f), (float(2)), (float(3))) == (false));
    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));
    assert(candidate((float(2)), (float(6)), (float(2))) == (false));
    assert(candidate((float(4)), (float(2)), (float(2))) == (true));
    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));
    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));
    assert(candidate((float(2)), (float(1)), (float(1))) == (true));
    assert(candidate((float(3)), (float(4)), (float(7))) == (true));
    assert(candidate((3.0f), (float(4)), (float(7))) == (false));
}
"
HumanEval/93,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ବାର୍ତ୍ତା ଗ୍ରହଣ କରେ, ଏବଂ ଏପରି ଭାବରେ ଏନକୋଡ୍ କରେ ଯାହା ସମସ୍ତ ଅକ୍ଷରର କେସ୍ ବଦଳାଇଥାଏ, ବାର୍ତ୍ତାରେ ଥିବା ସମସ୍ତ ସ୍ୱରଗୁଡ଼ିକୁ ଇଂରାଜୀ ଅକ୍ଷରରେ ସେହି ସ୍ୱରଠାରୁ 2 ଟି ସ୍ଥାନ ଆଗରେ ଥିବା ଅକ୍ଷର ସହିତ ବଦଳାଇଥାଏ _ କେବଳ ଅକ୍ଷର ଧରନ୍ତୁ _ ଉଦାହରଣଃ >>> encode((""test"")) (""TGST"") >>> encode((""This is a message"")) (""tHKS KS C MGSSCGG"")
std::string encode(std::string message) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encode(std::string message) {
  std::string encoded_message = """";
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  std::map<char, char> vowel_map = {
      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},
      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};
  for (char c : message) {
    if (isalpha(c)) {
      char swapped_case = islower(c) ? toupper(c) : tolower(c);
      if (vowels.count(c)) {
        encoded_message += vowel_map[c];
      } else {
        encoded_message += swapped_case;
      }
    } else {
      encoded_message += c;
    }
  }
  return encoded_message;
}","}
int main() {
    auto candidate = encode;
    assert(candidate((""TEST"")) == (""tgst""));
    assert(candidate((""Mudasir"")) == (""mWDCSKR""));
    assert(candidate((""YES"")) == (""ygs""));
    assert(candidate((""This is a message"")) == (""tHKS KS C MGSSCGG""));
    assert(candidate((""I DoNt KnOw WhAt tO WrItE"")) == (""k dQnT kNqW wHcT Tq wRkTg""));
}
"
HumanEval/94,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଭେକ୍ଟର ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ ଏହାର ସର୍ବବୃହତ ପ୍ରାଥମିକ ମୂଲ୍ୟ ଖୋଜିବାକୁ ହେବ ଏବଂ ଏହାର ଅଙ୍କଗୁଡିକର ସମୁଦାୟ ଫେରାଇବାକୁ ହେବ _ ଉଦାହରଣଃ >>> skjkasdkd{\\displaystyle \\mathbb {\\mathbb {D} } }, (long) (long) (long) (long)), (long) (long) (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long)), (long) (long)), (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long) (long)), (long) (long)), (long) (long) (long)), (long) (long) (long) (long)), (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long)), (long) (long) (long) (long) (long) (long) (long) (long)),long) (long) (long) (long) (long) (long) (long)), long) (long) (long) (long) (long) (long) (long) (long) (long)), long) (long) (long) (long) (long) (long) (long) (long)), long) (long) (long) (
long skjkasdkd(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

long sum_digits(long n) {
  long sum = 0;
  std::string s = std::to_string(n);
  for (char c : s) {
    sum += c - '0';
  }
  return sum;
}

long skjkasdkd(std::vector<long> lst) {
  long largest_prime = -1;
  for (long num : lst) {
    if (num > largest_prime && is_prime(num)) {
      largest_prime = num;
    }
  }
  if (largest_prime == -1) {
    return 0;
  }
  return sum_digits(largest_prime);
}","}
int main() {
    auto candidate = skjkasdkd;
    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));
    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));
    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));
    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)8191}))) == (19));
    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));
    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));
}
"
HumanEval/95,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ମାନଚିତ୍ର ଦିଆଯାଇଥିବା, ଯଦି ସମସ୍ତ କୀ ଛୋଟ ଅକ୍ଷରରେ ଥିବା ବା ସମସ୍ତ କୀ ବଡ଼ ଅକ୍ଷରରେ ଥିବା ତେବେ true ଫେରାଇବ, ନଚେତ୍ false ଫେରାଇବ _ ଫଳନଟି false ଫେରାଇବ ତେବେ ଦିଆଯାଇଥିବା ମାନଚିତ୍ରଟି ଖାଲି ରହିବ _ ଉଦାହରଣ: >>> check_dict_case, {""}, {""b"", ""apple""}, {""b"", ""banana""}}))) (true) >>> check_dict_case, {""}, {""}, ""apple"" ({""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, ""}, ""}, ""}, ""}, ""}, "" (ଆଉଦାଖଣ୍ଡର ଏକ ମାନଚିତ୍ରରେ ଥିବା ମାନଚିତ୍ରଟି ହେଉଛି ""ଆପଣଙ୍କ ମାନଚିତ୍ରରେ ଥିବା ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ମାନଚିତ୍ରଟି ଖାଲି ଅଛି _ ""_
bool check_dict_case(std::map<std::string,std::string> dict) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_dict_case(std::map<std::string,std::string> dict) {
  if (dict.empty()) {
    return false;
  }
  bool first_key_lower = false;
  bool first_key_upper = false;
  auto it = dict.begin();
  if (!it->first.empty() && islower(it->first[0])) {
    first_key_lower = true;
  } else if (!it->first.empty() && isupper(it->first[0])) {
    first_key_upper = true;
  } else {
    return false;
  }
  for (const auto& pair : dict) {
    if (pair.first.empty()) {
      return false;
    }
    bool current_lower = true;
    bool current_upper = true;
    for (char c : pair.first) {
      if (!islower(c)) {
        current_lower = false;
      }
      if (!isupper(c)) {
        current_upper = false;
      }
    }
    if (first_key_lower && !current_lower) {
      return false;
    }
    if (first_key_upper && !current_upper) {
      return false;
    }
    if (!first_key_lower && !first_key_upper) {
        if (current_lower) first_key_lower = true;
        else if (current_upper) first_key_upper = true;
        else return false;
    }
  }
  return first_key_lower || first_key_upper;
}","}
int main() {
    auto candidate = check_dict_case;
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""b"", ""banana""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""A"", ""banana""}, {""B"", ""banana""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""5"", ""banana""}, {""a"", ""apple""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""Name"", ""John""}, {""Age"", ""36""}, {""City"", ""Houston""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""STATE"", ""NC""}, {""ZIP"", ""12345""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""fruit"", ""Orange""}, {""taste"", ""Sweet""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>())) == (false));
}
"
HumanEval/96,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନକୁ କାର୍ଯ୍ୟକାରୀ କରନ୍ତୁ ଯାହା ଏକ ନନ୍-ନଗେଟିଭ୍ ଇଣ୍ଟେଜର ନେଇଥାଏ ଏବଂ ପ୍ରଥମ n ଇଣ୍ଟେଜରର ଭେକ୍ଟର ଫେରାଇଥାଏ ଯାହା ପ୍ରାଇମ ନମ୍ବର ଏବଂ n ରୁ ଛୋଟ ହୋଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପଃ >>> count_up_to((5)) (std::vector<long>{(long) 2, (long) 3})) >>> count_up_to(11)) (std::vector<long>{(long) 2, (long) 3, (long) 5, (long) 7}) >>> count_up_to(0)) (std::vector<long>)) >>> count_up_to(20)) (std::vector<long>{(2, (long) 3, (long) 5, (long) 7, (long) 11, (long) 13, (long) 17, (long) 19} >>> count_up_1) (std::vector<long>>1 to(8): (std::vector<long>11, (long) 3, (long) 5, (long) 17)) (long) 1, (long) 2, (long) (long))
std::vector<long> count_up_to(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long num) {
  if (num <= 1) return false;
  for (long i = 2; i * i <= num; ++i) {
    if (num % i == 0) return false;
  }
  return true;
}

std::vector<long> count_up_to(long n) {
  std::vector<long> primes;
  if (n <= 2) {
    return primes;
  }
  for (long i = 2; i < n; ++i) {
    if (is_prime(i)) {
      primes.push_back(i);
    }
  }
  return primes;
}","}
int main() {
    auto candidate = count_up_to;
    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));
    assert(candidate((0)) == (std::vector<long>()));
    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));
    assert(candidate((1)) == (std::vector<long>()));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));
    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));
}
"
HumanEval/97,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଫଳନକୁ ପୂର୍ଣ୍ଣ କରନ୍ତୁ ଯାହା ଦୁଇଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରହଣ କରେ ଏବଂ ସେମାନଙ୍କର ଏକକ ଅଙ୍କଗୁଡ଼ିକର ଉତ୍ପାଦ ଫେରାଇଥାଏ _ ଧରନ୍ତୁ ଇନପୁଟ୍ ସର୍ବଦା ବୈଧ _ ଉଦାହରଣଃ >>> ଗୁଣନ (((148), (412)) (16) >>> ଗୁଣନ (((19), (28)) (72) >>> ଗୁଣନ (((2020), (1851)) (0) >>> ଗୁଣନ (((14), (-15)) (20)
long multiply(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>
long multiply(long a, long b) {
  long unit_a = std::abs(a) % 10;
  long unit_b = std::abs(b) % 10;
  return unit_a * unit_b;
}","}
int main() {
    auto candidate = multiply;
    assert(candidate((148), (412)) == (16));
    assert(candidate((19), (28)) == (72));
    assert(candidate((2020), (1851)) == (0));
    assert(candidate((14), (-15)) == (20));
    assert(candidate((76), (67)) == (42));
    assert(candidate((17), (27)) == (49));
    assert(candidate((0), (1)) == (0));
    assert(candidate((0), (0)) == (0));
}
"
HumanEval/98,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆଗଲା, ସମ ସୂଚକାଙ୍କରେ ଥିବା ବଡ଼ ଅକ୍ଷର ସ୍ୱର ସଂଖ୍ୟା ଗଣନା କରନ୍ତୁ. ଉଦାହରଣ ସ୍ୱରୂପଃ >>> count_upper (((""aBCdEf"")) (1) >>> count_upper (((""abcdefg"")) (0) >>> count_upper (((""dBBE"")) (0)
long count_upper(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long count_upper(std::string s) {
  long count = 0;
  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};
  for (long i = 0; i < s.length(); ++i) {
    if (i % 2 == 0 && upper_vowels.count(s[i])) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_upper;
    assert(candidate((""aBCdEf"")) == (1));
    assert(candidate((""abcdefg"")) == (0));
    assert(candidate((""dBBE"")) == (0));
    assert(candidate((""B"")) == (0));
    assert(candidate((""U"")) == (1));
    assert(candidate(("""")) == (0));
    assert(candidate((""EEEE"")) == (2));
}
"
HumanEval/99,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ଏକ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ମୂଲ୍ୟ (ଷ୍ଟ୍ରିଙ୍ଗ) ଗ୍ରହଣ କରେ ଏବଂ ଏହାର ନିକଟତମ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ _ ଯଦି ସଂଖ୍ୟାଟି ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ସମାନ ଦୂରତାରେ ଥାଏ, ତେବେ ଏହାକୁ ଶୂନରୁ ଦୂରେଇ ଘୁଞ୍ଚାଇ ଦିଅନ୍ତୁ _ ଉଦାହରଣ >>> ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((""10"")) (10) >>> ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((""15.3"")) ନୋଟ୍ (15): ଶୂନରୁ ଦୂରେଇ ଘୁଞ୍ଚାଇବାର ଅର୍ଥ ହେଉଛି ଯଦି ଦିଆଯାଇଥିବା ସଂଖ୍ୟା ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ସମାନ ଦୂରତାରେ ଥାଏ, ତେବେ ଆପଣ ଫେରାଇଥିବା ସଂଖ୍ୟାଟି ଶୂନରୁ ଦୂରରେ ଥିବା ସଂଖ୍ୟା _ ଉଦାହରଣ ସ୍ୱରୂପ ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((""14.5"") ଫେରାଇବ 15 ଏବଂ ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (((-14.5"") ଫେରାଇବ -15.
long closest_integer(std::string value) {
","#include<assert.h>
#include<bits/stdc++.h>
long closest_integer(std::string value) {
  double num = std::stod(value);
  if (num >= 0) {
    if (num - std::floor(num) <= 0.5) {
      return static_cast<long>(std::floor(num));
    } else {
      return static_cast<long>(std::ceil(num));
    }
  } else {
    if (std::ceil(num) - num <= 0.5) {
      return static_cast<long>(std::ceil(num));
    } else {
      return static_cast<long>(std::floor(num));
    }
  }
}","}
int main() {
    auto candidate = closest_integer;
    assert(candidate((""10"")) == (10));
    assert(candidate((""14.5"")) == (15));
    assert(candidate((""-15.5"")) == (-16));
    assert(candidate((""15.3"")) == (15));
    assert(candidate((""0"")) == (0));
}
"
HumanEval/100,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇ, ଆପଣଙ୍କୁ ପଥରର n ସ୍ତର ଏକ ଗଦା କରିବାକୁ ପଡିବ _ ପ୍ରଥମ ସ୍ତରରେ n ପଥର ଅଛି _ ପରବର୍ତ୍ତୀ ସ୍ତରରେ ପଥର ସଂଖ୍ୟା ହେଉଛି: - ପରବର୍ତ୍ତୀ ଅଙ୍କ ଯଦି n ଅଙ୍କ _ - ପରବର୍ତ୍ତୀ ଯୁଗ୍ମ ସଂଖ୍ୟା ଯଦି n ଯୁଗ୍ମ _ ଏକ ଭେକ୍ଟରରେ ପ୍ରତ୍ୟେକ ସ୍ତରରେ ପଥର ସଂଖ୍ୟା ଫେରାନ୍ତୁ, ଯେଉଁଠାରେ ସୂଚକାଙ୍କ i ରେ ଥିବା ଉପାଦାନ ସ୍ତରରେ ପଥର ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ (i+1) _ ଉଦାହରଣଃ >>> make_a_pile(3)) (std::vector<long>{long) 3, (long) 5, (long) 7}))
std::vector<long> make_a_pile(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> make_a_pile(long n) {
  std::vector<long> pile;
  long current_stones = n;
  for (int i = 0; i < n; ++i) {
    pile.push_back(current_stones);
    if (current_stones % 2 != 0) {
      current_stones += 2;
    } else {
      current_stones += 2;
    }
  }
  return pile;
}","}
int main() {
    auto candidate = make_a_pile;
    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));
    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));
    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));
    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));
    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));
}
"
HumanEval/101,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯିବ ଯାହା କମା କିମ୍ବା ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ ହେବ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଶବ୍ଦକୁ ଶବ୍ଦ ମଧ୍ୟରେ ବିଭକ୍ତ କରିବା ଏବଂ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ଫେରାଇବା _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> words_string (((""Hi, my name is John"")) (std::vector<std::string>({(std::string) ""Hi"", (std::string) ""my"", (std::string) ""name"", (std::string) ""is"", (std::string) ""John""}) >>> words_string (((""One, two, three, four, five, six"")) (std::vector<std::string>{(stdstring) ""One"", (std::string) ""two"", (std::string) ""three"", (std::string) ""four"", (std::string) ""five"", (std::string) ""six""})
std::vector<std::string> words_string(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> words_string(std::string s) {
  std::vector<std::string> words;
  std::string current_word;
  for (char c : s) {
    if (c == ',' || c == ' ') {
      if (!current_word.empty()) {
        words.push_back(current_word);
        current_word = """";
      }
    } else {
      current_word += c;
    }
  }
  if (!current_word.empty()) {
    words.push_back(current_word);
  }
  return words;
}","}
int main() {
    auto candidate = words_string;
    assert(candidate((""Hi, my name is John"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name"", (std::string)""is"", (std::string)""John""})));
    assert(candidate((""One, two, three, four, five, six"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate((""Hi, my name"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name""})));
    assert(candidate((""One,, two, three, four, five, six,"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""ahmed     , gamal"")) == (std::vector<std::string>({(std::string)""ahmed"", (std::string)""gamal""})));
}
"
HumanEval/102,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ଫଙ୍କସନ ଦୁଇଟି ସକାରାତ୍ମକ ସଂଖ୍ୟା x ଓ y ନେଇଥାଏ ଏବଂ [x, y] ଅନ୍ତର୍ଭୁକ୍ତ ରେ ଥିବା ସବୁଠାରୁ ବଡ ସମ ସଂଖ୍ଯା ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ । ଯଦି ଏପରି କୌଣସି ସଂଖ୍ୟା ନଥାଏ, ତେବେ ଫଙ୍କସନ -1 ଫେରାଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପ: >>> choose_num((12), (15)) (14) >>> choose_num((13), (12)) (-1)
long choose_num(long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>
long choose_num(long x, long y) {
  if (x > y) {
    return -1;
  }
  long end = y;
  if (end % 2 != 0) {
    end--;
  }
  if (end < x) {
    return -1;
  }
  return end;
}","}
int main() {
    auto candidate = choose_num;
    assert(candidate((12), (15)) == (14));
    assert(candidate((13), (12)) == (-1));
    assert(candidate((33), (12354)) == (12354));
    assert(candidate((5234), (5233)) == (-1));
    assert(candidate((6), (29)) == (28));
    assert(candidate((27), (10)) == (-1));
    assert(candidate((7), (7)) == (-1));
    assert(candidate((546), (546)) == (546));
}
"
HumanEval/103,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// ଆପଣଙ୍କୁ ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଏବଂ m ଦିଆ ଯାଇଛି, ଏବଂ ଆପଣଙ୍କର କାମ ହେଉଛି n ରୁ m ପର୍ଯ୍ୟନ୍ତ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗୁଡିକର ହାରାହାରି ଗଣନା କରିବା (n ଏବଂ m ଅନ୍ତର୍ଭୁକ୍ତ କରି) । ଉତ୍ତରକୁ ନିକଟତମ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଗୋଲ କରନ୍ତୁ ଏବଂ ଏହାକୁ ବାଇନାରୀକୁ ରୂପାନ୍ତର କରନ୍ତୁ । ଯଦି n m ରୁ ବଡ, ତେବେ -1 ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ >>> ଗୋଲ_ଅବଗ_ (), (5)) ""0b11"" >>> ଗୋଲ_ଅବଗ_ (), (5)) -1 >>> ଗୋଲ_ଅବଗ_ (), (20)) ""0b1111"" >>> ଗୋଲ_ଅବଗ_ (), (20)) ""0b11010""
Union_std_string_long rounded_avg(long n, long m) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;
    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_string_long rounded_avg(long n, long m) {
  if (n > m) {
    return Union_std_string_long(-1);
  }
  double sum = 0;
  for (long i = n; i <= m; ++i) {
    sum += i;
  }
  double avg = sum / (m - n + 1);
  long rounded_avg_long = std::round(avg);
  if (rounded_avg_long == 0) {
    return Union_std_string_long(""0b0"");
  }
  std::string binary_string = """";
  long temp = std::abs(rounded_avg_long);
  while (temp > 0) {
    binary_string = (temp % 2 == 0 ? ""0"" : ""1"") + binary_string;
    temp /= 2;
  }
  return Union_std_string_long(""0b"" + binary_string);
}","}
int main() {
    auto candidate = rounded_avg;
    assert(candidate((1), (5)) == ""0b11"");
    assert(candidate((7), (13)) == ""0b1010"");
    assert(candidate((964), (977)) == ""0b1111001010"");
    assert(candidate((996), (997)) == ""0b1111100100"");
    assert(candidate((560), (851)) == ""0b1011000010"");
    assert(candidate((185), (546)) == ""0b101101110"");
    assert(candidate((362), (496)) == ""0b110101101"");
    assert(candidate((350), (902)) == ""0b1001110010"");
    assert(candidate((197), (233)) == ""0b11010111"");
    assert(candidate((7), (5)) == -1);
    assert(candidate((5), (1)) == -1);
    assert(candidate((5), (5)) == ""0b101"");
}
"
HumanEval/104,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ଧନାତ୍ମକ ସଂଖ୍ଯା x ଦିଆୟାଇଥିବା ବେଳେ, ସମସ୍ତ ଉପାଦାନର ଏକ ସର୍ଟ ଭେକ୍ଟର ଫେରାଇଥାଏ ଯେଉଁଥିରେ କୌଣସି ଯୁଗ୍ମ ଅଙ୍କ ନଥାଏ. ଟିପ୍ପଣୀ: ଫେରାଇଥିବା ଭେକ୍ଟରକୁ ବୃଦ୍ଧି କ୍ରମରେ ସର୍ଟ କରାଯିବା ଉଚିତ. ଉଦାହରଣ ସ୍ବରୂପ: >>> unique_digits(std::vector<long>({long) 15, (long) 33, (long) 1422, (long) 1}))) (std::vector<long>{(long) 1, (long) 15, (long) 33})) >>> unique_digits(std::vector<long>{(long) 152, (long) 323, (long) 1422, (long) 10}))) (std::vector<long>(long))
std::vector<long> unique_digits(std::vector<long> x) {
","#include<assert.h>
#include<bits/stdc++.h>
bool has_even_digit(long n) {
  std::string s = std::to_string(n);
  for (char c : s) {
    if ((c - '0') % 2 == 0) {
      return true;
    }
  }
  return false;
}

std::vector<long> unique_digits(std::vector<long> x) {
  std::vector<long> result;
  for (long val : x) {
    if (!has_even_digit(val)) {
      result.push_back(val);
    }
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = unique_digits;
    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));
    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));
    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));
}
"
HumanEval/105,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ସମୁଦାୟ ସଂଖ୍ୟାକୁ ଦେଇ, 1 ରୁ 9 ସମେତ ଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକୁ ସର୍ଟ କରନ୍ତୁ, ଫଳସ୍ୱରୂପ ଭେକ୍ଟରକୁ ଓଲଟାନ୍ତୁ, ଏବଂ ତାପରେ ପ୍ରତ୍ୟେକ ଅଙ୍କକୁ ଏହାର ଅନୁରୂପ ନାମ ସହିତ ""ଏକ"", ""ଦୁଇ"", ""ତିନି"", ""ଚାରି"", ""ପାଞ୍ଚ"", ""ଛଅ"", ""ସାତ"", ""ଆଠ"", ""ନଅ"" ରୁ ବଦଳାନ୍ତୁ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> by_length, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string, (long_string)))))) (long_string, (long_string, (long_string)) (long_string, (long_string, (long_string)) (long_string, (long_string, (long_string)) (long_string, (long_string, (long)) (long_string, (long)) (long_string, (long)) (long)) (long_string, (long)) (long)) (long_string, (long)) (long)) (long)) (long)) (long)) (long_long)) (long)) (long)) (long)) (long_long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long))
std::vector<std::string> by_length(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> by_length(std::vector<long> arr) {
  std::vector<long> valid_numbers;
  std::vector<std::string> result;
  std::map<long, std::string> number_names = {
      {1, ""One""}, {2, ""Two""}, {3, ""Three""}, {4, ""Four""}, {5, ""Five""},
      {6, ""Six""}, {7, ""Seven""}, {8, ""Eight""}, {9, ""Nine""}};
  for (long num : arr) {
    if (num >= 1 && num <= 9) {
      valid_numbers.push_back(num);
    }
  }
  std::sort(valid_numbers.begin(), valid_numbers.end());
  std::reverse(valid_numbers.begin(), valid_numbers.end());
  for (long num : valid_numbers) {
    result.push_back(number_names[num]);
  }
  return result;
}","}
int main() {
    auto candidate = by_length;
    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)""Eight"", (std::string)""Five"", (std::string)""Four"", (std::string)""Three"", (std::string)""Two"", (std::string)""Two"", (std::string)""One"", (std::string)""One""})));
    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)""One""})));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)""Three"", (std::string)""Two"", (std::string)""One""})));
    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)""Nine"", (std::string)""Eight"", (std::string)""Four""})));
}
"
HumanEval/106,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଫଳନ f କୁ କାର୍ଯ୍ୟକାରୀ କରନ୍ତୁ ଯାହା n କୁ ଏକ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରେ, ଏବଂ n ଆକାରର ଏକ ଭେକ୍ଟର ଫେରାଇଥାଏ, ଯେପରିକି ସୂଚକାଙ୍କ i ରେ ଥିବା ଉପାଦାନର ମୂଲ୍ୟ i ର କାରକ ଅଟେ ଯଦି i ସମାନ କିମ୍ବା 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାର ସମୁଦାୟ ଅନ୍ୟଥା _ i 1 ରୁ ଆରମ୍ଭ ହୁଏ _ i ର କାରକ ହେଉଛି 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାର ଗୁଣନ _ ଉଦାହରଣଃ >>> f ({}) (std::vector<long>{} (long) 1, (long) 2, (long) 6, (long) 24, (long) 15}))
std::vector<long> f(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> f(long n) {
  std::vector<long> result;
  for (long i = 1; i <= n; ++i) {
    if (i % 2 == 0) {
      long factorial = 1;
      for (long j = 1; j <= i; ++j) {
        factorial *= j;
      }
      result.push_back(factorial);
    } else {
      long sum = 0;
      for (long j = 1; j <= i; ++j) {
        sum += j;
      }
      result.push_back(sum);
    }
  }
  return result;
}","}
int main() {
    auto candidate = f;
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));
}
"
HumanEval/107,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଏକ ଟାପଲ୍ ଫେରାଇଥାଏ ଯେଉଁଥିରେ ଅନ୍ତର୍ଭୁକ୍ତ ଥିବା ସମ ଏବଂ ଅଜଣା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ସଂଖ୍ୟା ଥାଏ । ଉଦାହରଣ 1: >>> even_odd_palindrome (((3)) (std::make_tuple (((1, 2)) ବ୍ୟାଖ୍ୟା: ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ହେଉଛି 1, 2, 3. ସେଥିମଧ୍ୟରୁ ଗୋଟିଏ ସମ ଏବଂ ଦୁଇଟି ଅଜଣା ଅଟେ । ଉଦାହରଣ 2: >>> even_odd_palindrome (((12)) (std::make_tuple (((4, 6)) ବ୍ୟାଖ୍ୟା: ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ହେଉଛି 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ସେଥିମଧ୍ୟରୁ ଚାରିଟି ସମ ଏବଂ ସେଥିମଧ୍ୟରୁ 6 ଅଜଣା ଅଟେ । ଟିପ୍ପଣୀ: 1 <= n = 10 ^ 3 < 3 2. ଫେରସ୍ତ ହୋଇଥିବା ଟାପଲ୍ ଯଥାକ୍ରମେ ସମ ଏବଂ ଅଜଣା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପଲିଣ୍ଡ୍ରୋମ୍ ସଂଖ୍ୟା ଅଛି ।
std::tuple<long, long> even_odd_palindrome(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_palindrome(long num) {
  std::string s = std::to_string(num);
  std::string reversed_s = s;
  std::reverse(reversed_s.begin(), reversed_s.end());
  return s == reversed_s;
}

std::tuple<long, long> even_odd_palindrome(long n) {
  long even_count = 0;
  long odd_count = 0;
  for (long i = 1; i <= n; ++i) {
    if (is_palindrome(i)) {
      if (i % 2 == 0) {
        even_count++;
      } else {
        odd_count++;
      }
    }
  }
  return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_palindrome;
    assert(candidate((123)) == (std::make_tuple(8, 13)));
    assert(candidate((12)) == (std::make_tuple(4, 6)));
    assert(candidate((3)) == (std::make_tuple(1, 2)));
    assert(candidate((63)) == (std::make_tuple(6, 8)));
    assert(candidate((25)) == (std::make_tuple(5, 6)));
    assert(candidate((19)) == (std::make_tuple(4, 6)));
    assert(candidate((9)) == (std::make_tuple(4, 5)));
    assert(candidate((1)) == (std::make_tuple(0, 1)));
}
"
HumanEval/108,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଙ୍କସନ count_nums ଲେଖନ୍ତୁ ଯାହା ଏକ ଭେକ୍ଟର ନେଇଥାଏ ଏବଂ ସେହି ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହାର ଅଙ୍କ ସମୁଦାୟ > 0 ହୋଇଥାଏ । ଯଦି କୌଣସି ସଂଖ୍ୟା ନକାରାତ୍ମକ ହୋଇଥାଏ, ତେବେ ଏହାର ପ୍ରଥମ ଅଙ୍କ ନକାରାତ୍ମକ ହେବ: ଉଦାହରଣ ସ୍ୱରୂପ -123 ଅଙ୍କ -1, 2, ଏବଂ 3 କୁ ଚିହ୍ନିତ କରିଥାଏ । >>> count_nums{(std::vector<long>())) (0) >>> count_nums{(std::vector<long>{(long) -1, (long) -11, (long) -11}))) (1) >>> count_nums::std::vector<long>{(long) -1, (long) -1, (long) -2} (3))))
long count_nums(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_digits_signed(long n) {
  std::string s = std::to_string(n);
  long sum = 0;
  for (long i = 0; i < s.length(); ++i) {
    if (i == 0 && s[i] == '-') {
      if (s.length() > 1) {
        sum -= (s[i + 1] - '0');
        i++;
      }
    } else {
      sum += (s[i] - '0');
    }
  }
  return sum;
}

long count_nums(std::vector<long> arr) {
  long count = 0;
  for (long num : arr) {
    if (sum_digits_signed(num) > 0) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_nums;
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));
    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));
    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
}
"
HumanEval/109,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆମେ N ସଂଖ୍ୟକ ଭେକ୍ଟର 'arr' ପାଇଛୁ arr[1], arr[2], ..., arr[N]। ଭେକ୍ଟରରେ ଥିବା ସଂଖ୍ୟା ଗୁଡ଼ିକ ଆକସ୍ମିକ ଭାବରେ ସଜାଡାଯିବ । ଆପଣଙ୍କ କାର୍ଯ୍ୟ ହେଉଛି ନିର୍ଣ୍ଣୟ କରିବା ଯେ କୌଣସି ଭେକ୍ଟରକୁ ଅଣ-ହ୍ରାସ କ୍ରମରେ ସଜାଡିବା ସମ୍ଭବ କି ନାହିଁ । ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ନିମ୍ନଲିଖିତ କାର୍ଯ୍ୟ ସମ୍ପାଦନ କରି: ଆପଣଙ୍କୁ ଯେକୌଣସି ସଂଖ୍ୟକ ଥର ଡାହାଣକୁ ଘୁଞ୍ଚିବା କାର୍ଯ୍ୟ କରିବାକୁ ଅନୁମତି ଅଛି । ଗୋଟିଏ ଡାହାଣକୁ ଘୁଞ୍ଚିବା କାର୍ଯ୍ୟର ଅର୍ଥ ଭେକ୍ଟରର ସମସ୍ତ ଉପାଦାନକୁ ଡାହାଣ ଦିଗରେ ଗୋଟିଏ ସ୍ଥାନକୁ ଘୁଞ୍ଚାଇବା । ଭେକ୍ଟରର ଶେଷ ଉପାଦାନ ଭେକ୍ଟରରେ ଆରମ୍ଭ ସ୍ଥିତିକୁ ଘୁଞ୍ଚାଯିବ ଅର୍ଥାତ୍ ୦.th ସୂଚକାଙ୍କ । ଯଦି ଉପରୋକ୍ତ କାର୍ଯ୍ୟ ସମ୍ପାଦନ କରି ସଜାଡ ହୋଇଥିବା ଭେକ୍ଟରକୁ ପ୍ରାପ୍ତ କରିବା ସମ୍ଭବ ତେବେ true ଫେରସ୍ତ ହୁଏ, ନଚେତ୍ true ଫେରସ୍ତ ହୁଏ । ଯଦି ଦିଆଯାଇଥିବା ଭେକ୍ଟର ଖାଲି ଅଛି ତେବେ true ଫେରସ୍ତ ହୁଏ । ଟିପ୍ପଣୀ: ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ଅନନ୍ୟ ଉପାଦାନ ରହିବା ନିଶ୍ଚିତ । ଉଦାହରଣଃ >>> move_one_ball_{(st_vector::{(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
bool move_one_ball(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
bool move_one_ball(std::vector<long> arr) {
  if (arr.empty()) {
    return true;
  }
  int n = arr.size();
  std::vector<long> sorted_arr = arr;
  std::sort(sorted_arr.begin(), sorted_arr.end());
  for (int shift = 0; shift < n; ++shift) {
    std::vector<long> shifted_arr(n);
    for (int i = 0; i < n; ++i) {
      shifted_arr[i] = arr[(i - shift + n) % n];
    }
    if (shifted_arr == sorted_arr) {
      return true;
    }
  }
  return false;
}","}
int main() {
    auto candidate = move_one_ball;
    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
}
"
HumanEval/110,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି ସମସ୍ୟା ରେ, ଆପଣ ଏକ ଫଙ୍କସନ କୁ କାର୍ଯ୍ୟକାରୀ କରିବେ ଯାହା ଦୁଇଟା ସଂଖ୍ୟା ଭେକ୍ଟର କୁ ନେଇଥାଏ, ଏବଂ ନିର୍ଣ୍ଣୟ କରେ ଯେ କଣ ଏହା ସମ୍ଭବ ଅଟେ କି ସେଗୁଡିକ ମଧ୍ୟରେ ଉପାଦାନ ଗୁଡିକର ଏକ ଆଦାନ ପ୍ରଦାନ କରିବା lst1 କୁ କେବଳ ଯୁଗ୍ମ ସଂଖ୍ୟା ର ଏକ ଭେକ୍ଟର କରିବା ପାଇଁ. lst1 ଏବଂ lst2 ମଧ୍ୟରେ ଆଦାନ ପ୍ରଦାନ ଉପାଦାନ ଗୁଡିକର ସଂଖ୍ୟା ଉପରେ କୌଣସି ସୀମା ନାହିଁ. lst1 ଏବଂ lst2 ମଧ୍ୟରେ ଉପାଦାନ ଗୁଡିକର ଆଦାନ ପ୍ରଦାନ କରିବା ସମ୍ଭବ ଅଟେ lst1 ର ସମସ୍ତ ଉପାଦାନ କୁ ଯୁଗ୍ମ କରିବା ପାଇଁ, ""YES"" କୁ ଫେରାଇବ. ଅନ୍ୟଥା, ""NO"" କୁ ଫେରାଇବ. ଉଦାହରଣ ସ୍ବରୂପ: >>> exchange((std::vector<>(long) {1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) {1, (long) 2, (long) 3, (long) 4}), (std::vector<>(long) 4}))) (""YES"") >>>((std::exchange<>vector<>{1, (long) 2, (long) 3, (long) 4} (std::vector<>(long) {1, (long) 5} (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
  long odd_count_lst1 = 0;
  for (long num : lst1) {
    if (num % 2 != 0) {
      odd_count_lst1++;
    }
  }
  long even_count_lst2 = 0;
  for (long num : lst2) {
    if (num % 2 == 0) {
      even_count_lst2++;
    }
  }
  if (even_count_lst2 >= odd_count_lst1) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = exchange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (""YES""));
}
"
HumanEval/111,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସ୍ପେସ୍ ପୃଥକ ଛୋଟ ଅକ୍ଷର ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଯାଇଥିବା, ଅଧିକତମ ପୁନରାବୃତ୍ତି ସହିତ ଅକ୍ଷରର ଏକ ମ୍ୟାପ୍ ଫେରାନ୍ତୁ ଏବଂ ସମାନ ଗଣନା ଧାରଣ କରନ୍ତୁ _ ଯଦି ଏକାଧିକ ଅକ୍ଷର ସମାନ ଘଟନା ଅଛି, ତେବେ ସେଗୁଡିକ ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ >>> ହିଷ୍ଟୋଗ୍ରାମ୍ (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.histogram.org/) (https://www.histogram.org/) (https://www.histogram.org/) (https://www.histogram.stststststststst.stst.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.st.org/) (long/) (long/) (long/) (long
std::map<std::string,long> histogram(std::string test) {
","#include<assert.h>
#include<bits/stdc++.h>
std::map<std::string,long> histogram(std::string test) {
  std::map<std::string, long> counts;
  std::string current_word;
  std::stringstream ss(test);
  while (ss >> current_word) {
    counts[current_word]++;
  }
  if (counts.empty()) {
    return {};
  }
  long max_count = 0;
  for (const auto& pair : counts) {
    if (pair.second > max_count) {
      max_count = pair.second;
    }
  }
  std::map<std::string, long> result;
  for (const auto& pair : counts) {
    if (pair.second == max_count) {
      result[pair.first] = pair.second;
    }
  }
  return result;
}","}
int main() {
    auto candidate = histogram;
    assert(candidate((""a b b a"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c a b"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c d g"")) == (std::map<std::string,long>({{""a"", 1}, {""b"", 1}, {""c"", 1}, {""d"", 1}, {""g"", 1}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate((""b b b b a"")) == (std::map<std::string,long>({{""b"", 4}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate(("""")) == (std::map<std::string,long>()));
    assert(candidate((""a"")) == (std::map<std::string,long>({{""a"", 1}})));
}
"
HumanEval/112,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// କାର୍ଯ୍ୟ ଆମକୁ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ s ଏବଂ c ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ s ରେ ଥିବା ସମସ୍ତ ଅକ୍ଷରକୁ ଅପସାରଣ କରିବାକୁ ପଡିବ ଯାହା c ରେ ଥିବା ଯେକୌଣସି ଅକ୍ଷର ସହିତ ସମାନ ଅଟେ ତାପରେ ଯାଞ୍ଚ କରନ୍ତୁ ଯେ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପାଲିଣ୍ଡ୍ରୋମ୍ ଅଟେ କି ନାହିଁ _ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପାଲିଣ୍ଡ୍ରୋମ୍ କୁହାଯାଏ ଯଦି ଏହା ପଛକୁ ସମାନ ପଛୁଆ ଭାବରେ ପ read ାଯାଏ _ ଆପଣ ଯାଞ୍ଚ ପାଇଁ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏବଂ ସତ୍ୟ / ମିଥ୍ୟା ଥିବା ଏକ ଟାପଲ୍ ଫେରସ୍ତ କରିବା ଉଚିତ୍ _ ଉଦାହରଣ >>> reverse_delete (((""abcde""), (""ae"")) (std::make_tuple (((bcd"", false)) >>> reverse_delete (((""abcdef""), (""b"") (std::make_tuple (((acdef"",)) >>> reverse_delete (((abcded"", false)) >>> reverse_delete (((abcded""), (""abcba"") (std::make_tuple"", true))
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
","#include<assert.h>
#include<bits/stdc++.h>
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
  std::string result = """";
  std::unordered_set<char> chars_to_delete(c.begin(), c.end());
  for (char ch : s) {
    if (chars_to_delete.find(ch) == chars_to_delete.end()) {
      result += ch;
    }
  }
  std::string reversed_result = result;
  std::reverse(reversed_result.begin(), reversed_result.end());
  return std::make_tuple(result, result == reversed_result);
}","}
int main() {
    auto candidate = reverse_delete;
    assert(candidate((""abcde""), (""ae"")) == (std::make_tuple(""bcd"", false)));
    assert(candidate((""abcdef""), (""b"")) == (std::make_tuple(""acdef"", false)));
    assert(candidate((""abcdedcba""), (""ab"")) == (std::make_tuple(""cdedc"", true)));
    assert(candidate((""dwik""), (""w"")) == (std::make_tuple(""dik"", false)));
    assert(candidate((""a""), (""a"")) == (std::make_tuple("""", true)));
    assert(candidate((""abcdedcba""), ("""")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""abcdedcba""), (""v"")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""vabba""), (""v"")) == (std::make_tuple(""abba"", true)));
    assert(candidate((""mamma""), (""mia"")) == (std::make_tuple("""", true)));
}
"
HumanEval/113,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଦିଆଗଲା, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଷ୍ଟ୍ରିଙ୍ଗ୍ କେବଳ ଅଙ୍କ ବିଶିଷ୍ଟ, ଏକ ଭେକ୍ଟର ଫେରାଇଦେବେ. ଆଉଟପୁଟର ପ୍ରତ୍ୟେକ ଉପାଦାନ i ""ଇନପୁଟ୍ ର ଷ୍ଟ୍ରିଙ୍ଗ୍ i ରେ ଥିବା ଅଙ୍କ ସଂଖ୍ୟା"" ହେବା ଉଚିତ. ଯେଉଁଠାରେ ସମସ୍ତ i କୁ ଇନପୁଟ୍ ର i'th ଷ୍ଟ୍ରିଙ୍ଗ୍ ରେ ଥିବା ଅଙ୍କ ସଂଖ୍ୟା ଦ୍ୱାରା ବଦଳାଯିବା ଉଚିତ. >>> odd_count((std::vector<std::string>(({std::string) ""1234567""}))) (std::vector<std::string>({stdstring) "" 4n ର str4ng 4 ର ଅଙ୍କ ସଂଖ୍ୟା 4n. ""})) >>> odd_count(stdvector<stdstring>::{(stdstring) """", ""3 (stdstring) ""::""""1111""11""}))) (stdvector<stdstring::{stdstring>) ""n: 1n: 1n"" 8n ର ଅଙ୍କ ସଂଖ୍ୟା 8n. "" (string) 8n.
std::vector<std::string> odd_count(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> odd_count(std::vector<std::string> lst) {
  std::vector<std::string> result;
  for (const std::string& s : lst) {
    int count = 0;
    for (char c : s) {
      if ((c - '0') % 2 != 0) {
        count++;
      }
    }
    std::string count_str = std::to_string(count);
    std::string modified_s = s;
    for (char& c : modified_s) {
      if (isdigit(c) && (c - '0') % 2 != 0) {
        c = count_str[0];
      }
    }
    result.push_back(""the number of odd elements "" + count_str + ""n the str"" + modified_s + ""ng "" + modified_s + "" of the "" + modified_s + ""nput."");
  }
  return result;
}","}
int main() {
    auto candidate = odd_count;
    assert(candidate((std::vector<std::string>({(std::string)""1234567""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 4n the str4ng 4 of the 4nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""3"", (std::string)""11111111""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 1n the str1ng 1 of the 1nput."", (std::string)""the number of odd elements 8n the str8ng 8 of the 8nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""271"", (std::string)""137"", (std::string)""314""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 2n the str2ng 2 of the 2nput."", (std::string)""the number of odd elements 3n the str3ng 3 of the 3nput."", (std::string)""the number of odd elements 2n the str2ng 2 of the 2nput.""})));
}
"
HumanEval/114,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ସମୁଦାୟ ସଂଖ୍ୟା n ଦିଆଗଲା, କୌଣସି ବି ଅଣ-ଖାଲି ଉପ-ଭେକ୍ଟର ସମୁଦାୟ ସଂଖ୍ୟା n ର ସର୍ବନିମ୍ନ ସମୁଦାୟକୁ ଖୋଜ _ ଉଦାହରଣ >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)
long minSubArraySum(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>
long minSubArraySum(std::vector<long> nums) {
  if (nums.empty()) {
    throw std::invalid_argument(""Input vector cannot be empty."");
  }
  long min_so_far = nums[0];
  long current_min = nums[0];
  for (size_t i = 1; i < nums.size(); ++i) {
    current_min = std::min(nums[i], current_min + nums[i]);
    min_so_far = std::min(min_so_far, current_min);
  }
  return min_so_far;
}","}
int main() {
    auto candidate = minSubArraySum;
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));
    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));
    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));
    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));
    assert(candidate((std::vector<long>({(long)-10}))) == (-10));
    assert(candidate((std::vector<long>({(long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));
}
"
HumanEval/115,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣ କୁଅର ଏକ ଆୟତନିକ ଗ୍ରୀଡ ପାଇବେ _ ପ୍ରତ୍ୟେକ ଧାଡି ଏକ କୁଅକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ, ଏବଂ ପ୍ରତ୍ୟେକ ଧାଡିରେ 1 ଗୋଟିଏ ଜଳର ଏକକକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ _ ପ୍ରତ୍ୟେକ କୁଅରେ ଏକ ସମାନ ବାଲ୍ଟି ଅଛି ଯାହାକୁ ଏଥିରୁ ଜଳ ବାହାର କରିବା ପାଇଁ ବ୍ୟବହାର କରାଯାଇପାରିବ, ଏବଂ ସମସ୍ତ ବାଲ୍ଟିରେ ସମାନ କ୍ଷମତା ଅଛି _ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି କୁଅକୁ ଖାଲି କରିବା ପାଇଁ ବାଲ୍ଟି ବ୍ୟବହାର କରିବା _ ଆପଣ ବାଲ୍ଟିକୁ କେତେଥର ତଳକୁ ଆଣିବା ଆବଶ୍ୟକ ତାହା ଆଉଟପୁଟ୍ କରନ୍ତୁ _ ଉଦାହରଣ 1: >>> max_fill((long_long:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:st:
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
","#include<assert.h>
#include<bits/stdc++.h>
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
  long bucket_lowering_count = 0;
  for (const auto& row : grid) {
    long water_in_well = 0;
    for (long unit : row) {
      water_in_well += unit;
    }
    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;
  }
  return bucket_lowering_count;
}","}
int main() {
    auto candidate = max_fill;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));
}
"
HumanEval/116,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏହି କଟା ରେ, ଆପଣଙ୍କୁ ଏକ ନକାରାତ୍ମକ ସଂଖ୍ୟାର ଭେକ୍ଟରକୁ ସେମାନଙ୍କର ବାଇନାରୀ ପ୍ରତିନିଧିତ୍ୱରେ ଏକ ସଂଖ୍ୟା ଅନୁଯାୟୀ କ୍ରମାନୁସାରେ ସର୍ଟ କରିବାକୁ ପଡିବ _ ସମାନ ସଂଖ୍ୟକ ଏକ ପାଇଁ, ଦଶମିକ ମୂଲ୍ୟ ଉପରେ ଆଧାର କରି ସର୍ଟ କରନ୍ତୁ _ ଏହାକୁ ଏହିପରି କାର୍ଯ୍ୟକାରୀ କରିବାକୁ ପଡିବଃ >>> sort_array((std::vector<long>{(long) 1, (long) 5, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5})) >>> sort_array((std::vector<long>{(long>{(long-2, (long) 3, (long) 4, (long) 5, (long) -6}))) (std::vector<long>{(long>{-6, (long) -5, (long) -4, (long) -3, (long) -2) >>> array_std::vector<long>{(long>{0, (long) 1, (long) 3, (long)) (long) 4, (long) 1, (long) (long) (long)) (long) (long) 3, (long)) (long) (long) (long) (long) (long)) (long) (long) (long)) (long) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long))
std::vector<long> sort_array(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
int count_set_bits(long n) {
  int count = 0;
  if (n < 0) {
    n = std::abs(n);
  }
  while (n > 0) {
    n &= (n - 1);
    count++;
  }
  return count;
}

bool compare(long a, long b) {
  int bits_a = count_set_bits(a);
  int bits_b = count_set_bits(b);
  if (bits_a != bits_b) {
    return bits_a < bits_b;
  }
  return a < b;
}

std::vector<long> sort_array(std::vector<long> arr) {
  std::sort(arr.begin(), arr.end(), compare);
  return arr;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));
    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
}
"
HumanEval/117,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ string s ଏବଂ ଏକ ପ୍ରାକୃତିକ ସଂଖ୍ୟା n ଦିଆଗଲା, ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ କାର୍ଯ୍ୟକାରୀ କରିବାକୁ କୁହାଯାଇଛି ଯାହା string s ରୁ ସମସ୍ତ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ଫେରାଇଥାଏ ଯେଉଁଥିରେ ସଠିକ୍ ଭାବରେ n ବର୍ଣ୍ଣମାଳା ଥାଏ, ଏହି ଶବ୍ଦଗୁଡ଼ିକ string s ରେ ଦେଖାଯିବା ପାଇଁ। ଯଦି string s ଖାଲି ଥାଏ ତେବେ ଫଙ୍କସନଟି ଏକ ଖାଲି ଭେକ୍ଟର ଫେରାଇବ _ ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଅକ୍ଷର ଏବଂ ସ୍ପେସ୍ ଅଛି _ ଉଦାହରଣଃ >>> select_words ({""ମେରୀଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା""), (4)) (std::vector<std::string>) ({""ମ୍ୟାରିଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା""}) ({""ମ୍ୟାରିଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା""}) ({""ମେରୀଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା""}) ({""ମେରୀ"", ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟାରି"",}) ({""ମ୍ୟ"",}) (}) ({""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ"") ({""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ""ମ୍ୟ""} ("", ("", ("",) ("", ("",) ("", ("",)
std::vector<std::string> select_words(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_consonant(char c) {
  c = tolower(c);
  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');
}

std::vector<std::string> select_words(std::string s, long n) {
  std::vector<std::string> result;
  std::string current_word;
  for (char c : s) {
    if (c == ' ') {
      long consonant_count = 0;
      for (char word_char : current_word) {
        if (is_consonant(word_char)) {
          consonant_count++;
        }
      }
      if (consonant_count == n) {
        result.push_back(current_word);
      }
      current_word = """";
    } else {
      current_word += c;
    }
  }
  long consonant_count = 0;
  for (char word_char : current_word) {
    if (is_consonant(word_char)) {
      consonant_count++;
    }
  }
  if (consonant_count == n) {
    result.push_back(current_word);
  }
  return result;
}","}
int main() {
    auto candidate = select_words;
    assert(candidate((""Mary had a little lamb""), (4)) == (std::vector<std::string>({(std::string)""little""})));
    assert(candidate((""Mary had a little lamb""), (3)) == (std::vector<std::string>({(std::string)""Mary"", (std::string)""lamb""})));
    assert(candidate((""simple white space""), (2)) == (std::vector<std::string>()));
    assert(candidate((""Hello world""), (4)) == (std::vector<std::string>({(std::string)""world""})));
    assert(candidate((""Uncle sam""), (3)) == (std::vector<std::string>({(std::string)""Uncle""})));
    assert(candidate((""""), (4)) == (std::vector<std::string>()));
    assert(candidate((""a b c d e f""), (1)) == (std::vector<std::string>({(std::string)""b"", (std::string)""c"", (std::string)""d"", (std::string)""f""})));
}
"
HumanEval/118,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଦିଆ ଯାଇଛି. ଆପଣଙ୍କର କାମ ହେଉଛି ଶବ୍ଦ ର ଡାହାଣ ପାର୍ଶ୍ବ ରୁ ଦୁଇଟା ସ୍ୱରବର୍ଣ୍ଣ ମଧ୍ୟରେ ଥିବା ନିକଟତମ ସ୍ୱରବର୍ଣ୍ଣକୁ ଖୋଜିବା (ମୌଳିକ ବର୍ଣ୍ଣର ସଂଯୋଜକ) । ଆରମ୍ଭ ଓ ଶେଷ ରେ ଥିବା ସ୍ୱରବର୍ଣ୍ଣ ଗୁଡିକୁ ଗଣନା କରାଯାଏ ନାହିଁ । ଯଦି ଆପଣ ଉପରୋକ୍ତ ସର୍ତ୍ତ ପୂରଣ କରୁଥିବା କୌଣସି ସ୍ୱରବର୍ଣ୍ଣ ନ ପାଇଛନ୍ତି ତେବେ ଖାଲି string କୁ ଫେରାଇ ଦିଅନ୍ତୁ । ଆପଣ ଧରି ନେଇ ପାରିବେ ଯେ ଦିଆଯାଇଥିବା string ରେ କେବଳ ଇଂରାଜୀ ଅକ୍ଷର ଅଛି । ଉଦାହରଣଃ >>> get_closest_vowel((""yogurt"")) (""u"") >>> get_closest_vowel(""FULL"")) (""U"") >>> get_closest_vowel(""quick"")) ("""") >>> get_closest_vowel((ab"") ("""")
std::string get_closest_vowel(std::string word) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_vowel(char c) {
  c = tolower(c);
  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}

bool is_consonant(char c) {
  return isalpha(c) && !is_vowel(c);
}

std::string get_closest_vowel(std::string word) {
  if (word.length() < 3) {
    return """";
  }
  for (int i = word.length() - 2; i >= 1; --i) {
    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {
      return std::string(1, word[i]);
    }
  }
  return """";
}","}
int main() {
    auto candidate = get_closest_vowel;
    assert(candidate((""yogurt"")) == (""u""));
    assert(candidate((""full"")) == (""u""));
    assert(candidate((""easy"")) == (""""));
    assert(candidate((""eAsy"")) == (""""));
    assert(candidate((""ali"")) == (""""));
    assert(candidate((""bad"")) == (""a""));
    assert(candidate((""most"")) == (""o""));
    assert(candidate((""ab"")) == (""""));
    assert(candidate((""ba"")) == (""""));
    assert(candidate((""quick"")) == (""""));
    assert(candidate((""anime"")) == (""i""));
    assert(candidate((""Asia"")) == (""""));
    assert(candidate((""Above"")) == (""o""));
}
"
HumanEval/119,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗର ଏକ ଭେକ୍ଟର ଦିଆଯାଇଛି, ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଖୋଲା ବନ୍ଧନୀ '(' କିମ୍ବା ବନ୍ଦ ବନ୍ଧନୀ ') ' ରହିଛି । ଆପଣଙ୍କର କାମ ହେଉଛି ଯାଞ୍ଚ କରିବା ଯେ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗକୁ କିଛି କ୍ରମରେ ସଂଯୋଗ କରିବା ସମ୍ଭବ କି ନାହିଁ, ଯେ ଫଳସ୍ୱରୂପ ଷ୍ଟ୍ରିଙ୍ଗ ଭଲ ହେବ । ଏକ ଷ୍ଟ୍ରିଙ୍ଗ S କୁ ଭଲ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି ଏବଂ କେବଳ ଯଦି S ରେ ଥିବା ସମସ୍ତ ବନ୍ଧନୀ ସନ୍ତୁଳିତ ହୋଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପଃ ଷ୍ଟ୍ରିଙ୍ଗ '(()) ' ଭଲ ଅଟେ, ଯେତେବେଳେ ଷ୍ଟ୍ରିଙ୍ଗ '()) ' ନୁହେଁ _ ଭଲ ଷ୍ଟ୍ରିଙ୍ଗ ତିଆରି କରିବାର ଉପାୟ ଅଛି ତେବେ 'ହଁ' ଫେରାନ୍ତୁ, ଏବଂ ଅନ୍ୟଥା 'ନା' ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ >>> match_parens(std:: vector<std:: string>{((stdstring) "") "", ((std:: string) "")) "" ("" ହଁ "") >>> match_parens<std:: vector<std:: string>{(stdstring>"" (""ନା"") "" ())
std::string match_parens(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_good(const std::string& s) {
  int balance = 0;
  for (char c : s) {
    if (c == '(') {
      balance++;
    } else if (c == ')') {
      balance--;
    }
    if (balance < 0) {
      return false;
    }
  }
  return balance == 0;
}

std::string match_parens(std::vector<std::string> lst) {
  std::string s1 = lst[0];
  std::string s2 = lst[1];
  if (is_good(s1 + s2) || is_good(s2 + s1)) {
    return ""Yes"";
  } else {
    return ""No"";
  }
}","}
int main() {
    auto candidate = match_parens;
    assert(candidate((std::vector<std::string>({(std::string)""()("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)"")""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()(())"", (std::string)""())())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")())"", (std::string)""(()()(""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(())))"", (std::string)""(()())((""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""()"", (std::string)""())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()("", (std::string)""()))()""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(((("", (std::string)""((())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")(()"", (std::string)""(()(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")("", (std::string)"")(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)""(""}))) == (""Yes""));
}
"
HumanEval/120,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର arr ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏବଂ ଏକ ସକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ଦିଆଗଲା, ଏକ ସର୍ଟ ହୋଇଥିବା ଭେକ୍ଟର ଫେରାଇଦିଅନ୍ତୁ k ସଂଖ୍ୟା ସହିତ arr ରେ ସର୍ବାଧିକ k ସଂଖ୍ୟା ସହିତ. ଉଦାହରଣ 1: >>> ସର୍ବାଧିକ((std::vector<long>({long) -3, (long) -4, (long) -5, (long)), (3)) (std::vector<long>({long) -4, (long) -3, (long) 5}) ଉଦାହରଣ 2: >>> ସର୍ବାଧିକ((std::vector<long>({long) -4, (long) -4})), (2)) (std::vector<long>{long} -4, (long) 4}) ଉଦାହରଣ 3: >>> ସର୍ବାଧିକ((std::vector<long>{long} -3, (long) -2, (long) -1, (long) -2, (long) -1, (long) -2, (long) -1, (long) (1)) (1) (std::vector<long>) = 1. ଭେକ୍ଟରର ଲମ୍ବ 1000, ଭେକ୍ଟରର ତ୍ରୈାଙ୍କ ମଧ୍ୟରେ ରହିବ _ ଦୟାକରଣରେ 1000, ଭେକ୍ଟରଗୁଡ଼ିକର ଦୈର୍ଘ୍ୟରେ ରହିବ _ [ len-1, len-1, len-1, len-1]
std::vector<long> maximum(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> maximum(std::vector<long> arr, long k) {
  std::sort(arr.rbegin(), arr.rend());
  std::vector<long> result;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    result.push_back(arr[i]);
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = maximum;
    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));
    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));
    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));
    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));
    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));
}
"
HumanEval/121,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଅଣ-ଖାଲି ଭେକ୍ଟର ଦିଆଯାଇଥିବା, ସମ ସମ ସମୁଦାୟର ସମୁଦାୟକୁ ଫେରାଇଥାଏ _ ଉଦାହରଣ >>> ସମାଧାନ >>> ଷ୍ଟଡିଃ ଭେକ୍ଟର <long> (long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> ସମାଧାନ >>> ଷ୍ଟଡିଃ ଭେକ୍ଟର <long> (long) 3, (long) 3, (long) 3, (long) 3}))) (9) >>> ସମାଧାନ >>> ଷ୍ଟଡିଃ ଭେକ୍ଟର <long> (long) 30, (long) 13, (long) 24, (long) 321}))) (0)
long solution(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long solution(std::vector<long> lst) {
  long sum = 0;
  for (long i = 0; i < lst.size(); i += 2) {
    if (lst[i] % 2 != 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = solution;
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));
    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));
    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));
    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));
}
"
HumanEval/122,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଅସରନ୍ତି ଭେକ୍ଟର ଦିଆଯାଇଥିବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା arr ଏବଂ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k, arr ର ପ୍ରଥମ k ଉପାଦାନରୁ ସର୍ବାଧିକ ଦୁଇଟି ଅଙ୍କ ସହିତ ଉପାଦାନଗୁଡ଼ିକର ସମୁଦାୟ ଫେରାଇଥାଏ _ ଉଦାହରଣଃ >>> add_elements{}std::vector<long>{(long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) ପ୍ରତିବନ୍ଧକଃ 1. 1 <= len(arr) <= 100 2. 1 <= k <= lenarr)
long add_elements(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
long add_elements(std::vector<long> arr, long k) {
  long sum = 0;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    if (arr[i] >= -99 && arr[i] <= 99) {
      sum += arr[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add_elements;
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));
    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));
    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));
    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));
    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));
}
"
HumanEval/123,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇଥାଏ, ଏକ ସର୍ଟ ହୋଇଥିବା ଭେକ୍ଟର ଫେରାଇଥାଏ ଯେଉଁଥିରେ କ୍ଲାଟଜ କ୍ରମରେ ଅଜଣା ସଂଖ୍ୟା ଥାଏ । କ୍ଲାଟଜ ଅନୁମାନ ଗଣିତରେ ଏକ ଅନୁମାନ ଅଟେ ଯାହା ନିମ୍ନଲିଖିତ ଭାବରେ ବ୍ୟାଖ୍ୟା କରାଯାଇଥିବା ଏକ କ୍ରମକୁ ନେଇଥାଏ: ଯେକୌଣସି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ସହିତ ଆରମ୍ଭ କରନ୍ତୁ । ତାପରେ ପ୍ରତ୍ୟେକ ପଦ ପୂର୍ବବର୍ତ୍ତୀ ପଦରୁ ନିମ୍ନଲିଖିତ ଭାବରେ ପ୍ରାପ୍ତ ହୁଏ: ଯଦି ପୂର୍ବବର୍ତ୍ତୀ ପଦ ସମାନ, ପରବର୍ତ୍ତୀ ପଦ ପୂର୍ବବର୍ତ୍ତୀ ପଦର ଅଧା ଅଟେ _ ଯଦି ପୂର୍ବବର୍ତ୍ତୀ ପଦ ଅଜଣା, ପରବର୍ତ୍ତୀ ପଦ ପୂର୍ବବର୍ତ୍ତୀ ପଦର 3 ଗୁଣ ଅଧିକ 1 ଅଟେ _ ଅନୁମାନ ହେଉଛି ଯେ n ର ମୂଲ୍ୟ ଯାହା ହେଲେ ମଧ୍ୟ, କ୍ରମ ସର୍ବଦା 1 କୁ ପହଞ୍ଚିବ _ ଟିପ୍ପଣୀଃ 1. Collatz ((1) ହେଉଛି [1] _ 2. ଫେରସ୍ତ ଭେକ୍ଟର ବୃଦ୍ଧି କ୍ରମରେ ସର୍ଟ ହୋଇଛି _ ଉଦାହରଣ ସ୍ୱରୂପଃ get_odd_collatz (5) ଫେରସ୍ତ କରେ [1, 5] _ 5 ପାଇଁ କ୍ଲାଟଜ କ୍ରମ ହେଉଛି [5, 8, 16, 4, 2, 1], ତେଣୁ ଅଜଣା ସଂଖ୍ୟାଗୁଡ଼ିକ କେବଳ 1 ଏବଂ 5 _ >>> get_collatz ((5) (st ଭେକ୍ଟରଃ{d} (<1} (long) {}) _
std::vector<long> get_odd_collatz(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> get_odd_collatz(long n) {
  std::vector<long> odd_numbers;
  std::unordered_set<long> seen;
  long current = n;
  while (seen.find(current) == seen.end()) {
    seen.insert(current);
    if (current % 2 != 0) {
      odd_numbers.push_back(current);
    }
    if (current == 1) {
      break;
    }
    if (current % 2 == 0) {
      current /= 2;
    } else {
      current = 3 * current + 1;
    }
  }
  std::sort(odd_numbers.begin(), odd_numbers.end());
  return odd_numbers;
}","}
int main() {
    auto candidate = get_odd_collatz;
    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));
    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
}
"
HumanEval/124,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ହେବ ଯାହା ଦିଆଯାଇଥିବା ତାରିଖକୁ ବୈଧ କରେ ଏବଂ ଯଦି ତାରିଖ ବୈଧ ତେବେ ସତ୍ୟ ଫେରାଇଥାଏ ଅନ୍ୟଥା ମିଥ୍ୟା। ତାରିଖ ବୈଧ ହୋଇଥାଏ ଯଦି ନିମ୍ନଲିଖିତ ସମସ୍ତ ନିୟମଗୁଡିକ ସନ୍ତୁଷ୍ଟ ହୋଇଥାଏ: 1. ତାରିଖ ଷ୍ଟ୍ରିଙ୍ଗ ଖାଲି ନୁହେଁ 2. ମାସ ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ୍ କିମ୍ବା 31 ଦିନରୁ ଅଧିକ ନୁହେଁ 1,3,5,7,8,10,12. ଏବଂ ମାସ ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ୍ କିମ୍ବା 30 ଦିନରୁ ଅଧିକ ନୁହେଁ 4,6,9,11. ଏବଂ ମାସ ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ୍ କିମ୍ବା 29 ରୁ ଅଧିକ ନୁହେଁ 2. ମାସ 1 ରୁ କମ୍ କିମ୍ବା 12 ରୁ ଅଧିକ ହେବା ଉଚିତ ନୁହେଁ 4. ତାରିଖ ଫର୍ମାଟରେ ହେବା ଉଚିତଃ mm-dd-yyyy >>> ବୈଧ_(ତାରିଖ(103-11-2000"")) (true >>> valid_date((15-01-2012"")) (false) >>> valid_date (((04-040-20"") (false) >>> valid_(ତାରିଖ_2020-06-04"") (true >>> valid_date (((06/04/2020) (false))
bool valid_date(std::string date) {
","#include<assert.h>
#include<bits/stdc++.h>
bool valid_date(std::string date) {
  if (date.empty()) {
    return false;
  }
  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {
    return false;
  }
  int month, day, year;
  try {
    month = std::stoi(date.substr(0, 2));
    day = std::stoi(date.substr(3, 2));
    year = std::stoi(date.substr(6, 4));
  } catch (const std::invalid_argument& e) {
    return false;
  } catch (const std::out_of_range& e) {
    return false;
  }
  if (month < 1 || month > 12) {
    return false;
  }
  if (day < 1) {
    return false;
  }
  if (month == 2) {
    if (day > 29) {
      return false;
    }
  } else if (month == 4 || month == 6 || month == 9 || month == 11) {
    if (day > 30) {
      return false;
    }
  } else {
    if (day > 31) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = valid_date;
    assert(candidate((""03-11-2000"")) == (true));
    assert(candidate((""15-01-2012"")) == (false));
    assert(candidate((""04-0-2040"")) == (false));
    assert(candidate((""06-04-2020"")) == (true));
    assert(candidate((""01-01-2007"")) == (true));
    assert(candidate((""03-32-2011"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""04-31-3000"")) == (false));
    assert(candidate((""06-06-2005"")) == (true));
    assert(candidate((""21-31-2000"")) == (false));
    assert(candidate((""04-12-2003"")) == (true));
    assert(candidate((""04122003"")) == (false));
    assert(candidate((""20030412"")) == (false));
    assert(candidate((""2003-04"")) == (false));
    assert(candidate((""2003-04-12"")) == (false));
    assert(candidate((""04-2003"")) == (false));
}
"
HumanEval/125,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯାଇ, ଶ୍ବେତସ୍ଥାନରେ ବିଭକ୍ତ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଭେକ୍ଟର ଫେରାନ୍ତୁ, ଯଦି ପାଠ୍ୟରେ କୌଣସି ଶ୍ବେତସ୍ଥାନ ନଥାଏ ତେବେ ଆପଣ କମାସ୍ରେ ବିଭକ୍ତ କରିବା ଉଚିତ ',' ଯଦି କମାସ୍ ନଥାଏ ତେବେ ଆପଣ ଅକ୍ଷରଗୁଡିକର ସଂଖ୍ୟା ଫେରାଇବା ଉଚିତ, ଅକ୍ଷରଗୁଡିକର ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକର ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅଙ୍କଗୁଡିକ ଅ
Union_std_vector_std_string__long split_words(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;
    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_vector_std_string__long split_words(std::string txt) {
  if (txt.find(' ') != std::string::npos) {
    std::vector<std::string> words;
    std::stringstream ss(txt);
    std::string word;
    while (ss >> word) {
      words.push_back(word);
    }
    return Union_std_vector_std_string__long(words);
  } else if (txt.find(',') != std::string::npos) {
    std::vector<std::string> words;
    std::string current_word;
    for (char c : txt) {
      if (c == ',') {
        words.push_back(current_word);
        current_word = """";
      } else {
        current_word += c;
      }
    }
    words.push_back(current_word);
    return Union_std_vector_std_string__long(words);
  } else {
    long odd_order_count = 0;
    for (char c : txt) {
      if (islower(c)) {
        if ((c - 'a') % 2 != 0) {
          odd_order_count++;
        }
      }
    }
    return Union_std_vector_std_string__long(odd_order_count);
  }
}","}
int main() {
    auto candidate = split_words;
    assert(candidate((""Hello world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello,world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello world,!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world,!""}));
    assert(candidate((""Hello,Hello,world !"")) == std::vector<std::string>({(std::string)""Hello,Hello,world"", (std::string)""!""}));
    assert(candidate((""abcdef"")) == 3);
    assert(candidate((""aaabb"")) == 2);
    assert(candidate((""aaaBb"")) == 1);
    assert(candidate(("""")) == 0);
}
"
HumanEval/126,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ସଂଖ୍ୟା ଦିଆଗଲା, ସେମାନେ କ୍ରମାନୁସାରେ ସର୍ଟ କରା ଯାଇଛନ୍ତି କି ନାହିଁ ଫେରାଇ ଦିଅନ୍ତୁ. ଯଦି ଭେକ୍ଟରରେ ସମାନ ସଂଖ୍ୟାର 1 ରୁ ଅଧିକ ଡୁପ୍ଲିକେଟ୍ ଅଛି, ମିଥ୍ୟା ଫେରାଇ ଦିଅନ୍ତୁ. କୌଣସି ନକାରାତ୍ମକ ସଂଖ୍ୟା ନାହିଁ ଏବଂ କେବଳ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଧରନ୍ତୁ. ଉଦାହରଣ >>> is_sorted (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long) (long_long_long_long) (long_long_long_long) (long_long_long_long_long) (long_long_long_long_long) (long_long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long) (long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long
bool is_sorted(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_sorted(std::vector<long> lst) {
  if (lst.size() <= 1) {
    return true;
  }
  std::map<long, int> counts;
  for (long x : lst) {
    counts[x]++;
  }
  for (auto const& [key, val] : counts) {
    if (val > 2) {
      return false;
    }
  }
  for (size_t i = 0; i < lst.size() - 1; ++i) {
    if (lst[i] > lst[i + 1]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_sorted;
    assert(candidate((std::vector<long>({(long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));
}
"
HumanEval/127,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଦୁଇଟି ଅନ୍ତରାଳ ଦିଆଯାଏ, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ହେଉଛି ଏକ ଯୋଡି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା. ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳ = (ଆରମ୍ଭ, ଶେଷ) = (1, 2) । ଦିଆଯାଇଥିବା ଅନ୍ତରାଳଗୁଡ଼ିକ ବନ୍ଦ ହୋଇଥାଏ, ଯାହାର ଅର୍ଥ ହେଉଛି ଅନ୍ତରାଳ (ଆରମ୍ଭ, ଶେଷ) ଉଭୟ ଆରମ୍ଭ ଏବଂ ଶେଷ ଅନ୍ତର୍ଭୁକ୍ତ କରିଥାଏ । ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ପାଇଁ, ଏହା ଧରାଯାଏ ଯେ ଏହାର ଆରମ୍ଭ ଏହାର ଶେଷ ଠାରୁ କମ୍ କିମ୍ବା ସମାନ ଅଟେ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏହି ଦୁଇଟି ଅନ୍ତରାଳର କ୍ରିୟାକାରଣର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା କି ନାହିଁ ନିର୍ଣ୍ଣୟ କରିବା । ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳଗୁଡ଼ିକର କ୍ରିୟାକାରଣ (1, 3), (2, 4) ହେଉଛି (2, 3) ଯାହାର ଲମ୍ବ 1 ଅଟେ, ଯାହା ଏକ ଅଶୂର ସଂଖ୍ୟା ନୁହେଁ । ଯଦି କ୍ରିୟାକାରଣର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା, ""YES"" ଫେରାଇଦିଅନ୍ତୁ, ଅନ୍ୟଥା, ""NO"" ଫେରାଇଦିଅନ୍ତୁ । ଯଦି ଦୁଇଟି ଅନ୍ତରାଳ କ୍ରିୟାକାରଣ ନକରନ୍ତି, ""NO"" ଫେରାଇଦିଅନ୍ତୁ । [input/output] ନମୁନାଃ >>> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
  long start1 = std::get(interval1);
  long end1 = std::get(interval1);
  long start2 = std::get(interval2);
  long end2 = std::get(interval2);
  long intersection_start = std::max(start1, start2);
  long intersection_end = std::min(end1, end2);
  long intersection_length = intersection_end - intersection_start + 1;
  if (intersection_length <= 0) {
    return ""NO"";
  }
  if (is_prime(intersection_length)) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = intersection;
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (""NO""));
    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (""NO""));
    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (""YES""));
    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (""YES""));
    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (""NO""));
    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (""NO""));
}
"
HumanEval/128,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଭେକ୍ଟର arr ଦିଆ ଯାଇଛି ଏବଂ ଆପଣଙ୍କୁ ଭେକ୍ଟରରେ ଥିବା ପ୍ରତ୍ୟେକ ସଂଖ୍ୟାର ସମସ୍ତ ଚିହ୍ନର ଗୁଣନ ଦ୍ୱାରା ଗୁଣିତ ହୋଇଥିବା ସଂଖ୍ୟାର ପରିମାଣର ସମୁଦାୟ ଫେରାଇବାକୁ ପଡିବ, ଯାହାକି 1, -1 କିମ୍ବା 0 ଦ୍ୱାରା ପ୍ରତିନିଧିତ୍ୱ ହୋଇଥାଏ _ ଟିପ୍ପଣୀଃ ଖାଲି arr ପାଇଁ କୌଣସିଟି ଫେରାନ୍ତୁ ନାହିଁ _ ଉଦାହରଣଃ >>> prod_signs(((std::vector<long>{(long) 1, (long) 2, (long) 2, (long) -4}))) 9 >>> prod_signs(std::vector<long>({(long) 0, (long) 1}))) 0 >>> prod_signs((std::vector<long>(())) std::nopt
std::optional<long> prod_signs(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> prod_signs(std::vector<long> arr) {
  if (arr.empty()) {
    return std::nullopt;
  }
  long sum_magnitudes = 0;
  long product_of_signs = 1;
  for (long num : arr) {
    sum_magnitudes += std::abs(num);
    if (num > 0) {
      product_of_signs *= 1;
    } else if (num < 0) {
      product_of_signs *= -1;
    } else {
      product_of_signs *= 0;
    }
  }
  return sum_magnitudes * product_of_signs;
}","}
int main() {
    auto candidate = prod_signs;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);
}
"
HumanEval/129,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// N ଧାଡି ଏବଂ N ସ୍ତମ୍ଭ (N >= 2) ଏବଂ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ସହିତ ଏକ ଗ୍ରୀଡକୁ ଦିଆଯାଇଥାଏ, ଗ୍ରୀଡର ପ୍ରତ୍ୟେକ କୋଷରେ ଏକ ମୂଲ୍ୟ ରହିଥାଏ _ [1, N * N] ଅନ୍ତର୍ଭୁକ୍ତ ରେ ଥିବା ପ୍ରତ୍ୟେକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରୀଡର କୋଷରେ ଠିକ୍ ଥରେ ଦେଖାଯାଏ _ ଆପଣଙ୍କୁ ଗ୍ରୀଡରେ k ଲମ୍ବର ସର୍ବନିମ୍ନ ପଥ ଖୋଜିବାକୁ ପଡିବ _ ଆପଣ ଯେକୌଣସି କୋଷରୁ ଆରମ୍ଭ କରିପାରିବେ, ଏବଂ ପ୍ରତ୍ୟେକ ପଦକ୍ଷେପରେ ଆପଣ ଯେକୌଣସି ପଡୋଶୀ କୋଷକୁ ଯାଇପାରିବେ, ଅନ୍ୟ ଶବ୍ଦରେ, ଆପଣ ଯେକୌଣସି କୋଷକୁ ଯାଇପାରିବେ ଯାହା ଆପଣଙ୍କ ସାମ୍ପ୍ରତିକ କୋଷ ସହିତ ଏକ କଡ଼କୁ ଅଂଶୀଦାର କରନ୍ତି _ ଦୟାକରି ଧ୍ୟାନ ଦିଅନ୍ତୁ ଯେ k ଲମ୍ବର ପଥ ଅର୍ଥାତ୍ k କୋଷ ପରିଦର୍ଶନ କରିବା (ଅବଶ୍ୟକ ଭାବରେ ଭିନ୍ନ ନୁହେଁ) _ ଆପଣ ଗ୍ରୀଡରୁ ବାହାରକୁ ଯାଇପାରିବେ ନାହିଁ _ ଏକ ପଥ A (ଲମ୍ବ k) କୁ ପଥ B (ଲମ୍ବ k) ଠାରୁ କମ୍ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି A ଏବଂ B (ସେଗୁଡ଼ିକୁ l_stA ଏବଂ l_stB) କୁ ଯାଞ୍ଚ କରିବା ପରେ, l_stA_stA_ଜୀବୀ ଭାଷାଗତ ଭାବରେ l_stB_stB ଠାରୁ କମ୍, ଅନ୍ୟ ଶବ୍ଦରେ, ଆପଣ ଯେକୌଣସି କୋଷରୁ ଆରମ୍ଭ କରିପାରିବେ _ ଏହା ହେଉଛି ଯେକୌଣସି କୋଷର ପଥାର ଏକକ _[i] l_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j
std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
  int n = grid.size();
  std::vector<long> min_path;

  std::function<void(int, int, std::vector<long>)> dfs = 
    [&](int row, int col, std::vector<long> current_path) {
    if (current_path.size() == k) {
      if (min_path.empty() || current_path < min_path) {
        min_path = current_path;
      }
      return;
    }

    current_path.push_back(grid[row][col]);

    int dr= {-1, 1, 0, 0};
    int dc= {0, 0, -1, 1};

    for (int i = 0; i < 4; ++i) {
      int next_row = row + dr[i];
      int next_col = col + dc[i];
      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {
        dfs(next_row, next_col, current_path);
      }
    }
  };

  for (int start_row = 0; start_row < n; ++start_row) {
    for (int start_col = 0; start_col < n; ++start_col) {
      dfs(start_row, start_col, {});
    }
  }

  return min_path;
}","}
int main() {
    auto candidate = minPath;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
}
"
HumanEval/130,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ସମସ୍ତେ ଫିବୋନାସୀ କ୍ରମାଙ୍କ ବିଷୟରେ ଜାଣିଛନ୍ତି, ଏହାକୁ ଗଣିତଜ୍ଞମାନେ ଗତ ଦୁଇ ଶତାବ୍ଦୀ ମଧ୍ୟରେ ଗଭୀର ଭାବରେ ଅଧ୍ୟୟନ କରିଥିଲେ । ତଥାପି, ଲୋକମାନେ ଯାହା ଜାଣନ୍ତି ନାହିଁ ତାହା ହେଉଛି ଟ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ । ଟ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ ପୁନଃ ଘଟଣାର ପରିଭାଷା ହେଉଛିଃ ତ୍ରି (୧) = ୩ ତ୍ରି (ଏନ) = ୧ + ଏନ / ୨, ଯଦି ଏନ ଯୁଗ୍ମ ଅଟେ । ତ୍ରି (ଏନ) = ତ୍ରି (ଏନ - ୧) + ତ୍ରି (ଏନ - ୨) + ତ୍ରି (ଏନ + ୧), ଯଦି ଏନ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ । ଉଦାହରଣ ସ୍ୱରୂପଃ ତ୍ରି (୨) = ୧ + (୨ / ୨) = ୨ ତ୍ରି (ଏନ - ୪) = ୩ ତ୍ରି (ଏନ - ୩) = ତ୍ରି (ଏନ - ୨) + ତ୍ରି (ଏନ - ୧) + ତ୍ରି (ଏନ - ୪) = ୨ + ୩ = ୮ ଆପଣଙ୍କୁ ଏକ ଅଣ-ନକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ ତ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ ପ୍ରଥମ n + 1 ର ଭେକ୍ଟର ଫେରାଇବାକୁ ପଡିବ । ଉଦାହରଣଃ >>> ତ୍ରି (ଏନ - ୩) (ଦଶତୀୟ ଭେକ୍ଟର) (ଦଶତଃ<<< (ଏନ - ୧) (୩, (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକ) (ଦଶତକତକ)
std::vector<long> tri(long n) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> tri(long n) {
  std::vector<long> result;
  if (n >= 0) {
    result.push_back(1);
  }
  if (n >= 1) {
    result.push_back(3);
  }
  for (long i = 2; i <= n; ++i) {
    if (i % 2 == 0) {
      result.push_back(1 + i / 2);
    } else {
      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)
      {
          result.push_back(result[i-1] + result[i-2] + result[i]);
      }
      else if (i - 1 >= 0 && i - 2 >= 0)
      {
          result.push_back(result[i-1] + result[i-2]);
      }
      else if (i - 1 >= 0)
      {
          result.push_back(result[i-1]);
      }
      else
      {
          result.push_back(0);
      }
    }
  }
  return result;
}","}
int main() {
    auto candidate = tri;
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));
    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));
    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));
    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));
    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));
    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));
    assert(candidate((0)) == (std::vector<long>({(long)1})));
    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));
}
"
HumanEval/131,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଅଙ୍କଗୁଡ଼ିକର ଗୁଣନକୁ ଫେରାଇବ. 0 ଫେରାଇବ ଯଦି ସମସ୍ତ ଅଙ୍କ ଯୁଗ୍ମ ହୋଇଥାଏ. ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଅଙ୍କଗୁଡ଼ିକ (ସୂଚକ) (୧) (1) >>> ଅଙ୍କଗୁଡ଼ିକ (ସୂଚକ) (୪) (0) >>> ଅଙ୍କଗୁଡ଼ିକ (ସୂଚକ) (୨୩୫) (15)
long digits(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long digits(long n) {
  long product = 1;
  std::string s = std::to_string(n);
  bool has_odd = false;
  for (char c : s) {
    long digit = c - '0';
    if (digit % 2 != 0) {
      product *= digit;
      has_odd = true;
    }
  }
  if (!has_odd) {
    return 0;
  }
  return product;
}","}
int main() {
    auto candidate = digits;
    assert(candidate((5)) == (5));
    assert(candidate((54)) == (5));
    assert(candidate((120)) == (1));
    assert(candidate((5014)) == (5));
    assert(candidate((98765)) == (315));
    assert(candidate((5576543)) == (2625));
    assert(candidate((2468)) == (0));
}
"
HumanEval/132,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା କେବଳ ବର୍ଗୀକୃତ ବନ୍ଧନୀ ଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ. ଫଳନଟି ସତ୍ୟ ଫେରସ୍ତ କରିବା ଉଚିତ ଯଦି ଏବଂ କେବଳ ଯଦି ବନ୍ଧନୀଗୁଡ଼ିକର ଏକ ବୈଧ ଉପକ୍ରମ ଥାଏ ଯେଉଁଠାରେ ଉପକ୍ରମରେ ଅତି କମରେ ଗୋଟିଏ ବନ୍ଧନୀ ଗଣ୍ଠିତ ହୋଇଥାଏ. >>> is_nested(""[[]]"")) (true) >>> is_nested((""[]]]]]]]]]][[[[[]"")) (false) >>> is_nested(""[][]"")) (false) >>> is_nested(""[]"")) (false) >>> is_nested(""[[]]"")) (true) >>> is_nested(""[[]]"") (true)
bool is_nested(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_nested(std::string string) {
  int balance = 0;
  bool nested = false;
  for (char c : string) {
    if (c == '[') {
      balance++;
    } else if (c == ']') {
      if (balance > 1) {
        nested = true;
      }
      balance--;
      if (balance < 0) {
        return false;
      }
    }
  }
  return balance == 0 && nested;
}","}
int main() {
    auto candidate = is_nested;
    assert(candidate((""[[]]"")) == (true));
    assert(candidate((""[]]]]]]][[[[[]"")) == (false));
    assert(candidate((""[][]"")) == (false));
    assert(candidate((""[]"")) == (false));
    assert(candidate((""[[[[]]]]"")) == (true));
    assert(candidate((""[]]]]]]]]]]"")) == (false));
    assert(candidate((""[][][[]]"")) == (true));
    assert(candidate((""[[]"")) == (false));
    assert(candidate((""[]]"")) == (false));
    assert(candidate((""[[]][["")) == (true));
    assert(candidate((""[[][]]"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""[[[[[[[["")) == (false));
    assert(candidate((""]]]]]]]]"")) == (false));
}
"
HumanEval/133,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ସଂଖ୍ୟା ଭେକ୍ଟର ଦିଆଯାଇଛି. ଆପଣଙ୍କୁ ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ବର୍ଗ ସଂଖ୍ୟାଗୁଡ଼ିକର ସମୁଦାୟ ଫେରାଇବାକୁ ପଡିବ, ଭେକ୍ଟରରେ ପ୍ରତ୍ୟେକ ଉପାଦାନକୁ ପ୍ରଥମେ ଉପର int{} ଉପର ସ୍ତର ପର୍ଯ୍ୟନ୍ତ ଘୋଡାଇ ଦିଅନ୍ତୁ. ଉଦାହରଣଃ >>> lst{}: vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f}))) (14) >>> lst{}: vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f}))) >>> (98) lst{}: vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f} (84) >>> lst{}: vector<float>{{{(float) 1.4f, (float) 2.4.0f, (float) 2.0.0f}))) (6) >>> lst{}: vector<float>{(f} (float) 2.4.0f, (float) (6) >>>
long sum_squares(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_squares(std::vector<float> lst) {
  long sum = 0;
  for (float num : lst) {
    long rounded_up = std::ceil(num);
    sum += rounded_up * rounded_up;
  }
  return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));
    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));
    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));
    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));
    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));
}
"
HumanEval/134,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗର ଶେଷ ଅକ୍ଷର ଏକ ଅକ୍ଷରୀୟ ଅକ୍ଷର ଅଟେ ଏବଂ ଏକ ଶବ୍ଦର ଅଂଶ ନୁହେଁ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ଟିପ୍ପଣୀଃ ""କଥା"" ହେଉଛି ଅକ୍ଷରଗୁଡିକର ଏକ ଗୋଷ୍ଠୀ ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ _ ଉଦାହରଣଃ >>> ଚେକ୍_ଇଫ_ଲଷ୍ଟ_ଚାର୍_ଇସ୍_ଏ_ଲେଟର (ସ) (ସ) (ଫଲସ) >>> ଚେକ୍_ଇଫ_ଲଷ୍ଟ_ଚାର୍_ଇସ୍_ଏ_ଲେଟର (ସ) (ସ) (ସ) (ସତ) >>> ଚେକ୍_ଇଫ_ଲଷ୍ଟ_ଚାର୍_ଇସ୍_ଏ_ଲେଟର (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ) (ସ)
bool check_if_last_char_is_a_letter(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_if_last_char_is_a_letter(std::string txt) {
  if (txt.empty()) {
    return false;
  }
  if (!isalpha(txt.back())) {
    return false;
  }
  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {
    return false;
  }
  return true;
}","}
int main() {
    auto candidate = check_if_last_char_is_a_letter;
    assert(candidate((""apple"")) == (false));
    assert(candidate((""apple pi e"")) == (true));
    assert(candidate((""eeeee"")) == (false));
    assert(candidate((""A"")) == (true));
    assert(candidate((""Pumpkin pie "")) == (false));
    assert(candidate((""Pumpkin pie 1"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""eeeee e "")) == (false));
    assert(candidate((""apple pie"")) == (false));
    assert(candidate((""apple pi e "")) == (false));
}
"
HumanEval/135,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଉପାଦାନର ସର୍ବ ବୃହତ ସୂଚକାଙ୍କ ଫେରାଇଥାଏ ଯାହା ଏହାଠାରୁ ତୁରନ୍ତ ପୂର୍ବବର୍ତ୍ତୀ ଉପାଦାନ ସହିତ ସମାନ କିମ୍ବା ଅଧିକ ନୁହେଁ _ ଯଦି ଏପରି କୌଣସି ଉପାଦାନ ନଥାଏ ତେବେ -୧ ଫେରାଇଥାଏ _ ଦିଆଯାଇଥିବା ଭେକ୍ଟରରେ ଡୁପ୍ଲିକେଟ୍ ମୂଲ୍ୟ ରହିବ ନାହିଁ _ ଉଦାହରଣଃ >>> can_arrange(((std::vector<long>({long) 1, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (-1)
long can_arrange(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long can_arrange(std::vector<long> arr) {
  for (long i = 1; i < arr.size(); ++i) {
    if (arr[i] < arr[i - 1]) {
      return i;
    }
  }
  return -1;
}","}
int main() {
    auto candidate = can_arrange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));
    assert(candidate((std::vector<long>())) == (-1));
}
"
HumanEval/136,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଟାପଲ୍ (a, b) ଫେରାଇଥାଏ, ଯେଉଁଠାରେ 'a' ହେଉଛି ନକାରାତ୍ମକ ସଂଖ୍ୟାର ସର୍ବ ବୃହତ ଏବଂ 'b' ହେଉଛି ଭେକ୍ଟରରେ ଥିବା ସକାରାତ୍ମକ ସଂଖ୍ୟାର ସର୍ବ ଛୋଟ। ଯଦି କୌଣସି ନକାରାତ୍ମକ କିମ୍ବା ସକାରାତ୍ମକ ସଂଖ୍ୟାର ନଥାଏ, ତେବେ ସେଗୁଡ଼ିକୁ None ଭାବରେ ଫେରାନ୍ତୁ। ଉଦାହରଣଃ >>> ସର୍ବ ବୃହତ_ସାନ_ସଂଖ୍ୟକଗୁଡ଼ିକ __________ (std::vector<long> (long) 2, (long) 4, (long) 1, (long) 3, (long) 5, (long) 7}))) std::make_tuplest_d::optional<long> (long) std::optional<long> (long) std::optional<long> (long)) std::make_smallest_integers::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std::optional<long> (long)) std) std::optional<long> (long>long>) std))
std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<tuple>
#include<vector>

std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
    std::optional<long> largest_negative = std::nullopt;
    std::optional<long> smallest_positive = std::nullopt;
    for (long num : lst) {
        if (num < 0) {
            if (!largest_negative.has_value() || num > largest_negative.value()) {
                largest_negative = num;
            }
        } else if (num > 0) {
            if (!smallest_positive.has_value() || num < smallest_positive.value()) {
                smallest_positive = num;
            }
        }
    }
    return std::make_tuple(largest_negative, smallest_positive);
}","}
int main() {
    auto candidate = largest_smallest_integers;
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));
    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));
    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));
}
"
HumanEval/137,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା, ଫ୍ଲୋଟ୍, କିମ୍ବା ପ୍ରକୃତ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଗ୍ରହଣ କରେ ଏବଂ ଦିଆଯାଇଥିବା ଭେରିଏବଲ୍ ପ୍ରକାରରେ ବଡ଼ ଭେରିଏବଲ୍ ଫେରାଇଥାଏ. ଯଦି ମୂଲ୍ୟ ସମାନ ହୋଇଥାଏ ତେବେ ନନ୍ ଫେରାଇଥାଏ. ଟିପ୍ପଣୀଃ ଯଦି ପ୍ରକୃତ ସଂଖ୍ୟା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ପ୍ରତିନିଧିତ୍ୱ କରାଯାଏ, ତେବେ ଭାସମାନ ବିନ୍ଦୁ ହୋଇପାରେ . କିମ୍ବା , >>> compare_one(1, 2.5f) 2.5f >>> compare_one(1, ""2,3"") ""2,3"" >>> compare_one(""5,1"", ""6"") ""6"" >>> compare_one(""1"", 1) std::nullopt
Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<string>

union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;
    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;
    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};

double parse_real(const std::string& s) {
    std::string temp = s;
    std::replace(temp.begin(), temp.end(), ',', '.');
    try {
        return std::stod(temp);
    } catch (const std::invalid_argument& e) {
        return std::numeric_limits<double>::quiet_NaN();
    } catch (const std::out_of_range& e) {
        return std::numeric_limits<double>::quiet_NaN();
    }
}

Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
    if (a.f2.empty() && b.f2.empty()) {
        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {
            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {
            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);
            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {
            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {
            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);
            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);
        }
    } else {
        double val_a, val_b;
        if (!a.f2.empty()) val_a = parse_real(a.f2);
        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);
        else val_a = static_cast<double>(a.f1);

        if (!b.f2.empty()) val_b = parse_real(b.f2);
        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);
        else val_b = static_cast<double>(b.f1);

        if (!std::isnan(val_a) && !std::isnan(val_b)) {
            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);
            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);
        }
    }
    return Union_long_float_std_string_std_nullopt(std::nullopt{});
}","}
int main() {
    auto candidate = compare_one;
    assert(candidate(1, 2) == 2);
    assert(candidate(1, 2.5f) == 2.5f);
    assert(candidate(2, 3) == 3);
    assert(candidate(5, 6) == 6);
    assert(candidate(1, ""2,3"") == ""2,3"");
    assert(candidate(""5,1"", ""6"") == ""6"");
    assert(candidate(""1"", ""2"") == ""2"");
    assert(candidate(""1"", 1) == std::nullopt);
}
"
HumanEval/138,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// n କୁ 4 ଟି ଯୁକ୍ତାତ୍ମକ ଯୁକ୍ତ ସଂଖ୍ୟାର ସମୁଦାୟ ଭାବରେ ଲେଖାଯାଇପାରିବ କି ନାହିଁ ତାହା ମୂଲ୍ୟାଙ୍କନ କରନ୍ତୁ _ ଉଦାହରଣ >>> is_equal_to_sum_even ({}) (ମିଥ୍ୟା) >>> is_equal_to_sum_even ({}) (ମିଥ୍ୟା) >>> is_equal_to_sum_even ({}) (ଠିକ୍)
bool is_equal_to_sum_even(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_equal_to_sum_even(long n) {
    if (n <= 6 || n % 2 != 0) {
        return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_equal_to_sum_even;
    assert(candidate((4)) == (false));
    assert(candidate((6)) == (false));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (true));
    assert(candidate((11)) == (false));
    assert(candidate((12)) == (true));
    assert(candidate((13)) == (false));
    assert(candidate((16)) == (true));
}
"
HumanEval/139,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ବ୍ରାଜିଲୀୟ ଫ୍ୟାକ୍ଟୋରିଆଲକୁ ନିମ୍ନଲିଖିତ ଭାବରେ ବ୍ୟାଖ୍ୟା କରାଯାଇଛି: ବ୍ରାଜିଲୀୟ_ଫ୍ୟାକ୍ଟୋରିଆଲ (n) = n! * (n-1)! * (n-2)! * ... * 1! ଯେଉଁଠାରେ n > 0 ଉଦାହରଣ ସ୍ୱରୂପ: >>> ବିଶେଷ_ଫ୍ୟାକ୍ଟୋରିଆଲ (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n
long special_factorial(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long factorial(long k) {
    long res = 1;
    for (long i = 2; i <= k; ++i) {
        res *= i;
    }
    return res;
}

long special_factorial(long n) {
    if (n <= 0) {
        return 1;
    }
    long result = 1;
    for (long i = 1; i <= n; ++i) {
        result *= factorial(i);
    }
    return result;
}","}
int main() {
    auto candidate = special_factorial;
    assert(candidate((4)) == (288));
    assert(candidate((5)) == (34560));
    assert(candidate((7)) == (125411328000));
    assert(candidate((1)) == (1));
}
"
HumanEval/140,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଟେକ୍ସଟ ଦିଆଗଲା, ସେଥିରେ ଥିବା ସମସ୍ତ ସ୍ପେସକୁ ଅଣ୍ଡରସ୍କୋର ସହିତ ବଦଳାନ୍ତୁ, ଏବଂ ଯଦି ଏକ ଷ୍ଟ୍ରିଙ୍ଗରେ 2 ରୁ ଅଧିକ କ୍ରମିକ ସ୍ପେସ ଅଛି, ତେବେ ସମସ୍ତ କ୍ରମିକ ସ୍ପେସକୁ - >>> fix_spaces (((""ଉଦାହରଣ"") ସହିତ ବଦଳାନ୍ତୁ) (""ଉଦାହରଣ"") >>> fix_spaces (((""ଉଦାହରଣ 1"")) (""ଉଦାହରଣ_1"") >>> fix_spaces (((""ଉଦାହରଣ 2"")) (""_ଉଦାହରଣ_2"") >>> fix_spaces (((""ଉଦାହରଣ 3"")) (""_ଉଦାହରଣ-3"")
std::string fix_spaces(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string fix_spaces(std::string text) {
    std::string result = """";
    int space_count = 0;
    for (char c : text) {
        if (c == ' ') {
            space_count++;
        } else {
            if (space_count == 1) {
                result += '_';
            } else if (space_count > 1) {
                result += '-';
            }
            result += c;
            space_count = 0;
        }
    }
    if (space_count == 1 && !result.empty() && result.back() != '_') {
        result += '_';
    } else if (space_count > 1 && !result.empty() && result.back() != '-') {
        result += '-';
    } else if (space_count > 0 && result.empty()) {
        if (space_count > 2) result += '-';
        else if (space_count == 1) result += '_';
    } else if (space_count == 1 && result.empty()) {
        result += '_';
    }

    std::string trimmed_result = """";
    bool non_space_found = false;
    for (char c : result) {
        if (c != ' ') {
            non_space_found = true;
            trimmed_result += c;
        } else if (non_space_found) {
            trimmed_result += c;
        }
    }

    while (!trimmed_result.empty() && trimmed_result.front() == '_') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '_') {
        trimmed_result.pop_back();
    }
     while (!trimmed_result.empty() && trimmed_result.front() == '-') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '-') {
        trimmed_result.pop_back();
    }

    std::string final_result = """";
    space_count = 0;
    for (char c : trimmed_result) {
        if (c == '_') {
            space_count++;
        } else {
            if (space_count == 1) {
                final_result += '_';
            } else if (space_count > 1) {
                final_result += '-';
            }
            final_result += c;
            space_count = 0;
        }
    }
    if (space_count == 1) {
        final_result += '_';
    } else if (space_count > 1) {
        final_result += '-';
    }

    return final_result;
}","}
int main() {
    auto candidate = fix_spaces;
    assert(candidate((""Example"")) == (""Example""));
    assert(candidate((""Mudasir Hanif "")) == (""Mudasir_Hanif_""));
    assert(candidate((""Yellow Yellow  Dirty  Fellow"")) == (""Yellow_Yellow__Dirty__Fellow""));
    assert(candidate((""Exa   mple"")) == (""Exa-mple""));
    assert(candidate((""   Exa 1 2 2 mple"")) == (""-Exa_1_2_2_mple""));
}
"
HumanEval/141,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଫାଇଲ ନାମକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ, ଏବଂ ଯଦି ଫାଇଲ ନାମ ବୈଧ ହୋଇଥାଏ, ଏବଂ ଅନ୍ୟଥା 'ନା' ଫେରାଇଥାଏ _ ଏକ ଫାଇଲ ନାମ ବୈଧ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି ଏବଂ କେବଳ ଯଦି ସମସ୍ତ ନିମ୍ନଲିଖିତ ସର୍ତ୍ତ ପୂରଣ ହୋଇଥାଏ _ - ଫାଇଲ ନାମରେ ତିନୋଟି ଅଙ୍କ ('0'-'9') ରୁ ଅଧିକ ହେବା ଉଚିତ ନୁହେଁ _ - ଫାଇଲ ନାମରେ ସଠିକ୍ ଭାବରେ ଗୋଟିଏ ବିନ୍ଦୁ '_' ଅଛି _ - ବିନ୍ଦୁ ପୂର୍ବରୁ ସବଷ୍ଟ୍ରିଙ୍ଗ ଖାଲି ହେବା ଉଚିତ ନୁହେଁ, ଏବଂ ଏହା ଲାଟିନ ଆଲଫାବେଟର ଅକ୍ଷର ('a'-'z' ଏବଂ 'A'Z'-) ସହିତ ଆରମ୍ଭ ହୁଏ _ ବିନ୍ଦୁ ପରେ ସବଷ୍ଟ୍ରିଙ୍ଗ ଏହିଗୁଡ଼ିକ ମଧ୍ୟରୁ ଗୋଟିଏ ହେବା ଉଚିତଃ ['txt', 'exe', 'll'] ଉଦାହରଣଃ >>> file_name_check""{""ଉଦାହରଣଃ{""txt"")) (""ହଁ"") >>> file_name""{""ଉଦାହରଣଃ{""d1"") (""ନା"")
std::string file_name_check(std::string file_name) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string file_name_check(std::string file_name) {
    int digit_count = 0;
    int dot_count = 0;
    size_t dot_pos = std::string::npos;

    for (size_t i = 0; i < file_name.length(); ++i) {
        if (isdigit(file_name[i])) {
            digit_count++;
        } else if (file_name[i] == '.') {
            dot_count++;
            dot_pos = i;
        }
    }

    if (digit_count > 3 || dot_count != 1) {
        return ""No"";
    }

    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {
        return ""No"";
    }

    std::string name_part = file_name.substr(0, dot_pos);
    std::string ext_part = file_name.substr(dot_pos + 1);

    if (name_part.empty() || !isalpha(name_part[0])) {
        return ""No"";
    }

    if (ext_part == ""txt"" || ext_part == ""exe"" || ext_part == ""dll"") {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","}
int main() {
    auto candidate = file_name_check;
    assert(candidate((""example.txt"")) == (""Yes""));
    assert(candidate((""1example.dll"")) == (""No""));
    assert(candidate((""s1sdf3.asd"")) == (""No""));
    assert(candidate((""K.dll"")) == (""Yes""));
    assert(candidate((""MY16FILE3.exe"")) == (""Yes""));
    assert(candidate((""His12FILE94.exe"")) == (""No""));
    assert(candidate((""_Y.txt"")) == (""No""));
    assert(candidate((""?aREYA.exe"")) == (""No""));
    assert(candidate((""/this_is_valid.dll"")) == (""No""));
    assert(candidate((""this_is_valid.wow"")) == (""No""));
    assert(candidate((""this_is_valid.txt"")) == (""Yes""));
    assert(candidate((""this_is_valid.txtexe"")) == (""No""));
    assert(candidate((""#this2_i4s_5valid.ten"")) == (""No""));
    assert(candidate((""@this1_is6_valid.exe"")) == (""No""));
    assert(candidate((""this_is_12valid.6exe4.txt"")) == (""No""));
    assert(candidate((""all.exe.txt"")) == (""No""));
    assert(candidate((""I563_No.exe"")) == (""Yes""));
    assert(candidate((""Is3youfault.txt"")) == (""Yes""));
    assert(candidate((""no_one#knows.dll"")) == (""Yes""));
    assert(candidate((""1I563_Yes3.exe"")) == (""No""));
    assert(candidate((""I563_Yes3.txtt"")) == (""No""));
    assert(candidate((""final..txt"")) == (""No""));
    assert(candidate((""final132"")) == (""No""));
    assert(candidate((""_f4indsartal132."")) == (""No""));
    assert(candidate(("".txt"")) == (""No""));
    assert(candidate((""s."")) == (""No""));
}
"
HumanEval/142,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// "" ଏହି ଫଳନଟି ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଭେକ୍ଟର ନେବ. ଭେକ୍ଟରରେ ଥିବା ସମସ୍ତ ଏଣ୍ଟ୍ରି ପାଇଁ, ଫଳନଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏଣ୍ଟ୍ରିକୁ ବର୍ଗ କରିବ ଯଦି ଏହାର ଇଣ୍ଡେକ୍ସ 3 ର ଗୁଣକ ଅଟେ ଏବଂ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏଣ୍ଟ୍ରିକୁ ଘନ କରିବ ଯଦି ଏହାର ଇଣ୍ଡେକ୍ସ 4 ର ଗୁଣକ ଅଟେ ଏବଂ 3 ର ଗୁଣକ ନୁହେଁ। ଫଳନଟି ଭେକ୍ଟରରେ ଥିବା ଏଣ୍ଟ୍ରିଗୁଡ଼ିକୁ ପରିବର୍ତ୍ତନ କରିବ ନାହିଁ ଯାହାର ଇଣ୍ଡେକ୍ସ 3 କିମ୍ବା 4 ର ଗୁଣକ ନୁହେଁ। ଫଳନଟି ସମସ୍ତ ଏଣ୍ଟ୍ରିଗୁଡିକର ସମୁଦାୟ ଫେରାଇବ _ ଉଦାହରଣଃ >>> lst (long({(long) 1, (long) 2, (long) 3})) >>> lst ((long)) >>> lst ({(long) -1, (long) -5, (long) 2, (long) -1, (long) -5}))
long sum_squares(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_squares(std::vector<long> lst) {
    long sum = 0;
    for (size_t i = 0; i < lst.size(); ++i) {
        if (i % 3 == 0) {
            sum += lst[i] * lst[i];
        } else if (i % 4 == 0) {
            sum += lst[i] * lst[i] * lst[i];
        } else {
            sum += lst[i];
        }
    }
    return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));
    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));
    assert(candidate((std::vector<long>({(long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));
    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));
    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));
}
"
HumanEval/143,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ବାକ୍ୟକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ବାକ୍ୟଖଣ୍ଡ ଦିଆଯାଏ, ବାକ୍ୟରେ କିଛି ଶବ୍ଦ ଅନ୍ତର ଥାଏ, ଏବଂ ଆପଣଙ୍କୁ ଏକ ବାକ୍ୟଖଣ୍ଡ ଫେରାଇବାକୁ ପଡିବ ଯେଉଁଥିରେ ମୂଳ ବାକ୍ୟର ଶବ୍ଦ ଅଛି, ଯାହାର ଲମ୍ବ ଅଶୂର ସଂଖ୍ୟା, ନୂତନ ବାକ୍ୟଖଣ୍ଡରେ ଥିବା ଶବ୍ଦଗୁଡ଼ିକର କ୍ରମ ମୂଳ ସହିତ ସମାନ ହେବା ଉଚିତ _ ଉଦାହରଣ 1: >>> words_in_sentence (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_in_sentence) (_sentence) (_in_sentence) (_sentence) (_sentence) (_sentence (_sentence) (_sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence (sentence) (sentence) (sentence (sentence) (sentence (sentence) (sentence) (sentence (sentence) (sentence) (sentence) (sentence) (sentence (sentence) (sentence) (sentence) (sentence) (sentence) (sentence) (sentence) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent) (sent)
std::string words_in_sentence(std::string sentence) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

std::string words_in_sentence(std::string sentence) {
    std::string result = """";
    std::stringstream ss(sentence);
    std::string word;
    while (ss >> word) {
        if (is_prime(word.length())) {
            if (!result.empty()) {
                result += "" "";
            }
            result += word;
        }
    }
    return result;
}","}
int main() {
    auto candidate = words_in_sentence;
    assert(candidate((""This is a test"")) == (""is""));
    assert(candidate((""lets go for swimming"")) == (""go for""));
    assert(candidate((""there is no place available here"")) == (""there is no place""));
    assert(candidate((""Hi I am Hussein"")) == (""Hi am Hussein""));
    assert(candidate((""go for it"")) == (""go for it""));
    assert(candidate((""here"")) == (""""));
    assert(candidate((""here is"")) == (""is""));
}
"
HumanEval/144,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏକ ଫଙ୍କସନ୍ କାର୍ଯ୍ୟକାରୀ କରିବା ଯାହା x * n ଅଭିବ୍ୟକ୍ତିକୁ ସରଳ କରିବ। ଫଙ୍କସନ୍ଟି ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି x * n ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ମୂଲ୍ୟାଙ୍କନ କରେ ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ଉଭୟ x ଏବଂ n, ଏକ ভগ্নাଂଶର ଷ୍ଟ୍ରିଙ୍ଗ୍ ପ୍ରତିନିଧିତ୍ୱ ଅଟେ, ଏବଂ ନିମ୍ନଲିଖିତ ଫର୍ମାଟ୍ ଅଛି, <numerator>/<denominator> ଯେଉଁଠାରେ ଉଭୟ ସଂଖ୍ୟା ଏବଂ ନାମକ ଧନାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା _ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ x, ଏବଂ n ବୈଧ ভগ্নাଂଶ, ଏବଂ ନାମକ ଭାବରେ ଶୂନ୍ୟ ନାହିଁ _ >>> ସରଳ କରନ୍ତୁ _
bool simplify(std::string x, std::string n) {
","#include<assert.h>
#include<bits/stdc++.h>

long gcd(long a, long b) {
    while (b) {
        a %= b;
        std::swap(a, b);
    }
    return a;
}

bool simplify(std::string x, std::string n) {
    long x_num, x_den, n_num, n_den;
    size_t slash_pos = x.find('/');
    x_num = std::stol(x.substr(0, slash_pos));
    x_den = std::stol(x.substr(slash_pos + 1));

    slash_pos = n.find('/');
    n_num = std::stol(n.substr(0, slash_pos));
    n_den = std::stol(n.substr(slash_pos + 1));

    long num = x_num * n_num;
    long den = x_den * n_den;

    long common_divisor = gcd(num, den);
    den /= common_divisor;

    return den == 1;
}","}
int main() {
    auto candidate = simplify;
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/6""), (""2/1"")) == (false));
    assert(candidate((""5/1""), (""3/1"")) == (true));
    assert(candidate((""7/10""), (""10/2"")) == (false));
    assert(candidate((""2/10""), (""50/10"")) == (true));
    assert(candidate((""7/2""), (""4/2"")) == (true));
    assert(candidate((""11/6""), (""6/1"")) == (true));
    assert(candidate((""2/3""), (""5/2"")) == (false));
    assert(candidate((""5/2""), (""3/5"")) == (false));
    assert(candidate((""2/4""), (""8/4"")) == (true));
    assert(candidate((""2/4""), (""4/2"")) == (true));
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/5""), (""1/5"")) == (false));
}
"
HumanEval/145,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଦ୍ବାରା ଦିଆଯାଇଥିବା ଭେକ୍ଟର ସଂଖ୍ୟା ଗୁଡିକର ଅଙ୍କ ସମୂହ ଅନୁସାରେ କ୍ରମାନୁସାରେ ସର୍ଟ କରାଯାଏ. ନୋଟ: ଯଦି ଏକାଧିକ ଆଇଟମ ଅଛି ଯାହାର ଅଙ୍କ ସମୂହ ସମାନ, ତେବେ ମୂଳ ଭେକ୍ଟରରେ ସେମାନଙ୍କର ସୂଚକାଙ୍କ ଆଧାରରେ ସର୍ଟ କରନ୍ତୁ. ଉଦାହରଣ ସ୍ୱରୂପ: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long) -1, (long) -1, (long) -12}))) (std::vector<long>({long) -1, (long) -11, (long) -1, (long) -12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))
std::vector<long> order_by_points(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_digits(long n) {
    long sum = 0;
    std::string s = std::to_string(std::abs(n));
    for (char c : s) {
        sum += c - '0';
    }
    return sum;
}

std::vector<long> order_by_points(std::vector<long> nums) {
    std::vector<std::pair<long, size_t>> indexed_nums;
    for (size_t i = 0; i < nums.size(); ++i) {
        indexed_nums.push_back({nums[i], i});
    }

    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {
        long sum_a = sum_digits(a.first);
        long sum_b = sum_digits(b.first);
        if (sum_a != sum_b) {
            return sum_a < sum_b;
        }
        return a.second < b.second;
    });

    std::vector<long> result;
    for (const auto& pair : indexed_nums) {
        result.push_back(pair.first);
    }
    return result;
}","}
int main() {
    auto candidate = order_by_points;
    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));
    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));
    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));
}
"
HumanEval/146,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସଂଖ୍ୟା ଭେକ୍ଟରକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଭେକ୍ଟରରେ ଥିବା ତତ୍ତ୍ବ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହା 10 ରୁ ଅଧିକ ଏବଂ ଏକ ସଂଖ୍ୟାର ଉଭୟ ପ୍ରଥମ ଏବଂ ଶେଷ ଅଙ୍କ ଅଙ୍କ (1, 3, 5, 7, 9) ଅଟେ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> specialFilter((std::vector<long>({long) 15, (long) -73, (long) -14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({long) -2, (long) -3, (long) -4, (long) 21, (long) 109} (2))))
long specialFilter(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_odd_digit(char c) {
    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');
}

long specialFilter(std::vector<long> nums) {
    long count = 0;
    for (long num : nums) {
        if (std::abs(num) > 10) {
            std::string s = std::to_string(std::abs(num));
            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {
                count++;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = specialFilter;
    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));
    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));
    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));
    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));
    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>())) == (0));
}
"
HumanEval/147,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇଛି. ଆପଣଙ୍କୁ ଲମ୍ବ n ର ଏକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଭେକ୍ଟର a ସୃଷ୍ଟି କରିବାକୁ ପଡିବ. ପ୍ରତ୍ୟେକ i (1 ≤ i ≤ n) ପାଇଁ, a[i] = i * i - i + 1 ର ମୂଲ୍ୟ. a ର ଟ୍ରିପଲ୍ସ (a[i], a[j], a[k]) ର ସଂଖ୍ୟା ଫେରାନ୍ତୁ ଯେଉଁଠାରେ i < j < k, ଏବଂ a[i] + a[j] + a[k] ହେଉଛି 3 ର ଗୁଣନ । ଉଦାହରଣ: >>> get_max_triples((5)) (1) ବ୍ୟାଖ୍ୟାଃ a = [1, 3, 7, 13, 21] ଏକମାତ୍ର ବୈଧ ଟ୍ରିପଲ୍ ହେଉଛି (1, 7, 13)
long get_max_triples(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long get_max_triples(long n) {
    if (n < 3) {
        return 0;
    }
    std::vector<long> a(n);
    for (long i = 0; i < n; ++i) {
        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;
    }

    long count = 0;
    for (long i = 0; i < n; ++i) {
        for (long j = i + 1; j < n; ++j) {
            for (long k = j + 1; k < n; ++k) {
                if ((a[i] + a[j] + a[k]) % 3 == 0) {
                    count++;
                }
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = get_max_triples;
    assert(candidate((5)) == (1));
    assert(candidate((6)) == (4));
    assert(candidate((10)) == (36));
    assert(candidate((100)) == (53361));
}
"
HumanEval/148,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆମ ସୌରମଣ୍ଡଳରେ ଆଠଟି ଗ୍ରହ ଅଛି: ସୂର୍ଯ୍ୟଙ୍କ ନିକଟତମ ମଙ୍ଗଳ ଗ୍ରହ, ପରବର୍ତ୍ତୀ ଗ୍ରହ ହେଉଛି ଶୁକ୍ର, ତାପରେ ପୃଥିବୀ, ମଙ୍ଗଳ, ବୃହସ୍ପତି, ଶନି, ୟୁରେନସ୍, ନେପଚୁନ୍ । ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଦୁଇଟି ଗ୍ରହ ନାମକୁ ଗ୍ରହ 1 ଏବଂ ଗ୍ରହ 2 ଭାବରେ ଗ୍ରହଣ କରେ । ଫଳନଟି ସୂର୍ଯ୍ୟଙ୍କ ନିକଟତା ଅନୁଯାୟୀ ସର୍ଟ ହୋଇଥିବା ଗ୍ରହ 1 ଏବଂ ଗ୍ରହ 2 ର କକ୍ଷ ମଧ୍ୟରେ ଅବସ୍ଥିତ ସମସ୍ତ ଗ୍ରହକୁ ନେଇ ଏକ ଟାପଲ୍ ଫେରାଇବ । ଯଦି ଗ୍ରହ 1 କିମ୍ବା ଗ୍ରହ 2 ସଠିକ୍ ଗ୍ରହ ନାମ ନୁହେଁ ତେବେ ଫଳନଟି ଏକ ଖାଲି ଟାପଲ୍ ଫେରାଇବ । ଉଦାହରଣ >>> bf((""ଜୁବ""), (""ନ"")) (std::vector<std::string>{(std::string) "" (Saturn"", (std::string) ""Uranus""})) >>> bf(""Earth""), (""Mercury"") (std::vector<std::string>) (Jupiter:Venus) (std::vector:Venus) (Earth) (std::std::string) (Sup (string) "" ("", "" ("", """") ("", "" ("",) ()) ("",) ()) (
std::vector<std::string> bf(std::string planet1, std::string planet2) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> bf(std::string planet1, std::string planet2) {
    std::vector<std::string> planets = {""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""};
    auto it1 = std::find(planets.begin(), planets.end(), planet1);
    auto it2 = std::find(planets.begin(), planets.end(), planet2);

    if (it1 == planets.end() || it2 == planets.end()) {
        return {};
    }

    int index1 = std::distance(planets.begin(), it1);
    int index2 = std::distance(planets.begin(), it2);

    if (index1 == index2) {
        return {};
    }

    int start = std::min(index1, index2) + 1;
    int end = std::max(index1, index2);

    std::vector<std::string> result;
    for (int i = start; i < end; ++i) {
        result.push_back(planets[i]);
    }
    return result;
}","}
int main() {
    auto candidate = bf;
    assert(candidate((""Jupiter""), (""Neptune"")) == (std::vector<std::string>({(std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Mercury"")) == (std::vector<std::string>({(std::string)""Venus""})));
    assert(candidate((""Mercury""), (""Uranus"")) == (std::vector<std::string>({(std::string)""Venus"", (std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn""})));
    assert(candidate((""Neptune""), (""Venus"")) == (std::vector<std::string>({(std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Mars""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Jupiter""), (""Makemake"")) == (std::vector<std::string>()));
}
"
HumanEval/149,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର କୁ ଏକ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରେ, ସେହି ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ହଟାଇ ଦିଏ ଯାହାର ଅଜଣା ଲମ୍ବ ଅଛି, ଏବଂ ଫଳାଫଳ ଭେକ୍ଟରକୁ ଏକ ସର୍ଟ କରାଯାଇଥିବା କ୍ରମରେ ଫେରାଇ ଦିଏ, ଭେକ୍ଟର ସର୍ବଦା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଅଟେ ଏବଂ କେବେ ବି ଏକ ସଂଖ୍ୟା ଭେକ୍ଟର ନୁହେଁ, ଏବଂ ଏଥିରେ ଡୁପ୍ଲିକେଟ୍ ରହିପାରେ _ ଭେକ୍ଟରର କ୍ରମରେ ପ୍ରତ୍ୟେକ ଶବ୍ଦର ଲମ୍ବ ଅନୁଯାୟୀ ବୃଦ୍ଧି ହେବା ଉଚିତ, ଏବଂ ଆପଣ ସେହି ନିୟମ ଅନୁଯାୟୀ ସର୍ଟ ହୋଇଥିବା ଭେକ୍ଟରକୁ ଫେରାଇ ଦେବା ଉଚିତ _ ଯଦି ଦୁଇଟି ଶବ୍ଦର ଲମ୍ବ ସମାନ, ଭେକ୍ଟରକୁ ଆଲଫାବେଟିକ୍ ଭାବରେ ସର୍ଟ କରନ୍ତୁ _ ଫଳନକୁ ସର୍ଟ ହୋଇଥିବା କ୍ରମରେ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭେକ୍ଟର ଫେରାଇଦେବା ଉଚିତ _ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ସମସ୍ତ ଶବ୍ଦର ଲମ୍ବ ସମାନ ହେବ _ ଉଦାହରଣ ସ୍ୱରୂପଃ >>> list_sort{""}std::stdvector<stdstring>{""}std::stdstring""{""} (a""} (a""}) (a"" (a""a""a""a""a""a) (a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a""a
std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
    std::vector<std::string> even_length_strings;
    for (const std::string& s : lst) {
        if (s.length() % 2 == 0) {
            even_length_strings.push_back(s);
        }
    }

    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {
        if (a.length() != b.length()) {
            return a.length() < b.length();
        }
        return a < b;
    });

    return even_length_strings;
}","}
int main() {
    auto candidate = sorted_list_sum;
    assert(candidate((std::vector<std::string>({(std::string)""aa"", (std::string)""a"", (std::string)""aaa""}))) == (std::vector<std::string>({(std::string)""aa""})));
    assert(candidate((std::vector<std::string>({(std::string)""school"", (std::string)""AI"", (std::string)""asdf"", (std::string)""b""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""asdf"", (std::string)""school""})));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""b"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""dcba"", (std::string)""abcd"", (std::string)""a""}))) == (std::vector<std::string>({(std::string)""abcd"", (std::string)""dcba""})));
    assert(candidate((std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""})));
    assert(candidate((std::vector<std::string>({(std::string)""a"", (std::string)""b"", (std::string)""b"", (std::string)""c"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""aaaa"", (std::string)""bbbb"", (std::string)""dd"", (std::string)""cc""}))) == (std::vector<std::string>({(std::string)""cc"", (std::string)""dd"", (std::string)""aaaa"", (std::string)""bbbb""})));
}
"
HumanEval/150,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସରଳ ପ୍ରୋଗ୍ରାମ ଯାହା x ର ମୂଲ୍ୟ ଫେରାଇଥାଏ ଯଦି n ଏକ ପ୍ରଧାନ ସଂଖ୍ୟା ଏବଂ y ର ମୂଲ୍ୟ ଫେରାଇଥାଏ ଅନ୍ୟଥା _ ଉଦାହରଣଃ >>> x_or_y((7), (34), (12)) (34) >>> x_or_y(15), (8), (5) (5)
long x_or_y(long n, long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(long n) {
    if (n <= 1) return false;
    for (long i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

long x_or_y(long n, long x, long y) {
    if (is_prime(n)) {
        return x;
    } else {
        return y;
    }
}","}
int main() {
    auto candidate = x_or_y;
    assert(candidate((7), (34), (12)) == (34));
    assert(candidate((15), (8), (5)) == (5));
    assert(candidate((3), (33), (5212)) == (33));
    assert(candidate((1259), (3), (52)) == (3));
    assert(candidate((7919), (-1), (12)) == (-1));
    assert(candidate((3609), (1245), (583)) == (583));
    assert(candidate((91), (56), (129)) == (129));
    assert(candidate((6), (34), (1234)) == (1234));
    assert(candidate((1), (2), (0)) == (0));
    assert(candidate((2), (2), (0)) == (2));
}
"
HumanEval/151,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଭେକ୍ଟର ସଂଖ୍ୟା ଦେଇ, ଭେକ୍ଟରରେ ଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକର ବର୍ଗର ସମୁଦାୟକୁ ଫେରାନ୍ତୁ ଯାହା ଅଜଣା ଅଟେ _ ନକାରାତ୍ମକ କିମ୍ବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଅଣଦେଖା କରନ୍ତୁ _ >>> double_the_difference ({(((std::vector<float> ({(long) 1, (long) 3, (long) 2, (long) 0}))) (10) >>> double_the_difference ({(((vector<float> ({(long) -1, (long) -2, (long) 0})) (0) >>> double_the_difference ({((std::vector<float> ({(long) -9, (long) -2)))) (81) >>> double_the_difference ({(((std::vector<float> ({(long) -0)))) (0) ଯଦି ନିବେଶ ଭେକ୍ଟରଟି ଖାଲି, ତେବେ 0 ଫେରାନ୍ତୁ _
long double_the_difference(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long double_the_difference(std::vector<float> lst) {
    long sum_of_squares = 0;
    for (float num : lst) {
        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {
            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);
        }
    }
    return sum_of_squares;
}","}
int main() {
    auto candidate = double_the_difference;
    assert(candidate((std::vector<float>())) == (0));
    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));
    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));
    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));
    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));
}
"
HumanEval/152,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ମୁଁ ଭାବୁଛି ଆମେ ସମସ୍ତେ ସେହି ଅନୁଭବକୁ ମନେ ରଖିଛୁ ଯେତେବେଳେ କିଛି ଦୀର୍ଘ ପ୍ରତୀକ୍ଷିତ ଘଟଣାର ଫଳାଫଳ ଶେଷରେ ଜଣା ପଡିଥାଏ _ ସେହି ମୁହୂର୍ତ୍ତରେ ଆପଣଙ୍କ ପାଖରେ ଥିବା ଭାବନା ଏବଂ ଚିନ୍ତାଧାରା ନିଶ୍ଚିତ ଭାବରେ ନୋଟ୍ କରିବା ଏବଂ ତୁଳନା କରିବା ପାଇଁ ଉପଯୁକ୍ତ _ ଆପଣଙ୍କ କାର୍ଯ୍ୟ ହେଉଛି ଜଣେ ବ୍ୟକ୍ତି ଅନେକ ମ୍ୟାଚ୍ ର ଫଳାଫଳକୁ ସଠିକ୍ ଭାବରେ ଅନୁମାନ କରିଛନ୍ତି କି ନାହିଁ ତାହା ନିର୍ଣ୍ଣୟ କରିବା _ ଆପଣଙ୍କୁ ସମାନ ଲମ୍ବର ସ୍କୋର ଏବଂ ଅନୁମାନର ଦୁଇଟି ଭେକ୍ଟର ଦିଆଯାଇଛି, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ସୂଚକ ଏକ ମ୍ୟାଚ୍ ଦେଖାଏ _ ସମାନ ଲମ୍ବର ଭେକ୍ଟର ଫେରାନ୍ତୁ ଯାହା ପ୍ରତ୍ୟେକ ଅନୁମାନ କେତେ ଦୂରରେ ଅଛି ତାହା ଦର୍ଶାଏ _ ଯଦି ସେମାନେ ସଠିକ୍ ଅନୁମାନ କରିଛନ୍ତି, ମୂଲ୍ୟ 0 ଅଟେ, ଏବଂ ଯଦି ନୁହେଁ, ମୂଲ୍ୟ ହେଉଛି ଅନୁମାନ ଏବଂ ସ୍କୋର ମଧ୍ୟରେ ସମ୍ପୂର୍ଣ୍ଣ ପାର୍ଥକ୍ୟ _ ଉଦାହରଣଃ >>> (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (
std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
    std::vector<long> diff;
    for (size_t i = 0; i < game.size(); ++i) {
        diff.push_back(std::abs(game[i] - guess[i]));
    }
    return diff;
}","}
int main() {
    auto candidate = compare;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));
    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));
}
"
HumanEval/153,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଶ୍ରେଣୀ ର ନାମ (ଏକ ଷ୍ଟ୍ରିଙ୍ଗ) ଏବଂ ଏକ୍ସଟେନସନ ର ଭେକ୍ଟର ଦିଆଯିବ. ଏକ୍ସଟେନସନ କୁ ଶ୍ରେଣୀ ରେ ଅତିରିକ୍ତ ଶ୍ରେଣୀ ଲୋଡ କରିବା ପାଇଁ ବ୍ୟବହାର କରାଯିବ. ଏକ୍ସଟେନସନ ର ଶକ୍ତି ଏହିପରି ହେବ: CAP କୁ ଏକ୍ସଟେନସନ ର ନାମ ରେ ଥିବା ବଡ଼ ଅକ୍ଷର ର ସଂଖ୍ୟା କୁହନ୍ତୁ, ଏବଂ SM କୁ ଏକ୍ସଟେନସନ ର ନାମ ରେ ଥିବା ଛୋଟ ଅକ୍ଷର ର ସଂଖ୍ୟା କୁହନ୍ତୁ, ଶକ୍ତି ଫ୍ରାକସନ CAP - SM ଦ୍ୱାରା ଦିଆଯାଏ. ଆପଣଙ୍କୁ ସବୁଠାରୁ ଶକ୍ତିଶାଳୀ ଏକ୍ସଟେନସନ କୁ ଖୋଜିବା ଉଚିତ ଏବଂ ଏହି ଫର୍ମାଟରେ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ କୁ ଫେରାଇ ଦେବା ଉଚିତ: ClassName.StrongestExtensionName. ଯଦି ସମାନ ଶକ୍ତି ସହିତ ଦୁଇଟି କିମ୍ବା ଅଧିକ ଏକ୍ସଟେନସନ ଅଛି, ତେବେ ଆପଣଙ୍କୁ ଭେକ୍ଟର ରେ ପ୍ରଥମେ ଆସୁଥିବା ଏକ୍ସଟେନସନ କୁ ବାଛିବା ଉଚିତ. ଉଦାହରଣ ସ୍ୱରୂପ, ଯଦି ଆପଣଙ୍କୁ ""Slices"" ଶ୍ରେଣୀ ଏବଂ ଏକ୍ସଟେନସନର ଭେକ୍ଟର ଭାବରେ ଦିଆଯାଏ: ['SE'viviSliCes','Cheese', 'StuFfed'] ତେବେ ଆପଣ 'Slices.viSliCes' କୁ ଫେରାଇ ଦେବା ଉଚିତ, କାରଣ 'SliCes'::::st:myst:myst:myst:SliCliCes::st:myst:myst:SliC::st:myst:SliSliSliSliS:st:S:st:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:S:
std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
","#include<assert.h>
#include<bits/stdc++.h>

int calculate_strength(const std::string& extension) {
    int cap_count = 0;
    int sm_count = 0;
    for (char c : extension) {
        if (isupper(c)) {
            cap_count++;
        } else if (islower(c)) {
            sm_count++;
        }
    }
    return cap_count - sm_count;
}

std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
    if (extensions.empty()) {
        return class_name;
    }

    std::string strongest_extension = extensions[0];
    int max_strength = calculate_strength(extensions[0]);

    for (size_t i = 1; i < extensions.size(); ++i) {
        int current_strength = calculate_strength(extensions[i]);
        if (current_strength > max_strength) {
            max_strength = current_strength;
            strongest_extension = extensions[i];
        }
    }

    return class_name + ""."" + strongest_extension;
}","}
int main() {
    auto candidate = Strongest_Extension;
    assert(candidate((""Watashi""), (std::vector<std::string>({(std::string)""tEN"", (std::string)""niNE"", (std::string)""eIGHt8OKe""}))) == (""Watashi.eIGHt8OKe""));
    assert(candidate((""Boku123""), (std::vector<std::string>({(std::string)""nani"", (std::string)""NazeDa"", (std::string)""YEs.WeCaNe"", (std::string)""32145tggg""}))) == (""Boku123.YEs.WeCaNe""));
    assert(candidate((""__YESIMHERE""), (std::vector<std::string>({(std::string)""t"", (std::string)""eMptY"", (std::string)""nothing"", (std::string)""zeR00"", (std::string)""NuLl__"", (std::string)""123NoooneB321""}))) == (""__YESIMHERE.NuLl__""));
    assert(candidate((""K""), (std::vector<std::string>({(std::string)""Ta"", (std::string)""TAR"", (std::string)""t234An"", (std::string)""cosSo""}))) == (""K.TAR""));
    assert(candidate((""__HAHA""), (std::vector<std::string>({(std::string)""Tab"", (std::string)""123"", (std::string)""781345"", (std::string)""-_-""}))) == (""__HAHA.123""));
    assert(candidate((""YameRore""), (std::vector<std::string>({(std::string)""HhAas"", (std::string)""okIWILL123"", (std::string)""WorkOut"", (std::string)""Fails"", (std::string)""-_-""}))) == (""YameRore.okIWILL123""));
    assert(candidate((""finNNalLLly""), (std::vector<std::string>({(std::string)""Die"", (std::string)""NowW"", (std::string)""Wow"", (std::string)""WoW""}))) == (""finNNalLLly.WoW""));
    assert(candidate((""_""), (std::vector<std::string>({(std::string)""Bb"", (std::string)""91245""}))) == (""_.Bb""));
    assert(candidate((""Sp""), (std::vector<std::string>({(std::string)""671235"", (std::string)""Bb""}))) == (""Sp.671235""));
}
"
HumanEval/154,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ୨ଟି ଶବ୍ଦ ଦିଆ ଯାଇଛି. ଆପଣଙ୍କୁ ସତ୍ୟ ଫେରାଇବାକୁ ହେବ ଯଦି ଦ୍ବିତୀୟ ଶବ୍ଦ କିମ୍ବା ଏହାର କୌଣସି ଘୂର୍ଣ୍ଣନ ପ୍ରଥମ ଶବ୍ଦରେ ଏକ ସବଷ୍ଟ୍ରିଙ୍ଗ >>> cycpattern_check((""abcd""), (""abd"")) (false) >>> cycpattern_check((""hello""), (""ell"")) (true) >>> cycpattern_check(""whassup""), (""psus"")) (false) >>> cycpattern_check(""abab""), (""baa"")) (true) >>> cycpattern_(check""efef""), (""eeff"") (false) >>> cycpattern_check((""himens""), (""simen"") (true)
bool cycpattern_check(std::string a, std::string b) {
","#include<assert.h>
#include<bits/stdc++.h>

bool cycpattern_check(std::string a, std::string b) {
    if (b.empty()) {
        return true;
    }
    if (a.length() < b.length()) {
        return false;
    }
    for (int i = 0; i < b.length(); ++i) {
        std::rotate(b.begin(), b.begin() + 1, b.end());
        if (a.find(b) != std::string::npos) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = cycpattern_check;
    assert(candidate((""xyzw""), (""xyw"")) == (false));
    assert(candidate((""yello""), (""ell"")) == (true));
    assert(candidate((""whattup""), (""ptut"")) == (false));
    assert(candidate((""efef""), (""fee"")) == (true));
    assert(candidate((""abab""), (""aabb"")) == (false));
    assert(candidate((""winemtt""), (""tinem"")) == (true));
}
"
HumanEval/155,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଦିଆଗଲା. ଏକ ଟାପଲ୍ ଫେରାଇଥାଏ ଯେଉଁଥିରେ ଯଥାକ୍ରମେ ଯୁଗ୍ମ ଏବଂ ଅଙ୍କ ସଂଖ୍ୟା ଥାଏ. ଉଦାହରଣଃ >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2))
std::tuple<long, long> even_odd_count(long num) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<tuple>

std::tuple<long, long> even_odd_count(long num) {
    long even_count = 0;
    long odd_count = 0;
    std::string s = std::to_string(std::abs(num));
    for (char c : s) {
        int digit = c - '0';
        if (digit % 2 == 0) {
            even_count++;
        } else {
            odd_count++;
        }
    }
    return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_count;
    assert(candidate((7)) == (std::make_tuple(0, 1)));
    assert(candidate((-78)) == (std::make_tuple(1, 1)));
    assert(candidate((3452)) == (std::make_tuple(2, 2)));
    assert(candidate((346211)) == (std::make_tuple(3, 3)));
    assert(candidate((-345821)) == (std::make_tuple(3, 3)));
    assert(candidate((-2)) == (std::make_tuple(1, 0)));
    assert(candidate((-45347)) == (std::make_tuple(2, 3)));
    assert(candidate((0)) == (std::make_tuple(1, 0)));
}
"
HumanEval/156,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଦିଆଗଲା, ଏହାର ରୋମାନ୍ ସଂଖ୍ୟା ସମକକ୍ଷକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ପ୍ରାପ୍ତ କରନ୍ତୁ, ଏବଂ ଏହାକୁ ଛୋଟ ଅକ୍ଷରରେ ଫେରାନ୍ତୁ _ ପ୍ରତିବନ୍ଧକଃ 1 <= num <= 1000 ଉଦାହରଣଃ >>> int_to_mini_roman((19)) (""xix"") >>> int_to_mini_roman((152)) (""clii"") >>> int_to_mini_roman(426)) (""cdxxvi"")
std::string int_to_mini_roman(long number) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string int_to_mini_roman(long number) {
    std::string roman = """";
    std::vector<std::pair<int, std::string>> roman_map = {
        {1000, ""m""}, {900, ""cm""}, {500, ""d""}, {400, ""cd""}, {100, ""c""},
        {90, ""xc""}, {50, ""l""}, {40, ""xl""}, {10, ""x""}, {9, ""ix""}, {5, ""v""},
        {4, ""iv""}, {1, ""i""}
    };

    for (const auto& pair : roman_map) {
        while (number >= pair.first) {
            roman += pair.second;
            number -= pair.first;
        }
    }
    return roman;
}","}
int main() {
    auto candidate = int_to_mini_roman;
    assert(candidate((19)) == (""xix""));
    assert(candidate((152)) == (""clii""));
    assert(candidate((251)) == (""ccli""));
    assert(candidate((426)) == (""cdxxvi""));
    assert(candidate((500)) == (""d""));
    assert(candidate((1)) == (""i""));
    assert(candidate((4)) == (""iv""));
    assert(candidate((43)) == (""xliii""));
    assert(candidate((90)) == (""xc""));
    assert(candidate((94)) == (""xciv""));
    assert(candidate((532)) == (""dxxxii""));
    assert(candidate((900)) == (""cm""));
    assert(candidate((994)) == (""cmxciv""));
    assert(candidate((1000)) == (""m""));
}
"
HumanEval/157,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ତ୍ରିଭୁଜର ତିନି ପାର୍ଶ୍ବ ର ଲମ୍ବ ଦିଆଗଲା. ଯଦି ତିନି ପାର୍ଶ୍ବ ଏକ ସଠିକ କୋଣ ବିଶିଷ୍ଟ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି, ତେବେ ସତ୍ୟ ଫେରାଇବ, ଅନ୍ୟଥା ମିଥ୍ୟା। ଏକ ସଠିକ କୋଣ ବିଶିଷ୍ଟ ତ୍ରିଭୁଜ ହେଉଛି ଏକ ତ୍ରିଭୁଜ ଯେଉଁଥିରେ ଏକ କୋଣ ସଠିକ କୋଣ କିମ୍ବା 90 ଡିଗ୍ରୀ ଅଟେ। ଉଦାହରଣଃ >>> right_angle_triangle((3), (4), (5)) (true) >>> right_angle_triangle(1), (2), (3)) (false)
bool right_angle_triangle(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>

bool right_angle_triangle(long a, long b, long c) {
    std::vector<long> sides = {a, b, c};
    std::sort(sides.begin(), sides.end());
    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);
}","}
int main() {
    auto candidate = right_angle_triangle;
    assert(candidate((3), (4), (5)) == (true));
    assert(candidate((1), (2), (3)) == (false));
    assert(candidate((10), (6), (8)) == (true));
    assert(candidate((2), (2), (2)) == (false));
    assert(candidate((7), (24), (25)) == (true));
    assert(candidate((10), (5), (7)) == (false));
    assert(candidate((5), (12), (13)) == (true));
    assert(candidate((15), (8), (17)) == (true));
    assert(candidate((48), (55), (73)) == (true));
    assert(candidate((1), (1), (1)) == (false));
    assert(candidate((2), (2), (10)) == (false));
}
"
HumanEval/158,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭେକ୍ଟର ଗ୍ରହଣ କରେ. ଭେକ୍ଟରରେ ବିଭିନ୍ନ ଶବ୍ଦ ଅଛି. ସର୍ବାଧିକ ଅନନ୍ୟ ଅକ୍ଷର ସହିତ ଶବ୍ଦକୁ ଫେରାନ୍ତୁ. ଯଦି ଏକାଧିକ ଷ୍ଟ୍ରିଙ୍ଗରେ ସର୍ବାଧିକ ଅନନ୍ୟ ଅକ୍ଷର ଅଛି, ତେବେ ଶବ୍ଦକୋଷୀୟ କ୍ରମରେ ପ୍ରଥମେ ଆସୁଥିବା ଏକକୁ ଫେରାନ୍ତୁ. >>> find_max(std::vector<std::string>({(std::string) ""name"", (std::string) ""of"", (std::string) ""string""}))) (""string"") >>> find_max{(std::vector<std::string>({(std::string) ""name"", (std::string) ""enam"") >>> find_max{(std::vector<std::string>{((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::string find_max(std::vector<std::string> words) {
","#include<assert.h>
#include<bits/stdc++.h>

int count_unique_chars(const std::string& s) {
    std::set<char> unique_chars;
    for (char c : s) {
        unique_chars.insert(c);
    }
    return unique_chars.size();
}

std::string find_max(std::vector<std::string> words) {
    if (words.empty()) {
        return """";
    }

    std::string max_unique_word = words[0];
    int max_unique_count = count_unique_chars(words[0]);

    for (size_t i = 1; i < words.size(); ++i) {
        int current_unique_count = count_unique_chars(words[i]);
        if (current_unique_count > max_unique_count) {
            max_unique_count = current_unique_count;
            max_unique_word = words[i];
        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {
            max_unique_word = words[i];
        }
    }
    return max_unique_word;
}","}
int main() {
    auto candidate = find_max;
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""of"", (std::string)""string""}))) == (""string""));
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""enam"", (std::string)""game""}))) == (""enam""));
    assert(candidate((std::vector<std::string>({(std::string)""aaaaaaa"", (std::string)""bb"", (std::string)""cc""}))) == (""aaaaaaa""));
    assert(candidate((std::vector<std::string>({(std::string)""abc"", (std::string)""cba""}))) == (""abc""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""this"", (std::string)""game"", (std::string)""of"", (std::string)""footbott""}))) == (""footbott""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""gonna"", (std::string)""rock""}))) == (""gonna""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""a"", (std::string)""mad"", (std::string)""nation""}))) == (""nation""));
    assert(candidate((std::vector<std::string>({(std::string)""this"", (std::string)""is"", (std::string)""a"", (std::string)""prrk""}))) == (""this""));
    assert(candidate((std::vector<std::string>({(std::string)""b""}))) == (""b""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""play"", (std::string)""play""}))) == (""play""));
}
"
HumanEval/159,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣ ଭୋକିଲା ବିଲେଇ, ଏବଂ ଆପଣ ପୂର୍ବରୁ ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ସଂଖ୍ୟକ ଗାଜର ଖାଇଛନ୍ତି, କିନ୍ତୁ ବର୍ତ୍ତମାନ ଆପଣଙ୍କୁ ଦିନର ଭୋଜନ ସମ୍ପୂର୍ଣ୍ଣ କରିବା ପାଇଁ ଅଧିକ ଗାଜର ଖାଇବା ଆବଶ୍ୟକ _ ଆପଣ ଏକ ଭେକ୍ଟର ଫେରାଇବେ [ ଆପଣଙ୍କ ଭୋଜନ ପରେ ଖାଇଥିବା ଗାଜରର ସମୁଦାୟ ସଂଖ୍ୟା, ଆପଣଙ୍କ ଭୋଜନ ପରେ ବାକି ଗାଜରର ସଂଖ୍ୟା ] ଯଦି ପର୍ଯ୍ୟାପ୍ତ ବାକି ଗାଜର ନଥାଏ, ତେବେ ଆପଣ ବାକି ଗାଜର ଖାଇବେ, କିନ୍ତୁ ତଥାପି ଭୋକିଲା ରହିବେ _ ଉଦାହରଣଃ >>> ଖାଇବା __________ (୫), (୬), (୧୦) (std::vector<long>{(() __________ (୧୧, (ଲମ୍ବା) __________ (୪)) >>> ଖାଇବା __________ (୪), (୮), (୯) (std::vector<long>{() __________ (୧୨, (୧) __________ (୧)) >>> ଖାଇବା __________ (୧୧), (୧୦) __________ (୧୦) __________ (୧୧) __________ (୦)) >>> ଖାଇବା __________ (୧୧୧) __________ (୨), (୫) (std::vector<<<d::vector> (୭) __________ (ଲମ୍ବା) __________ (୭) __________ (୭) __________ (୭
std::vector<long> eat(long number, long need, long remaining) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> eat(long number, long need, long remaining) {
    long eaten = 0;
    long left = remaining;
    long to_eat = need;

    if (left >= to_eat) {
        eaten = to_eat;
        left -= to_eat;
    } else {
        eaten = left;
        left = 0;
    }

    return {(long)number + eaten, left};
}","}
int main() {
    auto candidate = eat;
    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));
    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));
    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));
    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));
    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));
    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));
}
"
HumanEval/160,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦୁଇ ଭେକ୍ଟର ଅପରେଟର ଏବଂ ଅପରେଣ୍ଡ ଦିଆଗଲା । ପ୍ରଥମ ଭେକ୍ଟରରେ ମୌଳିକ ବୀଜାଣୁ କାର୍ଯ୍ୟ ଅଛି, ଏବଂ ଦ୍ୱିତୀୟ ଭେକ୍ଟର ହେଉଛି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଭେକ୍ଟର । ବୀଜାଣୁ ଅଭିବ୍ୟକ୍ତି ନିର୍ମାଣ କରିବା ପାଇଁ ଦୁଇଟି ଦିଆଯାଇଥିବା ଭେକ୍ଟର ବ୍ୟବହାର କରନ୍ତୁ ଏବଂ ଏହି ଅଭିବ୍ୟକ୍ତିର ମୂଲ୍ୟାଙ୍କନ ଫେରାନ୍ତୁ । ମୌଳିକ ବୀଜାଣୁ କାର୍ଯ୍ୟଃ ଯୋଗ (+) ହ୍ରାସ ( ) - ଗୁଣନ ( *) ତଳ ବିଭାଜନ ( // ) ବିସ୍ତାର ( **) ଉଦାହରଣ: ଅପରେଟର['+', '*', '-'] ଭେକ୍ଟର = [2, 3, 4, 5] ଫଳାଫଳ = 2 + 3 * 4 - 5 => ଫଳାଫଳ = 9 ଟିପ୍ପଣୀ: ଅପରେଟର ଭେକ୍ଟରର ଲମ୍ବ ଅପରେଣ୍ଡ ଭେକ୍ଟର ମାଇନସ ୱାନର ଲମ୍ବ ସହିତ ସମାନ _ ଅପରେଣ୍ଡ ହେଉଛି ଅଣ-ନକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଭେକ୍ଟର _ ଅପରେଟର ଭେକ୍ଟରରେ ଅତି କମରେ ଗୋଟିଏ ଅପରେଟର ଅଛି, ଏବଂ ଅପରେଣ୍ଡ ଭେକ୍ଟରରେ ଅତି କମରେ ଦୁଇଟି ଅପରେଣ୍ଡ ଅଛି _
long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
","#include<assert.h>
#include<bits/stdc++.h>

long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
    std::vector<long> current_operand = operand;
    std::vector<std::string> current_operator = op;

    auto apply_op = [&](long a, long b, const std::string& o) {
        if (o == ""+"") return a + b;
        if (o == ""-"") return a - b;
        if (o == ""*"") return a * b;
        if (o == ""//"") return a / b;
        if (o == ""**"") return static_cast<long>(pow(a, b));
        return 0L; // Should not happen
    };

    std::vector<std::string> precedence1 = {""**""};
    std::vector<std::string> precedence2 = {""*"", ""//""};
    std::vector<std::string> precedence3 = {""+"", ""-""};

    auto evaluate = [&](const std::vector<std::string>& prec) {
        size_t i = 0;
        while (i < current_operator.size()) {
            bool found = false;
            for (const auto& o : prec) {
                if (current_operator[i] == o) {
                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);
                    current_operand.erase(current_operand.begin() + i + 1);
                    current_operator.erase(current_operator.begin() + i);
                    found = true;
                    break;
                }
            }
            if (!found) {
                i++;
            }
        }
    };

    evaluate(precedence1);
    evaluate(precedence2);
    evaluate(precedence3);

    return current_operand[0];
}","}
int main() {
    auto candidate = do_algebra;
    assert(candidate((std::vector<std::string>({(std::string)""**"", (std::string)""*"", (std::string)""+""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));
    assert(candidate((std::vector<std::string>({(std::string)""+"", (std::string)""*"", (std::string)""-""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));
    assert(candidate((std::vector<std::string>({(std::string)""//"", (std::string)""*""})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));
}
"
HumanEval/161,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆ ଯାଇଛି. ଯଦି s[i] ଏକ ଅକ୍ଷର, ତେବେ ଏହାର କେସକୁ ନିମ୍ନରୁ ଉପର କିମ୍ବା ବାମପଟେ ପରିବର୍ତ୍ତନ କରନ୍ତୁ, ଅନ୍ୟଥା ଏହାକୁ ସେମିତି ରଖନ୍ତୁ. ଯଦି ଷ୍ଟ୍ରିଙ୍ଗରେ କୌଣସି ଅକ୍ଷର ନାହିଁ, ତେବେ ଷ୍ଟ୍ରିଙ୍ଗକୁ ପରିବର୍ତ୍ତନ କରନ୍ତୁ. ଫଙ୍କସନକୁ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ ଫେରାଇଦେବା ଉଚିତ. ଉଦାହରଣ >>> solve((""1234"")) (""4321"") >>> solve(""ab"")) (""AB"") >>> solve(""#a@C"")) (""#A@c"")
std::string solve(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string solve(std::string s) {
    bool has_letter = false;
    for (char c : s) {
        if (isalpha(c)) {
            has_letter = true;
            break;
        }
    }

    if (has_letter) {
        for (char& c : s) {
            if (islower(c)) {
                c = toupper(c);
            } else if (isupper(c)) {
                c = tolower(c);
            }
        }
    } else {
        std::reverse(s.begin(), s.end());
    }
    return s;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((""AsDf"")) == (""aSdF""));
    assert(candidate((""1234"")) == (""4321""));
    assert(candidate((""ab"")) == (""AB""));
    assert(candidate((""#a@C"")) == (""#A@c""));
    assert(candidate((""#AsdfW^45"")) == (""#aSDFw^45""));
    assert(candidate((""#6@2"")) == (""2@6#""));
    assert(candidate((""#$a^D"")) == (""#$A^d""));
    assert(candidate((""#ccc"")) == (""#CCC""));
}
"
HumanEval/162,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 'text' ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଗଲା, ଏହାର md5 ହ୍ୟାଶ୍ ସମକକ୍ଷ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇଦେବେ. ଯଦି 'text' ଏକ ଖାଲି ଷ୍ଟ୍ରିଙ୍ଗ୍, ଫେରାଇଦେବେ None. >>> string_to_md5 ((((""ହେଲୋ ୱାର୍ଲ୍ଡ"")) ""3e25960a79dbc69b674cd4ec67a72c62""
std::optional<std::string> string_to_md5(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>
#include <optional>

#include <openssl/md5.h>
#include <iomanip>
#include <sstream>

std::optional<std::string> string_to_md5(std::string text) {
    if (text.empty()) {
        return std::nullopt;
    }

    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)text.c_str(), text.length(), digest);

    std::stringstream ss;
    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];
    }
    return ss.str();
}","}
int main() {
    auto candidate = string_to_md5;
    assert(candidate((""Hello world"")) == ""3e25960a79dbc69b674cd4ec67a72c62"");
    assert(candidate(("""")) == std::nullopt);
    assert(candidate((""A B C"")) == ""0ef78513b0cb8cef12743f5aeb35f888"");
    assert(candidate((""password"")) == ""5f4dcc3b5aa765d61d8327deb882cf99"");
}
"
HumanEval/163,ory_Orya,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା a ଏବଂ b ଦିଆଗଲା, a ଏବଂ b ମଧ୍ୟରେ ଥିବା ଯୁଗ୍ମ ଅଙ୍କକୁ ଉଦୟ କ୍ରମରେ ଫେରାଇବ. ଉଦାହରଣ ସ୍ୱରୂପ: >>> generate_integers (((2), (8)) (std::vector<long> (((long) 2, (long) 4, (long) 6, (long) 8})) >>> generate_integers (((8), (2)) (std::vector<long> (((long) 2, (long) 4, (long) 6, (long) 8})) >>> generate_integers (((10), (14)) (std::vector<long> ((())
std::vector<long> generate_integers(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> generate_integers(long a, long b) {
    std::vector<long> result;
    long start = std::min(a, b);
    long end = std::max(a, b);
    for (long i = start; i <= end; ++i) {
        if (i % 2 == 0) {
            result.push_back(i);
        }
    }
    return result;
}","}
int main() {
    auto candidate = generate_integers;
    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((17), (89)) == (std::vector<long>()));
}
"
