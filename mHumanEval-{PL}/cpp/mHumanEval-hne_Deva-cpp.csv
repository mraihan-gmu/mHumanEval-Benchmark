task_id,nl,pl,prompt,canonical_solutions,test
HumanEval/0,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// जांचें कि संख्याओं के दिए गए वेक्टर में, दी गई सीमा के तुलना में एक-दूसरे के करीब कोई दो संख्याएं हैं। >>> has_close_elements{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}{}{}{}}{}{}{}{}}{}{}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}}{}}{}}}{}}}{}}{}}}{}}}{}}}{}}}}{}}}{}}}}{}}}}{}}}{}}}{}}}{}}}}}{}}}}{}}}}{}}}}}{}}}}}{}}}}}{}}}}}{}}}}}{}}}}}}}{}}}}}{}}}}{}}}}}}}}{}}}}}}{}}}}}{}}}}}}}}}{}}}{}}}}}}}}}}{}}}{}}}}}}}{}}}}}{}}}{}}}{}}}}}}{}}}}}{}}}}}{}{}}}}}}}{}}}}}}{}}}}}}{}}}{}}}}}}}{}}}}}{}}}}}}
bool has_close_elements(std::vector<float> numbers, float threshold) {
","bool has_close_elements(std::vector<float> numbers, float threshold) {
    std::sort(numbers.begin(), numbers.end());  // Sort the numbers in ascending order
    for (size_t i = 1; i < numbers.size(); i++) {
        if (std::abs(numbers[i] - numbers[i - 1]) < threshold) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = has_close_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));
}
"
HumanEval/1,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ए फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेमा नेस्टेड कोष्ठक के कईठन समूह हंवय । आपहर लक्ष्य ओ समूह ल अलग-अलग स्ट्रिंग्स में अलग करना हवय अउ वेक्टर के वेक्टर ल वापस करना हवय । अलग-अलग समूह संतुलित हंवय (प्रत्येक खुला ब्रैकेट ठीक ले बंद हवय) अउ एक दूसर के भीतर नेस्टेड नी हंवय इनपुट स्ट्रिंग में कन्हु भी अंतराल ल अनदेखा करव । >>> अलग_पैरन_ग्रुप्स ((("" (() ) ((()))) (std:: वेक्टर <std:: स्ट्रिंग
std::vector<std::string> separate_paren_groups(std::string paren_string) {
","std::vector<std::string> separate_paren_groups(std::string paren_string) {
    std::vector<std::string> groups;
    std::string current_group;
    int balance = 0;

    for (char ch : paren_string) {
        if (ch == ' ') continue;  // Ignore spaces

        current_group += ch;
        if (ch == '(') {
            balance++;
        } else if (ch == ')') {
            balance--;
            if (balance == 0) {  // Found a balanced group
                groups.push_back(current_group);
                current_group.clear();
            }
        }
    }

    return groups;
}","}
int main() {
    auto candidate = separate_paren_groups;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<std::string>({(std::string)""(()())"", (std::string)""((()))"", (std::string)""()"", (std::string)""((())()())""})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""((()))"", (std::string)""(((())))""})));
    assert(candidate((""(()(())((())))"")) == (std::vector<std::string>({(std::string)""(()(())((())))""})));
    assert(candidate((""( ) (( )) (( )( ))"")) == (std::vector<std::string>({(std::string)""()"", (std::string)""(())"", (std::string)""(()())""})));
}
"
HumanEval/2,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक फ्लोटिंग पॉइंट संख्या दिए गए हवय, एला पूर्णांक भाग (दिले गए संख्या ले छोटे सबले बडखा पूर्णांक) अउ दशमलव (बाकी भाग हमेशा 1 ले छोटे) में विभाजित करे जा सकत हवय। संख्या के दशमलव भाग ल लौटाएं। >>> truncate_number{}{}{}{}{}{}{}{}}{}{}{}}{}{}{}{}}{}{}}{}}{}{}{}{}{}{}{}{}}{}{}}{}}{}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}}{}}{}}{}}}{}}{}}}{}}}}{}}}}{}}}}{}}}}}{}}}}}}}{}}}}}}}}}}{}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
float truncate_number(float number) {
","float truncate_number(float number) {
    return number - std::floor(number);
}","}
int main() {
    auto candidate = truncate_number;
    assert(candidate((3.5f)) == (0.5f));
    assert(candidate((1.25f)) == (0.25f));
    assert(candidate((123.0f)) == (0.0f));
}
"
HumanEval/3,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके करा एक बैंक खाते म जमा अउ निकासी संचालन के एक वेक्टर दिए जात हवय जेहर शून्य शेष राशि के साथ शुरू होत हवय। आपका कार्य एहर पता लगाना हवय कि काखरो घलो बिंदु म खाता शेष शून्य ले नीचे गिर जात हवय, अउ ओ बिंदु म फ़ंक्शन ल सत्य लौटा देना चाहि। अन्यथा एला गलत लौटा देना चाहि। >>> below_zero(((std::vector<long>({long) 1, (long) 2, (long) 3}))) (गलत) >>> below_zero((std::vector<long>({long) 1, (long) 2, (long) -4, (long) 5}))) (सही)
bool below_zero(std::vector<long> operations) {
","bool below_zero(std::vector<long> operations) {
    long balance = 0;
    for (long op : operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = below_zero;
    assert(candidate((std::vector<long>())) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));
}
"
HumanEval/4,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट संख्याओं के एक दिए गए वेक्टर बर, इ डेटासेट के माध्य के चारों ओर माध्य पूर्ण विचलन के गणना करव। माध्य पूर्ण विचलन प्रत्येक तत्व अउ केंद्र बिंदु (इस मामले में माध्य) के बीच औसत पूर्ण अंतर हवय: एमएडी = औसत। एक्स - एक्स_मध्यम। >>> mean_absolute_deviation{(std::vector<float>({(फ्लोट) 1.0f, (फ्लोट) 2.0f, (फ्लोट) 3.0f, (फ्लोट) 4.0f}))) (1.0f)
float mean_absolute_deviation(std::vector<float> numbers) {
","float mean_absolute_deviation(std::vector<float> numbers) {
    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) / numbers.size();
    float mad = std::accumulate(numbers.begin(), numbers.end(), 0.0f, 
                                [mean](float sum, float x) { return sum + std::abs(x - mean); }) 
                / numbers.size();
    return mad;
}","}
int main() {
    auto candidate = mean_absolute_deviation;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));
}
"
HumanEval/5,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट वेक्टर के प्रत्येक दुठन लगातार तत्वमन के बीच एक संख्या 'डिलीमीटर' सम्मिलित करव 'नंबर' >>> इंटरस्पैसर{}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {}: {: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: {: }: {: }: {: {: }: {: }: {: }: {: }: {: }: {: }: {: }
std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
","std::vector<long> intersperse(std::vector<long> numbers, long delimeter) {
    if (numbers.empty()) return numbers;

    std::vector<long> result;
    for (size_t i = 0; i < numbers.size(); i++) {
        result.push_back(numbers[i]);
        if (i < numbers.size() - 1) {
            result.push_back(delimeter);
        }
    }
    return result;
}","}
int main() {
    auto candidate = intersperse;
    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));
    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));
}
"
HumanEval/6,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इ फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेहर अंतराल ले अलग करे गए कंस के लिए कईठन समूहमन के प्रतिनिधित्व करत हवय। समूह के प्रत्येक बर, कंस के गहरे स्तर के आउटपुट। उदाहरण बर (())) म अधिकतम दो स्तर होत हवय जबकि ((())) म तीन होत हवय। >>> पार्स_नेस्टेड_पेरेंस (((((()) ((())) () ((()))))) (std:: वेक्टर<long> ((((long) 2, (long) 3, (long) 1, (long) 3))
std::vector<long> parse_nested_parens(std::string paren_string) {
","std::vector<long> parse_nested_parens(std::string paren_string) {
    std::vector<long> depths;
    long current_depth = 0, max_depth = 0;

    for (char ch : paren_string) {
        if (ch == ' ') {
            if (max_depth > 0) {
                depths.push_back(max_depth);
                max_depth = 0;
            }
            current_depth = 0;
        } else if (ch == '(') {
            current_depth++;
            max_depth = std::max(max_depth, current_depth);
        } else if (ch == ')') {
            current_depth--;
        }
    }

    if (max_depth > 0) {
        depths.push_back(max_depth);
    }

    return depths;
}","}
int main() {
    auto candidate = parse_nested_parens;
    assert(candidate((""(()()) ((())) () ((())()())"")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));
    assert(candidate((""() (()) ((())) (((())))"")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((""(()(())((())))"")) == (std::vector<long>({(long)4})));
}
"
HumanEval/7,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग के इनपुट वेक्टर ल केवल ओ मनखेमन बर फ़िल्टर करव जेमा दिए गए सबस्ट्रिंग >>> filter_by_substring((std::vector<std::string>()), (""ए"")) (स्टड::वेक्टर<std::string>()) >>> filter_by_substring((((स्टड::वेक्टर<std::string>(((((स्टड::स्ट्रिंग) ""एबीसी"", (स्टड::स्ट्रिंग) ""बैड"", (स्टड::स्ट्रिंग) ""सीडीई"", (स्टड::स्ट्रिंग) ""एरे""})), (""ए"") (स्टड::वेक्टर<स्टड::स्ट्रिंग>(((स्टड::स्ट्रिंग) ""एबीसी"", (स्टड::स्ट्रिंग) ""एरे""}))
std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
","std::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.find(substring) != std::string::npos) {
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_substring;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""aaaxxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""aaaxxy"", (std::string)""xxxAAA"", (std::string)""xxx""})));
    assert(candidate((std::vector<std::string>({(std::string)""grunt"", (std::string)""trumpet"", (std::string)""prune"", (std::string)""gruesome""})), (""run"")) == (std::vector<std::string>({(std::string)""grunt"", (std::string)""prune""})));
}
"
HumanEval/8,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक दिए गए वेक्टर बर, एक वेक्टर में जम्मो पूर्णांक के योग अउ उत्पाद ले युक्त एक टपल लौटाएं। खाली योग 0 के बराबर होना चाहि अउ खाली उत्पाद 1 के बराबर होना चाहि। >>> sum_product{}{}std::vector<long>{}} (std::make_tuple{0, 1)) >>> sum_product{}std::vector<long>{}{long) 1, (long) 2, (long) 3, (long) 4}))) (std::make_tuple{}10, 24))
std::tuple<long, long> sum_product(std::vector<long> numbers) {
","std::tuple<long, long> sum_product(std::vector<long> numbers) {
    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);
    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());
    return std::make_tuple(sum, product);
}","}
int main() {
    auto candidate = sum_product;
    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));
    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));
    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));
}
"
HumanEval/9,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के दिए गए वेक्टर ले, अनुक्रम में दिए गए समय तक पाए गए अधिकतम तत्व के एक वेक्टर उत्पन्न करव। >>> रोलिंग_मैक्स ({})
std::vector<long> rolling_max(std::vector<long> numbers) {
","std::vector<long> rolling_max(std::vector<long> numbers) {
    std::vector<long> result;
    long max_so_far = LONG_MIN;

    for (long num : numbers) {
        max_so_far = std::max(max_so_far, num);
        result.push_back(max_so_far);
    }

    return result;
}","}
int main() {
    auto candidate = rolling_max;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));
}
"
HumanEval/10,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सबले छोटे पालिंड्रोम खोजें जेहर एक आपूर्ति के स्ट्रिंग के साथ शुरू होत हवय। एल्गोरिदम विचार सरल हवय: - आपूर्ति के स्ट्रिंग के सबले लंबा पोस्टफिक्स खोजें जेहर एक पालिंड्रोम हवय। - स्ट्रिंग रिवर्स के स्ट्रिंग प्रीफिक्स के अंत में संलग्न करें जेहर पालिंड्रोमिक प्रत्यय ले पहली आता हवय। >>> make_palindrome ((("""")) ("""") >>> make_palindrome (((""cat"")) (""कैटाक"") >>> make_palindrome (((""कैटाक"")
std::string make_palindrome(std::string string) {
","std::string make_palindrome(std::string string) {
    auto is_palindrome = [](const std::string &s) {
        return std::equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());
    };

    for (size_t i = 0; i < string.size(); ++i) {
        if (is_palindrome(string.substr(i))) {
            std::string prefix = string.substr(0, i);
            std::reverse(prefix.begin(), prefix.end());
            return string + prefix;
        }
    }

    return string;
}","}
int main() {
    auto candidate = make_palindrome;
    assert(candidate(("""")) == (""""));
    assert(candidate((""x"")) == (""x""));
    assert(candidate((""xyz"")) == (""xyzyx""));
    assert(candidate((""xyx"")) == (""xyx""));
    assert(candidate((""jerry"")) == (""jerryrrej""));
}
"
HumanEval/11,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट दु स्ट्रिंग ए अउ बी हवय जेमा केवल 1 अउ 0 शामिल हंवय । ए इनपुट म बाइनरी एक्सओआर निष्पादित करव अउ परिणाम ल स्ट्रिंग के रूप में घलो लौटाएं। >>> स्ट्रिंग_क्सोर ({}) 10 "", ("" 110 "")) ("" 100 "")
std::string string_xor(std::string a, std::string b) {
","std::string string_xor(std::string a, std::string b) {
    std::string result;
    for (size_t i = 0; i < a.size(); ++i) {
        result += (a[i] == b[i]) ? '0' : '1';
    }
    return result;
}","}
int main() {
    auto candidate = string_xor;
    assert(candidate((""111000""), (""101010"")) == (""010010""));
    assert(candidate((""1""), (""1"")) == (""0""));
    assert(candidate((""0101""), (""0000"")) == (""0101""));
}
"
HumanEval/12,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग्स के वेक्टर ले, सबले लंबा ल लौटाव। एक ही लंबाई के कई स्ट्रिंग के मामले म पहला ल लौटाव। इनपुट वेक्टर खाली होए के मामले म कोई घलो ल वापस नी करव। >>> longest(((std::vector<std::string>())) std::nullopt >>> longest(((std::vector<std::string>{(std::string) ""a"", (std::string) ""b"", (std::string) ""c""}))) ""a"" >>> longest(((std::vector<std::string>({(std::string) ""a"", (std::string) ""bb"", (stdstring) ""ccc""}))) ""ccc""
std::optional<std::string> longest(std::vector<std::string> strings) {
","std::optional<std::string> longest(std::vector<std::string> strings) {
    if (strings.empty()) return std::nullopt;

    return *std::max_element(strings.begin(), strings.end(), 
                             [](const std::string& a, const std::string& b) {
                                 return a.size() < b.size();
                             });
}","}
int main() {
    auto candidate = longest;
    assert(candidate((std::vector<std::string>())) == std::nullopt);
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == ""x"");
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""yyy"", (std::string)""zzzz"", (std::string)""www"", (std::string)""kkkk"", (std::string)""abc""}))) == ""zzzz"");
}
"
HumanEval/13,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो पूर्णांक ए अउ बी के सबले बडखा सामान्य विभाजक ल वापस करव >>> सबले बडखा_सामान्य_विभाजक (((3)), (5)) (1) >>> सबले बडखा_सामान्य_विभाजक (((25), (15)) (5)
long greatest_common_divisor(long a, long b) {
","long greatest_common_divisor(long a, long b) {
    return std::gcd(a, b);
}","}
int main() {
    auto candidate = greatest_common_divisor;
    assert(candidate((3), (7)) == (1));
    assert(candidate((10), (15)) == (5));
    assert(candidate((49), (14)) == (7));
    assert(candidate((144), (60)) == (12));
}
"
HumanEval/14,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट स्ट्रिंग के सबले छोटे ले सबले लंबे तक जम्मो उपसर्गों के वापसी वेक्टर >>> सभी_उपसर्गों (((""एबीसी"")) (std:: वेक्टर <std:: स्ट्रिंग > ({(स्टड:: स्ट्रिंग) ""ए"", (स्टड:: स्ट्रिंग) ""एबी"", (स्टड:: स्ट्रिंग) ""एबीसी""}))
std::vector<std::string> all_prefixes(std::string string) {
","std::vector<std::string> all_prefixes(std::string string) {
    std::vector<std::string> prefixes;
    for (size_t i = 1; i <= string.size(); ++i) {
        prefixes.push_back(string.substr(0, i));
    }
    return prefixes;
}","}
int main() {
    auto candidate = all_prefixes;
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""asdfgh"")) == (std::vector<std::string>({(std::string)""a"", (std::string)""as"", (std::string)""asd"", (std::string)""asdf"", (std::string)""asdfg"", (std::string)""asdfgh""})));
    assert(candidate((""WWW"")) == (std::vector<std::string>({(std::string)""W"", (std::string)""WW"", (std::string)""WWW""})));
}
"
HumanEval/15,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 0 ले शुरू होए वाले स्पेस-सीमित संख्या वाले स्ट्रिंग ल वापस करत हवय। >>> string_sequence((0)) (""0"") >>> string_sequence((5)) (""0 1 2 3 4 5"")
std::string string_sequence(long n) {
","std::string string_sequence(long n) {
    std::ostringstream oss;
    for (long i = 0; i <= n; ++i) {
        if (i > 0) oss << "" "";
        oss << i;
    }
    return oss.str();
}","}
int main() {
    auto candidate = string_sequence;
    assert(candidate((0)) == (""0""));
    assert(candidate((3)) == (""0 1 2 3""));
    assert(candidate((10)) == (""0 1 2 3 4 5 6 7 8 9 10""));
}
"
HumanEval/16,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक स्ट्रिंग दिए गए, पता लगाएं कि कितने विशिष्ट वर्ण (केस के बावजूद) एमे >>> count_distinct_characters (((""xyzXYZ"")) (3) >>> count_distinct_characters (((""जेरी"")) (4) शामिल हवय
long count_distinct_characters(std::string string) {
","long count_distinct_characters(std::string string) {
    std::unordered_set<char> distinct_chars;
    for (char ch : string) {
        distinct_chars.insert(std::tolower(ch));
    }
    return distinct_chars.size();
}","}
int main() {
    auto candidate = count_distinct_characters;
    assert(candidate(("""")) == (0));
    assert(candidate((""abcde"")) == (5));
    assert(candidate((""abcdecadeCADE"")) == (5));
    assert(candidate((""aaaaAAAAaaaa"")) == (1));
    assert(candidate((""Jerry jERRY JeRRRY"")) == (5));
}
"
HumanEval/17,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इ फ़ंक्शन बर इनपुट एक स्ट्रिंग हवय जेहर एएससीआईआई प्रारूप में संगीत नोट के प्रतिनिधित्व करत हवय। आपके पास कईठन बीट्स के अनुरूप पूर्णांक के स्ट्रिंग वेक्टर के पार्स करना हवय। इहां एक लिगेंड हवय: 'ओ' नोट, आखिरी चार बीट्स 'ओएससीआई' - आखिरी आधा नोट, आखिरी दो बीट्स 'ओएससीआई' - आखिरी क्वार्टर नोट, आखिरी एक बीट >>> पार्स_म्यूजिक) ({""ओएससीआई ओएससीआई ओएससीआई ओएससीआई ओएससीआई ओएससीआई ओ"") (स्टडीवेक्टर<<} (लंबा) {(लंबा) 4, (लंबा) 2, (लंबा) 1, (लंबा) 2, (लंबा) 2, (लंबा) 1, (लंबा) 1, (लंबा) 1, (लंबा) 4, (लंबा) 4}) हर एक विशेष कार्य ल पूरा नी करत हवय अउ वापस कैसे करत हवय।
std::vector<long> parse_music(std::string music_string) {
","std::vector<long> parse_music(std::string music_string) {
    std::vector<long> beats;
    std::istringstream iss(music_string);
    std::string note;
    
    while (iss >> note) {
        if (note == ""o"") beats.push_back(4);
        else if (note == ""o|"") beats.push_back(2);
        else if (note == "".|"") beats.push_back(1);
    }

    return beats;
}","}
int main() {
    auto candidate = parse_music;
    assert(candidate(("""")) == (std::vector<long>()));
    assert(candidate((""o o o o"")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));
    assert(candidate(("".| .| .| .|"")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));
    assert(candidate((""o| o| .| .| o o o o"")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));
    assert(candidate((""o| .| o| .| o o| o o|"")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));
}
"
HumanEval/18,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// मूल स्ट्रिंग में दिए गए सबस्ट्रिंग के कती बार मिल सकत हवय। ओवरलैपिंग केस के गिनती करव। >>> how_many_times((""""), (""a"")) (0) >>> how_many_times(""aaa""), (""a"")) (3) >>> how_many_times(""aaaa""), (""aa"") (3)
long how_many_times(std::string string, std::string substring) {
","long how_many_times(std::string string, std::string substring) {
    if (substring.empty()) return 0;
    
    long count = 0;
    size_t pos = 0;
    
    while ((pos = string.find(substring, pos)) != std::string::npos) {
        count++;
        pos++;  // Move one position forward to count overlapping occurrences
    }
    
    return count;
}","}
int main() {
    auto candidate = how_many_times;
    assert(candidate((""""), (""x"")) == (0));
    assert(candidate((""xyxyxyx""), (""x"")) == (4));
    assert(candidate((""cacacacac""), (""cac"")) == (4));
    assert(candidate((""john doe""), (""john"")) == (1));
}
"
HumanEval/19,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट 'शून्य' ले 'नौ' तक संख्याओं के एक अंतरिक्ष-सीमित स्ट्रिंग हवय। वैध विकल्प 'शून्य', 'एक', 'दू', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' अउ 'नौ' हवय। छोटी ले सबले बड़ी संख्या के साथ क्रमबद्ध स्ट्रिंग ल लौटाएं >>> sort_numbers (((""तीन एक पांच"")) (""एक तीन पांच"")
std::string sort_numbers(std::string numbers) {
","std::string sort_numbers(std::string numbers) {
    std::unordered_map<std::string, int> num_map = {
        {""zero"", 0}, {""one"", 1}, {""two"", 2}, {""three"", 3}, {""four"", 4},
        {""five"", 5}, {""six"", 6}, {""seven"", 7}, {""eight"", 8}, {""nine"", 9}
    };

    std::unordered_map<int, std::string> rev_map = {
        {0, ""zero""}, {1, ""one""}, {2, ""two""}, {3, ""three""}, {4, ""four""},
        {5, ""five""}, {6, ""six""}, {7, ""seven""}, {8, ""eight""}, {9, ""nine""}
    };

    std::istringstream iss(numbers);
    std::vector<int> num_list;
    std::string word;

    while (iss >> word) {
        num_list.push_back(num_map[word]);
    }

    std::sort(num_list.begin(), num_list.end());

    std::ostringstream oss;
    for (size_t i = 0; i < num_list.size(); ++i) {
        if (i > 0) oss << "" "";
        oss << rev_map[num_list[i]];
    }

    return oss.str();
}","}
int main() {
    auto candidate = sort_numbers;
    assert(candidate(("""")) == (""""));
    assert(candidate((""three"")) == (""three""));
    assert(candidate((""three five nine"")) == (""three five nine""));
    assert(candidate((""five zero four seven nine eight"")) == (""zero four five seven eight nine""));
    assert(candidate((""six five four three two one zero"")) == (""zero one two three four five six""));
}
"
HumanEval/20,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्याओं के एक आपूर्ति किए गए वेक्टर (लंबाई में कम से कम दो) ले दो का चयन करें अउ एक-दूसरे के निकटतम दो लौटाएं अउ उन्हें क्रम में लौटाएं (छोटी संख्या, बड़ी संख्या) । >>> find_closest_elements{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}}{}}{}{}}{}}{}}{}}{}{}{}}{}}{}}{}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}{}}}{}}{}}}{}}}{}}}{}}}}{}}}{}}}}}{}}}}{}}}}}{}}}}}}{}}}}}}{}}}}}}{}}}}}}}}}{}}}}}}{}}}}}}}}}}}{}}}}}}}}{}}}}}}}}}}}}}}}{}}}}}}}}}}{}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}}}}}{}}}}}}}}}}}}}}}}}
std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
","std::tuple<float, float> find_closest_elements(std::vector<float> numbers) {
    std::sort(numbers.begin(), numbers.end());
    float min_diff = std::numeric_limits<float>::max();
    float num1 = 0, num2 = 0;

    for (size_t i = 1; i < numbers.size(); ++i) {
        float diff = numbers[i] - numbers[i - 1];
        if (diff < min_diff) {
            min_diff = diff;
            num1 = numbers[i - 1];
            num2 = numbers[i];
        }
    }

    return std::make_tuple(num1, num2);
}","}
int main() {
    auto candidate = find_closest_elements;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));
    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));
}
"
HumanEval/21,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्याओं के वेक्टर (कम से कम दो तत्वों के) ल देखते हुए, उस वेक्टर में एक रैखिक परिवर्तन लागू करें, ताकि छोटी संख्या 0 बन जाए अउ सबले बड़ी 1 बन जाए।
std::vector<float> rescale_to_unit(std::vector<float> numbers) {
","std::vector<float> rescale_to_unit(std::vector<float> numbers) {
    float min_val = *std::min_element(numbers.begin(), numbers.end());
    float max_val = *std::max_element(numbers.begin(), numbers.end());

    if (min_val == max_val) {
        std::fill(numbers.begin(), numbers.end(), 0.0f);
        return numbers;
    }

    for (float &num : numbers) {
        num = (num - min_val) / (max_val - min_val);
    }

    return numbers;
}","}
int main() {
    auto candidate = rescale_to_unit;
    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));
    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));
}
"
HumanEval/22,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// केवल पूर्णांक बर कन्हु सीपीपीथॉन मानों के दिए गए वेक्टर के फ़िल्टर >>> फिल्टर_इंटेगर्स ((((एसटीडीः वेक्टर<एसटीडीः: कन्हु> ((((एसटीडीः: स्ट्रिंग) ""ए"", (एसटीडीः: स्ट्रिंग) 3.14 एफ, (एसटीडीः: स्ट्रिंग) 5}))) (एसटीडीः वेक्टर<लंबी> ((((लंबी) 5})) >>> फिल्टर_इंटेगर्स (((एसटीडीः वेक्टर<एसटीडीः: कन्हु> ((({1, 2, 3, ""एबीसी"", एसटीडीः: <लंबी, मानचित्र>), एसटीडीः वेक्टर<लंबी> (((())))
std::vector<long> filter_integers(std::vector<std::any> values) {
","std::vector<long> filter_integers(std::vector<std::any> values) {
    std::vector<long> result;
    for (const auto& val : values) {
        if (val.type() == typeid(long)) {
            result.push_back(std::any_cast<long>(val));
        } else if (val.type() == typeid(int)) {
            result.push_back(std::any_cast<int>(val));
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_integers;
    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));
    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, ""adasd""}))) == (std::vector<long>({(long)4, (long)9})));
    assert(candidate((std::vector<std::any>({3, ""c"", 3, 3, ""a"", ""b""}))) == (std::vector<long>({(long)3, (long)3, (long)3})));
}
"
HumanEval/23,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दिए गए स्ट्रिंग के लंबाई >>> स्ट्रिंग_लंबाई ({""}) (0) >>> स्ट्रिंग_लंबाई ({""}) (3)
long string_length(std::string string) {
","long string_length(std::string string) {
    return string.length();
}","}
int main() {
    auto candidate = string_length;
    assert(candidate(("""")) == (0));
    assert(candidate((""x"")) == (1));
    assert(candidate((""asdasnakj"")) == (9));
}
"
HumanEval/24,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक दिए गए संख्या एन बर, सबले बडखा संख्या के खोज करव जेहर एन के बराबर विभाजित करत हवय, एन >>> ले छोटे सबले बडखा_डिवायर ({}) (}) (5)
long largest_divisor(long n) {
","long largest_divisor(long n) {
    for (long i = n / 2; i > 0; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return 1;
}","}
int main() {
    auto candidate = largest_divisor;
    assert(candidate((3)) == (1));
    assert(candidate((7)) == (1));
    assert(candidate((10)) == (5));
    assert(candidate((100)) == (50));
    assert(candidate((49)) == (7));
}
"
HumanEval/25,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दिए गए पूर्णांक के प्रमुख कारकमन के वेक्टर ल छोटे ले सबले बड़े क्रम में लौटाएं। कारकमन के प्रत्येक के कारकमन के संख्या के अनुरूप कईठन बार वेक्टर करे जाना चाहि। इनपुट संख्या के जम्मो कारकमन के उत्पाद के बराबर होना चाहि >>> कारक करे ((8)) (std::vector<long>{(long) 2, (long) 2, (long) 2})) >>> कारक करे ((25)) (std::vector<long>{(long) 5, (long) 5})) >>> कारक करे ((((70)) (std::vector<long>{(long) 2, (long) 5, (long) 7}))
std::vector<long> factorize(long n) {
","std::vector<long> factorize(long n) {
    std::vector<long> factors;
    for (long i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 1) {
        factors.push_back(n);
    }
    return factors;
}","}
int main() {
    auto candidate = factorize;
    assert(candidate((2)) == (std::vector<long>({(long)2})));
    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));
    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));
    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));
    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));
    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));
}
"
HumanEval/26,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक वेक्टर ले, जम्मो तत्वमन के हटाएं जेहर एक ले ज्यादा बार होत हंवय । इनपुट में तत्वमन के क्रम के समान रखें। >>> remove_duplicates((std::vector<long>({(long) 1, (long) 2, (long) 3, (long) 2, (long) 4}))) (std::vector<long>({(long) 1, (long) 3, (long) 4}))
std::vector<long> remove_duplicates(std::vector<long> numbers) {
","std::vector<long> remove_duplicates(std::vector<long> numbers) {
    std::unordered_map<long, int> freq;
    for (long num : numbers) {
        freq[num]++;
    }

    std::vector<long> result;
    for (long num : numbers) {
        if (freq[num] == 1) {
            result.push_back(num);
        }
    }

    return result;
}","}
int main() {
    auto candidate = remove_duplicates;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));
}
"
HumanEval/27,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक दिए गए स्ट्रिंग बर, छोटे अक्षरों ल अपरकेस अउ अपरकेस ल लीनर म फ्लिप करव। >>> flip_case ((((""हैलो"")) (""हैलो"")
std::string flip_case(std::string string) {
","std::string flip_case(std::string string) {
    for (char &ch : string) {
        if (std::islower(ch)) {
            ch = std::toupper(ch);
        } else if (std::isupper(ch)) {
            ch = std::tolower(ch);
        }
    }
    return string;
}","}
int main() {
    auto candidate = flip_case;
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hello!"")) == (""hELLO!""));
    assert(candidate((""These violent delights have violent ends"")) == (""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""));
}
"
HumanEval/28,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग्स के एक स्ट्रिंग में कन्केनेट वेक्टर >>> कन्केनेट ((((std:: vector<std::string>())) ("""") >>> कन्केनेट ((((std:: vector<std::string>({(std::string) ""ए"", (स्टड:: स्ट्रिंग) ""बी"", (स्टड:: स्ट्रिंग) ""सी""}))) (""एबीसी"")
std::string concatenate(std::vector<std::string> strings) {
","std::string concatenate(std::vector<std::string> strings) {
    std::string result;
    for (const auto& str : strings) {
        result += str;
    }
    return result;
}","}
int main() {
    auto candidate = concatenate;
    assert(candidate((std::vector<std::string>())) == (""""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z""}))) == (""xyz""));
    assert(candidate((std::vector<std::string>({(std::string)""x"", (std::string)""y"", (std::string)""z"", (std::string)""w"", (std::string)""k""}))) == (""xyzwk""));
}
"
HumanEval/29,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// केवल एक दिए गए उपसर्ग के साथ शुरू होए वाले स्ट्रिंग्स के एक इनपुट वेक्टर के फ़िल्टर करव। >>> filter_by_prefix((std::vector<std::string>()), (""ए"")) (स्टडीःवेक्टर<std::string>()) >>> filter_by_prefix(((स्टडीःवेक्टर<std::string>({(स्टडीःस्ट्रिंग) ""एबीसी"", (स्टडीःस्ट्रिंग) ""बीसीडी"", (स्टडीःस्ट्रिंग) ""सीडीई"", (स्टडीःस्ट्रिंग) ""एरे""})), (""ए"") (स्टडीःवेक्टर<स्टडीःस्ट्रिंग>((((स्टडीःस्ट्रिंग) ""एबीसी"", (स्टडीःस्ट्रिंग) ""एरे""}))
std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
","std::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {
    std::vector<std::string> result;
    for (const auto& str : strings) {
        if (str.rfind(prefix, 0) == 0) {  // Check if 'str' starts with 'prefix'
            result.push_back(str);
        }
    }
    return result;
}","}
int main() {
    auto candidate = filter_by_prefix;
    assert(candidate((std::vector<std::string>()), (""john"")) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""xxx"", (std::string)""asd"", (std::string)""xxy"", (std::string)""john doe"", (std::string)""xxxAAA"", (std::string)""xxx""})), (""xxx"")) == (std::vector<std::string>({(std::string)""xxx"", (std::string)""xxxAAA"", (std::string)""xxx""})));
}
"
HumanEval/30,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// केवल वेक्टर में सकारात्मक संख्याओं को लौटाएं। >>> get_positive((std::vector<long>({long) -1, (long) -2, (long) -4, (long) -5, (long) -6}))) (std::vector<long>({long) -2, (long) -5, (long) -6})) >>> get_positive(((std::vector<long>({long) -5, (long) -3, (long) -5, (long) -2, (long) -3, (long) -3, (long) -9, (long) -0, (long) -123, (long) -1, (long) -10}))) (std::vector<long>{(long) -5, (long) -3, (long) -2, (long) -3, (long) -9, (long) -123, (long) -10}))
std::vector<long> get_positive(std::vector<long> l) {
","std::vector<long> get_positive(std::vector<long> l) {
    std::vector<long> result;
    for (long num : l) {
        if (num > 0) {
            result.push_back(num);
        }
    }
    return result;
}","}
int main() {
    auto candidate = get_positive;
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));
    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/31,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सही ल लौटाओ यदि कोई दिए गए संख्या प्राइम हवय, अउ आने रहिस गलत हवय। >>> is_prime((6)) (गलत) >>> is_prime((101)) (सही) >>> is_prime((11) (सही) >>> is_prime((13441)) (सही) >>> is_prime(61)) (सही) >>> is_prime(4)) (गलत) >>> is_prime(1)) (गलत)
bool is_prime(long n) {
","bool is_prime(long n) {
    if (n < 2) return false;
    if (n < 4) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (long i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_prime;
    assert(candidate((6)) == (false));
    assert(candidate((101)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((13441)) == (true));
    assert(candidate((61)) == (true));
    assert(candidate((4)) == (false));
    assert(candidate((1)) == (false));
    assert(candidate((5)) == (true));
    assert(candidate((11)) == (true));
    assert(candidate((17)) == (true));
    assert(candidate((85)) == (false));
    assert(candidate((77)) == (false));
    assert(candidate((255379)) == (false));
}
"
HumanEval/33,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ए फ़ंक्शन एक वेक्टर l लेता हवय अउ एक वेक्टर l 'ला वापस करत हवय ताकि l' इंडिकेस में l के समान हो, जेहर तीन ले विभाजित नी होत हवय, जबकि तीन से विभाजित इंडिकेस में एखर मूल्मन के अनुरूप इंडिकेस के मूल्मन के बराबर होत हवय, लेकिन सॉर्ट करे जात हवय। >>> sort_third(((std::vector<long>{(long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_third((std::vector<long>{(long) 5, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 2}))) (std::vector<(long>{(long>2, (long) 6, (long) 3, (long) 4, (long) 8, (long) 9, (long) 5})
std::vector<long> sort_third(std::vector<long> l) {
","std::vector<long> sort_third(std::vector<long> l) {
    std::vector<long> third_indices;
    for (size_t i = 0; i < l.size(); i += 3) {
        third_indices.push_back(l[i]);
    }
    std::sort(third_indices.begin(), third_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 3) {
        l[i] = third_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_third;
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));
}
"
HumanEval/34,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक वेक्टर में सॉर्ट किए गए अद्वितीय तत्व लौटाएं >>> अद्वितीय (long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 3, (long) 9, (long) 0, (long) 123}))) (std:: vector (long) 0, (long) 2, (long) 3, (long) 5, (long) 9, (long) 123}))
std::vector<long> unique(std::vector<long> l) {
","std::vector<long> unique(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    l.erase(std::unique(l.begin(), l.end()), l.end());
    return l;
}","}
int main() {
    auto candidate = unique;
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));
}
"
HumanEval/35,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वेक्टर में अधिकतम तत्व लौटाएं। >>> max_element((std::vector<long>({long) 1, (long) 2, (long) 3}))) (3) >>> max_element((std::vector<long>({long) 5, (long) 3, (long) -5, (long) 2, (long) -3, (long) 3, (long) 9, (long) 0, (long) 123, (long) 1, (long) -10}))) (123)
long max_element(std::vector<long> l) {
","long max_element(std::vector<long> l) {
    return *std::max_element(l.begin(), l.end());
}","}
int main() {
    auto candidate = max_element;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));
}
"
HumanEval/36,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्या 7 के पूर्णांक में प्रकट होए के संख्या ल लौटाएं जेहर 11 या 13 ले विभाजित हंवय । >>> fizz_buzz((50)) (0) >>> fizz_buzz((78)) (2) >>> fizz_buzz((79) (3)
long fizz_buzz(long n) {
","long fizz_buzz(long n) {
    long count = 0;
    for (long i = 0; i < n; i++) {
        if (i % 11 == 0 || i % 13 == 0) {
            long temp = i;
            while (temp > 0) {
                if (temp % 10 == 7) count++;
                temp /= 10;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = fizz_buzz;
    assert(candidate((50)) == (0));
    assert(candidate((78)) == (2));
    assert(candidate((79)) == (3));
    assert(candidate((100)) == (3));
    assert(candidate((200)) == (6));
    assert(candidate((4000)) == (192));
    assert(candidate((10000)) == (639));
    assert(candidate((100000)) == (8026));
}
"
HumanEval/37,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ए फ़ंक्शन एक वेक्टर l लेता हवय अउ एक वेक्टर l 'ला वापस करत हवय ताकि एल विषम सूचकांकों में एल के समान हो, जबकि एकर मान सम सूचकांकों में एल के सम सूचकांकों के मान के बराबर होत हवय, लेकिन सॉर्ट करे जात हवय। >>> sort_even: vector<long>{(long) 1, (long) 2, (long) 3}))) (std: vector<long>{(long) 1, (long) 2, (long) 3})) >>> sort_even: vector<long>{(long) 5, (long) 6, (long) 3, (long) 4}))) (std: vector<(long>{(long) 3, (long) 6, (long) 5, (long) 4}))
std::vector<long> sort_even(std::vector<long> l) {
","std::vector<long> sort_even(std::vector<long> l) {
    std::vector<long> even_indices;
    for (size_t i = 0; i < l.size(); i += 2) {
        even_indices.push_back(l[i]);
    }
    std::sort(even_indices.begin(), even_indices.end());
    
    size_t idx = 0;
    for (size_t i = 0; i < l.size(); i += 2) {
        l[i] = even_indices[idx++];
    }
    
    return l;
}","}
int main() {
    auto candidate = sort_even;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));
}
"
HumanEval/39,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// prime_fib एक फाइबोनैचि संख्या के एन-वें संख्या ल वापस करत हवय अउ एहर भी प्राइम हवय। >>> प्राइम_फिब (१) (२) >>> प्राइम_फिब (२) (३) >>> प्राइम_फिब (३) (५) >>> प्राइम_फिब (४) (१३) >>> प्राइम_फिब (५) (८९)
long prime_fib(long n) {
","bool is_prime(long num) {
    if (num < 2) return false;
    if (num < 4) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (long i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

long prime_fib(long n) {
    std::vector<long> prime_fibs;
    long a = 1, b = 1;
    while (prime_fibs.size() < n) {
        long next = a + b;
        a = b;
        b = next;
        if (is_prime(next)) {
            prime_fibs.push_back(next);
        }
    }
    return prime_fibs[n - 1];
}","}
int main() {
    auto candidate = prime_fib;
    assert(candidate((1)) == (2));
    assert(candidate((2)) == (3));
    assert(candidate((3)) == (5));
    assert(candidate((4)) == (13));
    assert(candidate((5)) == (89));
    assert(candidate((6)) == (233));
    assert(candidate((7)) == (1597));
    assert(candidate((8)) == (28657));
    assert(candidate((9)) == (514229));
    assert(candidate((10)) == (433494437));
}
"
HumanEval/40,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ट्रिपल_सम_टू_ज़ेरो इनपुट के रूप में पूर्णांक के एक वेक्टर लेता हवय। ए सच ल वापस करत हवय यदि वेक्टर में तीन अलग-अलग तत्व हंवय जेहर शून्य के योग करत हंवय, अउ अन्यथा गलत होत हवय। >>> ट्रिपल_सम_टू_ज़ेरो, (long) 1, (long) 3, (long) 5, (long) 0}))) (झूठा) >>> ट्रिपल_सम_टू_ज़ेरो, (long) 1, (long) 3, (long) 2, (long) 1} (सही) >>> ट्रिपल_सम_टू_ज़ेरो, (long) 3, (long) 2, (long) 1} (सही) >>> ट्रिपल_सम_टू_ज़ेरो, (long) 3, (long) 7} (सही) >>> ट्रिपल_सम_टू_ज़ेरो, (long) 2, (long) 4, (long) 5, (long) 3, (long) 9, (long) 7))) (सही) >>> ट्रिपल_सम_टू_ज़ेरो, (long) 3, (long) 2, (long) 5, (long) 3, (long) 9, (long) 7} (long) ट्रिपल_ज़ेरो, (long) >>> ट्रिपल_ज़ेरो, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long)) (long)) (long) (long)) (long)) (long)) (long)) (long) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (
bool triples_sum_to_zero(std::vector<long> l) {
","bool triples_sum_to_zero(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    for (size_t i = 0; i < n - 2; i++) {
        size_t left = i + 1, right = n - 1;
        while (left < right) {
            long sum = l[i] + l[left] + l[right];
            if (sum == 0) return true;
            else if (sum < 0) left++;
            else right--;
        }
    }
    
    return false;
}","}
int main() {
    auto candidate = triples_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));
    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));
}
"
HumanEval/41,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सड़क के कल्पना करव जऊन एक पूरा तरह ले सीधा अनंत लम्बा रेखा हे. n कार बाये ले दहिने चलत हें; एकेच बखत, n कार के एक अलग सेट दाये ले बाये चलत हें. कार के दु सेट एक दूसर ले अब्बड दूरिहा होके सुरू होथें. सब कार एक समान गति म चले जाथे. दु कार के टक्कर तब होथे जब एक कार जऊन बाये ले दहिने चलत हे एक कार ल टक्कर देथे जऊन दाये ले बाये चलत हे. हालांकि, कार अनगिनत रूप ले मजबूत अऊ मजबूत हे; नतीजतन, ओ अपन गतिबिधि म चलत रहिथे मानो ओ टक्कर नइ देय हे. ए फंक्शन ह अइसन टक्कर के संख्या ल आउटपुट करथे.
long car_race_collision(long n) {
","long car_race_collision(long n) {
    return n * n;
}","}
int main() {
    auto candidate = car_race_collision;
    assert(candidate((2)) == (4));
    assert(candidate((3)) == (9));
    assert(candidate((4)) == (16));
    assert(candidate((8)) == (64));
    assert(candidate((10)) == (100));
}
"
HumanEval/42,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// 1 द्वारा वृद्धि के साथ तत्वों के साथ वापसी वेक्टर >>> incr_list((std::vector<long>({long) 1, (long) 2, (long) 3}))) (std::vector<long>{(long) 2, (long) 3, (long) 4})) >>> incr_list((std::vector<long>{long) 5, (long) 3, (long) 5, (long) 2, (long) 3, (long) 9, (long) 0, (long) 123}))) (std::vector<long>{long) 6, (long) 4, (long) 6, (long) 3, (long) 4, (long) 4, (long) 10, (long) 1, (long) 124}))
std::vector<long> incr_list(std::vector<long> l) {
","std::vector<long> incr_list(std::vector<long> l) {
    for (long &num : l) {
        num++;
    }
    return l;
}","}
int main() {
    auto candidate = incr_list;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));
    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));
}
"
HumanEval/43,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// जोड़े_सम_टू_शून्य एक पूर्णांक के वेक्टर ल इनपुट के रूप में लेता हवय। ए सच ल वापस करत हवय यदि वेक्टर में दु अलग-अलग तत्व हंवय जेहर शून्य के योग करत हंवय, अउ अन्यथा गलत होत हवय। >>> जोड़े_सम_टू_शून्य ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), (}), ({}), (}), (}), (}) (}), (}), (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (} (}) (}) (}) (} (}) (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (} (}) (}) (}) (} (}) (} (}) (} (}) (}) (} (}) (} (} (}) (}) (}) (} (}) (}) (} (}) (}) (} (}) (} (}) (}) (} (} (}) (}) (} (}) (}) (}) (} (}) (}) (} (}) (}) (} (}) (}) (}) (}
bool pairs_sum_to_zero(std::vector<long> l) {
","bool pairs_sum_to_zero(std::vector<long> l) {
    std::unordered_set<long> seen;
    for (long num : l) {
        if (seen.count(-num)) {
            return true;
        }
        seen.insert(num);
    }
    return false;
}","}
int main() {
    auto candidate = pairs_sum_to_zero;
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));
    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));
}
"
HumanEval/44,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इनपुट नंबर x के संख्यात्मक आधार ल आधार म बदलें। रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाएं। आधार संख्या 10 ले कम हवय। >>> change_base((8), (3)) (""22"") >>> change_base(8), (2)) (""1000"") >>> change_base((7), (2)) (""111"")
std::string change_base(long x, long base) {
","std::string change_base(long x, long base) {
    if (x == 0) return ""0"";
    
    std::string result;
    while (x > 0) {
        result += std::to_string(x % base);
        x /= base;
    }
    
    std::reverse(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = change_base;
    assert(candidate((8), (3)) == (""22""));
    assert(candidate((9), (3)) == (""100""));
    assert(candidate((234), (2)) == (""11101010""));
    assert(candidate((16), (2)) == (""10000""));
    assert(candidate((8), (2)) == (""1000""));
    assert(candidate((7), (2)) == (""111""));
    assert(candidate((2), (3)) == (""2""));
    assert(candidate((3), (4)) == (""3""));
    assert(candidate((4), (5)) == (""4""));
    assert(candidate((5), (6)) == (""5""));
    assert(candidate((6), (7)) == (""6""));
    assert(candidate((7), (8)) == (""7""));
}
"
HumanEval/45,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक त्रिकोण बर एक पक्ष अउ उच्च वापसी क्षेत्र के लंबाई दी गइस हवय। >>> त्रिकोण_क्षेत्र (((5), (3)) (7.5 एफ)
float triangle_area(long a, long h) {
","float triangle_area(long a, long h) {
    return 0.5f * a * h;
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((5), (3)) == (7.5f));
    assert(candidate((2), (2)) == (2.0f));
    assert(candidate((10), (8)) == (40.0f));
}
"
HumanEval/46,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एफआईबी 4 संख्या अनुक्रम एक अनुक्रम हवय जेहर फिबोनैकी अनुक्रम के समान हवय जेला निम्नानुसार परिभाषित करे गए हवय: एफआईबी 4 ((0) -> 0 एफआईबी 4 ((1) -> 0 एफआईबी 4 ((2) -> 2 एफआईबी 4 ((3) -> 0 एफआईबी 4 ((एन) -> एफआईबी 4 ((एन -1) + एफआईबी 4 ((एन -2) + एफआईबी 4 ((एन -3) + एफआईबी 4 ((एन -4)। कृपया एफआईबी 4 संख्या अनुक्रम के एन-वें तत्व के कुशलतापूर्वक गणना करे बर एक फ़ंक्शन लिखें। पुनरावृत्ति के उपयोग झन करव। >>> एफआईबी 4 (((5)) (4) >>> एफआईबी 4 (((6)) (8) >>> एफआईबी 4 (((7)) (14)
long fib4(long n) {
","long fib4(long n) {
    if (n == 0 || n == 1 || n == 3) return 0;
    if (n == 2) return 2;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 2;

    for (long i = 4; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fib4;
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (28));
    assert(candidate((10)) == (104));
    assert(candidate((12)) == (386));
}
"
HumanEval/47,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वेक्टर में तत्वों के मध्यवर्ती वापसी l. >>> मध्यवर्ती(((std::vector<long>({(long) 3, (long) 1, (long) 2, (long) 4, (long) 5}))) (फ्लोट) >>> मध्यवर्ती((std::vector<long>({(long) -10, (long) 4, (long) 6, (long) 1000, (long) 10, (long) 20}))) (15.0f)
float median(std::vector<long> l) {
","float median(std::vector<long> l) {
    std::sort(l.begin(), l.end());
    size_t n = l.size();
    
    if (n % 2 == 1) {
        return static_cast<float>(l[n / 2]);
    } else {
        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;
    }
}","}
int main() {
    auto candidate = median;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));
    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));
    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));
    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));
    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));
}
"
HumanEval/48,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// जांचता हवय कि काय दिए गए स्ट्रिंग एक पालिंड्रोम हवय >>> is_palindrome ((("""")) (सही) >>> is_palindrome (((""aba"")) (सही) >>> is_palindrome (((""aaaaa"")) (सही) >>> is_palindrome (((""zbcd"")) (झूठा)
bool is_palindrome(std::string text) {
","bool is_palindrome(std::string text) {
    return std::equal(text.begin(), text.begin() + text.size() / 2, text.rbegin());
}","}
int main() {
    auto candidate = is_palindrome;
    assert(candidate(("""")) == (true));
    assert(candidate((""aba"")) == (true));
    assert(candidate((""aaaaa"")) == (true));
    assert(candidate((""zbcd"")) == (false));
    assert(candidate((""xywyx"")) == (true));
    assert(candidate((""xywyz"")) == (false));
    assert(candidate((""xywzx"")) == (false));
}
"
HumanEval/49,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वापसी 2 ^ n मॉडुलो पी (संख्याओं के बारे में जागरूक रहें) । >>> modp ((((3), (5)) (3) >>> modp (((1101), (101)) (2) >>> modp (((0), (101)) (1) >>> modp (((3), (11)) (8) >>> modp (((100), (101)) (1)
long modp(long n, long p) {
","long modp(long n, long p) {
    return std::pow(2, n) % p;
}","}
int main() {
    auto candidate = modp;
    assert(candidate((3), (5)) == (3));
    assert(candidate((1101), (101)) == (2));
    assert(candidate((0), (101)) == (1));
    assert(candidate((3), (11)) == (8));
    assert(candidate((100), (101)) == (1));
    assert(candidate((30), (5)) == (4));
    assert(candidate((31), (5)) == (3));
}
"
HumanEval/51,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// remove_vowels एक फ़ंक्शन हवय जेहर स्ट्रिंग ल लेता हवय अउ बिना स्वर के स्ट्रिंग ल वापस करत हवय। >>> remove_vowels ((("""")) ("""") >>> remove_vowels (((""abcdef"")) (""bcdf"") >>> remove_vowels (((""aaaaa"")) ("""") >>> remove_vowels (((""aaBAA"")) (""बी"") >>> remove_vowels (((""zbcd"")) (""zbcd"")
std::string remove_vowels(std::string text) {
","std::string remove_vowels(std::string text) {
    std::string result;
    std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
    
    for (char ch : text) {
        if (vowels.find(ch) == vowels.end()) {
            result += ch;
        }
    }
    
    return result;
}","}
int main() {
    auto candidate = remove_vowels;
    assert(candidate(("""")) == (""""));
    assert(candidate((""abcdef\nghijklm"")) == (""bcdf\nghjklm""));
    assert(candidate((""fedcba"")) == (""fdcb""));
    assert(candidate((""eeeee"")) == (""""));
    assert(candidate((""acBAA"")) == (""cB""));
    assert(candidate((""EcBOO"")) == (""cB""));
    assert(candidate((""ybcd"")) == (""ybcd""));
}
"
HumanEval/52,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सही लौटाएं यदि वेक्टर में जम्मो संख्याएं थ्रेसहोल्ड टी के नीचे हंवय । >>> below_threshold(((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 10})), (100)) (सही) >>> below_threshold((std::vector<long>({(long) 1, (long) 20, (long) 4, (long) 10})), (5)) (गलत)
bool below_threshold(std::vector<long> l, long t) {
","bool below_threshold(std::vector<long> l, long t) {
    return std::all_of(l.begin(), l.end(), [t](long num) { return num < t; });
}","}
int main() {
    auto candidate = below_threshold;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));
}
"
HumanEval/53,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो संख्याओं के जोड़ें x अउ y >>> जोड़ें (), (3)) (5) >>> जोड़ें (), (7)) (12)
long add(long x, long y) {
","long add(long x, long y) {
    return x + y;
}","}
int main() {
    auto candidate = add;
    assert(candidate((0), (1)) == (1));
    assert(candidate((1), (0)) == (1));
    assert(candidate((2), (3)) == (5));
    assert(candidate((5), (7)) == (12));
    assert(candidate((7), (5)) == (12));
}
"
HumanEval/54,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// जांचें कि क्या दो शब्दों में समान वर्ण हैं। >>> same_chars((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) (सही) >>> same_chars((""abcd""), (""dddddddabc"")) (सही) >>> same_chars(""dddddddabc""), (""abcd"") (सही) >>> same_chars((""eabcd""), (""dddddddabc"")) (गलत) >>> same_chars >>>""((abcd""), (""dddddddabce"") (गलत) >>> same_chars((""eabcd""), (""ddddzzzzzdzddddabc"") (गलत)
bool same_chars(std::string s0, std::string s1) {
","bool same_chars(std::string s0, std::string s1) {
    std::unordered_set<char> set0(s0.begin(), s0.end());
    std::unordered_set<char> set1(s1.begin(), s1.end());
    return set0 == set1;
}","}
int main() {
    auto candidate = same_chars;
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddeddabc"")) == (true));
    assert(candidate((""abcd""), (""dddddddabc"")) == (true));
    assert(candidate((""dddddddabc""), (""abcd"")) == (true));
    assert(candidate((""eabcd""), (""dddddddabc"")) == (false));
    assert(candidate((""abcd""), (""dddddddabcf"")) == (false));
    assert(candidate((""eabcdzzzz""), (""dddzzzzzzzddddabc"")) == (false));
    assert(candidate((""aabb""), (""aaccc"")) == (false));
}
"
HumanEval/55,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एन-थ फिबोनाची संख्या ल लौटाएं। >>> फाइब ({10}) (55) >>> फाइब ({1}) (1) >>> फाइब ({8}) (21)
long fib(long n) {
","long fib(long n) {
    if (n <= 1) return n;
    
    long a = 0, b = 1, c;
    for (long i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    
    return b;
}","}
int main() {
    auto candidate = fib;
    assert(candidate((10)) == (55));
    assert(candidate((1)) == (1));
    assert(candidate((8)) == (21));
    assert(candidate((11)) == (89));
    assert(candidate((12)) == (144));
}
"
HumanEval/56,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ब्रैकेट ""<"" अउ "">"" के स्ट्रिंग हवय। यदि प्रत्येक ओपनिंग ब्रैकेट में एक संबंधित क्लोजिंग ब्रैकेट हवय तो सही ल लौटाएं। >>> सही_ब्रेकेटिंग ({""}) (झूठा) >>> सही_ब्रेकेटिंग ({""}) (झूठा) >>> सही_ब्रेकेटिंग ({""}) (सही) >>> सही_ब्रेकेटिंग ({""}) (<>) (सही) >>> सही_ब्रेकेटिंग ({""}) ({""}) (झूठा)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '<') balance++;
        else if (ch == '>') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""<>"")) == (true));
    assert(candidate((""<<><>>"")) == (true));
    assert(candidate((""<><><<><>><>"")) == (true));
    assert(candidate((""<><><<<><><>><>><<><><<>>>"")) == (true));
    assert(candidate((""<<<><>>>>"")) == (false));
    assert(candidate((""><<>"")) == (false));
    assert(candidate((""<"")) == (false));
    assert(candidate((""<<<<"")) == (false));
    assert(candidate(("">"")) == (false));
    assert(candidate((""<<>"")) == (false));
    assert(candidate((""<><><<><>><>><<>"")) == (false));
    assert(candidate((""<><><<><>><>>><>"")) == (false));
}
"
HumanEval/57,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// वापसी सत्य हवय यदि वेक्टर तत्व मन मोनोटोनिक रूप ले बढ़त या घटत हंवय । >>> मोनोटोनिक ((((std::vector<long>({(long) 1, (long) 2, (long) 4, (long) 20}))) (सही) >>> मोनोटोनिक ((((std::vector<long>{(long) 1, (long) 20, (long) 4, (long) 10}))) (गलत) >>> मोनोटोनिक ((((std::vector<long>{(long) 4, (long) 1, (long) 0, (long) -10}))) (सही)
bool monotonic(std::vector<long> l) {
","bool monotonic(std::vector<long> l) {
    bool increasing = true, decreasing = true;
    
    for (size_t i = 1; i < l.size(); i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
    }
    
    return increasing || decreasing;
}","}
int main() {
    auto candidate = monotonic;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));
    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));
}
"
HumanEval/58,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो वैक्टर बर सॉर्ट करे गए अद्वितीय सामान्य तत्व ल लौटाएं। >>> सामान्य (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर), (सेंटः वेक्टर) ।
std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
","std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {
    std::unordered_set<long> set1(l1.begin(), l1.end());
    std::unordered_set<long> result_set;
    
    for (long num : l2) {
        if (set1.count(num)) {
            result_set.insert(num);
        }
    }
    
    std::vector<long> result(result_set.begin(), result_set.end());
    std::sort(result.begin(), result.end());
    return result;
}","}
int main() {
    auto candidate = common;
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));
    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));
}
"
HumanEval/59,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एन के सबले बडखा प्राइम फैक्टर ल वापस कर दिस। एन > 1 मान लें अउ प्राइम नी हवय। >>> सबले बडखा_प्राइम_फैक्टर (((13195)) (29) >>> सबले बडखा_प्राइम_फैक्टर (((2048)) (2)
long largest_prime_factor(long n) {
","long largest_prime_factor(long n) {
    long largest = -1;
    
    while (n % 2 == 0) {
        largest = 2;
        n /= 2;
    }
    
    for (long i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            largest = i;
            n /= i;
        }
    }
    
    if (n > 1) largest = n;
    
    return largest;
}","}
int main() {
    auto candidate = largest_prime_factor;
    assert(candidate((15)) == (5));
    assert(candidate((27)) == (3));
    assert(candidate((63)) == (7));
    assert(candidate((330)) == (11));
    assert(candidate((13195)) == (29));
}
"
HumanEval/60,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// sum_to_n एक फ़ंक्शन हवय जेहर 1 ले n तक के संख्यामन के योग हवय। >>> sum_to_n((30)) (465) >>> sum_to_n(100)) (5050) >>> sum_to_n((5)) (15) >>> sum_to_n(10)) (55) >>> sum_to_n(1)) (1)
long sum_to_n(long n) {
","long sum_to_n(long n) {
    return n * (n + 1) / 2;
}","}
int main() {
    auto candidate = sum_to_n;
    assert(candidate((1)) == (1));
    assert(candidate((6)) == (21));
    assert(candidate((11)) == (66));
    assert(candidate((30)) == (465));
    assert(candidate((100)) == (5050));
}
"
HumanEval/61,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ब्रैकेट एक स्ट्रिंग हवय ""("" अउ """"। यदि प्रत्येक ओपनिंग ब्रैकेट में एक संबंधित क्लोजिंग ब्रैकेट हवय तो सच लौटाएं। >>> सही_ब्रेकेटिंग (("")) (गलत) >>> सही_ब्रेकेटिंग (("")) (सही) >>> सही_ब्रेकेटिंग (("")))) (सही) >>> सही_ब्रेकेटिंग (("") (गलत)
bool correct_bracketing(std::string brackets) {
","bool correct_bracketing(std::string brackets) {
    int balance = 0;
    for (char ch : brackets) {
        if (ch == '(') balance++;
        else if (ch == ')') balance--;
        if (balance < 0) return false;
    }
    return balance == 0;
}","}
int main() {
    auto candidate = correct_bracketing;
    assert(candidate((""()"")) == (true));
    assert(candidate((""(()())"")) == (true));
    assert(candidate((""()()(()())()"")) == (true));
    assert(candidate((""()()((()()())())(()()(()))"")) == (true));
    assert(candidate((""((()())))"")) == (false));
    assert(candidate(("")(()"")) == (false));
    assert(candidate((""("")) == (false));
    assert(candidate((""(((("")) == (false));
    assert(candidate(("")"")) == (false));
    assert(candidate((""(()"")) == (false));
    assert(candidate((""()()(()())())(()"")) == (false));
    assert(candidate((""()()(()())()))()"")) == (false));
}
"
HumanEval/62,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक्स एक बहुपद के गुणांक के प्रतिनिधित्व करत हवय। एक्सएस [0] + एक्सएस [1] * एक्स + एक्सएस [2] * एक्स ^ 2 + .... ए बहुपद के व्युत्पन्न ल उसी रूप में लौटाएं। >>> व्युत्पन्न: एसटीडीः वेक्टर <लंबी> <लंबी> 3, (लंबी) 1, (लंबी) 2, (लंबी) 4, (लंबी) 5}))) (एसटीडीः वेक्टर <लंबी> <लंबी) 1, (लंबी) 4, (लंबी) 12, (लंबी) 20})) >>> व्युत्पन्नः एसटीडीः वेक्टर <लंबी> <लंबी) 1, (लंबी) 2, (लंबी) 3}))) (एसटीडीः वेक्टर <लंबी> <लंबी) 6))
std::vector<long> derivative(std::vector<long> xs) {
","std::vector<long> derivative(std::vector<long> xs) {
    std::vector<long> result;
    for (size_t i = 1; i < xs.size(); i++) {
        result.push_back(xs[i] * i);
    }
    return result;
}","}
int main() {
    auto candidate = derivative;
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));
    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));
}
"
HumanEval/63,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फिबफिब नंबर अनुक्रम फिबोनैकी अनुक्रम के समान एक अनुक्रम हवय जेला निम्नानुसार परिभाषित करे गए हवय: फाइबफिब (०) == 0 फाइबफिब (०) == 0 फाइबफिब (१) == 0 फाइबफिब (२) == 1 फाइबफिब (एन) == फाइबफिब (एन -1) + फाइबफिब (एन -2) + फाइबफिब (एन -3) । कृपया फाइबफिब नंबर अनुक्रम के एन-वें तत्व के कुशलतापूर्वक गणना करे बर एक फ़ंक्शन लिखें। >>> फाइबफिब (एन -1)) (0) >>> फाइबफिब (एन -5)) (4) >>> फाइबफिब (एन -8)) (24)
long fibfib(long n) {
","long fibfib(long n) {
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;

    std::vector<long> dp(n + 1, 0);
    dp[2] = 1;

    for (long i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
    }

    return dp[n];
}","}
int main() {
    auto candidate = fibfib;
    assert(candidate((2)) == (1));
    assert(candidate((1)) == (0));
    assert(candidate((5)) == (4));
    assert(candidate((8)) == (24));
    assert(candidate((10)) == (81));
    assert(candidate((12)) == (274));
    assert(candidate((14)) == (927));
}
"
HumanEval/64,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जो इनपुट के रूप में एक शब्द का प्रतिनिधित्व करे वाली स्ट्रिंग लेता है और स्ट्रिंग में स्वरों की संख्या लौटाता है। इस मामले में स्वर 'ए', 'ई', 'आई', 'ओ', 'यू' हैं। इहां, 'वाई' भी एक स्वर हवय, लेकिन केवल जब एहर दिए गए शब्द के अंत में हवय। उदाहरणः >>> स्वरों की गिनती (((""एबीसीडी"")) (2) >>> स्वरों की गिनती ((""एसीडीवाई"") (3)
long vowels_count(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long vowels_count(std::string s) {
  long count = 0;
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  for (char c : s) {
    if (vowels.count(c)) {
      count++;
    }
  }
  if (!s.empty() && (s.back() == 'y' || s.back() == 'Y')) {
    count++;
  }
  return count;
}","}
int main() {
    auto candidate = vowels_count;
    assert(candidate((""abcde"")) == (2));
    assert(candidate((""Alone"")) == (3));
    assert(candidate((""key"")) == (2));
    assert(candidate((""bye"")) == (1));
    assert(candidate((""keY"")) == (2));
    assert(candidate((""bYe"")) == (1));
    assert(candidate((""ACEDY"")) == (3));
}
"
HumanEval/65,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// परिपत्र पूर्णांक x के अंकों के स्थानांतरित करव, अंकों के दाईं ओर स्थानांतरित करव अउ परिणाम ल स्ट्रिंग के रूप में लौटाएं। यदि स्थानांतरण > अंकों के संख्या, अंकों के उल्टा लौटाएं। >>> circular_shift (((12), (1)) (""21"") >>> circular_shift (((12), (2)) (""12"")
std::string circular_shift(long x, long shift) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string circular_shift(long x, long shift) {
  std::string s = std::to_string(x);
  long n = s.length();
  if (n == 0) {
    return """";
  }
  shift %= n;
  if (shift < 0) {
    shift += n;
  }
  if (shift == 0) {
    return s;
  }
  if (shift > n) {
    std::reverse(s.begin(), s.end());
    return s;
  }
  std::string shifted_s = s.substr(n - shift) + s.substr(0, n - shift);
  return shifted_s;
}","}
int main() {
    auto candidate = circular_shift;
    assert(candidate((100), (2)) == (""001""));
    assert(candidate((12), (2)) == (""12""));
    assert(candidate((97), (8)) == (""79""));
    assert(candidate((12), (1)) == (""21""));
    assert(candidate((11), (101)) == (""11""));
}
"
HumanEval/66,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// कार्य एक फ़ंक्शन लिखें जेहर इनपुट के रूप में स्ट्रिंग लेता हवय अउ केवल ऊपरी वर्णों के योग ल वापस करत हवय 'एएससीआईआई कोड। उदाहरणः >>> digitSum ((("""")) (0) >>> digitSum (((""abAB"")) (131) >>> digitSum (((""abcCd"")) (67) >>> digitSum (((""helloE"")) (69) >>> digitSum (((""woArBld"")) (131) >>> digitSum (((""aAXaaaa"")) (153)
long digitSum(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long digitSum(std::string s) {
  long sum = 0;
  for (char c : s) {
    if (isupper(c)) {
      sum += static_cast<long>(c);
    }
  }
  return sum;
}","}
int main() {
    auto candidate = digitSum;
    assert(candidate(("""")) == (0));
    assert(candidate((""abAB"")) == (131));
    assert(candidate((""abcCd"")) == (67));
    assert(candidate((""helloE"")) == (69));
    assert(candidate((""woArBld"")) == (131));
    assert(candidate((""aAaaaXa"")) == (153));
    assert(candidate(("" How are yOu?"")) == (151));
    assert(candidate((""You arE Very Smart"")) == (327));
}
"
HumanEval/67,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इ कार्य में, आप ल एक स्ट्रिंग दी जाही जो सेब अउ संतरा के संख्या के प्रतिनिधित्व करत हावे जो फल की एक टोकरी में वितरित की जात हावे इ टोकरी में सेब, संतरा अउ आम के फल शामिल हावें। स्ट्रिंग के दिए गिन जो संतरा अउ सेब के कुल संख्या का प्रतिनिधित्व करत हावे अउ टोकरी में फल की कुल संख्या का प्रतिनिधित्व करत हावे टोकरी में आम के फल की संख्या लौटाओ। उदाहरण बरः >>> फल_वितरण ((((("" 5 सेब अउ 6 संतरा""), (19)) (8) >>> फल_वितरण (((((""0 सेब अउ 1 संतरा""), (3)) (2) >>> फल_वितरण ((((((""2 सेब अउ 3 संतरा""), (100)) (95) >>> फल_वितरण (((""100 सेब अउ 1 संतरा""), (120)) (19)
long fruit_distribution(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long fruit_distribution(std::string s, long n) {
  long apples = 0;
  long oranges = 0;
  size_t apples_pos = s.find(""apples"");
  if (apples_pos != std::string::npos) {
    size_t start = 0;
    while (!isdigit(s[start])) {
      start++;
    }
    apples = std::stoll(s.substr(start, apples_pos - start));
  }
  size_t oranges_pos = s.find(""oranges"");
  if (oranges_pos != std::string::npos) {
    size_t and_pos = s.find(""and"");
    size_t start = and_pos + 3;
    while (!isdigit(s[start])) {
      start++;
    }
    oranges = std::stoll(s.substr(start, oranges_pos - start));
  }
  return n - apples - oranges;
}","}
int main() {
    auto candidate = fruit_distribution;
    assert(candidate((""5 apples and 6 oranges""), (19)) == (8));
    assert(candidate((""5 apples and 6 oranges""), (21)) == (10));
    assert(candidate((""0 apples and 1 oranges""), (3)) == (2));
    assert(candidate((""1 apples and 0 oranges""), (3)) == (2));
    assert(candidate((""2 apples and 3 oranges""), (100)) == (95));
    assert(candidate((""2 apples and 3 oranges""), (5)) == (0));
    assert(candidate((""1 apples and 100 oranges""), (120)) == (19));
}
"
HumanEval/68,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// उदाहरण 1: >>> pluck(((stdvector<(long{(long) {4, (long) {2, (long) {3}))) (stdvector::<(long{{{2, (long) {1})) स्पष्टीकरणः 2 के सबले छोटे मान हवय, अउ 2 के सबले छोटे घलो हवय। उदाहरण 2: >>> pluck{(stdvector::<(long{1, (long{2, (long)) {0, (long{0, (long{0, (long)) {0, (long{0, (long)) {0, (long{0, (long)) {0, (long{0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, (long)) {0, ()) {0, ()) {0, ()) {0, ()) {0, ()) {0, ()) {0, ()) {0, ()) {0, ()) {0, ()) {0,)) {0, ()) {0, ()) {0, ()) {0,)) {0, ()) {0,)) {0, ()) {0,)) {0,)) {0, ()) {0,)) {0,)) {0,)) {0,)) {0, {0, {0,)) {0, {0, {0,}}} ()) {0, {0, {0, {0, {0, {0,}}}}}}}}}} ()) {0, {0, {0, {0, {0, {0, {0, {0, {0, {0,}}}}}}} {0, {0, {0, {0, {0, {0, {0,}}}}}} {0, {0, {0, {0, {0, {0,}}}
std::vector<long> pluck(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> pluck(std::vector<long> arr) {
  if (arr.empty()) {
    return {};
  }
  long min_even = -1;
  long min_index = -1;
  for (long i = 0; i < arr.size(); ++i) {
    if (arr[i] % 2 == 0) {
      if (min_even == -1 || arr[i] < min_even) {
        min_even = arr[i];
        min_index = i;
      }
    }
  }
  if (min_even == -1) {
    return {};
  }
  return {min_even, min_index};
}","}
int main() {
    auto candidate = pluck;
    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));
}
"
HumanEval/69,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके करा सकारात्मक पूर्णांक के एक गैर-खाली वेक्टर दिए गए हवय। सबले बडखा पूर्णांक ल लौटाएं जेहर शून्य ले ज्यादा हवय, अउ पूर्णांक के मूल्य के बराबर या उससे अधिक हवय। एक पूर्णांक के आवृत्ति वेक्टर में प्रकट होए के संख्या हवय। यदि ऐसा कोई मूल्य मौजूद नी हवय, तो -1 लौटाएं। उदाहरणः >>> खोजः{((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
long search(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long search(std::vector<long> lst) {
  std::map<long, long> counts;
  for (long x : lst) {
    counts[x]++;
  }
  long result = -1;
  for (auto const& [value, count] : counts) {
    if (value > 0 && count >= value) {
      result = std::max(result, value);
    }
  }
  return result;
}","}
int main() {
    auto candidate = search;
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));
    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));
    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));
    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));
    assert(candidate((std::vector<long>({(long)10}))) == (-1));
    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));
    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));
    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));
    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));
}
"
HumanEval/70,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के दिए गए वेक्टर, अजीब क्रम में वेक्टर लौटाएं। अजीब सॉर्टिंग, जब आप न्यूनतम मान के साथ शुरू करते हैं, तो शेष पूर्णांक के अधिकतम, फिर न्यूनतम और इतने पर। उदाहरणः >>> अजीब_सॉर्ट_लिस्टः >>> अजीब_सॉर्ट_लिस्टः >>> अजीब_सॉर्ट_लिस्टः >>> अजीब_सॉर्ट_लिस्टः >>> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब_सॉर्ट_लिस्टः >> अजीब
std::vector<long> strange_sort_list(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> strange_sort_list(std::vector<long> lst) {
  if (lst.empty()) {
    return {};
  }
  std::sort(lst.begin(), lst.end());
  std::vector<long> result;
  long left = 0;
  long right = lst.size() - 1;
  bool take_min = true;
  while (left <= right) {
    if (take_min) {
      result.push_back(lst[left++]);
    } else {
      result.push_back(lst[right--]);
    }
    take_min = !take_min;
  }
  return result;
}","}
int main() {
    auto candidate = strange_sort_list;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));
    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));
    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));
}
"
HumanEval/71,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक त्रिकोण के तीन किनारों के लंबाई ल देखते हुए। यदि तीन पक्ष एक वैध त्रिकोण बनाते हावें तो त्रिकोण के क्षेत्र ल 2 दशमलव बिंदुओं तक गोल करिस जाए। अन्यथा -1 लहुटाना तीन पक्ष एक वैध त्रिकोण बनाते हावें जब काखरो भी दो पक्षों का योग तीसरी पक्ष ले अधिक होत हावे। उदाहरणः >>> त्रिकोण_क्षेत्र (((3), (4), (5)) (6.0 एफ) >>> त्रिकोण_क्षेत्र (((1), (2), (10)) (फ्लोट -1))
float triangle_area(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>
float triangle_area(long a, long b, long c) {
  if (a + b <= c || a + c <= b || b + c <= a) {
    return -1.0f;
  }
  double s = static_cast<double>(a + b + c) / 2.0;
  double area = std::sqrt(s * (s - a) * (s - b) * (s - c));
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << area;
  return std::stof(ss.str());
}","}
int main() {
    auto candidate = triangle_area;
    assert(candidate((3), (4), (5)) == (6.0f));
    assert(candidate((1), (2), (10)) == (float(-1)));
    assert(candidate((4), (8), (5)) == (8.18f));
    assert(candidate((2), (2), (2)) == (1.73f));
    assert(candidate((1), (2), (3)) == (float(-1)));
    assert(candidate((10), (5), (7)) == (16.25f));
    assert(candidate((2), (6), (3)) == (float(-1)));
    assert(candidate((1), (1), (1)) == (0.43f));
    assert(candidate((2), (2), (10)) == (float(-1)));
}
"
HumanEval/72,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर सच ल वापस करत हवय यदि ऑब्जेक्ट क्यू उड़ जाही, अउ आने रहिस गलत। ऑब्जेक्ट क्यू उड़ जाही यदि एहर संतुलित हवय (एक पालिंड्रोमिक वेक्टर हवय) अउ एखर तत्वमन के योग अधिकतम संभव वजन के बराबर हवय। उदाहरण: >>> will_it_fly ({}) {} ({}) {} ({}) {} ({}) {} ({}) {} ({}) {} ({}) {) {) {) {) {) {) (} (}) {) (}) {) (} (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) ()) (}) (}) (}) (}) (}) ()) (}) (}) (}) (}) ()) (}) (}) (}) ()) (}) (}) ()) (}) ()) (}) (}) ()) (}) ()) (}) ()) ()) (} (}) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) ()) (
bool will_it_fly(std::vector<long> q, long w) {
","#include<assert.h>
#include<bits/stdc++.h>
bool will_it_fly(std::vector<long> q, long w) {
  std::vector<long> reversed_q = q;
  std::reverse(reversed_q.begin(), reversed_q.end());
  if (q != reversed_q) {
    return false;
  }
  long sum = 0;
  for (long val : q) {
    sum += val;
  }
  return sum <= w;
}","}
int main() {
    auto candidate = will_it_fly;
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));
    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));
    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));
}
"
HumanEval/73,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक वेक्टर दिए गए हवय, वेक्टर पालिंड्रोमिक बनइन बर न्यूनतम तत्वमन के संख्या के पता लगावव। एक पालिंड्रोमिक वेक्टर एक वेक्टर हवय जेला पाछू अउ आघु समान पढ़ा जात हवय। एक बदलाव में, आप एक तत्व के काखरो घलो दूसर तत्व में बदल सकत हंवय। उदाहरण बर: >>> smallest_change(std::vector<long>({long) 1, (long) 2, (long) 3, (long) 5, (long) 4, (long) 7, (long) 9, (long) 6}))) (4) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 1} (1) >>> smallest_change(std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 2, (long) 1)))
long smallest_change(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long smallest_change(std::vector<long> arr) {
  long n = arr.size();
  long changes = 0;
  for (long i = 0; i < n / 2; ++i) {
    if (arr[i] != arr[n - 1 - i]) {
      changes++;
    }
  }
  return changes;
}","}
int main() {
    auto candidate = smallest_change;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
}
"
HumanEval/74,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जो स्ट्रिंग के दो वैक्टरों ल स्वीकार करत हवय अउ वेक्टर ल वापस करत हवय जेमा वेक्टर के जम्मो स्ट्रिंग्स में दूसर वैक्टर के तुलना में कम संख्या हवय। यदि दुनो वैक्टरों में समान संख्या हवय, तो पहला वैक्टर ल वापस कर दिस जाए। उदाहरण >>> कुल_मच ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}), ({}) ({}), ({}), ({}) (}), ({"" (}), (}), (}), (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (}) (} (}) (}) (}) (}) (} (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (}) (} (}) (} (}) (} (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (}) (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (}) (}) (} (}) (}) (}) (} (}) (}) (} (}) (}) (}) (} (}) (} (}) (}) (}) (} (}) (}) (} (}) (}
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {
  long count1 = 0;
  for (const std::string& s : lst1) {
    count1 += s.length();
  }
  long count2 = 0;
  for (const std::string& s : lst2) {
    count2 += s.length();
  }
  if (count1 <= count2) {
    return lst1;
  } else {
    return lst2;
  }
}","}
int main() {
    auto candidate = total_match;
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hi"", (std::string)""hi"", (std::string)""admin"", (std::string)""project""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>({(std::string)""4""})), (std::vector<std::string>({(std::string)""1"", (std::string)""2"", (std::string)""3"", (std::string)""4"", (std::string)""5""}))) == (std::vector<std::string>({(std::string)""4""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""Hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""}))) == (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hi""})));
    assert(candidate((std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})), (std::vector<std::string>({(std::string)""hI"", (std::string)""hi"", (std::string)""hii""}))) == (std::vector<std::string>({(std::string)""hi"", (std::string)""admin""})));
    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)""this""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""this""})), (std::vector<std::string>())) == (std::vector<std::string>()));
}
"
HumanEval/75,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर सच ल वापस करत हवय यदि दिखीस संख्या 3 प्राइम नंबरों के गुणा हवय अउ आने रहिस गलत हवय। जानकार हवय कि (ए) 100 ले कम हवय। उदाहरण: >>> is_multiply_prime((30)) (सही) 30 = 2 * 3 * 5
bool is_multiply_prime(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_multiply_prime(long a) {
  if (a <= 0) {
    return false;
  }
  std::vector<int> primes;
  std::vector<bool> is_prime(100, true);
  is_prime[0] = is_prime[1] = false;
  for (int p = 2; p * p < 100; p++) {
    if (is_prime[p]) {
      for (int i = p * p; i < 100; i += p)
        is_prime[i] = false;
    }
  }
  for (int p = 2; p < 100; p++) {
    if (is_prime[p]) {
      primes.push_back(p);
    }
  }
  int count = 0;
  for (int p1 : primes) {
    if (a % p1 == 0) {
      count++;
      int rem = a / p1;
      for (int p2 : primes) {
        if (rem % p2 == 0) {
          count++;
          int rem2 = rem / p2;
          for (int p3 : primes) {
            if (rem2 == p3) {
              count++;
              if (count == 3) {
                return true;
              }
              count--;
            }
          }
          count--;
        }
      }
      count--;
    }
  }
  return false;
}","}
int main() {
    auto candidate = is_multiply_prime;
    assert(candidate((5)) == (false));
    assert(candidate((30)) == (true));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (false));
    assert(candidate((125)) == (true));
    assert(candidate((105)) == (true));
    assert(candidate((126)) == (false));
    assert(candidate((729)) == (false));
    assert(candidate((891)) == (false));
    assert(candidate((1001)) == (true));
}
"
HumanEval/76,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके काम ए फंक्शन लिखे बर हवय जेहर सच ल वापस करत हवय यदि कोई संख्या एक्स एन के एक सरल शक्ति हवय अउ आने मामलामन में गलत हवय। एक्स एन के एक सरल शक्ति हवय यदि एन ** इन्ट = एक्स उदाहरण बर: >>> ए_ सिंपल_पॉवर ({} 1), (4) (सही) >>> ए_ सिंपल_पॉवर ({} 2), (2) (सही) >>> ए_ सिंपल_पॉवर ({} 8)), (2) (सही) >>> ए_ सिंपल_पॉवर ({} 3), (2) (गलत) >>> ए_ सिंपल_पॉवर ({} 3), (1) (गलत) >>> ए_ सिंपल_पॉवर ({} 5), (3) (गलत)
bool is_simple_power(long x, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_simple_power(long x, long n) {
  if (x == n) return true;
  if (n == 1) return x == 1;
  if (n == 0) return x == 0;
  if (x == 0) return false;
  if (x == 1) return true;
  long power = n;
  while (power < x) {
    if (x % n != 0) return false;
    if (power > x / n) return false;
    power *= n;
  }
  return power == x;
}","}
int main() {
    auto candidate = is_simple_power;
    assert(candidate((16), (2)) == (true));
    assert(candidate((143214), (16)) == (false));
    assert(candidate((4), (2)) == (true));
    assert(candidate((9), (3)) == (true));
    assert(candidate((16), (4)) == (true));
    assert(candidate((24), (2)) == (false));
    assert(candidate((128), (4)) == (false));
    assert(candidate((12), (6)) == (false));
    assert(candidate((1), (1)) == (true));
    assert(candidate((1), (12)) == (true));
}
"
HumanEval/77,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर एक पूर्णांक ए लेता हवय अउ सच ल वापस करत हवय यदि एहर कुछु पूर्णांक संख्या के घन हवय। नोटः आप एहर मान सकत हंवय कि इनपुट हमेशा मान्य होत हवय। उदाहरणः >>> iscube (((1)) (सही) >>> iscube (((2)) (गलत) >>> iscube ((-1)) (सही) >>> iscube (((64)) (सही) >>> iscube (((0)) (सही) >>> iscube (((180)) (गलत)
bool iscube(long a) {
","#include<assert.h>
#include<bits/stdc++.h>
bool iscube(long a) {
  if (a == 0) return true;
  long abs_a = std::abs(a);
  long root = round(std::cbrt(abs_a));
  return root * root * root == abs_a;
}","}
int main() {
    auto candidate = iscube;
    assert(candidate((1)) == (true));
    assert(candidate((2)) == (false));
    assert(candidate((-1)) == (true));
    assert(candidate((64)) == (true));
    assert(candidate((180)) == (false));
    assert(candidate((1000)) == (true));
    assert(candidate((0)) == (true));
    assert(candidate((1729)) == (false));
}
"
HumanEval/78,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक फ़ंक्शन लिखे बर कहे गए हवय जेहर एक हेक्साडेसिमल संख्या के एक स्ट्रिंग के रूप में प्राप्त करत हवय अउ हेक्साडेसिमल अंकों के संख्या के गिनती करत हवय जेहर प्राइम होत हंवय (प्राइम नंबर, या एक प्राइम, 1 ले ज्यादा प्राकृतिक संख्या हवय जेहर दुठन छोटे प्राकृतिक संख्या के उत्पाद नी होए) । हेक्साडेसिमल अंकों के 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ए, बी, सी, डी, ई, एफ होत हंवय । प्राइम संख्या 2, 3, 5, 7, 11, 13, 17,... होत हंवय , एखरबर आप ल निम्नलिखित अंकों के संख्या निर्धारित करना होत हवय: 2, 3, 5, 7, बी (= दशमलव 11), डी (= दशमलव 13) । नोटः आप एहर मान सकत हंवय कि इनपुट हमेशा सही या खाली स्ट्रिंग होत हवय, अउ प्रतीक ए, बी, सी, डी, ई, एफ हमेशा अपरकेस होत हंवय । उदाहरणः >>> हेक्स_((एबी"") (1) >>> हेक्स_(एबी"") >>> हेक्स_(एबी"") >>> हेक्स_एबी)) >>> हेक्स_एबी)) >>>एबी (133))) हेक्स_एबी)) >>>एबी)) >>>एबी (एक्स_ए) >>>एबी)) >>>एबी)) >>>एबी)) >>>एबी)) (एक्सएसीएक्सएएक्सएएक्सएएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्सएक्स
long hex_key(std::string num) {
","#include<assert.h>
#include<bits/stdc++.h>
long hex_key(std::string num) {
  long count = 0;
  std::unordered_set<char> prime_hex = {'2', '3', '5', '7', 'B', 'D'};
  for (char c : num) {
    if (prime_hex.count(c)) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = hex_key;
    assert(candidate((""AB"")) == (1));
    assert(candidate((""1077E"")) == (2));
    assert(candidate((""ABED1A33"")) == (4));
    assert(candidate((""2020"")) == (2));
    assert(candidate((""123456789ABCDEF0"")) == (6));
    assert(candidate((""112233445566778899AABBCCDDEEFF00"")) == (12));
}
"
HumanEval/79,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके करा दशमलव रूप में एक संख्या दी जा रही हवय अउ आपके कार्य एला द्विआधारी प्रारूप में परिवर्तित करना हवय। फ़ंक्शन के एक स्ट्रिंग लौटाए जाना चाहि, प्रत्येक वर्ण एक द्विआधारी संख्या के प्रतिनिधित्व करत हवय। स्ट्रिंग में प्रत्येक वर्ण '0' या '1' होही। स्ट्रिंग के शुरुआत में अउ अंत में वर्णों के एक अतिरिक्त जोड़ी 'db' होही। अतिरिक्त वर्ण प्रारूप के साथ मदद करे बर वहां हंवय। उदाहरणः >>> दशमलव_टू_बाइनरी (((15)) (""db1111db"") >>> दशमलव_टू_बाइनरी (((32)) (""db100000db"")
std::string decimal_to_binary(long decimal) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string decimal_to_binary(long decimal) {
  if (decimal == 0) {
    return ""db0db"";
  }
  std::string binaryString = """";
  long temp = std::abs(decimal);
  while (temp > 0) {
    binaryString = (temp % 2 == 0 ? ""0"" : ""1"") + binaryString;
    temp /= 2;
  }
  return ""db"" + binaryString + ""db"";
}","}
int main() {
    auto candidate = decimal_to_binary;
    assert(candidate((0)) == (""db0db""));
    assert(candidate((32)) == (""db100000db""));
    assert(candidate((103)) == (""db1100111db""));
    assert(candidate((15)) == (""db1111db""));
}
"
HumanEval/80,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक स्ट्रिंग एस दिए जात हवय। आपके काम ए जांचना हवय कि स्ट्रिंग हपपप हवय या नी। एक स्ट्रिंग हपपप हवय यदि एखर लंबाई कम ले कम 3 हवय अउ प्रत्येक 3 लगातार अक्षर अलग हवय उदाहरण बर: >>> is_happy((""a"")) (गलत) >>> is_happy((""aa"")) (गलत) >>> is_happy((""abcd"")) (सही) >>> is_happy((""aabb"")) (गलत) >>> is_happy""adb"")) (सही) >>> is_happy""xyy"") (गलत)
bool is_happy(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_happy(std::string s) {
  if (s.length() < 3) {
    return false;
  }
  for (size_t i = 0; i <= s.length() - 3; ++i) {
    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_happy;
    assert(candidate((""a"")) == (false));
    assert(candidate((""aa"")) == (false));
    assert(candidate((""abcd"")) == (true));
    assert(candidate((""aabb"")) == (false));
    assert(candidate((""adb"")) == (true));
    assert(candidate((""xyy"")) == (false));
    assert(candidate((""iopaxpoi"")) == (true));
    assert(candidate((""iopaxioi"")) == (false));
}
"
HumanEval/81,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ए सेमेस्टर के आखिरी हफ्ता हे अऊ शिक्षक ल छात्र मन ल ग्रेड देना हे। शिक्षक ह ग्रेडिंग बर अपन खुद के एल्गोरिथ्म बनात हे। एक ठन समस्या हे कि, ओ ह ग्रेडिंग बर उपयोग करे गे कोड ल भुलागे हे। ओ ह तोला कुछू छात्र बर जीपीए के वेक्टर देहे हे अऊ तोला एक फंक्शन लिखे बर हे जऊन ह निम्नलिखित तालिका के उपयोग करके अक्षर ग्रेड के वेक्टर ल आउटपुट कर सकथे: जीपीए। अक्षर ग्रेड 4.0 ए+ > 3.7 ए > 3.3 ए- > 3.0 बी+ > 2.7 बी > 2.3 बी- > 2.0 सी+ > 1.7 सी > 1.3 सी- > 1.0 डी+ > 0.7 डी > 0.0 डी- 0.0 ई उदाहरण: >>>_grade_equation((std::vector<float>({(float) 4.0f, (float) 3, (float) 1.7f, (float) 2, (float) 3.5f))) (std:vector<std::std::string>(((std::string> (A+d:string) "" (A-d""string) (C) "" (C) "" (string) "" (C) "")) (string) (string) (C) ""
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {
  std::vector<std::string> letter_grades;
  for (float gpa : grades) {
    if (gpa == 4.0f) {
      letter_grades.push_back(""A+"");
    } else if (gpa > 3.7f) {
      letter_grades.push_back(""A"");
    } else if (gpa > 3.3f) {
      letter_grades.push_back(""A-"");
    } else if (gpa > 3.0f) {
      letter_grades.push_back(""B+"");
    } else if (gpa > 2.7f) {
      letter_grades.push_back(""B"");
    } else if (gpa > 2.3f) {
      letter_grades.push_back(""B-"");
    } else if (gpa > 2.0f) {
      letter_grades.push_back(""C+"");
    } else if (gpa > 1.7f) {
      letter_grades.push_back(""C"");
    } else if (gpa > 1.3f) {
      letter_grades.push_back(""C-"");
    } else if (gpa > 1.0f) {
      letter_grades.push_back(""D+"");
    } else if (gpa > 0.7f) {
      letter_grades.push_back(""D"");
    } else if (gpa > 0.0f) {
      letter_grades.push_back(""D-"");
    } else {
      letter_grades.push_back(""E"");
    }
  }
  return letter_grades;
}","}
int main() {
    auto candidate = numerical_letter_grade;
    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)""A+"", (std::string)""B"", (std::string)""C-"", (std::string)""C"", (std::string)""A-""})));
    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)""D+""})));
    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)""D-""})));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)""E""})));
    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)""D"", (std::string)""D-"", (std::string)""C-"", (std::string)""B"", (std::string)""B+""})));
    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)""E"", (std::string)""D-""})));
}
"
HumanEval/82,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर स्ट्रिंग लेता हवय अउ सच ल वापस करत हवय यदि स्ट्रिंग लंबाई एक प्रमुख संख्या हवय या अन्यथा गलत उदाहरण >>> प्राइम_लेंथ (((""हैलो"")) (सही) >>> प्राइम_लेंथ (((""एबीसीडीसीबीए"")) (सही) >>> प्राइम_लेंथ (((""किट"")) (सही) >>> प्राइम_लेंथ (((""ऑरेंज"")) (गलत)
bool prime_length(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(int n) {
  if (n <= 1) return false;
  for (int i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

bool prime_length(std::string string) {
  return is_prime(string.length());
}","}
int main() {
    auto candidate = prime_length;
    assert(candidate((""Hello"")) == (true));
    assert(candidate((""abcdcba"")) == (true));
    assert(candidate((""kittens"")) == (true));
    assert(candidate((""orange"")) == (false));
    assert(candidate((""wow"")) == (true));
    assert(candidate((""world"")) == (true));
    assert(candidate((""MadaM"")) == (true));
    assert(candidate((""Wow"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""HI"")) == (true));
    assert(candidate((""go"")) == (true));
    assert(candidate((""gogo"")) == (false));
    assert(candidate((""aaaaaaaaaaaaaaa"")) == (false));
    assert(candidate((""Madam"")) == (true));
    assert(candidate((""M"")) == (false));
    assert(candidate((""0"")) == (false));
}
"
HumanEval/83,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक एन दिए गए, एन-डिजिट सकारात्मक पूर्णांक के संख्या के गिनती ल वापस करत हवय जेहर 1 के साथ शुरू या समाप्त होत हवय।
long starts_one_ends(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long starts_one_ends(long n) {
  if (n <= 0) {
    return 0;
  }
  if (n == 1) {
    return 1;
  }
  long starts_with_one = std::pow(10, n - 1);
  long ends_with_one = std::pow(10, n - 1);
  long starts_and_ends_with_one = std::pow(10, n - 2);
  return starts_with_one + ends_with_one - starts_and_ends_with_one;
}","}
int main() {
    auto candidate = starts_one_ends;
    assert(candidate((1)) == (1));
    assert(candidate((2)) == (18));
    assert(candidate((3)) == (180));
    assert(candidate((4)) == (1800));
    assert(candidate((5)) == (18000));
}
"
HumanEval/84,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक एन दिए गए, बाइनरी में अपन अंकों के कुल योग ल लौटाएं। उदाहरण >>> solve((1000)) (""1"") >>> solve((150)) (""110"") >>> solve((147)) (""1100"") चरः @ एन पूर्णांक बाधाओंः 0 ≤ एन ≤ 10000। आउटपुटः बाइनरी संख्या के एक स्ट्रिंग
std::string solve(long N) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string solve(long N) {
  if (N < 0 || N > 10000) {
    return """"; // Or handle invalid input as needed
  }
  long sum = 0;
  std::string s = std::to_string(N);
  for (char c : s) {
    sum += c - '0';
  }
  if (sum == 0) {
    return ""0"";
  }
  std::string binary_sum = """";
  while (sum > 0) {
    binary_sum = (sum % 2 == 0 ? ""0"" : ""1"") + binary_sum;
    sum /= 2;
  }
  return binary_sum;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((1000)) == (""1""));
    assert(candidate((150)) == (""110""));
    assert(candidate((147)) == (""1100""));
    assert(candidate((333)) == (""1001""));
    assert(candidate((963)) == (""10010""));
}
"
HumanEval/85,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक गैर-खाली वेक्टर दिए गए उदाहरणों के साथ, विषम सूचकांकों में सम तत्वों के जोड़ें। उदाहरणः >>> add((std:: vector<long>({(long) 4, (long) 2, (long) 6, (long) 7}))) (2)
long add(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long add(std::vector<long> lst) {
  long sum = 0;
  for (long i = 1; i < lst.size(); i += 2) {
    if (lst[i] % 2 == 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add;
    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));
    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));
    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));
}
"
HumanEval/86,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर एक स्ट्रिंग लेता हवय अउ एखर एक आदेशित संस्करण ल वापस करत हवय। स्ट्रिंग के आदेशित संस्करण, एक स्ट्रिंग हवय जहां जम्मो शब्द (स्पेस द्वारा अलग) एक नवा शब्द द्वारा प्रतिस्थापित करे जात हवय जहां जम्मो वर्णों ल एएससीआई मूल्य के आधार म आरोही क्रम में व्यवस्थित करे जात हवय। नोट: आप ल वाक्य में शब्द अउ रिक्त स्थान के क्रम रखना चाहि। उदाहरण बर: >>> एंटी_शफ्लू ((""हाय"")) (""हाय"") >>> एंटी_शफ्लू ((""हैलो"")) (""हेल्लो"") >>> एंटी_शफ्लू (((हैलो वर्ल्ड!
std::string anti_shuffle(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string anti_shuffle(std::string s) {
  std::string result = """";
  std::string current_word = """";
  for (char c : s) {
    if (c == ' ') {
      std::sort(current_word.begin(), current_word.end());
      result += current_word;
      result += c;
      current_word = """";
    } else {
      current_word += c;
    }
  }
  std::sort(current_word.begin(), current_word.end());
  result += current_word;
  return result;
}","}
int main() {
    auto candidate = anti_shuffle;
    assert(candidate((""Hi"")) == (""Hi""));
    assert(candidate((""hello"")) == (""ehllo""));
    assert(candidate((""number"")) == (""bemnru""));
    assert(candidate((""abcd"")) == (""abcd""));
    assert(candidate((""Hello World!!!"")) == (""Hello !!!Wdlor""));
    assert(candidate(("""")) == (""""));
    assert(candidate((""Hi. My name is Mister Robot. How are you?"")) == ("".Hi My aemn is Meirst .Rboot How aer ?ouy""));
}
"
HumanEval/87,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप एक 2 आयामी डेटा, एक नेस्टेड वैक्टर के रूप में दिए जात हवय, जेहर मैट्रिक्स के समान हवय, हालांकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में कईठन कॉलम हो सकत हंवय । दिए गए lst, अउ पूर्णांक x, वेक्टर में पूर्णांक एक्स ढूंढें, अउ ट्यूपल्स के रिटर्न वैक्टर, [(x1, y1), (x2, y2) ...] ए तरह कि प्रत्येक ट्यूपल एक निर्देशांक हवय - (पंक्ति, कॉलम), 0 ले शुरू होत हवय। क्रमबद्ध निर्देशांक शुरुआत में पंक्तियों के क्रम में क्रमबद्ध करें। साथ ही, पंक्ति के निर्देशांक ल अवरोही क्रम में क्रमबद्ध करें। उदाहरणः >>> get_row{(std::vector<std::vector<std::vector}, हालांकि, प्रत्येक पंक्ति में कईठन कॉलम हो सकत हंवय । उदाहरणः (long{{}, long{}, long{}, long{}, long{}, long{}, long{}, long{}, long{long}, long{long}, long{long}, long{long}, long{long}, long{long}, long{long}, long{long}, long{long}long}long}long}long}long {long}long}long}long}long {long}long}long}long}long {long}long}long}long {long}long}long}long {long}long}long}long {long}long}long}long {long}long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long {long}long}long}long {long}long}long {long}long}long {long}long}long}long {long}long}long}long {long}long {long}long}long
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {
  std::vector<std::tuple<long, long>> coordinates;
  for (long i = 0; i < lst.size(); ++i) {
    std::vector<std::pair<long, long>> row_coords;
    for (long j = 0; j < lst[i].size(); ++j) {
      if (lst[i][j] == x) {
        row_coords.push_back({j, i});
      }
    }
    std::sort(row_coords.rbegin(), row_coords.rend());
    for (const auto& coord_pair : row_coords) {
      coordinates.emplace_back(coord_pair.second, coord_pair.first);
    }
  }
  return coordinates;
}","}
int main() {
    auto candidate = get_row;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));
    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));
}
"
HumanEval/88,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// यदि योग (पहला इंडेक्स मूल्य, आखिरी इंडेक्स मूल्य) विषम हवय, तो आप दिए गए वेक्टर के एक कॉकपी ल सॉर्ट करहू, या यदि योग (पहला इंडेक्स मूल्य, आखिरी इंडेक्स मूल्य) विषम हवय, तो एला अवरोही क्रम में सॉर्ट करहू। नोटः * दिए गए वेक्टर ल न बदलें। उदाहरणः >>> sort_array (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long))
std::vector<long> sort_array(std::vector<long> array) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> sort_array(std::vector<long> array) {
  std::vector<long> sorted_array = array;
  if (sorted_array.empty()) {
    return sorted_array;
  }
  long first = 0;
  long last = sorted_array.size() - 1;
  if ((first + last) % 2 != 0) {
    std::sort(sorted_array.begin(), sorted_array.end());
  } else {
    std::sort(sorted_array.rbegin(), sorted_array.rend());
  }
  return sorted_array;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));
    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));
    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));
    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));
}
"
HumanEval/89,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन एन्क्रिप्ट बनाएँ जो एक स्ट्रिंग ल तर्क के रूप म लेता हवय अउ वर्णमाला ल घुमाए के साथ एक स्ट्रिंग एन्क्रिप्टेड ल वापस करत हवय। वर्णमाला ल ए तरह घुमाया जाना चाहि कि अक्षरों ल दो स्थानों म गुणा करके नीचे ले जाया जाए। उदाहरण बर: >>> एन्क्रिप्ट (((""hi"")) (""lm"") >>> एन्क्रिप्ट (((""asdfghjkl"")) (""ewhjklnop"") >>> एन्क्रिप्ट (((""gf"")) (""kj"") >>> एन्क्रिप्ट (((""et"")) (""ix"")
std::string encrypt(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encrypt(std::string s) {
  std::string encrypted_s = """";
  int shift = 2 * 2;
  for (char c : s) {
    if (isalpha(c)) {
      char base = islower(c) ? 'a' : 'A';
      encrypted_s += static_cast<char>((c - base + shift) % 26 + base);
    } else {
      encrypted_s += c;
    }
  }
  return encrypted_s;
}","}
int main() {
    auto candidate = encrypt;
    assert(candidate((""hi"")) == (""lm""));
    assert(candidate((""asdfghjkl"")) == (""ewhjklnop""));
    assert(candidate((""gf"")) == (""kj""));
    assert(candidate((""et"")) == (""ix""));
    assert(candidate((""faewfawefaewg"")) == (""jeiajeaijeiak""));
    assert(candidate((""hellomyfriend"")) == (""lippsqcjvmirh""));
    assert(candidate((""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")) == (""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""));
    assert(candidate((""a"")) == (""e""));
}
"
HumanEval/90,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल पूर्णांक के एक वेक्टर दिए जात हवय। एक फ़ंक्शन लिखें next_smallest () जेहर वेक्टर के दूसर सबले छोटे तत्व ल वापस करत हवय। यदि ए तरह के कोई तत्व नी हवय तो कोई घलो ल वापस नी करव। >>> next_smallest () std::vector<long>{long) 1, (long) 2, (long) 3, (long) 4, (long) 5}))) 2 >>> next_smallest () std::vector<long>{long) 5, (long) 1, (long) 4, (long) 3, (long) 2} >>> 2 next_smallest () std::vector<long>(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::optional<long> next_smallest(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> next_smallest(std::vector<long> lst) {
  if (lst.size() < 2) {
    return std::nullopt;
  }
  std::sort(lst.begin(), lst.end());
  if (lst[0] == lst[1]) {
    return std::nullopt;
  }
  return lst[1];
}","}
int main() {
    auto candidate = next_smallest;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);
    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);
    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);
    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);
}
"
HumanEval/91,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल सब्द के एक स्ट्रिंग दिस जाही, अऊ आप के काम बोरडॉम के संख्या के गनती करना हे। एक बोरडॉम एक वाक्य हे जऊन ""मैं"" शब्द ले सुरू होथे। वाक्य '.', '?' या '! ' ले अलग-अलग होथे। उदाहरण बर: >>> is_bored((""हैलो वर्ल्ड"")) (0) >>> is_bored((""आकाश नीला हे। सूरज चमकत हे। मोला ए मौसम पसंद हे"")) (1)
long is_bored(std::string S) {
","#include<assert.h>
#include<bits/stdc++.h>
long is_bored(std::string S) {
  long boredom_count = 0;
  std::string current_sentence = """";
  for (char c : S) {
    current_sentence += c;
    if (c == '.' || c == '?' || c == '!') {
      std::stringstream ss(current_sentence);
      std::string first_word;
      ss >> first_word;
      if (first_word == ""I"") {
        boredom_count++;
      }
      current_sentence = """";
    }
  }
  return boredom_count;
}","}
int main() {
    auto candidate = is_bored;
    assert(candidate((""Hello world"")) == (0));
    assert(candidate((""Is the sky blue?"")) == (0));
    assert(candidate((""I love It !"")) == (1));
    assert(candidate((""bIt"")) == (0));
    assert(candidate((""I feel good today. I will be productive. will kill It"")) == (2));
    assert(candidate((""You and I are going for a walk"")) == (0));
}
"
HumanEval/92,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनाएँ जो 3 संख्याओं ल लेता हवय। यदि संख्याओं में ले एक अन्य दो के योग के बराबर हवय, तो सही लौटाता हवय, अउ जम्मो संख्याएं पूर्णांक होत हवय। अन्य मामलो में गलत लौटाता हवय। उदाहरण >>> any_int (float) (float) (float) (float) (float) (float)) (सही) >>> any_int (float) (float) (float) (float) (float) (float)) (सही) >>> any_int (float) (float) (float) (float) (float)) (सही) >>> any_int (float) (float) (float) (float) (float) (float) (float) (float)) (सही) >>> any_int (float) (float) (float) (float)) (सही) (सही) >>> any_int (float) (float) (float) (float) (float) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही) (सही)
bool any_int(float x, float y, float z) {
","#include<assert.h>
#include<bits/stdc++.h>
bool any_int(float x, float y, float z) {
  if (std::floor(x) != x || std::floor(y) != y || std::floor(z) != z) {
    return false;
  }
  long ix = static_cast<long>(x);
  long iy = static_cast<long>(y);
  long iz = static_cast<long>(z);
  return (ix == iy + iz) || (iy == ix + iz) || (iz == ix + iy);
}","}
int main() {
    auto candidate = any_int;
    assert(candidate((float(2)), (float(3)), (float(1))) == (true));
    assert(candidate((2.5f), (float(2)), (float(3))) == (false));
    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));
    assert(candidate((float(2)), (float(6)), (float(2))) == (false));
    assert(candidate((float(4)), (float(2)), (float(2))) == (true));
    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));
    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));
    assert(candidate((float(2)), (float(1)), (float(1))) == (true));
    assert(candidate((float(3)), (float(4)), (float(7))) == (true));
    assert(candidate((3.0f), (float(4)), (float(7))) == (false));
}
"
HumanEval/93,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जो एक संदेश लेता है, और इस तरह से एन्कोड करता है कि यह सभी अक्षरों के केस को बदल देता है, संदेश में सभी स्वरों को अंग्रेजी वर्णमाला में उस स्वर के 2 स्थानों के आगे दिखाई देने वाले अक्षर के साथ बदल देता है। केवल अक्षरों को मान लें। उदाहरणः >>> encode((""test"")) (""टीजीएसटी"") >>> encode((""यह एक संदेश है"")) (""tHKS KS C MGSSCGG"")
std::string encode(std::string message) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string encode(std::string message) {
  std::string encoded_message = """";
  std::unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
  std::map<char, char> vowel_map = {
      {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'},
      {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}};
  for (char c : message) {
    if (isalpha(c)) {
      char swapped_case = islower(c) ? toupper(c) : tolower(c);
      if (vowels.count(c)) {
        encoded_message += vowel_map[c];
      } else {
        encoded_message += swapped_case;
      }
    } else {
      encoded_message += c;
    }
  }
  return encoded_message;
}","}
int main() {
    auto candidate = encode;
    assert(candidate((""TEST"")) == (""tgst""));
    assert(candidate((""Mudasir"")) == (""mWDCSKR""));
    assert(candidate((""YES"")) == (""ygs""));
    assert(candidate((""This is a message"")) == (""tHKS KS C MGSSCGG""));
    assert(candidate((""I DoNt KnOw WhAt tO WrItE"")) == (""k dQnT kNqW wHcT Tq wRkTg""));
}
"
HumanEval/94,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप पूर्णांक के एक वेक्टर दिए गए हावें। आप ल सबले बडखा प्राइम मान ढूंढना चाहि अउ एखर अंकों के योग ल वापस करना चाहि। उदाहरणः >>> skjkasdkd((std:: vector<long>((long) 0, (long) 3, (long) 2, (long) 1, (long) 3, (long) 3, (long) 4, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) 3, (long) (long) (long) 3, (long) (long) (long) 3, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long)
long skjkasdkd(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

long sum_digits(long n) {
  long sum = 0;
  std::string s = std::to_string(n);
  for (char c : s) {
    sum += c - '0';
  }
  return sum;
}

long skjkasdkd(std::vector<long> lst) {
  long largest_prime = -1;
  for (long num : lst) {
    if (num > largest_prime && is_prime(num)) {
      largest_prime = num;
    }
  }
  if (largest_prime == -1) {
    return 0;
  }
  return sum_digits(largest_prime);
}","}
int main() {
    auto candidate = skjkasdkd;
    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));
    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));
    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));
    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)8191}))) == (19));
    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));
    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));
}
"
HumanEval/95,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// मानचित्र दिए गए, यदि जम्मो कुंजी छोटे अक्षर म स्ट्रिंग्स हंवय या जम्मो कुंजी बड़े अक्षर म स्ट्रिंग्स हंवय, तो सही ल लौटाएं, अन्यथा गलत ल लौटाएं। फ़ंक्शन ल गलत लौटाए जाना चाहि यदि दिए गए मानचित्र खाली हवय। उदाहरणः >>> चेक_डिक्ट_केस
bool check_dict_case(std::map<std::string,std::string> dict) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_dict_case(std::map<std::string,std::string> dict) {
  if (dict.empty()) {
    return false;
  }
  bool first_key_lower = false;
  bool first_key_upper = false;
  auto it = dict.begin();
  if (!it->first.empty() && islower(it->first[0])) {
    first_key_lower = true;
  } else if (!it->first.empty() && isupper(it->first[0])) {
    first_key_upper = true;
  } else {
    return false;
  }
  for (const auto& pair : dict) {
    if (pair.first.empty()) {
      return false;
    }
    bool current_lower = true;
    bool current_upper = true;
    for (char c : pair.first) {
      if (!islower(c)) {
        current_lower = false;
      }
      if (!isupper(c)) {
        current_upper = false;
      }
    }
    if (first_key_lower && !current_lower) {
      return false;
    }
    if (first_key_upper && !current_upper) {
      return false;
    }
    if (!first_key_lower && !first_key_upper) {
        if (current_lower) first_key_lower = true;
        else if (current_upper) first_key_upper = true;
        else return false;
    }
  }
  return first_key_lower || first_key_upper;
}","}
int main() {
    auto candidate = check_dict_case;
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""b"", ""banana""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""A"", ""banana""}, {""B"", ""banana""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""p"", ""pineapple""}, {""5"", ""banana""}, {""a"", ""apple""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""Name"", ""John""}, {""Age"", ""36""}, {""City"", ""Houston""}}))) == (false));
    assert(candidate((std::map<std::string,std::string>({{""STATE"", ""NC""}, {""ZIP"", ""12345""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>({{""fruit"", ""Orange""}, {""taste"", ""Sweet""}}))) == (true));
    assert(candidate((std::map<std::string,std::string>())) == (false));
}
"
HumanEval/96,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लागू करव जेहर एक गैर-नकारात्मक पूर्णांक लेता हवय अउ पहीली एन पूर्णांक के एक वेक्टर ल वापस करत हवय जेहर प्राइम नंबर अउ एन ले कम हंवय। उदाहरण बर: >>> गिनती तक (} 5) (सेंटीः वेक्टर <लंबे> (} 2) (लंबे) 3}) >>> गिनती तक (} 11) (सेंटीः वेक्टर <लंबे> (} 2) (लंबे) 3, (लंबे) 5, (लंबे) 7)) >>> गिनती तक (} 20) (सेंटीः वेक्टर <लंबे) 2, (} 3, (} 5, (} 7, (} 11, (} 11, (} 13, (} 17, ()) >>> गिनती तक (} 1) (सेंटीः वेक्टर <लंबे) 8, (} 1 > (} 3, (} 11, (} 5, (} 1)) (सेंटीः वेक्टर <लंबे) 3, (} 17, (} (} (}) (लंबे) 5, ()) (सेंटीः वेक्टर <लंबे) 1 (} (} 8, (} (} (}) (} (} (} (} (} (}) (} (} (} (} (} (} (} (} (}) (} (} (} (}) (} (} (}) (} (} (} ()) (} (} (} (} (} (}) (} (} (}) (} (} (}) (} (} (}) (} (}) (} (} (}) (} (}) (} (}) (} (} (} (}) (} (} (}) (} (}) (} (} (}) (}) (} (}) (}) (} (}) (} (} (}) (}) (} (}) (} (}) (} (}) (}) (} (}) (}) (} (}) (}) (} (}) (} (}) (}) (} (}) (}) (} (}) (}) (} (}) (}) (} (}) (}) (}) (}) (} (}) (}) (}) (})
std::vector<long> count_up_to(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long num) {
  if (num <= 1) return false;
  for (long i = 2; i * i <= num; ++i) {
    if (num % i == 0) return false;
  }
  return true;
}

std::vector<long> count_up_to(long n) {
  std::vector<long> primes;
  if (n <= 2) {
    return primes;
  }
  for (long i = 2; i < n; ++i) {
    if (is_prime(i)) {
      primes.push_back(i);
    }
  }
  return primes;
}","}
int main() {
    auto candidate = count_up_to;
    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));
    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));
    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));
    assert(candidate((0)) == (std::vector<long>()));
    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));
    assert(candidate((1)) == (std::vector<long>()));
    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));
    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));
}
"
HumanEval/97,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फ़ंक्शन के पूरा करव जेहर दुनो पूर्णांक ल लेत हवय अउ ओमनके इकाई अंकों के उत्पाद ल वापस करत हवय। इनपुट के हमेशा मान्य होए के मान लें। उदाहरणः >>> गुणा करे बर (((148), (412)) (16) >>> गुणा करे बर (((19), (28)) (72) >>> गुणा करे बर (((2020), (1851)) (0) >>> गुणा करे बर (((14), (-15)) (20)
long multiply(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>
long multiply(long a, long b) {
  long unit_a = std::abs(a) % 10;
  long unit_b = std::abs(b) % 10;
  return unit_a * unit_b;
}","}
int main() {
    auto candidate = multiply;
    assert(candidate((148), (412)) == (16));
    assert(candidate((19), (28)) == (72));
    assert(candidate((2020), (1851)) == (0));
    assert(candidate((14), (-15)) == (20));
    assert(candidate((76), (67)) == (42));
    assert(candidate((17), (27)) == (49));
    assert(candidate((0), (1)) == (0));
    assert(candidate((0), (0)) == (0));
}
"
HumanEval/98,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक स्ट्रिंग एस दिए गए, सम सूचकांकों में अपरकेस स्वरों के संख्या के गिनती करव। उदाहरण बर: >>> count_upper (((""aBCdEf"")) (1) >>> count_upper (((""abcdefg"")) (0) >>> count_upper (((""dBBE"")) (0)
long count_upper(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
long count_upper(std::string s) {
  long count = 0;
  std::unordered_set<char> upper_vowels = {'A', 'E', 'I', 'O', 'U'};
  for (long i = 0; i < s.length(); ++i) {
    if (i % 2 == 0 && upper_vowels.count(s[i])) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_upper;
    assert(candidate((""aBCdEf"")) == (1));
    assert(candidate((""abcdefg"")) == (0));
    assert(candidate((""dBBE"")) == (0));
    assert(candidate((""B"")) == (0));
    assert(candidate((""U"")) == (1));
    assert(candidate(("""")) == (0));
    assert(candidate((""EEEE"")) == (2));
}
"
HumanEval/99,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनाएँ जेहर एक संख्या के प्रतिनिधित्व करे वाले मूल्य (स्ट्रिंग) लेता हवय अउ एखर निकटतम पूर्णांक ल वापस करत हवय। यदि संख्या दु पूर्णांक ले समान हवय, त एला शून्य ले दूर कर दे. उदाहरण >>> closest_integer (((""10"")) (10) >>> closest_integer (((""15.3"")) नोट (15): शून्य ले दूर राउंडिंग के मतलब हवय कि यदि दिखीस संख्या दु पूर्णांक ले समान हवय, तो आप ल वापस करना चाहि ओहर ओहर हवय जेहर शून्य ले धुरिहा हवय। उदाहरण बर closest_integer (((""14.5"") ल 15 लौटाय जाना चाहि अउ निकटतम_integer ((-14.5"") ल -15. लौटाय जाना चाहि।
long closest_integer(std::string value) {
","#include<assert.h>
#include<bits/stdc++.h>
long closest_integer(std::string value) {
  double num = std::stod(value);
  if (num >= 0) {
    if (num - std::floor(num) <= 0.5) {
      return static_cast<long>(std::floor(num));
    } else {
      return static_cast<long>(std::ceil(num));
    }
  } else {
    if (std::ceil(num) - num <= 0.5) {
      return static_cast<long>(std::ceil(num));
    } else {
      return static_cast<long>(std::floor(num));
    }
  }
}","}
int main() {
    auto candidate = closest_integer;
    assert(candidate((""10"")) == (10));
    assert(candidate((""14.5"")) == (15));
    assert(candidate((""-15.5"")) == (-16));
    assert(candidate((""15.3"")) == (15));
    assert(candidate((""0"")) == (0));
}
"
HumanEval/100,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक एन दिए गए हवय, तो आप पत्थर के एन स्तरों के एक ढेर बनाना हवय। पहीली स्तर में एन पत्थर हवय। अगले स्तर म पत्थर के संख्या एहर हवय: - अगली विषम संख्या यदि एन विषम हवय - अगली सम संख्या यदि एन सम हवय। एक वेक्टर में प्रत्येक स्तर में पत्थर के संख्या ल लौटाएं, जहां सूचकांक में तत्व आई स्तर म पत्थर के संख्या का प्रतिनिधित्व करत हवय (आई + 1) उदाहरणः >>> make_a_pile(3) (std:: vector<long>{long) 3, (long) 5, (long) 7}))
std::vector<long> make_a_pile(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> make_a_pile(long n) {
  std::vector<long> pile;
  long current_stones = n;
  for (int i = 0; i < n; ++i) {
    pile.push_back(current_stones);
    if (current_stones % 2 != 0) {
      current_stones += 2;
    } else {
      current_stones += 2;
    }
  }
  return pile;
}","}
int main() {
    auto candidate = make_a_pile;
    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));
    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));
    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));
    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));
    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));
}
"
HumanEval/101,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल कॉमा या स्पेस ले अलग शब्दों के एक स्ट्रिंग दिए जाही। आपके काम स्ट्रिंग ल शब्दों म विभाजित करना हवय अउ शब्दों के एक वेक्टर ल वापस करना हवय। उदाहरण बर: >>> words_string (((""हाय, मोर नाम जॉन हवय"")) "" (std::vector<std::string>({(std::string) ""हाय"", (std::string) ""माझे"", (std::string) ""नाम"", (std::string) ""एहर"", (std::string) ""जॉन""})) >>> words_string (((""एक, दो, तीन, चार, पांच, छह"")) (std::vector<std::string>{(stdstring) ""एक"", (std::string) ""दुनो"", (std::string) ""तीन"", (std::string) ""चार"", (std::string) ""पांच"", (std::string) ""छह""))
std::vector<std::string> words_string(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> words_string(std::string s) {
  std::vector<std::string> words;
  std::string current_word;
  for (char c : s) {
    if (c == ',' || c == ' ') {
      if (!current_word.empty()) {
        words.push_back(current_word);
        current_word = """";
      }
    } else {
      current_word += c;
    }
  }
  if (!current_word.empty()) {
    words.push_back(current_word);
  }
  return words;
}","}
int main() {
    auto candidate = words_string;
    assert(candidate((""Hi, my name is John"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name"", (std::string)""is"", (std::string)""John""})));
    assert(candidate((""One, two, three, four, five, six"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate((""Hi, my name"")) == (std::vector<std::string>({(std::string)""Hi"", (std::string)""my"", (std::string)""name""})));
    assert(candidate((""One,, two, three, four, five, six,"")) == (std::vector<std::string>({(std::string)""One"", (std::string)""two"", (std::string)""three"", (std::string)""four"", (std::string)""five"", (std::string)""six""})));
    assert(candidate(("""")) == (std::vector<std::string>()));
    assert(candidate((""ahmed     , gamal"")) == (std::vector<std::string>({(std::string)""ahmed"", (std::string)""gamal""})));
}
"
HumanEval/102,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इ फ़ंक्शन दुनो सकारात्मक संख्यामन के लेता हवय अउ सबले बडखा सम पूर्णांक के लौटाता हवय जेहर कि सीमा में हवय [एक्स, वाई] समावेशी। यदि ए तरह के कोई संख्या नी हवय, त फ़ंक्शन के -1 लौटाए जाना चाहि। उदाहरण बर: >>> चुनें_नंबर 12), (15)) (14) >>> चुनें_नंबर 13), (12)) (-1)
long choose_num(long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>
long choose_num(long x, long y) {
  if (x > y) {
    return -1;
  }
  long end = y;
  if (end % 2 != 0) {
    end--;
  }
  if (end < x) {
    return -1;
  }
  return end;
}","}
int main() {
    auto candidate = choose_num;
    assert(candidate((12), (15)) == (14));
    assert(candidate((13), (12)) == (-1));
    assert(candidate((33), (12354)) == (12354));
    assert(candidate((5234), (5233)) == (-1));
    assert(candidate((6), (29)) == (28));
    assert(candidate((27), (10)) == (-1));
    assert(candidate((7), (7)) == (-1));
    assert(candidate((546), (546)) == (546));
}
"
HumanEval/103,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// आपके करा दुनो सकारात्मक पूर्णांक एन अउ एम दिए गए हंवय , अउ आपके काम एन ले एम तक पूर्णांक के औसत के गणना करना हवय (एन अउ एम सहित) । उत्तर के निकटतम पूर्णांक में गोलाकार करव अउ एला बाइनरी में परिवर्तित करव । यदि एन एम ले ज्यादा हवय, तो -1 लौटाएं। उदाहरण: >>> गोल_मध्यम (_एवीजी) {(1)), (5)) ""0 बी 11 "" >>> गोल_मध्यम (_एवीजी) {(7), (5)) -1 >>> गोल_मध्यम (_एवीजी) {(10), (20)) ""0 बी 11 11 "" >>> गोल_मध्यम (_एवीजी) {(20), (33) ""0 बी 11010""
Union_std_string_long rounded_avg(long n, long m) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_string_long{
    std::string f0;
    long f1;
    Union_std_string_long(std::string _f0) : f0(_f0) {}
    Union_std_string_long(long _f1) : f1(_f1) {}
    ~Union_std_string_long() {}
    bool operator==(std::string f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_string_long rounded_avg(long n, long m) {
  if (n > m) {
    return Union_std_string_long(-1);
  }
  double sum = 0;
  for (long i = n; i <= m; ++i) {
    sum += i;
  }
  double avg = sum / (m - n + 1);
  long rounded_avg_long = std::round(avg);
  if (rounded_avg_long == 0) {
    return Union_std_string_long(""0b0"");
  }
  std::string binary_string = """";
  long temp = std::abs(rounded_avg_long);
  while (temp > 0) {
    binary_string = (temp % 2 == 0 ? ""0"" : ""1"") + binary_string;
    temp /= 2;
  }
  return Union_std_string_long(""0b"" + binary_string);
}","}
int main() {
    auto candidate = rounded_avg;
    assert(candidate((1), (5)) == ""0b11"");
    assert(candidate((7), (13)) == ""0b1010"");
    assert(candidate((964), (977)) == ""0b1111001010"");
    assert(candidate((996), (997)) == ""0b1111100100"");
    assert(candidate((560), (851)) == ""0b1011000010"");
    assert(candidate((185), (546)) == ""0b101101110"");
    assert(candidate((362), (496)) == ""0b110101101"");
    assert(candidate((350), (902)) == ""0b1001110010"");
    assert(candidate((197), (233)) == ""0b11010111"");
    assert(candidate((7), (5)) == -1);
    assert(candidate((5), (1)) == -1);
    assert(candidate((5), (5)) == ""0b101"");
}
"
HumanEval/104,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सकारात्मक पूर्णांक के एक वेक्टर दिए गए हवय। उन जम्मो तत्वों के एक क्रमबद्ध वेक्टर ल लौटाएं जेमा कोई घलो अंक नी हवय। नोटः लौटाए गए वेक्टर ल बढ़ते क्रम में क्रमबद्ध करे जाना चाहि। उदाहरण बर: >>> अद्वितीय_डिजिटस (((एसडीः वेक्टर<लंबी> (((लंबी) 15, (लंबी) 33, (लंबी) 1422, (लंबी) 1}))) (एसडीः वेक्टर<लंबी> {(लंबी) 1, (लंबी) 15, (लंबी) 33})) >>> अद्वितीय_डिजिटस (((एसडीः वेक्टर<लंबी> {(लंबी) 152, (लंबी) 323, (लंबी) 142, (लंबी) 10}))) (एसडीः वेक्टर<लंबी>))
std::vector<long> unique_digits(std::vector<long> x) {
","#include<assert.h>
#include<bits/stdc++.h>
bool has_even_digit(long n) {
  std::string s = std::to_string(n);
  for (char c : s) {
    if ((c - '0') % 2 == 0) {
      return true;
    }
  }
  return false;
}

std::vector<long> unique_digits(std::vector<long> x) {
  std::vector<long> result;
  for (long val : x) {
    if (!has_even_digit(val)) {
      result.push_back(val);
    }
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = unique_digits;
    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));
    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));
    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));
}
"
HumanEval/105,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक वेक्टर दिए गए हवय, 1 अउ 9 के बीच के पूर्णांक ल सॉर्ट करव, परिणामी वेक्टर के उल्टा करव, अउ फिर प्रत्येक अंक के अपन संबंधित नाम ले ""एक"", ""दू"", ""तीन"", ""चार"", ""पांच"", ""छह"", ""सात"", ""आठ"", ""नौ"" ले प्रतिस्थापित करव। उदाहरण बर: >>> by_length(std::string<(long>{{long}2, (long) 1, (long) 1, (long) 4, (long) 5, (long) 8, (long) 2, (long) 3}))) (std::vector<std::string>{(std::string) ""आठ"", (std::string) ""पांच"", (std::string) ""चार"", (std::string) ""तीन"", (std::string) ""दुनो"", (std::string) ""तीन"", (std::string) ""चार"", (std::string) ""पांच"", (std::string) ""एक"", (std::string: ""एक"", (std::string) ""सात"", (std::string) ""सात"", (std::string) ""सात"", (std::string) ""सात"", (std::string) ""सात"", (std::string) ""सात"", (std::string (std::string) ""सात) ""सात"" ()) ले हटा दिसहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहरहर
std::vector<std::string> by_length(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> by_length(std::vector<long> arr) {
  std::vector<long> valid_numbers;
  std::vector<std::string> result;
  std::map<long, std::string> number_names = {
      {1, ""One""}, {2, ""Two""}, {3, ""Three""}, {4, ""Four""}, {5, ""Five""},
      {6, ""Six""}, {7, ""Seven""}, {8, ""Eight""}, {9, ""Nine""}};
  for (long num : arr) {
    if (num >= 1 && num <= 9) {
      valid_numbers.push_back(num);
    }
  }
  std::sort(valid_numbers.begin(), valid_numbers.end());
  std::reverse(valid_numbers.begin(), valid_numbers.end());
  for (long num : valid_numbers) {
    result.push_back(number_names[num]);
  }
  return result;
}","}
int main() {
    auto candidate = by_length;
    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)""Eight"", (std::string)""Five"", (std::string)""Four"", (std::string)""Three"", (std::string)""Two"", (std::string)""Two"", (std::string)""One"", (std::string)""One""})));
    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)""One""})));
    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)""Three"", (std::string)""Two"", (std::string)""One""})));
    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)""Nine"", (std::string)""Eight"", (std::string)""Four""})));
}
"
HumanEval/106,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// फ़ंक्शन लागू करव जेहर एक पैरामीटर के रूप में एन लेता हवय, अउ आकार एन के एक वेक्टर ल वापस करत हवय, ताकि इंडेक्स में तत्व के मूल्य आई के फैक्टोरियल हवय यदि आई भी या 1 ले 1 तक के संख्याओं के योग हवय। मैं 1 ले शुरू होत हंवय। आई के फैक्टोरियल 1 ले 1 तक के संख्याओं के गुणा हवय। उदाहरण: >>> एफ (डी) (डी) (डीडी) (डीडी) (डी) (डी) (डी) (डी) (डी) (डी))
std::vector<long> f(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> f(long n) {
  std::vector<long> result;
  for (long i = 1; i <= n; ++i) {
    if (i % 2 == 0) {
      long factorial = 1;
      for (long j = 1; j <= i; ++j) {
        factorial *= j;
      }
      result.push_back(factorial);
    } else {
      long sum = 0;
      for (long j = 1; j <= i; ++j) {
        sum += j;
      }
      result.push_back(sum);
    }
  }
  return result;
}","}
int main() {
    auto candidate = f;
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));
}
"
HumanEval/107,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक एन दिए गए, एक टपल ल वापस कर दिस जिकर पास घलो अउ विषम पूर्णांक पालिंड्रोम के संख्या हवय जेहर रेंज के भीतर गिरत हवय। उदाहरण 1: >>> भी_ओड_पालिंड्रोम ((3)) (स्टडीः: मेक_टपल ((1, 2)) स्पष्टीकरण: पूर्णांक पालिंड्रोम 1, 2, 3 हवय, ओमन में ले एक सम हवय, अउ ओमन में ले दुनो विषम हंवय। उदाहरण 2: >>> भी_ओड_पालिंड्रोम ((12)) (स्टडीः मेक_टपल ((4, 6)) स्पष्टीकरण: पूर्णांक पालिंड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 हवय। चार ले ओमन सम हंवय, अउ ओमन में ले 6 विषम हंवय। नोटः 1 <= एन = 10 ^ 3 <3 2। टपल के क्रमशः सम अउ विषम पूर्णांक पालिंड्रोम के संख्या हवय।
std::tuple<long, long> even_odd_palindrome(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_palindrome(long num) {
  std::string s = std::to_string(num);
  std::string reversed_s = s;
  std::reverse(reversed_s.begin(), reversed_s.end());
  return s == reversed_s;
}

std::tuple<long, long> even_odd_palindrome(long n) {
  long even_count = 0;
  long odd_count = 0;
  for (long i = 1; i <= n; ++i) {
    if (is_palindrome(i)) {
      if (i % 2 == 0) {
        even_count++;
      } else {
        odd_count++;
      }
    }
  }
  return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_palindrome;
    assert(candidate((123)) == (std::make_tuple(8, 13)));
    assert(candidate((12)) == (std::make_tuple(4, 6)));
    assert(candidate((3)) == (std::make_tuple(1, 2)));
    assert(candidate((63)) == (std::make_tuple(6, 8)));
    assert(candidate((25)) == (std::make_tuple(5, 6)));
    assert(candidate((19)) == (std::make_tuple(4, 6)));
    assert(candidate((9)) == (std::make_tuple(4, 5)));
    assert(candidate((1)) == (std::make_tuple(0, 1)));
}
"
HumanEval/108,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें count_nums जेहर पूर्णांक के एक वेक्टर लेता हवय अउ तत्वमन के संख्या ल वापस करत हवय जेमा अंकों के योग हवय > 0। यदि कोई संख्या नकारात्मक हवय, त एखर पहीली हस्ताक्षरित अंक नकारात्मक होही: उदाहरण बर -123 अंकों -1, 2, अउ 3 के हस्ताक्षरित हवय। >>> count_nums{((std::vector<long>())) (0) >>> count_nums{(std::vector<long>{(long) -1, (long) -11, (long) -11}))) (1) >>> count_nums::std::vector<long>{(long) 1, (long) 1, (long) 2} (3))))
long count_nums(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_digits_signed(long n) {
  std::string s = std::to_string(n);
  long sum = 0;
  for (long i = 0; i < s.length(); ++i) {
    if (i == 0 && s[i] == '-') {
      if (s.length() > 1) {
        sum -= (s[i + 1] - '0');
        i++;
      }
    } else {
      sum += (s[i] - '0');
    }
  }
  return sum;
}

long count_nums(std::vector<long> arr) {
  long count = 0;
  for (long num : arr) {
    if (sum_digits_signed(num) > 0) {
      count++;
    }
  }
  return count;
}","}
int main() {
    auto candidate = count_nums;
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));
    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));
    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));
    assert(candidate((std::vector<long>({(long)1}))) == (1));
}
"
HumanEval/109,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एहर एक वेक्टर 'एआरआर' एन पूर्णांक एआर [1], एआर [2], ..., एआर[एन] के एक वेक्टर हवय। वेक्टर में संख्यामन ल यादृच्छिक रूप ले आदेशित करे जाही। आपके काम एहर निर्धारित करना हवय कि का एहर संभव हवय कि वेक्टर के क्रमबद्ध करे बर एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय एहर संभव हवय कि काय हो सकत हवय कि काय हो सकत हवय कि काय हो सकत हवय कि काय हो सकत हवय कि काय हो कि काय हो सकत हवय कि काय हो काय हो सकत हवय कि काय हो काय हो काय हो सकत हवय कि काय हो काय हो काय हो सकत हवय कि काय हो काय हो काय हो काय हो सकत हवय कि काय हो काय हो सकत हवय कि काय हो
bool move_one_ball(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
bool move_one_ball(std::vector<long> arr) {
  if (arr.empty()) {
    return true;
  }
  int n = arr.size();
  std::vector<long> sorted_arr = arr;
  std::sort(sorted_arr.begin(), sorted_arr.end());
  for (int shift = 0; shift < n; ++shift) {
    std::vector<long> shifted_arr(n);
    for (int i = 0; i < n; ++i) {
      shifted_arr[i] = arr[(i - shift + n) % n];
    }
    if (shifted_arr == sorted_arr) {
      return true;
    }
  }
  return false;
}","}
int main() {
    auto candidate = move_one_ball;
    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));
    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
}
"
HumanEval/110,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// इ समस्या में, आप एक फ़ंक्शन लागू करही जो दो संख्याओं के वैक्टर लेता हावे, अउ निर्धारित करत हावे कि क्या केवल सम संख्याओं के वैक्टर बनाने बर ओखर बीच तत्वों का आदान-प्रदान करना संभव हावे। lst1 अउ lst2 के बीच आदान-प्रदान तत्वों की संख्या पर कोई सीमा नी हावे। यदि lst1 अउ lst2 के बीच तत्वों का आदान-प्रदान करना संभव हावे ताकि lst1 के सभी तत्वों ल भी समान बनाया जा सके, तो ""हां"" लौटाएं। अन्यथा, ""नहीं"" लौटाएं। उदाहरण बर: >>> आदान-प्रदानः{(std::vector<>(long) 1, (long) 2, (long) 3, (long) 4})), (std::vector<>(long) 1, (long) 2, (long) 3, (long) 4}), (std::vector<>(long) 4}) (ई हां) >>> (std::vector<>{(long>1, (long) 2, (long) 3, (long) 4}), (std::vector<>(long) 5, (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
","#include<assert.h>
#include<bits/stdc++.h>
std::string exchange(std::vector<long> lst1, std::vector<long> lst2) {
  long odd_count_lst1 = 0;
  for (long num : lst1) {
    if (num % 2 != 0) {
      odd_count_lst1++;
    }
  }
  long even_count_lst2 = 0;
  for (long num : lst2) {
    if (num % 2 == 0) {
      even_count_lst2++;
    }
  }
  if (even_count_lst2 >= odd_count_lst1) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = exchange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (""YES""));
    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (""NO""));
    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (""YES""));
}
"
HumanEval/111,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// उदाहरण: >>> हिस्टोग्राम (((""ए बी सी"")) (std::map<std::string,long>({{""ए"", 1}, {""बी"", 1}, {""सी"", 1}})) >>> हिस्टोग्राम (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::map<std::string,long> histogram(std::string test) {
","#include<assert.h>
#include<bits/stdc++.h>
std::map<std::string,long> histogram(std::string test) {
  std::map<std::string, long> counts;
  std::string current_word;
  std::stringstream ss(test);
  while (ss >> current_word) {
    counts[current_word]++;
  }
  if (counts.empty()) {
    return {};
  }
  long max_count = 0;
  for (const auto& pair : counts) {
    if (pair.second > max_count) {
      max_count = pair.second;
    }
  }
  std::map<std::string, long> result;
  for (const auto& pair : counts) {
    if (pair.second == max_count) {
      result[pair.first] = pair.second;
    }
  }
  return result;
}","}
int main() {
    auto candidate = histogram;
    assert(candidate((""a b b a"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c a b"")) == (std::map<std::string,long>({{""a"", 2}, {""b"", 2}})));
    assert(candidate((""a b c d g"")) == (std::map<std::string,long>({{""a"", 1}, {""b"", 1}, {""c"", 1}, {""d"", 1}, {""g"", 1}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate((""b b b b a"")) == (std::map<std::string,long>({{""b"", 4}})));
    assert(candidate((""r t g"")) == (std::map<std::string,long>({{""r"", 1}, {""t"", 1}, {""g"", 1}})));
    assert(candidate(("""")) == (std::map<std::string,long>()));
    assert(candidate((""a"")) == (std::map<std::string,long>({{""a"", 1}})));
}
"
HumanEval/112,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// कार्य हमन ल दु स्ट्रिंग s अउ c दिए गए हवय, आप ल एस म जम्मो वर्णों ल मिटा देना हवय जेहर सी म कन्हु भी चरित्र के बराबर होत हवय फेर जांच करव कि परिणाम स्ट्रिंग पालिंड्रोम हवय। एक स्ट्रिंग पालिंड्रोम कहा जात हवय यदि ए पाछू के रूप म समान पढ़ता हवय। आप ल परिणाम स्ट्रिंग अउ सत्यापन बर सही / गलत ल वापस करना चाहि। उदाहरण >>> reverse_delete (((""abcde""), (""एई"")) (एसटीडीः: मेक_ट्यूपल (((""बीसीडी"", झूठा)) >>> reverse_delete (((""abcdef""), (""बी"") (एसटीडीः मेक_ट्यूपल (((""एडीएफ"", झूठा)) >>> reverse_delete ((((abcded""), (""एबीसीबीए"") (एसटीडीः मेक_ट्यूपल ((((""एडीपी"", सच))
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
","#include<assert.h>
#include<bits/stdc++.h>
std::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {
  std::string result = """";
  std::unordered_set<char> chars_to_delete(c.begin(), c.end());
  for (char ch : s) {
    if (chars_to_delete.find(ch) == chars_to_delete.end()) {
      result += ch;
    }
  }
  std::string reversed_result = result;
  std::reverse(reversed_result.begin(), reversed_result.end());
  return std::make_tuple(result, result == reversed_result);
}","}
int main() {
    auto candidate = reverse_delete;
    assert(candidate((""abcde""), (""ae"")) == (std::make_tuple(""bcd"", false)));
    assert(candidate((""abcdef""), (""b"")) == (std::make_tuple(""acdef"", false)));
    assert(candidate((""abcdedcba""), (""ab"")) == (std::make_tuple(""cdedc"", true)));
    assert(candidate((""dwik""), (""w"")) == (std::make_tuple(""dik"", false)));
    assert(candidate((""a""), (""a"")) == (std::make_tuple("""", true)));
    assert(candidate((""abcdedcba""), ("""")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""abcdedcba""), (""v"")) == (std::make_tuple(""abcdedcba"", true)));
    assert(candidate((""vabba""), (""v"")) == (std::make_tuple(""abba"", true)));
    assert(candidate((""mamma""), (""mia"")) == (std::make_tuple("""", true)));
}
"
HumanEval/113,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग्स के एक वेक्टर दिए गए हवय, जहां प्रत्येक स्ट्रिंग में केवल अंक होत हंवय , एक वेक्टर ल वापस करत हवय। आउटपुट के प्रत्येक तत्व i ल ""इनपुट के स्ट्रिंग में विषम तत्वमन के संख्या होना चाहि। "" जहां जम्मो आई ल इनपुट के आई के स्ट्रिंग में विषम अंक के संख्या ले प्रतिस्थापित करे जाना चाहि। >>> odd_count((std:: vector<std:: string>(({std:: string) ""1234567""}))) (std:: vector<std:: string> 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n 4n
std::vector<std::string> odd_count(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<std::string> odd_count(std::vector<std::string> lst) {
  std::vector<std::string> result;
  for (const std::string& s : lst) {
    int count = 0;
    for (char c : s) {
      if ((c - '0') % 2 != 0) {
        count++;
      }
    }
    std::string count_str = std::to_string(count);
    std::string modified_s = s;
    for (char& c : modified_s) {
      if (isdigit(c) && (c - '0') % 2 != 0) {
        c = count_str[0];
      }
    }
    result.push_back(""the number of odd elements "" + count_str + ""n the str"" + modified_s + ""ng "" + modified_s + "" of the "" + modified_s + ""nput."");
  }
  return result;
}","}
int main() {
    auto candidate = odd_count;
    assert(candidate((std::vector<std::string>({(std::string)""1234567""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 4n the str4ng 4 of the 4nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""3"", (std::string)""11111111""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 1n the str1ng 1 of the 1nput."", (std::string)""the number of odd elements 8n the str8ng 8 of the 8nput.""})));
    assert(candidate((std::vector<std::string>({(std::string)""271"", (std::string)""137"", (std::string)""314""}))) == (std::vector<std::string>({(std::string)""the number of odd elements 2n the str2ng 2 of the 2nput."", (std::string)""the number of odd elements 3n the str3ng 3 of the 3nput."", (std::string)""the number of odd elements 2n the str2ng 2 of the 2nput.""})));
}
"
HumanEval/114,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक वेक्टर दिए गए, संख्याओं के कन्हु भी गैर-खाली उप-वेक्टर के न्यूनतम योग के पता लगाएं। उदाहरण >>> minSubArraySum(((std::vector<long>({long) 2, (long) 3, (long) 4, (long) 1, (long) 2, (long) 4}))) (1) >>> minSubArraySum(std::vector<long>{(long) -1, (long) -2, (long) -3)))) (-6)
long minSubArraySum(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>
long minSubArraySum(std::vector<long> nums) {
  if (nums.empty()) {
    throw std::invalid_argument(""Input vector cannot be empty."");
  }
  long min_so_far = nums[0];
  long current_min = nums[0];
  for (size_t i = 1; i < nums.size(); ++i) {
    current_min = std::min(nums[i], current_min + nums[i]);
    min_so_far = std::min(min_so_far, current_min);
  }
  return min_so_far;
}","}
int main() {
    auto candidate = minSubArraySum;
    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));
    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));
    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));
    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));
    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));
    assert(candidate((std::vector<long>({(long)-10}))) == (-10));
    assert(candidate((std::vector<long>({(long)7}))) == (7));
    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));
}
"
HumanEval/115,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप कुओं के एक आयताकार ग्रिड दिए जात हवय। प्रत्येक पंक्ति एक कुएं के प्रतिनिधित्व करत हवय, अउ प्रत्येक पंक्ति म 1 पानी के एक इकाई के प्रतिनिधित्व करत हवय। प्रत्येक कुएं म एक संबंधित बाल्टी होत हवय जेला पानी निकाले बर उपयोग करे जा सकत हवय, अउ जम्मो बाल्टी के समान क्षमता होत हवय। आपके काम कुओं ल खाली करे बर बाल्टी का उपयोग करना हवय। आउटपुट के संख्या आप कुओं ल कम करे के जरूरत हवय। उदाहरण 1: >>> max_fill((long_long:{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}{long}}{long}{long}{long}{long}}{long}{long}}{long}}{long}{long}{long}}{long}{long}}{long}}{long}{long}{long}}}{long}}{long}long}{long}{long}{long}{long}}}long}{long}}long}{long}{long}}long}{long}{long}long}{long}}{long}}{long}}}{long}}long}{long}{long}}long}{long}long}}{long}long}{long}long}long}long}{long}long}long}long}long}long}long}long}long}{long}long}long}long}long}long}long}long}long}long}long}long}long}long}long}long}long}long}long}long{long}long}long}long}long}long}long}long}long{long}long}long}long}long}long}long}long}long}long}long{long}long}long}long}
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
","#include<assert.h>
#include<bits/stdc++.h>
long max_fill(std::vector<std::vector<long>> grid, long capacity) {
  long bucket_lowering_count = 0;
  for (const auto& row : grid) {
    long water_in_well = 0;
    for (long unit : row) {
      water_in_well += unit;
    }
    bucket_lowering_count += (water_in_well + capacity - 1) / capacity;
  }
  return bucket_lowering_count;
}","}
int main() {
    auto candidate = max_fill;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));
}
"
HumanEval/116,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ए काटा में, आप ल बाइनरी प्रतिनिधित्व में एक के संख्या के अनुसार नकारात्मक पूर्णांक के एक वेक्टर के क्रमबद्ध करना होही। एक समान संख्या बर, दशमलव मूल्य के आधार म सॉर्ट करना होही। एला ए तरह लागू करे जाना चाहिः >>> sort_array((std::vector<long>{(long) 1, (long) 5, (long) 2, (long) 3, (long) 4}))) (std::vector<long>{(long) 1, (long) 2, (long) 3, (long) 4, (long) 5})) >>> sort_array(std::vector<long>{(long) 2, (long) 3, (long) 4, (long) 5, (long) 6}))) (std::vector<(long>{(long) 6, (long) 5, (long) 4, (long) 3, (long) 2} >>> sort_array (d::vector<long>{(long>0, (long) 3, (long)) (long) 2, (long) 3, (long) 4)) (long) (long) 2, (long) (long) (long)
std::vector<long> sort_array(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
int count_set_bits(long n) {
  int count = 0;
  if (n < 0) {
    n = std::abs(n);
  }
  while (n > 0) {
    n &= (n - 1);
    count++;
  }
  return count;
}

bool compare(long a, long b) {
  int bits_a = count_set_bits(a);
  int bits_b = count_set_bits(b);
  if (bits_a != bits_b) {
    return bits_a < bits_b;
  }
  return a < b;
}

std::vector<long> sort_array(std::vector<long> arr) {
  std::sort(arr.begin(), arr.end(), compare);
  return arr;
}","}
int main() {
    auto candidate = sort_array;
    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));
    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));
}
"
HumanEval/117,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग एस अउ एक प्राकृतिक संख्या एन दिए गए हवय, तो आप एक फ़ंक्शन लागू करे बर काम करे गए हवय जेमे स्ट्रिंग एस ले जम्मो शब्दमन के वेक्टर के एक वैक्टर ल वापस करे जात हवय जेमा बिल्कुल एन व्यंजन होत हवय, ताकि ये शब्द स्ट्रिंग एस में आ सकें। यदि स्ट्रिंग एस खाली हवय तो फ़ंक्शन ल खाली वेक्टर ल वापस करना चाहि। नोटः आप मान सकत हंवय कि इनपुट स्ट्रिंग में केवल अक्षर अउ रिक्त स्थान होत हंवय। उदाहरणः >>> select_words ({""मरी के एक छोटे मेमने रहिस""), (4)) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (}) (} (}) (}) (}) (} (}) (}) (} (}) (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (} (}) (}) (} (} (}) (} (}) (} (}) (} (}) (} (}) (} (} (}) (}) (} (}) (}) (} (} (}) (}) (} (} (}) (} (}) (}) (} (}) (}) (}) (} (}) (}) (} (} (}) (} (} (}) (} (}) (}) (} (}) (} (}) (}) (} (} (}) (}) (} (}) (} (}) (} (}) (}) (
std::vector<std::string> select_words(std::string s, long n) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_consonant(char c) {
  c = tolower(c);
  return (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');
}

std::vector<std::string> select_words(std::string s, long n) {
  std::vector<std::string> result;
  std::string current_word;
  for (char c : s) {
    if (c == ' ') {
      long consonant_count = 0;
      for (char word_char : current_word) {
        if (is_consonant(word_char)) {
          consonant_count++;
        }
      }
      if (consonant_count == n) {
        result.push_back(current_word);
      }
      current_word = """";
    } else {
      current_word += c;
    }
  }
  long consonant_count = 0;
  for (char word_char : current_word) {
    if (is_consonant(word_char)) {
      consonant_count++;
    }
  }
  if (consonant_count == n) {
    result.push_back(current_word);
  }
  return result;
}","}
int main() {
    auto candidate = select_words;
    assert(candidate((""Mary had a little lamb""), (4)) == (std::vector<std::string>({(std::string)""little""})));
    assert(candidate((""Mary had a little lamb""), (3)) == (std::vector<std::string>({(std::string)""Mary"", (std::string)""lamb""})));
    assert(candidate((""simple white space""), (2)) == (std::vector<std::string>()));
    assert(candidate((""Hello world""), (4)) == (std::vector<std::string>({(std::string)""world""})));
    assert(candidate((""Uncle sam""), (3)) == (std::vector<std::string>({(std::string)""Uncle""})));
    assert(candidate((""""), (4)) == (std::vector<std::string>()));
    assert(candidate((""a b c d e f""), (1)) == (std::vector<std::string>({(std::string)""b"", (std::string)""c"", (std::string)""d"", (std::string)""f""})));
}
"
HumanEval/118,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक शब्द दे गे हे। आप के काम ए हे कि आप ल दू ठन व्यंजन के बीच म सबले निकट स्वर मिलही (केस सेंसिटिव) । शुरुआत अऊ अंत म स्वर के गिनती नइ करे जाही। यदि आप ल कोनो स्वर उपर बताय शर्त ल पूरा नई करे हे त खाली स्ट्रिंग ल वापिस कर देवव। आप मान सकत हव कि देहे गए स्ट्रिंग म सिरिफ अंगरेजी अक्षर हे। उदाहरण: >>> get_closest_vowel((""yogurt"")) (""u"") >>> get_closest_vowel(""FULL"")) (""U"") >>> get_closest_vowel(""quick"") ("""") >>> get_closest_vowel(""ab"") ("""")
std::string get_closest_vowel(std::string word) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_vowel(char c) {
  c = tolower(c);
  return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}

bool is_consonant(char c) {
  return isalpha(c) && !is_vowel(c);
}

std::string get_closest_vowel(std::string word) {
  if (word.length() < 3) {
    return """";
  }
  for (int i = word.length() - 2; i >= 1; --i) {
    if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {
      return std::string(1, word[i]);
    }
  }
  return """";
}","}
int main() {
    auto candidate = get_closest_vowel;
    assert(candidate((""yogurt"")) == (""u""));
    assert(candidate((""full"")) == (""u""));
    assert(candidate((""easy"")) == (""""));
    assert(candidate((""eAsy"")) == (""""));
    assert(candidate((""ali"")) == (""""));
    assert(candidate((""bad"")) == (""a""));
    assert(candidate((""most"")) == (""o""));
    assert(candidate((""ab"")) == (""""));
    assert(candidate((""ba"")) == (""""));
    assert(candidate((""quick"")) == (""""));
    assert(candidate((""anime"")) == (""i""));
    assert(candidate((""Asia"")) == (""""));
    assert(candidate((""Above"")) == (""o""));
}
"
HumanEval/119,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल दु स्ट्रिंग के एक वेक्टर दिए जात हवय, दुनों स्ट्रिंग म केवल खुला कोष्ठक '(' या बंद कोष्ठक ') ' होत हवय। आपके काम ए जांचना हवय कि का दु स्ट्रिंग ल कन्हु क्रम म संयोजित करना संभव हवय, कि परिणामी स्ट्रिंग अच्छा होही। एक स्ट्रिंग एस ल अच्छा माना जात हवय यदि अउ केवल यदि एस म जम्मो कोष्ठक संतुलित हंवय । उदाहरण बर: स्ट्रिंग '(()) 'अच्छा हवय, जबकि स्ट्रिंग '()) 'अच्छा नी हवय। यदि एक अच्छा स्ट्रिंग बनाए के कोई तरीका हवय, तो 'हां' ल लौटाएं, अउ अन्यथा 'नहीं' ल लौटाएं। उदाहरणः >>> मैच_पेरेंस (((स्टड:: वेक्टर <स्टड:: स्ट्रिंग> ({((स्टडस्ट्रिंग) "")) "", ((((स्टडस्ट्रिंग) "")) "" ("" हाँ "") >>> मैच_पेरेंस ((((स्टडस्ट्रिंग) <स्टडस्ट्रिंग <स्टडस्ट्रिंग> ({((स्टडस्ट्रिंग >: ()) "" (नो"") "") "") ।
std::string match_parens(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_good(const std::string& s) {
  int balance = 0;
  for (char c : s) {
    if (c == '(') {
      balance++;
    } else if (c == ')') {
      balance--;
    }
    if (balance < 0) {
      return false;
    }
  }
  return balance == 0;
}

std::string match_parens(std::vector<std::string> lst) {
  std::string s1 = lst[0];
  std::string s2 = lst[1];
  if (is_good(s1 + s2) || is_good(s2 + s1)) {
    return ""Yes"";
  } else {
    return ""No"";
  }
}","}
int main() {
    auto candidate = match_parens;
    assert(candidate((std::vector<std::string>({(std::string)""()("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)"")""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()(())"", (std::string)""())())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")())"", (std::string)""(()()(""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(())))"", (std::string)""(()())((""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""()"", (std::string)""())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""(()("", (std::string)""()))()""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)""(((("", (std::string)""((())""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")(()"", (std::string)""(()(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)"")("", (std::string)"")(""}))) == (""No""));
    assert(candidate((std::vector<std::string>({(std::string)""("", (std::string)"")""}))) == (""Yes""));
    assert(candidate((std::vector<std::string>({(std::string)"")"", (std::string)""(""}))) == (""Yes""));
}
"
HumanEval/120,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक अउ सकारात्मक पूर्णांक के एक वेक्टर एआर दिए गए हवय, एआर में अधिकतम के संख्या के साथ लंबाई के एक सॉर्ट किए गए वेक्टर ल वापस कर दिस गइस हवय। उदाहरण 1: >>> अधिकतम (सीटीडीः वेक्टर<लंबी> (सीटीडीः 3, सीटीडीः 4, सीटीडीः 5)), (3)) सीटीडीः वेक्टर<लंबी> (सीटीडीः 4, सीटीडीः 4, सीटीडीः 4)), (2)) सीटीडीः वेक्टर<लंबी> (सीटीडीः 4)), (3)) सीटीडीः वेक्टर<लंबी> (सीटीडीः 4)), उदाहरण 3: अधिकतम (सीटीडीः वेक्टर<लंबी> (सीटीडीः 4) उदाहरण 3: अधिकतम (सीटीडीः वेक्टर<लंबी> (सीटीडीः 3) , (सीटीडीः 1) (सीटीडीः 1) (सीटीडीः 2) वेक्टर <लंबी> (सीटीडीः 1) के साथ क्रमबद्ध वेक्टर ल वापस कर दिस गइस हवय। वेक्टर के लंबाई 1000 के सीमा में होही। नोटः लें -1, 000 के भीतर ले वेंगरे में ले जाएगा।
std::vector<long> maximum(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> maximum(std::vector<long> arr, long k) {
  std::sort(arr.rbegin(), arr.rend());
  std::vector<long> result;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    result.push_back(arr[i]);
  }
  std::sort(result.begin(), result.end());
  return result;
}","}
int main() {
    auto candidate = maximum;
    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));
    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));
    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));
    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));
    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));
    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));
    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));
    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));
}
"
HumanEval/121,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक के एक गैर-खाली वेक्टर दिए गए, सम स्थिति में सभी विषम तत्वों के योग को लौटाएं। उदाहरण >>> समाधान ((((std::vector<long>({(long) 5, (long) 8, (long) 7, (long) 1}))) (12) >>> समाधान ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
long solution(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long solution(std::vector<long> lst) {
  long sum = 0;
  for (long i = 0; i < lst.size(); i += 2) {
    if (lst[i] % 2 != 0) {
      sum += lst[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = solution;
    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));
    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));
    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));
    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));
    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));
}
"
HumanEval/122,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// पूर्णांक arr अउ पूर्णांक के गैर-खाली वेक्टर दिए गए हवय, एआर के पहीली के तत्वों ले अधिकतम दु अंकों के साथ तत्वमन के योग ल वापस करत हवय। उदाहरणः >>> add_elements{}:std::vector<long>{(long) 111, (long) 21, (long) 3, (long) 4000, (long) 5, (long) 6, (long) 7, (long) 8, (long) 9})), (4)) (24) बाधाओं: 1. 1 <= len{arr) <= 100 2. 1 <= k <= len{arr)
long add_elements(std::vector<long> arr, long k) {
","#include<assert.h>
#include<bits/stdc++.h>
long add_elements(std::vector<long> arr, long k) {
  long sum = 0;
  for (long i = 0; i < std::min((long)arr.size(), k); ++i) {
    if (arr[i] >= -99 && arr[i] <= 99) {
      sum += arr[i];
    }
  }
  return sum;
}","}
int main() {
    auto candidate = add_elements;
    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));
    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));
    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));
    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));
    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));
}
"
HumanEval/123,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक n दिए गए, एक क्रमबद्ध वेक्टर ल वापस कर दिस जेमा कोलाट्ज़ अनुक्रम में विषम संख्या हवय। कोलाट्ज़ अनुमान गणित में एक अनुमान हवय जेमा ए तरह ले परिभाषित अनुक्रम ले संबंधित हवय: काखरो घलो सकारात्मक पूर्णांक एन के साथ शुरू करव। फिर प्रत्येक शब्द पिछले शब्द ले प्राप्त करे जात हवय: यदि पिछली अवधि सम हवय, तो अगले अवधि पिछले अवधि के आधा हवय। यदि पिछली अवधि विषम हवय, तो अगली अवधि पिछली अवधि के 3 गुना हवय अउ 1। अनुमान ए हवय कि एन के काखरो घलो मूल्य के बावजूद, अनुक्रम हमेशा 1 तक पहुंच जाही। नोटः 1. कोलाट्ज़ ((1) [1] हवय। 2। लौटाए गए वेक्टर ल बढ़ते क्रम में क्रमबद्ध करे जात हवय। उदाहरण बर: get_odd_collatz5) रिटर्न [1, 5] 5 बर कोलाट्ज़ अनुक्रम [5, 8, 16, 4, 2, 1] हवय, एखरबर विषम संख्या केवल 1 हवय, अउ 5। >>> get_odd_collatz (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::vector<long> get_odd_collatz(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
std::vector<long> get_odd_collatz(long n) {
  std::vector<long> odd_numbers;
  std::unordered_set<long> seen;
  long current = n;
  while (seen.find(current) == seen.end()) {
    seen.insert(current);
    if (current % 2 != 0) {
      odd_numbers.push_back(current);
    }
    if (current == 1) {
      break;
    }
    if (current % 2 == 0) {
      current /= 2;
    } else {
      current = 3 * current + 1;
    }
  }
  std::sort(odd_numbers.begin(), odd_numbers.end());
  return odd_numbers;
}","}
int main() {
    auto candidate = get_odd_collatz;
    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));
    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));
    assert(candidate((1)) == (std::vector<long>({(long)1})));
}
"
HumanEval/124,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक फंक्शन लिखे बर होही जऊन एक दिही गे दिनांक स्ट्रिंग ल मान्य करथे अऊ यदि दिनांक वैध हे त सच ल वापिस लानथे अऊ यदि अवैध हे त गलत ल। दिनांक वैध हे यदि निम्नलिखित नियम मन ल पूरा करथे: 1. दिनांक स्ट्रिंग खाली नई हे। 2. दिन के संख्या महीना 1,3,5,7,8,10,12 बर 1 ले कम या 31 दिन ले जादा नई हे अऊ दिन के संख्या महीना 4,6,9,11 बर 1 ले कम या 30 दिन ले जादा नई हे। अऊ, दिन के संख्या महीना 2 बर 1 ले कम या 29 ले जादा नई हे। 3. महीना 1 ले कम या 12 ले जादा नई होना चाही। 4. दिनांक के प्रारूप होना चाही: mm-dd-yyyy >>> valid_date((((01-15-2000"")) (सही) >>> valid_date((01-15-2012"") (गलत) >>> valid_date (((04-2040"") (गलत) >>> valid_date (((06-2020) (सही) >>> valid_date (((06-2020) (गलत)
bool valid_date(std::string date) {
","#include<assert.h>
#include<bits/stdc++.h>
bool valid_date(std::string date) {
  if (date.empty()) {
    return false;
  }
  if (date.length() != 10 || date[2] != '-' || date[5] != '-') {
    return false;
  }
  int month, day, year;
  try {
    month = std::stoi(date.substr(0, 2));
    day = std::stoi(date.substr(3, 2));
    year = std::stoi(date.substr(6, 4));
  } catch (const std::invalid_argument& e) {
    return false;
  } catch (const std::out_of_range& e) {
    return false;
  }
  if (month < 1 || month > 12) {
    return false;
  }
  if (day < 1) {
    return false;
  }
  if (month == 2) {
    if (day > 29) {
      return false;
    }
  } else if (month == 4 || month == 6 || month == 9 || month == 11) {
    if (day > 30) {
      return false;
    }
  } else {
    if (day > 31) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = valid_date;
    assert(candidate((""03-11-2000"")) == (true));
    assert(candidate((""15-01-2012"")) == (false));
    assert(candidate((""04-0-2040"")) == (false));
    assert(candidate((""06-04-2020"")) == (true));
    assert(candidate((""01-01-2007"")) == (true));
    assert(candidate((""03-32-2011"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""04-31-3000"")) == (false));
    assert(candidate((""06-06-2005"")) == (true));
    assert(candidate((""21-31-2000"")) == (false));
    assert(candidate((""04-12-2003"")) == (true));
    assert(candidate((""04122003"")) == (false));
    assert(candidate((""20030412"")) == (false));
    assert(candidate((""2003-04"")) == (false));
    assert(candidate((""2003-04-12"")) == (false));
    assert(candidate((""04-2003"")) == (false));
}
"
HumanEval/125,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }    bool operator==(long f) {
        return f1 == f ;
    }
};
// शब्द के एक स्ट्रिंग दिए गए हवय, व्हाइटस्पेस म विभाजित शब्दमन के एक वेक्टर ल वापस कर दिस, यदि टेक्स्ट में कोई व्हाइटस्पेस मौजूद नी हवय तो आप ल कॉम ',' म विभाजित करना चाहि यदि कोई कॉम मौजूद नी हवय तो आप ल वर्णमाला म विषम क्रम के साथ लोअर-लेटर अक्षरों के संख्या ल वापस करना चाहि, ऑर्ड 'ए') = 0, ऑर्ड 'बी') = 1, ... ऑर्ड 'जे') = 25 उदाहरण >>> स्प्लिट_वर्ड्स >>> ""हैलो वर्ल्ड! "") std::vector<std::string>""{(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
Union_std_vector_std_string__long split_words(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
union Union_std_vector_std_string__long{
    std::vector<std::string> f0;
    long f1;
    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}
    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}
    ~Union_std_vector_std_string__long() {}
    bool operator==(std::vector<std::string> f) {
        return f0 == f ;
    }
    bool operator==(long f) {
        return f1 == f ;
    }
};
Union_std_vector_std_string__long split_words(std::string txt) {
  if (txt.find(' ') != std::string::npos) {
    std::vector<std::string> words;
    std::stringstream ss(txt);
    std::string word;
    while (ss >> word) {
      words.push_back(word);
    }
    return Union_std_vector_std_string__long(words);
  } else if (txt.find(',') != std::string::npos) {
    std::vector<std::string> words;
    std::string current_word;
    for (char c : txt) {
      if (c == ',') {
        words.push_back(current_word);
        current_word = """";
      } else {
        current_word += c;
      }
    }
    words.push_back(current_word);
    return Union_std_vector_std_string__long(words);
  } else {
    long odd_order_count = 0;
    for (char c : txt) {
      if (islower(c)) {
        if ((c - 'a') % 2 != 0) {
          odd_order_count++;
        }
      }
    }
    return Union_std_vector_std_string__long(odd_order_count);
  }
}","}
int main() {
    auto candidate = split_words;
    assert(candidate((""Hello world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello,world!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world!""}));
    assert(candidate((""Hello world,!"")) == std::vector<std::string>({(std::string)""Hello"", (std::string)""world,!""}));
    assert(candidate((""Hello,Hello,world !"")) == std::vector<std::string>({(std::string)""Hello,Hello,world"", (std::string)""!""}));
    assert(candidate((""abcdef"")) == 3);
    assert(candidate((""aaabb"")) == 2);
    assert(candidate((""aaaBb"")) == 1);
    assert(candidate(("""")) == 0);
}
"
HumanEval/126,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// उदाहरण >>> is_sorted{} (long) {} (long) {} (long) {} (long) {} (long) {} (long) {} (long) {} (long) {} (long) {1, (long) {2, (long) {3, (long) {4, (long) {4, (long) {4, (long) {4, (long) {1, (long) {2, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long) {4, (long)) {4, (long) {4, (long) {4, (long) {4, (long)) {4, (long) {4, (long)) {4, (long) {4, (long) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) {4, (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long)) (long
bool is_sorted(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_sorted(std::vector<long> lst) {
  if (lst.size() <= 1) {
    return true;
  }
  std::map<long, int> counts;
  for (long x : lst) {
    counts[x]++;
  }
  for (auto const& [key, val] : counts) {
    if (val > 2) {
      return false;
    }
  }
  for (size_t i = 0; i < lst.size() - 1; ++i) {
    if (lst[i] > lst[i + 1]) {
      return false;
    }
  }
  return true;
}","}
int main() {
    auto candidate = is_sorted;
    assert(candidate((std::vector<long>({(long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));
    assert(candidate((std::vector<long>())) == (true));
    assert(candidate((std::vector<long>({(long)1}))) == (true));
    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));
}
"
HumanEval/127,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके करा दु अंतराल दिए जात हवय, जहां प्रत्येक अंतराल पूर्णांक के एक जोड़ी हवय। उदाहरण बर, अंतराल = (शुरू, अंत) = (1, 2) । दिए गए अंतराल बंद होत हंवय जेखर अर्थ हवय कि अंतराल (शुरू, अंत) में शुरुआत अउ अंत दुनो शामिल हंवय । प्रत्येक अंतराल बर, एहर माना जात हवय कि एखर शुरुआत एखर अंत के बराबर हवय या एखर बराबर हवय । आपका कार्य एहर निर्धारित करना हवय कि ए दुनो अंतराल के चौराहे के लंबाई एक प्रमुख संख्या हवय या नी। उदाहरण बर, अंतराल के चौराहे (1, 3), (2, 4) (2, 3) हवय, जेखर लंबाई 1 हवय, जेहर एक प्रमुख संख्या नी हवय। यदि चौराहे के लंबाई एक प्रमुख संख्या हवय, तो ""हां"" लहुटान, अन्यथा ""नहीं"" लहुटान। यदि दुनो अंतराल चौराहे नी करत हंवय, तो ""नहीं"" लहुटान। [इनपुट / आउटपुट] नमूनेः >>> >>>((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_prime(long n) {
  if (n <= 1) return false;
  for (long i = 2; i * i <= n; ++i) {
    if (n % i == 0) return false;
  }
  return true;
}

std::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {
  long start1 = std::get(interval1);
  long end1 = std::get(interval1);
  long start2 = std::get(interval2);
  long end2 = std::get(interval2);
  long intersection_start = std::max(start1, start2);
  long intersection_end = std::min(end1, end2);
  long intersection_length = intersection_end - intersection_start + 1;
  if (intersection_length <= 0) {
    return ""NO"";
  }
  if (is_prime(intersection_length)) {
    return ""YES"";
  } else {
    return ""NO"";
  }
}","}
int main() {
    auto candidate = intersection;
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (""NO""));
    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (""NO""));
    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (""YES""));
    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (""YES""));
    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (""NO""));
    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (""NO""));
    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (""NO""));
}
"
HumanEval/128,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल पूर्णांक के एक वेक्टर दिए जात हवय अउ आप ल 1, -1 या 0 के प्रतिनिधित्व करे वाले वेक्टर में प्रत्येक संख्या के जम्मो संकेतों के उत्पाद से गुणा करे वाले पूर्णांक के परिणाम के मात्रा ल वापस करे के जरूरत हवय। नोट: खाली एआर बर कोई नी लौटाए जात हवय। उदाहरणः >>> prod_signs{}{}}}}}{}}}{}}}{}}}{}}}{}}}{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
std::optional<long> prod_signs(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>

std::optional<long> prod_signs(std::vector<long> arr) {
  if (arr.empty()) {
    return std::nullopt;
  }
  long sum_magnitudes = 0;
  long product_of_signs = 1;
  for (long num : arr) {
    sum_magnitudes += std::abs(num);
    if (num > 0) {
      product_of_signs *= 1;
    } else if (num < 0) {
      product_of_signs *= -1;
    } else {
      product_of_signs *= 0;
    }
  }
  return sum_magnitudes * product_of_signs;
}","}
int main() {
    auto candidate = prod_signs;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);
    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);
    assert(candidate((std::vector<long>())) == std::nullopt);
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);
    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);
}
"
HumanEval/129,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एन पंक्तिमन अउ एन कॉलम (एन > = 2) अउ एक सकारात्मक पूर्णांक के साथ एक ग्रिड दिए गए हवय, ग्रिड के प्रत्येक सेल में एक मूल्य होत हवय। रेंज में हर पूर्णांक [1, एन * एन] समावेशी ग्रिड के कोशिकाओं म बिल्कुल एक बार दिखाई देत हवय। आप ग्रिड में लंबाई के न्यूनतम पथ ढूंढना चाहि। आप काखरो घलो सेल ले शुरू कर सकत हंवय, अउ प्रत्येक चरण में आप पड़ोसी कोशिकाओं में ले काखरो घलो म जा सकत हंवय, दूसर शब्दों में, आप काखरो घलो पड़ोसी कोशिका में जा सकत हंवय , जेहर आपके वर्तमान सेल के साथ एक किनारा साझा करत हंवय । कृपया ध्यान दें कि लंबाई के पथ के अर्थ हवय कि बिल्कुल के कोशिकाओं (जरूरतमंद नी हवय) का दौरा करना। आप ग्रिड ले बाहर नी जा सकत हंवय । एक पथ ए (लंबाई के) ल पथ बी (लंबाई के) ले कम माना जात हवय यदि ए अउ बी (एमनला एल_स्ट अउ एल_स्ट कहें), एल_स्टबी ले कम हवय, जेके लेक्सिकली रूप ले कम हवय, दूसर शब्दों में, एक पूर्णांक के साथ कन्हु घलो जा सकत हवय। एहर बर गारंटी हवय कि कन्हु भी पूर्णांक के लिए एक अद्वितीय मूल्य मौजूद हवय जे जे जे जे जे (ए) = 1 एजे (ए) <1 एजे (ए) <ए) <ए (ए) <ए) <ए (ए) <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए <ए>
std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {
  int n = grid.size();
  std::vector<long> min_path;

  std::function<void(int, int, std::vector<long>)> dfs = 
    [&](int row, int col, std::vector<long> current_path) {
    if (current_path.size() == k) {
      if (min_path.empty() || current_path < min_path) {
        min_path = current_path;
      }
      return;
    }

    current_path.push_back(grid[row][col]);

    int dr= {-1, 1, 0, 0};
    int dc= {0, 0, -1, 1};

    for (int i = 0; i < 4; ++i) {
      int next_row = row + dr[i];
      int next_col = col + dc[i];
      if (next_row >= 0 && next_row < n && next_col >= 0 && next_col < n) {
        dfs(next_row, next_col, current_path);
      }
    }
  };

  for (int start_row = 0; start_row < n; ++start_row) {
    for (int start_col = 0; start_col < n; ++start_col) {
      dfs(start_row, start_col, {});
    }
  }

  return min_path;
}","}
int main() {
    auto candidate = minPath;
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));
    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));
}
"
HumanEval/130,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// हर कोई फाइबोनैचि अनुक्रम जानता हवय, एहरपिछले कुछ शताब्दियों में गणितज्ञों से गहराई ले अध्ययन करे गय रहिस। हालांकि, जो लोग नी जानते हंवय वह ट्राइबोनैचि अनुक्रम हवय। ट्राइबोनैचि अनुक्रम पुनरावृत्ति द्वारा मिभाषित करे जात हवय: tri(1) = 3 tri(n) = 1 + n / 2, यदि n सम हवय। tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n विषम हवय। उदाहरण बर: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 आप एक गैर-ऋण पूर्णांक संख्या n दिए जात हवय, आप ल ट्राइबोनैचि अनुक्रम के पहीली n + 1 के एक वेक्टर ल वापस करना होत हवय। उदाहरणः >>> tri(3) (dst long vector><{(long} (long1, long3, long2, long8})
std::vector<long> tri(long n) {
","#include <assert.h>
#include <bits/stdc++.h>

std::vector<long> tri(long n) {
  std::vector<long> result;
  if (n >= 0) {
    result.push_back(1);
  }
  if (n >= 1) {
    result.push_back(3);
  }
  for (long i = 2; i <= n; ++i) {
    if (i % 2 == 0) {
      result.push_back(1 + i / 2);
    } else {
      if (i - 1 >= 0 && i - 2 >= 0 && i + 1 <= n)
      {
          result.push_back(result[i-1] + result[i-2] + result[i]);
      }
      else if (i - 1 >= 0 && i - 2 >= 0)
      {
          result.push_back(result[i-1] + result[i-2]);
      }
      else if (i - 1 >= 0)
      {
          result.push_back(result[i-1]);
      }
      else
      {
          result.push_back(0);
      }
    }
  }
  return result;
}","}
int main() {
    auto candidate = tri;
    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));
    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));
    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));
    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));
    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));
    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));
    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));
    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));
    assert(candidate((0)) == (std::vector<long>({(long)1})));
    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));
}
"
HumanEval/131,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक एन दिए गए, विषम अंकों के उत्पाद लौटाएं। 0 लौटाएं यदि सभी अंक सम हैं। उदाहरण बर: >>> अंक (((1)) (1) >>> अंक (((4)) (0) >>> अंक (((235)) (15)
long digits(long n) {
","#include<assert.h>
#include<bits/stdc++.h>
long digits(long n) {
  long product = 1;
  std::string s = std::to_string(n);
  bool has_odd = false;
  for (char c : s) {
    long digit = c - '0';
    if (digit % 2 != 0) {
      product *= digit;
      has_odd = true;
    }
  }
  if (!has_odd) {
    return 0;
  }
  return product;
}","}
int main() {
    auto candidate = digits;
    assert(candidate((5)) == (5));
    assert(candidate((54)) == (5));
    assert(candidate((120)) == (1));
    assert(candidate((5014)) == (5));
    assert(candidate((98765)) == (315));
    assert(candidate((5576543)) == (2625));
    assert(candidate((2468)) == (0));
}
"
HumanEval/132,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनात हवय जेमा इनपुट के रूप में स्ट्रिंग होत हवय जेमा केवल स्क्वायर ब्रैकेट होत हवय। फ़ंक्शन ल तब अउ केवल तभी सच लौटाए जाना चाहि जब ब्रैकेट के एक वैध सब्सकक्वेन्स होत हवय जहां कम ले कम एक ब्रैकेट उप-क्रम में घोंसला होत हवय। >>> is_nested((""[[]]"")) (सही) >>> is_nested
bool is_nested(std::string string) {
","#include<assert.h>
#include<bits/stdc++.h>
bool is_nested(std::string string) {
  int balance = 0;
  bool nested = false;
  for (char c : string) {
    if (c == '[') {
      balance++;
    } else if (c == ']') {
      if (balance > 1) {
        nested = true;
      }
      balance--;
      if (balance < 0) {
        return false;
      }
    }
  }
  return balance == 0 && nested;
}","}
int main() {
    auto candidate = is_nested;
    assert(candidate((""[[]]"")) == (true));
    assert(candidate((""[]]]]]]][[[[[]"")) == (false));
    assert(candidate((""[][]"")) == (false));
    assert(candidate((""[]"")) == (false));
    assert(candidate((""[[[[]]]]"")) == (true));
    assert(candidate((""[]]]]]]]]]]"")) == (false));
    assert(candidate((""[][][[]]"")) == (true));
    assert(candidate((""[[]"")) == (false));
    assert(candidate((""[]]"")) == (false));
    assert(candidate((""[[]][["")) == (true));
    assert(candidate((""[[][]]"")) == (true));
    assert(candidate(("""")) == (false));
    assert(candidate((""[[[[[[[["")) == (false));
    assert(candidate((""]]]]]]]]"")) == (false));
}
"
HumanEval/133,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल संख्याओं के एक वेक्टर दिए गए हवय। आप ल दिए गए वेक्टर में स्क्वायर संख्याओं के योग ल वापस करे के जरूरत हवय, पहली वेक्टर में प्रत्येक तत्व ल ऊपर के पूर्णांक तक गोल करे के जरूरत हवय। उदाहरणः >>> lst: vector<float>{(float) 1.0f, (float) 2.0f, (float) 3.0f)) (14) >>> lst: vector<float>{(float) 1.0f, (float) 4.0f, (float) 9.0f)) >>> (98) lst: vector<float>{(float) 1.0f, (float) 3.0f, (float) 5.0f, (float) 7.0f)) (84) >>> lst: vector<float>{((((f) 1.4.4f, (float) 2.4.0f, (float) 3.0f)) (6) >>> lst: vector<float>{(((f) 2.4.0f, (float) 2.0.0f)) (float) (6) >>> vector<float> (float) 2.4.0f, (float)
long sum_squares(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
long sum_squares(std::vector<float> lst) {
  long sum = 0;
  for (float num : lst) {
    long rounded_up = std::ceil(num);
    sum += rounded_up * rounded_up;
  }
  return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));
    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));
    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));
    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));
    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));
    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));
    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));
    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));
}
"
HumanEval/134,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनाएँ जेहर सच ल वापस करत हवय यदि दिए गए स्ट्रिंग के अंतिम वर्ण वर्णमाला वर्ण हवय अउ शब्द के हिस्सा नी हवय, अउ आने रहिस गलत हवय। नोटः ""शब्द"" वर्णों के एक समूह हवय जेहर जगह ले अलग हवय। उदाहरणः >>> चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((""एप्पल पाई"")) (गलत) >>> चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((""एप्पल पाई ई"")) (सच) >>> चेक_इफ_लास्ट_चार्_इस_ए_लेटर (((""एप्पल पाई ई)) (गलत) >>> चेक_इफ_लास्ट_चार्_इस_ए_लेटर ((("")) (गलत)
bool check_if_last_char_is_a_letter(std::string txt) {
","#include<assert.h>
#include<bits/stdc++.h>
bool check_if_last_char_is_a_letter(std::string txt) {
  if (txt.empty()) {
    return false;
  }
  if (!isalpha(txt.back())) {
    return false;
  }
  if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {
    return false;
  }
  return true;
}","}
int main() {
    auto candidate = check_if_last_char_is_a_letter;
    assert(candidate((""apple"")) == (false));
    assert(candidate((""apple pi e"")) == (true));
    assert(candidate((""eeeee"")) == (false));
    assert(candidate((""A"")) == (true));
    assert(candidate((""Pumpkin pie "")) == (false));
    assert(candidate((""Pumpkin pie 1"")) == (false));
    assert(candidate(("""")) == (false));
    assert(candidate((""eeeee e "")) == (false));
    assert(candidate((""apple pie"")) == (false));
    assert(candidate((""apple pi e "")) == (false));
}
"
HumanEval/135,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनात हवय जेहर एक तत्व के सबले बडखा सूचकांक ल वापस करत हवय जेहर एखर ले आघू के तत्व के बराबर या उससे ज्यादा नी होत हवय। यदि ए तरह के कोई तत्व मौजूद नी हवय तो -1 ल वापस करव। दिए गए वेक्टर में डुप्लिकेट मान शामिल नी होही। उदाहरणः >>> can_arrange{}, (long) 2, (long) 4, (long) 3, (long) 5}))) (3) >>> can_arrange{}, (long) 2, (long) 3}))) (-1)
long can_arrange(std::vector<long> arr) {
","#include<assert.h>
#include<bits/stdc++.h>
long can_arrange(std::vector<long> arr) {
  for (long i = 1; i < arr.size(); ++i) {
    if (arr[i] < arr[i - 1]) {
      return i;
    }
  }
  return -1;
}","}
int main() {
    auto candidate = can_arrange;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));
    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));
    assert(candidate((std::vector<long>())) == (-1));
}
"
HumanEval/136,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनाएँ जो एक ट्यूपल (ए, बी) ल लौटाता हवय, जहां 'ए' नकारात्मक पूर्णांक के सबले बडखा हवय, अउ 'बी' एक वेक्टर में सकारात्मक पूर्णांक के सबले छोटे हवय। यदि कोई नकारात्मक या सकारात्मक पूर्णांक नी हवय, तो ओमनला नो के रूप में लौटाएं। उदाहरणः >>> सबले बडखा_सबसे छोटे_पूर्णांक ({}, ({}, ({}, ({}, ({}, ({}, ({}, ({}, ({}, ({}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {, {,}, {,}, {,}, {,}, {,},}, {, {,}, {,}, {,}, {,},}, {, {,},}, {,}, {,}, {,}, {,},}, {,}, {,}, {,}, {,},}, {,}, {,}, {,},}, {,}, {,}, {,}, {,},
std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<tuple>
#include<vector>

std::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {
    std::optional<long> largest_negative = std::nullopt;
    std::optional<long> smallest_positive = std::nullopt;
    for (long num : lst) {
        if (num < 0) {
            if (!largest_negative.has_value() || num > largest_negative.value()) {
                largest_negative = num;
            }
        } else if (num > 0) {
            if (!smallest_positive.has_value() || num < smallest_positive.value()) {
                smallest_positive = num;
            }
        }
    }
    return std::make_tuple(largest_negative, smallest_positive);
}","}
int main() {
    auto candidate = largest_smallest_integers;
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));
    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));
    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));
    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));
    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));
    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));
}
"
HumanEval/137,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }    bool operator==(float f) {
        return f1 == f ;
    }    bool operator==(std::string f) {
        return f2 == f ;
    }    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};
// एक फ़ंक्शन बनाएँ जेहर पूर्णांक, फ्लोट्स, या स्ट्रिंग्स वास्तविक संख्यामन के प्रतिनिधित्व करत हवय, अउ अपन दिए गए चर प्रकार में बड़ा चर ल वापस करत हवय। यदि मान बराबर हंवय तो कोई घलो नी लहुटात हवय। नोट: यदि एक वास्तविक संख्या ल स्ट्रिंग के रूप में दर्शाया जात हवय, त फ्लोटिंग पॉइंट हो सकत हवय . या , >>> तुलना_एक (१, २.५एफ) २.५एफ >>> तुलना_एक (१, ""२,३"") ""२,३"" >>> तुलना_एक (१,५,१"", ""६"") ""६"" >>> तुलना_एक (१"", १) std::nullopt
Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<optional>
#include<string>

union Union_long_float_std_string{
    long f0;
    float f1;
    std::string f2;
    Union_long_float_std_string(long _f0) : f0(_f0) {}
    Union_long_float_std_string(float _f1) : f1(_f1) {}
    Union_long_float_std_string(std::string _f2) : f2(_f2) {}
    ~Union_long_float_std_string() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
};
union Union_long_float_std_string_std_nullopt{
    long f0;
    float f1;
    std::string f2;
    std::nullopt f3;
    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}
    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}
    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}
    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}
    ~Union_long_float_std_string_std_nullopt() {}
    bool operator==(long f) {
        return f0 == f ;
    }
    bool operator==(float f) {
        return f1 == f ;
    }
    bool operator==(std::string f) {
        return f2 == f ;
    }
    bool operator==(std::nullopt f) {
        return f3 == f ;
    }
};

double parse_real(const std::string& s) {
    std::string temp = s;
    std::replace(temp.begin(), temp.end(), ',', '.');
    try {
        return std::stod(temp);
    } catch (const std::invalid_argument& e) {
        return std::numeric_limits<double>::quiet_NaN();
    } catch (const std::out_of_range& e) {
        return std::numeric_limits<double>::quiet_NaN();
    }
}

Union_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {
    if (a.f2.empty() && b.f2.empty()) {
        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {
            if (a.f0 > b.f0) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f0 > a.f0) return Union_long_float_std_string_std_nullopt(b.f0);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {
            if (a.f1 > b.f1) return Union_long_float_std_string_std_nullopt(a.f1);
            if (b.f1 > a.f1) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f0) == typeid(long) && typeid(b.f1) == typeid(float)) {
            if (static_cast<float>(a.f0) > b.f1) return Union_long_float_std_string_std_nullopt(a.f0);
            if (b.f1 > static_cast<float>(a.f0)) return Union_long_float_std_string_std_nullopt(b.f1);
        } else if (typeid(a.f1) == typeid(float) && typeid(b.f0) == typeid(long)) {
            if (a.f1 > static_cast<float>(b.f0)) return Union_long_float_std_string_std_nullopt(a.f1);
            if (static_cast<float>(b.f0) > a.f1) return Union_long_float_std_string_std_nullopt(b.f0);
        }
    } else {
        double val_a, val_b;
        if (!a.f2.empty()) val_a = parse_real(a.f2);
        else if (typeid(a.f0) == typeid(long)) val_a = static_cast<double>(a.f0);
        else val_a = static_cast<double>(a.f1);

        if (!b.f2.empty()) val_b = parse_real(b.f2);
        else if (typeid(b.f0) == typeid(long)) val_b = static_cast<double>(b.f0);
        else val_b = static_cast<double>(b.f1);

        if (!std::isnan(val_a) && !std::isnan(val_b)) {
            if (val_a > val_b) return Union_long_float_std_string_std_nullopt(a);
            if (val_b > val_a) return Union_long_float_std_string_std_nullopt(b);
        }
    }
    return Union_long_float_std_string_std_nullopt(std::nullopt{});
}","}
int main() {
    auto candidate = compare_one;
    assert(candidate(1, 2) == 2);
    assert(candidate(1, 2.5f) == 2.5f);
    assert(candidate(2, 3) == 3);
    assert(candidate(5, 6) == 6);
    assert(candidate(1, ""2,3"") == ""2,3"");
    assert(candidate(""5,1"", ""6"") == ""6"");
    assert(candidate(""1"", ""2"") == ""2"");
    assert(candidate(""1"", 1) == std::nullopt);
}
"
HumanEval/138,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// मूल्यांकन करें कि दिए गए संख्या n के 4 सकारात्मक संख्याओं के योग के रूप में लिखा जा सकत हवय उदाहरण >>> is_equal_to_sum_even ()) (सही) >>> is_equal_to_sum_even ()) (सही)
bool is_equal_to_sum_even(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_equal_to_sum_even(long n) {
    if (n <= 6 || n % 2 != 0) {
        return false;
    }
    return true;
}","}
int main() {
    auto candidate = is_equal_to_sum_even;
    assert(candidate((4)) == (false));
    assert(candidate((6)) == (false));
    assert(candidate((8)) == (true));
    assert(candidate((10)) == (true));
    assert(candidate((11)) == (false));
    assert(candidate((12)) == (true));
    assert(candidate((13)) == (false));
    assert(candidate((16)) == (true));
}
"
HumanEval/139,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ब्राजीलियाई फैक्टोरियल के रूप में परिभाषित करे गए हवय: ब्राजीलियाई_फैक्टोरियल ((एन) = एन! * (एन -1))! * (एन -2))! * ... * 1! जहां एन > 0 उदाहरण बर: >>> विशेष_फैक्टोरियल (((4)) (288) फ़ंक्शन इनपुट के रूप में एक पूर्णांक प्राप्त करेगा अउ ए पूर्णांक के विशेष फैक्टोरियल लौटा देगा।
long special_factorial(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long factorial(long k) {
    long res = 1;
    for (long i = 2; i <= k; ++i) {
        res *= i;
    }
    return res;
}

long special_factorial(long n) {
    if (n <= 0) {
        return 1;
    }
    long result = 1;
    for (long i = 1; i <= n; ++i) {
        result *= factorial(i);
    }
    return result;
}","}
int main() {
    auto candidate = special_factorial;
    assert(candidate((4)) == (288));
    assert(candidate((5)) == (34560));
    assert(candidate((7)) == (125411328000));
    assert(candidate((1)) == (1));
}
"
HumanEval/140,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// स्ट्रिंग टेक्स्ट दिए गए हवय, एमें जम्मो स्पेस ल अंडरस्कोर के साथ प्रतिस्थापित करव, अउ यदि स्ट्रिंग में 2 ले ज्यादा लगातार स्पेस हंवय , तो जम्मो लगातार स्पेस ल - >>> फिक्स_स्पेस के साथ प्रतिस्थापित करव (_उदाहरण) "" उदाहरण "")) "" उदाहरण "") "" उदाहरण "" 1 "") उदाहरण "" 2 "") उदाहरण "" 3 "") उदाहरण "" 3 "")
std::string fix_spaces(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string fix_spaces(std::string text) {
    std::string result = """";
    int space_count = 0;
    for (char c : text) {
        if (c == ' ') {
            space_count++;
        } else {
            if (space_count == 1) {
                result += '_';
            } else if (space_count > 1) {
                result += '-';
            }
            result += c;
            space_count = 0;
        }
    }
    if (space_count == 1 && !result.empty() && result.back() != '_') {
        result += '_';
    } else if (space_count > 1 && !result.empty() && result.back() != '-') {
        result += '-';
    } else if (space_count > 0 && result.empty()) {
        if (space_count > 2) result += '-';
        else if (space_count == 1) result += '_';
    } else if (space_count == 1 && result.empty()) {
        result += '_';
    }

    std::string trimmed_result = """";
    bool non_space_found = false;
    for (char c : result) {
        if (c != ' ') {
            non_space_found = true;
            trimmed_result += c;
        } else if (non_space_found) {
            trimmed_result += c;
        }
    }

    while (!trimmed_result.empty() && trimmed_result.front() == '_') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '_') {
        trimmed_result.pop_back();
    }
     while (!trimmed_result.empty() && trimmed_result.front() == '-') {
        trimmed_result.erase(trimmed_result.begin());
    }
    while (!trimmed_result.empty() && trimmed_result.back() == '-') {
        trimmed_result.pop_back();
    }

    std::string final_result = """";
    space_count = 0;
    for (char c : trimmed_result) {
        if (c == '_') {
            space_count++;
        } else {
            if (space_count == 1) {
                final_result += '_';
            } else if (space_count > 1) {
                final_result += '-';
            }
            final_result += c;
            space_count = 0;
        }
    }
    if (space_count == 1) {
        final_result += '_';
    } else if (space_count > 1) {
        final_result += '-';
    }

    return final_result;
}","}
int main() {
    auto candidate = fix_spaces;
    assert(candidate((""Example"")) == (""Example""));
    assert(candidate((""Mudasir Hanif "")) == (""Mudasir_Hanif_""));
    assert(candidate((""Yellow Yellow  Dirty  Fellow"")) == (""Yellow_Yellow__Dirty__Fellow""));
    assert(candidate((""Exa   mple"")) == (""Exa-mple""));
    assert(candidate((""   Exa 1 2 2 mple"")) == (""-Exa_1_2_2_mple""));
}
"
HumanEval/141,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन बनावव जेमा एक स्ट्रिंग एक फाइल के नाम के प्रतिनिधित्व करत हवय, अउ यदि फाइल के नाम वैध हवय, तो 'हां' लहुटात हवय, अउ अन्यथा 'नहीं' लहुटात हवय। एक फाइल के नाम वैध माना जात हवय यदि अउ केवल यदि जम्मो निम्न शर्तें पूरा होत हवयं: - फाइल के नाम म तीन अंकों ले ज्यादा ('0'-'9') नी होना चाहि। - फाइल के नाम म बिल्कुल एक डॉट '.' होत हवय। - डॉट के आघू सबस्ट्रिंग खाली नी होना चाहि, अउ ए लैटिन अल्फाबेट के एक अक्षर ले शुरू होत हवय ('ए'-'ज़' अउ 'ए'ज़') । - डॉट के पाछू सबस्ट्रिंग एमन ले एकठन होना चाहि: ['टीएक्सटी', 'एक्सई', 'डेल'] उदाहरणः >>> file_name_check""{""उदाहरण.txt"") (""हां"") >>> file_name_check""{""उदाहरण.dll"") (""नहीं"")
std::string file_name_check(std::string file_name) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string file_name_check(std::string file_name) {
    int digit_count = 0;
    int dot_count = 0;
    size_t dot_pos = std::string::npos;

    for (size_t i = 0; i < file_name.length(); ++i) {
        if (isdigit(file_name[i])) {
            digit_count++;
        } else if (file_name[i] == '.') {
            dot_count++;
            dot_pos = i;
        }
    }

    if (digit_count > 3 || dot_count != 1) {
        return ""No"";
    }

    if (dot_pos == 0 || dot_pos == file_name.length() - 1) {
        return ""No"";
    }

    std::string name_part = file_name.substr(0, dot_pos);
    std::string ext_part = file_name.substr(dot_pos + 1);

    if (name_part.empty() || !isalpha(name_part[0])) {
        return ""No"";
    }

    if (ext_part == ""txt"" || ext_part == ""exe"" || ext_part == ""dll"") {
        return ""Yes"";
    } else {
        return ""No"";
    }
}","}
int main() {
    auto candidate = file_name_check;
    assert(candidate((""example.txt"")) == (""Yes""));
    assert(candidate((""1example.dll"")) == (""No""));
    assert(candidate((""s1sdf3.asd"")) == (""No""));
    assert(candidate((""K.dll"")) == (""Yes""));
    assert(candidate((""MY16FILE3.exe"")) == (""Yes""));
    assert(candidate((""His12FILE94.exe"")) == (""No""));
    assert(candidate((""_Y.txt"")) == (""No""));
    assert(candidate((""?aREYA.exe"")) == (""No""));
    assert(candidate((""/this_is_valid.dll"")) == (""No""));
    assert(candidate((""this_is_valid.wow"")) == (""No""));
    assert(candidate((""this_is_valid.txt"")) == (""Yes""));
    assert(candidate((""this_is_valid.txtexe"")) == (""No""));
    assert(candidate((""#this2_i4s_5valid.ten"")) == (""No""));
    assert(candidate((""@this1_is6_valid.exe"")) == (""No""));
    assert(candidate((""this_is_12valid.6exe4.txt"")) == (""No""));
    assert(candidate((""all.exe.txt"")) == (""No""));
    assert(candidate((""I563_No.exe"")) == (""Yes""));
    assert(candidate((""Is3youfault.txt"")) == (""Yes""));
    assert(candidate((""no_one#knows.dll"")) == (""Yes""));
    assert(candidate((""1I563_Yes3.exe"")) == (""No""));
    assert(candidate((""I563_Yes3.txtt"")) == (""No""));
    assert(candidate((""final..txt"")) == (""No""));
    assert(candidate((""final132"")) == (""No""));
    assert(candidate((""_f4indsartal132."")) == (""No""));
    assert(candidate(("".txt"")) == (""No""));
    assert(candidate((""s."")) == (""No""));
}
"
HumanEval/142,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ""एखर से, एहर एक पूर्णांक वेक्टर लेगा। वेक्टर में जम्मो प्रविष्टियों बर, फ़ंक्शन पूर्णांक प्रविष्टि के वर्ग करेगा यदि इकी सूचकांक 3 का एक गुणक हावे अउ पूर्णांक प्रविष्टि के घन करेगा यदि इकी सूचकांक 4 का एक गुणक हावे अउ 3 का एक गुणक नी हावे। फ़ंक्शन वेक्टर में प्रविष्टियों ल बदल नहीं देत हावे जिनकी सूचकांक 3 या 4 का एक गुणक नी हावे। फ़ंक्शन तब सभी प्रविष्टियों का योग लौटाता हावे। उदाहरणः >>> lst (long({(long) 1, (long) 2, (long) 3})) >>> lst (long ((long)) >>> lst ({(long) -1, (long) -5, (long) 2, (long) -1, (long) -5}))
long sum_squares(std::vector<long> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_squares(std::vector<long> lst) {
    long sum = 0;
    for (size_t i = 0; i < lst.size(); ++i) {
        if (i % 3 == 0) {
            sum += lst[i] * lst[i];
        } else if (i % 4 == 0) {
            sum += lst[i] * lst[i] * lst[i];
        } else {
            sum += lst[i];
        }
    }
    return sum;
}","}
int main() {
    auto candidate = sum_squares;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));
    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));
    assert(candidate((std::vector<long>())) == (0));
    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));
    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));
    assert(candidate((std::vector<long>({(long)0}))) == (0));
    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));
    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));
    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));
    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));
    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));
}
"
HumanEval/143,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक वाक्य के प्रतिनिधित्व करे वाली स्ट्रिंग दिए जात हवय , वाक्य में कुछु शब्द होत हवयं जेहर एक स्पेस से अलग होत हवयं, अउ आप ल एक स्ट्रिंग ल वापस करना होत हवय जेमा मूल वाक्य ले शब्द होत हवयं, जेखर लंबाई प्राइम नंबर होत हवय , नवा स्ट्रिंग में शब्दमन के क्रम मूल के समान होना चाहि। उदाहरण 1: >>> words_in_sentence ({""ये एक परीक्षण हवय"") "") "") उदाहरण 2: >>> words_in_sentence ({""ले चलो पौधा बर जाना हवय"") "") "") (""जाओ बर"") बाधाओं: * 1 <= len ({""सत्र) "") <= 100 * वाक्य में केवल अक्षर होत हवयं
std::string words_in_sentence(std::string sentence) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

std::string words_in_sentence(std::string sentence) {
    std::string result = """";
    std::stringstream ss(sentence);
    std::string word;
    while (ss >> word) {
        if (is_prime(word.length())) {
            if (!result.empty()) {
                result += "" "";
            }
            result += word;
        }
    }
    return result;
}","}
int main() {
    auto candidate = words_in_sentence;
    assert(candidate((""This is a test"")) == (""is""));
    assert(candidate((""lets go for swimming"")) == (""go for""));
    assert(candidate((""there is no place available here"")) == (""there is no place""));
    assert(candidate((""Hi I am Hussein"")) == (""Hi am Hussein""));
    assert(candidate((""go for it"")) == (""go for it""));
    assert(candidate((""here"")) == (""""));
    assert(candidate((""here is"")) == (""is""));
}
"
HumanEval/144,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आपके काम एक फ़ंक्शन लागू करना हवय जेहर अभिव्यक्ति के सरलीकृत करही एक्स * एन। फ़ंक्शन सत्य ल वापस करत हवय यदि एक्स * एन एक पूर्ण संख्या अउ अन्यथा गलत के मूल्यांकन करत हवय। दुनो एक्स अउ एन, एक अंश के स्ट्रिंग प्रतिनिधित्व हंवय, अउ निम्नलिखित प्रारूप, <न्यूमेरर> / <नोमिनर> जहां दुनो नुमरेटर अउ नामकरण सकारात्मक पूर्ण संख्या हंवय । आप मान सकत हंवय कि एक्स, अउ एन मान्य अंश हंवय, अउ शून्य के रूप में नामकरण नी हवय। >>> सरलीकृत ((""1/5""), (""5/1"")) (सही) >>> सरलीकृत ((""1/6""), (""2/1"") (गलत) >>> सरलीकृत ((""7/10""), (""10/2"") (गलत)
bool simplify(std::string x, std::string n) {
","#include<assert.h>
#include<bits/stdc++.h>

long gcd(long a, long b) {
    while (b) {
        a %= b;
        std::swap(a, b);
    }
    return a;
}

bool simplify(std::string x, std::string n) {
    long x_num, x_den, n_num, n_den;
    size_t slash_pos = x.find('/');
    x_num = std::stol(x.substr(0, slash_pos));
    x_den = std::stol(x.substr(slash_pos + 1));

    slash_pos = n.find('/');
    n_num = std::stol(n.substr(0, slash_pos));
    n_den = std::stol(n.substr(slash_pos + 1));

    long num = x_num * n_num;
    long den = x_den * n_den;

    long common_divisor = gcd(num, den);
    den /= common_divisor;

    return den == 1;
}","}
int main() {
    auto candidate = simplify;
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/6""), (""2/1"")) == (false));
    assert(candidate((""5/1""), (""3/1"")) == (true));
    assert(candidate((""7/10""), (""10/2"")) == (false));
    assert(candidate((""2/10""), (""50/10"")) == (true));
    assert(candidate((""7/2""), (""4/2"")) == (true));
    assert(candidate((""11/6""), (""6/1"")) == (true));
    assert(candidate((""2/3""), (""5/2"")) == (false));
    assert(candidate((""5/2""), (""3/5"")) == (false));
    assert(candidate((""2/4""), (""8/4"")) == (true));
    assert(candidate((""2/4""), (""4/2"")) == (true));
    assert(candidate((""1/5""), (""5/1"")) == (true));
    assert(candidate((""1/5""), (""1/5"")) == (false));
}
"
HumanEval/145,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर पूर्णांक के दिए गए वेक्टर के क्रमबद्ध करत हवय, ओमनके अंकों के योग के अनुसार। नोटः यदि ओमनके अंकों के समान योग के साथ कईठन आइटम हंवय, त ओमनल मूल वेक्टर में अपन इंडेक्स के आधार म क्रमबद्ध करव। उदाहरण बर: >>> order_by_points((std::vector<long>({long) 1, (long) 11, (long) -1, (long) -1, (long) -12}))) (std::vector<long>({long) -1, (long) -11, (long) 1, (long) -12, (long) 11})) >>> order_by_points((std::vector<long>())) (std::vector<long>(long))
std::vector<long> order_by_points(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

long sum_digits(long n) {
    long sum = 0;
    std::string s = std::to_string(std::abs(n));
    for (char c : s) {
        sum += c - '0';
    }
    return sum;
}

std::vector<long> order_by_points(std::vector<long> nums) {
    std::vector<std::pair<long, size_t>> indexed_nums;
    for (size_t i = 0; i < nums.size(); ++i) {
        indexed_nums.push_back({nums[i], i});
    }

    std::sort(indexed_nums.begin(), indexed_nums.end(), [](const std::pair<long, size_t>& a, const std::pair<long, size_t>& b) {
        long sum_a = sum_digits(a.first);
        long sum_b = sum_digits(b.first);
        if (sum_a != sum_b) {
            return sum_a < sum_b;
        }
        return a.second < b.second;
    });

    std::vector<long> result;
    for (const auto& pair : indexed_nums) {
        result.push_back(pair.first);
    }
    return result;
}","}
int main() {
    auto candidate = order_by_points;
    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));
    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));
    assert(candidate((std::vector<long>())) == (std::vector<long>()));
    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));
    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));
}
"
HumanEval/146,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जो इनपुट के रूप में संख्याओं के एक वेक्टर लेता है और वेक्टर में तत्वों की संख्या लौटाता है जो 10 से अधिक है और एक संख्या के पहले और आखिरी अंक दोनों विषम (1, 3, 5, 7, 9) हैं। उदाहरण के लिएः >>> specialFilter((std::vector<long>({(long) 15, (long) -73, (long) 14, (long) -15}))) (1) >>> specialFilter((std::vector<long>({(long) 33, (long) -2, (long) -3, (long) -4, (long) 21, (long) 109} (2))))
long specialFilter(std::vector<long> nums) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_odd_digit(char c) {
    return (c == '1' || c == '3' || c == '5' || c == '7' || c == '9');
}

long specialFilter(std::vector<long> nums) {
    long count = 0;
    for (long num : nums) {
        if (std::abs(num) > 10) {
            std::string s = std::to_string(std::abs(num));
            if (!s.empty() && is_odd_digit(s.front()) && is_odd_digit(s.back())) {
                count++;
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = specialFilter;
    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));
    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));
    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));
    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));
    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));
    assert(candidate((std::vector<long>({(long)1}))) == (0));
    assert(candidate((std::vector<long>())) == (0));
}
"
HumanEval/147,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक सकारात्मक पूर्णांक n दिए जात हवय। आप ल लंबाई के पूर्णांक वेक्टर बनाना होत हवय। प्रत्येक i (1 ≤ i ≤ n) बर, ए [आई] = आई * आई - आई + 1 के मूल्य। ए के तिगुनी (ए [आई], ए [जे], ए [के]) के संख्या ल लौटाएं जहां आई < जे < के, अउ ए [आई] + ए [जे] + ए [के] 3 के गुणक हवय। उदाहरणः >>> get_max_triples (((5)) (1) स्पष्टीकरणः ए = [1, 3, 7, 13, 21] एकमात्र वैध ट्रिपल (1, 7, 13) हवय।
long get_max_triples(long n) {
","#include<assert.h>
#include<bits/stdc++.h>

long get_max_triples(long n) {
    if (n < 3) {
        return 0;
    }
    std::vector<long> a(n);
    for (long i = 0; i < n; ++i) {
        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;
    }

    long count = 0;
    for (long i = 0; i < n; ++i) {
        for (long j = i + 1; j < n; ++j) {
            for (long k = j + 1; k < n; ++k) {
                if ((a[i] + a[j] + a[k]) % 3 == 0) {
                    count++;
                }
            }
        }
    }
    return count;
}","}
int main() {
    auto candidate = get_max_triples;
    assert(candidate((5)) == (1));
    assert(candidate((6)) == (4));
    assert(candidate((10)) == (36));
    assert(candidate((100)) == (53361));
}
"
HumanEval/148,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// सौर मंडल म आठ ग्रह हे: सूर्य के सबले निकट बुध हे, अगला शुक्र हे, फेर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून हे। एक फंक्शन लिखव जेमा ग्रह 1 अउ ग्रह 2 के स्ट्रिंग के रूप म दुनो ग्रह के नाम ले जाथे। फंक्शन ल एक टपल ल वापस करना चाहि जेमा जम्मो ग्रहमन के कक्षा ग्रह 1 के कक्षा अउ ग्रह 2 के कक्षा के बीच स्थित हवय, सूर्य के निकटता के आधार म सॉर्ट करे गए हवय। फंक्शन ल खाली टपल ल वापस करना चाहि यदि ग्रह 1 या ग्रह 2 सही ग्रह नाम नी होए। उदाहरण >>> bf((""ज्योतिष""), (""नप्च्यून"")) (std::vector<std::string>{(std::string)) ""शनि"", (std::vector) ""उरांस""} (std::vector) >>> bf((""पृथ्वी""), (""मर्क्यूरी"") (std::vector::std::vector"") (स्रिंग) (स्टड::vector) (स्रिंग) (स्टडःवी) (स्टडः ""मेरु""मर्क्यूरी""): (स्टडः"") (स्टडः ""मर्क्यूरी"" स्टडः"") (स्टडः (स्टडः ""स्टडः ""स्ट्रिंग"" मर्क्यूर"") (स्टडः (स्टडः ""स्ट्रिंग) (स्ट"" मर्क्यूर"") (स्टडः (स्टडः "" (स्ट्रिंग) (स्ट"" मर्क्यूर "") (स्ट्रिंग"") (स्ट्रिंग""स्ट""स्ट""स्ट""स्ट""स्ट्रिंग"") (स्ट्रिंग"") (स्ट्रिंग"") (स्ट्रिंग"") (स्ट्रिंग"") (स्ट्रिंग"") (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग) (स्ट्रिंग)
std::vector<std::string> bf(std::string planet1, std::string planet2) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> bf(std::string planet1, std::string planet2) {
    std::vector<std::string> planets = {""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""};
    auto it1 = std::find(planets.begin(), planets.end(), planet1);
    auto it2 = std::find(planets.begin(), planets.end(), planet2);

    if (it1 == planets.end() || it2 == planets.end()) {
        return {};
    }

    int index1 = std::distance(planets.begin(), it1);
    int index2 = std::distance(planets.begin(), it2);

    if (index1 == index2) {
        return {};
    }

    int start = std::min(index1, index2) + 1;
    int end = std::max(index1, index2);

    std::vector<std::string> result;
    for (int i = start; i < end; ++i) {
        result.push_back(planets[i]);
    }
    return result;
}","}
int main() {
    auto candidate = bf;
    assert(candidate((""Jupiter""), (""Neptune"")) == (std::vector<std::string>({(std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Mercury"")) == (std::vector<std::string>({(std::string)""Venus""})));
    assert(candidate((""Mercury""), (""Uranus"")) == (std::vector<std::string>({(std::string)""Venus"", (std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn""})));
    assert(candidate((""Neptune""), (""Venus"")) == (std::vector<std::string>({(std::string)""Earth"", (std::string)""Mars"", (std::string)""Jupiter"", (std::string)""Saturn"", (std::string)""Uranus""})));
    assert(candidate((""Earth""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Mars""), (""Earth"")) == (std::vector<std::string>()));
    assert(candidate((""Jupiter""), (""Makemake"")) == (std::vector<std::string>()));
}
"
HumanEval/149,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर स्ट्रिंग्स के एक वैक्टर के पैरामीटर के रूप में स्वीकार करत हवय, स्ट्रिंग्स के स्ट्रिंग्स के हटा देत हवय, अउ एक सॉर्ट किए गए ऑर्डर के साथ परिणामी वैक्टर ल वापस करत हवय, वेक्टर हमेशा स्ट्रिंग्स के एक वैक्टर होत हवय अउ कभी घलो संख्याओं के वैक्टर नी होत हवय, अउ इसमें डुप्लिकेट हो सकत हंवय । वैक्टर के ऑर्डर हर शब्द के लंबाई के अनुसार आरोही होना चाहि, अउ आप ल ओ नियम से सॉर्ट करे गए वैक्टर ल वापस करना चाहि । यदि दु शब्द के समान लंबाई होत हवय, तो वेक्टर के वर्णमाला क्रम में सॉर्ट करव । फ़ंक्शन ल सॉर्ट किए गए क्रम में स्ट्रिंग्स के वैक्टर ल वापस करना चाहि । आप मान सकत हंवय कि जम्मो शब्दमन के समान लंबाई होही । उदाहरण बर: >>> list_sort{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""}: std{""d""d""}: std{""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""d""
std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {
    std::vector<std::string> even_length_strings;
    for (const std::string& s : lst) {
        if (s.length() % 2 == 0) {
            even_length_strings.push_back(s);
        }
    }

    std::sort(even_length_strings.begin(), even_length_strings.end(), [](const std::string& a, const std::string& b) {
        if (a.length() != b.length()) {
            return a.length() < b.length();
        }
        return a < b;
    });

    return even_length_strings;
}","}
int main() {
    auto candidate = sorted_list_sum;
    assert(candidate((std::vector<std::string>({(std::string)""aa"", (std::string)""a"", (std::string)""aaa""}))) == (std::vector<std::string>({(std::string)""aa""})));
    assert(candidate((std::vector<std::string>({(std::string)""school"", (std::string)""AI"", (std::string)""asdf"", (std::string)""b""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""asdf"", (std::string)""school""})));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""b"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""d"", (std::string)""dcba"", (std::string)""abcd"", (std::string)""a""}))) == (std::vector<std::string>({(std::string)""abcd"", (std::string)""dcba""})));
    assert(candidate((std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""}))) == (std::vector<std::string>({(std::string)""AI"", (std::string)""ai"", (std::string)""au""})));
    assert(candidate((std::vector<std::string>({(std::string)""a"", (std::string)""b"", (std::string)""b"", (std::string)""c"", (std::string)""c"", (std::string)""a""}))) == (std::vector<std::string>()));
    assert(candidate((std::vector<std::string>({(std::string)""aaaa"", (std::string)""bbbb"", (std::string)""dd"", (std::string)""cc""}))) == (std::vector<std::string>({(std::string)""cc"", (std::string)""dd"", (std::string)""aaaa"", (std::string)""bbbb""})));
}
"
HumanEval/150,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सरल कार्यक्रम जेला एक्स के मूल्य ल लौटा देना चाहि यदि एन एक प्रमुख संख्या हवय अउ अन्यथा वाई के मूल्य ल लौटा देना चाहि। उदाहरणः >>> एक्स_या_वाई((7), (34), (12)) (34) >>> एक्स_या_वाई(15), (8), (5) (5)
long x_or_y(long n, long x, long y) {
","#include<assert.h>
#include<bits/stdc++.h>

bool is_prime(long n) {
    if (n <= 1) return false;
    for (long i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

long x_or_y(long n, long x, long y) {
    if (is_prime(n)) {
        return x;
    } else {
        return y;
    }
}","}
int main() {
    auto candidate = x_or_y;
    assert(candidate((7), (34), (12)) == (34));
    assert(candidate((15), (8), (5)) == (5));
    assert(candidate((3), (33), (5212)) == (33));
    assert(candidate((1259), (3), (52)) == (3));
    assert(candidate((7919), (-1), (12)) == (-1));
    assert(candidate((3609), (1245), (583)) == (583));
    assert(candidate((91), (56), (129)) == (129));
    assert(candidate((6), (34), (1234)) == (1234));
    assert(candidate((1), (2), (0)) == (0));
    assert(candidate((2), (2), (0)) == (2));
}
"
HumanEval/151,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// संख्याओं के एक वेक्टर दिए गए, वेक्टर में उन संख्याओं के वर्गों के योग ल वापस कर दिस जात हावे जो विषम हावें। नकारात्मक या पूर्णांक नी हावें। >>> डबल_द_डिफरेंस ({(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
long double_the_difference(std::vector<float> lst) {
","#include<assert.h>
#include<bits/stdc++.h>

long double_the_difference(std::vector<float> lst) {
    long sum_of_squares = 0;
    for (float num : lst) {
        if (num > 0 && static_cast<long>(num) == num && static_cast<long>(num) % 2 != 0) {
            sum_of_squares += static_cast<long>(num) * static_cast<long>(num);
        }
    }
    return sum_of_squares;
}","}
int main() {
    auto candidate = double_the_difference;
    assert(candidate((std::vector<float>())) == (0));
    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));
    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));
    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));
    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));
    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));
}
"
HumanEval/152,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// मैं सोचता हूं कि हम जम्मो ल याद हवय कि भावना जब कुछु लंबे समय तक प्रतीक्षित घटना के परिणाम आखिरकार ज्ञात हवय। भावना अउ विचार जो आपके पास ओ समय निश्चित रूप ले नोट करे अउ तुलना करे के लायक हवय। आपके काम ए निर्धारित करना हवय कि का कोई मनखे सही ढंग ले कईठन मैचों के परिणामों के अनुमान लगाता हवय। आप ल स्कोर के दो वेक्टर दिए जात हवय अउ प्रत्येक सूचकांक एक मैच दिखाता हवय। एक ही लंबाई के एक वेक्टर ल वापस करत हवय कि प्रत्येक अनुमान कितनी दूर रहिस। यदि वे सही ढंग ले अनुमान लगा चुके हवय, तो मूल्य 0, हवय अउ यदि नी, तो मूल्य अनुमान अउ स्कोर के बीच पूर्ण अंतर हवय। उदाहरण: >>> (long) long (long) long (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (long) (
std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {
    std::vector<long> diff;
    for (size_t i = 0; i < game.size(); ++i) {
        diff.push_back(std::abs(game[i] - guess[i]));
    }
    return diff;
}","}
int main() {
    auto candidate = compare;
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));
    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));
    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));
}
"
HumanEval/153,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक वर्ग (एक स्ट्रिंग) अउ एक्सटेंशन के एक वेक्टर के नाम दिस जाही। एक्सटेंशन के उपयोग वर्ग बर अतिरिक्त वर्ग लोड करे बर करे जाना हवय। एक्सटेंशन के ताकत ए प्रकार हवय: सीएपी एक्सटेंशन के नाम म अपरकेस अक्षर के संख्या हो, अउ एसएम एक्सटेंशन के नाम म लोकरस अक्षर के संख्या हो, ताकत अंश सीएपी - एसएम द्वारा दी जा रही हवय। आप ल सबले मजबूत एक्सटेंशन ढूंढना चाहि अउ ए प्रारूप म एक स्ट्रिंग लौटा देना चाहि: क्लासनाम। सबले मजबूत एक्सटेंशन नाम। यदि एक ही ताकत के साथ दु या अधिक एक्सटेंशन हंवय , तो आप ल वेक्टर म पहीली आहर वाले ल चुनना चाहि। उदाहरण बर, यदि आप ल एक्सटेंशन के वर्ग अउ वेक्टर के रूप म ""स्लाइस"" दिए जात हवय: ['एसईआरएलआईएनजीएससीएससीएस', 'चीज', 'स्टुफेड' '] त आप ल 'एसईआरएलआईएनजीसीएस' ल लौटा देना चाहि 'एसईआरएलआईएनजीसीएससीएस'::::: एसईआरआईएनजीसीः: एसईः एसईः एसईः एसईः एसईः एसईः एसः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः (एड) (एः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः एसडीः डी) (Strongestestestest) (StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString
std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
","#include<assert.h>
#include<bits/stdc++.h>

int calculate_strength(const std::string& extension) {
    int cap_count = 0;
    int sm_count = 0;
    for (char c : extension) {
        if (isupper(c)) {
            cap_count++;
        } else if (islower(c)) {
            sm_count++;
        }
    }
    return cap_count - sm_count;
}

std::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {
    if (extensions.empty()) {
        return class_name;
    }

    std::string strongest_extension = extensions[0];
    int max_strength = calculate_strength(extensions[0]);

    for (size_t i = 1; i < extensions.size(); ++i) {
        int current_strength = calculate_strength(extensions[i]);
        if (current_strength > max_strength) {
            max_strength = current_strength;
            strongest_extension = extensions[i];
        }
    }

    return class_name + ""."" + strongest_extension;
}","}
int main() {
    auto candidate = Strongest_Extension;
    assert(candidate((""Watashi""), (std::vector<std::string>({(std::string)""tEN"", (std::string)""niNE"", (std::string)""eIGHt8OKe""}))) == (""Watashi.eIGHt8OKe""));
    assert(candidate((""Boku123""), (std::vector<std::string>({(std::string)""nani"", (std::string)""NazeDa"", (std::string)""YEs.WeCaNe"", (std::string)""32145tggg""}))) == (""Boku123.YEs.WeCaNe""));
    assert(candidate((""__YESIMHERE""), (std::vector<std::string>({(std::string)""t"", (std::string)""eMptY"", (std::string)""nothing"", (std::string)""zeR00"", (std::string)""NuLl__"", (std::string)""123NoooneB321""}))) == (""__YESIMHERE.NuLl__""));
    assert(candidate((""K""), (std::vector<std::string>({(std::string)""Ta"", (std::string)""TAR"", (std::string)""t234An"", (std::string)""cosSo""}))) == (""K.TAR""));
    assert(candidate((""__HAHA""), (std::vector<std::string>({(std::string)""Tab"", (std::string)""123"", (std::string)""781345"", (std::string)""-_-""}))) == (""__HAHA.123""));
    assert(candidate((""YameRore""), (std::vector<std::string>({(std::string)""HhAas"", (std::string)""okIWILL123"", (std::string)""WorkOut"", (std::string)""Fails"", (std::string)""-_-""}))) == (""YameRore.okIWILL123""));
    assert(candidate((""finNNalLLly""), (std::vector<std::string>({(std::string)""Die"", (std::string)""NowW"", (std::string)""Wow"", (std::string)""WoW""}))) == (""finNNalLLly.WoW""));
    assert(candidate((""_""), (std::vector<std::string>({(std::string)""Bb"", (std::string)""91245""}))) == (""_.Bb""));
    assert(candidate((""Sp""), (std::vector<std::string>({(std::string)""671235"", (std::string)""Bb""}))) == (""Sp.671235""));
}
"
HumanEval/154,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल 2 शब्द दिए जात हवय । आप ल सच ल वापस करे के जरूरत हवय यदि दूसर शब्द या एखर कन्हु घलो रोटेशन पहला शब्द >>> cycpattern_check((""abcd""), (""abd"")) (गलत) >>> cycpattern_check((""hello""), (""ell"")) (सही) >>> cycpattern_check((""whassup""), (""psus"")) (गलत) >>> cycpattern_check((""abab""), (""baa"")) (सही) >>> cycpattern_(check""efef""), (""eeff"") (गलत) >>> cycpattern_check((""himens""), (""simen"") (सही) म एक सबस्ट्रिंग हवय ।
bool cycpattern_check(std::string a, std::string b) {
","#include<assert.h>
#include<bits/stdc++.h>

bool cycpattern_check(std::string a, std::string b) {
    if (b.empty()) {
        return true;
    }
    if (a.length() < b.length()) {
        return false;
    }
    for (int i = 0; i < b.length(); ++i) {
        std::rotate(b.begin(), b.begin() + 1, b.end());
        if (a.find(b) != std::string::npos) {
            return true;
        }
    }
    return false;
}","}
int main() {
    auto candidate = cycpattern_check;
    assert(candidate((""xyzw""), (""xyw"")) == (false));
    assert(candidate((""yello""), (""ell"")) == (true));
    assert(candidate((""whattup""), (""ptut"")) == (false));
    assert(candidate((""efef""), (""fee"")) == (true));
    assert(candidate((""abab""), (""aabb"")) == (false));
    assert(candidate((""winemtt""), (""tinem"")) == (true));
}
"
HumanEval/155,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक पूर्णांक दिए गए हवय, एक टपल ल वापस करत हवय जेमा क्रमशः सम अउ विषम अंकों के संख्या होत हवय। उदाहरण: >>> even_odd_count((-12)) (std::make_tuple(1, 1)) >>> even_odd_count((123)) (std::make_tuple(1, 2))
std::tuple<long, long> even_odd_count(long num) {
","#include<assert.h>
#include<bits/stdc++.h>
#include<tuple>

std::tuple<long, long> even_odd_count(long num) {
    long even_count = 0;
    long odd_count = 0;
    std::string s = std::to_string(std::abs(num));
    for (char c : s) {
        int digit = c - '0';
        if (digit % 2 == 0) {
            even_count++;
        } else {
            odd_count++;
        }
    }
    return std::make_tuple(even_count, odd_count);
}","}
int main() {
    auto candidate = even_odd_count;
    assert(candidate((7)) == (std::make_tuple(0, 1)));
    assert(candidate((-78)) == (std::make_tuple(1, 1)));
    assert(candidate((3452)) == (std::make_tuple(2, 2)));
    assert(candidate((346211)) == (std::make_tuple(3, 3)));
    assert(candidate((-345821)) == (std::make_tuple(3, 3)));
    assert(candidate((-2)) == (std::make_tuple(1, 0)));
    assert(candidate((-45347)) == (std::make_tuple(2, 3)));
    assert(candidate((0)) == (std::make_tuple(1, 0)));
}
"
HumanEval/156,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक सकारात्मक पूर्णांक दिए गए, एक स्ट्रिंग के रूप में अपन रोमन अंकों के समकक्ष प्राप्त करव, अउ एला लोअरकेस में लौटाएं। प्रतिबंधः 1 <= संख्या <= 1000 उदाहरणः >>> int_to_mini_roman((19)) (""xix"") >>> int_to_mini_roman((152)) (""clii"") >>> int_to_mini_roman(426)) (""cdxxvi"")
std::string int_to_mini_roman(long number) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string int_to_mini_roman(long number) {
    std::string roman = """";
    std::vector<std::pair<int, std::string>> roman_map = {
        {1000, ""m""}, {900, ""cm""}, {500, ""d""}, {400, ""cd""}, {100, ""c""},
        {90, ""xc""}, {50, ""l""}, {40, ""xl""}, {10, ""x""}, {9, ""ix""}, {5, ""v""},
        {4, ""iv""}, {1, ""i""}
    };

    for (const auto& pair : roman_map) {
        while (number >= pair.first) {
            roman += pair.second;
            number -= pair.first;
        }
    }
    return roman;
}","}
int main() {
    auto candidate = int_to_mini_roman;
    assert(candidate((19)) == (""xix""));
    assert(candidate((152)) == (""clii""));
    assert(candidate((251)) == (""ccli""));
    assert(candidate((426)) == (""cdxxvi""));
    assert(candidate((500)) == (""d""));
    assert(candidate((1)) == (""i""));
    assert(candidate((4)) == (""iv""));
    assert(candidate((43)) == (""xliii""));
    assert(candidate((90)) == (""xc""));
    assert(candidate((94)) == (""xciv""));
    assert(candidate((532)) == (""dxxxii""));
    assert(candidate((900)) == (""cm""));
    assert(candidate((994)) == (""cmxciv""));
    assert(candidate((1000)) == (""m""));
}
"
HumanEval/157,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक त्रिकोण के तीन किनारों के लंबाई ल देखते हुए। यदि तीन पक्ष एक समकोण त्रिभुज बनाते हावें तो सच लौटाएं, अन्यथा गलत। एक समकोण त्रिभुज एक त्रिभुज हावे जेमे एक कोण 90 डिग्री या 90 डिग्री हावे। उदाहरणः >>> right_angle_triangle((3), (4), (5)) (सही) >>> right_angle_triangle(1), (2), (3)) (गलत)
bool right_angle_triangle(long a, long b, long c) {
","#include<assert.h>
#include<bits/stdc++.h>

bool right_angle_triangle(long a, long b, long c) {
    std::vector<long> sides = {a, b, c};
    std::sort(sides.begin(), sides.end());
    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);
}","}
int main() {
    auto candidate = right_angle_triangle;
    assert(candidate((3), (4), (5)) == (true));
    assert(candidate((1), (2), (3)) == (false));
    assert(candidate((10), (6), (8)) == (true));
    assert(candidate((2), (2), (2)) == (false));
    assert(candidate((7), (24), (25)) == (true));
    assert(candidate((10), (5), (7)) == (false));
    assert(candidate((5), (12), (13)) == (true));
    assert(candidate((15), (8), (17)) == (true));
    assert(candidate((48), (55), (73)) == (true));
    assert(candidate((1), (1), (1)) == (false));
    assert(candidate((2), (2), (10)) == (false));
}
"
HumanEval/158,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक फ़ंक्शन लिखें जेहर स्ट्रिंग्स के एक वेक्टर स्वीकार करत हवय। वेक्टर में कईठन शब्द होत हंवय। अद्वितीय वर्णों के अधिकतम संख्या के साथ शब्द लौटाएं। यदि कईठन स्ट्रिंग्स में अद्वितीय वर्णों के अधिकतम संख्या होत हवय, तो शाब्दिक क्रम में पहला आहर वाला ल लौटाएं। >>> find_max(std:: vector<std::string>({(std::string) ""नाम"", (स्टड:: स्ट्रिंग) ""के"", (स्टड:: स्ट्रिंग) ""स्ट्रिंग""}))) (""स्ट्रिंग"") >>> find_max{(स्टड:: vector<std::string>{(स्टड:: स्ट्रिंग) ""नाम"", (स्टड:: स्ट्रिंग) """", (स्टड:: स्ट्रिंग) ""> (स्टड:: स्ट्रिंग) ""> (स्टड:: स्ट्रिंग) ""> (स्टड:: स्ट्रिंग) ""> (स्टड:: स्ट्रिंग) ""> (स्टड:: स्ट्रिंग) ""> (स्टड:: स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> (स्टडः स्ट्रिंग) ""> स्ट्रिंग"" स्ट्रिंग"")
std::string find_max(std::vector<std::string> words) {
","#include<assert.h>
#include<bits/stdc++.h>

int count_unique_chars(const std::string& s) {
    std::set<char> unique_chars;
    for (char c : s) {
        unique_chars.insert(c);
    }
    return unique_chars.size();
}

std::string find_max(std::vector<std::string> words) {
    if (words.empty()) {
        return """";
    }

    std::string max_unique_word = words[0];
    int max_unique_count = count_unique_chars(words[0]);

    for (size_t i = 1; i < words.size(); ++i) {
        int current_unique_count = count_unique_chars(words[i]);
        if (current_unique_count > max_unique_count) {
            max_unique_count = current_unique_count;
            max_unique_word = words[i];
        } else if (current_unique_count == max_unique_count && words[i] < max_unique_word) {
            max_unique_word = words[i];
        }
    }
    return max_unique_word;
}","}
int main() {
    auto candidate = find_max;
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""of"", (std::string)""string""}))) == (""string""));
    assert(candidate((std::vector<std::string>({(std::string)""name"", (std::string)""enam"", (std::string)""game""}))) == (""enam""));
    assert(candidate((std::vector<std::string>({(std::string)""aaaaaaa"", (std::string)""bb"", (std::string)""cc""}))) == (""aaaaaaa""));
    assert(candidate((std::vector<std::string>({(std::string)""abc"", (std::string)""cba""}))) == (""abc""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""this"", (std::string)""game"", (std::string)""of"", (std::string)""footbott""}))) == (""footbott""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""gonna"", (std::string)""rock""}))) == (""gonna""));
    assert(candidate((std::vector<std::string>({(std::string)""we"", (std::string)""are"", (std::string)""a"", (std::string)""mad"", (std::string)""nation""}))) == (""nation""));
    assert(candidate((std::vector<std::string>({(std::string)""this"", (std::string)""is"", (std::string)""a"", (std::string)""prrk""}))) == (""this""));
    assert(candidate((std::vector<std::string>({(std::string)""b""}))) == (""b""));
    assert(candidate((std::vector<std::string>({(std::string)""play"", (std::string)""play"", (std::string)""play""}))) == (""play""));
}
"
HumanEval/159,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप एक भूखे खरगोश हो, अउ आप पहीली ले ही एक निश्चित संख्या म गाजर खा चुके हो, लेकिन अब आप ल दिन के भोजन ल पूरा करे बर ज्यादा गाजर के जरूरत हे। आप ल एक वेक्टर ल वापस करना चाहि [आपके भोजन के बाद खाए गए गाजर के कुल संख्या, आपके भोजन के बाद बांचे गाजर के संख्या ] यदि आपके पास पर्याप्त शेष गाजर नी हवय, तो आप जम् मो शेष गाजर खा लेंगे, लेकिन अभी भी भूखे होहू। उदाहरणः >>> खाओ (((5), (6), (10)) (std::vector<long>{(() 11, (long) 4)) >>> खाओ (((4), (8), (9) (std::vector<long>{() 12, ( () 1})) खाओ >>> ((1), (10), (10) (std::vector<long>{
std::vector<long> eat(long number, long need, long remaining) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> eat(long number, long need, long remaining) {
    long eaten = 0;
    long left = remaining;
    long to_eat = need;

    if (left >= to_eat) {
        eaten = to_eat;
        left -= to_eat;
    } else {
        eaten = left;
        left = 0;
    }

    return {(long)number + eaten, left};
}","}
int main() {
    auto candidate = eat;
    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));
    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));
    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));
    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));
    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));
    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));
}
"
HumanEval/160,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// ऑपरेटर अउ ऑपरेन्ड के साथ दो वेक्टर दिए गए। पहला वेक्टर में बुनियादी बीजगणित संचालन होत हवय, अउ दूसरा वेक्टर पूर्णांक के एक वेक्टर होत हवय। बीजगणितीय अभिव्यक्ति के निर्माण बर दू दिए गए वेक्टर के उपयोग करव अउ इ अभिव्यक्ति के मूल्यांकन ल वापस करव। बुनियादी बीजगणित संचालन: अतिरिक्त (+) घटाव ()) - गुणा (*) फर्श विभाजन ( //) एक्सपोनेंशियल (**) उदाहरण: ऑपरेटर ['+', '*', '-'] वेक्टर = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोट: ऑपरेटर के लंबाई वेक्टर के लंबाई के बराबर होत हवय। ऑपरेन्ड गैर-नकारात्मक पूर्णांक के एक वेक्टर होत हवय। ऑपरेटर के वेक्टर में कम ले कम एक ऑपरेडर होत हवय, अउ ऑपरेन्ड के वेक्टर में कम ले कम दु ऑपरेन्ड होत हवय।
long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
","#include<assert.h>
#include<bits/stdc++.h>

long do_algebra(std::vector<std::string> op, std::vector<long> operand) {
    std::vector<long> current_operand = operand;
    std::vector<std::string> current_operator = op;

    auto apply_op = [&](long a, long b, const std::string& o) {
        if (o == ""+"") return a + b;
        if (o == ""-"") return a - b;
        if (o == ""*"") return a * b;
        if (o == ""//"") return a / b;
        if (o == ""**"") return static_cast<long>(pow(a, b));
        return 0L; // Should not happen
    };

    std::vector<std::string> precedence1 = {""**""};
    std::vector<std::string> precedence2 = {""*"", ""//""};
    std::vector<std::string> precedence3 = {""+"", ""-""};

    auto evaluate = [&](const std::vector<std::string>& prec) {
        size_t i = 0;
        while (i < current_operator.size()) {
            bool found = false;
            for (const auto& o : prec) {
                if (current_operator[i] == o) {
                    current_operand[i] = apply_op(current_operand[i], current_operand[i + 1], current_operator[i]);
                    current_operand.erase(current_operand.begin() + i + 1);
                    current_operator.erase(current_operator.begin() + i);
                    found = true;
                    break;
                }
            }
            if (!found) {
                i++;
            }
        }
    };

    evaluate(precedence1);
    evaluate(precedence2);
    evaluate(precedence3);

    return current_operand[0];
}","}
int main() {
    auto candidate = do_algebra;
    assert(candidate((std::vector<std::string>({(std::string)""**"", (std::string)""*"", (std::string)""+""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));
    assert(candidate((std::vector<std::string>({(std::string)""+"", (std::string)""*"", (std::string)""-""})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));
    assert(candidate((std::vector<std::string>({(std::string)""//"", (std::string)""*""})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));
}
"
HumanEval/161,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// आप ल एक स्ट्रिंग एस दिए जात हवय। यदि एस [आई] एक अक्षर हवय, तो अपन केस ल निचले ले ऊपरी या विसे वर्सा म उलट दें, अन्यथा एला एला जेमा रखे बर। यदि स्ट्रिंग में कन्हु अक्षर नी हवय, तो स्ट्रिंग ल उल्टा कर दें। फ़ंक्शन ल परिणामी स्ट्रिंग लौटा देना चाहि। उदाहरण >>> हल करे (((""1234"")) (""4321"") >>> हल करे ((""एबी"")) (""एबी"") >>> हल करे ((""#ए@सी"") (""#ए@सी"")
std::string solve(std::string s) {
","#include<assert.h>
#include<bits/stdc++.h>

std::string solve(std::string s) {
    bool has_letter = false;
    for (char c : s) {
        if (isalpha(c)) {
            has_letter = true;
            break;
        }
    }

    if (has_letter) {
        for (char& c : s) {
            if (islower(c)) {
                c = toupper(c);
            } else if (isupper(c)) {
                c = tolower(c);
            }
        }
    } else {
        std::reverse(s.begin(), s.end());
    }
    return s;
}","}
int main() {
    auto candidate = solve;
    assert(candidate((""AsDf"")) == (""aSdF""));
    assert(candidate((""1234"")) == (""4321""));
    assert(candidate((""ab"")) == (""AB""));
    assert(candidate((""#a@C"")) == (""#A@c""));
    assert(candidate((""#AsdfW^45"")) == (""#aSDFw^45""));
    assert(candidate((""#6@2"")) == (""2@6#""));
    assert(candidate((""#$a^D"")) == (""#$A^d""));
    assert(candidate((""#ccc"")) == (""#CCC""));
}
"
HumanEval/162,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// एक स्ट्रिंग 'टेक्स्ट' दिए गए हवय, एखर एमडी 5 हैश समकक्ष स्ट्रिंग ल लौटाएं। यदि 'टेक्स्ट' एक खाली स्ट्रिंग हवय, तो लौटाएं। >>> string_to_md5 ((((""हैलो वर्ल्ड"")) ""3e25960a79dbc69b674cd4ec67a72c62""
std::optional<std::string> string_to_md5(std::string text) {
","#include<assert.h>
#include<bits/stdc++.h>
#include <optional>

#include <openssl/md5.h>
#include <iomanip>
#include <sstream>

std::optional<std::string> string_to_md5(std::string text) {
    if (text.empty()) {
        return std::nullopt;
    }

    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)text.c_str(), text.length(), digest);

    std::stringstream ss;
    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];
    }
    return ss.str();
}","}
int main() {
    auto candidate = string_to_md5;
    assert(candidate((""Hello world"")) == ""3e25960a79dbc69b674cd4ec67a72c62"");
    assert(candidate(("""")) == std::nullopt);
    assert(candidate((""A B C"")) == ""0ef78513b0cb8cef12743f5aeb35f888"");
    assert(candidate((""password"")) == ""5f4dcc3b5aa765d61d8327deb882cf99"");
}
"
HumanEval/163,hne_Deva,cpp,"#include<assert.h>
#include<bits/stdc++.h>
// दो सकारात्मक पूर्णांक ए अउ बी दिए गए, ए अउ बी के बीच घलो अंकों ल वापस कर दिस, उदाहरन बर: >>> उत्पन्न_पूर्णांक (((2), (8)) (सेंटः: वेक्टर<लंबा> (((लंबा) 2, (लंबा) 4, (लंबा) 6, (लंबा) 8)) >>> उत्पन्न_पूर्णांक (((8), (2)) (सेंटः: वेक्टर<लंबा> (((लंबा) 2, (लंबा) 4, (लंबा) 6, (लंबा) 8)) >>> उत्पन्न_पूर्णांक (((10), (14)) (सेंटः वेक्टर<लंबा))
std::vector<long> generate_integers(long a, long b) {
","#include<assert.h>
#include<bits/stdc++.h>

std::vector<long> generate_integers(long a, long b) {
    std::vector<long> result;
    long start = std::min(a, b);
    long end = std::max(a, b);
    for (long i = start; i <= end; ++i) {
        if (i % 2 == 0) {
            result.push_back(i);
        }
    }
    return result;
}","}
int main() {
    auto candidate = generate_integers;
    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));
    assert(candidate((17), (89)) == (std::vector<long>()));
}
"
