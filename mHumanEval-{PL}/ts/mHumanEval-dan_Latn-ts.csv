task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,dan_Latn,ts,"// i den pågældende tærskel.//Tjek, om i den givne række af tal, er nogen to tal tættere på hinanden end // >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
// false
// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
// true
function has_close_elements(numbers: number[], threshold: number): boolean {
","function has_close_elements(numbers: number[], threshold: number): boolean {
    for (let i = 0; i < numbers.length; i++) {
        for (let j = i + 1; j < numbers.length; j++) {
            if (Math.abs(numbers[i] - numbers[j]) < threshold) {
                return true;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = has_close_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);
}

test();"
HumanEval_1,dan_Latn,ts,"//Glem alle mellemrum i inputstrengen.//Separerede grupper er afbalancerede (hver åben brace er ordentligt lukket) og ikke indlejret i hinanden.//Separere disse grupper i separate strenge og returnere array af dem.//Indtast til denne funktion er en streng, der indeholder flere grupper af indlejrede parenteser.// >>> separate_paren_groups(""( ) (( )) (( )( ))"")
// [""()"", ""(())"", ""(()())""]
function separate_paren_groups(paren_string: string): string[] {
","function separate_paren_groups(paren_string: string): string[] {
    const result: string[] = [];
    let currentGroup: string = """";
    let balance: number = 0;

    for (let char of paren_string) {
        if (char === ' ') {
            continue; // Ignore spaces
        }
        
        currentGroup += char;

        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        if (balance === 0 && currentGroup.length > 0) {
            result.push(currentGroup);
            currentGroup = """";
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = separate_paren_groups;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""]);
  assert.deepEqual(candidate(""(()(())((())))""),[""(()(())((())))""]);
  assert.deepEqual(candidate(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""]);
}

test();"
HumanEval_2,dan_Latn,ts,"//Videregiv den decimale del af tallet. //(resterende del altid mindre end 1).//og heltal (største heltal mindre end det givne tal) og decimaler //Hvis vi har et positivt variabeltal, kan vi dele det op i // >>> truncate_number(3.5)
// 0.5
function truncate_number(number: number): number {
","function truncate_number(number: number): number {
    const integerPart = Math.floor(number);
    return number - integerPart;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = truncate_number;
  assert.deepEqual(candidate(3.5),0.5);
  assert.deepEqual(candidate(1.25),0.25);
  assert.deepEqual(candidate(123.0),0.0);
}

test();"
HumanEval_3,dan_Latn,ts,"//På det punkt skal funktionen returnere true. Ellers skal den returnere false.//Deres opgave er at opdage, om saldoen på en konto falder under nul, og //Du får en række ind- og udbetalinger på en bankkonto, der starter med...// >>> below_zero([1, 2, 3])
// false
// >>> below_zero([1, 2, -4, 5])
// true
function below_zero(operations: number[]): boolean {
","function below_zero(operations: number[]): boolean {
    let balance = 0;
    
    for (let operation of operations) {
        balance += operation;
        if (balance < 0) {
            return true;
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_zero;
  assert.deepEqual(candidate([]),false);
  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);
  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);
  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);
}

test();"
HumanEval_4,dan_Latn,ts,"//MAD = gennemsnit. x - x_mean. //element og et midtpunkt (i dette tilfælde middelværdi): //Den gennemsnitlige absolutte afvigelse er den gennemsnitlige absolutte forskel mellem hver af de to //Omkring gennemsnittet af dette datasæt.//For en given række inputnumre beregnes den gennemsnitlige absolutte afvigelse // >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
// 1.0
function mean_absolute_deviation(numbers: number[]): number {
","function mean_absolute_deviation(numbers: number[]): number {
    const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;
    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));
    const mad = absoluteDifferences.reduce((acc, diff) => acc + diff, 0) / numbers.length;
    return mad;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = mean_absolute_deviation;
  assert.deepEqual(candidate([1.0, 2.0]),0.5);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);
}

test();"
HumanEval_5,dan_Latn,ts,"//Indsæt et tal ""afgrænsningsværdi"" mellem hver to på hinanden følgende elementer i inputarrayet ∀numre"" // >>> intersperse([], 4)
// []
// >>> intersperse([1, 2, 3], 4)
// [1, 4, 2, 4, 3]
function intersperse(numbers: number[], delimeter: number): number[] {
","function intersperse(numbers: number[], delimeter: number): number[] {
    if (numbers.length === 0) {
        return [];
    }

    let result: number[] = [];

    for (let i = 0; i < numbers.length; i++) {
        result.push(numbers[i]);
        if (i < numbers.length - 1) {
            result.push(delimeter);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersperse;
  assert.deepEqual(candidate([], 7),[]);
  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);
  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);
}

test();"
HumanEval_6,dan_Latn,ts,"//Eksempelvis har (() (()) højst to indkomstniveauer, mens ((())) har tre. //For hver gruppe angives det dybeste niveau for indlejring af parenteser. //Indgang til denne funktion er en streng repræsenteret flere grupper for indlejrede parenteser adskilt af mellemrum.// >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
// [2, 3, 1, 3]
function parse_nested_parens(paren_string: string): number[] {
","function parse_nested_parens(paren_string: string): number[] {
    return paren_string.split(' ').map(group => {
        let maxDepth = 0;
        let currentDepth = 0;

        for (const char of group) {
            if (char === '(') {
                currentDepth++;
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (char === ')') {
                currentDepth--;
            }
        }

        return maxDepth;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_nested_parens;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[2, 3, 1, 3]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[1, 2, 3, 4]);
  assert.deepEqual(candidate(""(()(())((())))""),[4]);
}

test();"
HumanEval_7,dan_Latn,ts,"//Filtrere en input matrix af strenge kun for dem, der indeholder givet understreng // >>> filter_by_substring([], ""a"")
// []
// >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
// [""abc"", ""bacd"", ""array""]
function filter_by_substring(strings: string[], substring: string): string[] {
","function filter_by_substring(strings: string[], substring: string): string[] {
    return strings.filter(s => s.includes(substring));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_substring;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""]);
}

test();"
HumanEval_8,dan_Latn,ts,"//Den tomme sum skal være lig med 0 og det tomme produkt skal være lig med 1.//For en given række af heltal returnerer en række bestående af en sum og et produkt af alle de heltal i en række.// >>> sum_product([])
// [0, 1]
// >>> sum_product([1, 2, 3, 4])
// [10, 24]
function sum_product(numbers: number[]): [number, number] {
","function sum_product(numbers: number[]): [number, number] {
    const sum = numbers.reduce((acc, curr) => acc + curr, 0);
    const product = numbers.reduce((acc, curr) => acc * curr, 1);
    return [sum, product];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_product;
  assert.deepEqual(candidate([]),[0, 1]);
  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);
  assert.deepEqual(candidate([100, 0]),[100, 0]);
  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);
  assert.deepEqual(candidate([10]),[10, 10]);
}

test();"
HumanEval_9,dan_Latn,ts,"//i rækkefølgen.//Ud fra en given række af heltal genererer vi en række med det rulende maksimum af elementer, der findes indtil det givne øjeblik.// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
// [1, 2, 3, 3, 3, 4, 4]
function rolling_max(numbers: number[]): number[] {
","function rolling_max(numbers: number[]): number[] {
    let maxArray: number[] = [];
    let currentMax: number = Number.NEGATIVE_INFINITY;
    
    for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] > currentMax) {
            currentMax = numbers[i];
        }
        maxArray.push(currentMax);
    }

    return maxArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rolling_max;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);
  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);
}

test();"
HumanEval_10,dan_Latn,ts,"//- Tilføje en string-prefix, der kommer før det palindromiske suffiks, til den anden ende af strengen.//- Find den længste postfix af den leverede streng, der er et palindrom. //Algoritme idé er enkel: //Find det korteste palindrom, der begynder med en strenge.// >>> make_palindrome("""")
// """"
// >>> make_palindrome(""cat"")
// ""catac""
// >>> make_palindrome(""cata"")
// ""catac""
function make_palindrome(string: string): string {
","function make_palindrome(string: string): string {
    function isPalindrome(s: string): boolean {
        let left = 0;
        let right = s.length - 1;
        while (left < right) {
            if (s[left] !== s[right]) return false;
            left++;
            right--;
        }
        return true;
    }

    const n = string.length;
    let longestPalindromicPostfixIndex = n;

    for (let i = 0; i < n; i++) {
        if (isPalindrome(string.substring(i))) {
            longestPalindromicPostfixIndex = i;
            break;
        }
    }

    const prefix = string.substring(0, longestPalindromicPostfixIndex);
    const reversedPrefix = prefix.split('').reverse().join('');
    return string + reversedPrefix;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_palindrome;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""x""),""x"");
  assert.deepEqual(candidate(""xyz""),""xyzyx"");
  assert.deepEqual(candidate(""xyx""),""xyx"");
  assert.deepEqual(candidate(""jerry""),""jerryrrej"");
}

test();"
HumanEval_11,dan_Latn,ts,"//Udfør binær XOR på disse input og returner resultatet også som en streng. //Indgang er to strenge a og b, der kun består af 1er og 0er.// >>> string_xor(""010"", ""110"")
// ""100""
function string_xor(a: string, b: string): string {
","function string_xor(a: string, b: string): string {
    let result = '';
    for (let i = 0; i < a.length; i++) {
        result += (a[i] === b[i] ? '0' : '1');
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_xor;
  assert.deepEqual(candidate(""111000"", ""101010""),""010010"");
  assert.deepEqual(candidate(""1"", ""1""),""0"");
  assert.deepEqual(candidate(""0101"", ""0000""),""0101"");
}

test();"
HumanEval_12,dan_Latn,ts,"//Strings af samme længde. Returnerer uddefineret, hvis inputmængden er tom. //Af en række af strenge returneres den længste.// >>> longest([])
// undefined
// >>> longest([""a"", ""b"", ""c""])
// ""a""
// >>> longest([""a"", ""bb"", ""ccc""])
// ""ccc""
function longest(strings: string[]): string | undefined {
","function longest(strings: string[]): string | undefined {
    if (strings.length === 0) {
        return undefined;
    }

    let longestString = strings[0];

    for (const str of strings) {
        if (str.length > longestString.length) {
            longestString = str;
        }
    }

    return longestString;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = longest;
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""x"");
  assert.deepEqual(candidate([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"");
}

test();"
HumanEval_13,dan_Latn,ts,"//Returnerer den største fælles divisor mellem to heltal a og b // >>> greatest_common_divisor(3, 5)
// 1
// >>> greatest_common_divisor(25, 15)
// 5
function greatest_common_divisor(a: number, b: number): number {
","function greatest_common_divisor(a: number, b: number): number {
    while (b !== 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = greatest_common_divisor;
  assert.deepEqual(candidate(3, 7),1);
  assert.deepEqual(candidate(10, 15),5);
  assert.deepEqual(candidate(49, 14),7);
  assert.deepEqual(candidate(144, 60),12);
}

test();"
HumanEval_14,dan_Latn,ts,"//Returnerer alle præfikser fra kortest til længst i inputstrengen // >>> all_prefixes(""abc"")
// [""a"", ""ab"", ""abc""]
function all_prefixes(string: string): string[] {
","function all_prefixes(string: string): string[] {
    const result: string[] = [];
    for (let i = 1; i <= string.length; i++) {
        result.push(string.substring(0, i));
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = all_prefixes;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]);
  assert.deepEqual(candidate(""WWW""),[""W"", ""WW"", ""WWW""]);
}

test();"
HumanEval_15,dan_Latn,ts,"//Returnerer en streng med rum-afgrænsede tal fra 0 op til og med n. // >>> string_sequence(0)
// ""0""
// >>> string_sequence(5)
// ""0 1 2 3 4 5""
function string_sequence(n: number): string {
","function string_sequence(n: number): string {
    let result: string[] = [];
    for (let i = 0; i <= n; i++) {
        result.push(i.toString());
    }
    return result.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_sequence;
  assert.deepEqual(candidate(0),""0"");
  assert.deepEqual(candidate(3),""0 1 2 3"");
  assert.deepEqual(candidate(10),""0 1 2 3 4 5 6 7 8 9 10"");
}

test();"
HumanEval_16,dan_Latn,ts,"//Find ud af, hvor mange forskellige tegn, der er i en strenge (uanset hvor stor den er) // >>> count_distinct_characters(""xyzXYZ"")
// 3
// >>> count_distinct_characters(""Jerry"")
// 4
function count_distinct_characters(string: string): number {
","function count_distinct_characters(inputString: string): number {
    const lowerCasedString = inputString.toLowerCase();
    const distinctCharacters = new Set<string>();

    for (const char of lowerCasedString) {
        distinctCharacters.add(char);
    }

    return distinctCharacters.size;
}

// Example usage:
console.log(count_distinct_characters(""xyzXYZ"")); // Output: 3
console.log(count_distinct_characters(""Jerry""));  // Output: 4","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_distinct_characters;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abcde""),5);
  assert.deepEqual(candidate(""abcdecadeCADE""),5);
  assert.deepEqual(candidate(""aaaaAAAAaaaa""),1);
  assert.deepEqual(candidate(""Jerry jERRY JeRRRY""),5);
}

test();"
HumanEval_17,dan_Latn,ts,"//'Hejsa' - kvartetnot, varer et slag.//""O"" betyder halv tone, der varer to slag.//""O"" - hele tonen, varer fire slag.//Her er en legende://Ikke sidste.//Din opgave er at analysere denne streng og returnere en række af heltal svarende til hvor mange slag hver har.//Indgang til denne funktion er en streng, der repræsenterer musikalske noter i et særligt ASCII-format. // >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
function parse_music(music_string: string): number[] {
","function parse_music(music_string: string): number[] {
    const notes = music_string.split(' ');
    return notes.map(note => {
        switch (note) {
            case 'o':
                return 4;
            case 'o|':
                return 2;
            case '.|':
                return 1;
            default:
                return 0;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_music;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""o o o o""),[4, 4, 4, 4]);
  assert.deepEqual(candidate("".| .| .| .|""),[1, 1, 1, 1]);
  assert.deepEqual(candidate(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4]);
  assert.deepEqual(candidate(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2]);
}

test();"
HumanEval_18,dan_Latn,ts,"//Find hvor mange gange en given understreng kan findes i den oprindelige streng. Tæl overlappende tilfælde. // >>> how_many_times("""", ""a"")
// 0
// >>> how_many_times(""aaa"", ""a"")
// 3
// >>> how_many_times(""aaaa"", ""aa"")
// 3
function how_many_times(string: string, substring: string): number {
","function how_many_times(string: string, substring: string): number {
    if (substring.length === 0) return 0;
    let count = 0;
    for (let i = 0; i <= string.length - substring.length; i++) {
        if (string.substring(i, i + substring.length) === substring) {
            count++;
        }
    }
    return count;
}

// Example usage:
// console.log(how_many_times(""aaa"", ""a"")); // Output: 3
// console.log(how_many_times(""aaaa"", ""aa"")); // Output: 3
// console.log(how_many_times("""", ""a"")); // Output: 0","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = how_many_times;
  assert.deepEqual(candidate("""", ""x""),0);
  assert.deepEqual(candidate(""xyxyxyx"", ""x""),4);
  assert.deepEqual(candidate(""cacacacac"", ""cac""),4);
  assert.deepEqual(candidate(""john doe"", ""john""),1);
}

test();"
HumanEval_19,dan_Latn,ts,"//Returnerer strengen med tal sorteret fra mindste til største .//Gyldige valg er ""nul"", ""en"", ""to"", ""tre"", ""fire"", ""fem"", ""seks"", ""syv"", ""otte"" og ""ni"". //Indgang er en pladsbegrænset streng af tal fra ""nul"" til ""ni"".// >>> sort_numbers(""three one five"")
// ""one three five""
function sort_numbers(numbers: string): string {
","function sort_numbers(numbers: string): string {
    const numberWords = [
        'zero', 'one', 'two', 'three', 'four', 
        'five', 'six', 'seven', 'eight', 'nine'
    ];
    
    // Split the input string into an array of words
    const wordsArray = numbers.split(' ');

    // Sort the wordsArray based on the index of each word in numberWords
    wordsArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));

    // Join the sorted array back into a space-delimited string and return
    return wordsArray.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_numbers;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""three""),""three"");
  assert.deepEqual(candidate(""three five nine""),""three five nine"");
  assert.deepEqual(candidate(""five zero four seven nine eight""),""zero four five seven eight nine"");
  assert.deepEqual(candidate(""six five four three two one zero""),""zero one two three four five six"");
}

test();"
HumanEval_20,dan_Latn,ts,"//andre og returneres i rækkefølge (mindre antal, større antal).//Ud fra en række af tal (med en længde på mindst to) vælges og returneres to tal, der er tættest på hver af dem.// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
// [2.0, 2.2]
// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
// [2.0, 2.0]
function find_closest_elements(numbers: number[]): [number, number] {
","function find_closest_elements(numbers: number[]): [number, number] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two numbers"");
    }

    // Sort the array so that we can check consecutive elements
    numbers.sort((a, b) => a - b);

    let closestPair: [number, number] = [numbers[0], numbers[1]];
    let minDifference = Math.abs(numbers[1] - numbers[0]);

    for (let i = 1; i < numbers.length - 1; i++) {
        let currentDifference = Math.abs(numbers[i + 1] - numbers[i]);
        if (currentDifference < minDifference) {
            minDifference = currentDifference;
            closestPair = [numbers[i], numbers[i + 1]];
        }
    }

    return closestPair;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_closest_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);
}

test();"
HumanEval_21,dan_Latn,ts,"//Således bliver det mindste tal 0 og det største bliver 1 .//Hvis vi har en række tal (med mindst to elementer), skal vi anvende en lineær transformation på den række, // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
// [0.0, 0.25, 0.5, 0.75, 1.0]
function rescale_to_unit(numbers: number[]): number[] {
","function rescale_to_unit(numbers: number[]): number[] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two elements"");
    }

    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const range = max - min;

    if (range === 0) {
        throw new Error(""All numbers are the same; rescale not possible"");
    }

    return numbers.map(num => (num - min) / range);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rescale_to_unit;
  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);
  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);
  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
}

test();"
HumanEval_22,dan_Latn,ts,"//Filtrere givet række af alle tsthon værdier kun for heltal // >>> filter_integers([""a"", 3.14, 5])
// [5]
// >>> filter_integers([1, 2, 3, ""abc"", {}, []])
// [1, 2, 3]
function filter_integers(values: any[]): number[] {
","function filter_integers(values: any[]): number[] {
    return values.filter(value => Number.isInteger(value));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_integers;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([4, {}, [], 23.2, 9, ""adasd""]),[4, 9]);
  assert.deepEqual(candidate([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3]);
}

test();"
HumanEval_23,dan_Latn,ts,"//Returlængde af den givne streng// >>> strlen("""")
// 0
// >>> strlen(""abc"")
// 3
function strlen(string: string): number {
","function strlen(string: string): number {
    return string.length;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strlen;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""x""),1);
  assert.deepEqual(candidate(""asdasnakj""),9);
}

test();"
HumanEval_24,dan_Latn,ts,"//Find det største tal, der deler n jævnt, mindre end n.// >>> largest_divisor(15)
// 5
function largest_divisor(n: number): number {
","function largest_divisor(n: number): number {
    for (let i = n - 1; i > 0; i--) {
        if (n % i === 0) {
            return i;
        }
    }
    return 1; // By mathematical definition, 1 is a divisor of any integer.
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_divisor;
  assert.deepEqual(candidate(3),1);
  assert.deepEqual(candidate(7),1);
  assert.deepEqual(candidate(10),5);
  assert.deepEqual(candidate(100),50);
  assert.deepEqual(candidate(49),7);
}

test();"
HumanEval_25,dan_Latn,ts,"//Indtastningsnummeret skal være lig med produktet af alle faktorer.//Hver faktor skal rangordnes i forhold til antallet af gange, den optræder i faktorisering.//Returnerer en række af primfaktorer for et givet heltal i rækkefølge fra mindste til største.// >>> factorize(8)
// [2, 2, 2]
// >>> factorize(25)
// [5, 5]
// >>> factorize(70)
// [2, 5, 7]
function factorize(n: number): number[] {
","function factorize(n: number): number[] {
    const factors: number[] = [];
    let divisor = 2;
    
    while (n >= 2) {
        if (n % divisor === 0) {
            factors.push(divisor);
            n /= divisor;
        } else {
            divisor++;
        }
    }

    return factors;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = factorize;
  assert.deepEqual(candidate(2),[2]);
  assert.deepEqual(candidate(4),[2, 2]);
  assert.deepEqual(candidate(8),[2, 2, 2]);
  assert.deepEqual(candidate(57),[3, 19]);
  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);
  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);
  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);
  assert.deepEqual(candidate(18),[2, 3, 3]);
}

test();"
HumanEval_26,dan_Latn,ts,"//For at sikre, at de elementer, der er efterladt, er i samme rækkefølge som i indlæsningen.//Fjern alle elementer, der forekommer mere end én gang, fra en matrix af heltal.// >>> remove_duplicates([1, 2, 3, 2, 4])
// [1, 3, 4]
function remove_duplicates(numbers: number[]): number[] {
","function remove_duplicates(numbers: number[]): number[] {
    const frequencyMap: Map<number, number> = new Map();

    // Count the occurrences of each number
    for (const num of numbers) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    // Filter out the numbers occurring more than once
    return numbers.filter(num => frequencyMap.get(num) === 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_duplicates;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);
}

test();"
HumanEval_27,dan_Latn,ts,"//For en given streng skal små bogstaver vendes til store og store til små bogstaver. // >>> flip_case(""Hello"")
// ""hELLO""
function flip_case(string: string): string {
","function flip_case(str: string): string {
    let flipped = '';
    for (let char of str) {
        if (char === char.toUpperCase()) {
            flipped += char.toLowerCase();
        } else {
            flipped += char.toUpperCase();
        }
    }
    return flipped;
}

// Example usage:
console.log(flip_case(""Hello"")); // Output: ""hELLO""","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = flip_case;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hello!""),""hELLO!"");
  assert.deepEqual(candidate(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"");
}

test();"
HumanEval_28,dan_Latn,ts,"//Koncatenere en række af strenge til en enkelt streng.// >>> concatenate([])
// """"
// >>> concatenate([""a"", ""b"", ""c""])
// ""abc""
function concatenate(strings: string[]): string {
","function concatenate(strings: string[]): string {
    return strings.join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = concatenate;
  assert.deepEqual(candidate([]),"""");
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""xyz"");
  assert.deepEqual(candidate([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"");
}

test();"
HumanEval_29,dan_Latn,ts,"//Filtrér en input matrix af strenge kun for dem, der starter med et givet præfix. // >>> filter_by_prefix([], ""a"")
// []
// >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
// [""abc"", ""array""]
function filter_by_prefix(strings: string[], prefix: string): string[] {
","function filter_by_prefix(strings: string[], prefix: string): string[] {
    return strings.filter(str => str.startsWith(prefix));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_prefix;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
}

test();"
HumanEval_30,dan_Latn,ts,"//Returnerer kun positive tal i matrixen.// >>> get_positive([-1, 2, -4, 5, 6])
// [2, 5, 6]
// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// [5, 3, 2, 3, 9, 123, 1]
function get_positive(l: number[]): number[] {
","function get_positive(l: number[]): number[] {
    return l.filter(num => num > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_positive;
  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);
  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);
  assert.deepEqual(candidate([-1, -2]),[]);
  assert.deepEqual(candidate([]),[]);
}

test();"
HumanEval_31,dan_Latn,ts,"//Returnerer sandt, hvis et givet tal er primt, og falsk ellers.// >>> is_prime(6)
// false
// >>> is_prime(101)
// true
// >>> is_prime(11)
// true
// >>> is_prime(13441)
// true
// >>> is_prime(61)
// true
// >>> is_prime(4)
// false
// >>> is_prime(1)
// false
function is_prime(n: number): boolean {
","function is_prime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_prime;
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(101),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(13441),true);
  assert.deepEqual(candidate(61),true);
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(1),false);
  assert.deepEqual(candidate(5),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(17),true);
  assert.deepEqual(candidate(85),false);
  assert.deepEqual(candidate(77),false);
  assert.deepEqual(candidate(255379),false);
}

test();"
HumanEval_33,dan_Latn,ts,"//I dette tilfælde er der tale om en overførsel af de tilsvarende værdier i forhold til de tilsvarende indekser for l, men sorteret.//l' er identisk med l i de indekser, der ikke er delelige med tre, mens dens værdier i de indekser, der er delelige med tre, er ens //Denne funktion tager en matrix l og returnerer en matrix l' sådan at // >>> sort_third([1, 2, 3])
// [1, 2, 3]
// >>> sort_third([5, 6, 3, 4, 8, 9, 2])
// [2, 6, 3, 4, 8, 9, 5]
function sort_third(l: number[]): number[] {
","function sort_third(l: number[]): number[] {
    const indicesDivByThree = l.map((_, i) => i).filter(i => i % 3 === 0);
    const valuesDivByThree = indicesDivByThree.map(i => l[i]).sort((a, b) => a - b);

    const result = l.slice();
    for (let i = 0; i < indicesDivByThree.length; i++) {
        result[indicesDivByThree[i]] = valuesDivByThree[i];
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_third;
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);
  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);
  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);
}

test();"
HumanEval_34,dan_Latn,ts,"//Returnerer sorterede unikke elementer i en matrix// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [0, 2, 3, 5, 9, 123]
function unique(l: number[]): number[] {
","function unique(l: number[]): number[] {
    const uniqueSet = new Set(l);
    const uniqueArray = Array.from(uniqueSet);
    uniqueArray.sort((a, b) => a - b);
    return uniqueArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique;
  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);
}

test();"
HumanEval_35,dan_Latn,ts,"//Returnerer det maksimale element i arrayet.// >>> max_element([1, 2, 3])
// 3
// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// 123
function max_element(l: number[]): number {
","function max_element(l: number[]): number {
    if (l.length === 0) {
        throw new Error(""Array is empty"");
    }
    let max = l[0];
    for (let i = 1; i < l.length; i++) {
        if (l[i] > max) {
            max = l[i];
        }
    }
    return max;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_element;
  assert.deepEqual(candidate([1, 2, 3]),3);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);
}

test();"
HumanEval_36,dan_Latn,ts,"//Angiver antallet af gange, cifferet 7 forekommer i heltal mindre end n, som er delbart med 11 eller 13. // >>> fizz_buzz(50)
// 0
// >>> fizz_buzz(78)
// 2
// >>> fizz_buzz(79)
// 3
function fizz_buzz(n: number): number {
","function fizz_buzz(n: number): number {
    let count = 0;

    for (let i = 1; i < n; i++) {
        if (i % 11 === 0 || i % 13 === 0) {
            let numString = i.toString();
            for (let char of numString) {
                if (char === '7') {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fizz_buzz;
  assert.deepEqual(candidate(50),0);
  assert.deepEqual(candidate(78),2);
  assert.deepEqual(candidate(79),3);
  assert.deepEqual(candidate(100),3);
  assert.deepEqual(candidate(200),6);
  assert.deepEqual(candidate(4000),192);
  assert.deepEqual(candidate(10000),639);
  assert.deepEqual(candidate(100000),8026);
}

test();"
HumanEval_37,dan_Latn,ts,"//I dette tilfælde er der tale om en af de to forskellige indekser, der er inddelt i de to forskellige indekser.//l' er identisk med l i de ulige indekser, mens dens værdier i de lige indekser er ens //Denne funktion tager en matrix l og returnerer en matrix l' sådan at // >>> sort_even([1, 2, 3])
// [1, 2, 3]
// >>> sort_even([5, 6, 3, 4])
// [3, 6, 5, 4]
function sort_even(l: number[]): number[] {
","function sort_even(l: number[]): number[] {
    const evenIndices: number[] = [];
    const result: number[] = [...l];

    // Collect values at even indices
    for (let i = 0; i < l.length; i += 2) {
        evenIndices.push(l[i]);
    }

    // Sort the collected even indices values
    evenIndices.sort((a, b) => a - b);

    // Place the sorted values back in their original even indices
    for (let i = 0; i < l.length; i += 2) {
        result[i] = evenIndices.shift()!;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_even;
  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);
  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);
}

test();"
HumanEval_39,dan_Latn,ts,"//prime_fib returnerer et n-tal, der er et Fibonacci-tal, og det er også et primtal. // >>> prime_fib(1)
// 2
// >>> prime_fib(2)
// 3
// >>> prime_fib(3)
// 5
// >>> prime_fib(4)
// 13
// >>> prime_fib(5)
// 89
function prime_fib(n: number): number {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function* fibonacciGenerator(): Generator<number, void, unknown> {
    let a = 0, b = 1;
    while (true) {
        let current = a;
        a = b;
        b = current + b;
        yield current;
    }
}

function prime_fib(n: number): number {
    const fibGen = fibonacciGenerator();
    let primeFibs: number[] = [];
    let i = 0;
    while (primeFibs.length < n) {
        const fibNum = fibGen.next().value;
        if (isPrime(fibNum)) {
            primeFibs.push(fibNum);
        }
    }
    return primeFibs[n - 1];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_fib;
  assert.deepEqual(candidate(1),2);
  assert.deepEqual(candidate(2),3);
  assert.deepEqual(candidate(3),5);
  assert.deepEqual(candidate(4),13);
  assert.deepEqual(candidate(5),89);
  assert.deepEqual(candidate(6),233);
  assert.deepEqual(candidate(7),1597);
  assert.deepEqual(candidate(8),28657);
  assert.deepEqual(candidate(9),514229);
  assert.deepEqual(candidate(10),433494437);
}

test();"
HumanEval_40,dan_Latn,ts,"//sum til nul, og falsk ellers. //returnerer true, hvis der er tre forskellige elementer i matrixen, der //triples_sum_to_zero tager en række af heltal som input.// >>> triples_sum_to_zero([1, 3, 5, 0])
// false
// >>> triples_sum_to_zero([1, 3, -2, 1])
// true
// >>> triples_sum_to_zero([1, 2, 3, 7])
// false
// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
// true
// >>> triples_sum_to_zero([1])
// false
function triples_sum_to_zero(l: number[]): boolean {
","function triples_sum_to_zero(l: number[]): boolean {
    if (l.length < 3) {
        return false;
    }

    // Sort the array
    l.sort((a, b) => a - b);

    // Iterate through the array
    for (let i = 0; i < l.length - 2; i++) {
        let left = i + 1;
        let right = l.length - 1;

        // Use two pointers to find a pair that makes the sum zero with l[i]
        while (left < right) {
            const sum = l[i] + l[left] + l[right];
            if (sum === 0) {
                return true;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triples_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, 5, -1]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),true);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([1, 2, 5, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([1, 3, 5, -100]),false);
  assert.deepEqual(candidate([100, 3, 5, -100]),false);
}

test();"
HumanEval_41,dan_Latn,ts,"//Denne funktion angiver antallet af sådanne kollisioner. //De er i deres bane, som om de ikke kolliderede.//Men vognene er uendeligt robuste og stærke, og derfor kører de videre.//Når en bil, der kører fra venstre til højre, rammer en bil, der kører fra højre til venstre.//Alle biler kører med samme hastighed.//De to par biler starter meget langt fra hinanden.//n biler kører fra venstre til højre; samtidig et andet sæt af n biler //Forestil dig en vej, der er en perfekt lige uendeligt lang linje.function car_race_collision(n: number): number {
","function car_race_collision(n: number): number {
    // Since the cars move at the same speed and are infinitely strong,
    // each pair of a left-to-right car and a right-to-left car will ""collide"" at some point.
    // Therefore, every pair of cars from different sets will collide exactly once.
    
    // We need to find the number of such pairs, which is simply n * n.
    return n * n;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = car_race_collision;
  assert.deepEqual(candidate(2),4);
  assert.deepEqual(candidate(3),9);
  assert.deepEqual(candidate(4),16);
  assert.deepEqual(candidate(8),64);
  assert.deepEqual(candidate(10),100);
}

test();"
HumanEval_42,dan_Latn,ts,"//Returnerer array med elementer, der er forøget med 1.// >>> incr_list([1, 2, 3])
// [2, 3, 4]
// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [6, 4, 6, 3, 4, 4, 10, 1, 124]
function incr_list(l: number[]): number[] {
","function incr_list(l: number[]): number[] {
    return l.map(num => num + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = incr_list;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);
  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);
}

test();"
HumanEval_43,dan_Latn,ts,"//sum til nul, og falsk ellers. //returnerer true, hvis der er to forskellige elementer i matrixen, der //pairs_sum_to_zero tager en række af heltal som input. // >>> pairs_sum_to_zero([1, 3, 5, 0])
// false
// >>> pairs_sum_to_zero([1, 3, -2, 1])
// false
// >>> pairs_sum_to_zero([1, 2, 3, 7])
// false
// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
// true
// >>> pairs_sum_to_zero([1])
// false
function pairs_sum_to_zero(l: number[]): boolean {
","function pairs_sum_to_zero(l: number[]): boolean {
    const seen = new Set<number>();

    for (const num of l) {
        if (seen.has(-num)) {
            return true;
        }
        seen.add(num);
    }

    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pairs_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),false);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);
}

test();"
HumanEval_44,dan_Latn,ts,"//Basenumre er mindre end 10.//return strenge repræsentation efter konvertering. //Ændre den numeriske basis for inputnummeret x til basis.// >>> change_base(8, 3)
// ""22""
// >>> change_base(8, 2)
// ""1000""
// >>> change_base(7, 2)
// ""111""
function change_base(x: number, base: number): string {
","function change_base(x: number, base: number): string {
    if (base < 2 || base > 9) {
        throw new Error(""Base must be between 2 and 9 inclusive"");
    }
    
    if (x === 0) return ""0"";

    let result: string = """";
    let number: number = x;

    while (number > 0) {
        const remainder = number % base;
        result = remainder.toString() + result;
        number = Math.floor(number / base);
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = change_base;
  assert.deepEqual(candidate(8, 3),""22"");
  assert.deepEqual(candidate(9, 3),""100"");
  assert.deepEqual(candidate(234, 2),""11101010"");
  assert.deepEqual(candidate(16, 2),""10000"");
  assert.deepEqual(candidate(8, 2),""1000"");
  assert.deepEqual(candidate(7, 2),""111"");
  assert.deepEqual(candidate(2, 3),""2"");
  assert.deepEqual(candidate(3, 4),""3"");
  assert.deepEqual(candidate(4, 5),""4"");
  assert.deepEqual(candidate(5, 6),""5"");
  assert.deepEqual(candidate(6, 7),""6"");
  assert.deepEqual(candidate(7, 8),""7"");
}

test();"
HumanEval_45,dan_Latn,ts,"//Givet længde på en side og høj returareal for en trekant.// >>> triangle_area(5, 3)
// 7.5
function triangle_area(a: number, h: number): number {
","function triangle_area(a: number, h: number): number {
    return 0.5 * a * h;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(5, 3),7.5);
  assert.deepEqual(candidate(2, 2),2.0);
  assert.deepEqual(candidate(10, 8),40.0);
}

test();"
HumanEval_46,dan_Latn,ts,"//Skriv en funktion, der effektivt beregner det n-te element i fib4-talsekvensen. Brug ikke rekursion. //fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).//fib4(3) -> 0 //fib4(2) -> 2 //fib4(1) -> 0 //fib4(0) -> 0 //Fib4-talkæden er en sekvens, der ligner Fibbonacci-sekvensen, og som defineres som følger:// >>> fib4(5)
// 4
// >>> fib4(6)
// 8
// >>> fib4(7)
// 14
function fib4(n: number): number {
","function fib4(n: number): number {
    if (n === 0) return 0;
    if (n === 1) return 0;
    if (n === 2) return 2;
    if (n === 3) return 0;

    let fibNumbers = [0, 0, 2, 0];
    for (let i = 4; i <= n; i++) {
        const nextFib = fibNumbers[3] + fibNumbers[2] + fibNumbers[1] + fibNumbers[0];
        fibNumbers.shift();
        fibNumbers.push(nextFib);
    }
    return fibNumbers[3];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib4;
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),28);
  assert.deepEqual(candidate(10),104);
  assert.deepEqual(candidate(12),386);
}

test();"
HumanEval_47,dan_Latn,ts,"//Returnerer medianen af elementer i matrixen l. // >>> median([3, 1, 2, 4, 5])
// 3
// >>> median([-10, 4, 6, 1000, 10, 20])
// 15.0
function median(l: number[]): number {
","function median(l: number[]): number {
    const sorted = l.slice().sort((a, b) => a - b);
    const len = sorted.length;
    
    if (len % 2 === 0) {
        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;
    } else {
        return sorted[Math.floor(len / 2)];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = median;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);
  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);
  assert.deepEqual(candidate([5]),5);
  assert.deepEqual(candidate([6, 5]),5.5);
  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);
}

test();"
HumanEval_48,dan_Latn,ts,"//Kontrollerer, om den givne streng er et palindrom// >>> is_palindrome("""")
// true
// >>> is_palindrome(""aba"")
// true
// >>> is_palindrome(""aaaaa"")
// true
// >>> is_palindrome(""zbcd"")
// false
function is_palindrome(text: string): boolean {
","function is_palindrome(text: string): boolean {
    return text === text.split('').reverse().join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_palindrome;
  assert.deepEqual(candidate(""""),true);
  assert.deepEqual(candidate(""aba""),true);
  assert.deepEqual(candidate(""aaaaa""),true);
  assert.deepEqual(candidate(""zbcd""),false);
  assert.deepEqual(candidate(""xywyx""),true);
  assert.deepEqual(candidate(""xywyz""),false);
  assert.deepEqual(candidate(""xywzx""),false);
}

test();"
HumanEval_49,dan_Latn,ts,"//Returnerer 2^n modulo p (hvis du er opmærksom på tallene).// >>> modp(3, 5)
// 3
// >>> modp(1101, 101)
// 2
// >>> modp(0, 101)
// 1
// >>> modp(3, 11)
// 8
// >>> modp(100, 101)
// 1
function modp(n: number, p: number): number {
","function modp(n: number, p: number): number {
    if (n === 0) return 1 % p;
    let result = 1;
    let base = 2;
    
    while (n > 0) {
        if (n % 2 === 1) {
            result = (result * base) % p;
        }
        base = (base * base) % p;
        n = Math.floor(n / 2);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = modp;
  assert.deepEqual(candidate(3, 5),3);
  assert.deepEqual(candidate(1101, 101),2);
  assert.deepEqual(candidate(0, 101),1);
  assert.deepEqual(candidate(3, 11),8);
  assert.deepEqual(candidate(100, 101),1);
  assert.deepEqual(candidate(30, 5),4);
  assert.deepEqual(candidate(31, 5),3);
}

test();"
HumanEval_51,dan_Latn,ts,"//remove_vowels er en funktion, der tager streng og returnerer streng uden vokaler. // >>> remove_vowels("""")
// """"
// >>> remove_vowels(""abcdef"")
// ""bcdf""
// >>> remove_vowels(""aaaaa"")
// """"
// >>> remove_vowels(""aaBAA"")
// ""B""
// >>> remove_vowels(""zbcd"")
// ""zbcd""
function remove_vowels(text: string): string {
","function remove_vowels(text: string): string {
    return text.replace(/[aeiouAEIOU]/g, '');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_vowels;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""abcdef\nghijklm""),""bcdf\nghjklm"");
  assert.deepEqual(candidate(""fedcba""),""fdcb"");
  assert.deepEqual(candidate(""eeeee""),"""");
  assert.deepEqual(candidate(""acBAA""),""cB"");
  assert.deepEqual(candidate(""EcBOO""),""cB"");
  assert.deepEqual(candidate(""ybcd""),""ybcd"");
}

test();"
HumanEval_52,dan_Latn,ts,"//Returnerer true, hvis alle tal i matrix l er under tærskelværdien t. // >>> below_threshold([1, 2, 4, 10], 100)
// true
// >>> below_threshold([1, 20, 4, 10], 5)
// false
function below_threshold(l: number[], t: number): boolean {
","function below_threshold(l: number[], t: number): boolean {
    return l.every(num => num < t);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_threshold;
  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);
  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);
}

test();"
HumanEval_53,dan_Latn,ts,"//Læg to tal sammen x og y.// >>> add(2, 3)
// 5
// >>> add(5, 7)
// 12
function add(x: number, y: number): number {
","function add(x: number, y: number): number {
    return x + y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate(0, 1),1);
  assert.deepEqual(candidate(1, 0),1);
  assert.deepEqual(candidate(2, 3),5);
  assert.deepEqual(candidate(5, 7),12);
  assert.deepEqual(candidate(7, 5),12);
}

test();"
HumanEval_54,dan_Latn,ts,"//Kontroller, om to ord har samme tegn. // >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
// true
// >>> same_chars(""abcd"", ""dddddddabc"")
// true
// >>> same_chars(""dddddddabc"", ""abcd"")
// true
// >>> same_chars(""eabcd"", ""dddddddabc"")
// false
// >>> same_chars(""abcd"", ""dddddddabce"")
// false
// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
// false
function same_chars(s0: string, s1: string): boolean {
","function same_chars(s0: string, s1: string): boolean {
    const charSet0: Set<string> = new Set(s0);
    const charSet1: Set<string> = new Set(s1);

    if (charSet0.size !== charSet1.size) {
        return false;
    }

    for (const char of charSet0) {
        if (!charSet1.has(char)) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = same_chars;
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),true);
  assert.deepEqual(candidate(""abcd"", ""dddddddabc""),true);
  assert.deepEqual(candidate(""dddddddabc"", ""abcd""),true);
  assert.deepEqual(candidate(""eabcd"", ""dddddddabc""),false);
  assert.deepEqual(candidate(""abcd"", ""dddddddabcf""),false);
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddddabc""),false);
  assert.deepEqual(candidate(""aabb"", ""aaccc""),false);
}

test();"
HumanEval_55,dan_Latn,ts,"//Returnerer n-te Fibonacci-tal. // >>> fib(10)
// 55
// >>> fib(1)
// 1
// >>> fib(8)
// 21
function fib(n: number): number {
","function fib(n: number): number {
    if (n <= 0) {
        throw new Error(""Input should be a positive integer."");
    }
    if (n === 1) return 1;
    if (n === 2) return 1;

    let a = 1, b = 1;
    for (let i = 3; i <= n; i++) {
        const temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}

// Example usage:
console.log(fib(10)); // 55
console.log(fib(1));  // 1
console.log(fib(8));  // 21","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib;
  assert.deepEqual(candidate(10),55);
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(8),21);
  assert.deepEqual(candidate(11),89);
  assert.deepEqual(candidate(12),144);
}

test();"
HumanEval_56,dan_Latn,ts,"//return true hvis hver åbningsstykke har en tilsvarende lukke stykke. //Parentes er en streng af ""<"" og "">"". // >>> correct_bracketing(""<"")
// false
// >>> correct_bracketing(""<>"")
// true
// >>> correct_bracketing(""<<><>>"")
// true
// >>> correct_bracketing(""><<>"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;
    for (let char of brackets) {
        if (char === '<') {
            balance++;
        } else if (char === '>') {
            balance--;
        }
        if (balance < 0) {
            return false;
        }
    }
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""<>""),true);
  assert.deepEqual(candidate(""<<><>>""),true);
  assert.deepEqual(candidate(""<><><<><>><>""),true);
  assert.deepEqual(candidate(""<><><<<><><>><>><<><><<>>>""),true);
  assert.deepEqual(candidate(""<<<><>>>>""),false);
  assert.deepEqual(candidate(""><<>""),false);
  assert.deepEqual(candidate(""<""),false);
  assert.deepEqual(candidate(""<<<<""),false);
  assert.deepEqual(candidate("">""),false);
  assert.deepEqual(candidate(""<<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>><<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>>><>""),false);
}

test();"
HumanEval_57,dan_Latn,ts,"//Returnerer sandt, hvis array-elementerne monotont øges eller falder.// >>> monotonic([1, 2, 4, 20])
// true
// >>> monotonic([1, 20, 4, 10])
// false
// >>> monotonic([4, 1, 0, -10])
// true
function monotonic(l: number[]): boolean {
","function monotonic(l: number[]): boolean {
    if (l.length <= 1) return true;
    
    let increasing = true;
    let decreasing = true;
    
    for (let i = 1; i < l.length; i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
        
        if (!increasing && !decreasing) return false;
    }
    
    return increasing || decreasing;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = monotonic;
  assert.deepEqual(candidate([1, 2, 4, 10]),true);
  assert.deepEqual(candidate([1, 2, 4, 20]),true);
  assert.deepEqual(candidate([1, 20, 4, 10]),false);
  assert.deepEqual(candidate([4, 1, 0, -10]),true);
  assert.deepEqual(candidate([4, 1, 1, 0]),true);
  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);
  assert.deepEqual(candidate([9, 9, 9, 9]),true);
}

test();"
HumanEval_58,dan_Latn,ts,"//Returnerer sorterede unikke fælles elementer for to arrays. // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
// [1, 5, 653]
// >>> common([5, 3, 2, 8], [3, 2])
// [2, 3]
function common(l1: number[], l2: number[]): number[] {
","function common(l1: number[], l2: number[]): number[] {
    const set1 = new Set(l1);
    const set2 = new Set(l2);
    const commonElements = Array.from(set1).filter(item => set2.has(item));
    return commonElements.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = common;
  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);
  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);
  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);
}

test();"
HumanEval_59,dan_Latn,ts,"//Returnerer den største primtalende faktor af n. Antag n > 1 og er ikke primtalende. // >>> largest_prime_factor(13195)
// 29
// >>> largest_prime_factor(2048)
// 2
function largest_prime_factor(n: number): number {
","function largest_prime_factor(n: number): number {
    let largestFactor = 1;

    // Divide n by 2 until it becomes odd
    while (n % 2 === 0) {
        largestFactor = 2;
        n /= 2;
    }

    // Check for odd factors from 3 upwards
    for (let i = 3; i <= Math.sqrt(n); i += 2) {
        while (n % i === 0) {
            largestFactor = i;
            n /= i;
        }
    }

    // If n becomes a prime number greater than 2
    if (n > 2) {
        largestFactor = n;
    }

    return largestFactor;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_prime_factor;
  assert.deepEqual(candidate(15),5);
  assert.deepEqual(candidate(27),3);
  assert.deepEqual(candidate(63),7);
  assert.deepEqual(candidate(330),11);
  assert.deepEqual(candidate(13195),29);
}

test();"
HumanEval_60,dan_Latn,ts,"//sum_to_n er en funktion, der summerer tal fra 1 til n. // >>> sum_to_n(30)
// 465
// >>> sum_to_n(100)
// 5050
// >>> sum_to_n(5)
// 15
// >>> sum_to_n(10)
// 55
// >>> sum_to_n(1)
// 1
function sum_to_n(n: number): number {
","function sum_to_n(n: number): number {
    return n * (n + 1) / 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_to_n;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(6),21);
  assert.deepEqual(candidate(11),66);
  assert.deepEqual(candidate(30),465);
  assert.deepEqual(candidate(100),5050);
}

test();"
HumanEval_61,dan_Latn,ts,"//return true hvis hver åbningsstykke har en tilsvarende lukke stykke. //Parentes er en streng af ""("" og "")"". // >>> correct_bracketing(""("")
// false
// >>> correct_bracketing(""()"")
// true
// >>> correct_bracketing(""(()())"")
// true
// >>> correct_bracketing("")(()"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;

    for (let char of brackets) {
        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        // If balance goes negative, there's a closing bracket without a matching opening one
        if (balance < 0) {
            return false;
        }
    }

    // If balance is zero, all opening brackets have matching closing brackets
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""()""),true);
  assert.deepEqual(candidate(""(()())""),true);
  assert.deepEqual(candidate(""()()(()())()""),true);
  assert.deepEqual(candidate(""()()((()()())())(()()(()))""),true);
  assert.deepEqual(candidate(""((()())))""),false);
  assert.deepEqual(candidate("")(()""),false);
  assert.deepEqual(candidate(""(""),false);
  assert.deepEqual(candidate(""((((""),false);
  assert.deepEqual(candidate("")""),false);
  assert.deepEqual(candidate(""(()""),false);
  assert.deepEqual(candidate(""()()(()())())(()""),false);
  assert.deepEqual(candidate(""()()(()())()))()""),false);
}

test();"
HumanEval_62,dan_Latn,ts,"//Returnerer derivatet af dette polynom i samme form.//xs[0] + xs[1] * x + xs[2] * x^2 + .... //x er koefficienter for et polynom.// >>> derivative([3, 1, 2, 4, 5])
// [1, 4, 12, 20]
// >>> derivative([1, 2, 3])
// [2, 6]
function derivative(xs: number[]): number[] {
","function derivative(xs: number[]): number[] {
    return xs.slice(1).map((coef, index) => coef * (index + 1));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = derivative;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);
  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);
  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);
  assert.deepEqual(candidate([1]),[]);
}

test();"
HumanEval_63,dan_Latn,ts,"//Skriv en funktion, der effektivt kan beregne det n-te element i fibfib-talsekvensen.//fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3). //Fibfib ((2) == 1 //Fibfib ((1)) == 0 //0 = 0 //FibFib-talkæden er en sekvens, der ligner Fibbonacci-sekvensen, og som defineres som følger:// >>> fibfib(1)
// 0
// >>> fibfib(5)
// 4
// >>> fibfib(8)
// 24
function fibfib(n: number): number {
","function fibfib(n: number): number {
    if (n === 0 || n === 1) return 0;
    if (n === 2) return 1;

    let a = 0;
    let b = 0;
    let c = 1;

    for (let i = 3; i <= n; i++) {
        let next = a + b + c;
        a = b;
        b = c;
        c = next;
    }

    return c;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fibfib;
  assert.deepEqual(candidate(2),1);
  assert.deepEqual(candidate(1),0);
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),24);
  assert.deepEqual(candidate(10),81);
  assert.deepEqual(candidate(12),274);
  assert.deepEqual(candidate(14),927);
}

test();"
HumanEval_64,dan_Latn,ts,"//Eksempel: //Vokal, men kun når det er i slutningen af det givne ord.//Vokaler i dette tilfælde er ""a"", ""e"", ""i"", ""o"", ""u"". Her er ""y"" også en //et ord som input og returnerer antallet af vokaler i streng. //Skriv en funktion, som tager en streng, der repræsenterer // >>> vowels_count(""abcde"")
// 2
// >>> vowels_count(""ACEDY"")
// 3
function vowels_count(s: string): number {
","function vowels_count(s: string): number {
    let count = 0;
    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);
    const lowerCaseString = s.toLowerCase();

    for (let i = 0; i < lowerCaseString.length; i++) {
        if (vowels.has(lowerCaseString[i])) {
            count++;
        }
        if (i === lowerCaseString.length - 1 && lowerCaseString[i] === 'y') {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = vowels_count;
  assert.deepEqual(candidate(""abcde""),2);
  assert.deepEqual(candidate(""Alone""),3);
  assert.deepEqual(candidate(""key""),2);
  assert.deepEqual(candidate(""bye""),1);
  assert.deepEqual(candidate(""keY""),2);
  assert.deepEqual(candidate(""bYe""),1);
  assert.deepEqual(candidate(""ACEDY""),3);
}

test();"
HumanEval_65,dan_Latn,ts,"//Hvis shift > antal cifre, returneres cifre omvendt. //og returnerer resultatet som en streng. //Vi skifter tallene i cirklen fra det hele tal x til højre.// >>> circular_shift(12, 1)
// ""21""
// >>> circular_shift(12, 2)
// ""12""
function circular_shift(x: number, shift: number): string {
","function circular_shift(x: number, shift: number): string {
    const strNum = x.toString();
    const length = strNum.length;
    if (shift >= length) {
        return strNum.split('').reverse().join('');
    }
    const normalizedShift = shift % length;
    const splitIndex = length - normalizedShift;
    return strNum.slice(splitIndex) + strNum.slice(0, splitIndex);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = circular_shift;
  assert.deepEqual(candidate(100, 2),""001"");
  assert.deepEqual(candidate(12, 2),""12"");
  assert.deepEqual(candidate(97, 8),""79"");
  assert.deepEqual(candidate(12, 1),""21"");
  assert.deepEqual(candidate(11, 101),""11"");
}

test();"
HumanEval_66,dan_Latn,ts,"//Eksempler: //ASCII-koder. //Skriv en funktion, der tager en streng som input og kun returnerer summen af de øverste tegn' //Opgave // >>> digitSum("""")
// 0
// >>> digitSum(""abAB"")
// 131
// >>> digitSum(""abcCd"")
// 67
// >>> digitSum(""helloE"")
// 69
// >>> digitSum(""woArBld"")
// 131
// >>> digitSum(""aAaaaXa"")
// 153
function digitSum(s: string): number {
","function digitSum(s: string): number {
    let sum = 0;
    for (const char of s) {
        if (char >= 'A' && char <= 'Z') {
            sum += char.charCodeAt(0);
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digitSum;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abAB""),131);
  assert.deepEqual(candidate(""abcCd""),67);
  assert.deepEqual(candidate(""helloE""),69);
  assert.deepEqual(candidate(""woArBld""),131);
  assert.deepEqual(candidate(""aAaaaXa""),153);
  assert.deepEqual(candidate("" How are yOu?""),151);
  assert.deepEqual(candidate(""You arE Very Smart""),327);
}

test();"
HumanEval_67,dan_Latn,ts,"//for examble: //i kurven angiver antallet af mangofrugter i kurven. //appelsiner og æbler og et heltal, der repræsenterer det samlede antal frugter //Vi har taget æbler, appelsiner og mangoer, og givet strengen, der repræsenterer det samlede antal //som er fordelt i en kurv med frugt, som denne kurv indeholder //I denne opgave får du en streng, der repræsenterer et antal æbler og appelsiner.// >>> fruit_distribution(""5 apples and 6 oranges"", 19)
// 8
// >>> fruit_distribution(""0 apples and 1 oranges"", 3)
// 2
// >>> fruit_distribution(""2 apples and 3 oranges"", 100)
// 95
// >>> fruit_distribution(""100 apples and 1 oranges"", 120)
// 19
function fruit_distribution(s: string, n: number): number {
","function fruit_distribution(s: string, n: number): number {
    const regex = /(\d+) apples and (\d+) oranges/;
    const match = s.match(regex);
    
    if (!match) {
        throw new Error(""Invalid input format"");
    }
    
    const apples = parseInt(match[1], 10);
    const oranges = parseInt(match[2], 10);
    
    const totalApplesAndOranges = apples + oranges;
    return n - totalApplesAndOranges;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fruit_distribution;
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 19),8);
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 21),10);
  assert.deepEqual(candidate(""0 apples and 1 oranges"", 3),2);
  assert.deepEqual(candidate(""1 apples and 0 oranges"", 3),2);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 100),95);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 5),0);
  assert.deepEqual(candidate(""1 apples and 100 oranges"", 120),19);
}

test();"
HumanEval_68,dan_Latn,ts,"//Eksempel 1: //Hvis der ikke er nogen lige værdier, eller den givne matrix er tom, returneres [].//Den plukkede node skal returneres i en matrix, [ smalest_value, dens indeks ], //Hvis der findes flere noder med samme mindste lige værdi, returneres den node, der har mindste indeks. //Den plukkede knudepunkt skal være den knudepunkt med den mindste lige værdi.//Din opgave er at plukke en af knuderne og returnere den.//""Givet en matrix, der repræsenterer en gren af et træ, der har ikke-negative heltal knuder // >>> pluck([4, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 2:
// >>> pluck([1, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 3:
// >>> pluck([])
// []
// Example 4:
// >>> pluck([5, 0, 3, 0, 4, 2])
// [0, 1]
// Explanation: 0 is the smallest value, but  there are two zeros,
// so we will choose the first zero, which has the smallest index.
// Constraints:
// * 1 <= nodes.length <= 10000
// * 0 <= node.value
function pluck(arr: number[]): number[] {
","function pluck(arr: number[]): number[] {
    let minEvenValue: number | null = null;
    let minIndex: number | null = null;

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 === 0) { // Check if the number is even
            if (minEvenValue === null || arr[i] < minEvenValue) {
                minEvenValue = arr[i];
                minIndex = i;
            }
        }
    }

    if (minEvenValue !== null && minIndex !== null) {
        return [minEvenValue, minIndex];
    } else {
        return [];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pluck;
  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);
  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);
  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);
  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);
  assert.deepEqual(candidate([7, 9, 7, 1]),[]);
}

test();"
HumanEval_69,dan_Latn,ts,"//Eksempler: //Hvis der ikke findes en sådan værdi, returneres -1.//Frekvensen af et heltal er antallet af gange det optræder i matrixen.//nul, og har en frekvens, der er større end eller lig med hele talets værdi. //Vi har en ikke-tom matrix af positive heltal, og returnerer det største heltal, der er større end .// >>> search([4, 1, 2, 2, 3, 1])
// 2
// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
// 3
// >>> search([5, 5, 4, 4, 4])
// -1
function search(lst: number[]): number {
","function search(lst: number[]): number {
    const frequencyMap: Map<number, number> = new Map();

    // Count frequencies of each integer in the array
    for (const num of lst) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    let result = -1;

    // Determine the greatest integer that meets the condition
    for (const [num, freq] of frequencyMap.entries()) {
        if (freq >= num && num > result) {
            result = num;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = search;
  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);
  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);
  assert.deepEqual(candidate([3, 3]),-1);
  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);
  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);
  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);
  assert.deepEqual(candidate([3, 2, 8, 2]),2);
  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);
  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);
  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);
  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);
  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);
  assert.deepEqual(candidate([1]),1);
  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);
  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);
  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);
  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);
  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);
  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);
  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);
  assert.deepEqual(candidate([10]),-1);
  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);
  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);
  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);
  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);
}

test();"
HumanEval_70,dan_Latn,ts,"//Eksempler: //Så er der maksimum for de resterende heltal, så er der minimum og så videre.//Det er en mærkelig sortering, når man starter med den mindste værdi.//Givet en række af heltal, returnerer vi en række i en mærkelig rækkefølge.// >>> strange_sort_list([1, 2, 3, 4])
// [1, 4, 2, 3]
// >>> strange_sort_list([5, 5, 5, 5])
// [5, 5, 5, 5]
// >>> strange_sort_list([])
// []
function strange_sort_list(lst: number[]): number[] {
","function strange_sort_list(lst: number[]): number[] {
    const sorted = [...lst].sort((a, b) => a - b);
    const result: number[] = [];
    let left = 0;
    let right = sorted.length - 1;

    while (left <= right) {
        if (left === right) {
            result.push(sorted[left]);
        } else {
            result.push(sorted[left]);
            result.push(sorted[right]);
        }
        left++;
        right--;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strange_sort_list;
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);
  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);
  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);
  assert.deepEqual(candidate([111111]),[111111]);
}

test();"
HumanEval_71,dan_Latn,ts,"//Eksempel: //Det er den tredje side.//Tre sider udgør en gyldig trekant, når summen af to sider er større.//Ellers returneres -1 //trekanten afrundet til 2 decimaler, hvis de tre sider udgør en gyldig trekant. //Givet længderne på de tre sider af en trekant, returnerer vi arealet af // >>> triangle_area(3, 4, 5)
// 6.0
// >>> triangle_area(1, 2, 10)
// -1
function triangle_area(a: number, b: number, c: number): number {
","function triangle_area(a: number, b: number, c: number): number {
    // Check if the sides form a valid triangle
    if (a + b > c && a + c > b && b + c > a) {
        // Calculate the semi-perimeter
        const s = (a + b + c) / 2;
        // Calculate the area using Heron's formula
        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
        // Return the area rounded to 2 decimal places
        return Math.round(area * 100) / 100;
    }
    // Return -1 if the sides do not form a valid triangle
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(3, 4, 5),6.0);
  assert.deepEqual(candidate(1, 2, 10),-1);
  assert.deepEqual(candidate(4, 8, 5),8.18);
  assert.deepEqual(candidate(2, 2, 2),1.73);
  assert.deepEqual(candidate(1, 2, 3),-1);
  assert.deepEqual(candidate(10, 5, 7),16.25);
  assert.deepEqual(candidate(2, 6, 3),-1);
  assert.deepEqual(candidate(1, 1, 1),0.43);
  assert.deepEqual(candidate(2, 2, 10),-1);
}

test();"
HumanEval_72,dan_Latn,ts,"//Eksempel: //Objektet q flyver, hvis det er afbalanceret (det er en palindromisk matrix) og summen af dets elementer er mindre end eller lig med den maksimale mulige vægt w.//Skriv en funktion, der returnerer true, hvis objektet q flyver, og false ellers. // >>> will_it_fly([1, 2], 5)
// false
// # 1+2 is less than the maximum possible weight, but it's unbalanced.
// >>> will_it_fly([3, 2, 3], 1)
// false
// # it's balanced, but 3+2+3 is more than the maximum possible weight.
// >>> will_it_fly([3, 2, 3], 9)
// true
// # 3+2+3 is less than the maximum possible weight, and it's balanced.
// >>> will_it_fly([3], 5)
// true
// # 3 is less than the maximum possible weight, and it's balanced.
function will_it_fly(q: number[], w: number): boolean {
","function will_it_fly(q: number[], w: number): boolean {
    // Check if the array is balanced (palindromic)
    const isBalanced = (arr: number[]): boolean => {
        for (let i = 0; i < arr.length / 2; i++) {
            if (arr[i] !== arr[arr.length - 1 - i]) {
                return false;
            }
        }
        return true;
    };

    // Calculate the sum of the elements in the array
    const sumElements = q.reduce((acc, curr) => acc + curr, 0);

    // Check both conditions: balanced array and sum less than or equal to max weight
    return isBalanced(q) && sumElements <= w;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = will_it_fly;
  assert.deepEqual(candidate([3, 2, 3], 9),true);
  assert.deepEqual(candidate([1, 2], 5),false);
  assert.deepEqual(candidate([3], 5),true);
  assert.deepEqual(candidate([3, 2, 3], 1),false);
  assert.deepEqual(candidate([1, 2, 3], 6),false);
  assert.deepEqual(candidate([5], 5),true);
}

test();"
HumanEval_73,dan_Latn,ts,"//For eksempel: //I en ændring kan du ændre et element til et andet element.//En palindrom matrix er en matrix, der //Find det mindste antal elementer i en række arr af heltal, som // >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
// 4
// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
// 1
// >>> smallest_change([1, 2, 3, 2, 1])
// 0
function smallest_change(arr: number[]): number {
","function smallest_change(arr: number[]): number {
    let changes = 0;
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
        if (arr[left] !== arr[right]) {
            changes++;
        }
        left++;
        right--;
    }

    return changes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = smallest_change;
  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);
  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);
  assert.deepEqual(candidate([1, 4, 2]),1);
  assert.deepEqual(candidate([1, 4, 4, 2]),1);
  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);
  assert.deepEqual(candidate([3, 1, 1, 3]),0);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([0, 1]),1);
}

test();"
HumanEval_74,dan_Latn,ts,"//Eksempler //Hvis de to arrays har samme antal tegn, returneres den første array.//Det samlede antal tegn i alle strenge i matrixen er mindre end i den anden matrix.//Skriv en funktion, der accepterer to strenge og returnerer den strenge, der har // >>> total_match([], [])
// []
// >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
// [""hI"", ""Hi""]
// >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
// [""hi"", ""admin""]
// >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
// [""hI"", ""hi"", ""hi""]
// >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
// [""4""]
function total_match(lst1: string[], lst2: string[]): string[] {
","function total_match(lst1: string[], lst2: string[]): string[] {
    const getTotalChars = (arr: string[]): number => {
        return arr.reduce((acc, str) => acc + str.length, 0);
    };

    const totalChars1 = getTotalChars(lst1);
    const totalChars2 = getTotalChars(lst2);

    if (totalChars1 < totalChars2) {
        return lst1;
    } else if (totalChars2 < totalChars1) {
        return lst2;
    } else {
        return lst1;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = total_match;
  assert.deepEqual(candidate([], []),[]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([], [""this""]),[]);
  assert.deepEqual(candidate([""this""], []),[]);
}

test();"
HumanEval_75,dan_Latn,ts,"//Eksempel: //Vi ved, at a er mindre end 100.//og falske i øvrigt.//Skriv en funktion, der returnerer sandt, hvis det givne tal er en gang af 3 primtal.// >>> is_multiply_prime(30)
// true
// 30 = 2 * 3 * 5
function is_multiply_prime(a: number): boolean {
","function is_multiply_prime(a: number): boolean {
    // Helper function to check if a number is prime
    function isPrime(n: number): boolean {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 === 0 || n % 3 === 0) return false;
        for (let i = 5; i * i <= n; i += 6) {
            if (n % i === 0 || n % (i + 2) === 0) return false;
        }
        return true;
    }

    // Generate a list of primes less than 100
    const primes: number[] = [];
    for (let i = 2; i < 100; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    // Check if a can be expressed as a product of 3 distinct primes
    const primeCount = primes.length;
    for (let i = 0; i < primeCount - 2; i++) {
        for (let j = i + 1; j < primeCount - 1; j++) {
            for (let k = j + 1; k < primeCount; k++) {
                if (primes[i] * primes[j] * primes[k] === a) {
                    return true;
                }
            }
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_multiply_prime;
  assert.deepEqual(candidate(5),false);
  assert.deepEqual(candidate(30),true);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),false);
  assert.deepEqual(candidate(125),true);
  assert.deepEqual(candidate(105),true);
  assert.deepEqual(candidate(126),false);
  assert.deepEqual(candidate(729),false);
  assert.deepEqual(candidate(891),false);
  assert.deepEqual(candidate(1001),true);
}

test();"
HumanEval_76,dan_Latn,ts,"//For eksempel: //x er en simpel potens af n, hvis n**int=x //i andre tilfælde.//Det er din opgave at skrive en funktion, der returnerer true, hvis et tal x er et simpelt // >>> is_simple_power(1, 4)
// true
// >>> is_simple_power(2, 2)
// true
// >>> is_simple_power(8, 2)
// true
// >>> is_simple_power(3, 2)
// false
// >>> is_simple_power(3, 1)
// false
// >>> is_simple_power(5, 3)
// false
function is_simple_power(x: number, n: number): boolean {
","function is_simple_power(x: number, n: number): boolean {
    if (x < 1 || n < 1) return false;
    if (x === 1) return true; // n^0 is 1 for any n

    let power = 1;
    while (power < x) {
        power *= n;
    }
    
    return power === x;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_simple_power;
  assert.deepEqual(candidate(16, 2),true);
  assert.deepEqual(candidate(143214, 16),false);
  assert.deepEqual(candidate(4, 2),true);
  assert.deepEqual(candidate(9, 3),true);
  assert.deepEqual(candidate(16, 4),true);
  assert.deepEqual(candidate(24, 2),false);
  assert.deepEqual(candidate(128, 4),false);
  assert.deepEqual(candidate(12, 6),false);
  assert.deepEqual(candidate(1, 1),true);
  assert.deepEqual(candidate(1, 12),true);
}

test();"
HumanEval_77,dan_Latn,ts,"//Eksempler: //Bemærk: Du kan antage, at indlyden altid er gyldig. //Hvis dette tal er en kubus af et helt tal.//Skriv en funktion, der tager et heltal a og returnerer true.// >>> iscube(1)
// true
// >>> iscube(2)
// false
// >>> iscube(-1)
// true
// >>> iscube(64)
// true
// >>> iscube(0)
// true
// >>> iscube(180)
// false
function iscube(a: number): boolean {
","function iscube(a: number): boolean {
    // Calculate the cube root of the absolute value of a
    const cubeRoot = Math.cbrt(Math.abs(a));
    // Check if the cube root is an integer
    return cubeRoot === Math.round(cubeRoot);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = iscube;
  assert.deepEqual(candidate(1),true);
  assert.deepEqual(candidate(2),false);
  assert.deepEqual(candidate(-1),true);
  assert.deepEqual(candidate(64),true);
  assert.deepEqual(candidate(180),false);
  assert.deepEqual(candidate(1000),true);
  assert.deepEqual(candidate(0),true);
  assert.deepEqual(candidate(1729),false);
}

test();"
HumanEval_78,dan_Latn,ts,"//Eksempler: //og symbolerne A, B, C, D, E, F er altid store bogstaver. //Bemærk: du kan antage, at indgangen altid er korrekt eller tom streng, //B (= decimal 11), D (= decimal 13). //Vi skal finde et af de følgende tal: 2, 3, 5, 7, //Primtal er 2, 3, 5, 7, 11, 13, 17,...//De sekstendedelte cifre er 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. //større end 1, der ikke er et produkt af to mindre naturlige tal).//Primmere tal er et naturligt tal.//et hexadecimaltal som en streng og tæller antallet af hexadecimaler //Du har fået til opgave at skrive en funktion, der modtager // >>> hex_key(""AB"")
// 1
// >>> hex_key(""1077E"")
// 2
// >>> hex_key(""ABED1A33"")
// 4
// >>> hex_key(""123456789ABCDEF0"")
// 6
// >>> hex_key(""2020"")
// 2
function hex_key(num: string): number {
","function hex_key(num: string): number {
    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);
    let count = 0;

    for (let digit of num) {
        if (primeHexDigits.has(digit)) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = hex_key;
  assert.deepEqual(candidate(""AB""),1);
  assert.deepEqual(candidate(""1077E""),2);
  assert.deepEqual(candidate(""ABED1A33""),4);
  assert.deepEqual(candidate(""2020""),2);
  assert.deepEqual(candidate(""123456789ABCDEF0""),6);
  assert.deepEqual(candidate(""112233445566778899AABBCCDDEEFF00""),12);
}

test();"
HumanEval_79,dan_Latn,ts,"//Eksempler: //De ekstra tegn er der for at hjælpe med formatet.//Der vil være et ekstra par tegn 'db' i begyndelsen og slutningen af strengen. //Hvert tegn i strengen vil være ""0"" eller ""1"".//Funktionen skal returnere en streng, hvor hvert tegn repræsenterer en binær //Du får et tal i decimalform, og din opgave er at konvertere det til // >>> decimal_to_binary(15)
// ""db1111db""
// >>> decimal_to_binary(32)
// ""db100000db""
function decimal_to_binary(decimal: number): string {
","function decimal_to_binary(decimal: number): string {
    const binaryString = decimal.toString(2);
    return `db${binaryString}db`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = decimal_to_binary;
  assert.deepEqual(candidate(0),""db0db"");
  assert.deepEqual(candidate(32),""db100000db"");
  assert.deepEqual(candidate(103),""db1100111db"");
  assert.deepEqual(candidate(15),""db1111db"");
}

test();"
HumanEval_80,dan_Latn,ts,"//For eksempel: //En streng er hapt, hvis dens længde er mindst 3 og hver 3 på hinanden følgende bogstaver er forskellige.//Din opgave er at kontrollere, om strengen er hapts eller ej.//Du får en streng s.// >>> is_happy(""a"")
// false
// >>> is_happy(""aa"")
// false
// >>> is_happy(""abcd"")
// true
// >>> is_happy(""aabb"")
// false
// >>> is_happy(""adb"")
// true
// >>> is_happy(""xyy"")
// false
function is_happy(s: string): boolean {
","function is_happy(s: string): boolean {
    if (s.length < 3) return false;

    for (let i = 0; i <= s.length - 3; i++) {
        const set = new Set(s.substring(i, i + 3));
        if (set.size !== 3) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_happy;
  assert.deepEqual(candidate(""a""),false);
  assert.deepEqual(candidate(""aa""),false);
  assert.deepEqual(candidate(""abcd""),true);
  assert.deepEqual(candidate(""aabb""),false);
  assert.deepEqual(candidate(""adb""),true);
  assert.deepEqual(candidate(""xyy""),false);
  assert.deepEqual(candidate(""iopaxpoi""),true);
  assert.deepEqual(candidate(""iopaxioi""),false);
}

test();"
HumanEval_81,dan_Latn,ts,"//Eksempel: //0,0 E //> 0, 0 D- //> 0,7 D //> 1,0 D+ //> 1,3 C- //> 1,7 C //> 2,0 C+ //> 2,3 B- //> 2,7 B //> 3,0 B+ //> 3.3 A- //> 3,7 A //4,0 A+ //GPA.//en funktion, der kan udgive en række bogstaveklasser ved hjælp af følgende tabel: //Hun har givet dig en række GPA'er for nogle elever, og du skal skrive.//Problemet er, at hun har mistet koden, hun brugte til at give karakterer.//Læreren har udviklet sin egen algoritme til karakterisering.//Det er sidste uge af semestre og læreren skal give karaktererne.// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
// [""A+"", ""B"", ""C-"", ""C"", ""A-""]
function numerical_letter_grade(grades: number[]): string[] {
","function numerical_letter_grade(grades: number[]): string[] {
    return grades.map(gpa => {
        if (gpa === 4.0) return ""A+"";
        if (gpa > 3.7) return ""A"";
        if (gpa > 3.3) return ""A-"";
        if (gpa > 3.0) return ""B+"";
        if (gpa > 2.7) return ""B"";
        if (gpa > 2.3) return ""B-"";
        if (gpa > 2.0) return ""C+"";
        if (gpa > 1.7) return ""C"";
        if (gpa > 1.3) return ""C-"";
        if (gpa > 1.0) return ""D+"";
        if (gpa > 0.7) return ""D"";
        if (gpa > 0.0) return ""D-"";
        return ""E"";
    });
}

// Example usage:
// console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // [""A+"", ""B"", ""C-"", ""C"", ""A-""]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = numerical_letter_grade;
  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""]);
  assert.deepEqual(candidate([1.2]),[""D+""]);
  assert.deepEqual(candidate([0.5]),[""D-""]);
  assert.deepEqual(candidate([0.0]),[""E""]);
  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""]);
  assert.deepEqual(candidate([0.0, 0.7]),[""E"", ""D-""]);
}

test();"
HumanEval_82,dan_Latn,ts,"//Eksempler //hvis længden er et primtal eller andet falsk //Skriv en funktion, der tager en streng og returnerer true, hvis strengen // >>> prime_length(""Hello"")
// true
// >>> prime_length(""abcdcba"")
// true
// >>> prime_length(""kittens"")
// true
// >>> prime_length(""orange"")
// false
function prime_length(string: string): boolean {
","function prime_length(string: string): boolean {
    const length = string.length;

    if (length < 2) return false;

    for (let i = 2; i * i <= length; i++) {
        if (length % i === 0) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_length;
  assert.deepEqual(candidate(""Hello""),true);
  assert.deepEqual(candidate(""abcdcba""),true);
  assert.deepEqual(candidate(""kittens""),true);
  assert.deepEqual(candidate(""orange""),false);
  assert.deepEqual(candidate(""wow""),true);
  assert.deepEqual(candidate(""world""),true);
  assert.deepEqual(candidate(""MadaM""),true);
  assert.deepEqual(candidate(""Wow""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""HI""),true);
  assert.deepEqual(candidate(""go""),true);
  assert.deepEqual(candidate(""gogo""),false);
  assert.deepEqual(candidate(""aaaaaaaaaaaaaaa""),false);
  assert.deepEqual(candidate(""Madam""),true);
  assert.deepEqual(candidate(""M""),false);
  assert.deepEqual(candidate(""0""),false);
}

test();"
HumanEval_83,dan_Latn,ts,"//positive heltal, der begynder eller slutter med 1.//Givet et positivt heltal n, returnerer antallet af n-cifrede tal function starts_one_ends(n: number): number {
","function starts_one_ends(n: number): number {
    if (n === 1) {
        return 1; // The number '1' is the only 1-digit number starting or ending with '1'
    }

    const totalNumbers = Math.pow(10, n - 1); // Total n-digit numbers starting with any digit from 1 to 9
    const startingWithOne = Math.pow(10, n - 1); // The n-digit numbers starting with '1'
    const endingWithOne = Math.pow(10, n - 1); // The n-digit numbers ending with '1'
    const startingAndEndingWithOne = Math.pow(10, n - 2); // The n-digit numbers starting and ending with '1' 

    // To find numbers that start or end with 1, add those starting with 1 
    // and those ending with 1, then subtract the overlap (those both starting and ending with 1).
    return startingWithOne + endingWithOne - startingAndEndingWithOne;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = starts_one_ends;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(2),18);
  assert.deepEqual(candidate(3),180);
  assert.deepEqual(candidate(4),1800);
  assert.deepEqual(candidate(5),18000);
}

test();"
HumanEval_84,dan_Latn,ts,"//Eksempel //Hvis der er givet et positivt heltal N, returneres summen af dets cifre i binær form. // >>> solve(1000)
// ""1""
// >>> solve(150)
// ""110""
// >>> solve(147)
// ""1100""
// Variables:
// @N integer
// Constraints: 0 ≤ N ≤ 10000.
// Output:
// a string of binary number
function solve(N: number): string {
","function solve(N: number): string {
    let sumOfDigits = 0;
    while (N > 0) {
        sumOfDigits += N % 10;
        N = Math.floor(N / 10);
    }
    return sumOfDigits.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(1000),""1"");
  assert.deepEqual(candidate(150),""110"");
  assert.deepEqual(candidate(147),""1100"");
  assert.deepEqual(candidate(333),""1001"");
  assert.deepEqual(candidate(963),""10010"");
}

test();"
HumanEval_85,dan_Latn,ts,"//Eksempler: //Når vi har en ikke-tom matrix af heltal, lægger vi først de lige elementer, der er på ulige indekser.// >>> add([4, 2, 6, 7])
// 2
function add(lst: number[]): number {
","function add(lst: number[]): number {
    return lst.reduce((sum, num, index) => {
        if (index % 2 === 1 && num % 2 === 0) {
            return sum + num;
        }
        return sum;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate([4, 88]),88);
  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);
  assert.deepEqual(candidate([4, 0, 6, 7]),0);
  assert.deepEqual(candidate([4, 4, 6, 8]),12);
}

test();"
HumanEval_86,dan_Latn,ts,"//For eksempel: //Bemærk: Du bør holde ordren og de tomme pladser i sætningen. //opstigende rækkefølge baseret på ascii-værdien.//er erstattet af et nyt ord, hvor alle tegnene i //Ordnet version af streng, er en streng, hvor alle ord (adskilt med mellemrum) //Skriv en funktion, der tager en streng og returnerer en ordnet version af den.// >>> anti_shuffle(""Hi"")
// ""Hi""
// >>> anti_shuffle(""hello"")
// ""ehllo""
// >>> anti_shuffle(""Hello World!!!"")
// ""Hello !!!Wdlor""
function anti_shuffle(s: string): string {
","function anti_shuffle(s: string): string {
  return s.split(' ').map(word =>
    word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')
  ).join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = anti_shuffle;
  assert.deepEqual(candidate(""Hi""),""Hi"");
  assert.deepEqual(candidate(""hello""),""ehllo"");
  assert.deepEqual(candidate(""number""),""bemnru"");
  assert.deepEqual(candidate(""abcd""),""abcd"");
  assert.deepEqual(candidate(""Hello World!!!""),""Hello !!!Wdlor"");
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"");
}

test();"
HumanEval_87,dan_Latn,ts,"//Eksempler: //Ordne også koordinaterne i rækken efter kolonnerne i faldende rækkefølge.//Ordne koordinaterne i første række i stigende rækkefølge.//Hver række er en koordinat - (række, kolonner), der starter med 0.//og returnere array af arrays, [(x1, y1), (x2, y2) ...] sådan at //Givet lst, og heltal x, finde heltal x i matrixen, //Hver række kan indeholde et andet antal kolonner.//Det er ligesom matrix, men i modsætning til matricer, //Du får en 2D-data, som en indlejret arrays, // >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
// >>> get_row([], 1)
// []
// >>> get_row([[], [1], [1, 2, 3]], 3)
// [[2, 2]]
function get_row(lst: number[][], x: number): [number, number][] {
","function get_row(lst: number[][], x: number): [number, number][] {
    const coordinates: [number, number][] = [];

    // Traverse the data matrix
    lst.forEach((row, rowIndex) => {
        row.forEach((value, colIndex) => {
            if (value === x) {
                coordinates.push([rowIndex, colIndex]);
            }
        });
    });

    // Sort the coordinates
    coordinates.sort(([row1, col1], [row2, col2]) => {
        if (row1 === row2) {
            // Sort by columns in descending order
            return col2 - col1;
        }
        // Sort by rows in ascending order
        return row1 - row2;
    });

    return coordinates;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_row;
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);
  assert.deepEqual(candidate([], 1),[]);
  assert.deepEqual(candidate([[1]], 2),[]);
  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);
}

test();"
HumanEval_88,dan_Latn,ts,"//Eksempler: //* ændrer ikke den givne matrix. //Bemærk: //eller sortere det i faldende rækkefølge, hvis summen ((første indeksværdi, sidste indeksværdi) er lige. //Vi sorterer den givne matrix i stigende rækkefølge, hvis summen af de to værdier er ulige.//Når vi har en række af ikke-negative heltal, returnerer vi en cots af den givne række efter sortering, // >>> sort_array([])
// []
// >>> sort_array([5])
// [5]
// >>> sort_array([2, 4, 3, 0, 1, 5])
// [0, 1, 2, 3, 4, 5]
// >>> sort_array([2, 4, 3, 0, 1, 5, 6])
// [6, 5, 4, 3, 2, 1, 0]
function sort_array(array: number[]): number[] {
","function sort_array(array: number[]): number[] {
    if (array.length === 0) {
        return [];
    }

    const firstValue = array[0];
    const lastValue = array[array.length - 1];
    const sum = firstValue + lastValue;

    const sortedArray = [...array].sort((a, b) => a - b);

    if (sum % 2 === 0) {
        return sortedArray.reverse();
    } else {
        return sortedArray;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5]),[5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);
  assert.deepEqual(candidate([2, 1]),[1, 2]);
  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);
  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);
}

test();"
HumanEval_89,dan_Latn,ts,"//For eksempel: //skifte ned med to gange til to steder.//Alfabetet skal drejes således, at bogstaverne //returnerer en streng krypteret med alfabetet, der roteres. //Opret en funktion, der krypterer en streng som argument og // >>> encrypt(""hi"")
// ""lm""
// >>> encrypt(""asdfghjkl"")
// ""ewhjklnop""
// >>> encrypt(""gf"")
// ""kj""
// >>> encrypt(""et"")
// ""ix""
function encrypt(s: string): string {
","function encrypt(s: string): string {
    const shift = 2 * 2; // Shift by 4 places
    const alphabetSize = 26;
    
    return s.split('').map(char => {
        const charCode = char.charCodeAt(0);
        
        // Check if the character is a lowercase letter
        if (charCode >= 97 && charCode <= 122) {
            let newCharCode = charCode + shift;
            
            // Wrap around if it goes past 'z'
            if (newCharCode > 122) {
                newCharCode = (newCharCode - 97) % alphabetSize + 97;
            }
            
            return String.fromCharCode(newCharCode);
        }

        // Return the character unchanged if it's not a lowercase letter
        return char;
    }).join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encrypt;
  assert.deepEqual(candidate(""hi""),""lm"");
  assert.deepEqual(candidate(""asdfghjkl""),""ewhjklnop"");
  assert.deepEqual(candidate(""gf""),""kj"");
  assert.deepEqual(candidate(""et""),""ix"");
  assert.deepEqual(candidate(""faewfawefaewg""),""jeiajeaijeiak"");
  assert.deepEqual(candidate(""hellomyfriend""),""lippsqcjvmirh"");
  assert.deepEqual(candidate(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"");
  assert.deepEqual(candidate(""a""),""e"");
}

test();"
HumanEval_90,dan_Latn,ts,"//Returnerer undefined, hvis der ikke er noget sådant element. //Skriv en funktion next_smallest (), der returnerer det næstmindste element i arrayet. //Vi har en række af hele tal.// >>> next_smallest([1, 2, 3, 4, 5])
// 2
// >>> next_smallest([5, 1, 4, 3, 2])
// 2
// >>> next_smallest([])
// undefined
// >>> next_smallest([1, 1])
// undefined
function next_smallest(lst: number[]): number | undefined {
","function next_smallest(lst: number[]): number | undefined {
    if (lst.length < 2) {
        return undefined;
    }
    
    let first: number | undefined = undefined;
    let second: number | undefined = undefined;
    
    for (let num of lst) {
        if (first === undefined || num < first) {
            second = first;
            first = num;
        } else if (num > first && (second === undefined || num < second)) {
            second = num;
        }
    }

    return second;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = next_smallest;
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);
  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);
}

test();"
HumanEval_91,dan_Latn,ts,"//For eksempel: //Sætningerne afgrænses af """", ""?"" eller ""!"" //En keder er en sætning, der begynder med ordet ""jeg"".//Du får en række ord, og din opgave er at tælle antallet.// >>> is_bored(""Hello world"")
// 0
// >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
// 1
function is_bored(S: string): number {
","function is_bored(S: string): number {
    // Split the string into sentences using '.', '?' or '!' as delimiters
    const sentences = S.split(/[.!?]/);

    // Filter sentences that start with ""I"" and count them
    const boredomCount = sentences.filter(sentence => sentence.trim().startsWith('I')).length;

    return boredomCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_bored;
  assert.deepEqual(candidate(""Hello world""),0);
  assert.deepEqual(candidate(""Is the sky blue?""),0);
  assert.deepEqual(candidate(""I love It !""),1);
  assert.deepEqual(candidate(""bIt""),0);
  assert.deepEqual(candidate(""I feel good today. I will be productive. will kill It""),2);
  assert.deepEqual(candidate(""You and I are going for a walk""),0);
}

test();"
HumanEval_92,dan_Latn,ts,"//Eksempler //Returnerer falsk i alle andre tilfælde. //Returnerer sandt, hvis et af tallene er lig med summen af de to andre tal, og alle tal er heltal. //Opret en funktion, der tager 3 tal.// >>> any_int(5, 2, 7)
// true
// >>> any_int(3, 2, 2)
// false
// >>> any_int(3, -2, 1)
// true
// >>> any_int(3.6, -2.2, 2)
// false
function any_int(x: number, y: number, z: number): boolean {
","function any_int(x: number, y: number, z: number): boolean {
    // Check if all numbers are integers
    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {
        return false;
    }
    // Check if one of the numbers is the sum of the other two
    if (x === y + z || y === x + z || z === x + y) {
        return true;
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = any_int;
  assert.deepEqual(candidate(2, 3, 1),true);
  assert.deepEqual(candidate(2.5, 2, 3),false);
  assert.deepEqual(candidate(1.5, 5, 3.5),false);
  assert.deepEqual(candidate(2, 6, 2),false);
  assert.deepEqual(candidate(4, 2, 2),true);
  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);
  assert.deepEqual(candidate(-4, 6, 2),true);
  assert.deepEqual(candidate(2, 1, 1),true);
  assert.deepEqual(candidate(3, 4, 7),true);
  assert.deepEqual(candidate(3.0, 4, 7),false);
}

test();"
HumanEval_93,dan_Latn,ts,"//Eksempler: //Antag kun bogstaver.//En vokal i det engelske alfabet.//Det er den bogstav, der står to pladser foran den.//Den ændrer alle bogstaver og alle vokaler i //Skriv en funktion, der tager en besked, og koder i en sådan // >>> encode(""test"")
// ""TGST""
// >>> encode(""This is a message"")
// ""tHKS KS C MGSSCGG""
function encode(message: string): string {
","function encode(message: string): string {
    const swapCase = (char: string): string => {
        if (char === char.toLowerCase()) {
            return char.toUpperCase();
        } else {
            return char.toLowerCase();
        }
    };

    const replaceVowel = (char: string): string => {
        const vowels = 'aeiou';
        const nextVowels = 'cgkqw';
        const index = vowels.indexOf(char.toLowerCase());
        if (index !== -1) {
            return char === char.toLowerCase() 
                ? nextVowels[index] 
                : nextVowels[index].toUpperCase();
        }
        return char;
    };

    return message
        .split('')
        .map(char => swapCase(replaceVowel(char)))
        .join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encode;
  assert.deepEqual(candidate(""TEST""),""tgst"");
  assert.deepEqual(candidate(""Mudasir""),""mWDCSKR"");
  assert.deepEqual(candidate(""YES""),""ygs"");
  assert.deepEqual(candidate(""This is a message""),""tHKS KS C MGSSCGG"");
  assert.deepEqual(candidate(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"");
}

test();"
HumanEval_94,dan_Latn,ts,"//Eksempler: //Vi skal finde den største primværdi og returnere summen af dets cifre.//Vi har en række af hele tal.// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
// 10
// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
// 25
// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
// 13
// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
// 11
// >>> skjkasdkd([0, 81, 12, 3, 1, 21])
// 3
// >>> skjkasdkd([0, 8, 1, 2, 1, 7])
// 7
function skjkasdkd(lst: number[]): number {
","function isPrime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}

function sumOfDigits(n: number): number {
    let sum = 0;
    while (n > 0) {
        sum += n % 10;
        n = Math.floor(n / 10);
    }
    return sum;
}

function skjkasdkd(lst: number[]): number {
    let maxPrime = -1;

    for (const num of lst) {
        if (isPrime(num) && num > maxPrime) {
            maxPrime = num;
        }
    }

    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = skjkasdkd;
  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);
  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);
  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);
  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);
  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);
  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);
  assert.deepEqual(candidate([8191]),19);
  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);
  assert.deepEqual(candidate([127, 97, 8192]),10);
}

test();"
HumanEval_95,dan_Latn,ts,"//Eksempler: //Funktionen skal returnere falsk, hvis det givne objekt er tomt. //case eller alle nøgler er strenge i store bogstaver, ellers returnerer false. //Hvis der er givet et objekt, returnerer true, hvis alle nøgler er strenge i lavere // >>> check_dict_case({""a"": ""apple"", ""b"": ""banana""})
// true
// >>> check_dict_case({""a"": ""apple"", ""A"": ""banana"", ""B"": ""banana""})
// false
// >>> check_dict_case({""a"": ""apple"", 8: ""banana"", ""a"": ""apple""})
// false
// >>> check_dict_case({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
// false
// >>> check_dict_case({""STATE"": ""NC"", ""ZIP"": ""12345""})
// true
function check_dict_case(dict: {[key: string]: string}): boolean {
","function check_dict_case(dict: { [key: string]: string }): boolean {
    const keys = Object.keys(dict);
    if (keys.length === 0) return false;

    const allLowerCase = keys.every(key => key === key.toLowerCase());
    const allUpperCase = keys.every(key => key === key.toUpperCase());

    return allLowerCase || allUpperCase;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_dict_case;
  assert.deepEqual(candidate({""p"": ""pineapple"", ""b"": ""banana""}),true);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""}),false);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""5"": ""banana"", ""a"": ""apple""}),false);
  assert.deepEqual(candidate({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""}),false);
  assert.deepEqual(candidate({""STATE"": ""NC"", ""ZIP"": ""12345""}),true);
  assert.deepEqual(candidate({""fruit"": ""Orange"", ""taste"": ""Sweet""}),true);
  assert.deepEqual(candidate({}),false);
}

test();"
HumanEval_96,dan_Latn,ts,"//for eksempel: //Præmier, der er mindre end n.//Implementere en funktion, der tager et ikke-negativt heltal og returnerer en matrix af de første n // >>> count_up_to(5)
// [2, 3]
// >>> count_up_to(11)
// [2, 3, 5, 7]
// >>> count_up_to(0)
// []
// >>> count_up_to(20)
// [2, 3, 5, 7, 11, 13, 17, 19]
// >>> count_up_to(1)
// []
// >>> count_up_to(18)
// [2, 3, 5, 7, 11, 13, 17]
function count_up_to(n: number): number[] {
","function count_up_to(n: number): number[] {
    function isPrime(num: number): boolean {
        if (num < 2) return false;
        for (let i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) return false;
        }
        return true;
    }

    const primes: number[] = [];
    for (let i = 2; i < n; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    return primes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_up_to;
  assert.deepEqual(candidate(5),[2, 3]);
  assert.deepEqual(candidate(6),[2, 3, 5]);
  assert.deepEqual(candidate(7),[2, 3, 5]);
  assert.deepEqual(candidate(10),[2, 3, 5, 7]);
  assert.deepEqual(candidate(0),[]);
  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);
  assert.deepEqual(candidate(1),[]);
  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);
  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);
}

test();"
HumanEval_97,dan_Latn,ts,"//Eksempler: //Antag, at indgangen altid er gyldig.//Produktet af deres enhedstallinger. //Udfyld funktionen, der tager to heltal og returnerer // >>> multiply(148, 412)
// 16
// >>> multiply(19, 28)
// 72
// >>> multiply(2020, 1851)
// 0
// >>> multiply(14, -15)
// 20
function multiply(a: number, b: number): number {
","function multiply(a: number, b: number): number {
    const unitDigitA = Math.abs(a) % 10;
    const unitDigitB = Math.abs(b) % 10;
    return unitDigitA * unitDigitB;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = multiply;
  assert.deepEqual(candidate(148, 412),16);
  assert.deepEqual(candidate(19, 28),72);
  assert.deepEqual(candidate(2020, 1851),0);
  assert.deepEqual(candidate(14, -15),20);
  assert.deepEqual(candidate(76, 67),42);
  assert.deepEqual(candidate(17, 27),49);
  assert.deepEqual(candidate(0, 1),0);
  assert.deepEqual(candidate(0, 0),0);
}

test();"
HumanEval_98,dan_Latn,ts,"//For eksempel: //Hvis man har en streng s, tæller man antallet af store vokaler i lige indekser.// >>> count_upper(""aBCdEf"")
// 1
// >>> count_upper(""abcdefg"")
// 0
// >>> count_upper(""dBBE"")
// 0
function count_upper(s: string): number {
","function count_upper(s: string): number {
    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);
    let count = 0;
    
    for (let i = 0; i < s.length; i += 2) {
        if (uppercaseVowels.has(s[i])) {
            count++;
        }
    }
    
    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_upper;
  assert.deepEqual(candidate(""aBCdEf""),1);
  assert.deepEqual(candidate(""abcdefg""),0);
  assert.deepEqual(candidate(""dBBE""),0);
  assert.deepEqual(candidate(""B""),0);
  assert.deepEqual(candidate(""U""),1);
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""EEEE""),2);
}

test();"
HumanEval_99,dan_Latn,ts,"//Eksempler //Vi kan også runde det væk fra nul.//Hvis tallet er lige langt væk fra det, returnerer det det nærmeste heltal.//Oprette en funktion, der tager en værdi (string) der repræsenterer et tal // >>> closest_integer(""10"")
// 10
// >>> closest_integer(""15.3"")
// 15
// Note:
// Rounding away from zero means that if the given number is equidistant
// from two integers, the one you should return is the one that is the
// farthest from zero. For example closest_integer(""14.5"") should
// return 15 and closest_integer(""-14.5"") should return -15.
function closest_integer(value: string): number {
","function closest_integer(value: string): number {
  const num = parseFloat(value);
  if (num > 0) {
    return Math.floor(num + 0.5);
  } else {
    return Math.ceil(num - 0.5);
  }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = closest_integer;
  assert.deepEqual(candidate(""10""),10);
  assert.deepEqual(candidate(""14.5""),15);
  assert.deepEqual(candidate(""-15.5""),-16);
  assert.deepEqual(candidate(""15.3""),15);
  assert.deepEqual(candidate(""0""),0);
}

test();"
HumanEval_100,dan_Latn,ts,"//Eksempler: //i er antallet af sten i niveauet (i+1). //Returnerer antallet af sten i hvert niveau i en matrix, hvor elementet er index //- det næste lige tal, hvis n er lige. //- det næste ulige tal, hvis n er ulige. //Antallet af sten i det næste niveau er://Første niveau har n sten.//Hvis vi har et positivt heltal n, skal vi lave en bunke af n niveauer af sten.// >>> make_a_pile(3)
// [3, 5, 7]
function make_a_pile(n: number): number[] {
","function make_a_pile(n: number): number[] {
    const result: number[] = [];
    let currentStones = n;
    for (let i = 0; i < n; i++) {
        result.push(currentStones);
        if (currentStones % 2 === 0) {
            currentStones += 2; // next even number
        } else {
            currentStones += 2; // next odd number
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_a_pile;
  assert.deepEqual(candidate(3),[3, 5, 7]);
  assert.deepEqual(candidate(4),[4, 6, 8, 10]);
  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);
  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);
  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);
}

test();"
HumanEval_101,dan_Latn,ts,"//For eksempel: //for at opdele strengen i ord og returnere en række af ordene.//Du får en række ord adskilt af kommaer eller mellemrum.// >>> words_string(""Hi, my name is John"")
// [""Hi"", ""my"", ""name"", ""is"", ""John""]
// >>> words_string(""One, two, three, four, five, six"")
// [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
function words_string(s: string): string[] {
","function words_string(s: string): string[] {
    return s.split(/[\s,]+/).filter(word => word.length > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_string;
  assert.deepEqual(candidate(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""]);
  assert.deepEqual(candidate(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""Hi, my name""),[""Hi"", ""my"", ""name""]);
  assert.deepEqual(candidate(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""ahmed     , gamal""),[""ahmed"", ""gamal""]);
}

test();"
HumanEval_102,dan_Latn,ts,"//For eksempel: //Hvis der ikke er noget tal, så skal funktionen returnere -1.//Det største lige heltal, der ligger i intervallet [x, y] inklusiv.//Denne funktion tager to positive tal x og y og returnerer // >>> choose_num(12, 15)
// 14
// >>> choose_num(13, 12)
// -1
function choose_num(x: number, y: number): number {
","function choose_num(x: number, y: number): number {
    // Ensure x is less than or equal to y for proper range searching
    if (x > y) {
        [x, y] = [y, x];
    }
    
    // Start looking from the upper bound of the range
    for (let i = y; i >= x; i--) {
        if (i % 2 === 0) {
            return i;
        }
    }
    
    // If no even number is found in the range
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = choose_num;
  assert.deepEqual(candidate(12, 15),14);
  assert.deepEqual(candidate(13, 12),-1);
  assert.deepEqual(candidate(33, 12354),12354);
  assert.deepEqual(candidate(5234, 5233),-1);
  assert.deepEqual(candidate(6, 29),28);
  assert.deepEqual(candidate(27, 10),-1);
  assert.deepEqual(candidate(7, 7),-1);
  assert.deepEqual(candidate(546, 546),546);
}

test();"
HumanEval_103,dan_Latn,ts,"//Eksempel: //Hvis n er større end m, returneres -1.//Rund svaret op til nærmeste heltal og konverter det til binært tal.//gennemsnit af hele tal fra n til m (inklusive n og m).//Du får to positive heltal n og m, og din opgave er at beregne // >>> rounded_avg(1, 5)
// ""0b11""
// >>> rounded_avg(7, 5)
// -1
// >>> rounded_avg(10, 20)
// ""0b1111""
// >>> rounded_avg(20, 33)
// ""0b11010""
function rounded_avg(n: number, m: number): string | number {
","function rounded_avg(n: number, m: number): string | number {
    if (n > m) {
        return -1;
    }

    const count = m - n + 1;
    let sum = 0;
    
    for (let i = n; i <= m; i++) {
        sum += i;
    }

    const avg = sum / count;
    const roundedAvg = Math.round(avg);
    return ""0b"" + roundedAvg.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rounded_avg;
  assert.deepEqual(candidate(1, 5),""0b11"");
  assert.deepEqual(candidate(7, 13),""0b1010"");
  assert.deepEqual(candidate(964, 977),""0b1111001010"");
  assert.deepEqual(candidate(996, 997),""0b1111100100"");
  assert.deepEqual(candidate(560, 851),""0b1011000010"");
  assert.deepEqual(candidate(185, 546),""0b101101110"");
  assert.deepEqual(candidate(362, 496),""0b110101101"");
  assert.deepEqual(candidate(350, 902),""0b1001110010"");
  assert.deepEqual(candidate(197, 233),""0b11010111"");
  assert.deepEqual(candidate(7, 5),-1);
  assert.deepEqual(candidate(5, 1),-1);
  assert.deepEqual(candidate(5, 5),""0b101"");
}

test();"
HumanEval_104,dan_Latn,ts,"//For eksempel: //Bemærk: Returnerede matrix skal sorteres i stigende rækkefølge.//Elementer, der ikke har nogen lige cifre.//Når vi har en række af positive heltal x, returnerer vi en sorteret række af alle // >>> unique_digits([15, 33, 1422, 1])
// [1, 15, 33]
// >>> unique_digits([152, 323, 1422, 10])
// []
function unique_digits(x: number[]): number[] {
","function unique_digits(x: number[]): number[] {
    // Helper function to check if a number has any even digit
    const hasEvenDigit = (num: number): boolean => {
        while (num > 0) {
            const digit = num % 10;
            if (digit % 2 === 0) return true;
            num = Math.floor(num / 10);
        }
        return false;
    };

    // Filter out numbers without even digits and sort them
    return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);
}

// Example usage:
console.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]
console.log(unique_digits([152, 323, 1422, 10])); // []","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique_digits;
  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);
  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);
  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);
  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);
}

test();"
HumanEval_105,dan_Latn,ts,"//For eksempel: //""En"", ""To"", ""Tre"", ""Fire"", ""Fem"", ""Seks"", ""Syv"", ""Otte"", ""Ni"".//omvendt den resulterende matrix, og derefter erstatte hvert ciffer med det tilsvarende navn fra //I en række af heltal skal vi sortere de heltal, der ligger mellem 1 og 9 inklusiv.// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
// [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
// If the array is empty, return an empty array:
// >>> by_length([])
// []
// If the array has any strange number ignore it:
// >>> by_length([1, -1, 55])
// [""One""]
function by_length(arr: number[]): string[] {
","function by_length(arr: number[]): string[] {
    const numberNames: { [key: number]: string } = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    };

    return arr
        .filter(num => num >= 1 && num <= 9)
        .sort((a, b) => b - a)
        .map(num => numberNames[num]);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = by_length;
  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -1, 55]),[""One""]);
  assert.deepEqual(candidate([1, -1, 3, 2]),[""Three"", ""Two"", ""One""]);
  assert.deepEqual(candidate([9, 4, 8]),[""Nine"", ""Eight"", ""Four""]);
}

test();"
HumanEval_106,dan_Latn,ts,"//Eksempel: //Faktorialen af i er gange af tallene fra 1 til i (1 * 2 * ... * i).//i starter fra 1. //eller summen af tal fra 1 til i. //og returnerer en matrix af størrelse n, således at værdien af elementet ved indeks i er faktorielet af i hvis i er lige //Implementer funktionen f, der tager n som parameter, // >>> f(5)
// [1, 2, 6, 24, 15]
function f(n: number): number[] {
","function f(n: number): number[] {
    const result: number[] = [];
    for (let i = 1; i <= n; i++) {
        if (i % 2 === 0) {
            // Calculate factorial for even i
            let factorial = 1;
            for (let j = 1; j <= i; j++) {
                factorial *= j;
            }
            result.push(factorial);
        } else {
            // Calculate sum for odd i
            let sum = 0;
            for (let j = 1; j <= i; j++) {
                sum += j;
            }
            result.push(sum);
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = f;
  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);
  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);
  assert.deepEqual(candidate(1),[1]);
  assert.deepEqual(candidate(3),[1, 2, 6]);
}

test();"
HumanEval_107,dan_Latn,ts,"//Eksempel 1: //hele palindromer, der falder inden for området ((1, n), inklusiv. //Givet et positivt heltal n, returnerer vi en matrix, der har antallet af lige og ulige // >>> even_odd_palindrome(3)
// [1, 2]
// Explanation:
// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
// Example 2:
// >>> even_odd_palindrome(12)
// [4, 6]
// Explanation:
// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
// Note:
// 1. 1 <= n <= 10^3
// 2. returned array has the number of even and odd integer palindromes respectively.
function even_odd_palindrome(n: number): [number, number] {
","function isPalindrome(num: number): boolean {
    const str = num.toString();
    return str === str.split('').reverse().join('');
}

function even_odd_palindrome(n: number): [number, number] {
    let evenCount = 0;
    let oddCount = 0;

    for (let i = 1; i <= n; i++) {
        if (isPalindrome(i)) {
            if (i % 2 === 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_palindrome;
  assert.deepEqual(candidate(123),[8, 13]);
  assert.deepEqual(candidate(12),[4, 6]);
  assert.deepEqual(candidate(3),[1, 2]);
  assert.deepEqual(candidate(63),[6, 8]);
  assert.deepEqual(candidate(25),[5, 6]);
  assert.deepEqual(candidate(19),[4, 6]);
  assert.deepEqual(candidate(9),[4, 5]);
  assert.deepEqual(candidate(1),[0, 1]);
}

test();"
HumanEval_108,dan_Latn,ts,"//Eksempelvis har -123 tegnede cifre -1, 2 og 3.//Hvis et tal er negativt, er det første tegnede ciffer negativt: //antallet af elementer, hvis sum af cifre er > 0. //Skriv en funktion count_nums, der tager en række af heltal og returnerer // >>> count_nums([])
// 0
// >>> count_nums([-1, 11, -11])
// 1
// >>> count_nums([1, 1, 2])
// 3
function count_nums(arr: number[]): number {
","function count_nums(arr: number[]): number {
    function sumOfDigits(num: number): number {
        let sum = 0;
        let str = num.toString();
        for (let i = 0; i < str.length; i++) {
            let digit = parseInt(str[i]);
            if (i === 0 && str[i] === '-') {
                digit = -parseInt(str[i+1]);
                i++;
            }
            sum += digit;
        }
        return sum;
    }

    let count = 0;
    for (const num of arr) {
        if (sumOfDigits(num) > 0) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_nums;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([-1, -2, 0]),0);
  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);
  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);
  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);
  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);
  assert.deepEqual(candidate([0, 1]),1);
  assert.deepEqual(candidate([1]),1);
}

test();"
HumanEval_109,dan_Latn,ts,"//For eksempel: //Bemærk: Det givne array har garanteret unikke elementer.//Hvis den givne matrix er tom, returneres true. //så returnerer true eller returnerer false. //Hvis det er muligt at få den sorterede matrix ved at udføre ovenstående operation //startpositionen i matrixen, dvs. 0-indekset. //Det sidste element i matrixen flyttes til //En højre-skiftning betyder, at alle elementer i matricen skiftes med én.//Du har lov til at udføre højre skift operation et hvilket som helst antal gange.//følgende operation på den givne matrix: //Det er muligt at få en matrix sorteret i ikke-faldende rækkefølge ved at udføre //Tal i matrixen vil blive tilfældigt ordnet.//Vi har en matrix 'arr' af N heltal arr[1], arr[2], ..., arr[N].// >>> move_one_ball([3, 4, 5, 1, 2])
// true
// Explanation: By performin 2 right shift operations, non-decreasing order can
// be achieved for the given array.
// >>> move_one_ball([3, 5, 4, 1, 2])
// false
// Explanation:It is not possible to get non-decreasing order for the given
// array by performing any number of right shift operations.
function move_one_ball(arr: number[]): boolean {
","function move_one_ball(arr: number[]): boolean {
    if (arr.length === 0) return true;

    let countDecreases = 0;
    const n = arr.length;

    for (let i = 0; i < n; i++) {
        if (arr[i] > arr[(i + 1) % n]) {
            countDecreases++;
        }
        if (countDecreases > 1) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = move_one_ball;
  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);
  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);
  assert.deepEqual(candidate([4, 3, 1, 2]),false);
  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);
  assert.deepEqual(candidate([]),true);
}

test();"
HumanEval_110,dan_Latn,ts,"//For eksempel: //Ellers returneres ""NEJ"". //Hvis alle elementer i lst1 er lige, returnerer ""YES"".//Hvis det er muligt at udveksle elementer mellem lst1 og lst2 for at gøre //Der er ingen grænse for antallet af elementer, der kan udveksles mellem lst1 og lst2. //mellem dem for at gøre lst1 en række af kun lige tal. //og afgør , om det er muligt at foretage en udveksling af elementer //I dette problem skal du implementere en funktion, der tager to talarrangementer, // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
// ""YES""
// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
// ""NO""
// It is assumed that the input arrays will be non-empty.
function exchange(lst1: number[], lst2: number[]): string {
","function exchange(lst1: number[], lst2: number[]): string {
    const isEven = (num: number) => num % 2 === 0;
    
    // Count the odd numbers in lst1
    const oddCountInLst1 = lst1.reduce((count, num) => count + (isEven(num) ? 0 : 1), 0);

    // Count the even numbers in lst2
    const evenCountInLst2 = lst2.reduce((count, num) => count + (isEven(num) ? 1 : 0), 0);

    // Check if number of odd numbers in lst1 can be matched by even numbers in lst2
    return oddCountInLst1 <= evenCountInLst2 ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = exchange;
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),""YES"");
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),""NO"");
  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),""NO"");
  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"");
  assert.deepEqual(candidate([100, 200], [200, 200]),""YES"");
}

test();"
HumanEval_111,dan_Latn,ts,"//Eksempel: //Hvis flere bogstaver har samme forekomst, returneres alle. //Det er den bogstav, der gentages oftest, og som indeholder det tilsvarende antal.//Hvis der er en streng, der repræsenterer små bogstaver med mellemrum, returnerer vi et objekt // >>> histogram(""a b c"")
// {""a"": 1, ""b"": 1, ""c"": 1}
// >>> histogram(""a b b a"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""a b c a b"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""b b b b a"")
// {""b"": 4}
// >>> histogram("""")
// {}
function histogram(test: string): {[key: string]: number} {
","function histogram(test: string): { [key: string]: number } {
    if (test.trim() === """") {
        return {};
    }

    const letters = test.split("" "");
    const counts: { [key: string]: number } = {};

    for (const letter of letters) {
        if (letter in counts) {
            counts[letter]++;
        } else {
            counts[letter] = 1;
        }
    }

    let maxCount = 0;
    for (const count of Object.values(counts)) {
        if (count > maxCount) {
            maxCount = count;
        }
    }

    const result: { [key: string]: number } = {};
    for (const [letter, count] of Object.entries(counts)) {
        if (count === maxCount) {
            result[letter] = count;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = histogram;
  assert.deepEqual(candidate(""a b b a""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c a b""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c d g""),{""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""b b b b a""),{""b"": 4});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""""),{});
  assert.deepEqual(candidate(""a""),{""a"": 1});
}

test();"
HumanEval_112,dan_Latn,ts,"//Eksempel //Du skal returnere en matrix, der indeholder resultatstrengen og true/false for kontrollen. //En streng kaldes palindrom, hvis den er den samme bagud som fremad.//så kontroller, om den resulterende streng er palindrom. //Vi har to strenge s og c, du skal slette alle tegn i s, der er lig med et tegn i c.//Opgave // >>> reverse_delete(""abcde"", ""ae"")
// [""bcd"", false]
// >>> reverse_delete(""abcdef"", ""b"")
// [""acdef"", false]
// >>> reverse_delete(""abcdedcba"", ""ab"")
// [""cdedc"", true]
function reverse_delete(s: string, c: string): [string, boolean] {
","function reverse_delete(s: string, c: string): [string, boolean] {
    // Create a Set of characters to delete for faster lookup
    const charsToDelete = new Set(c);

    // Filter out characters in 's' that are in 'c'
    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');

    // Check if the filtered string is a palindrome
    const isPalindrome = filteredString === filteredString.split('').reverse().join('');

    return [filteredString, isPalindrome];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = reverse_delete;
  assert.deepEqual(candidate(""abcde"", ""ae""),[""bcd"", false]);
  assert.deepEqual(candidate(""abcdef"", ""b""),[""acdef"", false]);
  assert.deepEqual(candidate(""abcdedcba"", ""ab""),[""cdedc"", true]);
  assert.deepEqual(candidate(""dwik"", ""w""),[""dik"", false]);
  assert.deepEqual(candidate(""a"", ""a""),["""", true]);
  assert.deepEqual(candidate(""abcdedcba"", """"),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""abcdedcba"", ""v""),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""vabba"", ""v""),[""abba"", true]);
  assert.deepEqual(candidate(""mamma"", ""mia""),["""", true]);
}

test();"
HumanEval_113,dan_Latn,ts,"//af ulige cifre i den i'te streng af input. //String i i input. "" hvor alle i'erne skal erstattes af tallet //Hvert element i i udgangen skal være ""antallet af ulige elementer i //Hvis vi har en række af strenge, hvor hver streng kun består af cifre, returnerer vi en række.// >>> odd_count([""1234567""])
// [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
// >>> odd_count([""3"", ""11111111""])
// [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
function odd_count(lst: string[]): string[] {
","function odd_count(lst: string[]): string[] {
    return lst.map(str => {
        // Count the number of odd digits in the string
        let oddCount = Array.from(str).reduce((count, char) => {
            let digit = parseInt(char, 10);
            return digit % 2 !== 0 ? count + 1 : count;
        }, 0);

        // Construct the result string
        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = odd_count;
  assert.deepEqual(candidate([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""]);
  assert.deepEqual(candidate([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]);
  assert.deepEqual(candidate([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]);
}

test();"
HumanEval_114,dan_Latn,ts,"//Eksempel //af nums. //Find den mindste sum af alle ikke-tomme undermatræk // >>> minSubArraySum([2, 3, 4, 1, 2, 4])
// 1
// >>> minSubArraySum([-1, -2, -3])
// -6
function minSubArraySum(nums: number[]): number {
","function minSubArraySum(nums: number[]): number {
    let minSum = nums[0];
    let currentSum = nums[0];
    
    for (let i = 1; i < nums.length; i++) {
        currentSum = Math.min(nums[i], currentSum + nums[i]);
        minSum = Math.min(minSum, currentSum);
    }
    
    return minSum;
}

// Example usage:
// console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1
// console.log(minSubArraySum([-1, -2, -3])); // Output: -6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minSubArraySum;
  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);
  assert.deepEqual(candidate([-1, -2, -3]),-6);
  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);
  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);
  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);
  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);
  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);
  assert.deepEqual(candidate([-10]),-10);
  assert.deepEqual(candidate([7]),7);
  assert.deepEqual(candidate([1, -1]),-1);
}

test();"
HumanEval_115,dan_Latn,ts,"//Eksempel 1: //Angiv antallet af gange, du skal sænke spandene. //Jeres opgave er at bruge spandene til at tømme brøndene.//og alle spande har samme kapacitet.//Hver brønd har en tilsvarende spand, som kan bruges til at udvinde vand fra den, //og hver 1 i rækken repræsenterer en enkelt vandenhed. //Man får et rektangulært gitter af brønde, hvor hver række repræsenterer en enkelt brønd.// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
// 6
// Example 2:
// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
// 5
// Example 3:
// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
// 0
// Constraints:
// * all wells have the same length
// * 1 <= grid.length <= 10^2
// * 1 <= grid[:,1].length <= 10^2
// * grid[i][j] -> 0 | 1
// * 1 <= capacity <= 10
function max_fill(grid: number[][], capacity: number): number {
","function max_fill(grid: number[][], capacity: number): number {
    let totalBuckets = 0;

    for (let row of grid) {
        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);
        totalBuckets += Math.ceil(waterUnits / capacity);
    }

    return totalBuckets;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_fill;
  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);
  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);
  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);
}

test();"
HumanEval_116,dan_Latn,ts,"//Den skal gennemføres således: //For et tilsvarende antal ener skal sorteringen foretages på basis af decimalværdien. //Antal ener i deres binære repræsentation i stigende rækkefølge.//I denne Kata skal du sortere en række af ikke-negative heltal efter // >>> sort_array([1, 5, 2, 3, 4])
// [1, 2, 3, 4, 5]
// >>> sort_array([-2, -3, -4, -5, -6])
// [-6, -5, -4, -3, -2]
// >>> sort_array([1, 0, 2, 3, 4])
// [0, 1, 2, 3, 4]
function sort_array(arr: number[]): number[] {
","function sort_array(arr: number[]): number[] {
    return arr.sort((a, b) => {
        const countOnes = (n: number) => n.toString(2).replace(/0/g, """").length;
        const numOnesA = countOnes(a);
        const numOnesB = countOnes(b);

        if (numOnesA !== numOnesB) {
            return numOnesA - numOnesB;
        } else {
            return a - b;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);
  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);
  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);
  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
}

test();"
HumanEval_117,dan_Latn,ts,"//Eksempler: //Bemærk: Du kan antage, at inputstrengen kun indeholder bogstaver og mellemrum. //Hvis strengen s er tom, skal funktionen returnere en tom matrix. //n konsonanter, i den rækkefølge disse ord forekommer i strengen s. //en funktion, der returnerer en matrix med alle ord fra streng s, der indeholder nøjagtigt //Hvis vi har en streng s og et naturligt tal n, har vi fået til opgave at implementere // >>> select_words(""Mary had a little lamb"", 4)
// [""little""]
// >>> select_words(""Mary had a little lamb"", 3)
// [""Mary"", ""lamb""]
// >>> select_words(""simple white space"", 2)
// []
// >>> select_words(""Hello world"", 4)
// [""world""]
// >>> select_words(""Uncle sam"", 3)
// [""Uncle""]
function select_words(s: string, n: number): string[] {
","function select_words(s: string, n: number): string[] {
    const isConsonant = (char: string): boolean => {
        const vowels = 'aeiouAEIOU';
        return !vowels.includes(char) && /[a-zA-Z]/.test(char);
    };

    const words = s.split(' ');
    const result: string[] = [];

    for (const word of words) {
        const consonantCount = [...word].filter(isConsonant).length;
        if (consonantCount === n) {
            result.push(word);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = select_words;
  assert.deepEqual(candidate(""Mary had a little lamb"", 4),[""little""]);
  assert.deepEqual(candidate(""Mary had a little lamb"", 3),[""Mary"", ""lamb""]);
  assert.deepEqual(candidate(""simple white space"", 2),[]);
  assert.deepEqual(candidate(""Hello world"", 4),[""world""]);
  assert.deepEqual(candidate(""Uncle sam"", 3),[""Uncle""]);
  assert.deepEqual(candidate("""", 4),[]);
  assert.deepEqual(candidate(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""]);
}

test();"
HumanEval_118,dan_Latn,ts,"//Eksempel: //Du kan antage, at den givne streng indeholder kun engelsk bogstav. //Find en vokal, der opfylder ovenstående betingelse.//Vokaler i begyndelsen og slutningen tæller ikke.//to konsonanter fra ordets højre side (højre- og venstregradsspecifik).//Du får et ord, og din opgave er at finde den nærmeste vokal, der står mellem dem.// >>> get_closest_vowel(""yogurt"")
// ""u""
// >>> get_closest_vowel(""FULL"")
// ""U""
// >>> get_closest_vowel(""quick"")
// """"
// >>> get_closest_vowel(""ab"")
// """"
function get_closest_vowel(word: string): string {
","function get_closest_vowel(word: string): string {
    const vowels = new Set<string>(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);
    for (let i = word.length - 2; i > 0; i--) {
        if (vowels.has(word[i]) && !vowels.has(word[i - 1]) && !vowels.has(word[i + 1])) {
            return word[i];
        }
    }
    return '';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_closest_vowel;
  assert.deepEqual(candidate(""yogurt""),""u"");
  assert.deepEqual(candidate(""full""),""u"");
  assert.deepEqual(candidate(""easy""),"""");
  assert.deepEqual(candidate(""eAsy""),"""");
  assert.deepEqual(candidate(""ali""),"""");
  assert.deepEqual(candidate(""bad""),""a"");
  assert.deepEqual(candidate(""most""),""o"");
  assert.deepEqual(candidate(""ab""),"""");
  assert.deepEqual(candidate(""ba""),"""");
  assert.deepEqual(candidate(""quick""),"""");
  assert.deepEqual(candidate(""anime""),""i"");
  assert.deepEqual(candidate(""Asia""),"""");
  assert.deepEqual(candidate(""Above""),""o"");
}

test();"
HumanEval_119,dan_Latn,ts,"//Eksempler: //Returnerer 'Ja' hvis der er en måde at lave en god streng, og returnerer 'Nej' ellers.//""()) "" er ikke. //er afbalanceret. For eksempel: Strengen '(()))) er god, mens strengen //En streng S anses for at være god, hvis og kun hvis alle parenteser i S //Det er en god ting, at den resulterende streng er god.//Dit job er at kontrollere, om det er muligt at sammenkæde de to strenge i //kun parenteserne "" (("") eller parenteserne "") "".//Du får en matrix af to strenge, begge strenge består af åbne // >>> match_parens([""()("", "")""])
// ""Yes""
// >>> match_parens(["")"", "")""])
// ""No""
function match_parens(lst: string[]): string {
","function match_parens(lst: string[]): string {
    const canFormGoodString = (s1: string, s2: string): boolean => {
        let balance = 0;

        // Check s1 followed by s2
        for (const char of s1 + s2) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }
        if (balance === 0) return true; // Balanced

        balance = 0;
        // Check s2 followed by s1
        for (const char of s2 + s1) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }

        return balance === 0; // Balanced
    };

    return canFormGoodString(lst[0], lst[1]) ? 'Yes' : 'No';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = match_parens;
  assert.deepEqual(candidate([""()("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", "")""]),""No"");
  assert.deepEqual(candidate([""(()(())"", ""())())""]),""No"");
  assert.deepEqual(candidate(["")())"", ""(()()(""]),""Yes"");
  assert.deepEqual(candidate([""(())))"", ""(()())((""]),""Yes"");
  assert.deepEqual(candidate([""()"", ""())""]),""No"");
  assert.deepEqual(candidate([""(()("", ""()))()""]),""Yes"");
  assert.deepEqual(candidate([""(((("", ""((())""]),""No"");
  assert.deepEqual(candidate(["")(()"", ""(()(""]),""No"");
  assert.deepEqual(candidate(["")("", "")(""]),""No"");
  assert.deepEqual(candidate([""("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", ""(""]),""Yes"");
}

test();"
HumanEval_120,dan_Latn,ts,"//Eksempel 1: //af længde k med de maksimale k tal i arr. //Givet en række arr af heltal og et positivt heltal k, returnerer en sorteret række // >>> maximum([-3, -4, 5], 3)
// [-4, -3, 5]
// Example 2:
// >>> maximum([4, -4, 4], 2)
// [4, 4]
// Example 3:
// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
// [2]
// Note:
// 1. The length of the array will be in the range of [1, 1000].
// 2. The elements in the array will be in the range of [-1000, 1000].
// 3. 0 <= k <= len(arr)
function maximum(arr: number[], k: number): number[] {
","function maximum(arr: number[], k: number): number[] {
    // Sort the array in descending order and then take the first k elements
    const sortedArr = arr.sort((a, b) => b - a);
    return sortedArr.slice(0, k).sort((a, b) => a - b);
}

// Example usage:
// console.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]
// console.log(maximum([4, -4, 4], 2)); // Output: [4, 4]
// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = maximum;
  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);
  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);
  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);
  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);
  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);
  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);
  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);
  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);
  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);
  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);
  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);
}

test();"
HumanEval_121,dan_Latn,ts,"//Eksempler //Givet en ikke-tom matrix af heltal, returnerer vi summen af alle de ulige elementer, der er i lige positioner.// >>> solution([5, 8, 7, 1])
// 12
// >>> solution([3, 3, 3, 3, 3])
// 9
// >>> solution([30, 13, 24, 321])
// 0
function solution(lst: number[]): number {
","function solution(lst: number[]): number {
    let sum: number = 0;
    for (let i = 0; i < lst.length; i += 2) {  // Traverse even indices
        if (lst[i] % 2 !== 0) {  // Check if the element is odd
            sum += lst[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solution;
  assert.deepEqual(candidate([5, 8, 7, 1]),12);
  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);
  assert.deepEqual(candidate([30, 13, 24, 321]),0);
  assert.deepEqual(candidate([5, 9]),5);
  assert.deepEqual(candidate([2, 4, 8]),0);
  assert.deepEqual(candidate([30, 13, 23, 32]),23);
  assert.deepEqual(candidate([3, 13, 2, 9]),3);
}

test();"
HumanEval_122,dan_Latn,ts,"//Eksempel: //summen af de elementer, der højst har to cifre fra de første k elementer af arr. //Hvis der er en ikke-tom matrix af heltal arr og et heltal k, returneres // >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
// 24
// Constraints:
// 1. 1 <= len(arr) <= 100
// 2. 1 <= k <= len(arr)
function add_elements(arr: number[], k: number): number {
","function add_elements(arr: number[], k: number): number {
    let sum = 0;
    for (let i = 0; i < k; i++) {
        if (arr[i] >= -99 && arr[i] <= 99) {
            sum += arr[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add_elements;
  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);
  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);
  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);
  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);
  assert.deepEqual(candidate([1], 1),1);
}

test();"
HumanEval_123,dan_Latn,ts,"//get_odd_collatz(5) returnerer [1, 5] # Collatz sekvensen for 5 er [5, 16, 8, 4, 2, 1], så de ulige tal er kun 1, og 5. //For eksempel: //2. returneret matrix sorteret i stigende rækkefølge.//1. Collatz(1) er [1]. //Bemærk: //Det er en gætning, at uanset hvilken værdi af n, vil sekvensen altid nå 1.//Hvis det foregående udtryk er ulige, er det næste udtryk 3 gange det foregående udtryk.//Hvis det foregående led er lige, er det næste led halvdelen af //som følger: start med et hvilket som helst positivt heltal n. Derefter udledes hver term fra //Collatz-formodningen er en formodning i matematik, der vedrører en defineret sekvens.//Givet et positivt heltal n, returnerer vi en sorteret matrix med ulige tal i Collatz-sekvensen. // >>> get_odd_collatz(5)
// [1, 5]
function get_odd_collatz(n: number): number[] {
","function get_odd_collatz(n: number): number[] {
    const collatzSequence: number[] = [];
    while (n !== 1) {
        if (n % 2 !== 0) {
            collatzSequence.push(n);
        }
        if (n % 2 === 0) {
            n = n / 2;
        } else {
            n = 3 * n + 1;
        }
    }
    // Include 1 in the sequence if it's odd, as per standard collatz sequence
    collatzSequence.push(1);
    return collatzSequence.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_odd_collatz;
  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(5),[1, 5]);
  assert.deepEqual(candidate(12),[1, 3, 5]);
  assert.deepEqual(candidate(1),[1]);
}

test();"
HumanEval_124,dan_Latn,ts,"//4. Datoen skal være i formatet: mm-dd-ååååå//3. Månedstallet må ikke være mindre end 1 og ikke over 12.//2. Antallet af dage er ikke mindre end 1 eller højere end 31 dage for måneder 1,3,5,7,8,10,12. Og antallet af dage er ikke mindre end 1 eller højere end 30 dage for måneder 4,6,9,11. Og antallet af dage er ikke mindre end 1 eller højere end 29 for måned 2.//1. Datoen er ikke tom.//Datoen er gyldig, hvis alle følgende regler er opfyldt: //returnerer sandt, hvis datoen er gyldig, ellers falsk. //Du skal skrive en funktion, der validerer en given dato strenge og // >>> valid_date(""03-11-2000"")
// true
// >>> valid_date(""15-01-2012"")
// false
// >>> valid_date(""04-0-2040"")
// false
// >>> valid_date(""06-04-2020"")
// true
// >>> valid_date(""06/04/2020"")
// false
function valid_date(date: string): boolean {
","function valid_date(date: string): boolean {
    // Check if the date is empty
    if (date.trim() === """") return false;

    // Split the date string into components
    const dateParts = date.split(""-"");
    if (dateParts.length !== 3) return false;

    const [monthStr, dayStr, yearStr] = dateParts;

    // Validate each part of the date
    const month = parseInt(monthStr, 10);
    const day = parseInt(dayStr, 10);
    const year = parseInt(yearStr, 10);

    // Check if all parts are valid numbers
    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;

    // Check the month range
    if (month < 1 || month > 12) return false;

    // Check the day range based on the month
    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {
        if (day < 1 || day > 31) return false;
    } else if ([4, 6, 9, 11].includes(month)) {
        if (day < 1 || day > 30) return false;
    } else if (month === 2) {
        if (day < 1 || day > 29) return false;
    }

    // All checks passed
    return true;
}

// Example usage
console.log(valid_date(""03-11-2000"")); // true
console.log(valid_date(""15-01-2012"")); // false
console.log(valid_date(""04-0-2040""));  // false
console.log(valid_date(""06-04-2020"")); // true
console.log(valid_date(""06/04/2020"")); // false","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = valid_date;
  assert.deepEqual(candidate(""03-11-2000""),true);
  assert.deepEqual(candidate(""15-01-2012""),false);
  assert.deepEqual(candidate(""04-0-2040""),false);
  assert.deepEqual(candidate(""06-04-2020""),true);
  assert.deepEqual(candidate(""01-01-2007""),true);
  assert.deepEqual(candidate(""03-32-2011""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""04-31-3000""),false);
  assert.deepEqual(candidate(""06-06-2005""),true);
  assert.deepEqual(candidate(""21-31-2000""),false);
  assert.deepEqual(candidate(""04-12-2003""),true);
  assert.deepEqual(candidate(""04122003""),false);
  assert.deepEqual(candidate(""20030412""),false);
  assert.deepEqual(candidate(""2003-04""),false);
  assert.deepEqual(candidate(""2003-04-12""),false);
  assert.deepEqual(candidate(""04-2003""),false);
}

test();"
HumanEval_125,dan_Latn,ts,"//Eksempler //alfabetisk, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 //skal opdeles på kommaer ',' hvis der ikke findes kommaer, skal du returnere antallet af små bogstaver i ulige rækkefølge i //Hvis der er en række af ord, returnerer vi en række af ord opdelt på mellemrum, hvis der ikke findes mellemrum i den tekst, du søger.// >>> split_words(""Hello world!"")
// [""Hello"", ""world!""]
// >>> split_words(""Hello,world!"")
// [""Hello"", ""world!""]
// >>> split_words(""abcdef"")
// 3
function split_words(txt: string): string[] | number {
","function split_words(txt: string): string[] | number {
    if (txt.includes("" "")) {
        return txt.split("" "");
    }
    if (txt.includes("","")) {
        return txt.split("","");
    }
    const oddOrderCount = [...txt].reduce((count, char) => {
        const charCode = char.charCodeAt(0) - 'a'.charCodeAt(0);
        if (char === char.toLowerCase() && charCode % 2 === 1) {
            return count + 1;
        }
        return count;
    }, 0);

    return oddOrderCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = split_words;
  assert.deepEqual(candidate(""Hello world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello,world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello world,!""),[""Hello"", ""world,!""]);
  assert.deepEqual(candidate(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""]);
  assert.deepEqual(candidate(""abcdef""),3);
  assert.deepEqual(candidate(""aaabb""),2);
  assert.deepEqual(candidate(""aaaBb""),1);
  assert.deepEqual(candidate(""""),0);
}

test();"
HumanEval_126,dan_Latn,ts,"//Eksempler //Antag ingen negative tal og kun heltal.//Hvis array har mere end 1 duplikat af samme//Hvis vi har en række tal, returneres de, uanset om de er sorterede eller ej.// >>> is_sorted([5])
// true
// >>> is_sorted([1, 2, 3, 4, 5])
// true
// >>> is_sorted([1, 3, 2, 4, 5])
// false
// >>> is_sorted([1, 2, 3, 4, 5, 6])
// true
// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
// true
// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
// false
// >>> is_sorted([1, 2, 2, 3, 3, 4])
// true
// >>> is_sorted([1, 2, 2, 2, 3, 4])
// false
function is_sorted(lst: number[]): boolean {
","function is_sorted(lst: number[]): boolean {
    for (let i = 0; i < lst.length - 1; i++) {
        if (lst[i] > lst[i + 1]) {
            return false;
        }
        if (lst[i] === lst[i + 1]) {
            let count = 1;
            while (lst[i + count] === lst[i]) {
                count++;
                if (count > 2) return false;
            }
        }
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_sorted;
  assert.deepEqual(candidate([5]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);
  assert.deepEqual(candidate([]),true);
  assert.deepEqual(candidate([1]),true);
  assert.deepEqual(candidate([3, 2, 1]),false);
  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);
  assert.deepEqual(candidate([1, 2, 3, 4]),true);
}

test();"
HumanEval_127,dan_Latn,ts,"//[input/output] prøver: //Hvis de to intervaller ikke skærer hinanden, returnerer ""NEJ"".//Hvis ikke, returneres ""NEJ"". //Hvis skæringspunktet er et primtal, returneres ""YES"", //Det er ikke et primtal.//Eksempel: Skæringspunktet mellem intervallerne (1, 3), (2, 4) er (2, 3) //intervaller er et primtal.//Din opgave er at finde ud af, om længden af krydset mellem disse to //For hvert givet interval antages det, at dets begyndelse er mindre end eller lig med dets slutning.//omfatter både start og slutning. //De givne intervaller er lukkede, hvilket betyder, at intervallet (start, slut) //hvor hvert interval er et par af heltal. f.eks. interval = (start, slut) = (1, 2).//Du får to intervaller.// >>> intersection([1, 2], [2, 3])
// ""NO""
// >>> intersection([-1, 1], [0, 4])
// ""NO""
// >>> intersection([-3, -1], [-5, 5])
// ""YES""
function intersection(interval1: [number, number], interval2: [number, number]): string {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true; // 2 and 3 are prime numbers
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function intersection(interval1: [number, number], interval2: [number, number]): string {
    const start = Math.max(interval1[0], interval2[0]);
    const end = Math.min(interval1[1], interval2[1]);

    if (start > end) {
        return ""NO"";
    }

    const length = end - start;

    return isPrime(length) ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersection;
  assert.deepEqual(candidate([1, 2], [2, 3]),""NO"");
  assert.deepEqual(candidate([-1, 1], [0, 4]),""NO"");
  assert.deepEqual(candidate([-3, -1], [-5, 5]),""YES"");
  assert.deepEqual(candidate([-2, 2], [-4, 0]),""YES"");
  assert.deepEqual(candidate([-11, 2], [-1, -1]),""NO"");
  assert.deepEqual(candidate([1, 2], [3, 5]),""NO"");
  assert.deepEqual(candidate([1, 2], [1, 2]),""NO"");
  assert.deepEqual(candidate([-2, -2], [-3, -2]),""NO"");
}

test();"
HumanEval_128,dan_Latn,ts,"//Eksempel: //Bemærk: return undefined for tomme arr. //af hvert tal i matrixen, repræsenteret ved 1, -1 eller 0. //Summen af hele tals størrelser ganget med produktet af alle tegn //Vi har en række af hele tal, og vi skal returnere // >>> prod_signs([1, 2, 2, -4])
// 9
// >>> prod_signs([0, 1])
// 0
// >>> prod_signs([])
// undefined
function prod_signs(arr: number[]): number | undefined {
","function prod_signs(arr: number[]): number | undefined {
    if (arr.length === 0) return undefined;

    let sumOfMagnitudes = 0;
    let productOfSigns = 1;

    for (const num of arr) {
        sumOfMagnitudes += Math.abs(num);
        productOfSigns *= Math.sign(num);
    }

    return sumOfMagnitudes * productOfSigns;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prod_signs;
  assert.deepEqual(candidate([1, 2, 2, -4]),-9);
  assert.deepEqual(candidate([0, 1]),0);
  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);
  assert.deepEqual(candidate([-1, 1, -1, 1]),4);
  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);
  assert.deepEqual(candidate([-1, 1, 1, 0]),0);
}

test();"
HumanEval_129,dan_Latn,ts,"//Eksempler: //Returnerer en ordenet matrix af de værdier i de celler, som den mindste vej går igennem. //Det er garanteret, at svaret er unikt. //lst_A[j] = lst_B[j]. //Således at lst_A[i] < lst_B[i] og for enhver j (1 <= j < i) har vi //end lst_B, med andre ord, der findes et heltalindeks i (1 <= i <= k) //gennem (lad os kalde dem lst_A og lst_B), lst_A er leksikografisk mindre //Efter at have lavet de ordnede arrays af værdierne på de celler, som A og B går //En vej A (af længde k) anses for mindre end en vej B (af længde k), hvis //Du kan IKKE forsvinde fra nettet.//(forpligtende adskilt).//Bemærk, at en vej af længde k betyder, at der besøges nøjagtigt k celler (ikke ////Med andre ord, kan du gå til celler, der deler en kant med din nuværende //Fra en hvilken som helst celle, og i hvert trin kan du flytte til en hvilken som helst af de nabokæler, //Vi skal finde den mindste vej af længde k i rutenettet.//inklusiv vises præcis én gang på rutenettet. //Hver celle i rutenettet indeholder en værdi.//Hvis der er tale om et gitter med N rækker og N kolonner (N >= 2) og et positivt heltal k, // >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
// [1, 2, 1]
// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
// [1]
function minPath(grid: number[][], k: number): number[] {
","function minPath(grid: number[][], k: number): number[] {
    const N = grid.length;
    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    
    type State = {path: number[], x: number, y: number, len: number};
    
    // Compare two paths lexicographically
    const isLess = (a: number[], b: number[]): boolean => {
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) return a[i] < b[i];
        }
        return false;
    };

    let bestPath: number[] = new Array(k).fill(Number.MAX_VALUE);
    
    // DFS function to explore paths of length k
    function dfs(x: number, y: number, path: number[], len: number): void {
        if (len === k) {
            if (isLess(path, bestPath)) {
                bestPath = [...path];
            }
            return;
        }
        
        for (const [dx, dy] of directions) {
            const nx = x + dx;
            const ny = y + dy;
            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {
                dfs(nx, ny, [...path, grid[nx][ny]], len + 1);
            }
        }
    }
    
    // Try starting from each cell
    for (let i = 0; i < N; i++) {
        for (let j = 0; j < N; j++) {
            dfs(i, j, [grid[i][j]], 1);
        }
    }
    
    return bestPath;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minPath;
  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);
  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);
  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);
  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);
  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);
  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);
  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);
  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);
  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);
  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);
  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);
}

test();"
HumanEval_130,dan_Latn,ts,"//Eksempler: //De første n + 1 tal i Tribonacci-sekvensen.//Vi har et ikke-negativt heltal n, og vi skal returnere en matrix af //= 2 + 3 + 3 = 8 //tri(3) = tri(2) + tri(1) + tri(4) //tri(4) = 3 //tri(2) = 1 + (2 / 2) = 2 //For eksempel: //tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), hvis n er ulige. //tri (n) = 1 + n / 2, hvis n er lige.//tri(1) = 3 //Tribonacci sekvensen er defineret ved gentagelsen: //Men hvad folk ikke kender er Tribonacci sekvensen.//Alle kender Fibonacci sekvensen, den blev studeret dybt af matematikere i // >>> tri(3)
// [1, 3, 2, 8]
function tri(n: number): number[] {
","function tri(n: number): number[] {
    const tribonacci: number[] = [1, 3]; // Initialize with first two definite values

    function calculateTribonacci(index: number): number {
        if (index < tribonacci.length) {
            return tribonacci[index];
        }

        let result: number;
        if (index % 2 === 0) {
            result = 1 + index / 2;
        } else {
            result = calculateTribonacci(index - 1) + calculateTribonacci(index - 2) + calculateTribonacci(index + 1);
        }

        tribonacci[index] = result; // Memoize the result
        return result;
    }

    for (let i = 0; i <= n; i++) {
        calculateTribonacci(i);
    }

    return tribonacci.slice(0, n + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = tri;
  assert.deepEqual(candidate(3),[1, 3, 2, 8]);
  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);
  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);
  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);
  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);
  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);
  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);
  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);
  assert.deepEqual(candidate(0),[1]);
  assert.deepEqual(candidate(1),[1, 3]);
}

test();"
HumanEval_131,dan_Latn,ts,"//For eksempel: //Returnerer 0 hvis alle cifre er lige. //Hvis vi har et positivt heltal n, returnerer vi produktet af de ulige cifre. // >>> digits(1)
// 1
// >>> digits(4)
// 0
// >>> digits(235)
// 15
function digits(n: number): number {
","function digits(n: number): number {
    let product = 1;
    let hasOdd = false;
    
    while (n > 0) {
        let digit = n % 10;
        if (digit % 2 !== 0) {
            product *= digit;
            hasOdd = true;
        }
        n = Math.floor(n / 10);
    }

    return hasOdd ? product : 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digits;
  assert.deepEqual(candidate(5),5);
  assert.deepEqual(candidate(54),5);
  assert.deepEqual(candidate(120),1);
  assert.deepEqual(candidate(5014),5);
  assert.deepEqual(candidate(98765),315);
  assert.deepEqual(candidate(5576543),2625);
  assert.deepEqual(candidate(2468),0);
}

test();"
HumanEval_132,dan_Latn,ts,"//hvor mindst én parentes i efterfølgeren er indlejret. //Funktionen skal returnere true, hvis og kun hvis der er en gyldig undersekvens af parenteser //Oprette en funktion, der tager en streng som input, som kun indeholder parenteser. // >>> is_nested(""[[]]"")
// true
// >>> is_nested(""[]]]]]]][[[[[]"")
// false
// >>> is_nested(""[][]"")
// false
// >>> is_nested(""[]"")
// false
// >>> is_nested(""[[][]]"")
// true
// >>> is_nested(""[[]][["")
// true
function is_nested(string: string): boolean {
","function is_nested(string: string): boolean {
    let depth = 0;
    let hasNesting = false;

    for (let char of string) {
        if (char === '[') {
            depth++;
            if (depth > 1) {
                hasNesting = true;
            }
        } else if (char === ']') {
            if (depth > 0) {
                depth--;
            } else {
                // More closing brackets than opening
                return false;
            }
        }
    }

    // Return true if there was at least one nested bracket and all brackets are matched
    return hasNesting && depth === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_nested;
  assert.deepEqual(candidate(""[[]]""),true);
  assert.deepEqual(candidate(""[]]]]]]][[[[[]""),false);
  assert.deepEqual(candidate(""[][]""),false);
  assert.deepEqual(candidate(""[]""),false);
  assert.deepEqual(candidate(""[[[[]]]]""),true);
  assert.deepEqual(candidate(""[]]]]]]]]]]""),false);
  assert.deepEqual(candidate(""[][][[]]""),true);
  assert.deepEqual(candidate(""[[]""),false);
  assert.deepEqual(candidate(""[]]""),false);
  assert.deepEqual(candidate(""[[]][[""),true);
  assert.deepEqual(candidate(""[[][]]""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""[[[[[[[[""),false);
  assert.deepEqual(candidate(""]]]]]]]]""),false);
}

test();"
HumanEval_133,dan_Latn,ts,"//Eksempler: //Runde hvert element i matrixen til det øverste int (loft) først.//Vi skal returnere summen af kvadraterne i den givne matrix, //Du får en række tal.// >>> lst([1.0, 2.0, 3.0])
// 14
// >>> lst([1.0, 4.0, 9.0])
// 98
// >>> lst([1.0, 3.0, 5.0, 7.0])
// 84
// >>> lst([1.4, 4.2, 0.0])
// 29
// >>> lst([-2.4, 1.0, 1.0])
// 6
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);
}

// Example usage:
// console.log(sum_squares([1.0, 2.0, 3.0])); // Output: 14
// console.log(sum_squares([1.0, 4.0, 9.0])); // Output: 98
// console.log(sum_squares([1.0, 3.0, 5.0, 7.0])); // Output: 84
// console.log(sum_squares([1.4, 4.2, 0.0])); // Output: 29
// console.log(sum_squares([-2.4, 1.0, 1.0])); // Output: 6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);
  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);
  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);
  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);
  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);
  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);
  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);
  assert.deepEqual(candidate([0.0]),0);
  assert.deepEqual(candidate([-1.0]),1);
  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);
}

test();"
HumanEval_134,dan_Latn,ts,"//Eksempler: //Bemærk: ""ord"" er en gruppe tegn adskilt af mellemrum. //en del af et ord, og falsk ellers.//af en given streng er et alfabetisk tegn og er ikke //Opret en funktion , der returnerer true , hvis det sidste tegn er // >>> check_if_last_char_is_a_letter(""apple pie"")
// false
// >>> check_if_last_char_is_a_letter(""apple pi e"")
// true
// >>> check_if_last_char_is_a_letter(""apple pi e "")
// false
// >>> check_if_last_char_is_a_letter("""")
// false
function check_if_last_char_is_a_letter(txt: string): boolean {
","function check_if_last_char_is_a_letter(txt: string): boolean {
    if (txt.trim() === """") return false; // Handle empty or whitespace strings

    // Trim the string to remove any trailing spaces
    txt = txt.trim();

    // Check if the last character is an alphabetical letter and ensure there's a space before it
    const lastChar = txt.charAt(txt.length - 1);
    const isAlpha = /[a-zA-Z]/.test(lastChar);

    return isAlpha && txt.lastIndexOf(' ') === txt.length - 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_if_last_char_is_a_letter;
  assert.deepEqual(candidate(""apple""),false);
  assert.deepEqual(candidate(""apple pi e""),true);
  assert.deepEqual(candidate(""eeeee""),false);
  assert.deepEqual(candidate(""A""),true);
  assert.deepEqual(candidate(""Pumpkin pie ""),false);
  assert.deepEqual(candidate(""Pumpkin pie 1""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""eeeee e ""),false);
  assert.deepEqual(candidate(""apple pie""),false);
  assert.deepEqual(candidate(""apple pi e ""),false);
}

test();"
HumanEval_135,dan_Latn,ts,"//Eksempler: //Der er tale om dobbeltværdier.//Hvis der ikke findes noget sådant element, returneres -1. Den givne matrix vil ikke indeholde //er ikke større end eller lig med det element, der umiddelbart går forud for det. Hvis //Oprette en funktion, der returnerer det største indeks for et element, som // >>> can_arrange([1, 2, 4, 3, 5])
// 3
// >>> can_arrange([1, 2, 3])
// -1
function can_arrange(arr: number[]): number {
","function can_arrange(arr: number[]): number {
    for (let i = arr.length - 1; i > 0; i--) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = can_arrange;
  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);
  assert.deepEqual(candidate([1, 2, 4, 5]),-1);
  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);
  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);
  assert.deepEqual(candidate([]),-1);
}

test();"
HumanEval_136,dan_Latn,ts,"//Eksempler: //Hvis der ikke er nogen negative eller positive heltal, returneres de som udefinerede.//af positive heltal i en matrix.//Det største af de negative heltal, og ""b"" er det mindste.//Oprette en funktion, der returnerer en matrix (a, b), hvor 'a' er // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
// [undefined, 1]
// >>> largest_smallest_integers([])
// [undefined, undefined]
// >>> largest_smallest_integers([0])
// [undefined, undefined]
function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
","function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
    let largestNegative: number | undefined = undefined;
    let smallestPositive: number | undefined = undefined;

    for (let num of lst) {
        if (num < 0) {
            if (largestNegative === undefined || num > largestNegative) {
                largestNegative = num;
            }
        } else if (num > 0) {
            if (smallestPositive === undefined || num < smallestPositive) {
                smallestPositive = num;
            }
        }
    }

    return [largestNegative, smallestPositive];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_smallest_integers;
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);
  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);
  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);
  assert.deepEqual(candidate([]),[undefined, undefined]);
  assert.deepEqual(candidate([0]),[undefined, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);
  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);
  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);
}

test();"
HumanEval_138,dan_Latn,ts,"//Eksempel //Vurder, om det givne tal n kan skrives som summen af nøjagtigt 4 positive lige tal.// >>> is_equal_to_sum_even(4)
// false
// >>> is_equal_to_sum_even(6)
// false
// >>> is_equal_to_sum_even(8)
// true
function is_equal_to_sum_even(n: number): boolean {
","function is_equal_to_sum_even(n: number): boolean {
    // The sum of 4 positive even numbers is always even and 8 is the smallest such sum (2 + 2 + 2 + 2).
    // Hence, if n is greater than or equal to 8 and even, n can be expressed as the sum of 4 positive even numbers.
    return (n >= 8) && (n % 2 === 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_equal_to_sum_even;
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),true);
  assert.deepEqual(candidate(11),false);
  assert.deepEqual(candidate(12),true);
  assert.deepEqual(candidate(13),false);
  assert.deepEqual(candidate(16),true);
}

test();"
HumanEval_139,dan_Latn,ts,"//For eksempel: //hvor n > 0 //Brasiliansk_faktorisk (n) = n! * (n-1)! * (n-2)! * ... * 1! //Den brasilianske faktorie er defineret som: // >>> special_factorial(4)
// 288
// The function will receive an integer as input and should return the special
// factorial of this integer.
function special_factorial(n: number): number {
","function factorial(n: number): number {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

function special_factorial(n: number): number {
    if (n <= 0) throw new Error(""Input must be a positive integer"");
    
    let result = 1;
    for (let i = n; i >= 1; i--) {
        result *= factorial(i);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = special_factorial;
  assert.deepEqual(candidate(4),288);
  assert.deepEqual(candidate(5),34560);
  assert.deepEqual(candidate(7),125411328000);
  assert.deepEqual(candidate(1),1);
}

test();"
HumanEval_140,dan_Latn,ts,"//Dertil kommer, at alle på hinanden følgende mellemrum erstattes med - //og hvis en streng har mere end 2 på hinanden følgende mellemrum, //Hvis der er en tekststreng, erstattes alle mellemrum i den med understreger, // >>> fix_spaces("" Example"")
// ""Example""
// >>> fix_spaces("" Example 1"")
// ""Example_1""
// >>> fix_spaces("" Example 2"")
// ""_Example_2""
// >>> fix_spaces("" Example 3"")
// ""_Example-3""
function fix_spaces(text: string): string {
","function fix_spaces(text: string): string {
    // Trim leading and trailing spaces
    let trimmedText = text.trim();

    // Use a regular expression to replace all sequences of two or more spaces with ""-""
    let replacedText = trimmedText.replace(/ {2,}/g, '-');

    // Replace remaining single spaces with underscores
    replacedText = replacedText.replace(/ /g, '_');

    return replacedText;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fix_spaces;
  assert.deepEqual(candidate(""Example""),""Example"");
  assert.deepEqual(candidate(""Mudasir Hanif ""),""Mudasir_Hanif_"");
  assert.deepEqual(candidate(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"");
  assert.deepEqual(candidate(""Exa   mple""),""Exa-mple"");
  assert.deepEqual(candidate(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"");
}

test();"
HumanEval_141,dan_Latn,ts,"//Eksempler: //- Substrengen efter punktet skal være en af disse: ['txt', 'exe', 'dll'] //Det latinske alfabet (""a"" - ""z"" og ""A"" - ""Z"").//- Substrengen før punktet bør ikke være tom, og det begynder med en bogstav fra //- Filens navn indeholder præcis ét prik.//- Filnavnet må ikke bestå af mere end tre cifre ('0'-'9'). //er opfyldt: //Et filnavn anses for gyldigt, hvis og kun hvis alle følgende betingelser er opfyldt://""Ja"", hvis filens navn er gyldigt, og returnerer ""Nej"", hvis det ikke er. //Oprette en funktion, der tager en streng, der repræsenterer filens navn, og returnerer // >>> file_name_check(""example.txt"")
// ""Yes""
// >>> file_name_check(""1example.dll"")
// ""No""
function file_name_check(file_name: string): string {
","function file_name_check(file_name: string): string {
    // Split the file name into name and extension based on the dot
    const parts = file_name.split('.');
    
    // Check if there's exactly one dot
    if (parts.length !== 2) {
        return 'No';
    }
    
    const [name, extension] = parts;
    
    // Check if the substring before the dot is not empty and starts with a latin letter
    if (name.length === 0 || !/^[a-zA-Z]/.test(name)) {
        return 'No';
    }
    
    // Check if the number of digits in the name is not more than three
    const digitCount = (name.match(/\d/g) || []).length;
    if (digitCount > 3) {
        return 'No';
    }
    
    // Check if the extension is one of the valid options
    const validExtensions = ['txt', 'exe', 'dll'];
    if (!validExtensions.includes(extension)) {
        return 'No';
    }
    
    // All conditions are met, the file name is valid
    return 'Yes';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = file_name_check;
  assert.deepEqual(candidate(""example.txt""),""Yes"");
  assert.deepEqual(candidate(""1example.dll""),""No"");
  assert.deepEqual(candidate(""s1sdf3.asd""),""No"");
  assert.deepEqual(candidate(""K.dll""),""Yes"");
  assert.deepEqual(candidate(""MY16FILE3.exe""),""Yes"");
  assert.deepEqual(candidate(""His12FILE94.exe""),""No"");
  assert.deepEqual(candidate(""_Y.txt""),""No"");
  assert.deepEqual(candidate(""?aREYA.exe""),""No"");
  assert.deepEqual(candidate(""/this_is_valid.dll""),""No"");
  assert.deepEqual(candidate(""this_is_valid.wow""),""No"");
  assert.deepEqual(candidate(""this_is_valid.txt""),""Yes"");
  assert.deepEqual(candidate(""this_is_valid.txtexe""),""No"");
  assert.deepEqual(candidate(""#this2_i4s_5valid.ten""),""No"");
  assert.deepEqual(candidate(""@this1_is6_valid.exe""),""No"");
  assert.deepEqual(candidate(""this_is_12valid.6exe4.txt""),""No"");
  assert.deepEqual(candidate(""all.exe.txt""),""No"");
  assert.deepEqual(candidate(""I563_No.exe""),""Yes"");
  assert.deepEqual(candidate(""Is3youfault.txt""),""Yes"");
  assert.deepEqual(candidate(""no_one#knows.dll""),""Yes"");
  assert.deepEqual(candidate(""1I563_Yes3.exe""),""No"");
  assert.deepEqual(candidate(""I563_Yes3.txtt""),""No"");
  assert.deepEqual(candidate(""final..txt""),""No"");
  assert.deepEqual(candidate(""final132""),""No"");
  assert.deepEqual(candidate(""_f4indsartal132.""),""No"");
  assert.deepEqual(candidate("".txt""),""No"");
  assert.deepEqual(candidate(""s.""),""No"");
}

test();"
HumanEval_142,dan_Latn,ts,"//Eksempler: //ændrer de poster i matrixen, hvis indeks ikke er et multiplum af 3 eller 4. Funktionen skal derefter returnere summen af alle poster.//Multiplikator af 3 og vil kubere hele tallet, hvis indeksen er et multiplikator af 4 og ikke et multiplikator af 3. Funktionen vil ikke //Denne funktion tager en række af heltal. For alle poster i rækken skal funktionen sætte heltalsen i anden, hvis dens indeks er a //"" // >>> lst
// [1, 2, 3]
// >>> lst
// []
// >>> lst
// [-1, -5, 2, -1, -5]
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.reduce((sum, value, index) => {
        if (index % 3 === 0) {
            return sum + (value * value);
        } else if (index % 4 === 0) {
            return sum + (value * value * value);
        } else {
            return sum + value;
        }
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1, 2, 3]),6);
  assert.deepEqual(candidate([1, 4, 9]),14);
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);
  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);
  assert.deepEqual(candidate([0]),0);
  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);
  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);
  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);
  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);
  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);
}

test();"
HumanEval_143,dan_Latn,ts,"//Eksempel 1: //Ordren i den nye tekststreng skal være den samme som i den oprindelige.//hvis længder er primtal, //Og du skal returnere en streng, der indeholder ordene fra den oprindelige sætning, //sætningen indeholder nogle ord, der er adskilt af et mellemrum, //Man får en streng, der repræsenterer en sætning.// >>> words_in_sentence(""This is a test"")
// ""is""
// Example 2:
// >>> words_in_sentence(""lets go for swimming"")
// ""go for""
// Constraints:
// * 1 <= len(sentence) <= 100
// * sentence contains only letters
function words_in_sentence(sentence: string): string {
","function isPrime(num: number): boolean {
    if (num < 2) return false;
    for (let i = 2; i * i <= num; i++) {
        if (num % i === 0) return false;
    }
    return true;
}

function words_in_sentence(sentence: string): string {
    return sentence
        .split(' ')
        .filter(word => isPrime(word.length))
        .join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_in_sentence;
  assert.deepEqual(candidate(""This is a test""),""is"");
  assert.deepEqual(candidate(""lets go for swimming""),""go for"");
  assert.deepEqual(candidate(""there is no place available here""),""there is no place"");
  assert.deepEqual(candidate(""Hi I am Hussein""),""Hi am Hussein"");
  assert.deepEqual(candidate(""go for it""),""go for it"");
  assert.deepEqual(candidate(""here""),"""");
  assert.deepEqual(candidate(""here is""),""is"");
}

test();"
HumanEval_144,dan_Latn,ts,"//Vi kan antage, at x og n er gyldige brøk, og at de ikke har nul som nævner.//<tæller>/<nævner>, hvor både tæller og nævner er positive hele tal. //Både x og n er strenge af en brøkdel, og har følgende format, //x * n. Funktionen returnerer true, hvis x * n er et helt tal og false //Det er din opgave at implementere en funktion, der forenkler udtrykket.// >>> simplify(""1/5"", ""5/1"")
// true
// >>> simplify(""1/6"", ""2/1"")
// false
// >>> simplify(""7/10"", ""10/2"")
// false
function simplify(x: string, n: string): boolean {
","function simplify(x: string, n: string): boolean {
    const parseFraction = (fraction: string): [number, number] => {
        const [numerator, denominator] = fraction.split('/').map(Number);
        return [numerator, denominator];
    };

    const [xNumerator, xDenominator] = parseFraction(x);
    const [nNumerator, nDenominator] = parseFraction(n);

    // Multiply the fractions: (a/b) * (c/d) = (a*c) / (b*d)
    const resultNumerator = xNumerator * nNumerator;
    const resultDenominator = xDenominator * nDenominator;

    // A product of fractions is a whole number if its numerator divided by denominator is an integer.
    return resultNumerator % resultDenominator === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = simplify;
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/6"", ""2/1""),false);
  assert.deepEqual(candidate(""5/1"", ""3/1""),true);
  assert.deepEqual(candidate(""7/10"", ""10/2""),false);
  assert.deepEqual(candidate(""2/10"", ""50/10""),true);
  assert.deepEqual(candidate(""7/2"", ""4/2""),true);
  assert.deepEqual(candidate(""11/6"", ""6/1""),true);
  assert.deepEqual(candidate(""2/3"", ""5/2""),false);
  assert.deepEqual(candidate(""5/2"", ""3/5""),false);
  assert.deepEqual(candidate(""2/4"", ""8/4""),true);
  assert.deepEqual(candidate(""2/4"", ""4/2""),true);
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/5"", ""1/5""),false);
}

test();"
HumanEval_145,dan_Latn,ts,"//For eksempel: //Ordne dem ud fra deres indeks i den oprindelige matrix.//Bemærk: Hvis der er flere poster med samme sum af deres cifre, //i stigende rækkefølge efter summen af deres cifre. //Skriv en funktion, der sorterer den givne række af heltal // >>> order_by_points([1, 11, -1, -11, -12])
// [-1, -11, 1, -12, 11]
// >>> order_by_points([])
// []
function order_by_points(nums: number[]): number[] {
","function order_by_points(nums: number[]): number[] {
    const digitSum = (num: number): number => {
        let sum = 0;
        let value = Math.abs(num);
        while (value > 0) {
            sum += value % 10;
            value = Math.floor(value / 10);
        }
        return sum;
    };

    return nums
        .map((num, index) => ({ num, index, sumOfDigits: digitSum(num) }))
        .sort((a, b) => {
            if (a.sumOfDigits === b.sumOfDigits) {
                return a.index - b.index;
            }
            return a.sumOfDigits - b.sumOfDigits;
        })
        .map(item => item.num);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = order_by_points;
  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);
  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);
  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);
}

test();"
HumanEval_146,dan_Latn,ts,"//For eksempel: //et tals første og sidste cifre er ulige (1, 3, 5, 7, 9). //Antallet af elementer i matrixen, der er større end 10 og begge //Skriv en funktion, der tager en række tal som input og returnerer // >>> specialFilter([15, -73, 14, -15])
// 1
// >>> specialFilter([33, -2, -3, 45, 21, 109])
// 2
function specialFilter(nums: number[]): number {
","function specialFilter(nums: number[]): number {
    const isOdd = (digit: number): boolean => digit % 2 !== 0;

    return nums.reduce((count, num) => {
        const absNumStr = Math.abs(num).toString();
        const firstDigit = parseInt(absNumStr[0]);
        const lastDigit = parseInt(absNumStr[absNumStr.length - 1]);

        if (num > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {
            return count + 1;
        }

        return count;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = specialFilter;
  assert.deepEqual(candidate([5, -2, 1, -5]),0);
  assert.deepEqual(candidate([15, -73, 14, -15]),1);
  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);
  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);
  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([]),0);
}

test();"
HumanEval_147,dan_Latn,ts,"//Eksempel: //Og a[i] + a[j] + a[k] er et multiplum af 3.//Returnerer antallet af trillinger (a[i], a[j], a[k]) af a, hvor i < j < k, //For hver i (1 ≤ i ≤ n) er værdien af a[i] = i * i - i + 1. //Vi har et helt tal n. Vi skal lave en heltalsmatrix a af længde n.// >>> get_max_triples(5)
// 1
// Explanation: 
// a = [1, 3, 7, 13, 21]
// The only valid triple is (1, 7, 13).
function get_max_triples(n: number): number {
","function get_max_triples(n: number): number {
    const a: number[] = [];

    for (let i = 1; i <= n; i++) {
        a[i - 1] = i * i - i + 1;
    }

    let count = 0;

    for (let i = 0; i < n - 2; i++) {
        for (let j = i + 1; j < n - 1; j++) {
            for (let k = j + 1; k < n; k++) {
                if ((a[i] + a[j] + a[k]) % 3 === 0) {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_max_triples;
  assert.deepEqual(candidate(5),1);
  assert.deepEqual(candidate(6),4);
  assert.deepEqual(candidate(10),36);
  assert.deepEqual(candidate(100),53361);
}

test();"
HumanEval_149,dan_Latn,ts,"//For eksempel: //Man kan antage, at alle ord har samme længde.//Funktionen skal returnere en række af strenge i sorteret rækkefølge. //Hvis to ord er af samme længde, skal vi sortere dem alfabetisk.//skal returnere den matrix, der er sorteret efter denne regel. //Ordren i matrixen skal stige i længden af hvert ord, og du //og den kan indeholde duplikater.//En matrix er altid en matrix af strenge og aldrig en matrix af tal.//og returnerer den resulterende matrix med en sorteret rækkefølge, //sletter de strenge, der har ulige længder fra det, //Skriv en funktion, der accepterer en række af strenge som en parameter, // >>> list_sort([""aa"", ""a"", ""aaa""])
// [""aa""]
// >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
// [""ab"", ""cd""]
function sorted_list_sum(lst: string[]): string[] {
","function sorted_list_sum(lst: string[]): string[] {
    // Filter out strings with odd lengths
    const filtered = lst.filter(str => str.length % 2 === 0);
    // Sort the array by length, then alphabetically
    const sorted = filtered.sort((a, b) => {
        if (a.length === b.length) {
            return a.localeCompare(b);
        }
        return a.length - b.length;
    });
    return sorted;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sorted_list_sum;
  assert.deepEqual(candidate([""aa"", ""a"", ""aaa""]),[""aa""]);
  assert.deepEqual(candidate([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""]);
  assert.deepEqual(candidate([""d"", ""b"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""]);
  assert.deepEqual(candidate([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""]);
  assert.deepEqual(candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""]);
}

test();"
HumanEval_150,dan_Latn,ts,"//Eksempler: //et primtal og skal returnere y-værdien i modsat fald. //Et simpelt program, der skal returnere x, hvis n er // >>> x_or_y(7, 34, 12)
// 34
// >>> x_or_y(15, 8, 5)
// 5
function x_or_y(n: number, x: number, y: number): number {
","function x_or_y(n: number, x: number, y: number): number {
    function isPrime(num: number): boolean {
        if (num <= 1) return false;
        if (num <= 3) return true;
        
        if (num % 2 === 0 || num % 3 === 0) return false;
        
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) return false;
        }
        
        return true;
    }

    return isPrime(n) ? x : y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = x_or_y;
  assert.deepEqual(candidate(7, 34, 12),34);
  assert.deepEqual(candidate(15, 8, 5),5);
  assert.deepEqual(candidate(3, 33, 5212),33);
  assert.deepEqual(candidate(1259, 3, 52),3);
  assert.deepEqual(candidate(7919, -1, 12),-1);
  assert.deepEqual(candidate(3609, 1245, 583),583);
  assert.deepEqual(candidate(91, 56, 129),129);
  assert.deepEqual(candidate(6, 34, 1234),1234);
  assert.deepEqual(candidate(1, 2, 0),0);
  assert.deepEqual(candidate(2, 2, 0),2);
}

test();"
HumanEval_151,dan_Latn,ts,"//Ignorer tal, der er negative eller ikke-helruter.//Givet en række tal, returnerer vi summen af kvadraterne af tallene.// >>> double_the_difference([1, 3, 2, 0])
// 10
// >>> double_the_difference([-1, -2, 0])
// 0
// >>> double_the_difference([9, -2])
// 81
// >>> double_the_difference([0])
// 0
// If the input array is empty, return 0.
function double_the_difference(lst: number[]): number {
","function double_the_difference(lst: number[]): number {
    return lst
        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0)
        .reduce((sum, num) => sum + num * num, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = double_the_difference;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([5.0, 4.0]),25);
  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);
  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);
  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);
  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);
  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);
}

test();"
HumanEval_152,dan_Latn,ts,"//Eksempel: //Værdien er 0, og hvis ikke, er værdien den absolutte forskel mellem gæt og score. //Returnerer en matrix af samme længde, der angiver, hvor langt væk hvert gæt var.//Du får to arrays af scores og gæt af samme længde, hvor hver indeks viser en match.//Din opgave er at afgøre, om en person har gættet resultaterne af en række kampe korrekt.//Det er bestemt værd at notere og sammenligne.//De følelser og tanker, du har i det øjeblik, er //Jeg tror, vi alle husker den følelse, når resultatet af en længe ventet// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
// [0, 0, 0, 0, 3, 3]
// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
// [4, 4, 1, 0, 0, 6]
function compare(game: number[], guess: number[]): number[] {
","function compare(game: number[], guess: number[]): number[] {
    return game.map((score, index) => Math.abs(score - guess[index]));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = compare;
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);
  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);
  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);
  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);
}

test();"
HumanEval_153,dan_Latn,ts,"//Eksempel: //(dets styrke er -1).//return ""Slices.SErviNGSliCes"", da ""SErviNGSliCes"" er den stærkeste udvidelse //Hvis du har brug for en tekst, der er udformet på en anden måde end den, du har brug for, og som du har brug for, så skal du bruge en tekst, der er udformet på anden måde end den, du har brug for.//For eksempel, hvis du får ""Slices"" som klassen og en matrix af //Vælg den, der kommer først i rækken.//Hvis der er to eller flere udvidelser med samme styrke, bør du //format: ClassName.StrongestExtensionName. //Du skal finde den stærkeste udvidelse og returnere en streng i denne .//I udvidelsens navn er styrken angivet ved fraktionen CAP - SM. //bogstaver i udvidelsens navn, og lad SM være antallet af små bogstaver //Udvidelsens styrke er som følger: Lad CAP være tallet i det store bogstav //Udvidelserne skal bruges til at indlæse yderligere klasser i klassen.//Du får navnet på en klasse (en streng) og en række udvidelser.// >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
// ""my_class.AA""
function Strongest_Extension(class_name: string, extensions: string[]): string {
","function Strongest_Extension(class_name: string, extensions: string[]): string {
    let strongestExtension = '';
    let maxStrength = -Infinity;

    extensions.forEach(extension => {
        const capCount = extension.split('').filter(char => char >= 'A' && char <= 'Z').length;
        const smCount = extension.split('').filter(char => char >= 'a' && char <= 'z').length;
        const strength = capCount - smCount;

        if (strength > maxStrength) {
            maxStrength = strength;
            strongestExtension = extension;
        }
    });

    return `${class_name}.${strongestExtension}`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = Strongest_Extension;
  assert.deepEqual(candidate(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"");
  assert.deepEqual(candidate(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"");
  assert.deepEqual(candidate(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"");
  assert.deepEqual(candidate(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"");
  assert.deepEqual(candidate(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"");
  assert.deepEqual(candidate(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"");
  assert.deepEqual(candidate(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"");
  assert.deepEqual(candidate(""_"", [""Bb"", ""91245""]),""_.Bb"");
  assert.deepEqual(candidate(""Sp"", [""671235"", ""Bb""]),""Sp.671235"");
}

test();"
HumanEval_154,dan_Latn,ts,"//Du skal returnere true, hvis det andet ord eller en af dets rotationer er en understreng i det første ord.// >>> cycpattern_check(""abcd"", ""abd"")
// false
// >>> cycpattern_check(""hello"", ""ell"")
// true
// >>> cycpattern_check(""whassup"", ""psus"")
// false
// >>> cycpattern_check(""abab"", ""baa"")
// true
// >>> cycpattern_check(""efef"", ""eeff"")
// false
// >>> cycpattern_check(""himenss"", ""simen"")
// true
function cycpattern_check(a: string, b: string): boolean {
","function cycpattern_check(a: string, b: string): boolean {
    for (let i = 0; i < b.length; i++) {
        const rotation = b.slice(i) + b.slice(0, i);
        if (a.includes(rotation)) {
            return true;
        }
    }
    return false;
}

// Test cases
console.log(cycpattern_check(""abcd"", ""abd"")); // false
console.log(cycpattern_check(""hello"", ""ell"")); // true
console.log(cycpattern_check(""whassup"", ""psus"")); // false
console.log(cycpattern_check(""abab"", ""baa"")); // true
console.log(cycpattern_check(""efef"", ""eeff"")); // false
console.log(cycpattern_check(""himenss"", ""simen"")); // true","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = cycpattern_check;
  assert.deepEqual(candidate(""xyzw"", ""xyw""),false);
  assert.deepEqual(candidate(""yello"", ""ell""),true);
  assert.deepEqual(candidate(""whattup"", ""ptut""),false);
  assert.deepEqual(candidate(""efef"", ""fee""),true);
  assert.deepEqual(candidate(""abab"", ""aabb""),false);
  assert.deepEqual(candidate(""winemtt"", ""tinem""),true);
}

test();"
HumanEval_155,dan_Latn,ts,"//Eksempel: //Givet et heltal. returnerer en matrix, der har antallet af lige og ulige cifre. // >>> even_odd_count(-12)
// [1, 1]
// >>> even_odd_count(123)
// [1, 2]
function even_odd_count(num: number): [number, number] {
","function even_odd_count(num: number): [number, number] {
    const numStr = Math.abs(num).toString();
    let evenCount = 0;
    let oddCount = 0;

    for (let char of numStr) {
        const digit = parseInt(char);
        if (digit % 2 === 0) {
            evenCount++;
        } else {
            oddCount++;
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_count;
  assert.deepEqual(candidate(7),[0, 1]);
  assert.deepEqual(candidate(-78),[1, 1]);
  assert.deepEqual(candidate(3452),[2, 2]);
  assert.deepEqual(candidate(346211),[3, 3]);
  assert.deepEqual(candidate(-345821),[3, 3]);
  assert.deepEqual(candidate(-2),[1, 0]);
  assert.deepEqual(candidate(-45347),[2, 3]);
  assert.deepEqual(candidate(0),[1, 0]);
}

test();"
HumanEval_156,dan_Latn,ts,"//Eksempler: //1 <= num <= 1000 //og returnerer det med små bogstaver. //Hvis vi har et positivt heltal, kan vi finde dets romerske talækvivalent i form af en streng, // >>> int_to_mini_roman(19)
// ""xix""
// >>> int_to_mini_roman(152)
// ""clii""
// >>> int_to_mini_roman(426)
// ""cdxxvi""
function int_to_mini_roman(number: number): string {
","function int_to_mini_roman(number: number): string {
    const romanNumerals: { [key: number]: string } = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',
        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',
        5: 'v', 4: 'iv', 1: 'i'
    };
    
    let result = '';
    for (const value of Object.keys(romanNumerals).map(Number).sort((a, b) => b - a)) {
        while (number >= value) {
            result += romanNumerals[value];
            number -= value;
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = int_to_mini_roman;
  assert.deepEqual(candidate(19),""xix"");
  assert.deepEqual(candidate(152),""clii"");
  assert.deepEqual(candidate(251),""ccli"");
  assert.deepEqual(candidate(426),""cdxxvi"");
  assert.deepEqual(candidate(500),""d"");
  assert.deepEqual(candidate(1),""i"");
  assert.deepEqual(candidate(4),""iv"");
  assert.deepEqual(candidate(43),""xliii"");
  assert.deepEqual(candidate(90),""xc"");
  assert.deepEqual(candidate(94),""xciv"");
  assert.deepEqual(candidate(532),""dxxxii"");
  assert.deepEqual(candidate(900),""cm"");
  assert.deepEqual(candidate(994),""cmxciv"");
  assert.deepEqual(candidate(1000),""m"");
}

test();"
HumanEval_157,dan_Latn,ts,"//Eksempel: //90 grader.//En retvinklet trekant er en trekant, hvor en vinkel er retvinkel eller //siderne danner en retvinklet trekant, ellers er det falsk.//Givet længderne på de tre sider af en trekant, returnerer vi true, hvis de tre // >>> right_angle_triangle(3, 4, 5)
// true
// >>> right_angle_triangle(1, 2, 3)
// false
function right_angle_triangle(a: number, b: number, c: number): boolean {
","function right_angle_triangle(a: number, b: number, c: number): boolean {
    const sides = [a, b, c].sort((x, y) => x - y);
    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = right_angle_triangle;
  assert.deepEqual(candidate(3, 4, 5),true);
  assert.deepEqual(candidate(1, 2, 3),false);
  assert.deepEqual(candidate(10, 6, 8),true);
  assert.deepEqual(candidate(2, 2, 2),false);
  assert.deepEqual(candidate(7, 24, 25),true);
  assert.deepEqual(candidate(10, 5, 7),false);
  assert.deepEqual(candidate(5, 12, 13),true);
  assert.deepEqual(candidate(15, 8, 17),true);
  assert.deepEqual(candidate(48, 55, 73),true);
  assert.deepEqual(candidate(1, 1, 1),false);
  assert.deepEqual(candidate(2, 2, 10),false);
}

test();"
HumanEval_158,dan_Latn,ts,"//Hvis der er tale om en række tegn, returneres den, der kommer først i leksikografisk rækkefølge.//Hvis flere strenge har et maksimalt antal unikke //Matrizen indeholder forskellige ord. Returnerer ordet med det maksimale antal //Skriv en funktion, der accepterer en række af strenge.// >>> find_max([""name"", ""of"", ""string""])
// ""string""
// >>> find_max([""name"", ""enam"", ""game""])
// ""enam""
// >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
// ""aaaaaaa""
function find_max(words: string[]): string {
","function find_max(words: string[]): string {
    function uniqueCharacterCount(word: string): number {
        const uniqueChars = new Set(word);
        return uniqueChars.size;
    }

    let maxWord = words[0];
    let maxUniqueCount = uniqueCharacterCount(maxWord);

    for (let i = 1; i < words.length; i++) {
        const currentUniqueCount = uniqueCharacterCount(words[i]);
        if (
            currentUniqueCount > maxUniqueCount ||
            (currentUniqueCount === maxUniqueCount && words[i] < maxWord)
        ) {
            maxWord = words[i];
            maxUniqueCount = currentUniqueCount;
        }
    }

    return maxWord;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_max;
  assert.deepEqual(candidate([""name"", ""of"", ""string""]),""string"");
  assert.deepEqual(candidate([""name"", ""enam"", ""game""]),""enam"");
  assert.deepEqual(candidate([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"");
  assert.deepEqual(candidate([""abc"", ""cba""]),""abc"");
  assert.deepEqual(candidate([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"");
  assert.deepEqual(candidate([""we"", ""are"", ""gonna"", ""rock""]),""gonna"");
  assert.deepEqual(candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"");
  assert.deepEqual(candidate([""this"", ""is"", ""a"", ""prrk""]),""this"");
  assert.deepEqual(candidate([""b""]),""b"");
  assert.deepEqual(candidate([""play"", ""play"", ""play""]),""play"");
}

test();"
HumanEval_159,dan_Latn,ts,"//Eksempel: //Hvis der ikke er nok gulerødder tilbage, vil du spise alle de resterende gulerødder, men du vil stadig være sulten.//antallet af gulerødder efter måltiderne ] //du skal returnere en række af [det samlede antal spiste gulerødder efter måltiderne, //Men nu skal du spise flere gulerødder for at fuldføre dagens måltider.//Du er en sulten kanin, og du har allerede spist et vist antal gulerødder.// >>> eat(5, 6, 10)
// [11, 4]
// >>> eat(4, 8, 9)
// [12, 1]
// >>> eat(1, 10, 10)
// [11, 0]
// >>> eat(2, 11, 5)
// [7, 0]
// Variables:
// @number : integer
// the number of carrots that you have eaten.
// @need : integer
// the number of carrots that you need to eat.
// @remaining : integer
// the number of remaining carrots thet exist in stock
// Constrain:
// * 0 <= number <= 1000
// * 0 <= need <= 1000
// * 0 <= remaining <= 1000
// Have fun :)
function eat(number: number, need: number, remaining: number): number[] {
","function eat(number: number, need: number, remaining: number): number[] {
    const totalEaten = number + Math.min(need, remaining);
    const carrotsLeft = Math.max(remaining - need, 0);
    return [totalEaten, carrotsLeft];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = eat;
  assert.deepEqual(candidate(5, 6, 10),[11, 4]);
  assert.deepEqual(candidate(4, 8, 9),[12, 1]);
  assert.deepEqual(candidate(1, 10, 10),[11, 0]);
  assert.deepEqual(candidate(2, 11, 5),[7, 0]);
  assert.deepEqual(candidate(4, 5, 7),[9, 2]);
  assert.deepEqual(candidate(4, 5, 1),[5, 0]);
}

test();"
HumanEval_160,dan_Latn,ts,"//Operatorarray har mindst én operator, og operandarray har mindst to operander.//Operanden er en række af ikke-negative heltal.//Længden af operatorarray er lig med længden af operandarray minus én.//Bemærk: //=> Resultat = 9 //Resultatet er 2 + 3 * 4 - 5 .//array = [2, 3, 4, 5] //Operatøren ['+', '*', '-'] //Eksempel: //Eksponentiering (**) //Guldinddeling ( //) //Multiplikation (*) //Afdrag ( - ) //Tilsætning (+) //De grundlæggende algebraoperationer://udtryk og returnere evalueringen af dette udtryk. //Den anden matrix er en matrix af heltal. Brug de to matrix til at bygge algebraen.//Den første matrix har grundlæggende algebraoperationer, og function do_algebra(operator: string[], operand: number[]): number {
","function do_algebra(operator: string[], operand: number[]): number {
    let expression = operand[0].toString();

    for (let i = 0; i < operator.length; i++) {
        expression += ` ${operator[i]} ${operand[i + 1]}`;
    }

    return Math.floor(eval(expression));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = do_algebra;
  assert.deepEqual(candidate([""**"", ""*"", ""+""], [2, 3, 4, 5]),37);
  assert.deepEqual(candidate([""+"", ""*"", ""-""], [2, 3, 4, 5]),9);
  assert.deepEqual(candidate([""//"", ""*""], [7, 3, 4]),8);
}

test();"
HumanEval_161,dan_Latn,ts,"//Eksempler //Funktionen skal returnere den resulterende streng. //Hvis strengen ikke indeholder nogen bogstaver, skal strengen vendes.//Ellers bevares det, som det er.//Hvis s[i] er et bogstav, vendes bogstavet fra ned til op eller omvendt.//Du får en streng s.// >>> solve(""1234"")
// ""4321""
// >>> solve(""ab"")
// ""AB""
// >>> solve(""#a@C"")
// ""#A@c""
function solve(s: string): string {
","function solve(s: string): string {
    let hasLetter = /[a-zA-Z]/.test(s);
    if (hasLetter) {
        return s.split('').map(char => {
            if (/[a-z]/.test(char)) {
                return char.toUpperCase();
            } else if (/[A-Z]/.test(char)) {
                return char.toLowerCase();
            } else {
                return char;
            }
        }).join('');
    } else {
        return s.split('').reverse().join('');
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(""AsDf""),""aSdF"");
  assert.deepEqual(candidate(""1234""),""4321"");
  assert.deepEqual(candidate(""ab""),""AB"");
  assert.deepEqual(candidate(""#a@C""),""#A@c"");
  assert.deepEqual(candidate(""#AsdfW^45""),""#aSDFw^45"");
  assert.deepEqual(candidate(""#6@2""),""2@6#"");
  assert.deepEqual(candidate(""#$a^D""),""#$A^d"");
  assert.deepEqual(candidate(""#ccc""),""#CCC"");
}

test();"
HumanEval_162,dan_Latn,ts,"//Hvis 'text' er en tom streng, returneres undefined. //Hvis der er givet en streng 'text', returneres dens md5-hash-ækvivalente streng. // >>> string_to_md5(""Hello world"")
// ""3e25960a79dbc69b674cd4ec67a72c62""
function string_to_md5(text: string): string | undefined {
","import * as crypto from 'crypto';

function string_to_md5(text: string): string | undefined {
    if (text === """") {
        return undefined;
    }
    return crypto.createHash('md5').update(text).digest('hex');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_to_md5;
  assert.deepEqual(candidate(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"");
  assert.deepEqual(candidate(""""),undefined);
  assert.deepEqual(candidate(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"");
  assert.deepEqual(candidate(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"");
}

test();"
HumanEval_163,dan_Latn,ts,"//For eksempel: //og b, i stigende rækkefølge. //Givet to positive heltal a og b, returnerer vi de lige cifre mellem a // >>> generate_integers(2, 8)
// [2, 4, 6, 8]
// >>> generate_integers(8, 2)
// [2, 4, 6, 8]
// >>> generate_integers(10, 14)
// []
function generate_integers(a: number, b: number): number[] {
","function generate_integers(a: number, b: number): number[] {
    let result: number[] = [];
    
    // Get starting and ending points in sorted order
    let start = Math.min(a, b);
    let end = Math.max(a, b);
    
    // Loop through the range
    for (let i = start; i <= end; i++) {
        if (i % 2 === 0) {  // Check if the digit is even
            result.push(i);
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = generate_integers;
  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);
  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(17, 89),[]);
}

test();"
