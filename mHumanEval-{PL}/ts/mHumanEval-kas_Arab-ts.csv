task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,kas_Arab,ts,"//ٕ ٕ ٕ ٕ ٕ ٕ//چیک کرو اگر دِنہٕ آمت نمبرن ہندس صفس منز، کنٛہہ تہٕ دوہ نمبر چِھ اکس بییس نِش قریب  کھوتہٕ۔// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
// false
// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
// true
function has_close_elements(numbers: number[], threshold: number): boolean {
","function has_close_elements(numbers: number[], threshold: number): boolean {
    for (let i = 0; i < numbers.length; i++) {
        for (let j = i + 1; j < numbers.length; j++) {
            if (Math.abs(numbers[i] - numbers[j]) < threshold) {
                return true;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = has_close_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);
}

test();"
HumanEval_1,kas_Arab,ts,"//ان پٹ سٹرنگس منز چِھ کانٛہہ تہٕ سپیس نظر انداز کران۔//الگ الگ گروپ چِھ متوازن (ہر کُنہٕ کھلہٕ بریکٹ چُھ مناسب طورس پیٹھ بند) تہٕ اکھ اکس اندر چُھ نہٕ گھونسلہٕ۔//یم گروپ چِھ الگ الگ سٹرنگن منز الگ کرنہٕ یوان تہٕ یم چِھ صفہٕ واپس کرنہٕ یوان۔//اتھ فنکشنس منز چُھ ان پٹ اکھ سٹرنگ یوس نیسٹڈ پیرنٹھیزٕک متعدد گروپس پیٹھ مشتمل چُھ۔ توہیہُند مقصد چُھ یہٕ زِ // >>> separate_paren_groups(""( ) (( )) (( )( ))"")
// [""()"", ""(())"", ""(()())""]
function separate_paren_groups(paren_string: string): string[] {
","function separate_paren_groups(paren_string: string): string[] {
    const result: string[] = [];
    let currentGroup: string = """";
    let balance: number = 0;

    for (let char of paren_string) {
        if (char === ' ') {
            continue; // Ignore spaces
        }
        
        currentGroup += char;

        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        if (balance === 0 && currentGroup.length > 0) {
            result.push(currentGroup);
            currentGroup = """";
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = separate_paren_groups;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[""(()())"", ""((()))"", ""()"", ""((())()())""]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[""()"", ""(())"", ""((()))"", ""(((())))""]);
  assert.deepEqual(candidate(""(()(())((())))""),[""(()(())((())))""]);
  assert.deepEqual(candidate(""( ) (( )) (( )( ))""),[""()"", ""(())"", ""(()())""]);
}

test();"
HumanEval_2,kas_Arab,ts,"//نمبر کس اعشاریہ کس حصس واپس کٔرو۔ //(باقی حصہٕ چُھ ہمیشہ 1 کھوتہٕ کم آسان) ۔//تہٕ عددُک حصہٕ (بڑا عدد یوس دِنہٕ آمت نمبر کھوتہٕ چُھ لکُٹ) تہٕ اعشاریہٕ //اکھ مثبت فلوٹنگ پوائنٹ نمبر دنہٕ آمت، یہٕ ہیکو  منٛز تقسیم کٔرتھ۔// >>> truncate_number(3.5)
// 0.5
function truncate_number(number: number): number {
","function truncate_number(number: number): number {
    const integerPart = Math.floor(number);
    return number - integerPart;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = truncate_number;
  assert.deepEqual(candidate(3.5),0.5);
  assert.deepEqual(candidate(1.25),0.25);
  assert.deepEqual(candidate(123.0),0.0);
}

test();"
HumanEval_3,kas_Arab,ts,"//اتھ مقامس پیٹھ گژھہٕ فنکشنس درست واپس ین۔ بصورت دیگر گژھہٕ یہٕ غلط واپس ین۔//صفرٕ بَحَژ۔ توہیہُند کٲم چھُ یَتھ پأنٹھ پَش کَرن یَتھ مَنٛز کانٛہہ پَنٛسہٕ بَحَژُک بَحَژ صفرٕ کھۄتہٕ بۄنہٕ چُھ گژھان، تہٕ//توہیہ چِھ بینک کھاتس پیٹھ واریاہ جمع تہٕ وصولی ہنٛد آپریشن دینہٕ آمت یُس  سۭتۍ شروع چُھ گژھان۔// >>> below_zero([1, 2, 3])
// false
// >>> below_zero([1, 2, -4, 5])
// true
function below_zero(operations: number[]): boolean {
","function below_zero(operations: number[]): boolean {
    let balance = 0;
    
    for (let operation of operations) {
        balance += operation;
        if (balance < 0) {
            return true;
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_zero;
  assert.deepEqual(candidate([]),false);
  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);
  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);
  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);
  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);
}

test();"
HumanEval_4,kas_Arab,ts,"//MAD = اوسط۔ x - x_mean۔ //عنصر تہٕ اکھ مرکز نقطہ (یمہٕ کیس منٛز چُھ اوسط) ۔//اوسط مطلق انحراف چُھ ہر کُنہِ شےُک اوسط مطلق فرق۔//ایمہِ ڈیٹا سیٹہِ ہند میڈین کہِ ارد گرد۔//ان پٹ نمبرن ہند دیتھن صفن خٲطرٕ، ایم وی اے ہند حساب لگاوٕ یُس مطلق انحراف چُھ۔// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
// 1.0
function mean_absolute_deviation(numbers: number[]): number {
","function mean_absolute_deviation(numbers: number[]): number {
    const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;
    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));
    const mad = absoluteDifferences.reduce((acc, diff) => acc + diff, 0) / numbers.length;
    return mad;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = mean_absolute_deviation;
  assert.deepEqual(candidate([1.0, 2.0]),0.5);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);
}

test();"
HumanEval_5,kas_Arab,ts,"//ان پٹ آرے ہند ہر دو اِنسلک عناصرس درمیان چُھ اکھ نمبر 'ڈیلی میٹر' دٲخٕل کرن ∀numbers' // >>> intersperse([], 4)
// []
// >>> intersperse([1, 2, 3], 4)
// [1, 4, 2, 4, 3]
function intersperse(numbers: number[], delimeter: number): number[] {
","function intersperse(numbers: number[], delimeter: number): number[] {
    if (numbers.length === 0) {
        return [];
    }

    let result: number[] = [];

    for (let i = 0; i < numbers.length; i++) {
        result.push(numbers[i]);
        if (i < numbers.length - 1) {
            result.push(delimeter);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersperse;
  assert.deepEqual(candidate([], 7),[]);
  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);
  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);
}

test();"
HumanEval_6,kas_Arab,ts,"//مثال کہِ طورس پیٹھ چُھ (() (()) منز زیادہ سے زیادہ دوٲی درجٕہ آسان ییلہِ زَن کہِ ((())) منز چِھ ترین۔//ہر گروپس خٲطرٕ کرو قوسین ہند نیسٹنگ ہند گہری ترین سطح آؤٹ پٹ۔//اتھ فنکشنک ان پٹ چُھ اکھ سٹرنگ یس نیسٹڈ قوسین خٲطرٕ متعدد گروپن ہینز نمائندگی چِھ کران یم خلاء سۭتۍ الگ چِھ آسان۔// >>> parse_nested_parens(""(()()) ((())) () ((())()())"")
// [2, 3, 1, 3]
function parse_nested_parens(paren_string: string): number[] {
","function parse_nested_parens(paren_string: string): number[] {
    return paren_string.split(' ').map(group => {
        let maxDepth = 0;
        let currentDepth = 0;

        for (const char of group) {
            if (char === '(') {
                currentDepth++;
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (char === ')') {
                currentDepth--;
            }
        }

        return maxDepth;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_nested_parens;
  assert.deepEqual(candidate(""(()()) ((())) () ((())()())""),[2, 3, 1, 3]);
  assert.deepEqual(candidate(""() (()) ((())) (((())))""),[1, 2, 3, 4]);
  assert.deepEqual(candidate(""(()(())((())))""),[4]);
}

test();"
HumanEval_7,kas_Arab,ts,"//صرف ان پٹ تارک اکھ سرنی فلٹر یتن تمن منٛز دِنہٕ آمت ذیلی تارک چُھ۔// >>> filter_by_substring([], ""a"")
// []
// >>> filter_by_substring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
// [""abc"", ""bacd"", ""array""]
function filter_by_substring(strings: string[], substring: string): string[] {
","function filter_by_substring(strings: string[], substring: string): string[] {
    return strings.filter(s => s.includes(substring));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_substring;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx""),[""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]);
  assert.deepEqual(candidate([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run""),[""grunt"", ""prune""]);
}

test();"
HumanEval_8,kas_Arab,ts,"//خٲلی جَمح گژھہِ 0 کِس برابر تہٕ خٲلی ضرب گژھہِ 1 کِس برابر۔//انٹیجرزن ہند دیژ مِلکہٕ خٲطرٕہ، کٕرٕو اکھ صف واپس یتھ منز تمام انٹیجرزن ہند مجموعہ تہٕ پروڈکٹ چُھ۔// >>> sum_product([])
// [0, 1]
// >>> sum_product([1, 2, 3, 4])
// [10, 24]
function sum_product(numbers: number[]): [number, number] {
","function sum_product(numbers: number[]): [number, number] {
    const sum = numbers.reduce((acc, curr) => acc + curr, 0);
    const product = numbers.reduce((acc, curr) => acc * curr, 1);
    return [sum, product];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_product;
  assert.deepEqual(candidate([]),[0, 1]);
  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);
  assert.deepEqual(candidate([100, 0]),[100, 0]);
  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);
  assert.deepEqual(candidate([10]),[10, 10]);
}

test();"
HumanEval_9,kas_Arab,ts,"//ترتیبس منٛز۔ //انٹیجرزن ہند دیژ مِتِس صفہٕ پیٹھہٕ، دینہٕ آمتِس لمحس تام چُھ ملن وٲل ساروی کھوتہٕ زیادٕہ رولنگ ایلیمنٹس ہنز اکھ صف تیار کران۔// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
// [1, 2, 3, 3, 3, 4, 4]
function rolling_max(numbers: number[]): number[] {
","function rolling_max(numbers: number[]): number[] {
    let maxArray: number[] = [];
    let currentMax: number = Number.NEGATIVE_INFINITY;
    
    for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] > currentMax) {
            currentMax = numbers[i];
        }
        maxArray.push(currentMax);
    }

    return maxArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rolling_max;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);
  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);
}

test();"
HumanEval_10,kas_Arab,ts,"//- سٹرنگ کس اختتامس پیٹھ سٹرنگ کس ریورسس پیٹھ سٹرنگ پریفیکس جوڑو یس پالنڈرومک sufix برونٹھ چُھ یوان۔//- فراہم کردہ تارک طویل ترین پوسٹ فکس تلاش کریں جو ایک پالینڈروم ہے۔ //الگورتھم خیال چُھ آسان: //ساروی کھوتہٕ کم پالینڈروم تلاش کرُن یُس سپلائی گژھن واجنہِ تارہٕ سٕتۍ شروع چُھ گژھان۔// >>> make_palindrome("""")
// """"
// >>> make_palindrome(""cat"")
// ""catac""
// >>> make_palindrome(""cata"")
// ""catac""
function make_palindrome(string: string): string {
","function make_palindrome(string: string): string {
    function isPalindrome(s: string): boolean {
        let left = 0;
        let right = s.length - 1;
        while (left < right) {
            if (s[left] !== s[right]) return false;
            left++;
            right--;
        }
        return true;
    }

    const n = string.length;
    let longestPalindromicPostfixIndex = n;

    for (let i = 0; i < n; i++) {
        if (isPalindrome(string.substring(i))) {
            longestPalindromicPostfixIndex = i;
            break;
        }
    }

    const prefix = string.substring(0, longestPalindromicPostfixIndex);
    const reversedPrefix = prefix.split('').reverse().join('');
    return string + reversedPrefix;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_palindrome;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""x""),""x"");
  assert.deepEqual(candidate(""xyz""),""xyzyx"");
  assert.deepEqual(candidate(""xyx""),""xyx"");
  assert.deepEqual(candidate(""jerry""),""jerryrrej"");
}

test();"
HumanEval_11,kas_Arab,ts,"//یمن ان پٹسن پیٹھ چُھ بائنری XOR چلاونہٕ یوان تہٕ نتیجہٕ چُھ سٹرنگ کس طورس پیٹھ تہٕ واپس یوان۔//ان پٹ چِھ زٕ سٹرنگ a تہٕ b یِمَن منٛز چِھ صرف 1 تہٕ 0 آسان۔// >>> string_xor(""010"", ""110"")
// ""100""
function string_xor(a: string, b: string): string {
","function string_xor(a: string, b: string): string {
    let result = '';
    for (let i = 0; i < a.length; i++) {
        result += (a[i] === b[i] ? '0' : '1');
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_xor;
  assert.deepEqual(candidate(""111000"", ""101010""),""010010"");
  assert.deepEqual(candidate(""1"", ""1""),""0"");
  assert.deepEqual(candidate(""0101"", ""0000""),""0101"");
}

test();"
HumanEval_12,kas_Arab,ts,"//اَکی لمبٲے ہنٛد سٹرنگ۔ اگر ان پٹ آرے چھ خٲلی تیلہٕ چُھ غٲر متعین واپس کران۔//تارن ہٕنٛز صفہٕ منٛزٕ، ساری کھۄتہٕ زیٛادٕ تھۄن تارن واپس ییہٕ دنہٕ۔// >>> longest([])
// undefined
// >>> longest([""a"", ""b"", ""c""])
// ""a""
// >>> longest([""a"", ""bb"", ""ccc""])
// ""ccc""
function longest(strings: string[]): string | undefined {
","function longest(strings: string[]): string | undefined {
    if (strings.length === 0) {
        return undefined;
    }

    let longestString = strings[0];

    for (const str of strings) {
        if (str.length > longestString.length) {
            longestString = str;
        }
    }

    return longestString;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = longest;
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""x"");
  assert.deepEqual(candidate([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]),""zzzz"");
}

test();"
HumanEval_13,kas_Arab,ts,"//دوٛن عددن a تہٕ b ہُنٛد زیٛادٕ مشترک تقسیم کار پرٔیتھ دِتُن۔// >>> greatest_common_divisor(3, 5)
// 1
// >>> greatest_common_divisor(25, 15)
// 5
function greatest_common_divisor(a: number, b: number): number {
","function greatest_common_divisor(a: number, b: number): number {
    while (b !== 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = greatest_common_divisor;
  assert.deepEqual(candidate(3, 7),1);
  assert.deepEqual(candidate(10, 15),5);
  assert.deepEqual(candidate(49, 14),7);
  assert.deepEqual(candidate(144, 60),12);
}

test();"
HumanEval_14,kas_Arab,ts,"//ان پٹ سٹرنگ ٕچ ساروی کھوتہٕ کم پیٹھہٕ زیٹھس تام تمام پریفیکسزچ صف چِھ واپس کران۔// >>> all_prefixes(""abc"")
// [""a"", ""ab"", ""abc""]
function all_prefixes(string: string): string[] {
","function all_prefixes(string: string): string[] {
    const result: string[] = [];
    for (let i = 1; i <= string.length; i++) {
        result.push(string.substring(0, i));
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = all_prefixes;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""asdfgh""),[""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]);
  assert.deepEqual(candidate(""WWW""),[""W"", ""WW"", ""WWW""]);
}

test();"
HumanEval_15,kas_Arab,ts,"//0 پیٹھہٕ n تام جاۓ سٕتۍ محدود نمبرن ہنز سٹرنگ چُھ واپس کران۔// >>> string_sequence(0)
// ""0""
// >>> string_sequence(5)
// ""0 1 2 3 4 5""
function string_sequence(n: number): string {
","function string_sequence(n: number): string {
    let result: string[] = [];
    for (let i = 0; i <= n; i++) {
        result.push(i.toString());
    }
    return result.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_sequence;
  assert.deepEqual(candidate(0),""0"");
  assert.deepEqual(candidate(3),""0 1 2 3"");
  assert.deepEqual(candidate(10),""0 1 2 3 4 5 6 7 8 9 10"");
}

test();"
HumanEval_16,kas_Arab,ts,"//اکھ سٹرنگ دیتھ، ژھۅٹہِ کیہہ الگ کرکٹر (بغیر کیجے) چُھ اتھ منز مشتمل۔// >>> count_distinct_characters(""xyzXYZ"")
// 3
// >>> count_distinct_characters(""Jerry"")
// 4
function count_distinct_characters(string: string): number {
","function count_distinct_characters(inputString: string): number {
    const lowerCasedString = inputString.toLowerCase();
    const distinctCharacters = new Set<string>();

    for (const char of lowerCasedString) {
        distinctCharacters.add(char);
    }

    return distinctCharacters.size;
}

// Example usage:
console.log(count_distinct_characters(""xyzXYZ"")); // Output: 3
console.log(count_distinct_characters(""Jerry""));  // Output: 4","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_distinct_characters;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abcde""),5);
  assert.deepEqual(candidate(""abcdecadeCADE""),5);
  assert.deepEqual(candidate(""aaaaAAAAaaaa""),1);
  assert.deepEqual(candidate(""Jerry jERRY JeRRRY""),5);
}

test();"
HumanEval_17,kas_Arab,ts,"//'.ہیک' - کوارٹر نوٹ، چُھ اکھ بیٹ۔//'اوٚڈ' - نصف نوٹ، دوٛن دھارن تام۔//'o' - پورٕ نوٹ، ژور بیٹ۔//ٕ اَتھ چِھ اکھ افسانه: //نہٕ لَب نہٕ//توہیہُند کٲم چھُ یِہ سٹرنگ حل کرنُک تہٕ عددن ہٕنٛزِ صفہٕ واپس کرنُک یۄسہٕ پرٛیٚتھ کنہِ چھُ وَننہٕ یِوان۔//اتھ فنکشنس منز چُھ ان پٹ اکھ سٹرنگ یوس اکھ خاص ASCII فارمیٹس منز میوزک نوٹس چُھ ظٲہر کران۔// >>> parse_music(""o o| .| o| o| .| .| .| .| o o"")
// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
function parse_music(music_string: string): number[] {
","function parse_music(music_string: string): number[] {
    const notes = music_string.split(' ');
    return notes.map(note => {
        switch (note) {
            case 'o':
                return 4;
            case 'o|':
                return 2;
            case '.|':
                return 1;
            default:
                return 0;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = parse_music;
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""o o o o""),[4, 4, 4, 4]);
  assert.deepEqual(candidate("".| .| .| .|""),[1, 1, 1, 1]);
  assert.deepEqual(candidate(""o| o| .| .| o o o o""),[2, 2, 1, 1, 4, 4, 4, 4]);
  assert.deepEqual(candidate(""o| .| o| .| o o| o o|""),[2, 1, 2, 1, 4, 2, 4, 2]);
}

test();"
HumanEval_18,kas_Arab,ts,"//یہٕ وچھو زِ اصلی سٹرنگس منز کِتین لٹہٕ ہیکہِ اکھ ذیلی سٹرنگ ٲسٕتۍ۔ اوورلیپنگ کیسز گژھِتھ گنتی۔// >>> how_many_times("""", ""a"")
// 0
// >>> how_many_times(""aaa"", ""a"")
// 3
// >>> how_many_times(""aaaa"", ""aa"")
// 3
function how_many_times(string: string, substring: string): number {
","function how_many_times(string: string, substring: string): number {
    if (substring.length === 0) return 0;
    let count = 0;
    for (let i = 0; i <= string.length - substring.length; i++) {
        if (string.substring(i, i + substring.length) === substring) {
            count++;
        }
    }
    return count;
}

// Example usage:
// console.log(how_many_times(""aaa"", ""a"")); // Output: 3
// console.log(how_many_times(""aaaa"", ""aa"")); // Output: 3
// console.log(how_many_times("""", ""a"")); // Output: 0","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = how_many_times;
  assert.deepEqual(candidate("""", ""x""),0);
  assert.deepEqual(candidate(""xyxyxyx"", ""x""),4);
  assert.deepEqual(candidate(""cacacacac"", ""cac""),4);
  assert.deepEqual(candidate(""john doe"", ""john""),1);
}

test();"
HumanEval_19,kas_Arab,ts,"//نمبر چِھ سٹرنگس لوکٹہٕ پیٹھ بڑس تام ترتیب دینہٕ آمت۔//درست انتخاب چِھ 'صفر'، 'اکھ'، 'دو'، 'تین'، 'چار'، 'پانچ'، 'شِکَس'، 'سات'، 'آٹھ' تہٕ 'نِیہٕ'۔//ان پٹ چُھ 'صفر' پیٹھہٕ 'نوے' تام عددن ہند اکھ جاے ڈیلیٹڈ سٹرنگ۔// >>> sort_numbers(""three one five"")
// ""one three five""
function sort_numbers(numbers: string): string {
","function sort_numbers(numbers: string): string {
    const numberWords = [
        'zero', 'one', 'two', 'three', 'four', 
        'five', 'six', 'seven', 'eight', 'nine'
    ];
    
    // Split the input string into an array of words
    const wordsArray = numbers.split(' ');

    // Sort the wordsArray based on the index of each word in numberWords
    wordsArray.sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b));

    // Join the sorted array back into a space-delimited string and return
    return wordsArray.join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_numbers;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""three""),""three"");
  assert.deepEqual(candidate(""three five nine""),""three five nine"");
  assert.deepEqual(candidate(""five zero four seven nine eight""),""zero four five seven eight nine"");
  assert.deepEqual(candidate(""six five four three two one zero""),""zero one two three four five six"");
}

test();"
HumanEval_20,kas_Arab,ts,"//باقی تہٕ چھِ یمن ترتیبس منٛز واپس یوان (کم تعداد، زیادٕ تعداد) ۔//اعدادن ہٕنٛز اکھ فراہم کرنہٕ آمژہ صفہٕ (دوٚن کم از کم لمبٲے ہنٛد) پیٚٹھٕ ہر کنہِ خٲطرٕ قریب ترین دۄن منتخب کٔرتھ واپس ییٚمہ سۭتۍ دۄن ہندسن ہنٛد فٲیدٕ چھ گژھان// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
// [2.0, 2.2]
// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
// [2.0, 2.0]
function find_closest_elements(numbers: number[]): [number, number] {
","function find_closest_elements(numbers: number[]): [number, number] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two numbers"");
    }

    // Sort the array so that we can check consecutive elements
    numbers.sort((a, b) => a - b);

    let closestPair: [number, number] = [numbers[0], numbers[1]];
    let minDifference = Math.abs(numbers[1] - numbers[0]);

    for (let i = 1; i < numbers.length - 1; i++) {
        let currentDifference = Math.abs(numbers[i + 1] - numbers[i]);
        if (currentDifference < minDifference) {
            minDifference = currentDifference;
            closestPair = [numbers[i], numbers[i + 1]];
        }
    }

    return closestPair;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_closest_elements;
  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);
  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);
  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);
}

test();"
HumanEval_21,kas_Arab,ts,"//یتھ کٔنۍ زَن ساروی کھوتہٕ لوکٹ نمبر 0 تہٕ 1 چُھ آسان۔//اعدادن ہنز اکھ صف (کم از کم زٕ عناصرن ہند) ، اتھ صفس پیٹھ اکھ لکیری تبدیلی لاگو کرٕن، // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
// [0.0, 0.25, 0.5, 0.75, 1.0]
function rescale_to_unit(numbers: number[]): number[] {
","function rescale_to_unit(numbers: number[]): number[] {
    if (numbers.length < 2) {
        throw new Error(""Array must contain at least two elements"");
    }

    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const range = max - min;

    if (range === 0) {
        throw new Error(""All numbers are the same; rescale not possible"");
    }

    return numbers.map(num => (num - min) / range);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rescale_to_unit;
  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);
  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);
  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);
  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);
}

test();"
HumanEval_22,kas_Arab,ts,"//صرف انٹیجرز خٲطرٕ کُنہٕ tsthon ویلیوزک دیت مِلَت چُھ فلٹر کران۔// >>> filter_integers([""a"", 3.14, 5])
// [5]
// >>> filter_integers([1, 2, 3, ""abc"", {}, []])
// [1, 2, 3]
function filter_integers(values: any[]): number[] {
","function filter_integers(values: any[]): number[] {
    return values.filter(value => Number.isInteger(value));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_integers;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([4, {}, [], 23.2, 9, ""adasd""]),[4, 9]);
  assert.deepEqual(candidate([3, ""c"", 3, 3, ""a"", ""b""]),[3, 3, 3]);
}

test();"
HumanEval_23,kas_Arab,ts,"//دِنہٕ آمتِس سٹرنگس ہنز واپسی لمبائی // >>> strlen("""")
// 0
// >>> strlen(""abc"")
// 3
function strlen(string: string): number {
","function strlen(string: string): number {
    return string.length;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strlen;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""x""),1);
  assert.deepEqual(candidate(""asdasnakj""),9);
}

test();"
HumanEval_24,kas_Arab,ts,"//دِنہٕ آمتِس نمبرس n خاطرٕ، ساروی کھوتہٕ بوڑ نمبر تلاش کرو یوس n یکساں طور پٲنٹھ تقسیم چُھ کران، n کھوتہٕ چُھ لکُٹ۔// >>> largest_divisor(15)
// 5
function largest_divisor(n: number): number {
","function largest_divisor(n: number): number {
    for (let i = n - 1; i > 0; i--) {
        if (n % i === 0) {
            return i;
        }
    }
    return 1; // By mathematical definition, 1 is a divisor of any integer.
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_divisor;
  assert.deepEqual(candidate(3),1);
  assert.deepEqual(candidate(7),1);
  assert.deepEqual(candidate(10),5);
  assert.deepEqual(candidate(100),50);
  assert.deepEqual(candidate(49),7);
}

test();"
HumanEval_25,kas_Arab,ts,"//ان پٹ نمبر گژھہِ تمام فیکٹرزن ہند پروڈکٹُک برابر آسن۔//پرتھ اکس عنصرس پَزٕ نمبر ترتیب دینہٕ یُن یُس امہٕ کہ تعدادٕ کہ مطابق چُھ یُس فیکٹرایزیشنس منٛز ظٲہر چُھ گژھان۔//دیتُن عددٕک بنیادی عواملن ہنز صف چِھ لکٕٹۍ پیٹھہٕ بڑِس ترتیبس منز واپس کران۔// >>> factorize(8)
// [2, 2, 2]
// >>> factorize(25)
// [5, 5]
// >>> factorize(70)
// [2, 5, 7]
function factorize(n: number): number[] {
","function factorize(n: number): number[] {
    const factors: number[] = [];
    let divisor = 2;
    
    while (n >= 2) {
        if (n % divisor === 0) {
            factors.push(divisor);
            n /= divisor;
        } else {
            divisor++;
        }
    }

    return factors;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = factorize;
  assert.deepEqual(candidate(2),[2]);
  assert.deepEqual(candidate(4),[2, 2]);
  assert.deepEqual(candidate(8),[2, 2, 2]);
  assert.deepEqual(candidate(57),[3, 19]);
  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);
  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);
  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);
  assert.deepEqual(candidate(18),[2, 3, 3]);
}

test();"
HumanEval_26,kas_Arab,ts,"//عناصرن ہنز ترتیب چُھ اتھٲی پٲٹھۍ روزان یتھ کٔنۍ زِ ان پٹس منز چُھ۔//انٹیجرزن ہندس اکس صفس منز، تمام عناصر یوس ایکہِ کھوتہٕ زیادٕہ لٹہِ گژھہِ ہٹٲوِتھ۔// >>> remove_duplicates([1, 2, 3, 2, 4])
// [1, 3, 4]
function remove_duplicates(numbers: number[]): number[] {
","function remove_duplicates(numbers: number[]): number[] {
    const frequencyMap: Map<number, number> = new Map();

    // Count the occurrences of each number
    for (const num of numbers) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    // Filter out the numbers occurring more than once
    return numbers.filter(num => frequencyMap.get(num) === 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_duplicates;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);
  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);
}

test();"
HumanEval_27,kas_Arab,ts,"//دِنہٕ آمتِس سٹرنگس خٲطرٕہ، لوکِسکرِس کرکٹرز چِھ بڑٕہ بٕڑِس تہٕ بڑٕہ بٕڑِس لیٹرزس منز تبدیل کرنہٕ یوان۔// >>> flip_case(""Hello"")
// ""hELLO""
function flip_case(string: string): string {
","function flip_case(str: string): string {
    let flipped = '';
    for (let char of str) {
        if (char === char.toUpperCase()) {
            flipped += char.toLowerCase();
        } else {
            flipped += char.toUpperCase();
        }
    }
    return flipped;
}

// Example usage:
console.log(flip_case(""Hello"")); // Output: ""hELLO""","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = flip_case;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hello!""),""hELLO!"");
  assert.deepEqual(candidate(""These violent delights have violent ends""),""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"");
}

test();"
HumanEval_28,kas_Arab,ts,"//سٹرنگزک اکھ صف اکھ سٹرنگس منٛز جوڑٕ۔// >>> concatenate([])
// """"
// >>> concatenate([""a"", ""b"", ""c""])
// ""abc""
function concatenate(strings: string[]): string {
","function concatenate(strings: string[]): string {
    return strings.join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = concatenate;
  assert.deepEqual(candidate([]),"""");
  assert.deepEqual(candidate([""x"", ""y"", ""z""]),""xyz"");
  assert.deepEqual(candidate([""x"", ""y"", ""z"", ""w"", ""k""]),""xyzwk"");
}

test();"
HumanEval_29,kas_Arab,ts,"//صرف تمن تارن خٲطرٕ چُھ ان پٹ آرے فلٹر کران یم اکس مقررہ پیش لفظس سۭتۍ شروع چِھ گژھان۔ // >>> filter_by_prefix([], ""a"")
// []
// >>> filter_by_prefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
// [""abc"", ""array""]
function filter_by_prefix(strings: string[], prefix: string): string[] {
","function filter_by_prefix(strings: string[], prefix: string): string[] {
    return strings.filter(str => str.startsWith(prefix));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = filter_by_prefix;
  assert.deepEqual(candidate([], ""john""),[]);
  assert.deepEqual(candidate([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx""),[""xxx"", ""xxxAAA"", ""xxx""]);
}

test();"
HumanEval_30,kas_Arab,ts,"//صفس منز چِھ صرف مثبت نمبر واپس کران۔// >>> get_positive([-1, 2, -4, 5, 6])
// [2, 5, 6]
// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// [5, 3, 2, 3, 9, 123, 1]
function get_positive(l: number[]): number[] {
","function get_positive(l: number[]): number[] {
    return l.filter(num => num > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_positive;
  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);
  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);
  assert.deepEqual(candidate([-1, -2]),[]);
  assert.deepEqual(candidate([]),[]);
}

test();"
HumanEval_31,kas_Arab,ts,"//اگر اکھ دِنہٕ آمت نمبر پرائم چُھ تیلہٕ چُھ صحیح واپس گژھان، تہٕ بییہٕ غلط۔// >>> is_prime(6)
// false
// >>> is_prime(101)
// true
// >>> is_prime(11)
// true
// >>> is_prime(13441)
// true
// >>> is_prime(61)
// true
// >>> is_prime(4)
// false
// >>> is_prime(1)
// false
function is_prime(n: number): boolean {
","function is_prime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_prime;
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(101),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(13441),true);
  assert.deepEqual(candidate(61),true);
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(1),false);
  assert.deepEqual(candidate(5),true);
  assert.deepEqual(candidate(11),true);
  assert.deepEqual(candidate(17),true);
  assert.deepEqual(candidate(85),false);
  assert.deepEqual(candidate(77),false);
  assert.deepEqual(candidate(255379),false);
}

test();"
HumanEval_33,kas_Arab,ts,"//1، مگر ترتیب دیٛت۔//l' چُھ تمن اشارن منٛز l سٕتۍ مماثل یم ترین سۭتۍ تقسیم گژھن چِھ نہٕ، ییلہٕ زن یم اشارٕ چِھ تریو سۭتۍ تقسیم گژھن برابر آسان۔//یہٕ فنکشن چُھ اکھ صف l نوان تہٕ اکھ صف l چُھ واپس کران یُس // >>> sort_third([1, 2, 3])
// [1, 2, 3]
// >>> sort_third([5, 6, 3, 4, 8, 9, 2])
// [2, 6, 3, 4, 8, 9, 5]
function sort_third(l: number[]): number[] {
","function sort_third(l: number[]): number[] {
    const indicesDivByThree = l.map((_, i) => i).filter(i => i % 3 === 0);
    const valuesDivByThree = indicesDivByThree.map(i => l[i]).sort((a, b) => a - b);

    const result = l.slice();
    for (let i = 0; i < indicesDivByThree.length; i++) {
        result[indicesDivByThree[i]] = valuesDivByThree[i];
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_third;
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);
  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);
  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);
  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);
}

test();"
HumanEval_34,kas_Arab,ts,"//صفس منز چُھ ترتیب دینہٕ آمت منفرد عناصر واپس کران۔// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [0, 2, 3, 5, 9, 123]
function unique(l: number[]): number[] {
","function unique(l: number[]): number[] {
    const uniqueSet = new Set(l);
    const uniqueArray = Array.from(uniqueSet);
    uniqueArray.sort((a, b) => a - b);
    return uniqueArray;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique;
  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);
}

test();"
HumanEval_35,kas_Arab,ts,"//صفس منز چُھ زیادہ سے زیادہ عنصر واپس کران۔// >>> max_element([1, 2, 3])
// 3
// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
// 123
function max_element(l: number[]): number {
","function max_element(l: number[]): number {
    if (l.length === 0) {
        throw new Error(""Array is empty"");
    }
    let max = l[0];
    for (let i = 1; i < l.length; i++) {
        if (l[i] > max) {
            max = l[i];
        }
    }
    return max;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_element;
  assert.deepEqual(candidate([1, 2, 3]),3);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);
}

test();"
HumanEval_36,kas_Arab,ts,"//یہٕ چُھ اتھ عددن ہندس تعدادس واپس کران یُس 7 ہندسہٕ چُھ انٹیجرس منز ظٲہر گژھان یم n کھوتہٕ کم چِھ یم 11 یا 13 سٕتۍ تقسیم گژھان چِھ۔// >>> fizz_buzz(50)
// 0
// >>> fizz_buzz(78)
// 2
// >>> fizz_buzz(79)
// 3
function fizz_buzz(n: number): number {
","function fizz_buzz(n: number): number {
    let count = 0;

    for (let i = 1; i < n; i++) {
        if (i % 11 === 0 || i % 13 === 0) {
            let numString = i.toString();
            for (let char of numString) {
                if (char === '7') {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fizz_buzz;
  assert.deepEqual(candidate(50),0);
  assert.deepEqual(candidate(78),2);
  assert.deepEqual(candidate(79),3);
  assert.deepEqual(candidate(100),3);
  assert.deepEqual(candidate(200),6);
  assert.deepEqual(candidate(4000),192);
  assert.deepEqual(candidate(10000),639);
  assert.deepEqual(candidate(100000),8026);
}

test();"
HumanEval_37,kas_Arab,ts,"//l، مگر ترتیب شدہ ہندسن ہند ہند قدرن سٕتۍ۔//l' چُھ عجیب انڈیکسس منز l سٕتۍ مماثل، ییلہِ زَن کہِ یمَن ہند ویلیو چُھ یکساں even انڈیکسس منز۔//یہٕ فنکشن چُھ اکھ صف l نوان تہٕ اکھ صف l چُھ واپس کران یُس // >>> sort_even([1, 2, 3])
// [1, 2, 3]
// >>> sort_even([5, 6, 3, 4])
// [3, 6, 5, 4]
function sort_even(l: number[]): number[] {
","function sort_even(l: number[]): number[] {
    const evenIndices: number[] = [];
    const result: number[] = [...l];

    // Collect values at even indices
    for (let i = 0; i < l.length; i += 2) {
        evenIndices.push(l[i]);
    }

    // Sort the collected even indices values
    evenIndices.sort((a, b) => a - b);

    // Place the sorted values back in their original even indices
    for (let i = 0; i < l.length; i += 2) {
        result[i] = evenIndices.shift()!;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_even;
  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);
  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);
  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);
}

test();"
HumanEval_39,kas_Arab,ts,"//prime_fib چُھ نون نمبرن ہند جواب دِوان یوس فبونیکی نمبر چُھ تہٕ چُھ پرائم۔ // >>> prime_fib(1)
// 2
// >>> prime_fib(2)
// 3
// >>> prime_fib(3)
// 5
// >>> prime_fib(4)
// 13
// >>> prime_fib(5)
// 89
function prime_fib(n: number): number {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function* fibonacciGenerator(): Generator<number, void, unknown> {
    let a = 0, b = 1;
    while (true) {
        let current = a;
        a = b;
        b = current + b;
        yield current;
    }
}

function prime_fib(n: number): number {
    const fibGen = fibonacciGenerator();
    let primeFibs: number[] = [];
    let i = 0;
    while (primeFibs.length < n) {
        const fibNum = fibGen.next().value;
        if (isPrime(fibNum)) {
            primeFibs.push(fibNum);
        }
    }
    return primeFibs[n - 1];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_fib;
  assert.deepEqual(candidate(1),2);
  assert.deepEqual(candidate(2),3);
  assert.deepEqual(candidate(3),5);
  assert.deepEqual(candidate(4),13);
  assert.deepEqual(candidate(5),89);
  assert.deepEqual(candidate(6),233);
  assert.deepEqual(candidate(7),1597);
  assert.deepEqual(candidate(8),28657);
  assert.deepEqual(candidate(9),514229);
  assert.deepEqual(candidate(10),433494437);
}

test();"
HumanEval_40,kas_Arab,ts,"//رقم چِھ صفرٕ، تہٕ بییہٕ غلط چُھ۔//یہٕ چُھ صیح واپس کران اگر صفس منٛز چِھ ترٛے الگ الگ عناصر یم //triple_sum_to_zero چُھ ان پٹ کِس طورس پیٹھ عددن ہنز اکھ صف نوان۔// >>> triples_sum_to_zero([1, 3, 5, 0])
// false
// >>> triples_sum_to_zero([1, 3, -2, 1])
// true
// >>> triples_sum_to_zero([1, 2, 3, 7])
// false
// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
// true
// >>> triples_sum_to_zero([1])
// false
function triples_sum_to_zero(l: number[]): boolean {
","function triples_sum_to_zero(l: number[]): boolean {
    if (l.length < 3) {
        return false;
    }

    // Sort the array
    l.sort((a, b) => a - b);

    // Iterate through the array
    for (let i = 0; i < l.length - 2; i++) {
        let left = i + 1;
        let right = l.length - 1;

        // Use two pointers to find a pair that makes the sum zero with l[i]
        while (left < right) {
            const sum = l[i] + l[left] + l[right];
            if (sum === 0) {
                return true;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triples_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, 5, -1]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),true);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([1, 2, 5, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([1, 3, 5, -100]),false);
  assert.deepEqual(candidate([100, 3, 5, -100]),false);
}

test();"
HumanEval_41,kas_Arab,ts,"//یہٕ فنکشن چُھ امہٕ قسمچ تصادمچ تعداد پیدٕ کران۔//تم چِھ پننہٕ سفرک پانہٕ نَظرٕ وۄن یوتتھ زِ تم أس نہٕ برٛۄنٛہہ کن آمژٕ۔//تاہم، کار چھ لامحدود طور مضبوط تہٕ مضبوط۔ نتیجتاً، تم چِھ جٲری روزان۔//ییٚلہ اکھ کار بائیں سۭتۍ دٲژٕھ گژھان، تہٕ بیٚیہِ دٲژٕھ گژھان یم دٲژٕھ تہٕ بایاں گژھان چھ۔//سٲری گاڑہٕ چِھ ہِوی رفتارٕ سۭتۍ حرکت کران۔ زٕ گاڑہٕ چِھ ٹکراوان۔//کارن ہندۍ زٕ سیٹہٕ چِھ شروع گژھان واریاہ دور۔//n کارن چِھ بائیں پیٹھہٕ دائیں طرفہٕ گاڑٕ چلاوان۔ اکسی وقتس منز چِھ n کارن ہند اکھ مختلف سیٹ۔//اکھ سڑک تصور کرو یس بالکل سیدھی تہٕ لامحدود لائن چِھ۔function car_race_collision(n: number): number {
","function car_race_collision(n: number): number {
    // Since the cars move at the same speed and are infinitely strong,
    // each pair of a left-to-right car and a right-to-left car will ""collide"" at some point.
    // Therefore, every pair of cars from different sets will collide exactly once.
    
    // We need to find the number of such pairs, which is simply n * n.
    return n * n;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = car_race_collision;
  assert.deepEqual(candidate(2),4);
  assert.deepEqual(candidate(3),9);
  assert.deepEqual(candidate(4),16);
  assert.deepEqual(candidate(8),64);
  assert.deepEqual(candidate(10),100);
}

test();"
HumanEval_42,kas_Arab,ts,"//1 کِس اضأفی عناصرس سٕتۍ چِھ صف واپس گژھان۔// >>> incr_list([1, 2, 3])
// [2, 3, 4]
// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
// [6, 4, 6, 3, 4, 4, 10, 1, 124]
function incr_list(l: number[]): number[] {
","function incr_list(l: number[]): number[] {
    return l.map(num => num + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = incr_list;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);
  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);
}

test();"
HumanEval_43,kas_Arab,ts,"//رقم چِھ صفرٕ، تہٕ بییہٕ غلط چُھ۔//یہٕ چُھ صیح واپس کران اگر صفس منٛز چِھ زٕ الگ الگ عناصر یم //pairs_sum_to_zero چُھ ان پٹ کِس طورس پیٹھ عددن ہنز اکھ صف کران۔// >>> pairs_sum_to_zero([1, 3, 5, 0])
// false
// >>> pairs_sum_to_zero([1, 3, -2, 1])
// false
// >>> pairs_sum_to_zero([1, 2, 3, 7])
// false
// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
// true
// >>> pairs_sum_to_zero([1])
// false
function pairs_sum_to_zero(l: number[]): boolean {
","function pairs_sum_to_zero(l: number[]): boolean {
    const seen = new Set<number>();

    for (const num of l) {
        if (seen.has(-num)) {
            return true;
        }
        seen.add(num);
    }

    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pairs_sum_to_zero;
  assert.deepEqual(candidate([1, 3, 5, 0]),false);
  assert.deepEqual(candidate([1, 3, -2, 1]),false);
  assert.deepEqual(candidate([1, 2, 3, 7]),false);
  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);
  assert.deepEqual(candidate([1]),false);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);
  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);
  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);
}

test();"
HumanEval_44,kas_Arab,ts,"//بیس نمبر چِھ 10 کھوتہٕ کم۔//تبدیل کرنہٕ پتہٕ چُھ سٹرنگ ریپریسنٹشن۔//ان پٹ نمبر x ہچ عددی بنیاد چُھ بیسس منٛز تبدیل کرٕن۔// >>> change_base(8, 3)
// ""22""
// >>> change_base(8, 2)
// ""1000""
// >>> change_base(7, 2)
// ""111""
function change_base(x: number, base: number): string {
","function change_base(x: number, base: number): string {
    if (base < 2 || base > 9) {
        throw new Error(""Base must be between 2 and 9 inclusive"");
    }
    
    if (x === 0) return ""0"";

    let result: string = """";
    let number: number = x;

    while (number > 0) {
        const remainder = number % base;
        result = remainder.toString() + result;
        number = Math.floor(number / base);
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = change_base;
  assert.deepEqual(candidate(8, 3),""22"");
  assert.deepEqual(candidate(9, 3),""100"");
  assert.deepEqual(candidate(234, 2),""11101010"");
  assert.deepEqual(candidate(16, 2),""10000"");
  assert.deepEqual(candidate(8, 2),""1000"");
  assert.deepEqual(candidate(7, 2),""111"");
  assert.deepEqual(candidate(2, 3),""2"");
  assert.deepEqual(candidate(3, 4),""3"");
  assert.deepEqual(candidate(4, 5),""4"");
  assert.deepEqual(candidate(5, 6),""5"");
  assert.deepEqual(candidate(6, 7),""6"");
  assert.deepEqual(candidate(7, 8),""7"");
}

test();"
HumanEval_45,kas_Arab,ts,"//مثلثس خٲطرٕہ چُھ اکھ سائیڈ تہٕ ہائی ریٹرن ایریا ہنز لمبٲے دِنہٕ۔// >>> triangle_area(5, 3)
// 7.5
function triangle_area(a: number, h: number): number {
","function triangle_area(a: number, h: number): number {
    return 0.5 * a * h;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(5, 3),7.5);
  assert.deepEqual(candidate(2, 2),2.0);
  assert.deepEqual(candidate(10, 8),40.0);
}

test();"
HumanEval_46,kas_Arab,ts,"//براہِ کرم fib4 نمبر سیکوینس کہِ n-th عنصرُک موثر اندازس منز حساب لگاونہٕ خٲطرٕہ اکھ فنکشن لیوکھُن۔ ریکوریشنُک استعمال مت کٔرِتھ۔//fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). //fib4(3) -> 0 ٕ//fib4(2) -> 2 ٕ//fib4(1) -> 0 ٕ//fib4(0) -> 0 ٕ//فبونیکی نمبر سیکوینس چِھ فبونیکی سیکوینس ہیوۍ اکھ سیکوینس یمک تعریف چِھ یتھہٕ پٲٹھۍ گژھان: // >>> fib4(5)
// 4
// >>> fib4(6)
// 8
// >>> fib4(7)
// 14
function fib4(n: number): number {
","function fib4(n: number): number {
    if (n === 0) return 0;
    if (n === 1) return 0;
    if (n === 2) return 2;
    if (n === 3) return 0;

    let fibNumbers = [0, 0, 2, 0];
    for (let i = 4; i <= n; i++) {
        const nextFib = fibNumbers[3] + fibNumbers[2] + fibNumbers[1] + fibNumbers[0];
        fibNumbers.shift();
        fibNumbers.push(nextFib);
    }
    return fibNumbers[3];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib4;
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),28);
  assert.deepEqual(candidate(10),104);
  assert.deepEqual(candidate(12),386);
}

test();"
HumanEval_47,kas_Arab,ts,"//صفہٕ l منٛز عناصرن ہینز میڈین واپس کران۔// >>> median([3, 1, 2, 4, 5])
// 3
// >>> median([-10, 4, 6, 1000, 10, 20])
// 15.0
function median(l: number[]): number {
","function median(l: number[]): number {
    const sorted = l.slice().sort((a, b) => a - b);
    const len = sorted.length;
    
    if (len % 2 === 0) {
        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;
    } else {
        return sorted[Math.floor(len / 2)];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = median;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);
  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);
  assert.deepEqual(candidate([5]),5);
  assert.deepEqual(candidate([6, 5]),5.5);
  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);
}

test();"
HumanEval_48,kas_Arab,ts,"//یہٕ چُھ جانچ کران زِ کیا ڈریگن چُھ اکھ پالینڈروم۔// >>> is_palindrome("""")
// true
// >>> is_palindrome(""aba"")
// true
// >>> is_palindrome(""aaaaa"")
// true
// >>> is_palindrome(""zbcd"")
// false
function is_palindrome(text: string): boolean {
","function is_palindrome(text: string): boolean {
    return text === text.split('').reverse().join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_palindrome;
  assert.deepEqual(candidate(""""),true);
  assert.deepEqual(candidate(""aba""),true);
  assert.deepEqual(candidate(""aaaaa""),true);
  assert.deepEqual(candidate(""zbcd""),false);
  assert.deepEqual(candidate(""xywyx""),true);
  assert.deepEqual(candidate(""xywyz""),false);
  assert.deepEqual(candidate(""xywzx""),false);
}

test();"
HumanEval_49,kas_Arab,ts,"//واپس 2 ^ n ماڈیولو p (آسنہٕ نمبرن ہنزِ لحاظہٕ سٕتۍ آگاہ) ۔// >>> modp(3, 5)
// 3
// >>> modp(1101, 101)
// 2
// >>> modp(0, 101)
// 1
// >>> modp(3, 11)
// 8
// >>> modp(100, 101)
// 1
function modp(n: number, p: number): number {
","function modp(n: number, p: number): number {
    if (n === 0) return 1 % p;
    let result = 1;
    let base = 2;
    
    while (n > 0) {
        if (n % 2 === 1) {
            result = (result * base) % p;
        }
        base = (base * base) % p;
        n = Math.floor(n / 2);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = modp;
  assert.deepEqual(candidate(3, 5),3);
  assert.deepEqual(candidate(1101, 101),2);
  assert.deepEqual(candidate(0, 101),1);
  assert.deepEqual(candidate(3, 11),8);
  assert.deepEqual(candidate(100, 101),1);
  assert.deepEqual(candidate(30, 5),4);
  assert.deepEqual(candidate(31, 5),3);
}

test();"
HumanEval_51,kas_Arab,ts,"//remove_vowels چُھ اکھ فنکشن یُس سٹرنگ چُھ نیوان تہٕ وٲنکلن ہندس بغٲر سٹرنگ چُھ واپس کران۔// >>> remove_vowels("""")
// """"
// >>> remove_vowels(""abcdef"")
// ""bcdf""
// >>> remove_vowels(""aaaaa"")
// """"
// >>> remove_vowels(""aaBAA"")
// ""B""
// >>> remove_vowels(""zbcd"")
// ""zbcd""
function remove_vowels(text: string): string {
","function remove_vowels(text: string): string {
    return text.replace(/[aeiouAEIOU]/g, '');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = remove_vowels;
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""abcdef\nghijklm""),""bcdf\nghjklm"");
  assert.deepEqual(candidate(""fedcba""),""fdcb"");
  assert.deepEqual(candidate(""eeeee""),"""");
  assert.deepEqual(candidate(""acBAA""),""cB"");
  assert.deepEqual(candidate(""EcBOO""),""cB"");
  assert.deepEqual(candidate(""ybcd""),""ybcd"");
}

test();"
HumanEval_52,kas_Arab,ts,"//اگر صفہٕ l منٛز تمام نمبر آسن تھریولڈ t کھوتہٕ کم تہٕ تیلہٕ چُھ یہٕ صحیح واپس کران۔// >>> below_threshold([1, 2, 4, 10], 100)
// true
// >>> below_threshold([1, 20, 4, 10], 5)
// false
function below_threshold(l: number[], t: number): boolean {
","function below_threshold(l: number[], t: number): boolean {
    return l.every(num => num < t);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = below_threshold;
  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);
  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);
  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);
  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);
}

test();"
HumanEval_53,kas_Arab,ts,"//زٕ عدد (x،y) گھڑیو// >>> add(2, 3)
// 5
// >>> add(5, 7)
// 12
function add(x: number, y: number): number {
","function add(x: number, y: number): number {
    return x + y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate(0, 1),1);
  assert.deepEqual(candidate(1, 0),1);
  assert.deepEqual(candidate(2, 3),5);
  assert.deepEqual(candidate(5, 7),12);
  assert.deepEqual(candidate(7, 5),12);
}

test();"
HumanEval_54,kas_Arab,ts,"//یہٕ چُھ جانچ کرن کہ کیا زٕ لفظ چِھ ہِوی کردار تھاوان۔ // >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
// true
// >>> same_chars(""abcd"", ""dddddddabc"")
// true
// >>> same_chars(""dddddddabc"", ""abcd"")
// true
// >>> same_chars(""eabcd"", ""dddddddabc"")
// false
// >>> same_chars(""abcd"", ""dddddddabce"")
// false
// >>> same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
// false
function same_chars(s0: string, s1: string): boolean {
","function same_chars(s0: string, s1: string): boolean {
    const charSet0: Set<string> = new Set(s0);
    const charSet1: Set<string> = new Set(s1);

    if (charSet0.size !== charSet1.size) {
        return false;
    }

    for (const char of charSet0) {
        if (!charSet1.has(char)) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = same_chars;
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddeddabc""),true);
  assert.deepEqual(candidate(""abcd"", ""dddddddabc""),true);
  assert.deepEqual(candidate(""dddddddabc"", ""abcd""),true);
  assert.deepEqual(candidate(""eabcd"", ""dddddddabc""),false);
  assert.deepEqual(candidate(""abcd"", ""dddddddabcf""),false);
  assert.deepEqual(candidate(""eabcdzzzz"", ""dddzzzzzzzddddabc""),false);
  assert.deepEqual(candidate(""aabb"", ""aaccc""),false);
}

test();"
HumanEval_55,kas_Arab,ts,"//n-th فبونیکی نمبر واپس کرو۔ // >>> fib(10)
// 55
// >>> fib(1)
// 1
// >>> fib(8)
// 21
function fib(n: number): number {
","function fib(n: number): number {
    if (n <= 0) {
        throw new Error(""Input should be a positive integer."");
    }
    if (n === 1) return 1;
    if (n === 2) return 1;

    let a = 1, b = 1;
    for (let i = 3; i <= n; i++) {
        const temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}

// Example usage:
console.log(fib(10)); // 55
console.log(fib(1));  // 1
console.log(fib(8));  // 21","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fib;
  assert.deepEqual(candidate(10),55);
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(8),21);
  assert.deepEqual(candidate(11),89);
  assert.deepEqual(candidate(12),144);
}

test();"
HumanEval_56,kas_Arab,ts,"//اگر پرتھ کھلٲوِتھ بریکٹس منز آسہِ اکھ مٲثل بند کرن وٲل بریکٹ تہٕ تہٕ چُھ صحیح واپس گژھان۔//بریکٹس چُھ ""<"" تہٕ "">"" سٹرنگ۔// >>> correct_bracketing(""<"")
// false
// >>> correct_bracketing(""<>"")
// true
// >>> correct_bracketing(""<<><>>"")
// true
// >>> correct_bracketing(""><<>"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;
    for (let char of brackets) {
        if (char === '<') {
            balance++;
        } else if (char === '>') {
            balance--;
        }
        if (balance < 0) {
            return false;
        }
    }
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""<>""),true);
  assert.deepEqual(candidate(""<<><>>""),true);
  assert.deepEqual(candidate(""<><><<><>><>""),true);
  assert.deepEqual(candidate(""<><><<<><><>><>><<><><<>>>""),true);
  assert.deepEqual(candidate(""<<<><>>>>""),false);
  assert.deepEqual(candidate(""><<>""),false);
  assert.deepEqual(candidate(""<""),false);
  assert.deepEqual(candidate(""<<<<""),false);
  assert.deepEqual(candidate("">""),false);
  assert.deepEqual(candidate(""<<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>><<>""),false);
  assert.deepEqual(candidate(""<><><<><>><>>><>""),false);
}

test();"
HumanEval_57,kas_Arab,ts,"//ریٹرن چُھ سُوٛ ییلہٕ صفک عناصر یکساں طور پأنٹھ چِھ بڑان یا کم گژان۔// >>> monotonic([1, 2, 4, 20])
// true
// >>> monotonic([1, 20, 4, 10])
// false
// >>> monotonic([4, 1, 0, -10])
// true
function monotonic(l: number[]): boolean {
","function monotonic(l: number[]): boolean {
    if (l.length <= 1) return true;
    
    let increasing = true;
    let decreasing = true;
    
    for (let i = 1; i < l.length; i++) {
        if (l[i] > l[i - 1]) decreasing = false;
        if (l[i] < l[i - 1]) increasing = false;
        
        if (!increasing && !decreasing) return false;
    }
    
    return increasing || decreasing;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = monotonic;
  assert.deepEqual(candidate([1, 2, 4, 10]),true);
  assert.deepEqual(candidate([1, 2, 4, 20]),true);
  assert.deepEqual(candidate([1, 20, 4, 10]),false);
  assert.deepEqual(candidate([4, 1, 0, -10]),true);
  assert.deepEqual(candidate([4, 1, 1, 0]),true);
  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);
  assert.deepEqual(candidate([9, 9, 9, 9]),true);
}

test();"
HumanEval_58,kas_Arab,ts,"//زٕ صفن خٲطرٕ چھ ترتیب شدہ منفرد مشترکہ عناصر واپس کران۔// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
// [1, 5, 653]
// >>> common([5, 3, 2, 8], [3, 2])
// [2, 3]
function common(l1: number[], l2: number[]): number[] {
","function common(l1: number[], l2: number[]): number[] {
    const set1 = new Set(l1);
    const set2 = new Set(l2);
    const commonElements = Array.from(set1).filter(item => set2.has(item));
    return commonElements.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = common;
  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);
  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);
  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);
  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);
}

test();"
HumanEval_59,kas_Arab,ts,"//n ہٕنٛد ساروٕے کھۄتہٕ بوٚڑ پرائم فیکٹر موٗلو۔ فرض کرو n > 1 تہٕ یہ چھ نہٕ پرائم۔ // >>> largest_prime_factor(13195)
// 29
// >>> largest_prime_factor(2048)
// 2
function largest_prime_factor(n: number): number {
","function largest_prime_factor(n: number): number {
    let largestFactor = 1;

    // Divide n by 2 until it becomes odd
    while (n % 2 === 0) {
        largestFactor = 2;
        n /= 2;
    }

    // Check for odd factors from 3 upwards
    for (let i = 3; i <= Math.sqrt(n); i += 2) {
        while (n % i === 0) {
            largestFactor = i;
            n /= i;
        }
    }

    // If n becomes a prime number greater than 2
    if (n > 2) {
        largestFactor = n;
    }

    return largestFactor;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_prime_factor;
  assert.deepEqual(candidate(15),5);
  assert.deepEqual(candidate(27),3);
  assert.deepEqual(candidate(63),7);
  assert.deepEqual(candidate(330),11);
  assert.deepEqual(candidate(13195),29);
}

test();"
HumanEval_60,kas_Arab,ts,"//sum_to_n چُھ اکھ فنکشن یُس 1 پیٹھ n تام نمبرن ہنزِ مجموعہٕ چُھ بناوان۔ // >>> sum_to_n(30)
// 465
// >>> sum_to_n(100)
// 5050
// >>> sum_to_n(5)
// 15
// >>> sum_to_n(10)
// 55
// >>> sum_to_n(1)
// 1
function sum_to_n(n: number): number {
","function sum_to_n(n: number): number {
    return n * (n + 1) / 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_to_n;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(6),21);
  assert.deepEqual(candidate(11),66);
  assert.deepEqual(candidate(30),465);
  assert.deepEqual(candidate(100),5050);
}

test();"
HumanEval_61,kas_Arab,ts,"//اگر پرتھ کھلٲوِتھ بریکٹس منز آسہِ اکھ مٲثل بند کرن وٲل بریکٹ تہٕ تہٕ چُھ صحیح واپس گژھان۔//قوسین منٛز چُھ اکھ سٹرنگ ""1"" تہٕ ""2""۔// >>> correct_bracketing(""("")
// false
// >>> correct_bracketing(""()"")
// true
// >>> correct_bracketing(""(()())"")
// true
// >>> correct_bracketing("")(()"")
// false
function correct_bracketing(brackets: string): boolean {
","function correct_bracketing(brackets: string): boolean {
    let balance = 0;

    for (let char of brackets) {
        if (char === '(') {
            balance++;
        } else if (char === ')') {
            balance--;
        }

        // If balance goes negative, there's a closing bracket without a matching opening one
        if (balance < 0) {
            return false;
        }
    }

    // If balance is zero, all opening brackets have matching closing brackets
    return balance === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = correct_bracketing;
  assert.deepEqual(candidate(""()""),true);
  assert.deepEqual(candidate(""(()())""),true);
  assert.deepEqual(candidate(""()()(()())()""),true);
  assert.deepEqual(candidate(""()()((()()())())(()()(()))""),true);
  assert.deepEqual(candidate(""((()())))""),false);
  assert.deepEqual(candidate("")(()""),false);
  assert.deepEqual(candidate(""(""),false);
  assert.deepEqual(candidate(""((((""),false);
  assert.deepEqual(candidate("")""),false);
  assert.deepEqual(candidate(""(()""),false);
  assert.deepEqual(candidate(""()()(()())())(()""),false);
  assert.deepEqual(candidate(""()()(()())()))()""),false);
}

test();"
HumanEval_62,kas_Arab,ts,"//اتھ کثیر الثانیس سٕتۍ چُھ ڈیریویوٹ واپس گژھان یوس ایکسی شکلس منز چُھ۔//xs[0] + xs[1] * x + xs[2] * x ^ 2 + .... //xs چُھ کثیر الثانیس ہند کوفِشینٹس ظٲہر کران۔// >>> derivative([3, 1, 2, 4, 5])
// [1, 4, 12, 20]
// >>> derivative([1, 2, 3])
// [2, 6]
function derivative(xs: number[]): number[] {
","function derivative(xs: number[]): number[] {
    return xs.slice(1).map((coef, index) => coef * (index + 1));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = derivative;
  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);
  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);
  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);
  assert.deepEqual(candidate([1]),[]);
}

test();"
HumanEval_63,kas_Arab,ts,"//براہِ کرم fibfib نمبر سیکوینس کہِ n-th عنصرُک موثر طریقہٕ کار استعمال کرنہٕ خٲطرٕہ کٔرِو اکھ فنکشن لکھٕہ۔//fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) //fib fib (((2) == 1 ٕ//fib fib{1} == 0 ٕ//fib fib{0} == 0 ٕ//فبونیکی نمبر سیکوینس چِھ فبونیکی سیکوینس ہیوۍ اکھ سیکوینس یمک تعریف چِھ یتھہٕ کٔنۍ کرنہٕ آمٕژ: // >>> fibfib(1)
// 0
// >>> fibfib(5)
// 4
// >>> fibfib(8)
// 24
function fibfib(n: number): number {
","function fibfib(n: number): number {
    if (n === 0 || n === 1) return 0;
    if (n === 2) return 1;

    let a = 0;
    let b = 0;
    let c = 1;

    for (let i = 3; i <= n; i++) {
        let next = a + b + c;
        a = b;
        b = c;
        c = next;
    }

    return c;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fibfib;
  assert.deepEqual(candidate(2),1);
  assert.deepEqual(candidate(1),0);
  assert.deepEqual(candidate(5),4);
  assert.deepEqual(candidate(8),24);
  assert.deepEqual(candidate(10),81);
  assert.deepEqual(candidate(12),274);
  assert.deepEqual(candidate(14),927);
}

test();"
HumanEval_64,kas_Arab,ts,"//مثال: ٕ//صوتی حرف، مگر صرف ییلہِ یہٕ کنٛہہ لفظ ختم چُھ گژھان۔//اتھ صورتس منز چِھ واول 'a' ، 'e' ، 'i' ، 'o' ، 'u'۔ یتہِ چُھ 'y' تہٕ a۔//یہٕ چُھ اکہ لفظک ان پٹ کہ طور پأنٹھ ان پٹ کران تہٕ سٹرنگس منٛز واولن ہینز تعداد چُھ واپس کران۔//اکھ فنکشن لکھو vowels_count یُس اکھ سٹرنگ لیُوکھ یُس نمائندگی چُھ کران۔// >>> vowels_count(""abcde"")
// 2
// >>> vowels_count(""ACEDY"")
// 3
function vowels_count(s: string): number {
","function vowels_count(s: string): number {
    let count = 0;
    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);
    const lowerCaseString = s.toLowerCase();

    for (let i = 0; i < lowerCaseString.length; i++) {
        if (vowels.has(lowerCaseString[i])) {
            count++;
        }
        if (i === lowerCaseString.length - 1 && lowerCaseString[i] === 'y') {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = vowels_count;
  assert.deepEqual(candidate(""abcde""),2);
  assert.deepEqual(candidate(""Alone""),3);
  assert.deepEqual(candidate(""key""),2);
  assert.deepEqual(candidate(""bye""),1);
  assert.deepEqual(candidate(""keY""),2);
  assert.deepEqual(candidate(""bYe""),1);
  assert.deepEqual(candidate(""ACEDY""),3);
}

test();"
HumanEval_65,kas_Arab,ts,"//اگر شفٹ > ہندسن ہند تعداد، تو واپس ہندسن ہند برعکس۔//تہٕ نتیجہ چُھ سٹرنگ کس طورس پیٹھ واپس گژھان۔ //سرکلر انٹیجر x کہِ ہندسن ہند نقل و حرکت، ہندسن ہند دٲیرٕ پیٹھہٕ دٲیرٕ منتقل کٔرِتھ۔// >>> circular_shift(12, 1)
// ""21""
// >>> circular_shift(12, 2)
// ""12""
function circular_shift(x: number, shift: number): string {
","function circular_shift(x: number, shift: number): string {
    const strNum = x.toString();
    const length = strNum.length;
    if (shift >= length) {
        return strNum.split('').reverse().join('');
    }
    const normalizedShift = shift % length;
    const splitIndex = length - normalizedShift;
    return strNum.slice(splitIndex) + strNum.slice(0, splitIndex);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = circular_shift;
  assert.deepEqual(candidate(100, 2),""001"");
  assert.deepEqual(candidate(12, 2),""12"");
  assert.deepEqual(candidate(97, 8),""79"");
  assert.deepEqual(candidate(12, 1),""21"");
  assert.deepEqual(candidate(11, 101),""11"");
}

test();"
HumanEval_66,kas_Arab,ts,"//مثالہٕ: //ASCII کوڈٕ۔//اکھ فنکشن لیوکھن یس ان پٹ کس طورس پیٚٹھ اکھ سٹرنگ نوان چھ تہٕ صرف اپر کیٚرترٕن ہٕنٛدس مجموعس واپس چھ دوان'۔//ٹاسک // >>> digitSum("""")
// 0
// >>> digitSum(""abAB"")
// 131
// >>> digitSum(""abcCd"")
// 67
// >>> digitSum(""helloE"")
// 69
// >>> digitSum(""woArBld"")
// 131
// >>> digitSum(""aAaaaXa"")
// 153
function digitSum(s: string): number {
","function digitSum(s: string): number {
    let sum = 0;
    for (const char of s) {
        if (char >= 'A' && char <= 'Z') {
            sum += char.charCodeAt(0);
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digitSum;
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""abAB""),131);
  assert.deepEqual(candidate(""abcCd""),67);
  assert.deepEqual(candidate(""helloE""),69);
  assert.deepEqual(candidate(""woArBld""),131);
  assert.deepEqual(candidate(""aAaaaXa""),153);
  assert.deepEqual(candidate("" How are yOu?""),151);
  assert.deepEqual(candidate(""You arE Very Smart""),327);
}

test();"
HumanEval_67,kas_Arab,ts,"//زٲژ:مُتلقہٕ//ٹوٹھہِ منز چُھ آمُت ٹوٹھہِ منز آمُت منگو میون ہُند تعداد واپس کران۔//سنتری تہٕ سیب تہٕ اکھ عدد یم میون ہینز کل تعدادچ نمائندگی چِھ کران //سیب، نارنج، تہٕ آموٕنی پھل۔ سٹرنگ دیتھ یم کل تعدادچ نمائندگی چِھ کران//یم میوہ جات چھِ اکھ ٹوکری منٛز تقسیم کرنہٕ یوان۔//اتھ کامہِ منز، کرِو توہیہ اکھ سٹرنگ یوس سیب تہٕ سنتری ہنز تعداد چُھ ظٲہر کران۔// >>> fruit_distribution(""5 apples and 6 oranges"", 19)
// 8
// >>> fruit_distribution(""0 apples and 1 oranges"", 3)
// 2
// >>> fruit_distribution(""2 apples and 3 oranges"", 100)
// 95
// >>> fruit_distribution(""100 apples and 1 oranges"", 120)
// 19
function fruit_distribution(s: string, n: number): number {
","function fruit_distribution(s: string, n: number): number {
    const regex = /(\d+) apples and (\d+) oranges/;
    const match = s.match(regex);
    
    if (!match) {
        throw new Error(""Invalid input format"");
    }
    
    const apples = parseInt(match[1], 10);
    const oranges = parseInt(match[2], 10);
    
    const totalApplesAndOranges = apples + oranges;
    return n - totalApplesAndOranges;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fruit_distribution;
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 19),8);
  assert.deepEqual(candidate(""5 apples and 6 oranges"", 21),10);
  assert.deepEqual(candidate(""0 apples and 1 oranges"", 3),2);
  assert.deepEqual(candidate(""1 apples and 0 oranges"", 3),2);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 100),95);
  assert.deepEqual(candidate(""2 apples and 3 oranges"", 5),0);
  assert.deepEqual(candidate(""1 apples and 100 oranges"", 120),19);
}

test();"
HumanEval_68,kas_Arab,ts,"//مثالہٕ 1: //اگر چُھ نہٕ کنہہ تہٕ ویلیو یا دیتُن صف چِھ خٲلی، توہہٕ چِھ واپس []۔//پُکِتھ گژھہِ نوڈ اکھ سرنی منز واپس کرنہٕ یِن، [smallest_value، امہٕ سٕند انڈیکس ]، //اگر اَکی ساس کم کھوتہٕ کم برابر قدر وٲل متعدد نوڈس ملان چُھ تیلہٕ چُھ کم کھوتہٕ کم انڈیکس وول نوڈ واپس کران۔//ژٹنہٕ آمت نوڈ گژھہٕ ساروٕے کھۄتہٕ لۄکُٹ Even ویلیو وول نوڈ آسن۔//توہہٕ ہکو پنن کٲم نوڈس منٛز اکھ پتھ کڑتھ تہٕ یہٕ واپس کرتھ۔//""اکھ صف دِنہٕ آمت یس کُنہِ کُنہِ ٹری ہنز برانچچچ نمائندگی چِھ کران یتھ منٛز غٲر منفی عدد نوڈس چِھ آسان۔""// >>> pluck([4, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 2:
// >>> pluck([1, 2, 3])
// [2, 1]
// Explanation: 2 has the smallest even value, and 2 has the smallest index.
// Example 3:
// >>> pluck([])
// []
// Example 4:
// >>> pluck([5, 0, 3, 0, 4, 2])
// [0, 1]
// Explanation: 0 is the smallest value, but  there are two zeros,
// so we will choose the first zero, which has the smallest index.
// Constraints:
// * 1 <= nodes.length <= 10000
// * 0 <= node.value
function pluck(arr: number[]): number[] {
","function pluck(arr: number[]): number[] {
    let minEvenValue: number | null = null;
    let minIndex: number | null = null;

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 === 0) { // Check if the number is even
            if (minEvenValue === null || arr[i] < minEvenValue) {
                minEvenValue = arr[i];
                minIndex = i;
            }
        }
    }

    if (minEvenValue !== null && minIndex !== null) {
        return [minEvenValue, minIndex];
    } else {
        return [];
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = pluck;
  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);
  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);
  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);
  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);
  assert.deepEqual(candidate([7, 9, 7, 1]),[]);
}

test();"
HumanEval_69,kas_Arab,ts,"//مثالہٕ: //اگر یِژھ کَتھِچ کَتھِچ وَتھ آسہِ نہ، تیلہِ چُھ -1 لَبنٔ یوان۔//اکھ عدد چُھ عددُک تعدد یُس صفس منز ظٲہر چُھ گژھان۔//صفر، تہٕ چُھ اکھ فریکوئنسی یم پانہٕ عددچ قدر کھوتہٕ زیادٕ یا برابر چِھ۔//توہہ چھیہ مثبت عددن ہنز اکھ غٲر خٲلی صف دتھ آمژ۔ ساروی کھوتہ بوٚڑ عدد یوس  کھوتہ بوٚڑ آسہِ واپس کرِو// >>> search([4, 1, 2, 2, 3, 1])
// 2
// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])
// 3
// >>> search([5, 5, 4, 4, 4])
// -1
function search(lst: number[]): number {
","function search(lst: number[]): number {
    const frequencyMap: Map<number, number> = new Map();

    // Count frequencies of each integer in the array
    for (const num of lst) {
        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
    }

    let result = -1;

    // Determine the greatest integer that meets the condition
    for (const [num, freq] of frequencyMap.entries()) {
        if (freq >= num && num > result) {
            result = num;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = search;
  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);
  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);
  assert.deepEqual(candidate([3, 3]),-1);
  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);
  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);
  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);
  assert.deepEqual(candidate([3, 2, 8, 2]),2);
  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);
  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);
  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);
  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);
  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);
  assert.deepEqual(candidate([1]),1);
  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);
  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);
  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);
  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);
  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);
  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);
  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);
  assert.deepEqual(candidate([10]),-1);
  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);
  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);
  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);
  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);
}

test();"
HumanEval_70,kas_Arab,ts,"//مثالہٕ: //پتہٕ باقی تمام انٹیجرز منٛز چھ زیٛادٕ کھوتہٕ زیادٕ، تہٕ پتہٕ کم کھوتہٕ کم تہٕ بییہٕ۔//عجیب ترتیب، ییلہِ تہٕ توہہٕ کم از کم ویلیو سٕتۍ شروع کرِ، چُھ //انٹیجرزن ہنز اکھ صف دِنہٕ آمت، عجیب ترتیبس منز گژھہٕ صف واپس۔// >>> strange_sort_list([1, 2, 3, 4])
// [1, 4, 2, 3]
// >>> strange_sort_list([5, 5, 5, 5])
// [5, 5, 5, 5]
// >>> strange_sort_list([])
// []
function strange_sort_list(lst: number[]): number[] {
","function strange_sort_list(lst: number[]): number[] {
    const sorted = [...lst].sort((a, b) => a - b);
    const result: number[] = [];
    let left = 0;
    let right = sorted.length - 1;

    while (left <= right) {
        if (left === right) {
            result.push(sorted[left]);
        } else {
            result.push(sorted[left]);
            result.push(sorted[right]);
        }
        left++;
        right--;
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = strange_sort_list;
  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);
  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);
  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);
  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);
  assert.deepEqual(candidate([111111]),[111111]);
}

test();"
HumanEval_71,kas_Arab,ts,"//مثال: ٕ//تہٕ ترٛیٚیِم اِضافہٕ۔//تریہ طرفہٕ چُھ اکھ درست مثلث بنان ییلہِ دۄن طرفن ہند مجموعہٕ زیادٕہ آسہِ۔//ورنہِ آو -1 واپس //مثلث چُھ 2 اعشاریہ پوائنٹس پیٹھ گول کرنہٕ یوان اگر ترٛے اطراف چِھ اکھ درست مثلث بناوان۔//مثلث کس تریمس حصس ہنٛد طول و عرضس دیتھ، کرو  کس رقبس واپس۔// >>> triangle_area(3, 4, 5)
// 6.0
// >>> triangle_area(1, 2, 10)
// -1
function triangle_area(a: number, b: number, c: number): number {
","function triangle_area(a: number, b: number, c: number): number {
    // Check if the sides form a valid triangle
    if (a + b > c && a + c > b && b + c > a) {
        // Calculate the semi-perimeter
        const s = (a + b + c) / 2;
        // Calculate the area using Heron's formula
        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
        // Return the area rounded to 2 decimal places
        return Math.round(area * 100) / 100;
    }
    // Return -1 if the sides do not form a valid triangle
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = triangle_area;
  assert.deepEqual(candidate(3, 4, 5),6.0);
  assert.deepEqual(candidate(1, 2, 10),-1);
  assert.deepEqual(candidate(4, 8, 5),8.18);
  assert.deepEqual(candidate(2, 2, 2),1.73);
  assert.deepEqual(candidate(1, 2, 3),-1);
  assert.deepEqual(candidate(10, 5, 7),16.25);
  assert.deepEqual(candidate(2, 6, 3),-1);
  assert.deepEqual(candidate(1, 1, 1),0.43);
  assert.deepEqual(candidate(2, 2, 10),-1);
}

test();"
HumanEval_72,kas_Arab,ts,"//مثال: ٕ//آبجیکٹ q چُھ پرواز کران اگر یہٕ متوازن چُھ (یہٕ چُھ اکھ پالنڈرومک صف) تہٕ امک عناصرن ہنٛد مجموعہ چُھ زیادٕ کھوتہٕ کم یا برابر زیادٕ کھوتہٕ زیادٕ ممکنہ وزن w۔//اکھ فنکشن لیوکھمُت یوس true چُھ واپس کران اگر آبجیکٹ q اڑان چُھ، تہٕ بییس صورتس منز چُھ غلط کران۔// >>> will_it_fly([1, 2], 5)
// false
// # 1+2 is less than the maximum possible weight, but it's unbalanced.
// >>> will_it_fly([3, 2, 3], 1)
// false
// # it's balanced, but 3+2+3 is more than the maximum possible weight.
// >>> will_it_fly([3, 2, 3], 9)
// true
// # 3+2+3 is less than the maximum possible weight, and it's balanced.
// >>> will_it_fly([3], 5)
// true
// # 3 is less than the maximum possible weight, and it's balanced.
function will_it_fly(q: number[], w: number): boolean {
","function will_it_fly(q: number[], w: number): boolean {
    // Check if the array is balanced (palindromic)
    const isBalanced = (arr: number[]): boolean => {
        for (let i = 0; i < arr.length / 2; i++) {
            if (arr[i] !== arr[arr.length - 1 - i]) {
                return false;
            }
        }
        return true;
    };

    // Calculate the sum of the elements in the array
    const sumElements = q.reduce((acc, curr) => acc + curr, 0);

    // Check both conditions: balanced array and sum less than or equal to max weight
    return isBalanced(q) && sumElements <= w;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = will_it_fly;
  assert.deepEqual(candidate([3, 2, 3], 9),true);
  assert.deepEqual(candidate([1, 2], 5),false);
  assert.deepEqual(candidate([3], 5),true);
  assert.deepEqual(candidate([3, 2, 3], 1),false);
  assert.deepEqual(candidate([1, 2, 3], 6),false);
  assert.deepEqual(candidate([5], 5),true);
}

test();"
HumanEval_73,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اکھ تبدیلی منٛز، ہیٛکو اکھ عنصر بیٚیس عنصرس منٛز تبدیٖل کٔرتھ۔//صفس چھ پالینڈروم بناونہٕ خٲطرٕ تبدیل کرنک ضرورت۔ اکھ پالینڈروم صف چُھ اکھ صف یُس//انٹیجرزن ہنز اکھ صف arr دنہٕ آمت، عنصرن ہنز کم از کم تعداد ژھانڈو یُس // >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])
// 4
// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])
// 1
// >>> smallest_change([1, 2, 3, 2, 1])
// 0
function smallest_change(arr: number[]): number {
","function smallest_change(arr: number[]): number {
    let changes = 0;
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
        if (arr[left] !== arr[right]) {
            changes++;
        }
        left++;
        right--;
    }

    return changes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = smallest_change;
  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);
  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);
  assert.deepEqual(candidate([1, 4, 2]),1);
  assert.deepEqual(candidate([1, 4, 4, 2]),1);
  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);
  assert.deepEqual(candidate([3, 1, 1, 3]),0);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([0, 1]),1);
}

test();"
HumanEval_74,kas_Arab,ts,"//مثالہٕ //اگر زٕ صفن منٛز چھِ کرارن ہینز اکوے تعداد، تیلہٕ چُھ گوڑنچ صف واپس کران۔//صفہٕ کہ تمام تارن منٛز چہٕ کارن ہینز کل تعداد باکین صفن کھوتہٕ کم۔//اکھ فنکشن لیوکھمُت یُس سٹرنگزن ہنز زٕ صفہٕ چُھ قبول کران تہٕ چُھ اتھ صفہٕ واپس کران ییتھ منٛز // >>> total_match([], [])
// []
// >>> total_match([""hi"", ""admin""], [""hI"", ""Hi""])
// [""hI"", ""Hi""]
// >>> total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
// [""hi"", ""admin""]
// >>> total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
// [""hI"", ""hi"", ""hi""]
// >>> total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
// [""4""]
function total_match(lst1: string[], lst2: string[]): string[] {
","function total_match(lst1: string[], lst2: string[]): string[] {
    const getTotalChars = (arr: string[]): number => {
        return arr.reduce((acc, str) => acc + str.length, 0);
    };

    const totalChars1 = getTotalChars(lst1);
    const totalChars2 = getTotalChars(lst2);

    if (totalChars1 < totalChars2) {
        return lst1;
    } else if (totalChars2 < totalChars1) {
        return lst2;
    } else {
        return lst1;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = total_match;
  assert.deepEqual(candidate([], []),[]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi""]),[""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]),[""4""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""Hi""]),[""hI"", ""Hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]),[""hI"", ""hi"", ""hi""]);
  assert.deepEqual(candidate([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]),[""hi"", ""admin""]);
  assert.deepEqual(candidate([], [""this""]),[]);
  assert.deepEqual(candidate([""this""], []),[]);
}

test();"
HumanEval_75,kas_Arab,ts,"//مثال: ٕ//ییتہِ زَن کہِ (a) چُھ 100 کھوتہٕ کم۔ //تہٕ بییہٕ وُنک تام غلط۔ //اکھ فنکشن لیوکھن یُس صحیح چُھ واپس گژھان اگر دِنہٕ آمُت نمبر چُھ 3 پرائم نمبرن ہند ضرب // >>> is_multiply_prime(30)
// true
// 30 = 2 * 3 * 5
function is_multiply_prime(a: number): boolean {
","function is_multiply_prime(a: number): boolean {
    // Helper function to check if a number is prime
    function isPrime(n: number): boolean {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 === 0 || n % 3 === 0) return false;
        for (let i = 5; i * i <= n; i += 6) {
            if (n % i === 0 || n % (i + 2) === 0) return false;
        }
        return true;
    }

    // Generate a list of primes less than 100
    const primes: number[] = [];
    for (let i = 2; i < 100; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    // Check if a can be expressed as a product of 3 distinct primes
    const primeCount = primes.length;
    for (let i = 0; i < primeCount - 2; i++) {
        for (let j = i + 1; j < primeCount - 1; j++) {
            for (let k = j + 1; k < primeCount; k++) {
                if (primes[i] * primes[j] * primes[k] === a) {
                    return true;
                }
            }
        }
    }
    
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_multiply_prime;
  assert.deepEqual(candidate(5),false);
  assert.deepEqual(candidate(30),true);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),false);
  assert.deepEqual(candidate(125),true);
  assert.deepEqual(candidate(105),true);
  assert.deepEqual(candidate(126),false);
  assert.deepEqual(candidate(729),false);
  assert.deepEqual(candidate(891),false);
  assert.deepEqual(candidate(1001),true);
}

test();"
HumanEval_76,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //x چُھ n کِس اکھ سادٕہ طاقت اگر n**int=x //n تہٕ باقی معاملاتن منٛز غلط۔ //توہیہُند کٲم چھُ اَکھ فَنکشن لَکھُن یُس true چُھ رَٹان اگر x چُھ اکھ عدد۔// >>> is_simple_power(1, 4)
// true
// >>> is_simple_power(2, 2)
// true
// >>> is_simple_power(8, 2)
// true
// >>> is_simple_power(3, 2)
// false
// >>> is_simple_power(3, 1)
// false
// >>> is_simple_power(5, 3)
// false
function is_simple_power(x: number, n: number): boolean {
","function is_simple_power(x: number, n: number): boolean {
    if (x < 1 || n < 1) return false;
    if (x === 1) return true; // n^0 is 1 for any n

    let power = 1;
    while (power < x) {
        power *= n;
    }
    
    return power === x;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_simple_power;
  assert.deepEqual(candidate(16, 2),true);
  assert.deepEqual(candidate(143214, 16),false);
  assert.deepEqual(candidate(4, 2),true);
  assert.deepEqual(candidate(9, 3),true);
  assert.deepEqual(candidate(16, 4),true);
  assert.deepEqual(candidate(24, 2),false);
  assert.deepEqual(candidate(128, 4),false);
  assert.deepEqual(candidate(12, 6),false);
  assert.deepEqual(candidate(1, 1),true);
  assert.deepEqual(candidate(1, 12),true);
}

test();"
HumanEval_77,kas_Arab,ts,"//مثالہٕ: //نوٹ: توہہ ہیکہِ یہٕ سمجِتھ زِ ان پٹ چُھ ہمیشہٕ پَزِ۔//اگر یہٕ انجیگر کنٛہہ انٹیجر نمبرُک مکعب چُھ ۔//اکھ فنکشن لیوکھمُت یُس اکھ عدد a نَظرٕ نیوان چُھ تہٕ صحیح چُھ واپس کران۔// >>> iscube(1)
// true
// >>> iscube(2)
// false
// >>> iscube(-1)
// true
// >>> iscube(64)
// true
// >>> iscube(0)
// true
// >>> iscube(180)
// false
function iscube(a: number): boolean {
","function iscube(a: number): boolean {
    // Calculate the cube root of the absolute value of a
    const cubeRoot = Math.cbrt(Math.abs(a));
    // Check if the cube root is an integer
    return cubeRoot === Math.round(cubeRoot);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = iscube;
  assert.deepEqual(candidate(1),true);
  assert.deepEqual(candidate(2),false);
  assert.deepEqual(candidate(-1),true);
  assert.deepEqual(candidate(64),true);
  assert.deepEqual(candidate(180),false);
  assert.deepEqual(candidate(1000),true);
  assert.deepEqual(candidate(0),true);
  assert.deepEqual(candidate(1729),false);
}

test();"
HumanEval_78,kas_Arab,ts,"//مثالہٕ: //تہٕ علامت A،B،C،D،E،F چِھ ہمیشہٕ اپرکیسٕل آسان۔//نوٹ: توہیہ ہیکیو یہٕ سمجِتھ زِ ان پٹ چُھ ہمیشہٕ صحیح یا خالی سٹرنگ آسان، //بی (= اعشاریہ 11) ، ڈی (= اعشاریہ 13) ۔//توہیہ چھِو یمہٕ نمبرو منزہ کنہہ نمبر ژھانڈان: 2، 3، 5، 7، //پرائم نمبر چِھ 2، 3، 5، 7، 11، 13، 17، ...//ہیکساڈسیمل ہندسہٕ چِھ 0، 1، 2، 3، 4، 5، 6، 7، 8، 9، A، B، C، D، E، F۔//1 کھوتہٕ زیادٕ یم زٕ لکٕٹۍ قدرتی نمبرن ہند پٲداوار چُھ نہٕ) ۔//ہندسہٕ یم پرائم چِھ (پرائم نمبر، یا اکھ پرائم، چُھ اکھ فطری نمبر)//ہیکساڈسیمل نمبر چُھ سٹرنگ کِس طورس پیٹھ تہٕ ہیکساڈسیمل ہندسہٕ چُھ گنتی کران۔//توہیہ چھیہ یمہ فنکشنک ٹاسک دوان یمہ کہ ذریعہ توہیہ اکھ وصول کرن وول فنکشن لیکھتھ چھہِ۔// >>> hex_key(""AB"")
// 1
// >>> hex_key(""1077E"")
// 2
// >>> hex_key(""ABED1A33"")
// 4
// >>> hex_key(""123456789ABCDEF0"")
// 6
// >>> hex_key(""2020"")
// 2
function hex_key(num: string): number {
","function hex_key(num: string): number {
    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);
    let count = 0;

    for (let digit of num) {
        if (primeHexDigits.has(digit)) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = hex_key;
  assert.deepEqual(candidate(""AB""),1);
  assert.deepEqual(candidate(""1077E""),2);
  assert.deepEqual(candidate(""ABED1A33""),4);
  assert.deepEqual(candidate(""2020""),2);
  assert.deepEqual(candidate(""123456789ABCDEF0""),6);
  assert.deepEqual(candidate(""112233445566778899AABBCCDDEEFF00""),12);
}

test();"
HumanEval_79,kas_Arab,ts,"//مثالہٕ: //اضافی حروف چھ شکلہٕ منٛز مدد خٲطرٕ موجود۔ //سٹرنگ کہِ آغازس تہٕ اختتامس پیٹھ چُھ اکھ اضافی جوڑٕ 'db' ہندسہٕ آسان۔//سٹرنگس منز چُھ پرتھ کردارس ""1"" یا ""0"" یوان۔//بائنری فارمیٹ۔ فنکشن گژھہٕ اکھ سٹرنگ واپس کرُن، پریتھ کردار چُھ بائنری ہندسہٕ نمٲئندگی کران۔//توہہ چھیہ یوان اکھ نمبر ڈیسیمل شکلہِ منز تہٕ توہہ چھوہ یہ تبدیل کرُن // >>> decimal_to_binary(15)
// ""db1111db""
// >>> decimal_to_binary(32)
// ""db100000db""
function decimal_to_binary(decimal: number): string {
","function decimal_to_binary(decimal: number): string {
    const binaryString = decimal.toString(2);
    return `db${binaryString}db`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = decimal_to_binary;
  assert.deepEqual(candidate(0),""db0db"");
  assert.deepEqual(candidate(32),""db100000db"");
  assert.deepEqual(candidate(103),""db1100111db"");
  assert.deepEqual(candidate(15),""db1111db"");
}

test();"
HumanEval_80,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اکھ سٹرنگ چِھ ہیپٹس اگر ایمچ لمبائی کم کھوتہٕ کم چِھ 3 تہٕ پرتھ 3 پیٹھہٕ چِھ اکھ الگ حرف۔//توہہٕ ہکو یہٕ چیک کرتھ زِ کیا یہ چُھ سچ یا غلط؟//توہہ چھا اکھ جملہ یتھہ پاٹھۍ دِنہ آمت۔// >>> is_happy(""a"")
// false
// >>> is_happy(""aa"")
// false
// >>> is_happy(""abcd"")
// true
// >>> is_happy(""aabb"")
// false
// >>> is_happy(""adb"")
// true
// >>> is_happy(""xyy"")
// false
function is_happy(s: string): boolean {
","function is_happy(s: string): boolean {
    if (s.length < 3) return false;

    for (let i = 0; i <= s.length - 3; i++) {
        const set = new Set(s.substring(i, i + 3));
        if (set.size !== 3) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_happy;
  assert.deepEqual(candidate(""a""),false);
  assert.deepEqual(candidate(""aa""),false);
  assert.deepEqual(candidate(""abcd""),true);
  assert.deepEqual(candidate(""aabb""),false);
  assert.deepEqual(candidate(""adb""),true);
  assert.deepEqual(candidate(""xyy""),false);
  assert.deepEqual(candidate(""iopaxpoi""),true);
  assert.deepEqual(candidate(""iopaxioi""),false);
}

test();"
HumanEval_81,kas_Arab,ts,"//مثال: ٕ//0.0 E ٕ//> 0.0 D-  چُھ//> 0.7 D ٕ//> 1.0 D+ ٕ//> 1.3 C- ٕ//> 1.7 C ٕ//> 2.0 C+ ٕ//> 2.3 بی- ٕ//> 2.7 B ٕ//> 3.0 B+ ٕ//> 3.3 A- ٕ//> 3.7 A ٕ//4.0 A+ ٕ//اوسط۔ لیٹر گریڈ۔//اکھ فنکشن یُس مندرجہ ذیل ٹیبل استعمال کرتھ حرف کس درجہ کس اکھ سرنی سۭتۍ آؤٹ پٹ ہکہٕ کرتھ: //تم دیت توہیہ کیہن طالب علمن خاطرٕ GPA یچ اکھ صف تہٕ توہیہ پزٕ لیکھتھ ۔//صرف اکھ مسئلہٕ چُھ یہٕ زِ سُہٕ چُھ پنُن مرضی پنُن مرضی پنُن کوڈ۔ //سُہٕ چُھ پنٕن الگورتھم بناوان تاکہ سُہٕ ہیکہٕ گرَایڈ کٔرِتھ۔//یہٕ چُھ سیمیسٹرک ٲخری ہفتہٕ تہٕ اساتذہ چِھ امتحانات دوان۔// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])
// [""A+"", ""B"", ""C-"", ""C"", ""A-""]
function numerical_letter_grade(grades: number[]): string[] {
","function numerical_letter_grade(grades: number[]): string[] {
    return grades.map(gpa => {
        if (gpa === 4.0) return ""A+"";
        if (gpa > 3.7) return ""A"";
        if (gpa > 3.3) return ""A-"";
        if (gpa > 3.0) return ""B+"";
        if (gpa > 2.7) return ""B"";
        if (gpa > 2.3) return ""B-"";
        if (gpa > 2.0) return ""C+"";
        if (gpa > 1.7) return ""C"";
        if (gpa > 1.3) return ""C-"";
        if (gpa > 1.0) return ""D+"";
        if (gpa > 0.7) return ""D"";
        if (gpa > 0.0) return ""D-"";
        return ""E"";
    });
}

// Example usage:
// console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // [""A+"", ""B"", ""C-"", ""C"", ""A-""]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = numerical_letter_grade;
  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[""A+"", ""B"", ""C-"", ""C"", ""A-""]);
  assert.deepEqual(candidate([1.2]),[""D+""]);
  assert.deepEqual(candidate([0.5]),[""D-""]);
  assert.deepEqual(candidate([0.0]),[""E""]);
  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[""D"", ""D-"", ""C-"", ""B"", ""B+""]);
  assert.deepEqual(candidate([0.0, 0.7]),[""E"", ""D-""]);
}

test();"
HumanEval_82,kas_Arab,ts,"//مثالہٕ //لمبائی چھُ اکھ پرائم نمبر یا بیاکھ غلط نمبر۔//اکھ فنکشن لیوکھمُت یوس اکھ سٹرنگ چُھ نوان تہٕ اگر سٹرنگ // >>> prime_length(""Hello"")
// true
// >>> prime_length(""abcdcba"")
// true
// >>> prime_length(""kittens"")
// true
// >>> prime_length(""orange"")
// false
function prime_length(string: string): boolean {
","function prime_length(string: string): boolean {
    const length = string.length;

    if (length < 2) return false;

    for (let i = 2; i * i <= length; i++) {
        if (length % i === 0) {
            return false;
        }
    }
    
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prime_length;
  assert.deepEqual(candidate(""Hello""),true);
  assert.deepEqual(candidate(""abcdcba""),true);
  assert.deepEqual(candidate(""kittens""),true);
  assert.deepEqual(candidate(""orange""),false);
  assert.deepEqual(candidate(""wow""),true);
  assert.deepEqual(candidate(""world""),true);
  assert.deepEqual(candidate(""MadaM""),true);
  assert.deepEqual(candidate(""Wow""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""HI""),true);
  assert.deepEqual(candidate(""go""),true);
  assert.deepEqual(candidate(""gogo""),false);
  assert.deepEqual(candidate(""aaaaaaaaaaaaaaa""),false);
  assert.deepEqual(candidate(""Madam""),true);
  assert.deepEqual(candidate(""M""),false);
  assert.deepEqual(candidate(""0""),false);
}

test();"
HumanEval_83,kas_Arab,ts,"//مثبت عدد یم 1 سۭتۍ شروع گژھان یا ختم چُھ گژھان۔//اکھ مثبت عدد n دینہٕ آمت، n ہندسن ہند تعداد چُھ واپس کران۔function starts_one_ends(n: number): number {
","function starts_one_ends(n: number): number {
    if (n === 1) {
        return 1; // The number '1' is the only 1-digit number starting or ending with '1'
    }

    const totalNumbers = Math.pow(10, n - 1); // Total n-digit numbers starting with any digit from 1 to 9
    const startingWithOne = Math.pow(10, n - 1); // The n-digit numbers starting with '1'
    const endingWithOne = Math.pow(10, n - 1); // The n-digit numbers ending with '1'
    const startingAndEndingWithOne = Math.pow(10, n - 2); // The n-digit numbers starting and ending with '1' 

    // To find numbers that start or end with 1, add those starting with 1 
    // and those ending with 1, then subtract the overlap (those both starting and ending with 1).
    return startingWithOne + endingWithOne - startingAndEndingWithOne;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = starts_one_ends;
  assert.deepEqual(candidate(1),1);
  assert.deepEqual(candidate(2),18);
  assert.deepEqual(candidate(3),180);
  assert.deepEqual(candidate(4),1800);
  assert.deepEqual(candidate(5),18000);
}

test();"
HumanEval_84,kas_Arab,ts,"//مثالہٕ //اکھ مثبت عدد N دینہٕ آمت، امہٕ کیٛن ہندسن ہند مجموعی رقم چُھ بائنری منٛز واپس کران۔ // >>> solve(1000)
// ""1""
// >>> solve(150)
// ""110""
// >>> solve(147)
// ""1100""
// Variables:
// @N integer
// Constraints: 0 ≤ N ≤ 10000.
// Output:
// a string of binary number
function solve(N: number): string {
","function solve(N: number): string {
    let sumOfDigits = 0;
    while (N > 0) {
        sumOfDigits += N % 10;
        N = Math.floor(N / 10);
    }
    return sumOfDigits.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(1000),""1"");
  assert.deepEqual(candidate(150),""110"");
  assert.deepEqual(candidate(147),""1100"");
  assert.deepEqual(candidate(333),""1001"");
  assert.deepEqual(candidate(963),""10010"");
}

test();"
HumanEval_85,kas_Arab,ts,"//مثالہٕ: //انٹیجرزن ہند اکھ غٲر خٲلی صف دِنہٕ پتہٕ چُھ ہم عنصر جمع کرٕن یم عجیب انڈیکسس پیٹھ چِھ۔// >>> add([4, 2, 6, 7])
// 2
function add(lst: number[]): number {
","function add(lst: number[]): number {
    return lst.reduce((sum, num, index) => {
        if (index % 2 === 1 && num % 2 === 0) {
            return sum + num;
        }
        return sum;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add;
  assert.deepEqual(candidate([4, 88]),88);
  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);
  assert.deepEqual(candidate([4, 0, 6, 7]),0);
  assert.deepEqual(candidate([4, 4, 6, 8]),12);
}

test();"
HumanEval_86,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //نوٹ: توہیہ پزِ جملس منز لفظن ہنز ترتیب تہٕ خالی جایہ تھاوِ۔//ascending order ascii ویلیو پیتھٕ ۔//اکھ نٔو لفظ چُھ یتھ منز تمام حروف ترتیب آمت دِنہٕ//سٹرنگُک اکھ آرڈرڈ ورجن چُھ اکھ سٹرنگ یتہِ تمام لفظ (جدا کرٕن) ٕچ ضرورت آسہِ۔//اکھ فنکشن لیوکھمُت یُس اکھ سٹرنگ نیران چُھ تہٕ امچ اکھ آرڈرڈ ورژن چُھ رٹان۔// >>> anti_shuffle(""Hi"")
// ""Hi""
// >>> anti_shuffle(""hello"")
// ""ehllo""
// >>> anti_shuffle(""Hello World!!!"")
// ""Hello !!!Wdlor""
function anti_shuffle(s: string): string {
","function anti_shuffle(s: string): string {
  return s.split(' ').map(word =>
    word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')
  ).join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = anti_shuffle;
  assert.deepEqual(candidate(""Hi""),""Hi"");
  assert.deepEqual(candidate(""hello""),""ehllo"");
  assert.deepEqual(candidate(""number""),""bemnru"");
  assert.deepEqual(candidate(""abcd""),""abcd"");
  assert.deepEqual(candidate(""Hello World!!!""),""Hello !!!Wdlor"");
  assert.deepEqual(candidate(""""),"""");
  assert.deepEqual(candidate(""Hi. My name is Mister Robot. How are you?""),"".Hi My aemn is Meirst .Rboot How aer ?ouy"");
}

test();"
HumanEval_87,kas_Arab,ts,"//مثالہٕ: //تہٕ کُنہِ تہٕ صفہٕ کہِ کوآرڈینیٹن چُھ کُنہِ کالمن منز ترتیب دِنہٕ یوان۔//ابتدائی طور پیٹھ چِھ ہم آہنگی بڑھون ترتیبس منٛز صفن ہنٛد ذریع ترتیب دینہٕ یوان۔//ہر صف چِھ اکھ کوآرڈینیٹ (صف، کالم) ، یم 0 پیٹھ شروع چِھ گژھان۔//تہٕ چُھ صفن ہنز صف واپس کران، [(x1، y1، (x2، y2) ...] یتھ کٔنۍ زِ //lst، تہٕ عدد x دنہٕ آمت، صفس منٛز عدد x تلاش کٔرو، //ہر کُنہِ صفس منز ہیکہِ مختلف نمبرن ہند کالمن ہند تہٕ آستھ۔//یوس میٹرکس سٕتۍ مشابہ چُھ، تاہم، میٹرکس کہِ برعکس،//توہہ چھیہ 2 جہتی ڈیٹا، یم اکھ نیسٹڈ سرنی ہنز شکلہِ منز، // >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
// >>> get_row([], 1)
// []
// >>> get_row([[], [1], [1, 2, 3]], 3)
// [[2, 2]]
function get_row(lst: number[][], x: number): [number, number][] {
","function get_row(lst: number[][], x: number): [number, number][] {
    const coordinates: [number, number][] = [];

    // Traverse the data matrix
    lst.forEach((row, rowIndex) => {
        row.forEach((value, colIndex) => {
            if (value === x) {
                coordinates.push([rowIndex, colIndex]);
            }
        });
    });

    // Sort the coordinates
    coordinates.sort(([row1, col1], [row2, col2]) => {
        if (row1 === row2) {
            // Sort by columns in descending order
            return col2 - col1;
        }
        // Sort by rows in ascending order
        return row1 - row2;
    });

    return coordinates;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_row;
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);
  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);
  assert.deepEqual(candidate([], 1),[]);
  assert.deepEqual(candidate([[1]], 2),[]);
  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);
}

test();"
HumanEval_88,kas_Arab,ts,"//مثالہٕ: //* چُھ نْہ دِنہٕ آمُت صف تبدیل کرُن۔ //نوٹ: ٕ//یا چُھ اتھ نزول واجنہِ ترتیبس منز ترتیب دِوان اگر مجموعہٕ (پہلا انڈیکس ویلیو، ٲخری انڈیکس ویلیو) چُھ یکساں۔//توہی چھوہ امہ دیتمتہ صفہٕ بالترتیب ترتیب دینہٕ ییلہِ رقم (پہلی انڈیکس ویلیو، ٲخری انڈیکس ویلیو) عجیب آسہِ، //غٲر منفی عددن ہنز اکھ صف دِنہٕ پتہٕ، دِنہٕ آمژِ صفٕچ اکھ کوٹ چُھ واپس کران۔// >>> sort_array([])
// []
// >>> sort_array([5])
// [5]
// >>> sort_array([2, 4, 3, 0, 1, 5])
// [0, 1, 2, 3, 4, 5]
// >>> sort_array([2, 4, 3, 0, 1, 5, 6])
// [6, 5, 4, 3, 2, 1, 0]
function sort_array(array: number[]): number[] {
","function sort_array(array: number[]): number[] {
    if (array.length === 0) {
        return [];
    }

    const firstValue = array[0];
    const lastValue = array[array.length - 1];
    const sum = firstValue + lastValue;

    const sortedArray = [...array].sort((a, b) => a - b);

    if (sum % 2 === 0) {
        return sortedArray.reverse();
    } else {
        return sortedArray;
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([5]),[5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);
  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);
  assert.deepEqual(candidate([2, 1]),[1, 2]);
  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);
  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);
}

test();"
HumanEval_89,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //دوپمس بہ تہِ چھس بہ تہ دوپمس بہ تہ دوپمس بہ تہِ چھس بہ//الفٔظ چُھ یتھ پأٹھی پٔزی پأٹھی رٹنہٕ یُن ییتھ کیٛن زن حروف //الفٔظ چُھ وۄن وول کرنس سٔتی خفیہ کردہ سٹرنگ واپس کران.//اکھ فنکشن انکرپٹ بناو یُس اکھ سٹرنگ بطور دلیل چُھ نوان تہٕ // >>> encrypt(""hi"")
// ""lm""
// >>> encrypt(""asdfghjkl"")
// ""ewhjklnop""
// >>> encrypt(""gf"")
// ""kj""
// >>> encrypt(""et"")
// ""ix""
function encrypt(s: string): string {
","function encrypt(s: string): string {
    const shift = 2 * 2; // Shift by 4 places
    const alphabetSize = 26;
    
    return s.split('').map(char => {
        const charCode = char.charCodeAt(0);
        
        // Check if the character is a lowercase letter
        if (charCode >= 97 && charCode <= 122) {
            let newCharCode = charCode + shift;
            
            // Wrap around if it goes past 'z'
            if (newCharCode > 122) {
                newCharCode = (newCharCode - 97) % alphabetSize + 97;
            }
            
            return String.fromCharCode(newCharCode);
        }

        // Return the character unchanged if it's not a lowercase letter
        return char;
    }).join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encrypt;
  assert.deepEqual(candidate(""hi""),""lm"");
  assert.deepEqual(candidate(""asdfghjkl""),""ewhjklnop"");
  assert.deepEqual(candidate(""gf""),""kj"");
  assert.deepEqual(candidate(""et""),""ix"");
  assert.deepEqual(candidate(""faewfawefaewg""),""jeiajeaijeiak"");
  assert.deepEqual(candidate(""hellomyfriend""),""lippsqcjvmirh"");
  assert.deepEqual(candidate(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""),""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"");
  assert.deepEqual(candidate(""a""),""e"");
}

test();"
HumanEval_90,kas_Arab,ts,"//اگر یتھ عنصرس نہٕ کنٛہہ تہٕ وجود آسہٕ تیلہٕ چُھ غٲر متعین واپس یوان۔//اکھ فنکشن لیوکھ next_smallest (\displaystyle \next_smallest (\mathrm {next_smallest}) یُس صفہٕ کہِ دویمس ساروی کھوتہٕ لوکٹ عنصرس واپس چُھ کران.//توہہ چھہِ لولہِ ہندس صفس منز یوان۔// >>> next_smallest([1, 2, 3, 4, 5])
// 2
// >>> next_smallest([5, 1, 4, 3, 2])
// 2
// >>> next_smallest([])
// undefined
// >>> next_smallest([1, 1])
// undefined
function next_smallest(lst: number[]): number | undefined {
","function next_smallest(lst: number[]): number | undefined {
    if (lst.length < 2) {
        return undefined;
    }
    
    let first: number | undefined = undefined;
    let second: number | undefined = undefined;
    
    for (let num of lst) {
        if (first === undefined || num < first) {
            second = first;
            first = num;
        } else if (num > first && (second === undefined || num < second)) {
            second = num;
        }
    }

    return second;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = next_smallest;
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);
  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);
  assert.deepEqual(candidate([1, 1]),undefined);
  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);
}

test();"
HumanEval_91,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //جملن ہنز حد چھہِ '،'، '؟' یا '!' سیتۍ بنان۔//بورڈُک مطلب چُھ ""I"" سٕتۍ شروع گژھان۔//توہہ چھہِ لفظن ہند اکھ سلسلہ دوان، تہٕ توہہ چھوہ امہِ ہند نمبر گنڈان۔// >>> is_bored(""Hello world"")
// 0
// >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
// 1
function is_bored(S: string): number {
","function is_bored(S: string): number {
    // Split the string into sentences using '.', '?' or '!' as delimiters
    const sentences = S.split(/[.!?]/);

    // Filter sentences that start with ""I"" and count them
    const boredomCount = sentences.filter(sentence => sentence.trim().startsWith('I')).length;

    return boredomCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_bored;
  assert.deepEqual(candidate(""Hello world""),0);
  assert.deepEqual(candidate(""Is the sky blue?""),0);
  assert.deepEqual(candidate(""I love It !""),1);
  assert.deepEqual(candidate(""bIt""),0);
  assert.deepEqual(candidate(""I feel good today. I will be productive. will kill It""),2);
  assert.deepEqual(candidate(""You and I are going for a walk""),0);
}

test();"
HumanEval_92,kas_Arab,ts,"//مثالہٕ //باقی تمام معاملاتن منٛز چھ، غلط واپس یوان۔//اگر اکھ نمبر باقی دۄن ہندس مجموعس برابر چُھ تہٕ تمام نمبر چِھ عدد، تہٕ صحیح چُھ واپس کران۔//اکھ فنکشن یُس زٕ نمبرن ہنز ضرورت چھے۔// >>> any_int(5, 2, 7)
// true
// >>> any_int(3, 2, 2)
// false
// >>> any_int(3, -2, 1)
// true
// >>> any_int(3.6, -2.2, 2)
// false
function any_int(x: number, y: number, z: number): boolean {
","function any_int(x: number, y: number, z: number): boolean {
    // Check if all numbers are integers
    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {
        return false;
    }
    // Check if one of the numbers is the sum of the other two
    if (x === y + z || y === x + z || z === x + y) {
        return true;
    }
    return false;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = any_int;
  assert.deepEqual(candidate(2, 3, 1),true);
  assert.deepEqual(candidate(2.5, 2, 3),false);
  assert.deepEqual(candidate(1.5, 5, 3.5),false);
  assert.deepEqual(candidate(2, 6, 2),false);
  assert.deepEqual(candidate(4, 2, 2),true);
  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);
  assert.deepEqual(candidate(-4, 6, 2),true);
  assert.deepEqual(candidate(2, 1, 1),true);
  assert.deepEqual(candidate(3, 4, 7),true);
  assert.deepEqual(candidate(3.0, 4, 7),false);
}

test();"
HumanEval_93,kas_Arab,ts,"//مثالہٕ: //صرف لیٹرز سمجھو۔ //انگریزی ہندس الفبوس منز چُھ اکھ وول حرف۔// چُھ حرفُک یُس ٕ چُھ 2 جایہٕ برونٹھ ظٲہر گژھان//یہٕ چُھ اتھ طریقس کُن گژھان زِ یہٕ چُھ تمام حروفن ہند کیس تبدیل کران، تمام واولن چُھ تبدیل کران۔//اکھ فنکشن لیوکھمُت یُس اکھ پٲغام چُھ نوان، تہٕ اتھ منٛز چُھ // >>> encode(""test"")
// ""TGST""
// >>> encode(""This is a message"")
// ""tHKS KS C MGSSCGG""
function encode(message: string): string {
","function encode(message: string): string {
    const swapCase = (char: string): string => {
        if (char === char.toLowerCase()) {
            return char.toUpperCase();
        } else {
            return char.toLowerCase();
        }
    };

    const replaceVowel = (char: string): string => {
        const vowels = 'aeiou';
        const nextVowels = 'cgkqw';
        const index = vowels.indexOf(char.toLowerCase());
        if (index !== -1) {
            return char === char.toLowerCase() 
                ? nextVowels[index] 
                : nextVowels[index].toUpperCase();
        }
        return char;
    };

    return message
        .split('')
        .map(char => swapCase(replaceVowel(char)))
        .join('');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = encode;
  assert.deepEqual(candidate(""TEST""),""tgst"");
  assert.deepEqual(candidate(""Mudasir""),""mWDCSKR"");
  assert.deepEqual(candidate(""YES""),""ygs"");
  assert.deepEqual(candidate(""This is a message""),""tHKS KS C MGSSCGG"");
  assert.deepEqual(candidate(""I DoNt KnOw WhAt tO WrItE""),""k dQnT kNqW wHcT Tq wRkTg"");
}

test();"
HumanEval_94,kas_Arab,ts,"//مثالہٕ: //توہیہ چھوہ ساروی کھوتہٕ بٲڑ پرائم ویلیو تلاش کرنچ ضرورت تہٕ امہ کہ ہندسن ہند مجموعہ واپس کرنہٕ خٲطرٕہ۔//توہہ چھہِ لولہِ ہندس صفس منز یوان۔// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
// 10
// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
// 25
// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
// 13
// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
// 11
// >>> skjkasdkd([0, 81, 12, 3, 1, 21])
// 3
// >>> skjkasdkd([0, 8, 1, 2, 1, 7])
// 7
function skjkasdkd(lst: number[]): number {
","function isPrime(n: number): boolean {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}

function sumOfDigits(n: number): number {
    let sum = 0;
    while (n > 0) {
        sum += n % 10;
        n = Math.floor(n / 10);
    }
    return sum;
}

function skjkasdkd(lst: number[]): number {
    let maxPrime = -1;

    for (const num of lst) {
        if (isPrime(num) && num > maxPrime) {
            maxPrime = num;
        }
    }

    return maxPrime === -1 ? 0 : sumOfDigits(maxPrime);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = skjkasdkd;
  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);
  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);
  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);
  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);
  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);
  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);
  assert.deepEqual(candidate([8191]),19);
  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);
  assert.deepEqual(candidate([127, 97, 8192]),10);
}

test();"
HumanEval_95,kas_Arab,ts,"//مثالہٕ: //فنکشن گژھ غلط واپس یوتھ دیتمُت آبجیکٹ چُھ خٲلی۔ //کیسس یا تمام چابیاں چھِ اپر کیس منٛز سٹرنگ، ورنہٕ چُھ غلط واپس گژھان۔//اکھ آبجیکٹ دنہٕ آمت، اگر تمام کیزٕ لوئر  منٛز تار چِھ آسان تہٕ سچ واپس ییہٕ دنہٕ۔// >>> check_dict_case({""a"": ""apple"", ""b"": ""banana""})
// true
// >>> check_dict_case({""a"": ""apple"", ""A"": ""banana"", ""B"": ""banana""})
// false
// >>> check_dict_case({""a"": ""apple"", 8: ""banana"", ""a"": ""apple""})
// false
// >>> check_dict_case({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
// false
// >>> check_dict_case({""STATE"": ""NC"", ""ZIP"": ""12345""})
// true
function check_dict_case(dict: {[key: string]: string}): boolean {
","function check_dict_case(dict: { [key: string]: string }): boolean {
    const keys = Object.keys(dict);
    if (keys.length === 0) return false;

    const allLowerCase = keys.every(key => key === key.toLowerCase());
    const allUpperCase = keys.every(key => key === key.toUpperCase());

    return allLowerCase || allUpperCase;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_dict_case;
  assert.deepEqual(candidate({""p"": ""pineapple"", ""b"": ""banana""}),true);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""}),false);
  assert.deepEqual(candidate({""p"": ""pineapple"", ""5"": ""banana"", ""a"": ""apple""}),false);
  assert.deepEqual(candidate({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""}),false);
  assert.deepEqual(candidate({""STATE"": ""NC"", ""ZIP"": ""12345""}),true);
  assert.deepEqual(candidate({""fruit"": ""Orange"", ""taste"": ""Sweet""}),true);
  assert.deepEqual(candidate({}),false);
}

test();"
HumanEval_96,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //عدد یم پرائم نمبر چِھ تہٕ n کھوتہٕ کم چِھ۔ //اکھ فنکشن چُھ لاگو کران یُس اکھ غأر منفی عدد چُھ نیوان تہٕ گۄڈنچ n کہ اکہ صفچ واپسی چُھ کران۔// >>> count_up_to(5)
// [2, 3]
// >>> count_up_to(11)
// [2, 3, 5, 7]
// >>> count_up_to(0)
// []
// >>> count_up_to(20)
// [2, 3, 5, 7, 11, 13, 17, 19]
// >>> count_up_to(1)
// []
// >>> count_up_to(18)
// [2, 3, 5, 7, 11, 13, 17]
function count_up_to(n: number): number[] {
","function count_up_to(n: number): number[] {
    function isPrime(num: number): boolean {
        if (num < 2) return false;
        for (let i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) return false;
        }
        return true;
    }

    const primes: number[] = [];
    for (let i = 2; i < n; i++) {
        if (isPrime(i)) {
            primes.push(i);
        }
    }

    return primes;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_up_to;
  assert.deepEqual(candidate(5),[2, 3]);
  assert.deepEqual(candidate(6),[2, 3, 5]);
  assert.deepEqual(candidate(7),[2, 3, 5]);
  assert.deepEqual(candidate(10),[2, 3, 5, 7]);
  assert.deepEqual(candidate(0),[]);
  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);
  assert.deepEqual(candidate(1),[]);
  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);
  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);
}

test();"
HumanEval_97,kas_Arab,ts,"//مثالہٕ: //ییہٕ فرض کرنہٕ زِ ان پٹ چُھ ہمیشہٕ درست آسان۔//تہنز اکٲئی ہندسن ہند پٲداوار۔//یہٕ فنکشن یُس زٕ عدد لیچھِ تیلہٕ چُھ مکمل کران تہٕ واپسی چُھ کران۔// >>> multiply(148, 412)
// 16
// >>> multiply(19, 28)
// 72
// >>> multiply(2020, 1851)
// 0
// >>> multiply(14, -15)
// 20
function multiply(a: number, b: number): number {
","function multiply(a: number, b: number): number {
    const unitDigitA = Math.abs(a) % 10;
    const unitDigitB = Math.abs(b) % 10;
    return unitDigitA * unitDigitB;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = multiply;
  assert.deepEqual(candidate(148, 412),16);
  assert.deepEqual(candidate(19, 28),72);
  assert.deepEqual(candidate(2020, 1851),0);
  assert.deepEqual(candidate(14, -15),20);
  assert.deepEqual(candidate(76, 67),42);
  assert.deepEqual(candidate(17, 27),49);
  assert.deepEqual(candidate(0, 1),0);
  assert.deepEqual(candidate(0, 0),0);
}

test();"
HumanEval_98,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اکھ سٹرنگ s دنہٕ آمت، اپرکیسٹر وولن ہندس تعدادس چِھ برابر انڈیکسس منٛز شمار کران۔// >>> count_upper(""aBCdEf"")
// 1
// >>> count_upper(""abcdefg"")
// 0
// >>> count_upper(""dBBE"")
// 0
function count_upper(s: string): number {
","function count_upper(s: string): number {
    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);
    let count = 0;
    
    for (let i = 0; i < s.length; i += 2) {
        if (uppercaseVowels.has(s[i])) {
            count++;
        }
    }
    
    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_upper;
  assert.deepEqual(candidate(""aBCdEf""),1);
  assert.deepEqual(candidate(""abcdefg""),0);
  assert.deepEqual(candidate(""dBBE""),0);
  assert.deepEqual(candidate(""B""),0);
  assert.deepEqual(candidate(""U""),1);
  assert.deepEqual(candidate(""""),0);
  assert.deepEqual(candidate(""EEEE""),2);
}

test();"
HumanEval_99,kas_Arab,ts,"//مثالہٕ //زٕ عددٕ، صفرٕ پیٹھہٕ دور۔//تہٕ چُھ ایمہِ نزدیک ترین عددُک جواب دیوان۔ اگر یہٕ عدد چُھ مساوی فاصلس پیٹھ۔//اکھ فنکشن بنٲوِتھ یُس اکھ ویلیو (سٹرینگ) ننیومُت چھُ یُس اکہ نمبرٕچ نمائندگی کران چھُ // >>> closest_integer(""10"")
// 10
// >>> closest_integer(""15.3"")
// 15
// Note:
// Rounding away from zero means that if the given number is equidistant
// from two integers, the one you should return is the one that is the
// farthest from zero. For example closest_integer(""14.5"") should
// return 15 and closest_integer(""-14.5"") should return -15.
function closest_integer(value: string): number {
","function closest_integer(value: string): number {
  const num = parseFloat(value);
  if (num > 0) {
    return Math.floor(num + 0.5);
  } else {
    return Math.ceil(num - 0.5);
  }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = closest_integer;
  assert.deepEqual(candidate(""10""),10);
  assert.deepEqual(candidate(""14.5""),15);
  assert.deepEqual(candidate(""-15.5""),-16);
  assert.deepEqual(candidate(""15.3""),15);
  assert.deepEqual(candidate(""0""),0);
}

test();"
HumanEval_100,kas_Arab,ts,"//مثالہٕ: //i چُھ سطحس (i+1) منز پتھرن ہنز تعداد ظٲہر کران۔//اکہ صفہٕ منٛز پرتھ سطحس منٛز کنوین ہنٛد تعداد واپس کران، یتہٕ ایلیمینٹ اِنڈِکسس پیٹھ چُھ //- اگر n چُھ جُڑ توٕ ہکو بیاکھ نمبر تُلان۔ //- اگر n چُھ عجیب تیلہٕ ہکو بیس عجیب نمبرس منتخب کٔرتھ۔//نچلی سطحس منٛز چِھ کنہٕ ہنٛد تعداد: //گوڑنچ سطحس منٛز چِھ n ہیلکس۔//اکھ مثبت عدد n دینہٕ آمت، توہیہ چِھ پتھرک n سطحن ہند اکھ ڈھیر بناون۔// >>> make_a_pile(3)
// [3, 5, 7]
function make_a_pile(n: number): number[] {
","function make_a_pile(n: number): number[] {
    const result: number[] = [];
    let currentStones = n;
    for (let i = 0; i < n; i++) {
        result.push(currentStones);
        if (currentStones % 2 === 0) {
            currentStones += 2; // next even number
        } else {
            currentStones += 2; // next odd number
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = make_a_pile;
  assert.deepEqual(candidate(3),[3, 5, 7]);
  assert.deepEqual(candidate(4),[4, 6, 8, 10]);
  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);
  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);
  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);
}

test();"
HumanEval_101,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //سٹرنگس لفظن منٛز تقسیم کرنہٕ تہٕ لفظن ہینز اکھ صف واپس کرنہٕ خاطرٕ۔//توہہ چھہِ لفظن ہند اکھ تار دوان یُس کما یا اسپیسزس ذریعہٕ چُھ الگ کرنہٕ آمت۔ توہہ ہکو یہٕ کٔرِتھ:// >>> words_string(""Hi, my name is John"")
// [""Hi"", ""my"", ""name"", ""is"", ""John""]
// >>> words_string(""One, two, three, four, five, six"")
// [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
function words_string(s: string): string[] {
","function words_string(s: string): string[] {
    return s.split(/[\s,]+/).filter(word => word.length > 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_string;
  assert.deepEqual(candidate(""Hi, my name is John""),[""Hi"", ""my"", ""name"", ""is"", ""John""]);
  assert.deepEqual(candidate(""One, two, three, four, five, six""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""Hi, my name""),[""Hi"", ""my"", ""name""]);
  assert.deepEqual(candidate(""One,, two, three, four, five, six,""),[""One"", ""two"", ""three"", ""four"", ""five"", ""six""]);
  assert.deepEqual(candidate(""""),[]);
  assert.deepEqual(candidate(""ahmed     , gamal""),[""ahmed"", ""gamal""]);
}

test();"
HumanEval_102,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اگر چُھ نہٕ یہٕ کُنہِ تہٕ عددُک، تیلہٕ پَزِ یہٕ فَنکشن -1 رُجُوع کَرُن۔//ساروی کھوتہٕ بوڑ even عدد چُھ عدد یوس [x، y] کہِ رینجس منز چُھ، اگر //یہٕ فنکشن چُھ زٕ مثبت نمبر x تہٕ y نوان تہٕ چُھ ٕ پیٹھہٕ رٹان// >>> choose_num(12, 15)
// 14
// >>> choose_num(13, 12)
// -1
function choose_num(x: number, y: number): number {
","function choose_num(x: number, y: number): number {
    // Ensure x is less than or equal to y for proper range searching
    if (x > y) {
        [x, y] = [y, x];
    }
    
    // Start looking from the upper bound of the range
    for (let i = y; i >= x; i--) {
        if (i % 2 === 0) {
            return i;
        }
    }
    
    // If no even number is found in the range
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = choose_num;
  assert.deepEqual(candidate(12, 15),14);
  assert.deepEqual(candidate(13, 12),-1);
  assert.deepEqual(candidate(33, 12354),12354);
  assert.deepEqual(candidate(5234, 5233),-1);
  assert.deepEqual(candidate(6, 29),28);
  assert.deepEqual(candidate(27, 10),-1);
  assert.deepEqual(candidate(7, 7),-1);
  assert.deepEqual(candidate(546, 546),546);
}

test();"
HumanEval_103,kas_Arab,ts,"//مثال: ٕ//اگر n چُھ m کھوتہٕ زیادٕ، تیلہٕ -1 چُھ واپس یوان۔//جوابس پُورٕ عدد کِس طورس پیٹھ قریبی نمبرس پیٹھ کرو گول تہٕ ایمِچ تبدیلی بائنری نمبرس منز کٔرِو۔//n پیٹھہٕ m تام عددچ اوسط (n تہٕ m شٲمل) ۔//توہہٕ چِھ زٕ مثبت عدد n تہٕ m دنہٕ آمت، تہٕ توہہٕ چِھ یہٕ کٔرمُت کہ// >>> rounded_avg(1, 5)
// ""0b11""
// >>> rounded_avg(7, 5)
// -1
// >>> rounded_avg(10, 20)
// ""0b1111""
// >>> rounded_avg(20, 33)
// ""0b11010""
function rounded_avg(n: number, m: number): string | number {
","function rounded_avg(n: number, m: number): string | number {
    if (n > m) {
        return -1;
    }

    const count = m - n + 1;
    let sum = 0;
    
    for (let i = n; i <= m; i++) {
        sum += i;
    }

    const avg = sum / count;
    const roundedAvg = Math.round(avg);
    return ""0b"" + roundedAvg.toString(2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = rounded_avg;
  assert.deepEqual(candidate(1, 5),""0b11"");
  assert.deepEqual(candidate(7, 13),""0b1010"");
  assert.deepEqual(candidate(964, 977),""0b1111001010"");
  assert.deepEqual(candidate(996, 997),""0b1111100100"");
  assert.deepEqual(candidate(560, 851),""0b1011000010"");
  assert.deepEqual(candidate(185, 546),""0b101101110"");
  assert.deepEqual(candidate(362, 496),""0b110101101"");
  assert.deepEqual(candidate(350, 902),""0b1001110010"");
  assert.deepEqual(candidate(197, 233),""0b11010111"");
  assert.deepEqual(candidate(7, 5),-1);
  assert.deepEqual(candidate(5, 1),-1);
  assert.deepEqual(candidate(5, 5),""0b101"");
}

test();"
HumanEval_104,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //نوٹ: لوٗٹمٕژ صفہٕ گژھہٕ بڑنس ترتیبس منٛز ترتیب دنہٕ ین۔//تمن عنصرن منز چُھ نہٕ کنٛہہ تہٕ جڑ عدد۔//مثبت عدد x ہنز اکھ صف دتھ، تمام اعدادٕچ ترتیب شدہ صف چِھ واپس کران۔// >>> unique_digits([15, 33, 1422, 1])
// [1, 15, 33]
// >>> unique_digits([152, 323, 1422, 10])
// []
function unique_digits(x: number[]): number[] {
","function unique_digits(x: number[]): number[] {
    // Helper function to check if a number has any even digit
    const hasEvenDigit = (num: number): boolean => {
        while (num > 0) {
            const digit = num % 10;
            if (digit % 2 === 0) return true;
            num = Math.floor(num / 10);
        }
        return false;
    };

    // Filter out numbers without even digits and sort them
    return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);
}

// Example usage:
console.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]
console.log(unique_digits([152, 323, 1422, 10])); // []","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = unique_digits;
  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);
  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);
  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);
  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);
}

test();"
HumanEval_105,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //""اکھ""، ""دو""، ""تین""، ""چور""، ""پانچ""، ""چھ،"" ""سات""، ""آٹھ،"" ""نِہٕ""۔//نتیجُک صف چُھ الٹہٕ یوان، تہٕ پَتہٕ پرتھ ہندسک چُھ امہٕ کس مُطابق ناوس سۭتۍ تبدیل یوان کرنہٕ۔//انٹیجرزن ہند اکھ صف دینہٕ خٲطرٕہ، 1 پیٹھہٕ 9 تام، انٹیجرزن چُھ ترتیب دینہٕ یوان،// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
// [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
// If the array is empty, return an empty array:
// >>> by_length([])
// []
// If the array has any strange number ignore it:
// >>> by_length([1, -1, 55])
// [""One""]
function by_length(arr: number[]): string[] {
","function by_length(arr: number[]): string[] {
    const numberNames: { [key: number]: string } = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    };

    return arr
        .filter(num => num >= 1 && num <= 9)
        .sort((a, b) => b - a)
        .map(num => numberNames[num]);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = by_length;
  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -1, 55]),[""One""]);
  assert.deepEqual(candidate([1, -1, 3, 2]),[""Three"", ""Two"", ""One""]);
  assert.deepEqual(candidate([9, 4, 8]),[""Nine"", ""Eight"", ""Four""]);
}

test();"
HumanEval_106,kas_Arab,ts,"//مثال: ٕ//i ہنز فاکٹیوریل چُھ 1 پیٹھ i تام اعدادن ہند ضرب (1 * 2 * ... * i) ۔//i چُھ 1 پونژمُت۔//یا نمبرن ہندس مجموعس 1 پیٹھہٕ i تام۔ //تہٕ سائز n ہنز اکھ صف چِھ واپس کران، یتھکن کہ انڈیکس i پیٹھ عنصرچ قدر i یچ فریکٹریئل چِھ اگر i چُھ برابر۔//فنکشن f یُس n بطور پیرامیٹر چُھ تھاوان، چُھ لاگو کران۔// >>> f(5)
// [1, 2, 6, 24, 15]
function f(n: number): number[] {
","function f(n: number): number[] {
    const result: number[] = [];
    for (let i = 1; i <= n; i++) {
        if (i % 2 === 0) {
            // Calculate factorial for even i
            let factorial = 1;
            for (let j = 1; j <= i; j++) {
                factorial *= j;
            }
            result.push(factorial);
        } else {
            // Calculate sum for odd i
            let sum = 0;
            for (let j = 1; j <= i; j++) {
                sum += j;
            }
            result.push(sum);
        }
    }
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = f;
  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);
  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);
  assert.deepEqual(candidate(1),[1]);
  assert.deepEqual(candidate(3),[1, 2, 6]);
}

test();"
HumanEval_107,kas_Arab,ts,"//مثالہٕ 1: //انٹیجر پالنڈروم یم حد کہ اندر چِھ پکان ((1، n) ، بشمول۔ //اکھ مثبت عدد n دینہٕ آمت، اکھ صف ییتھ منٛز پرٛیٚتھ تہٕ عجیب نمبرن ہٕنٛز تعداد آسہٕ // >>> even_odd_palindrome(3)
// [1, 2]
// Explanation:
// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
// Example 2:
// >>> even_odd_palindrome(12)
// [4, 6]
// Explanation:
// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
// Note:
// 1. 1 <= n <= 10^3
// 2. returned array has the number of even and odd integer palindromes respectively.
function even_odd_palindrome(n: number): [number, number] {
","function isPalindrome(num: number): boolean {
    const str = num.toString();
    return str === str.split('').reverse().join('');
}

function even_odd_palindrome(n: number): [number, number] {
    let evenCount = 0;
    let oddCount = 0;

    for (let i = 1; i <= n; i++) {
        if (isPalindrome(i)) {
            if (i % 2 === 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_palindrome;
  assert.deepEqual(candidate(123),[8, 13]);
  assert.deepEqual(candidate(12),[4, 6]);
  assert.deepEqual(candidate(3),[1, 2]);
  assert.deepEqual(candidate(63),[6, 8]);
  assert.deepEqual(candidate(25),[5, 6]);
  assert.deepEqual(candidate(19),[4, 6]);
  assert.deepEqual(candidate(9),[4, 5]);
  assert.deepEqual(candidate(1),[0, 1]);
}

test();"
HumanEval_108,kas_Arab,ts,"//مثلن، -123 چُھ ہندسہ -1, 2، تہٕ 3 پیٹھ ساین آمُت کرنہٕ۔ //اگر اکھ عدد چُھ منفی، تیلہٕ چُھ امک گوڑنیک نشان زد ہندسہٕ منفی:۔//عناصرن ہٕنٛز تعداد یمکۍ ہندسن ہٕنٛد مجموعہ چھ > 0۔//اکھ فنکشن لکھو count_nums یُس انٹیجرزن ہنز اکھ صف چُھ نوان تہٕ واپسی چُھ کران۔// >>> count_nums([])
// 0
// >>> count_nums([-1, 11, -11])
// 1
// >>> count_nums([1, 1, 2])
// 3
function count_nums(arr: number[]): number {
","function count_nums(arr: number[]): number {
    function sumOfDigits(num: number): number {
        let sum = 0;
        let str = num.toString();
        for (let i = 0; i < str.length; i++) {
            let digit = parseInt(str[i]);
            if (i === 0 && str[i] === '-') {
                digit = -parseInt(str[i+1]);
                i++;
            }
            sum += digit;
        }
        return sum;
    }

    let count = 0;
    for (const num of arr) {
        if (sumOfDigits(num) > 0) {
            count++;
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = count_nums;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([-1, -2, 0]),0);
  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);
  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);
  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);
  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);
  assert.deepEqual(candidate([0, 1]),1);
  assert.deepEqual(candidate([1]),1);
}

test();"
HumanEval_109,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //نوٹ: دِنہٕ آمتِس صفس منز چُھ یقینی طورس پیٹھ منفرد عناصر آسان۔//اگر دِنہٕ آمُت صف چُھ خٲلی تیلہٕ چُھ صحیح واپس گژھان۔//تہٕ پتہٕ صحیح ووٹ ترٛٲوِو یا غلط ووٹ ترٛٲوِو۔//اگر ییہٕ ہیر کٔنٛہ آپریشن کرنہٕ سۭتۍ ترتیب شدٕ صف حٲصل کرن چُھ ممکن۔//صفس منز چُھ شروعٲتی پوزیشن یعنی صفر انڈیکس۔//صفُک ٲخری عنصر چُھ  منتقل گژھان۔//اکھ دٲیِم شفٹ آپریشن چُھ امریچ تمام عناصرن اکھ وٕن منتقل کرنُک مطلب۔//توہیہ چِھہ یمہٕ ویزِہک کینٛہہ بار یمہٕ پیٹھہٕ توہیہ چِھ ییہٕ کرنہٕ۔ //دِنہٕ آمتِس صفس پیٹھ چُھ درج ذیل عمل: //یہٕ چُھ ممکن زِ  کرِتھ گژھِ اکھ سرنی غٲر گھٹَن واجین ترتیبس منز ترتیب دِنہٕ یِن۔//صفس منز نمبرن ہند ترتیب گژھہِ تصادفی طورس پیٹھ۔ تہندِ کامہٕ چُھ یہٕ زِ اگر//اسہٕ چِھ N عددن ہنز اکھ صف 'arr'، arr[1]، arr[2]، ..., arr[N]۔// >>> move_one_ball([3, 4, 5, 1, 2])
// true
// Explanation: By performin 2 right shift operations, non-decreasing order can
// be achieved for the given array.
// >>> move_one_ball([3, 5, 4, 1, 2])
// false
// Explanation:It is not possible to get non-decreasing order for the given
// array by performing any number of right shift operations.
function move_one_ball(arr: number[]): boolean {
","function move_one_ball(arr: number[]): boolean {
    if (arr.length === 0) return true;

    let countDecreases = 0;
    const n = arr.length;

    for (let i = 0; i < n; i++) {
        if (arr[i] > arr[(i + 1) % n]) {
            countDecreases++;
        }
        if (countDecreases > 1) {
            return false;
        }
    }

    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = move_one_ball;
  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);
  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);
  assert.deepEqual(candidate([4, 3, 1, 2]),false);
  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);
  assert.deepEqual(candidate([]),true);
}

test();"
HumanEval_110,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //ورنہِ، ""NO"" واپس آسہِ۔//lst1 کہِ تمام عناصرن ہند ہندسہٕ چُھ جُڑٕ، توٲی چُھ جواب ""1""YES""2""۔//اگر LST1 تہٕ LST2 کہِ درمیان چُھ ایلیمنٹس کہِ تبادلہٕ ممکن۔//۔lst1 تہٕ lst2 کہِ درمیان چُھ نہٕ تبادلہٕ شُدہ عناصرن ہنز تعدادس پیٹھ کانٛہہ حد۔//تمن درمیان چُھ صرف even نمبرن ہنز اکھ صف بناون۔//تہٕ یہٕ چُھ امہٕ کتھہٕ ہیند تعین کران زِ کیا عناصرن ہند تبادلہٕ کرن چُھ ممکن۔//اتھ مسلس منز، کرِو توہہ اکھ فنکشن لاگو یوس نمبرن ہند زٕ صفہٕ لیوکھ، // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])
// ""YES""
// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])
// ""NO""
// It is assumed that the input arrays will be non-empty.
function exchange(lst1: number[], lst2: number[]): string {
","function exchange(lst1: number[], lst2: number[]): string {
    const isEven = (num: number) => num % 2 === 0;
    
    // Count the odd numbers in lst1
    const oddCountInLst1 = lst1.reduce((count, num) => count + (isEven(num) ? 0 : 1), 0);

    // Count the even numbers in lst2
    const evenCountInLst2 = lst2.reduce((count, num) => count + (isEven(num) ? 1 : 0), 0);

    // Check if number of odd numbers in lst1 can be matched by even numbers in lst2
    return oddCountInLst1 <= evenCountInLst2 ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = exchange;
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),""YES"");
  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),""NO"");
  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),""YES"");
  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),""NO"");
  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),""NO"");
  assert.deepEqual(candidate([100, 200], [200, 200]),""YES"");
}

test();"
HumanEval_111,kas_Arab,ts,"//مثال: ٕ//اگر واریاہ حرفی اکھ ہیوٚت، تہٕ تم چِھ تمام لوٗکھہٕ واپس کرنہٕ ین۔//خطُک یُس زیادٕہ تکرار گژھُن چُھ تہٕ اتھ متعلق چُھ شمار گژھان۔//اکھ سٹرنگ دیتھ یس اکھ اسپیس سیپیرایٹڈ لوکلسٹ حروفچ نمائندگی کران چھ، اکھ آبجیکٹ چُھ واپس کران۔// >>> histogram(""a b c"")
// {""a"": 1, ""b"": 1, ""c"": 1}
// >>> histogram(""a b b a"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""a b c a b"")
// {""a"": 2, ""b"": 2}
// >>> histogram(""b b b b a"")
// {""b"": 4}
// >>> histogram("""")
// {}
function histogram(test: string): {[key: string]: number} {
","function histogram(test: string): { [key: string]: number } {
    if (test.trim() === """") {
        return {};
    }

    const letters = test.split("" "");
    const counts: { [key: string]: number } = {};

    for (const letter of letters) {
        if (letter in counts) {
            counts[letter]++;
        } else {
            counts[letter] = 1;
        }
    }

    let maxCount = 0;
    for (const count of Object.values(counts)) {
        if (count > maxCount) {
            maxCount = count;
        }
    }

    const result: { [key: string]: number } = {};
    for (const [letter, count] of Object.entries(counts)) {
        if (count === maxCount) {
            result[letter] = count;
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = histogram;
  assert.deepEqual(candidate(""a b b a""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c a b""),{""a"": 2, ""b"": 2});
  assert.deepEqual(candidate(""a b c d g""),{""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""b b b b a""),{""b"": 4});
  assert.deepEqual(candidate(""r t g""),{""r"": 1, ""t"": 1, ""g"": 1});
  assert.deepEqual(candidate(""""),{});
  assert.deepEqual(candidate(""a""),{""a"": 1});
}

test();"
HumanEval_112,kas_Arab,ts,"//مثالہٕ //توہیہ پزِ اکھ صف رٹرن یتھ منز نتیجس ہنز سٹرنگ تہٕ true/false چِھ چیک کرنہٕ خٲطرٕہ۔//اکھ سٹرنگ چِھ پالنڈروم وننہٕ یوان اگر سُہٕ پَتہٕ پَتہٕ چُھ ہُنٛد پأٹھۍ۔//توٚتام چیک کرو ز اگر نٔتیٖجہٕ سٹرنگ چھ پالینڈروم۔//توہہِ چھِو دِوان زٕ سٹرنگس s تہٕ c، توہہِ چھُہ s منز موجود تمام حروف ہٹاونہٕ یُن یُس c منز کُنہِ تہٕ حروفس برابر چُھ۔//ٹاسک // >>> reverse_delete(""abcde"", ""ae"")
// [""bcd"", false]
// >>> reverse_delete(""abcdef"", ""b"")
// [""acdef"", false]
// >>> reverse_delete(""abcdedcba"", ""ab"")
// [""cdedc"", true]
function reverse_delete(s: string, c: string): [string, boolean] {
","function reverse_delete(s: string, c: string): [string, boolean] {
    // Create a Set of characters to delete for faster lookup
    const charsToDelete = new Set(c);

    // Filter out characters in 's' that are in 'c'
    const filteredString = s.split('').filter(char => !charsToDelete.has(char)).join('');

    // Check if the filtered string is a palindrome
    const isPalindrome = filteredString === filteredString.split('').reverse().join('');

    return [filteredString, isPalindrome];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = reverse_delete;
  assert.deepEqual(candidate(""abcde"", ""ae""),[""bcd"", false]);
  assert.deepEqual(candidate(""abcdef"", ""b""),[""acdef"", false]);
  assert.deepEqual(candidate(""abcdedcba"", ""ab""),[""cdedc"", true]);
  assert.deepEqual(candidate(""dwik"", ""w""),[""dik"", false]);
  assert.deepEqual(candidate(""a"", ""a""),["""", true]);
  assert.deepEqual(candidate(""abcdedcba"", """"),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""abcdedcba"", ""v""),[""abcdedcba"", true]);
  assert.deepEqual(candidate(""vabba"", ""v""),[""abba"", true]);
  assert.deepEqual(candidate(""mamma"", ""mia""),["""", true]);
}

test();"
HumanEval_113,kas_Arab,ts,"//ان پٹ کہِ i'th سٹرنگس منز چِھ عجیب ہندسن ہند تعداد۔//ان پٹچ سٹرنگ i۔"" یتہِ تمام i گژھہِ ہندسہٕ سۭتۍ تبدیل گژھُن //آؤٹ پٹ کس ہر اکس عنصرس منٛز گژھہٕ ""  منٛز عجیب عناصرن ہنٛز تعداد"" آسن۔//تارن ہند اکھ صف دتھ، یتہِ پرتھ تارس منز صرف ہندسہٕ آسان چِھ، اکھ صف چِھ واپس کران۔// >>> odd_count([""1234567""])
// [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
// >>> odd_count([""3"", ""11111111""])
// [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
function odd_count(lst: string[]): string[] {
","function odd_count(lst: string[]): string[] {
    return lst.map(str => {
        // Count the number of odd digits in the string
        let oddCount = Array.from(str).reduce((count, char) => {
            let digit = parseInt(char, 10);
            return digit % 2 !== 0 ? count + 1 : count;
        }, 0);

        // Construct the result string
        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = odd_count;
  assert.deepEqual(candidate([""1234567""]),[""the number of odd elements 4n the str4ng 4 of the 4nput.""]);
  assert.deepEqual(candidate([""3"", ""11111111""]),[""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]);
  assert.deepEqual(candidate([""271"", ""137"", ""314""]),[""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]);
}

test();"
HumanEval_114,kas_Arab,ts,"//مثالہٕ //تعداد کس کس//انٹیجرز اینومرک اکھ سرنی دِنہٕ آمژ، کنہٕ تہٕ غٲر خٲلی ذیلی سرنی ہنٛد کم کھوتہٕ کم مجموعہٕ ژھانٛڈٕو۔// >>> minSubArraySum([2, 3, 4, 1, 2, 4])
// 1
// >>> minSubArraySum([-1, -2, -3])
// -6
function minSubArraySum(nums: number[]): number {
","function minSubArraySum(nums: number[]): number {
    let minSum = nums[0];
    let currentSum = nums[0];
    
    for (let i = 1; i < nums.length; i++) {
        currentSum = Math.min(nums[i], currentSum + nums[i]);
        minSum = Math.min(minSum, currentSum);
    }
    
    return minSum;
}

// Example usage:
// console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1
// console.log(minSubArraySum([-1, -2, -3])); // Output: -6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minSubArraySum;
  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);
  assert.deepEqual(candidate([-1, -2, -3]),-6);
  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);
  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);
  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);
  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);
  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);
  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);
  assert.deepEqual(candidate([-10]),-10);
  assert.deepEqual(candidate([7]),7);
  assert.deepEqual(candidate([1, -1]),-1);
}

test();"
HumanEval_115,kas_Arab,ts,"//مثالہٕ 1: //کُنہِ وقتہٕ ییہٕ ڈبۍ کھسان، توہیہ چِھہ یہٕ وٕنہِ برونہہ کنہِ لگان۔//توہہ ہکو بَحَژ کَرنہٕ باپَتھ بَہَژ ہُند استعمال کَرُن۔//تہٕ تمام باکٹ چھِ اکس جیسی آسان۔//ہر کنوئہس چِھ اکھ مساوی بالٹی آسان یمہٕ سۭتۍ امس پیٹھ آب ننہٕ خاطرٕ استعمال ہیکو کرتھ، //تہٕ پرتھ 1ٕکۍ پٲٹھۍ چُھ آبچ اکھ اکائی نمٲئندگی کران۔//توہہ چھہِ سیوٚد کُلۍ کِس بِلِٹہِ ہند اکھ مربع جال دوان۔ پریتھ صفہٕ چھیہ اکس بِلِٹہِ ہنز نمائندگی کران۔// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
// 6
// Example 2:
// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
// 5
// Example 3:
// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)
// 0
// Constraints:
// * all wells have the same length
// * 1 <= grid.length <= 10^2
// * 1 <= grid[:,1].length <= 10^2
// * grid[i][j] -> 0 | 1
// * 1 <= capacity <= 10
function max_fill(grid: number[][], capacity: number): number {
","function max_fill(grid: number[][], capacity: number): number {
    let totalBuckets = 0;

    for (let row of grid) {
        let waterUnits = row.reduce((sum, cell) => sum + cell, 0);
        totalBuckets += Math.ceil(waterUnits / capacity);
    }

    return totalBuckets;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = max_fill;
  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);
  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);
  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);
  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);
}

test();"
HumanEval_116,kas_Arab,ts,"//یہٕ چُھ اتھ پأنٹھ لاگو گژھن://یکھ تعداد یکھ، اعشاریہ قدرس پیٹھ مبنی چِھ ترتیب دینہٕ یوان۔//یمن ہندس بائنری نمائندگی منز چِھ ونن والین ہند تعداد بڑھینس ترتیبس منز۔//اتھ کٹاہس منز چُھ، توہیہ چُھ اکھ غٲر منفی عددن ہنز ترتیب ٕچِھتھ// >>> sort_array([1, 5, 2, 3, 4])
// [1, 2, 3, 4, 5]
// >>> sort_array([-2, -3, -4, -5, -6])
// [-6, -5, -4, -3, -2]
// >>> sort_array([1, 0, 2, 3, 4])
// [0, 1, 2, 3, 4]
function sort_array(arr: number[]): number[] {
","function sort_array(arr: number[]): number[] {
    return arr.sort((a, b) => {
        const countOnes = (n: number) => n.toString(2).replace(/0/g, """").length;
        const numOnesA = countOnes(a);
        const numOnesB = countOnes(b);

        if (numOnesA !== numOnesB) {
            return numOnesA - numOnesB;
        } else {
            return a - b;
        }
    });
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sort_array;
  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);
  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);
  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);
  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);
}

test();"
HumanEval_117,kas_Arab,ts,"//مثالہٕ: //نوٹ: توہیہ ہیکہِ یہٕ فرض کٔرِتھ زِ ان پٹ سٹرنگ منز چِھ صرف لیٹرز تہٕ اسپیسز۔//اگر سٹرنگ s چُھ خٲلی تیلہٕ گژھہٕ فنکشن اکھ خٲلی صف واپس کرُن۔ //n ہم آہنگی، ترتیب سۭتۍ یم لفظ چِھ سٹرنگ s منٛز ظأہر گژان۔ //اکھ فنکشن یُس سٹرنگ s پیٹھ تمام لفظن ہنز اکھ صف چُھ واپس کران ییتھ منٛز بالکل  چُھ آسان۔//اکھ سٹرنگ s تہٕ اکھ نیچرل نمبر n دنہٕ آمت، توہی چِھ آمت پرفارم کرنہٕ // >>> select_words(""Mary had a little lamb"", 4)
// [""little""]
// >>> select_words(""Mary had a little lamb"", 3)
// [""Mary"", ""lamb""]
// >>> select_words(""simple white space"", 2)
// []
// >>> select_words(""Hello world"", 4)
// [""world""]
// >>> select_words(""Uncle sam"", 3)
// [""Uncle""]
function select_words(s: string, n: number): string[] {
","function select_words(s: string, n: number): string[] {
    const isConsonant = (char: string): boolean => {
        const vowels = 'aeiouAEIOU';
        return !vowels.includes(char) && /[a-zA-Z]/.test(char);
    };

    const words = s.split(' ');
    const result: string[] = [];

    for (const word of words) {
        const consonantCount = [...word].filter(isConsonant).length;
        if (consonantCount === n) {
            result.push(word);
        }
    }

    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = select_words;
  assert.deepEqual(candidate(""Mary had a little lamb"", 4),[""little""]);
  assert.deepEqual(candidate(""Mary had a little lamb"", 3),[""Mary"", ""lamb""]);
  assert.deepEqual(candidate(""simple white space"", 2),[]);
  assert.deepEqual(candidate(""Hello world"", 4),[""world""]);
  assert.deepEqual(candidate(""Uncle sam"", 3),[""Uncle""]);
  assert.deepEqual(candidate("""", 4),[]);
  assert.deepEqual(candidate(""a b c d e f"", 1),[""b"", ""c"", ""d"", ""f""]);
}

test();"
HumanEval_118,kas_Arab,ts,"//مثال: ٕ//توہیہ ہیکہِ یہٕ فرض کٔرِتھ زِ اتھ سٹرنگس منز چِھ صرف انگریزی حرف موجود۔//کنہہ تہٕ حرفی یییہٕ وٕچھنہٕ اگر سُہ چُھ مندرجہ بالا شرطس پیٹھ پورا آمُت۔//ابتدٲئی تہٕ ٲخری حرفچ سٹرنگ چھنہٕ شمار گژھان۔ اگر نہٕ آسہٕ تیلہٕ ہاونہٕ وول سٹرنگ پٔدٕ کرُن//لفظس دچھنہٕ طرفہٕ زٕ ہم آہنگی (case sensitive) ۔//توہہ چھہ اکھ لفظ۔ توہہ ہکو ونتھ زِ توہہ چھوہ امہ کس درمیان قریب ترین حرف وون۔// >>> get_closest_vowel(""yogurt"")
// ""u""
// >>> get_closest_vowel(""FULL"")
// ""U""
// >>> get_closest_vowel(""quick"")
// """"
// >>> get_closest_vowel(""ab"")
// """"
function get_closest_vowel(word: string): string {
","function get_closest_vowel(word: string): string {
    const vowels = new Set<string>(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);
    for (let i = word.length - 2; i > 0; i--) {
        if (vowels.has(word[i]) && !vowels.has(word[i - 1]) && !vowels.has(word[i + 1])) {
            return word[i];
        }
    }
    return '';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_closest_vowel;
  assert.deepEqual(candidate(""yogurt""),""u"");
  assert.deepEqual(candidate(""full""),""u"");
  assert.deepEqual(candidate(""easy""),"""");
  assert.deepEqual(candidate(""eAsy""),"""");
  assert.deepEqual(candidate(""ali""),"""");
  assert.deepEqual(candidate(""bad""),""a"");
  assert.deepEqual(candidate(""most""),""o"");
  assert.deepEqual(candidate(""ab""),"""");
  assert.deepEqual(candidate(""ba""),"""");
  assert.deepEqual(candidate(""quick""),"""");
  assert.deepEqual(candidate(""anime""),""i"");
  assert.deepEqual(candidate(""Asia""),"""");
  assert.deepEqual(candidate(""Above""),""o"");
}

test();"
HumanEval_119,kas_Arab,ts,"//مثالہٕ: //اگر اکھ اصل تار بناونک طریقہٕ آسہٕ، تہٕ 'ہاں' واپس ییہٕ دنہٕ، تہٕ بصورت دیگر 'نہٕ'۔//""())"" چُھ نہٕ۔ //توازن چُھ تھاوان۔ مثلن: تار '(((() ' چُھ اصل، ییلہِ زَن کہِ تار //اکھ سٹرنگ S چِھ صٔحی ماننہٕ یوان اگر تہٕ صرف اگر S یچ تمام قوسین //کنہہ ترتیب، کہ نتیجہٕ سٹرنگ گژھٕ اصل۔ //توہہٕ ہکو یہٕ چیک کرتھ زِ کیا یہٕ ممکن چُھ زِ دۄن تارن چُھ اکس بیکس سۭتۍ جوڑنہٕ یُن۔//صرف parentheses ""("" یا parentheses "") "" پیٹھ۔//توہہ چھہ دۅن تارن ہند اکھ صف دوان، دۅن تارن منز چھہ اوپن  کھلہٕ// >>> match_parens([""()("", "")""])
// ""Yes""
// >>> match_parens(["")"", "")""])
// ""No""
function match_parens(lst: string[]): string {
","function match_parens(lst: string[]): string {
    const canFormGoodString = (s1: string, s2: string): boolean => {
        let balance = 0;

        // Check s1 followed by s2
        for (const char of s1 + s2) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }
        if (balance === 0) return true; // Balanced

        balance = 0;
        // Check s2 followed by s1
        for (const char of s2 + s1) {
            if (char === '(') balance++;
            else if (char === ')') balance--;

            if (balance < 0) return false; // More closing than opening
        }

        return balance === 0; // Balanced
    };

    return canFormGoodString(lst[0], lst[1]) ? 'Yes' : 'No';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = match_parens;
  assert.deepEqual(candidate([""()("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", "")""]),""No"");
  assert.deepEqual(candidate([""(()(())"", ""())())""]),""No"");
  assert.deepEqual(candidate(["")())"", ""(()()(""]),""Yes"");
  assert.deepEqual(candidate([""(())))"", ""(()())((""]),""Yes"");
  assert.deepEqual(candidate([""()"", ""())""]),""No"");
  assert.deepEqual(candidate([""(()("", ""()))()""]),""Yes"");
  assert.deepEqual(candidate([""(((("", ""((())""]),""No"");
  assert.deepEqual(candidate(["")(()"", ""(()(""]),""No"");
  assert.deepEqual(candidate(["")("", "")(""]),""No"");
  assert.deepEqual(candidate([""("", "")""]),""Yes"");
  assert.deepEqual(candidate(["")"", ""(""]),""Yes"");
}

test();"
HumanEval_120,kas_Arab,ts,"//مثالہٕ 1: //آر آرس منٛز زیٹھۍ کِس تعدادس سۭتۍ زیٹھۍ لمبائی k۔//انٹیجرزن ہنز اکھ صف arr تہٕ اکھ مثبت عدد k دنہٕ آمت، چُھ اکھ ترتیب شدہ صف واپس کران // >>> maximum([-3, -4, 5], 3)
// [-4, -3, 5]
// Example 2:
// >>> maximum([4, -4, 4], 2)
// [4, 4]
// Example 3:
// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)
// [2]
// Note:
// 1. The length of the array will be in the range of [1, 1000].
// 2. The elements in the array will be in the range of [-1000, 1000].
// 3. 0 <= k <= len(arr)
function maximum(arr: number[], k: number): number[] {
","function maximum(arr: number[], k: number): number[] {
    // Sort the array in descending order and then take the first k elements
    const sortedArr = arr.sort((a, b) => b - a);
    return sortedArr.slice(0, k).sort((a, b) => a - b);
}

// Example usage:
// console.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]
// console.log(maximum([4, -4, 4], 2)); // Output: [4, 4]
// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = maximum;
  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);
  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);
  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);
  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);
  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);
  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);
  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);
  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);
  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);
  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);
  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);
}

test();"
HumanEval_121,kas_Arab,ts,"//مثالہٕ //انٹیجرزن ہنز اکھ غٲر خٲلی صف دِنہٕ آمٕژ، تمام عجیب عناصرن ہند مجموعہ چُھ واپس کران یم برابر پوزیشنن پیٹھ چِھ۔// >>> solution([5, 8, 7, 1])
// 12
// >>> solution([3, 3, 3, 3, 3])
// 9
// >>> solution([30, 13, 24, 321])
// 0
function solution(lst: number[]): number {
","function solution(lst: number[]): number {
    let sum: number = 0;
    for (let i = 0; i < lst.length; i += 2) {  // Traverse even indices
        if (lst[i] % 2 !== 0) {  // Check if the element is odd
            sum += lst[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solution;
  assert.deepEqual(candidate([5, 8, 7, 1]),12);
  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);
  assert.deepEqual(candidate([30, 13, 24, 321]),0);
  assert.deepEqual(candidate([5, 9]),5);
  assert.deepEqual(candidate([2, 4, 8]),0);
  assert.deepEqual(candidate([30, 13, 23, 32]),23);
  assert.deepEqual(candidate([3, 13, 2, 9]),3);
}

test();"
HumanEval_122,kas_Arab,ts,"//مثال: ٕ//آر آر کیٛن گوڑنکیٚن کِلین ہنٛدس k عنصرن منٛز چھ زیٛادٕ تر دۄن ہندسن ہٕنٛدس مجموعس سۭتۍ تعلق تھاوان۔//آر آر تہٕ اکھ انٹیجر k، کیٛن غٲر خالی صفن دیتھ، واپسی // >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
// 24
// Constraints:
// 1. 1 <= len(arr) <= 100
// 2. 1 <= k <= len(arr)
function add_elements(arr: number[], k: number): number {
","function add_elements(arr: number[], k: number): number {
    let sum = 0;
    for (let i = 0; i < k; i++) {
        if (arr[i] >= -99 && arr[i] <= 99) {
            sum += arr[i];
        }
    }
    return sum;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = add_elements;
  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);
  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);
  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);
  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);
  assert.deepEqual(candidate([1], 1),1);
}

test();"
HumanEval_123,kas_Arab,ts,"//get_odd_collatz(5) چُھ [1, 5] واپس کران۔ # 5 کِس collatz ترتیبس چُھ [5, 16, 8, 4, 2, 1] ، لہذا عجیب نمبر چِھ صرف 1، تہٕ 5۔//مثالہٕ پٲٹھۍ: //2. وٲرِتھ نِش ترتیب دِنہٕ آمُت صفہٕ بڑانہٕ خٲطرٕہ۔//1۔ کولاٹز (۱) چُھ [1]۔//نوٹ: ٕ//اصطلاحس علاوہ 1۔ قیاس چُھ یہٕ زِ n کہ کُنہٕ تہٕ قدرٕ کہ لحاظٕ، ترتیب چِھ ہمیشہ 1 تام واتان۔ //اگر پٔتِمہِ اصطلاحچ قدر چھِ عجیب، تہٕ بییہِ چھِ اصطلاحچ قدر 3 لٹہِ زیادٕ۔//سابقہ اصطلاح چِھ یتھہٕ پأٹھۍ: اگر سابقہ اصطلاح چِھ یکساں، تیلہٕ چِھ دیمہٕ اصطلاح ٕچ اکھ نصف۔//یتھ کٔنۍ چھ: کانٛہہ تہٕ مثبت عدد n سۭتۍ شروع کرن۔ پتہٕ چھ پرتھ اصطلاحس  سۭتۍ حٲصل یوان کرنہٕ۔//کولٹز قیاس چُھ ریاضی منٛز اکھ قیاس یُس اکھ ترتیب سۭتۍ متعلق چُھ۔//اکھ مثبت عدد n دینہٕ آمت، چُھ اکھ ترتیب شدہ صف واپس کران یتھ منٛز کولیٹز ترتیبس منٛز عجیب نمبر چِھ۔ // >>> get_odd_collatz(5)
// [1, 5]
function get_odd_collatz(n: number): number[] {
","function get_odd_collatz(n: number): number[] {
    const collatzSequence: number[] = [];
    while (n !== 1) {
        if (n % 2 !== 0) {
            collatzSequence.push(n);
        }
        if (n % 2 === 0) {
            n = n / 2;
        } else {
            n = 3 * n + 1;
        }
    }
    // Include 1 in the sequence if it's odd, as per standard collatz sequence
    collatzSequence.push(1);
    return collatzSequence.sort((a, b) => a - b);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_odd_collatz;
  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);
  assert.deepEqual(candidate(5),[1, 5]);
  assert.deepEqual(candidate(12),[1, 3, 5]);
  assert.deepEqual(candidate(1),[1]);
}

test();"
HumanEval_124,kas_Arab,ts,"//4. تاریخ ہیکہِ ایم ایم ڈی ڈی ی ی ی ی شکلہِ منز آستھ//3۔ مہینہ گژھہِ نہ 1 کھوتہٕ کم تہٕ نہ 12 کھوتہٕ زیادٕہ آسان ۔//مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕ رٕتھ، مہٕتٕ رٕتھ، مہٕتٕتھ، مہٕ رٕتھ، مہٕتٕتٕتٕ، مہٕ، مہٕ رٕتٕتٕتٕ، مہٕ، مہٕتٕ، مہٕ، مہٕ//1. ڈیٹ سٹرنگ چُھ نہٕ خٲلی۔ //ییلہِ تمام درجِ ذیل قواعد پورٕ گژھہِ تیلہِ چُھ تاریخ درست: //اگر یِہ چُھ درست تیلہٕ چُھ درست واپس گژھان۔ بیترِ ییہٕ غلط لیکھتھ۔//توہیہ چھیہ اکھ فنکشن لیکھان یس دِنہ آمژہ ڈیٹ سٹرنگ تہ // >>> valid_date(""03-11-2000"")
// true
// >>> valid_date(""15-01-2012"")
// false
// >>> valid_date(""04-0-2040"")
// false
// >>> valid_date(""06-04-2020"")
// true
// >>> valid_date(""06/04/2020"")
// false
function valid_date(date: string): boolean {
","function valid_date(date: string): boolean {
    // Check if the date is empty
    if (date.trim() === """") return false;

    // Split the date string into components
    const dateParts = date.split(""-"");
    if (dateParts.length !== 3) return false;

    const [monthStr, dayStr, yearStr] = dateParts;

    // Validate each part of the date
    const month = parseInt(monthStr, 10);
    const day = parseInt(dayStr, 10);
    const year = parseInt(yearStr, 10);

    // Check if all parts are valid numbers
    if (isNaN(month) || isNaN(day) || isNaN(year)) return false;

    // Check the month range
    if (month < 1 || month > 12) return false;

    // Check the day range based on the month
    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {
        if (day < 1 || day > 31) return false;
    } else if ([4, 6, 9, 11].includes(month)) {
        if (day < 1 || day > 30) return false;
    } else if (month === 2) {
        if (day < 1 || day > 29) return false;
    }

    // All checks passed
    return true;
}

// Example usage
console.log(valid_date(""03-11-2000"")); // true
console.log(valid_date(""15-01-2012"")); // false
console.log(valid_date(""04-0-2040""));  // false
console.log(valid_date(""06-04-2020"")); // true
console.log(valid_date(""06/04/2020"")); // false","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = valid_date;
  assert.deepEqual(candidate(""03-11-2000""),true);
  assert.deepEqual(candidate(""15-01-2012""),false);
  assert.deepEqual(candidate(""04-0-2040""),false);
  assert.deepEqual(candidate(""06-04-2020""),true);
  assert.deepEqual(candidate(""01-01-2007""),true);
  assert.deepEqual(candidate(""03-32-2011""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""04-31-3000""),false);
  assert.deepEqual(candidate(""06-06-2005""),true);
  assert.deepEqual(candidate(""21-31-2000""),false);
  assert.deepEqual(candidate(""04-12-2003""),true);
  assert.deepEqual(candidate(""04122003""),false);
  assert.deepEqual(candidate(""20030412""),false);
  assert.deepEqual(candidate(""2003-04""),false);
  assert.deepEqual(candidate(""2003-04-12""),false);
  assert.deepEqual(candidate(""04-2003""),false);
}

test();"
HumanEval_125,kas_Arab,ts,"//مثالہٕ //الف بے، آرڈٕ اے) = 0، آرڈٕ بی) = 1، ... آرڈٕ زی) = 25 //اگر کانٛہہ کوما موجود نہٕ آسہٕ، تہٕ توہیہ پزِ کمٕکہٕ ترتیبس سٕتۍ لوئر کیس لیٹرزٕچ تعداد واپس کرُن//لفظن ہند اکھ تار دیتھ، سفید فٲصلس پیٹھ تقسیم گژھن وٲل الفاظن ہنز اکھ صف واپس یوتھ نہٕ سفید فٲصل موجود آسہ متنس منز یوس تُہٕ // >>> split_words(""Hello world!"")
// [""Hello"", ""world!""]
// >>> split_words(""Hello,world!"")
// [""Hello"", ""world!""]
// >>> split_words(""abcdef"")
// 3
function split_words(txt: string): string[] | number {
","function split_words(txt: string): string[] | number {
    if (txt.includes("" "")) {
        return txt.split("" "");
    }
    if (txt.includes("","")) {
        return txt.split("","");
    }
    const oddOrderCount = [...txt].reduce((count, char) => {
        const charCode = char.charCodeAt(0) - 'a'.charCodeAt(0);
        if (char === char.toLowerCase() && charCode % 2 === 1) {
            return count + 1;
        }
        return count;
    }, 0);

    return oddOrderCount;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = split_words;
  assert.deepEqual(candidate(""Hello world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello,world!""),[""Hello"", ""world!""]);
  assert.deepEqual(candidate(""Hello world,!""),[""Hello"", ""world,!""]);
  assert.deepEqual(candidate(""Hello,Hello,world !""),[""Hello,Hello,world"", ""!""]);
  assert.deepEqual(candidate(""abcdef""),3);
  assert.deepEqual(candidate(""aaabb""),2);
  assert.deepEqual(candidate(""aaaBb""),1);
  assert.deepEqual(candidate(""""),0);
}

test();"
HumanEval_126,kas_Arab,ts,"//مثالہٕ //نمبر، غلط واپس ییہٕ دنہٕ۔ منفی نمبرن تہٕ صرف عددن فرض کٔرو۔//اگر صفس منٛز چِھ اَکیٛن کھوتہٕ زیادٕ نقل آسان تیلہٕ چِھ اَکیٛن ہنٛد پأٹھۍ ڈپلیکیٹ آسان۔//اعدادن ہنز اکھ صف دتھ، ییہٕ لوٛب دتھ چاہے تم ترتیب آسہٕ آمت دتمت یا نہٕ۔// >>> is_sorted([5])
// true
// >>> is_sorted([1, 2, 3, 4, 5])
// true
// >>> is_sorted([1, 3, 2, 4, 5])
// false
// >>> is_sorted([1, 2, 3, 4, 5, 6])
// true
// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])
// true
// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])
// false
// >>> is_sorted([1, 2, 2, 3, 3, 4])
// true
// >>> is_sorted([1, 2, 2, 2, 3, 4])
// false
function is_sorted(lst: number[]): boolean {
","function is_sorted(lst: number[]): boolean {
    for (let i = 0; i < lst.length - 1; i++) {
        if (lst[i] > lst[i + 1]) {
            return false;
        }
        if (lst[i] === lst[i + 1]) {
            let count = 1;
            while (lst[i + count] === lst[i]) {
                count++;
                if (count > 2) return false;
            }
        }
    }
    return true;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_sorted;
  assert.deepEqual(candidate([5]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);
  assert.deepEqual(candidate([]),true);
  assert.deepEqual(candidate([1]),true);
  assert.deepEqual(candidate([3, 2, 1]),false);
  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);
  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);
  assert.deepEqual(candidate([1, 2, 3, 4]),true);
}

test();"
HumanEval_127,kas_Arab,ts,"//[input/output] نمونہٕ: //اگر زٕ چِھ نہٕ، توہہٕ چِھ ویلیو ""NO"" واپس کران۔//ورنہِ، وُچھو ""NO""۔//اگر اِنٹرسیکشنٕچ لمبٲے چھےٚ پرائم نمبر، تہٕ کٔرِو ""YES"" واپس۔//یُس 1 چُھ، سُہٕ چُھ نہٕ اکھ بنیٲدی نمبر کینٛہہ۔//مثال، (1، 3) ، (2، 4) کہِ انٹرسِکٹُک چُھ (2، 3) ۔//فاصلہٕ چُھ اکھ بنیٲدی عدد۔//توہہ ہکو ونتھ زِ ییلہِ زٕ ہندس انٹرسٹیشنس لمبائی //پرتھ اکس وقفس خٲطرٕ، چُھ یہٕ فرض یوان کرنہٕ زِ امک آغاز چُھ امک اختتامس برابر یا امہٕ کھوتہٕ کم۔//اتھ منٛز چُھ گۄڈنیُک آغاز تہٕ اختتام دۄشوَنی۔//دِنہٕ آمت وقتا چِھ بند آسان یمیک مطلب چُھ زِ وقتا چُھ (شروع، اختتام)//یتہِ پرتھ انٹیرِل چُھ انٹیجرزن ہند اکھ جوڑٕ۔ مثلن، انٹیرل = (شروع، اختتام) = (1, 2) ۔//توہہ ہکو بَحَژ دوٗر کرتھ، // >>> intersection([1, 2], [2, 3])
// ""NO""
// >>> intersection([-1, 1], [0, 4])
// ""NO""
// >>> intersection([-3, -1], [-5, 5])
// ""YES""
function intersection(interval1: [number, number], interval2: [number, number]): string {
","function isPrime(num: number): boolean {
    if (num <= 1) return false;
    if (num <= 3) return true; // 2 and 3 are prime numbers
    if (num % 2 === 0 || num % 3 === 0) return false;
    for (let i = 5; i * i <= num; i += 6) {
        if (num % i === 0 || num % (i + 2) === 0) return false;
    }
    return true;
}

function intersection(interval1: [number, number], interval2: [number, number]): string {
    const start = Math.max(interval1[0], interval2[0]);
    const end = Math.min(interval1[1], interval2[1]);

    if (start > end) {
        return ""NO"";
    }

    const length = end - start;

    return isPrime(length) ? ""YES"" : ""NO"";
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = intersection;
  assert.deepEqual(candidate([1, 2], [2, 3]),""NO"");
  assert.deepEqual(candidate([-1, 1], [0, 4]),""NO"");
  assert.deepEqual(candidate([-3, -1], [-5, 5]),""YES"");
  assert.deepEqual(candidate([-2, 2], [-4, 0]),""YES"");
  assert.deepEqual(candidate([-11, 2], [-1, -1]),""NO"");
  assert.deepEqual(candidate([1, 2], [3, 5]),""NO"");
  assert.deepEqual(candidate([1, 2], [1, 2]),""NO"");
  assert.deepEqual(candidate([-2, -2], [-3, -2]),""NO"");
}

test();"
HumanEval_128,kas_Arab,ts,"//مثال: ٕ//نوٹ: خالی arr خاطرٕ چُھ return undefined۔//صفس منز چُھ پرتھ عددُک اکھ عدد 1، -1 یا 0 کِس طورس پیٹھ ظٲہر گژھان۔//انٹیجرزن ہندس مقدارن ہند مجموعہ چُھ تمام علامتن ہند پروڈکٹ سۭتۍ ضرب آمُت کرنہٕ۔//توہہ چھیہ پورہ نمبرن ہنز اکھ صف دوان تہٕ توہہ چھیہ واپس ینچ ضرورت۔// >>> prod_signs([1, 2, 2, -4])
// 9
// >>> prod_signs([0, 1])
// 0
// >>> prod_signs([])
// undefined
function prod_signs(arr: number[]): number | undefined {
","function prod_signs(arr: number[]): number | undefined {
    if (arr.length === 0) return undefined;

    let sumOfMagnitudes = 0;
    let productOfSigns = 1;

    for (const num of arr) {
        sumOfMagnitudes += Math.abs(num);
        productOfSigns *= Math.sign(num);
    }

    return sumOfMagnitudes * productOfSigns;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = prod_signs;
  assert.deepEqual(candidate([1, 2, 2, -4]),-9);
  assert.deepEqual(candidate([0, 1]),0);
  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);
  assert.deepEqual(candidate([]),undefined);
  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);
  assert.deepEqual(candidate([-1, 1, -1, 1]),4);
  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);
  assert.deepEqual(candidate([-1, 1, 1, 0]),0);
}

test();"
HumanEval_129,kas_Arab,ts,"//مثالہٕ: //سیلن پیٹھ اقدارن ہنٛز اکھ آرڈرڈ صف چِھ واپس کران یمہٕ ذریع کم کھوتہٕ کم پاتھ چُھ گژان۔//یہٕ چُھ حٲصل گژھنہٕ خٲطرٕہ ساروی کھوتہٕ اہم۔//lst_A[j] = lst_B[j]۔ //یتھ کٔنۍ lst_A[i] < lst_B[i] تہٕ پرٛیٚتھ j (1 <= j < i) خٲطرٕ چُھ//lst_B کھوتہٕ، بیین لفظن منٛز، اکھ عدد انڈیکس i (1 <= i <= k) ۔//ذریعہٕ (اَوٕ کرُن تمن lst_A تہٕ lst_B ناو) ، lst_A چُھ لغوی لحاظٕ سۭتۍ کم۔//سیلہٕ A تہٕ B یچ ویلیوٗ چُھ ترتیب دینہٕ آمت کرنہٕ پتہٕ، چُھ سیلزن ہٕنٛز ترتیب ترتیب دینہٕ آمٕژ۔//اکھ وتھ A (چوڑائی k) چُھ اکھ وتھ B (چوڑائی k) کھوتہٕ کم سمجھنہٕ یوان اگر //توہہٕ ہیکو نہٕ سیٛوٚت لوٗکھہٕ بیٚیہ کانٛہہ سیٚٹھاہ لۄکچار کٔرتھ۔""//ضروری طورس پیٹھ چُھ الگ الگ) ۔//براہِ کرم نوٹ کٔرو زِ k لمبٲے ہٕنٛدس پاتھس سۭتۍ چھ مراد بالکل k سیلہٕ (نٔوۍ //سیلُلُلُلُلُلُلُلُلُلُلُلُ//بیین لفظن منٛز، توہیہ ہیکیو سیلن منٛز گژھتھ یمو سۭتۍ توہیہ کنٛورجنٹچ کنٛور چھ شیئر کران۔//تہٕ پرتھ کٲمٕ نش ہیکو توٚہۍ کینٛہہ ہمساین سیلہٕ منتقل کٔرتھ۔//توہیہ چھوہ گِرڈس منز k لمبائی ہند کم ترین پاتھ ژھانڈنہ یوان۔ توہیہ ہیکہِ شروع کٔرتھ۔//گرڈ کہِ سیلزن پیٹھ چُھ انکلوژین بالکل ایکہِ لٹہِ نظر یوان۔//گرڈُک پرتھ سیل چُھ اکھ ویلیو تھاوان۔ رینجس منز چُھ پرتھ انٹیجر [1, N * N] //N صفن تہٕ N کالمن (N >= 2) تہٕ اکھ مثبت عدد k، سۭتۍ اکھ گرڈ دینہٕ آمت، // >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
// [1, 2, 1]
// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
// [1]
function minPath(grid: number[][], k: number): number[] {
","function minPath(grid: number[][], k: number): number[] {
    const N = grid.length;
    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    
    type State = {path: number[], x: number, y: number, len: number};
    
    // Compare two paths lexicographically
    const isLess = (a: number[], b: number[]): boolean => {
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) return a[i] < b[i];
        }
        return false;
    };

    let bestPath: number[] = new Array(k).fill(Number.MAX_VALUE);
    
    // DFS function to explore paths of length k
    function dfs(x: number, y: number, path: number[], len: number): void {
        if (len === k) {
            if (isLess(path, bestPath)) {
                bestPath = [...path];
            }
            return;
        }
        
        for (const [dx, dy] of directions) {
            const nx = x + dx;
            const ny = y + dy;
            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {
                dfs(nx, ny, [...path, grid[nx][ny]], len + 1);
            }
        }
    }
    
    // Try starting from each cell
    for (let i = 0; i < N; i++) {
        for (let j = 0; j < N; j++) {
            dfs(i, j, [grid[i][j]], 1);
        }
    }
    
    return bestPath;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = minPath;
  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);
  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);
  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);
  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);
  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);
  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);
  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);
  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);
  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);
  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);
  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);
}

test();"
HumanEval_130,kas_Arab,ts,"//مثالہٕ: //ٹریبونکی ترتیبک گوڑنک n + 1 نمبر۔ //توہہ چُھ اکھ نون منفی عدد نمبر n یوان دنہٕ، توہہ چُھ a پیٹھ گژھہِ واپس گژھُن اکھ صف //=2+3+3=8 ٕ//تریہٕ تہٕ ترٛیُٛم = تریہٕ تہٕ ترٛیُٛم + تریہٕ تہٕ ترٛیُٛم//تریہٕ ((4) = تریہٕ//تریہٕ ((2) = 1 + (2 / 2) = 2 //مثالہٕ پٲٹھۍ: //اگر n چُھ عجیب تیلہٕ چُھ tri(n - 1) + tri(n - 2) + tri(n + 1) ۔//اگر n چُھ جُڑتوٲی تیلہٕ چُھ tri (n) = 1 + n / 2۔//تریہٕ ((1) = تریہٕ//ٹریبونکی ترتیبچ تعریف چِھ تکرار سۭتۍ کرنہٕ یوان: //تاہم، یم لوک چِھ نہٕ ٹریبونکی ترتیبس زانان چِھ۔//ہر کانٛہہ شخص چُھ فبونیکی ترتیب زانان، اتھ چُھ ریاضی دانو گہرائی سان کٲم کوٚرمت۔// >>> tri(3)
// [1, 3, 2, 8]
function tri(n: number): number[] {
","function tri(n: number): number[] {
    const tribonacci: number[] = [1, 3]; // Initialize with first two definite values

    function calculateTribonacci(index: number): number {
        if (index < tribonacci.length) {
            return tribonacci[index];
        }

        let result: number;
        if (index % 2 === 0) {
            result = 1 + index / 2;
        } else {
            result = calculateTribonacci(index - 1) + calculateTribonacci(index - 2) + calculateTribonacci(index + 1);
        }

        tribonacci[index] = result; // Memoize the result
        return result;
    }

    for (let i = 0; i <= n; i++) {
        calculateTribonacci(i);
    }

    return tribonacci.slice(0, n + 1);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = tri;
  assert.deepEqual(candidate(3),[1, 3, 2, 8]);
  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);
  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);
  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);
  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);
  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);
  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);
  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);
  assert.deepEqual(candidate(0),[1]);
  assert.deepEqual(candidate(1),[1, 3]);
}

test();"
HumanEval_131,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اگر تمام ہندسہٕ چِھ جوڑٕ، تہٕ 0 چُھ واپس کران۔//اکھ مثبت عدد n دینہٕ آمت، عجیب ہندسن ہند پروڈکٹ دیُت۔ // >>> digits(1)
// 1
// >>> digits(4)
// 0
// >>> digits(235)
// 15
function digits(n: number): number {
","function digits(n: number): number {
    let product = 1;
    let hasOdd = false;
    
    while (n > 0) {
        let digit = n % 10;
        if (digit % 2 !== 0) {
            product *= digit;
            hasOdd = true;
        }
        n = Math.floor(n / 10);
    }

    return hasOdd ? product : 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = digits;
  assert.deepEqual(candidate(5),5);
  assert.deepEqual(candidate(54),5);
  assert.deepEqual(candidate(120),1);
  assert.deepEqual(candidate(5014),5);
  assert.deepEqual(candidate(98765),315);
  assert.deepEqual(candidate(5576543),2625);
  assert.deepEqual(candidate(2468),0);
}

test();"
HumanEval_132,kas_Arab,ts,"//یتہِ ذیلی ترتیبس منز چُھ کم از کم اکھ بریکٹ جڑان۔//فنکشن گژھہٕ صیح واپس ین اگر تہٕ صرف اگر بریکٹسچ اکھ درست ذیلی ترتیب آسہٕ۔//اکھ فنکشن بنٲوِتھ یُس ان پٹ کس طورس پیٚٹھ اکھ سٹرنگ نوان چھ یس صرف مربع قوسن پیٚٹھ مشتمل آسہٕ۔// >>> is_nested(""[[]]"")
// true
// >>> is_nested(""[]]]]]]][[[[[]"")
// false
// >>> is_nested(""[][]"")
// false
// >>> is_nested(""[]"")
// false
// >>> is_nested(""[[][]]"")
// true
// >>> is_nested(""[[]][["")
// true
function is_nested(string: string): boolean {
","function is_nested(string: string): boolean {
    let depth = 0;
    let hasNesting = false;

    for (let char of string) {
        if (char === '[') {
            depth++;
            if (depth > 1) {
                hasNesting = true;
            }
        } else if (char === ']') {
            if (depth > 0) {
                depth--;
            } else {
                // More closing brackets than opening
                return false;
            }
        }
    }

    // Return true if there was at least one nested bracket and all brackets are matched
    return hasNesting && depth === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_nested;
  assert.deepEqual(candidate(""[[]]""),true);
  assert.deepEqual(candidate(""[]]]]]]][[[[[]""),false);
  assert.deepEqual(candidate(""[][]""),false);
  assert.deepEqual(candidate(""[]""),false);
  assert.deepEqual(candidate(""[[[[]]]]""),true);
  assert.deepEqual(candidate(""[]]]]]]]]]]""),false);
  assert.deepEqual(candidate(""[][][[]]""),true);
  assert.deepEqual(candidate(""[[]""),false);
  assert.deepEqual(candidate(""[]]""),false);
  assert.deepEqual(candidate(""[[]][[""),true);
  assert.deepEqual(candidate(""[[][]]""),true);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""[[[[[[[[""),false);
  assert.deepEqual(candidate(""]]]]]]]]""),false);
}

test();"
HumanEval_133,kas_Arab,ts,"//مثالہٕ: //ہر اکس عنصرس چُھ صفس منز اوپری int ((Ceiling) پیٹھہٕ برونٛہہ پکان۔//توہیہ چِھ اتھ صفس منز اعدادُک مربع مجموعہٕ واپس کرُن پیوان، //توہہ چھہِ لوکن ہنز اکھ صف دوان۔// >>> lst([1.0, 2.0, 3.0])
// 14
// >>> lst([1.0, 4.0, 9.0])
// 98
// >>> lst([1.0, 3.0, 5.0, 7.0])
// 84
// >>> lst([1.4, 4.2, 0.0])
// 29
// >>> lst([-2.4, 1.0, 1.0])
// 6
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);
}

// Example usage:
// console.log(sum_squares([1.0, 2.0, 3.0])); // Output: 14
// console.log(sum_squares([1.0, 4.0, 9.0])); // Output: 98
// console.log(sum_squares([1.0, 3.0, 5.0, 7.0])); // Output: 84
// console.log(sum_squares([1.4, 4.2, 0.0])); // Output: 29
// console.log(sum_squares([-2.4, 1.0, 1.0])); // Output: 6","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);
  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);
  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);
  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);
  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);
  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);
  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);
  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);
  assert.deepEqual(candidate([0.0]),0);
  assert.deepEqual(candidate([-1.0]),1);
  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);
}

test();"
HumanEval_134,kas_Arab,ts,"//مثالہٕ: //نوٹ: ""word"" چُھ حرفن ہند اکھ گروپ یوس space سٕتۍ چُھ الگ آسان۔//اکھ لفظُک اکھ حصہٕ، تہٕ بیترِ چُھ غلط۔//اکھ ڈریگن ہنٛد ڈریگن چھُ اکھ حروف تہجی ہند کردار تہٕ چُھ نہٕ //اکھ فنکشن تخلیق کرُن یُس VARUE چُھ رٹان اگر پٔتِمیو حروفو // >>> check_if_last_char_is_a_letter(""apple pie"")
// false
// >>> check_if_last_char_is_a_letter(""apple pi e"")
// true
// >>> check_if_last_char_is_a_letter(""apple pi e "")
// false
// >>> check_if_last_char_is_a_letter("""")
// false
function check_if_last_char_is_a_letter(txt: string): boolean {
","function check_if_last_char_is_a_letter(txt: string): boolean {
    if (txt.trim() === """") return false; // Handle empty or whitespace strings

    // Trim the string to remove any trailing spaces
    txt = txt.trim();

    // Check if the last character is an alphabetical letter and ensure there's a space before it
    const lastChar = txt.charAt(txt.length - 1);
    const isAlpha = /[a-zA-Z]/.test(lastChar);

    return isAlpha && txt.lastIndexOf(' ') === txt.length - 2;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = check_if_last_char_is_a_letter;
  assert.deepEqual(candidate(""apple""),false);
  assert.deepEqual(candidate(""apple pi e""),true);
  assert.deepEqual(candidate(""eeeee""),false);
  assert.deepEqual(candidate(""A""),true);
  assert.deepEqual(candidate(""Pumpkin pie ""),false);
  assert.deepEqual(candidate(""Pumpkin pie 1""),false);
  assert.deepEqual(candidate(""""),false);
  assert.deepEqual(candidate(""eeeee e ""),false);
  assert.deepEqual(candidate(""apple pie""),false);
  assert.deepEqual(candidate(""apple pi e ""),false);
}

test();"
HumanEval_135,kas_Arab,ts,"//مثالہٕ: //دوگنہٕ قدرن۔//نہٕ چُھ کانٛہہ تہٕ یتھِ پٲٹھۍ عنصر موجود کینٛہہ تہٕ پتہٕ چُھ واپسی -1۔ دِنہٕ آمُت صف چھنہٕ //چُھ نہٕ یہٕ کینٛہہ تہٕ آسان کہٕ فی الحال ایمہِ کھوتہٕ زیادٕ یا برابر آسُن۔ اگر//اکھ فنکشن تخلیق کرُن یُس کُنہِ عنصرک ساروی کھوتہٕ بوڑ انڈیکس چُھ واپس کران یُس // >>> can_arrange([1, 2, 4, 3, 5])
// 3
// >>> can_arrange([1, 2, 3])
// -1
function can_arrange(arr: number[]): number {
","function can_arrange(arr: number[]): number {
    for (let i = arr.length - 1; i > 0; i--) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return -1;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = can_arrange;
  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);
  assert.deepEqual(candidate([1, 2, 4, 5]),-1);
  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);
  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);
  assert.deepEqual(candidate([]),-1);
}

test();"
HumanEval_136,kas_Arab,ts,"//مثالہٕ: //اگر نہٕ کنٛہہ منفی تہٕ نہٕ مثبت عدد چُھ، تہٕ چُھ ایمہِ کِس طورس پیٹھ واپس یوان undefined۔//صفس منز مثبت عددٕچ تعداد۔//منفی عدد چُھ بڑۍ، تہٕ 'b' چُھ کم کھوتہٕ کم عدد۔//اکھ فنکشن چُھ بنان یُس اکہ آرے (a، b) چُھ واپس کران، یتہٕ 'a' چُھ // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])
// [undefined, 1]
// >>> largest_smallest_integers([])
// [undefined, undefined]
// >>> largest_smallest_integers([0])
// [undefined, undefined]
function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
","function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {
    let largestNegative: number | undefined = undefined;
    let smallestPositive: number | undefined = undefined;

    for (let num of lst) {
        if (num < 0) {
            if (largestNegative === undefined || num > largestNegative) {
                largestNegative = num;
            }
        } else if (num > 0) {
            if (smallestPositive === undefined || num < smallestPositive) {
                smallestPositive = num;
            }
        }
    }

    return [largestNegative, smallestPositive];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = largest_smallest_integers;
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);
  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);
  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);
  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);
  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);
  assert.deepEqual(candidate([]),[undefined, undefined]);
  assert.deepEqual(candidate([0]),[undefined, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);
  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);
  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);
  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);
}

test();"
HumanEval_138,kas_Arab,ts,"//مثالہٕ //تشخیص کٔرو زِ کیا یہٕ دنہٕ آمت نمبر n ہیکو بالکل 4 پازِٹو برابر نمبرن ہند مجموعہٕ کہٕ طور پأنٹھ لیکھتھ۔// >>> is_equal_to_sum_even(4)
// false
// >>> is_equal_to_sum_even(6)
// false
// >>> is_equal_to_sum_even(8)
// true
function is_equal_to_sum_even(n: number): boolean {
","function is_equal_to_sum_even(n: number): boolean {
    // The sum of 4 positive even numbers is always even and 8 is the smallest such sum (2 + 2 + 2 + 2).
    // Hence, if n is greater than or equal to 8 and even, n can be expressed as the sum of 4 positive even numbers.
    return (n >= 8) && (n % 2 === 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = is_equal_to_sum_even;
  assert.deepEqual(candidate(4),false);
  assert.deepEqual(candidate(6),false);
  assert.deepEqual(candidate(8),true);
  assert.deepEqual(candidate(10),true);
  assert.deepEqual(candidate(11),false);
  assert.deepEqual(candidate(12),true);
  assert.deepEqual(candidate(13),false);
  assert.deepEqual(candidate(16),true);
}

test();"
HumanEval_139,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //یتہِ n > 0 چُھ //brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! //برازیلی فیکٹوریلس چِھ ونان: // >>> special_factorial(4)
// 288
// The function will receive an integer as input and should return the special
// factorial of this integer.
function special_factorial(n: number): number {
","function factorial(n: number): number {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

function special_factorial(n: number): number {
    if (n <= 0) throw new Error(""Input must be a positive integer"");
    
    let result = 1;
    for (let i = n; i >= 1; i--) {
        result *= factorial(i);
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = special_factorial;
  assert.deepEqual(candidate(4),288);
  assert.deepEqual(candidate(5),34560);
  assert.deepEqual(candidate(7),125411328000);
  assert.deepEqual(candidate(1),1);
}

test();"
HumanEval_140,kas_Arab,ts,"//تہٕ پتہٕ چُھ تمام متعاقب جاۓ ین -  سۭتۍ تبدیل کران۔//تہٕ اگر کنہہ تارک چُھ 2 پیٹھہٕ زیادٕ مسلسل جایہٕ تھاوان، تہٕ//اکھ سٹرنگ ٹیکسٹ دیتھ، امس منٛز موجود تمام اسپیسزس انڈر اسکرونس سۭتۍ تبدیل کرُن، // >>> fix_spaces("" Example"")
// ""Example""
// >>> fix_spaces("" Example 1"")
// ""Example_1""
// >>> fix_spaces("" Example 2"")
// ""_Example_2""
// >>> fix_spaces("" Example 3"")
// ""_Example-3""
function fix_spaces(text: string): string {
","function fix_spaces(text: string): string {
    // Trim leading and trailing spaces
    let trimmedText = text.trim();

    // Use a regular expression to replace all sequences of two or more spaces with ""-""
    let replacedText = trimmedText.replace(/ {2,}/g, '-');

    // Replace remaining single spaces with underscores
    replacedText = replacedText.replace(/ /g, '_');

    return replacedText;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = fix_spaces;
  assert.deepEqual(candidate(""Example""),""Example"");
  assert.deepEqual(candidate(""Mudasir Hanif ""),""Mudasir_Hanif_"");
  assert.deepEqual(candidate(""Yellow Yellow  Dirty  Fellow""),""Yellow_Yellow__Dirty__Fellow"");
  assert.deepEqual(candidate(""Exa   mple""),""Exa-mple"");
  assert.deepEqual(candidate(""   Exa 1 2 2 mple""),""-Exa_1_2_2_mple"");
}

test();"
HumanEval_141,kas_Arab,ts,"//مثالہٕ: //ڈاٹہٕ پتہٕ ذیلی تار گژھہِ یِمَن منز اکھ آسُن: ['txt', 'exe', 'dll'] //لاطینی حروف تہجی ('a'-'z' تہٕ 'A'-'Z') ۔//ڈاٹہٕ برونٹھ سبسٹرینگ گژھہٕ نہٕ خٲلی آسن، تہٕ یہٕ چُھ ٕ کِس حرفس سٕتۍ شروع گژھان۔//- فائل نِش چُھ صرف اکھ ڈاٹ '۔'//- فائل کس ناوس منٛز گژھہٕ نہٕ تریہ کھوتہٕ زیادٕ ہندسہٕ آسن ('0'-'9') ۔//یم چِھ: //اکھ فائل ناو چُھ صیح ماننہٕ یوان صرف اگر تہٕ صرف اگر تمام درج ذیل شرائط پُورٕ طور پأنٹھ چِھ پورٕ گژان://اگر فائلُک ناو چُھ صیح، تیلہٕ چُھ ""Yes""۔ اِلگِیٹ اِستِمال کَرُن: ""No""۔//اکھ فنکشن بنٲوِتھ یوس اکھ سٹرنگ نٲمی فائلٕچ نمائندگی کران چُھ، تہٕ  چُھ رٹان۔// >>> file_name_check(""example.txt"")
// ""Yes""
// >>> file_name_check(""1example.dll"")
// ""No""
function file_name_check(file_name: string): string {
","function file_name_check(file_name: string): string {
    // Split the file name into name and extension based on the dot
    const parts = file_name.split('.');
    
    // Check if there's exactly one dot
    if (parts.length !== 2) {
        return 'No';
    }
    
    const [name, extension] = parts;
    
    // Check if the substring before the dot is not empty and starts with a latin letter
    if (name.length === 0 || !/^[a-zA-Z]/.test(name)) {
        return 'No';
    }
    
    // Check if the number of digits in the name is not more than three
    const digitCount = (name.match(/\d/g) || []).length;
    if (digitCount > 3) {
        return 'No';
    }
    
    // Check if the extension is one of the valid options
    const validExtensions = ['txt', 'exe', 'dll'];
    if (!validExtensions.includes(extension)) {
        return 'No';
    }
    
    // All conditions are met, the file name is valid
    return 'Yes';
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = file_name_check;
  assert.deepEqual(candidate(""example.txt""),""Yes"");
  assert.deepEqual(candidate(""1example.dll""),""No"");
  assert.deepEqual(candidate(""s1sdf3.asd""),""No"");
  assert.deepEqual(candidate(""K.dll""),""Yes"");
  assert.deepEqual(candidate(""MY16FILE3.exe""),""Yes"");
  assert.deepEqual(candidate(""His12FILE94.exe""),""No"");
  assert.deepEqual(candidate(""_Y.txt""),""No"");
  assert.deepEqual(candidate(""?aREYA.exe""),""No"");
  assert.deepEqual(candidate(""/this_is_valid.dll""),""No"");
  assert.deepEqual(candidate(""this_is_valid.wow""),""No"");
  assert.deepEqual(candidate(""this_is_valid.txt""),""Yes"");
  assert.deepEqual(candidate(""this_is_valid.txtexe""),""No"");
  assert.deepEqual(candidate(""#this2_i4s_5valid.ten""),""No"");
  assert.deepEqual(candidate(""@this1_is6_valid.exe""),""No"");
  assert.deepEqual(candidate(""this_is_12valid.6exe4.txt""),""No"");
  assert.deepEqual(candidate(""all.exe.txt""),""No"");
  assert.deepEqual(candidate(""I563_No.exe""),""Yes"");
  assert.deepEqual(candidate(""Is3youfault.txt""),""Yes"");
  assert.deepEqual(candidate(""no_one#knows.dll""),""Yes"");
  assert.deepEqual(candidate(""1I563_Yes3.exe""),""No"");
  assert.deepEqual(candidate(""I563_Yes3.txtt""),""No"");
  assert.deepEqual(candidate(""final..txt""),""No"");
  assert.deepEqual(candidate(""final132""),""No"");
  assert.deepEqual(candidate(""_f4indsartal132.""),""No"");
  assert.deepEqual(candidate("".txt""),""No"");
  assert.deepEqual(candidate(""s.""),""No"");
}

test();"
HumanEval_142,kas_Arab,ts,"//مثالہٕ: //ایمہِ پتہٕ چُھ فنکشنس تمام اندراجاتُک مجموعہٕ واپس کرُن۔//3 ہند ضرب تہٕ اگر امہٕ ہند انڈیکس 4 ہند ضرب تہٕ نہٕ 3 ہند ضرب آسہٕ تیلہٕ کرٕ یہٕ عدد انٹری مکعب۔ فنکشن چُھنہٕ //یہٕ فنکشن چُھ انٹیجرزن ہند ایکہِ صفہٕ نوان۔ صفہٕ کہِ تمام اندراجاتٕ خٲطرٕہ، فنکشنس چُھ انٹیجر انٹری ہند مربع کرُن اگر ایمِچ انڈیکس چِھ a۔//"" ٕ// >>> lst
// [1, 2, 3]
// >>> lst
// []
// >>> lst
// [-1, -5, 2, -1, -5]
function sum_squares(lst: number[]): number {
","function sum_squares(lst: number[]): number {
    return lst.reduce((sum, value, index) => {
        if (index % 3 === 0) {
            return sum + (value * value);
        } else if (index % 4 === 0) {
            return sum + (value * value * value);
        } else {
            return sum + value;
        }
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sum_squares;
  assert.deepEqual(candidate([1, 2, 3]),6);
  assert.deepEqual(candidate([1, 4, 9]),14);
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);
  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);
  assert.deepEqual(candidate([0]),0);
  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);
  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);
  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);
  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);
  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);
}

test();"
HumanEval_143,kas_Arab,ts,"//مثالہٕ 1: //نٔوِس سِٹرِنگس منز لفظن ہنز ترتیب گژھہِ اصلی سِٹِنگس ہیو۔//یمچ لمبائی چھ پرائم نمبر، //تہٕ توہیہ پزِ پننہِ جملُک اصل جملہٕ پیٹھہٕ لفظن ہنز string واپس کرُن، //جملس منز چِھ کینٛہہ لفظ یم ایکِس جایہِ پیٹھ بییس جایہِ پیٹھ چِھ لیکھِتھ آسان،//توہہٕ چِھ اکھ جملہ یتھہٕ کنۍ تہٕ ونان// >>> words_in_sentence(""This is a test"")
// ""is""
// Example 2:
// >>> words_in_sentence(""lets go for swimming"")
// ""go for""
// Constraints:
// * 1 <= len(sentence) <= 100
// * sentence contains only letters
function words_in_sentence(sentence: string): string {
","function isPrime(num: number): boolean {
    if (num < 2) return false;
    for (let i = 2; i * i <= num; i++) {
        if (num % i === 0) return false;
    }
    return true;
}

function words_in_sentence(sentence: string): string {
    return sentence
        .split(' ')
        .filter(word => isPrime(word.length))
        .join(' ');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = words_in_sentence;
  assert.deepEqual(candidate(""This is a test""),""is"");
  assert.deepEqual(candidate(""lets go for swimming""),""go for"");
  assert.deepEqual(candidate(""there is no place available here""),""there is no place"");
  assert.deepEqual(candidate(""Hi I am Hussein""),""Hi am Hussein"");
  assert.deepEqual(candidate(""go for it""),""go for it"");
  assert.deepEqual(candidate(""here""),"""");
  assert.deepEqual(candidate(""here is""),""is"");
}

test();"
HumanEval_144,kas_Arab,ts,"//توہہ ہیکہِ یہٕ فرض کٔرِتھ زِ x، تہٕ n چِھ درست فریکشن، تہٕ تہندِ ڈینومینٹر چُھ نہٕ صفر کینٛہہ۔//<نمیریٹر>/<نمیریٹر> یتہِ نمیریٹر تہٕ ڈینومینیٹر دۄشوے مثبت پورٕ نمبر آسان چِھ۔//x تہٕ n دونوے چِھ فریکشنچ سٹرنگ نمائندگی، تہٕ یمن ہنٛز شکل چِھ ییتھ کیٛن، //x * n فنکشن چُھ صحیح واپس کران اگر x * n چُھ اکھ عدد تہٕ غلط چُھ //توہیہ چھِ اکھ فنکشن یُس اظہار آسان بناوِ۔// >>> simplify(""1/5"", ""5/1"")
// true
// >>> simplify(""1/6"", ""2/1"")
// false
// >>> simplify(""7/10"", ""10/2"")
// false
function simplify(x: string, n: string): boolean {
","function simplify(x: string, n: string): boolean {
    const parseFraction = (fraction: string): [number, number] => {
        const [numerator, denominator] = fraction.split('/').map(Number);
        return [numerator, denominator];
    };

    const [xNumerator, xDenominator] = parseFraction(x);
    const [nNumerator, nDenominator] = parseFraction(n);

    // Multiply the fractions: (a/b) * (c/d) = (a*c) / (b*d)
    const resultNumerator = xNumerator * nNumerator;
    const resultDenominator = xDenominator * nDenominator;

    // A product of fractions is a whole number if its numerator divided by denominator is an integer.
    return resultNumerator % resultDenominator === 0;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = simplify;
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/6"", ""2/1""),false);
  assert.deepEqual(candidate(""5/1"", ""3/1""),true);
  assert.deepEqual(candidate(""7/10"", ""10/2""),false);
  assert.deepEqual(candidate(""2/10"", ""50/10""),true);
  assert.deepEqual(candidate(""7/2"", ""4/2""),true);
  assert.deepEqual(candidate(""11/6"", ""6/1""),true);
  assert.deepEqual(candidate(""2/3"", ""5/2""),false);
  assert.deepEqual(candidate(""5/2"", ""3/5""),false);
  assert.deepEqual(candidate(""2/4"", ""8/4""),true);
  assert.deepEqual(candidate(""2/4"", ""4/2""),true);
  assert.deepEqual(candidate(""1/5"", ""5/1""),true);
  assert.deepEqual(candidate(""1/5"", ""1/5""),false);
}

test();"
HumanEval_145,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اصلی صفس منز چُھ تہندِ انڈیکس کہِ بنیادس پیٹھ ترتیب دِنہٕ۔//نوٹ: اگر زن تہِ چِھ واریاہ عدد یمن ہندسن ہند مجموعہ چُھ ہوی، تہٕ //تہنزٕ ہندسن ہند مجموعہٕ کہِ مطٲبق چُھ بڑٕنُک ترتیب۔//اکھ فنکشن لیوکھمُت یوس انٹیجرزن ہنز ڈلیوری ترتیب دیہ چُھ // >>> order_by_points([1, 11, -1, -11, -12])
// [-1, -11, 1, -12, 11]
// >>> order_by_points([])
// []
function order_by_points(nums: number[]): number[] {
","function order_by_points(nums: number[]): number[] {
    const digitSum = (num: number): number => {
        let sum = 0;
        let value = Math.abs(num);
        while (value > 0) {
            sum += value % 10;
            value = Math.floor(value / 10);
        }
        return sum;
    };

    return nums
        .map((num, index) => ({ num, index, sumOfDigits: digitSum(num) }))
        .sort((a, b) => {
            if (a.sumOfDigits === b.sumOfDigits) {
                return a.index - b.index;
            }
            return a.sumOfDigits - b.sumOfDigits;
        })
        .map(item => item.num);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = order_by_points;
  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);
  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);
  assert.deepEqual(candidate([]),[]);
  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);
  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);
}

test();"
HumanEval_146,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //اکہِ نمبرٕ سٕنز گۄڈنیُک تہٕ ٲخری ہندسہٕ چِھ اویڈ (1, 3, 5, 7, 9) ۔//صفس منز چِھ عناصرک تعداد یم 10 کھوتہٕ زیادٕ چِھ تہٕ دۄنوٕنی //اکھ فنکشن لیوکھمُت یُس اعدادن ہنز اکھ صف چُھ ان پٹ کس طورس پیٹھ نوان تہٕ ریٹرن چُھ دیوان۔// >>> specialFilter([15, -73, 14, -15])
// 1
// >>> specialFilter([33, -2, -3, 45, 21, 109])
// 2
function specialFilter(nums: number[]): number {
","function specialFilter(nums: number[]): number {
    const isOdd = (digit: number): boolean => digit % 2 !== 0;

    return nums.reduce((count, num) => {
        const absNumStr = Math.abs(num).toString();
        const firstDigit = parseInt(absNumStr[0]);
        const lastDigit = parseInt(absNumStr[absNumStr.length - 1]);

        if (num > 10 && isOdd(firstDigit) && isOdd(lastDigit)) {
            return count + 1;
        }

        return count;
    }, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = specialFilter;
  assert.deepEqual(candidate([5, -2, 1, -5]),0);
  assert.deepEqual(candidate([15, -73, 14, -15]),1);
  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);
  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);
  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);
  assert.deepEqual(candidate([1]),0);
  assert.deepEqual(candidate([]),0);
}

test();"
HumanEval_147,kas_Arab,ts,"//مثال: ٕ//تہٕ a[i] + a[j] + a[k] چُھ 3 ہند ضرب۔//a کہِ ٹرپلزن ہند تعداد (a[i]، a[j]، a[k]) چُھ واپس کران یتہِ i < j < k، //پرتھ i (1 ≤ i ≤ n) خٲطرٕہ، a[i] = i * i - i + 1 چُھ ویلیو۔//توہہ چُھ اکھ مثبت عدد ن دیتمت۔ توہہ چُھ اکھ عدد صف بناون پیوان a یچ لمبائی n چِھ۔ // >>> get_max_triples(5)
// 1
// Explanation: 
// a = [1, 3, 7, 13, 21]
// The only valid triple is (1, 7, 13).
function get_max_triples(n: number): number {
","function get_max_triples(n: number): number {
    const a: number[] = [];

    for (let i = 1; i <= n; i++) {
        a[i - 1] = i * i - i + 1;
    }

    let count = 0;

    for (let i = 0; i < n - 2; i++) {
        for (let j = i + 1; j < n - 1; j++) {
            for (let k = j + 1; k < n; k++) {
                if ((a[i] + a[j] + a[k]) % 3 === 0) {
                    count++;
                }
            }
        }
    }

    return count;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = get_max_triples;
  assert.deepEqual(candidate(5),1);
  assert.deepEqual(candidate(6),4);
  assert.deepEqual(candidate(10),36);
  assert.deepEqual(candidate(100),53361);
}

test();"
HumanEval_149,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //توہہ ہیکو یہٕ فرض کرتھ زِ تمام الفاظ چِھ ایکسی لمبائی پیوان۔//فنکشن گژھہٕ ترتیب دینہٕ آمژٕ سٹرنگزن ہنز اکھ صف واپس کرُن۔//اگر زٕ لفظ چِھ اکسی لمبائی سۭتۍ، تہٕ ایمیوک ترتیب چُھ الفبائی ترتیبس منٛز دینہٕ یوان۔//گژھہِ یہ قاعدہ کہِ ذریعہِ ترتیب دِنہٕ آمٕژِ صف واپس یِن کرنہٕ۔//ترتیب گژھہِ ہرگاہ لفظن ہنز لمبٲے بڑان، تہٕ توہہٕ//تہٕ اتھ منز ہیکہِ نقلہٕ شٲمل ٲسٕتۍ۔//صف چِھ ہمیشہٕ تارن ہنٛز اکھ صف تہٕ نہٕ چُھ کُنہٕ ویزٕ اعدادن ہنٛز اکھ صف، //تہٕ ترتیب شدٕ ترتیب سۭتۍ چُھ نتیجہٕ ننہٕ والن صفن واپس کران۔//تمن تارن چِھ حذف کران یمن ہنٛد لمبائی غٲر مساوی چِھ، //اکھ فنکشن لیوکھن یوس سٹرنگس ہند اکھ صف چُھ بطور پیرامیٹر قبول کران۔// >>> list_sort([""aa"", ""a"", ""aaa""])
// [""aa""]
// >>> list_sort([""ab"", ""a"", ""aaa"", ""cd""])
// [""ab"", ""cd""]
function sorted_list_sum(lst: string[]): string[] {
","function sorted_list_sum(lst: string[]): string[] {
    // Filter out strings with odd lengths
    const filtered = lst.filter(str => str.length % 2 === 0);
    // Sort the array by length, then alphabetically
    const sorted = filtered.sort((a, b) => {
        if (a.length === b.length) {
            return a.localeCompare(b);
        }
        return a.length - b.length;
    });
    return sorted;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = sorted_list_sum;
  assert.deepEqual(candidate([""aa"", ""a"", ""aaa""]),[""aa""]);
  assert.deepEqual(candidate([""school"", ""AI"", ""asdf"", ""b""]),[""AI"", ""asdf"", ""school""]);
  assert.deepEqual(candidate([""d"", ""b"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""d"", ""dcba"", ""abcd"", ""a""]),[""abcd"", ""dcba""]);
  assert.deepEqual(candidate([""AI"", ""ai"", ""au""]),[""AI"", ""ai"", ""au""]);
  assert.deepEqual(candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]),[]);
  assert.deepEqual(candidate([""aaaa"", ""bbbb"", ""dd"", ""cc""]),[""cc"", ""dd"", ""aaaa"", ""bbbb""]);
}

test();"
HumanEval_150,kas_Arab,ts,"//مثالہٕ: //اکھ پرائم نمبر تہٕ ییہٕ گژھہٕ y ہچ ویلیو واپس کرنہٕ ورٲے۔ //اکھ سادٕ پروگرام یُس x کہِ ویلیو چُھ رٹرن کران اگر n چُھ // >>> x_or_y(7, 34, 12)
// 34
// >>> x_or_y(15, 8, 5)
// 5
function x_or_y(n: number, x: number, y: number): number {
","function x_or_y(n: number, x: number, y: number): number {
    function isPrime(num: number): boolean {
        if (num <= 1) return false;
        if (num <= 3) return true;
        
        if (num % 2 === 0 || num % 3 === 0) return false;
        
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) return false;
        }
        
        return true;
    }

    return isPrime(n) ? x : y;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = x_or_y;
  assert.deepEqual(candidate(7, 34, 12),34);
  assert.deepEqual(candidate(15, 8, 5),5);
  assert.deepEqual(candidate(3, 33, 5212),33);
  assert.deepEqual(candidate(1259, 3, 52),3);
  assert.deepEqual(candidate(7919, -1, 12),-1);
  assert.deepEqual(candidate(3609, 1245, 583),583);
  assert.deepEqual(candidate(91, 56, 129),129);
  assert.deepEqual(candidate(6, 34, 1234),1234);
  assert.deepEqual(candidate(1, 2, 0),0);
  assert.deepEqual(candidate(2, 2, 0),2);
}

test();"
HumanEval_151,kas_Arab,ts,"//صفس منز چِھ یم غٲر متضاد نمبر۔ منفی نمبر یا غٲر انٹیجر چِھ نظر انداز کران۔//اعدادن ہٕنٛز اکھ صف دتھ، اعدادن ہٕنٛدس مربع کس مجموعس واپس ییہٕ دنہٕ۔// >>> double_the_difference([1, 3, 2, 0])
// 10
// >>> double_the_difference([-1, -2, 0])
// 0
// >>> double_the_difference([9, -2])
// 81
// >>> double_the_difference([0])
// 0
// If the input array is empty, return 0.
function double_the_difference(lst: number[]): number {
","function double_the_difference(lst: number[]): number {
    return lst
        .filter(num => Number.isInteger(num) && num > 0 && num % 2 !== 0)
        .reduce((sum, num) => sum + num * num, 0);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = double_the_difference;
  assert.deepEqual(candidate([]),0);
  assert.deepEqual(candidate([5.0, 4.0]),25);
  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);
  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);
  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);
  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);
  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);
}

test();"
HumanEval_152,kas_Arab,ts,"//مثال: ٕ//قدر چِھ 0 ، تہٕ اگر نہٕ تیلہٕ چُھ قدر گِب تہٕ اسکور کہ درمیان مطلق فرق۔//اگر تمو صحیح اندازٕ لگاونہٕ، تہٕ اکھ ہیوٛک طول و عرضُک اکھ سرنی واپس یییہٕ دنہٕ یمہٕ سۭتۍ یہٕ ظٲہر چُھ گژھان زِ ہر اندازٕ کتھ حدس تام اوس۔//توہیہ چِھ سکور تہٕ اندازن ہنز زٕ صفہٕ یوان دِنہٕ یمو منٛز پرتھ انڈیکس چُھ میچچچ نشاندہی کران۔//توہیہ چھوہ یہ معلوٗمات حٲصل کرنہٕ یُن اگر کانہہ شخص تیوٗت تیوٗت دِوان چُھ تیوٗت چُھ تمسندین نتائجن ہٕنز وضاحت کران۔//یقینی طورس پیٹھ چُھ نوٹ کرُن تہٕ موازنہ کرُن قٲبل۔ //ییلہٕ زَن کہِ ایونٹ چُھ ٲخر کار زنہٕ۔//میہ چِھ باسان زِ أس چِھ یمن تمام چیزن ہنز یاد یُس اَتھ احساسس سۭتۍ وابستہٕ چُھ ییلہٕ کنہہ طویل انتظارک نتیجہٕ چُھ نیران۔// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
// [0, 0, 0, 0, 3, 3]
// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])
// [4, 4, 1, 0, 0, 6]
function compare(game: number[], guess: number[]): number[] {
","function compare(game: number[], guess: number[]): number[] {
    return game.map((score, index) => Math.abs(score - guess[index]));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = compare;
  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);
  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);
  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);
  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);
}

test();"
HumanEval_153,kas_Arab,ts,"//مثال: ٕ//(یِہُنٛدوستٲنۍ دٔسۍ) //واپس ""Slices.SERvINGSliCes"" چونکہ ""SERvINGSliCes"" مضبوط ترین توسیع ہے //توسیع: ['SERVINGSliCes'، 'Cheese'، 'StuFfed'] تہٕ توہیہ گژھہِ //مثالہٕ پٲٹھۍ، اگر توہیہ ""Slices"" کلاس تہٕ  کِس صفہٕ پٲٹھۍ دنہٕ آمت چھ، تہٕ توہیہ چِھ//یُس صفس منز گوڈنیک چُھ آسان سُ چُھ منتخب کران۔//اگر زٕ یا زیادٕ اکسٹینشن آسنہٕ سۭتۍ، تہٕ توہہ گژھہٕ یہٕ کرنہٕ یُن۔//شکل: ClassName.StrongestExtensionName۔ //توہیہ پزِ مضبوط ترین توسیع تلاش کرٕن تہٕ اتھ منز گژھہِ اکھ سٹرنگ واپس۔//توسیع کس ناوس منٛز، طاقت چِھ فرکشن CAP - SM سۭتۍ دینہٕ یوان۔ //اکسٹینشن کس ناوس منٛز چُھ لیٹرز، تہٕ SM لوکلسٹر حروفن ہنٛد تعداد۔//توسیعچ طاقت چِھ ییتھ کیٛن: سی اے پی ییہٕ اپرکیسٹر ہند نمبر آسن۔//توسیعہٕ چھ کلاسس منٛز اضٲفی کلاس لوڈ کرنہٕ خٲطرٕ استعمال کرنہٕ یوان۔//توہیہ چُھ اکھ کلاس (اکھ سٹرنگ) تہٕ ایکسٹینشنن ہنز اکھ صف یوان دِنہٕ۔// >>> Strongest_Extension(""my_class"", [""AA"", ""Be"", ""CC""])
// ""my_class.AA""
function Strongest_Extension(class_name: string, extensions: string[]): string {
","function Strongest_Extension(class_name: string, extensions: string[]): string {
    let strongestExtension = '';
    let maxStrength = -Infinity;

    extensions.forEach(extension => {
        const capCount = extension.split('').filter(char => char >= 'A' && char <= 'Z').length;
        const smCount = extension.split('').filter(char => char >= 'a' && char <= 'z').length;
        const strength = capCount - smCount;

        if (strength > maxStrength) {
            maxStrength = strength;
            strongestExtension = extension;
        }
    });

    return `${class_name}.${strongestExtension}`;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = Strongest_Extension;
  assert.deepEqual(candidate(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]),""Watashi.eIGHt8OKe"");
  assert.deepEqual(candidate(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]),""Boku123.YEs.WeCaNe"");
  assert.deepEqual(candidate(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]),""__YESIMHERE.NuLl__"");
  assert.deepEqual(candidate(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]),""K.TAR"");
  assert.deepEqual(candidate(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]),""__HAHA.123"");
  assert.deepEqual(candidate(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]),""YameRore.okIWILL123"");
  assert.deepEqual(candidate(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]),""finNNalLLly.WoW"");
  assert.deepEqual(candidate(""_"", [""Bb"", ""91245""]),""_.Bb"");
  assert.deepEqual(candidate(""Sp"", [""671235"", ""Bb""]),""Sp.671235"");
}

test();"
HumanEval_154,kas_Arab,ts,"//توہہ چھ 2 لفظ دنہٕ آمت۔ توہہ چھ صحیح واپس کرنٕچ ضرورت اگر دیم لفظ یا امکہ کنہہ لوٛٹ چُھ گوڑنچ لفظس منٛز سبسٹرننگ آسان۔// >>> cycpattern_check(""abcd"", ""abd"")
// false
// >>> cycpattern_check(""hello"", ""ell"")
// true
// >>> cycpattern_check(""whassup"", ""psus"")
// false
// >>> cycpattern_check(""abab"", ""baa"")
// true
// >>> cycpattern_check(""efef"", ""eeff"")
// false
// >>> cycpattern_check(""himenss"", ""simen"")
// true
function cycpattern_check(a: string, b: string): boolean {
","function cycpattern_check(a: string, b: string): boolean {
    for (let i = 0; i < b.length; i++) {
        const rotation = b.slice(i) + b.slice(0, i);
        if (a.includes(rotation)) {
            return true;
        }
    }
    return false;
}

// Test cases
console.log(cycpattern_check(""abcd"", ""abd"")); // false
console.log(cycpattern_check(""hello"", ""ell"")); // true
console.log(cycpattern_check(""whassup"", ""psus"")); // false
console.log(cycpattern_check(""abab"", ""baa"")); // true
console.log(cycpattern_check(""efef"", ""eeff"")); // false
console.log(cycpattern_check(""himenss"", ""simen"")); // true","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = cycpattern_check;
  assert.deepEqual(candidate(""xyzw"", ""xyw""),false);
  assert.deepEqual(candidate(""yello"", ""ell""),true);
  assert.deepEqual(candidate(""whattup"", ""ptut""),false);
  assert.deepEqual(candidate(""efef"", ""fee""),true);
  assert.deepEqual(candidate(""abab"", ""aabb""),false);
  assert.deepEqual(candidate(""winemtt"", ""tinem""),true);
}

test();"
HumanEval_155,kas_Arab,ts,"//مثال: ٕ//اکھ انٹیجر دنہٕ آمت، اکھ صف چُھ واپس کران یتھ منٛز بالترتیب برابر تہٕ عجیب ہندسن ہند تعداد آسان چُھ۔// >>> even_odd_count(-12)
// [1, 1]
// >>> even_odd_count(123)
// [1, 2]
function even_odd_count(num: number): [number, number] {
","function even_odd_count(num: number): [number, number] {
    const numStr = Math.abs(num).toString();
    let evenCount = 0;
    let oddCount = 0;

    for (let char of numStr) {
        const digit = parseInt(char);
        if (digit % 2 === 0) {
            evenCount++;
        } else {
            oddCount++;
        }
    }

    return [evenCount, oddCount];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = even_odd_count;
  assert.deepEqual(candidate(7),[0, 1]);
  assert.deepEqual(candidate(-78),[1, 1]);
  assert.deepEqual(candidate(3452),[2, 2]);
  assert.deepEqual(candidate(346211),[3, 3]);
  assert.deepEqual(candidate(-345821),[3, 3]);
  assert.deepEqual(candidate(-2),[1, 0]);
  assert.deepEqual(candidate(-45347),[2, 3]);
  assert.deepEqual(candidate(0),[1, 0]);
}

test();"
HumanEval_156,kas_Arab,ts,"//مثالہٕ: //پابٔنٛدی: 1 <= num <= 1000 //تہٕ یہٕ چُھ لٲنکۍسٕے لوکٹس منٛز واپس گژھان۔//اکھ مثبت عدد دنہٕ آمت، امک رومی ہندسہٕ مساوی تارک پٲنٹھ چُھ حٲصل یوان کرنہٕ، // >>> int_to_mini_roman(19)
// ""xix""
// >>> int_to_mini_roman(152)
// ""clii""
// >>> int_to_mini_roman(426)
// ""cdxxvi""
function int_to_mini_roman(number: number): string {
","function int_to_mini_roman(number: number): string {
    const romanNumerals: { [key: number]: string } = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',
        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',
        5: 'v', 4: 'iv', 1: 'i'
    };
    
    let result = '';
    for (const value of Object.keys(romanNumerals).map(Number).sort((a, b) => b - a)) {
        while (number >= value) {
            result += romanNumerals[value];
            number -= value;
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = int_to_mini_roman;
  assert.deepEqual(candidate(19),""xix"");
  assert.deepEqual(candidate(152),""clii"");
  assert.deepEqual(candidate(251),""ccli"");
  assert.deepEqual(candidate(426),""cdxxvi"");
  assert.deepEqual(candidate(500),""d"");
  assert.deepEqual(candidate(1),""i"");
  assert.deepEqual(candidate(4),""iv"");
  assert.deepEqual(candidate(43),""xliii"");
  assert.deepEqual(candidate(90),""xc"");
  assert.deepEqual(candidate(94),""xciv"");
  assert.deepEqual(candidate(532),""dxxxii"");
  assert.deepEqual(candidate(900),""cm"");
  assert.deepEqual(candidate(994),""cmxciv"");
  assert.deepEqual(candidate(1000),""m"");
}

test();"
HumanEval_157,kas_Arab,ts,"//مثال: ٕ//90°این منز چُھ//اکھ مثلث چُھ سیدھ زاویہٕ یا سیدھ مثلث۔//اطراف چِھ اکھ مستطیل مثلث بناوان، بصورت دیگر غلط۔//مثلثن ہندس تریمس حصس چِھ زیچھر دیوان۔ اگر ترٛے ٕچ زیچھر چِھ// >>> right_angle_triangle(3, 4, 5)
// true
// >>> right_angle_triangle(1, 2, 3)
// false
function right_angle_triangle(a: number, b: number, c: number): boolean {
","function right_angle_triangle(a: number, b: number, c: number): boolean {
    const sides = [a, b, c].sort((x, y) => x - y);
    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = right_angle_triangle;
  assert.deepEqual(candidate(3, 4, 5),true);
  assert.deepEqual(candidate(1, 2, 3),false);
  assert.deepEqual(candidate(10, 6, 8),true);
  assert.deepEqual(candidate(2, 2, 2),false);
  assert.deepEqual(candidate(7, 24, 25),true);
  assert.deepEqual(candidate(10, 5, 7),false);
  assert.deepEqual(candidate(5, 12, 13),true);
  assert.deepEqual(candidate(15, 8, 17),true);
  assert.deepEqual(candidate(48, 55, 73),true);
  assert.deepEqual(candidate(1, 1, 1),false);
  assert.deepEqual(candidate(2, 2, 10),false);
}

test();"
HumanEval_158,kas_Arab,ts,"//حروف، چھُ سُ یُس لفظن ہٕندِ ترتیبس منز گۄڈنیُک مقام چُھ۔//اگر ملٹیپل سٹرنگس منٛز چھِ زیادٕ کھوتہٕ زیادٕ منفرد کرکٹرز آسان۔//صفس منٛز چھ مختلف لفظن پیٹھ مشتمل۔ لفظس چھ زیادٕ کھوتہٕ زیادٕ نمبرس سۭتۍ واپس کران۔//اکھ فنکشن لیوکھمُت یوس سٹرنگس ہنز اکھ صف چُھ قبول کران۔// >>> find_max([""name"", ""of"", ""string""])
// ""string""
// >>> find_max([""name"", ""enam"", ""game""])
// ""enam""
// >>> find_max([""aaaaaaa"", ""bb"", ""cc""])
// ""aaaaaaa""
function find_max(words: string[]): string {
","function find_max(words: string[]): string {
    function uniqueCharacterCount(word: string): number {
        const uniqueChars = new Set(word);
        return uniqueChars.size;
    }

    let maxWord = words[0];
    let maxUniqueCount = uniqueCharacterCount(maxWord);

    for (let i = 1; i < words.length; i++) {
        const currentUniqueCount = uniqueCharacterCount(words[i]);
        if (
            currentUniqueCount > maxUniqueCount ||
            (currentUniqueCount === maxUniqueCount && words[i] < maxWord)
        ) {
            maxWord = words[i];
            maxUniqueCount = currentUniqueCount;
        }
    }

    return maxWord;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = find_max;
  assert.deepEqual(candidate([""name"", ""of"", ""string""]),""string"");
  assert.deepEqual(candidate([""name"", ""enam"", ""game""]),""enam"");
  assert.deepEqual(candidate([""aaaaaaa"", ""bb"", ""cc""]),""aaaaaaa"");
  assert.deepEqual(candidate([""abc"", ""cba""]),""abc"");
  assert.deepEqual(candidate([""play"", ""this"", ""game"", ""of"", ""footbott""]),""footbott"");
  assert.deepEqual(candidate([""we"", ""are"", ""gonna"", ""rock""]),""gonna"");
  assert.deepEqual(candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]),""nation"");
  assert.deepEqual(candidate([""this"", ""is"", ""a"", ""prrk""]),""this"");
  assert.deepEqual(candidate([""b""]),""b"");
  assert.deepEqual(candidate([""play"", ""play"", ""play""]),""play"");
}

test();"
HumanEval_159,kas_Arab,ts,"//مثال: ٕ//اگر یِہ کٲم چھ نہٕ مکمل طورس پیٹھ مکمل کٔرمٕژ تہٕ اگر یِہ کٲم تمام گیہٕ ختم تہٕ تیلہٕ ہکو، تاہم ییہٕ کٲم جٲری تھٲوِتھ۔//کھینچِ پیٹھہٕ ژھایہِ ہند تعداد ] //توہہِ گژھہِ [ کھینس پتہٕ کُل کارٹونچ تعداد واپس ینہٕ، //مگر از چھہ تمس نش کھسان، تمس چھہ نہ کانہہ غم گژھان - ""بیاکھ چھہ وۅنۍ کاژرِ ہندس پورہ دوہس منز۔""//توہہ چھوہ اکھ بھوک وول خرگوش، تہٕ توہہ چھوہ گوڈہ ایکہِ مقررہ تعدادس منز گاجر کھینچمت، // >>> eat(5, 6, 10)
// [11, 4]
// >>> eat(4, 8, 9)
// [12, 1]
// >>> eat(1, 10, 10)
// [11, 0]
// >>> eat(2, 11, 5)
// [7, 0]
// Variables:
// @number : integer
// the number of carrots that you have eaten.
// @need : integer
// the number of carrots that you need to eat.
// @remaining : integer
// the number of remaining carrots thet exist in stock
// Constrain:
// * 0 <= number <= 1000
// * 0 <= need <= 1000
// * 0 <= remaining <= 1000
// Have fun :)
function eat(number: number, need: number, remaining: number): number[] {
","function eat(number: number, need: number, remaining: number): number[] {
    const totalEaten = number + Math.min(need, remaining);
    const carrotsLeft = Math.max(remaining - need, 0);
    return [totalEaten, carrotsLeft];
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = eat;
  assert.deepEqual(candidate(5, 6, 10),[11, 4]);
  assert.deepEqual(candidate(4, 8, 9),[12, 1]);
  assert.deepEqual(candidate(1, 10, 10),[11, 0]);
  assert.deepEqual(candidate(2, 11, 5),[7, 0]);
  assert.deepEqual(candidate(4, 5, 7),[9, 2]);
  assert.deepEqual(candidate(4, 5, 1),[5, 0]);
}

test();"
HumanEval_160,kas_Arab,ts,"//آپریٹر سرنی منٛز چُھ کم کھوتہٕ کم اکھ آپریٹر آسان، تہٕ آپریڈنڈ سرنی منٛز چُھ کم کھوتہٕ کم زٕ آپریڈنڈ آسان۔//اوپیرینڈ چُھ غٲر منفی عددن ہنز اکھ صف۔//آپریٹر آرے ہچ لمبائی چِھ آپریڈنڈ آرے کہ لمبائی منٛگہ اکھ برابر۔//نوٹ: ٕ//=> نتیجہ = 9 //نتیجہ = 2 + 3 * 4 - 5 //صف = [2, 3, 4, 5] //آپریٹر['+'، '*'، '-'] //مثال: ٕ//اِکسپونینٹِیشن (**) ٕ//فرش تقسیم ( // ) ٕ//ضرب (*) ٕ//گھٹاؤ (- ) ٕ//اضافہٕ (+) //بنیادی الجبرا آپریشنز: //اظہار تہٕ امکہٕ اظہارُک تشخیص واپس ییہٕ کرنہٕ۔//دوٚیمہ صفہٕ چِھ عدد کیٛن صفن ہند۔ الجبری بناونہٕ خاطرٕ استعمال کٔرو دۄن دیتمتن صفن //دوٛن صفن ہند آپریٹر تہٕ آپریڈنڈ دینہٕ آمت۔ گۄڈنچ صف چِھ بنیأدی الجبرا آپریشن، تہٕ function do_algebra(operator: string[], operand: number[]): number {
","function do_algebra(operator: string[], operand: number[]): number {
    let expression = operand[0].toString();

    for (let i = 0; i < operator.length; i++) {
        expression += ` ${operator[i]} ${operand[i + 1]}`;
    }

    return Math.floor(eval(expression));
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = do_algebra;
  assert.deepEqual(candidate([""**"", ""*"", ""+""], [2, 3, 4, 5]),37);
  assert.deepEqual(candidate([""+"", ""*"", ""-""], [2, 3, 4, 5]),9);
  assert.deepEqual(candidate([""//"", ""*""], [7, 3, 4]),8);
}

test();"
HumanEval_161,kas_Arab,ts,"//مثالہٕ //فنکشن گژھہٕ نتٲئجُک سٹرنگ رٹرنٛگ دِنہٕ۔//اگر سٹرنگس منٛز کنہہ حرف چُھ نہٕ، سٹرنگس ییہٕ رُجعت کرنہٕ۔//بصورت دیگر یہٕ چُھ اتھ حالتس منٛز ییہٕ برقرار تھونہٕ۔//اگر s[i] اکھ حَرٕف چُھ، تہٕ چُھ پیٛوٛٹھہٕ ہیرٕ پیٹھہٕ بۄن ہاوٕن یا امہٕ برعکس۔//توہہ چھا اکھ جملہ یتھہ پاٹھۍ دِنہ آمت۔// >>> solve(""1234"")
// ""4321""
// >>> solve(""ab"")
// ""AB""
// >>> solve(""#a@C"")
// ""#A@c""
function solve(s: string): string {
","function solve(s: string): string {
    let hasLetter = /[a-zA-Z]/.test(s);
    if (hasLetter) {
        return s.split('').map(char => {
            if (/[a-z]/.test(char)) {
                return char.toUpperCase();
            } else if (/[A-Z]/.test(char)) {
                return char.toLowerCase();
            } else {
                return char;
            }
        }).join('');
    } else {
        return s.split('').reverse().join('');
    }
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = solve;
  assert.deepEqual(candidate(""AsDf""),""aSdF"");
  assert.deepEqual(candidate(""1234""),""4321"");
  assert.deepEqual(candidate(""ab""),""AB"");
  assert.deepEqual(candidate(""#a@C""),""#A@c"");
  assert.deepEqual(candidate(""#AsdfW^45""),""#aSDFw^45"");
  assert.deepEqual(candidate(""#6@2""),""2@6#"");
  assert.deepEqual(candidate(""#$a^D""),""#$A^d"");
  assert.deepEqual(candidate(""#ccc""),""#CCC"");
}

test();"
HumanEval_162,kas_Arab,ts,"//اگر 'ٹیکسٹ' چُھ اکھ خٲلی سٹرنگ، تیلہٕ چُھ ریٹرن ڈیفینیڈ۔//اکھ سٹرنگ 'ٹیکسٹ' دنہٕ آمژ، امچ md5 ہیش مساوی سٹرنگ پٔدٕ کٔرِتھ۔ // >>> string_to_md5(""Hello world"")
// ""3e25960a79dbc69b674cd4ec67a72c62""
function string_to_md5(text: string): string | undefined {
","import * as crypto from 'crypto';

function string_to_md5(text: string): string | undefined {
    if (text === """") {
        return undefined;
    }
    return crypto.createHash('md5').update(text).digest('hex');
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = string_to_md5;
  assert.deepEqual(candidate(""Hello world""),""3e25960a79dbc69b674cd4ec67a72c62"");
  assert.deepEqual(candidate(""""),undefined);
  assert.deepEqual(candidate(""A B C""),""0ef78513b0cb8cef12743f5aeb35f888"");
  assert.deepEqual(candidate(""password""),""5f4dcc3b5aa765d61d8327deb882cf99"");
}

test();"
HumanEval_163,kas_Arab,ts,"//مثالہٕ پٲٹھۍ: //تہٕ b، زیٹھہٕ زیٹھہٕ ترتیب سان۔ //زٕ مثبت عدد a تہٕ b یوتام زٕ عدد a تہٕ b ییہٕ دِنہٕ، a تہٕ b ہس درمیان عددُک even عدد چُھ واپس کران۔// >>> generate_integers(2, 8)
// [2, 4, 6, 8]
// >>> generate_integers(8, 2)
// [2, 4, 6, 8]
// >>> generate_integers(10, 14)
// []
function generate_integers(a: number, b: number): number[] {
","function generate_integers(a: number, b: number): number[] {
    let result: number[] = [];
    
    // Get starting and ending points in sorted order
    let start = Math.min(a, b);
    let end = Math.max(a, b);
    
    // Loop through the range
    for (let i = start; i <= end; i++) {
        if (i % 2 === 0) {  // Check if the digit is even
            result.push(i);
        }
    }
    
    return result;
}","declare var require: any;
const assert = require('node:assert');


function test() {
  let candidate = generate_integers;
  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);
  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);
  assert.deepEqual(candidate(17, 89),[]);
}

test();"
