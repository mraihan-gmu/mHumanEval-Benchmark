task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,tir_Ethi,hs,"--ዝተወሰነ መጠን --ኣብ ዝርዝር ቁጽሪ፡ ካብ ኡ ንላዕሊ ዝቀራረቡ ክልተ ቁጽሪታት ኣለዉ ዶ?--  >>> hasCloseElements [1.0,2.0,3.0] 0.5
--  False
--  >>> hasCloseElements [1.0,2.8,3.0,4.0,5.0,2.0] 0.3
--  True
hasCloseElements :: [Float] -> Float -> Bool
hasCloseElements numbers threshold =","hasCloseElements :: [Float] -> Float -> Bool
hasCloseElements numbers threshold = any (\(x,y) -> abs (x - y) < threshold) [(a, b) | a <- numbers, b <- numbers, a /= b]","
main :: IO ()
main = do
  let candidate = hasCloseElements
  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] 0.3 == True then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] 0.05 == False then pure () else error ""assertion failed""
  if candidate [1.0,2.0,5.9,4.0,5.0] 0.95 == True then pure () else error ""assertion failed""
  if candidate [1.0,2.0,5.9,4.0,5.0] 0.8 == False then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0,2.0] 0.1 == True then pure () else error ""assertion failed""
  if candidate [1.1,2.2,3.1,4.1,5.1] 1.0 == True then pure () else error ""assertion failed""
  if candidate [1.1,2.2,3.1,4.1,5.1] 0.5 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_1,tir_Ethi,hs,"--ኣብ ናይ ምእታው ሕብረ-መዳዊ (string) ዘሎ ክፍተት (spaces) ዕሽሽ በል።--ዝተፈላለዩ ጉጅለታት ሚዛን ኣለዎም (ነፍሲ ወከፍ ዝተኸፈተ ሓጹር ብግቡእ ተዓጽዩ) ፡ ኣብ ውሽጢ ሕድሕዶም ድማ ኣይሽፍኑን።--ነዞም ጉጅለታት ኣብ ዝተፈላለዩ ሕብረ-ቁጽሪታት ኣከፋፍሎም፡ ዝርዝር ናይዞም ዝስዕቡ ድማ ተመሊሱ።--ናይዚ ተግባር ኣታዊ ናይ ዝተሓዋወሰ ናይ ጥርናፈታት ብዙሕ ጉጅለታት ዝሓዘ ናይ ሕብረ-ሰረታት መስመር እዩ። እቲ ዕላማኻ --  >>> separateParenGroups ""( ) (( )) (( )( ))""
--  [""()"",""(())"",""(()())""]
separateParenGroups :: String -> [String]
separateParenGroups paren_string =","separateParenGroups :: String -> [String]
separateParenGroups paren_string = go paren_string 0 [] """" []
  where
    go [] _ _ current acc = if null current then acc else acc ++ [current]
    go (x:xs) depth stack current acc
      | x == ' ' = go xs depth stack current acc
      | x == '(' = go xs (depth + 1) ('(':stack) (current ++ [x]) acc
      | x == ')' =
          let newCurrent = current ++ [x]
              newDepth = depth - 1
          in if newDepth == 0
             then go xs newDepth (tail stack) """" (acc ++ [newCurrent])
             else go xs newDepth (tail stack) newCurrent acc
      | otherwise = error ""Unexpected character""","
main :: IO ()
main = do
  let candidate = separateParenGroups
  if candidate ""(()()) ((())) () ((())()())"" == [""(()())"",""((()))"",""()"",""((())()())""] then pure () else error ""assertion failed""
  if candidate ""() (()) ((())) (((())))"" == [""()"",""(())"",""((()))"",""(((())))""] then pure () else error ""assertion failed""
  if candidate ""(()(())((())))"" == [""(()(())((())))""] then pure () else error ""assertion failed""
  if candidate ""( ) (( )) (( )( ))"" == [""()"",""(())"",""(()())""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_2,tir_Ethi,hs,"--ነቲ ዓሰርተዊ ክፋል ናይቲ ቁጽሪ ተመሊሱ።--(ዝተረፈ ክፋል ኩሉ ግዜ ካብ 1 ትሕት እዩ።)--ከምኡ'ውን ናይ ምሉእ ቁጽሪ ክፋል (ካብ ዝተዋህበ ቁጽሪ ዝነኣሰ ዝዓበየ ምሉእ ቁጽሪ) ከምኡ'ውን ናይ ዓሰርተታት --❑ ኣወንታዊ ዝኾነ ናይ ፍሎቲንግ ፖይንት ቁጽሪ እንተሃሊዩ፡ ናብ--  >>> truncateNumber 3.5
--  0.5
truncateNumber :: Float -> Float
truncateNumber number =","truncateNumber :: Float -> Float
truncateNumber number = number - fromIntegral (floor number)","
main :: IO ()
main = do
  let candidate = truncateNumber
  if candidate 3.5 == 0.5 then pure () else error ""assertion failed""
  if candidate 1.25 == 0.25 then pure () else error ""assertion failed""
  if candidate 123.0 == 0.0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_3,tir_Ethi,hs,"--ኣብ'ዚ እዋን'ዚ እቲ ተግባር True ክመልስ ኣለዎ። እንተዘይኮይኑ ድማ False ክመልስ ኣለዎ።--ናይ ባንኪ ሚዛን ካብ ዜሮ ንታሕቲ እንተወደቐ ክትፈልጥ ኣለካ።--ኣብ ባንክ ሒሳብ ናይ ምእታውን ምውጻእን ስርሓት ዝርዝር ተዋሂቡካ ኣሎ ብ--  >>> belowZero [1,2,3]
--  False
--  >>> belowZero [1,2,(-4),5]
--  True
belowZero :: [Int] -> Bool
belowZero operations =","belowZero :: [Int] -> Bool
belowZero operations = any (< 0) $ scanl (+) 0 operations","
main :: IO ()
main = do
  let candidate = belowZero
  if candidate [] == False then pure () else error ""assertion failed""
  if candidate [1,2,(-3),1,2,(-3)] == False then pure () else error ""assertion failed""
  if candidate [1,2,(-4),5,6] == True then pure () else error ""assertion failed""
  if candidate [1,(-1),2,(-2),5,(-5),4,(-4)] == False then pure () else error ""assertion failed""
  if candidate [1,(-1),2,(-2),5,(-5),4,(-5)] == True then pure () else error ""assertion failed""
  if candidate [1,(-2),2,(-2),5,(-5),4,(-4)] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_4,tir_Ethi,hs,"--MAD = ማእከላይ ∙ x - x_mean ∙--ሓደ ማእከላይ ነጥቢ (ኣብዚ ጉዳይ እዚ ማእከላይ ነጥቢ) --እቲ ማእኸላይ ፍፁም ፍልልይ ድማ እቲ ማእኸላይ ፍፁም ፍልልይ ኣብ ሞንጎ ክልቲኦም --ኣብ ከባቢ እዚ ናይ ዳታ ሰተት ማእኸላይ --ንናይ ሓደ ዝርዝር ናይ ኣታዊ ቁጽሪ፡ ማእከላይ ፍጹም ኣፈላላይ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ ቑጽሪ ኣሃዛዊ--  >>> meanAbsoluteDeviation [1.0,2.0,3.0,4.0]
--  1.0
meanAbsoluteDeviation :: [Float] -> Float
meanAbsoluteDeviation numbers =","meanAbsoluteDeviation :: [Float] -> Float
meanAbsoluteDeviation numbers = sum absoluteDifferences / fromIntegral (length numbers)
  where
    mean = sum numbers / fromIntegral (length numbers)
    absoluteDifferences = map (\x -> abs (x - mean)) numbers","
main :: IO ()
main = do
  let candidate = meanAbsoluteDeviation
  if candidate [1.0,2.0] == 0.5 then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0] == 1.0 then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0] == 1.2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_5,tir_Ethi,hs,"--ኣብ መንጎ ክልተ ተኸታተልቲ ባእታታት ናይ መእተዊ ዝርዝር ≠numbers' ቑጽሪ 'delimeter' ትእቱ።--  >>> intersperse [] 4
--  []
--  >>> intersperse [1,2,3] 4
--  [1,4,2,4,3]
intersperse :: [Int] -> Int -> [Int]
intersperse numbers delimeter =","intersperse :: [Int] -> Int -> [Int]
intersperse [] _ = []
intersperse [x] _ = [x]
intersperse (x:xs) delimeter = x : delimeter : intersperse xs delimeter","
main :: IO ()
main = do
  let candidate = intersperse
  if candidate [] 7 == [] then pure () else error ""assertion failed""
  if candidate [5,6,3,2] 8 == [5,8,6,8,3,8,2] then pure () else error ""assertion failed""
  if candidate [2,2,2] 2 == [2,2,2,2,2] then pure () else error ""assertion failed""
  pure ()"
HumanEval_6,tir_Ethi,hs,"--ንኣብነት (() (()) ብብዝሒ ክልተ ደረጃታት ናይ ምጥርናፍ ክህልዎ እንከሎ ((())) ግን ሰለስተ ኣለዎ።--ንነፍሲ ወከፍ ጉጅለ፡ እቲ ዝነውሐ ደረጃ ናይ ሓረግ ናይ ሕቝፊታት ኣውጽእ።-- ናይዚ ተግባር ኣታዊ ናይ ብዙሕ ጉጅለታት ዝዉክል ናይ ሕብሪ ሓረግ እዩ ብቦታታት ዝተፈልየ--  >>> parseNestedParens ""(()()) ((())) () ((())()())""
--  [2,3,1,3]
parseNestedParens :: String -> [Int]
parseNestedParens paren_string =","parseNestedParens :: String -> [Int]
parseNestedParens paren_string = map maxDepth (words paren_string)
  where
    maxDepth :: String -> Int
    maxDepth = go 0 0
      where
        go :: Int -> Int -> String -> Int
        go currentDepth maxDepth [] = maxDepth
        go currentDepth maxDepth (c:cs)
          | c == '('  = go (currentDepth + 1) (max currentDepth maxDepth) cs
          | c == ')'  = go (currentDepth - 1) maxDepth cs
          | otherwise = go currentDepth maxDepth cs","
main :: IO ()
main = do
  let candidate = parseNestedParens
  if candidate ""(()()) ((())) () ((())()())"" == [2,3,1,3] then pure () else error ""assertion failed""
  if candidate ""() (()) ((())) (((())))"" == [1,2,3,4] then pure () else error ""assertion failed""
  if candidate ""(()(())((())))"" == [4] then pure () else error ""assertion failed""
  pure ()"
HumanEval_7,tir_Ethi,hs,"--❑ ንናይ ትሕዝቶ ዝርዝር ናይ ገመድ ጥራይ ነቲ ዝተዋህበ ንኡስ ገመድ ፈልተር--  >>> filterBySubstring [] ""a""
--  []
--  >>> filterBySubstring [""abc"",""bacd"",""cde"",""array""] ""a""
--  [""abc"",""bacd"",""array""]
filterBySubstring :: [String] -> String -> [String]
filterBySubstring strings substring =","filterBySubstring :: [String] -> String -> [String]
filterBySubstring strings substring = filter (substring `isInfixOf`) strings
  where isInfixOf = isInfixOf","
main :: IO ()
main = do
  let candidate = filterBySubstring
  if candidate [] ""john"" == [] then pure () else error ""assertion failed""
  if candidate [""xxx"",""asd"",""xxy"",""john doe"",""xxxAAA"",""xxx""] ""xxx"" == [""xxx"",""xxxAAA"",""xxx""] then pure () else error ""assertion failed""
  if candidate [""xxx"",""asd"",""aaaxxy"",""john doe"",""xxxAAA"",""xxx""] ""xx"" == [""xxx"",""aaaxxy"",""xxxAAA"",""xxx""] then pure () else error ""assertion failed""
  if candidate [""grunt"",""trumpet"",""prune"",""gruesome""] ""run"" == [""grunt"",""prune""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_8,tir_Ethi,hs,"--ባዶ ድምር 0 ክኸውን ኣለዎ ባዶ ፍርያት ድማ 1 ክኸውን ኣለዎ።--❑ ን ዝርዝር ምሉእ ቁጽሪ፡ ድምርን ፍርያት ናይ ኩሎም ኣብ ዝርዝር ዘለዉ ምሉእ ቁጽሪታት ዝሓዘ ትፕል ተመሊሱ።--  >>> sumProduct []
--  (0, 1)
--  >>> sumProduct [1,2,3,4]
--  (10, 24)
sumProduct :: [Int] -> (Int, Int)
sumProduct numbers =","sumProduct :: [Int] -> (Int, Int)
sumProduct numbers = (sum numbers, product numbers)","
main :: IO ()
main = do
  let candidate = sumProduct
  if candidate [] == (0, 1) then pure () else error ""assertion failed""
  if candidate [1,1,1] == (3, 1) then pure () else error ""assertion failed""
  if candidate [100,0] == (100, 0) then pure () else error ""assertion failed""
  if candidate [3,5,7] == (15, 105) then pure () else error ""assertion failed""
  if candidate [10] == (10, 10) then pure () else error ""assertion failed""
  pure ()"
HumanEval_9,tir_Ethi,hs,"--ኣብ ቅደም-ተከተል--ካብ ዝተዋህበ ዝርዝር ናይ ምሉእ ቁጽሪታት ክሳብ ዝተዋህበ ግዜ ዝተረኽበ ዝለዓለ ቁጽሪ ናይ ዝተዋህበ ዝርዝር ኣዳልዩ።--  >>> rollingMax [1,2,3,2,3,4,2]
--  [1,2,3,3,3,4,4]
rollingMax :: [Int] -> [Int]
rollingMax numbers =","rollingMax :: [Int] -> [Int]
rollingMax = scanl1 max","
main :: IO ()
main = do
  let candidate = rollingMax
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,2,3,4] == [1,2,3,4] then pure () else error ""assertion failed""
  if candidate [4,3,2,1] == [4,4,4,4] then pure () else error ""assertion failed""
  if candidate [3,2,3,100,3] == [3,3,3,100,100] then pure () else error ""assertion failed""
  pure ()"
HumanEval_10,tir_Ethi,hs,"--- ኣብ መወዳእታ ናይቲ ሕብረ-ቁጽሪ፡ ቅድሚ እቲ ፓሊንድሮም (palindromic) ዝብሃል መቐጸልታ ዘሎ ሕብረ-ቁጽሪ፡ ግደፍ።--- እቲ ዝነውሐ ናይ ፓሊንድሮም ዝኾነ ናይ ዝተዋህበ ሕብረቁምፊ ፐስትፊክስ ርኸብ።--ኣሊጎሪዝም ሓሳብ ቀሊል እዩ: --❑ እቲ ብቲ ዝተዋህበካ ሕብረ-ቁጽሪ ዝጅምር ሓጺር ፓሊንድሮም ድለ--  >>> makePalindrome """"
--  """"
--  >>> makePalindrome ""cat""
--  ""catac""
--  >>> makePalindrome ""cata""
--  ""catac""
makePalindrome :: String -> String
makePalindrome string =","makePalindrome :: String -> String
makePalindrome string = string ++ reverse (take (length string - palindromeLength) string)
  where
    palindromeLength = longestPalindromicSuffix string

longestPalindromicSuffix :: String -> Int
longestPalindromicSuffix str = maximum [l | l <- [0..length str], isPalindrome (drop l str)]

isPalindrome :: String -> Bool
isPalindrome s = s == reverse s","
main :: IO ()
main = do
  let candidate = makePalindrome
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""x"" == ""x"" then pure () else error ""assertion failed""
  if candidate ""xyz"" == ""xyzyx"" then pure () else error ""assertion failed""
  if candidate ""xyx"" == ""xyx"" then pure () else error ""assertion failed""
  if candidate ""jerry"" == ""jerryrrej"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_11,tir_Ethi,hs,"--ኣብዞም ኣታዊታት ባይናሪ XOR ግበር ከምኡ'ውን ውጽኢት ከም ሕብረ-ቁጽሪ ተመሊሱ።-- ኣታዊ ክልተ ሕብረ-ቁጽሪ aን bን እዮም፡ ካብ 1ታትን 0ታትን ጥራይ ዝቖሙ።--  >>> stringXor ""010"" ""110""
--  ""100""
stringXor :: String -> String -> String
stringXor a b =","stringXor :: String -> String -> String
stringXor a b = [if x == y then '0' else '1' | (x, y) <- zip a b]","
main :: IO ()
main = do
  let candidate = stringXor
  if candidate ""111000"" ""101010"" == ""010010"" then pure () else error ""assertion failed""
  if candidate ""1"" ""1"" == ""0"" then pure () else error ""assertion failed""
  if candidate ""0101"" ""0000"" == ""0101"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_12,tir_Ethi,hs,"--እቲ ናይ ምእታው ዝርዝር ባዶ እንተኾይኑ፡ ምንም ኣይምለስን እዩ።--ካብ ዝርዝር ሕብረ-ቁጽሪታት እቲ ዝነውሐ ሕብረ-ቁጽሪ ተመሊሱ ይመጽእ። እቲ ቀዳማይ ሕብረ-ቁጽሪ እንተድኣ ብዙሕ ኮይኑ ተመሊሱ ይመጽእ።--  >>> longest []
--  Just (Nothing)
--  >>> longest [""a"",""b"",""c""]
--  Just (""a"")
--  >>> longest [""a"",""bb"",""ccc""]
--  Just (""ccc"")
longest :: [String] -> Maybe String
longest strings =","longest :: [String] -> Maybe String
longest [] = Nothing
longest strings = Just $ foldl1 (\acc x -> if length x > length acc then x else acc) strings","
main :: IO ()
main = do
  let candidate = longest
  if candidate [] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [""x"",""y"",""z""] == Just (""x"") then pure () else error ""assertion failed""
  if candidate [""x"",""yyy"",""zzzz"",""www"",""kkkk"",""abc""] == Just (""zzzz"") then pure () else error ""assertion failed""
  pure ()"
HumanEval_13,tir_Ethi,hs,"--ናይ aን bን ክልተ ምሉእ ቁጽሪታት ዝዓበየ ሓባራዊ ኣካፋይ ተመሊሱ ይምጻእ--  >>> greatestCommonDivisor 3 5
--  1
--  >>> greatestCommonDivisor 25 15
--  5
greatestCommonDivisor :: Int -> Int -> Int
greatestCommonDivisor a b =","greatestCommonDivisor :: Int -> Int -> Int
greatestCommonDivisor a b
  | b == 0    = a
  | otherwise = greatestCommonDivisor b (a `mod` b)","
main :: IO ()
main = do
  let candidate = greatestCommonDivisor
  if candidate 3 7 == 1 then pure () else error ""assertion failed""
  if candidate 10 15 == 5 then pure () else error ""assertion failed""
  if candidate 49 14 == 7 then pure () else error ""assertion failed""
  if candidate 144 60 == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_14,tir_Ethi,hs,"--❑ ካብ ሓጺር ክሳብ ነዊሕ ናይ ናይ ኣታዊ ሕብረ-መደብ ዝርዝር ይመልስ።--  >>> allPrefixes ""abc""
--  [""a"",""ab"",""abc""]
allPrefixes :: String -> [String]
allPrefixes string =","allPrefixes :: String -> [String]
allPrefixes string = [take n string | n <- [1 .. length string]]","
main :: IO ()
main = do
  let candidate = allPrefixes
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""asdfgh"" == [""a"",""as"",""asd"",""asdf"",""asdfg"",""asdfgh""] then pure () else error ""assertion failed""
  if candidate ""WWW"" == [""W"",""WW"",""WWW""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_15,tir_Ethi,hs,"--❑ ካብ 0 ክሳብ n ዝርከቡ ኣብ ቦታ ዝተሓጽሩ ቁጽሪታት ዝሓዘ ሕብረቁጽሪ ይመልስ።--  >>> stringSequence 0
--  ""0""
--  >>> stringSequence 5
--  ""0 1 2 3 4 5""
stringSequence :: Int -> String
stringSequence n =","stringSequence :: Int -> String
stringSequence n = unwords $ map show [0..n]","
main :: IO ()
main = do
  let candidate = stringSequence
  if candidate 0 == ""0"" then pure () else error ""assertion failed""
  if candidate 3 == ""0 1 2 3"" then pure () else error ""assertion failed""
  if candidate 10 == ""0 1 2 3 4 5 6 7 8 9 10"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_16,tir_Ethi,hs,"--❑ ሓደ ሕብረ-ቁጽሪ ተዋሂቡካ፡ ክንደይ ፍሉያት ፊደላት (ብዘይ ኣፈላላይ) ከምዘለዎ ፍለጥ።--  >>> countDistinctCharacters ""xyzXYZ""
--  3
--  >>> countDistinctCharacters ""Jerry""
--  4
countDistinctCharacters :: String -> Int
countDistinctCharacters string =","import Data.Char (toLower)
import Data.Set (fromList, size)

countDistinctCharacters :: String -> Int
countDistinctCharacters string = size . fromList $ map toLower string","
main :: IO ()
main = do
  let candidate = countDistinctCharacters
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""abcde"" == 5 then pure () else error ""assertion failed""
  if candidate ""abcdecadeCADE"" == 5 then pure () else error ""assertion failed""
  if candidate ""aaaaAAAAaaaa"" == 1 then pure () else error ""assertion failed""
  if candidate ""Jerry jERRY JeRRRY"" == 5 then pure () else error ""assertion failed""
  pure ()"
HumanEval_17,tir_Ethi,hs,"--'ሃይኪ' - ናይ ርብዒ ድምጺ፡ ንሓደ ቅብጸት ይጸንሕ።--'ኦ ዳክዬ' - ፍርቂ ኖት፡ ክልተ ቅብጸት ይወስድ።--'ኦ' - ምሉእ ኖት፡ ኣርባዕተ ቅብጸታት ይወስድ።--ሓደ ጽውጽዋይ ኣሎ:--መወዳእታ ኣይኰነን።--ናይዚ መስርዕ እዚ መረዳእታ ክትገብርን ነቲ ነፍሲ ወከፍ ክንደይ ግዜ ከም ዝድፍእ ዝገልጽ ዝርዝር ናይ ምሉእ ኣሃዛት ክትመልስን ኣለካ።-- ናይዚ ተግባር ኣታዊ ናይ ሙዚቃ ኖታታት ዝገልጽ ናይ ሕብረቁምፊ ሕብረቁምፊ እዩ ፍሉይ ናይ ASCII ቅርጺ። --  >>> parseMusic ""o o| .| o| o| .| .| .| .| o o""
--  [4,2,1,2,2,1,1,1,1,4,4]
parseMusic :: String -> [Int]
parseMusic music_string =","parseMusic :: String -> [Int]
parseMusic music_string = map beats (words music_string)
  where
    beats ""o"" = 4
    beats ""o|"" = 2
    beats "".|"" = 1
    beats _ = 0","
main :: IO ()
main = do
  let candidate = parseMusic
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""o o o o"" == [4,4,4,4] then pure () else error ""assertion failed""
  if candidate "".| .| .| .|"" == [1,1,1,1] then pure () else error ""assertion failed""
  if candidate ""o| o| .| .| o o o o"" == [2,2,1,1,4,4,4,4] then pure () else error ""assertion failed""
  if candidate ""o| .| o| .| o o| o o|"" == [2,1,2,1,4,2,4,2] then pure () else error ""assertion failed""
  pure ()"
HumanEval_18,tir_Ethi,hs,"--❑ ኣብ'ቲ ናይ መጀመርታ ሕብረ-ሰረታት ክንደይ ግዜ ከም ዘሎ ፍለጥ።--  >>> howManyTimes """" ""a""
--  0
--  >>> howManyTimes ""aaa"" ""a""
--  3
--  >>> howManyTimes ""aaaa"" ""aa""
--  3
howManyTimes :: String -> String -> Int
howManyTimes string substring =","howManyTimes :: String -> String -> Int
howManyTimes string substring
  | null substring = 0
  | otherwise = length . filter isPrefixOfSubstring $ tails string
  where
    isPrefixOfSubstring = isPrefixOf substring
    isPrefixOf :: Eq a => [a] -> [a] -> Bool
    isPrefixOf prefix str = prefix `isPrefixOf` str","
main :: IO ()
main = do
  let candidate = howManyTimes
  if candidate """" ""x"" == 0 then pure () else error ""assertion failed""
  if candidate ""xyxyxyx"" ""x"" == 4 then pure () else error ""assertion failed""
  if candidate ""cacacacac"" ""cac"" == 4 then pure () else error ""assertion failed""
  if candidate ""john doe"" ""john"" == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_19,tir_Ethi,hs,"--ካብ ዝነኣሰ ናብ ዝዓበየ ዝተመደበ ቁጽሪ ዘለዎ ሕብረ-መረብ ይመልስ።--ቅቡላት ምርጫታት 'ዜሮ'፣ 'ሓደ'፣ 'ክልተ'፣ 'ሰለስተ'፣ 'ኣርባዕተ'፣ 'ሓሙሽተ'፣ 'ሽዱሽተ'፣ 'ሸውዓተ'፣ 'ሸሞንተ' ከምኡ'ውን 'ትሽዓተ' እዮም።-- ናይ ኣታዊ ቁጽሪ ካብ 'ዜሮ' ክሳብ 'ትሽዓተ' ዝኾኑ ቁጽሪታት ዝሓዘ ናይ ቦታ-ተወሰነ ሰንሰለት እዩ።--  >>> sortNumbers ""three one five""
--  ""one three five""
sortNumbers :: String -> String
sortNumbers numbers =","import Data.List (sort)
import Data.Maybe (fromJust)
import Data.Map (Map, fromList, lookup)

sortNumbers :: String -> String
sortNumbers numbers = unwords $ map snd $ sort $ map (\w -> (fromJust $ lookup w wordToNumber, w)) (words numbers)
  where
    wordToNumber :: Map String Int
    wordToNumber = fromList [(""zero"", 0), (""one"", 1), (""two"", 2), (""three"", 3), (""four"", 4),
                             (""five"", 5), (""six"", 6), (""seven"", 7), (""eight"", 8), (""nine"", 9)]","
main :: IO ()
main = do
  let candidate = sortNumbers
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""three"" == ""three"" then pure () else error ""assertion failed""
  if candidate ""three five nine"" == ""three five nine"" then pure () else error ""assertion failed""
  if candidate ""five zero four seven nine eight"" == ""zero four five seven eight nine"" then pure () else error ""assertion failed""
  if candidate ""six five four three two one zero"" == ""zero one two three four five six"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_20,tir_Ethi,hs,"--ብቅደም ተኸተል (ዝነኣሰ ቁጽሪ፡ ዝዓበየ ቁጽሪ) ተመሊሶም ይረኽቡ።--❑ ካብ ዝተዋህበ ዝርዝር ቁጽሪ (ብውሑዱ ክልተ) ፡ ነቲ ንነፍሲ ወከፍ ዝቐረበ ክልተ ምረጽ እሞ ተመሊስካ ምሃብ--  >>> findClosestElements [1.0,2.0,3.0,4.0,5.0,2.2]
--  (2.0, 2.2)
--  >>> findClosestElements [1.0,2.0,3.0,4.0,5.0,2.0]
--  (2.0, 2.0)
findClosestElements :: [Float] -> (Float, Float)
findClosestElements numbers =","findClosestElements :: [Float] -> (Float, Float)
findClosestElements numbers = head . foldr1 minByDiff $ zip sortedNumbers (tail sortedNumbers)
  where
    sortedNumbers = sort numbers
    minByDiff (a1, b1) (a2, b2)
      | abs (a1 - b1) < abs (a2 - b2) = (a1, b1)
      | otherwise = (a2, b2)","
main :: IO ()
main = do
  let candidate = findClosestElements
  if candidate [1.0,2.0,3.9,4.0,5.0,2.2] == (3.9, 4.0) then pure () else error ""assertion failed""
  if candidate [1.0,2.0,5.9,4.0,5.0] == (5.0, 5.9) then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0,2.2] == (2.0, 2.2) then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0,2.0] == (2.0, 2.0) then pure () else error ""assertion failed""
  if candidate [1.1,2.2,3.1,4.1,5.1] == (2.2, 3.1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_21,tir_Ethi,hs,"--እቲ ዝነኣሰ ቁጽሪ 0 ክኸውን ከሎ እቲ ዝዓበየ ድማ 1 ክኸውን እዩ።--❑ ዝርዝር ቁጽሪ (ብውሑዱ ክልተ ረቛሒታት) ፡ ነቲ ዝርዝር ሓደ መስመራዊ ትራንስፎርሜሽን ተግብር፣--  >>> rescaleToUnit [1.0,2.0,3.0,4.0,5.0]
--  [0.0,0.25,0.5,0.75,1.0]
rescaleToUnit :: [Float] -> [Float]
rescaleToUnit numbers =","rescaleToUnit :: [Float] -> [Float]
rescaleToUnit numbers = map (\x -> (x - minVal) / range) numbers
  where
    minVal = minimum numbers
    maxVal = maximum numbers
    range = maxVal - minVal","
main :: IO ()
main = do
  let candidate = rescaleToUnit
  if candidate [2.0,49.9] == [0.0,1.0] then pure () else error ""assertion failed""
  if candidate [100.0,49.9] == [1.0,0.0] then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0,4.0,5.0] == [0.0,0.25,0.5,0.75,1.0] then pure () else error ""assertion failed""
  if candidate [2.0,1.0,5.0,3.0,4.0] == [0.25,0.0,1.0,0.5,0.75] then pure () else error ""assertion failed""
  if candidate [12.0,11.0,15.0,13.0,14.0] == [0.25,0.0,1.0,0.5,0.75] then pure () else error ""assertion failed""
  pure ()"
HumanEval_23,tir_Ethi,hs,"--ንውሓት ናይቲ ዝተዋህበ ሕብረ-መረብ ይመልስ።--  >>> strlen """"
--  0
--  >>> strlen ""abc""
--  3
strlen :: String -> Int
strlen string =","strlen :: String -> Int
strlen string = length string","
main :: IO ()
main = do
  let candidate = strlen
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""x"" == 1 then pure () else error ""assertion failed""
  if candidate ""asdasnakj"" == 9 then pure () else error ""assertion failed""
  pure ()"
HumanEval_24,tir_Ethi,hs,"--ን n ብዝተዋህበ ቁጽሪ፡ ነቲ ን n ብማዕረ ዝካፈል፡ ካብ n ዝነኣሰ ዝዓበየ ቁጽሪ ድለዮ--  >>> largestDivisor 15
--  5
largestDivisor :: Int -> Int
largestDivisor n =","largestDivisor :: Int -> Int
largestDivisor n = head [ x | x <- [n-1, n-2..1], n `mod` x == 0 ]","
main :: IO ()
main = do
  let candidate = largestDivisor
  if candidate 3 == 1 then pure () else error ""assertion failed""
  if candidate 7 == 1 then pure () else error ""assertion failed""
  if candidate 10 == 5 then pure () else error ""assertion failed""
  if candidate 100 == 50 then pure () else error ""assertion failed""
  if candidate 49 == 7 then pure () else error ""assertion failed""
  pure ()"
HumanEval_25,tir_Ethi,hs,"--እቲ ናይ ምእታው ቁጽሪ ምስ ናይ ኩሎም ረቛሒታት ፍርያት ማዕረ ክኸውን ኣለዎ--ነፍሲ ወከፍ ረቛሒታት ኣብ ረቛሒታት ምስ ዝርከባ ኣሃዛት ዝመጣጠን ብዝሒ ግዜ ክዝርዝሩ ኣለዎም።--❑ ዝርዝር ናይቶም ካብ ንእሽቶ ክሳብ ዝዓበየ ብዝተዋደደ ቅደም-ተከተል ናይቶም ዝተዋህቡ ናይ ምሉእ ቁጽሪ ቀዳማይ ረቛሒታት ይመልስ።--  >>> factorize 8
--  [2,2,2]
--  >>> factorize 25
--  [5,5]
--  >>> factorize 70
--  [2,5,7]
factorize :: Int -> [Int]
factorize n =","factorize :: Int -> [Int]
factorize n = factorize' n 2
  where
    factorize' 1 _ = []
    factorize' m f
      | m `mod` f == 0 = f : factorize' (m `div` f) f
      | otherwise      = factorize' m (f + 1)","
main :: IO ()
main = do
  let candidate = factorize
  if candidate 2 == [2] then pure () else error ""assertion failed""
  if candidate 4 == [2,2] then pure () else error ""assertion failed""
  if candidate 8 == [2,2,2] then pure () else error ""assertion failed""
  if candidate 57 == [3,19] then pure () else error ""assertion failed""
  if candidate 3249 == [3,3,19,19] then pure () else error ""assertion failed""
  if candidate 185193 == [3,3,3,19,19,19] then pure () else error ""assertion failed""
  if candidate 20577 == [3,19,19,19] then pure () else error ""assertion failed""
  if candidate 18 == [2,3,3] then pure () else error ""assertion failed""
  pure ()"
HumanEval_26,tir_Ethi,hs,"--ነቲ ኣብ ናይ ምእታው ቅደም-ተከተል ዘሎ ኣሃዛት ሓደ ዓይነት ጌርካ ሓሉ።--❑ ካብ ዝርዝር ምሉእ ቁጽሪታት፣ ልዕሊ ሓደ ግዜ ዝርከቡ ኩሎም ረቛሒታት ኣርሕቕ።--  >>> removeDuplicates [1,2,3,2,4]
--  [1,3,4]
removeDuplicates :: [Int] -> [Int]
removeDuplicates numbers =","removeDuplicates :: [Int] -> [Int]
removeDuplicates numbers = filter (\x -> count x numbers == 1) numbers
  where
    count x = length . filter (== x)","
main :: IO ()
main = do
  let candidate = removeDuplicates
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,2,3,4] == [1,2,3,4] then pure () else error ""assertion failed""
  if candidate [1,2,3,2,4,3,5] == [1,4,5] then pure () else error ""assertion failed""
  pure ()"
HumanEval_27,tir_Ethi,hs,"--❑ ንተወሰነ ሕብረ-ቁጽሪ፡ ንነኣሽቱ ፊደላት ናብ ዓበይቲ ፊደላት፡ ዓበይቲ ፊደላት ድማ ናብ ነኣሽቱ ፊደላት ምልዋጥ።--  >>> flipCase ""Hello""
--  ""hELLO""
flipCase :: String -> String
flipCase string =","flipCase :: String -> String
flipCase = map flipChar
  where
    flipChar c
      | c >= 'a' && c <= 'z' = toEnum (fromEnum c - 32)
      | c >= 'A' && c <= 'Z' = toEnum (fromEnum c + 32)
      | otherwise = c","
main :: IO ()
main = do
  let candidate = flipCase
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""Hello!"" == ""hELLO!"" then pure () else error ""assertion failed""
  if candidate ""These violent delights have violent ends"" == ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_28,tir_Ethi,hs,"--❑ ዝርዝር ሕብረ-ቁምፊታት ናብ ሓደ ሕብረ-ቁምፊ ኣሳቲፍካ--  >>> concatenate []
--  """"
--  >>> concatenate [""a"",""b"",""c""]
--  ""abc""
concatenate :: [String] -> String
concatenate strings =","concatenate :: [String] -> String
concatenate strings = concat strings","
main :: IO ()
main = do
  let candidate = concatenate
  if candidate [] == """" then pure () else error ""assertion failed""
  if candidate [""x"",""y"",""z""] == ""xyz"" then pure () else error ""assertion failed""
  if candidate [""x"",""y"",""z"",""w"",""k""] == ""xyzwk"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_29,tir_Ethi,hs,"--❑ ነቲ ብቅድመ-ቃላት ዝጅምር ጥራይ ናይ ኣታዊ ዝርዝር ናይ ሕብረ-ቁምፊታት ፍሊተር ግበር።--  >>> filterByPrefix [] ""a""
--  []
--  >>> filterByPrefix [""abc"",""bcd"",""cde"",""array""] ""a""
--  [""abc"",""array""]
filterByPrefix :: [String] -> String -> [String]
filterByPrefix strings prefix =","filterByPrefix strings prefix = filter (isPrefixOf prefix) strings
  where
    isPrefixOf pfx str = take (length pfx) str == pfx","
main :: IO ()
main = do
  let candidate = filterByPrefix
  if candidate [] ""john"" == [] then pure () else error ""assertion failed""
  if candidate [""xxx"",""asd"",""xxy"",""john doe"",""xxxAAA"",""xxx""] ""xxx"" == [""xxx"",""xxxAAA"",""xxx""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_30,tir_Ethi,hs,"--ኣብ ዝርዝር ዘሎ ኣወንታዊ ቁጽሪ ጥራይ ተመሊሱ።--  >>> getPositive [(-1),2,(-4),5,6]
--  [2,5,6]
--  >>> getPositive [5,3,(-5),2,(-3),3,9,0,123,1,(-10)]
--  [5,3,2,3,9,123,1]
getPositive :: [Int] -> [Int]
getPositive l =","getPositive :: [Int] -> [Int]
getPositive l = filter (> 0) l","
main :: IO ()
main = do
  let candidate = getPositive
  if candidate [(-1),(-2),4,5,6] == [4,5,6] then pure () else error ""assertion failed""
  if candidate [5,3,(-5),2,3,3,9,0,123,1,(-10)] == [5,3,2,3,3,9,123,1] then pure () else error ""assertion failed""
  if candidate [(-1),(-2)] == [] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_31,tir_Ethi,hs,"-- ዝተዋህበ ቁጽሪ ቀዳማይ እንተኾይኑ ሓቀኛ ይመልስ፣ እንተዘየለ ድማ ሓሶት ይመልስ።--  >>> isPrime 6
--  False
--  >>> isPrime 101
--  True
--  >>> isPrime 11
--  True
--  >>> isPrime 13441
--  True
--  >>> isPrime 61
--  True
--  >>> isPrime 4
--  False
--  >>> isPrime 1
--  False
isPrime :: Int -> Bool
isPrime n =","isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | n == 2 = True
  | even n = False
  | otherwise = not (any (\x -> n `mod` x == 0) [3,5..floor (sqrt (fromIntegral n))])","
main :: IO ()
main = do
  let candidate = isPrime
  if candidate 6 == False then pure () else error ""assertion failed""
  if candidate 101 == True then pure () else error ""assertion failed""
  if candidate 11 == True then pure () else error ""assertion failed""
  if candidate 13441 == True then pure () else error ""assertion failed""
  if candidate 61 == True then pure () else error ""assertion failed""
  if candidate 4 == False then pure () else error ""assertion failed""
  if candidate 1 == False then pure () else error ""assertion failed""
  if candidate 5 == True then pure () else error ""assertion failed""
  if candidate 11 == True then pure () else error ""assertion failed""
  if candidate 17 == True then pure () else error ""assertion failed""
  if candidate 85 == False then pure () else error ""assertion failed""
  if candidate 77 == False then pure () else error ""assertion failed""
  if candidate 255379 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_33,tir_Ethi,hs,"--ምስ እዘን ዝዛመዳ ጠቋሚታት ናይ l፡ ግን ዝተመደበ።--l' ምስ l ሓደ እዩ ኣብቶም ብ ሰለስተ ዘይምክፋል ዝኽእሉ ኢንዲሲታት፣ ኣብቶም ብ ሰለስተ ዝካፈልዎ ኢንዲሲታት ድማ ማዕረ እዩ።--እዛ ተግባር እዚኣ ሓንቲ ዝርዝር I ትወስድ እሞ ሓንቲ ዝርዝር I ትመልስ።--  >>> sortThird [1,2,3]
--  [1,2,3]
--  >>> sortThird [5,6,3,4,8,9,2]
--  [2,6,3,4,8,9,5]
sortThird :: [Int] -> [Int]
sortThird l =","sortThird :: [Int] -> [Int]
sortThird l = map selectElem indexed
  where
    indexed = zip [0..] l
    thirdIndicesElems = [elem | (i, elem) <- indexed, i `mod` 3 == 0]
    sortedThirdElems = sortedElems thirdIndicesElems
    sortedElems = id -- or List.sort if imported
    selectElem (i, x)
      | i `mod` 3 == 0 = head sortedThirdElems
      | otherwise = x
    replaceSortedElem xs sorted = map selectElem indexed
      where
        replaceElem i (x:xs)
          | i == 0 = x:xs
          | otherwise = replaceElem (i - 1) xs
        selectElem (i, x)
          | i `mod` 3 == 0 = head (replaceElem (i `div` 3) sortedThirdElems)
          | otherwise = x","
main :: IO ()
main = do
  let candidate = sortThird
  if candidate [5,6,3,4,8,9,2] == [2,6,3,4,8,9,5] then pure () else error ""assertion failed""
  if candidate [5,8,3,4,6,9,2] == [2,8,3,4,6,9,5] then pure () else error ""assertion failed""
  if candidate [5,6,9,4,8,3,2] == [2,6,9,4,8,3,5] then pure () else error ""assertion failed""
  if candidate [5,6,3,4,8,9,2,1] == [2,6,3,4,8,9,5,1] then pure () else error ""assertion failed""
  pure ()"
HumanEval_34,tir_Ethi,hs,"--ኣብ ዝርዝር ዝተመደቡ ፍሉያት ባእታታት ይመልስ።--  >>> unique [5,3,5,2,3,3,9,0,123]
--  [0,2,3,5,9,123]
unique :: [Int] -> [Int]
unique l =","unique :: [Int] -> [Int]
unique l = sort $ nub l
  where
    -- | Remove duplicate elements from a list.
    nub :: (Eq a) => [a] -> [a]
    nub [] = []
    nub (x:xs) = x : nub (filter (/= x) xs)

    -- | Sort a list of elements (using QuickSort algorithm).
    sort :: (Ord a) => [a] -> [a]
    sort [] = []
    sort (x:xs) =
      let smallerSorted = sort [a | a <- xs, a <= x]
          biggerSorted = sort [a | a <- xs, a > x]
      in  smallerSorted ++ [x] ++ biggerSorted","
main :: IO ()
main = do
  let candidate = unique
  if candidate [5,3,5,2,3,3,9,0,123] == [0,2,3,5,9,123] then pure () else error ""assertion failed""
  pure ()"
HumanEval_35,tir_Ethi,hs,"--ኣብ ዝርዝር ዘሎ ዝለዓለ ኣሃዝ ይመልስ።--  >>> maxElement [1,2,3]
--  3
--  >>> maxElement [5,3,(-5),2,(-3),3,9,0,123,1,(-10)]
--  123
maxElement :: [Int] -> Int
maxElement l =","maxElement :: [Int] -> Int
maxElement [] = error ""List cannot be empty""
maxElement (x:xs) = maxElementHelper xs x
  where
    maxElementHelper [] currentMax = currentMax
    maxElementHelper (y:ys) currentMax = maxElementHelper ys (max y currentMax)","
main :: IO ()
main = do
  let candidate = maxElement
  if candidate [1,2,3] == 3 then pure () else error ""assertion failed""
  if candidate [5,3,(-5),2,(-3),3,9,0,124,1,(-10)] == 124 then pure () else error ""assertion failed""
  pure ()"
HumanEval_36,tir_Ethi,hs,"--❑ እቲ 7 ኣብ ልዕሊ 11 ወይ 13 ዝካፈል ካብ n ንታሕቲ ኣብ ዘሎ ቑጽሪ ክንደይ ግዜ ከም ዝረአ ተመሊሱ።--  >>> fizzBuzz 50
--  0
--  >>> fizzBuzz 78
--  2
--  >>> fizzBuzz 79
--  3
fizzBuzz :: Int -> Int
fizzBuzz n =","fizzBuzz :: Int -> Int
fizzBuzz n = length [x | x <- [1..n-1], (x `mod` 11 == 0 || x `mod` 13 == 0), '7' `elem` show x]","
main :: IO ()
main = do
  let candidate = fizzBuzz
  if candidate 50 == 0 then pure () else error ""assertion failed""
  if candidate 78 == 2 then pure () else error ""assertion failed""
  if candidate 79 == 3 then pure () else error ""assertion failed""
  if candidate 100 == 3 then pure () else error ""assertion failed""
  if candidate 200 == 6 then pure () else error ""assertion failed""
  if candidate 4000 == 192 then pure () else error ""assertion failed""
  if candidate 10000 == 639 then pure () else error ""assertion failed""
  if candidate 100000 == 8026 then pure () else error ""assertion failed""
  pure ()"
HumanEval_37,tir_Ethi,hs,"--ንዋጋታት ናይ l፡ ግን ዝተመደበ።--l' ምስ l ኣብ ሓደ ዓይነት መዐቀኒታት ሓደ ዓይነት እዩ፣ ኣብ ሓደ ዓይነት መዐቀኒታት ግን ማዕረ እዩ --እዛ ተግባር እዚኣ ሓንቲ ዝርዝር I ትወስድ እሞ ሓንቲ ዝርዝር I ትመልስ።--  >>> sortEven [1,2,3]
--  [1,2,3]
--  >>> sortEven [5,6,3,4]
--  [3,6,5,4]
sortEven :: [Int] -> [Int]
sortEven l =","sortEven :: [Int] -> [Int]
sortEven l = merge odds sortedEvens
  where
    (odds, evens) = partitionList l
    sortedEvens = sort evens

    partitionList :: [Int] -> ([Int], [Int])
    partitionList [] = ([], [])
    partitionList [x] = ([x], [])
    partitionList (x:y:xs) = (x:xsOdds, y:xsEvens)
      where
        (xsOdds, xsEvens) = partitionList xs

    merge :: [Int] -> [Int] -> [Int]
    merge [] ys = ys
    merge (x:xs) [] = x:xs
    merge (x:xs) (y:ys) = x:y:merge xs ys","
main :: IO ()
main = do
  let candidate = sortEven
  if candidate [1,2,3] == [1,2,3] then pure () else error ""assertion failed""
  if candidate [5,3,(-5),2,(-3),3,9,0,123,1,(-10)] == [(-10),3,(-5),2,(-3),3,5,0,9,1,123] then pure () else error ""assertion failed""
  if candidate [5,8,(-12),4,23,2,3,11,12,(-10)] == [(-12),8,3,4,5,2,12,11,23,(-10)] then pure () else error ""assertion failed""
  pure ()"
HumanEval_39,tir_Ethi,hs,"--prime_fib ንናይ ፊቦናቺ ቁፅሪ ዝኾኖን ናይ ቀዳማይ ቁፅሪ ዝኾኖን n-th ቁፅሪ ይመልስ።--  >>> primeFib 1
--  2
--  >>> primeFib 2
--  3
--  >>> primeFib 3
--  5
--  >>> primeFib 4
--  13
--  >>> primeFib 5
--  89
primeFib :: Int -> Int
primeFib n =","primeFib :: Int -> Int
primeFib n = primeFibs !! (n - 1)
  where
    primeFibs = filter isPrime fibs
    fibs = map fst $ iterate (\(a, b) -> (b, a + b)) (0, 1)

isPrime :: Int -> Bool
isPrime k
  | k < 2 = False
  | k == 2 = True
  | even k = False
  | otherwise = null [x | x <- [3,5..upperLimit], k `mod` x == 0]
  where
    upperLimit = floor . sqrt $ fromIntegral k","
main :: IO ()
main = do
  let candidate = primeFib
  if candidate 1 == 2 then pure () else error ""assertion failed""
  if candidate 2 == 3 then pure () else error ""assertion failed""
  if candidate 3 == 5 then pure () else error ""assertion failed""
  if candidate 4 == 13 then pure () else error ""assertion failed""
  if candidate 5 == 89 then pure () else error ""assertion failed""
  if candidate 6 == 233 then pure () else error ""assertion failed""
  if candidate 7 == 1597 then pure () else error ""assertion failed""
  if candidate 8 == 28657 then pure () else error ""assertion failed""
  if candidate 9 == 514229 then pure () else error ""assertion failed""
  if candidate 10 == 433494437 then pure () else error ""assertion failed""
  pure ()"
HumanEval_40,tir_Ethi,hs,"--ድምር ናብ ዜሮ፡ ከምኡ'ውን False እንተ ዘይኮይኑ።--ኣብ ዝርዝር ሰለስተ ዝተፈላለዩ ኣሃዛት እንተሃልዮም True ይመልስ።--triple_sum_to_zero ከም መእተዊ ናይ ምሉእ ኣሃዛት ዝርዝር ይወስድ።--  >>> triplesSumToZero [1,3,5,0]
--  False
--  >>> triplesSumToZero [1,3,(-2),1]
--  True
--  >>> triplesSumToZero [1,2,3,7]
--  False
--  >>> triplesSumToZero [2,4,(-5),3,9,7]
--  True
--  >>> triplesSumToZero [1]
--  False
triplesSumToZero :: [Int] -> Bool
triplesSumToZero l =","triplesSumToZero :: [Int] -> Bool
triplesSumToZero l = any (== 0) [x + y + z | (x:ys) <- tails l, (y:zs) <- tails ys, z <- zs]
  where
    tails [] = []
    tails xs@(_:xs') = xs : tails xs'","
main :: IO ()
main = do
  let candidate = triplesSumToZero
  if candidate [1,3,5,0] == False then pure () else error ""assertion failed""
  if candidate [1,3,5,(-1)] == False then pure () else error ""assertion failed""
  if candidate [1,3,(-2),1] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,7] == False then pure () else error ""assertion failed""
  if candidate [1,2,5,7] == False then pure () else error ""assertion failed""
  if candidate [2,4,(-5),3,9,7] == True then pure () else error ""assertion failed""
  if candidate [1] == False then pure () else error ""assertion failed""
  if candidate [1,3,5,(-100)] == False then pure () else error ""assertion failed""
  if candidate [100,3,5,(-100)] == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_41,tir_Ethi,hs,"--እዚ ተግባር እዚ ድማ ቁጽሪ ናይ ከምዚኦም ዝበሉ ግጭታት ይገልጽ።--ኣብ መስመሮም ከም ዘይጋጠሙ ኮይኖም--ይኹን እምበር እተን መካይን ኣዝየን ጽኑዓትን ሓያላትን እየን፤ ከም ውጽኢቱ ድማ ብቐጻሊ ይንቀሳቐሳ።--ካብ የማን ናብ ጸጋም እትኸይድ መኪና፡ ካብ የማን ናብ ጸጋም እትኸይድ መኪና ምስ እትጋጨወ--ኩለን መካይን ኣብ ሓደ ዓይነት ፍጥነት ይንቀሳቐሳ። ክልተ መካይን ይጋጨዋ ይብሃል።--ካብ የማን ናብ ጸጋም ይጐዓዙ። እተን ክልተ ጉጅለ ማካይን ካብ ኡርር ርሒቐን እየን ዝጅምራ።--n መካይን ካብ ጸጋም ናብ የማን ይጓዓዛ ኣለዋ፤ ኣብ ሓደ እዋን ድማ ዝተፈላለዩ n መካይን --❖ ፍጹም ቅኑዕ ዝኾነን መወዳእታ ዘይብሉን መስመር ዘለዎ መንገዲ ሕሰቡ።carRaceCollision :: Int -> Int
carRaceCollision n =","carRaceCollision :: Int -> Int
carRaceCollision n = n","
main :: IO ()
main = do
  let candidate = carRaceCollision
  if candidate 2 == 4 then pure () else error ""assertion failed""
  if candidate 3 == 9 then pure () else error ""assertion failed""
  if candidate 4 == 16 then pure () else error ""assertion failed""
  if candidate 8 == 64 then pure () else error ""assertion failed""
  if candidate 10 == 100 then pure () else error ""assertion failed""
  pure ()"
HumanEval_42,tir_Ethi,hs,"--ብ1 ዝተወሰኸ ዝርዝር ይምለስ።--  >>> incrList [1,2,3]
--  [2,3,4]
--  >>> incrList [5,3,5,2,3,3,9,0,123]
--  [6,4,6,3,4,4,10,1,124]
incrList :: [Int] -> [Int]
incrList l =","incrList :: [Int] -> [Int]
incrList l = map (+1) l","
main :: IO ()
main = do
  let candidate = incrList
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [3,2,1] == [4,3,2] then pure () else error ""assertion failed""
  if candidate [5,2,5,2,3,3,9,0,123] == [6,3,6,3,4,4,10,1,124] then pure () else error ""assertion failed""
  pure ()"
HumanEval_43,tir_Ethi,hs,"--ድምር ናብ ዜሮ፡ ከምኡ'ውን False እንተ ዘይኮይኑ።--ኣብ ዝርዝር ክልተ ዝተፈላለዩ ኣሃዛት እንተሃልዮም True ይመልስ።--pairs_sum_to_zero ከም መእተዊ ናይ ምሉእ ኣሃዛት ዝርዝር ይወስድ።--  >>> pairsSumToZero [1,3,5,0]
--  False
--  >>> pairsSumToZero [1,3,(-2),1]
--  False
--  >>> pairsSumToZero [1,2,3,7]
--  False
--  >>> pairsSumToZero [2,4,(-5),3,5,7]
--  True
--  >>> pairsSumToZero [1]
--  False
pairsSumToZero :: [Int] -> Bool
pairsSumToZero l =","pairsSumToZero :: [Int] -> Bool
pairsSumToZero l = any (\x -> -x `elem` l) l && (length l > 1)","
main :: IO ()
main = do
  let candidate = pairsSumToZero
  if candidate [1,3,5,0] == False then pure () else error ""assertion failed""
  if candidate [1,3,(-2),1] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,7] == False then pure () else error ""assertion failed""
  if candidate [2,4,(-5),3,5,7] == True then pure () else error ""assertion failed""
  if candidate [1] == False then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),3,2,30] == True then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),3,2,31] == True then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),4,2,30] == False then pure () else error ""assertion failed""
  if candidate [(-3),9,(-1),4,2,31] == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_44,tir_Ethi,hs,"--ቁጽሪ መሰረታት ትሕቲ 10 እዩ።--ድሕሪ ምቅያር ናይ ሕብረቁምፊ ውክልና ምምላስ--❑ ነቲ ናይ ኣታዊ ቑጽሪ x ናብ ቑጽሪ መሰረት ቀይር።--  >>> changeBase 8 3
--  ""22""
--  >>> changeBase 8 2
--  ""1000""
--  >>> changeBase 7 2
--  ""111""
changeBase :: Int -> Int -> String
changeBase x base =","changeBase :: Int -> Int -> String
changeBase x base
  | x < base  = show x
  | otherwise = changeBase (x `div` base) base ++ show (x `mod` base)","
main :: IO ()
main = do
  let candidate = changeBase
  if candidate 8 3 == ""22"" then pure () else error ""assertion failed""
  if candidate 9 3 == ""100"" then pure () else error ""assertion failed""
  if candidate 234 2 == ""11101010"" then pure () else error ""assertion failed""
  if candidate 16 2 == ""10000"" then pure () else error ""assertion failed""
  if candidate 8 2 == ""1000"" then pure () else error ""assertion failed""
  if candidate 7 2 == ""111"" then pure () else error ""assertion failed""
  if candidate 2 3 == ""2"" then pure () else error ""assertion failed""
  if candidate 3 4 == ""3"" then pure () else error ""assertion failed""
  if candidate 4 5 == ""4"" then pure () else error ""assertion failed""
  if candidate 5 6 == ""5"" then pure () else error ""assertion failed""
  if candidate 6 7 == ""6"" then pure () else error ""assertion failed""
  if candidate 7 8 == ""7"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_45,tir_Ethi,hs,"--❑ ንውሓት ጎኑን ልዑል ናይ ምምላስ ቦታን ናይ ሓደ ስሉስ መኣዝን ምስ ተዋህበ።--  >>> triangleArea 5 3
--  7.5
triangleArea :: Int -> Int -> Float
triangleArea a h =","triangleArea :: Int -> Int -> Float
triangleArea a h = 0.5 * fromIntegral a * fromIntegral h","
main :: IO ()
main = do
  let candidate = triangleArea
  if candidate 5 3 == 7.5 then pure () else error ""assertion failed""
  if candidate 2 2 == 2.0 then pure () else error ""assertion failed""
  if candidate 10 8 == 40.0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_46,tir_Ethi,hs,"--በጃኻ ናይ fib4 ቁፅሪ ተኸታታሊ n-th ኣሃዝ ብቑዕ ንምምዝጋብ ሓደ ተግባር ጽሓፍ። ዳግመ-መደብ ኣይትጥቀም። --fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ።--fib4(3) -> 0 --fib4(2) -> 2 --fib4(1) -> 0 --fib4(0) -> 0 --እቲ ናይ Fib4 ኣሃዝ ተኸታታሊ ምስ ናይ Fibbonacci ተኸታታሊ ተመሳሳሊ እዩ እዚ ድማ ከምዚ ዝስዕብ እዩ ዝግለጽ--  >>> fib4 5
--  4
--  >>> fib4 6
--  8
--  >>> fib4 7
--  14
fib4 :: Int -> Int
fib4 n =","fib4 :: Int -> Int
fib4 n
  | n == 0 = 0
  | n == 1 = 0
  | n == 2 = 2
  | n == 3 = 0
  | otherwise = iter 0 0 2 0 n
  where
    iter a b c d 4 = a + b + c + d
    iter a b c d n = iter b c d (a + b + c + d) (n - 1)","
main :: IO ()
main = do
  let candidate = fib4
  if candidate 5 == 4 then pure () else error ""assertion failed""
  if candidate 8 == 28 then pure () else error ""assertion failed""
  if candidate 10 == 104 then pure () else error ""assertion failed""
  if candidate 12 == 386 then pure () else error ""assertion failed""
  pure ()"
HumanEval_47,tir_Ethi,hs,"--ኣብ ዝርዝር ንጥረ ነገራት ሚድያን ይመልስ።--  >>> median [3,1,2,4,5]
--  3.0
--  >>> median [(-10),4,6,1000,10,20]
--  15.0
median :: [Int] -> Float
median l =","median :: [Int] -> Float
median l 
  | odd n     = fromIntegral $ sorted !! mid
  | otherwise = (fromIntegral (sorted !! (mid - 1)) + fromIntegral (sorted !! mid)) / 2
  where
    sorted = sort l
    n = length l
    mid = n `div` 2
    sort = sortBy compare","
main :: IO ()
main = do
  let candidate = median
  if candidate [3,1,2,4,5] == 3.0 then pure () else error ""assertion failed""
  if candidate [(-10),4,6,1000,10,20] == 8.0 then pure () else error ""assertion failed""
  if candidate [5] == 5.0 then pure () else error ""assertion failed""
  if candidate [6,5] == 5.5 then pure () else error ""assertion failed""
  if candidate [8,1,3,9,9,2,7] == 7.0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_48,tir_Ethi,hs,"--እቲ ዝተዋህበ ሕብረ-ቁጽሪ ፓሊንድሮም እንተኾይኑ ይምርምር።--  >>> isPalindrome """"
--  True
--  >>> isPalindrome ""aba""
--  True
--  >>> isPalindrome ""aaaaa""
--  True
--  >>> isPalindrome ""zbcd""
--  False
isPalindrome :: String -> Bool
isPalindrome text =","isPalindrome :: String -> Bool
isPalindrome text = text == reverse text","
main :: IO ()
main = do
  let candidate = isPalindrome
  if candidate """" == True then pure () else error ""assertion failed""
  if candidate ""aba"" == True then pure () else error ""assertion failed""
  if candidate ""aaaaa"" == True then pure () else error ""assertion failed""
  if candidate ""zbcd"" == False then pure () else error ""assertion failed""
  if candidate ""xywyx"" == True then pure () else error ""assertion failed""
  if candidate ""xywyz"" == False then pure () else error ""assertion failed""
  if candidate ""xywzx"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_49,tir_Ethi,hs,"--2^n ሞዱል ፒ (ቁጽሪታት ኣስተውዕል) ምለስ።--  >>> modp 3 5
--  3
--  >>> modp 1101 101
--  2
--  >>> modp 0 101
--  1
--  >>> modp 3 11
--  8
--  >>> modp 100 101
--  1
modp :: Int -> Int -> Int
modp n p =","modp :: Int -> Int -> Int
modp n p = powMod 2 n p

powMod :: Int -> Int -> Int -> Int
powMod base exp modulus
  | modulus == 1 = 0
  | exp == 0     = 1
  | exp == 1     = base `mod` modulus
  | otherwise    = if odd exp
                   then (base * halfExp * halfExp) `mod` modulus
                   else (halfExp * halfExp) `mod` modulus
  where
    halfExp = powMod base (exp `div` 2) modulus","
main :: IO ()
main = do
  let candidate = modp
  if candidate 3 5 == 3 then pure () else error ""assertion failed""
  if candidate 1101 101 == 2 then pure () else error ""assertion failed""
  if candidate 0 101 == 1 then pure () else error ""assertion failed""
  if candidate 3 11 == 8 then pure () else error ""assertion failed""
  if candidate 100 101 == 1 then pure () else error ""assertion failed""
  if candidate 30 5 == 4 then pure () else error ""assertion failed""
  if candidate 31 5 == 3 then pure () else error ""assertion failed""
  pure ()"
HumanEval_51,tir_Ethi,hs,"--remove_vowels ሓደ ካብተን ናይ ኣሃዝ ኣሃዛት ዝወስድ እሞ ብዘይ ኣሃዝ ኣሃዝ ዝመልስ ተግባር እዩ።--  >>> removeVowels """"
--  """"
--  >>> removeVowels ""abcdef""
--  ""bcdf""
--  >>> removeVowels ""aaaaa""
--  """"
--  >>> removeVowels ""aaBAA""
--  ""B""
--  >>> removeVowels ""zbcd""
--  ""zbcd""
removeVowels :: String -> String
removeVowels text =","removeVowels :: String -> String
removeVowels text = filter (`notElem` ""aeiouAEIOU"") text","
main :: IO ()
main = do
  let candidate = removeVowels
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""abcdef
ghijklm"" == ""bcdf
ghjklm"" then pure () else error ""assertion failed""
  if candidate ""fedcba"" == ""fdcb"" then pure () else error ""assertion failed""
  if candidate ""eeeee"" == """" then pure () else error ""assertion failed""
  if candidate ""acBAA"" == ""cB"" then pure () else error ""assertion failed""
  if candidate ""EcBOO"" == ""cB"" then pure () else error ""assertion failed""
  if candidate ""ybcd"" == ""ybcd"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_52,tir_Ethi,hs,"--❑ ኣብ ዝርዝር ዘሎ ኩሉ ቁጽሪታት ትሕቲ እቲ መጠን t እንተኾይኑ ሓቅነት ይመልስ።--  >>> belowThreshold [1,2,4,10] 100
--  True
--  >>> belowThreshold [1,20,4,10] 5
--  False
belowThreshold :: [Int] -> Int -> Bool
belowThreshold l t =",belowThreshold l t = all (< t) l,"
main :: IO ()
main = do
  let candidate = belowThreshold
  if candidate [1,2,4,10] 100 == True then pure () else error ""assertion failed""
  if candidate [1,20,4,10] 5 == False then pure () else error ""assertion failed""
  if candidate [1,20,4,10] 21 == True then pure () else error ""assertion failed""
  if candidate [1,20,4,10] 22 == True then pure () else error ""assertion failed""
  if candidate [1,8,4,10] 11 == True then pure () else error ""assertion failed""
  if candidate [1,8,4,10] 10 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_53,tir_Ethi,hs,"--xን yን ዝብሉ ክልተ ቁጽሪታት ኣክብ።--  >>> add 2 3
--  5
--  >>> add 5 7
--  12
add :: Int -> Int -> Int
add x y =","add :: Int -> Int -> Int
add x y = x + y","
main :: IO ()
main = do
  let candidate = add
  if candidate 0 1 == 1 then pure () else error ""assertion failed""
  if candidate 1 0 == 1 then pure () else error ""assertion failed""
  if candidate 2 3 == 5 then pure () else error ""assertion failed""
  if candidate 5 7 == 12 then pure () else error ""assertion failed""
  if candidate 7 5 == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_54,tir_Ethi,hs,"--❑ ክልተ ቃላት ሓደ ዓይነት ፊደላት እንተ ኣለወን መርምር።--  >>> sameChars ""eabcdzzzz"" ""dddzzzzzzzddeddabc""
--  True
--  >>> sameChars ""abcd"" ""dddddddabc""
--  True
--  >>> sameChars ""dddddddabc"" ""abcd""
--  True
--  >>> sameChars ""eabcd"" ""dddddddabc""
--  False
--  >>> sameChars ""abcd"" ""dddddddabce""
--  False
--  >>> sameChars ""eabcdzzzz"" ""dddzzzzzzzddddabc""
--  False
sameChars :: String -> String -> Bool
sameChars s0 s1 =","import Data.List (nub, sort)

sameChars :: String -> String -> Bool
sameChars s0 s1 = sort (nub s0) == sort (nub s1)","
main :: IO ()
main = do
  let candidate = sameChars
  if candidate ""eabcdzzzz"" ""dddzzzzzzzddeddabc"" == True then pure () else error ""assertion failed""
  if candidate ""abcd"" ""dddddddabc"" == True then pure () else error ""assertion failed""
  if candidate ""dddddddabc"" ""abcd"" == True then pure () else error ""assertion failed""
  if candidate ""eabcd"" ""dddddddabc"" == False then pure () else error ""assertion failed""
  if candidate ""abcd"" ""dddddddabcf"" == False then pure () else error ""assertion failed""
  if candidate ""eabcdzzzz"" ""dddzzzzzzzddddabc"" == False then pure () else error ""assertion failed""
  if candidate ""aabb"" ""aaccc"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_55,tir_Ethi,hs,"--፪) ንናይ ፊቦናቺ ቁጽሪ n-th ተመሊሱ።--  >>> fib 10
--  55
--  >>> fib 1
--  1
--  >>> fib 8
--  21
fib :: Int -> Int
fib n =","fib :: Int -> Int
fib n = fibHelper 0 1 n
  where
    fibHelper a _ 0 = a
    fibHelper a b n = fibHelper b (a + b) (n - 1)","
main :: IO ()
main = do
  let candidate = fib
  if candidate 10 == 55 then pure () else error ""assertion failed""
  if candidate 1 == 1 then pure () else error ""assertion failed""
  if candidate 8 == 21 then pure () else error ""assertion failed""
  if candidate 11 == 89 then pure () else error ""assertion failed""
  if candidate 12 == 144 then pure () else error ""assertion failed""
  pure ()"
HumanEval_56,tir_Ethi,hs,"--ነፍሲ ወከፍ ናይ መኽፈቲ ክፋል ናይ መዕጸዊ ክፋል እንተ ኣለዎ True ይምለስ።--ብራኬትስ ናይ ""<""ን "">ን ሕብረ-መኣዝናት እዩ።--  >>> correctBracketing ""<""
--  False
--  >>> correctBracketing ""<>""
--  True
--  >>> correctBracketing ""<<><>>""
--  True
--  >>> correctBracketing ""><<>""
--  False
correctBracketing :: String -> Bool
correctBracketing brackets =","correctBracketing :: String -> Bool
correctBracketing brackets = checkBrackets brackets 0 == 0

checkBrackets :: String -> Int -> Int
checkBrackets [] n = n
checkBrackets (x:xs) n
  | n < 0 = -1
  | x == '<' = checkBrackets xs (n + 1)
  | x == '>' = checkBrackets xs (n - 1)
  | otherwise = checkBrackets xs n","
main :: IO ()
main = do
  let candidate = correctBracketing
  if candidate ""<>"" == True then pure () else error ""assertion failed""
  if candidate ""<<><>>"" == True then pure () else error ""assertion failed""
  if candidate ""<><><<><>><>"" == True then pure () else error ""assertion failed""
  if candidate ""<><><<<><><>><>><<><><<>>>"" == True then pure () else error ""assertion failed""
  if candidate ""<<<><>>>>"" == False then pure () else error ""assertion failed""
  if candidate ""><<>"" == False then pure () else error ""assertion failed""
  if candidate ""<"" == False then pure () else error ""assertion failed""
  if candidate ""<<<<"" == False then pure () else error ""assertion failed""
  if candidate "">"" == False then pure () else error ""assertion failed""
  if candidate ""<<>"" == False then pure () else error ""assertion failed""
  if candidate ""<><><<><>><>><<>"" == False then pure () else error ""assertion failed""
  if candidate ""<><><<><>><>>><>"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_57,tir_Ethi,hs,"--❑ ኣብ ዝርዝር ዘሎ ኣሃዛት ብነጻነት እናወሰኸ ወይ እናነከየ ምኻዱ ተመልስ።--  >>> monotonic [1,2,4,20]
--  True
--  >>> monotonic [1,20,4,10]
--  False
--  >>> monotonic [4,1,0,(-10)]
--  True
monotonic :: [Int] -> Bool
monotonic l =","monotonic :: [Int] -> Bool
monotonic l = increasing l || decreasing l
  where
    increasing xs = all (uncurry (<=)) (zip xs (tail xs))
    decreasing xs = all (uncurry (>=)) (zip xs (tail xs))","
main :: IO ()
main = do
  let candidate = monotonic
  if candidate [1,2,4,10] == True then pure () else error ""assertion failed""
  if candidate [1,2,4,20] == True then pure () else error ""assertion failed""
  if candidate [1,20,4,10] == False then pure () else error ""assertion failed""
  if candidate [4,1,0,(-10)] == True then pure () else error ""assertion failed""
  if candidate [4,1,1,0] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,2,5,60] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,60] == True then pure () else error ""assertion failed""
  if candidate [9,9,9,9] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_58,tir_Ethi,hs,"--ንክልተ ዝርዝር ዝተመደቡ ፍሉያት ናይ ሓባር ባእታታት ይመልሱ።--  >>> common [1,4,3,34,653,2,5] [5,7,1,5,9,653,121]
--  [1,5,653]
--  >>> common [5,3,2,8] [3,2]
--  [2,3]
common :: [Int] -> [Int] -> [Int]
common l1 l2 =","common :: [Int] -> [Int] -> [Int]
common l1 l2 = uniqueSortedCommon
  where
    commonElements = filter (`elem` l2) l1
    uniqueCommon = removeDuplicates commonElements
    uniqueSortedCommon = sort uniqueCommon

    removeDuplicates :: [Int] -> [Int]
    removeDuplicates = foldr (\x seen -> if x `elem` seen then seen else x : seen) []

    sort :: [Int] -> [Int]
    sort [] = []
    sort (p:xs) = (sort lesser) ++ [p] ++ (sort greater)
      where
        lesser  = filter (< p) xs
        greater = filter (>= p) xs","
main :: IO ()
main = do
  let candidate = common
  if candidate [1,4,3,34,653,2,5] [5,7,1,5,9,653,121] == [1,5,653] then pure () else error ""assertion failed""
  if candidate [5,3,2,8] [3,2] == [2,3] then pure () else error ""assertion failed""
  if candidate [4,3,2,8] [3,2,4] == [2,3,4] then pure () else error ""assertion failed""
  if candidate [4,3,2,8] [] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_59,tir_Ethi,hs,"--እቲ ዝዓበየ ቀዳማይ ኣፋውስ ናይ n ተመሊሱ፡ n > 1 እዩ እሞ ቀዳማይ ኣይኮነን--  >>> largestPrimeFactor 13195
--  29
--  >>> largestPrimeFactor 2048
--  2
largestPrimeFactor :: Int -> Int
largestPrimeFactor n =","largestPrimeFactor :: Int -> Int
largestPrimeFactor n = helper n 2
  where
    helper n factor
      | factor * factor > n = n
      | n `mod` factor == 0 = helper (n `div` factor) factor
      | otherwise = helper n (factor + 1)","
main :: IO ()
main = do
  let candidate = largestPrimeFactor
  if candidate 15 == 5 then pure () else error ""assertion failed""
  if candidate 27 == 3 then pure () else error ""assertion failed""
  if candidate 63 == 7 then pure () else error ""assertion failed""
  if candidate 330 == 11 then pure () else error ""assertion failed""
  if candidate 13195 == 29 then pure () else error ""assertion failed""
  pure ()"
HumanEval_60,tir_Ethi,hs,"--sum_to_n ካብ 1 ክሳብ n ዝኾኑ ቁፅሪታት ዝእክብ ተግባር እዩ።--  >>> sumToN 30
--  465
--  >>> sumToN 100
--  5050
--  >>> sumToN 5
--  15
--  >>> sumToN 10
--  55
--  >>> sumToN 1
--  1
sumToN :: Int -> Int
sumToN n =","sumToN :: Int -> Int
sumToN n = sum [1..n]","
main :: IO ()
main = do
  let candidate = sumToN
  if candidate 1 == 1 then pure () else error ""assertion failed""
  if candidate 6 == 21 then pure () else error ""assertion failed""
  if candidate 11 == 66 then pure () else error ""assertion failed""
  if candidate 30 == 465 then pure () else error ""assertion failed""
  if candidate 100 == 5050 then pure () else error ""assertion failed""
  pure ()"
HumanEval_61,tir_Ethi,hs,"--ነፍሲ ወከፍ ናይ መኽፈቲ ክፋል ናይ መዕጸዊ ክፋል እንተ ኣለዎ True ይምለስ።-- ኣብ መንጎ ሓጹር ዘሎ """"ን """"ን ዝርከቦ ሕብረ-መኣዝናት እዩ።--  >>> correctBracketing ""(""
--  False
--  >>> correctBracketing ""()""
--  True
--  >>> correctBracketing ""(()())""
--  True
--  >>> correctBracketing "")(()""
--  False
correctBracketing :: String -> Bool
correctBracketing brackets =","correctBracketing :: String -> Bool
correctBracketing brackets = checkBalance brackets 0
  where
    checkBalance [] 0 = True
    checkBalance [] _ = False
    checkBalance (x:xs) n
      | x == '('  = checkBalance xs (n + 1)
      | x == ')' && n > 0 = checkBalance xs (n - 1)
      | otherwise = False","
main :: IO ()
main = do
  let candidate = correctBracketing
  if candidate ""()"" == True then pure () else error ""assertion failed""
  if candidate ""(()())"" == True then pure () else error ""assertion failed""
  if candidate ""()()(()())()"" == True then pure () else error ""assertion failed""
  if candidate ""()()((()()())())(()()(()))"" == True then pure () else error ""assertion failed""
  if candidate ""((()())))"" == False then pure () else error ""assertion failed""
  if candidate "")(()"" == False then pure () else error ""assertion failed""
  if candidate ""("" == False then pure () else error ""assertion failed""
  if candidate ""(((("" == False then pure () else error ""assertion failed""
  if candidate "")"" == False then pure () else error ""assertion failed""
  if candidate ""(()"" == False then pure () else error ""assertion failed""
  if candidate ""()()(()())())(()"" == False then pure () else error ""assertion failed""
  if candidate ""()()(()())()))()"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_62,tir_Ethi,hs,"--ናይዚ ፖሊኖሚል ድሪቨይት ተመሊሱ ኣብ ተመሳሳሊ መልክዕ ይርከብ።--xs[0] + xs[1] * x + xs[2] * x^2 + .... --xs ንናይ ሓደ ብዙሕ ኣሃዝ ኣሃዝ የመልክት።--  >>> derivative [3,1,2,4,5]
--  [1,4,12,20]
--  >>> derivative [1,2,3]
--  [2,6]
derivative :: [Int] -> [Int]
derivative xs =","derivative :: [Int] -> [Int]
derivative xs = zipWith (*) (tail xs) [1..]","
main :: IO ()
main = do
  let candidate = derivative
  if candidate [3,1,2,4,5] == [1,4,12,20] then pure () else error ""assertion failed""
  if candidate [1,2,3] == [2,6] then pure () else error ""assertion failed""
  if candidate [3,2,1] == [2,2] then pure () else error ""assertion failed""
  if candidate [3,2,1,0,4] == [2,2,0,16] then pure () else error ""assertion failed""
  if candidate [1] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_63,tir_Ethi,hs,"--በጃኻ ናይ fibfib ቁፅሪ ተኸታታሊ n-th ኣሃዝ ብውፅኢታዊ መገዲ ንምፅራይ ሓደ ተግባር ጽሓፍ።--fibfib ((n) == fibfib ((n-1) + fibfib ((n-2) + fibfib ((n-3) ።--fib fib ((2) == 1 --fib fib ((1)) == 0 --fib fib ((0) == 0 --እቲ ናይ ፊብ-ፊብ ቁጽሪ ተኸታታሊ ምስ ናይ ፊቦናቺ ተኸታታሊ ዝመሳሰል ተኸታታሊ እዩ እዚ ድማ ከምዚ ዝስዕብ እዩ ዝግለጽ--  >>> fibfib 1
--  0
--  >>> fibfib 5
--  4
--  >>> fibfib 8
--  24
fibfib :: Int -> Int
fibfib n =","fibfib :: Int -> Int
fibfib n
  | n == 0 = 0
  | n == 1 = 0
  | n == 2 = 1
  | otherwise = fibs !! n
  where
    fibs = 0 : 0 : 1 : zipWith3 (\a b c -> a + b + c) fibs (tail fibs) (drop 2 fibs)","
main :: IO ()
main = do
  let candidate = fibfib
  if candidate 2 == 1 then pure () else error ""assertion failed""
  if candidate 1 == 0 then pure () else error ""assertion failed""
  if candidate 5 == 4 then pure () else error ""assertion failed""
  if candidate 8 == 24 then pure () else error ""assertion failed""
  if candidate 10 == 81 then pure () else error ""assertion failed""
  if candidate 12 == 274 then pure () else error ""assertion failed""
  if candidate 14 == 927 then pure () else error ""assertion failed""
  pure ()"
HumanEval_64,tir_Ethi,hs,"--ኣብነት: --ኣብ መወዳእታ ናይቲ ቃል ምስ እትርከብ ጥራይ እያ ግን ድምጺ እትረክብ።--ኣብዚ ጉዳይ እዚ ድምጻውያን 'a'፣ 'e'፣ 'i'፣ 'o'፣ 'u' እዮም። ኣብዚ 'y' እውን a  እዩ።--ከም ናይ ምእታው ቃል መጠን ነቲ ኣብ እቲ ሕብረቁምፊ ዘሎ ቁጽሪ ድምጻውያን ይመልስ።-- ሓደ ቮካለስ_ኮውንት ዝብሃል ተግባር ጽሓፍ--  >>> vowelsCount ""abcde""
--  2
--  >>> vowelsCount ""ACEDY""
--  3
vowelsCount :: String -> Int
vowelsCount s =","vowelsCount :: String -> Int
vowelsCount s = length $ filter isVowel $ zip s [1..]
  where
    isVowel (c, pos) =
      let lowercaseC = toLower c
          isRegularVowel = lowercaseC `elem` ""aeiou""
          isLastCharY = lowercaseC == 'y' && pos == length s
      in isRegularVowel || isLastCharY","
main :: IO ()
main = do
  let candidate = vowelsCount
  if candidate ""abcde"" == 2 then pure () else error ""assertion failed""
  if candidate ""Alone"" == 3 then pure () else error ""assertion failed""
  if candidate ""key"" == 2 then pure () else error ""assertion failed""
  if candidate ""bye"" == 1 then pure () else error ""assertion failed""
  if candidate ""keY"" == 2 then pure () else error ""assertion failed""
  if candidate ""bYe"" == 1 then pure () else error ""assertion failed""
  if candidate ""ACEDY"" == 3 then pure () else error ""assertion failed""
  pure ()"
HumanEval_65,tir_Ethi,hs,"--Shift > number of digits እንተ ኾይኑ፡ digits ናብ ላዕሊ ይምለስ።--ነቲ ውጽኢት ድማ ከም ሕብረ-ቁጽሪ ይመልሶ።--❑ ነቲ ቝጽሪ x ብዞር ኣቢልካ ኣሰጋግር፣ ❑ ነቲ ቝጽሪ ብማዕረ ኣሰጋግር።--  >>> circularShift 12 1
--  ""21""
--  >>> circularShift 12 2
--  ""12""
circularShift :: Int -> Int -> String
circularShift x shift =","circularShift :: Int -> Int -> String
circularShift x shift =
  let digits = show x
      len = length digits
      effectiveShift = shift `mod` len
  in if shift > len
     then reverse digits
     else let (begin, end) = splitAt (len - effectiveShift) digits
          in end ++ begin","
main :: IO ()
main = do
  let candidate = circularShift
  if candidate 100 2 == ""001"" then pure () else error ""assertion failed""
  if candidate 12 2 == ""12"" then pure () else error ""assertion failed""
  if candidate 97 8 == ""79"" then pure () else error ""assertion failed""
  if candidate 12 1 == ""21"" then pure () else error ""assertion failed""
  if candidate 11 101 == ""11"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_66,tir_Ethi,hs,"--ኣብነት: --ኮድ ASCII --ሓደ ናይ ሕብረቁምፊ ሕብረቁምፊ ከም መእተዊ ዝወስድ እሞ ናይ ላዕለዋይ ሕብረቁምፊ ጥራይ ድምር ዝመልስ ተግባር ጽሓፍ"" --ዕማም--  >>> digitsum """"
--  0
--  >>> digitsum ""abAB""
--  131
--  >>> digitsum ""abcCd""
--  67
--  >>> digitsum ""helloE""
--  69
--  >>> digitsum ""woArBld""
--  131
--  >>> digitsum ""aAaaaXa""
--  153
digitsum :: String -> Int
digitsum s =","digitsum :: String -> Int
digitsum s = sum $ map fromEnum $ filter isUpper s","
main :: IO ()
main = do
  let candidate = digitsum
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""abAB"" == 131 then pure () else error ""assertion failed""
  if candidate ""abcCd"" == 67 then pure () else error ""assertion failed""
  if candidate ""helloE"" == 69 then pure () else error ""assertion failed""
  if candidate ""woArBld"" == 131 then pure () else error ""assertion failed""
  if candidate ""aAaaaXa"" == 153 then pure () else error ""assertion failed""
  if candidate "" How are yOu?"" == 151 then pure () else error ""assertion failed""
  if candidate ""You arE Very Smart"" == 327 then pure () else error ""assertion failed""
  pure ()"
HumanEval_67,tir_Ethi,hs,"--ን examble: --ኣብ ቅርጫት፡ ነቲ ኣብ ቅርጫት ዘሎ ቁጽሪ ፍረታት ማንጎ ተመልስ።--እቲ ብርቱካን ኣፕልን እቲ ሓፈሻዊ ቁጽሪ ናይቲ ፍረ ዝገልጽ ምሉእ ቑጽሪ--እቲ  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል  ዝብሃል--ኣብ ሓደ ቅርጫፍ ፍረታት ዝዝርጋሕ እዚ ቅርጫፍ እዚ --ኣብዚ ዕዮ እዚ ቁጽሪ ኣፕልን ብርቱካን ዝገልጽ ሕብረ-መረብ ክወሃበኩም እዩ።--  >>> fruitDistribution ""5 apples and 6 oranges"" 19
--  8
--  >>> fruitDistribution ""0 apples and 1 oranges"" 3
--  2
--  >>> fruitDistribution ""2 apples and 3 oranges"" 100
--  95
--  >>> fruitDistribution ""100 apples and 1 oranges"" 120
--  19
fruitDistribution :: String -> Int -> Int
fruitDistribution s n =","import Text.Read (readMaybe)

fruitDistribution :: String -> Int -> Int
fruitDistribution s n = n - totalApplesOranges
  where
    totalApplesOranges = sum $ map (readNumber . words) [""apples"", ""oranges""]
    readNumber keyword = case dropWhile (not . (=="" "") . dropWhile (/=' ')) $ words s of
      [] -> 0
      (num:_:rest) -> if num `elem` keyword then read num :: Int else 0","
main :: IO ()
main = do
  let candidate = fruitDistribution
  if candidate ""5 apples and 6 oranges"" 19 == 8 then pure () else error ""assertion failed""
  if candidate ""5 apples and 6 oranges"" 21 == 10 then pure () else error ""assertion failed""
  if candidate ""0 apples and 1 oranges"" 3 == 2 then pure () else error ""assertion failed""
  if candidate ""1 apples and 0 oranges"" 3 == 2 then pure () else error ""assertion failed""
  if candidate ""2 apples and 3 oranges"" 100 == 95 then pure () else error ""assertion failed""
  if candidate ""2 apples and 3 oranges"" 5 == 0 then pure () else error ""assertion failed""
  if candidate ""1 apples and 100 oranges"" 120 == 19 then pure () else error ""assertion failed""
  pure ()"
HumanEval_68,tir_Ethi,hs,"--ኣብነት 1 --ዋላ ሓደ እኩል ዋጋታት እንተ ዘየለ ወይ እቲ ዝርዝር ባዶ እንተ ኾይኑ፡ [] ተመሊሱ።--እቲ ዝተሰረዘ ኖድ ኣብ ዝርዝር ክምለስ ኣለዎ፣ [ smalest_value, its index ], --ሓደ ዓይነት ትሑት ዋጋ ዘለዎም ብዙሓት መትከላት እንተ ተረኺቦም፡ እቲ ትሑት መትከላት ዘለዎ መትከላት ይመልስ።--እቲ ዝተሓተተ ኖድ እቲ ዝነኣሰ እኩል ዋጋ ዘለዎ ኖድ ክኸውን ኣለዎ።--እቲ ስራሕካ ሓደ ካብ'ቶም መትከላት ምቑራጽ ከምኡ'ውን ምምላስ እዩ።--""ኣብ ሓደ ዛዕቢ ንዘይ ኣሉታዊ ምሉእ ቁጽሪ ዘለዎ ጨንፈር ዝገልጽ ዝርዝር እንተሃሊዩ--  >>> pluck [4,2,3]
--  [2,1]
--  Explanation: 2 has the smallest even value, and 2 has the smallest index.
--  Example 2:
--  >>> pluck [1,2,3]
--  [2,1]
--  Explanation: 2 has the smallest even value, and 2 has the smallest index.
--  Example 3:
--  >>> pluck []
--  []
--  Example 4:
--  >>> pluck [5,0,3,0,4,2]
--  [0,1]
--  Explanation: 0 is the smallest value, but  there are two zeros,
--  so we will choose the first zero, which has the smallest index.
--  Constraints:
--  * 1 <= nodes.length <= 10000
--  * 0 <= node.value
pluck :: [Int] -> [Int]
pluck arr =","pluck :: [Int] -> [Int]
pluck arr = case filter (\(x, _) -> even x) (zip arr [0..]) of
    [] -> []
    evens -> let (value, index) = minimum evens in [value, index]","
main :: IO ()
main = do
  let candidate = pluck
  if candidate [4,2,3] == [2,1] then pure () else error ""assertion failed""
  if candidate [1,2,3] == [2,1] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [5,0,3,0,4,2] == [0,1] then pure () else error ""assertion failed""
  if candidate [1,2,3,0,5,3] == [0,3] then pure () else error ""assertion failed""
  if candidate [5,4,8,4,8] == [4,1] then pure () else error ""assertion failed""
  if candidate [7,6,7,1] == [6,1] then pure () else error ""assertion failed""
  if candidate [7,9,7,1] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_69,tir_Ethi,hs,"--ኣብነት: --ከምዚ ዓይነት ዋጋ እንተ ዘየለ፡ -1 ይመልስ።--እቲ ድግግማ ናይ ሓደ ምሉእ ቁጽሪ፡ ኣብ ዝርዝር ዝረአ ቁጽሪ እዩ።--ዜሮ፡ ከምኡ'ውን ካብ ዋጋ ናይቲ ምሉእ ቁጽሪ ንላዕሊ ወይ ማዕረ ዝርግሐ ኣለዎ።-- ናይ ኣወንታዊ ምሉእ ቁጽሪ ዝርዝር ተዋሂቡካ ኣሎ--  >>> search [4,1,2,2,3,1]
--  2
--  >>> search [1,2,2,3,3,3,4,4,4]
--  3
--  >>> search [5,5,4,4,4]
--  (-1)
search :: [Int] -> Int
search lst =","import Data.List (group, sort)
import Data.Ord (comparing)

search :: [Int] -> Int
search lst = 
    let frequencies = map (\g -> (head g, length g)) . group . sort $ lst
        candidates = filter (\(val, freq) -> freq >= val) frequencies
    in case candidates of
         [] -> -1
         _  -> fst . maximum $ candidates","
main :: IO ()
main = do
  let candidate = search
  if candidate [5,5,5,5,1] == 1 then pure () else error ""assertion failed""
  if candidate [4,1,4,1,4,4] == 4 then pure () else error ""assertion failed""
  if candidate [3,3] == (-1) then pure () else error ""assertion failed""
  if candidate [8,8,8,8,8,8,8,8] == 8 then pure () else error ""assertion failed""
  if candidate [2,3,3,2,2] == 2 then pure () else error ""assertion failed""
  if candidate [2,7,8,8,4,8,7,3,9,6,5,10,4,3,6,7,1,7,4,10,8,1] == 1 then pure () else error ""assertion failed""
  if candidate [3,2,8,2] == 2 then pure () else error ""assertion failed""
  if candidate [6,7,1,8,8,10,5,8,5,3,10] == 1 then pure () else error ""assertion failed""
  if candidate [8,8,3,6,5,6,4] == (-1) then pure () else error ""assertion failed""
  if candidate [6,9,6,7,1,4,7,1,8,8,9,8,10,10,8,4,10,4,10,1,2,9,5,7,9] == 1 then pure () else error ""assertion failed""
  if candidate [1,9,10,1,3] == 1 then pure () else error ""assertion failed""
  if candidate [6,9,7,5,8,7,5,3,7,5,10,10,3,6,10,2,8,6,5,4,9,5,3,10] == 5 then pure () else error ""assertion failed""
  if candidate [1] == 1 then pure () else error ""assertion failed""
  if candidate [8,8,10,6,4,3,5,8,2,4,2,8,4,6,10,4,2,1,10,2,1,1,5] == 4 then pure () else error ""assertion failed""
  if candidate [2,10,4,8,2,10,5,1,2,9,5,5,6,3,8,6,4,10] == 2 then pure () else error ""assertion failed""
  if candidate [1,6,10,1,6,9,10,8,6,8,7,3] == 1 then pure () else error ""assertion failed""
  if candidate [9,2,4,1,5,1,5,2,5,7,7,7,3,10,1,5,4,2,8,4,1,9,10,7,10,2,8,10,9,4] == 4 then pure () else error ""assertion failed""
  if candidate [2,6,4,2,8,7,5,6,4,10,4,6,3,7,8,8,3,1,4,2,2,10,7] == 4 then pure () else error ""assertion failed""
  if candidate [9,8,6,10,2,6,10,2,7,8,10,3,8,2,6,2,3,1] == 2 then pure () else error ""assertion failed""
  if candidate [5,5,3,9,5,6,3,2,8,5,6,10,10,6,8,4,10,7,7,10,8] == (-1) then pure () else error ""assertion failed""
  if candidate [10] == (-1) then pure () else error ""assertion failed""
  if candidate [9,7,7,2,4,7,2,10,9,7,5,7,2] == 2 then pure () else error ""assertion failed""
  if candidate [5,4,10,2,1,1,10,3,6,1,8] == 1 then pure () else error ""assertion failed""
  if candidate [7,9,9,9,3,4,1,5,9,1,2,1,1,10,7,5,6,7,6,7,7,6] == 1 then pure () else error ""assertion failed""
  if candidate [3,10,10,9,2] == (-1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_70,tir_Ethi,hs,"--ኣብነት: --እቲ ዝተረፈ ምሉእ ቁጽሪታት ድማ እቲ ዝለዓለ፡ እቲ ዝተረፈ ድማ እቲ ዝተሓተ ወዘተ።--እቲ ዝተሓተ ዋጋ ምስ ዝጅምር እዩ እቲ ዘገርም ምድላው--❑ ዝርዝር ናይ ምሉእ ኣሃዛት እንተሃሊዩ፡ ዝርዝር ብዝተፈልየ ቅደም-ተከተል ይምለስ።--  >>> strangeSortList [1,2,3,4]
--  [1,4,2,3]
--  >>> strangeSortList [5,5,5,5]
--  [5,5,5,5]
--  >>> strangeSortList []
--  []
strangeSortList :: [Int] -> [Int]
strangeSortList lst =","strangeSortList :: [Int] -> [Int]
strangeSortList [] = []
strangeSortList lst = go (sort lst) True
  where
    go [] _ = []
    go xs toggle
      | toggle    = head xs : go (tail xs) False
      | otherwise = last xs : go (init xs) True","
main :: IO ()
main = do
  let candidate = strangeSortList
  if candidate [1,2,3,4] == [1,4,2,3] then pure () else error ""assertion failed""
  if candidate [5,6,7,8,9] == [5,9,6,8,7] then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5] == [1,5,2,4,3] then pure () else error ""assertion failed""
  if candidate [5,6,7,8,9,1] == [1,9,5,8,6,7] then pure () else error ""assertion failed""
  if candidate [5,5,5,5] == [5,5,5,5] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6,7,8] == [1,8,2,7,3,6,4,5] then pure () else error ""assertion failed""
  if candidate [0,2,2,2,5,5,(-5),(-5)] == [(-5),5,(-5),5,0,2,2,2] then pure () else error ""assertion failed""
  if candidate [111111] == [111111] then pure () else error ""assertion failed""
  pure ()"
HumanEval_71,tir_Ethi,hs,"--ኣብነት: --ካብ ሳልሳይ ወገን ንላዕሊ።--ድምር ናይ ክልተ ሸነኻት እንተበዝሐ ሰለስተ ሸነኻት ሓደ ቅኑዕ ስሉስ ይኾኑ።--እንተዘይኮይኑ ድማ -1 ይምለስ።--እቲ ሰለስተ ሸነኽ ሓደ ቅኑዕ ስሉስ እንተኾይኑ እቲ ስሉስ ናብ 2 ናይ ዓሰርተታት ነጥቢ ይዕምብብ።-- ርዝነት ናይ ሰለስተ ጎኒታት ናይ ሓደ ስሉስ ማዕዘን ሂቡ፡ ነቲ ኣከባቢ ናይ  ይምለሶ--  >>> triangleArea 3 4 5
--  6.0
--  >>> triangleArea 1 2 10
--  (-1).0
triangleArea :: Int -> Int -> Int -> Float
triangleArea a b c =","import Text.Printf (printf)

triangleArea :: Int -> Int -> Int -> Float
triangleArea a b c
    | isValidTriangle a b c = roundToTwoDecimals (sqrt (s * (s - fromIntegral a) * (s - fromIntegral b) * (s - fromIntegral c)))
    | otherwise = -1
  where
    s = (fromIntegral (a + b + c)) / 2
    isValidTriangle x y z = x + y > z && x + z > y && y + z > x
    roundToTwoDecimals x = read (printf ""%.2f"" x) :: Float","
main :: IO ()
main = do
  let candidate = triangleArea
  if candidate 3 4 5 == 6.0 then pure () else error ""assertion failed""
  if candidate 1 2 10 == (-1).0 then pure () else error ""assertion failed""
  if candidate 4 8 5 == 8.18 then pure () else error ""assertion failed""
  if candidate 2 2 2 == 1.73 then pure () else error ""assertion failed""
  if candidate 1 2 3 == (-1).0 then pure () else error ""assertion failed""
  if candidate 10 5 7 == 16.25 then pure () else error ""assertion failed""
  if candidate 2 6 3 == (-1).0 then pure () else error ""assertion failed""
  if candidate 1 1 1 == 0.43 then pure () else error ""assertion failed""
  if candidate 2 2 10 == (-1).0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_72,tir_Ethi,hs,"--ኣብነት: --እቲ q ትካል ሚዛኑ እንተደኣ ሓሊፉ (ፓሊንድሮም ዝርዝር እዩ) ከምኡ'ውን ድምር ናይቶም ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣገደስቲ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ ኣ-- እቲ ኣሃዝ q ክበርር እንተኾይኑ ሓቀኛ ዝመልስ ተግባር ጽሓፍ፣ እንተዘየለ ድማ ሓሶት።--  >>> willItFly [1,2] 5
--  False
--  # 1+2 is less than the maximum possible weight, but it's unbalanced.
--  >>> willItFly [3,2,3] 1
--  False
--  # it's balanced, but 3+2+3 is more than the maximum possible weight.
--  >>> willItFly [3,2,3] 9
--  True
--  # 3+2+3 is less than the maximum possible weight, and it's balanced.
--  >>> willItFly [3] 5
--  True
--  # 3 is less than the maximum possible weight, and it's balanced.
willItFly :: [Int] -> Int -> Bool
willItFly q w =","willItFly :: [Int] -> Int -> Bool
willItFly q w = isPalindrome q && sum q <= w

isPalindrome :: Eq a => [a] -> Bool
isPalindrome xs = xs == reverse xs","
main :: IO ()
main = do
  let candidate = willItFly
  if candidate [3,2,3] 9 == True then pure () else error ""assertion failed""
  if candidate [1,2] 5 == False then pure () else error ""assertion failed""
  if candidate [3] 5 == True then pure () else error ""assertion failed""
  if candidate [3,2,3] 1 == False then pure () else error ""assertion failed""
  if candidate [1,2,3] 6 == False then pure () else error ""assertion failed""
  if candidate [5] 5 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_73,tir_Ethi,hs,"--ንኣብነት: --ኣብ ሓደ ለውጢ፡ ንሓደ ኣሃዝ ናብ ካልእ ኣሃዝ ክትቅይሮ ትኽእል ኢኻ።--እቲ ዝርዝር ፓሊንድሮም ንምግባር ክቅየር የድሊ። ፓሊንድሮም ዝርዝር ሓደ ዝርዝር እዩ --ኣብ ሓደ ዝርዝር ናይ ምሉእ ኣሃዛት እንተተዋሂቡ፡ እቲ ዝወሓደ ቁጽሪ ናይቶም ኣሃዛት ርኸብ።--  >>> smallestChange [1,2,3,5,4,7,9,6]
--  4
--  >>> smallestChange [1,2,3,4,3,2,2]
--  1
--  >>> smallestChange [1,2,3,2,1]
--  0
smallestChange :: [Int] -> Int
smallestChange arr =","smallestChange :: [Int] -> Int
smallestChange arr = sum $ zipWith (\x y -> if x /= y then 1 else 0) arr (reverse arr)","
main :: IO ()
main = do
  let candidate = smallestChange
  if candidate [1,2,3,5,4,7,9,6] == 4 then pure () else error ""assertion failed""
  if candidate [1,2,3,4,3,2,2] == 1 then pure () else error ""assertion failed""
  if candidate [1,4,2] == 1 then pure () else error ""assertion failed""
  if candidate [1,4,4,2] == 1 then pure () else error ""assertion failed""
  if candidate [1,2,3,2,1] == 0 then pure () else error ""assertion failed""
  if candidate [3,1,1,3] == 0 then pure () else error ""assertion failed""
  if candidate [1] == 0 then pure () else error ""assertion failed""
  if candidate [0,1] == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_74,tir_Ethi,hs,"--ኣብነታት --ክልቲኦም ዝርዝር ሓደ ዓይነት ቁጽሪ ካራታት እንተሃልዮም፡ ነቲ ቀዳማይ ዝርዝር ይመልሱ።--ኣብ ኩሉ ናይ ዝርዝር ሕብረቁምፊታት ዘሎ ቁጽሪ ካብ ናይ ካልእ ዝርዝር ዝነኣሰ እዩ።--❑ ክልተ ዝርዝር ሕብረ-ቁምፊታት ዝቕበልን ነቲ ዝርዝር ዘለዎ ዝመልስን ተግባር ጽሓፍ።--  >>> totalMatch [] []
--  []
--  >>> totalMatch [""hi"",""admin""] [""hI"",""Hi""]
--  [""hI"",""Hi""]
--  >>> totalMatch [""hi"",""admin""] [""hi"",""hi"",""admin"",""project""]
--  [""hi"",""admin""]
--  >>> totalMatch [""hi"",""admin""] [""hI"",""hi"",""hi""]
--  [""hI"",""hi"",""hi""]
--  >>> totalMatch [""4""] [""1"",""2"",""3"",""4"",""5""]
--  [""4""]
totalMatch :: [String] -> [String] -> [String]
totalMatch lst1 lst2 =","totalMatch :: [String] -> [String] -> [String]
totalMatch lst1 lst2
  | totalChars lst1 < totalChars lst2 = lst1
  | totalChars lst1 > totalChars lst2 = lst2
  | otherwise = lst1
  where
    totalChars = sum . map length","
main :: IO ()
main = do
  let candidate = totalMatch
  if candidate [] [] == [] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hi"",""hi""] == [""hi"",""hi""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hi"",""hi"",""admin"",""project""] == [""hi"",""admin""] then pure () else error ""assertion failed""
  if candidate [""4""] [""1"",""2"",""3"",""4"",""5""] == [""4""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hI"",""Hi""] == [""hI"",""Hi""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hI"",""hi"",""hi""] == [""hI"",""hi"",""hi""] then pure () else error ""assertion failed""
  if candidate [""hi"",""admin""] [""hI"",""hi"",""hii""] == [""hi"",""admin""] then pure () else error ""assertion failed""
  if candidate [] [""this""] == [] then pure () else error ""assertion failed""
  if candidate [""this""] [] == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_75,tir_Ethi,hs,"--ኣብነት: --(ሀ) ካብ 100 ዝነኣሰ ምዃኑ ምፍላጥ።--ከምኡ'ውን ሓሶት እዩ።--❑ እቲ ዝተዋህበ ቁጽሪ ናይ 3 ቐዳሞት ቁጽሪ ምብዝዛም እንተኾይኑ ሓቀኛ ዝመልስ ግደ ጽሓፍ።--  >>> isMultiplyPrime 30
--  True
--  30 = 2 * 3 * 5
isMultiplyPrime :: Int -> Bool
isMultiplyPrime a =","isMultiplyPrime :: Int -> Bool
isMultiplyPrime a = any isTriplePrimeProduct primeTriples
  where
    primes = filter isPrime [2..99]
    primeTriples = [(x, y, z) | x <- primes, y <- primes, z <- primes, x <= y, y <= z]
    isTriplePrimeProduct (x, y, z) = x * y * z == a

isPrime :: Int -> Bool
isPrime n 
  | n < 2     = False
  | otherwise = not (any (\d -> n `mod` d == 0) [2..(floor . sqrt . fromIntegral) n])","
main :: IO ()
main = do
  let candidate = isMultiplyPrime
  if candidate 5 == False then pure () else error ""assertion failed""
  if candidate 30 == True then pure () else error ""assertion failed""
  if candidate 8 == True then pure () else error ""assertion failed""
  if candidate 10 == False then pure () else error ""assertion failed""
  if candidate 125 == True then pure () else error ""assertion failed""
  if candidate 105 == True then pure () else error ""assertion failed""
  if candidate 126 == False then pure () else error ""assertion failed""
  if candidate 729 == False then pure () else error ""assertion failed""
  if candidate 891 == False then pure () else error ""assertion failed""
  if candidate 1001 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_76,tir_Ethi,hs,"--ንኣብነት: --x ናይ n ቀሊል ሓይሊ እዩ እንተ n**int=x --ሓይሊ ናይ n ከምኡ'ውን ሓሶት ኣብ ካልእ ጉዳያት።--እቲ ስራሕኩም ናይ ሓቂ ዝምለስ ተግባር ምጽሓፍ እዩ x ቀሊል እንተ ኾይኑ--  >>> isSimplePower 1 4
--  True
--  >>> isSimplePower 2 2
--  True
--  >>> isSimplePower 8 2
--  True
--  >>> isSimplePower 3 2
--  False
--  >>> isSimplePower 3 1
--  False
--  >>> isSimplePower 5 3
--  False
isSimplePower :: Int -> Int -> Bool
isSimplePower x n =","isSimplePower :: Int -> Int -> Bool
isSimplePower x n
  | x < 1 || n < 1 = False
  | n == 1 = x == 1
  | otherwise = x == n ^ round (logBase (fromIntegral n) (fromIntegral x))","
main :: IO ()
main = do
  let candidate = isSimplePower
  if candidate 16 2 == True then pure () else error ""assertion failed""
  if candidate 143214 16 == False then pure () else error ""assertion failed""
  if candidate 4 2 == True then pure () else error ""assertion failed""
  if candidate 9 3 == True then pure () else error ""assertion failed""
  if candidate 16 4 == True then pure () else error ""assertion failed""
  if candidate 24 2 == False then pure () else error ""assertion failed""
  if candidate 128 4 == False then pure () else error ""assertion failed""
  if candidate 12 6 == False then pure () else error ""assertion failed""
  if candidate 1 1 == True then pure () else error ""assertion failed""
  if candidate 1 12 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_77,tir_Ethi,hs,"--ኣብነት: --ኣስተብህለሉ፡ እቲ ኣታዊ ኩሉ ግዜ ቅቡል እዩ ኢልካ ክትሓስብ ትኽእል ኢኻ።--እዚ ኢንጀር እዚ ናይ ገለ ምሉእ ቁጽሪ ኩብ እንተ ኾይኑ።--ሀ ምሉእ ቑጽሪ ሒዙ True ዝመልስ ተግባር ጽሓፍ።--  >>> iscube 1
--  True
--  >>> iscube 2
--  False
--  >>> iscube (-1)
--  True
--  >>> iscube 64
--  True
--  >>> iscube 0
--  True
--  >>> iscube 180
--  False
iscube :: Int -> Bool
iscube a =","iscube :: Int -> Bool
iscube a = let n = round (fromIntegral a ** (1/3)) in n^3 == a","
main :: IO ()
main = do
  let candidate = iscube
  if candidate 1 == True then pure () else error ""assertion failed""
  if candidate 2 == False then pure () else error ""assertion failed""
  if candidate (-1) == True then pure () else error ""assertion failed""
  if candidate 64 == True then pure () else error ""assertion failed""
  if candidate 180 == False then pure () else error ""assertion failed""
  if candidate 1000 == True then pure () else error ""assertion failed""
  if candidate 0 == True then pure () else error ""assertion failed""
  if candidate 1729 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_78,tir_Ethi,hs,"--ኣብነት: --እቶም ምልክታት A,B,C,D,E,F ኩሉ ግዜ ዓበይቲ እዮም።--ኣስተብህለሉ፡ እቲ ናይ ምእታው መስርሕ ኩሉ ግዜ ቅኑዕ ወይ ባዶ ሕብረቁምፊ እዩ ኢልካ ክትሓስብ ትኽእል ኢኻ፡--B (=ደቅዓዊ 11), D (=ደቅዓዊ 13) --ስለዚ ካብዞም ዝስዕቡ ቁጽሪታት ሓደ ክትመርጽ ኣለካ 2, 3, 5, 7, --ቀዳሞት ቁጽሪታት 2, 3, 5, 7, 11, 13, 17...--እቲ ናይ ሄክሳደሲማል ኣሃዛት 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F እዩ።--ካብ 1 ዝዓቢ ኮይኑ ናይ ክልተ ናኣሽቱ ባህርያዊ ቁጽሪታት ፍርያት ዘይከውን) ።--እቶም ቀዳሞት ቁጽሪታት (ቀዳማይ ቁጽሪ ወይ ቀዳማይ፡ ባህርያዊ ቁጽሪ እዩ --ሓደ ሄክሳዴሲማል ቑጽሪ ከም ሓደ ሕብረ-መኣዝናት ቑጽሪ ናይ ሄክሳዴሲማል ታት ይቖጽር--❑ ሓደ ዝቕበል ተግባር ክትጽሕፍ ተመዲብካ ኣለኻ--  >>> hexKey ""AB""
--  1
--  >>> hexKey ""1077E""
--  2
--  >>> hexKey ""ABED1A33""
--  4
--  >>> hexKey ""123456789ABCDEF0""
--  6
--  >>> hexKey ""2020""
--  2
hexKey :: String -> Int
hexKey num =","hexKey :: String -> Int
hexKey num = length . filter (`elem` primeHexDigits) $ num
  where
    primeHexDigits = ""2357BD""","
main :: IO ()
main = do
  let candidate = hexKey
  if candidate ""AB"" == 1 then pure () else error ""assertion failed""
  if candidate ""1077E"" == 2 then pure () else error ""assertion failed""
  if candidate ""ABED1A33"" == 4 then pure () else error ""assertion failed""
  if candidate ""2020"" == 2 then pure () else error ""assertion failed""
  if candidate ""123456789ABCDEF0"" == 6 then pure () else error ""assertion failed""
  if candidate ""112233445566778899AABBCCDDEEFF00"" == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_79,tir_Ethi,hs,"--ኣብነት: --እቶም ተወሳኺ ፊደላት ኣብ ቅርጺ ንምሕጋዝ እዮም ዝርከቡ።--ኣብ መጀመርያን መወዳእታን እቲ ሕብረ-ቁጽሪ ሓደ ክልተ ተወሳኺ 'db' ምልክታት ክህልዉ እዮም።--ኣብ'ቲ ሕብረ-ቁጽሪ ዘሎ ነፍሲ ወከፍ ቁምፊ '0' ወይ '1' ክኸውን እዩ።--እቲ ተግባር ሓደ ሕብረቁምፊ ክመልስ ኣለዎ፣ ነፍሲ ወከፍ ፊደል ድማ ክልተኣዊ --❑ ኣብ ዓሰርታዊ ቅርጺ ዝተጻሕፈ ቁጽሪ ክትረኽቡ ኢኹም፣ እቲ ዕዮኹም ከኣ ናብ ❑ ምቕያር እዩ።--  >>> decimalToBinary 15
--  ""db1111db""
--  >>> decimalToBinary 32
--  ""db100000db""
decimalToBinary :: Int -> String
decimalToBinary decimal =","decimalToBinary :: Int -> String
decimalToBinary decimal = ""db"" ++ toBinary decimal ++ ""db""
  where
    toBinary 0 = ""0""
    toBinary n = reverse (binaryHelper n)

    binaryHelper 0 = """"
    binaryHelper n = let (q, r) = n `divMod` 2 in show r ++ binaryHelper q","
main :: IO ()
main = do
  let candidate = decimalToBinary
  if candidate 0 == ""db0db"" then pure () else error ""assertion failed""
  if candidate 32 == ""db100000db"" then pure () else error ""assertion failed""
  if candidate 103 == ""db1100111db"" then pure () else error ""assertion failed""
  if candidate 15 == ""db1111db"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_80,tir_Ethi,hs,"--ንኣብነት: --ሓደ ሕብረቁምፊ ሃፍስ እዩ እንተድኣ ርዝነቱ እንተወሓደ 3 ኮይኑ ነፍሲ ወከፍ 3 ተኸታተልቲ ፊደላት ፍሉያት እንተኾይኖም --እቲ ስራሕካ እቲ ሕብረቁምፊ ሃፍስ ድዩ ኣይኮነን ክትምርምር ኣለካ።--❑ ኣብ ሓደ ናይ ኮምፕዩተር ኮምፕዩተር--  >>> isHappy ""a""
--  False
--  >>> isHappy ""aa""
--  False
--  >>> isHappy ""abcd""
--  True
--  >>> isHappy ""aabb""
--  False
--  >>> isHappy ""adb""
--  True
--  >>> isHappy ""xyy""
--  False
isHappy :: String -> Bool
isHappy s =","isHappy :: String -> Bool
isHappy s
  | length s < 3 = False
  | otherwise = all distinctTriples (windows 3 s)
  where
    distinctTriples [x, y, z] = x /= y && y /= z && x /= z
    distinctTriples _ = False
    windows n xs
      | length xs < n = []
      | otherwise = take n xs : windows n (tail xs)","
main :: IO ()
main = do
  let candidate = isHappy
  if candidate ""a"" == False then pure () else error ""assertion failed""
  if candidate ""aa"" == False then pure () else error ""assertion failed""
  if candidate ""abcd"" == True then pure () else error ""assertion failed""
  if candidate ""aabb"" == False then pure () else error ""assertion failed""
  if candidate ""adb"" == True then pure () else error ""assertion failed""
  if candidate ""xyy"" == False then pure () else error ""assertion failed""
  if candidate ""iopaxpoi"" == True then pure () else error ""assertion failed""
  if candidate ""iopaxioi"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_81,tir_Ethi,hs,"--ኣብነት: --0.0 E --> 0.0 D- --> 0.7 D --> 1.0 ዲ+ --> 1.3 C- --> 1.7 C --> 2.0 C+ --> 2.3 B- --> 2.7 ቢ --> 3.0 B+ --> 3.3 A- --> 3.7 A --4.0 A+ --ማእከላይ ገምጋም ቓላት --እዚ ዝስዕብ ሰንጠረዥ ብምጥቃም ናይ ፊደላት ደረጃታት ዝርዝር ክፈሪ ዝኽእል ተግባር --ንገለ ተምሃሮ ዝርዝር ናይ GPA ሂባካ ኣላ እሞ ክትጽሕፍ ኣለካ።--እቲ እንኮ ጸገም፡ ነቲ ንምምዝጋብ እትጥቀመሉ ኮድ ጠፊእዋ እዩ።--መምህር ናይ ባዕሉ ናይ ደረጃ ኣሃዛዊ ስልተ-ኣልጎሪዝም ይሰርሕ ኣሎ።--ናይ መወዳእታ ሰሙን ናይ'ቲ ሰመስተር'ዩ፡ መምህር ድማ ደረጃታት ክህብ ኣለዎ።--  >>> gradeEquation [4.0,3,1.7,2,3.5]
--  [""A+"",""B"",""C-"",""C"",""A-""]
numericalLetterGrade :: [Float] -> [String]
numericalLetterGrade grades =","numericalLetterGrade :: [Float] -> [String]
numericalLetterGrade grades = map gpaToLetterGrade grades
  where
    gpaToLetterGrade gpa
      | gpa == 4.0 = ""A+""
      | gpa > 3.7  = ""A""
      | gpa > 3.3  = ""A-""
      | gpa > 3.0  = ""B+""
      | gpa > 2.7  = ""B""
      | gpa > 2.3  = ""B-""
      | gpa > 2.0  = ""C+""
      | gpa > 1.7  = ""C""
      | gpa > 1.3  = ""C-""
      | gpa > 1.0  = ""D+""
      | gpa > 0.7  = ""D""
      | gpa > 0.0  = ""D-""
      | otherwise  = ""E""","
main :: IO ()
main = do
  let candidate = numericalLetterGrade
  if candidate [4.0,3,1.7,2,3.5] == [""A+"",""B"",""C-"",""C"",""A-""] then pure () else error ""assertion failed""
  if candidate [1.2] == [""D+""] then pure () else error ""assertion failed""
  if candidate [0.5] == [""D-""] then pure () else error ""assertion failed""
  if candidate [0.0] == [""E""] then pure () else error ""assertion failed""
  if candidate [1.0,0.3,1.5,2.8,3.3] == [""D"",""D-"",""C-"",""B"",""B+""] then pure () else error ""assertion failed""
  if candidate [0.0,0.7] == [""E"",""D-""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_82,tir_Ethi,hs,"--ኣብነታት --length ቀዳማይ ቑጽሪ ወይ False እንተድኣ ኮይኑ -- ሓደ ሕብረ-ቁጽሪ ዝወስድ እሞ እቲ ሕብረ-ቁጽሪ  እንተኾይኑ ድማ ሓቀኛ ዝመልስ ተግባር ጽሓፍ።--  >>> primeLength ""Hello""
--  True
--  >>> primeLength ""abcdcba""
--  True
--  >>> primeLength ""kittens""
--  True
--  >>> primeLength ""orange""
--  False
primeLength :: String -> Bool
primeLength string =","primeLength :: String -> Bool
primeLength string = isPrime (length string)

isPrime :: Int -> Bool
isPrime n
  | n < 2     = False
  | n == 2    = True
  | even n    = False
  | otherwise = null [ x | x <- [3, 5 .. floor (sqrt (fromIntegral n))], n `mod` x == 0 ]","
main :: IO ()
main = do
  let candidate = primeLength
  if candidate ""Hello"" == True then pure () else error ""assertion failed""
  if candidate ""abcdcba"" == True then pure () else error ""assertion failed""
  if candidate ""kittens"" == True then pure () else error ""assertion failed""
  if candidate ""orange"" == False then pure () else error ""assertion failed""
  if candidate ""wow"" == True then pure () else error ""assertion failed""
  if candidate ""world"" == True then pure () else error ""assertion failed""
  if candidate ""MadaM"" == True then pure () else error ""assertion failed""
  if candidate ""Wow"" == True then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""HI"" == True then pure () else error ""assertion failed""
  if candidate ""go"" == True then pure () else error ""assertion failed""
  if candidate ""gogo"" == False then pure () else error ""assertion failed""
  if candidate ""aaaaaaaaaaaaaaa"" == False then pure () else error ""assertion failed""
  if candidate ""Madam"" == True then pure () else error ""assertion failed""
  if candidate ""M"" == False then pure () else error ""assertion failed""
  if candidate ""0"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_83,tir_Ethi,hs,"--ብ1 ዝጅምር ወይ ዝዛዘም ኣወንታዊ ምሉእ ቁጽሪ እዩ።--❑ ንፖዚቲቭ ቑጽሪ n ሂብካ ቁጽሪ ናይቶም n-ዓገብ ዘለዎም ❑ ንፖዚቲቭ ቊጽሪ n ሂብካ ቁጽሪ ናይቶም n-ዓገብ ዘለዎም ❑ ንፖዚቲቭ ቊጽሪ n ሂብካ ቁጽሪ ናይቶም n-ዓገብ ዘለዎም ❑ ንፖዚቲቭ ❑ ንፖዚቲቭ ❑ ንፖዚቲቭ ❑ ንፖዚቲቭ ❑ ንፖዚቲቭ ❑ ንፖዚቲቭ ❑startsOneEnds :: Int -> Int
startsOneEnds n =","startsOneEnds :: Int -> Int
startsOneEnds n
  | n <= 0    = 0
  | n == 1    = 1
  | otherwise = 18 * 10^(n-2)","
main :: IO ()
main = do
  let candidate = startsOneEnds
  if candidate 1 == 1 then pure () else error ""assertion failed""
  if candidate 2 == 18 then pure () else error ""assertion failed""
  if candidate 3 == 180 then pure () else error ""assertion failed""
  if candidate 4 == 1800 then pure () else error ""assertion failed""
  if candidate 5 == 18000 then pure () else error ""assertion failed""
  pure ()"
HumanEval_84,tir_Ethi,hs,"--ኣብነት --❑ N ዝተባህለ ኣወንታዊ ምሉእ ቊጽሪ ሂብካ ናይ ክልተኣዊ ኣሃዛት ድምር ኣሃዛት ምምላስ--  >>> solve 1000
--  ""1""
--  >>> solve 150
--  ""110""
--  >>> solve 147
--  ""1100""
--  Variables:
--  @N integer
--  Constraints: 0 ≤ N ≤ 10000.
--  Output:
--  a string of binary number
solve :: Int -> String
solve N =","solve :: Int -> String
solve N = toBinary (sumOfDigits N)
  where
    sumOfDigits 0 = 0
    sumOfDigits n = (n `mod` 10) + sumOfDigits (n `div` 10)

    toBinary 0 = ""0""
    toBinary n = reverse (toBinary' n)
      where
        toBinary' 0 = """"
        toBinary' x = let (q, r) = x `divMod` 2 in intToDigit r : toBinary' q","
main :: IO ()
main = do
  let candidate = solve
  if candidate 1000 == ""1"" then pure () else error ""assertion failed""
  if candidate 150 == ""110"" then pure () else error ""assertion failed""
  if candidate 147 == ""1100"" then pure () else error ""assertion failed""
  if candidate 333 == ""1001"" then pure () else error ""assertion failed""
  if candidate 963 == ""10010"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_85,tir_Ethi,hs,"--ኣብነት: --❑ ንዘይ ባዶ ዝርዝር ናይ ምሉእ ቁጽሪታት ሂብካ፣ መጀመርታ ነቶም ኣብ ዘይንቡር መዐቀኒታት ዘለዉ ሓርነታዊ ኣሃዛት ኣክብ።--  >>> add [4,2,6,7]
--  2
add :: [Int] -> Int
add lst =","add :: [Int] -> Int
add lst = sum [x | (i, x) <- zip [0..] lst, odd i, even x]","
main :: IO ()
main = do
  let candidate = add
  if candidate [4,88] == 88 then pure () else error ""assertion failed""
  if candidate [4,5,6,7,2,122] == 122 then pure () else error ""assertion failed""
  if candidate [4,0,6,7] == 0 then pure () else error ""assertion failed""
  if candidate [4,4,6,8] == 12 then pure () else error ""assertion failed""
  pure ()"
HumanEval_86,tir_Ethi,hs,"--ንኣብነት: --ኣስተብህለሉ: ነቲ ኣብ ዓረፍተ ነገር ዘሎ ቅደም-ተከተል ቃላትን ባዶ ቦታታትን ክትሕሉ ኣለካ።--ኣብ ዋጋ ASCII ዝተመስረተ ናይ ምውሳኽ ስርዓት።--ብ ሓደ ሓድሽ ቃል ይትካእ፡ ኣብኡ ድማ ኩሎም እቶም ኣብ  ዝተዳለዉ ፊደላት--ዝተኣዘዘ ቅዲ ሕብረ-ቃላት፡ ኩሉ ቃላት (ብቦታ ዝተፈልዩ) --❑ ሓደ መስርዕ ሒዙ ዝተመደበ ቅጥዒ ዝመልስ መስርዕ ጽሓፍ።--  >>> antiShuffle ""Hi""
--  ""Hi""
--  >>> antiShuffle ""hello""
--  ""ehllo""
--  >>> antiShuffle ""Hello World!!!""
--  ""Hello !!!Wdlor""
antiShuffle :: String -> String
antiShuffle s =","import Data.List (sort)
import Data.Char (isAlpha)

antiShuffle :: String -> String
antiShuffle s = unwords $ map sortWord (wordsAndSpaces s)
  where
    sortWord word = if all isAlpha word then sort word else word
    wordsAndSpaces [] = []
    wordsAndSpaces xs = if head xs == ' ' 
                        then "" "" : wordsAndSpaces (dropWhile (== ' ') xs)
                        else let (word, rest) = break (== ' ') xs
                             in word : wordsAndSpaces rest","
main :: IO ()
main = do
  let candidate = antiShuffle
  if candidate ""Hi"" == ""Hi"" then pure () else error ""assertion failed""
  if candidate ""hello"" == ""ehllo"" then pure () else error ""assertion failed""
  if candidate ""number"" == ""bemnru"" then pure () else error ""assertion failed""
  if candidate ""abcd"" == ""abcd"" then pure () else error ""assertion failed""
  if candidate ""Hello World!!!"" == ""Hello !!!Wdlor"" then pure () else error ""assertion failed""
  if candidate """" == """" then pure () else error ""assertion failed""
  if candidate ""Hi. My name is Mister Robot. How are you?"" == "".Hi My aemn is Meirst .Rboot How aer ?ouy"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_87,tir_Ethi,hs,"--ኣብነት: --ብተወሳኺ፡ ኮርዲናት ናይ'ቲ መስርዕ ብኮሎናት ኣብ ምውራድ ቅደም-ተከተል ኣወዳድብ።--ኮርዲናታት ብመጀመርታ ብመስርዕ ብዕቤት ቅደም ተከተል ይምደቡ።--ነፍሲ ወከፍ ትፕል ኮርዲናት - (መስርዕ፡ ዓምዲ) 0 ጀሚሩ እዩ።--ከምኡ'ውን ዝርዝር ናይቶም ዝቕየሩ፡ [(x1, y1), (x2, y2) ...] ከም ኡ --ኣብ ዝርዝር ምስ ረኸብኩ lstን xን ታይን xን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን ታይን--ነፍሲ ወከፍ መስርዕ ዝተፈላለየ ቁጽሪ ዓምዲ ክህልዎ ይኽእል እዩ።--እዚ ድማ ምስ ማትሪክስ ዝመሳሰል ኮይኑ ግን ካብ ማትሪክስ ዝተፈልየ እዩ።--ኣብ ክልተ ኣሃዛት ዝተሰኣለ ሓበሬታ ከም ዝርዝር ዝርዝር ጌርካ ትረክብ።--  >>> getRow [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1
--  [(0, 0),(1, 4),(1, 0),(2, 5),(2, 0)]
--  >>> getRow [] 1
--  []
--  >>> getRow [[],[1],[1,2,3]] 3
--  [(2, 2)]
getRow :: [[Int]] -> Int -> [(Int, Int)]
getRow lst x =","getRow :: [[Int]] -> Int -> [(Int, Int)]
getRow lst x = concatMap processRow (zip [0..] lst)
  where
    processRow (rowIndex, row) = 
      let colIndices = reverse $ findIndices (== x) row
      in [(rowIndex, colIndex) | colIndex <- colIndices]

findIndices :: (a -> Bool) -> [a] -> [Int]
findIndices p lst = [i | (i, val) <- zip [0..] lst, p val]","
main :: IO ()
main = do
  let candidate = getRow
  if candidate [[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0, 0),(1, 4),(1, 0),(2, 5),(2, 0)] then pure () else error ""assertion failed""
  if candidate [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]] 2 == [(0, 1),(1, 1),(2, 1),(3, 1),(4, 1),(5, 1)] then pure () else error ""assertion failed""
  if candidate [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,1,3,4,5,6],[1,2,1,4,5,6],[1,2,3,1,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]] 1 == [(0, 0),(1, 0),(2, 1),(2, 0),(3, 2),(3, 0),(4, 3),(4, 0),(5, 4),(5, 0),(6, 5),(6, 0)] then pure () else error ""assertion failed""
  if candidate [] 1 == [] then pure () else error ""assertion failed""
  if candidate [[1]] 2 == [] then pure () else error ""assertion failed""
  if candidate [[],[1],[1,2,3]] 3 == [(2, 2)] then pure () else error ""assertion failed""
  pure ()"
HumanEval_88,tir_Ethi,hs,"--ኣብነት: --* ነቲ ዝተዋህበ ዝርዝር ኣይትቕይሮ። --ኣስተብህለሉ: --ወይ ድማ እቲ ድምር ((ቀዳማይ ዋጋ ኢንዴክስ፡ ናይ መወዳእታ ዋጋ ኢንዴክስ) ማዕረ እንተኾይኑ፡ ብውረድ ቅደም ተከተል ይደርፍ።--እቲ ዝርዝር ብዕጽፊ ክምዝገብ እዩ እቲ ድምር ((ቀዳማይ ዋጋ ኢንዴክስ፣ ናይ መወዳእታ ዋጋ ኢንዴክስ) ዘይንቡር እንተኾይኑ፣--❑ ሓደ ዝርዝር ናይ ዘይ-ነጻውያን ምሉእ ቁጽሪታት ሂብካ፣ ነቲ ዝርዝር ድሕሪ ምድላው፣ ❑ ሓደ ናይ ሎምዘበን ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑ ሓደ ናይ ሎሚ ❑--  >>> sortArray []
--  []
--  >>> sortArray [5]
--  [5]
--  >>> sortArray [2,4,3,0,1,5]
--  [0,1,2,3,4,5]
--  >>> sortArray [2,4,3,0,1,5,6]
--  [6,5,4,3,2,1,0]
sortArray :: [Int] -> [Int]
sortArray array =","sortArray :: [Int] -> [Int]
sortArray array
  | null array = array
  | otherwise =
    let first = head array
        last = last array
        sumFirstLast = first + last
    in if odd sumFirstLast
       then sort array
       else reverse (sort array)","
main :: IO ()
main = do
  let candidate = sortArray
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [5] == [5] then pure () else error ""assertion failed""
  if candidate [2,4,3,0,1,5] == [0,1,2,3,4,5] then pure () else error ""assertion failed""
  if candidate [2,4,3,0,1,5,6] == [6,5,4,3,2,1,0] then pure () else error ""assertion failed""
  if candidate [2,1] == [1,2] then pure () else error ""assertion failed""
  if candidate [15,42,87,32,11,0] == [0,11,15,32,42,87] then pure () else error ""assertion failed""
  if candidate [21,14,23,11] == [23,21,14,11] then pure () else error ""assertion failed""
  pure ()"
HumanEval_89,tir_Ethi,hs,"--ንኣብነት: --ናብ ታሕቲ ብምውራድ ብክልተ ብክልተ ቦታታት ምጉዳል።--ፊደላት --እቲ ፊደል እናተቐየረ ዝተሰወረ ሕብረ-ቁጽሪ ይመልስ።--❑ ሓደ መስርዕ ከም ኣርጉመንት ዝወስድ ናይ ምስጢራዊ ኣሰራርሓ ፍጠር--  >>> encrypt ""hi""
--  ""lm""
--  >>> encrypt ""asdfghjkl""
--  ""ewhjklnop""
--  >>> encrypt ""gf""
--  ""kj""
--  >>> encrypt ""et""
--  ""ix""
encrypt :: String -> String
encrypt s =","encrypt :: String -> String
encrypt s = map shiftChar s
  where
    shiftChar c
      | 'a' <= c && c <= 'z' = chr ((ord c - ord 'a' + 4) `mod` 26 + ord 'a')
      | 'A' <= c && c <= 'Z' = chr ((ord c - ord 'A' + 4) `mod` 26 + ord 'A')
      | otherwise = c","
main :: IO ()
main = do
  let candidate = encrypt
  if candidate ""hi"" == ""lm"" then pure () else error ""assertion failed""
  if candidate ""asdfghjkl"" == ""ewhjklnop"" then pure () else error ""assertion failed""
  if candidate ""gf"" == ""kj"" then pure () else error ""assertion failed""
  if candidate ""et"" == ""ix"" then pure () else error ""assertion failed""
  if candidate ""faewfawefaewg"" == ""jeiajeaijeiak"" then pure () else error ""assertion failed""
  if candidate ""hellomyfriend"" == ""lippsqcjvmirh"" then pure () else error ""assertion failed""
  if candidate ""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"" == ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"" then pure () else error ""assertion failed""
  if candidate ""a"" == ""e"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_90,tir_Ethi,hs,"--ከምዚ ዓይነት ኣሃዝ እንተ ዘየለ ምንም ኣይትመልስ።--Next_smallest () ዝብል ናይ ዝርዝር 2ይ ዝነኣሰ ኣሃዱ ዝመልስ ተግባር ጽሓፍ።-- ዝርዝር ናይ ምሉእ ኣሃዛት ተዋሂቡካ ኣሎ።--  >>> nextSmallest [1,2,3,4,5]
--  Just (2)
--  >>> nextSmallest [5,1,4,3,2]
--  Just (2)
--  >>> nextSmallest []
--  Just (Nothing)
--  >>> nextSmallest [1,1]
--  Just (Nothing)
nextSmallest :: [Int] -> Maybe Int
nextSmallest lst =","nextSmallest :: [Int] -> Maybe Int
nextSmallest lst =
  let uniqueSorted = removeDuplicates $ quicksort lst
  in if length uniqueSorted < 2
     then Nothing
     else Just (uniqueSorted !! 1)

removeDuplicates :: (Ord a) => [a] -> [a]
removeDuplicates = foldr (\x acc -> if x `elem` acc then acc else x : acc) []

quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
  let smallerSorted = quicksort [a | a <- xs, a <= x]
      biggerSorted = quicksort [a | a <- xs, a > x]
  in smallerSorted ++ [x] ++ biggerSorted","
main :: IO ()
main = do
  let candidate = nextSmallest
  if candidate [1,2,3,4,5] == Just (2) then pure () else error ""assertion failed""
  if candidate [5,1,4,3,2] == Just (2) then pure () else error ""assertion failed""
  if candidate [] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [1,1] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [1,1,1,1,0] == Just (1) then pure () else error ""assertion failed""
  if candidate [1,1] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [(-35),34,12,(-45)] == Just ((-35)) then pure () else error ""assertion failed""
  pure ()"
HumanEval_91,tir_Ethi,hs,"--ንኣብነት: --ሓረግ ብ ' '፣ ' ' ወይ '! ' ይኽፈል።--ናይ ጽምዋታት። ጽምዋ ብ""I"" ዝጅምር ሓረግ እዩ።--❑ ሓደ ናይ ቃላት ሰንሰለት ክወሃበካ ኢዩ፣ እቲ ስራሕካ ድማ ነቲ ቝጽሪ ምቝጻር ኢዩ።--  >>> isBored ""Hello world""
--  0
--  >>> isBored ""The sky is blue. The sun is shining. I love this weather""
--  1
isBored :: String -> Int
isBored S =","isBored :: String -> Int
isBored s = length $ filter (startsWithI . words) $ splitSentences s
  where
    splitSentences :: String -> [String]
    splitSentences = filter (not . null) . map (dropWhile (== ' ')) . splitOnDelimiters "".?!""
    
    splitOnDelimiters :: String -> String -> [String]
    splitOnDelimiters delims str = case dropWhile (`elem` delims) str of
      """" -> []
      s' -> let (w, s'') = break (`elem` delims) s' in w : splitOnDelimiters delims s''
    
    startsWithI :: [String] -> Bool
    startsWithI [] = False
    startsWithI (x:_) = map toLower x == ""i""","
main :: IO ()
main = do
  let candidate = isBored
  if candidate ""Hello world"" == 0 then pure () else error ""assertion failed""
  if candidate ""Is the sky blue?"" == 0 then pure () else error ""assertion failed""
  if candidate ""I love It !"" == 1 then pure () else error ""assertion failed""
  if candidate ""bIt"" == 0 then pure () else error ""assertion failed""
  if candidate ""I feel good today. I will be productive. will kill It"" == 2 then pure () else error ""assertion failed""
  if candidate ""You and I are going for a walk"" == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_92,tir_Ethi,hs,"--ኣብነታት --ኣብ ዝኾነ ካልእ ኩነታት false ይመልስ።--ሓደ ካብ'ቶም ቁጽሪታት ምስ ድምር ናይቶም ካልኦት ክልተ ማዕረ እንተኾይኑ፡ ኩሎም ቁጽሪታት ድማ ምሉእ ቁጽሪታት እንተኾይኖም፡ ሓቂ ይምለስ።--3 ቁጽሪ ዝወስድ መስርሕ ፍጠር።--  >>> anyInt 5 2 7
--  True
--  >>> anyInt 3 2 2
--  False
--  >>> anyInt 3 (-2) 1
--  True
--  >>> anyInt 3.6 -2.2 2
--  False
anyInt :: Float -> Float -> Float -> Bool
anyInt x y z =","anyInt :: Float -> Float -> Float -> Bool
anyInt x y z
  | x == fromInteger (round x) && y == fromInteger (round y) && z == fromInteger (round z) =
      x == y + z || y == x + z || z == x + y
  | otherwise = False","
main :: IO ()
main = do
  let candidate = anyInt
  if candidate 2.0 3.0 1.0 == True then pure () else error ""assertion failed""
  if candidate 2.5 2.0 3.0 == False then pure () else error ""assertion failed""
  if candidate 1.5 5.0 3.5 == False then pure () else error ""assertion failed""
  if candidate 2.0 6.0 2.0 == False then pure () else error ""assertion failed""
  if candidate 4.0 2.0 2.0 == True then pure () else error ""assertion failed""
  if candidate 2.2 2.2 2.2 == False then pure () else error ""assertion failed""
  if candidate (-4).0 6.0 2.0 == True then pure () else error ""assertion failed""
  if candidate 2.0 1.0 1.0 == True then pure () else error ""assertion failed""
  if candidate 3.0 4.0 7.0 == True then pure () else error ""assertion failed""
  if candidate 3.0 4.0 7.0 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_93,tir_Ethi,hs,"--ኣብነት: --ፊደላት ጥራይ ግበር።--ኣብ ፊደል እንግሊዝ ዘሎ ድምጺ።--እቲ መልእኽቲ ምስታ ክልተ ቦታታት ቀዲማ እትርአ ፊደል --ኣብ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ ኡ--❑ ሓደ መልእኽቲ ዝወስድ ከምኡ ድማ ኣብ ከምዚ ዓይነት ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑ ❑--  >>> encode ""test""
--  ""TGST""
--  >>> encode ""This is a message""
--  ""tHKS KS C MGSSCGG""
encode :: String -> String
encode message =","encode :: String -> String
encode = map transformChar
  where
    transformChar :: Char -> Char
    transformChar c
      | isVowel lowerC = toEnum (fromEnum lowerC + 2) `swapCase` c
      | otherwise      = swapCase c c
      where
        lowerC = toLower c

    isVowel :: Char -> Bool
    isVowel c = c `elem` ""aeiou""

    swapCase :: Char -> Char -> Char
    swapCase origC c
      | isUpper origC = toLower c
      | otherwise     = toUpper c","
main :: IO ()
main = do
  let candidate = encode
  if candidate ""TEST"" == ""tgst"" then pure () else error ""assertion failed""
  if candidate ""Mudasir"" == ""mWDCSKR"" then pure () else error ""assertion failed""
  if candidate ""YES"" == ""ygs"" then pure () else error ""assertion failed""
  if candidate ""This is a message"" == ""tHKS KS C MGSSCGG"" then pure () else error ""assertion failed""
  if candidate ""I DoNt KnOw WhAt tO WrItE"" == ""k dQnT kNqW wHcT Tq wRkTg"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_94,tir_Ethi,hs,"--ኣብነት: --እቲ ዝዓበየ ቀዳማይ ዋጋ ክትረክብን ድምር ናይቶም ኣሃዛት ክትመልስን ኣለካ።-- ዝርዝር ናይ ምሉእ ኣሃዛት ተዋሂቡካ ኣሎ።--  >>> skjkasdkd [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]
--  10
--  >>> skjkasdkd [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]
--  25
--  >>> skjkasdkd [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]
--  13
--  >>> skjkasdkd [0,724,32,71,99,32,6,0,5,91,83,0,5,6]
--  11
--  >>> skjkasdkd [0,81,12,3,1,21]
--  3
--  >>> skjkasdkd [0,8,1,2,1,7]
--  7
skjkasdkd :: [Int] -> Int
skjkasdkd lst =","skjkasdkd :: [Int] -> Int
skjkasdkd lst = sumDigits (largestPrime lst)

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | n == 2 = True
  | even n = False
  | otherwise = null [x | x <- [3,5..isqrt n], n `mod` x == 0]

-- Integer square root using binary search, O(log n)
isqrt :: Int -> Int
isqrt n = floor . sqrt $ fromIntegral n

-- Function to find the largest prime in the list
largestPrime :: [Int] -> Int
largestPrime = foldr (\x acc -> if isPrime x && x > acc then x else acc) 0

-- Function to calculate the sum of the digits of a number
sumDigits :: Int -> Int
sumDigits 0 = 0
sumDigits n = n `mod` 10 + sumDigits (n `div` 10)","
main :: IO ()
main = do
  let candidate = skjkasdkd
  if candidate [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] == 10 then pure () else error ""assertion failed""
  if candidate [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] == 25 then pure () else error ""assertion failed""
  if candidate [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] == 13 then pure () else error ""assertion failed""
  if candidate [0,724,32,71,99,32,6,0,5,91,83,0,5,6] == 11 then pure () else error ""assertion failed""
  if candidate [0,81,12,3,1,21] == 3 then pure () else error ""assertion failed""
  if candidate [0,8,1,2,1,7] == 7 then pure () else error ""assertion failed""
  if candidate [8191] == 19 then pure () else error ""assertion failed""
  if candidate [8191,123456,127,7] == 19 then pure () else error ""assertion failed""
  if candidate [127,97,8192] == 10 then pure () else error ""assertion failed""
  pure ()"
HumanEval_95,tir_Ethi,hs,"--ኣብነት: --እቲ ተግባር False ክመልስ ኣለዎ እቲ ዝተዋህበ ናይ ምትእስሳር ዝርዝር ባዶ እዩ።--ኣብ ናይ ሓሶት ወይ ናይ ኩለን ቁልፊታት ናይ ሓሶት ክፋል--❑ ናይ ኣተሓሕዛ ዝርዝር እንተሃሊዩ፡ ኩሉ ቁልፊታት ናይ ታሕቲ ር እንተኾይኑ፡ True ይመልስ።--  >>> checkDictCase [(""a"", ""apple""), (""b"", ""banana"")]
--  True
--  >>> checkDictCase [(""a"", ""apple""), (""A"", ""banana""), (""B"", ""banana"")]
--  False
--  >>> checkDictCase [(""a"", ""apple""), (8, ""banana""), (""a"", ""apple"")]
--  False
--  >>> checkDictCase [(""Name"", ""John""), (""Age"", ""36""), (""City"", ""Houston"")]
--  False
--  >>> checkDictCase [(""STATE"", ""NC""), (""ZIP"", ""12345"")]
--  True
checkDictCase :: [(String, String)] -> Bool
checkDictCase dict =","import Data.Char (isUpper, isLower)

checkDictCase :: [(String, String)] -> Bool
checkDictCase [] = False
checkDictCase dict = all isLower allKeys || all isUpper allKeys
  where
    allKeys = concatMap fst dict","
main :: IO ()
main = do
  let candidate = checkDictCase
  if candidate [(""p"", ""pineapple""), (""b"", ""banana"")] == True then pure () else error ""assertion failed""
  if candidate [(""p"", ""pineapple""), (""A"", ""banana""), (""B"", ""banana"")] == False then pure () else error ""assertion failed""
  if candidate [(""p"", ""pineapple""), (""5"", ""banana""), (""a"", ""apple"")] == False then pure () else error ""assertion failed""
  if candidate [(""Name"", ""John""), (""Age"", ""36""), (""City"", ""Houston"")] == False then pure () else error ""assertion failed""
  if candidate [(""STATE"", ""NC""), (""ZIP"", ""12345"")] == True then pure () else error ""assertion failed""
  if candidate [(""fruit"", ""Orange""), (""taste"", ""Sweet"")] == True then pure () else error ""assertion failed""
  if candidate [] == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_96,tir_Ethi,hs,"--ንኣብነት: --ቀዳሞት ቁጽሪ ዝኾኑን ካብ n ንታሕቲ ዝኾኑን ምሉእ ቁጽሪታት።--❑ ሓደ ኣሉታዊ ዘይኮነ ምሉእ ቁጽሪ ዝወስድ እሞ ናይ ቀዳሞት n ዝርዝር ዝመልስ ተግባር ኣማዕብል--  >>> countUpTo 5
--  [2,3]
--  >>> countUpTo 11
--  [2,3,5,7]
--  >>> countUpTo 0
--  []
--  >>> countUpTo 20
--  [2,3,5,7,11,13,17,19]
--  >>> countUpTo 1
--  []
--  >>> countUpTo 18
--  [2,3,5,7,11,13,17]
countUpTo :: Int -> [Int]
countUpTo n =","countUpTo :: Int -> [Int]
countUpTo n = filter isPrime [2..n-1]

isPrime :: Int -> Bool
isPrime k
  | k < 2     = False
  | otherwise = null [ x | x <- [2..isqrt k], k `mod` x == 0 ]

isqrt :: Int -> Int
isqrt = floor . sqrt . fromIntegral","
main :: IO ()
main = do
  let candidate = countUpTo
  if candidate 5 == [2,3] then pure () else error ""assertion failed""
  if candidate 6 == [2,3,5] then pure () else error ""assertion failed""
  if candidate 7 == [2,3,5] then pure () else error ""assertion failed""
  if candidate 10 == [2,3,5,7] then pure () else error ""assertion failed""
  if candidate 0 == [] then pure () else error ""assertion failed""
  if candidate 22 == [2,3,5,7,11,13,17,19] then pure () else error ""assertion failed""
  if candidate 1 == [] then pure () else error ""assertion failed""
  if candidate 18 == [2,3,5,7,11,13,17] then pure () else error ""assertion failed""
  if candidate 47 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43] then pure () else error ""assertion failed""
  if candidate 101 == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] then pure () else error ""assertion failed""
  pure ()"
HumanEval_97,tir_Ethi,hs,"--ኣብነት: --እቲ ኣታዊ ኩሉ ግዜ ቅቡል እዩ ኢልካ ትሓስብ።--ናይ ኣሃዱ ቁፅሪኦም እቶት እዩ።--ነቲ ክልተ ምሉእ ኣሃዛት ዝወስድ መስርሕ ኣዛዝሞ እሞ ተመሊሱ--  >>> multiply 148 412
--  16
--  >>> multiply 19 28
--  72
--  >>> multiply 2020 1851
--  0
--  >>> multiply 14 (-15)
--  20
multiply :: Int -> Int -> Int
multiply a b =","multiply :: Int -> Int -> Int
multiply a b = (abs a `mod` 10) * (abs b `mod` 10)","
main :: IO ()
main = do
  let candidate = multiply
  if candidate 148 412 == 16 then pure () else error ""assertion failed""
  if candidate 19 28 == 72 then pure () else error ""assertion failed""
  if candidate 2020 1851 == 0 then pure () else error ""assertion failed""
  if candidate 14 (-15) == 20 then pure () else error ""assertion failed""
  if candidate 76 67 == 42 then pure () else error ""assertion failed""
  if candidate 17 27 == 49 then pure () else error ""assertion failed""
  if candidate 0 1 == 0 then pure () else error ""assertion failed""
  if candidate 0 0 == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_98,tir_Ethi,hs,"--ንኣብነት: --❑ ኣብ ሓደ ሕብረሰተብ s፡ ቍጽሪ ናይተን ኣብ እኩል ደረጃ ዘለዋ ዓበይቲ ፊደላት ድምጺ ቝጸራ።--  >>> countUpper ""aBCdEf""
--  1
--  >>> countUpper ""abcdefg""
--  0
--  >>> countUpper ""dBBE""
--  0
countUpper :: String -> Int
countUpper s =","countUpper :: String -> Int
countUpper s = length [c | (i, c) <- zip [0..] s, i `mod` 2 == 0, c `elem` ""AEIOU""]","
main :: IO ()
main = do
  let candidate = countUpper
  if candidate ""aBCdEf"" == 1 then pure () else error ""assertion failed""
  if candidate ""abcdefg"" == 0 then pure () else error ""assertion failed""
  if candidate ""dBBE"" == 0 then pure () else error ""assertion failed""
  if candidate ""B"" == 0 then pure () else error ""assertion failed""
  if candidate ""U"" == 1 then pure () else error ""assertion failed""
  if candidate """" == 0 then pure () else error ""assertion failed""
  if candidate ""EEEE"" == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_99,tir_Ethi,hs,"--ኣብነታት --ካብ ክልተ ምሉእ ቁጽሪ፡ ካብ ዜሮ ርሒቕካ ኣወከብ።--እቲ ቁጽሪ ማዕረ ርሕቀት እንተኾይኑ --❑ ሓደ ቁጽሪ ዝውክል ዋጋ (ስትሪንግ) ዝወስድ ተግባር ፍጠር።--  >>> closestInteger ""10""
--  10
--  >>> closestInteger ""15.3""
--  15
--  Note:
--  Rounding away from zero means that if the given number is equidistant
--  from two integers, the one you should return is the one that is the
--  farthest from zero. For example closest_integer(""14.5"") should
--  return 15 and closest_integer(""-14.5"") should return -15.
closestInteger :: String -> Int
closestInteger value =","closestInteger :: String -> Int
closestInteger value = 
  let n = read value :: Double
  in if n > 0 then floor (n + 0.5) else ceiling (n - 0.5)","
main :: IO ()
main = do
  let candidate = closestInteger
  if candidate ""10"" == 10 then pure () else error ""assertion failed""
  if candidate ""14.5"" == 15 then pure () else error ""assertion failed""
  if candidate ""-15.5"" == (-16) then pure () else error ""assertion failed""
  if candidate ""15.3"" == 15 then pure () else error ""assertion failed""
  if candidate ""0"" == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_100,tir_Ethi,hs,"--ኣብነት: --i ኣብ ደረጃ (i+1) ዘሎ ቑጽሪ ኣእማን የመልክት።--ኣብ ዝርዝር፡ ኣብ ነፍሲ ወከፍ ደረጃ፡ ቁጽሪ ኣእማን ይመልስ።--- እቲ ቀፃሊ ቁፅሪ n እንተኾይኑ።--- እቲ ቀጺሉ ዘሎ ዘይምቁጽሪ እንተ n ዘይምቁጽሪ እዩ።--ኣብ ቀፃሊ ደረጃ ዘሎ ቁፅሪ ኣእማን: --እቲ ቀዳማይ ደረጃ n ኣእማን ኣለዎ።--❑ ሓደ ኣወንታዊ ምሉእ ቊጽሪ n እንተሃሊዩ፡ ናይ n ደረጃታት እምኒ ክትገብር ኣለካ።--  >>> makeAPile 3
--  [3,5,7]
makeAPile :: Int -> [Int]
makeAPile n =","makeAPile :: Int -> [Int]
makeAPile n = take n [n, n + 2 ..]","
main :: IO ()
main = do
  let candidate = makeAPile
  if candidate 3 == [3,5,7] then pure () else error ""assertion failed""
  if candidate 4 == [4,6,8,10] then pure () else error ""assertion failed""
  if candidate 5 == [5,7,9,11,13] then pure () else error ""assertion failed""
  if candidate 6 == [6,8,10,12,14,16] then pure () else error ""assertion failed""
  if candidate 8 == [8,10,12,14,16,18,20,22] then pure () else error ""assertion failed""
  pure ()"
HumanEval_101,tir_Ethi,hs,"--ንኣብነት: --ነቲ ሕብረ-ቃላት ናብ ቃላት ከፋፊልካ ዝርዝር ቃላት ምምላስ--ብኮማ ወይ ብቦታታት ዝተፈልዩ ቃላት ክወሃቡኻ እዮም። ግዴታኻ ድማ --  >>> wordsString ""Hi, my name is John""
--  [""Hi"",""my"",""name"",""is"",""John""]
--  >>> wordsString ""One, two, three, four, five, six""
--  [""One"",""two"",""three"",""four"",""five"",""six""]
wordsString :: String -> [String]
wordsString s =","wordsString :: String -> [String]
wordsString s = words $ map (\c -> if c == ',' then ' ' else c) s","
main :: IO ()
main = do
  let candidate = wordsString
  if candidate ""Hi, my name is John"" == [""Hi"",""my"",""name"",""is"",""John""] then pure () else error ""assertion failed""
  if candidate ""One, two, three, four, five, six"" == [""One"",""two"",""three"",""four"",""five"",""six""] then pure () else error ""assertion failed""
  if candidate ""Hi, my name"" == [""Hi"",""my"",""name""] then pure () else error ""assertion failed""
  if candidate ""One,, two, three, four, five, six,"" == [""One"",""two"",""three"",""four"",""five"",""six""] then pure () else error ""assertion failed""
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""ahmed     , gamal"" == [""ahmed"",""gamal""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_102,tir_Ethi,hs,"--ንኣብነት: --ከምዚ ዓይነት ቁጽሪ ስለ ዘየለ እቲ ተግባር -1 ክመልስ ኣለዎ።--እቲ ዝዓበየ ሓምራዊ ምሉእ ቑጽሪ ኣብ ውሽጢ [x, y] እዩ።--እዚ ተግባር እዚ ክልተ ኣወንታዊ ቑጽሪ xን yን ወሲዱ ነቲ --  >>> chooseNum 12 15
--  14
--  >>> chooseNum 13 12
--  (-1)
chooseNum :: Int -> Int -> Int
chooseNum x y =","chooseNum :: Int -> Int -> Int
chooseNum x y
    | x > y = -1
    | even upperBound = upperBound
    | even (upperBound - 1) = upperBound - 1
    | otherwise = -1
  where
    upperBound = max x y","
main :: IO ()
main = do
  let candidate = chooseNum
  if candidate 12 15 == 14 then pure () else error ""assertion failed""
  if candidate 13 12 == (-1) then pure () else error ""assertion failed""
  if candidate 33 12354 == 12354 then pure () else error ""assertion failed""
  if candidate 5234 5233 == (-1) then pure () else error ""assertion failed""
  if candidate 6 29 == 28 then pure () else error ""assertion failed""
  if candidate 27 10 == (-1) then pure () else error ""assertion failed""
  if candidate 7 7 == (-1) then pure () else error ""assertion failed""
  if candidate 546 546 == 546 then pure () else error ""assertion failed""
  pure ()"
HumanEval_104,tir_Ethi,hs,"--ንኣብነት: --ኣስተብህለሉ: እቲ ዝተመለሰ ዝርዝር ብዕጽፊ ክውስኽ ኣለዎ።--ሓደ ሓደ ኣሃዛት ዘይብሎም ኣሃዛት--❑ ዝርዝር ናይ ኣወንታዊ ኹሉ ቑጽሪ x እንተሃሊዩ፡ ዝርዝር ናይ ኹሎም ቑጽሪታት ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ ታይ--  >>> uniqueDigits [15,33,1422,1]
--  [1,15,33]
--  >>> uniqueDigits [152,323,1422,10]
--  []
uniqueDigits :: [Int] -> [Int]
uniqueDigits x =","uniqueDigits :: [Int] -> [Int]
uniqueDigits x = sort $ filter (all odd . map (read . (:[])) . show) x","
main :: IO ()
main = do
  let candidate = uniqueDigits
  if candidate [15,33,1422,1] == [1,15,33] then pure () else error ""assertion failed""
  if candidate [152,323,1422,10] == [] then pure () else error ""assertion failed""
  if candidate [12345,2033,111,151] == [111,151] then pure () else error ""assertion failed""
  if candidate [135,103,31] == [31,135] then pure () else error ""assertion failed""
  pure ()"
HumanEval_105,tir_Ethi,hs,"--ንኣብነት: --""ሓደ፡"" ""ክልተ፡"" ""ሰለስተ፡"" ""ኣርባዕተ፡"" ""ሓሙሽተ፡"" ""ሽዱሽተ፡"" ""ሸውዓተ፡"" ""ሸሞንተ፡"" ""ትሽዓተ""--ነቲ ዝተረኽበ ዝርዝር ንድሕሪት ገጹ ይመልሶ፡ ድሕሪኡ ንነፍሲ ወከፍ ዲጂት በቲ ዝምልከቶ ስም ካብ  ይትክኦ።--❑ ዝርዝር ምሉእ ቁጽሪ ተዋሂቡካ ካብ 1 ክሳብ 9 ዘሎ ኹሉ ምሉእ ቁጽሪ ኣወዳድብ።--  >>> byLength [2,1,1,4,5,8,2,3]
--  [""Eight"",""Five"",""Four"",""Three"",""Two"",""Two"",""One"",""One""]
--  If the list is empty, return an empty list:
--  >>> byLength []
--  []
--  If the list has any strange number ignore it:
--  >>> byLength [1,(-1),55]
--  [""One""]
byLength :: [Int] -> [String]
byLength arr =","byLength :: [Int] -> [String]
byLength arr = map digitName . reverse . sort . filter isValid $ arr
  where
    isValid x = x >= 1 && x <= 9
    digitName x = case x of
      1 -> ""One""
      2 -> ""Two""
      3 -> ""Three""
      4 -> ""Four""
      5 -> ""Five""
      6 -> ""Six""
      7 -> ""Seven""
      8 -> ""Eight""
      9 -> ""Nine""
      _ -> error ""Unexpected number""","
main :: IO ()
main = do
  let candidate = byLength
  if candidate [2,1,1,4,5,8,2,3] == [""Eight"",""Five"",""Four"",""Three"",""Two"",""Two"",""One"",""One""] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,(-1),55] == [""One""] then pure () else error ""assertion failed""
  if candidate [1,(-1),3,2] == [""Three"",""Two"",""One""] then pure () else error ""assertion failed""
  if candidate [9,4,8] == [""Nine"",""Eight"",""Four""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_106,tir_Ethi,hs,"--ኣብነት: --ፋክቶሪያል ናይ i ናይቶም ካብ 1 ክሳብ i (1 * 2 * ... * i) ዝኾኑ ቁጽሪታት ምስፋር እዩ።--ካብ 1 ይጅምር።--ወይ ድምር ካብ 1 ክሳብ i ዝኾኑ ቁጽሪታት።--እቲ ዋጋ ናይቲ ኣብ ኢንደክስ i ዘሎ ኣሃዝ ናይ i ፋክቶሪያል ክኸውን ከሎ እቲ ዋጋ ናይ n መጠን ዘለዎ ዝርዝር ይመልስ።--f ን ከም ፓራሜተር ዝወስድ ተግባር ተተግብሩ።--  >>> f 5
--  [1,2,6,24,15]
f :: Int -> [Int]
f n =","f :: Int -> [Int]
f n = map g [1..n]
  where
    g i
      | even i    = factorial i
      | otherwise = sum [1..i]
    
    factorial 0 = 1
    factorial m = product [1..m]","
main :: IO ()
main = do
  let candidate = f
  if candidate 5 == [1,2,6,24,15] then pure () else error ""assertion failed""
  if candidate 7 == [1,2,6,24,15,720,28] then pure () else error ""assertion failed""
  if candidate 1 == [1] then pure () else error ""assertion failed""
  if candidate 3 == [1,2,6] then pure () else error ""assertion failed""
  pure ()"
HumanEval_107,tir_Ethi,hs,"--ኣብነት 1 --ኣብ ውሽጢ እቲ ክልል ዝወድቁ ናይ ምሉእ ቁጽሪ ፓሊንድሮም ((1, n) ን ሓዊሱ) ።-- ሓደ ኣወንታዊ ምሉእ ቑጽሪ n እንተሃሊዩ፡ ሓደ ቑጽሪ ናይ እኩል ዉን ዘይእኩል ዉን ዘለዎ ቱፕል ተመሊሱ ይምጻእ።--  >>> evenOddPalindrome 3
--  (1, 2)
--  Explanation:
--  Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
--  Example 2:
--  >>> evenOddPalindrome 12
--  (4, 6)
--  Explanation:
--  Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
--  Note:
--  1. 1 <= n <= 10^3
--  2. returned tuple has the number of even and odd integer palindromes respectively.
evenOddPalindrome :: Int -> (Int, Int)
evenOddPalindrome n =","evenOddPalindrome :: Int -> (Int, Int)
evenOddPalindrome n = (length evens, length odds)
  where
    isPalindrome x = show x == reverse (show x)
    palindromes = filter isPalindrome [1..n]
    evens = filter even palindromes
    odds  = filter odd palindromes","
main :: IO ()
main = do
  let candidate = evenOddPalindrome
  if candidate 123 == (8, 13) then pure () else error ""assertion failed""
  if candidate 12 == (4, 6) then pure () else error ""assertion failed""
  if candidate 3 == (1, 2) then pure () else error ""assertion failed""
  if candidate 63 == (6, 8) then pure () else error ""assertion failed""
  if candidate 25 == (5, 6) then pure () else error ""assertion failed""
  if candidate 19 == (4, 6) then pure () else error ""assertion failed""
  if candidate 9 == (4, 5) then pure () else error ""assertion failed""
  if candidate 1 == (0, 1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_108,tir_Ethi,hs,"--ንኣብነት -123፡ -1, 2ን 3ን ዝተፈረመ ኣሃዛት ኣለዎ።--ሓደ ቑጽሪ ኣሉታዊ እንተኾይኑ፡ እቲ ቀዳማይ ዝተፈረመ ዲጂቱ ኣሉታዊ ክኸውን እዩ: --እቲ ቁጽሪ ናይቶም ኣሃዛት ድምር > 0 ዘለዎ ኣሃዛት እዩ።--count_nums ዝብል ናይ ምሉእ ኣሃዛት ዝርዝር ሒዙ ተመሊሱ ዝምለስ ተግባር ጽሓፍ።--  >>> countNums []
--  0
--  >>> countNums [(-1),11,(-11)]
--  1
--  >>> countNums [1,1,2]
--  3
countNums :: [Int] -> Int
countNums arr =","countNums :: [Int] -> Int
countNums arr = length $ filter ((> 0) . sumDigits) arr
  where
    sumDigits 0 = 0
    sumDigits n = let digits = if n < 0 then -1 : map (read . (:[])) (tail (show (-n))) else map (read . (:[])) (show n)
                  in sum digits","
main :: IO ()
main = do
  let candidate = countNums
  if candidate [] == 0 then pure () else error ""assertion failed""
  if candidate [(-1),(-2),0] == 0 then pure () else error ""assertion failed""
  if candidate [1,1,2,(-2),3,4,5] == 6 then pure () else error ""assertion failed""
  if candidate [1,6,9,(-6),0,1,5] == 5 then pure () else error ""assertion failed""
  if candidate [1,100,98,(-7),1,(-1)] == 4 then pure () else error ""assertion failed""
  if candidate [12,23,34,(-45),(-56),0] == 5 then pure () else error ""assertion failed""
  if candidate [0,1] == 1 then pure () else error ""assertion failed""
  if candidate [1] == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_109,tir_Ethi,hs,"--ንኣብነት: --ኣስተብህለሉ: እቲ ዝተዋህበ ዝርዝር ፍሉይ ባእታታት ከምዘለዎ ውሕስነት ኣሎ።--እቲ ዝርዝር ባዶ እንተኾይኑ True ይመልስ።--ሓቅነት ወይ ድማ ሓሶት ምምላስ--እዚ ኣብ ላዕሊ ዝተጠቕሰ ስርሒት ብምግባር ዝተመደበ ዝርዝር ምርካብ እንተ ተኻኢሉ --ኣብ ዝርዝር 0ይ መወከሲ ቦታ።--እቲ ናይ መወዳእታ ኣሃዱ ናይታ ዝርዝር ናብ  ክግዕዝ እዩ።--ሓደ ናይ የማን ስግግር ማለት ንኩሎም ናይ ዝርዝር ኣቑሑት ብሓደ ምቕያር ማለት እዩ።--ኣብ የማናይ ሸነኽ ናይ ምቅያር ስርሒት ብዝደለኻዮ መጠን ክትገብር ትፍቀድ።--ኣብ'ዚ ዝተዋህበ ዝርዝር እዚ ዝስዕብ ስርሒት: -- ብምግባር፡ ዝርዝር ብዘይ ወሪዱ ዘሎ ቅደም ተከተል ክትምደብ ይከኣል እዩ።--ኣብ ዝርዝር ዘለዉ ቁጽሪታት ብዘፈቀደ ክምደቡ እዮም። ናትካ ዕማም ድማ እንተ ኾነ ምምርማር እዩ።--ናይ N ምሉእ ቁጽሪታት ዝርዝር 'arr' ኣለና arr[1], arr[2], ..., arr[N]። እቲ --  >>> moveOneBall [3,4,5,1,2]
--  True
--  Explanation: By performin 2 right shift operations, non-decreasing order can
--  be achieved for the given list.
--  >>> moveOneBall [3,5,4,1,2]
--  False
--  Explanation:It is not possible to get non-decreasing order for the given
--  list by performing any number of right shift operations.
moveOneBall :: [Int] -> Bool
moveOneBall arr =","moveOneBall :: [Int] -> Bool
moveOneBall [] = True
moveOneBall arr = canBeSorted (arr ++ arr)
  where
    n = length arr
    canBeSorted xs = any isSorted (take n <$> tails xs)
    isSorted ys = and $ zipWith (<=) ys (tail ys)
    tails [] = []
    tails l@(_:xs) = l : tails xs","
main :: IO ()
main = do
  let candidate = moveOneBall
  if candidate [3,4,5,1,2] == True then pure () else error ""assertion failed""
  if candidate [3,5,10,1,2] == True then pure () else error ""assertion failed""
  if candidate [4,3,1,2] == False then pure () else error ""assertion failed""
  if candidate [3,5,4,1,2] == False then pure () else error ""assertion failed""
  if candidate [] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_110,tir_Ethi,hs,"--ንኣብነት: --እንተዘይኮይኑ ""ኣይፋል"" ምለስ።--ኩሎም ኣሃዛት lst1 እኩል ክኾኑ እንተኾይኖም ""YES"" ይመልሱ።--ኣብ መንጎ lst1ን lst2ን ክለዋወጡ እንተ ተኻኢሉ--ኣብ መንጎ lst1ን lst2ን ዝልውጡ ቁፅሪ መለለዪ ገደብ የብሉን።--ኣብ መንጎኦም፡ Ist1፡ ዝርዝር ናይ እኩል ቁጽሪ ጥራይ ንምግባር።--ናይ ኣሃዛት ምልውዋጥ ክግበር ይከኣል እንተኾይኑ ድማ ይውስን።--ኣብዚ ጸገም እዚ ክልተ ዝርዝር ቁጽሪ ዝወስድ ተግባር ክትፍጽሙ ኢኹም--  >>> exchange [1,2,3,4] [1,2,3,4]
--  ""YES""
--  >>> exchange [1,2,3,4] [1,5,3,4]
--  ""NO""
--  It is assumed that the input lists will be non-empty.
exchange :: [Int] -> [Int] -> String
exchange lst1 lst2 =","exchange :: [Int] -> [Int] -> String
exchange lst1 lst2
  | all even lst1 = ""YES""
  | null oddLst1 || null evenLst2 = ""NO""
  | otherwise = let possibility = all even ([x | x <- lst1, even x] ++ evenLst2)
                in if possibility then ""YES"" else ""NO""
  where
    oddLst1 = filter odd lst1
    evenLst2 = filter even lst2","
main :: IO ()
main = do
  let candidate = exchange
  if candidate [1,2,3,4] [1,2,3,4] == ""YES"" then pure () else error ""assertion failed""
  if candidate [1,2,3,4] [1,5,3,4] == ""NO"" then pure () else error ""assertion failed""
  if candidate [1,2,3,4] [2,1,4,3] == ""YES"" then pure () else error ""assertion failed""
  if candidate [5,7,3] [2,6,4] == ""YES"" then pure () else error ""assertion failed""
  if candidate [5,7,3] [2,6,3] == ""NO"" then pure () else error ""assertion failed""
  if candidate [3,2,6,1,8,9] [3,5,5,1,1,1] == ""NO"" then pure () else error ""assertion failed""
  if candidate [100,200] [200,200] == ""YES"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_111,tir_Ethi,hs,"--ኣብነት: --ብዙሓት ፊደላት ሓደ ዓይነት ተርእዮ እንተሃልዮም፡ ንኹሎም ምለሶም።--እቲ ዝበዝሐ ግዜ ዝደጋገም ደብዳበ ምስ ዝህልዎ ድማ እቲ ዝምልከቶ ቁጽሪ ይርከብ።-- ሓደ ሕብረ-ኣልማድ ናይ ሓደ ናይ ቦታ ዝተፈልየ ፊደላት ዝገልጽ ሕብረ-ኣልማድ ተዋሂቡካ፣ ናይ ምትእስሳር ዝርዝር ተመሊስካ ምሃብ--  >>> histogram ""a b c""
--  [(""a"", 1), (""b"", 1), (""c"", 1)]
--  >>> histogram ""a b b a""
--  [(""a"", 2), (""b"", 2)]
--  >>> histogram ""a b c a b""
--  [(""a"", 2), (""b"", 2)]
--  >>> histogram ""b b b b a""
--  [(""b"", 4)]
--  >>> histogram """"
--  []
histogram :: String -> [(String, Int)]
histogram test =","import Data.List (group, sort)
import Data.Ord (comparing)

histogram :: String -> [(String, Int)]
histogram input =
  let wordsList = words input
      grouped = group $ sort wordsList
      countList = map (\ws -> (head ws, length ws)) grouped
      maxCount = if null countList then 0 else maximum $ map snd countList
  in filter ((== maxCount) . snd) countList","
main :: IO ()
main = do
  let candidate = histogram
  if candidate ""a b b a"" == [(""a"", 2), (""b"", 2)] then pure () else error ""assertion failed""
  if candidate ""a b c a b"" == [(""a"", 2), (""b"", 2)] then pure () else error ""assertion failed""
  if candidate ""a b c d g"" == [(""a"", 1), (""b"", 1), (""c"", 1), (""d"", 1), (""g"", 1)] then pure () else error ""assertion failed""
  if candidate ""r t g"" == [(""r"", 1), (""t"", 1), (""g"", 1)] then pure () else error ""assertion failed""
  if candidate ""b b b b a"" == [(""b"", 4)] then pure () else error ""assertion failed""
  if candidate ""r t g"" == [(""r"", 1), (""t"", 1), (""g"", 1)] then pure () else error ""assertion failed""
  if candidate """" == [] then pure () else error ""assertion failed""
  if candidate ""a"" == [(""a"", 1)] then pure () else error ""assertion failed""
  pure ()"
HumanEval_112,tir_Ethi,hs,"--ኣብነት --ነቲ ውጽኢት ዘጠቓለለ ናይ ትግርኛን ሓቅን/ሓሶትን ናይ ምርመራን ትሕዝቶ ዘለዎ ትፕል ክትመልስ ኣለካ።--ሓደ ሕብረቁምፊ ከምቲ ንቕድሚት ዝንበብ ንድሕሪት ተመሳሳሊ እንተኾይኑ ፓሊንድሮም እዩ ዝብሃል።--እቲ ውጽኢት ናይ ሕብረቁምፊ ፓሊንድሮም እንተኾይኑ ድማ መርምር።--sን cን ዝብሉ ክልተ ሕብረ-ቁጽሪ ተዋሂቡና ኣሎ፣ ኣብ s ዘሎ ኩሉ ምስ c ዘሎ ዝኾነ ሕብረ-ቁጽሪ ዝመጣጠን ክስረዝ ኣለዎ።--ዕማም--  >>> reverseDelete ""abcde"" ""ae""
--  (""bcd"", False)
--  >>> reverseDelete ""abcdef"" ""b""
--  (""acdef"", False)
--  >>> reverseDelete ""abcdedcba"" ""ab""
--  (""cdedc"", True)
reverseDelete :: String -> String -> (String, Bool)
reverseDelete s c =","import Data.List (filter)

reverseDelete :: String -> String -> (String, Bool)
reverseDelete s c =
  let result = filter (`notElem` c) s
  in (result, result == reverse result)","
main :: IO ()
main = do
  let candidate = reverseDelete
  if candidate ""abcde"" ""ae"" == (""bcd"", False) then pure () else error ""assertion failed""
  if candidate ""abcdef"" ""b"" == (""acdef"", False) then pure () else error ""assertion failed""
  if candidate ""abcdedcba"" ""ab"" == (""cdedc"", True) then pure () else error ""assertion failed""
  if candidate ""dwik"" ""w"" == (""dik"", False) then pure () else error ""assertion failed""
  if candidate ""a"" ""a"" == ("""", True) then pure () else error ""assertion failed""
  if candidate ""abcdedcba"" """" == (""abcdedcba"", True) then pure () else error ""assertion failed""
  if candidate ""abcdedcba"" ""v"" == (""abcdedcba"", True) then pure () else error ""assertion failed""
  if candidate ""vabba"" ""v"" == (""abba"", True) then pure () else error ""assertion failed""
  if candidate ""mamma"" ""mia"" == ("""", True) then pure () else error ""assertion failed""
  pure ()"
HumanEval_113,tir_Ethi,hs,"--ኣብ'ቲ ናይ ምእታው i'th string ናይ ዘይንቡር ኣሃዛት --እቲ i ናይ'ቲ ናይ ምእታው መስመሪ እዩ።"" ኣብዚ ኩሉ እቲ i ብቁጽሪ  ክትካእ ኣለዎ።--ነፍሲ ወከፍ ኣሃዝ i ናይ ውጽኢት፡ ""ቁጽሪ ናይቶም ኣብ --❑ ዝርዝር ናይ ሕብረቁምፊታት ተዋሂቡካ፣ ነፍሲ ወከፍ ሕብረቁምፊ ብቁጽሪ ጥራይ ዝቖመ፣ ዝርዝር ምለስ።--  >>> oddCount [""1234567""]
--  [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
--  >>> oddCount [""3"",""11111111""]
--  [""the number of odd elements 1n the str1ng 1 of the 1nput."",""the number of odd elements 8n the str8ng 8 of the 8nput.""]
oddCount :: [String] -> [String]
oddCount lst =","oddCount :: [String] -> [String]
oddCount lst = map formatString lst
  where
    isOddDigit :: Char -> Bool
    isOddDigit c = c `elem` ""13579""

    countOdds :: String -> Int
    countOdds str = length $ filter isOddDigit str

    formatString :: String -> String
    formatString str =
      let oddCount = countOdds str in
      ""the number of odd elements "" ++ show oddCount ++ 
      ""n the str"" ++ show oddCount ++ ""ng "" ++ show oddCount ++
      "" of the "" ++ show oddCount ++ ""nput.""","
main :: IO ()
main = do
  let candidate = oddCount
  if candidate [""1234567""] == [""the number of odd elements 4n the str4ng 4 of the 4nput.""] then pure () else error ""assertion failed""
  if candidate [""3"",""11111111""] == [""the number of odd elements 1n the str1ng 1 of the 1nput."",""the number of odd elements 8n the str8ng 8 of the 8nput.""] then pure () else error ""assertion failed""
  if candidate [""271"",""137"",""314""] == [""the number of odd elements 2n the str2ng 2 of the 2nput."",""the number of odd elements 3n the str3ng 3 of the 3nput."",""the number of odd elements 2n the str2ng 2 of the 2nput.""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_114,tir_Ethi,hs,"--ኣብነት --ታት--❑ ዝርዝር ናይ ምሉእ ቁጽሪታት እንተሃሊዩ፡ ንነኣሽቱ ድምር ናይ ዝኾነ ባዶ ዘይኮነ ንኡስ ዝርዝር ርኸብ።--  >>> minsubarraysum [2,3,4,1,2,4]
--  1
--  >>> minsubarraysum [(-1),(-2),(-3)]
--  (-6)
minsubarraysum :: [Int] -> Int
minsubarraysum nums =","minsubarraysum :: [Int] -> Int
minsubarraysum nums = minimum $ scanl1 (\acc x -> min x (acc + x)) nums","
main :: IO ()
main = do
  let candidate = minsubarraysum
  if candidate [2,3,4,1,2,4] == 1 then pure () else error ""assertion failed""
  if candidate [(-1),(-2),(-3)] == (-6) then pure () else error ""assertion failed""
  if candidate [(-1),(-2),(-3),2,(-10)] == (-14) then pure () else error ""assertion failed""
  if candidate [(-9999999999999999)] == (-9999999999999999) then pure () else error ""assertion failed""
  if candidate [0,10,20,1000000] == 0 then pure () else error ""assertion failed""
  if candidate [(-1),(-2),(-3),10,(-5)] == (-6) then pure () else error ""assertion failed""
  if candidate [100,(-1),(-2),(-3),10,(-5)] == (-6) then pure () else error ""assertion failed""
  if candidate [10,11,13,8,3,4] == 3 then pure () else error ""assertion failed""
  if candidate [100,(-33),32,(-1),0,(-2)] == (-33) then pure () else error ""assertion failed""
  if candidate [(-10)] == (-10) then pure () else error ""assertion failed""
  if candidate [7] == 7 then pure () else error ""assertion failed""
  if candidate [1,(-1)] == (-1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_115,tir_Ethi,hs,"--ኣብነት 1 --ነቲ ባኮታት ክንደይ ግዜ ክትሓድግዎ ከምዘለኩም ኣመልክት--ዕማምኩም ነቲ ዒላታት ንምጽራይ ነቲ ዓለባታት ምጥቃም እዩ።--ኩለን ዓምዲታት ድማ ሓደ ዓይነት ዓቕሚ ኣለወን።--ነፍሲ ወከፍ ዒላ ማይ ንምውሳድ እትጥቀመሉ ምጭዋይ ኣለዎ።--ነፍሲ ወከፍ 1 ኣብ ሓደ መስርዕ ድማ ሓንቲ ኣሃዱ ማይ የመልክት።--❑ ኣብ ሓደ መዐሸጊ ዘሎ ዒላታት ኣመልኪቱ፡ ኣብ ነፍሲ ወከፍ መስመር ሓንቲ ዒላ ጥራይ ትርከብ።--  >>> maxFill [[0,0,1,0],[0,1,0,0],[1,1,1,1]] 1
--  6
--  Example 2:
--  >>> maxFill [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2
--  5
--  Example 3:
--  >>> maxFill [[0,0,0],[0,0,0]] 5
--  0
--  Constraints:
--  * all wells have the same length
--  * 1 <= grid.length <= 10^2
--  * 1 <= grid[:,1].length <= 10^2
--  * grid[i][j] -> 0 | 1
--  * 1 <= capacity <= 10
maxFill :: [[Int]] -> Int -> Int
maxFill grid capacity =","maxFill :: [[Int]] -> Int -> Int
maxFill grid capacity = ceiling (fromIntegral totalWater / fromIntegral capacity)
  where
    totalWater = sum (map sum grid)","
main :: IO ()
main = do
  let candidate = maxFill
  if candidate [[0,0,1,0],[0,1,0,0],[1,1,1,1]] 1 == 6 then pure () else error ""assertion failed""
  if candidate [[0,0,1,1],[0,0,0,0],[1,1,1,1],[0,1,1,1]] 2 == 5 then pure () else error ""assertion failed""
  if candidate [[0,0,0],[0,0,0]] 5 == 0 then pure () else error ""assertion failed""
  if candidate [[1,1,1,1],[1,1,1,1]] 2 == 4 then pure () else error ""assertion failed""
  if candidate [[1,1,1,1],[1,1,1,1]] 9 == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_116,tir_Ethi,hs,"--ከምዚ ዝስዕብ ክግበር ኣለዎ: --ተመሳሳሊ ቁጽሪ ሓደታት እንተሃልዩ፡ ብደሴማል ዋጋ መሰረት ጌርካ ምድላው።--ኣብ ክልተኣዊ ኣገላልጻኦም ብዝሒ ሓደታት ብዕቤት ይውስኽ።--ኣብዚ ካታ እዚ፡ ዝርዝር ናይ ዘይ-ነጻዊ ምሉእ ቁጽሪታት ብከምዚ ክትደርዝዎ ኣለኩም።--  >>> sortArray [1,5,2,3,4]
--  [1,2,3,4,5]
--  >>> sortArray [(-2),(-3),(-4),(-5),(-6)]
--  [(-6),(-5),(-4),(-3),(-2)]
--  >>> sortArray [1,0,2,3,4]
--  [0,1,2,3,4]
sortArray :: [Int] -> [Int]
sortArray arr =","import Data.Bits (popCount)
import Data.List (sortBy)

sortArray :: [Int] -> [Int]
sortArray arr = sortBy compareOnesAndValues arr
  where
    compareOnesAndValues x y =
      let onesX = popCount x
          onesY = popCount y
      in if onesX == onesY
         then compare x y
         else compare onesX onesY","
main :: IO ()
main = do
  let candidate = sortArray
  if candidate [1,5,2,3,4] == [1,2,4,3,5] then pure () else error ""assertion failed""
  if candidate [(-2),(-3),(-4),(-5),(-6)] == [(-4),(-2),(-6),(-5),(-3)] then pure () else error ""assertion failed""
  if candidate [1,0,2,3,4] == [0,1,2,4,3] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [2,5,77,4,5,3,5,7,2,3,4] == [2,2,4,4,3,3,5,5,5,7,77] then pure () else error ""assertion failed""
  if candidate [3,6,44,12,32,5] == [32,3,5,6,12,44] then pure () else error ""assertion failed""
  if candidate [2,4,8,16,32] == [2,4,8,16,32] then pure () else error ""assertion failed""
  if candidate [2,4,8,16,32] == [2,4,8,16,32] then pure () else error ""assertion failed""
  pure ()"
HumanEval_117,tir_Ethi,hs,"--ኣብነት: --ኣስተብህለሉ፡ እቲ ናይ ምእታው ሕብረቁምፊ ፊደላትን ባይታታትን ጥራይ ዝሓዘ እዩ ኢልካ ክትሓስብ ትኽእል ኢኻ።--እቲ string s ባዶ እንተኾይኑ እቲ ተግባር ባዶ ዝርዝር ክመልስ ኣለዎ።--n ወናኒ-ቃላት፡ እዞም ቃላት እዚኣቶም ኣብ'ቲ s ዝብል ሕብረ-ቃላት ክወጹ ከለዉ፡--ሓደ ካብ'ቶም ዝርዝር ቃላት ናይ'ቲ ኡኡ ዝሕዝ ናይ'ቲ string s ዝመልስ ተግባር--s ዝተባህለ ሕብረ-ቁጽሪ ምስ n ተፈጥሮኣዊ ቑጽሪ፡ ክትፍጽምዎ ተመዲብኩም ኣሎኹም።--  >>> selectWords ""Mary had a little lamb"" 4
--  [""little""]
--  >>> selectWords ""Mary had a little lamb"" 3
--  [""Mary"",""lamb""]
--  >>> selectWords ""simple white space"" 2
--  []
--  >>> selectWords ""Hello world"" 4
--  [""world""]
--  >>> selectWords ""Uncle sam"" 3
--  [""Uncle""]
selectWords :: String -> Int -> [String]
selectWords s n =","selectWords :: String -> Int -> [String]
selectWords s n = filter (\word -> countConsonants word == n) (words s)
  where
    countConsonants = length . filter (`elem` consonants)
    consonants = ""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ""","
main :: IO ()
main = do
  let candidate = selectWords
  if candidate ""Mary had a little lamb"" 4 == [""little""] then pure () else error ""assertion failed""
  if candidate ""Mary had a little lamb"" 3 == [""Mary"",""lamb""] then pure () else error ""assertion failed""
  if candidate ""simple white space"" 2 == [] then pure () else error ""assertion failed""
  if candidate ""Hello world"" 4 == [""world""] then pure () else error ""assertion failed""
  if candidate ""Uncle sam"" 3 == [""Uncle""] then pure () else error ""assertion failed""
  if candidate """" 4 == [] then pure () else error ""assertion failed""
  if candidate ""a b c d e f"" 1 == [""b"",""c"",""d"",""f""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_118,tir_Ethi,hs,"--ኣብነት: --እቲ ዝተዋህበ ሕብረቁምፊ ናይ እንግሊዝኛ ፊደል ጥራይ ዝሓዘ እዩ ኢልካ ክትሓስብ ትኽእል ኢኻ።--ኣብ ላዕሊ ዘሎ ኩነታት ዘማልአ ዝኾነ ድምጺ ረኺብካ--ኣብ መጀመርያን መወዳእታን ዘሎ ድምጺ ኣይቑጸርን እዩ። እንተ ዘይኮይኑ ባዶ ሕብረ-ቃላት ምለስ።--ክልተ ናይ ድምጺ ፊደላት ካብ የማናይ ወገን ናይቲ ቃል (ናይ ግዙፍ ፊደላት ዝምርመር) ።--ሓደ ቃል ተዋሂቡካ ኣሎ። እቲ ስራሕካ ድማ ኣብ መንጎ ኡን ኡን ዘሎ ናይ ቀረባ ድምጺ-ኣሕጽሮታት ምርካብ እዩ።--  >>> getClosestVowel ""yogurt""
--  ""u""
--  >>> getClosestVowel ""FULL""
--  ""U""
--  >>> getClosestVowel ""quick""
--  """"
--  >>> getClosestVowel ""ab""
--  """"
getClosestVowel :: String -> String
getClosestVowel word =","getClosestVowel :: String -> String
getClosestVowel word = go (reverse word) False
  where
    vowels = ""aeiouAEIOU""
    go [] _ = """"
    go (x:xs) lastWasConsonant
      | x `elem` vowels && lastWasConsonant = if null xs || not (head xs `elem` vowels) then [x] else go xs False
      | x `notElem` vowels = go xs True
      | otherwise = go xs False","
main :: IO ()
main = do
  let candidate = getClosestVowel
  if candidate ""yogurt"" == ""u"" then pure () else error ""assertion failed""
  if candidate ""full"" == ""u"" then pure () else error ""assertion failed""
  if candidate ""easy"" == """" then pure () else error ""assertion failed""
  if candidate ""eAsy"" == """" then pure () else error ""assertion failed""
  if candidate ""ali"" == """" then pure () else error ""assertion failed""
  if candidate ""bad"" == ""a"" then pure () else error ""assertion failed""
  if candidate ""most"" == ""o"" then pure () else error ""assertion failed""
  if candidate ""ab"" == """" then pure () else error ""assertion failed""
  if candidate ""ba"" == """" then pure () else error ""assertion failed""
  if candidate ""quick"" == """" then pure () else error ""assertion failed""
  if candidate ""anime"" == ""i"" then pure () else error ""assertion failed""
  if candidate ""Asia"" == """" then pure () else error ""assertion failed""
  if candidate ""Above"" == ""o"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_119,tir_Ethi,hs,"--ኣብነት: --ጽቡቕ ናይ ሕብረ-መዋእል መንገዲ እንተሎ 'እወ' ይመልስ፣ እንተዘየለ ድማ 'ኣይፋል' ይመልስ።--""()) "" ኣይኰነትን--ንኣብነት፡ እቲ ሕብረቁምፊ '(((() ' ጽቡቕ እዩ፡ እቲ ሕብረቁምፊ --ሓደ ሕብረሰተብ S ጽቡቕ እዩ ዝብሃል እንተድኣ ኩሎም ኣብ S ዘለዉ ሕብረሰተብ --እቲ ውጽኢት ጽቡቅ ክኸውን ይኽእል እዩ።--ስራሕካ ድማ ነቲ ክልተ ሕብረ መስመራት ኣብ ኡ ንምትእስሳር ይከኣል እንተኾይኑ ምርኣይ እዩ።--ኣብ ውሽጢ ""("" ወይ ኣብ ውሽጢ "") "" ጥራይ።--❑ ክልተ ሕብረ መስመራት ኣለዉኻ፣ ክልቲኦም ሕብረ መስመራት ድማ ክፉት ❑ ክልተ ሕብረ መስመራት ኣለዉኻ--  >>> matchParens [""()("","")""]
--  ""Yes""
--  >>> matchParens ["")"","")""]
--  ""No""
matchParens :: [String] -> String
matchParens lst =","matchParens :: [String] -> String
matchParens [a, b] =
    if isValid (a ++ b) || isValid (b ++ a) then ""Yes"" else ""No""
  where
    isValid :: String -> Bool
    isValid = go 0
      where
        go 0 [] = True
        go _ [] = False
        go n (x:xs)
            | x == '('  = go (n + 1) xs
            | x == ')'  = n > 0 && go (n - 1) xs
    isValid _ = False","
main :: IO ()
main = do
  let candidate = matchParens
  if candidate [""()("","")""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate ["")"","")""] == ""No"" then pure () else error ""assertion failed""
  if candidate [""(()(())"",""())())""] == ""No"" then pure () else error ""assertion failed""
  if candidate ["")())"",""(()()(""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate [""(())))"",""(()())((""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate [""()"",""())""] == ""No"" then pure () else error ""assertion failed""
  if candidate [""(()("",""()))()""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate [""(((("",""((())""] == ""No"" then pure () else error ""assertion failed""
  if candidate ["")(()"",""(()(""] == ""No"" then pure () else error ""assertion failed""
  if candidate ["")("","")(""] == ""No"" then pure () else error ""assertion failed""
  if candidate [""("","")""] == ""Yes"" then pure () else error ""assertion failed""
  if candidate ["")"",""(""] == ""Yes"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_120,tir_Ethi,hs,"--ኣብነት 1 --ናይ ርዝመት k ምስ ዝለዓለ k ቁጽሪ ኣብ arr.--ኣብ ሓደ ዝርዝር ናይ ምሉእ ቁጽሪ arr ከምኡ'ውን ሓደ ኣወንታዊ ምሉእ ቁጽሪ k እንተሃሊዩ፡ ዝተመደበ ዝርዝር ተመሊሱ ይመጽእ።--  >>> maximum [(-3),(-4),5] 3
--  [(-4),(-3),5]
--  Example 2:
--  >>> maximum [4,(-4),4] 2
--  [4,4]
--  Example 3:
--  >>> maximum [(-3),2,1,2,(-1),(-2),1] 1
--  [2]
--  Note:
--  1. The length of the list will be in the range of [1, 1000].
--  2. The elements in the list will be in the range of [-1000, 1000].
--  3. 0 <= k <= len(arr)
maximum :: [Int] -> Int -> [Int]
maximum arr k =","maximum :: [Int] -> Int -> [Int]
maximum arr k = take k $ reverse $ sort arr","
main :: IO ()
main = do
  let candidate = maximum
  if candidate [(-3),(-4),5] 3 == [(-4),(-3),5] then pure () else error ""assertion failed""
  if candidate [4,(-4),4] 2 == [4,4] then pure () else error ""assertion failed""
  if candidate [(-3),2,1,2,(-1),(-2),1] 1 == [2] then pure () else error ""assertion failed""
  if candidate [123,(-123),20,0,1,2,(-3)] 3 == [2,20,123] then pure () else error ""assertion failed""
  if candidate [(-123),20,0,1,2,(-3)] 4 == [0,1,2,20] then pure () else error ""assertion failed""
  if candidate [5,15,0,3,(-13),(-8),0] 7 == [(-13),(-8),0,0,3,5,15] then pure () else error ""assertion failed""
  if candidate [(-1),0,2,5,3,(-10)] 2 == [3,5] then pure () else error ""assertion failed""
  if candidate [1,0,5,(-7)] 1 == [5] then pure () else error ""assertion failed""
  if candidate [4,(-4)] 2 == [(-4),4] then pure () else error ""assertion failed""
  if candidate [(-10),10] 2 == [(-10),10] then pure () else error ""assertion failed""
  if candidate [1,2,3,(-23),243,(-400),0] 0 == [] then pure () else error ""assertion failed""
  pure ()"
HumanEval_121,tir_Ethi,hs,"--ኣብነታት --❑ ናይ ምሉእ ቁጽሪ ዝርዝር ምስ ተዋህበ፡ ድምር ናይቶም ኣብ ሓደ ቦታ ዘለዉ ኩሎም ዘይንጹራት ቁጽሪታት ተመሊሱ።--  >>> solution [5,8,7,1]
--  12
--  >>> solution [3,3,3,3,3]
--  9
--  >>> solution [30,13,24,321]
--  0
solution :: [Int] -> Int
solution lst =","solution :: [Int] -> Int
solution lst = sum [x | (i, x) <- zip [0..] lst, odd x, even i]","
main :: IO ()
main = do
  let candidate = solution
  if candidate [5,8,7,1] == 12 then pure () else error ""assertion failed""
  if candidate [3,3,3,3,3] == 9 then pure () else error ""assertion failed""
  if candidate [30,13,24,321] == 0 then pure () else error ""assertion failed""
  if candidate [5,9] == 5 then pure () else error ""assertion failed""
  if candidate [2,4,8] == 0 then pure () else error ""assertion failed""
  if candidate [30,13,23,32] == 23 then pure () else error ""assertion failed""
  if candidate [3,13,2,9] == 3 then pure () else error ""assertion failed""
  pure ()"
HumanEval_122,tir_Ethi,hs,"--ኣብነት: --እቲ ድምር ናይቶም ካብተን ቀዳሞት k ኣሃዛት ናይ arr ብዝበዝሑ ክልተ ኣሃዛት ዝኾኑ ኣሃዛት እዩ።--ኣብ ሓደ ናይ ምሉእ ቁጽሪ ዝርዝር ምስ እንህሉ arr ከምኡ'ውን k፡ ተመሊስካ --  >>> addElements [111,21,3,4000,5,6,7,8,9] 4
--  24
--  Constraints:
--  1. 1 <= len(arr) <= 100
--  2. 1 <= k <= len(arr)
addElements :: [Int] -> Int -> Int
addElements arr k =","addElements :: [Int] -> Int -> Int
addElements arr k = sum $ filter (\x -> x >= -99 && x <= 99) $ take k arr","
main :: IO ()
main = do
  let candidate = addElements
  if candidate [1,(-2),(-3),41,57,76,87,88,99] 3 == (-4) then pure () else error ""assertion failed""
  if candidate [111,121,3,4000,5,6] 2 == 0 then pure () else error ""assertion failed""
  if candidate [11,21,3,90,5,6,7,8,9] 4 == 125 then pure () else error ""assertion failed""
  if candidate [111,21,3,4000,5,6,7,8,9] 4 == 24 then pure () else error ""assertion failed""
  if candidate [1] 1 == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_123,tir_Ethi,hs,"--get_odd_collatz(5) ን [1, 5] ይመልስ # እቲ ናይ ኮላተዝ ተኸታታሊ 5 [5, 16, 8, 4, 2, 1] እዩ፣ ስለዚ እቶም ዘይንጹራት ቁጽሪ 1ን 5ን ጥራይ እዮም። --ንኣብነት: --2. ዝተመለሰ ዝርዝር ብዕብየት ቅደም ተከተል ዝተመደበ።--ኮላዝ (Collaz) 1) [1] እዩ።--ኣስተብህለሉ: --እቲ ግምታዊ ሓሳብ፡ እቲ n ብዝኾነ ይኹን ዋጋ፡ እቲ ተኸታታሊ ኩሉ ግዜ 1.--እቲ ናይ ቅድሚ ሕጂ ግዘ ዘይንቡር እንተ ኾይኑ፡ እቲ ናይ ድሕሪ ሕጂ ግዘ 3 ግዜ ናይ ቅድሚ ሕጂ ግዘ እዩ።--እቲ ናይ ቅድሚ ሕጂ ግዘ ከም'ዚ ዝስዕብ እዩ: እቲ ናይ ቅድሚ ሕጂ ግዘ እኩል እንተ ኾይኑ፡ እቲ ናይ ድሕሪኡ ግዘ ፍርቂ ናይ  እዩ።--ከም'ዚ ዝስዕብ: ምስ ዝኾነ ኣወንታዊ ምሉእ ቑጽሪ n ጀምር። ድሕሪኡ ነፍሲ ወከፍ ኣሃዝ ካብ  ይርከብ።--ኮላትስ ትእምት ኣብ ሕሳብ ዝተገለጸ ተኸታታሊ ዝምልከት ትእምት እዩ።--❑ ሓደ ኣወንታዊ ምሉእ ቑጽሪ n እንተሃሊዩ፡ ነቲ ኣብ ኮላዝ ተኸታታሊነት ዘሎ ዘይንቡር ቑጽሪ ዝሓዘ ዝተመደበ ዝርዝር ተመሊሱ።--  >>> getOddCollatz 5
--  [1,5]
getOddCollatz :: Int -> [Int]
getOddCollatz n =","getOddCollatz :: Int -> [Int]
getOddCollatz n = sort . filter odd $ collatzSequence n
  where
    collatzSequence 1 = [1]
    collatzSequence x
      | even x    = x : collatzSequence (x `div` 2)
      | otherwise = x : collatzSequence (3 * x + 1)","
main :: IO ()
main = do
  let candidate = getOddCollatz
  if candidate 14 == [1,5,7,11,13,17] then pure () else error ""assertion failed""
  if candidate 5 == [1,5] then pure () else error ""assertion failed""
  if candidate 12 == [1,3,5] then pure () else error ""assertion failed""
  if candidate 1 == [1] then pure () else error ""assertion failed""
  pure ()"
HumanEval_124,tir_Ethi,hs,"--እቲ ዕለት ኣብ ቅርጺ: ሚሜ-መዓልቲ-ዓመተ ክኸውን ይግባእ።--እቲ ኣዋርሕ ካብ 1 ንታሕቲ ወይ ካብ 12 ንላዕሊ ክኸውን የብሉን።--እቲ ቁጽሪ መዓልታት ኣብ ኣዋርሕ 1,3,5,7,8,10,12 ካብ 1 ንታሕቲ ወይ ካብ 31 ንላዕሊ ክኸውን የብሉን ከምኡ'ውን ኣብ ኣዋርሕ 4,6,9,11 ካብ 1 ንታሕቲ ወይ ካብ 30 ንላዕሊ ክኸውን የብሉን ከምኡ'ውን ኣብ ወርሒ 2 ካብ 1 ንታሕቲ ወይ ካብ 29 ንላዕሊ ክኸውን የብሉን--1. እቲ ናይ ዕለት ሕብረ-መደምደምቲ ባዶ ኣይኮነን።--እዚ ዕለት እዚ ዝስዕብ ሕግታት ምስ ዝፍጸሙ ቅቡል እዩ --እቲ ዕለት ሓቅነት እንተ ኣለዎ ሓቂ ይምለስ እንተ ዘይኮይኑ ሓሶት እዩ።--ንተወሰነ ናይ ዕለት ሕብረ-መዋእል ዘረጋግፅ ተግባር ክትጽሕፍ ኣለካ--  >>> validDate ""03-11-2000""
--  True
--  >>> validDate ""15-01-2012""
--  False
--  >>> validDate ""04-0-2040""
--  False
--  >>> validDate ""06-04-2020""
--  True
--  >>> validDate ""06/04/2020""
--  False
validDate :: String -> Bool
validDate date =","import Text.Read (readMaybe)
import Data.List.Split (splitOn)

validDate :: String -> Bool
validDate date =
    case splitOn ""-"" date of
        [m, d, y] -> isValidMonthDayYear m d y
        _         -> False

isValidMonthDayYear :: String -> String -> String -> Bool
isValidMonthDayYear m d y =
    case (readMaybe m :: Maybe Int, readMaybe d :: Maybe Int, readMaybe y :: Maybe Int) of
        (Just month, Just day, Just year) -> isValidMonth month && isValidDay month day
        _ -> False

isValidMonth :: Int -> Bool
isValidMonth month = month >= 1 && month <= 12

isValidDay :: Int -> Int -> Bool
isValidDay month day
    | month `elem` [1, 3, 5, 7, 8, 10, 12] = day >= 1 && day <= 31
    | month `elem` [4, 6, 9, 11]           = day >= 1 && day <= 30
    | month == 2                           = day >= 1 && day <= 29
    | otherwise                            = False","
main :: IO ()
main = do
  let candidate = validDate
  if candidate ""03-11-2000"" == True then pure () else error ""assertion failed""
  if candidate ""15-01-2012"" == False then pure () else error ""assertion failed""
  if candidate ""04-0-2040"" == False then pure () else error ""assertion failed""
  if candidate ""06-04-2020"" == True then pure () else error ""assertion failed""
  if candidate ""01-01-2007"" == True then pure () else error ""assertion failed""
  if candidate ""03-32-2011"" == False then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""04-31-3000"" == False then pure () else error ""assertion failed""
  if candidate ""06-06-2005"" == True then pure () else error ""assertion failed""
  if candidate ""21-31-2000"" == False then pure () else error ""assertion failed""
  if candidate ""04-12-2003"" == True then pure () else error ""assertion failed""
  if candidate ""04122003"" == False then pure () else error ""assertion failed""
  if candidate ""20030412"" == False then pure () else error ""assertion failed""
  if candidate ""2003-04"" == False then pure () else error ""assertion failed""
  if candidate ""2003-04-12"" == False then pure () else error ""assertion failed""
  if candidate ""04-2003"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_126,tir_Ethi,hs,"--ኣብነታት --number, return False. ኣሉታዊ ቁጽሪ ኣይህሉን፡ ምሉእ ቁጽሪ ጥራይ እዩ ዝቕበል።--እቲ ዝርዝር ካብ ሓደ ንላዕሊ ቅዳሓት እንተ ኣለዎ --❑ ዝርዝር ቁጽሪ ተዋሂቡካ፡ ዝተመደቡ ይኹኑ ኣይኹኑ ተመሊሱ ይምጻእ።--  >>> isSorted [5]
--  True
--  >>> isSorted [1,2,3,4,5]
--  True
--  >>> isSorted [1,3,2,4,5]
--  False
--  >>> isSorted [1,2,3,4,5,6]
--  True
--  >>> isSorted [1,2,3,4,5,6,7]
--  True
--  >>> isSorted [1,3,2,4,5,6,7]
--  False
--  >>> isSorted [1,2,2,3,3,4]
--  True
--  >>> isSorted [1,2,2,2,3,4]
--  False
isSorted :: [Int] -> Bool
isSorted lst =","isSorted :: [Int] -> Bool
isSorted lst = go lst Nothing
  where
    go [] _ = True
    go [x] _ = True
    go (x:y:xs) prev
      | x > y = False
      | x == y && prev == Just x = False
      | otherwise = go (y:xs) (Just x)","
main :: IO ()
main = do
  let candidate = isSorted
  if candidate [5] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5] == True then pure () else error ""assertion failed""
  if candidate [1,3,2,4,5] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6,7] == True then pure () else error ""assertion failed""
  if candidate [1,3,2,4,5,6,7] == False then pure () else error ""assertion failed""
  if candidate [] == True then pure () else error ""assertion failed""
  if candidate [1] == True then pure () else error ""assertion failed""
  if candidate [3,2,1] == False then pure () else error ""assertion failed""
  if candidate [1,2,2,2,3,4] == False then pure () else error ""assertion failed""
  if candidate [1,2,3,3,3,4] == False then pure () else error ""assertion failed""
  if candidate [1,2,2,3,3,4] == True then pure () else error ""assertion failed""
  if candidate [1,2,3,4] == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_127,tir_Ethi,hs,"--[input/output] ናሙናታት: --እቶም ክልተ መኣልታት እንተ ዘይሓቢሮም ""ኣይፋል"" ምለስ።--እንተ ዘይኮይኑ ""ኣይፋል"" ምባል--እቲ ርዝነት ናይቲ መቐራረቢ ቀዳማይ ቁጽሪ እንተ ኾይኑ፡ ""YES"" ይመልስ።--እቲ ርዝነቱ 1 ዝኾነ ቁጽሪ ቀዳማይ ኣይኮነን።--ንኣብነት፡ መቐራረቢ ናይተን (1, 3), (2, 4) ዝኾና ናይ ግዜታት (2, 3) እዩ።--እቲ ናይ ግዜ ማእከል ቀዳማይ ቑጽሪ እዩ።--እቲ ስራሕኩም ድማ ርሕቐት መቐራረቢ ናይዞም ክልተ --ንነፍሲ ወከፍ ዝተዋህበ ግዜ፡ እቲ መጀመርያኡ ካብቲ መወዳእታኡ ዝነኣሰ ወይ ማዕረ ምዃኑ ይግመት።--መጀመርያን መወዳእታን የጠቓልል።--እቲ ዝተዋህበ ግዜ ዝተዓጽወ እዩ ማለት እቲ ግዜ (መጀመርታ፡ መወዳእታ) --ነፍሲ ወከፍ መኣልቲ ሓደ ጥንድ ናይ ምሉእ ቁጽሪ እዩ። ንኣብነት፡ መኣልቲ = (መጀመርታ፡ መወዳእታ) = (1, 2) ።--ክልተ ግዜ ግዜ ተዋሂቡካ ኣሎ፣--  >>> intersection (1, 2) (2, 3)
--  ""NO""
--  >>> intersection ((-1), 1) (0, 4)
--  ""NO""
--  >>> intersection ((-3), (-1)) ((-5), 5)
--  ""YES""
intersection :: (Int, Int) -> (Int, Int) -> String
intersection interval1 interval2 =","intersection :: (Int, Int) -> (Int, Int) -> String
intersection (start1, end1) (start2, end2) = 
    if intersectionLength > 0 && isPrime intersectionLength
    then ""YES""
    else ""NO""
  where
    intersectionStart = max start1 start2
    intersectionEnd = min end1 end2
    intersectionLength = intersectionEnd - intersectionStart + 1
    
    isPrime :: Int -> Bool
    isPrime n
      | n <= 1 = False
      | n == 2 = True
      | otherwise = null [x | x <- [2..(floor . sqrt . fromIntegral) n], n `mod` x == 0]","
main :: IO ()
main = do
  let candidate = intersection
  if candidate (1, 2) (2, 3) == ""NO"" then pure () else error ""assertion failed""
  if candidate ((-1), 1) (0, 4) == ""NO"" then pure () else error ""assertion failed""
  if candidate ((-3), (-1)) ((-5), 5) == ""YES"" then pure () else error ""assertion failed""
  if candidate ((-2), 2) ((-4), 0) == ""YES"" then pure () else error ""assertion failed""
  if candidate ((-11), 2) ((-1), (-1)) == ""NO"" then pure () else error ""assertion failed""
  if candidate (1, 2) (3, 5) == ""NO"" then pure () else error ""assertion failed""
  if candidate (1, 2) (1, 2) == ""NO"" then pure () else error ""assertion failed""
  if candidate ((-2), (-2)) ((-3), (-2)) == ""NO"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_128,tir_Ethi,hs,"--ኣብነት: --Note: ንባዶ ኣረር ምንም ኣይምለስን--ኣብ ዝርዝር ዘሎ ነፍሲ ወከፍ ቁጽሪ ብ1, -1 ወይ 0 ይምሰል--ድምር ናይ ምሉእ ቁጽሪ ዓቐን ብ ውፅኢት ናይ ኩሎም ምልክታት -- ናይ ምሉእ ኣሃዛት ዝርዝር ተዋሂቡካ ኣሎ እሞ ክትመልሶ ኣለካ።--  >>> prodSigns [1,2,2,(-4)]
--  Just (9)
--  >>> prodSigns [0,1]
--  Just (0)
--  >>> prodSigns []
--  Just (Nothing)
prodSigns :: [Int] -> Maybe Int
prodSigns arr =","prodSigns :: [Int] -> Maybe Int
prodSigns [] = Nothing
prodSigns arr = Just $ sum (map abs arr) * product (map signum arr)","
main :: IO ()
main = do
  let candidate = prodSigns
  if candidate [1,2,2,(-4)] == Just ((-9)) then pure () else error ""assertion failed""
  if candidate [0,1] == Just (0) then pure () else error ""assertion failed""
  if candidate [1,1,1,2,3,(-1),1] == Just ((-10)) then pure () else error ""assertion failed""
  if candidate [] == Just (Nothing) then pure () else error ""assertion failed""
  if candidate [2,4,1,2,(-1),(-1),9] == Just (20) then pure () else error ""assertion failed""
  if candidate [(-1),1,(-1),1] == Just (4) then pure () else error ""assertion failed""
  if candidate [(-1),1,1,1] == Just ((-4)) then pure () else error ""assertion failed""
  if candidate [(-1),1,1,0] == Just (0) then pure () else error ""assertion failed""
  pure ()"
HumanEval_129,tir_Ethi,hs,"--ኣብነት: --እቲ ዝተሓተ መንገዲ ዝሕልፍዎ ዋህዮታት ዝተመደበ ዝርዝር ዋጋታት ይመልስ።--እቲ መልሲ ፍሉይ ምዃኑ ድማ ውሕስነት ኣለዎ።--lst_A[j] = lst_B[j]።--ከም lst_A[i] < lst_B[i] ከምኡ'ውን ንዝኾነ j (1 <= j < i) --ካብ lst_B፡ ብኻልእ ኣዘራርባ፡ ሓደ ምሉእ ቁጽሪ ኢንደክስ i (1 <= i <= k) ኣሎ--ብ (lst_A and lst_B ንበሎም) lst_A ብቋንቋ ኣዚዩ ውሑድ እዩ --ኣብተን Aን Bን ዝርከባ ዋህዮታት ዘሎ ዋጋታት ብቅደም ተከተል ድሕሪ ምዝርዛሩ፡--ሓደ መንገዲ A (ናይ ርዝነት k) ካብ መንገዲ B (ናይ ርዝነት k) ዝነኣሰ ኮይኑ ይቑጸር እንተድኣ --ካብ መርበብ ክትወጽእ ኣይትኽእልን ኢኻ።--ብርግጽ ዝተፈለየ) ።--ሓደ k ርዝነት ዘለዎ መንገዲ ልክዕ k ዋህዮታት ምብጻሕ ማለት ምዃኑ ኣስተብህሉ (ኣይኮነን ----ብኻልእ ኣዘራርባ፡ ናብተን ምስ ናይ ሕጂ ኡፍታ ዘለወን ዋህዮታት ክትከይድ ትኽእል ኢኻ።--ካብ ዝኾነ ሕምብርቲ፣ ኣብ ነፍሲ ወከፍ ስጉምቲ ናብ ዝኾነ ሕምብርቲ ጎረቤት ክትሰጋገር ትኽእል፣ --እቲ ኣብ'ቲ መርበብ ዘሎ k ርዝነት ዘለዎ ናይ'ቲ መንገዲ ትሕተ-ብርኪ ክትረኽቦ ኣለካ። ክትጅምር ትኽእል ኢኻ።--እቲ inclusive ኣብ ሓደ ሕምብርቲ ሓደ ግዜ እዩ ዚወጽእ።--ነፍሲ ወከፍ ዋህዮ ናይ'ቲ መርበብ ሓደ ዋጋ ኣለዎ። ኣብ'ቲ [1, N * N] ዘሎ ነፍሲ ወከፍ ምሉእ ቑጽሪ--√ ምስ N ረድፍታትን N ዓምድን (N >=2) ከምኡ'ውን ምስ k ኣወንታዊ ምሉእ ቊጽሪ፡--  >>> minpath [[1,2,3],[4,5,6],[7,8,9]] 3
--  [1,2,1]
--  >>> minpath [[5,9,3],[4,1,6],[7,8,2]] 1
--  [1]
minpath :: [[Int]] -> Int -> [Int]
minpath grid k =","import Data.List (sort, sortBy)
import Data.Ord (comparing)
import Control.Monad (guard)

minpath :: [[Int]] -> Int -> [Int]
minpath grid k = head $ sort paths
  where
    n = length grid
    cells = [(r, c) | r <- [0..n-1], c <- [0..n-1]]
    neighbors (r, c) = filter inBounds [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]
      where
        inBounds (x, y) = x >= 0 && x < n && y >= 0 && y < n
    value (r, c) = grid !! r !! c
    paths = do
      start <- cells
      findPaths k [start]
    findPaths 1 path = return $ map value path
    findPaths l path@(current:_) = do
      next <- neighbors current
      findPaths (l-1) (next : path)","
main :: IO ()
main = do
  let candidate = minpath
  if candidate [[1,2,3],[4,5,6],[7,8,9]] 3 == [1,2,1] then pure () else error ""assertion failed""
  if candidate [[5,9,3],[4,1,6],[7,8,2]] 1 == [1] then pure () else error ""assertion failed""
  if candidate [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] 4 == [1,2,1,2] then pure () else error ""assertion failed""
  if candidate [[6,4,13,10],[5,7,12,1],[3,16,11,15],[8,14,9,2]] 7 == [1,10,1,10,1,10,1] then pure () else error ""assertion failed""
  if candidate [[8,14,9,2],[6,4,13,15],[5,7,1,12],[3,10,11,16]] 5 == [1,7,1,7,1] then pure () else error ""assertion failed""
  if candidate [[11,8,7,2],[5,16,14,4],[9,3,15,6],[12,13,10,1]] 9 == [1,6,1,6,1,6,1,6,1] then pure () else error ""assertion failed""
  if candidate [[12,13,10,1],[9,3,15,6],[5,16,14,4],[11,8,7,2]] 12 == [1,6,1,6,1,6,1,6,1,6,1,6] then pure () else error ""assertion failed""
  if candidate [[2,7,4],[3,1,5],[6,8,9]] 8 == [1,3,1,3,1,3,1,3] then pure () else error ""assertion failed""
  if candidate [[6,1,5],[3,8,9],[2,7,4]] 8 == [1,5,1,5,1,5,1,5] then pure () else error ""assertion failed""
  if candidate [[1,2],[3,4]] 10 == [1,2,1,2,1,2,1,2,1,2] then pure () else error ""assertion failed""
  if candidate [[1,3],[3,2]] 10 == [1,3,1,3,1,3,1,3,1,3] then pure () else error ""assertion failed""
  pure ()"
HumanEval_130,tir_Ethi,hs,"--ኣብነት: --ናይ መጀመርታ n + 1 ቁጽሪ ናይ ትሪቦናቺ ተኸታተልቲ።--ሓደ ዘይ-ነጻ ዝኾነ ምሉእ ቑጽሪ n ተዋሂቡካ ኣሎ፣ ዝርዝር ናይ  ክትመልስ ኣለካ።--= 2 + 3 + 3 = 8 --ትሪ 3 = ትሪ 2 + ትሪ 1 + ትሪ 4--tri(4) = 3 --tri(2) = 1 + (2 / 2) = 2 --ንኣብነት: --tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) ፣ እንተድኣ n ዘይንቡር ኮይኑ። --tri (n) = 1 + n / 2፡ እንተ n እኩል እዩ።--tri(1) = 3 --ናይ ትሪቦናቺ ተኸታተልነት ብዚስዕብ ተደጋጊሙ ይግለጽ: --ይኹን እምበር ሰባት ዘይፈልጥዎ ነገር ግን ናይ ትሪቦናቺ ተኸታተልነት እዩ።--ኩሉ ሰብ ናይ ፊቦናቺ ተኸታታሊ ይፈልጦ እዩ፣ ብሂሳብ ተመራመርቲ ብዕምቆት ዝተምሃረ እዩ።--  >>> tri 3
--  [1,3,2,8]
tri :: Int -> [Int]
tri n =","tri :: Int -> [Int]
tri n = map tribonacci [0..n]
  where
    -- Define the recursive function to calculate the tribonacci value for a given n
    tribonacci :: Int -> Int
    tribonacci 0 = 1
    tribonacci 1 = 3
    tribonacci x
      | even x    = 1 + x `div` 2
      | otherwise = tribonacci (x - 1) + tribonacci (x - 2) + tribonacci (x + 1)","
main :: IO ()
main = do
  let candidate = tri
  if candidate 3 == [1,3,2,8] then pure () else error ""assertion failed""
  if candidate 4 == [1,3,2,8,3] then pure () else error ""assertion failed""
  if candidate 5 == [1,3,2,8,3,15] then pure () else error ""assertion failed""
  if candidate 6 == [1,3,2,8,3,15,4] then pure () else error ""assertion failed""
  if candidate 7 == [1,3,2,8,3,15,4,24] then pure () else error ""assertion failed""
  if candidate 8 == [1,3,2,8,3,15,4,24,5] then pure () else error ""assertion failed""
  if candidate 9 == [1,3,2,8,3,15,4,24,5,35] then pure () else error ""assertion failed""
  if candidate 20 == [1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11] then pure () else error ""assertion failed""
  if candidate 0 == [1] then pure () else error ""assertion failed""
  if candidate 1 == [1,3] then pure () else error ""assertion failed""
  pure ()"
HumanEval_131,tir_Ethi,hs,"--ንኣብነት: --ኩሉ ኣሃዛት ማዕረ እንተኾይኑ 0 ይመልስ።-- ኣወንታዊ ምሉእ ቑጽሪ n እንተሃሊዩ፡ ነቲ ናይቶም ዘይንጹራት ኣሃዛት ፍርያት ተመሊሱ።--  >>> digits 1
--  1
--  >>> digits 4
--  0
--  >>> digits 235
--  15
digits :: Int -> Int
digits n =","digits :: Int -> Int
digits n
  | null oddDigits = 0
  | otherwise      = product oddDigits
  where
    oddDigits = [digit | digit <- map (read . (:[])) (show n), odd digit]","
main :: IO ()
main = do
  let candidate = digits
  if candidate 5 == 5 then pure () else error ""assertion failed""
  if candidate 54 == 5 then pure () else error ""assertion failed""
  if candidate 120 == 1 then pure () else error ""assertion failed""
  if candidate 5014 == 5 then pure () else error ""assertion failed""
  if candidate 98765 == 315 then pure () else error ""assertion failed""
  if candidate 5576543 == 2625 then pure () else error ""assertion failed""
  if candidate 2468 == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_132,tir_Ethi,hs,"--እንተወሓደ ሓደ ክፋል ናይቲ ተኸታታሊ ክፋል ዝተሓወሶ እዩ።--እቲ ተግባር True ክመልስ ኣለዎ እንተድኣ ከምኡ ውን እንተድኣ ቅኑዕ ዝኾነ ናይ ክላስ ቅደም ተኸተል -- ሓደ ግደ ፈጠሪ፡ ሓደ ሕብረ-ቁጽሪ ከም መእተዊ ዝወስድ፡ ኣብ ውሽጢ ካሬ-ኣጥባቕ ጥራይ ዝርከቦ። --  >>> isNested ""[[]]""
--  True
--  >>> isNested ""[]]]]]]][[[[[]""
--  False
--  >>> isNested ""[][]""
--  False
--  >>> isNested ""[]""
--  False
--  >>> isNested ""[[][]]""
--  True
--  >>> isNested ""[[]][[""
--  True
isNested :: String -> Bool
isNested string =","isNested :: String -> Bool
isNested string = go string 0 False
  where
    go [] _ nested = nested
    go (x:xs) depth nested
      | x == '['  = go xs (depth + 1) (nested || depth >= 1)
      | x == ']' && depth > 0 = go xs (depth - 1) nested
      | otherwise = go xs depth nested","
main :: IO ()
main = do
  let candidate = isNested
  if candidate ""[[]]"" == True then pure () else error ""assertion failed""
  if candidate ""[]]]]]]][[[[[]"" == False then pure () else error ""assertion failed""
  if candidate ""[][]"" == False then pure () else error ""assertion failed""
  if candidate ""[]"" == False then pure () else error ""assertion failed""
  if candidate ""[[[[]]]]"" == True then pure () else error ""assertion failed""
  if candidate ""[]]]]]]]]]]"" == False then pure () else error ""assertion failed""
  if candidate ""[][][[]]"" == True then pure () else error ""assertion failed""
  if candidate ""[[]"" == False then pure () else error ""assertion failed""
  if candidate ""[]]"" == False then pure () else error ""assertion failed""
  if candidate ""[[]][["" == True then pure () else error ""assertion failed""
  if candidate ""[[][]]"" == True then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""[[[[[[[["" == False then pure () else error ""assertion failed""
  if candidate ""]]]]]]]]"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_133,tir_Ethi,hs,"--ኣብነት: --ንነፍሲ ወከፍ ኣሃዱ ኣብ ዝርዝር ናብ ላዕለዋይ int ((Ceiling) ቅድም ግበሩ።--ነቲ ኣብ ዝርዝር ዘሎ ናይ ቁጽሪ ሰኩዌር ድምር ክትመልስ ኣለካ፣--❑ ዝርዝር ቁጽሪ ተዋሂቡካ።--  >>> lst [1.0,2.0,3.0]
--  14
--  >>> lst [1.0,4.0,9.0]
--  98
--  >>> lst [1.0,3.0,5.0,7.0]
--  84
--  >>> lst [1.4,4.2,0.0]
--  29
--  >>> lst [-2.4,1.0,1.0]
--  6
sumSquares :: [Float] -> Int
sumSquares lst =","import Data.List (foldl')
import Prelude hiding (sum)

sumSquares :: [Float] -> Int
sumSquares lst = foldl' (\acc x -> acc + ceiling x ^ 2) 0 lst","
main :: IO ()
main = do
  let candidate = sumSquares
  if candidate [1.0,2.0,3.0] == 14 then pure () else error ""assertion failed""
  if candidate [1.0,2.0,3.0] == 14 then pure () else error ""assertion failed""
  if candidate [1.0,3.0,5.0,7.0] == 84 then pure () else error ""assertion failed""
  if candidate [1.4,4.2,0.0] == 29 then pure () else error ""assertion failed""
  if candidate [-2.4,1.0,1.0] == 6 then pure () else error ""assertion failed""
  if candidate [100.0,1.0,15.0,2.0] == 10230 then pure () else error ""assertion failed""
  if candidate [10000.0,10000.0] == 200000000 then pure () else error ""assertion failed""
  if candidate [-1.4,4.6,6.3] == 75 then pure () else error ""assertion failed""
  if candidate [-1.4,17.9,18.9,19.9] == 1086 then pure () else error ""assertion failed""
  if candidate [0.0] == 0 then pure () else error ""assertion failed""
  if candidate [-1.0] == 1 then pure () else error ""assertion failed""
  if candidate [-1.0,1.0,0.0] == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_134,tir_Ethi,hs,"--ኣብነት: --ኣስተብህለሉ፡ ""ቃል"" ብቦታ ዝተፈልየ ናይ ፊደላት ጉጅለ እዩ።--ናይ ሓደ ቃል ክፋል፡ ከምኡ'ውን ሓሶት እንተ ዘይኮይኑ።--ናይ ሓደ ዝተዋህበ ሕብረ-ቁጽሪ ፊደላዊ ፊደል እዩ ከምኡ ድማ  ኣይኮነን።--እቲ ናይ መወዳእታ ፊደል እንተድኣ ሃሊዩ True ዝመልስ ተግባር ፍጠር።--  >>> checkIfLastCharIsALetter ""apple pie""
--  False
--  >>> checkIfLastCharIsALetter ""apple pi e""
--  True
--  >>> checkIfLastCharIsALetter ""apple pi e ""
--  False
--  >>> checkIfLastCharIsALetter """"
--  False
checkIfLastCharIsALetter :: String -> Bool
checkIfLastCharIsALetter txt =","checkIfLastCharIsALetter :: String -> Bool
checkIfLastCharIsALetter txt = 
    let trimmed = reverse . dropWhile (== ' ') $ reverse txt
    in case trimmed of
        [] -> False
        (x:xs) -> isAlpha x && (null xs || head xs == ' ')","
main :: IO ()
main = do
  let candidate = checkIfLastCharIsALetter
  if candidate ""apple"" == False then pure () else error ""assertion failed""
  if candidate ""apple pi e"" == True then pure () else error ""assertion failed""
  if candidate ""eeeee"" == False then pure () else error ""assertion failed""
  if candidate ""A"" == True then pure () else error ""assertion failed""
  if candidate ""Pumpkin pie "" == False then pure () else error ""assertion failed""
  if candidate ""Pumpkin pie 1"" == False then pure () else error ""assertion failed""
  if candidate """" == False then pure () else error ""assertion failed""
  if candidate ""eeeee e "" == False then pure () else error ""assertion failed""
  if candidate ""apple pie"" == False then pure () else error ""assertion failed""
  if candidate ""apple pi e "" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_135,tir_Ethi,hs,"--ኣብነት: --ክልተ እዋናት--ከምዚ ዓይነት ኣሃዝ የለን እንተድኣ ኮይኑ ድማ -1 ይምለስ። እቲ ዝተዋህበ ዝርዝር  ኣይህልዎን እዩ።--ካብቲ ቀዲሙ ዘሎ ኣሃዱ ኣይዓቢን ወይ ኣይመሳሰልን እዩ።--ናይ ሓደ ኣሃዝ ዝዓበየ ኢንደክስ ዝመልስ ተግባር ፍጠር--  >>> canArrange [1,2,4,3,5]
--  3
--  >>> canArrange [1,2,3]
--  (-1)
canArrange :: [Int] -> Int
canArrange arr =","canArrange :: [Int] -> Int
canArrange arr = go arr (-1) 0
  where
    go [] maxIdx _ = maxIdx
    go [_] maxIdx _ = maxIdx
    go (x:y:xs) maxIdx idx
      | x >= y    = go (y:xs) idx (idx + 1)
      | otherwise = go (y:xs) maxIdx (idx + 1)","
main :: IO ()
main = do
  let candidate = canArrange
  if candidate [1,2,4,3,5] == 3 then pure () else error ""assertion failed""
  if candidate [1,2,4,5] == (-1) then pure () else error ""assertion failed""
  if candidate [1,4,2,5,6,7,8,9,10] == 2 then pure () else error ""assertion failed""
  if candidate [4,8,5,7,3] == 4 then pure () else error ""assertion failed""
  if candidate [] == (-1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_136,tir_Ethi,hs,"--ኣብነት: --ኣሉታዊ ወይ ኣወንታዊ ምሉእ ቁጽሪ እንተዘይሃልዩ፡ ከም Nothing ተመሊሱ።--ኣብ ዝርዝር ኣወንታዊ ቑጽሪታት --እቲ ዝዓበየ ካብ ኣሉታዊ ምሉእ ቁጽሪ፣ ከምኡ ድማ 'b' እቲ ዝነኣሰ --ሀ፡ ለ ዝመልስ ተግባር ፍጠር፣ ሀ፡ ለ፡--  >>> largestSmallestIntegers [2,4,1,3,5,7]
--  (Nothing, 1)
--  >>> largestSmallestIntegers []
--  (Nothing, Nothing)
--  >>> largestSmallestIntegers [0]
--  (Nothing, Nothing)
largestSmallestIntegers :: [Int] -> (Maybe Int, Maybe Int)
largestSmallestIntegers lst =","largestSmallestIntegers :: [Int] -> (Maybe Int, Maybe Int)
largestSmallestIntegers lst = (largestNegative, smallestPositive)
  where
    negatives = filter (< 0) lst
    positives = filter (> 0) lst
    largestNegative = if null negatives then Nothing else Just (maximum negatives)
    smallestPositive = if null positives then Nothing else Just (minimum positives)","
main :: IO ()
main = do
  let candidate = largestSmallestIntegers
  if candidate [2,4,1,3,5,7] == (Nothing, 1) then pure () else error ""assertion failed""
  if candidate [2,4,1,3,5,7,0] == (Nothing, 1) then pure () else error ""assertion failed""
  if candidate [1,3,2,4,5,6,(-2)] == ((-2), 1) then pure () else error ""assertion failed""
  if candidate [4,5,3,6,2,7,(-7)] == ((-7), 2) then pure () else error ""assertion failed""
  if candidate [7,3,8,4,9,2,5,(-9)] == ((-9), 2) then pure () else error ""assertion failed""
  if candidate [] == (Nothing, Nothing) then pure () else error ""assertion failed""
  if candidate [0] == (Nothing, Nothing) then pure () else error ""assertion failed""
  if candidate [(-1),(-3),(-5),(-6)] == ((-1), Nothing) then pure () else error ""assertion failed""
  if candidate [(-1),(-3),(-5),(-6),0] == ((-1), Nothing) then pure () else error ""assertion failed""
  if candidate [(-6),(-4),(-4),(-3),1] == ((-3), 1) then pure () else error ""assertion failed""
  if candidate [(-6),(-4),(-4),(-3),(-100),1] == ((-3), 1) then pure () else error ""assertion failed""
  pure ()"
HumanEval_138,tir_Ethi,hs,"--ኣብነት --❑ እቲ ዝተዋህበ ቁጽሪ n ልክዕ ከም ድምር ናይ 4 ኣወንታዊ ቁጽሪታት ክጸሓፍ ይከኣል እንተኾይኑ ገምግም።--  >>> isEqualToSumEven 4
--  False
--  >>> isEqualToSumEven 6
--  False
--  >>> isEqualToSumEven 8
--  True
isEqualToSumEven :: Int -> Bool
isEqualToSumEven n =","isEqualToSumEven :: Int -> Bool
isEqualToSumEven n = n > 0 && n `mod` 2 == 0 && n >= 8","
main :: IO ()
main = do
  let candidate = isEqualToSumEven
  if candidate 4 == False then pure () else error ""assertion failed""
  if candidate 6 == False then pure () else error ""assertion failed""
  if candidate 8 == True then pure () else error ""assertion failed""
  if candidate 10 == True then pure () else error ""assertion failed""
  if candidate 11 == False then pure () else error ""assertion failed""
  if candidate 12 == True then pure () else error ""assertion failed""
  if candidate 13 == False then pure () else error ""assertion failed""
  if candidate 16 == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_139,tir_Ethi,hs,"--ንኣብነት: --ኣብኡ n > 0 --ብራዚልኛ_ፋክቶሪያል (n) = n! * (n-1)! * (n-2)! * ... * 1! --ብራዚላዊ ፋክቶሪያል ከምዚ ዝስዕብ እዩ ዝግለጽ--  >>> specialFactorial 4
--  288
--  The function will receive an integer as input and should return the special
--  factorial of this integer.
specialFactorial :: Int -> Int
specialFactorial n =","specialFactorial :: Int -> Int
specialFactorial n = product [factorial x | x <- [1..n]]
  where
    factorial 0 = 1
    factorial k = k * factorial (k - 1)","
main :: IO ()
main = do
  let candidate = specialFactorial
  if candidate 4 == 288 then pure () else error ""assertion failed""
  if candidate 5 == 34560 then pure () else error ""assertion failed""
  if candidate 7 == 125411328000 then pure () else error ""assertion failed""
  if candidate 1 == 1 then pure () else error ""assertion failed""
  pure ()"
HumanEval_140,tir_Ethi,hs,"--ድሕሪኡ ንኩሎም ተኸታተልቲ ባእታታት ብ -  ይትክኦም።--ሓደ ሕብረ-ቁጽሪ ካብ ክልተ ንላዕሊ ተኸታተልቲ ባእታታት እንተ ኣልዮም ድማ --❑ ሓደ ናይ ጽሑፍ ሕብረ-መረብ እንተሃሊዩ፡ ንኹሉ ኣብ ውሽጡ ዘሎ ቦታታት ብሕጽረ-ጽሑፍ ተክኦ፣--  >>> fixSpaces "" Example""
--  ""Example""
--  >>> fixSpaces "" Example 1""
--  ""Example_1""
--  >>> fixSpaces "" Example 2""
--  ""_Example_2""
--  >>> fixSpaces "" Example 3""
--  ""_Example-3""
fixSpaces :: String -> String
fixSpaces text =","fixSpaces :: String -> String
fixSpaces text = concatMap replaceSpaces (groupSpaces text)
  where
    groupSpaces :: String -> [String]
    groupSpaces [] = []
    groupSpaces xs@(x:_) = let (g, rest) = span (== x) xs in g : groupSpaces rest

    replaceSpaces :: String -> String
    replaceSpaces spaces@(x:_)
      | x == ' ' && length spaces > 2 = ""-""
      | x == ' ' = replicate (length spaces) '_'
      | otherwise = spaces","
main :: IO ()
main = do
  let candidate = fixSpaces
  if candidate ""Example"" == ""Example"" then pure () else error ""assertion failed""
  if candidate ""Mudasir Hanif "" == ""Mudasir_Hanif_"" then pure () else error ""assertion failed""
  if candidate ""Yellow Yellow  Dirty  Fellow"" == ""Yellow_Yellow__Dirty__Fellow"" then pure () else error ""assertion failed""
  if candidate ""Exa   mple"" == ""Exa-mple"" then pure () else error ""assertion failed""
  if candidate ""   Exa 1 2 2 mple"" == ""-Exa_1_2_2_mple"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_141,tir_Ethi,hs,"--ኣብነት: --- እቲ ድሕሪ እቲ ነጥቢ ዘሎ ንኡስ ሕብረ-ቁጽሪ ሓደ ካብዞም ዝስዕቡ ክኸውን ኣለዎ: ['txt', 'exe', 'dll'] --ላቲንኛ ፊደላት (a-z) --- እቲ ቅድሚ እቲ ነጥቢ ዘሎ ንኡስ ሕብረ-ቁጽሪ ባዶ ክኸውን የብሉን፣ ከምኡ'ውን ብ ፊደል ካብ  ይጅምር።--- እቲ ናይ ፋይል ስም ልክዕ ሓንቲ ነጥቢ '.'  ሒዙ ኣሎ።--- ኣብ ናይ ፋይል ስም ካብ ሰለስተ ንላዕሊ ኣሃዛት ('0'-'9') ክህልዉ ኣይግባእን።--ይፍጸሙ እዮም: --ሓደ ናይ ፋይል ስም፡ እዚ ዝስዕብ ኵነታት እንተድኣ ተፈጺሙ ጥራይ እዩ ቅቡል ኮይኑ ዝቑጸር።--እቲ ናይ ፋይል ስም ቅቡል እንተኾይኑ 'እወ' ይምለስ፣ እንተኾይኑ ድማ 'ኣይፋል' ይምለስ።--ናይ ፋይል ስም ዝገልጽ ሕብረ-መረብ ዝወስድ እሞ ዝምለስ ተግባር ፍጠር።--  >>> fileNameCheck ""example.txt""
--  ""Yes""
--  >>> fileNameCheck ""1example.dll""
--  ""No""
fileNameCheck :: String -> String
fileNameCheck file_name =","import Data.Char (isDigit, isLetter)

fileNameCheck :: String -> String
fileNameCheck file_name 
  | countDots /= 1 = ""No""
  | length digits > 3 = ""No""
  | null beforeDot || not (isLetter (head beforeDot)) = ""No""
  | afterDot `notElem` validExtensions = ""No""
  | otherwise = ""Yes""
  where 
    (beforeDot, afterDot) = span (/= '.') file_name
    countDots = length $ filter (== '.') file_name
    digits = filter isDigit file_name
    validExtensions = [""txt"", ""exe"", ""dll""]
    afterDot = if null dotAndAfter then """" else tail dotAndAfter
    dotAndAfter = dropWhile (/= '.') file_name","
main :: IO ()
main = do
  let candidate = fileNameCheck
  if candidate ""example.txt"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""1example.dll"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""s1sdf3.asd"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""K.dll"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""MY16FILE3.exe"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""His12FILE94.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""_Y.txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""?aREYA.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""/this_is_valid.dll"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""this_is_valid.wow"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""this_is_valid.txt"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""this_is_valid.txtexe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""#this2_i4s_5valid.ten"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""@this1_is6_valid.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""this_is_12valid.6exe4.txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""all.exe.txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""I563_No.exe"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""Is3youfault.txt"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""no_one#knows.dll"" == ""Yes"" then pure () else error ""assertion failed""
  if candidate ""1I563_Yes3.exe"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""I563_Yes3.txtt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""final..txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""final132"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""_f4indsartal132."" == ""No"" then pure () else error ""assertion failed""
  if candidate "".txt"" == ""No"" then pure () else error ""assertion failed""
  if candidate ""s."" == ""No"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_142,tir_Ethi,hs,"--ኣብነት: --ኣብ ዝርዝር እቶም መወከሲኦም ብ 3 ወይ 4 ብዙሕ ዘይኮኑ መእተዊታት ቀይር። እቲ ተግባር ድሓር ድምር ናይ ኩሎም መእተዊታት ይመልስ።--እቲ መስርዕ ናይ 3 ዘይኮነስ ናይ 4 ብዙሕ እንተኾይኑ ነቲ ናይ ምሉእ ቁጽሪ ክእቶ ክስፍሮ እዩ።--እዚ ተግባር ናይ ምሉእ ቁጽሪ ዝርዝር ይወስድ። ንኩሎም ኣብቲ ዝርዝር ዘለዉ ኣሃዛት፡ እቲ ተግባር ነቲ ናይ ምሉእ ቁጽሪ ኣሃዝ ክኽውን ኣለዎ እንተድኣ እቲ መወከሲኡ --"" --  >>> lst
--  [1,2,3]
--  >>> lst
--  []
--  >>> lst
--  [(-1),(-5),2,(-1),(-5)]
sumSquares :: [Int] -> Int
sumSquares lst =","sumSquares :: [Int] -> Int
sumSquares lst = sum $ zipWith transform [0..] lst
  where
    transform idx x
      | idx `mod` 3 == 0 = x * x
      | idx `mod` 4 == 0 = x * x * x
      | otherwise        = x","
main :: IO ()
main = do
  let candidate = sumSquares
  if candidate [1,2,3] == 6 then pure () else error ""assertion failed""
  if candidate [1,4,9] == 14 then pure () else error ""assertion failed""
  if candidate [] == 0 then pure () else error ""assertion failed""
  if candidate [1,1,1,1,1,1,1,1,1] == 9 then pure () else error ""assertion failed""
  if candidate [(-1),(-1),(-1),(-1),(-1),(-1),(-1),(-1),(-1)] == (-3) then pure () else error ""assertion failed""
  if candidate [0] == 0 then pure () else error ""assertion failed""
  if candidate [(-1),(-5),2,(-1),(-5)] == (-126) then pure () else error ""assertion failed""
  if candidate [(-56),(-99),1,0,(-2)] == 3030 then pure () else error ""assertion failed""
  if candidate [(-1),0,0,0,0,0,0,0,(-1)] == 0 then pure () else error ""assertion failed""
  if candidate [(-16),(-9),(-2),36,36,26,(-20),25,(-40),20,(-4),12,(-26),35,37] == (-14196) then pure () else error ""assertion failed""
  if candidate [(-1),(-3),17,(-1),(-15),13,(-1),14,(-14),(-12),(-5),14,(-14),6,13,11,16,16,4,10] == (-1448) then pure () else error ""assertion failed""
  pure ()"
HumanEval_143,tir_Ethi,hs,"--ኣብነት 1 --እቲ ኣቀራርባ ናይቶም ቃላት ኣብ ሓድሽ መስርዕ ከምቲ ናይ መጀመርታ ክኸውን ኣለዎ።--እቲ ርዝነቶም ቀዳማይ ቁጽሪ ዝኾነ --ነቲ ናይ መጀመርታ ሓረግ ቃላት ዝሓዘ ሕብረ-ቁጽሪ ክትመልስ ኣለካ፣--እቲ ሓረግ ገለ ቃላት ብነጻ ቦታ ዝተፈልዩ ሒዙ ኣሎ፣--❑ ሓደ ሓረግ ዝገልጽ ሕብረ-ቁጽሪ ተዋሂቡካ ኣሎ፣--  >>> wordsInSentence ""This is a test""
--  ""is""
--  Example 2:
--  >>> wordsInSentence ""lets go for swimming""
--  ""go for""
--  Constraints:
--  * 1 <= len(sentence) <= 100
--  * sentence contains only letters
wordsInSentence :: String -> String
wordsInSentence sentence =","import Data.List (intercalate)

wordsInSentence :: String -> String
wordsInSentence sentence = intercalate "" "" $ filter (isPrime . length) (words sentence)

isPrime :: Int -> Bool
isPrime n | n < 2     = False
          | otherwise = null [ x | x <- [2..isqrt n], n `mod` x == 0 ]

isqrt :: Int -> Int
isqrt = floor . sqrt . fromIntegral","
main :: IO ()
main = do
  let candidate = wordsInSentence
  if candidate ""This is a test"" == ""is"" then pure () else error ""assertion failed""
  if candidate ""lets go for swimming"" == ""go for"" then pure () else error ""assertion failed""
  if candidate ""there is no place available here"" == ""there is no place"" then pure () else error ""assertion failed""
  if candidate ""Hi I am Hussein"" == ""Hi am Hussein"" then pure () else error ""assertion failed""
  if candidate ""go for it"" == ""go for it"" then pure () else error ""assertion failed""
  if candidate ""here"" == """" then pure () else error ""assertion failed""
  if candidate ""here is"" == ""is"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_144,tir_Ethi,hs,"--xን nን ከም ቅቡላት ክፍልታት እዮም ኢልካ ክትሓስብ ትኽእል፣ ከም ኣሰላልፋ ድማ ዜሮ የብሎምን።--<numerator>/<denominator> እዚ ድማ ክልቲኦም ኣወንታዊ ምሉእ ቁጽሪታት እዮም።--xን nን ናይ ሓደ ክፋል ናይ ሕብረቁምፊ ውክልና እዮም፣ ከምዚ ዝስዕብ ቅርጺ ድማ ኣለዎም፣--x * n እቲ ተግባር True ይምለስ እንተ x * n ንሙሉእ ቁጽሪ ይግምግም ከምኡ ድማ False --እቲ ስራሕኩም ነቲ መግለፂ ዘቀላልእ ተግባር ምፍጣር እዩ።--  >>> simplify ""1/5"" ""5/1""
--  True
--  >>> simplify ""1/6"" ""2/1""
--  False
--  >>> simplify ""7/10"" ""10/2""
--  False
simplify :: String -> String -> Bool
simplify x n =","import Data.Ratio (denominator, numerator, (%))

simplify :: String -> String -> Bool
simplify x n =
  let (xNum, xDen) = toFraction x
      (nNum, nDen) = toFraction n
      result = (xNum * nNum) % (xDen * nDen)
  in denominator result == 1

toFraction :: String -> (Integer, Integer)
toFraction s =
  let (numStr, _:denStr) = break (=='/') s
  in (read numStr, read denStr)","
main :: IO ()
main = do
  let candidate = simplify
  if candidate ""1/5"" ""5/1"" == True then pure () else error ""assertion failed""
  if candidate ""1/6"" ""2/1"" == False then pure () else error ""assertion failed""
  if candidate ""5/1"" ""3/1"" == True then pure () else error ""assertion failed""
  if candidate ""7/10"" ""10/2"" == False then pure () else error ""assertion failed""
  if candidate ""2/10"" ""50/10"" == True then pure () else error ""assertion failed""
  if candidate ""7/2"" ""4/2"" == True then pure () else error ""assertion failed""
  if candidate ""11/6"" ""6/1"" == True then pure () else error ""assertion failed""
  if candidate ""2/3"" ""5/2"" == False then pure () else error ""assertion failed""
  if candidate ""5/2"" ""3/5"" == False then pure () else error ""assertion failed""
  if candidate ""2/4"" ""8/4"" == True then pure () else error ""assertion failed""
  if candidate ""2/4"" ""4/2"" == True then pure () else error ""assertion failed""
  if candidate ""1/5"" ""5/1"" == True then pure () else error ""assertion failed""
  if candidate ""1/5"" ""1/5"" == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_145,tir_Ethi,hs,"--ንኣብነት: --ኣብ ናይ መጀመርታ ዝርዝር ከም መወከሲኦም ገይሮም ክምዝገብዎ ይኽእሉ።--ኣስተብህለሉ፡ ምስ ሓደ ዓይነት ድምር ቁጽሪ ዘለዎም ዝተፈላለዩ ኣሃዛት እንተሃልዮም፡--ብመሰረት ድምር ቁፅሪ ቁፅሪኦም ብማእኸላይ ቅደም ተከተል ይስርዑ።--❑ ነቲ ዝተዋህበ ዝርዝር ምሉእ ቁጽሪታት ዝደርፍ ተግባር ጽሓፍ።--  >>> orderByPoints [1,11,(-1),(-11),(-12)]
--  [(-1),(-11),1,(-12),11]
--  >>> orderByPoints []
--  []
orderByPoints :: [Int] -> [Int]
orderByPoints nums =","import Data.List (sortBy)
import Data.Function (on)

orderByPoints :: [Int] -> [Int]
orderByPoints nums = map snd $ sortBy (compare `on` fst) indexedNums
  where
    sumOfDigits :: Int -> Int
    sumOfDigits n = sum (map (abs . read . return) $ show $ abs n)
    
    indexedNums :: [(Int, Int)]
    indexedNums = zip (map sumOfDigits nums) nums","
main :: IO ()
main = do
  let candidate = orderByPoints
  if candidate [1,11,(-1),(-11),(-12)] == [(-1),(-11),1,(-12),11] then pure () else error ""assertion failed""
  if candidate [1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46] == [0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457] then pure () else error ""assertion failed""
  if candidate [] == [] then pure () else error ""assertion failed""
  if candidate [1,(-11),(-32),43,54,(-98),2,(-3)] == [(-3),(-32),(-98),(-11),1,2,43,54] then pure () else error ""assertion failed""
  if candidate [1,2,3,4,5,6,7,8,9,10,11] == [1,10,2,11,3,4,5,6,7,8,9] then pure () else error ""assertion failed""
  if candidate [0,6,6,(-76),(-21),23,4] == [(-76),(-21),0,4,23,6,6] then pure () else error ""assertion failed""
  pure ()"
HumanEval_146,tir_Ethi,hs,"--ንኣብነት: --ናይ ሓደ ቑጽሪ ቀዳማይን ናይ መወዳእታን ዲጂት ዘይንቡር እዩ (1, 3, 5, 7, 9) ።--ኣብ ዝርዝር ካብ 10 ንላዕሊ ዝኾኑን ክልቲኦም --❑ ዝርዝር ቁጽሪታት ከም መእተዊ ዝወስድ እሞ ዝምለስ ተግባር ጽሓፍ።--  >>> specialfilter [15,(-73),14,(-15)]
--  1
--  >>> specialfilter [33,(-2),(-3),45,21,109]
--  2
specialfilter :: [Int] -> Int
specialfilter nums =","specialfilter :: [Int] -> Int
specialfilter nums = length $ filter isSpecial nums
  where
    isSpecial n = n > 10 && isOddFirstAndLast (abs n)

    isOddFirstAndLast :: Int -> Bool
    isOddFirstAndLast x = isOddDigit firstDigit && isOddDigit lastDigit
      where
        xStr = show x
        firstDigit = head xStr
        lastDigit = last xStr

    isOddDigit :: Char -> Bool
    isOddDigit c = c `elem` ""13579""","
main :: IO ()
main = do
  let candidate = specialfilter
  if candidate [5,(-2),1,(-5)] == 0 then pure () else error ""assertion failed""
  if candidate [15,(-73),14,(-15)] == 1 then pure () else error ""assertion failed""
  if candidate [33,(-2),(-3),45,21,109] == 2 then pure () else error ""assertion failed""
  if candidate [43,(-12),93,125,121,109] == 4 then pure () else error ""assertion failed""
  if candidate [71,(-2),(-33),75,21,19] == 3 then pure () else error ""assertion failed""
  if candidate [1] == 0 then pure () else error ""assertion failed""
  if candidate [] == 0 then pure () else error ""assertion failed""
  pure ()"
HumanEval_147,tir_Ethi,hs,"--ኣብነት: --a[i] + a[j] + a[k] ድማ ብዙሕነት ናይ 3 እዩ።--i < j < k,  ካብ a ዝተወሰና ሰለስተ (a[i], a[j], a[k]) ተመልስ።--ንነፍሲ ወከፍ i (1 ≤ i ≤ n) ፡ ዋጋ ናይ a[i] = i * i - i + 1.--n ዝተባህለ ኣወንታዊ ምሉእ ቑጽሪ ተዋሂቡካ ኣሎ፣ ናይ ምሉእ ቁጽሪ ዝርዝር ናይ n ርዝነት ክትፈጥር ኣለካ።--  >>> getMaxTriples 5
--  1
--  Explanation: 
--  a = [1, 3, 7, 13, 21]
--  The only valid triple is (1, 7, 13).
getMaxTriples :: Int -> Int
getMaxTriples n =","getMaxTriples :: Int -> Int
getMaxTriples n = length [(a[i], a[j], a[k]) | i <- [0..n-1], j <- [i+1..n-1], k <- [j+1..n-1], (a !! i + a !! j + a !! k) `mod` 3 == 0]
  where
    a = [i * i - i + 1 | i <- [1..n]]","
main :: IO ()
main = do
  let candidate = getMaxTriples
  if candidate 5 == 1 then pure () else error ""assertion failed""
  if candidate 6 == 4 then pure () else error ""assertion failed""
  if candidate 10 == 36 then pure () else error ""assertion failed""
  if candidate 100 == 53361 then pure () else error ""assertion failed""
  pure ()"
HumanEval_149,tir_Ethi,hs,"--ንኣብነት: --ኩለን ቃላት ሓደ ዓይነት ርዝነት ክህልወን እዩ ኢልካ ክትሓስብ ትኽእል ኢኻ።--እቲ ተግባር ዝርዝር ናይ ሕብረ-ቁጽሪታት ብዚተወደበ ኣገባብ ክመልስ ኣለዎ።--ክልተ ቃላት ሓደ ዓይነት ርዝነት እንተሃልዩ፡ ነቲ ዝርዝር ብኣልፋቤት ኣሰር ኣሰር ኣሰር።--ነቲ ዝርዝር በቲ ሕጊ እቲ ጌርካ ክትመልሶ ኣለካ።--እቲ ዝርዝር ብነዊሕነት ናይ ነፍሲ ወከፍ ቃል ክዓቢ ኣለዎ፣ ንስኻ ድማ --ክልተ ቅዳሓት ኪህልዎ ይኽእል እዩ።--እቲ ዝርዝር ኩሉ ግዜ ናይ ሕብረቁምፊታት ዝርዝር እዩ እምበር ናይ ቁጽሪ ዝርዝር ኣይኮነን።--ነቲ ዝተረኽበ ዝርዝር ድማ ብደረጃ ዝዳሎ ይመልሶ፣--ነቲ ካብኣ ዘይንቡር ርዝነት ዘለዎ ሕብረ-ቁጽሪታት ይድምስሶ፣--❑ ዝርዝር ሕብረ-ቁምፊታት ከም ፓራሜተር ዝቕበል ተግባር ጽሓፍ፣--  >>> listSort [""aa"",""a"",""aaa""]
--  [""aa""]
--  >>> listSort [""ab"",""a"",""aaa"",""cd""]
--  [""ab"",""cd""]
sortedListSum :: [String] -> [String]
sortedListSum lst =","sortedListSum :: [String] -> [String]
sortedListSum lst = sortBy compareStrings (filter evenLength lst)
  where
    evenLength s = even (length s)
    compareStrings s1 s2
      | length s1 == length s2 = compare s1 s2
      | otherwise = compare (length s1) (length s2)","
main :: IO ()
main = do
  let candidate = sortedListSum
  if candidate [""aa"",""a"",""aaa""] == [""aa""] then pure () else error ""assertion failed""
  if candidate [""school"",""AI"",""asdf"",""b""] == [""AI"",""asdf"",""school""] then pure () else error ""assertion failed""
  if candidate [""d"",""b"",""c"",""a""] == [] then pure () else error ""assertion failed""
  if candidate [""d"",""dcba"",""abcd"",""a""] == [""abcd"",""dcba""] then pure () else error ""assertion failed""
  if candidate [""AI"",""ai"",""au""] == [""AI"",""ai"",""au""] then pure () else error ""assertion failed""
  if candidate [""a"",""b"",""b"",""c"",""c"",""a""] == [] then pure () else error ""assertion failed""
  if candidate [""aaaa"",""bbbb"",""dd"",""cc""] == [""cc"",""dd"",""aaaa"",""bbbb""] then pure () else error ""assertion failed""
  pure ()"
HumanEval_150,tir_Ethi,hs,"--ኣብነት: --ናይ y ዋጋ ክመልስ ኣለዎ-- ናይ x ዋጋ ዝመልስ ቀሊል ፕሮግራም እንተድኣ n --  >>> xOrY 7 34 12
--  34
--  >>> xOrY 15 8 5
--  5
xOrY :: Int -> Int -> Int -> Int
xOrY n x y =","xOrY :: Int -> Int -> Int -> Int
xOrY n x y = if isPrime n then x else y

isPrime :: Int -> Bool
isPrime k
  | k < 2     = False
  | otherwise = null [ x | x <- [2..k-1], k `mod` x == 0 ]","
main :: IO ()
main = do
  let candidate = xOrY
  if candidate 7 34 12 == 34 then pure () else error ""assertion failed""
  if candidate 15 8 5 == 5 then pure () else error ""assertion failed""
  if candidate 3 33 5212 == 33 then pure () else error ""assertion failed""
  if candidate 1259 3 52 == 3 then pure () else error ""assertion failed""
  if candidate 7919 (-1) 12 == (-1) then pure () else error ""assertion failed""
  if candidate 3609 1245 583 == 583 then pure () else error ""assertion failed""
  if candidate 91 56 129 == 129 then pure () else error ""assertion failed""
  if candidate 6 34 1234 == 1234 then pure () else error ""assertion failed""
  if candidate 1 2 0 == 0 then pure () else error ""assertion failed""
  if candidate 2 2 0 == 2 then pure () else error ""assertion failed""
  pure ()"
HumanEval_151,tir_Ethi,hs,"--ኣብ ዝርዝር ዘለዉ ዘይንጹራት ቁጽሪታት ኣሉታዊ ወይ ምሉእ ዘይኮኑ ቁጽሪታት ሸለል በል።--❑ ዝርዝር ቁጽሪ ተዋሂቡካ፣ ድምር ናይቲ ቁጽሪ ሰካሬ ተመሊሱ።--  >>> doubleTheDifference [1,3,2,0]
--  10
--  >>> doubleTheDifference [(-1),(-2),0]
--  0
--  >>> doubleTheDifference [9,(-2)]
--  81
--  >>> doubleTheDifference [0]
--  0
--  If the input list is empty, return 0.
doubleTheDifference :: [Float] -> Int
doubleTheDifference lst =","doubleTheDifference :: [Float] -> Int
doubleTheDifference lst = 
    sum [x * x | x <- map round lst, x > 0, odd x]","
main :: IO ()
main = do
  let candidate = doubleTheDifference
  if candidate [.0] == 0 then pure () else error ""assertion failed""
  if candidate [5.0,4.0] == 25 then pure () else error ""assertion failed""
  if candidate [0.1,0.2,0.3] == 0 then pure () else error ""assertion failed""
  if candidate [-10.0,-20.0,-30.0] == 0 then pure () else error ""assertion failed""
  if candidate [-1.0,-2.0,8.0] == 0 then pure () else error ""assertion failed""
  if candidate [0.2,3.0,5.0] == 34 then pure () else error ""assertion failed""
  if candidate [-9.0,-7.0,-5.0,-3.0,-1.0,1.0,3.0,5.0,7.0,9.0] == 165 then pure () else error ""assertion failed""
  pure ()"
HumanEval_152,tir_Ethi,hs,"--ኣብነት: --እቲ ዋጋ 0 እዩ እንተዘየሎ ድማ እቲ ዋጋ ኣብ መንጎ እቲ ግምትን ነጥብን ዘሎ ፍጹም ፍልልይ እዩ።--ሓደ ዓይነት ርዝነት ዘለዎ ዝርዝር ተመሊሱ፡ ነፍሲ ወከፍ ግምቱ ክንደይ ርሕቀት ከም ዘለዎ የርኢ።--ክልተ ዝርዝር ነጥቢን ግምትን ተመሳሳሊ ርዝነት ዘለዎ ኮይኑ፡ ነፍሲ ወከፍ መወከሲ ድማ ሓደ ግጥሚ ዘርኢ እዩ።--እቲ ስራሕካ ሓደ ሰብ ውጽኢት ናይ ዝተፈላለዩ ግጥማት ብልክዕ ከምዝተገመተ ምርግጋጽ እዩ።--ብርግጽ ክትዝክሮን ክትነጻጸሮን ዝግባእ እዩ።--እቲ ፍጻመ ኣብ መወዳእታ ይፍለጥ። እቲ ሽዑ ዘሎ ስምዒትን ሓሳባትን --እቲ ውጽኢት ናይ ገለ ነዊሕ ዝተጸበናዮ ነገር ምስ ኮነ እቲ ስምዒት ኩልና ዝዝክሮ ይመስለኒ።--  >>> compare [1,2,3,4,5,1] [1,2,3,4,2,(-2)]
--  [0,0,0,0,3,3]
--  >>> compare [0,5,0,0,0,4] [4,1,1,0,0,(-2)]
--  [4,4,1,0,0,6]
compare :: [Int] -> [Int] -> [Int]
compare game guess =","compare :: [Int] -> [Int] -> [Int]
compare game guess = zipWith (\g s -> abs (g - s)) game guess","
main :: IO ()
main = do
  let candidate = compare
  if candidate [1,2,3,4,5,1] [1,2,3,4,2,(-2)] == [0,0,0,0,3,3] then pure () else error ""assertion failed""
  if candidate [0,0,0,0,0,0] [0,0,0,0,0,0] == [0,0,0,0,0,0] then pure () else error ""assertion failed""
  if candidate [1,2,3] [(-1),(-2),(-3)] == [2,4,6] then pure () else error ""assertion failed""
  if candidate [1,2,3,5] [(-1),2,3,4] == [2,0,0,1] then pure () else error ""assertion failed""
  pure ()"
HumanEval_153,tir_Ethi,hs,"--ኣብነት: --(ብርቱዕነቱ -1) እዩ።--እቲ ""Slices.SERVINGSliCes"" እቲ ዝበረኸ ቅጥዒ ስለዝኾነ ""Slices.SERVINGSliCes"" ይመልስ።--ስሩዕ ኣጠቓቕማ: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ሽዑ ክትብልዎ ኣለኩም።--ንኣብነት፡ ""Slices"" ከም ክፍሊ እንተ ተዋሂቡካ፡ ዝርዝር ናይ --ነቲ ኣብ ዝርዝር ቀዳማይ ዝመጽእ ሕረዮ።--ክልተ ወይ ካብኡ ንላዕሊ ምስ ዝኾኑ ተመሳሳሊ ጽኑዕነት ዘለዎም መወሳሰኒታት እንተሃልዮም፡--ቅርጸት: ClassName.StrongestExtensionName. --እቲ ዝሓየለ ናይ ምዝርጋሕ መስርሕ ክትረክብን ኣብዚ ሓደ ሕብረ-መኣዝናት ክትመልስን ኣለካ።--ኣብ ናይ'ቲ መወከሲ ስም፡ እቲ ጽፍሒ በቲ CAP - SM ዝብል ክፋላት እዩ ዚውሃብ።--SM ድማ ቁጽሪ ናይተን ንኣሽቱ ፊደላት --እቲ ናይ መወከሲ ሓይሊ ከምዚ ዝስዕብ እዩ: CAP እቲ ናይ ዓቢ ፊደል  ቁጽሪ ይኹን።--እቲ መወከሲታት ነቲ ክፍሊ ተወሳኺ ክፍልታት ንምምላእ እዩ ዝጥቀም።--❑ ናይ ሓደ ክፍሊ ስም (ናይ ሓደ ሕብረቁምፊ) ከምኡውን ዝርዝር ናይ'ቲ ዝድለ ቅጥዒታት ትረክብ።--  >>> strongestExtension ""my_class"" [""AA"",""Be"",""CC""]
--  ""my_class.AA""
strongestExtension :: String -> [String] -> String
strongestExtension class_name extensions =","strongestExtension :: String -> [String] -> String
strongestExtension class_name extensions = class_name ++ ""."" ++ strongestExt
  where
    calculateStrength :: String -> Int
    calculateStrength ext = length (filter (`elem` ['A'..'Z']) ext) - length (filter (`elem` ['a'..'z']) ext)
    
    strongestExt = fst $ foldl1 maxStrength $ zip extensions (map calculateStrength extensions)
    
    maxStrength :: (String, Int) -> (String, Int) -> (String, Int)
    maxStrength ext1 ext2
      | snd ext1 > snd ext2 = ext1
      | otherwise           = ext2","
main :: IO ()
main = do
  let candidate = strongestExtension
  if candidate ""Watashi"" [""tEN"",""niNE"",""eIGHt8OKe""] == ""Watashi.eIGHt8OKe"" then pure () else error ""assertion failed""
  if candidate ""Boku123"" [""nani"",""NazeDa"",""YEs.WeCaNe"",""32145tggg""] == ""Boku123.YEs.WeCaNe"" then pure () else error ""assertion failed""
  if candidate ""__YESIMHERE"" [""t"",""eMptY"",""nothing"",""zeR00"",""NuLl__"",""123NoooneB321""] == ""__YESIMHERE.NuLl__"" then pure () else error ""assertion failed""
  if candidate ""K"" [""Ta"",""TAR"",""t234An"",""cosSo""] == ""K.TAR"" then pure () else error ""assertion failed""
  if candidate ""__HAHA"" [""Tab"",""123"",""781345"",""-_-""] == ""__HAHA.123"" then pure () else error ""assertion failed""
  if candidate ""YameRore"" [""HhAas"",""okIWILL123"",""WorkOut"",""Fails"",""-_-""] == ""YameRore.okIWILL123"" then pure () else error ""assertion failed""
  if candidate ""finNNalLLly"" [""Die"",""NowW"",""Wow"",""WoW""] == ""finNNalLLly.WoW"" then pure () else error ""assertion failed""
  if candidate ""_"" [""Bb"",""91245""] == ""_.Bb"" then pure () else error ""assertion failed""
  if candidate ""Sp"" [""671235"",""Bb""] == ""Sp.671235"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_154,tir_Ethi,hs,"--ክልተ ቃላት ተዋሂቡካ ኣሎ:: እታ ካልአይቲ ቃል ወይ ዝኾነ ካብ ምቅያራታ ኣብ ናይ መጀመርታ ቃል ንኡስ ሕብረ-ቁጽሪ እንተኾይኑ True ክትመልስ ኣለካ::--  >>> cycpatternCheck ""abcd"" ""abd""
--  False
--  >>> cycpatternCheck ""hello"" ""ell""
--  True
--  >>> cycpatternCheck ""whassup"" ""psus""
--  False
--  >>> cycpatternCheck ""abab"" ""baa""
--  True
--  >>> cycpatternCheck ""efef"" ""eeff""
--  False
--  >>> cycpatternCheck ""himenss"" ""simen""
--  True
cycpatternCheck :: String -> String -> Bool
cycpatternCheck a b =","cycpatternCheck :: String -> String -> Bool
cycpatternCheck a b = any (`isInfixOf` a) rotations
  where
    rotations = take (length b) $ map (take (length b)) $ tails (b ++ b)","
main :: IO ()
main = do
  let candidate = cycpatternCheck
  if candidate ""xyzw"" ""xyw"" == False then pure () else error ""assertion failed""
  if candidate ""yello"" ""ell"" == True then pure () else error ""assertion failed""
  if candidate ""whattup"" ""ptut"" == False then pure () else error ""assertion failed""
  if candidate ""efef"" ""fee"" == True then pure () else error ""assertion failed""
  if candidate ""abab"" ""aabb"" == False then pure () else error ""assertion failed""
  if candidate ""winemtt"" ""tinem"" == True then pure () else error ""assertion failed""
  pure ()"
HumanEval_155,tir_Ethi,hs,"--ኣብነት: --❑ ሓደ ምሉእ ቁጽሪ ሂብካ፣ ብዝሒ ናይ እኩል ወይ ዘይምቹእ ኣሃዛት ዘለዎ ጡፕል ተመሊሱ።--  >>> evenOddCount (-12)
--  (1, 1)
--  >>> evenOddCount 123
--  (1, 2)
evenOddCount :: Int -> (Int, Int)
evenOddCount num =","evenOddCount :: Int -> (Int, Int)
evenOddCount num = (length evens, length odds)
  where
    digits = map (read . (:[])) . show . abs $ num
    evens = filter even digits
    odds  = filter odd digits","
main :: IO ()
main = do
  let candidate = evenOddCount
  if candidate 7 == (0, 1) then pure () else error ""assertion failed""
  if candidate (-78) == (1, 1) then pure () else error ""assertion failed""
  if candidate 3452 == (2, 2) then pure () else error ""assertion failed""
  if candidate 346211 == (3, 3) then pure () else error ""assertion failed""
  if candidate (-345821) == (3, 3) then pure () else error ""assertion failed""
  if candidate (-2) == (1, 0) then pure () else error ""assertion failed""
  if candidate (-45347) == (2, 3) then pure () else error ""assertion failed""
  if candidate 0 == (1, 0) then pure () else error ""assertion failed""
  pure ()"
HumanEval_156,tir_Ethi,hs,"--ኣብነት: --ገደብ: 1 <= num <= 1000 --ብነኣሽቱ ፊደላት ድማ ይመልሶ።--❑ ኣወንታዊ ምሉእ ቊጽሪ ተዋሂቡካ፣ ነቲ ሮማዊ ኣሃዛዊ ማዕረኡ ከም ሕብረቁጽሪ ኣግሃድ፣--  >>> intToMiniRoman 19
--  ""xix""
--  >>> intToMiniRoman 152
--  ""clii""
--  >>> intToMiniRoman 426
--  ""cdxxvi""
intToMiniRoman :: Int -> String
intToMiniRoman number =","intToMiniRoman :: Int -> String
intToMiniRoman number = concatMap (replicateSymbol number) romanNumerals
  where
    romanNumerals = [(1000, ""m""), (900, ""cm""), (500, ""d""), (400, ""cd""),
                     (100, ""c""), (90, ""xc""), (50, ""l""), (40, ""xl""),
                     (10, ""x""), (9, ""ix""), (5, ""v""), (4, ""iv""), (1, ""i"")]
    
    replicateSymbol :: Int -> (Int, String) -> String
    replicateSymbol n (value, symbol)
      | n >= value = symbol ++ replicateSymbol (n - value) (value, symbol)
      | otherwise = """"","
main :: IO ()
main = do
  let candidate = intToMiniRoman
  if candidate 19 == ""xix"" then pure () else error ""assertion failed""
  if candidate 152 == ""clii"" then pure () else error ""assertion failed""
  if candidate 251 == ""ccli"" then pure () else error ""assertion failed""
  if candidate 426 == ""cdxxvi"" then pure () else error ""assertion failed""
  if candidate 500 == ""d"" then pure () else error ""assertion failed""
  if candidate 1 == ""i"" then pure () else error ""assertion failed""
  if candidate 4 == ""iv"" then pure () else error ""assertion failed""
  if candidate 43 == ""xliii"" then pure () else error ""assertion failed""
  if candidate 90 == ""xc"" then pure () else error ""assertion failed""
  if candidate 94 == ""xciv"" then pure () else error ""assertion failed""
  if candidate 532 == ""dxxxii"" then pure () else error ""assertion failed""
  if candidate 900 == ""cm"" then pure () else error ""assertion failed""
  if candidate 994 == ""cmxciv"" then pure () else error ""assertion failed""
  if candidate 1000 == ""m"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_157,tir_Ethi,hs,"--ኣብነት: --90 ዲግሪ።--ሓደ ማዕዘኑ ቅኑዕ ዝኾነ ወይ ድማ --ጎኑታት ቅኑዕ ማዕዘናዊ ስሉስ ይሰርዑ፡ እንተዘይኮይኑ ሓሶት እዩ።--እቲ ሰለስተ ሸነኽ ናይ ሓደ ስሉስ ማዕዘን ርዝነቶም ምስ ተዋህበ፡ እቲ ሰለስተ ሸነኽ ናይ ሓደ ስሉስ ማዕዘን ርዝነቶም ምስ ተዋህበ፡ እቲ ሰለስተ ሸነኽ ናይ ሓደ ስሉስ ማዕዘን ርዝነቶም ምስ ተዋህበ፡ እቲ ሰለስተ ሸነኽ ናይ ሓደ ስሉስ ማዕዘን ርዝነቶም ምስ ተዋህበ፡ እቲ ሰለስተ ሸነኽ ናይ ሓደ ስሉስ ማዕዘን ርዝነቶም ምስ ተዋህበ፡ እቲ ሰለስተ ሸነኽ ናይ ሓደ ስሉስ ማዕዘን ርዝነቶም ምስ ተዋህበ፡--  >>> rightAngleTriangle 3 4 5
--  True
--  >>> rightAngleTriangle 1 2 3
--  False
rightAngleTriangle :: Int -> Int -> Int -> Bool
rightAngleTriangle a b c =","rightAngleTriangle :: Int -> Int -> Int -> Bool
rightAngleTriangle a b c = 
    let [x, y, z] = sort [a, b, c]
    in x^2 + y^2 == z^2
    where sort = Data.List.sort","
main :: IO ()
main = do
  let candidate = rightAngleTriangle
  if candidate 3 4 5 == True then pure () else error ""assertion failed""
  if candidate 1 2 3 == False then pure () else error ""assertion failed""
  if candidate 10 6 8 == True then pure () else error ""assertion failed""
  if candidate 2 2 2 == False then pure () else error ""assertion failed""
  if candidate 7 24 25 == True then pure () else error ""assertion failed""
  if candidate 10 5 7 == False then pure () else error ""assertion failed""
  if candidate 5 12 13 == True then pure () else error ""assertion failed""
  if candidate 15 8 17 == True then pure () else error ""assertion failed""
  if candidate 48 55 73 == True then pure () else error ""assertion failed""
  if candidate 1 1 1 == False then pure () else error ""assertion failed""
  if candidate 2 2 10 == False then pure () else error ""assertion failed""
  pure ()"
HumanEval_158,tir_Ethi,hs,"--እቲ ኣብ መወከሲ ጽሑፍ ቀዳማይ ዝመጽእ ፊደል ተመሊሱ።--ናይ ፍሉይ ፊደላት  እንተድኣ ብዙሓት ሕብረ-ቁጽሪታት ኣለዉ፡--እቲ ዝርዝር ዝተፈላለዩ ቃላት ዝሓዘ እዩ። ነታ ዝበዝሐ ቑጽሪ ዘለዋ ቃል ተመሊሳ ትህብ።--❑ ዝርዝር ሕብረ-ቁምፊታት ዝቕበል ተግባር ጽሓፍ።--  >>> findMax [""name"",""of"",""string""]
--  ""string""
--  >>> findMax [""name"",""enam"",""game""]
--  ""enam""
--  >>> findMax [""aaaaaaa"",""bb"",""cc""]
--  ""aaaaaaa""
findMax :: [String] -> String
findMax words =","import Data.List (nub, sort)

findMax :: [String] -> String
findMax words = 
    head . sort . map snd . filter (\(n, _) -> n == maxUnique) $ wordUniquePairs
  where
    wordUniquePairs = [(length . nub $ word, word) | word <- words]
    maxUnique = maximum $ map fst wordUniquePairs","
main :: IO ()
main = do
  let candidate = findMax
  if candidate [""name"",""of"",""string""] == ""string"" then pure () else error ""assertion failed""
  if candidate [""name"",""enam"",""game""] == ""enam"" then pure () else error ""assertion failed""
  if candidate [""aaaaaaa"",""bb"",""cc""] == ""aaaaaaa"" then pure () else error ""assertion failed""
  if candidate [""abc"",""cba""] == ""abc"" then pure () else error ""assertion failed""
  if candidate [""play"",""this"",""game"",""of"",""footbott""] == ""footbott"" then pure () else error ""assertion failed""
  if candidate [""we"",""are"",""gonna"",""rock""] == ""gonna"" then pure () else error ""assertion failed""
  if candidate [""we"",""are"",""a"",""mad"",""nation""] == ""nation"" then pure () else error ""assertion failed""
  if candidate [""this"",""is"",""a"",""prrk""] == ""this"" then pure () else error ""assertion failed""
  if candidate [""b""] == ""b"" then pure () else error ""assertion failed""
  if candidate [""play"",""play"",""play""] == ""play"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_159,tir_Ethi,hs,"--ኣብነት: --እኹል ዝተረፈ ካሮት እንተዘይሃልዩ፡ ኩሉ ዝተረፈ ካሮት ክትበልዕ ኢኻ፡ ግን ከኣ ገና ትጠመይ ኢኻ።--ድሕሪ ምብላዕኩም ዝተረፈ ቁጽሪ ካሮት ] --[ ብድምር ድሕሪ ምብላዕኩም ዝበልዕኩምዎ ካሮት --ሕጂ ግን ናይታ መዓልቲ መግቢ ንምምላእ ዝያዳ ካሮት ክትበልዕ ኣለካ።--❑ ጥሙይ ዝኾንካ ርግቢ ኢኻ፡ ድሮ ድማ ዝተወሰነ ቁጽሪ ካሮት በሊዕካ ኢኻ፡--  >>> eat 5 6 10
--  [11,4]
--  >>> eat 4 8 9
--  [12,1]
--  >>> eat 1 10 10
--  [11,0]
--  >>> eat 2 11 5
--  [7,0]
--  Variables:
--  @number : integer
--  the number of carrots that you have eaten.
--  @need : integer
--  the number of carrots that you need to eat.
--  @remaining : integer
--  the number of remaining carrots thet exist in stock
--  Constrain:
--  * 0 <= number <= 1000
--  * 0 <= need <= 1000
--  * 0 <= remaining <= 1000
--  Have fun :)
eat :: Int -> Int -> Int -> [Int]
eat number need remaining =","eat :: Int -> Int -> Int -> [Int]
eat number need remaining
  | remaining >= need = [number + need, remaining - need]
  | otherwise = [number + remaining, 0]","
main :: IO ()
main = do
  let candidate = eat
  if candidate 5 6 10 == [11,4] then pure () else error ""assertion failed""
  if candidate 4 8 9 == [12,1] then pure () else error ""assertion failed""
  if candidate 1 10 10 == [11,0] then pure () else error ""assertion failed""
  if candidate 2 11 5 == [7,0] then pure () else error ""assertion failed""
  if candidate 4 5 7 == [9,2] then pure () else error ""assertion failed""
  if candidate 4 5 1 == [5,0] then pure () else error ""assertion failed""
  pure ()"
HumanEval_160,tir_Ethi,hs,"--ዝርዝር ኦፕሬተራት እንተወሓደ ሓደ ኦፕሬተራት ኣለዎ፡ ዝርዝር ኦፐራንድ ድማ እንተወሓደ ክልተ ኦፐራንድ ኣለዎ።--ኦፐራንድ ናይ ዘይ-ነጻዊ ምሉእ ቁጽሪ ዝርዝር እዩ።--እቲ ናይ ኦፕሬተር ዝርዝር ርዝመት ምስ ናይ ኦፐራንድ ዝርዝር ርዝመት ብነጻ ሓደ እዩ።--ኣስተብህለሉ: --=> ውጽኢት = 9 --ውጽኢት = 2 + 3 * 4 - 5 --ዝርዝር = [2, 3, 4, 5] --ሓላፊ['+', '*', '-'] --ኣብነት: --ምዕባይ (**) --ምድብ ደርቢ (//) --ምውሳኽ (*) --ምንካይ (- ) --ምውሳኽ (+) --መሰረታዊ ናይ ኣልጀብራ ስርሓት --መግለጺን ነቲ ናይዚ መግለጺ ገምጋም ምምላስን።--እቲ ካልኣይ ዝርዝር ናይ ምሉእ ቁጽሪታት ዝርዝር እዩ። ነቲ ኣልጀብራዊ ንምስራሕ ነቶም ክልተ ዝርዝር ተጠቐም።--ኣብ ክልተ ዝርዝር ተዋሳኣይ፡ ከምኡ'ውን ተዋሳኣይ፡ እቲ ቀዳማይ ዝርዝር መሰረታዊ ናይ ኣልጀብራ ስርሓት ኣለዎ፡ ከምኡ'ውንdoAlgebra :: [String] -> [Int] -> Int
doAlgebra operator operand =","doAlgebra :: [String] -> [Int] -> Int
doAlgebra operator operand = evaluate operand operator
  where
    evaluate [x] [] = x
    evaluate (x:y:ys) (op:ops) = evaluate (result:ys) ops
      where
        result = applyOperation op x y

    applyOperation ""+"" a b = a + b
    applyOperation ""-"" a b = a - b
    applyOperation ""*"" a b = a * b
    applyOperation ""//"" a b = a `div` b
    applyOperation ""**"" a b = a ^ b
    applyOperation _ _ _ = error ""Unsupported operation""","
main :: IO ()
main = do
  let candidate = doAlgebra
  if candidate [""**"",""*"",""+""] [2,3,4,5] == 37 then pure () else error ""assertion failed""
  if candidate [""+"",""*"",""-""] [2,3,4,5] == 9 then pure () else error ""assertion failed""
  if candidate [""//"",""*""] [7,3,4] == 8 then pure () else error ""assertion failed""
  pure ()"
HumanEval_161,tir_Ethi,hs,"--ኣብነታት --እቲ ተግባር ነቲ ውጽኢት ናይታ ሕብረ-መኣዝናት ክመልሶ ኣለዎ።--እቲ ሕብረቁምፊ ፊደላት እንተዘየለዎ ነቲ ሕብረቁምፊ ኣንፈት ይሃብ።--እንተዘይኮይኑ ከምቲ ዘለዎ ይትረፍ።--s[i] ፊደል እንተኾይኑ፡ ካብ ታሕቲ ናብ ላዕሊ ወይ ድማ ብኣንጻሩ፡--❑ ኣብ ሓደ ናይ ኮምፕዩተር ኮምፕዩተር--  >>> solve ""1234""
--  ""4321""
--  >>> solve ""ab""
--  ""AB""
--  >>> solve ""#a@C""
--  ""#A@c""
solve :: String -> String
solve s =","solve :: String -> String
solve s
  | any (`elem` ['a'..'z'] ++ ['A'..'Z']) s = map toggleCase s
  | otherwise = reverse s
  where
    toggleCase c
      | c `elem` ['a'..'z'] = toEnum (fromEnum c - 32) :: Char
      | c `elem` ['A'..'Z'] = toEnum (fromEnum c + 32) :: Char
      | otherwise = c","
main :: IO ()
main = do
  let candidate = solve
  if candidate ""AsDf"" == ""aSdF"" then pure () else error ""assertion failed""
  if candidate ""1234"" == ""4321"" then pure () else error ""assertion failed""
  if candidate ""ab"" == ""AB"" then pure () else error ""assertion failed""
  if candidate ""#a@C"" == ""#A@c"" then pure () else error ""assertion failed""
  if candidate ""#AsdfW^45"" == ""#aSDFw^45"" then pure () else error ""assertion failed""
  if candidate ""#6@2"" == ""2@6#"" then pure () else error ""assertion failed""
  if candidate ""#$a^D"" == ""#$A^d"" then pure () else error ""assertion failed""
  if candidate ""#ccc"" == ""#CCC"" then pure () else error ""assertion failed""
  pure ()"
HumanEval_162,tir_Ethi,hs,"--'text' ባዶ ሕብረ-ቁጽሪ እንተኾይኑ፡ Nothing ይመልስ።--❑ 'text' ዝተባህለ ሕብረ-ቁጽሪ ሂብካ ነቲ md5 hash equivalent string ምለስ።--  >>> stringToMd5 ""Hello world""
--  Just (""3e25960a79dbc69b674cd4ec67a72c62"")
stringToMd5 :: String -> Maybe String
stringToMd5 text =","import qualified Data.ByteString.Char8 as C
import qualified Data.Digest.Pure.MD5 as MD5

stringToMd5 :: String -> Maybe String
stringToMd5 text
  | null text = Nothing
  | otherwise = Just $ show $ MD5.md5 $ C.pack text","
main :: IO ()
main = do
  let candidate = stringToMd5
  if candidate ""Hello world"" == Just (""3e25960a79dbc69b674cd4ec67a72c62"") then pure () else error ""assertion failed""
  if candidate """" == Just (Nothing) then pure () else error ""assertion failed""
  if candidate ""A B C"" == Just (""0ef78513b0cb8cef12743f5aeb35f888"") then pure () else error ""assertion failed""
  if candidate ""password"" == Just (""5f4dcc3b5aa765d61d8327deb882cf99"") then pure () else error ""assertion failed""
  pure ()"
HumanEval_163,tir_Ethi,hs,"--ንኣብነት: --b፡ ብደቂቕ እናወሰኸ ዝኸይድ ቅደም ተከተል።--aን bን ዝብሉ ክልተ ኣወንታዊ ቑጽሪታት ሂብካ ኣብ መንጎ aን bን ዘሎ እኩል ቁጽሪ ተመሊሱ ሂብካ--  >>> generateIntegers 2 8
--  [2,4,6,8]
--  >>> generateIntegers 8 2
--  [2,4,6,8]
--  >>> generateIntegers 10 14
--  []
generateIntegers :: Int -> Int -> [Int]
generateIntegers a b =","generateIntegers :: Int -> Int -> [Int]
generateIntegers a b = filter even [min a b .. max a b]","
main :: IO ()
main = do
  let candidate = generateIntegers
  if candidate 2 10 == [2,4,6,8] then pure () else error ""assertion failed""
  if candidate 10 2 == [2,4,6,8] then pure () else error ""assertion failed""
  if candidate 132 2 == [2,4,6,8] then pure () else error ""assertion failed""
  if candidate 17 89 == [] then pure () else error ""assertion failed""
  pure ()"
