[{"task_id":"HumanEval_0","nl":"npi_Deva","pl":"js","prompt":"\/ दिइएको सीमा। \/ जाँच गर्नुहोस् कि यदि दिइएको संख्याको सरणीमा, कुनै दुई संख्याहरू एक अर्काको नजिक छन् भने \/\/ >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\/\/ false\n\/\/ >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\/\/ true\nfunction has_close_elements(numbers, threshold){\n","canonical_solution":"function has_close_elements(numbers, threshold) {\n    \/\/ First, sort the array to ensure we check adjacency for closest elements\n    numbers.sort((a, b) => a - b);\n\n    \/\/ Iterate through the sorted list and check differences between successive elements\n    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"},{"task_id":"HumanEval_1","nl":"npi_Deva","pl":"js","prompt":"\/ इनपुट स्ट्रिङमा कुनै पनि स्पेसलाई बेवास्ता गर्नुहोस्।\/ अलग समूहहरू सन्तुलित छन् (प्रत्येक खुला ब्रेस ठीकसँग बन्द छ) र एक अर्कामा नेस्टेड छैनन् ।\/ समूहलाई अलग-अलग स्ट्रिङमा विभाजन गर्नुहोस् र तिनको एरे फर्काउनुहोस्।यो प्रकार्यको इनपुट एउटा स्ट्रिङ हो जसमा नेस्टेड कोष्ठकहरूको बहु समूहहरू छन्। तपाईँको लक्ष्य \/\/ >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n\/\/ [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n","canonical_solution":"function separate_paren_groups(paren_string) {\n    paren_string = paren_string.replace(\/\\s+\/g, ''); \/\/ Remove spaces\n    const groups = [];\n    let balance = 0;\n    let currentGroup = '';\n\n    for (let char of paren_string) {\n        currentGroup += char;\n        if (char === '(') {\n            balance++;\n        } else if (char === ')') {\n            balance--;\n        }\n        \n        if (balance === 0) {\n            groups.push(currentGroup);\n            currentGroup = '';\n        }\n    }\n\n    return groups;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"},{"task_id":"HumanEval_2","nl":"npi_Deva","pl":"js","prompt":"\/ संख्याको दशमलव भाग फर्काउनुहोस्। \/ (बाँकी भाग सधैँ १ भन्दा सानो हुन्छ) ।\/ र पूर्णांक भाग (दिइएको संख्या भन्दा ठूलो पूर्णांक) र दशमलव \/एक सकारात्मक फ्लोटिंग प्वाइन्ट नम्बर दिइएको छ, यसलाई मा विघटन गर्न सकिन्छ\/\/ >>> truncate_number(3.5)\n\/\/ 0.5\nfunction truncate_number(number){\n","canonical_solution":"function truncate_number(number) {\n    return number - Math.floor(number);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"},{"task_id":"HumanEval_3","nl":"npi_Deva","pl":"js","prompt":"\/ त्यो बिन्दुमा फंक्शनले true फर्काउनु पर्छ. अन्यथा यो false फर्काउनु पर्छ. \/ शून्य ब्यालेन्स. तपाईंको कार्य कुनै पनि बिन्दुमा खाताको ब्यालेन्स शून्य भन्दा तल झर्छ भने पत्ता लगाउनु हो, र \/तपाईँलाई बैंक खातामा जम्मा र निकासीको एक सरणी दिइन्छ जुन  बाट सुरु हुन्छ\/\/ >>> below_zero([1, 2, 3])\n\/\/ false\n\/\/ >>> below_zero([1, 2, -4, 5])\n\/\/ true\nfunction below_zero(operations){\n","canonical_solution":"function below_zero(operations) {\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_4","nl":"npi_Deva","pl":"js","prompt":"\/ MAD = औसत। x - x_mean। \/ तत्व र केन्द्र बिन्दु (यस अवस्थामा औसत): \/ औसत निरपेक्ष विचलन प्रत्येक \/ यस डाटासेटको औसतको वरिपरि। \/आगत संख्याहरूको दिइएको सरणीको लागि, औसत निरपेक्ष विचलन गणना गर्नुहोस् \/\/ >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\/\/ 1.0\nfunction mean_absolute_deviation(numbers){\n","canonical_solution":"function mean_absolute_deviation(numbers) {\n    const n = numbers.length;\n    if (n === 0) return 0;\n\n    const mean = numbers.reduce((acc, val) => acc + val, 0) \/ n;\n    const deviations = numbers.map(num => Math.abs(num - mean));\n    const mad = deviations.reduce((acc, val) => acc + val, 0) \/ n;\n\n    return mad;\n}\n\n\/\/ Example usage:\nconsole.log(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])); \/\/ Output: 1.0","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"},{"task_id":"HumanEval_5","nl":"npi_Deva","pl":"js","prompt":"\/इनपुट एर्रेको प्रत्येक दुई लगातार तत्वहरू बीच 'डिलिमिटर' नम्बर घुसाउनुहोस् ∀numbers' \/\/ >>> intersperse([], 4)\n\/\/ []\n\/\/ >>> intersperse([1, 2, 3], 4)\n\/\/ [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n","canonical_solution":"function intersperse(numbers, delimiter) {\n    if (numbers.length === 0) return [];\n    \n    const result = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimiter);\n    }\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_6","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि (() (()) मा अधिकतम दुईवटा स्तरको नेस्टिङ हुन्छ जबकि ((())) मा तीनवटा हुन्छ । \/ समूहको प्रत्येकको लागि, कोष्ठकहरूको गहिरो स्तरको गहिरो स्तर आउटपुट गर्नुहोस्।\/यो प्रकार्यको इनपुट एउटा स्ट्रिङ हो जुन अन्तरिक्षद्वारा विभाजित नेस्टेड कोष्ठकहरूको लागि बहु समूहहरूको प्रतिनिधित्व गर्दछ।\/\/ >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n\/\/ [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n","canonical_solution":"function parse_nested_parens(paren_string) {\n    \/\/ Split the input string into groups based on spaces\n    const groups = paren_string.split(' ');\n    \/\/ Map each group to its maximum nesting depth\n    return groups.map(group => {\n        let maxDepth = 0;\n        let currentDepth = 0;\n\n        \/\/ Iterate through each character in the group\n        for (let char of group) {\n            if (char === '(') {\n                \/\/ Increment current depth for '('\n                currentDepth++;\n                \/\/ Update max depth if it's greater than the previous max\n                if (currentDepth > maxDepth) {\n                    maxDepth = currentDepth;\n                }\n            } else if (char === ')') {\n                \/\/ Decrement current depth for ')'\n                currentDepth--;\n            }\n        }\n        \n        return maxDepth; \/\/ Return max depth of this group\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"},{"task_id":"HumanEval_7","nl":"npi_Deva","pl":"js","prompt":"\/सिर्कोको इनपुट एरेलाई केवल तीका लागि फिल्टर गर्नुहोस् जुन दिइएको सबस्ट्रिंग समावेश गर्दछ \/\/ >>> filter_by_substring([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n","canonical_solution":"function filter_by_substring(strings, substring) {\n    return strings.filter(str => str.includes(substring));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"},{"task_id":"HumanEval_8","nl":"npi_Deva","pl":"js","prompt":"\/ खाली योगफल ० बराबर हुनुपर्दछ र खाली उत्पाद १ बराबर हुनुपर्दछ। \/पूर्णांकहरूको दिइएको सरणीको लागि, सरणीमा सबै पूर्णांकहरूको योग र उत्पाद समावेश भएको एउटा सरणी फर्काउनुहोस्।\/\/ >>> sum_product([])\n\/\/ [0, 1]\n\/\/ >>> sum_product([1, 2, 3, 4])\n\/\/ [10, 24]\nfunction sum_product(numbers){\n","canonical_solution":"function sum_product(numbers) {\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"},{"task_id":"HumanEval_9","nl":"npi_Deva","pl":"js","prompt":"\/ अनुक्रममा। \/पूर्णांकहरूको दिइएको सरणीबाट, दिइएको क्षण सम्म भेटिएको अधिकतम रोलिंग तत्वको सरणी उत्पन्न गर्नुहोस् \/\/ >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\/\/ [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n","canonical_solution":"function rolling_max(numbers) {\n    let result = [];\n    let currentMax = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < numbers.length; i++) {\n        currentMax = Math.max(currentMax, numbers[i]);\n        result.push(currentMax);\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();"},{"task_id":"HumanEval_10","nl":"npi_Deva","pl":"js","prompt":"\/ - स्ट्रिंग रिभर्सको अन्त्यमा स्ट्रिंग उपसर्ग थप्नुहोस् जुन पालिन्ड्रोमिक प्रत्यय भन्दा पहिले आउँछ।\/ - दिइएको स्ट्रिङको सबैभन्दा लामो पोस्टफिक्स पत्ता लगाउनुहोस् जुन पालिन्ड्रोम हो। \/ एल्गोरिथ्म विचार सरल छ: \/सबैभन्दा छोटो पालिन्ड्रोम खोज्नुहोस् जुन आपूर्ति गरिएको स्ट्रिङबाट सुरु हुन्छ।\/\/ >>> make_palindrome(\"\")\n\/\/ \"\"\n\/\/ >>> make_palindrome(\"cat\")\n\/\/ \"catac\"\n\/\/ >>> make_palindrome(\"cata\")\n\/\/ \"catac\"\nfunction make_palindrome(string){\n","canonical_solution":"function make_palindrome(string) {\n    \/\/ Helper function to check if a string is a palindrome\n    function isPalindrome(s) {\n        let left = 0;\n        let right = s.length - 1;\n        while (left < right) {\n            if (s[left] !== s[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    \/\/ Find the longest palindromic suffix\n    let longestPalindromicSuffixLength = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (isPalindrome(string.slice(i))) {\n            longestPalindromicSuffixLength = string.length - i;\n            break;\n        }\n    }\n\n    \/\/ Create the shortest palindrome\n    const prefixToReverse = string.slice(0, string.length - longestPalindromicSuffixLength);\n    const reversedPrefix = prefixToReverse.split('').reverse().join('');\n    return string + reversedPrefix;\n}\n\n\/\/ Examples\nconsole.log(make_palindrome(\"\"));     \/\/ \"\"\nconsole.log(make_palindrome(\"cat\"));  \/\/ \"catac\"\nconsole.log(make_palindrome(\"cata\")); \/\/ \"catac\"","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\ntest();"},{"task_id":"HumanEval_11","nl":"npi_Deva","pl":"js","prompt":"\/ यी इनपुटहरूमा बाइनरी XOR प्रदर्शन गर्नुहोस् र परिणामलाई स्ट्रि asको रूपमा पनि फर्काउनुहोस्। \/इनपुट दुई स्ट्रिंगहरू a र b हुन् जसमा केवल 1s र 0s हुन्छन्। \/\/ >>> string_xor(\"010\", \"110\")\n\/\/ \"100\"\nfunction string_xor(a, b){\n","canonical_solution":"function string_xor(a, b) {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i]) ? \"0\" : \"1\";\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"},{"task_id":"HumanEval_12","nl":"npi_Deva","pl":"js","prompt":"\/ समान लम्बाइको स्ट्रिङहरू। इनपुट एर्रे खाली छ भने अपरिभाषित फर्काउनुहोस्।\/ array of strings, सबैभन्दा लामो फिर्ता गर्नुहोस्. बहुविधको मामलामा पहिलो फिर्ता गर्नुहोस् \/\/ >>> longest([])\n\/\/ undefined\n\/\/ >>> longest([\"a\", \"b\", \"c\"])\n\/\/ \"a\"\n\/\/ >>> longest([\"a\", \"bb\", \"ccc\"])\n\/\/ \"ccc\"\nfunction longest(strings){\n","canonical_solution":"function longest(strings) {\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"},{"task_id":"HumanEval_13","nl":"npi_Deva","pl":"js","prompt":"\/ दुई पूर्णांक a र b को सबैभन्दा ठूलो सामान्य विभाजक फर्काउनुहोस् \/\/ >>> greatest_common_divisor(3, 5)\n\/\/ 1\n\/\/ >>> greatest_common_divisor(25, 15)\n\/\/ 5\nfunction greatest_common_divisor(a, b){\n","canonical_solution":"function greatest_common_divisor(a, b) {\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"},{"task_id":"HumanEval_14","nl":"npi_Deva","pl":"js","prompt":"\/ सबै उपसर्गहरूको एरे फर्काउनुहोस् इनपुट स्ट्रिङको छोटो देखि लामो सम्म \/\/ >>> all_prefixes(\"abc\")\n\/\/ [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n","canonical_solution":"function all_prefixes(string) {\n    let prefixes = [];\n    for (let i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"},{"task_id":"HumanEval_15","nl":"npi_Deva","pl":"js","prompt":"\/० देखि n सम्मको अन्तरिक्ष-सीमित संख्याहरू समावेश भएको स्ट्रिङ फर्काउँदछ।\/\/ >>> string_sequence(0)\n\/\/ \"0\"\n\/\/ >>> string_sequence(5)\n\/\/ \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n","canonical_solution":"function string_sequence(n) {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i);\n    }\n    return result.join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"},{"task_id":"HumanEval_16","nl":"npi_Deva","pl":"js","prompt":"\/एक स्ट्रिंग दिइएको छ, पत्ता लगाउनुहोस् कि कति फरक वर्णहरू (कुनै पनि केस) यसमा समावेश छन्।\/\/ >>> count_distinct_characters(\"xyzXYZ\")\n\/\/ 3\n\/\/ >>> count_distinct_characters(\"Jerry\")\n\/\/ 4\nfunction count_distinct_characters(string){\n","canonical_solution":"function count_distinct_characters(string) {\n    \/\/ Convert the string to lowercase to ignore case differences\n    const lowercaseString = string.toLowerCase();\n    \/\/ Create a Set to store distinct characters\n    const distinctChars = new Set();\n    \/\/ Iterate over each character in the string\n    for (let char of lowercaseString) {\n        distinctChars.add(char); \/\/ Add character to the set\n    }\n    \/\/ Return the size of the set which represents the number of distinct characters\n    return distinctChars.size;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"},{"task_id":"HumanEval_17","nl":"npi_Deva","pl":"js","promptओ रडार' - आधा नोट, दुई पटकसम्म चलेको छ \/ 'ओ' - पूरा नोट, चार पटकसम्म रहन्छ \/ यहाँ एक किंवदन्ती छ: \/ अन्तिम होइन।\/ तपाईंको कार्य यो स्ट्रिंग पार्स गर्नु हो र पूर्णांकको एरे फर्काउनु हो जुन प्रत्येकले कति पटक हराउँछ भन्नेसँग मेल खान्छ \/यो प्रकार्यको इनपुट विशेष ASCII ढाँचामा संगीत नोटहरू प्रतिनिधित्व गर्ने स्ट्रिङ हो।\/\/ >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n\/\/ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n","canonical_solution":"function parse_music(music_string) {\n    let notes = music_string.split(\" \");\n    let beats = [];\n\n    for (let note of notes) {\n        switch (note) {\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n            default:\n                \/\/ Handle unexpected notes if necessary\n                break;\n        }\n    }\n    return beats;\n}\n\n\/\/ Example usage:\n\/\/ console.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\")); \n\/\/ Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"},{"task_id":"HumanEval_18","nl":"npi_Deva","pl":"js","prompt":"\/मूल स्ट्रिङमा दिइएको सबस्ट्रिंग कति पटक फेला पार्न सकिन्छ भन्ने पत्ता लगाउनुहोस्। ओभरल्यापिङ केसहरू गणना गर्नुहोस्। \/\/ >>> how_many_times(\"\", \"a\")\n\/\/ 0\n\/\/ >>> how_many_times(\"aaa\", \"a\")\n\/\/ 3\n\/\/ >>> how_many_times(\"aaaa\", \"aa\")\n\/\/ 3\nfunction how_many_times(string, substring){\n","canonical_solution":"function how_many_times(string, substring) {\n  if (substring.length === 0) return 0;\n  \n  let count = 0;\n  let position = 0;\n  \n  while ((position = string.indexOf(substring, position)) !== -1) {\n    count++;\n    position++;\n  }\n  \n  return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"},{"task_id":"HumanEval_19","nl":"npi_Deva","pl":"js","prompt":"\/ साना देखि ठूला सम्म क्रमबद्ध संख्याहरु सहितको स्ट्रिङ फर्काउँदछ ।\/ वैध विकल्पहरू 'शून्य', 'एक', 'दुई', 'तीन', 'चार', 'पाँच', 'छ', 'सात', 'आठ' र 'नौ' हुन्। \/इनपुट 'शून्य' देखि 'नौ' सम्मको संख्यात्मकहरूको अन्तरिक्ष-सीमित स्ट्रिङ हो।\/\/ >>> sort_numbers(\"three one five\")\n\/\/ \"one three five\"\nfunction sort_numbers(numbers){\n","canonical_solution":"function sort_numbers(numbers) {\n    const numberWords = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    \n    return numbers\n        .split(' ')\n        .sort((a, b) => numberWords.indexOf(a) - numberWords.indexOf(b))\n        .join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"},{"task_id":"HumanEval_20","nl":"npi_Deva","pl":"js","prompt":"\/ अन्य र तिनीहरूलाई क्रममा फिर्ता गर्नुहोस् (सानो संख्या, ठूलो संख्या) ।\/आपूर्ति गरिएको संख्याहरूको एरेबाट (कम्तिमा दुई लम्बाई) दुई चयन गर्नुहोस् र दुई फिर्ता गर्नुहोस् जुन प्रत्येकको नजिक छ।\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\/\/ [2.0, 2.2]\n\/\/ >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\/\/ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n","canonical_solution":"function find_closest_elements(numbers) {\n    if (numbers.length < 2) {\n        throw new Error('Array must contain at least two elements.');\n    }\n    \n    numbers.sort((a, b) => a - b);\n\n    let minDiff = Infinity;\n    let closestPair = [numbers[0], numbers[1]];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n\n    return closestPair;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"},{"task_id":"HumanEval_21","nl":"npi_Deva","pl":"js","prompt":"\/ यस्तो कि सब भन्दा सानो संख्या ० र सब भन्दा ठूलो १ हुनेछ \/संख्याहरूको दिइएको सरणी (कम्तिमा दुई तत्वहरूको), त्यस सरणीमा रैखिक रूपान्तरण लागू गर्नुहोस्, \/\/ >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\/\/ [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n","canonical_solution":"function rescale_to_unit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"Array must contain at least two elements.\");\n    }\n    \n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    \n    return numbers.map(num => (num - min) \/ (max - min));\n}\n\n\/\/ Example usage\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); \/\/ [0.0, 0.25, 0.5, 0.75, 1.0]","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"},{"task_id":"HumanEval_22","nl":"npi_Deva","pl":"js","prompt":"\/फिल्टर दिइएको एरे कुनै पनि jsthon मानहरू पूर्णांकहरूको लागि मात्र \/\/ >>> filter_integers([\"a\", 3.14, 5])\n\/\/ [5]\n\/\/ >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n\/\/ [1, 2, 3]\nfunction filter_integers(values){\n","canonical_solution":"function filter_integers(values) {\n    return values.filter(value => Number.isInteger(value));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_23","nl":"npi_Deva","pl":"js","prompt":"\/दिइएको स्ट्रिंगको लम्बाई फिर्ता गर्नुहोस् \/\/ >>> strlen(\"\")\n\/\/ 0\n\/\/ >>> strlen(\"abc\")\n\/\/ 3\nfunction strlen(string){\n","canonical_solution":"function strlen(string) {\n    return string.length;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();"},{"task_id":"HumanEval_24","nl":"npi_Deva","pl":"js","prompt":"\/ दिइएको संख्या n को लागि, n भन्दा सानो, n लाई समान रूपले विभाजित गर्ने सबैभन्दा ठूलो संख्या खोज्नुहोस् \/\/ >>> largest_divisor(15)\n\/\/ 5\nfunction largest_divisor(n){\n","canonical_solution":"function largest_divisor(n) {\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1; \/\/ for the edge case where n is 1\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();"},{"task_id":"HumanEval_25","nl":"npi_Deva","pl":"js","prompt":"\/ इनपुट नम्बर सबै कारकहरूको गुणनफल बराबर हुनुपर्छ ।\/ प्रत्येक कारकलाई कारककरणमा कति पटक देखा पर्दछ भन्नेसँग मेल खाने गरी क्रमबद्ध गर्नुपर्दछ।\/दिइएको पूर्णांकको अभाज्य गुणनफलहरूको सरणीलाई साना देखि ठूला सम्मको क्रममा फर्काउँछ।\/\/ >>> factorize(8)\n\/\/ [2, 2, 2]\n\/\/ >>> factorize(25)\n\/\/ [5, 5]\n\/\/ >>> factorize(70)\n\/\/ [2, 5, 7]\nfunction factorize(n){\n","canonical_solution":"function factorize(n) {\n    const factors = [];\n    let divisor = 2;\n\n    while (n >= 2) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n \/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n\n    return factors;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_26","nl":"npi_Deva","pl":"js","prompt":"\/ आगतमा जस्तै तत्वहरूको क्रम राख्नुहोस्।\/ पूर्णांकहरूको एरेबाट, सबै तत्वहरू हटाउनुहोस् जुन एक पटक भन्दा बढी देखा पर्दछ।\/\/ >>> remove_duplicates([1, 2, 3, 2, 4])\n\/\/ [1, 3, 4]\nfunction remove_duplicates(numbers){\n","canonical_solution":"function remove_duplicates(numbers) {\n    const frequency = {};\n    \/\/ Count occurrences of each number\n    numbers.forEach(num => {\n        frequency[num] = (frequency[num] || 0) + 1;\n    });\n\n    \/\/ Filter out numbers that occur more than once\n    return numbers.filter(num => frequency[num] === 1);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"},{"task_id":"HumanEval_27","nl":"npi_Deva","pl":"js","prompt":"\/दिइएको स्ट्रिङका लागि, लघु अक्षरलाई ठूला अक्षरमा र ठूला अक्षरलाई लघु अक्षरमा पल्टाउनुहोस्।\/\/ >>> flip_case(\"Hello\")\n\/\/ \"hELLO\"\nfunction flip_case(string){\n","canonical_solution":"function flip_case(string) {\n    let flippedString = '';\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n        if (char === char.toLowerCase()) {\n            flippedString += char.toUpperCase();\n        } else {\n            flippedString += char.toLowerCase();\n        }\n    }\n    return flippedString;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();"},{"task_id":"HumanEval_28","nl":"npi_Deva","pl":"js","prompt":"\/एकल स्ट्रिंगमा स्ट्रिंगहरूको एरे कन्केनेट गर्नुहोस् \/\/ >>> concatenate([])\n\/\/ \"\"\n\/\/ >>> concatenate([\"a\", \"b\", \"c\"])\n\/\/ \"abc\"\nfunction concatenate(strings){\n","canonical_solution":"function concatenate(strings) {\n    return strings.join('');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();"},{"task_id":"HumanEval_29","nl":"npi_Deva","pl":"js","prompt":"\/सिर्कोको इनपुट एरेलाई फिल्टर गर्नुहोस् जुन दिइएको उपसर्गबाट सुरु हुन्छ।\/\/ >>> filter_by_prefix([], \"a\")\n\/\/ []\n\/\/ >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n\/\/ [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n","canonical_solution":"function filter_by_prefix(strings, prefix) {\n    return strings.filter(str => str.startsWith(prefix));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"},{"task_id":"HumanEval_30","nl":"npi_Deva","pl":"js","prompt":"\/मञ्चमा केवल सकारात्मक संख्याहरू फर्काउनुहोस्।\/\/ >>> get_positive([-1, 2, -4, 5, 6])\n\/\/ [2, 5, 6]\n\/\/ >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n","canonical_solution":"function get_positive(l) {\n    return l.filter(function(num) {\n        return num > 0;\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_31","nl":"npi_Deva","pl":"js","prompt":"\/ यदि दिइएको संख्या अभाज्य छ भने सत्य फर्काउँछ, र अन्यथा गलत।\/\/ >>> is_prime(6)\n\/\/ false\n\/\/ >>> is_prime(101)\n\/\/ true\n\/\/ >>> is_prime(11)\n\/\/ true\n\/\/ >>> is_prime(13441)\n\/\/ true\n\/\/ >>> is_prime(61)\n\/\/ true\n\/\/ >>> is_prime(4)\n\/\/ false\n\/\/ >>> is_prime(1)\n\/\/ false\nfunction is_prime(n){\n","canonical_solution":"function is_prime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n  \n    if (n % 2 === 0 || n % 3 === 0) return false;\n  \n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n  \n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"},{"task_id":"HumanEval_33","nl":"npi_Deva","pl":"js","prompt":"\/ l को सम्बन्धित सूचकांकहरूको मानहरूमा, तर क्रमबद्ध।\/ l' l सँग मिल्दोजुल्दो छ जुन तीनद्वारा विभाजित हुँदैन, जबकि यसको मानहरू तीनद्वारा विभाजित हुन्छन्।\/यो फंक्शनले एउटा एर्रे लिन्छ l र एउटा एर्रे फर्काउँछ l' यस्तो कि \/\/ >>> sort_third([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\/\/ [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n","canonical_solution":"function sort_third(l) {\n    \/\/ Extract the elements at indices divisible by 3\n    const elementsToSort = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            elementsToSort.push(l[i]);\n        }\n    }\n    \n    \/\/ Sort the extracted elements\n    elementsToSort.sort((a, b) => a - b);\n\n    \/\/ Place the sorted elements back into their original positions\n    let sortedIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            l[i] = elementsToSort[sortedIndex++];\n        }\n    }\n    \n    return l;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_third;\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2]),[2, 6, 3, 4, 8, 9, 5]);\n  assert.deepEqual(candidate([5, 8, 3, 4, 6, 9, 2]),[2, 8, 3, 4, 6, 9, 5]);\n  assert.deepEqual(candidate([5, 6, 9, 4, 8, 3, 2]),[2, 6, 9, 4, 8, 3, 5]);\n  assert.deepEqual(candidate([5, 6, 3, 4, 8, 9, 2, 1]),[2, 6, 3, 4, 8, 9, 5, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_34","nl":"npi_Deva","pl":"js","prompt":"\/एउटा सरणीमा क्रमबद्ध अद्वितीय तत्वहरू फर्काउँछ \/\/ >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n","canonical_solution":"function unique(l) {\n    \/\/ Use a Set to remove duplicates and then spread into an array\n    const uniqueElements = [...new Set(l)];\n    \/\/ Sort the array in ascending order\n    uniqueElements.sort((a, b) => a - b);\n    return uniqueElements;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"},{"task_id":"HumanEval_35","nl":"npi_Deva","pl":"js","prompt":"\/म्याक्सम एलिमेन्टमा एरे फर्काउनुहोस्।\/\/ >>> max_element([1, 2, 3])\n\/\/ 3\n\/\/ >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\/\/ 123\nfunction max_element(l){\n","canonical_solution":"function max_element(l) {\n    if (l.length === 0) return undefined; \/\/ Return undefined if the array is empty\n    return Math.max(...l);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"},{"task_id":"HumanEval_36","nl":"npi_Deva","pl":"js","prompt":"\/११ वा १३ ले भाग हुने n भन्दा कम पूर्णांकमा अंक ७ को संख्या फिर्ता गर्नुहोस्।\/\/ >>> fizz_buzz(50)\n\/\/ 0\n\/\/ >>> fizz_buzz(78)\n\/\/ 2\n\/\/ >>> fizz_buzz(79)\n\/\/ 3\nfunction fizz_buzz(n){\n","canonical_solution":"function fizz_buzz(n) {\n    let count = 0;\n    \n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let numStr = i.toString();\n            for (let char of numStr) {\n                if (char === '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"},{"task_id":"HumanEval_37","nl":"npi_Deva","pl":"js","prompt":"\/ l को सम सूचकांकको मानमा, तर क्रमबद्ध। \/ l' l सँग समान छ, जबकि यसको मानहरू पनि सूचकांकमा बराबर छन्।\/यो फंक्शनले एउटा एर्रे लिन्छ l र एउटा एर्रे फर्काउँछ l' यस्तो कि \/\/ >>> sort_even([1, 2, 3])\n\/\/ [1, 2, 3]\n\/\/ >>> sort_even([5, 6, 3, 4])\n\/\/ [3, 6, 5, 4]\nfunction sort_even(l){\n","canonical_solution":"function sort_even(l) {\n    \/\/ Extract the elements at even indices\n    let evenElements = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenElements.push(l[i]);\n    }\n\n    \/\/ Sort the even elements\n    evenElements.sort((a, b) => a - b);\n\n    \/\/ Reconstruct the array with sorted even indices\n    let result = [];\n    let evenIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result.push(evenElements[evenIndex]);\n            evenIndex++;\n        } else {\n            result.push(l[i]);\n        }\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();"},{"task_id":"HumanEval_39","nl":"npi_Deva","pl":"js","prompt":"\/prime_fib फर्काउँछ n-th नम्बर जो एक फाइबोनैचि नम्बर हो र यो पनि प्राइम हो। \/\/ >>> prime_fib(1)\n\/\/ 2\n\/\/ >>> prime_fib(2)\n\/\/ 3\n\/\/ >>> prime_fib(3)\n\/\/ 5\n\/\/ >>> prime_fib(4)\n\/\/ 13\n\/\/ >>> prime_fib(5)\n\/\/ 89\nfunction prime_fib(n){\n","canonical_solution":"function prime_fib(n) {\n    function isPrime(num) {\n        if (num < 2) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n    \n    function fibonacci() {\n        let a = 0, b = 1;\n        return function() {\n            const next = a + b;\n            a = b;\n            b = next;\n            return a;\n        };\n    }\n\n    const fib = fibonacci();\n    let count = 0;\n    let primeFibNum;\n\n    while (count < n) {\n        const fibNum = fib();\n        if (isPrime(fibNum)) {\n            count++;\n            primeFibNum = fibNum;\n        }\n    }\n\n    return primeFibNum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"},{"task_id":"HumanEval_40","nl":"npi_Deva","pl":"js","prompt":"\/ शून्यमा योग, र अन्यथा गलत। \/ यो सत्य फर्काउँछ यदि त्यहाँ एर्रेमा तीन भिन्न तत्वहरू छन् जुन \/triples_sum_to_zero ले पूर्णांकहरूको एरेलाई इनपुटको रूपमा लिन्छ।\/\/ >>> triples_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([1, 3, -2, 1])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\/\/ true\n\/\/ >>> triples_sum_to_zero([1])\n\/\/ false\nfunction triples_sum_to_zero(l){\n","canonical_solution":"function triples_sum_to_zero(l) {\n    \/\/ Sort the array first\n    l.sort((a, b) => a - b);\n    \/\/ Iterate through each element in the array\n    for (let i = 0; i < l.length - 2; i++) {\n        \/\/ Use two pointers to find the other two elements\n        let left = i + 1;\n        let right = l.length - 1;\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();"},{"task_id":"HumanEval_41","nl":"npi_Deva","pl":"js","prompt":"\/ यो प्रकार्यले यस्ता टक्करहरूको संख्या आउटपुट गर्दछ। \/ तिनीहरूको यात्रामा मानौं तिनीहरू टकराएनन्।\/ तर, गाडीहरू असीम रूपमा बलियो र बलियो छन्; फलस्वरूप, तिनीहरू निरन्तर गतिमा छन् \/ जब बायाँबाट दायाँ हिँडिरहेको एउटा गाडीले दायाँबाट बायाँ हिँडिरहेको एउटा कारलाई ठक्कर दिन्छ।सबै कारहरु एकै गतिमा चल्छन्, दुई कारहरु आपसमा ठोक्किन्छन् भनिन्छ ।\/ दायाँबाट बायाँतर्फ दौडिरहेका छन्. कारहरूको दुई सेट धेरै टाढाबाट सुरु हुन्छ n कारहरू बायाँदेखि दायाँतिर दौडिरहेका छन्; एकै समयमा, n कारहरूको भिन्न सेट \/ एउटा सडक कल्पना गर्नुहोस् जुन एकदमै सीधा अनन्त लामो रेखा हो।function car_race_collision(n){\n","canonical_solution":"function car_race_collision(n) {\n    \/\/ Each car moving left to right will collide with each car moving right to left exactly once.\n    \/\/ Therefore, the number of collisions is n * n.\n    return n * n;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();"},{"task_id":"HumanEval_42","nl":"npi_Deva","pl":"js","prompt":"\/१ ले वृद्धि गरिएको तत्वहरूको साथ एरे फिर्ता गर्नुहोस्। \/\/ >>> incr_list([1, 2, 3])\n\/\/ [2, 3, 4]\n\/\/ >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\/\/ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n","canonical_solution":"function incr_list(l) {\n    return l.map(element => element + 1);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"},{"task_id":"HumanEval_43","nl":"npi_Deva","pl":"js","prompt":"\/ शून्यमा योग, र अन्यथा गलत। \/ यो सत्य फर्काउँछ यदि त्यहाँ एर्रेमा दुई भिन्न तत्वहरू छन् जुन \/pairs_sum_to_zero ले पूर्णांकहरूको एरेलाई इनपुटको रूपमा लिन्छ।\/\/ >>> pairs_sum_to_zero([1, 3, 5, 0])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 3, -2, 1])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([1, 2, 3, 7])\n\/\/ false\n\/\/ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\/\/ true\n\/\/ >>> pairs_sum_to_zero([1])\n\/\/ false\nfunction pairs_sum_to_zero(l){\n","canonical_solution":"function pairs_sum_to_zero(l) {\n    const seen = new Set();\n    \n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    \n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();"},{"task_id":"HumanEval_44","nl":"npi_Deva","pl":"js","prompt":"\/ आधार संख्या १० भन्दा कम छ। \/ रूपान्तरण पछि स्ट्रिंग प्रतिनिधित्व फिर्ता गर्नुहोस्।\/इनपुट नम्बर x को संख्यात्मक आधार आधारमा परिवर्तन गर्नुहोस्।\/\/ >>> change_base(8, 3)\n\/\/ \"22\"\n\/\/ >>> change_base(8, 2)\n\/\/ \"1000\"\n\/\/ >>> change_base(7, 2)\n\/\/ \"111\"\nfunction change_base(x, base){\n","canonical_solution":"function change_base(x, base) {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9.\");\n    }\n\n    if (x === 0) {\n        return \"0\";\n    }\n\n    let result = '';\n    while (x > 0) {\n        result = (x % base) + result;\n        x = Math.floor(x \/ base);\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"},{"task_id":"HumanEval_45","nl":"npi_Deva","pl":"js","prompt":"\/एक त्रिभुजको लागि एक पक्षको लम्बाई र उच्च रिटर्न क्षेत्र दिइएको छ।\/\/ >>> triangle_area(5, 3)\n\/\/ 7.5\nfunction triangle_area(a, h){\n","canonical_solution":"function triangle_area(a, h) {\n    return 0.5 * a * h;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();"},{"task_id":"HumanEval_46","nl":"npi_Deva","pl":"js","prompt":"\/ कृपया fib4 संख्या अनुक्रमको n-औं तत्वको कुशलतापूर्वक गणना गर्न एउटा प्रकार्य लेख्नुहोस्। पुनरावृत्ति प्रयोग नगर्नुहोस्। \/ fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) ।\/ fib4(3) -> 0 \/ fib4(2) -> 2 \/ fib4(1) -> 0 \/ fib4(0) -> 0 \/Fib4 नम्बर अनुक्रम निम्नानुसार परिभाषित गरिएको Fibbonacci अनुक्रम जस्तै एक अनुक्रम हो: \/\/ >>> fib4(5)\n\/\/ 4\n\/\/ >>> fib4(6)\n\/\/ 8\n\/\/ >>> fib4(7)\n\/\/ 14\nfunction fib4(n){\n","canonical_solution":"function fib4(n) {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n    \n    let fibs = [0, 0, 2, 0];\n    \n    for (let i = 4; i <= n; i++) {\n        let nextFib = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n        fibs.shift(); \/\/ Remove the first element\n        fibs.push(nextFib); \/\/ Add the new element to the end\n    }\n    \n    return fibs[3];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();"},{"task_id":"HumanEval_47","nl":"npi_Deva","pl":"js","prompt":"\/ एरेमा तत्वहरूको मध्यमा फिर्ता गर्नुहोस् l. \/\/ >>> median([3, 1, 2, 4, 5])\n\/\/ 3\n\/\/ >>> median([-10, 4, 6, 1000, 10, 20])\n\/\/ 15.0\nfunction median(l){\n","canonical_solution":"function median(l) {\n    \/\/ First, sort the array\n    l.sort((a, b) => a - b);\n\n    \/\/ Calculate the middle index\n    const mid = Math.floor(l.length \/ 2);\n\n    \/\/ If array length is odd, return the middle element\n    if (l.length % 2 !== 0) {\n        return l[mid];\n    }\n    \/\/ If array length is even, return the average of the two middle elements\n    else {\n        return (l[mid - 1] + l[mid]) \/ 2;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"},{"task_id":"HumanEval_48","nl":"npi_Deva","pl":"js","prompt":"\/दिइएको स्ट्रिङ पालिन्ड्रोम हो कि होइन जाँच गर्छ \/\/ >>> is_palindrome(\"\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aba\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aaaaa\")\n\/\/ true\n\/\/ >>> is_palindrome(\"zbcd\")\n\/\/ false\nfunction is_palindrome(text){\n","canonical_solution":"function is_palindrome(text){\n    \/\/ Remove non-alphanumeric characters and convert to lower case\n    const cleanedText = text.replace(\/[^a-zA-Z0-9]\/g, '').toLowerCase();\n    \/\/ Reverse the cleaned text\n    const reversedText = cleanedText.split('').reverse().join('');\n    \/\/ Check if the cleaned text is equal to its reverse\n    return cleanedText === reversedText;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_49","nl":"npi_Deva","pl":"js","prompt":"\/२^n मोडुलो p फर्काउनुहोस् (संख्याको बारेमा सचेत हुनुहोस्) ।\/\/ >>> modp(3, 5)\n\/\/ 3\n\/\/ >>> modp(1101, 101)\n\/\/ 2\n\/\/ >>> modp(0, 101)\n\/\/ 1\n\/\/ >>> modp(3, 11)\n\/\/ 8\n\/\/ >>> modp(100, 101)\n\/\/ 1\nfunction modp(n, p){\n","canonical_solution":"function modp(n, p) {\n    if (p === 1) return 0; \/\/ Base case when p is 1\n\n    \/\/ Initialize result\n    let result = 1;\n    let base = 2;\n\n    while (n > 0) {\n        \/\/ If n is odd, multiply base with result\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n\n        \/\/ n must be even now\n        n = Math.floor(n \/ 2);\n        base = (base * base) % p; \n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"},{"task_id":"HumanEval_51","nl":"npi_Deva","pl":"js","prompt":"\/remove_vowels एक प्रकार्य हो जसले स्ट्रिंग लिन्छ र स्वर बिना स्ट्रिंग फर्काउँछ।\/\/ >>> remove_vowels(\"\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"abcdef\")\n\/\/ \"bcdf\"\n\/\/ >>> remove_vowels(\"aaaaa\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"aaBAA\")\n\/\/ \"B\"\n\/\/ >>> remove_vowels(\"zbcd\")\n\/\/ \"zbcd\"\nfunction remove_vowels(text){\n","canonical_solution":"function remove_vowels(text) {\n    return text.replace(\/[aeiouAEIOU]\/g, '');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"abcdef\nghijklm\"),\"bcdf\nghjklm\");\n  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();"},{"task_id":"HumanEval_52","nl":"npi_Deva","pl":"js","prompt":"\/ यदि array l मा सबै संख्याहरू थ्रेसहोल्ड t भन्दा कम छन् भने सही फिर्ता गर्नुहोस्।\/\/ >>> below_threshold([1, 2, 4, 10], 100)\n\/\/ true\n\/\/ >>> below_threshold([1, 20, 4, 10], 5)\n\/\/ false\nfunction below_threshold(l, t){\n","canonical_solution":"function below_threshold(l, t) {\n    return l.every(num => num < t);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_53","nl":"npi_Deva","pl":"js","prompt":"\/दुई संख्या x र y जोड्नुहोस् \/\/ >>> add(2, 3)\n\/\/ 5\n\/\/ >>> add(5, 7)\n\/\/ 12\nfunction add(x, y){\n","canonical_solution":"function add(x, y) {\n    return x + y;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();"},{"task_id":"HumanEval_54","nl":"npi_Deva","pl":"js","prompt":"\/के दुई शब्दमा समान अक्षर छन् कि छैनन् जाँच गर्नुहोस्।\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"abcd\", \"dddddddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"dddddddabc\", \"abcd\")\n\/\/ true\n\/\/ >>> same_chars(\"eabcd\", \"dddddddabc\")\n\/\/ false\n\/\/ >>> same_chars(\"abcd\", \"dddddddabce\")\n\/\/ false\n\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n\/\/ false\nfunction same_chars(s0, s1){\n","canonical_solution":"function same_chars(s0, s1) {\n    const charSet0 = new Set(s0);\n    const charSet1 = new Set(s1);\n\n    if (charSet0.size !== charSet1.size) return false;\n\n    for (let char of charSet0) {\n        if (!charSet1.has(char)) return false;\n    }\n\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_55","nl":"npi_Deva","pl":"js","prompt":"\/n-th फिबोनैचि संख्या फिर्ता गर्नुहोस्।\/\/ >>> fib(10)\n\/\/ 55\n\/\/ >>> fib(1)\n\/\/ 1\n\/\/ >>> fib(8)\n\/\/ 21\nfunction fib(n){\n","canonical_solution":"function fib(n) {\n    if (n <= 1) return n;\n    let a = 0, b = 1, result = 1;\n    for (let i = 2; i <= n; i++) {\n        result = a + b;\n        a = b;\n        b = result;\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();"},{"task_id":"HumanEval_56","nl":"npi_Deva","pl":"js","prompt":"\/ यदि प्रत्येक खोल्ने कोष्ठकमा एक सम्बन्धित बन्द कोष्ठक छ भने सही फिर्ता गर्नुहोस्। \/brackets \"<\" र \">\" को स्ट्रिङ हो।\/\/ >>> correct_bracketing(\"<\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"<>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"<<><>>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"><<>\")\n\/\/ false\nfunction correct_bracketing(brackets){\n","canonical_solution":"function correct_bracketing(brackets) {\n    let balance = 0;\n    for (let char of brackets) {\n        if (char === '<') {\n            balance += 1;\n        } else if (char === '>') {\n            balance -= 1;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance === 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_57","nl":"npi_Deva","pl":"js","prompt":"\/सत्य फर्काउनुहोस् यदि एरे तत्वहरू एकतरफा रूपमा बढ्दै वा घट्दै छन्।\/\/ >>> monotonic([1, 2, 4, 20])\n\/\/ true\n\/\/ >>> monotonic([1, 20, 4, 10])\n\/\/ false\n\/\/ >>> monotonic([4, 1, 0, -10])\n\/\/ true\nfunction monotonic(l){\n","canonical_solution":"function monotonic(l) {\n    if (l.length <= 1) return true;\n    let isIncreasing = true;\n    let isDecreasing = true;\n    \n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            isDecreasing = false;\n        } else if (l[i] < l[i - 1]) {\n            isIncreasing = false;\n        }\n        \n        if (!isIncreasing && !isDecreasing) return false;\n    }\n    \n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"},{"task_id":"HumanEval_58","nl":"npi_Deva","pl":"js","prompt":"\/दुई एरेहरूको लागि क्रमबद्ध अद्वितीय साझा तत्वहरू फर्काउनुहोस्।\/\/ >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\/\/ [1, 5, 653]\n\/\/ >>> common([5, 3, 2, 8], [3, 2])\n\/\/ [2, 3]\nfunction common(l1, l2){\n","canonical_solution":"function common(l1, l2) {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    const result = [...set1].filter(item => set2.has(item));\n    return result.sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_59","nl":"npi_Deva","pl":"js","prompt":"\/n को सबैभन्दा ठूलो प्राइम कारक फर्काउनुहोस्. मानौं n > 1 र प्राइम होइन। \/\/ >>> largest_prime_factor(13195)\n\/\/ 29\n\/\/ >>> largest_prime_factor(2048)\n\/\/ 2\nfunction largest_prime_factor(n){\n","canonical_solution":"function largest_prime_factor(n) {\n  let largest = -1;\n  while (n % 2 === 0) {\n    largest = 2;\n    n \/= 2;\n  }\n  \n  for (let factor = 3; factor * factor <= n; factor += 2) {\n    while (n % factor === 0) {\n      largest = factor;\n      n \/= factor;\n    }\n  }\n  \n  if (n > 2) {\n    largest = n;\n  }\n  \n  return largest;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"},{"task_id":"HumanEval_60","nl":"npi_Deva","pl":"js","prompt":"\/sum_to_n एक प्रकार्य हो जसले १ देखि n सम्मका संख्याहरूको योगफल दिन्छ।\/\/ >>> sum_to_n(30)\n\/\/ 465\n\/\/ >>> sum_to_n(100)\n\/\/ 5050\n\/\/ >>> sum_to_n(5)\n\/\/ 15\n\/\/ >>> sum_to_n(10)\n\/\/ 55\n\/\/ >>> sum_to_n(1)\n\/\/ 1\nfunction sum_to_n(n){\n","canonical_solution":"function sum_to_n(n) {\n    return n * (n + 1) \/ 2;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();"},{"task_id":"HumanEval_61","nl":"npi_Deva","pl":"js","prompt":"\/ यदि प्रत्येक खोल्ने कोष्ठकमा एक सम्बन्धित बन्द कोष्ठक छ भने सही फिर्ता गर्नुहोस्। \/brackets \"(\" र \"\") को स्ट्रिङ हो।\/\/ >>> correct_bracketing(\"(\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"()\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"(()())\")\n\/\/ true\n\/\/ >>> correct_bracketing(\")(()\")\n\/\/ false\nfunction correct_bracketing(brackets){\n","canonical_solution":"function correct_bracketing(brackets) {\n    let balance = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            balance++;\n        } else if (brackets[i] === ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance === 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_62","nl":"npi_Deva","pl":"js","prompt":"\/ यो बहुपदको व्युत्पन्नलाई उही रूपमा फर्काउनुहोस्। \/ xs[0] + xs[1] * x + xs[2] * x^2 + .... \/xs बहुपदको गुणांक हो।\/\/ >>> derivative([3, 1, 2, 4, 5])\n\/\/ [1, 4, 12, 20]\n\/\/ >>> derivative([1, 2, 3])\n\/\/ [2, 6]\nfunction derivative(xs){\n","canonical_solution":"function derivative(xs) {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_63","nl":"npi_Deva","pl":"js","prompt":"\/ कृपया फबफब नम्बर अनुक्रमको n-औं तत्वको कुशलतापूर्वक गणना गर्न एउटा प्रकार्य लेख्नुहोस्।\/ fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ।\/ fib fib ((२) == १ \/ fib fib ((1) == 0 \/ fib fib ((0) == 0 \/फिबफिब नम्बर अनुक्रम फिबोनैकी अनुक्रम जस्तै अनुक्रम हो जुन निम्नानुसार परिभाषित गरिएको छः \/\/ >>> fibfib(1)\n\/\/ 0\n\/\/ >>> fibfib(5)\n\/\/ 4\n\/\/ >>> fibfib(8)\n\/\/ 24\nfunction fibfib(n){\n","canonical_solution":"function fibfib(n) {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 1;\n    \n    let a = 0, b = 0, c = 1, d;\n\n    for (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    \n    return c;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();"},{"task_id":"HumanEval_64","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ स्वर, तर जब यो दिइएको शब्दको अन्त्यमा हुन्छ।यहाँ स्वरहरू 'अ', 'ई', 'आई', 'ओ', 'यू' हुन्। यहाँ 'य' पनि 'ए' हो।\/ शब्द इनपुटको रूपमा र स्ट्रिंगमा स्वरहरूको संख्या फर्काउँछ। \/एक प्रकार्य vowels_count लेख्नुहोस् जसले  प्रतिनिधित्व गर्ने स्ट्रिङ लिन्छ\/\/ >>> vowels_count(\"abcde\")\n\/\/ 2\n\/\/ >>> vowels_count(\"ACEDY\")\n\/\/ 3\nfunction vowels_count(s){\n","canonical_solution":"function vowels_count(s) {\n    const vowels = 'aeiou';\n    let count = 0;\n    s = s.toLowerCase();\n    \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i]) || (i === s.length - 1 && s[i] === 'y')) {\n            count++;\n        }\n    }\n\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();"},{"task_id":"HumanEval_65","nl":"npi_Deva","pl":"js","prompt":"\/ यदि शिफ्ट > अंकहरूको संख्या हो भने, उल्टो अंकहरू फर्काउनुहोस्।\/ र परिणामलाई स्ट्रिङको रूपमा फर्काउँछ. \/सर्कुलरले पूर्णांक x को अंकहरू सार्छ, अंकहरूलाई दायाँतिर सार्दै जान्छ \/\/ >>> circular_shift(12, 1)\n\/\/ \"21\"\n\/\/ >>> circular_shift(12, 2)\n\/\/ \"12\"\nfunction circular_shift(x, shift){\n","canonical_solution":"function circular_shift(x, shift) {\n    let numStr = x.toString();\n    let length = numStr.length;\n\n    if (shift > length) {\n        return numStr.split('').reverse().join('');\n    } else {\n        let endPart = numStr.slice(-shift);\n        let startPart = numStr.slice(0, length - shift);\n        return endPart + startPart;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"},{"task_id":"HumanEval_66","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ एएससीआईआई कोडहरू।\/ एउटा यस्तो प्रकार्य लेख्नुहोस् जसले इनपुटको रूपमा स्ट्रिङ लिन्छ र माथिल्लो अक्षरहरूको योग मात्र फर्काउँछ' \/कार्य \/\/ >>> digitSum(\"\")\n\/\/ 0\n\/\/ >>> digitSum(\"abAB\")\n\/\/ 131\n\/\/ >>> digitSum(\"abcCd\")\n\/\/ 67\n\/\/ >>> digitSum(\"helloE\")\n\/\/ 69\n\/\/ >>> digitSum(\"woArBld\")\n\/\/ 131\n\/\/ >>> digitSum(\"aAaaaXa\")\n\/\/ 153\nfunction digitSum(s){\n","canonical_solution":"function digitSum(s) {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'A' && char <= 'Z') {\n            sum += char.charCodeAt(0);\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();"},{"task_id":"HumanEval_67","nl":"npi_Deva","pl":"js","prompt":"\/ examble को लागि: \/ टोकरीमा टोकरीमा आमो फलहरूको संख्या फिर्ता गर्नुहोस्। \/ सुन्तला र स्याउ र फलहरूको कुल संख्या प्रतिनिधित्व गर्ने पूर्णांक \/ स्याउ, सुन्तला, र आमको फल दिइएको string जसले  को कुल संख्या दर्शाउँछ\/ जुन फलफूलको टोकरीमा वितरण गरिन्छ यो टोकरीमा समावेश छ यस कार्यमा, तपाईंलाई एउटा स्ट्रिङ दिइनेछ जसले स्याउ र सुन्तलाको संख्यालाई प्रतिनिधित्व गर्छ ।\/\/ >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n\/\/ 8\n\/\/ >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n\/\/ 2\n\/\/ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n\/\/ 95\n\/\/ >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\/\/ 19\nfunction fruit_distribution(s, n){\n","canonical_solution":"function fruit_distribution(s, n) {\n    let apples = 0;\n    let oranges = 0;\n    \n    \/\/ Regular expressions to extract the number of apples and oranges from the string\n    const applesMatch = s.match(\/(\\d+)\\s*apples\/);\n    const orangesMatch = s.match(\/(\\d+)\\s*oranges\/);\n    \n    \/\/ If a match is found, parse the number\n    if (applesMatch) {\n        apples = parseInt(applesMatch[1], 10);\n    }\n    if (orangesMatch) {\n        oranges = parseInt(orangesMatch[1], 10);\n    }\n    \n    \/\/ Calculate the number of mangoes\n    const mangoes = n - (apples + oranges);\n    return mangoes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n}\n\ntest();"},{"task_id":"HumanEval_68","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण १: \/ यदि त्यहाँ कुनै पनि मानहरू छैनन् वा दिइएको एर्रे खाली छ भने, फिर्ती गर्नुहोस् []. \/ चुँडाइएको नोड एउटा एरेमा फर्काउनुपर्छ, [ smalest_value, यसको अनुक्रमणिका ], \/ यदि एउटै सानोतिनो सम मान भएका धेरै नोडहरू भेटिए भने सबैभन्दा सानो इन्डेक्स भएको नोड फर्काउँछ। \/ चुँडाइएका नोडहरू सबैभन्दा सानो सम मान भएको नोड हुनुपर्छ।\/ तपाईंको कार्य नोडहरू मध्ये एक छान्नु र यसलाई फिर्ता गर्नु हो।\/\"एक वृक्षको शाखाको प्रतिनिधित्व गर्ने एउटा सरणी दिइएको छ जसको गैर-नकारात्मक पूर्णांक नोडहरू छन् \/\/ >>> pluck([4, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 2:\n\/\/ >>> pluck([1, 2, 3])\n\/\/ [2, 1]\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 3:\n\/\/ >>> pluck([])\n\/\/ []\n\/\/ Example 4:\n\/\/ >>> pluck([5, 0, 3, 0, 4, 2])\n\/\/ [0, 1]\n\/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n\/\/ so we will choose the first zero, which has the smallest index.\n\/\/ Constraints:\n\/\/ * 1 <= nodes.length <= 10000\n\/\/ * 0 <= node.value\nfunction pluck(arr){\n","canonical_solution":"function pluck(arr) {\n    let smallestEvenValue = Infinity;\n    let smallestEvenIndex = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (arr[i] < smallestEvenValue) {\n                smallestEvenValue = arr[i];\n                smallestEvenIndex = i;\n            }\n        }\n    }\n\n    return smallestEvenIndex === -1 ? [] : [smallestEvenValue, smallestEvenIndex];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"},{"task_id":"HumanEval_69","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ यदि त्यस्तो मान अवस्थित छैन भने, -१ फर्काउनुहोस्।\/ पूर्णांकको आवृत्ति भनेको यो संख्या हो जुन एरेमा देखा पर्दछ।\/ शून्य, र यसको आवृत्ति पूर्णांकको मान भन्दा ठूलो वा बराबर छ।\/तपाईलाई धनात्मक पूर्णांकहरूको एक गैर-खाली सरणी दिइएको छ। सबैभन्दा ठूलो पूर्णांक फिर्ता गर्नुहोस् जुन  भन्दा ठूलो छ।\/\/ >>> search([4, 1, 2, 2, 3, 1])\n\/\/ 2\n\/\/ >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\/\/ 3\n\/\/ >>> search([5, 5, 4, 4, 4])\n\/\/ -1\nfunction search(lst){\n","canonical_solution":"function search(lst) {\n    const frequencyMap = new Map();\n\n    lst.forEach(num => {\n        frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);\n    });\n\n    let result = -1;\n\n    frequencyMap.forEach((count, num) => {\n        if (count >= num && num > 0 && num > result) {\n            result = num;\n        }\n    });\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_70","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ त्यसपछि बाँकी पूर्णांकहरूको अधिकतम, त्यसपछि न्यूनतम र यस्तै। \/ अनौठो क्रमबद्ध, जब तपाईं न्यूनतम मान संग शुरू हुन्छ, \/पूर्णांकहरूको दिइएको एरे, अनौठो क्रममा एरे फर्काउनुहोस्।\/\/ >>> strange_sort_list([1, 2, 3, 4])\n\/\/ [1, 4, 2, 3]\n\/\/ >>> strange_sort_list([5, 5, 5, 5])\n\/\/ [5, 5, 5, 5]\n\/\/ >>> strange_sort_list([])\n\/\/ []\nfunction strange_sort_list(lst){\n","canonical_solution":"function strange_sort_list(lst) {\n    let result = [];\n    lst.sort((a, b) => a - b); \/\/ Sort the array in ascending order\n\n    while (lst.length) {\n        result.push(lst.shift()); \/\/ Add the minimum element\n        if (lst.length) {\n            result.push(lst.pop()); \/\/ Add the maximum element\n        }\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"},{"task_id":"HumanEval_71","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ तेस्रो पक्ष भन्दा। \/ तीन पक्षले वैध त्रिकोण बनाउँछ जब कुनै दुई पक्षको योग ठूलो हुन्छ \/ अन्यथा फिर्ता -1 \/ त्रिकोणलाई २ दशमलव बिन्दुमा गोल गरियो यदि तीन पक्षहरूले एक मान्य त्रिकोण बनाउँदछन् भने।\/एक त्रिकोणको तीन पक्षको लम्बाई दिइएको छ। को क्षेत्रफल फर्काउनुहोस्\/\/ >>> triangle_area(3, 4, 5)\n\/\/ 6.0\n\/\/ >>> triangle_area(1, 2, 10)\n\/\/ -1\nfunction triangle_area(a, b, c){\n","canonical_solution":"function triangle_area(a, b, c) {\n    \/\/ Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        \/\/ Use Heron's formula to calculate the area\n        const s = (a + b + c) \/ 2;\n        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \/\/ Return the area rounded to 2 decimal places\n        return Math.round(area * 100) \/ 100;\n    } else {\n        \/\/ Return -1 for an invalid triangle\n        return -1;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();"},{"task_id":"HumanEval_72","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ वस्तु q उड्छ यदि यो सन्तुलित छ (यो एक palindromic सरणी हो) र यसको तत्वहरूको योग अधिकतम सम्भावित वजन w भन्दा कम वा बराबर छ। \/एक प्रकार्य लेख्नुहोस् जुन वस्तु q उड्छ भने सत्य फर्काउँछ, र अन्यथा गलत। \/\/ >>> will_it_fly([1, 2], 5)\n\/\/ false\n\/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\/\/ >>> will_it_fly([3, 2, 3], 1)\n\/\/ false\n\/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\/\/ >>> will_it_fly([3, 2, 3], 9)\n\/\/ true\n\/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\/\/ >>> will_it_fly([3], 5)\n\/\/ true\n\/\/ # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n","canonical_solution":"function will_it_fly(q, w) {\n    \/\/ Check if q is a palindromic array\n    function isPalindromic(arr) {\n        for (let i = 0; i < Math.floor(arr.length \/ 2); i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \/\/ Calculate the sum of the array\n    function sumArray(arr) {\n        return arr.reduce((acc, val) => acc + val, 0);\n    }\n\n    \/\/ Check if the array is balanced and the sum is within the limit\n    return isPalindromic(q) && sumArray(q) <= w;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"},{"task_id":"HumanEval_73","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ पछाडि र अगाडि समान पढिन्छ। एक परिवर्तनमा, तपाईं एक तत्वलाई कुनै पनि अन्य तत्वमा परिवर्तन गर्न सक्नुहुनेछ। \/ एरेलाई पालिन्ड्रोमिक बनाउन परिवर्तन गर्नु आवश्यक छ। पालिन्ड्रोमिक एरे भनेको एरे हो जुन \/ पूर्णांकको एर एर दिइएको छ, तत्वहरूको न्यूनतम संख्या फेला पार्नुहोस् जुन \/\/ >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\/\/ 4\n\/\/ >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n\/\/ 1\n\/\/ >>> smallest_change([1, 2, 3, 2, 1])\n\/\/ 0\nfunction smallest_change(arr){\n","canonical_solution":"function smallest_change(arr) {\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_74","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ यदि दुई एर्रेमा समान संख्यामा वर्णहरू छन् भने, पहिलो एर्रे फर्काउनुहोस्।\/ अन्य एरे भन्दा एरेको सबै स्ट्रिंगमा क्यारहरूको कुल संख्या कम छ। \/ एउटा प्रकार्य लेख्नुहोस् जसले दुईवटा स्ट्रिङको एरे स्वीकार गर्दछ र एरे फर्काउँछ जुनसँग \/\/ >>> total_match([], [])\n\/\/ []\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\/\/ [\"hI\", \"Hi\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n\/\/ [\"hi\", \"admin\"]\n\/\/ >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\/\/ [\"hI\", \"hi\", \"hi\"]\n\/\/ >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n\/\/ [\"4\"]\nfunction total_match(lst1, lst2){\n","canonical_solution":"function total_match(lst1, lst2) {\n    \/\/ Helper function to calculate total characters in an array of strings\n    const totalChars = (arr) => arr.reduce((sum, str) => sum + str.length, 0);\n\n    const total1 = totalChars(lst1);\n    const total2 = totalChars(lst2);\n\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"},{"task_id":"HumanEval_75","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ (a) १०० भन्दा कम छ भन्ने कुरा थाहा पाउँदा \/ र अन्यथा गलत। \/एक प्रकार्य लेख्नुहोस् जुन दिइएको संख्या ३ अभाज्य संख्याहरूको गुणन हो भने सत्य फर्काउँछ \/\/ >>> is_multiply_prime(30)\n\/\/ true\n\/\/ 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n","canonical_solution":"function is_prime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction generate_primes(upper_limit) {\n    const primes = [];\n    for (let num = 2; num < upper_limit; num++) {\n        if (is_prime(num)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n\nfunction is_multiply_prime(a) {\n    if (a < 2) return false;\n    const primes = generate_primes(100);\n    const primesLength = primes.length;\n\n    for (let i = 0; i < primesLength; i++) {\n        for (let j = i; j < primesLength; j++) {\n            for (let k = j; k < primesLength; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"},{"task_id":"HumanEval_76","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ x n को साधारण शक्ति हो यदि n**int=x \/ n को शक्ति र अन्य अवस्थामा गलत। \/तपाईँको कार्य भनेको एउटा फंक्शन लेख्नु हो जुन यदि कुनै नम्बर x एउटा साधारण \/\/ >>> is_simple_power(1, 4)\n\/\/ true\n\/\/ >>> is_simple_power(2, 2)\n\/\/ true\n\/\/ >>> is_simple_power(8, 2)\n\/\/ true\n\/\/ >>> is_simple_power(3, 2)\n\/\/ false\n\/\/ >>> is_simple_power(3, 1)\n\/\/ false\n\/\/ >>> is_simple_power(5, 3)\n\/\/ false\nfunction is_simple_power(x, n){\n","canonical_solution":"function is_simple_power(x, n) {\n    if (x === 1) return true;  \/\/ Any number to the power of zero is 1\n    if (n <= 1) return false;  \/\/ n must be greater than 1 to have simple powers other than itself\n\n    let power = n;\n    while (power < x) {\n        power *= n;\n    }\n\n    return power === x;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"},{"task_id":"HumanEval_77","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ नोट: तपाईँले इनपुट सधैँ मान्य छ भन्ने मान्न सक्नुहुन्छ।\/ यदि यो इन्जेगर कुनै पूर्णांकको घन हो भने।\/एक प्रकार्य लेख्नुहोस् जसले पूर्णांक a लिन्छ र true फर्काउँछ \/\/ >>> iscube(1)\n\/\/ true\n\/\/ >>> iscube(2)\n\/\/ false\n\/\/ >>> iscube(-1)\n\/\/ true\n\/\/ >>> iscube(64)\n\/\/ true\n\/\/ >>> iscube(0)\n\/\/ true\n\/\/ >>> iscube(180)\n\/\/ false\nfunction iscube(a){\n","canonical_solution":"function iscube(a) {\n    if (a < 0) a = -a;\n    let cubeRoot = Math.round(Math.pow(a, 1\/3));\n    return cubeRoot * cubeRoot * cubeRoot === a;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"},{"task_id":"HumanEval_78","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ र प्रतीकहरू ए, बी, सी, डी, ई, एफ सधैं ठूला अक्षरहरूमा हुन्छन्। \/ नोट: तपाईँले इनपुट सधैँ सही वा खाली स्ट्रिङ मान्न सक्नुहुन्छ, \/ बी (= दशमलव ११), डी (= दशमलव १३) ।\/ त्यसैले तपाईँले निम्न अंकहरूको संख्या निर्धारण गर्नुपर्दछ: 2, 3, 5, 7, \/ अभाज्य संख्याहरू २, ३, ५, ७, ११, १३, १७,... हुन्।\/ हेक्जाडेसिमल अंकहरू ०, १, २, ३, ४, ५, ६, ७, ८, ९, ए, बी, सी, डी, ई, एफ हुन्।\/ १ भन्दा ठूलो जुन दुई सानो प्राकृतिक संख्याको गुणनफल होइन) ।\/ अभाज्य संख्याहरू (अभाज्य संख्या, वा अभाज्य, एक प्राकृतिक संख्या हो)\/ हेक्साडेसिमल नम्बरलाई स्ट्रिङको रूपमा प्रयोग गर्दछ र हेक्साडेसिमलको संख्या गणना गर्दछ ।\/तपाईँलाई एउटा यस्तो फंक्शन लेख्ने काम दिइएको छ जसले प्राप्त गर्दछ \/\/ >>> hex_key(\"AB\")\n\/\/ 1\n\/\/ >>> hex_key(\"1077E\")\n\/\/ 2\n\/\/ >>> hex_key(\"ABED1A33\")\n\/\/ 4\n\/\/ >>> hex_key(\"123456789ABCDEF0\")\n\/\/ 6\n\/\/ >>> hex_key(\"2020\")\n\/\/ 2\nfunction hex_key(num){\n","canonical_solution":"function hex_key(num) {\n    \/\/ Define a set of hexadecimal digits that are prime numbers\n    const primeHexDigits = new Set(['2', '3', '5', '7', 'B', 'D']);\n    \n    \/\/ Initialize a count variable to track the number of prime digits\n    let count = 0;\n    \n    \/\/ Iterate over each character in the input string\n    for (let char of num) {\n        \/\/ Check if the character is in the set of prime hexadecimal digits\n        if (primeHexDigits.has(char)) {\n            \/\/ Increment the count if the character is a prime digit\n            count++;\n        }\n    }\n    \n    \/\/ Return the total count of prime hexadecimal digits\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"},{"task_id":"HumanEval_79","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ अतिरिक्त अक्षरहरू ढाँचामा मद्दत गर्नका लागि हो।\/ त्यहाँ स्ट्रिङको सुरुवात र अन्त्यमा अतिरिक्त दुई अक्षर 'db' हुनेछ।\/ नम्बर. स्ट्रिङमा प्रत्येक क्यारेक्टर '०' वा '१' हुनेछ.\/ बाइनरी ढाँचा। प्रकार्यले एउटा स्ट्रिङ फर्काउनु पर्छ, प्रत्येक वर्ण बाइनरी  को प्रतिनिधित्व गर्दछ।\/तपाईलाई दशमलव रूपमा एउटा नम्बर दिइनेछ र तपाईको कार्य यसलाई  मा रूपान्तरण गर्नु हो\/\/ >>> decimal_to_binary(15)\n\/\/ \"db1111db\"\n\/\/ >>> decimal_to_binary(32)\n\/\/ \"db100000db\"\nfunction decimal_to_binary(decimal){\n","canonical_solution":"function decimal_to_binary(decimal) {\n    \/\/ Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n    \/\/ Add 'db' at the beginning and end of the binary string\n    return 'db' + binaryString + 'db';\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"},{"task_id":"HumanEval_80","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ एउटा स्ट्रिङ हप्ज हो यदि यसको लम्बाइ कम्तिमा ३ हो र हरेक ३ लगातार अक्षरहरू भिन्न छन् \/ तपाईंको कार्य भनेको स्ट्रिंग hapjs हो कि होइन भनेर जाँच गर्नु हो।\/तपाईँलाई एउटा स्ट्रिंग दिइएको छ.\/\/ >>> is_happy(\"a\")\n\/\/ false\n\/\/ >>> is_happy(\"aa\")\n\/\/ false\n\/\/ >>> is_happy(\"abcd\")\n\/\/ true\n\/\/ >>> is_happy(\"aabb\")\n\/\/ false\n\/\/ >>> is_happy(\"adb\")\n\/\/ true\n\/\/ >>> is_happy(\"xyy\")\n\/\/ false\nfunction is_happy(s){\n","canonical_solution":"function is_happy(s) {\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_81","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ 0.0 ई \/ > 0.0 D- \/ > 0.7 D \/ > १.० D+ \/ > १.३ C- \/ > १.७ C \/ > २.० C+ \/ > २.३ B- \/ > २.७ B \/ > 3.0 B+ \/ > 3.3 ए- \/ > 3.7 ए \/ ४.० ए+ \/ GPA ∙ पत्र ग्रेड ∙\/ एउटा प्रकार्य जसले निम्न तालिका प्रयोग गरी अक्षर ग्रेडहरूको एरे आउटपुट गर्न सक्छ: \/ उनले तपाईंलाई केही विद्यार्थीहरूको लागि GPA को एक सरणी दिएकी छन् र तपाईंले लेख्नु पर्छ \/ समस्या यो हो कि, उनले ग्रेडिङका लागि प्रयोग गर्ने कोड हराएकी छिन्।\/ विद्यार्थीहरूलाई. शिक्षकले ग्रेडिङका लागि आफ्नै एल्गोरिथ्म बनाउँदै छ। \/यो सेमेस्टरको अन्तिम हप्ता हो र शिक्षकले ग्रेड दिनुपर्छ ।\/\/ >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\/\/ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n","canonical_solution":"function numerical_letter_grade(grades){\n    return grades.map(gpa => {\n        if (gpa === 4.0) return \"A+\";\n        else if (gpa > 3.7) return \"A\";\n        else if (gpa > 3.3) return \"A-\";\n        else if (gpa > 3.0) return \"B+\";\n        else if (gpa > 2.7) return \"B\";\n        else if (gpa > 2.3) return \"B-\";\n        else if (gpa > 2.0) return \"C+\";\n        else if (gpa > 1.7) return \"C\";\n        else if (gpa > 1.3) return \"C-\";\n        else if (gpa > 1.0) return \"D+\";\n        else if (gpa > 0.7) return \"D\";\n        else if (gpa > 0.0) return \"D-\";\n        else return \"E\";\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"},{"task_id":"HumanEval_82","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ लम्बाई एक अभाज्य संख्या हो वा अन्यथा गलत हो \/एक प्रकार्य लेख्नुहोस् जसले एउटा स्ट्रिङ लिन्छ र यदि स्ट्रिङ \/\/ >>> prime_length(\"Hello\")\n\/\/ true\n\/\/ >>> prime_length(\"abcdcba\")\n\/\/ true\n\/\/ >>> prime_length(\"kittens\")\n\/\/ true\n\/\/ >>> prime_length(\"orange\")\n\/\/ false\nfunction prime_length(string){\n","canonical_solution":"function prime_length(string) {\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n    \n    return isPrime(string.length);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_83","nl":"npi_Deva","pl":"js","prompt":"\/ सकारात्मक पूर्णांकहरू जुन १ बाट सुरु वा अन्त्य हुन्छ ।\/ सकारात्मक पूर्णांक n दिइएको छ, n-अंकको संख्याको गणना फिर्ता गर्नुहोस् function starts_one_ends(n){\n","canonical_solution":"function starts_one_ends(n) {\n    if (n === 1) return 1; \/\/ For n = 1, only number is 1 itself\n\n    \/\/ Calculate the number of n-digit numbers that either start or end with 1\n    \/\/ Total n-digit numbers: 9 * 10^(n-1) (ranging from 10^(n-1) to 10^n - 1)\n\n    let totalCount = 9 * Math.pow(10, n - 1);\n\n    \/\/ Numbers that both start and end with 1: 10^(n-2) (e.g., 101, 111, 121, ..., 191 if n=3)\n    let bothStartAndEndWithOne = Math.pow(10, n - 2);\n\n    \/\/ Numbers that start with 1: 10^(n-1)\n    let startWithOne = Math.pow(10, n - 1);\n\n    \/\/ Numbers that end with 1: 9 * 10^(n-1) \/ 10 = 10^(n-1) (because we're counting 1 - 1, 11, 21, ..., 91)\n    let endWithOne = Math.pow(10, n - 1);\n\n    \/\/ Use inclusion-exclusion principle: number starts with 1 + numbers end with 1 - numbers that both start and end with 1\n    return startWithOne + endWithOne - bothStartAndEndWithOne;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"},{"task_id":"HumanEval_84","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण \/एक सकारात्मक पूर्णांक N दिइएको छ, यसको अंकहरूको कुल योग बाइनरीमा फर्काउनुहोस्। \/\/ >>> solve(1000)\n\/\/ \"1\"\n\/\/ >>> solve(150)\n\/\/ \"110\"\n\/\/ >>> solve(147)\n\/\/ \"1100\"\n\/\/ Variables:\n\/\/ @N integer\n\/\/ Constraints: 0 ≤ N ≤ 10000.\n\/\/ Output:\n\/\/ a string of binary number\nfunction solve(N){\n","canonical_solution":"function solve(N) {\n    \/\/ Convert the number to a string and split into individual characters (digits)\n    let digits = N.toString().split('');\n    \/\/ Calculate the sum of all digits\n    let sum = digits.reduce((acc, digit) => acc + Number(digit), 0);\n    \/\/ Convert the sum to a binary string and return\n    return sum.toString(2);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"},{"task_id":"HumanEval_85","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/पूरा संख्याहरूको एक गैर-खाली एर्रे दिइएको lst. जोडी तत्वहरू जो अनौंठो सूचकांकमा छन् जोड्नुहोस् .. \/\/ >>> add([4, 2, 6, 7])\n\/\/ 2\nfunction add(lst){\n","canonical_solution":"function add(lst) {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"},{"task_id":"HumanEval_86","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ नोट: वाक्यमा शब्द र खाली ठाउँको क्रम राख्नुपर्छ।\/ ascending order आधारमा ascii मान। \/ नयाँ शब्दले प्रतिस्थापित गरिन्छ जहाँ सबै अक्षरहरू क्रमबद्ध छन् \/ स्ट्रिङको क्रमबद्ध संस्करण, एक स्ट्रिङ हो जहाँ सबै शब्दहरू (स्पेसद्वारा विभाजित) \/ एउटा प्रकार्य लेख्नुहोस् जसले एउटा स्ट्रिङ लिन्छ र त्यसको अर्डर गरिएको संस्करण फर्काउँछ।\/\/ >>> anti_shuffle(\"Hi\")\n\/\/ \"Hi\"\n\/\/ >>> anti_shuffle(\"hello\")\n\/\/ \"ehllo\"\n\/\/ >>> anti_shuffle(\"Hello World!!!\")\n\/\/ \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n","canonical_solution":"function anti_shuffle(s) {\n    return s.split(' ').map(word => {\n        return word.split('').sort().join('');\n    }).join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"},{"task_id":"HumanEval_87","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ साथै, पङ्क्ति को निर्देशांकहरू पङ्क्तिहरू द्वारा क्रमबद्ध गर्नुहोस्।\/ निर्देशांकहरूलाई क्रमशः क्रमबद्ध गर्नुहोस्।\/ प्रत्येक एर्रे एक निर्देशांक हो - (पंक्ति, स्तम्भहरू), ० बाट सुरु हुन्छ। \/ र arrays को array, [(x1, y1), (x2, y2) ...] यस्तो कि \/ lst, र पूर्णांक x दिइएको छ, array मा पूर्णांक x फेला पार्नुहोस्, \/ प्रत्येक पङ्क्तिमा स्तम्भहरूको भिन्न संख्या हुन सक्छ।\/ जो म्याट्रिक्स जस्तै छ, तर म्याट्रिक्स भन्दा फरक छ, \/तपाईँलाई दुई आयामिक डाटा दिइएको छ, नेस्टेड एर्रेको रूपमा, \/\/ >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n\/\/ [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\/\/ >>> get_row([], 1)\n\/\/ []\n\/\/ >>> get_row([[], [1], [1, 2, 3]], 3)\n\/\/ [[2, 2]]\nfunction get_row(lst, x){\n","canonical_solution":"function get_row(lst, x) {\n    const result = [];\n\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; \/\/ Sort by columns in descending order for the same row\n        }\n        return a[0] - b[0]; \/\/ Sort by rows in ascending order\n    });\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"},{"task_id":"HumanEval_88","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ * दिइएको एर्रे परिवर्तन नगर्नुहोस्। \/ नोट: \/ वा यसलाई घट्दो क्रममा क्रमबद्ध गर्नुहोस् यदि योग ((पहिलो अनुक्रमणिका मान, अन्तिम अनुक्रमणिका मान) पनि छ।\/ यदि योगफल ((पहिलो सूचकांक मान, अन्तिम सूचकांक मान) अनौठो छ भने, \/नकारात्मक पूर्णांकहरूको एरे दिइएको छ, क्रमबद्ध गरेपछि दिइएको एरेको एक cojs फिर्ता गर्नुहोस्, \/\/ >>> sort_array([])\n\/\/ []\n\/\/ >>> sort_array([5])\n\/\/ [5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5])\n\/\/ [0, 1, 2, 3, 4, 5]\n\/\/ >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n\/\/ [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n","canonical_solution":"function sort_array(array) {\n    if (array.length === 0) return [];\n\n    let firstValue = array[0];\n    let lastValue = array[array.length - 1];\n    let sum = firstValue + lastValue;\n    \n    let sortedArray = [...array]; \/\/ Clone the array to avoid modifying the original\n\n    if (sum % 2 === 0) {\n        \/\/ Even sum: sort in descending order\n        sortedArray.sort((a, b) => b - a);\n    } else {\n        \/\/ Odd sum: sort in ascending order\n        sortedArray.sort((a, b) => a - b);\n    }\n\n    return sortedArray;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"},{"task_id":"HumanEval_89","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ दुई स्थानमा दुई गुणा तल सार्नुहोस्। \/ वर्णमालालाई यस्तो तरिकाले घुमाउनुपर्छ कि अक्षरहरू \/ वर्णमाला घुमाएर एन्क्रिप्टेड स्ट्रिङ फर्काउँछ। \/एक प्रकार्य एन्क्रिप्ट सिर्जना गर्नुहोस् जसले एउटा स्ट्रिंगलाई तर्कको रूपमा लिन्छ र \/\/ >>> encrypt(\"hi\")\n\/\/ \"lm\"\n\/\/ >>> encrypt(\"asdfghjkl\")\n\/\/ \"ewhjklnop\"\n\/\/ >>> encrypt(\"gf\")\n\/\/ \"kj\"\n\/\/ >>> encrypt(\"et\")\n\/\/ \"ix\"\nfunction encrypt(s){\n","canonical_solution":"function encrypt(s) {\n    const shift = 2 * 2; \/\/ shift down by two multiplied by two places\n    let encrypted = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        let newCharCode = ((charCode - 97 + shift) % 26) + 97; \/\/ wrap around within 'a' to 'z'\n        encrypted += String.fromCharCode(newCharCode);\n    }\n    return encrypted;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();"},{"task_id":"HumanEval_90","nl":"npi_Deva","pl":"js","prompt":"\/ यदि त्यस्तो कुनै तत्व छैन भने अपरिभाषित फर्काउनुहोस्। \/ एउटा फंक्शन लेख्नुहोस् next_smallest (() जसले एरेको दोस्रो सबैभन्दा सानो एलिमेन्ट फर्काउँछ। \/तपाईँलाई पूर्णांकहरूको एउटा सरणी दिइएको छ।\/\/ >>> next_smallest([1, 2, 3, 4, 5])\n\/\/ 2\n\/\/ >>> next_smallest([5, 1, 4, 3, 2])\n\/\/ 2\n\/\/ >>> next_smallest([])\n\/\/ undefined\n\/\/ >>> next_smallest([1, 1])\n\/\/ undefined\nfunction next_smallest(lst){\n","canonical_solution":"function next_smallest(lst) {\n    if (lst.length < 2) return undefined;\n    \n    let firstSmallest = Infinity;\n    let secondSmallest = Infinity;\n    \n    for (let num of lst) {\n        if (num < firstSmallest) {\n            secondSmallest = firstSmallest;\n            firstSmallest = num;\n        } else if (num < secondSmallest && num != firstSmallest) {\n            secondSmallest = num;\n        }\n    }\n    \n    return secondSmallest === Infinity ? undefined : secondSmallest;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\ntest();"},{"task_id":"HumanEval_91","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ वाक्यहरू ',' '? ' वा '! ' द्वारा सीमित हुन्छन्।बोरियत भनेको \"म\" शब्दबाट शुरु हुने वाक्य हो।\/तपाईँलाई शब्दहरूको एक शृङ्खला दिइनेछ, र तपाईँको कार्य संख्या गणना गर्नु हो \/\/ >>> is_bored(\"Hello world\")\n\/\/ 0\n\/\/ >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\/\/ 1\nfunction is_bored(S){\n","canonical_solution":"function is_bored(S) {\n    \/\/ Split the string into sentences using '.', '?', and '!' as delimiters\n    const sentences = S.split(\/[.!?]\/);\n    \n    \/\/ Initialize boredom count\n    let boredomCount = 0;\n    \n    \/\/ Iterate over each sentence\n    sentences.forEach(sentence => {\n        \/\/ Trim any whitespace from the beginning of the sentence and check if it starts with \"I\"\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++;\n        }\n    });\n    \n    return boredomCount;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_92","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ अन्य कुनै पनि अवस्थामा गलत फर्काउँछ।\/ यदि कुनै एउटा संख्या अन्य दुईको योग बराबर छ भने सत्य फर्काउँछ, र सबै संख्याहरू पूर्णांकहरू हुन्।\/एक प्रकार्य सिर्जना गर्नुहोस् जुन ३ अंक लिन्छ।\/\/ >>> any_int(5, 2, 7)\n\/\/ true\n\/\/ >>> any_int(3, 2, 2)\n\/\/ false\n\/\/ >>> any_int(3, -2, 1)\n\/\/ true\n\/\/ >>> any_int(3.6, -2.2, 2)\n\/\/ false\nfunction any_int(x, y, z){\n","canonical_solution":"function any_int(x, y, z) {\n    \/\/ Check if all numbers are integers\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        \/\/ Check if any number is the sum of the other two\n        return x === y + z || y === x + z || z === x + y;\n    }\n    \/\/ Return false if not all numbers are integers\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"},{"task_id":"HumanEval_93","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ केवल अक्षरहरू मान्नुहोस्।\/ अङ्ग्रेजी वर्णमालामा स्वर।\/ सन्देशको पत्र जुन त्यसभन्दा २ स्थान अगाडि देखिन्छ \/ सबै अक्षरहरूको केस स्विच गर्ने तरिका,  मा सबै स्वरहरूलाई प्रतिस्थापन गर्दछएउटा फंक्शन लेख्नुहोस् जसले सन्देश लिन्छ र यस्तो सन्देशमा कोड गर्दछ\/\/ >>> encode(\"test\")\n\/\/ \"TGST\"\n\/\/ >>> encode(\"This is a message\")\n\/\/ \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n","canonical_solution":"function encode(message) {\n    \/\/ Helper function to swap the case of a character\n    function swapCase(char) {\n        if (char === char.toLowerCase()) {\n            return char.toUpperCase();\n        } else {\n            return char.toLowerCase();\n        }\n    }\n\n    \/\/ Vowel mapping\n    const vowelMap = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w',\n        'A': 'C',\n        'E': 'G',\n        'I': 'K',\n        'O': 'Q',\n        'U': 'W'\n    };\n\n    \/\/ Encode the message\n    let encodedMessage = '';\n    \n    for (let char of message) {\n        if (\/[aeiouAEIOU]\/.test(char)) {\n            \/\/ Replace vowel with appropriate letter\n            encodedMessage += vowelMap[char];\n        } else {\n            \/\/ Swap case for non-vowel letters\n            encodedMessage += swapCase(char);\n        }\n    }\n    \n    return encodedMessage;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"},{"task_id":"HumanEval_94","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ तपाईँले सबैभन्दा ठूलो अभाज्य मान खोज्नु पर्छ र यसको अंकहरूको योग फर्काउनु पर्छ। \/तपाईँलाई पूर्णांकहरूको एउटा सरणी दिइएको छ।\/\/ >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\/\/ 10\n\/\/ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\/\/ 25\n\/\/ >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\/\/ 13\n\/\/ >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\/\/ 11\n\/\/ >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n\/\/ 3\n\/\/ >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n\/\/ 7\nfunction skjkasdkd(lst){\n","canonical_solution":"function skjkasdkd(lst) {\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    function sumOfDigits(num) {\n        return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    let largestPrime = -1;\n\n    for (let num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    return largestPrime !== -1 ? sumOfDigits(largestPrime) : 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();"},{"task_id":"HumanEval_95","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ फंक्शन फर्काउनु पर्छ गलत दिइएको वस्तु खाली छ। \/ केस वा सबै कुञ्जीहरू माथिल्लो केसमा स्ट्रिंगहरू हुन्, अन्यथा फर्काउनुहोस् गलत।\/ एउटा वस्तु दिइएको छ, यदि सबै कुञ्जीहरू तल्लोमा स्ट्रिंगहरू छन् भने सही फिर्ता गर्नुहोस् \/\/ >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n\/\/ true\n\/\/ >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n\/\/ false\n\/\/ >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n\/\/ true\nfunction check_dict_case(dict){\n","canonical_solution":"function check_dict_case(dict) {\n    const keys = Object.keys(dict);\n\n    if (keys.length === 0) return false;\n\n    const allLowerCase = keys.every(key => typeof key === 'string' && key === key.toLowerCase());\n    const allUpperCase = keys.every(key => typeof key === 'string' && key === key.toUpperCase());\n\n    return allLowerCase || allUpperCase;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n}\n\ntest();"},{"task_id":"HumanEval_96","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ पूर्णांकहरू जुन अभाज्य संख्याहरू हुन् र n भन्दा कम छन्। \/एक प्रकार्य लागू गर्नुहोस् जसले एक गैर-नकारात्मक पूर्णांक लिन्छ र पहिलो n को एर्रे फर्काउँछ \/\/ >>> count_up_to(5)\n\/\/ [2, 3]\n\/\/ >>> count_up_to(11)\n\/\/ [2, 3, 5, 7]\n\/\/ >>> count_up_to(0)\n\/\/ []\n\/\/ >>> count_up_to(20)\n\/\/ [2, 3, 5, 7, 11, 13, 17, 19]\n\/\/ >>> count_up_to(1)\n\/\/ []\n\/\/ >>> count_up_to(18)\n\/\/ [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n","canonical_solution":"function count_up_to(n) {\n    function isPrime(num) {\n        if (num < 2) return false;\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    const primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();"},{"task_id":"HumanEval_97","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ इनपुट सधैँ मान्य छ भन्ने मानौं।\/ तिनीहरूको एकाई अंकहरूको गुणनफल। \/दो पूर्णांक लिने र फर्काउने फलन पूरा गर्नुहोस् \/\/ >>> multiply(148, 412)\n\/\/ 16\n\/\/ >>> multiply(19, 28)\n\/\/ 72\n\/\/ >>> multiply(2020, 1851)\n\/\/ 0\n\/\/ >>> multiply(14, -15)\n\/\/ 20\nfunction multiply(a, b){\n","canonical_solution":"function multiply(a, b) {\n    \/\/ Get the absolute value of each number\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    \/\/ Extract the unit digit of each number\n    let unitDigitA = a % 10;\n    let unitDigitB = b % 10;\n\n    \/\/ Return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();"},{"task_id":"HumanEval_98","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/एक string s दिइएको, जोडी सूचकांक मा uppercase स्वर को संख्या गणना। \/\/ >>> count_upper(\"aBCdEf\")\n\/\/ 1\n\/\/ >>> count_upper(\"abcdefg\")\n\/\/ 0\n\/\/ >>> count_upper(\"dBBE\")\n\/\/ 0\nfunction count_upper(s){\n","canonical_solution":"function count_upper(s) {\n    const vowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (vowels.has(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"},{"task_id":"HumanEval_99","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ दुई पूर्णांकबाट, यसलाई शून्यबाट टाढा राउन्ड गर्नुहोस्। यदि संख्या बराबर दूरीमा छ भने \/एक प्रकार्य सिर्जना गर्नुहोस् जसले संख्या प्रतिनिधित्व गर्ने मान (स्ट्रिंग) लिन्छ \/\/ >>> closest_integer(\"10\")\n\/\/ 10\n\/\/ >>> closest_integer(\"15.3\")\n\/\/ 15\n\/\/ Note:\n\/\/ Rounding away from zero means that if the given number is equidistant\n\/\/ from two integers, the one you should return is the one that is the\n\/\/ farthest from zero. For example closest_integer(\"14.5\") should\n\/\/ return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n","canonical_solution":"function closest_integer(value) {\n    let num = parseFloat(value);\n    if (num > 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_100","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ i ले स्तरमा ढुङ्गाहरूको संख्या प्रतिनिधित्व गर्दछ (i+1) ।\/ एउटा एर्रेमा प्रत्येक स्तरमा ढुङ्गाहरूको संख्या फर्काउँछ, जहाँ तत्वमा अनुक्रमणिका \/ - अर्को संख्या यदि n सम हो भने। \/ - अर्को विषम संख्या यदि n विषम छ भने। \/ अर्को तहमा ढुङ्गाहरूको संख्या: \/ पहिलो तहमा n ढुङ्गाहरू छन्।\/ सकारात्मक पूर्णांक n दिइएको छ, तपाईंले n स्तरको ढुङ्गाहरूको ढेर बनाउनु पर्छ।\/\/ >>> make_a_pile(3)\n\/\/ [3, 5, 7]\nfunction make_a_pile(n){\n","canonical_solution":"function make_a_pile(n) {\n    const pile = [];\n    let currentStones = n;\n    \n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n        currentStones += (currentStones % 2 === 0) ? 2 : 2;\n    }\n\n    return pile;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"},{"task_id":"HumanEval_101","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ शब्दहरूमा स्ट्रिङ विभाजन गर्न र शब्दहरूको एरे फर्काउन। तपाईँलाई कम्पास वा स्पेसद्वारा विभाजित शब्दहरूको एउटा स्ट्रिङ दिइनेछ। तपाईँको कार्य भनेको \/\/ >>> words_string(\"Hi, my name is John\")\n\/\/ [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\/\/ >>> words_string(\"One, two, three, four, five, six\")\n\/\/ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n","canonical_solution":"function words_string(s) {\n    \/\/ Split the string by removing commas and spaces, filter out any empty strings\n    return s.split(\/[\\s,]+\/).filter(Boolean);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();"},{"task_id":"HumanEval_102","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ त्यहाँ त्यस्तो कुनै संख्या छैन, तब फंक्शनले -1 फर्काउनु पर्छ। \/ सबैभन्दा ठूलो सम पूर्णांक संख्या हो जुन [x, y] समावेशी दायरामा छ। यदि यो फंक्शनले दुईवटा सकारात्मक संख्या x र y लिन्छ र  फर्काउँछ\/\/ >>> choose_num(12, 15)\n\/\/ 14\n\/\/ >>> choose_num(13, 12)\n\/\/ -1\nfunction choose_num(x, y){\n","canonical_solution":"function choose_num(x, y) {\n    if (x > y) {\n        return -1;\n    }\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    return -1;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"},{"task_id":"HumanEval_103","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: यदि n m भन्दा ठूलो छ भने, फर्काउनुहोस् -१।\/ उत्तरलाई नजिकको पूर्णांकमा गोल गर्नुहोस् र त्यसलाई बाइनरीमा रूपान्तरण गर्नुहोस्।\/ n देखि m सम्मका पूर्णांकहरूको औसत (n र m सहित) ।\/तपाईँलाई दुईवटा सकारात्मक पूर्णांक n र m दिइएको छ, र तपाईँको कार्य भनेको  को गणना गर्नु हो\/\/ >>> rounded_avg(1, 5)\n\/\/ \"0b11\"\n\/\/ >>> rounded_avg(7, 5)\n\/\/ -1\n\/\/ >>> rounded_avg(10, 20)\n\/\/ \"0b1111\"\n\/\/ >>> rounded_avg(20, 33)\n\/\/ \"0b11010\"\nfunction rounded_avg(n, m){\n","canonical_solution":"function rounded_avg(n, m) {\n    if (n > m) {\n        return -1;\n    }\n    \n    let sum = 0;\n    let count = 0;\n    \n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    \n    let average = sum \/ count;\n    let roundedAverage = Math.round(average);\n    return \"0b\" + roundedAverage.toString(2);\n}\n\n\/\/ Example Usage\nconsole.log(rounded_avg(1, 5));   \/\/ \"0b11\"\nconsole.log(rounded_avg(7, 5));   \/\/ -1\nconsole.log(rounded_avg(10, 20)); \/\/ \"0b1111\"\nconsole.log(rounded_avg(20, 33)); \/\/ \"0b11010\"","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"},{"task_id":"HumanEval_104","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ नोटः फर्काइएको एर्रे बढ्दो क्रममा क्रमबद्ध गर्नुपर्दछ।\/ तत्वहरू जुन कुनै पनि अंकहरू छैनन्। \/ सकारात्मक पूर्णांक x को एउटा सरणी दिइएको छ. सबै को क्रमबद्ध सरणी फिर्ता गर्नुहोस् \/\/ >>> unique_digits([15, 33, 1422, 1])\n\/\/ [1, 15, 33]\n\/\/ >>> unique_digits([152, 323, 1422, 10])\n\/\/ []\nfunction unique_digits(x){\n","canonical_solution":"function unique_digits(x) {\n    return x.filter(num => {\n        return !num.toString().split('').some(digit => digit % 2 === 0);\n    }).sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"},{"task_id":"HumanEval_105","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ \"एक\", \"दुई\", \"तीन\", \"चार\", \"पाँच\", \"छ\", \"सात\", \"आठ\", \"नौ\"\/ परिणामी एर्रे उल्टाउनुहोस्, र त्यसपछि प्रत्येक अंकलाई यसको सम्बन्धित नामबाट पूर्णांकहरूको एउटा सरणी दिइएको छ, १ र ९ सम्मका पूर्णांकहरू क्रमबद्ध गर्नुहोस्,\/\/ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n\/\/ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\/\/ If the array is empty, return an empty array:\n\/\/ >>> by_length([])\n\/\/ []\n\/\/ If the array has any strange number ignore it:\n\/\/ >>> by_length([1, -1, 55])\n\/\/ [\"One\"]\nfunction by_length(arr){\n","canonical_solution":"function by_length(arr) {\n  const numberNames = [\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\n    \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  ];\n\n  return arr.filter(num => num >= 1 && num <= 9)\n            .sort((a, b) => a - b)\n            .reverse()\n            .map(num => numberNames[num - 1]);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"},{"task_id":"HumanEval_106","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ i को कारक 1 देखि i सम्मका संख्याहरूको गुणन हो (1 * 2 * ... * i) ।\/ i १ बाट सुरु हुन्छ।\/ वा अन्यथा १ देखि i सम्मका संख्याहरूको योगफल। \/ र आकार n को एउटा सरणी फर्काउँछ, यस्तो कि अनुक्रमणिका i मा तत्वको मान i को कारक हो यदि i सम छ भने \/फंक्शन f लागू गर्नुहोस् जसले n लाई प्यारामिटरको रूपमा लिन्छ, \/\/ >>> f(5)\n\/\/ [1, 2, 6, 24, 15]\nfunction f(n){\n","canonical_solution":"function f(n) {\n    function factorial(num) {\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    function sumUpTo(num) {\n        return (num * (num + 1)) \/ 2; \/\/ Sum of first num natural numbers\n    }\n\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumUpTo(i));\n        }\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_107","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण १: \/ पूर्णांक पालिन्ड्रोमहरू जुन दायरामा पर्दछन् ((१, एन), समावेशी। \/ सकारात्मक पूर्णांक n दिइएको छ, एउटा एरे फर्काउनुहोस् जसमा सम र विषम संख्या छ \/\/ >>> even_odd_palindrome(3)\n\/\/ [1, 2]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\/\/ Example 2:\n\/\/ >>> even_odd_palindrome(12)\n\/\/ [4, 6]\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\/\/ Note:\n\/\/ 1. 1 <= n <= 10^3\n\/\/ 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n","canonical_solution":"function even_odd_palindrome(n) {\n    function isPalindrome(num) {\n        let str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_108","nl":"npi_Deva","pl":"js","prompt":"उदाहरणका लागि, -१२३ को अंक -१, २ र ३ मा हस्ताक्षर छ।यदि कुनै संख्या ऋणात्मक छ भने, तब यसको पहिलो हस्ताक्षरित अंक ऋणात्मक हुनेछ:\/ तत्वहरूको संख्या जसको अंकहरूको योगफल > ० छ। \/एक प्रकार्य count_nums लेख्नुहोस् जसले पूर्णांकहरूको एरे लिन्छ र फिर्ती दिन्छ \/\/ >>> count_nums([])\n\/\/ 0\n\/\/ >>> count_nums([-1, 11, -11])\n\/\/ 1\n\/\/ >>> count_nums([1, 1, 2])\n\/\/ 3\nfunction count_nums(arr){\n","canonical_solution":"function count_nums(arr) {\n    return arr.reduce((count, num) => {\n        let str = num.toString();\n        let sum = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (i === 0 && str[i] === '-') {\n                continue;\n            }\n            sum += parseInt(str[i]);\n        }\n        if (num < 0) {\n            sum += 2 * parseInt(str[1]); \/\/ Adjust for the negative signed digit\n        }\n        return sum > 0 ? count + 1 : count;\n    }, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"},{"task_id":"HumanEval_109","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ नोट: दिइएको एरेमा अद्वितीय तत्वहरू हुनुको ग्यारेन्टी छ।\/ यदि दिइएको एरे खाली छ भने तब true फर्काउनुहोस्।\/ त्यसपछि सही फर्काउनुहोस् अन्यथा गलत फर्काउनुहोस्।\/ यदि माथिको अपरेशन गरेर क्रमबद्ध एर्रे प्राप्त गर्न सम्भव छ भने \/ एरेमा प्रारम्भिक स्थिति अर्थात् ० औं सूचकांक। \/ स्थितिमा सही दिशामा। एर्रेको अन्तिम तत्व  मा सार्नेछ।\/ एक दायाँ पछाडि सर्ने अपरेशनको अर्थ एरेका सबै तत्वहरूलाई एकद्वारा पछाडि सार्नु हो ।\/ तपाईँलाई दायाँ पारी सञ्चालन गर्न अनुमति छ कुनै पनि समयको संख्या।\/ दिइएको सरणीमा निम्न कार्यः \/ यो कार्य गरेर गैर-घटेको क्रममा एरे क्रमबद्ध गर्न सम्भव छ \/ एरेमा संख्याहरू अनियमित रूपमा क्रमबद्ध हुनेछन्। तपाईंको कार्य यो निर्धारण गर्नु हो कि \/ हामीसँग एन पूर्णांकको एर 'एर' छ arr[1], arr[2], ..., arr[N]।\/\/ >>> move_one_ball([3, 4, 5, 1, 2])\n\/\/ true\n\/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n\/\/ be achieved for the given array.\n\/\/ >>> move_one_ball([3, 5, 4, 1, 2])\n\/\/ false\n\/\/ Explanation:It is not possible to get non-decreasing order for the given\n\/\/ array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n","canonical_solution":"function move_one_ball(arr) {\n    \/\/ If the array is empty, it's trivially sorted\n    if (arr.length === 0) return true;\n\n    \/\/ Count the number of positions where the next element is smaller than the current one\n    let dropCount = 0;\n    let n = arr.length;\n\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            dropCount++;\n        }\n    }\n\n    \/\/ If the drop count is more than 1, it means more than one drop is there\n    \/\/ and thus we cannot sort it with right shifts\n    return dropCount <= 1;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();"},{"task_id":"HumanEval_110","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ अन्यथा, \"NO\" फर्काउनुहोस्।\/ lst1 को सबै तत्वहरू पनि हुन, \"YES\" फर्काउनुहोस्।\/ यदि lst1 र lst2 बीच तत्वहरू आदान प्रदान गर्न सम्भव छ भने \/ lst1 र lst2 बीच आदानप्रदान तत्वहरूको संख्यामा कुनै सीमा छैन।\/ तिनीहरूको बीचमा lst1 लाई केवल सम संख्याहरूको एर्रे बनाउन। \/ र तत्वहरूको आदान प्रदान गर्न सम्भव छ कि छैन भनेर निर्धारण गर्दछ \/यस समस्यामा, तपाईँले एउटा फंक्शन लागू गर्नुहुनेछ जसले दुई नम्बरको एरे लिन्छ, \/\/ >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\/\/ \"YES\"\n\/\/ >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\/\/ \"NO\"\n\/\/ It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n","canonical_solution":"function exchange(lst1, lst2) {\n    \/\/ Check if lst1 already consists of only even numbers\n    let allEvenLst1 = lst1.every(num => num % 2 === 0);\n    if (allEvenLst1) return \"YES\";\n    \n    \/\/ Check if there's at least one even number in lst2\n    let hasEvenInLst2 = lst2.some(num => num % 2 === 0);\n    \n    \/\/ If there is at least one even number in lst2, it's possible to perform an exchange\n    \/\/ to make all elements in lst1 even\n    if (hasEvenInLst2) return \"YES\";\n    \n    \/\/ If no conditions above are met, it's not possible to make lst1 all even\n    return \"NO\";\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"},{"task_id":"HumanEval_111","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ यदि धेरै अक्षरहरूमा एउटै घटना छ भने, ती सबै फिर्ता गर्नुहोस्।\/ सबैभन्दा धेरै पटक दोहोरिएको अक्षरको र सम्बन्धित गणना समावेश गर्दछ। \/एक स्पेस विभाजित लघुकथा अक्षर प्रतिनिधित्व गर्ने स्ट्रिङ दिइएको, एक वस्तु फिर्ता गर्नुहोस् \/\/ >>> histogram(\"a b c\")\n\/\/ {\"a\": 1, \"b\": 1, \"c\": 1}\n\/\/ >>> histogram(\"a b b a\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"a b c a b\")\n\/\/ {\"a\": 2, \"b\": 2}\n\/\/ >>> histogram(\"b b b b a\")\n\/\/ {\"b\": 4}\n\/\/ >>> histogram(\"\")\n\/\/ {}\nfunction histogram(test){\n","canonical_solution":"function histogram(test) {\n  if (!test) return {};\n  \n  const letters = test.split(' ');\n  const letterCount = {};\n  \n  for (let letter of letters) {\n    if (letterCount[letter]) {\n      letterCount[letter]++;\n    } else {\n      letterCount[letter] = 1;\n    }\n  }\n  \n  let maxCount = 0;\n  for (let count of Object.values(letterCount)) {\n    if (count > maxCount) {\n      maxCount = count;\n    }\n  }\n  \n  const result = {};\n  for (let [letter, count] of Object.entries(letterCount)) {\n    if (count === maxCount) {\n      result[letter] = count;\n    }\n  }\n  \n  return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"},{"task_id":"HumanEval_112","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण \/ तपाईँले जाँचको लागि परिणाम स्ट्रिङ र true\/false समावेश भएको एउटा एरे फर्काउनु पर्छ। \/ यदि यो पछाडि र अगाडि समान पढ्छ भने स्ट्रिङलाई पालिन्ड्रोम भनिन्छ।\/ त्यसपछि जाँच गर्नुहोस् कि परिणाम स्ट्रिङ पालिन्ड्रोम हो कि होइन। \/ हामीलाई दुईवटा स्ट्रिङ s र c दिइएको छ, तपाईँले s मा भएका सबै अक्षरहरू मेटाउनु पर्छ जुन c मा भएका कुनै पनि अक्षरको बराबर छ \/कार्य \/\/ >>> reverse_delete(\"abcde\", \"ae\")\n\/\/ [\"bcd\", false]\n\/\/ >>> reverse_delete(\"abcdef\", \"b\")\n\/\/ [\"acdef\", false]\n\/\/ >>> reverse_delete(\"abcdedcba\", \"ab\")\n\/\/ [\"cdedc\", true]\nfunction reverse_delete(s, c){\n","canonical_solution":"function reverse_delete(s, c) {\n    let result = '';\n    \/\/ Create a set of characters to be deleted\n    const deleteChars = new Set(c);\n    \n    \/\/ Construct the result string excluding the characters in c\n    for (let char of s) {\n        if (!deleteChars.has(char)) {\n            result += char;\n        }\n    }\n    \n    \/\/ Check if the result string is a palindrome\n    const isPalindrome = result === result.split('').reverse().join('');\n    \n    return [result, isPalindrome];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"},{"task_id":"HumanEval_113","nl":"npi_Deva","pl":"js","prompt":"\/ इनपुटको i'th स्ट्रिङमा अनौठो अंकहरूको। \/ string i इनपुटको. \" जहाँ सबै i हरूलाई नम्बरले प्रतिस्थापन गर्नुपर्दछ \/ आउटपुटको प्रत्येक तत्व i \"अनौठो तत्वहरूको संख्या हुनुपर्दछ।\/ स्ट्रिंगहरूको एरे दिइएको छ, जहाँ प्रत्येक स्ट्रिंगमा केवल अंकहरू हुन्छन्, एरे फर्काउनुहोस्।\/\/ >>> odd_count([\"1234567\"])\n\/\/ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\/\/ >>> odd_count([\"3\", \"11111111\"])\n\/\/ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n","canonical_solution":"function odd_count(lst) {\n    return lst.map(str => {\n        const oddCount = Array.from(str).filter(ch => parseInt(ch) % 2 !== 0).length;\n        let sentence = \"the number of odd elements in the string i of the input.\";\n        return sentence.replace(\/i\/g, oddCount.toString());\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();"},{"task_id":"HumanEval_114","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण \/ संख्याहरूको। \/पूर्णांक n को एरे दिइएको छ, कुनै पनि गैर-खाली उप-एर्रेको न्यूनतम योगफल पत्ता लगाउनुहोस् \/\/ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\/\/ 1\n\/\/ >>> minSubArraySum([-1, -2, -3])\n\/\/ -6\nfunction minSubArraySum(nums){\n","canonical_solution":"function minSubArraySum(nums) {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        if (currentSum > 0) {\n            currentSum = nums[i];\n        } else {\n            currentSum += nums[i];\n        }\n        minSum = Math.min(minSum, currentSum);\n    }\n    \n    return minSum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100, -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_115","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण १: \/ आउटपुट पटक को संख्या तपाईं बाल्टिन तल गर्न आवश्यक छ।\/ तिम्रो काम कुवा खाली गर्न बाल्टिन प्रयोग गर्नु हो।\/ र सबै बाल्टिनको क्षमता बराबर छ।\/ हरेक कुवामा पानी निकाल्न प्रयोग गर्न सकिने एउटा बाल्टिन हुन्छ, \/ र प्रत्येक 1 पङ्क्तिमा पानीको एक एकाइ प्रतिनिधित्व गर्दछ। तपाईँलाई कुवाहरूको एक आयताकार ग्रिड दिइएको छ। प्रत्येक पङ्क्तिले एउटा कुवालाई प्रतिनिधित्व गर्छ,\/\/ >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\/\/ 6\n\/\/ Example 2:\n\/\/ >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n\/\/ 5\n\/\/ Example 3:\n\/\/ >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n\/\/ 0\n\/\/ Constraints:\n\/\/ * all wells have the same length\n\/\/ * 1 <= grid.length <= 10^2\n\/\/ * 1 <= grid[:,1].length <= 10^2\n\/\/ * grid[i][j] -> 0 | 1\n\/\/ * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n","canonical_solution":"function max_fill(grid, capacity) {\n    let totalWater = 0;\n    \n    for (let row of grid) {\n        for (let cell of row) {\n            totalWater += cell;\n        }\n    }\n    \n    return Math.ceil(totalWater \/ capacity);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"},{"task_id":"HumanEval_116","nl":"npi_Deva","pl":"js","prompt":"\/ यो निम्नानुसार कार्यान्वयन हुनुपर्छ: \/ एकको समान संख्याको लागि, दशमलव मानको आधारमा क्रमबद्ध गर्नुहोस्।\/ एकको संख्या तिनीहरूको बाइनरी प्रतिनिधित्वमा आरोही क्रममा। \/ यस काटामा, तपाईँले गैर-ऋणात्मक पूर्णांकहरूको एउटा सरणी क्रमबद्ध गर्नुपर्नेछ \/\/ >>> sort_array([1, 5, 2, 3, 4])\n\/\/ [1, 2, 3, 4, 5]\n\/\/ >>> sort_array([-2, -3, -4, -5, -6])\n\/\/ [-6, -5, -4, -3, -2]\n\/\/ >>> sort_array([1, 0, 2, 3, 4])\n\/\/ [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n","canonical_solution":"function sort_array(arr) {\n    return arr.slice().sort((a, b) => {\n        const countOnes = num => num.toString(2).split('0').join('').length;\n        const onesA = countOnes(a);\n        const onesB = countOnes(b);\n        if (onesA === onesB) {\n            return a - b;\n        }\n        return onesA - onesB;\n    });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"},{"task_id":"HumanEval_117","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ नोट: तपाईँले इनपुट स्ट्रिङमा अक्षर र स्पेस मात्र समावेश भएको मान्न सक्नुहुन्छ ।\/ यदि string s खाली छ भने फंक्शनले खाली एरे फर्काउनु पर्छ। \/ n व्यञ्जन, क्रममा यी शब्दहरू स्ट्रिंग s मा देखा पर्दछ। \/ एक प्रकार्य जसले string s बाट सबै शब्दहरूको एरे फर्काउँछ जसमा ठीक \/एक string s र एक प्राकृतिक संख्या n दिइएको छ, तपाईं कार्यान्वयन गर्न को लागी कार्यभार दिइएको छ \/\/ >>> select_words(\"Mary had a little lamb\", 4)\n\/\/ [\"little\"]\n\/\/ >>> select_words(\"Mary had a little lamb\", 3)\n\/\/ [\"Mary\", \"lamb\"]\n\/\/ >>> select_words(\"simple white space\", 2)\n\/\/ []\n\/\/ >>> select_words(\"Hello world\", 4)\n\/\/ [\"world\"]\n\/\/ >>> select_words(\"Uncle sam\", 3)\n\/\/ [\"Uncle\"]\nfunction select_words(s, n){\n","canonical_solution":"function select_words(s, n) {\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    const words = s.split(' ');\n    const result = [];\n\n    for (let word of words) {\n        let consonantCount = 0;\n        \n        for (let char of word) {\n            if (!vowels.has(char)) {\n                consonantCount += 1;\n            }\n        }\n\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"},{"task_id":"HumanEval_118","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ तपाईँले दिइएको स्ट्रिङमा अङ्ग्रेजी अक्षर मात्र समावेश भएको मान्न सक्नुहुन्छ।\/ कुनै स्वर माथि उल्लेखित शर्त पूरा भएको पाउँछु। \/ शुरुवात र अन्त्यमा स्वरहरू गणना हुँदैनन्. यदि तपाईँले खाली string फर्काउनु भएन भने \/ शब्दको दाहिने तर्फबाट दुई व्यंजन (केस संवेदनशील) ।तपाईँलाई एउटा शब्द दिइएको छ, तपाईँको काम भनेको बीचमा रहेको सबैभन्दा नजिकको स्वर पत्ता लगाउनु हो।\/\/ >>> get_closest_vowel(\"yogurt\")\n\/\/ \"u\"\n\/\/ >>> get_closest_vowel(\"FULL\")\n\/\/ \"U\"\n\/\/ >>> get_closest_vowel(\"quick\")\n\/\/ \"\"\n\/\/ >>> get_closest_vowel(\"ab\")\n\/\/ \"\"\nfunction get_closest_vowel(word){\n","canonical_solution":"function get_closest_vowel(word) {\n    const vowels = \"aeiouAEIOU\";\n\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && \n            !vowels.includes(word[i - 1]) && \n            !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n\n    return \"\";\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"},{"task_id":"HumanEval_119","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ यदि त्यहाँ राम्रो स्ट्रिङ बनाउने तरिका छ भने 'हो' फर्काउनुहोस्, र अन्यथा 'होइन' फर्काउनुहोस्।\/ \" (()) \" होइन।उदाहरणका लागिः string '(()))) राम्रो छ, जबकि string \/ एक स्ट्रिंग S लाई राम्रो मानिन्छ यदि र केवल यदि S मा सबै कोष्ठकहरू \/ केही क्रम, कि परिणामस्वरूप स्ट्रिङ राम्रो हुनेछ। \/ तपाईंको काम यो जाँच गर्नु हो कि यदि यो सम्भव छ भने दुई तारहरू जोड्न सम्भव छ \/ कोष्ठक \" ((\" वा नजिक कोष्ठक \") \" मात्र।\/तपाईँलाई दुईवटा तारहरूको एउटा सरणी दिइएको छ, दुवै तारहरू खुला हुन्छन् \/\/ >>> match_parens([\"()(\", \")\"])\n\/\/ \"Yes\"\n\/\/ >>> match_parens([\")\", \")\"])\n\/\/ \"No\"\nfunction match_parens(lst){\n","canonical_solution":"function match_parens(lst) {\n    function isBalanced(str) {\n        let balance = 0;\n        for (let char of str) {\n            if (char === '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) return false;\n        }\n        return balance === 0;\n    }\n\n    const [s1, s2] = lst;\n    if (isBalanced(s1 + s2) || isBalanced(s2 + s1)) {\n        return 'Yes';\n    }\n    return 'No';\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"},{"task_id":"HumanEval_120","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण १: \/ लम्बाइ k को अधिकतम k संख्याको साथ arr मा। \/ पूर्णांकको एर र सकारात्मक पूर्णांक k को एर दिइएको छ, क्रमबद्ध एर फर्काउनुहोस् \/\/ >>> maximum([-3, -4, 5], 3)\n\/\/ [-4, -3, 5]\n\/\/ Example 2:\n\/\/ >>> maximum([4, -4, 4], 2)\n\/\/ [4, 4]\n\/\/ Example 3:\n\/\/ >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\/\/ [2]\n\/\/ Note:\n\/\/ 1. The length of the array will be in the range of [1, 1000].\n\/\/ 2. The elements in the array will be in the range of [-1000, 1000].\n\/\/ 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n","canonical_solution":"function maximum(arr, k) {\n    return arr.sort((a, b) => b - a).slice(0, k).sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"},{"task_id":"HumanEval_121","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/पूरा संख्याहरूको एक गैर-खाली सरणी दिइएको छ, सबै अनौठो तत्वहरूको योग फिर्ता गर्नुहोस् जुन पनि स्थानहरूमा छन्। \/\/ >>> solution([5, 8, 7, 1])\n\/\/ 12\n\/\/ >>> solution([3, 3, 3, 3, 3])\n\/\/ 9\n\/\/ >>> solution([30, 13, 24, 321])\n\/\/ 0\nfunction solution(lst){\n","canonical_solution":"function solution(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"},{"task_id":"HumanEval_122","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ arr को पहिलो k तत्वहरूबाट अधिकतम दुई अंकहरू भएको तत्वहरूको योग हो। \/ एक पूर्णांक arr र पूर्णांक k को एक गैर-खाली सरणी दिइएको छ, फिर्ती \/\/ >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\/\/ 24\n\/\/ Constraints:\n\/\/ 1. 1 <= len(arr) <= 100\n\/\/ 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n","canonical_solution":"function add_elements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (Math.abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"},{"task_id":"HumanEval_123","nl":"npi_Deva","pl":"js","prompt":"\/ get_odd_collatz(5) फर्काउँछ [१, ५] # 5 को लागि कोलाट्ज अनुक्रम [5, 16, 8, 4, 2, 1], त्यसैले बेग्लै संख्याहरू मात्र 1, र 5 हुन्। \/ उदाहरणका लागि: \/ २. फर्काइएको एर्रे क्रमबद्ध क्रममा क्रमबद्ध।\/ १. कोलाट्ज (१) = १.\/ नोट: \/ पद प्लस १. अनुमान यो हो कि n को कुनै पनि मानको फरक पर्दैन, अनुक्रम सधैं १ सम्म पुग्नेछ। यदि अघिल्लो पद अनौठो छ भने, अर्को पद अघिल्लो पदको ३ गुणा हुन्छ \/ अघिल्लो पद निम्नानुसार: यदि अघिल्लो पद जोडी छ भने, अर्को पद  को आधा हो\/ निम्नानुसार: कुनै पनि सकारात्मक पूर्णांक n बाट सुरु गर्नुहोस्। त्यसपछि प्रत्येक पद  बाट प्राप्त हुन्छ।कोलाट्ज अनुमान गणितको एउटा अनुमान हो जुन परिभाषित अनुक्रमसँग सम्बन्धित छ ।\/ सकारात्मक पूर्णांक n दिइएको छ, क्रमबद्ध एरे फर्काउनुहोस् जुन कोलाट्ज अनुक्रममा अनौठो संख्याहरू छन्। \/\/ >>> get_odd_collatz(5)\n\/\/ [1, 5]\nfunction get_odd_collatz(n){\n","canonical_solution":"function get_odd_collatz(n) {\n    let collatzSequence = [];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatzSequence.push(n);\n        }\n        n = n % 2 === 0 ? n \/ 2 : 3 * n + 1;\n    }\n    collatzSequence.push(1); \/\/ Include 1 as it's part of the sequence and is odd\n    return collatzSequence.sort((a, b) => a - b);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();"},{"task_id":"HumanEval_124","nl":"npi_Deva","pl":"js","prompt":"\/ ४. मिति ढाँचामा हुनुपर्दछ: mm-dd-yyyy \/ ३. महिना १ भन्दा कम वा १२ भन्दा बढी हुनु हुँदैन।\/ 2. दिन संख्या महिना 1,3,5,7,8,10,12 लागि 1 भन्दा कम वा 31 दिन भन्दा बढी छैन र दिन संख्या महिना 4,6,9,11 लागि 1 भन्दा कम वा 30 दिन भन्दा बढी छैन। र, दिन संख्या महिना 2 लागि 1 भन्दा कम वा 29 भन्दा बढी छैन।\/ १. मिति स्ट्रिङ खाली छैन।\/ यदि निम्न सबै नियमहरू पूरा भएमा मिति मान्य हुन्छ: \/ यदि मिति मान्य छ भने सत्य फर्काउँछ अन्यथा गलत। \/तपाईँले एउटा फंक्शन लेख्नु पर्छ जसले दिइएको मिति स्ट्रिंगलाई मान्य गर्दछ र \/\/ >>> valid_date(\"03-11-2000\")\n\/\/ true\n\/\/ >>> valid_date(\"15-01-2012\")\n\/\/ false\n\/\/ >>> valid_date(\"04-0-2040\")\n\/\/ false\n\/\/ >>> valid_date(\"06-04-2020\")\n\/\/ true\n\/\/ >>> valid_date(\"06\/04\/2020\")\n\/\/ false\nfunction valid_date(date){\n","canonical_solution":"function valid_date(date) {\n    if (!date) return false;\n    \n    \/\/ Regular expression to match the date pattern mm-dd-yyyy\n    const datePattern = \/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\/;\n    if (!datePattern.test(date)) return false;\n\n    \/\/ Split the date into parts\n    const [month, day, year] = date.split('-').map(Number);\n\n    \/\/ Check the valid number of days per month\n    if (month === 2) {\n        \/\/ Check for February, normally 28 max days, 29 if leap year\n        const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n        if (day > 29 || (day === 29 && !isLeapYear)) return false;\n    } else if ([4, 6, 9, 11].includes(month)) {\n        \/\/ April, June, September, November have 30 max days\n        if (day > 30) return false;\n    } else {\n        \/\/ Other months have 31 max days\n        if (day > 31) return false;\n    }\n\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_125","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ वर्णमाला, अर्डर (a) = 0, अर्डर (b) = 1, ... अर्डर (z) = 25 \/ कम्मामा विभाजित हुनुपर्दछ ',' यदि कुनै कम्मा अवस्थित छैन भने तपाईंले  मा अनौंठो क्रममा सानो अक्षरहरूको संख्या फिर्ता गर्नुपर्नेछ।\/शब्दहरूको एक स्ट्रिंग दिइएको छ, खाली स्थानमा विभाजित शब्दहरूको एरे फिर्ता गर्नुहोस्, यदि कुनै खाली ठाउँ पाठमा अवस्थित छैन भने तपाईं \/\/ >>> split_words(\"Hello world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"Hello,world!\")\n\/\/ [\"Hello\", \"world!\"]\n\/\/ >>> split_words(\"abcdef\")\n\/\/ 3\nfunction split_words(txt){\n","canonical_solution":"function split_words(txt) {\n    if (\/\\s\/.test(txt)) {\n        \/\/ Split on whitespace if it exists\n        return txt.split(\/\\s+\/);\n    } else if (\/,\/.test(txt)) {\n        \/\/ Split on commas if no whitespace exists\n        return txt.split(',');\n    } else {\n        \/\/ Return count of lowercase letters with odd order in the alphabet\n        let oddOrderCount = 0;\n        for (let i = 0; i < txt.length; i++) {\n            let char = txt[i];\n            if (char >= 'a' && char <= 'z') {\n                let order = char.charCodeAt(0) - 'a'.charCodeAt(0);\n                if (order % 2 !== 0) {\n                    oddOrderCount++;\n                }\n            }\n        }\n        return oddOrderCount;\n    }\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"},{"task_id":"HumanEval_126","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ number, return false. कुनै नकारात्मक संख्या र केवल पूर्णांक मान्नुहोस्। यदि एरेमा एउटैको १ भन्दा बढी डुप्लिकेट छ भने \/संख्याहरूको एरे दिइएको छ, तिनीहरू क्रमबद्ध छन् वा छैनन् भनेर फिर्ता गर्नुहोस् \/\/ >>> is_sorted([5])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n\/\/ true\n\/\/ >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n\/\/ false\n\/\/ >>> is_sorted([1, 2, 2, 3, 3, 4])\n\/\/ true\n\/\/ >>> is_sorted([1, 2, 2, 2, 3, 4])\n\/\/ false\nfunction is_sorted(lst){\n","canonical_solution":"function is_sorted(lst) {\n    if (lst.length <= 1) return true;\n\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            \/\/ Check if more than 1 duplicate by looking two steps ahead\n            if (i + 2 < lst.length && lst[i] === lst[i + 2]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"},{"task_id":"HumanEval_127","nl":"npi_Deva","pl":"js","prompt":"\/ [इनपुट\/आउटपुट] नमूनाहरू: \/ यदि दुई अन्तरालहरू क्रस गर्दैनन् भने, \"NO\" फर्काउनुहोस्। \/ अन्यथा, \"NO\" फर्काउनुहोस्।\/ यदि चौराहेको लम्बाई अभाज्य संख्या हो भने, \"YES\" फिर्ता गर्नुहोस्, \/ जसको लम्बाई १ हो, जुन अभाज्य संख्या होइन।\/ उदाहरण, अन्तरालहरूको छेदन (1, 3), (2, 4) (2, 3) हो \/ अन्तरालहरू एक अभाज्य संख्या हो। \/ तपाईँको कार्य यी दुईको अन्तरालको लम्बाइ निर्धारण गर्नु हो कि होइन \/ प्रत्येक दिइएको अन्तरालको लागि, यो मानिएको छ कि यसको सुरुवात यसको अन्त्य भन्दा कम वा बराबर छ।\/ सुरु र अन्त दुवै समावेश गर्दछ। \/ दिइएको अन्तरालहरू बन्द छन् जसको अर्थ अन्तराल (सुरुवात, अन्त) उदाहरणका लागि, अन्तराल = (सुरुवात, अन्त) = (1, 2) ।\/तपाईलाई दुई अन्तरालहरू दिइएको छ, \/\/ >>> intersection([1, 2], [2, 3])\n\/\/ \"NO\"\n\/\/ >>> intersection([-1, 1], [0, 4])\n\/\/ \"NO\"\n\/\/ >>> intersection([-3, -1], [-5, 5])\n\/\/ \"YES\"\nfunction intersection(interval1, interval2){\n","canonical_solution":"function intersection(interval1, interval2) {\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    \/\/ Determine the start and end of the intersection\n    const startIntersection = Math.max(start1, start2);\n    const endIntersection = Math.min(end1, end2);\n\n    \/\/ Calculate the length of the intersection\n    const intersectionLength = endIntersection - startIntersection;\n\n    \/\/ Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    \/\/ Check if the length of the intersection is a prime number\n    return intersectionLength > 0 && isPrime(intersectionLength) ? \"YES\" : \"NO\";\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"},{"task_id":"HumanEval_128","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ नोट: खाली arr को लागि अपरिभाषित फर्काउनुहोस्।\/ प्रत्येक नम्बरको एर्रेमा, १, -१ वा ० द्वारा प्रतिनिधित्व गरिएको। \/ पूर्णांकहरूको परिमाणको योगफल सबै चिन्हहरूको गुणनद्वारा गुणा गरिएको \/तपाईँलाई पूर्णांकको एउटा एर्रे दिइएको छ र तपाईँले फर्काउनु पर्छ \/\/ >>> prod_signs([1, 2, 2, -4])\n\/\/ 9\n\/\/ >>> prod_signs([0, 1])\n\/\/ 0\n\/\/ >>> prod_signs([])\n\/\/ undefined\nfunction prod_signs(arr){\n","canonical_solution":"function prod_signs(arr) {\n    if (arr.length === 0) return undefined;\n\n    let sumOfMagnitudes = 0;\n    let productOfSigns = 1;\n\n    for (let num of arr) {\n        sumOfMagnitudes += Math.abs(num);\n        productOfSigns *= (num === 0 ? 0 : Math.sign(num));\n    }\n\n    return sumOfMagnitudes * productOfSigns;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();"},{"task_id":"HumanEval_129","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ न्यूनतम पथमा जाने कक्षहरूमा मानहरूको क्रमबद्ध सरणी फर्काउँछ। \/ यसको उत्तर अद्वितीय हुने ग्यारेन्टी छ।\/ lst_A[j] = lst_B[j] \/ यस्तो कि lst_A[i] < lst_B[i] र कुनै पनि j (1 <= j < i) को लागि हामीसँग \/ lst_B भन्दा, अर्को शब्दमा, त्यहाँ एक पूर्णांक सूचकांक i (1 <= i <= k) \/ मार्फत (हामी तिनीहरूलाई lst_A र lst_B भन्छौं), lst_A लेक्सिकोग्राफिक रूपमा कम छ \/ आदेशित एरेहरू बनाउनु पछि कक्षहरूमा मानहरू जुन A र B जानुहोस् \/ एउटा पथ A (लम्बाइ k को) एउटा पथ B (लम्बाइ k को) भन्दा सानो मानिन्छ यदि \/ तिमी ग्रिडबाट बाहिर जान सक्दैनौ. \/ आवश्यक रूपमा भिन्न) ।\/ कृपया ध्यान दिनुहोस् कि लम्बाइ k को बाटोको अर्थ हो कि ठीक k कक्षहरू भ्रमण गर्नु (न \/ सेल. \/ अर्को शब्दमा, तपाईं सेलहरू जो तपाईं वर्तमान संग एक किनारा साझा गर्न सक्नुहुन्छ \/ कुनै पनि सेलबाट, र प्रत्येक चरणमा तपाईं कुनै पनि छिमेकी सेलमा जान सक्नुहुन्छ, तपाईँले ग्रिडमा लम्बाइ k को न्यूनतम मार्ग खोज्नुपर्छ। तपाईँ सुरु गर्न सक्नुहुन्छ \/ समावेशी ग्रिडको कक्षहरूमा ठीक एक पटक देखा पर्दछ। \/ ग्रिडको प्रत्येक कक्षमा मान हुन्छ। [१, एन * एन] को दायरामा प्रत्येक पूर्णांक \/एन पङ्क्ति र एन स्तम्भहरू (एन >= 2) र सकारात्मक पूर्णांक k भएको ग्रिड दिइएको छ, \/\/ >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n\/\/ [1, 2, 1]\n\/\/ >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\/\/ [1]\nfunction minPath(grid, k){\n","canonical_solution":"function minPath(grid, k) {\n    const N = grid.length;\n    const directions = [\n        [0, 1], \/\/ right\n        [1, 0], \/\/ down\n        [0, -1], \/\/ left\n        [-1, 0]  \/\/ up\n    ];\n    \n    let minPathResult = Array(k).fill(Infinity);\n\n    function dfs(x, y, path) {\n        if (path.length === k) {\n            \/\/ Check if the current path is lexicographically smaller\n            if (comparePaths(path, minPathResult)) {\n                minPathResult = [...path];\n            }\n            return;\n        }\n\n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                path.push(grid[nx][ny]);\n                dfs(nx, ny, path);\n                path.pop();\n            }\n        }\n    }\n    \n    function comparePaths(pathA, pathB) {\n        for (let i = 0; i < pathA.length; i++) {\n            if (pathA[i] < pathB[i]) return true;\n            if (pathA[i] > pathB[i]) return false;\n        }\n        return false;\n    }\n\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            dfs(i, j, [grid[i][j]]);\n        }\n    }\n\n    return minPathResult;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_130","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ पहिलो n + 1 संख्याहरू Tribonacci अनुक्रमको। \/ तपाईंलाई एउटा गैर-ऋणात्मक पूर्णांक n दिइएको छ, तपाईँले एउटा array फर्काउनु पर्छ \/ = 2 + 3 + 3 = 8 \/ tri(3) = tri(2) + tri(1) + tri(4) \/ tri ((4) = 3 \/ tri(2) = 1 + (2 \/ 2) = 2 \/ उदाहरणका लागि: \/ tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n अनौठो छ भने। \/ tri (n) = 1 + n \/ 2, यदि n सम हो भने। \/ tri(1) = 3 \/ ट्राइबोनाकी अनुक्रम पुनरावृत्ति द्वारा परिभाषित गरिएको छः तर, मानिसहरूलाई थाहा छैन कि ट्राइबोनाची अनुक्रम के हो।\/सबैले फिबोनैचि अनुक्रमलाई जान्दछन्, यसको गहन अध्ययन गणितज्ञहरूले सन् १९५० मा गरेका थिए।\/\/ >>> tri(3)\n\/\/ [1, 3, 2, 8]\nfunction tri(n){\n","canonical_solution":"function tri(n) {\n    if (n < 0) return [];\n    \n    let tribonacci = new Array(n + 1);\n\n    for (let i = 0; i <= n; i++) {\n        if (i === 1) {\n            tribonacci[i] = 3;\n        } else if (i % 2 === 0) {\n            tribonacci[i] = 1 + i \/ 2;\n        } else {\n            tribonacci[i] = \n                (tribonacci[i - 1] !== undefined ? tribonacci[i - 1] : 0) + \n                (tribonacci[i - 2] !== undefined ? tribonacci[i - 2] : 0) + \n                (tribonacci[i + 1] !== undefined ? tribonacci[i + 1] : 0);\n        }\n    }\n\n    return tribonacci;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"},{"task_id":"HumanEval_131","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ यदि सबै अंकहरू सम छन् भने ० फर्काउनुहोस्। \/ सकारात्मक पूर्णांक n दिइएको छ, बेजोड अंकहरूको गुणनफल फर्काउनुहोस्। \/\/ >>> digits(1)\n\/\/ 1\n\/\/ >>> digits(4)\n\/\/ 0\n\/\/ >>> digits(235)\n\/\/ 15\nfunction digits(n){\n","canonical_solution":"function digits(n) {\n    let product = 1;\n    let hasOdd = false;\n\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n \/ 10);\n    }\n\n    return hasOdd ? product : 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"},{"task_id":"HumanEval_132","nl":"npi_Deva","pl":"js","prompt":"\/ जहाँ कम्तिमा एउटा ब्रैकेट उप-क्रममा नेस्टेड छ। \/ फंक्शनले यदि र केवल यदि कोष्ठकहरूको मान्य उप-क्रम छ भने मात्र true फर्काउनु पर्छ ।\/एक प्रकार्य सिर्जना गर्नुहोस् जसले इनपुटको रूपमा एउटा स्ट्रिङ लिन्छ जसमा केवल वर्ग कोष्ठकहरू हुन्छन्।\/\/ >>> is_nested(\"[[]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[]]]]]]][[[[[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[][]\")\n\/\/ false\n\/\/ >>> is_nested(\"[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[[][]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[[]][[\")\n\/\/ true\nfunction is_nested(string){\n","canonical_solution":"function is_nested(string) {\n    let openCount = 0;\n    let nested = false;\n\n    for (let char of string) {\n        if (char === '[') {\n            if (openCount > 0) {\n                nested = true;\n            }\n            openCount++;\n        } else if (char === ']') {\n            if (openCount > 0) {\n                openCount--;\n            }\n        }\n    }\n    \n    return nested && openCount === 0;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_133","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ एरेमा प्रत्येक तत्वलाई माथिल्लो int ((छत) मा पहिलो गोल गर्नुहोस्। \/ तपाईँले दिइएको सरणीमा वर्ग संख्याहरूको योग फर्काउनु पर्छ, \/तपाईँलाई नम्बरहरूको एरे दिइएको छ।\/\/ >>> lst([1.0, 2.0, 3.0])\n\/\/ 14\n\/\/ >>> lst([1.0, 4.0, 9.0])\n\/\/ 98\n\/\/ >>> lst([1.0, 3.0, 5.0, 7.0])\n\/\/ 84\n\/\/ >>> lst([1.4, 4.2, 0.0])\n\/\/ 29\n\/\/ >>> lst([-2.4, 1.0, 1.0])\n\/\/ 6\nfunction sum_squares(lst){\n","canonical_solution":"function sum_squares(lst) {\n    return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"},{"task_id":"HumanEval_134","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ नोटः \"शब्द\" स्पेसद्वारा विभाजित अक्षरहरूको समूह हो।\/ एक शब्द को एक भाग, र अन्यथा गलत। \/ दिइएको स्ट्रिङको वर्णमाला वर्ण हो र  होइन\/ एउटा प्रकार्य सिर्जना गर्नुहोस् जुन अन्तिम वर्ण  भएमा सत्य फर्काउँछ\/\/ >>> check_if_last_char_is_a_letter(\"apple pie\")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n\/\/ true\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e \")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"\")\n\/\/ false\nfunction check_if_last_char_is_a_letter(txt){\n","canonical_solution":"function check_if_last_char_is_a_letter(txt) {\n    if (txt.length === 0) return false;\n    \n    txt = txt.trim();\n    if (txt.length === 0) return false;\n    \n    let parts = txt.split(' ');\n    let lastWord = parts[parts.length - 1];\n    \n    if (lastWord.length === 0) return false;\n    \n    let lastChar = lastWord[lastWord.length - 1];\n    return \/^[a-zA-Z]$\/.test(lastChar);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"apple pi e \"),false);\n}\n\ntest();"},{"task_id":"HumanEval_135","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ दोहोरो मानहरू।\/ कुनै यस्तो तत्व अवस्थित छैन भने फिर्ता -१ दिइएको एर्रेमा समावेश हुनेछैन \/ भन्दा ठूलो वा बराबर छैन तुरुन्तै अघिल्लो तत्व गर्न। यदि \/एक प्रकार्य सिर्जना गर्नुहोस् जसले \/\/ >>> can_arrange([1, 2, 4, 3, 5])\n\/\/ 3\n\/\/ >>> can_arrange([1, 2, 3])\n\/\/ -1\nfunction can_arrange(arr){\n","canonical_solution":"function can_arrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"},{"task_id":"HumanEval_136","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ यदि त्यहाँ कुनै नकारात्मक वा सकारात्मक पूर्णांक छैन भने, तिनीहरूलाई अपरिभाषितको रूपमा फर्काउनुहोस्।\/ सकारात्मक पूर्णांकहरूको एउटा सरणीमा। \/ सबैभन्दा ठूलो ऋणात्मक पूर्णांक हो, र 'b' सबैभन्दा सानो हो \/एक प्रकार्य सिर्जना गर्नुहोस् जसले एउटा एरे (a, b) फर्काउँछ, जहाँ 'a'  हो\/\/ >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n\/\/ [undefined, 1]\n\/\/ >>> largest_smallest_integers([])\n\/\/ [undefined, undefined]\n\/\/ >>> largest_smallest_integers([0])\n\/\/ [undefined, undefined]\nfunction largest_smallest_integers(lst){\n","canonical_solution":"function largest_smallest_integers(lst) {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    \n    lst.forEach(num => {\n        if (num < 0 && (largestNegative === undefined || num > largestNegative)) {\n            largestNegative = num;\n        }\n        if (num > 0 && (smallestPositive === undefined || num < smallestPositive)) {\n            smallestPositive = num;\n        }\n    });\n    \n    return [largestNegative, smallestPositive];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_137","nl":"npi_Deva","pl":"js","prompt":"\/ नोट: यदि वास्तविक संख्यालाई स्ट्रिङको रूपमा प्रतिनिधित्व गरिएको छ भने, फ्लोटिंग प्वाइन्ट हुन सक्छ . वा , \/ यदि मानहरू बराबर छन् भने अपरिभाषित फर्काउनुहोस्। \/ वास्तविक संख्याहरू, र यसको दिइएको चर प्रकारमा ठूलो चर फर्काउँछ। \/एक प्रकार्य सिर्जना गर्नुहोस् जसले पूर्णांक, फ्लोट्स, वा स्ट्रिङ प्रतिनिधित्व गर्दछ \/\/ >>> compare_one(1, 2.5)\n\/\/ 2.5\n\/\/ >>> compare_one(1, \"2,3\")\n\/\/ \"2,3\"\n\/\/ >>> compare_one(\"5,1\", \"6\")\n\/\/ \"6\"\n\/\/ >>> compare_one(\"1\", 1)\n\/\/ undefined\nfunction compare_one(a, b){\n","canonical_solution":"function compare_one(a, b) {\n    \/\/ Function to parse the input into a real number.\n    const parseNum = (val) => {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n            \/\/ Replace comma with dot for parsing\n            let parsed = parseFloat(val.replace(',', '.'));\n            \/\/ If parsing fails, return NaN\n            if (isNaN(parsed)) return NaN;\n            return parsed;\n        }\n        return NaN;\n    };\n\n    \/\/ Get parsed numerical values\n    const numA = parseNum(a);\n    const numB = parseNum(b);\n\n    \/\/ Compare the inputs to determine which is greater\n    if (numA > numB) return a;\n    if (numB > numA) return b;\n\n    \/\/ If values are equal return undefined\n    return undefined;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare_one;\n  assert.deepEqual(candidate(1, 2),2);\n  assert.deepEqual(candidate(1, 2.5),2.5);\n  assert.deepEqual(candidate(2, 3),3);\n  assert.deepEqual(candidate(5, 6),6);\n  assert.deepEqual(candidate(1, \"2,3\"),\"2,3\");\n  assert.deepEqual(candidate(\"5,1\", \"6\"),\"6\");\n  assert.deepEqual(candidate(\"1\", \"2\"),\"2\");\n  assert.deepEqual(candidate(\"1\", 1),undefined);\n}\n\ntest();"},{"task_id":"HumanEval_138","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण \/दिइएको संख्या n लाई ठीक ४ सकारात्मक सम संख्याहरूको योगको रूपमा लेख्न सकिन्छ कि भनेर मूल्याङ्कन गर्नुहोस् \/\/ >>> is_equal_to_sum_even(4)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(6)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(8)\n\/\/ true\nfunction is_equal_to_sum_even(n){\n","canonical_solution":"function is_equal_to_sum_even(n) {\n    \/\/ A number can be expressed as the sum of 4 positive even numbers\n    \/\/ if it is greater than or equal to 8 and is even.\n\n    if (n >= 8 && n % 2 === 0) {\n        return true;\n    }\n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();"},{"task_id":"HumanEval_139","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ जहाँ n > 0 \/ ब्राजिलियन_फ्याक्टोरियल (n) = n! * (n-1)! * (n-2)! * ... * 1! \/ब्राजिलियन फ्याक्टोरियललाई निम्नानुसार परिभाषित गरिएको छ: \/\/ >>> special_factorial(4)\n\/\/ 288\n\/\/ The function will receive an integer as input and should return the special\n\/\/ factorial of this integer.\nfunction special_factorial(n){\n","canonical_solution":"function factorial(num) {\n    if (num <= 1) return 1;\n    return num * factorial(num - 1);\n}\n\nfunction special_factorial(n) {\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();"},{"task_id":"HumanEval_140","nl":"npi_Deva","pl":"js","prompt":"\/ त्यसपछि सबै लगातार स्पेसहरू प्रतिस्थापन गर्नुहोस् - \/ र यदि एउटा स्ट्रिङमा २ भन्दा बढी लगातार स्पेसहरू छन् भने, \/पाठको स्ट्रिंग दिइएको छ, यसमा सबै खाली स्थानहरू अण्डरस्कोरहरूसँग बदल्नुहोस्, \/\/ >>> fix_spaces(\" Example\")\n\/\/ \"Example\"\n\/\/ >>> fix_spaces(\" Example 1\")\n\/\/ \"Example_1\"\n\/\/ >>> fix_spaces(\" Example 2\")\n\/\/ \"_Example_2\"\n\/\/ >>> fix_spaces(\" Example 3\")\n\/\/ \"_Example-3\"\nfunction fix_spaces(text){\n","canonical_solution":"function fix_spaces(text) {\n    return text.trim().replace(\/\\s{2,}\/g, '-').replace(\/\\s\/g, '_');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"},{"task_id":"HumanEval_141","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ - डट पछि सबस्ट्रिंग यी मध्ये एक हुनुपर्दछः ['txt', 'exe', 'dll'] \/ ल्याटिन वर्णमाला ('a'-'z' र 'A'-'Z') ।\/ - डट भन्दा पहिलेको सबस्ट्रिंग खाली हुनु हुँदैन, र यो  बाट अक्षरबाट सुरु हुन्छ\/ - फाइलको नाममा ठ्याक्कै एउटा बिन्दु '.' हुन्छ ।\/ - फाइलको नाममा तीन अंकभन्दा बढी ('0'-'9') हुनुहुँदैन ।\/ पूरा हुन्छन्: \/ एउटा फाइलको नाम मान्य मानिन्छ यदि र केवल यदि सबै निम्न सर्तहरू पूरा भएमा \/ यदि फाइलको नाम मान्य छ भने 'हो' र अन्यथा 'होइन' फर्काउँछ।\/एक प्रकार्य सिर्जना गर्नुहोस् जसले फाइलको नाम प्रतिनिधित्व गर्ने स्ट्रिङ लिन्छ र  फर्काउँछ\/\/ >>> file_name_check(\"example.txt\")\n\/\/ \"Yes\"\n\/\/ >>> file_name_check(\"1example.dll\")\n\/\/ \"No\"\nfunction file_name_check(file_name){\n","canonical_solution":"function file_name_check(file_name) {\n    const validExtensions = ['txt', 'exe', 'dll'];\n    const parts = file_name.split('.');\n\n    if (parts.length !== 2) {\n        return 'No';\n    }\n\n    const [namePart, extensionPart] = parts;\n\n    \/\/ Check that the name part is not empty, starts with a letter, and has at most 3 digits\n    if (namePart.length === 0 || !\/^[a-zA-Z]\/.test(namePart)) {\n        return 'No';\n    }\n\n    const digitCount = (namePart.match(\/\\d\/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n\n    \/\/ Check if the extension is one of the valid ones\n    if (!validExtensions.includes(extensionPart)) {\n        return 'No';\n    }\n\n    return 'Yes';\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"},{"task_id":"HumanEval_142","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ एरेमा प्रविष्टिहरू परिवर्तन गर्नुहोस् जसको अनुक्रमणिका 3 वा 4 को गुणक होइन। फंक्शनले सबै प्रविष्टिहरूको योगफल फर्काउँछ। \/ ३ को गुणक हो र पूर्णांक प्रविष्टिलाई घन बनाउनेछ यदि यसको अनुक्रमणिका ४ को गुणक हो र ३ को गुणक होइन। यो फंक्शनले \/ यो फंक्शनले पूर्णांकहरूको एरे लिनेछ। एर्रेमा सबै प्रविष्टिहरूको लागि, फंक्शनले पूर्णांक प्रविष्टिलाई वर्गमा राख्नुपर्दछ यदि यसको अनुक्रमणिका a हो भने।\/\" \/\/ >>> lst\n\/\/ [1, 2, 3]\n\/\/ >>> lst\n\/\/ []\n\/\/ >>> lst\n\/\/ [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n","canonical_solution":"function sum_squares(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n}\n\ntest();"},{"task_id":"HumanEval_143","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण १: \/ नयाँ स्ट्रिङमा शब्दहरूको क्रम मूलको जस्तै हुनुपर्छ।\/ जसको लम्बाई अभाज्य संख्या हो, \/ र तपाईँले मूल वाक्यबाट शब्दहरू समावेश भएको स्ट्रिङ फर्काउनुपर्छ, \/ वाक्यमा केही शब्दहरू स्पेसद्वारा अलग गरिएको छ, \/तपाईँलाई एउटा वाक्यको प्रतिनिधित्व गर्ने स्ट्रिङ दिइएको छ, \/\/ >>> words_in_sentence(\"This is a test\")\n\/\/ \"is\"\n\/\/ Example 2:\n\/\/ >>> words_in_sentence(\"lets go for swimming\")\n\/\/ \"go for\"\n\/\/ Constraints:\n\/\/ * 1 <= len(sentence) <= 100\n\/\/ * sentence contains only letters\nfunction words_in_sentence(sentence){\n","canonical_solution":"function words_in_sentence(sentence) {\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n\n    return sentence.split(' ')\n                   .filter(word => isPrime(word.length))\n                   .join(' ');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"here is\"),\"is\");\n}\n\ntest();"},{"task_id":"HumanEval_144","nl":"npi_Deva","pl":"js","prompt":"\/ तपाई मान्न सक्नुहुन्छ कि x, र n मान्य भिन्नता हुन्, र शून्यलाई denominator को रुपमा प्रयोग गर्नुहुन्न. \/ <numerator>\/<denominator> जहाँ दुवै संख्या र नामकरण सकारात्मक पूर्णांक हो।x र n दुवै, एउटा भिन्नको स्ट्रिङ प्रतिनिधित्व हो, र निम्न ढाँचा छ, \/ x * n. यदि x * n पूर्णांकमा मूल्याङ्कन हुन्छ र false \/तपाईँको कार्य भनेको एउटा यस्तो फंक्शन लागू गर्नु हो जसले अभिव्यक्तिलाई सरल बनाउनेछ \/\/ >>> simplify(\"1\/5\", \"5\/1\")\n\/\/ true\n\/\/ >>> simplify(\"1\/6\", \"2\/1\")\n\/\/ false\n\/\/ >>> simplify(\"7\/10\", \"10\/2\")\n\/\/ false\nfunction simplify(x, n){\n","canonical_solution":"function simplify(x, n) {\n    const parseFraction = (fraction) => {\n        const [numerator, denominator] = fraction.split('\/').map(Number);\n        return { numerator, denominator };\n    };\n\n    const xFraction = parseFraction(x);\n    const nFraction = parseFraction(n);\n\n    const resultNumerator = xFraction.numerator * nFraction.numerator;\n    const resultDenominator = xFraction.denominator * nFraction.denominator;\n\n    return resultNumerator % resultDenominator === 0;\n}\n\n\/\/ Example usage\nconsole.log(simplify(\"1\/5\", \"5\/1\")); \/\/ true\nconsole.log(simplify(\"1\/6\", \"2\/1\")); \/\/ false\nconsole.log(simplify(\"7\/10\", \"10\/2\")); \/\/ false","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/6\", \"2\/1\"),false);\n  assert.deepEqual(candidate(\"5\/1\", \"3\/1\"),true);\n  assert.deepEqual(candidate(\"7\/10\", \"10\/2\"),false);\n  assert.deepEqual(candidate(\"2\/10\", \"50\/10\"),true);\n  assert.deepEqual(candidate(\"7\/2\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"11\/6\", \"6\/1\"),true);\n  assert.deepEqual(candidate(\"2\/3\", \"5\/2\"),false);\n  assert.deepEqual(candidate(\"5\/2\", \"3\/5\"),false);\n  assert.deepEqual(candidate(\"2\/4\", \"8\/4\"),true);\n  assert.deepEqual(candidate(\"2\/4\", \"4\/2\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"5\/1\"),true);\n  assert.deepEqual(candidate(\"1\/5\", \"1\/5\"),false);\n}\n\ntest();"},{"task_id":"HumanEval_145","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ मूल एरेमा तिनीहरूको अनुक्रमणिकाको आधारमा तिनीहरूलाई अर्डर गर्नुहोस्। \/ नोटः यदि त्यहाँ धेरै वस्तुहरू छन् भने तिनीहरूको अंकहरूको समान योग, \/ बढ्दो क्रममा तिनीहरूको अंकहरूको योग अनुसार। \/एक प्रकार्य लेख्नुहोस् जसले दिइएको पूर्णांकहरूको सरणी क्रमबद्ध गर्दछ \/\/ >>> order_by_points([1, 11, -1, -11, -12])\n\/\/ [-1, -11, 1, -12, 11]\n\/\/ >>> order_by_points([])\n\/\/ []\nfunction order_by_points(nums){\n","canonical_solution":"function order_by_points(nums) {\n    function sumOfDigits(n) {\n        \/\/ Absolute value to ensure digits are summed correctly for negative numbers\n        return Math.abs(n).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n\n    nums.sort((a, b) => {\n        const sumA = sumOfDigits(a);\n        const sumB = sumOfDigits(b);\n        if (sumA === sumB) {\n            return 0; \/\/ Maintain original order\n        }\n        return sumA - sumB;\n    });\n\n    return nums;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"},{"task_id":"HumanEval_146","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ कुनै संख्याको पहिलो र अन्तिम अंकहरू अनौठो हुन्छन् (1, 3, 5, 7, 9) ।\/ एरेमा एलिमेन्टको संख्या जुन १० भन्दा ठूलो छ र दुबै \/एक प्रकार्य लेख्नुहोस् जसले संख्याहरूको एरेलाई इनपुट र रिटर्नको रूपमा लिन्छ \/\/ >>> specialFilter([15, -73, 14, -15])\n\/\/ 1\n\/\/ >>> specialFilter([33, -2, -3, 45, 21, 109])\n\/\/ 2\nfunction specialFilter(nums){\n","canonical_solution":"function specialFilter(nums) {\n    return nums.reduce((count, num) => {\n        if (Math.abs(num) > 10) {\n            const numStr = Math.abs(num).toString();\n            const firstDigit = parseInt(numStr[0]);\n            const lastDigit = parseInt(numStr[numStr.length - 1]);\n            if ([1, 3, 5, 7, 9].includes(firstDigit) && [1, 3, 5, 7, 9].includes(lastDigit)) {\n                return count + 1;\n            }\n        }\n        return count;\n    }, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();"},{"task_id":"HumanEval_147","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ र a[i] + a[j] + a[k] ३ को गुणक हो। \/ a को ट्रिपलको संख्या (a[i], a[j], a[k]) फर्काउनुहोस् जहाँ i < j < k, \/ प्रत्येक i (1 ≤ i ≤ n) को लागि, a[i] = i * i - i + 1 को मान। \/तपाईलाई सकारात्मक पूर्णांक n दिइएको छ. तपाई पूर्णांक सरणी a को लम्बाई n को सिर्जना गर्नु पर्छ. \/\/ >>> get_max_triples(5)\n\/\/ 1\n\/\/ Explanation: \n\/\/ a = [1, 3, 7, 13, 21]\n\/\/ The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n","canonical_solution":"function get_max_triples(n) {\n    \/\/ Step 1: Create the integer array 'a'\n    let a = new Array(n);\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    \/\/ Step 2: Count the triples\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"},{"task_id":"HumanEval_148","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ ग्रहको नाम सही छैन।\/ फंक्शनले खाली एर्रे फर्काउनु पर्छ यदि planet1 वा planet2 \/ सूर्यको निकटता।\/ ग्रह १ को कक्ष र ग्रह २ को कक्ष बीच स्थित छ, क्रमबद्ध \/ फंक्शनले सबै ग्रहहरू समावेश गरेको एउटा एर्रे फर्काउनु पर्छ जसको कक्षाहरू \/ एउटा फंक्शन लेख्नुहोस् जसले दुई ग्रहको नामलाई string planet1 र planet2 को रूपमा लिन्छ। \/ युरेनस, नेप्च्यून।\/ बुध हो, अर्को शुक्र हो, त्यसपछि पृथ्वी, मंगल, बृहस्पति, शनि, सौर्यमण्डलमा आठवटा ग्रह छन्, जुन सूर्यभन्दा नजिक छन् ।\/\/ >>> bf(\"Jupiter\", \"Neptune\")\n\/\/ [\"Saturn\", \"Uranus\"]\n\/\/ >>> bf(\"Earth\", \"Mercury\")\n\/\/ \"Venus\"\n\/\/ >>> bf(\"Mercury\", \"Uranus\")\n\/\/ [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n","canonical_solution":"function bf(planet1, planet2) {\n    const planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    const start = Math.min(index1, index2) + 1;\n    const end = Math.max(index1, index2);\n\n    return planets.slice(start, end);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"},{"task_id":"HumanEval_149","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ तपाईं सबै शब्दहरू एउटै लम्बाइ हुनेछ भन्ने मान्न सक्छ।\/ फंक्शनले क्रमबद्ध क्रममा स्ट्रिङहरूको एरे फर्काउनु पर्छ। \/ यदि दुई शब्दहरूको लम्बाई बराबर छ भने, एरेलाई वर्णमाला क्रममा क्रमबद्ध गर्नुहोस्। \/ त्यो नियम द्वारा क्रमबद्ध एरे फर्काउनु पर्छ। \/ क्रममा एरे प्रत्येक शब्द को लम्बाइ द्वारा बढ्दो हुनुपर्छ, र तपाईं \/ र यसमा डुप्लिकेटहरू हुन सक्छन्।\/ एरे सधैँ स्ट्रिंगहरूको एरे हुन्छ र कहिल्यै संख्याहरूको एरे हुँदैन, \/ र क्रमबद्ध क्रम संग परिणाम एरे फर्काउँछ, \/ यो देखि अनौठो लम्बाइ छ कि तार मेटाउँछ, \/एक प्रकार्य लेख्नुहोस् जसले स्ट्रिंगहरूको सरणीलाई प्यारामिटरको रूपमा स्वीकार गर्दछ, \/\/ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n\/\/ [\"aa\"]\n\/\/ >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n\/\/ [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n","canonical_solution":"function sorted_list_sum(lst) {\n    return lst\n        .filter(word => word.length % 2 === 0)\n        .sort((a, b) => {\n            if (a.length === b.length) {\n                return a.localeCompare(b);\n            }\n            return a.length - b.length;\n        });\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"},{"task_id":"HumanEval_150","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ एउटा अभाज्य संख्या हो र y को मान फर्काउनु पर्छ अन्यथा। \/एक साधारण कार्यक्रम जसले x को मान फर्काउनु पर्छ यदि n  हो भने\/\/ >>> x_or_y(7, 34, 12)\n\/\/ 34\n\/\/ >>> x_or_y(15, 8, 5)\n\/\/ 5\nfunction x_or_y(n, x, y){\n","canonical_solution":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\nfunction x_or_y(n, x, y) {\n    return isPrime(n) ? x : y;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();"},{"task_id":"HumanEval_151","nl":"npi_Deva","pl":"js","prompt":"\/ एरेमा जो अनौठो छ. नकारात्मक वा पूर्णांक नभएका संख्याहरूलाई बेवास्ता गर्नुहोस्. \/संख्याहरूको एरे दिइएको छ, संख्याहरूको वर्गहरूको योग फिर्ता गर्नुहोस् \/\/ >>> double_the_difference([1, 3, 2, 0])\n\/\/ 10\n\/\/ >>> double_the_difference([-1, -2, 0])\n\/\/ 0\n\/\/ >>> double_the_difference([9, -2])\n\/\/ 81\n\/\/ >>> double_the_difference([0])\n\/\/ 0\n\/\/ If the input array is empty, return 0.\nfunction double_the_difference(lst){\n","canonical_solution":"function double_the_difference(lst) {\n    return lst.reduce((sum, num) => {\n        if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n            return sum + num * num;\n        }\n        return sum;\n    }, 0);\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"},{"task_id":"HumanEval_152","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ मान ० हो, र यदि होइन भने मान अनुमान र स्कोर बीचको निरपेक्ष भिन्नता हो। \/ समान लम्बाइको एउटा सरणी फर्काउँदछ जुन प्रत्येक अनुमान कति टाढा थियो भनेर दर्शाउँछ। यदि तिनीहरूले सही अनुमान गरेका छन् भने, \/ तपाईंलाई दुईवटा स्कोर र अनुमानको सरणी दिइएको छ, जहाँ प्रत्येक सूचकांकले मेल खान्छ।\/ तपाईंको काम भनेको एक व्यक्तिले सही रूपमा धेरै खेलहरूको नतिजा अनुमान गरेको छ कि छैन भनेर निर्धारण गर्नु हो।\/ निश्चित रूपमा उल्लेख गर्न र तुलना गर्न लायक छ। यस घटनाको बारेमा अन्ततः थाहा हुन्छ।\/मलाई लाग्छ हामी सबै सम्झना त्यो भावना जब केही लामो प्रतीक्षा को परिणाम\/\/ >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\/\/ [0, 0, 0, 0, 3, 3]\n\/\/ >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\/\/ [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n","canonical_solution":"function compare(game, guess) {\n    return game.map((score, index) => Math.abs(score - guess[index]));\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"},{"task_id":"HumanEval_153","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ (यसको शक्ति -१ हो) ।\/ 'Slices.SErviNGSliCes' फर्काउँछ किनकि 'SErviNGSliCes' सबैभन्दा बलियो विस्तार हो ।\/ विस्तारहरूः ['सेर्विंग्सलिसिस', 'चीज', 'स्टुफ्ड'] त्यसो भए तपाईले उदाहरणका लागि, यदि तपाईँलाई \"Slices\" को रूपमा वर्ग र  को एउटा सरणी दिइएको छ भने\/ एरेमा पहिलो आउने एउटा छनौट गर्नुहोस्।\/ यदि त्यहाँ दुई वा दुई भन्दा बढी विस्तारहरू छन् भने, तपाईंले \/ ढाँचाः ClassName.StrongestExtensionName. \/ तपाईँले सबैभन्दा बलियो विस्तार खोज्नु पर्छ र यसमा एउटा स्ट्रिङ फर्काउनु पर्छ \/ विस्तारको नाममा, शक्ति CAP - SM को अंशद्वारा दिइएको छ। \/ विस्तारको नाममा अक्षरहरू, र SM लाई सानो अक्षरहरूको संख्या मान्नुहोस् \/ विस्तारको शक्ति निम्नानुसार छ: CAP माथिल्लो अक्षरको संख्या हो ।\/ विस्तारहरू कक्षामा अतिरिक्त वर्गहरू लोड गर्न प्रयोग गर्न सकिन्छ।\/तपाईँलाई एउटा वर्गको नाम (एक स्ट्रिङ) र विस्तारहरूको एउटा सरणी दिइनेछ ।\/\/ >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\/\/ \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n","canonical_solution":"function Strongest_Extension(class_name, extensions) {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    extensions.forEach(extension => {\n        let capCount = 0;\n        let smCount = 0;\n\n        for (let char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n\n        let strength = capCount - smCount;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    });\n\n    return `${class_name}.${strongestExtension}`;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();"},{"task_id":"HumanEval_154","nl":"npi_Deva","pl":"js","prompt":"तपाईँलाई २ शब्द दिइएको छ. तपाईँले यदि दोस्रो शब्द वा यसको कुनै पनि घुमाव पहिलो शब्दमा एउटा सबस्ट्रिंग हो भने सत्य फर्काउनु पर्छ \/\/ >>> cycpattern_check(\"abcd\", \"abd\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"hello\", \"ell\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"whassup\", \"psus\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"abab\", \"baa\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"efef\", \"eeff\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"himenss\", \"simen\")\n\/\/ true\nfunction cycpattern_check(a, b){\n","canonical_solution":"function cycpattern_check(a, b) {\n    if (b.length > a.length) return false;\n    \n    let currentRotation = b;\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(currentRotation)) {\n            return true;\n        }\n        currentRotation = currentRotation.slice(1) + currentRotation[0];\n    }\n    \n    return false;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();"},{"task_id":"HumanEval_155","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/एक पूर्णांक दिइएको छ. क्रमशः सम र विषम अंकहरूको संख्या भएको एरे फर्काउनुहोस्। \/\/ >>> even_odd_count(-12)\n\/\/ [1, 1]\n\/\/ >>> even_odd_count(123)\n\/\/ [1, 2]\nfunction even_odd_count(num){\n","canonical_solution":"function even_odd_count(num) {\n    \/\/ Convert the number to a string and take the absolute value for negative numbers\n    const numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n\n    \/\/ Loop through each digit in the string\n    for (let char of numStr) {\n        \/\/ Convert the character back to a number\n        let digit = parseInt(char, 10);\n        \/\/ Check if the digit is even or odd\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_156","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू: \/ प्रतिबन्धहरू: १ <= संख्या <= १००० \/ र यसलाई लघु अक्षरमा फर्काउनुहोस्।\/एक सकारात्मक पूर्णांक दिइएको छ, यसको रोमन अंक बराबर स्ट्रिंगको रूपमा प्राप्त गर्नुहोस्, \/\/ >>> int_to_mini_roman(19)\n\/\/ \"xix\"\n\/\/ >>> int_to_mini_roman(152)\n\/\/ \"clii\"\n\/\/ >>> int_to_mini_roman(426)\n\/\/ \"cdxxvi\"\nfunction int_to_mini_roman(number){\n","canonical_solution":"function int_to_mini_roman(number) {\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n    \n    let result = '';\n    for (const { value, numeral } of romanNumerals) {\n        while (number >= value) {\n            result += numeral;\n            number -= value;\n        }\n    }\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"},{"task_id":"HumanEval_157","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ ९० डिग्री।\/ एक समकोण त्रिभुज एक त्रिकोण हो जसमा एक कोण समकोण हो वा \/ पक्षहरू एक दायाँ-कोण त्रिभुज बनाउँछ, अन्यथा गलत। \/एक त्रिकोणको तीन पक्ष को लम्बाई दिइएको. यदि तीन \/\/ >>> right_angle_triangle(3, 4, 5)\n\/\/ true\n\/\/ >>> right_angle_triangle(1, 2, 3)\n\/\/ false\nfunction right_angle_triangle(a, b, c){\n","canonical_solution":"function right_angle_triangle(a, b, c) {\n    \/\/ Sort the sides to ensure the largest side is at the end (potential hypotenuse)\n    let sides = [a, b, c].sort((x, y) => x - y);\n    \n    \/\/ Check the Pythagorean theorem to determine if it's a right-angled triangle\n    return sides[0]**2 + sides[1]**2 === sides[2]**2;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"},{"task_id":"HumanEval_158","nl":"npi_Deva","pl":"js","prompt":"\/ अक्षरहरू, लेक्सिकोग्राफिक क्रममा पहिलो आउँछ कि एक फिर्ता। यदि बहुविध स्ट्रिङहरूमा अधिकतम संख्यामा अद्वितीय अक्षरहरू छन् भने \/ एरेमा विभिन्न शब्दहरू छन्. अधिकतम संख्याको साथ शब्द फिर्ता गर्नुहोस् \/ एउटा प्रकार्य लेख्नुहोस् जसले स्ट्रिंगहरूको एरे स्वीकार गर्दछ।\/\/ >>> find_max([\"name\", \"of\", \"string\"])\n\/\/ \"string\"\n\/\/ >>> find_max([\"name\", \"enam\", \"game\"])\n\/\/ \"enam\"\n\/\/ >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\/\/ \"aaaaaaa\"\nfunction find_max(words){\n","canonical_solution":"function find_max(words) {\n    function uniqueCharacterCount(word) {\n        const uniqueChars = new Set(word);\n        return uniqueChars.size;\n    }\n\n    let maxUniqueCount = -1;\n    let result = \"\";\n\n    words.forEach(word => {\n        const currentUniqueCount = uniqueCharacterCount(word);\n        if (currentUniqueCount > maxUniqueCount || \n            (currentUniqueCount === maxUniqueCount && word < result)) {\n            maxUniqueCount = currentUniqueCount;\n            result = word;\n        }\n    });\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"},{"task_id":"HumanEval_159","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरण: \/ यदि त्यहाँ पर्याप्त बाँकी गाजर छैन भने, तपाईं सबै बाँकी गाजर खानुहुनेछ, तर अझै भोकै रहनुहुनेछ। \/ खाना खाइसकेपछि बाँकी गाजरको संख्या ] \/ तपाईंले खाना खाएपछि एक किसिमको [ खाएको गाजरको कुल संख्या, \/ तर अब तपाईंले दिनको भोजन पूरा गर्न थप गाजर खानुपर्छ।\/तपाईँ एउटा भोको खरगोश हुनुहुन्छ, र तपाईंले पहिले नै गाजरको एक निश्चित संख्या खाइसक्नुभएको छ, \/\/ >>> eat(5, 6, 10)\n\/\/ [11, 4]\n\/\/ >>> eat(4, 8, 9)\n\/\/ [12, 1]\n\/\/ >>> eat(1, 10, 10)\n\/\/ [11, 0]\n\/\/ >>> eat(2, 11, 5)\n\/\/ [7, 0]\n\/\/ Variables:\n\/\/ @number : integer\n\/\/ the number of carrots that you have eaten.\n\/\/ @need : integer\n\/\/ the number of carrots that you need to eat.\n\/\/ @remaining : integer\n\/\/ the number of remaining carrots thet exist in stock\n\/\/ Constrain:\n\/\/ * 0 <= number <= 1000\n\/\/ * 0 <= need <= 1000\n\/\/ * 0 <= remaining <= 1000\n\/\/ Have fun :)\nfunction eat(number, need, remaining){\n","canonical_solution":"function eat(number, need, remaining) {\n    const carrotsToEat = Math.min(need, remaining);\n    const totalEaten = number + carrotsToEat;\n    const carrotsLeft = remaining - carrotsToEat;\n    return [totalEaten, carrotsLeft];\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();"},{"task_id":"HumanEval_160","nl":"npi_Deva","pl":"js","prompt":"\/ अपरेटर एर्रेमा कम्तिमा एउटा अपरेटर हुन्छ, र अपरेन्ड एर्रेमा कम्तिमा दुई अपरेन्ड हुन्छ।\/ अपरेन्ड गैर-नकारात्मक पूर्णांकहरूको एर्रे हो। \/ संचालक सरणीको लम्बाई अपरेन्ड सरणीको लम्बाई माइनस एक बराबर हुन्छ।\/ नोट: \/ => परिणाम = 9 \/ परिणाम = 2 + 3 * 4 - 5 \/ array = [२, ३, ४, ५] \/ अपरेटर ['+', '*', '-'] \/ उदाहरण: \/ एक्सपोनेंटिएसन (**) \/ फ्लोर डिभिजन ( \/\/ ) \/ गुणन (*) \/ घटाउने ( - ) \/ थप (+) \/ मूलभूत बीजगणित परिचालनहरू: \/ अभिव्यक्ति र यो अभिव्यक्ति को मूल्यांकन फर्काउनुहोस्। \/ दोस्रो एर्रे पूर्णांकहरूको एर्रे हो। दुई दिइएको एर्रेहरू प्रयोग गरी बीजगणित निर्माण गर्नुहोस् \/ दुई एरे अपरेटर र अपरेन्ड दिइएको छ। पहिलो एरेमा आधारभूत बीजगणित अपरेसनहरू छन्, र function do_algebra(operator, operand){\n","canonical_solution":"function do_algebra(operator, operand) {\n    let expression = operand[0].toString();\n    \n    for (let i = 0; i < operator.length; i++) {\n        let op = operator[i];\n        let currentOperand = operand[i + 1];\n        \n        \/\/ Replace floor division symbol '\/\/' with actual JavaScript behavior\n        if (op === '\/\/') {\n            expression += `Math.floor(${currentOperand})`;\n        } else {\n            expression += ` ${op} ${currentOperand}`;\n        }\n    }\n    \n    \/\/ Evaluate the resulting expression\n    let result = eval(expression);\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"\/\/\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"},{"task_id":"HumanEval_161","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणहरू \/ फंक्शनले परिणामको स्ट्रिंग फर्काउनु पर्छ। \/ यदि string मा कुनै अक्षर छैन भने string उल्टाउनुहोस्. \/ अन्यथा यसलाई जस्ताको तस्तै राख्नुस्।\/ यदि s[i] अक्षर हो भने, यसको केसलाई तलबाट माथि वा विसेर वा उल्टो गर्नुहोस्, \/तपाईँलाई एउटा स्ट्रिंग दिइएको छ.\/\/ >>> solve(\"1234\")\n\/\/ \"4321\"\n\/\/ >>> solve(\"ab\")\n\/\/ \"AB\"\n\/\/ >>> solve(\"#a@C\")\n\/\/ \"#A@c\"\nfunction solve(s){\n","canonical_solution":"function solve(s) {\n    let hasLetter = false;\n    let result = '';\n\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (\/[a-zA-Z]\/.test(char)) {\n            hasLetter = true;\n            if (char === char.toLowerCase()) {\n                result += char.toUpperCase();\n            } else {\n                result += char.toLowerCase();\n            }\n        } else {\n            result += char;\n        }\n    }\n\n    if (!hasLetter) {\n        return result.split('').reverse().join('');\n    }\n\n    return result;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();"},{"task_id":"HumanEval_162","nl":"npi_Deva","pl":"js","prompt":"\/ यदि 'text' खाली स्ट्रिङ हो भने, undefined फर्काउनुहोस्. \/एक स्ट्रिंग 'text' दिइएको छ, यसको md5 ह्यास बराबर स्ट्रिंग फिर्ता गर्नुहोस्।\/\/ >>> string_to_md5(\"Hello world\")\n\/\/ \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n","canonical_solution":"const crypto = require('crypto');\n\nfunction string_to_md5(text) {\n    if (text === \"\") {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\");\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\ntest();"},{"task_id":"HumanEval_163","nl":"npi_Deva","pl":"js","prompt":"\/ उदाहरणका लागि: \/ र b, बढ्दो क्रममा। \/ दुई सकारात्मक पूर्णांक a र b दिइएको छ, a र b बीचको सम अंक फिर्ता गर्नुहोस् \/\/ >>> generate_integers(2, 8)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(8, 2)\n\/\/ [2, 4, 6, 8]\n\/\/ >>> generate_integers(10, 14)\n\/\/ []\nfunction generate_integers(a, b){\n","canonical_solution":"function generate_integers(a, b) {\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let evenDigits = [];\n\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {\n            evenDigits.push(i);\n        }\n    }\n\n    return evenDigits;\n}","tests":"const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();"}]