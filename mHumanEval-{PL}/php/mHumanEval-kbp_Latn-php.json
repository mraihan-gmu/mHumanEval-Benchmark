[{"task_id":"HumanEval_0","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ kɩlɛmʋʋ yɔɔ.\/\/Pɩsa nɛ ɖɩtɩlɩ se ɖɩkpaɣ ɛzɩ mayaɣ ŋga yɔ, ɖɩnaɣ se mayaɣ ŋga kɛwɛna ndɩ nɛ mayaɣ ŋga.\/\/ >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)\n\/\/ false\n\/\/ >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n\/\/ true\nfunction has_close_elements($numbers, $threshold) {\n","canonical_solution":"function has_close_elements($numbers, $threshold) {\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count; $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return has_close_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.95) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.8) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 1.0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 0.5) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_1","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Taawɛɛna kɩ-tɛ matʋ natʋyʋ.\/\/Kpɛndɩɣna ɖama nɛ pɩfɛyɩna ɖama taa nɛ pɩfɛyɩna ɖama taa nɛ pɩfɛyɩna ɖama taa.\/\/Pɩtɛ lɛ, ŋpɩzɩɣ ŋlɩzɩ tɔmpiye nɖɩ nɛ ŋyele nɛ ɖɩpɩsɩ tɔmpiye nɖɩ ɖɩ-tɛ matʋ.\/\/Tʊma ana a-tɛ pɩlɩna ɛyʊ kʊyʊmʊm tɛ kʊyʊmʊm tɛ kʊyʊmʊm tɛ kʊyʊmʊm tɛ kʊyʊmʊm tɛ kʊyʊmʊm tɛ kʊyʊmʊm tɛ kʊyʊmʊm.\/\/ >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n\/\/ array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string) {\n","canonical_solution":"function separate_paren_groups($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $groups = [];\n    $balance = 0;\n    $currentGroup = '';\n\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n        $currentGroup .= $char;\n\n        if ($char === '(') {\n            $balance++;\n        } elseif ($char === ')') {\n            $balance--;\n        }\n\n        if ($balance === 0 && $currentGroup !== '') {\n            $groups[] = $currentGroup;\n            $currentGroup = '';\n        }\n    }\n\n    return $groups;\n}","tests":"function candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_2","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ: (C.1)\/\/(Paa ɛzɩmtaa lɛ, pɩkazɩ hɔɔlʋʋ ŋgʋ kɩkɩlɩɣ 1 yɔ).\/\/nɛ ɛyʊ hɔɔlʊʊ (ɛyʊ kɩlɩm hɔɔlʊʊ ŋgʊ kɩ-taa ɛfɛyɩ yɔ) nɛ decimals \/\/Ye ɖɩkpaɣ nɛ ɖɩkpaɣ floatɩyɔm nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ.\/\/ >>> truncate_number(3.5)\n\/\/ 0.5\nfunction truncate_number($number) {\n","canonical_solution":"function truncate_number($number) {\n    $integerPart = floor($number);  \/\/ Get the integer part using floor\n    return $number - $integerPart;  \/\/ Subtract the integer part from the original number to get the decimal part\n}","tests":"function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_3","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, pɩpɩsɩɣ false.\/\/Pɩwɛɛ se ŋtɩlɩ mbʋ pɩ-yɔɔ ŋtɩŋna nɛ ŋla tʋmɩyɛ nɖɩ yɔ.\/\/Pʊtɔbʊʊ se ŋha-ŋ liidiye nɛ ŋhɛyɩ-ɖɩ liidiye nɖɩ ŋwɛna yɔ ɖɩ-taa.\/\/ >>> below_zero(array(1, 2, 3))\n\/\/ false\n\/\/ >>> below_zero(array(1, 2, -4, 5))\n\/\/ true\nfunction below_zero($operations) {\n","canonical_solution":"function below_zero($operations) {\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return below_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -3, 1, 2, -3)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -2, 2, -2, 5, -5, 4, -4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_4","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/MAD = average. x - x_mean. \/\/Ɛyʊ nɛ ɛ-tɛ cɛcɛsɩ (ɛzɩma pɩwɛ yɔ, pɩkɛna ɛ-tɛ cɛcɛsɩ): \/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Pɩtɛ tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ yɔ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ yɔ.\/\/Pɩcɔ nɛ ŋpɩzɩ ŋlɩzɩ kɩ-tɛ lɛɣzʋʋ lɛ, ŋpɩzɩɣ ŋlɩzɩ kɩ-tɛ lɛɣzʋʋ kɩ-tɛ lɛɣzʋʋ.\/\/ >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))\n\/\/ 1.0\nfunction mean_absolute_deviation($numbers) {\n","canonical_solution":"function mean_absolute_deviation($numbers) {\n    $n = count($numbers);\n    if ($n == 0) return 0;\n    \n    $mean = array_sum($numbers) \/ $n;\n    $absoluteDifferences = array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers);\n    \n    return array_sum($absoluteDifferences) \/ $n;\n}","tests":"function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_5","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ takayɩhayʋʋ \"Tɔm ndʋ tɩ-taa paayɔɔdɩ tɔmpiye nɖɩ yɔ\" ñɩŋgʋ yɔɔ.\/\/ >>> intersperse(array(), 4)\n\/\/ array()\n\/\/ >>> intersperse(array(1, 2, 3), 4)\n\/\/ array(1, 4, 2, 4, 3)\nfunction intersperse($numbers, $delimeter) {\n","canonical_solution":"function intersperse($numbers, $delimeter) {\n    if (empty($numbers)) {\n        return $numbers;\n    }\n    $result = array();\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        $result[] = $numbers[$i];\n        if ($i < $count - 1) {\n            $result[] = $delimeter;\n        }\n    }\n    return $result;\n}","tests":"function candidate(...$args) {\n    return intersperse(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), 7) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 2), 8) !== array(5, 8, 6, 8, 3, 8, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 2, 2), 2) !== array(2, 2, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_6","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɖɩkpaɣ ɛzɩ (() (()) yɔ, pɩtalɩɣ nabʊlɛ nɛ pɩtalɩ nabʊlɛ nɛ ((())) lɛ, nabʊlɛ.\/\/Paa samaɣ ŋga lɛ, ka-taa lɛ, ŋlɩzɩ ka-taa tɔm kɩcɛyɩtʋ ndʋ tɩ-taa ŋpɩzɩɣ nɛ ŋla yɔ.\/\/Tʊma ana a-tɛ pɩlɩna ɛyʊ kʊyʊmʊm yɔɔ nɛ ɛ-tɛ kʊyʊmʊm tɛ kʊyʊmʊm yɔɔ.\/\/ >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n\/\/ array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n","canonical_solution":"function parse_nested_parens($paren_string) {\n    $groups = explode(' ', $paren_string);\n    $results = [];\n\n    foreach ($groups as $group) {\n        $max_depth = 0;\n        $current_depth = 0;\n\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] === '(') {\n                $current_depth++;\n                if ($current_depth > $max_depth) {\n                    $max_depth = $current_depth;\n                }\n            } elseif ($group[$i] === ')') {\n                $current_depth--;\n            }\n        }\n\n        $results[] = $max_depth;\n    }\n\n    return $results;\n}","tests":"function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_7","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ takayɩhayʋʋ kɩsɛsɛtʊ ñɩŋgʋ yɔɔ .\/\/ >>> filter_by_substring(array(), \"a\")\n\/\/ array()\n\/\/ >>> filter_by_substring(array(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n\/\/ array(\"abc\", \"bacd\", \"array\")\nfunction filter_by_substring($strings, $substring) {\n","canonical_solution":"function filter_by_substring($strings, $substring) {\n    $filtered = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $substring) !== false) {\n            $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}","tests":"function candidate(...$args) {\n    return filter_by_substring(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"), \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_8","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩwɛɛ se pɛtɛyɩ kɩ-taa kɩ-tɩ yɔɔ nɛ kɩ-taa kɩ-tɩ yɔɔ nɛ kɩ-taa kɩ-tɩ yɔɔ nɛ kɩ-taa kɩ-tɩ yɔɔ nɛ kɩ-taa kɩ-tɩ yɔɔ.\/\/Pɩtɛ lɛ, ɖɩkpaɣ ɛyʊ weyi ɛ-tɛ ɛyʊ wɛtʊ tɩŋa yɔ nɛ ɖɩpɩsɩ ɛyʊ weyi ɛ-tɛ ɛyʊ wɛtʊ tɩŋa yɔ.\/\/ >>> sum_product(array())\n\/\/ array(0, 1)\n\/\/ >>> sum_product(array(1, 2, 3, 4))\n\/\/ array(10, 24)\nfunction sum_product($numbers) {\n","canonical_solution":"function sum_product($numbers) {\n    $sum = 0;\n    $product = 1;\n    \n    foreach ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n    \n    return array($sum, $product);\n}","tests":"function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_9","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɩmʋna se ŋla mbʋ.\/\/Pɩlɩna ɛyʊ kʊyʊmʊʊ yɔɔ lɛ, ɛyʊ kʊyʊmʊ ŋgʊ kɩlɩna kʊyʊmʊʊ ŋgʊ kɩ-tɛ alɩwaatʊ taa yɔ.\/\/ >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))\n\/\/ array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers) {\n","canonical_solution":"function rolling_max($numbers) {\n    $result = [];\n    $current_max = null;\n\n    foreach ($numbers as $number) {\n        if ($current_max === null || $number > $current_max) {\n            $current_max = $number;\n        }\n        $result[] = $current_max;\n    }\n\n    return $result;\n}","tests":"function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1)) !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_10","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/- Tɩŋgaɣ nɛ ŋtɛzɩna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.\/\/- Wɩlɩ ɛzɩma ŋpɩzɩɣ ŋla nɛ ŋtɛzɩna tɔmpiye nɖɩ ɖɩ-taa ŋtɩŋna yɔ.\/\/Pɩtɛ lɛ, ɛyʊ ɛ-tɛ tɔm kpɛlɛkʊʊ tʊmɩyɛ kɛlɛ:\/\/Ñɩnɩ palindrome kɩpɩɣlʋʋ ŋgʋ kɩpaɣzɩɣna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye yɔ.\/\/ >>> make_palindrome(\"\")\n\/\/ \"\"\n\/\/ >>> make_palindrome(\"cat\")\n\/\/ \"catac\"\n\/\/ >>> make_palindrome(\"cata\")\n\/\/ \"catac\"\nfunction make_palindrome($string) {\n","canonical_solution":"function make_palindrome($string) {\n    $n = strlen($string);\n    if ($n == 0) {\n        return \"\";\n    }\n    \n    \/\/ Check for the longest palindrome suffix\n    for ($i = $n; $i >= 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n            break;\n        }\n    }\n    \n    \/\/ Get the prefix before the palindromic suffix\n    $prefix = substr($string, 0, $i);\n    \n    \/\/ Append the reverse of prefix to the end of the original string\n    return $string . strrev($prefix);\n}\n\n\/\/ Helper function to check if a string is a palindrome\nfunction is_palindrome($s) {\n    return $s === strrev($s);\n}","tests":"function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_11","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Palakɩ XOR binary tɔm nɛ pɩpɩsɩɣ ɖɔɖɔ pɩ-tɛ lɩmaɣzɩyɛ ɛzɩ tɔmpiye yɔ.\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/ >>> string_xor(\"010\", \"110\")\n\/\/ \"100\"\nfunction string_xor($a, $b) {\n","canonical_solution":"function string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] === $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}","tests":"function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_12","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-lɛ kɩlɛ kɩlɛ kɩlɛ kɩlɛ kɩlɛ kɩlɛ.\/\/Pɩtɛ pɩlɩʋ taa lɛ, pɩpɩsɩɣ kɩ-kɩɖaɣlɩm.\/\/ >>> longest(array())\n\/\/ null\n\/\/ >>> longest(array(\"a\", \"b\", \"c\"))\n\/\/ \"a\"\n\/\/ >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\/\/ \"ccc\"\nfunction longest($strings) {\n","canonical_solution":"function longest($strings) {\n    if (empty($strings)) {\n        return null;\n    }\n\n    $longestString = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longestString)) {\n            $longestString = $string;\n        }\n    }\n\n    return $longestString;\n}","tests":"function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_13","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ kɩlɛlʋʋ\/\/ >>> greatest_common_divisor(3, 5)\n\/\/ 1\n\/\/ >>> greatest_common_divisor(25, 15)\n\/\/ 5\nfunction greatest_common_divisor($a, $b) {\n","canonical_solution":"function greatest_common_divisor($a, $b) {\n    while ($b != 0) {\n        $t = $b;\n        $b = $a % $b;\n        $a = $t;\n    }\n    return $a;\n}","tests":"function candidate(...$args) {\n    return greatest_common_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 7) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(49, 14) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(144, 60) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_14","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye kɩsɛyɛ nɛ ɖɩ-tɛ tɔmpiye kɩsɛyɛ yɔ.\/\/ >>> all_prefixes(\"abc\")\n\/\/ array(\"a\", \"ab\", \"abc\")\nfunction all_prefixes($string) {\n","canonical_solution":"function all_prefixes($string) {\n    $prefixes = array();\n    $length = strlen($string);\n    for ($i = 1; $i <= $length; $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n}","tests":"function candidate(...$args) {\n    return all_prefixes(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdfgh\") !== array(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"WWW\") !== array(\"W\", \"WW\", \"WWW\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_15","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩɣ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ.\/\/ >>> string_sequence(0)\n\/\/ \"0\"\n\/\/ >>> string_sequence(5)\n\/\/ \"0 1 2 3 4 5\"\nfunction string_sequence($n) {\n","canonical_solution":"function string_sequence($n) {\n    $sequence = range(0, $n);\n    return implode(' ', $sequence);\n}","tests":"function candidate(...$args) {\n    return string_sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== \"0 1 2 3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== \"0 1 2 3 4 5 6 7 8 9 10\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_16","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ye ŋha-ɖʋ tɔm piye naɖɩyɛ lɛ, ɖɩpɔzɩ-ŋ se ɛzɩma ɖɩ-taa wɛ tɔm pee ndɩ ndɩ yɔ.\/\/ >>> count_distinct_characters(\"xyzXYZ\")\n\/\/ 3\n\/\/ >>> count_distinct_characters(\"Jerry\")\n\/\/ 4\nfunction count_distinct_characters($string) {\n","canonical_solution":"function count_distinct_characters($string) {\n    $string = strtolower($string);\n    $distinctChars = array_count_values(str_split($string));\n    return count($distinctChars);\n}","tests":"function candidate(...$args) {\n    return count_distinct_characters(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcde\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdecadeCADE\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaAAAAaaaa\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jerry jERRY JeRRRY\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_17","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/'Nɔɔ kʋɖʋmaɣ' - Nɔɔ kʋɖʋmaɣ ŋga kɛwɛ hɔɔlɩŋ naanza taa yɔ, kɛwɛ tam kʋɖʋm.\/\/'O sa' - hɔɔlɩŋ naalɛ, pɩlakɩ tam naalɛ.\/\/'O' - hendu tɩŋa, pɩlakɩ tam naanza \/\/Kɩɖaʋ kʋnɛ kɩ-tɔm pɔyɔɔdʋʋ:\/\/Pɩtɩkɛ kɛdɛzaɣ ñɩŋga.\/\/Ña-tʋmɩyɛ lɛ se ŋtazɩ tɔmpiye ɖɩnɛ nɛ ŋpɩsɩna nimero waa mba pa-taa paa weyi ɛ-tɛ ɛ-tɛ tɔmpiye nɖɩ ɖɩ-taa yɔ.\/\/Tʊma ana a-taa lɛ, pɔcɔna nɛ pana se a-taa lɛ, minziiki wondu wɛna nɛ tɩwɛɛna ASCII.\/\/ >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n\/\/ array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n","canonical_solution":"function parse_music($music_string) {\n    $notes = explode(\" \", trim($music_string));\n    $beats = [];\n\n    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n                $beats[] = 4;\n                break;\n            case 'o|':\n                $beats[] = 2;\n                break;\n            case '.|':\n                $beats[] = 1;\n                break;\n        }\n    }\n\n    return $beats;\n}","tests":"function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_18","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ñɩnɩ tam ɛzɩma pɩpɩzɩɣ nɛ pana tɔmpiye naɖɩyɛ kajalaɣ tɔmpiye taa yɔ.\/\/ >>> how_many_times(\"\", \"a\")\n\/\/ 0\n\/\/ >>> how_many_times(\"aaa\", \"a\")\n\/\/ 3\n\/\/ >>> how_many_times(\"aaaa\", \"aa\")\n\/\/ 3\nfunction how_many_times($string, $substring) {\n","canonical_solution":"function how_many_times($string, $substring) {\n    if ($substring === \"\") {\n        return 0;\n    }\n    \n    $count = 0;\n    $position = 0;\n    $subLen = strlen($substring);\n    \n    while (($position = strpos($string, $substring, $position)) !== false) {\n        $count++;\n        $position += 1;\n    }\n    \n    return $count;\n}","tests":"function candidate(...$args) {\n    return how_many_times(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\", \"x\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyxyxyx\", \"x\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"cacacacac\", \"cac\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"john doe\", \"john\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_19","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ takayɩhayʋʋ kɩgbanzɩ ñɩŋgʋ yɔɔ .\/\/Pɩpɩzɩɣ nɛ pɩla se ŋlɩzɩ \"zéro\", \"un\", \"deux\", \"trois\", \"quatre\", \"cinq\", \"six\", \"sept\", \"huit\" nɛ \"neuf\".\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/ >>> sort_numbers(\"three one five\")\n\/\/ \"one three five\"\nfunction sort_numbers($numbers) {\n","canonical_solution":"function sort_numbers($numbers) {\n    \/\/ Define an array to map string numerals to their respective integer values\n    $numeral_to_value = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n\n    \/\/ Split the input string into an array of words\n    $number_words = explode(\" \", $numbers);\n\n    \/\/ Sort the array using the integer values from numeral_to_value\n    usort($number_words, function($a, $b) use ($numeral_to_value) {\n        return $numeral_to_value[$a] - $numeral_to_value[$b];\n    });\n\n    \/\/ Join the sorted array back into a string and return it\n    return implode(\" \", $number_words);\n}","tests":"function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !== \"zero one two three four five six\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_20","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, ŋpɩzɩɣ nɛ ŋlɩzɩ-wɛ nɛ ŋyele nɛ patɩŋnɩ pa-taa paa weyi ɛ-yɔɔ.\/\/Pɩtɛ matʋ (pɩtalɩɣ naalɛ) taa lɛ, ŋlɩzɩ nɛ ŋyele naalɛ nɛ ɩpɩsɩ kɩ-taa.\/\/ >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\/\/ array(2.0, 2.2)\n\/\/ >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\/\/ array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n","canonical_solution":"function find_closest_elements($numbers) {\n    sort($numbers);\n    $minDiff = PHP_FLOAT_MAX;\n    $closestPair = array();\n\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $diff = abs($numbers[$i + 1] - $numbers[$i]);\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = array($numbers[$i], $numbers[$i + 1]);\n        }\n    }\n\n    return $closestPair;\n}","tests":"function candidate(...$args) {\n    return find_closest_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_21","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/mbʊ pʊyɔɔ yɔ, pʊtʊ weyi ɛkɩlɩ tɔyʊʊ yɔ ɛkaɣ pɩsʋʋ 0 nɛ weyi ɛkɩlɩ tɔyʊʊ yɔ ɛkaɣ pɩsʋʋ 1 .\/\/Pɩkɛna nimero waa (ɛzɩma pɩfɛyɩ kɔyɔ, pɩtalɩɣ naalɛ), pʊcɔ nɛ papɩzɩ patɩlɩ se nimero waa mba pɛwɛna kɩmaŋ kɔyɔ, pʊwɛɛ se patɩlɩ se nimero waa mba pɛwɛna kɩmaŋ.\/\/ >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\/\/ array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n","canonical_solution":"function rescale_to_unit($numbers) {\n    $min = min($numbers);\n    $max = max($numbers);\n    if ($max == $min) {\n        return array_fill(0, count($numbers), 0.0);\n    }\n    \n    $result = array_map(function($num) use ($min, $max) {\n        return ($num - $min) \/ ($max - $min);\n    }, $numbers);\n    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_22","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩlɩʋ ŋgʋ kɩ-taa paa phpthon mayaɣ ŋga lɛ, kɩ-taa wɛ nimero waa tɩŋa yem.\/\/ >>> filter_integers(array(\"a\", 3.14, 5))\n\/\/ array(5)\n\/\/ >>> filter_integers(array(1, 2, 3, \"abc\", array(), array()))\n\/\/ array(1, 2, 3)\nfunction filter_integers($values) {\n","canonical_solution":"function filter_integers($values) {\n    return array_values(array_filter($values, 'is_int'));\n}","tests":"function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\")) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_23","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ takayɩhayʋʋ Kpɩtaʋ ŋgʋ kɩ-taa ŋnaɣ-kʋ yɔ kɩ-tɛɛ\/\/ >>> strlen(\"\")\n\/\/ 0\n\/\/ >>> strlen(\"abc\")\n\/\/ 3\nfunction strlen($string) {\n","canonical_solution":"function strlen($string) {\n    $length = 0;\n    while (isset($string[$length])) {\n        $length++;\n    }\n    return $length;\n}","tests":"function candidate(...$args) {\n    return strlen(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"x\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdasnakj\") !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_24","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩcɔ nɛ ŋtɩlɩ n mayaɣ kɔyɔ, ŋñɩnɩɣ mayaɣ ŋga kɛwɛna n yɔɔ yɔ, ŋga kakɩlɩ n yɔɔ yɔ.\/\/ >>> largest_divisor(15)\n\/\/ 5\nfunction largest_divisor($n) {\n","canonical_solution":"function largest_divisor($n) {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i === 0) {\n            return $i;\n        }\n    }\n    return null; \/\/ In case no divisor is found, though for n > 1 there will always be one.\n}","tests":"function candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_25","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩwɛɛ se ɖɩkpaɣ kɩ-tɛ tɔmpiye nɛ ɖɩkpaɣ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ.\/\/Pɩwɛɛ se pamaɣ paa tɔmpiye nɖɩ lɛ ɖɩ-tɛ tam ndɩ ndɩ nɛ pɩwɩlɩɣ tam ɛzɩma ɖɩ-tɛ tɔmpiye nɖɩ ɖɩlɩna tɔmpiye ndɩ ɖɩ-taa yɔ.\/\/Ɛpɩsɩɣ ɛ-tɛ kajalaɣ hɔɔlɩŋ weyi ɛ-taa ɛ-tɛ hɔɔlɩŋ sɔsɔŋ wɛɛ yɔ, kpaɣ nɛ hɔɔlɩŋ cikpeŋ nɛ ŋwolo hɔɔlɩŋ sɔsɔŋ taa.\/\/ >>> factorize(8)\n\/\/ array(2, 2, 2)\n\/\/ >>> factorize(25)\n\/\/ array(5, 5)\n\/\/ >>> factorize(70)\n\/\/ array(2, 5, 7)\nfunction factorize($n) {\n","canonical_solution":"function factorize($n) {\n    $factors = array();\n    \/\/ Check for number of twos\n    while ($n % 2 == 0) {\n        $factors[] = 2;\n        $n = $n \/ 2;\n    }\n    \/\/ Check for odd numbers\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n \/ $i;\n        }\n    }\n    \/\/ If n becomes a prime number greater than 2\n    if ($n > 2) {\n        $factors[] = $n;\n    }\n    return $factors;\n}","tests":"function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_26","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩwɛɛ se ɖɩɖɔkɩ mbʋ ɖɩɖʋwa yɔ, mbʋ ɖɔɖɔ ɖɩɖʋwa yɔ.\/\/Pɩtɛ lɛ, ɖɩkpaɣ kɩlɛmɩŋ weyi ɩwɛna tam nabʊyʊ yɔ nɛ ɖɩlɩzɩ kɩlɛmɩŋ weyi ɩwɛna tam nabʊyʊ yɔ.\/\/ >>> remove_duplicates(array(1, 2, 3, 2, 4))\n\/\/ array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n","canonical_solution":"function remove_duplicates($numbers) {\n    $counts = array_count_values($numbers);\n    return array_values(array_filter($numbers, function($num) use ($counts) {\n        return $counts[$num] === 1;\n    }));\n}","tests":"function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_27","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ matʋ ndʋ tɩ-taa, ŋlɛɣzɩ matʋ cikpetu nɛ ŋlɛɣzɩ matʋ sɔsɔtʋ nɛ ŋlɛɣzɩ matʋ sɔsɔtʋ nɛ ŋlɛɣzɩ matʋ cikpetu.\/\/ >>> flip_case(\"Hello\")\n\/\/ \"hELLO\"\nfunction flip_case($string) {\n","canonical_solution":"function flip_case($string) {\n    $flippedString = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (ctype_lower($char)) {\n            $flippedString .= strtoupper($char);\n        } else if (ctype_upper($char)) {\n            $flippedString .= strtolower($char);\n        } else {\n            $flippedString .= $char;\n        }\n    }\n    return $flippedString;\n}","tests":"function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\") !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_28","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kpaɣna hɔɔlɩŋ ndɩ ndɩ nɛ ŋpɩsɩ-ɩ hɔɔlɩŋ kʋɖʋmʋʋ.\/\/ >>> concatenate(array())\n\/\/ \"\"\n\/\/ >>> concatenate(array(\"a\", \"b\", \"c\"))\n\/\/ \"abc\"\nfunction concatenate($strings) {\n","canonical_solution":"function concatenate($strings) {\n    return implode('', $strings);\n}","tests":"function candidate(...$args) {\n    return concatenate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"xyz\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\", \"w\", \"k\")) !== \"xyzwk\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_29","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ tɔmpiye naɖɩyɛ taa tɔmpiye nɖɩ ɖɩpaɣzɩɣna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye yɔ.\/\/ >>> filter_by_prefix(array(), \"a\")\n\/\/ array()\n\/\/ >>> filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n\/\/ array(\"abc\", \"array\")\nfunction filter_by_prefix($strings, $prefix) {\n","canonical_solution":"function filter_by_prefix($strings, $prefix) {\n    $result = array_filter($strings, function($string) use ($prefix) {\n        return strpos($string, $prefix) === 0;\n    });\n    return array_values($result);\n}","tests":"function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_30","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɛpɩsɩɣ ɛ-tɛ ɛyʊ kɩlɩm mbʊ yɔ.\/\/ >>> get_positive(array(-1, 2, -4, 5, 6))\n\/\/ array(2, 5, 6)\n\/\/ >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n\/\/ array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l) {\n","canonical_solution":"function get_positive($l) {\n    return array_filter($l, function($num) {\n        return $num > 0;\n    });\n}","tests":"function candidate(...$args) {\n    return get_positive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_31","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ye nimero waa nabɛyɛ ɩkɛ kajalaɣ mba yɔ, pɩpɩsɩɣ toovenim nɛ ye pɩtɛkɛ mbʋ yɔ, pɩkɛ cɛtɩm.\/\/ >>> is_prime(6)\n\/\/ false\n\/\/ >>> is_prime(101)\n\/\/ true\n\/\/ >>> is_prime(11)\n\/\/ true\n\/\/ >>> is_prime(13441)\n\/\/ true\n\/\/ >>> is_prime(61)\n\/\/ true\n\/\/ >>> is_prime(4)\n\/\/ false\n\/\/ >>> is_prime(1)\n\/\/ false\nfunction is_prime($n) {\n","canonical_solution":"function is_prime($n) {\n    if ($n <= 1) return false;\n    if ($n <= 3) return true;\n    if ($n % 2 == 0 || $n % 3 == 0) return false;\n\n    for ($i = 5; $i * $i <= $n; $i += 6) {\n        if ($n % $i == 0 || $n % ($i + 2) == 0) return false;\n    }\n    return true;\n}","tests":"function candidate(...$args) {\n    return is_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(101) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13441) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(61) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(85) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(255379) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_33","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, pɛtɛyɩ-ɩ nɛ ɛ-tɛ lɛɣtʋ kɩfatʋ.\/\/l' wɛ ɛzɩ l yɔ, yee ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ\/\/Tʋma ana a-taa lɛ, pakpaɣ matrice l nɛ papɩsɩna matrice l' nɖɩ ɖɩ-taa \/\/ >>> sort_third(array(1, 2, 3))\n\/\/ array(1, 2, 3)\n\/\/ >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))\n\/\/ array(2, 6, 3, 4, 8, 9, 5)\nfunction sort_third($l) {\n","canonical_solution":"function sort_third($l) {\n    $length = count($l);\n    $div_by_three_values = [];\n\n    \/\/ Collect values at indices divisible by three\n    for ($i = 0; $i < $length; $i++) {\n        if ($i % 3 == 0) {\n            $div_by_three_values[] = $l[$i];\n        }\n    }\n\n    \/\/ Sort the collected values\n    sort($div_by_three_values);\n\n    \/\/ Replace original values with sorted ones at indices divisible by three\n    $index = 0;\n    for ($i = 0; $i < $length; $i++) {\n        if ($i % 3 == 0) {\n            $l[$i] = $div_by_three_values[$index];\n            $index++;\n        }\n    }\n\n    return $l;\n}","tests":"function candidate(...$args) {\n    return sort_third(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2)) !== array(2, 6, 3, 4, 8, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, 3, 4, 6, 9, 2)) !== array(2, 8, 3, 4, 6, 9, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 9, 4, 8, 3, 2)) !== array(2, 6, 9, 4, 8, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 3, 4, 8, 9, 2, 1)) !== array(2, 6, 3, 4, 8, 9, 5, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_34","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ takayɩhayʋʋ Ñɔɔzɩtʋ kɩfatʋ ñɩŋgʋ yɔɔ .\/\/ >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\/\/ array(0, 2, 3, 5, 9, 123)\nfunction unique($l) {\n","canonical_solution":"function unique($l) {\n    \/\/ Use array_unique to remove duplicates\n    $uniqueArray = array_unique($l);\n    \/\/ Sort the result array\n    sort($uniqueArray);\n    return $uniqueArray;\n}\n\n\/\/ Example usage\n$result = unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123));\nprint_r($result);","tests":"function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_35","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɛpɩsɩɣ ɛ-tɛ kɩlɩm pɩyʊ ɛ-tɛ matriki taa.\/\/ >>> max_element(array(1, 2, 3))\n\/\/ 3\n\/\/ >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n\/\/ 123\nfunction max_element($l) {\n","canonical_solution":"function max_element($l) {\n    if (empty($l)) {\n        return null; \/\/ Return null if the array is empty\n    }\n    $max = $l[0];\n    foreach ($l as $value) {\n        if ($value > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n}","tests":"function candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)) !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_36","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ:\/\/ >>> fizz_buzz(50)\n\/\/ 0\n\/\/ >>> fizz_buzz(78)\n\/\/ 2\n\/\/ >>> fizz_buzz(79)\n\/\/ 3\nfunction fizz_buzz($n) {\n","canonical_solution":"function fizz_buzz($n) {\n    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $digits = str_split((string)$i);\n            foreach ($digits as $digit) {\n                if ($digit == '7') {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}","tests":"function candidate(...$args) {\n    return fizz_buzz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(50) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(78) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(79) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(200) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4000) !== 192) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10000) !== 639) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100000) !== 8026) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_37","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, pɛtɛzɩ-ɩ kpaɣʋ nɛ pɛtɛzɩ-ɩ kpaɣʋ nɛ pɛtɛzɩɣ-ɩ kpaɣʋ nɛ pɛtɛzɩɣ-ɩ kpaɣʋ nɛ pɛtɛzɩɣ-ɩ kpaɣʋ.\/\/l' wɛ ɛzɩ l yɔ, ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ\/\/Tʋma ana a-taa lɛ, pakpaɣ matrice l nɛ papɩsɩna matrice l' nɖɩ ɖɩ-taa \/\/ >>> sort_even(array(1, 2, 3))\n\/\/ array(1, 2, 3)\n\/\/ >>> sort_even(array(5, 6, 3, 4))\n\/\/ array(3, 6, 5, 4)\nfunction sort_even($l) {\n","canonical_solution":"function sort_even($l) {\n    $even_indices = [];\n\n    \/\/ Extract values at even indices\n    for ($i = 0; $i < count($l); $i += 2) {\n        $even_indices[] = $l[$i];\n    }\n\n    \/\/ Sort the extracted even-indexed values\n    sort($even_indices);\n\n    \/\/ Rebuild the original array with sorted even-indexed values\n    $evenIndex = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $l[$i] = $even_indices[$evenIndex];\n            $evenIndex++;\n        }\n    }\n\n    return $l;\n}","tests":"function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_39","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/prime_fib pɩlɩɣna n-tɛ n̄ɩnɖɛ nɖɩ ɖɩkɛ Fibonacci n̄ɩnɖɛ nɛ ɖɩkɛ ɖɔɖɔ kajalaɣ n̄ɩnɖɛ yɔ.\/\/ >>> prime_fib(1)\n\/\/ 2\n\/\/ >>> prime_fib(2)\n\/\/ 3\n\/\/ >>> prime_fib(3)\n\/\/ 5\n\/\/ >>> prime_fib(4)\n\/\/ 13\n\/\/ >>> prime_fib(5)\n\/\/ 89\nfunction prime_fib($n) {\n","canonical_solution":"function is_prime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n    }\n    return true;\n}\n\nfunction prime_fib($n) {\n    $fib1 = 1;\n    $fib2 = 1;\n    $fib_index = 2;\n    $prime_fib_count = 0;\n    \n    while (true) {\n        $fib_index++;\n        $fib = $fib1 + $fib2;\n        $fib1 = $fib2;\n        $fib2 = $fib;\n        \n        if (is_prime($fib)) {\n            $prime_fib_count++;\n            if ($prime_fib_count == $n) {\n                return $fib;\n            }\n        }\n    }\n}","tests":"function candidate(...$args) {\n    return prime_fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 233) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1597) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28657) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 514229) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 433494437) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_40","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, kɩ-tɛ tɔm kɛ cɛtɩm.\/\/Pɩpɩsɩɣ tɔmpiye true yee ɛyʊ ɛ-tɛ matʊ taa ɛ-tɛ tɔmpiye \/\/triple_sum_to_zero kpaɣ ɛyʊ kʊyʊmʊʊ ɛzɩ ɛ-tɛ tɔm yɔ.\/\/ >>> triples_sum_to_zero(array(1, 3, 5, 0))\n\/\/ false\n\/\/ >>> triples_sum_to_zero(array(1, 3, -2, 1))\n\/\/ true\n\/\/ >>> triples_sum_to_zero(array(1, 2, 3, 7))\n\/\/ false\n\/\/ >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))\n\/\/ true\n\/\/ >>> triples_sum_to_zero(array(1))\n\/\/ false\nfunction triples_sum_to_zero($l) {\n","canonical_solution":"function triples_sum_to_zero($l) {\n    $n = count($l);\n    if ($n < 3) return false;\n    sort($l);\n    for ($i = 0; $i < $n - 2; $i++) {\n        $left = $i + 1;\n        $right = $n - 1;\n        while ($left < $right) {\n            $sum = $l[$i] + $l[$left] + $l[$right];\n            if ($sum === 0) {\n                return true;\n            } elseif ($sum < 0) {\n                $left++;\n            } else {\n                $right--;\n            }\n        }\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return triples_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 9, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -100)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 3, 5, -100)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_41","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ.\/\/Pɩwɛ ɛzɩ patɩkatɩ ɖama yɔ.\/\/Ɛlɛ, lɔɔɖa ana awɛ ɖoŋ nɛ awɛ ɖɔɖɔ kpɩzɩŋ nɛ pʋyɔɔ lɛ, awɛɛ nɛ awɛɛ nɛ awɛɛ.\/\/Alɩwaatʋ ndʋ lɔɔɖɩyɛ nɖɩ ɖɩɖɛɣ nɛ ɖɩlɩɣ nɛ ɖɩɖɛɣ nɛ ɖɩɖɛɣ nɛ ɖɩɖɛɣ nɛ ɖɩkɔŋʋʋ lɔɔɖɩyɛ nɖɩ ɖɩɖɛɣ nɛ ɖɩɖɛɣ nɛ ɖɩɖɛɣ nɛ ɖɩɖɛɣ yɔ.\/\/Pɩkɛna mbʋ se, yee ɖɩkpaɣ se ɖɩcaɣ ɖɩ-tɩ yɔɔ kɔyɔ, ɖɩnaɣ se ɖɩtɩŋɩɣna nɛ ɖɩlakɩ mbʋ.\/\/Kpɛndɩɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna.\/\/lɔɔɖa n wɛɛ nɛ pɔɖɔŋ nɛ pɛɖɛɣna n-nɩmɩyɛ nɛ n-nɩmɩyɛ.\/\/Maɣzɩ se ŋwɛ habɩyɛ nɖɩ ɖɩtɩŋʋʋ camɩyɛ yɔ ɖɩ-yɔɔ.function car_race_collision($n) {\n","canonical_solution":"function car_race_collision($n) {\n    \/\/ Each left-to-right moving car will collide with exactly one right-to-left moving car.\n    \/\/ Therefore, the number of collisions is simply equal to the number of cars in one direction, i.e., n.\n    return $n;\n}","tests":"function candidate(...$args) {\n    return car_race_collision(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 100) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_42","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɛpɩsɩɣ ɛ-tɛ matriki nɛ ɛ-tɛ matriki kɩpanzɩ.\/\/ >>> incr_list(array(1, 2, 3))\n\/\/ array(2, 3, 4)\n\/\/ >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\/\/ array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n","canonical_solution":"function incr_list($l) {\n    return array_map(function($item) {\n        return $item + 1;\n    }, $l);\n}","tests":"function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3, 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_43","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, kɩ-tɛ tɔm kɛ cɛtɩm.\/\/Pɩpɩsɩɣ tɔmpiye true yee ɛyʊ ɛ-tɛ tɔmpiye nɖɩ ɖɩ-taa ɛ-tɛ tɔmpiye \/\/pairs_sum_to_zero kpaɣ ɛyʊ kʊyʊmʊʊ ɛzɩ ɛ-tɛ tɔm yɔ.\/\/ >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n\/\/ false\n\/\/ >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n\/\/ false\n\/\/ >>> pairs_sum_to_zero(array(1, 2, 3, 7))\n\/\/ false\n\/\/ >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n\/\/ true\n\/\/ >>> pairs_sum_to_zero(array(1))\n\/\/ false\nfunction pairs_sum_to_zero($l) {\n","canonical_solution":"function pairs_sum_to_zero($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_44","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩ-tɛ kɩlɛmɩŋ wɛ ɛzɩ 10 yɔ.\/\/Pɩpɩsɩɣna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye lɛɣzʋʋ.\/\/Pɩsɩ takayɩhayʋʋ kɩsɔzɩtʋ taa.\/\/ >>> change_base(8, 3)\n\/\/ \"22\"\n\/\/ >>> change_base(8, 2)\n\/\/ \"1000\"\n\/\/ >>> change_base(7, 2)\n\/\/ \"111\"\nfunction change_base($x, $base) {\n","canonical_solution":"function change_base($x, $base) {\n    if ($base < 2 || $base > 9) {\n        return false; \/\/ base must be between 2 and 9\n    }\n    \n    $result = '';\n    do {\n        $remainder = $x % $base;\n        $result = $remainder . $result;\n        $x = intdiv($x, $base);\n    } while ($x > 0);\n    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_45","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩkɛna hɔɔlɩŋ weyi ɛ-taa pʊcɔ nɛ pʊcɔ nɛ pʊcɔ nɛ pʊcɔ nɛ pʊcɔ nɛ pʊcɔ yɔ.\/\/ >>> triangle_area(5, 3)\n\/\/ 7.5\nfunction triangle_area($a, $h) {\n","canonical_solution":"function triangle_area($a, $h) {\n    return 0.5 * $a * $h;\n}","tests":"function candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 3) !== 7.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2) !== 2.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 8) !== 40.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_46","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsa nɛ ŋpɩzɩ ŋla tʋmɩyɛ nɛ ŋla akɔnta camɩyɛ nɛ ŋtɩlɩ fib4 tɛ n̄ɩŋgʋ. Taawɛɛkɩɣ kɩ-tɩ yɔɔ.\/\/Fɛyɩtʊ ndʊ tɩ-taa lɛ, pʊtɔbʊʊ se fɩdɩyɔm wɛna fɩdɩyɔm tɛtʊ ndʊ tɩ-taa nɛ fɩdɩyɔm tɛtʊ ndʊ tɩ-taa nɛ fɩdɩyɔm tɛtʊ ndʊ tɩ-taa nɛ fɩdɩyɔm tɛtʊ ndʊ tɩ-taa.\/\/(Cɔnɩ tayʋʋ 4)\/\/(Cɔnɩ tayʋʋ 2) -> 2 \/\/(Cɔnɩ tayʋʋ 1) -> 0 \/\/(Cɔnɩ tayʋʋ 4)\/\/Fib4 tɛ kʊyʊmʊʊ kʊyʊmʊʊ wɛ ɛzɩ Fibbonacci kʊyʊmʊʊ yɔ nɛ pama-kʊ nɛ pɩ-tɛ tɔmʊʊ:\/\/ >>> fib4(5)\n\/\/ 4\n\/\/ >>> fib4(6)\n\/\/ 8\n\/\/ >>> fib4(7)\n\/\/ 14\nfunction fib4($n) {\n","canonical_solution":"function fib4($n) {\n    if ($n == 0 || $n == 1 || $n == 3) return 0;\n    if ($n == 2) return 2;\n\n    $fib4 = [0, 0, 2, 0];\n    \n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[0] + $fib4[1] + $fib4[2] + $fib4[3];\n    }\n\n    return $fib4[$n % 4];\n}","tests":"function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_47","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩɣ kɩ-tɛ hɔɔlɩŋ sɔsɔŋ taa.\/\/ >>> median(array(3, 1, 2, 4, 5))\n\/\/ 3\n\/\/ >>> median(array(-10, 4, 6, 1000, 10, 20))\n\/\/ 15.0\nfunction median($l) {\n","canonical_solution":"function median($l) {\n    sort($l); \/\/ Sort the array\n    $count = count($l); \/\/ Get the count of the array's elements\n    \n    if ($count % 2 == 0) { \/\/ If even number of elements\n        $middle1 = $l[$count \/ 2 - 1];\n        $middle2 = $l[$count \/ 2];\n        return ($middle1 + $middle2) \/ 2;\n    } else { \/\/ If odd number of elements\n        return $l[floor($count \/ 2)];\n    }\n}","tests":"function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_48","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩcɔ nɛ pana se tɔmpiye nɖɩ ɖɩ-taa pama tɔm yɔ, ɖɩkɛ palindrome yaa we ?\/\/ >>> is_palindrome(\"\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aba\")\n\/\/ true\n\/\/ >>> is_palindrome(\"aaaaa\")\n\/\/ true\n\/\/ >>> is_palindrome(\"zbcd\")\n\/\/ false\nfunction is_palindrome($text) {\n","canonical_solution":"function is_palindrome($text) {\n    \/\/ Remove any white space and convert to lowercase\n    $text = strtolower(str_replace(' ', '', $text));\n    \n    \/\/ Get the reversed version of the text\n    $reversedText = strrev($text);\n    \n    \/\/ Check if the text is the same as the reversed version\n    return $text === $reversedText;\n}","tests":"function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_49","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩɣ 2^n modulo p (ɩtɩlɩɣ nimerikɩwaa).\/\/ >>> modp(3, 5)\n\/\/ 3\n\/\/ >>> modp(1101, 101)\n\/\/ 2\n\/\/ >>> modp(0, 101)\n\/\/ 1\n\/\/ >>> modp(3, 11)\n\/\/ 8\n\/\/ >>> modp(100, 101)\n\/\/ 1\nfunction modp($n, $p) {\n","canonical_solution":"function modp($n, $p) {\n    return pow(2, $n) % $p;\n}","tests":"function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_51","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/remove_vowels kɛna tʋmɩyɛ nɖɩ ɖɩkpaɣ tɔmpiye nɛ ɖɩpɩsɩ tɔmpiye nɖɩ ɖɩfɛyɩna tɔmpiye yɔ.\/\/ >>> remove_vowels(\"\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"abcdef\")\n\/\/ \"bcdf\"\n\/\/ >>> remove_vowels(\"aaaaa\")\n\/\/ \"\"\n\/\/ >>> remove_vowels(\"aaBAA\")\n\/\/ \"B\"\n\/\/ >>> remove_vowels(\"zbcd\")\n\/\/ \"zbcd\"\nfunction remove_vowels($text) {\n","canonical_solution":"function remove_vowels($text) {\n    return preg_replace('\/[aeiouAEIOU]\/', '', $text);\n}","tests":"function candidate(...$args) {\n    return remove_vowels(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\\nghijklm\") !== \"bcdf\\nghjklm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"fedcba\") !== \"fdcb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"acBAA\") !== \"cB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"EcBOO\") !== \"cB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ybcd\") !== \"ybcd\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_52","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩɣ true yee nimero waa tɩŋa ɩwɛ pʊtʊ l taa nɛ pɩtaatalɩ t.\/\/ >>> below_threshold(array(1, 2, 4, 10), 100)\n\/\/ true\n\/\/ >>> below_threshold(array(1, 20, 4, 10), 5)\n\/\/ false\nfunction below_threshold($l, $t) {\n","canonical_solution":"function below_threshold($l, $t) {\n    foreach ($l as $number) {\n        if ($number >= $t) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"function candidate(...$args) {\n    return below_threshold(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 10), 100) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 21) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10), 22) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 8, 4, 10), 11) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 8, 4, 10), 10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_53","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɖɩkpaɣ x nɛ y pa-naalɛ nɛ ɖɩkpɛndɩna.\/\/ >>> add(2, 3)\n\/\/ 5\n\/\/ >>> add(5, 7)\n\/\/ 12\nfunction add($x, $y) {\n","canonical_solution":"return $x + $y;\n}","tests":"function candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0, 1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 0) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 7) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 5) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_54","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ñɩnɩ tɔm pee wena awɛ kɩmaŋ yɔ.\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"abcd\", \"dddddddabc\")\n\/\/ true\n\/\/ >>> same_chars(\"dddddddabc\", \"abcd\")\n\/\/ true\n\/\/ >>> same_chars(\"eabcd\", \"dddddddabc\")\n\/\/ false\n\/\/ >>> same_chars(\"abcd\", \"dddddddabce\")\n\/\/ false\n\/\/ >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n\/\/ false\nfunction same_chars($s0, $s1) {\n","canonical_solution":"function same_chars($s0, $s1) {\n    $countChars = function($str) {\n        $charCount = [];\n        for ($i = 0; $i < strlen($str); $i++) {\n            $char = $str[$i];\n            if (!isset($charCount[$char])) {\n                $charCount[$char] = 0;\n            }\n            $charCount[$char]++;\n        }\n        return $charCount;\n    };\n\n    $countS0 = $countChars($s0);\n    $countS1 = $countChars($s1);\n\n    foreach ($countS0 as $char => $count) {\n        if (!isset($countS1[$char])) {\n            return false;\n        }\n    }\n\n    foreach ($countS1 as $char => $count) {\n        if (!isset($countS0[$char])) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"function candidate(...$args) {\n    return same_chars(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dddddddabc\", \"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eabcd\", \"dddddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabcf\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\", \"aaccc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_55","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ tɔm pɔzʋʋ:\/\/ >>> fib(10)\n\/\/ 55\n\/\/ >>> fib(1)\n\/\/ 1\n\/\/ >>> fib(8)\n\/\/ 21\nfunction fib($n) {\n","canonical_solution":"function fib($n) {\n    if ($n <= 0) {\n        return 0;\n    } elseif ($n === 1) {\n        return 1;\n    }\n    \n    $a = 0;\n    $b = 1;\n    \n    for ($i = 2; $i <= $n; $i++) {\n        $temp = $a + $b;\n        $a = $b;\n        $b = $temp;\n    }\n    \n    return $b;\n}","tests":"function candidate(...$args) {\n    return fib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 55) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 89) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 144) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_56","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩɣna nɛ ŋtɩlɩ se paa tɔmpiye nɖɩ lɛ, ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye naɖɩyɛ wɛɛ.\/\/\"parenthes\" kɛna \"<\" nɛ \">\" pa-taa mayaɣ.\/\/ >>> correct_bracketing(\"<\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"<>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"<<><>>\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"><<>\")\n\/\/ false\nfunction correct_bracketing($brackets) {\n","canonical_solution":"function correct_bracketing($brackets) {\n    $balance = 0;\n    $length = strlen($brackets);\n\n    for ($i = 0; $i < $length; $i++) {\n        if ($brackets[$i] === '<') {\n            $balance++;\n        } else if ($brackets[$i] === '>') {\n            $balance--;\n        }\n\n        \/\/ If at any point the balance is negative, there are more closing than opening brackets\n        if ($balance < 0) {\n            return false;\n        }\n    }\n\n    \/\/ If balance is zero, all opening brackets have been closed properly\n    return $balance === 0;\n}","tests":"function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_57","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩɣ toovenim kɔyɔ, pɩwɩlɩɣ se ɛyʊ wɛna ɛ-tɩ yɔɔ wɛʊ yaa ɛ-tɩ yɔɔ wɛʊ.\/\/ >>> monotonic(array(1, 2, 4, 20))\n\/\/ true\n\/\/ >>> monotonic(array(1, 20, 4, 10))\n\/\/ false\n\/\/ >>> monotonic(array(4, 1, 0, -10))\n\/\/ true\nfunction monotonic($l) {\n","canonical_solution":"function monotonic($l) {\n    if (count($l) <= 1) {\n        return true;\n    }\n\n    $isIncreasing = true;\n    $isDecreasing = true;\n\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $l[$i - 1]) {\n            $isDecreasing = false;\n        }\n        if ($l[$i] < $l[$i - 1]) {\n            $isIncreasing = false;\n        }\n        if (!$isIncreasing && !$isDecreasing) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_58","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɛpɩsɩɣ ɛ-tɛ ɛyʊ weyi ɛ-tɛ ɛyʊ wɛʊ yɔ ɛ-tɛ ɛyʊ kɩfalʊ.\/\/ >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\/\/ array(1, 5, 653)\n\/\/ >>> common(array(5, 3, 2, 8), array(3, 2))\n\/\/ array(2, 3)\nfunction common($l1, $l2) {\n","canonical_solution":"function common($l1, $l2) {\n    $intersection = array_intersect($l1, $l2);\n    $unique = array_unique($intersection);\n    sort($unique);\n    return $unique;\n}","tests":"function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_59","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ kɩlɛlʋʋ.\/\/ >>> largest_prime_factor(13195)\n\/\/ 29\n\/\/ >>> largest_prime_factor(2048)\n\/\/ 2\nfunction largest_prime_factor($n) {\n","canonical_solution":"function largest_prime_factor($n) {\n    $largestPrime = -1;\n\n    \/\/ Divide $n by 2 until it's odd\n    while ($n % 2 === 0) {\n        $largestPrime = 2;\n        $n \/= 2;\n    }\n\n    \/\/ Check for odd factors from 3 to sqrt(n)\n    for ($i = 3; $i * $i <= $n; $i += 2) {\n        while ($n % $i === 0) {\n            $largestPrime = $i;\n            $n \/= $i;\n        }\n    }\n\n    \/\/ If $n is a prime number greater than 2\n    if ($n > 2) {\n        $largestPrime = $n;\n    }\n\n    return $largestPrime;\n}","tests":"function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_60","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/sum_to_n kɛna tʋmɩyɛ nɖɩ ɖɩtɔyɩɣ 1 nɛ puwolo n yɔ.\/\/ >>> sum_to_n(30)\n\/\/ 465\n\/\/ >>> sum_to_n(100)\n\/\/ 5050\n\/\/ >>> sum_to_n(5)\n\/\/ 15\n\/\/ >>> sum_to_n(10)\n\/\/ 55\n\/\/ >>> sum_to_n(1)\n\/\/ 1\nfunction sum_to_n($n) {\n","canonical_solution":"function sum_to_n($n) {\n    return ($n * ($n + 1)) \/ 2;\n}","tests":"function candidate(...$args) {\n    return sum_to_n(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 66) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 465) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 5050) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_61","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩɣna nɛ ŋtɩlɩ se paa tɔmpiye nɖɩ lɛ, ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye naɖɩyɛ wɛɛ.\/\/'parenthes' kɛna \"(\" nɛ \"\") pa-taa tɔm.\/\/ >>> correct_bracketing(\"(\")\n\/\/ false\n\/\/ >>> correct_bracketing(\"()\")\n\/\/ true\n\/\/ >>> correct_bracketing(\"(()())\")\n\/\/ true\n\/\/ >>> correct_bracketing(\")(()\")\n\/\/ false\nfunction correct_bracketing($brackets) {\n","canonical_solution":"function correct_bracketing($brackets) {\n    $balance = 0;\n    $n = strlen($brackets);\n    \n    for ($i = 0; $i < $n; $i++) {\n        if ($brackets[$i] === '(') {\n            $balance++;\n        } elseif ($brackets[$i] === ')') {\n            $balance--;\n        }\n        \n        if ($balance < 0) {\n            return false;\n        }\n    }\n    \n    return $balance === 0;\n}","tests":"function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_62","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩpɩsɩ polinomiye ɖɩnɛ ɖɩ-tɛ derivative nɛ ɖɩ-wɛtʋ kɩlɩna ɖama.\/\/xs[0] + xs[1] * x + xs[2] * x^2 + .... \/\/xs kɛna polinomiye naɖɩyɛ tɛ coefficient waa.\/\/ >>> derivative(array(3, 1, 2, 4, 5))\n\/\/ array(1, 4, 12, 20)\n\/\/ >>> derivative(array(1, 2, 3))\n\/\/ array(2, 6)\nfunction derivative($xs) {\n","canonical_solution":"function derivative($xs) {\n    $derivative = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $derivative[] = $xs[$i] * $i;\n    }\n    return $derivative;\n}","tests":"function candidate(...$args) {\n    return derivative(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== array(1, 4, 12, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 0, 4)) !== array(2, 2, 0, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_63","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsa nɛ ŋtɩlɩ ɛzɩma ŋpɩzɩɣ ŋla nɛ ŋlɩzɩ ɛ-tɛ n-tɛ hɔɔlɩŋ weyi ɛ-taa ɛ-tɛ hɔɔlɩŋ wɛɛ yɔ.\/\/Fibɔrɩyɔm (n) == Fibɔrɩyɔm (n-1) + Fibɔrɩyɔm (n-2) + Fibɔrɩyɔm (n-3). \/\/(Cɔnɩ tayʋʋ 1)\/\/(Cɔnɩ tayʋʋ 1)\/\/fɩfɩfɩ ((0) == 0 \/\/FibFib n̄ɩnʋʋ n̄ɩnʋʋ kɛ n̄ɩnʋʋ ŋgʋ kɩwɛ ɛzɩ Fibbonacci n̄ɩnʋʋ yɔ nɛ kɩ-tɔm n̄ɩnʋʋ kɔyɔ:\/\/ >>> fibfib(1)\n\/\/ 0\n\/\/ >>> fibfib(5)\n\/\/ 4\n\/\/ >>> fibfib(8)\n\/\/ 24\nfunction fibfib($n) {\n","canonical_solution":"function fibfib($n) {\n    if ($n === 0) return 0;\n    if ($n === 1) return 0;\n    if ($n === 2) return 1;\n\n    $fibfib_values = [0, 0, 1];\n\n    for ($i = 3; $i <= $n; $i++) {\n        $fibfib_values[$i] = $fibfib_values[$i - 1] + $fibfib_values[$i - 2] + $fibfib_values[$i - 3];\n    }\n\n    return $fibfib_values[$n];\n}","tests":"function candidate(...$args) {\n    return fibfib(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 274) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== 927) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_64","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Tɔm piye nɖɩ ɖɩ-tɛ matʋ kɔyɔ:\/\/Tɔmpiye nɖɩ ɖɩ-taa pamaɣna tɔmpiye nɖɩ yɔ, ɖɩ-taa lɛ, \"a\", \"e\", \"i\", \"o\", \"u\".\/\/Ɛ-tɛ tɔm piye nɖɩ ɖɩ-tɛ tɔm pee kɩkpɛdɩŋ yɔ, ɖɩ-tɛ tɔm pee kɩkpɛdɩŋ nɛ ɖɩ-tɛ tɔm pee kɩkpɛdɩŋ.\/\/Maʋ tʋmɩyɛ nɖɩ payaɣ se vowels_count yɔ ɖɩ-taa tɔmpiye nɖɩ ɖɩwɩlɩɣ se \/\/ >>> vowels_count(\"abcde\")\n\/\/ 2\n\/\/ >>> vowels_count(\"ACEDY\")\n\/\/ 3\nfunction vowels_count($s) {\n","canonical_solution":"function vowels_count($s) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $count = 0;\n    $length = strlen($s);\n    \n    for ($i = 0; $i < $length; $i++) {\n        $char = strtolower($s[$i]);\n        if (in_array($char, $vowels)) {\n            $count++;\n        }\n        if ($char === 'y' && $i === $length - 1) {\n            $count++;\n        }\n    }\n    \n    return $count;\n}","tests":"function candidate(...$args) {\n    return vowels_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcde\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Alone\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"key\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bye\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"keY\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bYe\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ACEDY\") !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_65","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ye shift > nimero waa yɔ, pɩpɩsɩɣ nimero waa mba pɛlɛɣzɩ-wɛ yɔ.\/\/nɛ pɩpɩsɩɣ pɩ-tɛ lɩmaɣzɩyɛ ɛzɩ tɔmpiye yɔ. \/\/Pɩcɔ nɛ ɖɩna kɔyɔ, ɖɩnaɣ se x kɛ ɛyʊ ɛyʊ, ɛyʊ ɛyʊ ɛyʊ, ɛyʊ ɛyʊ ɛyʊ.\/\/ >>> circular_shift(12, 1)\n\/\/ \"21\"\n\/\/ >>> circular_shift(12, 2)\n\/\/ \"12\"\nfunction circular_shift($x, $shift) {\n","canonical_solution":"function circular_shift($x, $shift) {\n    $digits = strval($x);\n    $num_digits = strlen($digits);\n\n    if ($shift > $num_digits) {\n        return strrev($digits);\n    }\n\n    $shift = $shift % $num_digits;\n    if ($shift == 0) {\n        return $digits;\n    }\n\n    $right_part = substr($digits, -$shift);\n    $left_part = substr($digits, 0, $num_digits - $shift);\n\n    return $right_part . $left_part;\n}","tests":"function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\nfunction test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_66","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/ASCII mayaɣ.\/\/Ma tʋmɩyɛ naɖɩyɛ nɛ ɖɩkpaɣ tɔmpiye naɖɩyɛ nɛ ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-taa tɔm pee kɩkpaɖaa yɔ, ɖɩ-ñɔɔzʋʋ yem.'\/\/Tʋmɩyɛ \/\/ >>> digitSum(\"\")\n\/\/ 0\n\/\/ >>> digitSum(\"abAB\")\n\/\/ 131\n\/\/ >>> digitSum(\"abcCd\")\n\/\/ 67\n\/\/ >>> digitSum(\"helloE\")\n\/\/ 69\n\/\/ >>> digitSum(\"woArBld\")\n\/\/ 131\n\/\/ >>> digitSum(\"aAaaaXa\")\n\/\/ 153\nfunction digitSum($s) {\n","canonical_solution":"function digitSum($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}","tests":"function candidate(...$args) {\n    return digitSum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abAB\") !== 131) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcCd\") !== 67) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"helloE\") !== 69) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"woArBld\") !== 131) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aAaaaXa\") !== 153) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\" How are yOu?\") !== 151) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You arE Very Smart\") !== 327) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_67","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ: \/\/Mango pee wena awɛ kaɖaɣ taa yɔ, a-taa lɛ, ŋpɩzɩɣ ŋlɩzɩ a-taa pee wena awɛ kaɖaɣ taa yɔ.\/\/Lɛɛlɛyɔ, pɔmbɔɔ nɛ pɔmbɔɔ nɛ pɩtasɩna nimero entier ŋgʋ kɩwɩlɩɣ pee tɩŋa yɔ \/\/Ɖɩkpaɣ ɛzɩ pɔpɔtʋ yɔ, nɛ ɖɩkpaɣ ɛzɩ pɔpɔtʋ yɔ, nɛ ɖɩkpaɣ ɛzɩ pɔpɔtʋ yɔ, nɛ ɖɩkpaɣ ɛzɩ pɔpɔtʋ yɔ, nɛ ɖɩkpaɣ ɛzɩ pɔpɔtʋ yɔ, nɛ ɖɩkpaɣ ɛzɩ pɔpɔtʋ yɔ.\/\/Pɩkɛna tɩŋ pee wena awɛ ɖɔmbɛɛ taa yɔ.\/\/Pɩtɛ tʋmɩyɛ ɖɩnɛ ɖɩ-taa, pakaɣ-ŋ haʋ tɔmpiye nɖɩ ɖɩwɩlɩɣ pɔpɔtʋ nɛ pombowaa yɔ.\/\/ >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n\/\/ 8\n\/\/ >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n\/\/ 2\n\/\/ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n\/\/ 95\n\/\/ >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\/\/ 19\nfunction fruit_distribution($s, $n) {\n","canonical_solution":"function fruit_distribution($s, $n) {\n    \/\/ Extract numbers from the string using regular expression\n    preg_match_all('!\\d+!', $s, $matches);\n    \n    \/\/ Find out number of apples and oranges from the matches\n    $apples = $matches[0][0];\n    $oranges = $matches[0][1];\n    \n    \/\/ Calculate total mangoes\n    $total_apples_and_oranges = $apples + $oranges;\n    $mangoes = $n - $total_apples_and_oranges;\n    \n    return $mangoes;\n}\n\n\/\/ Example usage:\necho fruit_distribution(\"5 apples and 6 oranges\", 19); \/\/ Output: 8","tests":"function candidate(...$args) {\n    return fruit_distribution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"5 apples and 6 oranges\", 19) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5 apples and 6 oranges\", 21) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0 apples and 1 oranges\", 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1 apples and 0 oranges\", 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2 apples and 3 oranges\", 100) !== 95) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2 apples and 3 oranges\", 5) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1 apples and 100 oranges\", 120) !== 19) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_68","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ 1:\/\/Yee ɛyʊ ɛfɛyɩna ɛ-tɛ kɩlabʊ yaa ɛ-tɛ kɩlabʊ kɔyɔ, ɛpɩsɩɣ [].\/\/Pɩwɛɛ se patasɩ lɩzʋʋ tɔmpiye nɖɩ ɖɩ-taa paɖʊ-ɖɩ yɔ, [smallest_value, its index] taa, \/\/Yee panaa nɩŋgbaŋgʊʊ ndɩ ndɩ nɛ kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna.\/\/Pɩwɛɛ se pʊtʊ weyi ɛ-taa ɛ-tɛ ɛyʊ wɛ yɔ, ɛ-tɛ ɛyʊ wɛʊ yɔ, ɛwɛna ɛyʊ kɩkpɛdʊ.\/\/Pɩwɛɛ se ŋlɩzɩ-kɛ nɛ ŋyele-kɛ nɛ ŋpɩsɩ-kɛ.\/\/\"Ɛzɩma pamaɣna tɩʋ nakʋyʋ piliŋa ŋga kɛfɛyɩna hɔɔlɩŋ kɩtatʋʋzɩŋ yɔ, \/\/ >>> pluck(array(4, 2, 3))\n\/\/ array(2, 1)\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 2:\n\/\/ >>> pluck(array(1, 2, 3))\n\/\/ array(2, 1)\n\/\/ Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\/\/ Example 3:\n\/\/ >>> pluck(array())\n\/\/ array()\n\/\/ Example 4:\n\/\/ >>> pluck(array(5, 0, 3, 0, 4, 2))\n\/\/ array(0, 1)\n\/\/ Explanation: 0 is the smallest value, but  there are two zeros,\n\/\/ so we will choose the first zero, which has the smallest index.\n\/\/ Constraints:\n\/\/ * 1 <= nodes.length <= 10000\n\/\/ * 0 <= node.value\nfunction pluck($arr) {\n","canonical_solution":"function pluck($arr) {\n    $smallestEven = null;\n    $smallestIndex = null;\n\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            if ($smallestEven === null || $value < $smallestEven) {\n                $smallestEven = $value;\n                $smallestIndex = $index;\n            }\n        }\n    }\n\n    return $smallestEven === null ? [] : [$smallestEven, $smallestIndex];\n}","tests":"function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_69","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Yee pɩfɛyɩ kɔyɔ, pɩpɩsɩɣ -1.\/\/Ɛyʊ kʊyʊm kpɛlɛkʊʊ taa lɛ, ɛ-tɛ kʊyʊm kpɛlɛkʊʊ taa lɛ, pɩkɛ tam ɛzɩma ɛ-tɛ kʊyʊm kpɛlɛkʊʊ taa wɛʊ yɔ.\/\/Pɩtɛ lɛ, ɛyʊ wɛna ɛ-tɩ yɔɔ wɛʊ nɛ ɛ-tɛ ɛyʊ wɛʊ nɛ ɛ-tɛ ɛyʊ wɛʊ nɛ ɛ-tɛ ɛyʊ wɛʊ nɛ ɛ-tɛ ɛyʊ wɛʊ nɛ ɛ-tɛ ɛyʊ wɛʊ.\/\/Pɩtɛ lɛ, ŋnaɣ ɛyʊ weyi ɛ-tɛ ɛyʊ kɩlɩna ɖɔʊ yɔ nɛ ɛ-tɛ ɛyʊ kɩlɩna ɖɔʊ yɔ.\/\/ >>> search(array(4, 1, 2, 2, 3, 1))\n\/\/ 2\n\/\/ >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n\/\/ 3\n\/\/ >>> search(array(5, 5, 4, 4, 4))\n\/\/ -1\nfunction search($lst) {\n","canonical_solution":"function search($lst) {\n    \/\/ Create an associative array to store the frequencies of each integer\n    $frequency = array_count_values($lst);\n\n    \/\/ Initialize the result to -1 (to be returned if no valid integer is found)\n    $result = -1;\n\n    \/\/ Iterate over the frequency array\n    foreach ($frequency as $number => $count) {\n        \/\/ Check if the integer meets the criteria\n        if ($number <= $count && $number > $result) {\n            $result = $number;\n        }\n    }\n\n    return $result;\n}","tests":"function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8, 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_70","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩtɛ lɛ, ɛtɛyɩɣ ɛ-tɛ kɩlɩm nɛ ɛtɛyɩɣ ɛ-tɛ kɩlɩm nɛ pɩtɛ lɛ, ɛtɛyɩɣ ɛ-tɛ kɩlɩm nɛ pɩtɛ lɛ, ɛtɛyɩɣ ɛ-tɛ kɩlɩm.\/\/Pɩwɛ ɛzɩ ŋpaɣzɩɣnɩ kɩjɛyʊʊ yɔ, \/\/Ye ŋha-ɩ hɔɔlɩŋ weyi ɩ-taa ɛ-taa wɛ tɔm hɔɔlɩŋ tɩŋa yɔ, ɛkaɣ-ɩ pɩsʋʋ hɔɔlɩŋ weyi ɩ-taa ɛfɛyɩ yɔ.\/\/ >>> strange_sort_list(array(1, 2, 3, 4))\n\/\/ array(1, 4, 2, 3)\n\/\/ >>> strange_sort_list(array(5, 5, 5, 5))\n\/\/ array(5, 5, 5, 5)\n\/\/ >>> strange_sort_list(array())\n\/\/ array()\nfunction strange_sort_list($lst) {\n","canonical_solution":"function strange_sort_list($lst) {\n    $result = array();\n    sort($lst); \/\/ Sort the array in ascending order\n    \n    while (!empty($lst)) {\n        \/\/ Take the first (minimum) element\n        $result[] = array_shift($lst);\n        \n        \/\/ If there are still elements left, take the last (maximum) element\n        if (!empty($lst)) {\n            $result[] = array_pop($lst);\n        }\n    }\n    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_71","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Ɛlɛ, hɔɔlʋʋ naadozo ñɩŋgʋ taa lɛ, pɩcɛzɩ mbʋ.\/\/Hɔɔlɩŋ naadozo wɛna tam nabudozo taa yee ɛ-hɔɔlɩŋ naalɛ ɩ-taa ɛ-tɛ ɖɔʊ ɛkɩlɩ kɔyɔ.\/\/Pɩtɛkɛ mbʋ yɔ, pɩpɩsɩɣ -1 \/\/Pɩtɛ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa.\/\/Ye ɖɩkpaɣ ɛzɩ pʊtʊnaa mba pɛtɛyɩɣ ɖama yɔ, ɖɩkpaɣ pʊtʊnaa mba pɛtɛyɩɣ ɖama yɔ nɛ ɖɩpɩsɩ pʊtʊnaa mba pɛtɛyɩɣ ɖama yɔ.\/\/ >>> triangle_area(3, 4, 5)\n\/\/ 6.0\n\/\/ >>> triangle_area(1, 2, 10)\n\/\/ -1\nfunction triangle_area($a, $b, $c) {\n","canonical_solution":"function triangle_area($a, $b, $c) {\n    \/\/ Check if the sides form a valid triangle\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        \/\/ Calculate semi-perimeter\n        $s = ($a + $b + $c) \/ 2;\n        \/\/ Calculate the area using Heron's formula\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n        \/\/ Return the area rounded to 2 decimal places\n        return round($area, 2);\n    } else {\n        return -1; \/\/ Not a valid triangle\n    }\n}","tests":"function candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_72","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Pɩkɛ palindromie matrice nɛ ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrice taa ɛ-tɛ matrix taa ɛ-tɛ matrix taa ɛ-tɛ matrix taa ɛ-tɛ matrix taa ɛ-tɛ matrix taa\/\/Ma tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm ndʋ tɩkɛ toovenim yɔ, ye tɔm ndʋ tɩ-taa tɔm kɩlɩʋ ɛlɩwa yɔ, tɩkɛ toovenim nɛ ye tɩtɩkɛ toovenim yɔ, tɩkɛ cɛtɩm.\/\/ >>> will_it_fly(array(1, 2), 5)\n\/\/ false\n\/\/ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\/\/ >>> will_it_fly(array(3, 2, 3), 1)\n\/\/ false\n\/\/ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\/\/ >>> will_it_fly(array(3, 2, 3), 9)\n\/\/ true\n\/\/ # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\/\/ >>> will_it_fly(array(3), 5)\n\/\/ true\n\/\/ # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly($q, $w) {\n","canonical_solution":"function will_it_fly($q, $w) {\n    \/\/ Check if the array is palindromic\n    if ($q !== array_reverse($q)) {\n        return false;\n    }\n    \n    \/\/ Calculate the sum of elements in the array\n    $sum = array_sum($q);\n    \n    \/\/ Check if the sum is less than or equal to the maximum possible weight\n    return $sum <= $w;\n}","tests":"function candidate(...$args) {\n    return will_it_fly(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 2, 3), 9) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), 5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3), 5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 3), 1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5), 5) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_73","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ŋpɩzɩɣ nɛ ŋlɛɣzɩ hɔɔlʋʋ nakʋyʋ nɛ ŋla lɛɛbʋ.\/\/Pɩwɛɛ se pɛlɛɣzɩ-ɩ se pɩsa nɛ ɛ-tɛ matriki wɛɛ camɩyɛ. Matriki ŋgʋ kɩwɛ camɩyɛ yɔ, kɩwɛna matriki ŋgʋ kɩ-taa \/\/Ye ŋha-ɩ nimero waa tɩŋa nɛ pʊcɔ ŋtɛzɩ-ɩ yɔ, ŋñɩnɩ ɛyʊ weyi ɛ-ñʊʊ mayaɣ kɔyɔ \/\/ >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))\n\/\/ 4\n\/\/ >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))\n\/\/ 1\n\/\/ >>> smallest_change(array(1, 2, 3, 2, 1))\n\/\/ 0\nfunction smallest_change($arr) {\n","canonical_solution":"function smallest_change($arr) {\n    $n = count($arr);\n    $changes = 0;\n\n    for ($i = 0; $i < $n \/ 2; $i++) {\n        if ($arr[$i] !== $arr[$n - $i - 1]) {\n            $changes++;\n        }\n    }\n\n    return $changes;\n}","tests":"function candidate(...$args) {\n    return smallest_change(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 5, 4, 7, 9, 6)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 3, 2, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 4, 2)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 1, 1, 3)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_74","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Yee matriki naalɛ ɩwɛna matriki kɩkpɛdʊʊ kɔyɔ, pɩpɩsɩɣ kajalaɣ matriki.\/\/Kajalaɣ ñɩŋga lɛ se, paa ɛyʊ weyi lɛ, ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ\/\/Maʋ tʋmɩyɛ nɖɩ ɖɩmʋna matʋ naalɛ nɛ ɖɩpɩsɩ matʋ ndʋ tɩ-taa wɛ tɔmpiye  yɔ.\/\/ >>> total_match(array(), array())\n\/\/ array()\n\/\/ >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\"))\n\/\/ array(\"hI\", \"Hi\")\n\/\/ >>> total_match(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\"))\n\/\/ array(\"hi\", \"admin\")\n\/\/ >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\"))\n\/\/ array(\"hI\", \"hi\", \"hi\")\n\/\/ >>> total_match(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\"))\n\/\/ array(\"4\")\nfunction total_match($lst1, $lst2) {\n","canonical_solution":"function total_match($lst1, $lst2) {\n    $countChars = function($arr) {\n        $totalChars = 0;\n        foreach ($arr as $str) {\n            $totalChars += strlen($str);\n        }\n        return $totalChars;\n    };\n\n    $chars1 = $countChars($lst1);\n    $chars2 = $countChars($lst2);\n\n    if ($chars1 < $chars2) {\n        return $lst1;\n    } else {\n        return $lst2;\n    }\n}","tests":"function candidate(...$args) {\n    return total_match(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hi\", \"hi\")) !== array(\"hi\", \"hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\")) !== array(\"hi\", \"admin\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\")) !== array(\"4\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\")) !== array(\"hI\", \"Hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\")) !== array(\"hI\", \"hi\", \"hi\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hii\")) !== array(\"hi\", \"admin\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), array(\"this\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\"), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_75","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Ɖɩtɩlɩɣ se a) kɛ 100 ɛlɛ pɩtaatalɩ 100.\/\/Pɩtasɩ lɛ, tɔm ndʋ tɩtɩkɛ toovenim.\/\/Maɣna se ɛyʊ ɛpɩzɩ ɛlɩzɩ ɛ-tɛ ɛyʊ tɔm kɔyɔ, ɛ-tɛ ɛyʊ tɔm kɛ 3 taa ɛyʊ tɔm.\/\/ >>> is_multiply_prime(30)\n\/\/ true\n\/\/ 30 = 2 * 3 * 5\nfunction is_multiply_prime($a) {\n","canonical_solution":"function is_prime($num) {\n    if ($num <= 1) return false;\n    if ($num <= 3) return true;\n    if ($num % 2 == 0 || $num % 3 == 0) return false;\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n    }\n    return true;\n}\n\nfunction is_multiply_prime($a) {\n    if ($a < 2) return false;\n    $primes = [];\n    for ($i = 2; $i < 100; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n    $count = count($primes);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i; $j < $count; $j++) {\n            for ($k = $j; $k < $count; $k++) {\n                if ($primes[$i] * $primes[$j] * $primes[$k] == $a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return is_multiply_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(125) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(105) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(126) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(729) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(891) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1001) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_76","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/x kɛ n tɛ ɖoŋ mbʊ pʊyɔɔ yɔ n**int=x \/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Pɩwɛɛ se ŋma function ŋgʋ kɩpɩsɩɣ true yee x kɛ ɛyʊ yem yɔ.\/\/ >>> is_simple_power(1, 4)\n\/\/ true\n\/\/ >>> is_simple_power(2, 2)\n\/\/ true\n\/\/ >>> is_simple_power(8, 2)\n\/\/ true\n\/\/ >>> is_simple_power(3, 2)\n\/\/ false\n\/\/ >>> is_simple_power(3, 1)\n\/\/ false\n\/\/ >>> is_simple_power(5, 3)\n\/\/ false\nfunction is_simple_power($x, $n) {\n","canonical_solution":"function is_simple_power($x, $n) {\n    if ($x < 1 || $n < 1) {\n        return false;\n    }\n\n    $power = 1;\n    while ($power < $x) {\n        $power *= $n;\n    }\n\n    return $power === $x;\n}","tests":"function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_77","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Tɔzɩ se ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔm ndʋ ŋma yɔ tɩkɛ toovenim paa ɛzɩmtaa.\/\/Yee ɛyʊ ɛnɛ ɛkɛ ɛyʊ ɛyʊ tɛ kʊyʊm yɔ.\/\/Maɣna tʋmɩyɛ nɖɩ ɖɩkpaɣɣ ɛyʊ hɔɔlɩŋ tɩŋa taa a nɛ ɖɩpɩsɩɣ ɛ-tɛ tɔm yɔ .\/\/ >>> iscube(1)\n\/\/ true\n\/\/ >>> iscube(2)\n\/\/ false\n\/\/ >>> iscube(-1)\n\/\/ true\n\/\/ >>> iscube(64)\n\/\/ true\n\/\/ >>> iscube(0)\n\/\/ true\n\/\/ >>> iscube(180)\n\/\/ false\nfunction iscube($a) {\n","canonical_solution":"function iscube($a) {\n    $cubeRoot = round(pow(abs($a), 1\/3));\n    return $cubeRoot * $cubeRoot * $cubeRoot === abs($a);\n}","tests":"function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_78","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/nɛ matʋ A,B,C,D,E,F wɛ ɖoŋ ɖoŋ.\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩcɛyɩtʋ: Ŋpɩzɩɣ ŋmaɣzɩ se tɔm ndʋ ŋɖʋwa yɔ tɩkɛ toovenim yaa tɩkɛ cɛjɛsɩ.\/\/B (= decimal 11), D (= decimal 13) \/\/Pʋ-tɔbʋʋ se ŋñɩnɩɣ se ŋtɩlɩ hɔɔlɩŋ weyi ɩ-taa lɛ, 2, 3, 5, 7, \/\/Kɩ-tɛ kajalaɣ hɔɔlɩŋ kɔyɔ: 2, 3, 5, 7, 11, 13, 17...\/\/Hexadecimal waa kɔyɔ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Kɩ-tɛ lɛɣtʊ takayaɣ taa lɛ, pamaɣ se pɩlɩna ɛyʊ yɔɔ lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ.\/\/Ɛkɛ hexadecimalɩ mayaɣ ŋga kɛwɛ ɛzɩ ɛyʊ yɔ nɛ ɛmakɩ ɛ-tɛ hexadecimalɩ mayaɣ \/\/Payaɣ-mɩ se ŋma tʋmɩyɛ nɖɩ ɖɩmʋyaa yɔ.\/\/ >>> hex_key(\"AB\")\n\/\/ 1\n\/\/ >>> hex_key(\"1077E\")\n\/\/ 2\n\/\/ >>> hex_key(\"ABED1A33\")\n\/\/ 4\n\/\/ >>> hex_key(\"123456789ABCDEF0\")\n\/\/ 6\n\/\/ >>> hex_key(\"2020\")\n\/\/ 2\nfunction hex_key($num) {\n","canonical_solution":"function hex_key($num) {\n    \/\/ Map of hexadecimal digits to their respective prime number interpretation\n    $primeDigits = ['2', '3', '5', '7', 'B', 'D'];\n    \n    \/\/ Initialize count for prime numbers\n    $primeCount = 0;\n\n    \/\/ Iterate through each character in the hexadecimal string\n    for ($i = 0; $i < strlen($num); $i++) {\n        \/\/ Get the current character\n        $char = $num[$i];\n\n        \/\/ Check if the character is a prime hexadecimal digit\n        if (in_array($char, $primeDigits)) {\n            $primeCount++;\n        }\n    }\n\n    \/\/ Return the count of prime hexadecimal digits\n    return $primeCount;\n}","tests":"function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_79","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩwɛɛ se pama tɔm pee ana nɛ pɩkpaɖɩ mbʋ pamaɣ yɔ.\/\/Pɩkaɣ kɛʋna tɔmpiye 'db' pazɩyɛ nɛ ɖɩtɛ lɛɣtʋ ñɩnɩyaa.\/\/Paa mayaɣ ŋga lɛ, kɛwɛɣ \" 0 \" yaa \" 1 \".\/\/Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔmpiye, nɛ paa mayaɣ ŋga lɛ kɛwɛna binɛɛrɩ tɔmpiye \/\/Pʊtɔbʊʊ se ŋwɛna ŋñɩɩtʊ nɛ ŋñɩɩtʊ nɛ ŋñɩɩtʊ nɛ ŋñɩɩtʊ nɛ ŋñɩɩtʊ nɛ ŋñɩɩtʊ nɛ ŋñɩɩtʊ nɛ ŋñɩɩtʊ.\/\/ >>> decimal_to_binary(15)\n\/\/ \"db1111db\"\n\/\/ >>> decimal_to_binary(32)\n\/\/ \"db100000db\"\nfunction decimal_to_binary($decimal) {\n","canonical_solution":"function decimal_to_binary($decimal) {\n    \/\/ Convert the decimal number to binary string\n    $binary = decbin($decimal);\n    \n    \/\/ Add 'db' at the start and end of the binary string\n    return 'db' . $binary . 'db';\n}","tests":"function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== \"db0db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(32) !== \"db100000db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(103) !== \"db1100111db\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== \"db1111db\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_80","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Pɩtɛ tɔmpiye naɖɩyɛ wɛna ñɩɩtʊ sakɩyɛ yee ɖɩ-ɖaɣlɩkɩŋ ɛfɛyɩ pɩtatɩɩfɛyɩ nɛ paa tɔmpiye nɖɩ lɛ ɖɩ-taa lɛ, ɖɩ-taa matʊ naadozo wɛ ndɩ ndɩ.\/\/Pɩwɛɛ se ŋtazɩ nɛ ŋna se tɔm ndʋ tɩ-taa ŋwɛɛ yɔ, tɩkɛ toovenim yaa tɩkɛ toovenim.\/\/Pʊtɔbʊʊ se ŋwɛna ñʊʊ mayaɣ kʊyʊmʊ.\/\/ >>> is_happy(\"a\")\n\/\/ false\n\/\/ >>> is_happy(\"aa\")\n\/\/ false\n\/\/ >>> is_happy(\"abcd\")\n\/\/ true\n\/\/ >>> is_happy(\"aabb\")\n\/\/ false\n\/\/ >>> is_happy(\"adb\")\n\/\/ true\n\/\/ >>> is_happy(\"xyy\")\n\/\/ false\nfunction is_happy($s) {\n","canonical_solution":"function is_happy($s) {\n    $length = strlen($s);\n    if ($length < 3) {\n        return false;\n    }\n\n    for ($i = 0; $i <= $length - 3; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_81","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/0.0 E \/\/> 0.0 D- \/\/> 0.7 D \/\/> 1.0 D+ \/\/> 1.3 C- \/\/> 1.7 C \/\/> 2.0 C+ \/\/> 2.3 B- \/\/> 2.7 B \/\/> 3.0 B+ \/\/> 3.3 A- \/\/> 3.7 A \/\/4.0 A+ \/\/Kpɛlɩ kpɛlɛkʋʋ.\/\/tʊmɩyɛ nɖɩ papɩzɩɣ nɛ palɩzɩ ɖɩ-tɛ tɔmpiye ndɩ ɖɩ-tɛ tɔmpiye ndɩ ɖɩ-tɛ tɔmpiye nɛ pɩlɩɩna takayɩhatʋ ndʋ tɩwɛ pɩ-tɛɛ yɔ tɩ-yɔɔ: \/\/Ɛha-ŋ takayɩsɩ ndɩ ndɩ nɛ pɩpɔzʋʋ se ŋma-sɩ .\/\/Ɛlɛ, ɛ-tɛ lɛɣtʋ ñɩnʋʋ mbʋ pɩ-yɔɔ ɛlɩwa yɔ, pɩfɛyɩ ɛ-cɔlɔ.\/\/Tɔm wɩlɩyʋ ɛnʋ ɛ-maɣmaɣ ɛlɩzaa nɛ ɛlabɩnɩ ɛ-tɩ takayɩsɩ nzɩ sɩ-taa ɛmaɣzɩɣ se ɛ-tɔm ɛkpɛlɩkɩɣ yɔ.\/\/Pɩkɛ fenasɩ kʊɖʊmɖɩyɛ tɛ kpɩtaʊ kɛtɛzaɣ taa nɛ wɩlɩyʊ wɛɛ nɛ ɛwɩlɩɣ ɛ-takayɩsɩ taa.\/\/ >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\/\/ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades) {\n","canonical_solution":"function numerical_letter_grade($grades) {\n    $letterGrades = array();\n\n    foreach ($grades as $gpa) {\n        if ($gpa >= 4.0) {\n            $letterGrades[] = \"A+\";\n        } elseif ($gpa > 3.7) {\n            $letterGrades[] = \"A\";\n        } elseif ($gpa > 3.3) {\n            $letterGrades[] = \"A-\";\n        } elseif ($gpa > 3.0) {\n            $letterGrades[] = \"B+\";\n        } elseif ($gpa > 2.7) {\n            $letterGrades[] = \"B\";\n        } elseif ($gpa > 2.3) {\n            $letterGrades[] = \"B-\";\n        } elseif ($gpa > 2.0) {\n            $letterGrades[] = \"C+\";\n        } elseif ($gpa > 1.7) {\n            $letterGrades[] = \"C\";\n        } elseif ($gpa > 1.3) {\n            $letterGrades[] = \"C-\";\n        } elseif ($gpa > 1.0) {\n            $letterGrades[] = \"D+\";\n        } elseif ($gpa > 0.7) {\n            $letterGrades[] = \"D\";\n        } elseif ($gpa > 0.0) {\n            $letterGrades[] = \"D-\";\n        } else {\n            $letterGrades[] = \"E\";\n        }\n    }\n\n    return $letterGrades;\n}","tests":"function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_82","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Pɩtɛ lɛ, kɩ-kɩɖaʋ kɛna kɩjɛyʊʊ yaa kɩfɛyɩ ɖeu.\/\/Maʋ tʋmɩyɛ nɖɩ ɖɩkpaɣ tɔmpiye naɖɩyɛ nɛ ɖɩpɩsɩ tɔmpiye nɖɩ ɖɩkɛ toovenim yɔ, ye tɔmpiye nɖɩ ɖɩkɛ toovenim yɔ.\/\/ >>> prime_length(\"Hello\")\n\/\/ true\n\/\/ >>> prime_length(\"abcdcba\")\n\/\/ true\n\/\/ >>> prime_length(\"kittens\")\n\/\/ true\n\/\/ >>> prime_length(\"orange\")\n\/\/ false\nfunction prime_length($string) {\n","canonical_solution":"function prime_length($string) {\n    $length = strlen($string);\n\n    if ($length < 2) {\n        return false;\n    }\n\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i === 0) {\n            return false;\n        }\n    }\n\n    return true;\n}","tests":"function candidate(...$args) {\n    return prime_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdcba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"kittens\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"orange\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"wow\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"world\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"MadaM\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Wow\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"HI\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gogo\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaaaaaaaaaaaaa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Madam\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"M\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_83","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩwɛna nimasɩ kɩbana sakɩyɛ nɛ sɩpaɣzɩɣ yaa sɩtɛzɩɣna 1.\/\/Ye paha-ɖʋ nimero intérieur positif n yɔ, ɖitiyini-i nimero intérieur n waa mba pa-taa lɛ, ɖɩkpaɣ nimero intérieur waa mba pa-taa lɛ, ɖɩkpaɣ nimero intérieur waa mba pa-taa lɛ, ɖɩkpaɣ nimero intérieur waa mba.function starts_one_ends($n) {\n","canonical_solution":"function starts_one_ends($n) {\n    if ($n <= 0) return 0;\n    if ($n == 1) return 1;\n\n    $total_count = 9 * pow(10, $n - 1); \/\/ Total count of n-digit numbers\n    $non_one_start_count = 8 * pow(10, $n - 2); \/\/ n-digit numbers where the second digit is not zero\n    \n    \/\/ All numbers that start with 1:\n    $start_with_one_count = pow(10, $n - 1);\n\n    \/\/ All numbers that end with 1:\n    $end_with_one_count = pow(10, $n - 1);\n\n    \/\/ Numbers that both start and end with 1 are counted twice in the above summation\n    \/\/ so we subtract those:\n    $start_and_end_with_one_count = 1 * pow(10, $n - 2);\n    \n    $result = $start_with_one_count + $end_with_one_count - $start_and_end_with_one_count;    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_84","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ \/\/Pɩkɛna ɛyʊ kʊyʊm N, ɛ-tɛ kʊyʊm kʊyʊm tɔmpiye taa lɛ, pɩpɩsɩ ɛ-tɛ kʊyʊm kʊyʊm tɔmpiye taa.\/\/ >>> solve(1000)\n\/\/ \"1\"\n\/\/ >>> solve(150)\n\/\/ \"110\"\n\/\/ >>> solve(147)\n\/\/ \"1100\"\n\/\/ Variables:\n\/\/ @N integer\n\/\/ Constraints: 0 ≤ N ≤ 10000.\n\/\/ Output:\n\/\/ a string of binary number\nfunction solve($N) {\n","canonical_solution":"function solve($N) {\n    $sum = array_sum(str_split($N));\n    return decbin($sum);\n}","tests":"function candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1000) !== \"1\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(150) !== \"110\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(147) !== \"1100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(333) !== \"1001\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(963) !== \"10010\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_85","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩtɛ lɛ, ɖɩkpaɣ ɛyʊ weyi ɛfɛyɩna ɛ-tɩ yɔɔ yɔ nɛ ɖɩkpaɣ ɛ-tɛ ɛyʊ weyi ɛfɛyɩna ɛ-tɩ yɔɔ yɔ nɛ ɖɩkpaɣ ɛ-tɛ ɛyʊ weyi ɛfɛyɩna ɛ-tɩ yɔɔ yɔ nɛ ɖɩkpaɣ ɛ-tɛ ɛyʊ weyi ɛfɛyɩna ɛ-tɩ yɔɔ yɔ nɛ ɖɩkpaɣ ɛ-tɛ ɛyʊ weyi ɛfɛyɩna ɛ-tɩ yɔɔ yɔ.\/\/ >>> add(array(4, 2, 6, 7))\n\/\/ 2\nfunction add($lst) {\n","canonical_solution":"function add($lst) {\n    $sum = 0;\n    for ($i = 1; $i < count($lst); $i += 2) {\n        if ($lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}","tests":"function candidate(...$args) {\n    return add(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 88)) !== 88) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7, 2, 122)) !== 122) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 0, 6, 7)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 4, 6, 8)) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_86","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Tɔzɩ se: Pɩwɛɛ se ŋɖɔ tɔm pee nɛ hɔɔlɩŋ weyi ɩ-taa ŋtɩŋ yɔ ɩ-yɔɔ.\/\/Pɩtɛ kɩlɛmʋʋ yɔɔ lɛ, ŋnaɣ mbʋ payaɣ se \" ascii value \" yɔ.\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩfatʋ:\/\/Tɔmpiye nɖɩ ɖɩ-taa tɔm pee tɩŋa (pɩlɩna tɔm pee ndɩ ndɩ yɔɔ)\/\/Ma tʋmɩyɛ naɖɩyɛ nɛ ɖɩkpaɣ tɔmpiye naɖɩyɛ nɛ ɖɩpɩsɩ-ɖɩ nɛ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-taa tɔmpiye naɖɩyɛ wɛɛ yɔ.\/\/ >>> anti_shuffle(\"Hi\")\n\/\/ \"Hi\"\n\/\/ >>> anti_shuffle(\"hello\")\n\/\/ \"ehllo\"\n\/\/ >>> anti_shuffle(\"Hello World!!!\")\n\/\/ \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n","canonical_solution":"function anti_shuffle($s) {\n    \/\/ Split the string by space to preserve words and spaces\n    $words = preg_split('\/(\\s+)\/', $s, -1, PREG_SPLIT_DELIM_CAPTURE);\n\n    \/\/ Array to hold ordered words\n    $ordered_words = [];\n\n    \/\/ Iterate through each word or space in the array\n    foreach ($words as $word) {\n        \/\/ If it's a word (not only spaces)\n        if (trim($word) !== '') {\n            \/\/ Convert the word into an array of characters, sort it, and rejoin\n            $chars = str_split($word);\n            sort($chars);\n            $ordered_words[] = implode('', $chars);\n        } else {\n            \/\/ If it's a space or multiple spaces, preserve them as they are\n            $ordered_words[] = $word;\n        }\n    }\n\n    \/\/ Join the array back into a string and return\n    return implode('', $ordered_words);\n}","tests":"function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_87","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩtasɩ lɛ, ŋpɩzɩɣ nɛ ŋlɩzɩ tɔm ndʋ tɩ-taa ŋcaɣ yɔ nɛ ŋyele nɛ tɩ-taa tɔm pee wɛɛ ndɩ ndɩ.\/\/Pɩwɛɛ se pacalɩ ñɔɔzʋʋ coordonnées waa nɛ pɩkpazɩɣ-sɩ.\/\/paa matrice nɖɩ ɖɩ-taa lɛ, ɖɩ-taa wɛ coordonnées (sɩɩ, pilinzi), sɩpaɣzɩɣna 0.\/\/nɛ pɩpɩsɩɣ matrice waa matrice, [(x1, y1), (x2, y2) ...] pɩlɩna se \/\/Ɖɩcɔna lst nɛ x lɛ, ɖɩnaɣ ɛyʊ ɛ-tɛ intɛrɩjɛrɩ x, \/\/paa n̄ɩŋgʋ ŋgʋ kɩ-taa lɛ, pɩpɩzɩɣ nɛ pɩla se pilinzi ndɩ ndɩ wɛɛ kɩ-taa.\/\/Pɩwɛ ɛzɩ matrix yɔ, ɛlɛ pɩtɛkɛ ɛzɩ matrix yɔ, \/\/Pʊtɔbʊʊ se ŋwɛna 2 dimension waa, ɛzɩ matrice waa, \/\/ >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n\/\/ array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n\/\/ >>> get_row(array(), 1)\n\/\/ array()\n\/\/ >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\/\/ array(array(2, 2))\nfunction get_row($lst, $x) {\n","canonical_solution":"function get_row($lst, $x) {\n    $coordinates = array();\n    \/\/ Iterate over each row with its index.\n    foreach ($lst as $row_idx => $row) {\n        $row_coordinates = array();\n        \/\/ Iterate over each element in the row with its index.\n        foreach ($row as $col_idx => $value) {\n            if ($value === $x) {\n                \/\/ Add the coordinate as a pair (row index, column index).\n                $row_coordinates[] = array($row_idx, $col_idx);\n            }\n        }\n        \/\/ Sort the coordinates of this row by columns in descending order.\n        usort($row_coordinates, function($a, $b) {\n            return $b[1] - $a[1];\n        });\n        \/\/ Merge sorted row coordinates into the main coordinates list.\n        $coordinates = array_merge($coordinates, $row_coordinates);\n    }\n    \/\/ Return the sorted coordinates.\n    return $coordinates;\n}","tests":"function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_88","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/* Taapɩsɩna matʋ ndʋ tɩ-taa pama-tʋ yɔ.\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ:\/\/Yaa ɛ-tɛ tɔlɩm tɛ lɛ, ɛ-tɛ tɔlɩm tɛ lɛ, ɛ-tɛ tɔlɩm tɛ lɛ, ɛ-tɛ tɔlɩm tɛ lɛ, ɛ-tɛ tɔlɩm tɛ lɛ.\/\/Ŋkaɣ ñɔɔzʋʋ matriki ŋgʋ kɩ-taa ŋnaɣ yɔ, nɛ ŋpaɣzɩ-kʋ ɖɔm nɛ pɩkpazɩɣ-kʋ ɖoŋ, ye kɩ-taa ɛ-kajalaɣ kɩlɩm nɛ ɛ-wayɩ ñɩŋgʋ pɛkpɛndɩna yɔ, pɩfɛyɩ kɩmaŋ, \/\/Pɩtɛ matʊ ndʊ tɩtɩkɛ kɩjɛyʊʊ yɔ, pɩpɩsɩ cophp matʊ ndʊ tɩ-taa pɩtɛ lɛ, \/\/ >>> sort_array(array())\n\/\/ array()\n\/\/ >>> sort_array(array(5))\n\/\/ array(5)\n\/\/ >>> sort_array(array(2, 4, 3, 0, 1, 5))\n\/\/ array(0, 1, 2, 3, 4, 5)\n\/\/ >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\/\/ array(6, 5, 4, 3, 2, 1, 0)\nfunction sort_array($array) {\n","canonical_solution":"function sort_array($array) {\n    if (empty($array)) {\n        return $array;\n    }\n\n    $firstIndexValue = $array[0];\n    $lastIndexValue = $array[count($array) - 1];\n    $sum = $firstIndexValue + $lastIndexValue;\n\n    $sortedArray = $array;\n    if ($sum % 2 === 0) {\n        \/\/ Sort in descending order\n        rsort($sortedArray);\n    } else {\n        \/\/ Sort in ascending order\n        sort($sortedArray);\n    }\n\n    return $sortedArray;\n}","tests":"function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_89","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Pɩtɛ lɛ, ɖɩkpaɣ ɛzɩ ɛyaa naalɛ yɔ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ lona naalɛ.\/\/Pɩwɛɛ se pɛlɛɣzɩ alfabbɛɛtɩ ŋgʋ nɛ pama-kʋ nɛ pamaɣna se \/\/pɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ alɩbɛɛtɩ wɛʊ yɔ.\/\/Kpaɣ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɛ \/\/ >>> encrypt(\"hi\")\n\/\/ \"lm\"\n\/\/ >>> encrypt(\"asdfghjkl\")\n\/\/ \"ewhjklnop\"\n\/\/ >>> encrypt(\"gf\")\n\/\/ \"kj\"\n\/\/ >>> encrypt(\"et\")\n\/\/ \"ix\"\nfunction encrypt($s) {\n","canonical_solution":"function encrypt($s) {\n    $result = '';\n    $shift = 4; \/\/ 2 multiplied by 2\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        $char = $s[$i];\n        \n        if (ctype_alpha($char)) {\n            $ordStart = ctype_lower($char) ? ord('a') : ord('A');\n            $char = chr($ordStart + (ord($char) - $ordStart + $shift) % 26);\n        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_90","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ye pɩfɛyɩ mbʋ yɔ, pɩpɩsɩɣ null.\/\/Maʋ tʋmɩyɛ nɖɩ payaɣ se next_smallest (ŋgbɛzɛŋ) yɔ nɛ ɖɩpɩsɩɣ mbʋ payaɣ se 2nd smallest yɔ.\/\/Pʊtɔbʊʊ se ŋwɛna nimero waa sakɩyɛ.\/\/ >>> next_smallest(array(1, 2, 3, 4, 5))\n\/\/ 2\n\/\/ >>> next_smallest(array(5, 1, 4, 3, 2))\n\/\/ 2\n\/\/ >>> next_smallest(array())\n\/\/ null\n\/\/ >>> next_smallest(array(1, 1))\n\/\/ null\nfunction next_smallest($lst) {\n","canonical_solution":"function next_smallest($lst) {\n    \/\/ Remove duplicate elements\n    $unique_lst = array_unique($lst);\n\n    \/\/ Sort the array\n    sort($unique_lst);\n\n    \/\/ Check if there are at least two elements in the sorted array\n    if (count($unique_lst) < 2) {\n        return null;\n    }\n\n    \/\/ Return the second smallest element\n    return $unique_lst[1];\n}","tests":"function candidate(...$args) {\n    return next_smallest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 4, 3, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-35, 34, 12, -45)) !== -35) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_91","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Tɔm hɔɔlɩŋ taa lɛ, pamaɣna-ɩ nɛ mayaɣ '.', '?' yaa '!'.\/\/Tɔm piye \"m\" ɖɩlɩna tɔm piye \"m\" taa.\/\/Pɔkɔŋ-ŋ haʋ tɔm pee sakɩyɛ nɛ ña-tʋmɩyɛ lɛ se ŋkalɩ-yɛ.\/\/ >>> is_bored(\"Hello world\")\n\/\/ 0\n\/\/ >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\/\/ 1\nfunction is_bored($S) {\n","canonical_solution":"function is_bored($S) {\n    \/\/ Split the string into sentences using regex\n    $sentences = preg_split('\/[.!?]\\s*\/', trim($S));\n\n    $boredom_count = 0;\n    foreach ($sentences as $sentence) {\n        \/\/ Check if the trimmed sentence starts with \"I\"\n        if (trim($sentence) !== '' && strpos(trim($sentence), 'I') === 0) {\n            $boredom_count++;\n        }\n    }\n\n    return $boredom_count;\n}","tests":"function candidate(...$args) {\n    return is_bored(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Is the sky blue?\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love It !\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bIt\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I feel good today. I will be productive. will kill It\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"You and I are going for a walk\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_92","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Pɩpɩsɩɣ false paa ɛzɩmtaa.\/\/Ɛpɩsɩɣ tɔmpiye nɖɩ ɖɩ-taa lɛ, yee tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ.\/\/Lɩzɩ tʋmɩyɛ nɖɩ ɖɩmʋɣna nimbrɩwaa naadozo yɔ.\/\/ >>> any_int(5, 2, 7)\n\/\/ true\n\/\/ >>> any_int(3, 2, 2)\n\/\/ false\n\/\/ >>> any_int(3, -2, 1)\n\/\/ true\n\/\/ >>> any_int(3.6, -2.2, 2)\n\/\/ false\nfunction any_int($x, $y, $z) {\n","canonical_solution":"function any_int($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return ($x === $y + $z) || ($y === $x + $z) || ($z === $x + $y);\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_93","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Maɣzɩ se masɩ ɖeke tɔm.\/\/Tɔm piye nɖɩ ɖɩlɩnɩ tɔm piye nɖɩ ɖɩ-taa?\/\/Tɔm ndʋ tɩ-taa lɛ , pama takayaɣ ŋga ka-taa pama tɔm pee naalɛ yɔ .\/\/Ɛlɛɣzɩna matʋ tɩŋa nɛ ɛtɛzɩna matʋ ndʋ tɩ-taa paayɔɔdɩ yɔ.\/\/Maʋ tʋmɩyɛ nɖɩ ɖɩmʋɣ tɔm natʋyʋ nɛ ɖɩɖʋ-tʋ takayaɣ nakɛyɛ taa yɔ.\/\/ >>> encode(\"test\")\n\/\/ \"TGST\"\n\/\/ >>> encode(\"This is a message\")\n\/\/ \"tHKS KS C MGSSCGG\"\nfunction encode($message) {\n","canonical_solution":"function encode($message) {\n    $encodedMessage = '';\n    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    $replacement = ['c', 'g', 'k', 'q', 'w', 'C', 'G', 'K', 'Q', 'W'];\n\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n        if (in_array($char, $vowels)) {\n            \/\/ Find the index of the vowel and replace it\n            $index = array_search($char, $vowels);\n            $encodedMessage .= $replacement[$index];\n        } else {\n            \/\/ Swap case for consonants\n            $encodedMessage .= ctype_upper($char) ? strtolower($char) : strtoupper($char);\n        }\n    }\n\n    return $encodedMessage;\n}","tests":"function candidate(...$args) {\n    return encode(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"TEST\") !== \"tgst\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mudasir\") !== \"mWDCSKR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YES\") !== \"ygs\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"This is a message\") !== \"tHKS KS C MGSSCGG\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I DoNt KnOw WhAt tO WrItE\") !== \"k dQnT kNqW wHcT Tq wRkTg\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_94","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩwɛɛ se ɖɩñɩnɩ mayaɣ ŋga kɛwɛ ñɩm siŋŋ yɔ nɛ ɖɩpɩsɩ ka-taa mayaɣ ŋga kɛwɛ ñɩm siŋŋ yɔ.\/\/Pʊtɔbʊʊ se ŋwɛna nimero waa sakɩyɛ.\/\/ >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n\/\/ 10\n\/\/ >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n\/\/ 25\n\/\/ >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n\/\/ 13\n\/\/ >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n\/\/ 11\n\/\/ >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))\n\/\/ 3\n\/\/ >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))\n\/\/ 7\nfunction skjkasdkd($lst) {\n","canonical_solution":"function skjkasdkd($lst) {\n    \/\/ Helper function to check prime status\n    function is_prime($num) {\n        if ($num <= 1) return false;\n        if ($num <= 3) return true;\n        if ($num % 2 == 0 || $num % 3 == 0) return false;\n        for ($i = 5; $i * $i <= $num; $i += 6) {\n            if ($num % $i == 0 || $num % ($i + 2) == 0) return false;\n        }\n        return true;\n    }\n    \n    $largest_prime = -1;\n    \n    \/\/ Find the largest prime in the list\n    foreach ($lst as $num) {\n        if (is_prime($num) && $num > $largest_prime) {\n            $largest_prime = $num;\n        }\n    }\n    \n    if ($largest_prime == -1) return 0;\n    \n    \/\/ Sum the digits of the largest prime\n    $sum_of_digits = 0;\n    while ($largest_prime > 0) {\n        $sum_of_digits += $largest_prime % 10;\n        $largest_prime = intdiv($largest_prime, 10);\n    }\n    \n    return $sum_of_digits;\n}","tests":"function candidate(...$args) {\n    return skjkasdkd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 81, 12, 3, 1, 21)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 8, 1, 2, 1, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8191)) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8191, 123456, 127, 7)) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(127, 97, 8192)) !== 10) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_95","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩwɛɛ se tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ false yee matriki ŋgʋ kɩ-taa ɖɩwɛɛ yɔ kɩfɛyɩ pʋyʋ yɔ.\/\/Pɩtɛkɛ mbʋ yɔ, pɩpɩsɩɣ false.\/\/Ye ɖɩkpaɣ se ɖɩnaɣ matrice naɖɩyɛ yɔ, ɖɩpɩsɩɣ true yee ɖɩnaɣ se kɩ-taa tɔm tɩŋa wɛ lower  taa yɔ.\/\/ >>> check_dict_case(array(\"a\" => \"apple\", \"b\" => \"banana\"))\n\/\/ true\n\/\/ >>> check_dict_case(array(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n\/\/ false\n\/\/ >>> check_dict_case(array(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n\/\/ false\n\/\/ >>> check_dict_case(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n\/\/ false\n\/\/ >>> check_dict_case(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n\/\/ true\nfunction check_dict_case($dict) {\n","canonical_solution":"function check_dict_case($dict) {\n    if (empty($dict)) {\n        return false;\n    }\n\n    $allLowerCase = true;\n    $allUpperCase = true;\n\n    foreach ($dict as $key => $value) {\n        if (!is_string($key)) {\n            return false;\n        }\n\n        if (ctype_lower($key)) {\n            $allUpperCase = false;\n        } else if (ctype_upper($key)) {\n            $allLowerCase = false;\n        } else {\n            return false;\n        }\n    }\n\n    return $allLowerCase || $allUpperCase;\n}","tests":"function candidate(...$args) {\n    return check_dict_case(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"p\" => \"pineapple\", \"b\" => \"banana\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_96","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ɛyʊ ɛ-tɛ ɛyʊtʊ ndʊ tɩ-tɛ ɛyʊtʊ ndʊ tɩkɩlɩɣ yɔ.\/\/Palakɩ tʊmɩyɛ nɖɩ ɖɩkpaɣɣ ɛyʊ kʊyʊm nɛ ɖɩpɩsɩɣ kajalaɣ n ñɩŋʊ yɔ.\/\/ >>> count_up_to(5)\n\/\/ array(2, 3)\n\/\/ >>> count_up_to(11)\n\/\/ array(2, 3, 5, 7)\n\/\/ >>> count_up_to(0)\n\/\/ array()\n\/\/ >>> count_up_to(20)\n\/\/ array(2, 3, 5, 7, 11, 13, 17, 19)\n\/\/ >>> count_up_to(1)\n\/\/ array()\n\/\/ >>> count_up_to(18)\n\/\/ array(2, 3, 5, 7, 11, 13, 17)\nfunction count_up_to($n) {\n","canonical_solution":"function count_up_to($n) {\n    if ($n <= 2) {\n        return array();\n    }\n\n    $primes = array();\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n\n    return $primes;\n}\n\nfunction is_prime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    if ($num <= 3) {\n        return true;\n    }\n    if ($num % 2 == 0 || $num % 3 == 0) {\n        return false;\n    }\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"function candidate(...$args) {\n    return count_up_to(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(2, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== array(2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(22) !== array(2, 3, 5, 7, 11, 13, 17, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(47) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(101) !== array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_97","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩwɛɛ se ɖɩmaɣzɩ se tɔm ndʋ ɖɩyɔɔdaa yɔ, tɩkɛ toovenim paa ɛzɩmtaa.\/\/Kɩ-tɛ n̄ɩɣyʋʋ kɛ ɛ-tɛ n̄ɩɣyʋʋ mayaɣ.\/\/Kpaɣ kɩ-tɛ ɛyʊ nɛ ɛɖaɣnɩ pɩsʋʋ ɛ-tɛ ɛyʊ.\/\/ >>> multiply(148, 412)\n\/\/ 16\n\/\/ >>> multiply(19, 28)\n\/\/ 72\n\/\/ >>> multiply(2020, 1851)\n\/\/ 0\n\/\/ >>> multiply(14, -15)\n\/\/ 20\nfunction multiply($a, $b) {\n","canonical_solution":"function multiply($a, $b) {\n    $unitDigitA = abs($a) % 10;\n    $unitDigitB = abs($b) % 10;\n    return $unitDigitA * $unitDigitB;\n}","tests":"function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_98","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ye ŋwɛna masɩ nzɩ sɩ-taa pama hɩla kɩsɛsɛna yɔ, kalɩ masɩ nzɩ sɩ-taa pama hɩla kɩsɛna yɔ.\/\/ >>> count_upper(\"aBCdEf\")\n\/\/ 1\n\/\/ >>> count_upper(\"abcdefg\")\n\/\/ 0\n\/\/ >>> count_upper(\"dBBE\")\n\/\/ 0\nfunction count_upper($s) {\n","canonical_solution":"function count_upper($s) {\n    $count = 0;\n    $vowels = ['A', 'E', 'I', 'O', 'U'];\n\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n\n    return $count;\n}","tests":"function candidate(...$args) {\n    return count_upper(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aBCdEf\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdefg\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dBBE\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"B\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"U\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"EEEE\") !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_99","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Ɛlɩna ɛyʊ ɛ-tɛ ɛyʊtʊ naalɛ yɔɔ, ɛ-tɛ ɛyʊtʊ ɛ-tɛ ɛyʊtʊ ɛ-tɛ ɛyʊtʊ ɛ-tɛ ɛyʊtʊ ɛ-tɛ ɛyʊtʊ.\/\/Ɛtɛyɩɣ ɛ-tɛ ɛyʊ kɩfalʊ nɛ ɛ-tɛ ɛyʊ kɩfalʊ.\/\/Lɩzɩ tʊmɩyɛ nɖɩ ɖɩkpaɣɣ kɩjɛyɩɣ (ŋgbɛyɛ) nɛ ɖɩwɩlɩɣ mayaɣ nakɛyɛ yɔ \/\/ >>> closest_integer(\"10\")\n\/\/ 10\n\/\/ >>> closest_integer(\"15.3\")\n\/\/ 15\n\/\/ Note:\n\/\/ Rounding away from zero means that if the given number is equidistant\n\/\/ from two integers, the one you should return is the one that is the\n\/\/ farthest from zero. For example closest_integer(\"14.5\") should\n\/\/ return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n","canonical_solution":"function closest_integer($value) {\n    $number = floatval($value);\n    if ($number > 0) {\n        return floor($number + 0.5);\n    } else {\n        return ceil($number - 0.5);\n    }\n}","tests":"function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_100","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/i kɛna pɩyɛ ndɩ ɖɩ-tɛ wɛtʊ (i+1).\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ:\/\/- ɛtɛyɩɣ ɛtɛyɩɣ lɛ, ɛtɛyɩɣ ɖɔɖɔ. \/\/- ɛtɛyɩɣ nabʊyʊ taa yee n ɛtɛyɩɣ kɔyɔ. \/\/Pɩtɛ pɩyɛ nɖɩ ɖɩ-taa pɩcɩɩcɩɩ yɔ, ɖɩ-taa:\/\/Kajalaɣ n̄ɩɣyʋʋ taa lɛ, n̄ɩɣlɩm n̄ɩmbʋ.\/\/Ye ŋha-ɖʋ ɛyʊ kʊyʊmʊm n kɔyɔ, pɩwɛɛ se ŋñɔɔzɩ ɛ-tɩ nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa.\/\/ >>> make_a_pile(3)\n\/\/ array(3, 5, 7)\nfunction make_a_pile($n) {\n","canonical_solution":"function make_a_pile($n) {\n    $pile = [];\n    $currentStones = $n;\n    \n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $currentStones;\n        if ($n % 2 == 0) {\n            $currentStones += 2;\n        } else {\n            $currentStones += 2;\n        }\n    }\n    \n    return $pile;\n}","tests":"function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_101","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Pɩsɩ nɛ ŋna-ɩ kɩlɛlʋʋ:\/\/Ŋkaɣ wɛnʋʋ tɔm pee sakɩyɛ nɛ ŋtayɩ-yɛ nɛ hɩlaɣ yaa tɩyɛ.\/\/ >>> words_string(\"Hi, my name is John\")\n\/\/ array(\"Hi\", \"my\", \"name\", \"is\", \"John\")\n\/\/ >>> words_string(\"One, two, three, four, five, six\")\n\/\/ array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")\nfunction words_string($s) {\n","canonical_solution":"function words_string($s) {\n    \/\/ Remove any commas and split by spaces\n    return preg_split('\/[\\s,]+\/', $s, -1, PREG_SPLIT_NO_EMPTY);\n}","tests":"function candidate(...$args) {\n    return words_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hi, my name is John\") !== array(\"Hi\", \"my\", \"name\", \"is\", \"John\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"One, two, three, four, five, six\") !== array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi, my name\") !== array(\"Hi\", \"my\", \"name\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"One,, two, three, four, five, six,\") !== array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ahmed     , gamal\") !== array(\"ahmed\", \"gamal\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_102","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ye pɩfɛyɩ kɔyɔ, pɩpɔzʋʋ se ɖɩpɩsɩɣ -1.\/\/Ɛjaɖɛ nɖɩ ɖɩ-taa lɛ, ɛyaa mba pɛtɛyɩɣ ɖama yɔ, pa-taa lɛ, mba kɩlɩna ɖɔʊ.\/\/Tʊmɩyɛ ɖɩnɛ ɖɩkpaɣ ɛyʊ kʊdɔŋ naalɛ x nɛ y nɛ ɖɩpɩsɩ ɛyʊ kʊdɔŋ \/\/ >>> choose_num(12, 15)\n\/\/ 14\n\/\/ >>> choose_num(13, 12)\n\/\/ -1\nfunction choose_num($x, $y) {\n","canonical_solution":"function choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    \n    \/\/ Start from the larger number\n    $maxNumber = max($x, $y);\n\n    \/\/ Check for the largest even number\n    if ($maxNumber % 2 == 1) {\n        $maxNumber--;\n    }\n\n    \/\/ Ensure it's within the range\n    if ($maxNumber >= min($x, $y)) {\n        return $maxNumber;\n    }\n\n    return -1;\n}","tests":"function candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_103","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Yee n ɛkɩlɩ m kɔyɔ, pɩpɩsɩɣ -1.\/\/Pɩtɛ lɛ, ŋtɛzɩ pɩsʋʋ nabʋlɛ ñɩmbʋ.\/\/Kɩ-tɛ lɛɣtʊ kpɛlɛkʊʊ tʊmɩyɛ (CPC)\/\/Pʊtɔbʊʊ se ŋwɛna ñʊʊ taa ɛyʊ naalɛ nɛ pʊtɔbʊʊ se ñʊʊ taa ɛyʊ naalɛ nɛ pʊtɔbʊʊ se ñʊʊ taa ɛyʊ naalɛ.\/\/ >>> rounded_avg(1, 5)\n\/\/ \"0b11\"\n\/\/ >>> rounded_avg(7, 5)\n\/\/ -1\n\/\/ >>> rounded_avg(10, 20)\n\/\/ \"0b1111\"\n\/\/ >>> rounded_avg(20, 33)\n\/\/ \"0b11010\"\nfunction rounded_avg($n, $m) {\n","canonical_solution":"function rounded_avg($n, $m) {\n    if ($n > $m) {\n        return -1;\n    }\n    \n    $total_sum = 0;\n    $count = 0;\n    \n    for ($i = $n; $i <= $m; $i++) {\n        $total_sum += $i;\n        $count++;\n    }\n    \n    $average = $total_sum \/ $count;\n    $rounded_average = round($average);\n    \n    return \"0b\" . decbin($rounded_average);\n}","tests":"function candidate(...$args) {\n    return rounded_avg(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 5) !== \"0b11\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 13) !== \"0b1010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(964, 977) !== \"0b1111001010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(996, 997) !== \"0b1111100100\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(560, 851) !== \"0b1011000010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(185, 546) !== \"0b101101110\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(362, 496) !== \"0b110101101\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(350, 902) !== \"0b1001110010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(197, 233) !== \"0b11010111\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 5) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 1) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 5) !== \"0b101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_104","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Pɩwɛɛ se patɩlɩ ɛzɩma palɩzɩ tɔm pee kɩbana yɔ.\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Ye ŋha-ɩ kɩ-tɛ intɛrɩjɛrɩ waa kɩbam x yɔ, pɩsɩna nɛ ɛlɩzɩ kɩ-tɛ intɛrɩjɛrɩ waa tɩŋa.\/\/ >>> unique_digits(array(15, 33, 1422, 1))\n\/\/ array(1, 15, 33)\n\/\/ >>> unique_digits(array(152, 323, 1422, 10))\n\/\/ array()\nfunction unique_digits($x) {\n","canonical_solution":"function unique_digits($x) {\n    $result = array();\n\n    foreach ($x as $number) {\n        $digits = str_split($number);\n        $hasEvenDigit = false;\n\n        foreach ($digits as $digit) {\n            if ((int)$digit % 2 == 0) {\n                $hasEvenDigit = true;\n                break;\n            }\n        }\n\n        if (!$hasEvenDigit) {\n            $result[] = $number;\n        }\n    }\n\n    sort($result);\n    return $result;\n}","tests":"function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_105","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/\"Kʋyʋm\", \"Ɛyaa naalɛ\", \"Naadozo\", \"Naanza\", \"Lima\", \"Lamamɩŋ\", \"Lazɩm\", \"Lamɩŋ lutozo\", \"Lamɩŋ lutozo\", \"Lamɩŋ nakʋ\".\/\/Pɩtɛ lɛ, ɖɩlɛɣzɩna paa mayaɣ ŋga nɛ ka-hɩɖɛ.\/\/Ye ŋha-ɖʋ intɛrɩ waa sakɩyɛ yɔ, kpaɣ intɛrɩ waa mba pɛwɛ 1 nɛ 9 pɛ-hɛkʊ taa yɔ, \/\/ >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\n\/\/ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n\/\/ If the array is empty, return an empty array:\n\/\/ >>> by_length(array())\n\/\/ array()\n\/\/ If the array has any strange number ignore it:\n\/\/ >>> by_length(array(1, -1, 55))\n\/\/ array(\"One\")\nfunction by_length($arr) {\n","canonical_solution":"function by_length($arr) {\n    \/\/ Filter the array to include only numbers between 1 and 9\n    $filtered = array_filter($arr, function($num) {\n        return $num >= 1 && $num <= 9;\n    });\n\n    \/\/ Sort the filtered array\n    sort($filtered);\n\n    \/\/ Reverse the sorted array\n    $reversed = array_reverse($filtered);\n\n    \/\/ Mapping numbers to their corresponding names\n    $numberNames = [\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\n    ];\n\n    \/\/ Replace numbers with their corresponding names\n    return array_map(function($num) use ($numberNames) {\n        return $numberNames[$num];\n    }, $reversed);\n}","tests":"function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_106","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Kɩ-tɛ tɔmpiye i kɛna 1 nɛ i pɛ-tɛ tɔmpiye (1 * 2 * ... * i).\/\/Maɣzɩnɩ 1 yɔɔ.\/\/yaa lɛɛna taa lɛ, pɩlɩɣna 1 nɛ piwolo i pɛ-hɛkʊ taa.\/\/Ɛpɩsɩɣ ɛ-tɛ matriki sɔsɔʊ n, nɛ pɩsa nɛ ɛ-tɛ ɛyʊ weyi ɛwɛ ɛ-tɛtʊ taa yɔ, ɛ-tɛ ɛyʊ lɛlʊ kɔyɔ, ɛ-tɛ ɛyʊ lɛlʊ kɔyɔ, ɛ-tɛ ɛyʊ lɛlʊ kɔyɔ.\/\/Ɖɩkpaɣ f kɛ ɛ-tɛ lɛɣtʊ tʊmɩyɛ, \/\/ >>> f(5)\n\/\/ array(1, 2, 6, 24, 15)\nfunction f($n) {\n","canonical_solution":"function f($n) {\n    $result = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = factorial($i);\n        } else {\n            $result[] = sum($i);\n        }\n    }\n    return $result;\n}\n\nfunction factorial($num) {\n    if ($num == 0) {\n        return 1;\n    }\n    $fact = 1;\n    for ($j = 1; $j <= $num; $j++) {\n        $fact *= $j;\n    }\n    return $fact;\n}\n\nfunction sum($num) {\n    return ($num * ($num + 1)) \/ 2;\n}","tests":"function candidate(...$args) {\n    return f(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(1, 2, 6, 24, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1, 2, 6, 24, 15, 720, 28)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_107","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ 1:\/\/Palindromes waa mba pɛwɛ hɔɔlɩŋ weyi ɩ-taa yɔ, mba payaɣ se ((1, n), nɛ pɩkpɛndɩnɩ.\/\/Ye ŋha-ɩ nimero intérieur positif n, pɩsɩna nɛ ŋha-ɩ nimero waa mba pɛtɛyɩɣ nɛ mba pɛtɛyɩɣ yɔ.\/\/ >>> even_odd_palindrome(3)\n\/\/ array(1, 2)\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\/\/ Example 2:\n\/\/ >>> even_odd_palindrome(12)\n\/\/ array(4, 6)\n\/\/ Explanation:\n\/\/ Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\/\/ Note:\n\/\/ 1. 1 <= n <= 10^3\n\/\/ 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome($n) {\n","canonical_solution":"function even_odd_palindrome($n) {\n    $even_count = 0;\n    $odd_count = 0;\n    \n    for ($i = 1; $i <= $n; $i++) {\n        if (strval($i) === strrev(strval($i))) {\n            if ($i % 2 === 0) {\n                $even_count++;\n            } else {\n                $odd_count++;\n            }\n        }\n    }\n    \n    return array($even_count, $odd_count);\n}","tests":"function candidate(...$args) {\n    return even_odd_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(123) !== array(8, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== array(6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(25) !== array(5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19) !== array(4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_108","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɖɩkpaɣ ɛzɩ -123 lɛ, ɛ-tɛ mayaɣ kɔyɔ -1, 2 nɛ 3.\/\/Yee nimero nakʋyʋ ɛwɛ kɩjɛyʊʊ kɔyɔ, ɛ-tɛ kajalaɣ nimero kɩjɛyʊʊ kɔyɔ: \/\/Takayɩhatʋ ndʋ tɩtamsɩna \\\\ 0 \\\\ yɔ\/\/Ma tʋmɩyɛ nɖɩ payaɣ se count_nums yɔ nɛ ɖɩkpaɣ hɔɔlɩŋ weyi ɩ-taa pamaɣ hɔɔlɩŋ ɛnɩ yɔ nɛ ɖɩpɩsɩɣ \/\/ >>> count_nums(array())\n\/\/ 0\n\/\/ >>> count_nums(array(-1, 11, -11))\n\/\/ 1\n\/\/ >>> count_nums(array(1, 1, 2))\n\/\/ 3\nfunction count_nums($arr) {\n","canonical_solution":"function count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num) {\n        $digits = str_split($num);\n        $sum = array_sum(array_map('intval', $digits));\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}","tests":"function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_109","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Pɩkɛna kɩjɛyʊʊ se ɛyʊ ɛ-tɛ wondu ndʊ tɩfɛyɩ ndɩ nɛ lɛɛzɩtʊ ndʊ tɩ-taa.\/\/Yee matʊ ndʊ tɩ-taa ɛyʊ fɛyɩ kɔyɔ, pɩpɩsɩɣ tɔm kɩmamatʊ.\/\/Pɩtɛ lɛ, pɩpɩsɩɣ true yaa false.\/\/Yee pɩsaŋ kɔyɔ, ŋpɩzɩɣ ŋla tʊmɩyɛ nɖɩ ɖɩ-yɔɔ nɛ ŋhiɣ matriki ŋgʊ kɩ-taa paɖʊ-kʊ yɔ.\/\/Pɩtɛ lɛ, ŋnaɣ ɖenɖe pacalɩ kpaɣʋ yɔ, pʋ-tɔbʋʋ se 0 ñɩŋgʋ.\/\/Pɩtɛ lɛ, ɖɩtɛzɩɣna-ɖɩ nɛ ɖɩ-tɛ lɛɣtʋ kɩfatʋ.\/\/Ɖɩcɔna kɔyɔ, ɖɩnaɣ se ɛyʊ ɛpɩzɩ nɛ ɛtɛzɩ ɛ-tɩ yɔɔ wɛʊ nɛ ɛ-ɛjaɖɛ taa.\/\/Ŋpɩzɩɣ ŋla tʋmɩyɛ nɖɩ tam sakɩyɛ ɛzɩ ŋsɔɔlʋʋ yɔ.\/\/Kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ\/\/papɩzɩɣ pakpaɣ matrice nɛ palɩzɩ-ɩ nɛ pɩtaakɩlɩ ɖɔʋ nɛ pɩɖɛɛna ɛsɩndaa pɩtɩŋna ɛzɩma palaba yɔ.\/\/Ŋkaɣ naʋ se paa pɔcɔna nɛ pana se ŋwɛ toovenim na yɔ, ŋpɩzɩɣ nɛ ŋlɩzɩ mbʋ pɩ-yɔɔ ŋtisiɣ yɔ.\/\/Ɖɩwɛna 'arr' matʊ N intɛrɩjɛrɩ waa arr[1], arr[2], ..., arr[N].\/\/ >>> move_one_ball(array(3, 4, 5, 1, 2))\n\/\/ true\n\/\/ Explanation: By performin 2 right shift operations, non-decreasing order can\n\/\/ be achieved for the given array.\n\/\/ >>> move_one_ball(array(3, 5, 4, 1, 2))\n\/\/ false\n\/\/ Explanation:It is not possible to get non-decreasing order for the given\n\/\/ array by performing any number of right shift operations.\nfunction move_one_ball($arr) {\n","canonical_solution":"function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n <= 1) return true;\n\n    $shiftCount = 0;\n\n    \/\/ Count breaks in the sorted order\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr[$i] > $arr[($i + 1) % $n]) {\n            $shiftCount++;\n            if ($shiftCount > 1) {\n                return false;\n            }\n        }\n    }\n\n    \/\/ If no more than one break, the array can be rotated to sorted order\n    return true;\n}","tests":"function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_110","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ye pɩtɛkɛ mbʋ yɔ, ŋpɩsɩɣ \"Aayɩ\".\/\/Pɩwɛɛ se lst1 tɛ wondu tɩŋa ɩwɛɛ kɩmaŋ, pɩpɩsɩ \"ƐƐƐ\".\/\/Yee pɩsaŋ se pɛlɛɣzɩ wondu lst1 nɛ lst2 pɛ-hɛkʋ taa nɛ pɩsaŋ nɛ pala \/\/Pɩfɛyɩ se pakpaɣ kɩmaŋ weyi ɛ-tɛ lst1 nɛ lst2 pɛ-hɛkʋ taa yɔ.\/\/Pɩwɛɛ se ɖɩkpaɣ lst1 nɛ ɖɩpɩsɩ-ɖɩ lɛɣtʋ ndɩ ndɩ.\/\/Nɛ kɩwɩlɩɣ se papɩzɩɣ nɛ pɛlɛɣzɩ wondu natʋyʋ yaa paapɩzɩɣ .\/\/Tɔmpiye ɖɩnɛ ɖɩ-taa, ɖɩ-taa lɛ, ŋkaɣ labʊ tʊmɩyɛ nɖɩ ɖɩkpaɣɣ nabʊlɛ yɔ, \/\/ >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))\n\/\/ \"YES\"\n\/\/ >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))\n\/\/ \"NO\"\n\/\/ It is assumed that the input arrays will be non-empty.\nfunction exchange($lst1, $lst2) {\n","canonical_solution":"function exchange($lst1, $lst2) {\n    \/\/ Check if lst2 contains at least one even number\n    $hasEvenInLst2 = false;\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $hasEvenInLst2 = true;\n            break;\n        }\n    }\n\n    \/\/ Check if all lst1 numbers are even already, if so return \"YES\"\n    $allEvenInLst1 = true;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $allEvenInLst1 = false;\n            break;\n        }\n    }\n    \n    \/\/ If all numbers in lst1 are even or lst2 has at least one even number, return \"YES\"\n    if ($allEvenInLst1 || $hasEvenInLst2) {\n        return \"YES\";\n    }\n    \n    \/\/ Otherwise, return \"NO\"\n    return \"NO\";\n}","tests":"function candidate(...$args) {\n    return exchange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4), array(1, 2, 3, 4)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(1, 5, 3, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(2, 1, 4, 3)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 3), array(2, 6, 4)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 3), array(2, 6, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 6, 1, 8, 9), array(3, 5, 5, 1, 1, 1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 200), array(200, 200)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_111","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Ye tɔm pee naayɛ ɛkpɛndɩ yɔ, pɩpɔzʋʋ se papɩsɩna-yɛ tɩŋa.\/\/Takayaɣ ŋga ka-taa pama tɔm pee sakɩyɛ nɛ pama-yɛ ɖɔɖɔ sakɩyɛ yɔ.\/\/Ye ŋha-ɩ tɔmpiye nɖɩ ɖɩwɩlɩɣ mayaɣ cikpelaɣ ŋga kɛwɛna mayaɣ cikpelaɣ yɔ, pɩsɩna nɛ ɖɩpɩsɩ matrice \/\/ >>> histogram(\"a b c\")\n\/\/ array(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\/\/ >>> histogram(\"a b b a\")\n\/\/ array(\"a\" => 2, \"b\" => 2)\n\/\/ >>> histogram(\"a b c a b\")\n\/\/ array(\"a\" => 2, \"b\" => 2)\n\/\/ >>> histogram(\"b b b b a\")\n\/\/ array(\"b\" => 4)\n\/\/ >>> histogram(\"\")\n\/\/ array()\nfunction histogram($test) {\n","canonical_solution":"function histogram($test) {\n    \/\/ Split the input string into an array of letters\n    $letters = explode(' ', $test);\n\n    \/\/ Create an associative array to count occurrences of each letter\n    $counts = array();\n\n    foreach ($letters as $letter) {\n        if ($letter !== '') {\n            if (array_key_exists($letter, $counts)) {\n                $counts[$letter]++;\n            } else {\n                $counts[$letter] = 1;\n            }\n        }\n    }\n\n    \/\/ Find the maximum occurrence count\n    $maxCount = 0;\n    foreach ($counts as $count) {\n        if ($count > $maxCount) {\n            $maxCount = $count;\n        }\n    }\n\n    \/\/ Gather all letters with the maximum occurrence count\n    $result = array();\n    foreach ($counts as $letter => $count) {\n        if ($count == $maxCount) {\n            $result[$letter] = $count;\n        }\n    }\n\n    return $result;\n}","tests":"function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_112","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ \/\/Pɩwɛɛ se ŋyele nɛ pɩpɩsɩ matriki ŋgʋ kɩ-taa wɛ pɩlɩʋ tɔm nɛ true\/false yɔ.\/\/Ɛyʋ pɩzɩɣ nɛ ɛyɔɔdɩ se ɛ-tɔm kɛ palindrome, ye ɛ-tɔm ɛkalɩɣ ɛzɩ ɛkalɩɣ ɛ-tɔm nɛ pɩɖɛɛ yɔ.\/\/Pɩtɛ lɛ, ŋcɔna se pɩlɩna mbʊ yɔ palindrome.\/\/Pʊtɔbʊʊ se ɖɩkpaɣ tɔmpiye s nɛ c nɛ ɖɩɖɩzɩ tɔmpiye s nɛ ɖɩɖɩzɩ tɔmpiye c.\/\/Tʋmɩyɛ \/\/ >>> reverse_delete(\"abcde\", \"ae\")\n\/\/ array(\"bcd\", false)\n\/\/ >>> reverse_delete(\"abcdef\", \"b\")\n\/\/ array(\"acdef\", false)\n\/\/ >>> reverse_delete(\"abcdedcba\", \"ab\")\n\/\/ array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n","canonical_solution":"function reverse_delete($s, $c) {\n    \/\/ Remove all characters in $s that are present in $c\n    $result = str_replace(str_split($c), '', $s);\n    \n    \/\/ Check if the result string is a palindrome\n    $is_palindrome = ($result === strrev($result));\n    \n    \/\/ Return the result string and whether it is a palindrome\n    return array($result, $is_palindrome);\n}","tests":"function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_113","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɛ-tɛ matʊ tɔm ndʊ tɩ-taa lɛ, ɛ-tɛ matʊ tɔm ndʊ tɩ-taa lɛ, ɛ-tɛ matʊ tɔm ndʊ tɩ-taa lɛ, ɛ-tɛ matʊ tɔm ndʊ tɩ-taa lɛ.\/\/Pɩwɛɛ se pɛlɛɣzɩ i waa tɩŋa nɛ \/\/Paa wonuu ŋgʋ kɩ-taa lɛ, pɩwɛɛ se kɩwɛɛ ɛzɩ kɩ-tɛ wondu ndɩ ndɩ ndɩ ndʋ tɩwɛ kɩ-taa yɔ.\/\/Ye ŋwɛna matrice taa tɔmɩŋ, paa weyi lɛ ɛ-taa kɔyɔ nimero waa, pɩsɩna matrice.\/\/ >>> odd_count(array(\"1234567\"))\n\/\/ array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n\/\/ >>> odd_count(array(\"3\", \"11111111\"))\n\/\/ array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\nfunction odd_count($lst) {\n","canonical_solution":"function odd_count($lst) {\n    $result = array();\n    foreach ($lst as $string) {\n        $oddCount = 0;\n        \n        \/\/ Count odd digits in the string\n        for ($i = 0; $i < strlen($string); $i++) {\n            if ((int)$string[$i] % 2 !== 0) {\n                $oddCount++;\n            }\n        }\n        \n        \/\/ Create the formatted string\n        $result[] = \"the number of odd elements \" . $oddCount . \"n the str\" . $oddCount . \"ng \" . $oddCount . \" of the \" . $oddCount . \"nput.\";\n    }\n    return $result;\n}","tests":"function candidate(...$args) {\n    return odd_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"1234567\")) !== array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"3\", \"11111111\")) !== array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"271\", \"137\", \"314\")) !== array(\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_114","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ \/\/Takayɩsɩ nzɩ sɩ-taa tɔm pee wɛ ndɩ ndɩ yɔ\/\/Ye ŋha-ɖʋ intɛrɩjɛrɩ waa nɩŋgbanzɩ yɔ, ɖɩnaɣ pʊtʊ weyi ɛfɛyɩ kɩ-taa yɔ ɛ-tɛ pʊtʊnaa kɩkpɛdʊʊ \/\/ >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))\n\/\/ 1\n\/\/ >>> minSubArraySum(array(-1, -2, -3))\n\/\/ -6\nfunction minSubArraySum($nums) {\n","canonical_solution":"function minSubArraySum($nums) {\n    $currentSum = $nums[0];\n    $minSum = $nums[0];\n\n    for ($i = 1; $i < count($nums); $i++) {\n        $currentSum = min($nums[$i], $currentSum + $nums[$i]);\n        $minSum = min($minSum, $currentSum);\n    }\n\n    return $minSum;\n}","tests":"function candidate(...$args) {\n    return minSubArraySum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 4, 1, 2, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 2, -10)) !== -14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9999999999999999)) !== -9999999999999999) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 10, 20, 1000000)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -1, -2, -3, 10, -5)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 11, 13, 8, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, -33, 32, -1, 0, -2)) !== -33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7)) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_115","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ 1:\/\/Wɩlɩ tam ɛzɩma ŋpɩzɩɣ nɛ ŋlabɩnɩ-yɛ tʋmɩyɛ yɔ.\/\/Ña-tʋmɩyɛ lɛ se ŋlabɩnɩ tʋmɩyɛ pɔŋ nɛ ŋhɛzɩ pɔŋ taa.\/\/Nɛ pɔpɔŋ tɩŋa taa lɛ, lɩm ɖɔŋ kʋɖʋm.\/\/Paa lɔkɔ ŋgʋ lɛ, kɩ-taa nɛ kaɖaɣ ŋga papɩzɩɣ nɛ palɩzɩ lɩm kɩ-taa yɔ.\/\/Nɛ paa 1 ŋgʊ lɛ kɩkɛ lɩm pʊtʊ kʋɖʋm.\/\/Paha-ŋ lɔkɔnaa mba pa-taa paa weyi lɛ ɛwɛ ɛzɩ ɛ-tɩ yɔ.\/\/ >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)\n\/\/ 6\n\/\/ Example 2:\n\/\/ >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n\/\/ 5\n\/\/ Example 3:\n\/\/ >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n\/\/ 0\n\/\/ Constraints:\n\/\/ * all wells have the same length\n\/\/ * 1 <= grid.length <= 10^2\n\/\/ * 1 <= grid[:,1].length <= 10^2\n\/\/ * grid[i][j] -> 0 | 1\n\/\/ * 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n","canonical_solution":"function max_fill($grid, $capacity) {\n    $totalTimes = 0;\n    \n    foreach ($grid as $well) {\n        $waterUnits = array_sum($well);\n        $times = ceil($waterUnits \/ $capacity);\n        $totalTimes += $times;\n    }\n    \n    return $totalTimes;\n}","tests":"function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_116","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩwɛɛ se pala-ɖɩ nɛ ɖɩwɛɛ ɛzɩ ɖɩyɔɔdʋʋ yɔ:\/\/Ye ɛyʊ ɛfɛyɩna ɛ-ñʊʊ taa kɔyɔ, ɛ-tɛ ɛyʊtʊ wɛʊ lɛ, ɛ-tɛ ɛyʊtʊ wɛʊ lɛ, ɛ-tɛ ɛyʊtʊ wɛʊ lɛ.\/\/Pɩtɛ lɛ, ɛyʊ ɛ-tɛ ɛyʊtʊmɩyɛ taa lɛ, ɛ-tɛ ɛyʊtʊmɩyɛ taa lɛ, ɛ-tɛ ɛyʊtʊmɩyɛ taa lɛ, ɛ-tɛ ɛyʊtʊmɩyɛ taa.\/\/Pɩtɛ kataɣ kanɛ ka-taa, pɩwɛɛ se ŋñɔɔzɩ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ, ŋnaɣ hɔɔlɩŋ weyi ɩ-taa lɛ.\/\/ >>> sort_array(array(1, 5, 2, 3, 4))\n\/\/ array(1, 2, 3, 4, 5)\n\/\/ >>> sort_array(array(-2, -3, -4, -5, -6))\n\/\/ array(-6, -5, -4, -3, -2)\n\/\/ >>> sort_array(array(1, 0, 2, 3, 4))\n\/\/ array(0, 1, 2, 3, 4)\nfunction sort_array($arr) {\n","canonical_solution":"function sort_array($arr) {\n    usort($arr, function($a, $b) {\n        $countA = substr_count(decbin($a), '1');\n        $countB = substr_count(decbin($b), '1');\n        if ($countA !== $countB) {\n            return $countA - $countB;\n        } else {\n            return $a - $b;\n        }\n    });\n    return $arr;\n}","tests":"function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_117","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩcɛyɩtʋ: Ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔm ndʋ ŋtiyaa yɔ, tɩ-taa lɛ, masɩ nɛ tɔm hɔɔlɩŋ ɖeke wɛna.\/\/Yee ɛ-tɛ matʊ ɛfɛyɩ kɔyɔ, pɩpɔzʋʋ se ɛ-tɛ matʊ ɛtasɩ wɛʋ.\/\/n tɔmpiye, nɛ tɔm pee ana awɛɛ nɛ awɛɣ tɔmpiye s taa. \/\/tʊmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm pee kpeekpe kpou taa nɛ pɩ-taa wɛ tɔm pee \/\/Ye ŋha-ɖʋ tɔmpiye s nɛ natʊyʊ n kɔyɔ, paɖʊ-ŋ tʋmɩyɛ se ŋlabɩnɩ tʊmɩyɛ \/\/ >>> select_words(\"Mary had a little lamb\", 4)\n\/\/ array(\"little\")\n\/\/ >>> select_words(\"Mary had a little lamb\", 3)\n\/\/ array(\"Mary\", \"lamb\")\n\/\/ >>> select_words(\"simple white space\", 2)\n\/\/ array()\n\/\/ >>> select_words(\"Hello world\", 4)\n\/\/ array(\"world\")\n\/\/ >>> select_words(\"Uncle sam\", 3)\n\/\/ array(\"Uncle\")\nfunction select_words($s, $n) {\n","canonical_solution":"function select_words($s, $n) {\n    $words = explode(' ', $s); \/\/ Split the string into words\n    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\n    foreach ($words as $word) {\n        $count = 0;\n        $lowercaseWord = strtolower($word);\n        \n        \/\/ Count consonants in the word\n        for ($i = 0; $i < strlen($lowercaseWord); $i++) {\n            if (ctype_alpha($lowercaseWord[$i]) && !in_array($lowercaseWord[$i], $vowels)) {\n                $count++;\n            }\n        }\n\n        \/\/ Add word to result if it has exactly n consonants\n        if ($count === $n) {\n            $result[] = $word;\n        }\n    }\n\n    return $result;\n}","tests":"function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_118","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔmpiye nɖɩ ɖɩ-taa ŋnaɣ-ɩ yɔ, ɖɩ-taa wɛ aŋglɛɛ kʋnʋŋ taa masɩ ɖeke.\/\/Pɩwɛɛ se pamaɣna nɛ pana se tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ yɔ.\/\/Ye ŋtɩtasɩ mayaɣ nakɛyɛ yɔ, yele nɛ ɖɩpɩsɩ mayaɣ ŋga ka-taa ŋtɩyɔɔdɩ natʋyʋ yɔ.\/\/Tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ.\/\/Payaɣ-mɩ se tɔm piye nɛ ɩñɩnɩ tɔm piye nɖɩ ɖɩñɔtɩnɩ-mɩ nɛ pɩkɩlɩ yɔ.\/\/ >>> get_closest_vowel(\"yogurt\")\n\/\/ \"u\"\n\/\/ >>> get_closest_vowel(\"FULL\")\n\/\/ \"U\"\n\/\/ >>> get_closest_vowel(\"quick\")\n\/\/ \"\"\n\/\/ >>> get_closest_vowel(\"ab\")\n\/\/ \"\"\nfunction get_closest_vowel($word) {\n","canonical_solution":"function get_closest_vowel($word) {\n    $vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    $length = strlen($word);\n\n    \/\/ Iterate from the end of the word towards the beginning\n    for ($i = $length - 2; $i > 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            \/\/ Check if adjacent characters are consonants\n            if (!in_array($word[$i - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {\n                return $word[$i];\n            }\n        }\n    }\n\n    \/\/ Return empty string if no suitable vowel was found\n    return '';\n}","tests":"function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_119","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Ye pɩsaŋ se ɖɩlɩzɩ tɔmpiye nɖɩ ɖɩ-taa tɔm kɩlɩ ɖeu yɔ, ɖɩpɩsɩɣ tɔm piye \"ɛɛɛ\" nɛ ye pɩsaŋ se ɖɩlɩzɩ tɔm kɩlɩ ɖeu yɔ, ɖɩpɩsɩɣ tɔm piye \"ɛɛɛ\".\/\/^ \" ()) \" pɩtɩkɛ mbʋ.\/\/Ɖɩkpaɣ ɛzɩ: tɔmpiye '(())))' wɛ ɖeu, ɛlɛ tɔmpiye \/\/Pɩkɛna tɔmpiye S nɛ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, yee pɩ-taa tɔmpiye S  ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye S  ɖɩ-taa lɛ, tɔmpiye S  ɖɩ-taa lɛ, tɔmpiye S  ɖɩ-taa lɛ.\/\/Pɩwɛɛ se ɖɩtɩlɩ se paa ɖɩtɩla mbʋ yɔ, pɩkaɣ yebu nɛ ɖɩpɩzɩ nɛ ɖɩlɩzɩ tɔm pee kɩbana.\/\/Ña-tʋmɩyɛ lɛ se ŋtazɩ nɛ ŋna se ŋpɩzɩɣ nɛ ŋkpɛndɩ tɔm pee wena awɛ kɩ-taa yɔ nɛ ŋla-yɛ nɛ ɩwɛɛ nɔɔ kʋɖʋmaɣ taa yaa we.\/\/Pɩsɩ takayɩhayʋʋ \"[[Special:UserLogin_Special:UserLogin]]\" ñɩŋgʋ yɔɔ.\/\/Paha-ŋ matrice waa naalɛ, matrice waa panɛ pa-naalɛ pa-taa lɛ, ŋnaɣ se:\/\/ >>> match_parens(array(\"()(\", \")\"))\n\/\/ \"Yes\"\n\/\/ >>> match_parens(array(\")\", \")\"))\n\/\/ \"No\"\nfunction match_parens($lst) {\n","canonical_solution":"function match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\n    \/\/ Function to determine if parentheses are balanced\n    function is_balanced($s) {\n        $balance = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] === '(') {\n                $balance++;\n            } else {\n                $balance--;\n            }\n            \/\/ If balance is negative, parentheses are not balanced\n            if ($balance < 0) {\n                return false;\n            }\n        }\n        \/\/ Check that balance is zero\n        return $balance === 0;\n    }\n\n    \/\/ Check all concatenation combinations\n    $concat1 = $str1 . $str2;\n    $concat2 = $str2 . $str1;\n\n    if (is_balanced($concat1) || is_balanced($concat2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","tests":"function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_120","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ 1:\/\/Kʋ-ɖaɣlɩkɩŋ k nɛ kɩ-tɛ kʊnʊŋ taa lɛ, kɩkɩlɩɣ ɖɔʊ.\/\/Ɛyʊ ɛ-tɛ ɛyʊ kʊyʊm arɩ nɛ ɛ-tɛ ɛyʊ kʊyʊm kʊyʊm kʊyʊm kʊyʊm kʊyʊm, ɛpɩsa ɛyʊ ɛ-tɛ ɛyʊ kʊyʊm \/\/ >>> maximum(array(-3, -4, 5), 3)\n\/\/ array(-4, -3, 5)\n\/\/ Example 2:\n\/\/ >>> maximum(array(4, -4, 4), 2)\n\/\/ array(4, 4)\n\/\/ Example 3:\n\/\/ >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\n\/\/ array(2)\n\/\/ Note:\n\/\/ 1. The length of the array will be in the range of [1, 1000].\n\/\/ 2. The elements in the array will be in the range of [-1000, 1000].\n\/\/ 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k) {\n","canonical_solution":"function maximum($arr, $k) {\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}","tests":"function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_121","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Ye ŋha-ɖʋ intɛrɩjɛrɩ waa mba pɛfɛyɩ kɩ-tɩ yɔɔ yɔ, pɩsɩna nɛ ɖɩna mbʋ payɩ pɩwɛ kɩ-tɩ yɔɔ yɔ, pɩ-tɛ kɩmaŋ.\/\/ >>> solution(array(5, 8, 7, 1))\n\/\/ 12\n\/\/ >>> solution(array(3, 3, 3, 3, 3))\n\/\/ 9\n\/\/ >>> solution(array(30, 13, 24, 321))\n\/\/ 0\nfunction solution($lst) {\n","canonical_solution":"function solution($lst) {\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i += 2) {\n        if ($lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}","tests":"function candidate(...$args) {\n    return solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 8, 7, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3, 3, 3, 3)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 24, 321)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 9)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 13, 23, 32)) !== 23) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 13, 2, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_122","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Kɩ-tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ kpɛlɛkʋʋ tɛ lɛɣtʋ kɩfatʋ\/\/Pɩtɛ lɛ, ɖɩkpaɣ ɛyʊ weyi ɛfɛyɩna ɛ-tɩ yɔɔ yɔ nɛ ɖɩkpaɣ ɛ-tɛ ɛyʊ kʊyʊm yɔ nɛ ɖɩpɩsɩ ɛ-tɛ ɛyʊ kʊyʊm yɔ.\/\/ >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n\/\/ 24\n\/\/ Constraints:\n\/\/ 1. 1 <= len(arr) <= 100\n\/\/ 2. 1 <= k <= len(arr)\nfunction add_elements($arr, $k) {\n","canonical_solution":"function add_elements($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        if ($arr[$i] >= -99 && $arr[$i] <= 99) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}","tests":"function candidate(...$args) {\n    return add_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111, 121, 3, 4000, 5, 6), 2) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) !== 125) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) !== 24) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1), 1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_123","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/get_odd_collatz(5) pɩsɩna [1, 5] # Kollatz tɛtʊ taa lɛ 5 kɛ [5, 16, 8, 4, 2, 1], mbʊ pʊyɔɔ yɔ, ɛyʊ ɛ-ñʊʊ mayaɣ kɔyɔ 1 nɛ 5. \/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/2. ɛpɩsɩnɩ ɛ-tɛ matriki nɛ ɛñɔɔzɩ-ɩ nɛ ɛkpa ɖoŋ.\/\/1. Collatz(1) kɛna [1].\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ:\/\/Tɔmpiye nɖɩ ɖɩ-taa lɛ, paa n ɛ-tɛ wazaɣ ŋga lɛ, tɔmpiye nɖɩ ɖɩ-tɛ wɛtʊ kaɣ talʋʋ 1.\/\/Yee tɔmpiye nɖɩ ɖɩ-taa ɖɩwɛɛ yɔ ɖɩkɛ tɔmpiye nɖɩ ɖɩ-taa ɖɩwɛɛ yɔ, tɔmpiye nɖɩ ɖɩ-wayɩ yɔ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3 nɛ ɖɩ-ñʊʊ mayaɣ kɔyɔ 3\/\/Ɖooo lɛ, yee tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye.\/\/Pɩtɛ lɛ, paa tɔmpiye nɖɩ lɛ, ɖɩlɩɣ  cɔlɔ.\/\/Collatz tɛ maɣzɩm kɛ maɣzɩm pɩlɩna matʋ taa nɛ pɩlɩna tɔmpiye nɖɩ ɖɩ-taa pama-ɖɩ yɔ.\/\/Ye ŋha-ɩ nimero waa kɩmaŋ n yɔ, pɩpɩsɩɣ ɛ-tɛ matrice nɖɩ ɖɩ-taa nimero waa mba pɛfɛyɩ kɩmaŋ yɔ, pɛwɛɛ yɔ.\/\/ >>> get_odd_collatz(5)\n\/\/ array(1, 5)\nfunction get_odd_collatz($n) {\n","canonical_solution":"function get_odd_collatz($n) {\n    $collatz = [];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n        }\n        if ($n % 2 == 0) {\n            $n = $n \/ 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n    }\n    $collatz[] = 1; \/\/ Adding 1 as it's always the last part of any Collatz sequence\n    sort($collatz);\n    return $collatz;\n}","tests":"function candidate(...$args) {\n    return get_odd_collatz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(14) !== array(1, 5, 7, 11, 13, 17)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(1, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_124","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/4. Pɩwɛɛ se pama kɩyakʋ ŋgʋ nɛ kɩwɛɛ ɛzɩ: f-y-y-y-y.\/\/Pɩfɛyɩ se fenasɩ nzɩ sɩtɛŋ fenaɣ kʋɖʋmaɣ yaa sɩtɛzɩ fenasɩ hiu nɛ naalɛ.\/\/Pɩtasɩ lɛ, kɩyakɩŋ weyi ɩwɛ fenaɣ 1, 3, 5, 7, 8, 10, 12 taa yɔ, ɩ-taa lɛ, kɩyakɩŋ weyi ɩ-taa kɩyakɩŋ talɩɣ yɔ, ɩfɛyɩ 1 yaa ɩkɩlɩ 31 nɛ fenaɣ 4, 6, 9, 11 taa lɛ, ɩfɛyɩ 1 yaa ɩkɩlɩ 30 nɛ fenaɣ 2 taa lɛ, ɩfɛyɩ 1 yaa ɩkɩlɩ 29.\/\/1. Pɩtɩkɛ kɩyakʋ ŋgʋ kɩ-taa palɩzɩ-kʋ yɔ, kɩ-taa tɔm.\/\/Kɩyakʋ ŋgʋ kɩ-taa lɛ, paa paɣtʋ ndʋ tɩ-tɩŋa payɩ tɩwɛɛ yɔ, tɩ-taa natʋyʋ fɛyɩ: \/\/Pɩsɩɣnɩ-ŋ nɛ ŋtɩlɩ mbʋ pɩ-yɔɔ ŋpɩzɩɣ nɛ ŋtɩŋnɩ nɛ ŋla ɖʋtʋ ndʋ yɔ.\/\/Pɩwɛɛ se ŋma tʋmɩyɛ nɖɩ ɖɩñɔɔzʋʋ kɩyakʋ nakʋyʋ yɔ nɛ \/\/ >>> valid_date(\"03-11-2000\")\n\/\/ true\n\/\/ >>> valid_date(\"15-01-2012\")\n\/\/ false\n\/\/ >>> valid_date(\"04-0-2040\")\n\/\/ false\n\/\/ >>> valid_date(\"06-04-2020\")\n\/\/ true\n\/\/ >>> valid_date(\"06\/04\/2020\")\n\/\/ false\nfunction valid_date($date) {\n","canonical_solution":"function valid_date($date) {\n    \/\/ Check if the date is in the correct format mm-dd-yyyy\n    if (!preg_match('\/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\/', $date)) {\n        return false;\n    }\n\n    \/\/ Split the date to get month, day, and year\n    list($month, $day, $year) = explode('-', $date);\n\n    \/\/ Check if the month and day values are valid\n    if ($month < 1 || $month > 12 || $day < 1) {\n        return false;\n    }\n\n    \/\/ Check the number of days in each month\n    $daysInMonth = array(\n        1 => 31, \/\/ January\n        2 => 29, \/\/ February (handle separately for leap year)\n        3 => 31, \/\/ March\n        4 => 30, \/\/ April\n        5 => 31, \/\/ May\n        6 => 30, \/\/ June\n        7 => 31, \/\/ July\n        8 => 31, \/\/ August\n        9 => 30, \/\/ September\n        10 => 31, \/\/ October\n        11 => 30, \/\/ November\n        12 => 31  \/\/ December\n    );\n\n    \/\/ Check for the correct number of days against the given month\n    if ($day > $daysInMonth[(int)$month]) {\n        return false;\n    }\n\n    \/\/ If February is given, further check for leap year validity\n    if ($month == 2) {\n        \/\/ Leap year condition\n        if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {\n            \/\/ Leap year, February can have up to 29 days\n            if ($day > 29) {\n                return false;\n            }\n        } else {\n            \/\/ Not a leap year, February can have only up to 28 days\n            if ($day > 28) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}","tests":"function candidate(...$args) {\n    return valid_date(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"03-11-2000\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15-01-2012\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-0-2040\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"06-04-2020\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"01-01-2007\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"03-32-2011\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-31-3000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"06-06-2005\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"21-31-2000\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-12-2003\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04122003\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"20030412\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2003-04\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2003-04-12\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"04-2003\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_125","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Takayɩhatʋ ndʋ tɩtamsɩna \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\ takayɩhatʋ \\\\\/\/Pɩwɛɛ se pɛtɛyɩ-ɩ nɛ ',' yee pɩfɛyɩna yɔ, pɩwɛɛ se ŋyele nɛ pama matʋ cikpetu ndʋ tɩ-taa pama-tʋ nɛ tɩ-taa lɛ, pama-tʋ nɛ tɩ-taa lɛ, pama-tʋ nɛ tɩ-taa lɛ, pama-tʋ nɛ tɩ-taa lɛ, pama-tʋ nɛ tɩ-taa lɛ, pama-tʋ nɛ tɩ-taa lɛ.\/\/Ye ŋwɛna tɔm pee kɩmaŋ yɔ, ŋpɩzɩɣ ŋlɩzɩ tɔm pee wena awɛ hɔɔlʋʋ kʋɖʋmʋʋ taa yɔ, nɛ ŋyele nɛ tɔm pee kɩmaŋ weyi awɛ hɔɔlʋʋ kʋɖʋmʋʋ taa yɔ, ɩpɩsɩ.\/\/ >>> split_words(\"Hello world!\")\n\/\/ array(\"Hello\", \"world!\")\n\/\/ >>> split_words(\"Hello,world!\")\n\/\/ array(\"Hello\", \"world!\")\n\/\/ >>> split_words(\"abcdef\")\n\/\/ 3\nfunction split_words($txt) {\n","canonical_solution":"function split_words($txt) {\n    if (preg_match('\/\\s\/', $txt)) {\n        return preg_split('\/\\s+\/', trim($txt));\n    } else if (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            $ch = $txt[$i];\n            if (ctype_lower($ch)) {\n                $pos = ord($ch) - ord('a');\n                if ($pos % 2 == 0) {\n                    $count++;\n                }\n            }\n        }\n        return $count;\n    }\n}","tests":"function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_126","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛyʊ ɛfɛyɩna ɛ-tɩ yɔɔ wɛʊ nɛ ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ, ɛ-tɛ lɛɣtʊ takayaɣ taa lɛ.\/\/Yee ɛyʊ ɛ-tɛ ɛ-tɛ kɩlabʊ ɛkɩlɩɣ kɔyɔ, ɛ-tɛ kɩlabʊ kɩlɛyɩɣ kɔyɔ, ɛ-tɛ kɩlabʊ kɩlɛyɩɣ kɔyɔ, ɛ-tɛ kɩlabʊ kɩlɛyɩɣ kɔyɔ.\/\/Ye ŋha-ɩ nimero waa sakɩyɛ yɔ, ɛkaɣ-wɛ pɩsʋʋ paa patɩlɩ-wɛ yaa pataana-wɛ yɔ.\/\/ >>> is_sorted(array(5))\n\/\/ true\n\/\/ >>> is_sorted(array(1, 2, 3, 4, 5))\n\/\/ true\n\/\/ >>> is_sorted(array(1, 3, 2, 4, 5))\n\/\/ false\n\/\/ >>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\/\/ true\n\/\/ >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n\/\/ true\n\/\/ >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n\/\/ false\n\/\/ >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n\/\/ true\n\/\/ >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n\/\/ false\nfunction is_sorted($lst) {\n","canonical_solution":"function is_sorted($lst) {\n    $length = count($lst);\n    if ($length <= 1) {\n        return true;\n    }\n\n    $previous = $lst[0];\n    $count = array();\n\n    foreach ($lst as $number) {\n        if (isset($count[$number])) {\n            $count[$number]++;\n        } else {\n            $count[$number] = 1;\n        }\n\n        if ($count[$number] > 2) {\n            return false;\n        }\n\n        if ($number < $previous) {\n            return false;\n        }\n\n        $previous = $number;\n    }\n\n    return true;\n}","tests":"function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_127","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/[Input\/output] kɩɖaŋ: \/\/Ye tɔm naalɛ ɩtɩkpɛndɩ yɔ, pɩpɩsɩɣ \"Aayɩ\".\/\/Ye pɩtɛkɛ mbʋ yɔ, ŋpɩsɩɣ \"Aayɩ\".\/\/Yee kɩ-tɛ matʊ kɔyɔ, pɩtɛzɩna \"YES\"\/\/Ɛ-hɛkʊ taa lɛ, ɛyʊ ɛ-hɛkʊ taa lɛ, ɛ-tɛ hɛkʊ taa lɛ, ɛ-tɛ hɛkʊ taa lɛ, ɛ-tɛ hɛkʊ taa lɛ.\/\/Kɩɖaʋ lɛ, hɔɔlɩŋ weyi ɩ-taa (1, 3), (2, 4) nɛ (2, 3) pɛtɛyɩɣ ɖama yɔ.\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Ña-tʋmɩyɛ lɛ se ŋtɩlɩ se ɛzɩmtaa pɩtɛŋna nɛ pɩtalɩna-ŋ.\/\/Paa alɩwaatʊ ndʊ tɩ-taa lɛ, pamaɣzɩɣ se tɩ-paɣtʊ wɛna kɩmaŋ yaa tɩ-tɛ.\/\/Pɩ-taa lɛ, pamaɣzɩɣ kɩ-paɣzʋʋ nɛ kɩ-tɛtʋ.\/\/Pɩtɛ alɩwaatʊ taa lɛ, alɩwaatʊ ndʊ tɩ-taa (paɣzɩ, tɩtɛ)\/\/paa alɩwaatʊ ndʊ lɛ, tɩ-taa lɛ, kɩkɛna ɛyʊ kʊyʊm. Ɖɩkpaɣ ɛzɩ alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, (kpazɩyɛ, tɛm) = (1, 2).\/\/Paha-ŋ alɩwaatʋ naalɛ.\/\/ >>> intersection(array(1, 2), array(2, 3))\n\/\/ \"NO\"\n\/\/ >>> intersection(array(-1, 1), array(0, 4))\n\/\/ \"NO\"\n\/\/ >>> intersection(array(-3, -1), array(-5, 5))\n\/\/ \"YES\"\nfunction intersection($interval1, $interval2) {\n","canonical_solution":"function intersection($interval1, $interval2) {\n    \/\/ Find intersection\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\n    \/\/ Determine the length of the intersection\n    $length = $end - $start;\n\n    \/\/ If the intervals don't intersect\n    if ($length < 0) {\n        return \"NO\";\n    }\n\n    \/\/ Check if the length is a prime number\n    if ($length <= 1) {\n        return \"NO\";\n    }\n\n    for ($i = 2; $i * $i <= $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}","tests":"function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_128","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ: return null for empty arr. \/\/Paa mayaɣ ŋga lɛ, ka-taa mayaɣ ŋga lɛ 1, -1 yaa 0.\/\/Ɛyʊ ɛ-tʊmɩyɛ lɛ se ɛlɩzɩ ɛ-tɛ tɔm nɛ ɛlɩzɩ-tʊ nɛ ɛ-tɛ tɔm ndʊ tɩ-taa.\/\/Pʊtɔbʊʊ se ŋwɛna ñʊʊ taa ɛyʊ nɛ pɩpɔzʋʋ se ŋpɩsɩ ɛyʊ.\/\/ >>> prod_signs(array(1, 2, 2, -4))\n\/\/ 9\n\/\/ >>> prod_signs(array(0, 1))\n\/\/ 0\n\/\/ >>> prod_signs(array())\n\/\/ null\nfunction prod_signs($arr) {\n","canonical_solution":"function prod_signs($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    \n    $sum_of_magnitudes = 0;\n    $product_of_signs = 1;\n    \n    foreach ($arr as $num) {\n        $sum_of_magnitudes += abs($num);\n        if ($num == 0) {\n            $product_of_signs = 0;\n            break;\n        } else {\n            $product_of_signs *= ($num > 0) ? 1 : -1;\n        }\n    }\n    \n    return $sum_of_magnitudes * $product_of_signs;\n}","tests":"function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_129","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Ɛpɩsɩɣ ɛ-tɛ kɩlɛmɩŋ weyi ɛ-tɛ kɩlɛmɩŋ kɩlɩna wɛʊ yɔ.\/\/Pɩtʋʋ fɛyɩ se tɔm ndʋ tɩ-yɔɔ cosuu wɛ ndɩ.\/\/Lɩmaɣzɩyɛ nɖɩ ɖɩ-taa lɛ, ɛyʊ wɛna ɛ-tɩ yɔɔ wɛʊ nɛ ɛ-tɛ ɛyʊ wɛʊ yɔ.\/\/Ɖɩkpaɣ ɛzɩ lst_A[i] < lst_B[i] nɛ j (1 <= j < i) kɔyɔ ɖɩnaɣ se\/\/Pɩtɛ lɛ, ɛyʊ ɛnʊ ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛ, ɛ-tɛ ɛyʊ lɛlʊ taa lɛlʊ taa lɛlʊ.\/\/Pɩtɛ lɛ, ɖɩkpaɣ se ɖɩyaɣ-wɛ se lst_A nɛ lst_B.\/\/Ɖɩcɔna kɔyɔ, ɖɩnaɣ se, ɖɩkpaɣ kɩlɛmʋʋ ŋgʋ kɩwɛna hɔɔlɩŋ weyi ɩ-taa A nɛ B pɛwɛɛ yɔ nɛ ɖɩkpaɣ kɩ-tɛ hɔɔlɩŋ lɛɛŋ nɛ ɖɩkpaɣ kɩ-tɛ hɔɔlɩŋ lɛɛŋ nɛ ɖɩkpaɣ kɩ-tɛ hɔɔlɩŋ lɛɛŋ nɛ ɖɩkpaɣ kɩ-tɛ hɔɔlɩŋ lɛɛŋ.\/\/Kɩɖaʋ kʋnɛ kɩ-taa lɛ, pɩwɩlɩɣ se ɛyʊ ɛ-tɩ yɔɔ wɛʊ yɔ, pɩfɛyɩ ɖeu se ɛ-tɩ yɔɔ wɛʊ ɛɖʊ nɔɔyʊ yɔɔ.\/\/ŊYƐƐƐ se ŋtaatasɩ naʋ nɔɔyʋ.\/\/Pɩtɩcɛyɩ se patɩlɩ-wɛ).\/\/Ɖɩcɔna kɔyɔ, ɖɩnaɣ se nʋmɔʋ ŋgʋ kɩwɛna k yɔ, kɩ-taa lɛ, ɖɩnaɣ se ɖɩcɔna k pilinzi ɖeyi ɖeyi (ɛtɛkɛ \/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩcɛyɩtʋ\/\/Pʋ-tɔbʋʋ se ŋpɩzɩɣ ŋwolo lone nɖɩ ɖɩ-taa ŋwɛna yɔ nɛ ŋwolo lone nɖɩ ɖɩ-taa ŋwɛna yɔ.\/\/paa lone nɖɩ ɖɩ-taa nɛ paa nʋmɔʋ ŋgʋ kɩ-taa lɛ, ŋpɩzɩɣ ŋwolo lone nɖɩ ɖɩ-taa ŋwɛɛ yɔ.\/\/Pɩwɛɛ se ŋñɩnɩ n̄ɩɣyʋʋ cikpeluu ŋgʋ kɩwɛna n̄ɩɣyʋʋ k yɔ, nɛ ŋpaɣzɩna.\/\/Pɩtɛ tɔmpiye inclusive lɩzɩɣna tam kʋɖʋmʋʋ kɛ matʊ hɔɔlʊʊ taa.\/\/paa ɛyʊ weyi lɛ ɛ-tɛ ɛyʊ kɩlaʊ taa.\/\/Ye ɖɩkpaɣ ɛyʊ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ\/\/ >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\n\/\/ array(1, 2, 1)\n\/\/ >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)\n\/\/ array(1)\nfunction minPath($grid, $k) {\n","canonical_solution":"function minPath($grid, $k) {\n    $n = count($grid);\n    $m = $n * $n;\n    \n    \/\/ Allows movement in four directions: right, down, left, up\n    $directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    \n    $result = array_fill(0, $k, $m + 1);\n    \n    function backtrack($x, $y, $path, $grid, $k, $directions, $n, &$result) {\n        if (count($path) === $k) {\n            if ($path < $result) {\n                $result = $path;\n            }\n            return;\n        }\n        \n        foreach ($directions as $direction) {\n            $dx = $x + $direction[0];\n            $dy = $y + $direction[1];\n            \n            if ($dx >= 0 && $dx < $n && $dy >= 0 && $dy < $n) {\n                $newPath = $path;\n                $newPath[] = $grid[$dx][$dy];\n                backtrack($dx, $dy, $newPath, $grid, $k, $directions, $n, $result);\n            }\n        }\n    }\n    \n    \/\/ Try starting from each cell in the grid\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            backtrack($i, $j, [$grid[$i][$j]], $grid, $k, $directions, $n, $result);\n        }\n    }\n    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return minPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !== array(1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7) !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1, 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14, 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12, 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12) !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8) !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !== array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_130","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Nɔɔɖɛyaa Ɛgbɛyɛ taa ɛzʋtʋyaa mba pa-taa nabɛyɛ lɛ:\/\/Pʊtɔbʊʊ se ŋwɛna ɛyʊ kʊyʊmʊm nɛ ɛfɛyɩ kʊyʊmʊm, nɛ pɩwɛɛ se ŋpɩsɩ ɛyʊ kʊyʊmʊm \/\/= 2 + 3 + 3 = 8 \/\/3 = 3 + 3 + 4\/\/3 = 4 \/\/(Tri) = 1 + (2 \/ 2) = 2 \/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/(n) = (n - 1) + (n - 2) + (n + 1) ye n ɛfɛyɩ ndɩ yɔ.\/\/tri (n) = 1 + n \/ 2, yee n ɛtɛyɩ yɔ.\/\/(Tɩnaɣ kɩlɛmʋʋ yɔɔ tɔm kɩkpɛlɩkɩtʋ 3)\/\/Tribonacci tɛ kʊyʊmʊʊ wɛna tɔbʊʊ se: \/\/Ɛlɛ, ɛyaa ɩɩsɩŋ Tribonacci tɔm piye nɖɩ.\/\/Paa anɩ ɛsɩm Fibonacci tɛ n̄ɩɣyʋʋ, pama-kʋ nɛ pɔcɔna siŋŋ kɛ maɣzɩm takayasɩ taa n̄ɩma cɔlɔ pɩnaɣ 1854 taa.\/\/ >>> tri(3)\n\/\/ array(1, 3, 2, 8)\nfunction tri($n) {\n","canonical_solution":"function tri($n) {\n    $tribonacci = array();\n    \n    for ($i = 0; $i <= $n; $i++) {\n        if ($i == 0) {\n            $tribonacci[$i] = 1; \/\/ tri(0) should be initialized to 1 or any base case value you want\n        } elseif ($i == 1) {\n            $tribonacci[$i] = 3; \/\/ tri(1)\n        } elseif ($i == 2) {\n            $tribonacci[$i] = 1 + ($i \/ 2); \/\/ tri(2)\n        } elseif ($i % 2 == 0) {\n            $tribonacci[$i] = 1 + ($i \/ 2); \/\/ tri(n), if n is even\n        } else {\n            $tribonacci[$i] = $tribonacci[$i - 1] + $tribonacci[$i - 2] + (isset($tribonacci[$i + 1]) ? $tribonacci[$i + 1] : 3);\n            \/\/ tri(n), if n is odd, tri(n + 1) is assumed to be 3 if not already calculable\n        }\n    }\n    \n    return $tribonacci;\n}","tests":"function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_131","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ye nimasɩ tɩŋa ɩkɛ kɩkpɛndɩna yɔ, pɩsɩɣnɩ-ɩ nɛ ɛkɔɔ nɛ ɛkɔɔ lɛ, ɛkɔɔ nɛ 0.\/\/Ye paha-ɖʋ nimero intérieur positif n yɔ, ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩlɩna nimero waa mba pa-taa pa-taa pa-taa pa-taa yɔ.\/\/ >>> digits(1)\n\/\/ 1\n\/\/ >>> digits(4)\n\/\/ 0\n\/\/ >>> digits(235)\n\/\/ 15\nfunction digits($n) {\n","canonical_solution":"function digits($n) {\n    $product = 1;\n    $hasOdd = false;\n\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $hasOdd = true;\n        }\n        $n = intdiv($n, 10);\n    }\n\n    return $hasOdd ? $product : 0;\n}","tests":"function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765) !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543) !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_132","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩ tɔmpiye true yee nɛ yee pɛtɛyɩ-ɖɩ nɛ tɔmpiye kʊɖʊmɖɩyɛ yɔ.\/\/Lɩzɩ tʋmɩyɛ nɖɩ ɖɩkpaɣna tɔmpiye naɖɩyɛ nɛ ɖɩ-taa wɛ tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa wɛ tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa lɛ.\/\/ >>> is_nested(\"[[]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[]]]]]]][[[[[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[][]\")\n\/\/ false\n\/\/ >>> is_nested(\"[]\")\n\/\/ false\n\/\/ >>> is_nested(\"[[][]]\")\n\/\/ true\n\/\/ >>> is_nested(\"[[]][[\")\n\/\/ true\nfunction is_nested($string) {\n","canonical_solution":"function is_nested($string) {\n    $stack = [];\n    $hasNested = false;\n    \n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if ($char === '[') {\n            array_push($stack, '[');\n        } elseif ($char === ']') {\n            if (!empty($stack)) {\n                array_pop($stack);\n                if ($i > 0 && $string[$i - 1] === '[') {\n                    $hasNested = true;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n    \n    return $hasNested;\n}","tests":"function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_133","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩtɛ lɛ, ŋcalɩɣna nɛ ŋcɔna nɛ ŋna se ŋwɛna ŋñɩɩ yaa ŋfɛyɩna ŋñɩɩ.\/\/Pɩwɛɛ se ŋyele nɛ ɖɩna se tɔmpiye nɖɩ ɖɩ-taa ŋtɩŋna yɔ, ɖɩ-taa lɛ, ŋpɩzɩɣ ŋlɩzɩ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.\/\/Pɩɩha-ŋ nimbrɩwaa sakɩyɛ.\/\/ >>> lst(array(1.0, 2.0, 3.0))\n\/\/ 14\n\/\/ >>> lst(array(1.0, 4.0, 9.0))\n\/\/ 98\n\/\/ >>> lst(array(1.0, 3.0, 5.0, 7.0))\n\/\/ 84\n\/\/ >>> lst(array(1.4, 4.2, 0.0))\n\/\/ 29\n\/\/ >>> lst(array(-2.4, 1.0, 1.0))\n\/\/ 6\nfunction sum_squares($lst) {\n","canonical_solution":"function sum_squares($lst) {\n    $sum = 0;\n    foreach ($lst as $number) {\n        $ceiledNumber = ceil($number);\n        $sum += $ceiledNumber * $ceiledNumber;\n    }\n    return $sum;\n}","tests":"function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 3.0, 5.0, 7.0)) !== 84) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.4, 4.2, 0.0)) !== 29) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2.4, 1.0, 1.0)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 1.0, 15.0, 2.0)) !== 10230) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10000.0, 10000.0)) !== 200000000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.4, 4.6, 6.3)) !== 75) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.4, 17.9, 18.9, 19.9)) !== 1086) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, 1.0, 0.0)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_134","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩsɔzɩtʋ: \"tɔm\" kɛna matʋ cabɩ kpou nakʋyʋ.\/\/Tɔm piye naɖɩyɛ hɔɔlʋʋ taa, nɛ lɛɛtʋ taa lɛ, pɩkɛ cɛtɩm tɔm.\/\/Pɩtɛ alɩwaatʊ taa lɛ, tɔmpiye nɖɩ ɖɩkɛ alɩbɛɛtɩ tɔmpiye nɛ ɖɩfɛyɩ ɛzɩ  yɔ.\/\/Lɩzɩ tʊmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔmpiye true yee tɔmpiye kɛdɛzaɣ ñɩnɖɛ kɔyɔ .\/\/ >>> check_if_last_char_is_a_letter(\"apple pie\")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n\/\/ true\n\/\/ >>> check_if_last_char_is_a_letter(\"apple pi e \")\n\/\/ false\n\/\/ >>> check_if_last_char_is_a_letter(\"\")\n\/\/ false\nfunction check_if_last_char_is_a_letter($txt) {\n","canonical_solution":"function check_if_last_char_is_a_letter($txt) {\n    \/\/ Trim any trailing spaces from the input string\n    $trimmedTxt = rtrim($txt);\n\n    \/\/ Return false if the trimmed string is empty\n    if (empty($trimmedTxt)) {\n        return false;\n    }\n\n    \/\/ Get the last character of the trimmed string\n    $lastChar = substr($trimmedTxt, -1);\n\n    \/\/ Check if the last character is an alphabetical letter\n    if (ctype_alpha($lastChar)) {\n        \/\/ Split the trimmed string into words\n        $words = explode(\" \", $trimmedTxt);\n        \n        \/\/ Get the last word\n        $lastWord = end($words);\n        \n        \/\/ Check if the last word is a single character and return true or false\n        return (strlen($lastWord) === 1);\n    }\n\n    return false;\n}","tests":"function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_135","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Kɩ-taa wɛ tɔm kɩfatʋ.\/\/yee pɩfɛyɩ kɔyɔ, pɩpɩsɩɣ -1.\/\/Pɩfɛyɩ pɩdɩɩfɛyɩ yaa pɩfɛyɩ ɖɔɖɔ ɛzɩ pɩdɩɩfɛyɩ yɔ.\/\/Lɩzɩ tʊmɩyɛ nɖɩ ɖɩpɩsɩɣ ɛyʊ kʊyʊmʊm sɔsɔm yɔ nɛ ɖɩ-tɛ lɛɣtʊ ndʊ tɩ-taa \/\/ >>> can_arrange(array(1, 2, 4, 3, 5))\n\/\/ 3\n\/\/ >>> can_arrange(array(1, 2, 3))\n\/\/ -1\nfunction can_arrange($arr) {\n","canonical_solution":"function can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i;\n        }\n    }\n    return -1;\n}","tests":"function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_136","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Yee ɛyʊ ɛfɛyɩna ɛyʊ kʊyʊm yaa ɛyʊ kɩlɛyʊ kɔyɔ, pɩpɩsɩɣ ɛyʊ kʊyʊm.\/\/Ɛyʊ ɛ-tʊmɩyɛ lɛ se ɛlɩzɩ ɛ-tɛ ɛyʊtʊmɩyɛ nɖɩ ɖɩ-tɛ ɛyʊtʊmɩyɛ.\/\/Ɛyʊ ɛ-ñʊʊ taa lɛ, pʊtɔbʊʊ se ɛ-ñʊʊ taa lɛ, pʊtɔbʊʊ se ɛ-ñʊʊ taa lɛ, pʊtɔbʊʊ se ɛ-ñʊʊ taa lɛ.\/\/Lɩzɩ tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ (a, b) yɔ, ɖenɖe a kɛ  yɔ.\/\/ >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\/\/ array(null, 1)\n\/\/ >>> largest_smallest_integers(array())\n\/\/ array(null, null)\n\/\/ >>> largest_smallest_integers(array(0))\n\/\/ array(null, null)\nfunction largest_smallest_integers($lst) {\n","canonical_solution":"function largest_smallest_integers($lst) {\n    $largest_negative = null;\n    $smallest_positive = null;\n\n    foreach ($lst as $num) {\n        if ($num < 0 && ($largest_negative === null || $num > $largest_negative)) {\n            $largest_negative = $num;\n        }\n        if ($num > 0 && ($smallest_positive === null || $num < $smallest_positive)) {\n            $smallest_positive = $num;\n        }\n    }\n\n    return array($largest_negative, $smallest_positive);\n}","tests":"function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_137","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩsɩ nɛ ŋna-ɩ: Ye pamaɣ mayaɣ nakɛyɛ nɛ pamaɣzɩna-kɛ ɛzɩ tɔmpiye yɔ, tɔmpiye nɖɩ ɖɩ-taa pamaɣna-kɛ yɔ, ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa pamaɣna-kɛ yɔ, ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa pamaɣna-kɛ yɔ, ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa pamaɣna-kɛ yɔ.\/\/Ye kɩ-kɩcɛyɩm ɩnɩ ɩ-tɩŋa ɩnɩ ɩ-taa nabʋyʋ ɛfɛyɩ yɔ, pɩsɩɣnɩ-ɩ.\/\/Ɛ-tɛ lɛɣtʊ tʊmɩyɛ labʊ nɛ ɛ-tɛ lɛɣtʊ tʊmɩyɛ labʊ nɛ ɛ-tɛ lɛɣtʊ tʊmɩyɛ labʊ.\/\/Lɩzɩ tʋmɩyɛ nɖɩ ɖɩmʋɣ intɛrɩjɛrɩwaa, float waa yaa strings waa mba pasɩŋna \/\/ >>> compare_one(1, 2.5)\n\/\/ 2.5\n\/\/ >>> compare_one(1, \"2,3\")\n\/\/ \"2,3\"\n\/\/ >>> compare_one(\"5,1\", \"6\")\n\/\/ \"6\"\n\/\/ >>> compare_one(\"1\", 1)\n\/\/ null\nfunction compare_one($a, $b) {\n","canonical_solution":"function compare_one($a, $b) {\n    \/\/ Function to convert string number with comma to float\n    $convertToFloat = function($value) {\n        if (is_string($value) && strpos($value, ',') !== false) {\n            return floatval(str_replace(',', '.', $value));\n        }\n        return floatval($value);\n    };\n\n    \/\/ Convert to float for comparison, keep original for the result type\n    $floatA = is_string($a) ? $convertToFloat($a) : floatval($a);\n    $floatB = is_string($b) ? $convertToFloat($b) : floatval($b);\n\n    \/\/ Compare converted float values\n    if ($floatA > $floatB) {\n        return $a;\n    } elseif ($floatB > $floatA) {\n        return $b;\n    } else {\n        return null;\n    }\n}","tests":"function candidate(...$args) {\n    return compare_one(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2.5) !== 2.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 6) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, \"2,3\") !== \"2,3\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5,1\", \"6\") !== \"6\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"2\") !== \"2\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", 1) !== null) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_138","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ \/\/Pɩwɛɛ se ɖɩtɩlɩ se paa mayaɣ ŋga lɛ, kɛwɛna hɔɔlɩŋ naanza nɛ hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa lɛ, hɔɔlɩŋ ɛnɩ ɩ-taa.\/\/ >>> is_equal_to_sum_even(4)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(6)\n\/\/ false\n\/\/ >>> is_equal_to_sum_even(8)\n\/\/ true\nfunction is_equal_to_sum_even($n) {\n","canonical_solution":"function is_equal_to_sum_even($n) {\n    \/\/ Check if n is smaller than the smallest sum of 4 even numbers (2+2+2+2 = 8)\n    if ($n < 8) {\n        return false;\n    }\n\n    \/\/ Check if n is even, as the sum of even numbers is always even.\n    if ($n % 2 != 0) {\n        return false;\n    }\n\n    \/\/ Since we already checked for n < 8, any even number >= 8 can be formed as the sum of four even numbers.\n    return true;\n}\n\n\/\/ Testing the function\nvar_dump(is_equal_to_sum_even(4)); \/\/ false\nvar_dump(is_equal_to_sum_even(6)); \/\/ false\nvar_dump(is_equal_to_sum_even(8)); \/\/ true","tests":"function candidate(...$args) {\n    return is_equal_to_sum_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_139","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/le n > 0 \/\/brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! \/\/Payaɣ Brasiiili ɛjaɖɛ taa tɔmpiye nɖɩ se: \/\/ >>> special_factorial(4)\n\/\/ 288\n\/\/ The function will receive an integer as input and should return the special\n\/\/ factorial of this integer.\nfunction special_factorial($n) {\n","canonical_solution":"function special_factorial($n) {\n    if ($n <= 0) {\n        return 1;\n    }\n\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n    }\n    \n    return $result;\n}\n\nfunction factorial($num) {\n    if ($num == 0 || $num == 1) {\n        return 1;\n    }\n    $fact = 1;\n    for ($i = 2; $i <= $num; $i++) {\n        $fact *= $i;\n    }\n    return $fact;\n}","tests":"function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_140","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Pɩtɛ lɛ, pɛlɛɣzɩ matʋ ndʋ tɩ-tɩŋa nɛ - \/\/nɛ yee pɩcɛzɩ nabʊlɛ mbʊ yɔ, \/\/Ye ŋwɛna tɔm pee kɩmanzɩ yɔ, kpaɣ-yɛ nɛ ŋlɛɣzɩna ɖenɖe pɩfɛyɩ yɔ nɛ pɩ-tɛɛ mayaɣ, \/\/ >>> fix_spaces(\" Example\")\n\/\/ \"Example\"\n\/\/ >>> fix_spaces(\" Example 1\")\n\/\/ \"Example_1\"\n\/\/ >>> fix_spaces(\" Example 2\")\n\/\/ \"_Example_2\"\n\/\/ >>> fix_spaces(\" Example 3\")\n\/\/ \"_Example-3\"\nfunction fix_spaces($text) {\n","canonical_solution":"function fix_spaces($text) {\n    \/\/ Trim leading and trailing spaces\n    $text = trim($text);\n    \n    \/\/ Replace 3 or more spaces with a single '-'\n    $text = preg_replace('\/ {3,}\/', '-', $text);\n\n    \/\/ Replace remaining spaces with underscores\n    $text = str_replace(' ', '_', $text);\n    \n    return $text;\n}","tests":"function candidate(...$args) {\n    return fix_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Example\") !== \"Example\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mudasir Hanif \") !== \"Mudasir_Hanif_\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Yellow Yellow  Dirty  Fellow\") !== \"Yellow_Yellow__Dirty__Fellow\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Exa   mple\") !== \"Exa-mple\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"   Exa 1 2 2 mple\") !== \"-Exa_1_2_2_mple\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_141","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/- Pɩwɛɛ se tɔmpiye nɖɩ ɖɩtɩŋɩɣ tɩʋ yɔɔ yɔ ɖɩkɛ tɔmpiye nɖɩ ɖɩ-taa: ['txt', 'exe', 'dll'] \/\/Latɛŋ masɩ taa lɛ, payaɣ se \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"a\" nɛ \"\/\/- Kajalaɣ ñɩŋgʋ lɛ, pɩfɛyɩ se ŋyele nɛ tɔm pee wena awɛ tɩ-yɔɔ yɔ, awɛɛ falaa, nɛ kacalaɣ ñɩŋgʋ lɛ \/\/- Takayaɣ ŋga ka-hɩɖɛ wɛna tɩʋ kʋɖʋmʋʋ ɖeyi ɖeyi.\/\/- Takayaɣ ŋga ka-hɩɖɛ taa lɛ, ka-taa mayaɣ ɛfɛyɩna tam nabudozo nɛ pɩkɩlɩ ('0' - '9'). \/\/pɔ-tɔm taa: \/\/Payaɣ takayaɣ nakɛyɛ hɩɖɛ se takayaɣ kɩkalaɣ ye ka-taa tɔm tʋnɛ tɩ-tɩŋa tɩwɛɛ yɔ.\/\/Yee tɔmpiye nɖɩ ɖɩ-hɩɖɛ ɛwɛ camɩyɛ yɔ, ɖɩ-taa lɛ, pamaɣ se \"Ɛɛɛ\" nɛ yee pɩtɛkɛ mbʋ yɔ, pamaɣ se \"Aayɩ\".\/\/Lɩzɩ tʋmɩyɛ nɖɩ ɖɩkpaɣna tɔmpiye nɖɩ ɖɩkɛ takayaɣ nakɛyɛ hɩɖɛ yɔ nɛ ɖɩpɩsɩ \/\/ >>> file_name_check(\"example.txt\")\n\/\/ \"Yes\"\n\/\/ >>> file_name_check(\"1example.dll\")\n\/\/ \"No\"\nfunction file_name_check($file_name) {\n","canonical_solution":"function file_name_check($file_name) {\n    \/\/ Check if there's exactly one dot\n    if (substr_count($file_name, '.') !== 1) {\n        return 'No';\n    }\n\n    \/\/ Split the filename into name and extension\n    list($name, $extension) = explode('.', $file_name, 2);\n\n    \/\/ Check if the name part is not empty and starts with a letter\n    if (empty($name) || !ctype_alpha($name[0])) {\n        return 'No';\n    }\n\n    \/\/ Check if the extension is one of the valid options\n    $valid_extensions = ['txt', 'exe', 'dll'];\n    if (!in_array($extension, $valid_extensions)) {\n        return 'No';\n    }\n\n    \/\/ Count digits in the name\n    $digit_count = preg_match_all('\/[0-9]\/', $name);\n    if ($digit_count > 3) {\n        return 'No';\n    }\n    \n    return 'Yes';\n}","tests":"function candidate(...$args) {\n    return file_name_check(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"example.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1example.dll\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s1sdf3.asd\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K.dll\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"MY16FILE3.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"His12FILE94.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_Y.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"?aREYA.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\/this_is_valid.dll\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.wow\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_valid.txtexe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#this2_i4s_5valid.ten\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"@this1_is6_valid.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"this_is_12valid.6exe4.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"all.exe.txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_No.exe\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Is3youfault.txt\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"no_one#knows.dll\") !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1I563_Yes3.exe\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I563_Yes3.txtt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final..txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final132\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_f4indsartal132.\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".txt\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"s.\") !== \"No\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_142","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩtɛ lɛ, tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm pee wena awɛ matriki taa yɔ a-tɩŋa.\/\/Pɩtɛ ɛyʊ ɛ-tɛ ɛyʊ kʊyʊm 3 nɛ ɛkaɣ ɛ-tɛ ɛyʊ kʊyʊm ɛ-tɛ ɛyʊ kʊyʊm 4 nɛ ɛ-tɛ ɛyʊ kʊyʊm 3 yɔ.\/\/Tʊmɩyɛ ɖɩnɛ ɖɩkaɣ kpaɣʊ ɛyʊ kʊyʊm hɔɔlʊʊ taa. Pɩ-tɛ hɔɔlʊʊ taa ɛyʊ kʊyʊm hɔɔlʊʊ taa lɛ, tʊmɩyɛ nɖɩ ɖɩkaɣ kpaɣʊ ɛyʊ kʊyʊm hɔɔlʊʊ taa ɛyʊ kʊyʊm hɔɔlʊʊ taa yee ɛ-tɛ kʊyʊm hɔɔlʊʊ taa ɛyʊ kʊyʊm hɔɔlʊʊ taa lɛ, pɩkɛ \/\/\" \/\/ >>> lst\n\/\/ array(1, 2, 3)\n\/\/ >>> lst\n\/\/ array()\n\/\/ >>> lst\n\/\/ array(-1, -5, 2, -1, -5)\nfunction sum_squares($lst) {\n","canonical_solution":"function sum_squares($lst) {\n    $n = count($lst);\n    $sum = 0;\n\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] ** 2;\n        } elseif ($i % 4 == 0) {\n            $sum += $lst[$i] ** 3;\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n\n    return $sum;\n}","tests":"function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_143","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ 1:\/\/Pɩwɛɛ se tɔm pee wena awɛ tɔm pee kɩfana taa yɔ, aɖɔ ɛzɩ a-tɛ kajalaɣ tɔm pee yɔ.\/\/nɛ ɛ-kɩɖaʊ kɛ ɛyʊ kɩlɩm, \/\/Nɛ pɩwɛɛ se ŋyele nɛ tɔm pee wena awɛ kajalaɣ tɔm piye taa yɔ, \/\/tɔm pee naayɛ wɛ tɔm hʊyaa taa nɛ pɔhɔkɩ ɖama nɛ kʊɖʊmɩŋ, \/\/Pɩɩha-ŋ tɔm pee wena awɛ ɛzɩ tɔm loyaɣ yɔ.\/\/ >>> words_in_sentence(\"This is a test\")\n\/\/ \"is\"\n\/\/ Example 2:\n\/\/ >>> words_in_sentence(\"lets go for swimming\")\n\/\/ \"go for\"\n\/\/ Constraints:\n\/\/ * 1 <= len(sentence) <= 100\n\/\/ * sentence contains only letters\nfunction words_in_sentence($sentence) {\n","canonical_solution":"function is_prime($num) {\n    if ($num < 2) return false;\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) return false;\n    }\n    return true;\n}\n\nfunction words_in_sentence($sentence) {\n    $words = explode(' ', $sentence);\n    $result = [];\n\n    foreach ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n        }\n    }\n    \n    return implode(' ', $result);\n}","tests":"function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_144","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ŋpɩzɩɣ ŋmaɣzɩ se x nɛ n pɛkɛ hɔɔlɩŋ weyi ɩwɛ ɖeu yɔ, nɛ pɛfɛyɩnɩ zéro ɛzɩ pɛ-hɩɖɛ yɔ.\/\/Ɛyʊ kʊyʊm nɛ ɛ-tɛ kʊyʊm pɛkpɛnda ɛ-tɛ kʊyʊm nɛ ɛ-tɛ kʊyʊm pɛkpɛnda ɛ-tɛ kʊyʊm.\/\/Pɩtasɩna mbʋ yɔ, x nɛ n, pɛtɛyɩɣ tɔmpiye nɖɩ nɛ tɔmpiye nɖɩ ɖɩ-tɛ lɛɣtʊ, nɛ ɖɩ-tɛ lɛɣtʊ wɛ ɛzɩ mbʊ yɔ:\/\/x * n. Kɩ-tɛ lɛɣtʊ tʊmɩyɛ pɩsɩɣna toovenim yee x * n ɛ-tɛ lɛɣtʊ tʊmɩyɛ ɛtɛ lɛɣtʊ tʊmɩyɛ kɔyɔ nɛ false \/\/Ña-tʋmɩyɛ lɛ se ŋlabɩnɩ tʋmɩyɛ tʋmɩyɛ nɖɩ ɖɩkaɣ kɛlɛʋ pɩ-yɔɔ yɔ .\/\/ >>> simplify(\"1\/5\", \"5\/1\")\n\/\/ true\n\/\/ >>> simplify(\"1\/6\", \"2\/1\")\n\/\/ false\n\/\/ >>> simplify(\"7\/10\", \"10\/2\")\n\/\/ false\nfunction simplify($x, $n) {\n","canonical_solution":"function simplify($x, $n) {\n    list($xNum, $xDen) = explode('\/', $x);\n    list($nNum, $nDen) = explode('\/', $n);\n\n    \/\/ Multiply and simplify the expression x * n\n    $resultNum = $xNum * $nNum;\n    $resultDen = $xDen * $nDen;\n\n    \/\/ Check if result is a whole number\n    return ($resultNum % $resultDen === 0);\n}","tests":"function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1\/5\", \"5\/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\/6\", \"2\/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5\/1\", \"3\/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7\/10\", \"10\/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2\/10\", \"50\/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7\/2\", \"4\/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11\/6\", \"6\/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2\/3\", \"5\/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5\/2\", \"3\/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2\/4\", \"8\/4\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2\/4\", \"4\/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\/5\", \"5\/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\/5\", \"1\/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_145","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Pɔɖɔɔnɩ-wɛ nɛ pa-lɩmaɣza kpaɣna pa-lɩmaɣza kɩbana yɔɔ.\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩcɛyɩtʋ: ye wondu ndɩ ndɩ ɩwɛna ɖama yɔɔ mayaɣ kʋɖʋmaɣ yɔ, \/\/Pɩlɩʋ ŋgʋ kɩ-taa pamaɣna tɔm pee ana yɔ, kɩ-taa lɛ, pamaɣna-yɛ nɛ sɩ-hɩla.\/\/Maɣzɩ nɛ ŋna ɛzɩma papɩzɩɣ nɛ pama tɔm pee wena awɛ tɔm pee ndɩ ndɩ taa yɔ .\/\/ >>> order_by_points(array(1, 11, -1, -11, -12))\n\/\/ array(-1, -11, 1, -12, 11)\n\/\/ >>> order_by_points(array())\n\/\/ array()\nfunction order_by_points($nums) {\n","canonical_solution":"function order_by_points($nums) {\n    usort($nums, function($a, $b) use ($nums) {\n        $sumOfDigits = function($n) {\n            $n = abs($n); \/\/ Use absolute value to ignore negative sign\n            $sum = 0;\n            while ($n > 0) {\n                $sum += $n % 10;\n                $n = intdiv($n, 10);\n            }\n            return $sum;\n        };\n        \n        $sumA = $sumOfDigits($a);\n        $sumB = $sumOfDigits($b);\n        \n        if ($sumA === $sumB) {\n            \/\/ Maintain original order if sums are equal\n            return array_search($a, $nums) <=> array_search($b, $nums);\n        }\n        \n        return $sumA <=> $sumB;\n    });\n    \n    return $nums;\n}","tests":"function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1, -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !== array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_146","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Kajalaɣ nɛ kɛtɛzaɣ mayaɣ kɛna ɛyʊ kʊyʊm (1, 3, 5, 7, 9).\/\/Kɩ-tɛ lɛɣtʊ natʊyʊ taa lɛ, pɩcɛzɩ 10 nɛ pɩtasɩna naalɛ \/\/Maɣna se pamaɣna kɩ-tɛ matʋ nɛ kɩpɩsɩɣ-kʋ nɛ kɩ-tɛ matʋ.\/\/ >>> specialFilter(array(15, -73, 14, -15))\n\/\/ 1\n\/\/ >>> specialFilter(array(33, -2, -3, 45, 21, 109))\n\/\/ 2\nfunction specialFilter($nums) {\n","canonical_solution":"function specialFilter($nums) {\n    $count = 0;\n\n    foreach ($nums as $num) {\n        if ($num > 10) {\n            $absNum = abs($num);\n            $firstDigit = intval(substr((string)$absNum, 0, 1));\n            $lastDigit = $absNum % 10;\n\n            if (in_array($firstDigit, array(1, 3, 5, 7, 9)) && in_array($lastDigit, array(1, 3, 5, 7, 9))) {\n                $count++;\n            }\n        }\n    }\n\n    return $count;\n}","tests":"function candidate(...$args) {\n    return specialFilter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, -2, 1, -5)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, -73, 14, -15)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(33, -2, -3, 45, 21, 109)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(43, -12, 93, 125, 121, 109)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(71, -2, -33, 75, 21, 19)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_147","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ:\/\/nɛ a[i] + a[j] + a[k] kɛ 3 tam nabʊyʊ. \/\/Pɩsɩ nɛ ŋna-ɩ kɩlɛlʋʋ:\/\/Paa i (1 ≤ i ≤ n) lɛ, a[i] = i * i - i + 1 wɛna wazaɣ.\/\/Pʊtɔbʊʊ se ŋwɛna ɛyʊ kʊyʊmʊm n. Pɩwɛɛ se ŋñɔɔzɩ ɛyʊ kʊyʊmʊm a weyi ɛ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ n yɔ.\/\/ >>> get_max_triples(5)\n\/\/ 1\n\/\/ Explanation: \n\/\/ a = [1, 3, 7, 13, 21]\n\/\/ The only valid triple is (1, 7, 13).\nfunction get_max_triples($n) {\n","canonical_solution":"function get_max_triples($n) {\n    $a = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $a[$i - 1] = $i * $i - $i + 1;\n    }\n\n    $count = 0;\n    \n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    \n    return $count;\n}","tests":"function candidate(...$args) {\n    return get_max_triples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 53361) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_148","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Pɩtɩkɛ tɛtʋ wandamm hɩla.\/\/Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩ matriki kɩmɩŋ weyi ɛfɛyɩ yɔ yee pɩkɛ planet1 yaa planet2 yɔ.\/\/Pɩtɩkɛ wɩsɩ cɔlɔ pɩlɩnaa.\/\/Pɩkɛna tɛtʊ ndʊ tɩ-taa tɛtʊ cɔŋna nɛ tɩ-taa tɛtʊ cɔŋna nɛ tɩ-taa tɛtʊ cɔŋna nɛ tɩ-taa tɛtʊ cɔŋna nɛ tɩ-taa tɛtʊ cɔŋna.\/\/Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩ ɛyʊ tɛ pʊtʊnaa mba pa-tɩŋa pa-tɛ pʊtʊnaa wɛna \/\/Ma tʋmɩyɛ nɖɩ ɖɩkpaɣ kpɩnɛ naalɛ hɩla ɛzɩ kpɩnɛ 1 nɛ kpɩnɛ 2 yɔ.\/\/Uranɩ nɛ Neptuni.\/\/Pɩtɛ lɛ, ɖɩnaɣ tɛtʋ, Maarɩsɩ, Jupitɛɛrɩ, Saturn, nɛ pɩtɛ lɛ, Vénus.\/\/Wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ, wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ, wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ, wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ, wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ, wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ, wɩsɩ cɔɔʊ taa wɛ kedeŋa kpeekpe yɔɔ lɛ.\/\/ >>> bf(\"Jupiter\", \"Neptune\")\n\/\/ array(\"Saturn\", \"Uranus\")\n\/\/ >>> bf(\"Earth\", \"Mercury\")\n\/\/ \"Venus\"\n\/\/ >>> bf(\"Mercury\", \"Uranus\")\n\/\/ array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n","canonical_solution":"function bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\n    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\n    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n    }\n\n    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n}","tests":"function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_149","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/Ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔm pee tɩŋa wɛna kɩmaŋ.\/\/Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩ ɛyʊ yɔɔ tɔmpiye ndɩ ndɩ nɛ ɖɩ-tɛ paɣtʊ.\/\/Ye tɔm pee naalɛ ɩwɛna kɩmaŋ kʋɖʋmʋʋ yɔ, paɖʋʋ-yɛ alphabetiki taa.\/\/Pɩwɛɛ se ɛpɩsɩnɩ matriki ŋgʊ kɩ-tɛ paɣtʊ yɔɔ.\/\/Pɩwɛɛ se tɔm pee wena awɛ yɔ, a-ɖaɣlɩkɩŋ ɛpaɣlɩ, nɛ ŋpɩzɩɣ ŋmaɣzɩnɩ-yɛ.\/\/Pɩpɩzɩɣ nɛ pɩla se kɩ-taa tɔm kɩlɛlʋʋ wɛɛ.\/\/Ɛyʊ wɛʊ yɔ, pɩtɛ lɛ pɩkɛ ɛyʊ wɛʊ nɛ ɛfɛyɩna ɛyʊ nɛ ɛ-hɩɖɛ.\/\/nɛ pɩpɩsɩɣ ɛ-tɛ matriki nɛ ɛ-tɛ matriki kɩlɛlʋʋ, \/\/ɛtɛzɩɣ kɩ-taa tɔmpiye nɖɩ ɖɩ-tɛ kɩɖaɣlɩm fɛyɩ yɔ, \/\/Maʋ tʋmɩyɛ nɖɩ ɖɩmʋɣ tɔmpiye ndɩ ndɩ yɔ, \/\/ >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n\/\/ array(\"aa\")\n\/\/ >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n\/\/ array(\"ab\", \"cd\")\nfunction sorted_list_sum($lst) {\n","canonical_solution":"function sorted_list_sum($lst) {\n    \/\/ Filter out strings with odd lengths\n    $filtered = array_filter($lst, function($str) {\n        return strlen($str) % 2 == 0;\n    });\n    \n    \/\/ Sort the filtered array by length and then alphabetically\n    usort($filtered, function($a, $b) {\n        $lengthComparison = strlen($a) - strlen($b);\n        if ($lengthComparison == 0) {\n            return strcmp($a, $b);\n        }\n        return $lengthComparison;\n    });\n\n    return $filtered;\n}","tests":"function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_150","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩwɛɛ se ɛpɩzɩ nɛ ɛlɩzɩ y tɛ mayaɣ ŋga ka-taa ɛyʊ wɛɛ yɔ.\/\/Pɩkɛna kɩlɛmʋʋ kɩlɛmʋʋ kɩlɛmʋʋ ŋgʋ kɩ-taa papɩzɩɣ nɛ patɩlɩ x yee n ɛ-tɛ lɛlʊ kɔyɔ.\/\/ >>> x_or_y(7, 34, 12)\n\/\/ 34\n\/\/ >>> x_or_y(15, 8, 5)\n\/\/ 5\nfunction x_or_y($n, $x, $y) {\n","canonical_solution":"function x_or_y($n, $x, $y) {\n    if (is_prime($n)) {\n        return $x;\n    } else {\n        return $y;\n    }\n}\n\nfunction is_prime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    if ($num <= 3) {\n        return true;\n    }\n    if ($num % 2 == 0 || $num % 3 == 0) {\n        return false;\n    }\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i == 0 || $num % ($i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}","tests":"function candidate(...$args) {\n    return x_or_y(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7, 34, 12) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8, 5) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 33, 5212) !== 33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1259, 3, 52) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7919, -1, 12) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3609, 1245, 583) !== 583) { throw new Exception(\"Test failed!\"); }\n    if (candidate(91, 56, 129) !== 129) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 34, 1234) !== 1234) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 0) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_151","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ɖɩcɔna kɔyɔ, ɖɩnaɣ se, yee mayaɣ ŋga kɛfɛyɩ ññɩɩ kɔyɔ, ɖɩnaɣ se mayaɣ ŋga kɛfɛyɩ ññɩɩ.\/\/Ye ŋha-ɖʋ nimbrɩ waa sakɩyɛ yɔ, ɖɩpɩsɩɣ-ŋ nimbrɩ waa mba pa-naalɛ pa-kɩɖaʋ taa yɔ, pa-tɩŋa pa-ñɩm.\/\/ >>> double_the_difference(array(1, 3, 2, 0))\n\/\/ 10\n\/\/ >>> double_the_difference(array(-1, -2, 0))\n\/\/ 0\n\/\/ >>> double_the_difference(array(9, -2))\n\/\/ 81\n\/\/ >>> double_the_difference(array(0))\n\/\/ 0\n\/\/ If the input array is empty, return 0.\nfunction double_the_difference($lst) {\n","canonical_solution":"function double_the_difference($lst) {\n    $sum = 0;\n    foreach ($lst as $num) {\n        if (is_int($num) && $num > 0 && $num % 2 !== 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\n\/\/ Example usage:\n\/\/ echo double_the_difference(array(1, 3, 2, 0)); \/\/ 10\n\/\/ echo double_the_difference(array(-1, -2, 0)); \/\/ 0\n\/\/ echo double_the_difference(array(9, -2)); \/\/ 81\n\/\/ echo double_the_difference(array(0)); \/\/ 0","tests":"function candidate(...$args) {\n    return double_the_difference(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5.0, 4.0)) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.1, 0.2, 0.3)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10.0, -20.0, -30.0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, -2.0, 8.0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.2, 3.0, 5.0)) !== 34) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) !== 165) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_152","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Pɩtɛ lɛ, kɩ-tɛ wɛtʊ lɛɣzʊʊ lɛɣzʊʊ nɛ kɩ-tɛ wɛtʊ lɛɣzʊʊ lɛɣzʊʊ.\/\/Pɩpɩsɩɣ matriki ŋgʋ kɩwɛna kɩ-ɖaɣlɩkɩŋ kʋɖʋmʋʋ yɔ nɛ kɩwɩlɩɣ ɛzɩma paa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-tɔmpiye nɖɩ ɖɩ-yɔɔ.\/\/Pʊtɔbʊʊ se ŋwɛna ñʊʊ naalɛ nɛ pa-taa lɛ, paa weyi ɛ-ñʊʊ mayaɣ nɛ ɛ-tɛ tɔm.\/\/Pɩwɛɛ se ŋtɩlɩ se ɛyʋ nɔɔyʋ maɣzaɣ se ɛ-tɔm kɛ toovenim.\/\/Pɩwɛɣ ɖeu se ɖɩmaɣzɩ nɛ ɖɩna.\/\/Pɩtasɩ lɛ, ye ŋcaɣ se ŋtɩlɩ mbʋ pɩ-taa ŋwɛɛ yɔ, ŋpɩzɩɣ nɛ ŋmaɣzɩ mbʋ pɩ-taa ŋwɛɛ yɔ pɩ-yɔɔ.\/\/Maɣzɩ se ɖa-tɩŋa ɖɩtɔzʋʋ ɛzɩma pɩlakaɣ ɛyʋ alɩwaatʋ ndʋ ɛ-taa lakɩ leleŋ nɛ ɛ-kɩcɛyɩm yɔ pɩ-yɔɔ.\/\/ >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n\/\/ array(0, 0, 0, 0, 3, 3)\n\/\/ >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n\/\/ array(4, 4, 1, 0, 0, 6)\nfunction compare($game, $guess) {\n","canonical_solution":"function compare($game, $guess) {\n    $result = array();\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}","tests":"function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_153","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/(Ɛ-tɛ ɖoŋ wɛ -1).\/\/return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \/\/Pɩtɛ lɛ, ŋpɩzɩɣ nɛ ŋpɔzɩ-ɩ se:\/\/Ɖɩkpaɣ ɛzɩ, ye paha-ɖʋ \"Slices\" ɛzɩ class nɛ array yɔ yɔ, \/\/Lɩzɩ mbʋ pɩlɩɣ kajalaɣ lone taa yɔ.\/\/Ye ŋwɛnɩ kɩɖaɣlʋʋ naalɛ yaa kɩɖaɣlʋʋ sakɩyɛ nɛ ɩwɛ ɖoŋ kʋɖʋmʋʋ yɔ, pɩwɛɛ se ŋñɔɔzɩ- ɩ nɛ ŋlabɩnɩ tʋmɩyɛ.\/\/Pɩsɩ takayɩhayʋʋ: ClassName.StrongestExtensionName ñɩŋgʋ yɔɔ. \/\/Pɩwɛɛ se ŋñɩnɩ kɩwalʊʊ ŋgʊ kɩkɩlɩ ɖoŋ yɔ nɛ ŋpɩsɩ ɛ-tɛ tɔmpiye naɖɩyɛ.\/\/Pɩtɛ lɛ, pɛtɛzɩɣ-ɩ yaʋ se CAP - SM.\/\/Takayɩhatʋ ndʋ tɩtamsɩna \\\\ Ɛntɛrnɛtɩ \\\\ yɔ\/\/Pɩtɛ ɖoŋ tɔmpiye nɖɩ ɖɩ-taa lɛ: CAP kɛna mayaɣ sɔsɔɣa ŋga pama-kɛ yɔ.\/\/Pɩtɛ kɩwalʊʊ ŋgʊ kɩ-taa papɩzɩɣ patasɩ kpaɣʊ takayasɩ lɛɛsɩ.\/\/Pʊtɔbʊʊ se ŋwɛna ŋgbɛyɛ naɖɩyɛ nɛ ɖɩ-hɩɖɛ nɛ ɖɩ-tɛ kɩwalʊʊ.\/\/ >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\/\/ \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n","canonical_solution":"function Strongest_Extension($class_name, $extensions) {\n    $strongestExtension = '';\n    $maxStrength = null;\n\n    foreach ($extensions as $extension) {\n        $cap = preg_match_all('\/[A-Z]\/', $extension);\n        $sm = preg_match_all('\/[a-z]\/', $extension);\n        $strength = $cap - $sm;\n\n        if ($maxStrength === null || $strength > $maxStrength) {\n            $maxStrength = $strength;\n            $strongestExtension = $extension;\n        }\n    }\n\n    return $class_name . '.' . $strongestExtension;\n}","tests":"function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_154","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Ŋwɛna tɔm naalɛ nɛ pɩwɛɛ se ŋpɩsɩ tɔm ndʋ tɩkɛ toovenim yɔ, ye tɔm naalɛ ñɩndʋ yaa tɩ-tɛ lɛɛtʋ tɩkɛ kajalaɣ tɔm piye taa tɔm piye cikpeɖe yɔ.\/\/ >>> cycpattern_check(\"abcd\", \"abd\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"hello\", \"ell\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"whassup\", \"psus\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"abab\", \"baa\")\n\/\/ true\n\/\/ >>> cycpattern_check(\"efef\", \"eeff\")\n\/\/ false\n\/\/ >>> cycpattern_check(\"himenss\", \"simen\")\n\/\/ true\nfunction cycpattern_check($a, $b) {\n","canonical_solution":"function cycpattern_check($a, $b) {\n    $lenB = strlen($b);\n    \/\/ Generate all rotations of the second word\n    for ($i = 0; $i < $lenB; $i++) {\n        $rotation = substr($b, $i) . substr($b, 0, $i);\n        if (strpos($a, $rotation) !== false) {\n            return true;\n        }\n    }\n    return false;\n}","tests":"function candidate(...$args) {\n    return cycpattern_check(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xyzw\", \"xyw\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"yello\", \"ell\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"whattup\", \"ptut\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"efef\", \"fee\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abab\", \"aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"winemtt\", \"tinem\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_155","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Ye ɖɩha-ɩ nimero waa tɩŋa yɔ, ɛpɩsʋʋna matrice nɖɩ ɖɩ-taa nimero waa mba pɛwɛ paa nɛ mba pɛfɛyɩ paa nɛ pa-taa yɔ.\/\/ >>> even_odd_count(-12)\n\/\/ array(1, 1)\n\/\/ >>> even_odd_count(123)\n\/\/ array(1, 2)\nfunction even_odd_count($num) {\n","canonical_solution":"function even_odd_count($num) {\n    $num = abs($num);\n    $evenCount = 0;\n    $oddCount = 0;\n\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $evenCount++;\n        } else {\n            $oddCount++;\n        }\n        $num = intval($num \/ 10);\n    }\n\n    return array($evenCount, $oddCount);\n}","tests":"function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_156","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ: \/\/Pɩtɛ kɩlɛmɩŋ: 1 <= num <= 1000 \/\/Nɛ ŋyele nɛ pama-kʋ nɛ tɔm pee cikpeŋ.\/\/Ye paha-ɖʋ kɩmaŋ mayaɣ kɔyɔ, ɖɩkpaɣ kɩmaŋ mayaɣ ŋga nɛ ɖɩkpaɣ Roma n̄ɩnzɩ taa yɔ nɛ ɖɩlɩzɩ-kɛ nɛ ɖɩlabɩnɩ tʋmɩyɛ.\/\/ >>> int_to_mini_roman(19)\n\/\/ \"xix\"\n\/\/ >>> int_to_mini_roman(152)\n\/\/ \"clii\"\n\/\/ >>> int_to_mini_roman(426)\n\/\/ \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n","canonical_solution":"function int_to_mini_roman($number) {\n    $map = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $roman = '';\n    while ($number > 0) {\n        foreach ($map as $val => $symbol) {\n            if ($number >= $val) {\n                $roman .= $symbol;\n                $number -= $val;\n                break;\n            }\n        }\n    }\n\n    return $roman;\n}","tests":"function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_157","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Pɩcɛzɩ ɛzɩ 90 mbʋ yɔ.\/\/Hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩ-taa lɛ, hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩ-taa lɛ, hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ.\/\/Pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.\/\/Ye ɖɩkpaɣ tɔmpiye nɖɩ ɖɩ-tɛ hɔɔlɩŋ naadozo yɔ, ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ toovenim tɔm kɔyɔ, tɔmpiye nɖɩ ɖɩ-tɛ hɔɔlɩŋ naadozo yɔ, ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ toovenim tɔm yɔ.\/\/ >>> right_angle_triangle(3, 4, 5)\n\/\/ true\n\/\/ >>> right_angle_triangle(1, 2, 3)\n\/\/ false\nfunction right_angle_triangle($a, $b, $c) {\n","canonical_solution":"function right_angle_triangle($a, $b, $c) {\n    \/\/ Sort the sides to make it easier to apply the Pythagorean theorem\n    $sides = [$a, $b, $c];\n    sort($sides);\n    \n    \/\/ Apply the Pythagorean theorem to check for a right-angled triangle\n    return $sides[0] ** 2 + $sides[1] ** 2 === $sides[2] ** 2;\n}","tests":"function candidate(...$args) {\n    return right_angle_triangle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_158","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Takayɩhatʋ ndʋ tɩtamsɩna \\\\ Takayɩhatʋ ndʋ tɩtɩkɛ takayaɣ nakɛyɛ yɔ \\\\ yɔ\/\/Yee tɔm pee kɩkpɛdɩŋ ɛɖɔwa kɔyɔ, tɔm pee kɩkpɛdɩŋ sakɩyɛ wɛna.\/\/Tɔmpiye nɖɩ ɖɩ-taa tɔm pee ndɩ ndɩ wɛɛ yɔ, ɖɩpɩsɩɣ tɔm pee wena a-taa tɔm pee kɩlɩna ɖɔʋ yɔ.\/\/Ma tʋmɩyɛ nɖɩ ɖɩmʋna yɔ, ɖɩ-taa tɔmpiye ndɩ ndɩ.\/\/ >>> find_max(array(\"name\", \"of\", \"string\"))\n\/\/ \"string\"\n\/\/ >>> find_max(array(\"name\", \"enam\", \"game\"))\n\/\/ \"enam\"\n\/\/ >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n\/\/ \"aaaaaaa\"\nfunction find_max($words) {\n","canonical_solution":"function find_max($words) {\n    $maxUniqueChars = 0;\n    $result = '';\n    \n    foreach ($words as $word) {\n        \/\/ Get unique characters count\n        $uniqueCharsCount = count(array_unique(str_split($word)));\n        \n        \/\/ Determine if this word has more unique characters or comes first lexicographically\n        if ($uniqueCharsCount > $maxUniqueChars || ($uniqueCharsCount === $maxUniqueChars && ($result === '' || strcmp($word, $result) < 0))) {\n            $maxUniqueChars = $uniqueCharsCount;\n            $result = $word;\n        }\n    }\n    \n    return $result;\n}","tests":"function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_159","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ: \/\/Ye ŋfɛyɩnɩ kaarooti sakɩyɛ yɔ, ŋkaɣ tɔɔʋ kaarooti tɩŋa, ɛlɛ ñɔɔsɩ kaɣ-ŋ kpaʋ.\/\/[Yele nɛ paɖʋ video ŋgʋ kɩ-tɛɛ tɔm pɔzʋʋ.]\/\/Pɩwɛɛ se ŋpɩsɩ [ tɔɔnasɩ nzɩ ŋtɔɔ yɔ sɩ-kpɩtɩŋ tɩŋa, \/\/Ɛlɛ lɛɛlɛɛyɔ lɛ, pɩwɛɛ se ŋtɔɔ karɩbɔɔnɩ nɛ pɩsa nɛ ŋtɛ ña-kɩyakʋ taa tɔɔnaɣ.\/\/Ŋkɛ kpɩnɛ nɖɩ ɖɩwɛnɩ ñɔɔsɩ yɔ, nɛ ŋtɛm tɔɔʋ kaarooti sakɩyɛ.\/\/ >>> eat(5, 6, 10)\n\/\/ array(11, 4)\n\/\/ >>> eat(4, 8, 9)\n\/\/ array(12, 1)\n\/\/ >>> eat(1, 10, 10)\n\/\/ array(11, 0)\n\/\/ >>> eat(2, 11, 5)\n\/\/ array(7, 0)\n\/\/ Variables:\n\/\/ @number : integer\n\/\/ the number of carrots that you have eaten.\n\/\/ @need : integer\n\/\/ the number of carrots that you need to eat.\n\/\/ @remaining : integer\n\/\/ the number of remaining carrots thet exist in stock\n\/\/ Constrain:\n\/\/ * 0 <= number <= 1000\n\/\/ * 0 <= need <= 1000\n\/\/ * 0 <= remaining <= 1000\n\/\/ Have fun :)\nfunction eat($number, $need, $remaining) {\n","canonical_solution":"function eat($number, $need, $remaining) {\n    $totalEaten = $number + min($need, $remaining);\n    $carrotsLeft = max(0, $remaining - $need);\n    return array($totalEaten, $carrotsLeft);\n}","tests":"function candidate(...$args) {\n    return eat(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 6, 10) !== array(11, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8, 9) !== array(12, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 10, 10) !== array(11, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 11, 5) !== array(7, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 7) !== array(9, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5, 1) !== array(5, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_160","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Tʊmɩyɛ laɖʊ wɛna tʊmɩyɛ laɖʊ kʋɖʋm, nɛ tʊmɩyɛ laɖʊ wɛna tʊmɩyɛ laɖʊ naalɛ.\/\/Ɛ-tɛ operandɩ kɛna nimero waa kɩmaŋ weyi ɛfɛyɩ kɩmaŋ yɔ.\/\/Tʊma wena palakɩna tʊma sɔsɔna yɔ, a-ɖaɣlɩkɩŋ wɛ ɛzɩ tʊma wena palakɩna tʊma sɔsɔna yɔ, a-ɖaɣlɩkɩŋ lɛɛkʋ.\/\/Pɩsɩ nɛ ŋna-ɩ tɔm kɩkpɛlɩkɩtʋ:\/\/=> Kɩ-tɛ lɩmaɣzɩyɛ = 9 \/\/Pɩwɩlɩɣ se 2 + 3 * 4 - 5 .\/\/Ɛ-tɛ matʊ wɛ ɛzɩ [2, 3, 4, 5] yɔ.\/\/ɛyʊ weyi ɛ-tɛ tɔm wɛ ndɩ yɔ['+', '*', '-'] \/\/Kɩɖaʋ: \/\/Kpɛlɩ kpɛlɛkʋʋ (**) \/\/Tɛtʊ tʊma ( \/\/) \/\/Kɩwalʋʋ (*) \/\/Kpaɣtʋ ( - ) \/\/Pɩtɛ (+) \/\/Algebra taa tʋma kɩbana: \/\/Ɛ-tɔm pee nɛ ɛɖaɣnɩ pɩsʋʋ tɔm pee ana a-tɔm pee.\/\/Ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa lɛ, ɛ-tɛ alɩbɛɛrɩ tɔmpiye nɖɩ ɖɩ-taa.\/\/Ɖɩkpaɣ ɛzɩ matrice waa naalɛ yɔ, kajalaɣ matrice taa lɛ, algebra tʋmɩyɛ wɛna, nɛ function do_algebra($operator, $operand) {\n","canonical_solution":"function do_algebra($operator, $operand) {\n    $expression = $operand[0]; \/\/ Start with the first operand\n    for ($i = 0; $i < count($operator); $i++) {\n        $currentOperator = $operator[$i];\n        $currentOperand = $operand[$i + 1];\n        \n        switch ($currentOperator) {\n            case '+':\n                $expression .= \" + $currentOperand\";\n                break;\n            case '-':\n                $expression .= \" - $currentOperand\";\n                break;\n            case '*':\n                $expression .= \" * $currentOperand\";\n                break;\n            case '\/\/':\n                $expression .= \" \/\/ $currentOperand\";\n                break;\n            case '**':\n                $expression .= \" ** $currentOperand\";\n                break;\n        }\n    }\n\n    \/\/ Use eval to evaluate the constructed expression\n    eval(\"\\$result = {$expression};\");\n\n    \/\/ Return the result\n    return $result;\n}","tests":"function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\/\/\", \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_161","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaŋ \/\/Pɩwɛɛ se tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm pee wena awɛ pɩ-taa yɔ.\/\/Ye tɔmpiye nɖɩ ɖɩfɛyɩna masɩ nasɩyɛ kɔyɔ, pɛlɛɣzɩ-ɖɩ nɛ ɖɩpɩsɩ.\/\/Ye pɩtɛkɛ mbʋ yɔ, yele-kʋ nɛ kɩwɛɛ mbʋ.\/\/Yee s[i] ɛkɛ mayaɣ kɔyɔ, ɛ-tɛ tɔmpiye ɛlɩɣna pɩ-tɛɛ nɛ pɩkɔɔ pɩtalɩ pɩ-yɔɔ yaa pɩ-tɛɛ nɛ pɩ-yɔɔ.\/\/Pʊtɔbʊʊ se ŋwɛna ñʊʊ mayaɣ kʊyʊmʊ.\/\/ >>> solve(\"1234\")\n\/\/ \"4321\"\n\/\/ >>> solve(\"ab\")\n\/\/ \"AB\"\n\/\/ >>> solve(\"#a@C\")\n\/\/ \"#A@c\"\nfunction solve($s) {\n","canonical_solution":"function solve($s) {\n    \/\/ Check if the string contains any letter\n    if (preg_match('\/[a-zA-Z]\/', $s)) {\n        \/\/ Change the case for each character in the string\n        $result = '';\n        for ($i = 0; $i < strlen($s); $i++) {\n            $char = $s[$i];\n            if (ctype_alpha($char)) {\n                \/\/ If the character is a letter, reverse its case\n                if (ctype_lower($char)) {\n                    $result .= strtoupper($char);\n                } else {\n                    $result .= strtolower($char);\n                }\n            } else {\n                \/\/ Otherwise, keep it as it is\n                $result .= $char;\n            }\n        }\n        return $result;\n    } else {\n        \/\/ If the string contains no letters, reverse the string\n        return strrev($s);\n    }\n}","tests":"function candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AsDf\") !== \"aSdF\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1234\") !== \"4321\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"AB\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#a@C\") !== \"#A@c\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#AsdfW^45\") !== \"#aSDFw^45\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#6@2\") !== \"2@6#\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#$a^D\") !== \"#$A^d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#ccc\") !== \"#CCC\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_162","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Yee 'text' pɩkɛ matʋ kɩmamatʋ natʋyʋ kɔyɔ, pɩpɩsɩɣ null.\/\/Ye ŋha-ɩ tɔmpiye 'text' kɔyɔ, ŋpɩsɩɣ-ɖɩ nɛ md5 tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.\/\/ >>> string_to_md5(\"Hello world\")\n\/\/ \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5($text) {\n","canonical_solution":"function string_to_md5($text) {\n    if ($text === '') {\n        return null;\n    }\n    return md5($text);\n}","tests":"function candidate(...$args) {\n    return string_to_md5(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello world\") !== \"3e25960a79dbc69b674cd4ec67a72c62\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A B C\") !== \"0ef78513b0cb8cef12743f5aeb35f888\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"password\") !== \"5f4dcc3b5aa765d61d8327deb882cf99\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"},{"task_id":"HumanEval_163","nl":"kbp_Latn","pl":"php","prompt":"<?php\n\/\/Kɩɖaʋ nakʋyʋ yɔ: \/\/nɛ b, pɩlɩɣna ɛzɩma pɩpaɣlɩɣ yɔ.\/\/Ye ŋha-ɖʋ ɛtɛyɩŋ naalɛ a nɛ b, ɖitiyele nɛ ɖɩna hɔɔlɩŋ weyi ɩ-taa a nɛ b pɛtɛyɩɣ ɖama yɔ.\/\/ >>> generate_integers(2, 8)\n\/\/ array(2, 4, 6, 8)\n\/\/ >>> generate_integers(8, 2)\n\/\/ array(2, 4, 6, 8)\n\/\/ >>> generate_integers(10, 14)\n\/\/ array()\nfunction generate_integers($a, $b) {\n","canonical_solution":"function generate_integers($a, $b) {\n    $evenNumbers = [];\n    $start = min($a, $b);\n    $end = max($a, $b);\n    for ($i = $start; $i <= $end; $i++) {\n        if ($i % 2 == 0) {\n            $evenNumbers[] = $i;\n        }\n    }\n    return $evenNumbers;\n}","tests":"function candidate(...$args) {\n    return generate_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 10) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(132, 2) !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 89) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"}]