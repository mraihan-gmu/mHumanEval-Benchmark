task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,kas_Arab,lua,"- دیتُن حد۔ - چیک کرو اگر دِنہٕ آمت نمبر ٹیبلس منز چُھ، توہہٕ چِھ کینٛہہ دوہ نمبر ایکِس بییس سٕتۍ قریب کیازِ کہِ -- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
-- false
-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
-- true
local function has_close_elements(numbers, threshold)
","local function has_close_elements(numbers, threshold)
    for i = 1, #numbers do
        for j = i + 1, #numbers do
            if math.abs(numbers[i] - numbers[j]) < threshold then
                return true
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = has_close_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_1,kas_Arab,lua,"- ان پٹ سٹرنگس منز چِھ کانٛہہ تہٕ سپیس نظر انداز کران۔- الگ الگ گروپ چِھ متوازن (ہر کُنہٕ کھلہٕ بریکٹ چُھ مناسب طورس پیٹھ بند) تہٕ اکھ اکس اندر چُھ نہٕ گھونسلہٕ ٕ- یم گروپ الگ الگ سٹرنگن منٛز تقسیم کٔرتھ تہٕ تمن ہنٛز میز واپس کران۔- اتھ فنکشنس منز چُھ ان پٹ اکھ سٹرنگ یتھ منز گھیرٕ قوسین ہند متعدد گروپ چِھ۔ توہیہُند مقصد چُھ یہٕ زِ -- >>> separate_paren_groups('( ) (( )) (( )( ))')
-- {'()', '(())', '(()())'}
local function separate_paren_groups(paren_string)
","local function separate_paren_groups(paren_string)
    local result = {}
    local balance = 0
    local current_group = {}

    for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        
        if char == '(' then
            balance = balance + 1
        elseif char == ')' then
            balance = balance - 1
        end

        if char ~= ' ' then
            table.insert(current_group, char)
        end
        
        if balance == 0 and #current_group > 0 then
            table.insert(result, table.concat(current_group))
            current_group = {}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = separate_paren_groups
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_2,kas_Arab,lua,"- تعداد کس اعشاریہ کس حصس واپس کرٕنۍ۔- (باقی حصہٕ چُھ ہمیشہ 1 کھوتہٕ کم آسان) ۔- تہٕ عددی حصہ (بڑین عددن ہند سب سے چھوٹا حصہ) تہٕ اعشاریہ - اکھ مثبت فلوٹنگ پوائنٹ نمبر دنہٕ آمت، یہٕ ہکو ڈیکومپوز کرتھ -- >>> truncate_number(3.5)
-- 0.5
local function truncate_number(number)
","local function truncate_number(number)
    local integer_part = math.floor(number)
    local decimal_part = number - integer_part
    return decimal_part
end","lu = require('luaunit')

function test_humaneval()
local candidate = truncate_number
    lu.assertEquals(candidate(3.5), 0.5)
    lu.assertEquals(candidate(1.25), 0.25)
    lu.assertEquals(candidate(123.0), 0.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_3,kas_Arab,lua,"- اتھ مقامس پیٹھ گژھہ فنکشنس درست واپس ین۔ بصورت دیگر گژھہ یہ غلط واپس ین۔- صفر توازن۔ توہیہُند کٲم چھ یہٕ زِ اگر کانہہ وقتہٕ کھاتہٕ کس توازنس صفر کھوتہٕ کم گژھہٕ پتہٕ لگان، تہٕ اگر یہٕ چُھ تیلہٕ چُھکھ تہٕ تیلہٕ چُھکھ تہٕ۔- توہیہ چھیہ بینک کہِ کھاتہِ پیٹھہ جمع تہِ رقم نیرانچ اکھ ٹیبل یتھ سیتۍ شروع گژھہِ -- >>> below_zero({1, 2, 3})
-- false
-- >>> below_zero({1, 2, -4, 5})
-- true
local function below_zero(operations)
","local function below_zero(operations)
    local balance = 0
    for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_zero
    lu.assertEquals(candidate({}), false)
    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_4,kas_Arab,lua,"- ایم اے ڈی = اوسط ۔ ایکس - ایکس میین ۔- عنصر تہٕ اکھ مرکز (یمہٕ کیس منٛز اوسط) اوسط مطلق انحراف چُھ ہر کُنہِ چیزُک اوسط مطلق فرق۔- مرکزِ - ان پٹ نمبرن ہندِس دِنہٕ آمتس ٹیبلہٕ خٲطرٕہ، ایمِچ اوسط مطلق انحرافُک حساب لگٲوِو -- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
-- 1.0
local function mean_absolute_deviation(numbers)
","local function mean_absolute_deviation(numbers)
    local sum = 0
    local count = #numbers
    
    -- Calculate the mean
    for _, number in ipairs(numbers) do
        sum = sum + number
    end
    local mean = sum / count
    
    -- Calculate the mean absolute deviation
    local total_deviation = 0
    for _, number in ipairs(numbers) do
        total_deviation = total_deviation + math.abs(number - mean)
    end
    
    return total_deviation / count
end

-- Example usage
-- print(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})) -- Output: 1.0","lu = require('luaunit')

function test_humaneval()
local candidate = mean_absolute_deviation
    lu.assertEquals(candidate({1.0, 2.0}), 0.5)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_5,kas_Arab,lua,"- ان پٹ ٹیبلک ہر دوٛن متواتر عناصرن درمیان چُھ اکھ نمبر 'ڈیلی میٹر' شٲمل کرن ∀numbers' -- >>> intersperse({}, 4)
-- {}
-- >>> intersperse({1, 2, 3}, 4)
-- {1, 4, 2, 4, 3}
local function intersperse(numbers, delimeter)
","local function intersperse(numbers, delimeter)
    local result = {}
    for i = 1, #numbers do
        table.insert(result, numbers[i])
        if i < #numbers then
            table.insert(result, delimeter)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersperse
    lu.assertEquals(candidate({}, 7), {})
    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_6,kas_Arab,lua,"- مثلن (() (()) چھ زیادہ سے زیادہ دو سطحن پیٹھ گرٛوٚتھ آسان ییلہٕ زن ((())) ترٛےٚ چھ۔ - گروپ کس پریتھ اکس فردس خٲطرٕ، parentheses کس گہری سطحس پیٹھ اندراج کٔرو۔- اتھ فنکشنس منز چُھ ان پٹ ایکِس سٹرنگس منز یم کثیر گروپس چِھ نیسٹڈ قوسین خٲطرٕہ یوس اسپیسز سٕتۍ چِھ الگ کرنہٕ آمُت۔-- >>> parse_nested_parens('(()()) ((())) () ((())()())')
-- {2, 3, 1, 3}
local function parse_nested_parens(paren_string)
","local function parse_nested_parens(paren_string)
    local results = {}
    for group in paren_string:gmatch(""%S+"") do
        local max_depth = 0
        local current_depth = 0
        for char in group:gmatch(""."") do
            if char == '(' then
                current_depth = current_depth + 1
                if current_depth > max_depth then
                    max_depth = current_depth
                end
            elseif char == ')' then
                current_depth = current_depth - 1
            end
        end
        table.insert(results, max_depth)
    end
    return results
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_nested_parens
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})
    lu.assertEquals(candidate('(()(())((())))'), {4})
end

os.exit(lu.LuaUnit.run())"
HumanEval_7,kas_Arab,lua,"- صرف تمن سٹرنگن ہند ان پٹ ٹیبل فلٹر کرن یم دِنہٕ آمت ذیلی سٹرنگ چِھ تھاوان۔-- >>> filter_by_substring({}, 'a')
-- {}
-- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
-- {'abc', 'bacd', 'array'}
local function filter_by_substring(strings, substring)
","local function filter_by_substring(strings, substring)
    local result = {}
    for _, str in ipairs(strings) do
        if string.find(str, substring) then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_substring
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_8,kas_Arab,lua,"- خالی مجموعہ گژھہِ 0 تہٕ خالی پروڈکٹ گژھہِ 1 کِس برابر آسن۔- انٹیجرزن ہندِس اکس ٹیبلس خٲطرٕہ، ٹیبلس منز تمام انٹیجرن ہندِس مجموعس تہٕ پروڈکٹس پیٹھ مشتمل ٹیبل واپس کرٕو۔-- >>> sum_product({})
-- {0, 1}
-- >>> sum_product({1, 2, 3, 4})
-- {10, 24}
local function sum_product(numbers)
","local function sum_product(numbers)
    local sum = 0
    local product = 1

    for _, number in ipairs(numbers) do
        sum = sum + number
        product = product * number
    end

    return {sum, product}
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_product
    lu.assertEquals(candidate({}), {0, 1})
    lu.assertEquals(candidate({1, 1, 1}), {3, 1})
    lu.assertEquals(candidate({100, 0}), {100, 0})
    lu.assertEquals(candidate({3, 5, 7}), {15, 105})
    lu.assertEquals(candidate({10}), {10, 10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_9,kas_Arab,lua,"- ترتیب وار۔ - انٹیجرز ہند دیژ مِٹبَل پیٹھہٕ، دیتُن لمحس تام وٕچھنہٕ آمت زیادہ سے زیادہ عنصرُک ٹیبل پٔدٕ کٔرِو -- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})
-- {1, 2, 3, 3, 3, 4, 4}
local function rolling_max(numbers)
","local function rolling_max(numbers)
    local result = {}
    local max_so_far = numbers[1]
    
    for i = 1, #numbers do
        if numbers[i] > max_so_far then
            max_so_far = numbers[i]
        end
        table.insert(result, max_so_far)
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = rolling_max
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})
    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})
end

os.exit(lu.LuaUnit.run())"
HumanEval_10,kas_Arab,lua,"- - سٹرنگ کس اختتامس پیٹھ سٹرنگ کس ریورسس پیٹھ سٹرنگ پریفیکس جوڑو یس پالنڈرومک sufix برونٹھ چُھ یوان۔ - - فراہم کردہ تارک طویل ترین پوسٹ فکس تلاش کریں جو ایک پالینڈروم ہے۔ - الگورتھم خیال چُھ آسان: - ساروی کھوتہٕ کم پالینڈوم تلاش کرُن یُس سپلائی گژھن واجنہِ تارہٕ سٕتۍ شروع چُھ گژھان۔-- >>> make_palindrome('')
-- ''
-- >>> make_palindrome('cat')
-- 'catac'
-- >>> make_palindrome('cata')
-- 'catac'
local function make_palindrome(string)
","local function make_palindrome(s)
    -- Function to check if a given string is a palindrome
    local function is_palindrome(str)
        local len = #str
        for i = 1, len // 2 do
            if str:sub(i, i) ~= str:sub(len - i + 1, len - i + 1) then
                return false
            end
        end
        return true
    end

    local len = #s
    -- Find the longest postfix of the string that is a palindrome
    for i = len, 1, -1 do
        if is_palindrome(s:sub(i)) then
            local prefix = s:sub(1, i - 1)
            -- Reverse the prefix and append to the original string
            return s .. prefix:reverse()
        end
    end

    -- If the string is empty or no palindrome is found (shouldn't happen as 
    -- an empty or single character string is a palindrome), return the string itself
    return s
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_palindrome
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('x'), 'x')
    lu.assertEquals(candidate('xyz'), 'xyzyx')
    lu.assertEquals(candidate('xyx'), 'xyx')
    lu.assertEquals(candidate('jerry'), 'jerryrrej')
end

os.exit(lu.LuaUnit.run())"
HumanEval_11,kas_Arab,lua,"- یمن ان پٹسن پیٹھ بائنری XOR کٔرِو تہٕ نتیجہٕ ییہٕ سٹرنگ کہٕ طور پأنٹھ واپس کرنہٕ۔- ان پٹ چِھ زٕ سٹرنگ a تہٕ b یِم صرف 1 تہٕ 0 چِھ آسان۔-- >>> string_xor('010', '110')
-- '100'
local function string_xor(a, b)
","local function string_xor(a, b)
    local result = {}
    for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
            table.insert(result, '0')
        else
            table.insert(result, '1')
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_xor
    lu.assertEquals(candidate('111000', '101010'), '010010')
    lu.assertEquals(candidate('1', '1'), '0')
    lu.assertEquals(candidate('0101', '0000'), '0101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_12,kas_Arab,lua,"- ہیچھن ہنز ڈایریکشن۔ ان پٹ ٹیبل چُھ خٲلی آسنہٕ کہِ صورتس منز چُھ null واپس کران۔سٹرنگس ہند ٹیبلہٕ نِش، ساروی کھوتہٕ زیوٹھ واپس ییہٕ کرنہٕ۔ متعدد ہندسن ہندِس صورتس منز چُھ گوڈنُک واپس ییہٕ کرنہٕ۔-- >>> longest({})
-- None
-- >>> longest({'a', 'b', 'c'})
-- 'a'
-- >>> longest({'a', 'bb', 'ccc'})
-- 'ccc'
local function longest(strings)
","local function longest(strings)
    if #strings == 0 then
        return nil
    end

    local max_len = 0
    local longest_str = nil

    for _, str in ipairs(strings) do
        if #str > max_len then
            max_len = #str
            longest_str = str
        end
    end

    return longest_str
end","lu = require('luaunit')

function test_humaneval()
local candidate = longest
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')
    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')
end

os.exit(lu.LuaUnit.run())"
HumanEval_13,kas_Arab,lua,"- زٕ عدد a تہٕ b یچ ساروی کھوتہٕ بڑ مشترکہ تقسیم کار دینہٕ -- >>> greatest_common_divisor(3, 5)
-- 1
-- >>> greatest_common_divisor(25, 15)
-- 5
local function greatest_common_divisor(a, b)
","local function greatest_common_divisor(a, b)
    while b ~= 0 do
        local temp = b
        b = a % b
        a = temp
    end
    return a
end","lu = require('luaunit')

function test_humaneval()
local candidate = greatest_common_divisor
    lu.assertEquals(candidate(3, 7), 1)
    lu.assertEquals(candidate(10, 15), 5)
    lu.assertEquals(candidate(49, 14), 7)
    lu.assertEquals(candidate(144, 60), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_14,kas_Arab,lua,"- ان پٹ سٹرنگ ہند ساروی کھوتہٕ مختصر پیٹھہٕ زیوٹھس تام تمام پریفیکسچ ریٹرن ٹیبل -- >>> all_prefixes('abc')
-- {'a', 'ab', 'abc'}
local function all_prefixes(string)
","local function all_prefixes(string)
    local prefixes = {}
    for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
    end
    return prefixes
end","lu = require('luaunit')

function test_humaneval()
local candidate = all_prefixes
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_15,kas_Arab,lua,"- 0 پیٹھہٕ n تام جاۓ سٕتۍ محدود نمبرن ہنز سٹرنگ واپس کرنہٕ۔-- >>> string_sequence(0)
-- '0'
-- >>> string_sequence(5)
-- '0 1 2 3 4 5'
local function string_sequence(n)
","local function string_sequence(n)
    local result = {}
    for i = 0, n do
        table.insert(result, tostring(i))
    end
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_sequence
    lu.assertEquals(candidate(0), '0')
    lu.assertEquals(candidate(3), '0 1 2 3')
    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')
end

os.exit(lu.LuaUnit.run())"
HumanEval_16,kas_Arab,lua,"- اکھ سٹرنگ دیتھ، ژھۅپہِ کیہہ الگ الگ کرکٹر (بغٲر کیسس) چُھ اتھ منز مشتمل۔-- >>> count_distinct_characters('xyzXYZ')
-- 3
-- >>> count_distinct_characters('Jerry')
-- 4
local function count_distinct_characters(string)
","local function count_distinct_characters(string)
    local char_set = {}
    local lower_string = string:lower()
    for i = 1, #lower_string do
        local char = lower_string:sub(i, i)
        char_set[char] = true
    end
    local count = 0
    for _ in pairs(char_set) do
        count = count + 1
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_distinct_characters
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abcde'), 5)
    lu.assertEquals(candidate('abcdecadeCADE'), 5)
    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)
    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)
end

os.exit(lu.LuaUnit.run())"
HumanEval_17,kas_Arab,lua,"- '.ڈاکس' - کوارٹر نوٹ، چُھ ایکہِ بیٹ کھوتہٕ زیادٕہ آسان۔- 'o "" s daker - نصف نوٹ، دو ٹائم رہتا ہے - 'o' - پورٕ نوٹ، ژور بیٹ۔- اَکھ داستان: - نہٕ لَگہٕ بٲتھ- تہند کٲم چھ یہ زِ اتھ سٹرنگس پارس کٔرو تہٕ انٹیجرزن ہٕنٛز ٹیبل واپس یُس پرتھ اکس کیٚنٛہہ بیٚٹ چھ کران- اتھ فنکشنس منز چُھ ان پٹ اکھ سٹرنگ یوس اکھ خاص ASCII فارمیٹس منز میوزک نوٹس چُھ ظٲہر کران۔-- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
local function parse_music(music_string)
","local function parse_music(music_string)
    local beats = {}
    for note in music_string:gmatch(""%S+"") do
        if note == 'o' then
            table.insert(beats, 4)
        elseif note == 'o|' then
            table.insert(beats, 2)
        elseif note == '.|' then
            table.insert(beats, 1)
        end
    end
    return beats
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_music
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_18,kas_Arab,lua,"- ژھۅپہِ کِتین لٹہِ ہیکہِ اکھ ذیلی تار اصل تارس منز ملِتھ۔ اوپریپنگ کیسز گنڈِو۔-- >>> how_many_times('', 'a')
-- 0
-- >>> how_many_times('aaa', 'a')
-- 3
-- >>> how_many_times('aaaa', 'aa')
-- 3
local function how_many_times(string, substring)
","local function how_many_times(string, substring)
    if substring == '' then return 0 end
    local count = 0
    local start = 1

    while true do
        local found = string:find(substring, start, true)
        if not found then
            break
        end
        count = count + 1
        start = found + 1
    end

    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = how_many_times
    lu.assertEquals(candidate('', 'x'), 0)
    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
    lu.assertEquals(candidate('cacacacac', 'cac'), 4)
    lu.assertEquals(candidate('john doe', 'john'), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_19,kas_Arab,lua,"- نمبر چُھ سٹرنگس سٕتۍ لٲگِتھ لۄکُٹہٕ پیٹھہٕ بٕڑِس تام ترتیب دِنہٕ یوان۔- درست انتخاب چِھ 'صفر'، 'ایک'، 'دو'، 'تین'، 'چار'، 'پانچ'، 'چھ'، 'سات'، 'آٹھ' تہٕ 'نِیہٕ'۔ان پٹ چُھ صفرٕ پیٹھہٕ نوٕ تام عددن ہند اکھ جاۓ ہند محدود تار۔-- >>> sort_numbers('three one five')
-- 'one three five'
local function sort_numbers(numbers)
","local function sort_numbers(numbers)
    local number_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
    }

    local number_names = {
        [0] = 'zero',
        [1] = 'one',
        [2] = 'two',
        [3] = 'three',
        [4] = 'four',
        [5] = 'five',
        [6] = 'six',
        [7] = 'seven',
        [8] = 'eight',
        [9] = 'nine'
    }

    local words = {}
    for word in numbers:gmatch(""%S+"") do
        table.insert(words, word)
    end

    table.sort(words, function(a, b)
        return number_map[a] < number_map[b]
    end)

    local sorted_numbers = {}
    for _, word in ipairs(words) do
        table.insert(sorted_numbers, number_names[number_map[word]])
    end

    return table.concat(sorted_numbers, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_numbers
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('three'), 'three')
    lu.assertEquals(candidate('three five nine'), 'three five nine')
    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
end

os.exit(lu.LuaUnit.run())"
HumanEval_20,kas_Arab,lua,"- باقی تہٕ کرِکھ ترتیب (کم تعداد، زیادٕ تعداد) سۭتۍ واپس۔- نمبرن ہندس فراہم کردہ ٹیبلہٕ پیٹھ (مختصر طور پانٹھ زٕ) ہر اکس سۭتۍ قریب ترین زٕ منتخب کٔرِتھ واپس ییہٕ دنہٕ۔-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})
-- {2.0, 2.2}
-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})
-- {2.0, 2.0}
local function find_closest_elements(numbers)
","local function find_closest_elements(numbers)
    table.sort(numbers)
    local min_diff = math.huge
    local result = {}

    for i = 1, #numbers - 1 do
        local diff = numbers[i + 1] - numbers[i]
        if diff < min_diff then
            min_diff = diff
            result = {numbers[i], numbers[i + 1]}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_closest_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_21,kas_Arab,lua,"- یتھے پاٹھۍ زِ ساروی کھوتہٕ لوکٹ نمبر چُھ 0 تہٕ ساروی کھوتہٕ بوڑ 1 بنان۔- نمبرن ہند اکھ ٹیبل (کم از کم زٕ عناصرن ہند) ، اتھ ٹیبلس پیٹھ اکھ لکیری ٹرانسفارمیشن لاگو کرُن،-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
-- {0.0, 0.25, 0.5, 0.75, 1.0}
local function rescale_to_unit(numbers)
","local function rescale_to_unit(numbers)
    local min_val = math.huge
    local max_val = -math.huge

    -- Find the min and max values in the table
    for _, num in ipairs(numbers) do
        if num < min_val then
            min_val = num
        end
        if num > max_val then
            max_val = num
        end
    end

    local scale = max_val - min_val

    -- Apply the transformation
    local transformed = {}
    for i, num in ipairs(numbers) do
        transformed[i] = (num - min_val) / scale
    end

    return transformed
end","lu = require('luaunit')

function test_humaneval()
local candidate = rescale_to_unit
    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
end

os.exit(lu.LuaUnit.run())"
HumanEval_22,kas_Arab,lua,"- صرف انٹیجرز خٲطرٕ کُنہٕ تہٕ ویلیو کِس ٹیبلس منز دِنہٕ آمٕتۍ فیلٹرزن -- >>> filter_integers({'a', 3.14, 5})
-- {5}
-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
-- {1, 2, 3}
local function filter_integers(values)
","local function filter_integers(values)
    local result = {}
    for _, value in ipairs(values) do
        if type(value) == ""number"" and math.type(value) == ""integer"" then
            table.insert(result, value)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_integers
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_23,kas_Arab,lua,"- دِنہٕ آمُت سٹرنگچ واپسی -- >>> strlen('')
-- 0
-- >>> strlen('abc')
-- 3
local function strlen(string)
","local function strlen(string)
    return #string
end","lu = require('luaunit')

function test_humaneval()
local candidate = strlen
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('x'), 1)
    lu.assertEquals(candidate('asdasnakj'), 9)
end

os.exit(lu.LuaUnit.run())"
HumanEval_24,kas_Arab,lua,"- دِنہٕ آمتِس نمبرس n خاطرٕ، ساروی کھوتہٕ بوڑ نمبر تلاش کرُن یُس n یکساں طور پانٹھ تقسیم چُھ کران، n کھوتہٕ لوکٹ چُھ۔-- >>> largest_divisor(15)
-- 5
local function largest_divisor(n)
","local function largest_divisor(n)
    for i = n - 1, 1, -1 do
        if n % i == 0 then
            return i
        end
    end
    return nil -- In case no divisor is found, though this will not happen for n > 1
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_divisor
    lu.assertEquals(candidate(3), 1)
    lu.assertEquals(candidate(7), 1)
    lu.assertEquals(candidate(10), 5)
    lu.assertEquals(candidate(100), 50)
    lu.assertEquals(candidate(49), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_25,kas_Arab,lua,"- ان پٹ نمبر گژھہِ تمام فیکٹرزن ہند پروڈکٹُک برابر آسن۔- فیکٹرزن منز گژھہِ پرتھ اکس فاکٹرزس ہندس تعدادس ٹیبل لگٲوِتھ یُس فیکٹرزس منز ظٲہر گژھنہٕ چُھ یژھہٕ پٲٹھۍ۔- دیتُن عددٕچ پرائم فاکٹرن ہند ریٹرن ٹیبل چھو سٕتۍ بڑِس ترتیبس منز۔-- >>> factorize(8)
-- {2, 2, 2}
-- >>> factorize(25)
-- {5, 5}
-- >>> factorize(70)
-- {2, 5, 7}
local function factorize(n)
","local function factorize(n)
    local factors = {}
    local divisor = 2
    while n > 1 do
        while n % divisor == 0 do
            table.insert(factors, divisor)
            n = n / divisor
        end
        divisor = divisor + 1
    end
    return factors
end","lu = require('luaunit')

function test_humaneval()
local candidate = factorize
    lu.assertEquals(candidate(2), {2})
    lu.assertEquals(candidate(4), {2, 2})
    lu.assertEquals(candidate(8), {2, 2, 2})
    lu.assertEquals(candidate(57), {3, 19})
    lu.assertEquals(candidate(3249), {3, 3, 19, 19})
    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})
    lu.assertEquals(candidate(20577), {3, 19, 19, 19})
    lu.assertEquals(candidate(18), {2, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_26,kas_Arab,lua,"- عناصرن ہنز ترتیب چُھ اتھٲی پٲٹھۍ تھاونہٕ آمٕژ یتھ کٔنۍ زِ ان پٹس منز چُھ- انٹیجرز ہندس ٹیبلہٕ پیٹھ، تمام عناصر یوس ایکہِ کھوتہٕ زیادٕہ لٹہِ گژھہِ گژھہِ ہٹٲوِتھ۔-- >>> remove_duplicates({1, 2, 3, 2, 4})
-- {1, 3, 4}
local function remove_duplicates(numbers)
","local function remove_duplicates(numbers)
    local counts = {}
    -- Count occurrences of each element
    for _, num in ipairs(numbers) do
        counts[num] = (counts[num] or 0) + 1
    end
    -- Collect elements that occur exactly once
    local result = {}
    for _, num in ipairs(numbers) do
        if counts[num] == 1 then
            table.insert(result, num)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_duplicates
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})
end

os.exit(lu.LuaUnit.run())"
HumanEval_27,kas_Arab,lua,"- اکس ڈریگن خٲطرٕ، لوکسر کیریکرن اپر لیس تہٕ اپر لیس لوکسرس منٛز تبدیل کرُن۔-- >>> flip_case('Hello')
-- 'hELLO'
local function flip_case(string)
","local function flip_case(str)
    return (str:gsub(""%a"", function(c)
        if c:lower() == c then
            return c:upper()
        else
            return c:lower()
        end
    end))
end","lu = require('luaunit')

function test_humaneval()
local candidate = flip_case
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hello!'), 'hELLO!')
    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
end

os.exit(lu.LuaUnit.run())"
HumanEval_28,kas_Arab,lua,"- سٹرنگزک میز چُھ اکس سٹرنگس منٛز جوڑنہٕ یوان۔-- >>> concatenate({})
-- ''
-- >>> concatenate({'a', 'b', 'c'})
-- 'abc'
local function concatenate(strings)
","local function concatenate(strings)
    return table.concat(strings, """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = concatenate
    lu.assertEquals(candidate({}), '')
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')
    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')
end

os.exit(lu.LuaUnit.run())"
HumanEval_29,kas_Arab,lua,"- صرف تمن سٹرنگن ہند ان پٹ ٹیبل فلٹر کرو یم ایکِس دیت مٕژ پیش لفظس سٕتۍ شروع چِھ گژھان۔-- >>> filter_by_prefix({}, 'a')
-- {}
-- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
-- {'abc', 'array'}
local function filter_by_prefix(strings, prefix)
","local function filter_by_prefix(strings, prefix)
    local result = {}
    for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_prefix
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_30,kas_Arab,lua,"- میزس منز صرف مثبت نمبر واپس کران۔-- >>> get_positive({-1, 2, -4, 5, 6})
-- {2, 5, 6}
-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- {5, 3, 2, 3, 9, 123, 1}
local function get_positive(l)
","local function get_positive(l)
    local positives = {}
    for _, v in ipairs(l) do
        if v > 0 then
            table.insert(positives, v)
        end
    end
    return positives
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_positive
    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
    lu.assertEquals(candidate({-1, -2}), {})
    lu.assertEquals(candidate({}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_31,kas_Arab,lua,"اگر اکھ دِنہٕ آمت نمبر پرائم چُھ تیلہٕ چُھ صحیح واپس گژھان، تہٕ بییہٕ غلط۔-- >>> is_prime(6)
-- false
-- >>> is_prime(101)
-- true
-- >>> is_prime(11)
-- true
-- >>> is_prime(13441)
-- true
-- >>> is_prime(61)
-- true
-- >>> is_prime(4)
-- false
-- >>> is_prime(1)
-- false
local function is_prime(n)
","local function is_prime(n)
    if n <= 1 then
        return false
    end
    if n <= 3 then
        return true
    end
    if n % 2 == 0 or n % 3 == 0 then
        return false
    end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_prime
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(101), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(13441), true)
    lu.assertEquals(candidate(61), true)
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(1), false)
    lu.assertEquals(candidate(5), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(17), true)
    lu.assertEquals(candidate(85), false)
    lu.assertEquals(candidate(77), false)
    lu.assertEquals(candidate(255379), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_33,kas_Arab,lua,"- 1 کہِ متعلقہٕ انڈیکس کہِ قدرن سٕتۍ، مگر ترتیب شدہ۔- l' چُھ یمن انڈیکسن منٛز l سٕتۍ مماثل یُس ترین سۭتۍ نہٕ تقسیم گژھان چُھ، ییلہِ زَن کہِ یمن انڈیکسن ہنز قدرہٕ ییم ترین سۭتۍ تقسیم گژھان چِھ برابر آسان چِھ۔یہٕ فنکشن چُھ ٹیبل L نُک اکھ لوٛب تھاوان تہٕ اکھ ٹیبل L چُھ واپس کران۔ یتھ کیٛن زِ -- >>> sort_third({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})
-- {2, 6, 3, 4, 8, 9, 5}
local function sort_third(l)
","local function sort_third(l)
    local divisible_by_three = {}
    
    -- Collect elements at indices divisible by three
    for i = 3, #l, 3 do
        table.insert(divisible_by_three, l[i])
    end

    -- Sort collected elements
    table.sort(divisible_by_three)
    
    -- Create a copy of the original table
    local l_prime = {}
    for i = 1, #l do
        l_prime[i] = l[i]
    end

    -- Replace elements at indices divisible by three with sorted elements
    local sorted_index = 1
    for i = 3, #l, 3 do
        l_prime[i] = divisible_by_three[sorted_index]
        sorted_index = sorted_index + 1
    end

    return l_prime
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_third
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})
    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})
    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_34,kas_Arab,lua,"- اکہِ ٹیبلہِ منز چُھ ترتیب شدہ منفرد عناصر واپس کران۔-- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {0, 2, 3, 5, 9, 123}
local function unique(l)
","local function unique(l)
    local seen = {}
    local result = {}
    
    for _, value in ipairs(l) do
        if not seen[value] then
            table.insert(result, value)
            seen[value] = true
        end
    end
    
    table.sort(result)
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique
    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})
end

os.exit(lu.LuaUnit.run())"
HumanEval_35,kas_Arab,lua,"- میزس منز چُھ زیادہ سے زیادہ عنصر واپس کران۔-- >>> max_element({1, 2, 3})
-- 3
-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- 123
local function max_element(l)
","local function max_element(l)
    local max = l[1]
    for i = 2, #l do
        if l[i] > max then
            max = l[i]
        end
    end
    return max
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_element
    lu.assertEquals(candidate({1, 2, 3}), 3)
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
end

os.exit(lu.LuaUnit.run())"
HumanEval_36,kas_Arab,lua,"- ہندسہٕ 7 ہندسہٕ چُھ کم نمبرن منز ظٲہر گژھنہٕ ہند تعداد واپس کران یوس n کھوتہٕ کم چُھ یوس 11 یا 13 سٕتۍ تقسیم چُھ گژھان۔-- >>> fizz_buzz(50)
-- 0
-- >>> fizz_buzz(78)
-- 2
-- >>> fizz_buzz(79)
-- 3
local function fizz_buzz(n)
","local function fizz_buzz(n)
    local count = 0
    for i = 1, n - 1 do
        if i % 11 == 0 or i % 13 == 0 then
            local str_i = tostring(i)
            if str_i:find(""7"") then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = fizz_buzz
    lu.assertEquals(candidate(50), 0)
    lu.assertEquals(candidate(78), 2)
    lu.assertEquals(candidate(79), 3)
    lu.assertEquals(candidate(100), 3)
    lu.assertEquals(candidate(200), 6)
    lu.assertEquals(candidate(4000), 192)
    lu.assertEquals(candidate(10000), 639)
    lu.assertEquals(candidate(100000), 8026)
end

os.exit(lu.LuaUnit.run())"
HumanEval_37,kas_Arab,lua,"- l ہندسہٕ ہندسہٕ ہند ہندسہٕ ہند قدرن تام، مگر ترتیب شدہ۔- l' چُھ عجیب انڈیکسس منز l سٕتۍ مماثل آسان، ییلہِ زَن کہِ یمَن ہند ویلیو چُھ یکساں even انڈیکسس منز آسان۔یہٕ فنکشن چُھ ٹیبل L نُک اکھ لوٛب تھاوان تہٕ اکھ ٹیبل L چُھ واپس کران۔ یتھ کیٛن زِ -- >>> sort_even({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_even({5, 6, 3, 4})
-- {3, 6, 5, 4}
local function sort_even(l)
","local function sort_even(l)
    -- Extract the even indexed elements
    local even_elements = {}
    for i = 2, #l, 2 do
        table.insert(even_elements, l[i])
    end

    -- Sort the extracted even elements
    table.sort(even_elements)

    -- Create a new table for the result and fill it with the appropriate elements
    local result = {}
    local even_index = 1
    for i = 1, #l do
        if i % 2 == 0 then
            result[i] = even_elements[even_index]
            even_index = even_index + 1
        else
            result[i] = l[i]
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_even
    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})
    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_39,kas_Arab,lua,"- prime_fib چُھ نٔمِس نمبرس دِوان یوس فبونیکی نمبر چُھ تہٕ چُھ پرائم۔ -- >>> prime_fib(1)
-- 2
-- >>> prime_fib(2)
-- 3
-- >>> prime_fib(3)
-- 5
-- >>> prime_fib(4)
-- 13
-- >>> prime_fib(5)
-- 89
local function prime_fib(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function fibonacci()
    local a, b = 0, 1
    return function()
        local temp = a
        a, b = b, a + b
        return temp
    end
end

local function prime_fib(n)
    local count = 0
    local fib_gen = fibonacci()
    while true do
        local fib_num = fib_gen()
        if is_prime(fib_num) then
            count = count + 1
            if count == n then
                return fib_num
            end
        end
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_fib
    lu.assertEquals(candidate(1), 2)
    lu.assertEquals(candidate(2), 3)
    lu.assertEquals(candidate(3), 5)
    lu.assertEquals(candidate(4), 13)
    lu.assertEquals(candidate(5), 89)
    lu.assertEquals(candidate(6), 233)
    lu.assertEquals(candidate(7), 1597)
    lu.assertEquals(candidate(8), 28657)
    lu.assertEquals(candidate(9), 514229)
    lu.assertEquals(candidate(10), 433494437)
end

os.exit(lu.LuaUnit.run())"
HumanEval_40,kas_Arab,lua,"- صفرٕ تام جمع، تہٕ بییہٕ غلط۔ - اگر ٹیبلس منز چِھ ترے الگ الگ عناصر یم - triple_sum_to_zero چُھ ان پٹ کِس طورس پیٹھ انٹیجرزن ہنز ٹیبل نوان۔-- >>> triples_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> triples_sum_to_zero({1, 3, -2, 1})
-- true
-- >>> triples_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
-- true
-- >>> triples_sum_to_zero({1})
-- false
local function triples_sum_to_zero(l)
","local function triples_sum_to_zero(l)
    table.sort(l)
    for i = 1, #l - 2 do
        local a = l[i]
        local left = i + 1
        local right = #l
        while left < right do
            local b = l[left]
            local c = l[right]
            local sum = a + b + c
            if sum == 0 then
                return true
            elseif sum < 0 then
                left = left + 1
            else
                right = right - 1
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = triples_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, 5, -1}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), true)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({1, 2, 5, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({1, 3, 5, -100}), false)
    lu.assertEquals(candidate({100, 3, 5, -100}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_41,kas_Arab,lua,"- یہٕ فنکشن چُھ امہٕ قسمک ٹکرن ہنٛد تعداد پیدٕ کران۔ - تہندِس سفرس منز یوتتھ زِ تمن اوس نہٕ ٹکراونٕچ ضرورت۔تاہم، کارن چِھ لامحدود طورس پیٹھ مضبوط تہٕ مضبوط؛ نتیجتا چِھ تم جأری جاری تھوان۔- ییلہِ اکھ کار یوس ژٕ چُھ وٲنکہٕ پیٹھہٕ دٲنکہٕ نِش گژھان چُھ اکھ کارس ٹکران یوس ژٕ چُھ وٲنکہٕ پیٹھہٕ دٲنکہٕ نِش گژھان۔سٲری گاڑہٕ چِھ ہِوی رفتارٕ سۭتۍ حرکت کران۔ زٕ گاڑہٕ چِھ ٹکراوان۔- چِھ دٔچھنہٕ پیٹھہٕ خووُر کٔرِتھ گٲمٕت۔ کارن ہنز دۄن سیٹہٕ گٲی واریاہ دور۔- n کارن چِھ وٲنٕچ دٲہس کُن گژھان۔ بیک وقت، n کارن ہند اکھ مختلف سیٹ۔- اکھ سڑک تصور کرو یس زن کامل پانٹھ سیدھی لامحدود زیچھر چِھ۔ local function car_race_collision(n)
","local function car_race_collision(n)
    -- Since each car from the left to right collides with each car from the right to left,
    -- the number of collisions will be n*n.
    return n * n
end","lu = require('luaunit')

function test_humaneval()
local candidate = car_race_collision
    lu.assertEquals(candidate(2), 4)
    lu.assertEquals(candidate(3), 9)
    lu.assertEquals(candidate(4), 16)
    lu.assertEquals(candidate(8), 64)
    lu.assertEquals(candidate(10), 100)
end

os.exit(lu.LuaUnit.run())"
HumanEval_42,kas_Arab,lua,"- ریٹرن ٹیبل چِھ 1 سۭتۍ بڑھنہٕ آمت عناصرن سۭتۍ۔-- >>> incr_list({1, 2, 3})
-- {2, 3, 4}
-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {6, 4, 6, 3, 4, 4, 10, 1, 124}
local function incr_list(l)
","local function incr_list(l)
    local result = {}
    for i = 1, #l do
        result[i] = l[i] + 1
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = incr_list
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
end

os.exit(lu.LuaUnit.run())"
HumanEval_43,kas_Arab,lua,"- صفرٕ تام جمع، تہٕ بییہٕ غلط۔ - اگر ٹیبلس منز چِھ زٕ الگ الگ عناصر یوس - pairs_sum_to_zero چُھ ان پٹ کِس طورس پیٹھ انٹیجرزن ہنز ٹیبل نوان۔-- >>> pairs_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> pairs_sum_to_zero({1, 3, -2, 1})
-- false
-- >>> pairs_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
-- true
-- >>> pairs_sum_to_zero({1})
-- false
local function pairs_sum_to_zero(l)
","local function pairs_sum_to_zero(l)
    local seen = {}
    for _, value in ipairs(l) do
        if seen[-value] then
            return true
        end
        seen[value] = true
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = pairs_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), false)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_44,kas_Arab,lua,"- بیس نمبر چِھ 10 کھوتہٕ کم۔ - تبدیلہٕ پتہٕ چُھ سٹرنگ ریپریسنٹشن۔ - ان پٹ نمبر x کہِ عددی بیس چُھ بیس سٕتۍ تبدیل کرُن۔-- >>> change_base(8, 3)
-- '22'
-- >>> change_base(8, 2)
-- '1000'
-- >>> change_base(7, 2)
-- '111'
local function change_base(x, base)
","local function change_base(x, base)
    if base < 2 or base > 9 then
        error(""Base must be between 2 and 9"")
    end

    if x == 0 then
        return ""0""
    end

    local result = """"
    while x > 0 do
        local remainder = x % base
        result = tostring(remainder) .. result
        x = math.floor(x / base)
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = change_base
    lu.assertEquals(candidate(8, 3), '22')
    lu.assertEquals(candidate(9, 3), '100')
    lu.assertEquals(candidate(234, 2), '11101010')
    lu.assertEquals(candidate(16, 2), '10000')
    lu.assertEquals(candidate(8, 2), '1000')
    lu.assertEquals(candidate(7, 2), '111')
    lu.assertEquals(candidate(2, 3), '2')
    lu.assertEquals(candidate(3, 4), '3')
    lu.assertEquals(candidate(4, 5), '4')
    lu.assertEquals(candidate(5, 6), '5')
    lu.assertEquals(candidate(6, 7), '6')
    lu.assertEquals(candidate(7, 8), '7')
end

os.exit(lu.LuaUnit.run())"
HumanEval_45,kas_Arab,lua,"- مثلثس خٲطرٕہ چُھ ایکہِ طرفہِ ہنز لمبائی تہٕ زیادٕہ واپسی ہند علاقہٕ۔-- >>> triangle_area(5, 3)
-- 7.5
local function triangle_area(a, h)
","local function triangle_area(a, h)
    return 0.5 * a * h
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(5, 3), 7.5)
    lu.assertEquals(candidate(2, 2), 2.0)
    lu.assertEquals(candidate(10, 8), 40.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_46,kas_Arab,lua,"- براہِ کرم fib4 نمبر سیکوینس کہِ n-th عنصرُک موثر طریقہٕ کار کِس طورس پیٹھ حساب لگاونہٕ خٲطرٕہ اکھ فنکشن لیوکھ۔ ریکوریشنُک استعمال کٔرِو نہٕ۔- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). - فیب4{ 3} -> 0 - فیب4{\ 2} -> 2 ٕ- فیب4{\ 1} -> 0 ٕ- فیب4{0} -> 0 ٕ- Fib4 نمبر سیکوینس چُھ فبونیکی سیکوینس ہیوۍ اکھ سیکوینس یوس مندرجہ ذیل چُھ:-- >>> fib4(5)
-- 4
-- >>> fib4(6)
-- 8
-- >>> fib4(7)
-- 14
local function fib4(n)
","local function fib4(n)
    if n == 0 then return 0 end
    if n == 1 then return 0 end
    if n == 2 then return 2 end
    if n == 3 then return 0 end

    local a, b, c, d = 0, 0, 2, 0

    for i = 4, n do
        local temp = a + b + c + d
        a, b, c, d = b, c, d, temp
    end

    return d
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib4
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 28)
    lu.assertEquals(candidate(10), 104)
    lu.assertEquals(candidate(12), 386)
end

os.exit(lu.LuaUnit.run())"
HumanEval_47,kas_Arab,lua,"جدول کِس عناصرن ہنز میڈین واپس۔-- >>> median({3, 1, 2, 4, 5})
-- 3
-- >>> median({-10, 4, 6, 1000, 10, 20})
-- 15.0
local function median(l)
","local function median(l)
    table.sort(l)
    local n = #l
    if n % 2 == 1 then
        return l[(n + 1) / 2]
    else
        local mid1 = n / 2
        local mid2 = mid1 + 1
        return (l[mid1] + l[mid2]) / 2
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = median
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)
    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)
    lu.assertEquals(candidate({5}), 5)
    lu.assertEquals(candidate({6, 5}), 5.5)
    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_48,kas_Arab,lua,"- چیک کران اگر دِنہٕ آمُت سٹرنگ چھُ اکھ پالینڈروم۔-- >>> is_palindrome('')
-- true
-- >>> is_palindrome('aba')
-- true
-- >>> is_palindrome('aaaaa')
-- true
-- >>> is_palindrome('zbcd')
-- false
local function is_palindrome(text)
","local function is_palindrome(text)
    return text == string.reverse(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_palindrome
    lu.assertEquals(candidate(''), true)
    lu.assertEquals(candidate('aba'), true)
    lu.assertEquals(candidate('aaaaa'), true)
    lu.assertEquals(candidate('zbcd'), false)
    lu.assertEquals(candidate('xywyx'), true)
    lu.assertEquals(candidate('xywyz'), false)
    lu.assertEquals(candidate('xywzx'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_49,kas_Arab,lua,"- 2^n ماڈیولو p واپس کرُن (تٔمی چِھ اعدادن ہنزِ آگاہی) ۔-- >>> modp(3, 5)
-- 3
-- >>> modp(1101, 101)
-- 2
-- >>> modp(0, 101)
-- 1
-- >>> modp(3, 11)
-- 8
-- >>> modp(100, 101)
-- 1
local function modp(n, p)
","local function modp(n, p)
    return (2^n) % p
end","lu = require('luaunit')

function test_humaneval()
local candidate = modp
    lu.assertEquals(candidate(3, 5), 3)
    lu.assertEquals(candidate(1101, 101), 2)
    lu.assertEquals(candidate(0, 101), 1)
    lu.assertEquals(candidate(3, 11), 8)
    lu.assertEquals(candidate(100, 101), 1)
    lu.assertEquals(candidate(30, 5), 4)
    lu.assertEquals(candidate(31, 5), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_51,kas_Arab,lua,"- remove_vowels چُھ اکھ فنکشن یُس سٹرنگ چُھ نوان تہٕ وونکلن ہندس بغأر سٹرنگ چُھ واپس کران۔-- >>> remove_vowels('')
-- ''
-- >>> remove_vowels('abcdef')
-- 'bcdf'
-- >>> remove_vowels('aaaaa')
-- ''
-- >>> remove_vowels('aaBAA')
-- 'B'
-- >>> remove_vowels('zbcd')
-- 'zbcd'
local function remove_vowels(text)
","local function remove_vowels(text)
    return text:gsub(""[aeiouAEIOU]"", """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_vowels
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
    lu.assertEquals(candidate('fedcba'), 'fdcb')
    lu.assertEquals(candidate('eeeee'), '')
    lu.assertEquals(candidate('acBAA'), 'cB')
    lu.assertEquals(candidate('EcBOO'), 'cB')
    lu.assertEquals(candidate('ybcd'), 'ybcd')
end

os.exit(lu.LuaUnit.run())"
HumanEval_52,kas_Arab,lua,"- اگر جدول lہٕ منٛز تمام نمبر آسن تھریولگ t کھوتہٕ کم تہٕ تیلہٕ چُھ یہٕ درست۔-- >>> below_threshold({1, 2, 4, 10}, 100)
-- true
-- >>> below_threshold({1, 20, 4, 10}, 5)
-- false
local function below_threshold(l, t)
","local function below_threshold(l, t)
    for _, number in ipairs(l) do
        if number >= t then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_threshold
    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)
    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_53,kas_Arab,lua,"- دو عدد تقسیم x , y ٕ-- >>> add(2, 3)
-- 5
-- >>> add(5, 7)
-- 12
local function add(x, y)
","local function add(x, y)
    return x + y
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate(0, 1), 1)
    lu.assertEquals(candidate(1, 0), 1)
    lu.assertEquals(candidate(2, 3), 5)
    lu.assertEquals(candidate(5, 7), 12)
    lu.assertEquals(candidate(7, 5), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_54,kas_Arab,lua,"- چیک کرو زِ اگر زٕ لفظ چِھ ہم معنی۔-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
-- true
-- >>> same_chars('abcd', 'dddddddabc')
-- true
-- >>> same_chars('dddddddabc', 'abcd')
-- true
-- >>> same_chars('eabcd', 'dddddddabc')
-- false
-- >>> same_chars('abcd', 'dddddddabce')
-- false
-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
-- false
local function same_chars(s0, s1)
","local function same_chars(s0, s1)
    local function char_set(str)
        local set = {}
        for c in str:gmatch(""."") do
            set[c] = true
        end
        return set
    end

    local set0 = char_set(s0)
    local set1 = char_set(s1)

    for c in pairs(set0) do
        if not set1[c] then
            return false
        end
    end

    for c in pairs(set1) do
        if not set0[c] then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = same_chars
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)
    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)
    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)
    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)
    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)
    lu.assertEquals(candidate('aabb', 'aaccc'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_55,kas_Arab,lua,"- واپس n-th فبونیکی نمبر -- >>> fib(10)
-- 55
-- >>> fib(1)
-- 1
-- >>> fib(8)
-- 21
local function fib(n)
","local function fib(n)
    if n <= 0 then
        return 0
    elseif n == 1 then
        return 1
    else
        local a, b = 0, 1
        for i = 2, n do
            a, b = b, a + b
        end
        return b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib
    lu.assertEquals(candidate(10), 55)
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(8), 21)
    lu.assertEquals(candidate(11), 89)
    lu.assertEquals(candidate(12), 144)
end

os.exit(lu.LuaUnit.run())"
HumanEval_56,kas_Arab,lua,"- اگر پرتھ افتتاحی بریکٹس منٛز چُھ اکھ متعلقہ بندش بریکٹ آسان تیلہٕ چُھ یہٕ درست۔- parentheses چُھ ""<"" تہٕ "">"" سٹرنگ۔-- >>> correct_bracketing('<')
-- false
-- >>> correct_bracketing('<>')
-- true
-- >>> correct_bracketing('<<><>>')
-- true
-- >>> correct_bracketing('><<>')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '<' then
            balance = balance + 1
        elseif char == '>' then
            balance = balance - 1
        end
        
        if balance < 0 then
            return false
        end
    end
    
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('<>'), true)
    lu.assertEquals(candidate('<<><>>'), true)
    lu.assertEquals(candidate('<><><<><>><>'), true)
    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
    lu.assertEquals(candidate('<<<><>>>>'), false)
    lu.assertEquals(candidate('><<>'), false)
    lu.assertEquals(candidate('<'), false)
    lu.assertEquals(candidate('<<<<'), false)
    lu.assertEquals(candidate('>'), false)
    lu.assertEquals(candidate('<<>'), false)
    lu.assertEquals(candidate('<><><<><>><>><<>'), false)
    lu.assertEquals(candidate('<><><<><>><>>><>'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_57,kas_Arab,lua,"- ریٹرن ٹوٗل چُھ ٹیبل ایلیمنٹس یکساں طور پٲنٹھ بڑان یا کم گژھان۔-- >>> monotonic({1, 2, 4, 20})
-- true
-- >>> monotonic({1, 20, 4, 10})
-- false
-- >>> monotonic({4, 1, 0, -10})
-- true
local function monotonic(l)
","local function monotonic(l)
    if #l < 2 then
        return true
    end

    local increasing = true
    local decreasing = true

    for i = 2, #l do
        if l[i] > l[i - 1] then
            decreasing = false
        elseif l[i] < l[i - 1] then
            increasing = false
        end
    end

    return increasing or decreasing
end","lu = require('luaunit')

function test_humaneval()
local candidate = monotonic
    lu.assertEquals(candidate({1, 2, 4, 10}), true)
    lu.assertEquals(candidate({1, 2, 4, 20}), true)
    lu.assertEquals(candidate({1, 20, 4, 10}), false)
    lu.assertEquals(candidate({4, 1, 0, -10}), true)
    lu.assertEquals(candidate({4, 1, 1, 0}), true)
    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)
    lu.assertEquals(candidate({9, 9, 9, 9}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_58,kas_Arab,lua,"- دوٛن میزن خٲطرٕ چھ اکھ منفرد مشترکہ عناصرس ترتیب دینہٕ یوان۔-- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})
-- {1, 5, 653}
-- >>> common({5, 3, 2, 8}, {3, 2})
-- {2, 3}
local function common(l1, l2)
","local function common(l1, l2)
    local set1 = {}
    local set2 = {}
    local result = {}

    -- Create a set for the first list
    for _, value in ipairs(l1) do
        set1[value] = true
    end

    -- Create a set for the second list, noting only common elements
    for _, value in ipairs(l2) do
        if set1[value] then
            set2[value] = true
        end
    end

    -- Collect the keys from the set into a results table
    for key in pairs(set2) do
        table.insert(result, key)
    end

    -- Sort the results table
    table.sort(result)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = common
    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})
    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})
    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_59,kas_Arab,lua,"- n کِس ساروی کھوتہٕ بٕڑ پرائم فیکٹرس واپس ییہٕ کرنہٕ۔ فرض کرو n > 1 تہٕ یہٕ چُھ نہٕ پرائم کینٛہہ۔-- >>> largest_prime_factor(13195)
-- 29
-- >>> largest_prime_factor(2048)
-- 2
local function largest_prime_factor(n)
","local function largest_prime_factor(n)
    local factor = 2
    while n > 1 do
        if n % factor == 0 then
            n = n / factor
        else
            factor = factor + 1
        end
    end
    return factor
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_prime_factor
    lu.assertEquals(candidate(15), 5)
    lu.assertEquals(candidate(27), 3)
    lu.assertEquals(candidate(63), 7)
    lu.assertEquals(candidate(330), 11)
    lu.assertEquals(candidate(13195), 29)
end

os.exit(lu.LuaUnit.run())"
HumanEval_60,kas_Arab,lua,"- sum_to_n چُھ اکھ فنکشن یُس 1 پیٹھ n تام نمبرن ہنزِ مجموعہٕ چُھ بناوان۔ -- >>> sum_to_n(30)
-- 465
-- >>> sum_to_n(100)
-- 5050
-- >>> sum_to_n(5)
-- 15
-- >>> sum_to_n(10)
-- 55
-- >>> sum_to_n(1)
-- 1
local function sum_to_n(n)
","local function sum_to_n(n)
    return n * (n + 1) // 2
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_to_n
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(6), 21)
    lu.assertEquals(candidate(11), 66)
    lu.assertEquals(candidate(30), 465)
    lu.assertEquals(candidate(100), 5050)
end

os.exit(lu.LuaUnit.run())"
HumanEval_61,kas_Arab,lua,"- اگر پرتھ افتتاحی بریکٹس منٛز چُھ اکھ متعلقہ بندش بریکٹ آسان تیلہٕ چُھ یہٕ درست۔- parentheses چُھ ""("" تہٕ """") سٹرنگ۔-- >>> correct_bracketing('(')
-- false
-- >>> correct_bracketing('()')
-- true
-- >>> correct_bracketing('(()())')
-- true
-- >>> correct_bracketing(')(()')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == ""("" then
            balance = balance + 1
        elseif char == "")"" then
            balance = balance - 1
        end
        if balance < 0 then
            return false
        end
    end
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('()'), true)
    lu.assertEquals(candidate('(()())'), true)
    lu.assertEquals(candidate('()()(()())()'), true)
    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
    lu.assertEquals(candidate('((()())))'), false)
    lu.assertEquals(candidate(')(()'), false)
    lu.assertEquals(candidate('('), false)
    lu.assertEquals(candidate('(((('), false)
    lu.assertEquals(candidate(')'), false)
    lu.assertEquals(candidate('(()'), false)
    lu.assertEquals(candidate('()()(()())())(()'), false)
    lu.assertEquals(candidate('()()(()())()))()'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_62,kas_Arab,lua,"- اتھ کثیر الثانیس سٕتۍ چُھ ڈیریویوٹیٹس ایکسی شکلہِ منز واپس گژھان۔- xs[0] + xs[1] * x + xs[2] * x ^ 2 + .... - xs چُھ کثیر الثانیس ہند کوفِشینٹ۔-- >>> derivative({3, 1, 2, 4, 5})
-- {1, 4, 12, 20}
-- >>> derivative({1, 2, 3})
-- {2, 6}
local function derivative(xs)
","local function derivative(xs)
    local result = {}
    for i = 2, #xs do
        result[i - 1] = xs[i] * (i - 1)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = derivative
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})
    lu.assertEquals(candidate({1, 2, 3}), {2, 6})
    lu.assertEquals(candidate({3, 2, 1}), {2, 2})
    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})
    lu.assertEquals(candidate({1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_63,kas_Arab,lua,"- براہِ کرم fibfib نمبر سیکوینس کہِ n- مہِ عنصرک موثر اندازس منز حساب لگاونہٕ خٲطرٕہ اکھ فنکشن لیوکھۍ۔- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ٕ- fib fib ((2) == 1 ٕ- fib fib ((1) == 0 ٕ- fib fib ((0) == 0 ٕ- فیبوفِب نمبر سیکوینس چِھ فِبوبونکی سیکوینس ہیوِس سیکوینس یوس درج ذیل چِھ:-- >>> fibfib(1)
-- 0
-- >>> fibfib(5)
-- 4
-- >>> fibfib(8)
-- 24
local function fibfib(n)
","local function fibfib(n)
    if n == 0 then
        return 0
    elseif n == 1 then
        return 0
    elseif n == 2 then
        return 1
    else
        local a, b, c = 0, 0, 1
        for i = 3, n do
            local next_fibfib = a + b + c
            a, b, c = b, c, next_fibfib
        end
        return c
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fibfib
    lu.assertEquals(candidate(2), 1)
    lu.assertEquals(candidate(1), 0)
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 24)
    lu.assertEquals(candidate(10), 81)
    lu.assertEquals(candidate(12), 274)
    lu.assertEquals(candidate(14), 927)
end

os.exit(lu.LuaUnit.run())"
HumanEval_64,kas_Arab,lua,"- مثال: ٕ- صوتی، مگر صرف ییلہِ یہٕ کنٛہہ لفظ چُھ ختم گژھان۔- اتھ صورتس منز چِھ واول 'a' ، 'e' ، 'i' ، 'o' ، 'u' ۔ ییتہِ چُھ 'y' تہٕ اکھ a۔- اکہ لفظک ان پٹ تہٕ سٹرنگس منٛز واولن ہینز تعداد چھ واپس کران۔- اکھ فنکشن لیوکھ vowels_count یُس اکھ سٹرنگ لیوکھ یُس نمائندگی چُھ کران۔-- >>> vowels_count('abcde')
-- 2
-- >>> vowels_count('ACEDY')
-- 3
local function vowels_count(s)
","local function vowels_count(s)
    local count = 0
    local vowels = {a = true, e = true, i = true, o = true, u = true, 
                    A = true, E = true, I = true, O = true, U = true}
                    
    for i = 1, #s do
        local char = s:sub(i, i)
        if vowels[char] or (char == 'y' or char == 'Y') and i == #s then
            count = count + 1
        end
    end
    
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = vowels_count
    lu.assertEquals(candidate('abcde'), 2)
    lu.assertEquals(candidate('Alone'), 3)
    lu.assertEquals(candidate('key'), 2)
    lu.assertEquals(candidate('bye'), 1)
    lu.assertEquals(candidate('keY'), 2)
    lu.assertEquals(candidate('bYe'), 1)
    lu.assertEquals(candidate('ACEDY'), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_65,kas_Arab,lua,"اگر تبدیلی > ہندسن ہند تعداد، تو واپس ہندسہٕ الٹہٕ۔- تہٕ نتیجہٕ چُھ سٹرنگ کِس طورس پیٹھ واپس گژھان۔ - سرکلر انٹیجر x کہِ ہندسن ہند نقل، ہندسن ہند دٲیرٕ پیٹھہٕ نقل -- >>> circular_shift(12, 1)
-- '21'
-- >>> circular_shift(12, 2)
-- '12'
local function circular_shift(x, shift)
","local function circular_shift(x, shift)
    local num_str = tostring(x)
    local num_digits = #num_str
    if shift > num_digits then
        return num_str:reverse()
    else
        local shift_pos = num_digits - (shift % num_digits)
        return num_str:sub(shift_pos + 1) .. num_str:sub(1, shift_pos)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = circular_shift
    lu.assertEquals(candidate(100, 2), '001')
    lu.assertEquals(candidate(12, 2), '12')
    lu.assertEquals(candidate(97, 8), '79')
    lu.assertEquals(candidate(12, 1), '21')
    lu.assertEquals(candidate(11, 101), '11')
end

os.exit(lu.LuaUnit.run())"
HumanEval_66,kas_Arab,lua,"- مثالہٕ- ASCII کوڈٕ- اکھ فنکشن لیوکھن یوس ان پٹ کہِ طورس پیٹھ سٹرنگ چُھ نوان تہٕ صرف بالائی ہندسن ہند مجموعہ چُھ واپس کران۔' - ٹاسک -- >>> digitSum('')
-- 0
-- >>> digitSum('abAB')
-- 131
-- >>> digitSum('abcCd')
-- 67
-- >>> digitSum('helloE')
-- 69
-- >>> digitSum('woArBld')
-- 131
-- >>> digitSum('aAaaaXa')
-- 153
local function digitSum(s)
","local function digitSum(s)
    local sum = 0
    for i = 1, #s do
        local char = s:sub(i, i)
        if char:match(""%u"") then
            sum = sum + string.byte(char)
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = digitSum
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abAB'), 131)
    lu.assertEquals(candidate('abcCd'), 67)
    lu.assertEquals(candidate('helloE'), 69)
    lu.assertEquals(candidate('woArBld'), 131)
    lu.assertEquals(candidate('aAaaaXa'), 153)
    lu.assertEquals(candidate(' How are yOu?'), 151)
    lu.assertEquals(candidate('You arE Very Smart'), 327)
end

os.exit(lu.LuaUnit.run())"
HumanEval_67,kas_Arab,lua,"- ازٲنی: - ٹوکری منز چُھ آمُت ٹوکری منز مینگو پھلُک تعداد واپس۔- نارنج تہٕ سیب تہٕ اکھ عدد یم میون ہینز کل تعدادچ نمائندگی چِھ کران - سیب، سنتری، تہٕ آموٕنی پھل۔ سٹرنگ دیتھ یم کل تعدادچ نمائندگی چِھ کران- یِمَن میوہَن ہٕنٛزِ ٹوٗٹی منٛز تقسیم کرنہٕ چھِ یوان یِمَن ٹوٗٹی منٛز چھِ میوہَن ہٕنٛزِ ٹوٗٹیاتھ مشنس منز، ییہٕ توہیہ اکھ سٹرنگ دینہٕ یُس سیب تہٕ سنتری ہینز تعدادچ نمائندگی کرٕ۔-- >>> fruit_distribution('5 apples and 6 oranges', 19)
-- 8
-- >>> fruit_distribution('0 apples and 1 oranges', 3)
-- 2
-- >>> fruit_distribution('2 apples and 3 oranges', 100)
-- 95
-- >>> fruit_distribution('100 apples and 1 oranges', 120)
-- 19
local function fruit_distribution(s, n)
","local function fruit_distribution(s, n)
    local apples, oranges = s:match(""(%d+)%s*apples%s*and%s*(%d+)%s*oranges"")
    apples = tonumber(apples)
    oranges = tonumber(oranges)
    local mangoes = n - (apples + oranges)
    return mangoes
end","lu = require('luaunit')

function test_humaneval()
local candidate = fruit_distribution
    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)
    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)
    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)
    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)
    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)
    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)
    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)
end

os.exit(lu.LuaUnit.run())"
HumanEval_68,kas_Arab,lua,"- مثال 1: ٕاگر چِھ نہٕ کنہہ تہٕ ویلیو یا دیتُن ٹیبل خالی، تیلہٕ واپسی []۔- کُنڈُک سلائیڈ گژھہِ ٹیبلہس منز واپس کرنہٕ ین، [smallest_value، امہِ ہند انڈیکس ]، اگر اَکی کم کھوتہٕ کم برابر قدر وٲلۍ متعدد نوڈٕ چِھ ملان تیلہٕ چُھ کم کھوتہٕ کم انڈیکس وول نوڈ واپس کران۔- پُکُن گژھہِ سُہ گرٕ یُس ساروی کھوتہٕ کم چُھ برابر ویلیو وول چُھ۔-تہند کٲم چھ یہ زِ نوڈس منزہ اکھ پھٹرو تہٕ بییہ واپس ییہ۔- ""کھتہٕ اکھ ٹیبل یُس کُنہِ کُنہِ ٹریچ برانچچچ نمائندگی چُھ کران یتھ منز غٲر منفی انٹیجر نوڈس چِھ آسان۔""-- >>> pluck({4, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 2:
-- >>> pluck({1, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 3:
-- >>> pluck({})
-- {}
-- Example 4:
-- >>> pluck({5, 0, 3, 0, 4, 2})
-- {0, 1}
-- Explanation: 0 is the smallest value, but  there are two zeros,
--              so we will choose the first zero, which has the smallest index.
-- Constraints:
--     * 1 <= nodes.length <= 10000
--     * 0 <= node.value
local function pluck(arr)
","local function pluck(arr)
    local smallest_even_value = nil
    local smallest_index = nil

    for index, value in ipairs(arr) do
        if value % 2 == 0 then
            if smallest_even_value == nil or value < smallest_even_value then
                smallest_even_value = value
                smallest_index = index
            end
        end
    end

    if smallest_even_value == nil then
        return {}
    else
        return {smallest_even_value, smallest_index}
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = pluck
    lu.assertEquals(candidate({4, 2, 3}), {2, 1})
    lu.assertEquals(candidate({1, 2, 3}), {2, 1})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})
    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})
    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})
    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})
    lu.assertEquals(candidate({7, 9, 7, 1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_69,kas_Arab,lua,"- مثالہٕ- اگر یژھ ویلیو چھیہ نہ، تیلہ چھیہ واپسی -1۔- اکہِ انٹیجرٕچ فریکوئنسی چِھ ٹیبلہِ منز ظٲہر گژھن وٲلۍ دفعاتن ہند تعداد۔- صفر، تہٕ چُھ عددُک قدر پانہٕ عددُک قدر کھوتہٕ زیادٕ یا برابر۔توہہ چھیہ مثبت انٹیجرزن ہنز اکھ غٲر خٲلی ٹیبل دیژھمژ۔ ساروی کھوتہ بوٚڑ انٹیجر یُس  کھوتہ بوٚڑ چھ، واپس کرِ۔-- >>> search({4, 1, 2, 2, 3, 1})
-- 2
-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})
-- 3
-- >>> search({5, 5, 4, 4, 4})
-- -1
local function search(lst)
","local function search(lst)
    local frequency = {}
    
    -- Calculate the frequency of each number in the list
    for _, num in ipairs(lst) do
        frequency[num] = (frequency[num] or 0) + 1
    end

    local result = -1
    
    -- Determine the maximum valid integer with the criteria
    for num, freq in pairs(frequency) do
        if num > 0 and freq >= num and num > result then
            result = num
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = search
    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)
    lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)
    lu.assertEquals(candidate({3, 3}), -1)
    lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)
    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)
    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)
    lu.assertEquals(candidate({3, 2, 8, 2}), 2)
    lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)
    lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)
    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)
    lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)
    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)
    lu.assertEquals(candidate({1}), 1)
    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)
    lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)
    lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)
    lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)
    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)
    lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)
    lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)
    lu.assertEquals(candidate({10}), -1)
    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)
    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)
    lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)
    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_70,kas_Arab,lua,"- مثالہٕ- تہٕ پتہٕ باقی تمام عددن ہند میکسِم، تہٕ پتہٕ کم کھوتہٕ کم، تہٕ بییہٕ ییہٕ۔عجیب ترتیب، ییلہِ توہہٕ کم از کم ویلیو سٕتۍ شروع کرِ، - انٹیجرز ہند ٹیبل دِنہٕ آمت، عجیب ترتیبس منز ٹیبل واپس۔-- >>> strange_sort_list({1, 2, 3, 4})
-- {1, 4, 2, 3}
-- >>> strange_sort_list({5, 5, 5, 5})
-- {5, 5, 5, 5}
-- >>> strange_sort_list({})
-- {}
local function strange_sort_list(lst)
","local function strange_sort_list(lst)
    table.sort(lst) -- Sort the list
    local result = {}
    local i, j = 1, #lst
    
    while i <= j do
        table.insert(result, lst[i])
        if i ~= j then
            table.insert(result, lst[j])
        end
        i = i + 1
        j = j - 1
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = strange_sort_list
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})
    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})
    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})
    lu.assertEquals(candidate({111111}), {111111})
end

os.exit(lu.LuaUnit.run())"
HumanEval_71,kas_Arab,lua,"- مثال: ٕ- تہٕ ترٛیٚیِم بٲتھتریہ طرفہٕ چُھ اکھ درست مثلث بنان ییلہِ دۄن طرفن ہند مجموعہٕ زیادٕہ آسہِ۔- بیترِ واپس گژھان -1 - مثلث چُھ 2 اعشاریہ پوائنٹس پیٹھ گول کرنہٕ یوان اگر تریہ طرف چِھ اکھ درست مثلث بناوان۔مثلث کس تریمس حصس ہنٛد طول و عرضس دیتھ، کرو  کس رقبس واپس۔-- >>> triangle_area(3, 4, 5)
-- 6.0
-- >>> triangle_area(1, 2, 10)
-- -1
local function triangle_area(a, b, c)
","local function triangle_area(a, b, c)
    -- Check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a then
        -- Calculate the semi-perimeter
        local s = (a + b + c) / 2
        -- Calculate the area using Heron's formula
        local area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        -- Return the area rounded to 2 decimal points
        return math.floor(area * 100 + 0.5) / 100
    else
        -- Return -1 if not a valid triangle
        return -1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(3, 4, 5), 6.0)
    lu.assertEquals(candidate(1, 2, 10), -1)
    lu.assertEquals(candidate(4, 8, 5), 8.18)
    lu.assertEquals(candidate(2, 2, 2), 1.73)
    lu.assertEquals(candidate(1, 2, 3), -1)
    lu.assertEquals(candidate(10, 5, 7), 16.25)
    lu.assertEquals(candidate(2, 6, 3), -1)
    lu.assertEquals(candidate(1, 1, 1), 0.43)
    lu.assertEquals(candidate(2, 2, 10), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_72,kas_Arab,lua,"- مثال: ٕ- آبجیکٹ q ییہٕ اڑان اگر یہٕ متوازن چُھ (یہٕ چُھ اکھ پالنڈرومک ٹیبل) تہٕ امک عناصرن ہنٛد مجموعہ چُھ زیادٕ کھوتہٕ کم یا برابر زیادٕ کھوتہٕ زیادٕ ممکنہ وزن w۔اکھ فنکشن لیوکھمُت یوس true چُھ واپس کران اگر آبجیکٹ q اڑان چُھ، تہٕ بییس صورتس منز چُھ false۔-- >>> will_it_fly({1, 2}, 5)
-- false
-- # 1+2 is less than the maximum possible weight, but it's unbalanced.
-- >>> will_it_fly({3, 2, 3}, 1)
-- false
-- # it's balanced, but 3+2+3 is more than the maximum possible weight.
-- >>> will_it_fly({3, 2, 3}, 9)
-- true
-- # 3+2+3 is less than the maximum possible weight, and it's balanced.
-- >>> will_it_fly({3}, 5)
-- true
-- # 3 is less than the maximum possible weight, and it's balanced.
local function will_it_fly(q, w)
","local function will_it_fly(q, w)
    local function is_palindrome(tbl)
        local len = #tbl
        for i = 1, math.floor(len / 2) do
            if tbl[i] ~= tbl[len - i + 1] then
                return false
            end
        end
        return true
    end

    local function sum_elements(tbl)
        local sum = 0
        for _, value in ipairs(tbl) do
            sum = sum + value
        end
        return sum
    end

    if not is_palindrome(q) then
        return false
    end

    local total_weight = sum_elements(q)
    return total_weight <= w
end","lu = require('luaunit')

function test_humaneval()
local candidate = will_it_fly
    lu.assertEquals(candidate({3, 2, 3}, 9), true)
    lu.assertEquals(candidate({1, 2}, 5), false)
    lu.assertEquals(candidate({3}, 5), true)
    lu.assertEquals(candidate({3, 2, 3}, 1), false)
    lu.assertEquals(candidate({1, 2, 3}, 6), false)
    lu.assertEquals(candidate({5}, 5), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_73,kas_Arab,lua,"- مثلن: ٔ- چُھ پٔتمس پیٹھ تہٕ برونٹھ کیٛن ہیتھ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ ہیٛکہٕ نہٕ- چُھ ضرورت آسان زِ ٹیبل آسِہِ پالینڈرومک بناونہٕ خٲطرٕہ۔ اکھ پالینڈرومک ٹیبل چُھ اکھ ٹیبل یوس - انٹیجرز ہند اکھ ٹیبل آر دیتھ، ایمیوک ایلیمنٹن ہنز کم از کم تعداد ژھانڈو یُس -- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})
-- 4
-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})
-- 1
-- >>> smallest_change({1, 2, 3, 2, 1})
-- 0
local function smallest_change(arr)
","local function smallest_change(arr)
    local n = #arr
    local changes = 0
    
    for i = 1, math.floor(n / 2) do
        if arr[i] ~= arr[n - i + 1] then
            changes = changes + 1
        end
    end
    
    return changes
end","lu = require('luaunit')

function test_humaneval()
local candidate = smallest_change
    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)
    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)
    lu.assertEquals(candidate({1, 4, 2}), 1)
    lu.assertEquals(candidate({1, 4, 4, 2}), 1)
    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)
    lu.assertEquals(candidate({3, 1, 1, 3}), 0)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({0, 1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_74,kas_Arab,lua,"- مثالہٕاگر زٕ ٹیبلن منٛز چھِ ہیچھن ہٕنٛز تعداد یکساں، تہٕ گۄڑنچ ٹیبل ییہٕ واپس کرنہٕ۔- ٹیبل کہِ تمام سٹرنگن منز چِھ کارن ہند کل تعداد بییس ٹیبلہٕ کھوتہٕ کم۔اکھ فنکشن لیوکھن یس دۄن سٹرنگن ہٕنٛز ٹیبل قبول کران چھ تہٕ ٕچِھ ٹیبل واپس کران یتھ منٛز-- >>> total_match({}, {})
-- {}
-- >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})
-- {'hI', 'Hi'}
-- >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})
-- {'hi', 'admin'}
-- >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})
-- {'hI', 'hi', 'hi'}
-- >>> total_match({'4'}, {'1', '2', '3', '4', '5'})
-- {'4'}
local function total_match(lst1, lst2)
","local function total_match(lst1, lst2)
    local function total_chars(lst)
        local count = 0
        for _, str in ipairs(lst) do
            count = count + #str
        end
        return count
    end

    local chars_lst1 = total_chars(lst1)
    local chars_lst2 = total_chars(lst2)

    if chars_lst1 < chars_lst2 then
        return lst1
    elseif chars_lst2 < chars_lst1 then
        return lst2
    else
        return lst1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = total_match
    lu.assertEquals(candidate({}, {}), {})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})
    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})
    lu.assertEquals(candidate({}, {'this'}), {})
    lu.assertEquals(candidate({'this'}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_75,kas_Arab,lua,"- مثال: ٕ-آئون چُھ 100ہنزِ آس پاس کینٛہہ دوس نِش روزان۔- تہ غلط بیترِ۔ اکھ فنکشن لیوکھن یُس صحیح چُھ واپس گژھان اگر دِنہٕ آمُت نمبر چُھ 3 پرائمن ہند ضرب -- >>> is_multiply_prime(30)
-- true
-- 30 = 2 * 3 * 5
local function is_multiply_prime(a)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while (i * i) <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function generate_primes(limit)
    local primes = {}
    for i = 2, limit do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end

local function is_multiply_prime(a)
    local primes = generate_primes(100)
    local count = #primes
    for i = 1, count do
        for j = i + 1, count do
            for k = j + 1, count do
                if primes[i] * primes[j] * primes[k] == a then
                    return true
                end
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_multiply_prime
    lu.assertEquals(candidate(5), false)
    lu.assertEquals(candidate(30), true)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), false)
    lu.assertEquals(candidate(125), true)
    lu.assertEquals(candidate(105), true)
    lu.assertEquals(candidate(126), false)
    lu.assertEquals(candidate(729), false)
    lu.assertEquals(candidate(891), false)
    lu.assertEquals(candidate(1001), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_76,kas_Arab,lua,"- مثلن: ٔ- x چُھ n کہِ اکھ سادٕہ طاقت اگر n**int=x - n تہٕ false کہِ پاور کِس باقی صورتن منز۔توہہٕ چِھ اکھ فنکشن لیکھان یُس سچُے چُھ واپس کران اگر اکھ نمبر x چُھ اکھ سادٕہ نمبر۔-- >>> is_simple_power(1, 4)
-- true
-- >>> is_simple_power(2, 2)
-- true
-- >>> is_simple_power(8, 2)
-- true
-- >>> is_simple_power(3, 2)
-- false
-- >>> is_simple_power(3, 1)
-- false
-- >>> is_simple_power(5, 3)
-- false
local function is_simple_power(x, n)
","local function is_simple_power(x, n)
    if x == 1 then
        return true
    end
    if n <= 0 or x <= 0 then
        return false
    end
    local current_power = 1
    while current_power < x do
        current_power = current_power * n
    end
    return current_power == x
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_simple_power
    lu.assertEquals(candidate(16, 2), true)
    lu.assertEquals(candidate(143214, 16), false)
    lu.assertEquals(candidate(4, 2), true)
    lu.assertEquals(candidate(9, 3), true)
    lu.assertEquals(candidate(16, 4), true)
    lu.assertEquals(candidate(24, 2), false)
    lu.assertEquals(candidate(128, 4), false)
    lu.assertEquals(candidate(12, 6), false)
    lu.assertEquals(candidate(1, 1), true)
    lu.assertEquals(candidate(1, 12), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_77,kas_Arab,lua,"- مثالہٕ- نوٹ: توہہ ہیکہِ یہٕ سمجِتھ زِ ان پٹ چُھ ہمیشہٕ پَزِ۔اگر یہٕ انجیگر کنٛہہ انٹیجر نمبرُک مکعب چُھ ۔اکھ فنکشن لیوکھمُت یُس اکھ عدد a نَے چُھ تِہ ریٹرن چُھ صیح -- >>> iscube(1)
-- true
-- >>> iscube(2)
-- false
-- >>> iscube(-1)
-- true
-- >>> iscube(64)
-- true
-- >>> iscube(0)
-- true
-- >>> iscube(180)
-- false
local function iscube(a)
","local function iscube(a)
    if a < 0 then
        a = -a
    end
    local cbrt = math.floor(a ^ (1/3) + 0.5)
    return cbrt * cbrt * cbrt == a
end","lu = require('luaunit')

function test_humaneval()
local candidate = iscube
    lu.assertEquals(candidate(1), true)
    lu.assertEquals(candidate(2), false)
    lu.assertEquals(candidate(-1), true)
    lu.assertEquals(candidate(64), true)
    lu.assertEquals(candidate(180), false)
    lu.assertEquals(candidate(1000), true)
    lu.assertEquals(candidate(0), true)
    lu.assertEquals(candidate(1729), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_78,kas_Arab,lua,"- مثالہٕ- تہٕ علامت A، B، C، D، E، F چِھ ہمیشہٕ اپر لیٹر۔ - نوٹ: توہیہ ہیکیو یہٕ سمجِتھ زِ ان پٹ چُھ ہمیشہٕ صحیح یا خالی سٹرنگ، - بی (= اعشاریہ 11) ، ڈی (= اعشاریہ 13) ۔توہیہ چھِو یِمَن ہندسن ہند اکھ نمبر حٲصل کرُن: 2، 3، 5، 7، - پرائم نمبر چِھ 2، 3، 5، 7، 11، 13، 17، ...- ہیکساڈسیمل ہندسہٕ چِھ 0، 1، 2، 3، 4، 5، 6، 7، 8، 9، A، B، C، D، E، F۔- 1 کھوتہٕ زیادٕ یوس زٕ لکٕٹۍ قدرتی نمبرن ہند پروڈکٹ چُھ نہٕ) ۔- ہندسہٕ یم پرائم چِھ (پرائم نمبر، یا اکھ پرائم، چُھ اکھ فطری نمبر)- ہیکساڈسیمل نمبرس بطورِ سٹرنگ تہٕ ہیکساڈسیمل ہندسہٕ چُھ گنتی کران۔توہیہ چھیہ یمہ فنکشنک وکھ لیوکھمت یمہ کہ وجہ سیتۍ توہیہ یہ ونہِ ہکۍ پاٹھۍ کرِ۔-- >>> hex_key('AB')
-- 1
-- >>> hex_key('1077E')
-- 2
-- >>> hex_key('ABED1A33')
-- 4
-- >>> hex_key('123456789ABCDEF0')
-- 6
-- >>> hex_key('2020')
-- 2
local function hex_key(num)
","local function hex_key(num)
    local prime_digits = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true, ['B'] = true, ['D'] = true}
    local count = 0
    for digit in num:gmatch('.') do
        if prime_digits[digit] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = hex_key
    lu.assertEquals(candidate('AB'), 1)
    lu.assertEquals(candidate('1077E'), 2)
    lu.assertEquals(candidate('ABED1A33'), 4)
    lu.assertEquals(candidate('2020'), 2)
    lu.assertEquals(candidate('123456789ABCDEF0'), 6)
    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_79,kas_Arab,lua,"- مثالہٕ- اضافی حروف چِھ شکلہٕ منٛز مدد کرنہٕ خاطرٕ۔ - سٹرنگ کس شروعس تہٕ اختتامس پیٹھ گژھہٕ اکھ اضٲفی جوڑٕ حروف 'db' آسن۔سٹرنگس منز چُھ پرتھ کردار ""1"" یا ""0"" آسان۔- بائنری فارمیٹ۔ فنکشن گژھہٕ اکھ سٹرنگ واپس کرُن، پریتھ کردار چُھ بائنری ہندسہٕ نمٲئندگی کران۔- توہیہ چِھ اکھ اعشاریہ شکلہٕ منٛز اکھ نمبر دینہٕ یوان تہٕ توہیہٕ ہیند کٲم چُھ یہٕ تبدیل کرن۔-- >>> decimal_to_binary(15)
-- 'db1111db'
-- >>> decimal_to_binary(32)
-- 'db100000db'
local function decimal_to_binary(decimal)
","local function decimal_to_binary(decimal)
    -- Convert the decimal number to binary and remove the '0b' prefix using string.sub
    local binary = string.sub(string.format(""%b"", decimal), 0)
    -- Concatenate 'db' at the start and end of the binary string
    return 'db' .. binary .. 'db'
end","lu = require('luaunit')

function test_humaneval()
local candidate = decimal_to_binary
    lu.assertEquals(candidate(0), 'db0db')
    lu.assertEquals(candidate(32), 'db100000db')
    lu.assertEquals(candidate(103), 'db1100111db')
    lu.assertEquals(candidate(15), 'db1111db')
end

os.exit(lu.LuaUnit.run())"
HumanEval_80,kas_Arab,lua,"- مثلن: ٔاکھ سٹرنگ چِھ ہیپلوا اگر ایمچ لمبائی کم کھوتہٕ کم چِھ 3 تہٕ پرتھ 3 پیٹھہٕ چِھ اکھ حرف الگ آسان۔-تہند کٲم چھ یہ چیک کرن زِ سٹرنگ چھا ہیپلو یا نہٕ۔- توہہ چھا اکھ جملہ سکریوڈان؟-- >>> is_happy('a')
-- false
-- >>> is_happy('aa')
-- false
-- >>> is_happy('abcd')
-- true
-- >>> is_happy('aabb')
-- false
-- >>> is_happy('adb')
-- true
-- >>> is_happy('xyy')
-- false
local function is_happy(s)
","local function is_happy(s)
    -- Check if the string length is less than 3
    if #s < 3 then
        return false
    end

    -- Iterate through the string and check every 3 consecutive characters
    for i = 1, #s - 2 do
        local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i + 2)
        if a == b or b == c or a == c then
            return false
        end
    end

    -- If no 3 consecutive characters are the same, return true
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_happy
    lu.assertEquals(candidate('a'), false)
    lu.assertEquals(candidate('aa'), false)
    lu.assertEquals(candidate('abcd'), true)
    lu.assertEquals(candidate('aabb'), false)
    lu.assertEquals(candidate('adb'), true)
    lu.assertEquals(candidate('xyy'), false)
    lu.assertEquals(candidate('iopaxpoi'), true)
    lu.assertEquals(candidate('iopaxioi'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_81,kas_Arab,lua,"- مثال: ٕ- 0.0 E ٕ- > 0.0 D-  کم از کم 0.0 D-  زیادہ سے زیادہ 0.0- > 0.7 D ٪ چُھ- > 1.0 D+ ٕ- > 1.3 C-  چُھ- > 1.7 C ٪ چُھ- > 2.0 C+ ٕ- > 2.3 بی- ٕ- > 2.7 B ٕ- > 3.0 بی + ٕ- > 3.3 A- ٕ- > 3.7 A ٕ- 4.0 A+ ٕ- GPA  لیٹر گریڈ - اکھ فنکشن یُس درج ذیل جدولک استعمال کران لیٹر گریڈچ میز ہیکہٕ پٔدٕ کرتھ: - سُہٕ چُھ کینٛہہ طالب علمن خٲطرٕہ GPA یُک ٹیبل تہٕ کٔرمٕژ تہٕ توہیہ چِھ یِم لیکھِتھ۔-آہ چُھس صرف اکھ مسئلہ، تمۍ چِھ پنٕنۍ کوڈ استعمال کران یمۍ سُہ گریڈنگ خٲطرٕہ استعمال کران ٲسۍ۔سُہٕ چُھ پنٕن الگورتھم بناوان تاکہ سُہٕ ہیکہٕ درجہٕ بندی کرِتھ۔- یہ چھہ سیمیسٹر کس ٲخری ہفتس منز تہ استادس پزِ نمرات دنہ۔-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})
-- {'A+', 'B', 'C-', 'C', 'A-'}
local function numerical_letter_grade(grades)
","local function numerical_letter_grade(grades)
    local letter_grades = {}
    for _, gpa in ipairs(grades) do
        local letter
        if gpa == 4.0 then
            letter = ""A+""
        elseif gpa > 3.7 then
            letter = ""A""
        elseif gpa > 3.3 then
            letter = ""A-""
        elseif gpa > 3.0 then
            letter = ""B+""
        elseif gpa > 2.7 then
            letter = ""B""
        elseif gpa > 2.3 then
            letter = ""B-""
        elseif gpa > 2.0 then
            letter = ""C+""
        elseif gpa > 1.7 then
            letter = ""C""
        elseif gpa > 1.3 then
            letter = ""C-""
        elseif gpa > 1.0 then
            letter = ""D+""
        elseif gpa > 0.7 then
            letter = ""D""
        elseif gpa > 0.0 then
            letter = ""D-""
        else
            letter = ""E""
        end
        table.insert(letter_grades, letter)
    end
    return letter_grades
end","lu = require('luaunit')

function test_humaneval()
local candidate = numerical_letter_grade
    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})
    lu.assertEquals(candidate({1.2}), {'D+'})
    lu.assertEquals(candidate({0.5}), {'D-'})
    lu.assertEquals(candidate({0.0}), {'E'})
    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})
    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_82,kas_Arab,lua,"- مثالہٕ- لمبائی چھُ اکھ پرائم نمبر یا بیاکھ غلط نمبر۔اکھ فنکشن لیوکھمُت یوس اکھ سٹرنگ چُھ نوان تہٕ اگر سٹرنگ چُھ -- >>> prime_length('Hello')
-- true
-- >>> prime_length('abcdcba')
-- true
-- >>> prime_length('kittens')
-- true
-- >>> prime_length('orange')
-- false
local function prime_length(string)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function prime_length(str)
    local length = #str
    return is_prime(length)
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_length
    lu.assertEquals(candidate('Hello'), true)
    lu.assertEquals(candidate('abcdcba'), true)
    lu.assertEquals(candidate('kittens'), true)
    lu.assertEquals(candidate('orange'), false)
    lu.assertEquals(candidate('wow'), true)
    lu.assertEquals(candidate('world'), true)
    lu.assertEquals(candidate('MadaM'), true)
    lu.assertEquals(candidate('Wow'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('HI'), true)
    lu.assertEquals(candidate('go'), true)
    lu.assertEquals(candidate('gogo'), false)
    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)
    lu.assertEquals(candidate('Madam'), true)
    lu.assertEquals(candidate('M'), false)
    lu.assertEquals(candidate('0'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_83,kas_Arab,lua,"- مثبت عدد یم 1 پیٹھ شروع یا ختم چِھ گژھان۔ - اکھ مثبت عدد n دنہٕ آمت، n ہندسن ہند تعداد چُھ واپس کران۔local function starts_one_ends(n)
","local function starts_one_ends(n)
    if n == 1 then
        return 1 -- The single-digit numbers starting or ending with 1 is just 1 itself.
    end
    -- Calculate the count of n-digit numbers starting with 1 and ending with 1.
    local count_start_with_1 = 10 ^ (n - 1) -- All numbers from 100... to 199...
    local count_end_with_1 = 9 * (10 ^ (n - 1)) -- All numbers from 1, 11, 21,... excluding those starting with 1.
    
    -- A number starting and ending with 1 like 101 has been counted twice, correct for that.
    return count_start_with_1 + count_end_with_1 - 10 ^ (n - 2)
end","lu = require('luaunit')

function test_humaneval()
local candidate = starts_one_ends
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(2), 18)
    lu.assertEquals(candidate(3), 180)
    lu.assertEquals(candidate(4), 1800)
    lu.assertEquals(candidate(5), 18000)
end

os.exit(lu.LuaUnit.run())"
HumanEval_84,kas_Arab,lua,"- مثال ٕ- اکھ مثبت عدد N دنہٕ آمت، امہٕ کہ ہندسن ہند مجموعہ چُھ بائنری منٛز واپس کران۔ -- >>> solve(1000)
-- '1'
-- >>> solve(150)
-- '110'
-- >>> solve(147)
-- '1100'
-- Variables:
--     @N integer
--          Constraints: 0 ≤ N ≤ 10000.
-- Output:
--      a string of binary number
local function solve(N)
","local function solve(N)
    local sum = 0
    while N > 0 do
        sum = sum + (N % 10)
        N = math.floor(N / 10)
    end
    return string.format(""%b"", sum)
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate(1000), '1')
    lu.assertEquals(candidate(150), '110')
    lu.assertEquals(candidate(147), '1100')
    lu.assertEquals(candidate(333), '1001')
    lu.assertEquals(candidate(963), '10010')
end

os.exit(lu.LuaUnit.run())"
HumanEval_85,kas_Arab,lua,"- مثالہٕ- انٹیجرزن ہند اکھ غٲر خالی ٹیبل دِنہٕ پتہٕ، گۄڈٕ چُھس جوڑٕ جوڑ عناصر یم انڈری انڈیکسس پیٹھ چِھ آسان۔-- >>> add({4, 2, 6, 7})
-- 2
local function add(lst)
","local function add(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 0 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate({4, 88}), 88)
    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)
    lu.assertEquals(candidate({4, 0, 6, 7}), 0)
    lu.assertEquals(candidate({4, 4, 6, 8}), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_86,kas_Arab,lua,"- مثلن: ٕنوٹ: توہیہ پزِ جملس منز لفظن ہنز ترتیب تہٕ خالی جایہ تھاوِ۔- قیمت کسری بر اساس ارقام ارقام ارقام- چِھ اکس نٔوس لفظس سۭتۍ متبادل ییتھ منٛز تمام حروفن ہنٛد ترتیب چُھ - ترتیب شدہ سٹرنگ ورژن، چُھ اکھ سٹرنگ ییتہِ تمام لفظ چِھ (سپیسس سٕتۍ الگ)اکھ فنکشن لیوکھمُت یُس اکھ سٹرنگ نیران چُھ تہٕ امچ اکھ آرڈرڈ ورژن چُھ رٹان۔-- >>> anti_shuffle('Hi')
-- 'Hi'
-- >>> anti_shuffle('hello')
-- 'ehllo'
-- >>> anti_shuffle('Hello World!!!')
-- 'Hello !!!Wdlor'
local function anti_shuffle(s)
","local function anti_shuffle(s)
    local function sort_word(word)
        local chars = {}
        for char in word:gmatch(""."") do
            table.insert(chars, char)
        end
        table.sort(chars)
        return table.concat(chars)
    end

    return (s:gsub(""%S+"", sort_word))
end","lu = require('luaunit')

function test_humaneval()
local candidate = anti_shuffle
    lu.assertEquals(candidate('Hi'), 'Hi')
    lu.assertEquals(candidate('hello'), 'ehllo')
    lu.assertEquals(candidate('number'), 'bemnru')
    lu.assertEquals(candidate('abcd'), 'abcd')
    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
end

os.exit(lu.LuaUnit.run())"
HumanEval_87,kas_Arab,lua,"- مثالہٕ- تہٕ، رٹہٕ ہنز کوآرڈینیٹ چُھ کُنہِ کالمن منز پٕنِس ترتیبس منز ترتیب دِنہٕ آمُت۔- ابتدائی طور پر صفوں کی ترتیب ترتیب سے ترتیب دیں۔- پرتھ ٹیبل چِھ اکھ کوآرڈینیٹ - (رنگ، کالم) ، 0 پیٹھ شروع گژھان۔- تہٕ ٹیبلن ہنز میز واپس، [(x1، y1) ، (x2، y2) ...] یتھ کٔنۍ زِ - گۄڈنیُک، تہٕ عددی x ییہٕ دنہٕ، ٹیبلہ منٛز عددی x تلاش کٔرو، - پرتھ صفس منز ہیکہِ مختلف نمبرن ہند کالمن ہند تعداد ٲسِتھ۔- یوس میٹرکس سٕتۍ مشابہ چُھ، تاہم، میٹرکس کہِ برعکس چُھ،- توہیہ چھیہ 2 جہتی ڈیٹا، یم اکھ نیسٹڈ ٹیبلہ کس طورس پیٹھ، -- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)
-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}
-- >>> get_row({}, 1)
-- {}
-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)
-- {{2, 2}}
local function get_row(lst, x)
","local function get_row(lst, x)
    local coordinates = {}
    for row_index, row in ipairs(lst) do
        for col_index = #row, 1, -1 do
            if row[col_index] == x then
                table.insert(coordinates, {row_index - 1, col_index - 1})
            end
        end
    end
    table.sort(coordinates, function(a, b)
        if a[1] == b[1] then
            return a[2] > b[2]
        else
            return a[1] < b[1]
        end
    end)
    return coordinates
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_row
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})
    lu.assertEquals(candidate({}, 1), {})
    lu.assertEquals(candidate({{1}}, 2), {})
    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})
end

os.exit(lu.LuaUnit.run())"
HumanEval_88,kas_Arab,lua,"- مثالہٕ- * نہٕ چُھکھ دیُت ٹیبل تبدیل کران۔ - نوٹ: ٕ- یا چُھ اتھ کم گژھن واجنہِ ترتیبس منز ترتیب دِوان اگر مجموعہٕ (پہلا انڈیکس ویلیو، ٲخری انڈیکس ویلیو) چُھ برابر۔- توہیہ چِھ دیتمت ٹیبلہٕ بالترتیب ترتیب دینہٕ یوتام کہ مجموعہٕ (پہلی انڈیکس ویلیو، آخری انڈیکس ویلیو) عجیب چُھ، - غٲر منفی عددن ہنز ٹیبل دِنہٕ پتہٕ، دِنہٕ آمژِ ٹیبلُک اکھ کُلوا ییلہٕ سورتنگ ٕچ گژھہِ،-- >>> sort_array({})
-- {}
-- >>> sort_array({5})
-- {5}
-- >>> sort_array({2, 4, 3, 0, 1, 5})
-- {0, 1, 2, 3, 4, 5}
-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})
-- {6, 5, 4, 3, 2, 1, 0}
local function sort_array(array)
","local function sort_array(array)
    -- Create a copy of the given table
    local sorted_array = {}
    for i = 1, #array do
        sorted_array[i] = array[i]
    end

    -- If the table is not empty
    if #sorted_array > 0 then
        local first = sorted_array[1]
        local last = sorted_array[#sorted_array]
        local sum = first + last
        
        -- Sort in ascending or descending order based on the sum
        if sum % 2 == 0 then
            table.sort(sorted_array, function(a, b) return a > b end)
        else
            table.sort(sorted_array, function(a, b) return a < b end)
        end
    end

    return sorted_array
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5}), {5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})
    lu.assertEquals(candidate({2, 1}), {1, 2})
    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})
    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})
end

os.exit(lu.LuaUnit.run())"
HumanEval_89,kas_Arab,lua,"- مثلن: ٕ- دو ضرب ضرب دو جاں تک منتقل الفبِیہِ ہنز ترتیب گژھہِ یژھہِ ہیرِ گژھہِ یژھہِ حرفن ہندۍ زٕ لفظ آسن۔- حروف تہجی ہند گردشہٕ سٕتۍ چُھ اکھ خفیہ کردہ سٹرنگ واپس کران۔اکھ فنکشن انکرپٹ بناو یُس اکھ سٹرنگ بطورٕ دلیل چُھ نوان تہٕ -- >>> encrypt('hi')
-- 'lm'
-- >>> encrypt('asdfghjkl')
-- 'ewhjklnop'
-- >>> encrypt('gf')
-- 'kj'
-- >>> encrypt('et')
-- 'ix'
local function encrypt(s)
","local function encrypt(s)
    local result = {}
    local shift = 2 * 2
    for i = 1, #s do
        local char = s:sub(i,i)
        if char:match(""%a"") then
            local ascii_offset = char:match(""%l"") and string.byte('a') or string.byte('A')
            local new_char = string.char(((string.byte(char) - ascii_offset + shift) % 26) + ascii_offset)
            table.insert(result, new_char)
        else
            table.insert(result, char)
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encrypt
    lu.assertEquals(candidate('hi'), 'lm')
    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')
    lu.assertEquals(candidate('gf'), 'kj')
    lu.assertEquals(candidate('et'), 'ix')
    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')
    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')
    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')
    lu.assertEquals(candidate('a'), 'e')
end

os.exit(lu.LuaUnit.run())"
HumanEval_90,kas_Arab,lua,"- اگر نہٕ یتھِ کٔنۍ شے موجود آسِہ کینٛہہ تہٕ توٲی چُھ نِل لَٹہِ واپس گژھان۔- اکھ فنکشن لیوکھ next_smallest (\displaystyle \next_smallest (\mathrm {next_smallest}) یُس میزک 2nd ساس عنصر واپس چُھ کران۔ - توہہ چھہِ انٹیجر ٹیبلہ پیٹھہ لیکھان۔-- >>> next_smallest({1, 2, 3, 4, 5})
-- 2
-- >>> next_smallest({5, 1, 4, 3, 2})
-- 2
-- >>> next_smallest({})
-- None
-- >>> next_smallest({1, 1})
-- None
local function next_smallest(lst)
","local function next_smallest(lst)
    if #lst < 2 then
        return nil
    end

    table.sort(lst)

    local first = lst[1]
    for i = 2, #lst do
        if lst[i] > first then
            return lst[i]
        end
    end

    return nil
end","lu = require('luaunit')

function test_humaneval()
local candidate = next_smallest
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)
    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)
end

os.exit(lu.LuaUnit.run())"
HumanEval_91,kas_Arab,lua,"- مثلن: ٕ- جملن ہنز حد چھہِ '،'، '؟' یا '!' سیتۍ بنان۔بورڈُک مطلب چُھ ""I"" سٕتۍ شروع گژھان۔- توہیہ چِھ لفظن ہند اکھ سلسلہٕ دینہٕ آمُت، تہٕ توہیہُند کٲم چُھ تعداد گنُن۔-- >>> is_bored('Hello world')
-- 0
-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')
-- 1
local function is_bored(S)
","local function is_bored(S)
    local count = 0
    -- Split the string into sentences using patterns
    for sentence in S:gmatch(""[^%.!?]+"") do
        -- Trim leading whitespace from the sentence
        sentence = sentence:gsub(""^%s+"", """")
        -- Check if the sentence starts with ""I""
        if sentence:sub(1, 1) == ""I"" then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_bored
    lu.assertEquals(candidate('Hello world'), 0)
    lu.assertEquals(candidate('Is the sky blue?'), 0)
    lu.assertEquals(candidate('I love It !'), 1)
    lu.assertEquals(candidate('bIt'), 0)
    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)
    lu.assertEquals(candidate('You and I are going for a walk'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_92,kas_Arab,lua,"- مثالہٕ- باقی تمام معاملاتن منٛز چھ غلط واپس یوان۔ - اگر اکھ نمبر باقی دۄن ہندس مجموعس برابر چُھ تہٕ تمام نمبر چِھ عدد، تہٕ صحیح چُھ واپس کران۔-اکھ فنکشن یُس 3 نمبرن ہنز چُھ لیکھان۔-- >>> any_int(5, 2, 7)
-- true
-- >>> any_int(3, 2, 2)
-- false
-- >>> any_int(3, -2, 1)
-- true
-- >>> any_int(3.6, -2.2, 2)
-- false
local function any_int(x, y, z)
","local function any_int(x, y, z)
    if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then
        if x == y + z or y == x + z or z == x + y then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = any_int
    lu.assertEquals(candidate(2, 3, 1), true)
    lu.assertEquals(candidate(2.5, 2, 3), false)
    lu.assertEquals(candidate(1.5, 5, 3.5), false)
    lu.assertEquals(candidate(2, 6, 2), false)
    lu.assertEquals(candidate(4, 2, 2), true)
    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
    lu.assertEquals(candidate(-4, 6, 2), true)
    lu.assertEquals(candidate(2, 1, 1), true)
    lu.assertEquals(candidate(3, 4, 7), true)
    lu.assertEquals(candidate(3.0, 4, 7), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_93,kas_Arab,lua,"- مثالہٕ- صرف حروفن ہنز ترتیب چھُے- انگریزی ہندس الفبوس منز چُھ اکھ وول حرف۔- پیغاماتس سۭتۍ لیکھنہٕ ینہٕ واجن حرف کہ دوٛن جایٔین پیٹھ گژھہٕ یہٕ خبر۔- یُس تمام حرفن ہنز case swaps چُھ کران، تمام vowels چُھ بدل کراناکھ فنکشن لیوکھن یس اکھ پیغام چھ ونان، تہٕ امہ کس شکلس منٛز چھ کوڈ کران۔-- >>> encode('test')
-- 'TGST'
-- >>> encode('This is a message')
-- 'tHKS KS C MGSSCGG'
local function encode(message)
","local function encode(message)
    local vowels = { a = 'c', e = 'g', i = 'k', o = 'q', u = 'w', A = 'C', E = 'G', I = 'K', O = 'Q', U = 'W' }
    local encodedMessage = {}
    
    for i = 1, #message do
        local char = message:sub(i, i)
        
        -- Swap case
        if char:match('%l') then
            char = char:upper()
        else
            char = char:lower()
        end
        
        -- Replace vowels
        if vowels[char] then
            char = vowels[char]
        end
        
        table.insert(encodedMessage, char)
    end
    
    return table.concat(encodedMessage)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encode
    lu.assertEquals(candidate('TEST'), 'tgst')
    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')
    lu.assertEquals(candidate('YES'), 'ygs')
    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')
    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')
end

os.exit(lu.LuaUnit.run())"
HumanEval_94,kas_Arab,lua,"- مثالہٕتوہیہ چھوہ ساروی کھوتہٕ بٲڑ پرائم ویلیو تلاش کرنچ ضرورت تہٕ امہ کس ہندسن ہند مجموعہ واپس کرنہٕ خاطرٕ۔- توہہ چھہِ انٹیجر ٹیبلہ پیٹھہ لیکھان۔-- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
-- 10
-- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
-- 25
-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
-- 13
-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
-- 11
-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
-- 3
-- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
-- 7
local function skjkasdkd(lst)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.sqrt(n), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
    end
    return true
end

local function sum_of_digits(n)
    local sum = 0
    while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
    end
    return sum
end

local function skjkasdkd(lst)
    local largest_prime = -1
    for _, v in ipairs(lst) do
        if is_prime(v) and v > largest_prime then
            largest_prime = v
        end
    end
    if largest_prime == -1 then return 0 end
    return sum_of_digits(largest_prime)
end","lu = require('luaunit')

function test_humaneval()
local candidate = skjkasdkd
    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
    lu.assertEquals(candidate({8191}), 19)
    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
    lu.assertEquals(candidate({127, 97, 8192}), 10)
end

os.exit(lu.LuaUnit.run())"
HumanEval_95,kas_Arab,lua,"- مثالہٕ- فنکشن گژھ غلط واپس یوتام کہ دِنہٕ آمت ٹیبل چُھ خٲلی۔- کیس یا تمام چابیاں اوپری کیس میں سٹرنگز ہیں، ورنہ غلط واپس۔- اکھ ٹیبل دِنہٕ آمت، اگر تمام کلیدہٕ لوئرس منٛز چِھ سٹرنگ آسان تہٕ سچ واپس ییہٕ دنہٕ۔-- >>> check_dict_case({['a'] = 'apple', ['b'] = 'banana'})
-- true
-- >>> check_dict_case({['a'] = 'apple', ['A'] = 'banana', ['B'] = 'banana'})
-- false
-- >>> check_dict_case({['a'] = 'apple', [8] = 'banana', ['a'] = 'apple'})
-- false
-- >>> check_dict_case({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'})
-- false
-- >>> check_dict_case({['STATE'] = 'NC', ['ZIP'] = '12345'})
-- true
local function check_dict_case(dict)
","local function is_lowercase(s)
    return s:lower() == s
end

local function is_uppercase(s)
    return s:upper() == s
end

local function check_dict_case(dict)
    if next(dict) == nil then
        return false
    end

    local lower_case = nil
    for key, _ in pairs(dict) do
        if type(key) ~= 'string' then
            return false
        end
        
        if lower_case == nil then
            lower_case = is_lowercase(key)
        elseif lower_case ~= is_lowercase(key) then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_dict_case
    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)
    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)
    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)
    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)
    lu.assertEquals(candidate({}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_96,kas_Arab,lua,"- مثلن: ٕ- انٹیجرز یم پرائم نمبر چِھ تہٕ n کھوتہٕ کم چِھ۔ اکھ فنکشن چُھ لاگو کران یُس اکھ غأر منفی عدد چُھ نیوان تہٕ گۄڈنچ n کہ ٹیبل چُھ واپس کران۔-- >>> count_up_to(5)
-- {2, 3}
-- >>> count_up_to(11)
-- {2, 3, 5, 7}
-- >>> count_up_to(0)
-- {}
-- >>> count_up_to(20)
-- {2, 3, 5, 7, 11, 13, 17, 19}
-- >>> count_up_to(1)
-- {}
-- >>> count_up_to(18)
-- {2, 3, 5, 7, 11, 13, 17}
local function count_up_to(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function count_up_to(n)
    local primes = {}
    for i = 2, n - 1 do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_up_to
    lu.assertEquals(candidate(5), {2, 3})
    lu.assertEquals(candidate(6), {2, 3, 5})
    lu.assertEquals(candidate(7), {2, 3, 5})
    lu.assertEquals(candidate(10), {2, 3, 5, 7})
    lu.assertEquals(candidate(0), {})
    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})
    lu.assertEquals(candidate(1), {})
    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})
    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})
end

os.exit(lu.LuaUnit.run())"
HumanEval_97,kas_Arab,lua,"- مثالہٕ- فرض کرو کہ ان پٹ چُھ ہمیشہ موزوں۔- تہندِ یونٹ ہندسن ہند ضرب۔ - مکمل کٔرِو فَنکشن یُس زٕ عدد لیُوکھ تہٕ وَرُت -- >>> multiply(148, 412)
-- 16
-- >>> multiply(19, 28)
-- 72
-- >>> multiply(2020, 1851)
-- 0
-- >>> multiply(14, -15)
-- 20
local function multiply(a, b)
","local function multiply(a, b)
    local unitDigitA = math.abs(a) % 10
    local unitDigitB = math.abs(b) % 10
    return unitDigitA * unitDigitB
end","lu = require('luaunit')

function test_humaneval()
local candidate = multiply
    lu.assertEquals(candidate(148, 412), 16)
    lu.assertEquals(candidate(19, 28), 72)
    lu.assertEquals(candidate(2020, 1851), 0)
    lu.assertEquals(candidate(14, -15), 20)
    lu.assertEquals(candidate(76, 67), 42)
    lu.assertEquals(candidate(17, 27), 49)
    lu.assertEquals(candidate(0, 1), 0)
    lu.assertEquals(candidate(0, 0), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_98,kas_Arab,lua,"- مثلن: ٕ- اکھ سٹرنگ s دنہٕ آمت، اپرکیسٹر وولن ہندس تعدادس برابر انڈیکسس منٛز گنتی کرُن۔-- >>> count_upper('aBCdEf')
-- 1
-- >>> count_upper('abcdefg')
-- 0
-- >>> count_upper('dBBE')
-- 0
local function count_upper(s)
","local function count_upper(s)
    local count = 0
    local vowels = { A = true, E = true, I = true, O = true, U = true }
    for i = 1, #s, 2 do
        local char = s:sub(i, i)
        if vowels[char] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_upper
    lu.assertEquals(candidate('aBCdEf'), 1)
    lu.assertEquals(candidate('abcdefg'), 0)
    lu.assertEquals(candidate('dBBE'), 0)
    lu.assertEquals(candidate('B'), 0)
    lu.assertEquals(candidate('U'), 1)
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('EEEE'), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_99,kas_Arab,lua,"- مثالہٕ-دو عددن پیٹھ چُھ، صفرس نِش دور کران۔تہٕ چُھ ایمہِ نزدیک ترین عددٕ واپس کران۔ اگر یہٕ عدد چُھ مساوی فاصلہٕ پیٹھ۔اکھ فنکشن بنٲوِن یوس اکھ ویلیو (سٹرینگ) چُھ نیوان یوس اکھ نمبر چُھ ظٲہر کران۔-- >>> closest_integer('10')
-- 10
-- >>> closest_integer('15.3')
-- 15
-- Note:
-- Rounding away from zero means that if the given number is equidistant
-- from two integers, the one you should return is the one that is the
-- farthest from zero. For example closest_integer(""14.5"") should
-- return 15 and closest_integer(""-14.5"") should return -15.
local function closest_integer(value)
","local function closest_integer(value)
    local number = tonumber(value)
    if not number then
        error(""Invalid number"")
    end
    if number > 0 then
        return math.floor(number + 0.5)
    else
        return math.ceil(number - 0.5)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = closest_integer
    lu.assertEquals(candidate('10'), 10)
    lu.assertEquals(candidate('14.5'), 15)
    lu.assertEquals(candidate('-15.5'), -16)
    lu.assertEquals(candidate('15.3'), 15)
    lu.assertEquals(candidate('0'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_100,kas_Arab,lua,"- مثالہٕ- i چُھ سطحس (i+1) منز پتھرن ہنز تعداد ظٲہر کران۔- اکس ٹیبلس منٛز پرتھ سطحس منٛز کنوین ہنٛد تعداد واپس کرُن، یتہٕ عنصر اِنڈیکسس پیٹھ چُھ - - اگر n چُھ جُڑتو نمبر۔ - - اگر n چُھ عجیب تیلہٕ ہکو بیس عجیب نمبرس منتخب کٔرتھ۔ - بٔنِتھ درجس منز چِھ پتھریو سٕنز تعداد: - گۄڈنیُک نۄقطہٕ چُھ ن۔اکھ مثبت عدد n دینہٕ آمت، توہیہ چِھ پتھرک n سطحن ہند اکھ ڈھیر بناون۔-- >>> make_a_pile(3)
-- {3, 5, 7}
local function make_a_pile(n)
","local function make_a_pile(n)
    local pile = {}
    local current_stones = n
    for i = 1, n do
        table.insert(pile, current_stones)
        if n % 2 == 0 then
            current_stones = current_stones + 2
        else
            current_stones = current_stones + 2
        end
    end
    return pile
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_a_pile
    lu.assertEquals(candidate(3), {3, 5, 7})
    lu.assertEquals(candidate(4), {4, 6, 8, 10})
    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})
    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})
    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})
end

os.exit(lu.LuaUnit.run())"
HumanEval_101,kas_Arab,lua,"- مثلن: ٕ- سٹرنگس لفظن منٛز تقسیم کرُن تہٕ لفظن ہینز اکھ ٹیبل واپس کرُن۔توہہ چھہِ لفظن ہند اکھ سلسلہ یتھ کُنہِ کما یا اسپیسز سٕتۍ الگ کرنہٕ آمُت چُھ۔ توہہ ہکو یہٕ کٔرِتھ:-- >>> words_string('Hi, my name is John')
-- {'Hi', 'my', 'name', 'is', 'John'}
-- >>> words_string('One, two, three, four, five, six')
-- {'One', 'two', 'three', 'four', 'five', 'six'}
local function words_string(s)
","local function words_string(s)
    local words = {}
    for word in s:gmatch(""[^,%s]+"") do
        table.insert(words, word)
    end
    return words
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_string
    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_102,kas_Arab,lua,"- مثلن: ٕ- اگر چُھس نہٕ امہ کٲنٛسہ نمبرس برابر، تیلہٕ ہکو فنکشن -1 دیتتھ۔- ساروی کھوتہٕ بوڑ عدد یوس [x، y] کہِ رینجِ منز چُھ، اگر یہٕ فنکشن چُھ زٕ مثبت نمبر x تہٕ y نوان تہٕ چُھ ٕ پیٹھہٕ رٹان-- >>> choose_num(12, 15)
-- 14
-- >>> choose_num(13, 12)
-- -1
local function choose_num(x, y)
","local function choose_num(x, y)
    -- Ensure x is the smaller and y is the larger
    if x > y then
        x, y = y, x
    end
    
    -- Start from y and work backwards
    for i = y, x, -1 do
        if i % 2 == 0 then
            return i
        end
    end
    
    -- If no even number is found
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = choose_num
    lu.assertEquals(candidate(12, 15), 14)
    lu.assertEquals(candidate(13, 12), -1)
    lu.assertEquals(candidate(33, 12354), 12354)
    lu.assertEquals(candidate(5234, 5233), -1)
    lu.assertEquals(candidate(6, 29), 28)
    lu.assertEquals(candidate(27, 10), -1)
    lu.assertEquals(candidate(7, 7), -1)
    lu.assertEquals(candidate(546, 546), 546)
end

os.exit(lu.LuaUnit.run())"
HumanEval_103,kas_Arab,lua,"- مثال: ٕاگر n چُھ m کھوتہٕ بوڑ، تیلہٕ آو -1 واپس۔- جواب چُھ ساروی کھوتہٕ نزدیک عددُک تہٕ اتھ چُھ بائنری ہندسہٕ منز تبدیل کران۔- n پیٹھہٕ m تام عددٕچ اوسط (n تہٕ m شٲمل) ۔توہہٕ چِھ زٕ مثبت عدد n تہٕ m دنہٕ آمت، تہٕ توہہٕ چِھ یہٕ کَرنہٕ یُن کہ-- >>> rounded_avg(1, 5)
-- '0b11'
-- >>> rounded_avg(7, 5)
-- -1
-- >>> rounded_avg(10, 20)
-- '0b1111'
-- >>> rounded_avg(20, 33)
-- '0b11010'
local function rounded_avg(n, m)
","local function rounded_avg(n, m)
    if n > m then
        return -1
    end
    
    local sum = 0
    local count = 0

    for i = n, m do
        sum = sum + i
        count = count + 1
    end

    local average = sum / count
    local rounded_avg = math.floor(average + 0.5)

    return string.format(""0b%d"", tonumber(string.format(""%o"", rounded_avg), 8))
end","lu = require('luaunit')

function test_humaneval()
local candidate = rounded_avg
    lu.assertEquals(candidate(1, 5), '0b11')
    lu.assertEquals(candidate(7, 13), '0b1010')
    lu.assertEquals(candidate(964, 977), '0b1111001010')
    lu.assertEquals(candidate(996, 997), '0b1111100100')
    lu.assertEquals(candidate(560, 851), '0b1011000010')
    lu.assertEquals(candidate(185, 546), '0b101101110')
    lu.assertEquals(candidate(362, 496), '0b110101101')
    lu.assertEquals(candidate(350, 902), '0b1001110010')
    lu.assertEquals(candidate(197, 233), '0b11010111')
    lu.assertEquals(candidate(7, 5), -1)
    lu.assertEquals(candidate(5, 1), -1)
    lu.assertEquals(candidate(5, 5), '0b101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_104,kas_Arab,lua,"- مثلن: ٕ- نوٹ: واپس ینہٕ واجنہ ٹیبلہ چُھ بڑن واجنہ ترتیبس منٛز گژھن ترتیب دینہٕ ین۔- عناصر یم نہ کنٛہہ تہٕ عدد چِھ آسان۔مثبت عدد x ہٕنٛز ٹیبل دتھ، تمام مثبت عددن ہٕنٛز اکھ ترتیب شدہ ٹیبل واپس ییہٕ دنہٕ۔-- >>> unique_digits({15, 33, 1422, 1})
-- {1, 15, 33}
-- >>> unique_digits({152, 323, 1422, 10})
-- {}
local function unique_digits(x)
","local function has_even_digit(num)
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            return true
        end
        num = math.floor(num / 10)
    end
    return false
end

local function unique_digits(x)
    local result = {}
    for _, num in ipairs(x) do
        if not has_even_digit(num) then
            table.insert(result, num)
        end
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique_digits
    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})
    lu.assertEquals(candidate({152, 323, 1422, 10}), {})
    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})
    lu.assertEquals(candidate({135, 103, 31}), {31, 135})
end

os.exit(lu.LuaUnit.run())"
HumanEval_105,kas_Arab,lua,"- مثلن: ٕ- ""ون""، ""ٹو""، ""تھری""، ""فور""، ""فائیو""، ""شیکس""، ""سیون""، ""اٹھ""، ""ناین""۔- نتیجُک جدول الٹہٕ کٔرتھ، تہٕ پَتہٕ پرتھ ہندسہٕ امکس مُطٲبِق ناوس سۭتۍ تبدیل کٔرتھ - انٹیجرز ہندس اکس ٹیبلس دیتتھ، 1 پیٹھہٕ 9 تام، عددن چُھ ترتیب دینہٕ آمت، -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
--   If the table is empty, return an empty table:
-- >>> by_length({})
-- {}
--   If the table has any strange number ignore it:
-- >>> by_length({1, -1, 55})
-- {'One'}
local function by_length(arr)
","local function by_length(arr)
    local digits_names = {
        [1] = ""One"", [2] = ""Two"", [3] = ""Three"", [4] = ""Four"", [5] = ""Five"",
        [6] = ""Six"", [7] = ""Seven"", [8] = ""Eight"", [9] = ""Nine""
    }

    local filtered = {}
    for _, num in ipairs(arr) do
        if num >= 1 and num <= 9 then
            table.insert(filtered, num)
        end
    end

    table.sort(filtered, function(a, b) return a > b end)

    for i, num in ipairs(filtered) do
        filtered[i] = digits_names[num]
    end

    return filtered
end","lu = require('luaunit')

function test_humaneval()
local candidate = by_length
    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -1, 55}), {'One'})
    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_106,kas_Arab,lua,"- مثال: ٕ- i سُند فیکٹوریل چُھ 1 پیٹھ i تام اعدادن ہند ضرب (1 * 2 * ... * i) ۔-آہ، بہٕ چھُس اَکھ ڈاکٹَر۔- یا 1 پیٹھہٕ i تام نمبرن ہنز مجموعہٕ ورٲے۔ - تہٕ سائز n ہک اکھ ٹیبل چُھ واپس کران، یتھکن کہ انڈیکس i پیٹھ عنصرک قدر اگر i چُھ جڑتھ تیلہٕ چُھ i ہند فیکٹوریل۔- فنکشن f یُس پیرامیٹر کِس طورس پیٹھ n چُھ ننان چُھ لاگو کٔرِتھ، -- >>> f(5)
-- {1, 2, 6, 24, 15}
local function f(n)
","local function factorial(x)
    if x == 0 then
        return 1
    else
        local result = 1
        for i = 2, x do
            result = result * i
        end
        return result
    end
end

local function sum_to_i(x)
    return (x * (x + 1)) // 2
end

local function f(n)
    local result = {}
    for i = 1, n do
        if i % 2 == 0 then
            result[i] = factorial(i)
        else
            result[i] = sum_to_i(i)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = f
    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})
    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})
    lu.assertEquals(candidate(1), {1})
    lu.assertEquals(candidate(3), {1, 2, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_107,kas_Arab,lua,"- مثال 1: ٕ- انٹیجر پالنڈروم یم حد کہ اندر چِھ پکان (، 1، n) ، بشمول۔ - اکھ مثبت عدد n دنہٕ آمت، اکھ میز چُھ واپس کران یتھ منٛز پرٛیٚتھ تہٕ عجیب نمبرن ہٕنٛز تعداد چھےٚ آسان -- >>> even_odd_palindrome(3)
-- {1, 2}
--     Explanation:
--     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
-- Example 2:
-- >>> even_odd_palindrome(12)
-- {4, 6}
--     Explanation:
--     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
-- Note:
--     1. 1 <= n <= 10^3
--     2. returned table has the number of even and odd integer palindromes respectively.
local function even_odd_palindrome(n)
","local function is_palindrome(num)
    local str = tostring(num)
    return str == string.reverse(str)
end

local function even_odd_palindrome(n)
    local even_count = 0
    local odd_count = 0

    for i = 1, n do
        if is_palindrome(i) then
            if i % 2 == 0 then
                even_count = even_count + 1
            else
                odd_count = odd_count + 1
            end
        end
    end

    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_palindrome
    lu.assertEquals(candidate(123), {8, 13})
    lu.assertEquals(candidate(12), {4, 6})
    lu.assertEquals(candidate(3), {1, 2})
    lu.assertEquals(candidate(63), {6, 8})
    lu.assertEquals(candidate(25), {5, 6})
    lu.assertEquals(candidate(19), {4, 6})
    lu.assertEquals(candidate(9), {4, 5})
    lu.assertEquals(candidate(1), {0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_108,kas_Arab,lua,"- مثلن -123 چُھ ہندسہ -1, 2، تہٕ 3 پیٹھ اشارٕ۔ اگر اکھ عدد چُھ منفی، تیلہٕ چُھ امک گوڑنیک نشان زد ہندسہٕ منفی:۔- عناصرن ہٕنٛز تعداد یمکۍ ہندسن ہٕنٛد مجموعہ چھ 0 >۔- اکھ فنکشن لکھو count_nums یُس انٹیجرزن ہنز اکھ ٹیبل چُھ نوان تہٕ ریٹرن چُھ دیوان۔-- >>> count_nums({})
-- 0
-- >>> count_nums({-1, 11, -11})
-- 1
-- >>> count_nums({1, 1, 2})
-- 3
local function count_nums(arr)
","local function count_nums(arr)
    local function sum_of_digits(num)
        local sum = 0
        local is_negative = num < 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        if is_negative then
            sum = sum - 2 * (math.floor(math.abs(arr[index]) / 10 ^ (math.floor(math.log10(math.abs(arr[index]))))))
        end
        return sum
    end

    local count = 0
    for _, num in ipairs(arr) do
        local digit_sum = sum_of_digits(num)
        if digit_sum > 0 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_nums
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({-1, -2, 0}), 0)
    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)
    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)
    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)
    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)
    lu.assertEquals(candidate({0, 1}), 1)
    lu.assertEquals(candidate({1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_109,kas_Arab,lua,"- مثلن: ٔ- نوٹ: اتھ جدولس منز چِھ یقینی طورس پیٹھ منفرد عناصر۔اگر دِنہٕ آمُت ٹیبل چُھ خٲلی تیلہٕ چُھ صحیح واپس گژھان۔- توہہ چھوہ صحیح واپس گژھان۔ - اگر یہٕ چُھ ممکن زِ ترتیب شدہ ٹیبل ییہٕ امہٕ کھوتہٕ ہیرِم آپریشنہٕ کرتھ حٲصل کرنہٕ۔- میزس منز شروع گژھن واجین پوزیشن یعنی صفر ہند انڈیکس۔- پوزیشن صحیح سمتھ منٛز۔ ٹیبلک ٲخری عنصرس چُھ - اکھ دٲیِم شفٹ آپریشن چُھ ٹیبل کہِ تمام عناصرن منز چُھ اکھ منتقل کرٕن۔-توہیہِ ہیکوکھ یمہِ کھوتہ زیادہ تعدادس منز دٲخل گژھتھ۔- درج جدولس پیٹھ چُھ درج ذیل آپریشن: - یہٕ چُھ ممکن زِ ٹیبل ییہٕ ترتیب دینہٕ غٲر کم گژھنہٕ کس ترتیبس منٛز ییہٕ انجام دینہٕ۔- نمبرن ہنز ترتیب چِھ بے ترتیب۔ توہیہ چھوہ یہٕ طے کرُن زِ اگر- چِھس اکھ ٹیبل 'آرر' N انٹیجرزن ہند آر آر[1]، آر آر[2]، ..., آر آر[N]۔-- >>> move_one_ball({3, 4, 5, 1, 2})
-- true
-- Explanation: By performin 2 right shift operations, non-decreasing order can
--              be achieved for the given table.
-- >>> move_one_ball({3, 5, 4, 1, 2})
-- false
-- Explanation:It is not possible to get non-decreasing order for the given
--             table by performing any number of right shift operations.
local function move_one_ball(arr)
","local function move_one_ball(arr)
    local n = #arr
    if n == 0 then
        return true
    end

    local count_descending_pairs = 0

    for i = 1, n do
        if arr[i] > arr[(i % n) + 1] then
            count_descending_pairs = count_descending_pairs + 1
        end
        if count_descending_pairs > 1 then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = move_one_ball
    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)
    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)
    lu.assertEquals(candidate({4, 3, 1, 2}), false)
    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)
    lu.assertEquals(candidate({}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_110,kas_Arab,lua,"- مثلن: ٕ- اگر نہٕ، تہٕ ""نہٕ""۔- lst1 کہِ تمام عناصرن ہند ہندسہٕ چُھ یکساں، یمہِ سٕتۍ ""YES"" چُھ واپس گژھان۔- اگر LST1 تہٕ LST2 کہِ درمیان چُھ ایلیمنٹس کہِ تبادلہٕ کہِ امکان۔- ایسٹ1 تہٕ ایسٹ2 کہِ درمیان چُھ نہٕ تبادلے شدہ عناصرن ہنز تعدادس پیٹھ کانٛہہ حد۔- یمن درمیان چُھ صرف 1 ہندسہٕ ہند ٹیبل بناونہٕ خاطرٕ 1 ہندسہٕ بنان۔- تہٕ ییہٕ پرزٕناون کہ کیا عناصرن ہنٛد تبادلہٕ کرن چُھ ممکن۔اتھ مسلس منز، کرِو اکھ فنکشن لاگو یوس نمبرن ہند زٕ ٹیبل چُھ نوان، -- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})
-- 'YES'
-- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})
-- 'NO'
-- It is assumed that the input tables will be non-empty.
local function exchange(lst1, lst2)
","local function exchange(lst1, lst2)
    local is_all_even = true
    local odd_count_lst1 = 0
    local even_count_lst2 = 0

    -- Check lst1 for odd numbers
    for _, num in ipairs(lst1) do
        if num % 2 ~= 0 then
            odd_count_lst1 = odd_count_lst1 + 1
        end
    end

    -- Check lst2 for even numbers
    for _, num in ipairs(lst2) do
        if num % 2 == 0 then
            even_count_lst2 = even_count_lst2 + 1
        end
    end

    -- It is possible to make lst1 all even if the number of odd elements
    -- in lst1 can be swapped with the number of even elements in lst2
    if odd_count_lst1 <= even_count_lst2 then
        return ""YES""
    else
        return ""NO""
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = exchange
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')
    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')
    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')
    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')
end

os.exit(lu.LuaUnit.run())"
HumanEval_111,kas_Arab,lua,"- مثال: ٕاگر زن تہِ کانہہ حرف تہِ چُھ، تہٕ ییہٕ چُھ ہاونہٕ۔- اَتھ حرفس پٮ۪ٹھ یُس زیادٕہ تکرار گژھُن چُھ تہٕ یُس اَتھ حسابَس مُطابق چُھ- اگر اکھ سٹرنگ یس اکھ اسپیس سیپیرایزڈ لوکلسٹ حروفچ نمائندگی کران چھ، اکھ ٹیبل واپس کرُن -- >>> histogram('a b c')
-- {['a'] = 1, ['b'] = 1, ['c'] = 1}
-- >>> histogram('a b b a')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('a b c a b')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('b b b b a')
-- {['b'] = 4}
-- >>> histogram('')
-- {}
local function histogram(test)
","local function histogram(test)
    if test == """" then return {} end
    
    local words = {}
    for word in test:gmatch(""%S"") do
        words[word] = (words[word] or 0) + 1
    end
    
    local max_count = 0
    local result = {}
    for letter, count in pairs(words) do
        if count > max_count then
            max_count = count
            result = {[letter] = count}
        elseif count == max_count then
            result[letter] = count
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = histogram
    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('a'), {['a'] = 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_112,kas_Arab,lua,"- مثال ٕتوہیہ پزِ ٹیبلہِ پیٹھہٕ رٹنہٕ یتھ منز رِزلٹ سٹرنگ تہٕ ٹرو/فالس چِھ آسان۔اکھ سٹرنگ چِھ پالنڈروم وننہٕ یوان اگر سُہٕ پٔتِمہٕ بجہٕ برونٹھ چُھ پکان۔-پتہٕ چُھ یہٕ چیک کرُن زِ کیا نتیجہ چُھ سٹرنگ پالنڈروم۔ -سِٹریم ایس تہٕ سی چھِ دوٛن سٹریننگن ہٕنٛدۍ، توٚہۍ چھِ ایس منٛز موجود تمام حروف حذف کرٕنۍ پیوان یم سی منٛز کٲنٛسہ تہٕ حروفس برابر چھِ- ٹاسک -- >>> reverse_delete('abcde', 'ae')
-- {'bcd', false}
-- >>> reverse_delete('abcdef', 'b')
-- {'acdef', false}
-- >>> reverse_delete('abcdedcba', 'ab')
-- {'cdedc', true}
local function reverse_delete(s, c)
","local function reverse_delete(s, c)
    -- Create a set for characters to delete
    local delete_set = {}
    for i = 1, #c do
        delete_set[c:sub(i, i)] = true
    end
    
    -- Create the result string by filtering out characters in delete_set
    local result = {}
    for i = 1, #s do
        local char = s:sub(i, i)
        if not delete_set[char] then
            table.insert(result, char)
        end
    end
    
    -- Convert result table to string
    local result_str = table.concat(result)
    
    -- Check if the result string is a palindrome
    local is_palindrome = true
    local len = #result_str
    for i = 1, math.floor(len / 2) do
        if result_str:sub(i, i) ~= result_str:sub(len - i + 1, len - i + 1) then
            is_palindrome = false
            break
        end
    end
    
    -- Return the result string and palindrome check as a table
    return {result_str, is_palindrome}
end","lu = require('luaunit')

function test_humaneval()
local candidate = reverse_delete
    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
    lu.assertEquals(candidate('a', 'a'), {'', true})
    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
    lu.assertEquals(candidate('mamma', 'mia'), {'', true})
end

os.exit(lu.LuaUnit.run())"
HumanEval_113,kas_Arab,lua,"- ان پٹ کہِ i'th سٹرنگس منز چِھ عجیب ہندسن ہند تعداد۔- ان پٹچ سٹرنگ i۔"" یتہِ تمام i گژھہِ ہندسہٕ سۭتۍ تبدیل گژھُن - پٹُک پرٛیٚتھ عنصر i گژھہِ ""فریڈس منٛز عجیب عناصرن ہٕنٛز تعداد"" آسن۔- تارن ہندس اکس ٹیبلس دیتمت، یتہٕ پرتھ تارس منٛز چِھ صرف ہندسہٕ آسان، اکھ ٹیبل دیتُن۔ -- >>> odd_count({'1234567'})
-- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}
-- >>> odd_count({'3', '11111111'})
-- {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'}
local function odd_count(lst)
","local function odd_count(lst)
    local result = {}
    for _, str in ipairs(lst) do
        local odd_count = 0
        for i = 1, #str do
            local digit = tonumber(str:sub(i, i))
            if digit % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        local element = string.format(""the number of odd elements %dn the str%1dng %d of the %d"", odd_count, odd_count, odd_count, odd_count)
        result[#result + 1] = element
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = odd_count
    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the str4ng 4 of the 4nput.'})
    lu.assertEquals(candidate({'3', '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'})
    lu.assertEquals(candidate({'271', '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_114,kas_Arab,lua,"- مثال ٕ- از چھہِ وارےاہ۔- انٹیجرزن ہندس اکس ٹیبلس دِنہٕ آمت، کنہٕ تہٕ غٲر خٲلی ذیلی ٹیبلک کم کھوتہٕ کم مجموعہٕ ژھانٛڈو -- >>> minSubArraySum({2, 3, 4, 1, 2, 4})
-- 1
-- >>> minSubArraySum({-1, -2, -3})
-- -6
local function minSubArraySum(nums)
","local function minSubArraySum(nums)
    local min_sum = nums[1]
    local current_sum = nums[1]

    for i = 2, #nums do
        current_sum = math.min(nums[i], current_sum + nums[i])
        min_sum = math.min(min_sum, current_sum)
    end

    return min_sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = minSubArraySum
    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)
    lu.assertEquals(candidate({-1, -2, -3}), -6)
    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)
    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)
    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)
    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)
    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)
    lu.assertEquals(candidate({-10}), -10)
    lu.assertEquals(candidate({7}), 7)
    lu.assertEquals(candidate({1, -1}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_115,kas_Arab,lua,"- مثال 1: ٕ- کُس تعدادس منز چھیہ توہیہ بوزناونچ ضرورت۔-تہنز کٲم چھ یہ زِ کنڈہٕ استعمال کرِتھ گژھہِ نلۍ خالی۔- تہٕ تمام بالٹیہٕ چِھ اکس جیسی۔ - پرتھ بُتھس چُھ اکھ مُطابقہ بوکٹ آسان یُس امہٕ سۭتۍ آب ننہٕ خاطرٕ استعمال ہیکو کرتھ، - تہٕ پرتھ 1ٕچ قطارٕ چُھ آبچ اکھ اکائی ہنز نمائندگی کران۔- توہیہ چھیہ کنہِ ہندِ گرڈُک اکھ مستطیل شکل۔ پرتھ صفہ چھیہ اکس کنہِ ہندِ نمائندگی کران۔-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)
-- 6
-- Example 2:
-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2)
-- 5
-- Example 3:
-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)
-- 0
-- Constraints:
--     * all wells have the same length
--     * 1 <= grid.length <= 10^2
--     * 1 <= grid[:,1].length <= 10^2
--     * grid[i][j] -> 0 | 1
--     * 1 <= capacity <= 10
local function max_fill(grid, capacity)
","local function max_fill(grid, capacity)
    local total_units = 0

    -- Traverse each well in the grid
    for i = 1, #grid do
        for j = 1, #grid[i] do
            total_units = total_units + grid[i][j]
        end
    end

    -- Calculate the number of times the bucket needs to be lowered
    local num_lowerings = math.ceil(total_units / capacity)

    return num_lowerings
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_fill
    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)
    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)
    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_116,kas_Arab,lua,"-یہ گژھہِ پورہ پگاہ نفاذ گژھہِ-- یکساں نمبرن ہنز ترتیب چھہ اعشاریہ کس قدرس پیٹھ مبنی۔- تعداد اکائین ہند بائنری نمائندگی منز چُھ بڑھنہٕ کہِ ترتیبس منز۔اتھ کٹاہس منز چُھ، توہیہ چُھ اکھ میز ترتیب دینہٕ خٲطرٕہ غیر منفی عددن ہنز ترتیب -- >>> sort_array({1, 5, 2, 3, 4})
-- {1, 2, 3, 4, 5}
-- >>> sort_array({-2, -3, -4, -5, -6})
-- {-6, -5, -4, -3, -2}
-- >>> sort_array({1, 0, 2, 3, 4})
-- {0, 1, 2, 3, 4}
local function sort_array(arr)
","local function count_ones(n)
    local count = 0
    while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
    end
    return count
end

local function sort_array(arr)
    table.sort(arr, function(a, b)
        local ones_a = count_ones(math.abs(a))
        local ones_b = count_ones(math.abs(b))
        if ones_a == ones_b then
            return a < b
        else
            return ones_a < ones_b
        end
    end)
    return arr
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
    lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
end

os.exit(lu.LuaUnit.run())"
HumanEval_117,kas_Arab,lua,"- مثالہٕ- نوٹ: توہیہ ہیکہِ یہٕ فرض کٔرِتھ زِ ان پٹ سٹرنگ منز چِھ صرف لیٹرز تہٕ اسپیسز۔اگر سٹرنگ s چُھ خٲلی تہٕ فنکشن گژھہٕ خٲلی ٹیبل واپس نِنٕکۍ قٲبل۔- n ہم آہنگی، ترتیب وار یِم لفظ چِھ سٹرنگ s منٛز ظٲہر گژھان۔ اکھ فنکشن یُس سٹرنگ s پیٹھ تمام لفظن ہنز ٹیبل چُھ رٹان ییتھ منٛز بالکل - اکھ سٹرنگ s تہٕ اکھ نیچرل نمبر n دنہٕ آمت، توہی چِھ ایمہٕ عملہٕ لاگو کرنچ کٲم کرمژ۔-- >>> select_words('Mary had a little lamb', 4)
-- {'little'}
-- >>> select_words('Mary had a little lamb', 3)
-- {'Mary', 'lamb'}
-- >>> select_words('simple white space', 2)
-- {}
-- >>> select_words('Hello world', 4)
-- {'world'}
-- >>> select_words('Uncle sam', 3)
-- {'Uncle'}
local function select_words(s, n)
","local function select_words(s, n)
    local vowels = { a = true, e = true, i = true, o = true, u = true,
                     A = true, E = true, I = true, O = true, U = true }
    local result = {}
    
    for word in s:gmatch(""%S+"") do
        local consonant_count = 0
        for char in word:gmatch(""%a"") do
            if not vowels[char] then
                consonant_count = consonant_count + 1
            end
        end
        if consonant_count == n then
            table.insert(result, word)
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = select_words
    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})
    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})
    lu.assertEquals(candidate('simple white space', 2), {})
    lu.assertEquals(candidate('Hello world', 4), {'world'})
    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})
    lu.assertEquals(candidate('', 4), {})
    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_118,kas_Arab,lua,"- مثال: ٕ- توہیہ ہیکیو یہٕ فرض کرتھ زِ دیتُنہٕ آمت سٹرنگس منٛز چُھ صرف انگریزی حرف۔ - کانہہ تہِ حرفی پتہٕ ییہِ وٕنہِ زِ ایمِچ شرط چھے پورٕ گژھان۔- وولن چُھ نہٕ شروعس منز شمار گژھان تہٕ نہ چُھ اختتامس منز۔ اگر توہہٕ یہٕ نہٕ کرِتھ کینٛہہ تہٕ چُھ تہٕ چُھکھ خألی تار واپس کران۔- لفظس دچھنہِ طرفہٕ زٕ ہم آہنگی (case sensitive) ۔توہہ چھوہ اکھ لفظ تہٕ ونان۔ توہہ چھوہ امہ کس درمیان قریب ترین حرف تلاش کرنچ کوشش کران۔-- >>> get_closest_vowel('yogurt')
-- 'u'
-- >>> get_closest_vowel('FULL')
-- 'U'
-- >>> get_closest_vowel('quick')
-- ''
-- >>> get_closest_vowel('ab')
-- ''
local function get_closest_vowel(word)
","local function get_closest_vowel(word)
    local vowels = ""AEIOUaeiou""
    local found_vowel = false
    local last_consonant = false

    for i = #word - 1, 2, -1 do
        local char = word:sub(i, i)
        if vowels:find(char) then
            if last_consonant then
                return char
            end
            found_vowel = true
        else
            if found_vowel then
                return ''
            end
            last_consonant = true
        end
    end

    return ''
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_closest_vowel
    lu.assertEquals(candidate('yogurt'), 'u')
    lu.assertEquals(candidate('full'), 'u')
    lu.assertEquals(candidate('easy'), '')
    lu.assertEquals(candidate('eAsy'), '')
    lu.assertEquals(candidate('ali'), '')
    lu.assertEquals(candidate('bad'), 'a')
    lu.assertEquals(candidate('most'), 'o')
    lu.assertEquals(candidate('ab'), '')
    lu.assertEquals(candidate('ba'), '')
    lu.assertEquals(candidate('quick'), '')
    lu.assertEquals(candidate('anime'), 'i')
    lu.assertEquals(candidate('Asia'), '')
    lu.assertEquals(candidate('Above'), 'o')
end

os.exit(lu.LuaUnit.run())"
HumanEval_119,kas_Arab,lua,"- مثالہٕ- اگر اکھ اصل تار بناونک طریقہٕ آسہٕ، تہٕ 'ہاں' واپس ییہٕ دنہٕ، تہٕ بصورت دیگر 'نہٕ'۔- ""((("" چُھ نٔ۔ ٔ- چِھ متوازن۔ مثالہٕ پٲٹھۍ: تار '(()))) چُھ اصل، ییلہِ زَن کہِ تار اکھ سٹرنگ S چِھ صٔحی ماننہٕ یوان اگر تہٕ صرف اگر سٹرنگ S منٛز چِھ تمام parentheses۔- کینٛہہ ترتیب، کہِ نتیجس منز سٹرنگ گژھہِ اصل۔- تہندِ کامہٕ چھ یہٕ چیک کرُن زِ کیا یہٕ ممکن چُھ زِ دۄن تارن اندر جُڑتھ - صرف parentheses "" (("" یا parentheses "") "" پیٹھ۔- توہیہ چھیہ دوٚن تارن ہند اکھ میز، دۄنوے تارن چھیہ اوپن۔-- >>> match_parens({'()(', ')'})
-- 'Yes'
-- >>> match_parens({')', ')'})
-- 'No'
local function match_parens(lst)
","local function match_parens(lst)
    local function is_balanced(s)
        local balance = 0
        for i = 1, #s do
            if s:sub(i,i) == '(' then
                balance = balance + 1
            else
                balance = balance - 1
            end

            if balance < 0 then
                return false
            end
        end
        return balance == 0
    end

    local s1, s2 = lst[1], lst[2]
    return (is_balanced(s1 .. s2) or is_balanced(s2 .. s1)) and 'Yes' or 'No'
end","lu = require('luaunit')

function test_humaneval()
local candidate = match_parens
    lu.assertEquals(candidate({'()(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', ')'}), 'No')
    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
    lu.assertEquals(candidate({'()', '())'}), 'No')
    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
    lu.assertEquals(candidate({'((((', '((())'}), 'No')
    lu.assertEquals(candidate({')(()', '(()('}), 'No')
    lu.assertEquals(candidate({')(', ')('}), 'No')
    lu.assertEquals(candidate({'(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', '('}), 'Yes')
end

os.exit(lu.LuaUnit.run())"
HumanEval_120,kas_Arab,lua,"- مثال 1: ٕ- زیٹھۍ k آر آرس منٛز زیٹھۍ k نمبرن سۭتۍ۔- انٹیجرز ہند اکھ ٹیبل arr تہٕ اکھ مثبت انٹیجر k دینہٕ آمت، چُھ اکھ ترتیب شدہ ٹیبل واپس کران۔-- >>> maximum({-3, -4, 5}, 3)
-- {-4, -3, 5}
-- Example 2:
-- >>> maximum({4, -4, 4}, 2)
-- {4, 4}
-- Example 3:
-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)
-- {2}
-- Note:
--     1. The length of the table will be in the range of [1, 1000].
--     2. The elements in the table will be in the range of [-1000, 1000].
--     3. 0 <= k <= len(arr)
local function maximum(arr, k)
","local function maximum(arr, k)
    table.sort(arr, function(a, b) return a > b end)
    local result = {}
    for i = 1, k do
        table.insert(result, arr[i])
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = maximum
    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})
    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})
    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})
    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})
    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})
    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})
    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})
    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})
    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})
    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})
    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_121,kas_Arab,lua,"- مثالہٕ- انٹیجرزن ہند اکھ غٲر خالی ٹیبل دِنہٕ آمت، تمام عجیب عناصرن ہند مجموعہ چُھ واپس کران یم برابر پوزیشنن پیٹھ چِھ۔-- >>> solution({5, 8, 7, 1})
-- 12
-- >>> solution({3, 3, 3, 3, 3})
-- 9
-- >>> solution({30, 13, 24, 321})
-- 0
local function solution(lst)
","local function solution(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 1 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = solution
    lu.assertEquals(candidate({5, 8, 7, 1}), 12)
    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)
    lu.assertEquals(candidate({30, 13, 24, 321}), 0)
    lu.assertEquals(candidate({5, 9}), 5)
    lu.assertEquals(candidate({2, 4, 8}), 0)
    lu.assertEquals(candidate({30, 13, 23, 32}), 23)
    lu.assertEquals(candidate({3, 13, 2, 9}), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_122,kas_Arab,lua,"- مثال: ٕ- آر آر کیٛن گوڑنکیٛن k عناصرن منٛز چھ زیادٕ کھوتہٕ زیادٕ دوٛن ہندسن ہند مجموعہ۔آر آر تہٕ اکھ انٹیجر k، کیٛن غٲر خالی ٹیبلن ہند پیش نظر، واپسی -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
-- 24
-- Constraints:
--     1. 1 <= len(arr) <= 100
--     2. 1 <= k <= len(arr)
local function add_elements(arr, k)
","local function add_elements(arr, k)
    local sum = 0
    for i = 1, k do
        local element = arr[i]
        if element >= -99 and element <= 99 then
            sum = sum + element
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add_elements
    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
    lu.assertEquals(candidate({1}, 1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_123,kas_Arab,lua,"- get_odd_collatz(5) چُھ [1, 5] واپس کران۔ # 5 کِس collatz ترتیبس چُھ [5, 16, 8, 4, 2, 1] ، لہذا چِھ عجیب نمبر صرف 1 تہٕ 5۔- مثلن: ٔ- 2. واپس گژھن وول ٹیبل چُھ بڑن واجنہِ ترتیبس منز ترتیب دِنہ آمُت۔- 1. کولٹز (۱) چُھ [1]۔- نوٹ: ٕقیاس چُھ یہٕ زِ n کہ کُنہٕ تہٕ قدرٕ کہ باوجود، ترتیب چِھ ہمیشہ 1 تام واتان۔اگر سابقہ چُھ عجیب، تیلہٕ چُھ اگلی اصطلاح پچھلی اصطلاح کھوتہٕ 3 گنا زیادٕ آسان۔- پٔتِمہِ اصطلاح کہِ طورس پیٹھ: اگر پٔتِمہِ اصطلاح چِھ even، تہٕ بییہِ اصطلاح چِھ ہافٕک۔- ییتھ پانٹھ: کنہہ تہٕ مثبت عدد n سۭتۍ شروع کرو۔ پتہٕ پرتھ اصطلاح چُھ  پیٹھہٕ حأصل یوان کرنہٕ۔کولٹز قیاس چُھ ریاضی منٛز اکھ قیاس یُس اکھ ترتیب سۭتۍ متعلق چُھ۔- اکھ مثبت عدد n دینہٕ آمت، چُھ اکھ ترتیب شدہ جدول واپس کران یتھ منٛز کُلٹز ترتیبس منٛز عجیب نمبر چِھ۔-- >>> get_odd_collatz(5)
-- {1, 5}
local function get_odd_collatz(n)
","local function get_odd_collatz(n)
    local collatz_sequence = {}
    while n ~= 1 do
        if n % 2 == 1 then
            table.insert(collatz_sequence, n)
        end
        if n % 2 == 0 then
            n = n / 2
        else
            n = 3 * n + 1
        end
    end
    table.insert(collatz_sequence, 1)  -- Always add 1 as the sequence ends with 1
    
    -- Remove duplicates and sort the table
    local unique_odds = {}
    for _, num in ipairs(collatz_sequence) do
        unique_odds[num] = true
    end

    local sorted_odds = {}
    for num, _ in pairs(unique_odds) do
        table.insert(sorted_odds, num)
    end
    table.sort(sorted_odds)

    return sorted_odds
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_odd_collatz
    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(5), {1, 5})
    lu.assertEquals(candidate(12), {1, 3, 5})
    lu.assertEquals(candidate(1), {1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_124,kas_Arab,lua,"تاریخ ہیکوکھ یمہٕ فارمیٹس منٛز لیکھتھ:  مَہٕ  یَیییی- 3 مہٕ لَرٕ یَن 1 کھۄتہٕ کم تہٕ 12 کھۄتہٕ زیادٕ ہون نہٕ- 2 مہینن ہندس تعدادس منز چُھ نہٕ 1 کھوتہٕ کم تہٕ نہٕ 31 دنہٕ کینٛہہ 1،3،5،7،8،10،12 مہینن ہندس تعدادس منز چُھ نہٕ 1 کھوتہٕ کم تہٕ نہٕ 30 دنہٕ کینٛہہ 4،6،9،11 مہینن ہندس تعدادس منز چُھ نہٕ 1 کھوتہٕ کم تہٕ نہٕ 29 مہینن ہندس تعدادس منز چُھ نہٕ 29 دنہٕ کینٛہہ 2۔- ۱۔ ڈیٹ سٹرنگ چھیہ نہ خالی۔- یمہٕ تاریخچ چھ درستگی اگر تمام مندرجہ ذیل قواعدچ تعمیل آسہٕ: - اگر یِہ ڈاٹ چُھ درست تیلہٕ چُھ درست واپس گژھان۔ بصورت دیگر غلط۔ توہیہ چھِ اکھ فنکشن لیکھان یُس کُنہِ دِنہٕ آمژِ ڈاٹ سٹرنگس پَتہٕ چُھ تصدیق کران تہٕ -- >>> valid_date('03-11-2000')
-- true
-- >>> valid_date('15-01-2012')
-- false
-- >>> valid_date('04-0-2040')
-- false
-- >>> valid_date('06-04-2020')
-- true
-- >>> valid_date('06/04/2020')
-- false
local function valid_date(date)
","local function valid_date(date)
    if date == """" then
        return false
    end
    
    local month, day, year = date:match(""^(%d%d)%-(%d%d)%-(%d%d%d%d)$"")
    
    if not month or not day or not year then
        return false
    end
    
    month = tonumber(month)
    day = tonumber(day)
    year = tonumber(year)
    
    if month < 1 or month > 12 then
        return false
    end
    
    local days_in_month = {
        [1] = 31,
        [2] = 29, -- Leap year check not required for this problem
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
    }
    
    if day < 1 or day > days_in_month[month] then
        return false
    end
    
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = valid_date
    lu.assertEquals(candidate('03-11-2000'), true)
    lu.assertEquals(candidate('15-01-2012'), false)
    lu.assertEquals(candidate('04-0-2040'), false)
    lu.assertEquals(candidate('06-04-2020'), true)
    lu.assertEquals(candidate('01-01-2007'), true)
    lu.assertEquals(candidate('03-32-2011'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('04-31-3000'), false)
    lu.assertEquals(candidate('06-06-2005'), true)
    lu.assertEquals(candidate('21-31-2000'), false)
    lu.assertEquals(candidate('04-12-2003'), true)
    lu.assertEquals(candidate('04122003'), false)
    lu.assertEquals(candidate('20030412'), false)
    lu.assertEquals(candidate('2003-04'), false)
    lu.assertEquals(candidate('2003-04-12'), false)
    lu.assertEquals(candidate('04-2003'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_125,kas_Arab,lua,"- مثالہٕ- حروف تہجی، آرڈ (a) = 0، آرڈ (b) = 1، ... آرڈ (z) = 25 - کوما کہِ ذریعہٕ گژھہِ تقسیم کرنہٕ یِن '، اگر کوما چُھ نہٕ موجود کینٛہہ تہٕ توہیہٕ پزِ کمٕکہِ لیٹرٕ ہند تعداد واپس کرِتھ - اگر لفظن ہند اکھ تارٕ دِنہٕ آمت چُھ، توہیہ چُھ وٕنہٕ کہ وٕنہٕ وٲلس متنس منز چُھ نہٕ وٲلس متنس منز موجود کینٛہہ، وٕنہٕ وٕنہٕ وٲلس متنس منز چُھ وٕنہٕ وٲلس متنس منز تقسیم کرنہٕ آمت۔-- >>> split_words('Hello world!')
-- {'Hello', 'world!'}
-- >>> split_words('Hello,world!')
-- {'Hello', 'world!'}
-- >>> split_words('abcdef')
-- 3
local function split_words(txt)
","local function split_words(txt)
    -- Check if there is any whitespace to split on
    if txt:find(""%s"") then
        local words = {}
        for word in txt:gmatch(""%S+"") do
            table.insert(words, word)
        end
        return words
    end

    -- Check if there are commas to split on
    if txt:find("","") then
        local words = {}
        for word in txt:gmatch(""([^,]+)"") do
            table.insert(words, word)
        end
        return words
    end

    -- Otherwise, count the number of lowercase letters with odd order
    local count = 0
    for i = 1, #txt do
        local char = txt:sub(i, i)
        local ord = char:byte() - string.byte('a')
        if ord >= 0 and ord <= 25 and ord % 2 == 1 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = split_words
    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
    lu.assertEquals(candidate('abcdef'), 3)
    lu.assertEquals(candidate('aaabb'), 2)
    lu.assertEquals(candidate('aaaBb'), 1)
    lu.assertEquals(candidate(''), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_126,kas_Arab,lua,"- مثالہٕ- نمبر، ریٹرن غلط۔ فرض کرو کہ کنہہ منفی نمبر تہٕ صرف انٹیجر۔اگر ٹیبلہ منز چُھ ایکہِ کھوتہٕ زیادٕہ ڈوپلیکیٹ آسنہٕ کینٛہہ۔- نمبر ٹیبل دِنہٕ آمت، ییہٕ وٕنکھن زِ کیا چُھ ترتیب دینہٕ آمت یا نہٕ -- >>> is_sorted({5})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5})
-- false
-- >>> is_sorted({1, 2, 3, 4, 5, 6})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})
-- false
-- >>> is_sorted({1, 2, 2, 3, 3, 4})
-- true
-- >>> is_sorted({1, 2, 2, 2, 3, 4})
-- false
local function is_sorted(lst)
","local function is_sorted(lst)
    local seen = {}
    for i = 1, #lst - 1 do
        if lst[i] > lst[i + 1] then
            return false
        end
    end

    for _, num in ipairs(lst) do
        if seen[num] then
            seen[num] = seen[num] + 1
            if seen[num] > 2 then
                return false
            end
        else
            seen[num] = 1
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_sorted
    lu.assertEquals(candidate({5}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)
    lu.assertEquals(candidate({}), true)
    lu.assertEquals(candidate({1}), true)
    lu.assertEquals(candidate({3, 2, 1}), false)
    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)
    lu.assertEquals(candidate({1, 2, 3, 4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_127,kas_Arab,lua,"- [ان پٹ/آؤٹ پٹ] نمونے: اگر زٕ چِھ نہٕ، توہہٕ چِھ ویلیو ""NO"" واپس کران۔- اگر نہٕ، تہٕ ""NO"" واپس آسُن۔ اگر چُھ اِنٹرسیکشنُک طولُوب اکھ پرائم نمبر، تہٕ چُھ ""YES"" ونان، تہٕ پتہٕ چُھ ""RETURN""۔- یمیک لمبائی چُھ 1، یوس نہٕ اکھ پرائم نمبر چُھ۔ - مثلن، فریکشن (1, 3) ، (2, 4) کِس چِھ (2, 3) ۔- فاصلہ چُھ اکھ بنیٲدی نمبر۔ -تہند کٲم چھ یہ دٔریافت کرن زِ کیا تم چھ یمن دۄن ہندس جڑن ہند لمبائی - پرتھ اکس وقفس خٲطرٕ، چُھ یہٕ فرض یوان کرنہٕ زِ امک آغاز چُھ امک اختتامس برابر یا امہٕ کھوتہٕ کم۔- شٲمل چُھ آغاز تہٕ اختتام دۄشوَنی۔ - دیتُن فاصلہٕ چُھ بند آسان یمک مطلب چُھ زِ فاصلہٕ (شروع، اختتام) چُھ - یتہِ پرتھ انٹیرِل چُھ پورٕ عددُک جوڑ۔ مثلن، انٹیرل = (شروع، اختتام) = (1, 2) ۔- توہہِ چھا زٕ ٹاکار۔-- >>> intersection({1, 2}, {2, 3})
-- 'NO'
-- >>> intersection({-1, 1}, {0, 4})
-- 'NO'
-- >>> intersection({-3, -1}, {-5, 5})
-- 'YES'
local function intersection(interval1, interval2)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    if num <= 3 then
        return true
    end
    if num % 2 == 0 or num % 3 == 0 then
        return false
    end
    for i = 5, math.sqrt(num), 6 do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function intersection(interval1, interval2)
    local start1, end1 = interval1[1], interval1[2]
    local start2, end2 = interval2[1], interval2[2]
    
    local intersection_start = math.max(start1, start2)
    local intersection_end = math.min(end1, end2)
    
    if intersection_start > intersection_end then
        return 'NO'
    end
    
    local intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length) then
        return 'YES'
    else
        return 'NO'
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersection
    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')
    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')
    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')
    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')
    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')
    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')
    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')
    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')
end

os.exit(lu.LuaUnit.run())"
HumanEval_128,kas_Arab,lua,"- مثال: ٕ- نوٹ: خالی آر آر ہٕنٛد خٲطرٕ آو نہٕ کٲنٛسہ تہ واپس۔- چُھ ٹیبلہِ منز ہر کُنہِ نمبرٕچ نمٲئندگی 1، -1 یا 0 سٕتۍ کران۔- انٹیجرزن ہندس مقدارن ہند مجموعہ چُھ تمام علامتن ہند پروڈکٹ سٕتۍ ضرب۔توہہ چھیہ پورہ نمبرس پیٹھ ٹیبل آرڈراڈ کرنہ آمت تہ توہہ چھیہ واپس گژھنہٕ پیوان۔-- >>> prod_signs({1, 2, 2, -4})
-- 9
-- >>> prod_signs({0, 1})
-- 0
-- >>> prod_signs({})
-- None
local function prod_signs(arr)
","local function prod_signs(arr)
    if #arr == 0 then
        return nil
    end

    local sum_magnitudes = 0
    local product_signs = 1

    for _, num in ipairs(arr) do
        sum_magnitudes = sum_magnitudes + math.abs(num)
        if num > 0 then
            product_signs = product_signs * 1
        elseif num < 0 then
            product_signs = product_signs * -1
        else
            product_signs = 0
            break
        end
    end

    return sum_magnitudes * product_signs
end","lu = require('luaunit')

function test_humaneval()
local candidate = prod_signs
    lu.assertEquals(candidate({1, 2, 2, -4}), -9)
    lu.assertEquals(candidate({0, 1}), 0)
    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_129,kas_Arab,lua,"- مثالہٕ- سیلزن پیٹھ اقدارن ہنٛز اکھ ترتیب شدہ ٹیبل یٔسہٕ کم کھوتہٕ کم پاتھ سۭتۍ گژھہٕ واپس۔- یِہ چُھ ضمانت زِ جواب چُھ منفرد۔ - lst_A[j] = lst_B[j]۔ ٕ- یتھ کٔنۍ lst_A[i] < lst_B[i] تہٕ پرٛیٚتھ j (1 <= j < i) خٲطرٕ چُھ- than lst_B، دوسرے لفظوں میں، وہاں موجود ایک عدد انڈیکس i (1 <= i <= k) - (آوٕ کرُن تمن lst_A تہٕ lst_B ناو) ، lst_A چُھ لغوی لحاظہٕ سۭتۍ کم۔- ترتیب شدہ ٹیبل بناونہٕ پتہٕ یم قدر سیلن پیٹھ چِھ A تہٕ B گژھن۔- اکھ وتھ A (چُھ لمبائی k) اکھ وتھ B (چُھ لمبائی k) کھوتہٕ کم سمجھنہٕ یوان اگر - توہہ چھیہ نہٕ گرڈس نش وکھ ہیکان۔- ضروری طور پرمتفرق) ۔براہِ کرم نوٹ کٔرو زِ k لمبٲے کہِ پاتھ کہِ معنی چُھ بالکل k سیلن ہند دورٕ کرنُک (نہٕ کہِ صرف k سیل) ۔- سیل۔ -دٔیمین لفظن منٛز، توہیہ ہیکیو سیلن منٛز گژھتھ یمو زن توہیہٕ سۭتۍ اکھ کنڈ چُھ شیئر کران۔- کانٛہہ تہٕ سیل، تہٕ پرتھ کٲمٕ منٛز ہیکہِ توہہِ کونہِ تہٕ ہمساین سیلن منز منتقل کرِتھ،توہیہ ہیکو گرڈس منز k کہِ لمبٲے کہِ کم از کم پاتھ تلاش کٔرِتھ۔ توہیہ ہیکہِ شروع کٔرِتھ۔- گِرڈُک سیل چُھ انکلکلس پیٹھ بالکل اَکِ لٹہِ ظٲہر گژھان۔ گرڈُک پرٛیٚتھ سیل چھُ اَکھ ویلیو تھاوان۔ ہر عدد چُھ [1, N * N] رینجس منٛز آسان۔- N قطار تہٕ N کالمس (N >= 2) تہٕ اکھ مثبت عدد k، سۭتۍ اکھ گرڈ دینہٕ آمت، -- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3)
-- {1, 2, 1}
-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)
-- {1}
local function minPath(grid, k)
","local function minPath(grid, k)
    local N = #grid
    local directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}

    -- Check if a position is within the grid boundaries
    local function inBounds(x, y)
        return x >= 1 and x <= N and y >= 1 and y <= N
    end

    -- DFS to find the minimum path of length k
    local function dfs(x, y, path, visited, result)
        -- Append current cell's value to path
        table.insert(path, grid[x][y])

        if #path == k then
            -- Check if we have a new minimum lexicographical path
            if not result.min or table.concat(path) < table.concat(result.min) then
                result.min = {table.unpack(path)}
            end
        else
            for _, dir in ipairs(directions) do
                local nx, ny = x + dir[1], y + dir[2]
                if inBounds(nx, ny) then
                    dfs(nx, ny, path, visited, result)
                end
            end
        end

        -- Backtrack
        table.remove(path)
    end

    local result = {min = nil}

    -- Start DFS from each cell
    for i = 1, N do
        for j = 1, N do
            dfs(i, j, {}, {}, result)
        end
    end

    return result.min
end","lu = require('luaunit')

function test_humaneval()
local candidate = minPath
    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})
    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})
    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})
    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})
    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})
    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})
    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})
    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})
    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})
    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})
    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_130,kas_Arab,lua,"- مثالہٕ- ٹریبونکی ترتیبک گوڑنک n + 1 نمبر۔ توہہ چھیہ اکھ غیر منفی عدد نمبر دیتمت، توہہ چھیہ اتھ جدولس منز واپس ینہٕ خٲطرٕہ۔- = 2 + 3 + 3 = 8 چُھ- تریہٕ (۳) = تریہٕ (۲) + تریہٕ (۱) + تریہٕ (۴)- تریہٕ ((4) = ترے- تری چُھہ = 1 + (2 / 2) = 2 - مثلن: ٕ- ٹری (n) = ٹری (n-1) + ٹری (n-2) + ٹری (n+1) ، اگر n چُھ عجیب۔ -t (n) = 1 + n / 2، اگر n چُھ جُڑ۔ - ترےےے چھہِ = 3 - ٹریبونکی ترتیبچ تعریف چِھ تکرار سۭتۍ کرنہٕ یوان: تاہم، یم لوک چِھ نہٕ ٹربیونکی ترتیبس زانان چِھ۔- ہر کانہہ چُھ فبونیکی ترتیب زانان، اتھ چِھ ریاضی دانو گہرائی سان کٲم کران -- >>> tri(3)
-- {1, 3, 2, 8}
local function tri(n)
","local function tri(n)
    local sequence = {}
    
    -- Handle the first element separately
    sequence[1] = 3

    for i = 2, n + 1 do
        if i % 2 == 0 then
            sequence[i] = 1 + i / 2
        else
            sequence[i] = (i - 1 <= 0 and 0 or sequence[i - 1]) +
                          (i - 2 <= 0 and 0 or sequence[i - 2]) +
                          (i + 1 > n + 1 and 0 or sequence[i + 1])
        end
    end
    
    return sequence
end","lu = require('luaunit')

function test_humaneval()
local candidate = tri
    lu.assertEquals(candidate(3), {1, 3, 2, 8})
    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})
    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})
    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})
    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})
    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})
    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})
    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})
    lu.assertEquals(candidate(0), {1})
    lu.assertEquals(candidate(1), {1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_131,kas_Arab,lua,"- مثلن: ٔ- اگر تمام ہندسہٕ چِھ جوڑٕ، تہٕ 0 چُھ واپس کران۔- اکھ مثبت عدد n دنہٕ آمت، عجیب ہندسن ہند پروڈکٹ دینہٕ۔ -- >>> digits(1)
-- 1
-- >>> digits(4)
-- 0
-- >>> digits(235)
-- 15
local function digits(n)
","local function digits(n)
    local product = 1
    local hasOdd = false
    
    while n > 0 do
        local digit = n % 10
        if digit % 2 == 1 then
            product = product * digit
            hasOdd = true
        end
        n = math.floor(n / 10)
    end
    
    return hasOdd and product or 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = digits
    lu.assertEquals(candidate(5), 5)
    lu.assertEquals(candidate(54), 5)
    lu.assertEquals(candidate(120), 1)
    lu.assertEquals(candidate(5014), 5)
    lu.assertEquals(candidate(98765), 315)
    lu.assertEquals(candidate(5576543), 2625)
    lu.assertEquals(candidate(2468), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_132,kas_Arab,lua,"- یتہِ ذیلی ترتیبس منز کم از کم اکھ قوس چُھ نیسٹڈ۔ - فنکشن گژھہٕ صیح واپس ین اگر تہٕ صرف اگر parentheses ہچ اکھ درست ذیلی ترتیب آسہٕ۔اکھ فنکشن بنٲوِن یوس ان پٹ کہِ طورس پیٹھ چُھ اکھ سٹرنگ نوان یوس صرف مربع قوسین پیٹھ مشتمل چُھ۔-- >>> is_nested('[[]]')
-- true
-- >>> is_nested('[]]]]]]][[[[[]')
-- false
-- >>> is_nested('[][]')
-- false
-- >>> is_nested('[]')
-- false
-- >>> is_nested('[[][]]')
-- true
-- >>> is_nested('[[]][[')
-- true
local function is_nested(string)
","local function is_nested(brackets)
    local stack = {}
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '[' then
            table.insert(stack, char)
        elseif char == ']' then
            if #stack > 0 and stack[#stack] == '[' then
                table.remove(stack)
                if #stack > 0 then
                    -- Found at least one nested bracket
                    return true
                end
            else
                -- Mismatched bracket
                return false
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_nested
    lu.assertEquals(candidate('[[]]'), true)
    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)
    lu.assertEquals(candidate('[][]'), false)
    lu.assertEquals(candidate('[]'), false)
    lu.assertEquals(candidate('[[[[]]]]'), true)
    lu.assertEquals(candidate('[]]]]]]]]]]'), false)
    lu.assertEquals(candidate('[][][[]]'), true)
    lu.assertEquals(candidate('[[]'), false)
    lu.assertEquals(candidate('[]]'), false)
    lu.assertEquals(candidate('[[]][['), true)
    lu.assertEquals(candidate('[[][]]'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('[[[[[[[['), false)
    lu.assertEquals(candidate(']]]]]]]]'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_133,kas_Arab,lua,"- مثالہٕ- گۄڈٕ چُھ ٹیبلہِ منز ہر کُنہِ عنصرس پیٹھہٕ ہیرِ تام گولٲئی کران۔توہیہ چھِو دِنہٕ آمتِس جدولس منز اعدادن ہنز مربعِچ مجموعہٕ واپس کرُن، - توہہ چھا اکھ نمبر ٹیبل دینہ یوان۔ -- >>> lst({1.0, 2.0, 3.0})
-- 14
-- >>> lst({1.0, 4.0, 9.0})
-- 98
-- >>> lst({1.0, 3.0, 5.0, 7.0})
-- 84
-- >>> lst({1.4, 4.2, 0.0})
-- 29
-- >>> lst({-2.4, 1.0, 1.0})
-- 6
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        local ceil_num = math.ceil(num)
        sum = sum + (ceil_num * ceil_num)
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)
    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)
    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)
    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)
    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)
    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)
    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)
    lu.assertEquals(candidate({0.0}), 0)
    lu.assertEquals(candidate({-1.0}), 1)
    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_134,kas_Arab,lua,"- مثالہٕ- نوٹ: ""word"" چُھ حرفن ہند اکھ گروپ یوس اسپیسس سٕتۍ چُھ الگ کرنہٕ آمُت۔- اَکھ لفظُک حصہٕ، تہٕ بیترِ یِہ غلط چُھ۔- چُھ اکھ ڈریگن ہند اکھ الفبائی کردار تہٕ چُھ نہٕ اکھ فنکشن جوڑُن یُس VARUE چُھ رٹان اگر پٔتِمیُک کردار چُھ-- >>> check_if_last_char_is_a_letter('apple pie')
-- false
-- >>> check_if_last_char_is_a_letter('apple pi e')
-- true
-- >>> check_if_last_char_is_a_letter('apple pi e ')
-- false
-- >>> check_if_last_char_is_a_letter('')
-- false
local function check_if_last_char_is_a_letter(txt)
","local function check_if_last_char_is_a_letter(txt)
    -- Remove trailing spaces
    txt = txt:match(""^(.-)%s*$"")
    -- Check if the string is empty after trimming spaces
    if #txt == 0 then
        return false
    end
    -- Get the last character of the string
    local lastChar = txt:sub(-1)
    -- Check if the last character is an alphabet and not part of a word
    return lastChar:match(""%a"") and not txt:match(""%s%a*$"")
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_if_last_char_is_a_letter
    lu.assertEquals(candidate('apple'), false)
    lu.assertEquals(candidate('apple pi e'), true)
    lu.assertEquals(candidate('eeeee'), false)
    lu.assertEquals(candidate('A'), true)
    lu.assertEquals(candidate('Pumpkin pie '), false)
    lu.assertEquals(candidate('Pumpkin pie 1'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('eeeee e '), false)
    lu.assertEquals(candidate('apple pie'), false)
    lu.assertEquals(candidate('apple pi e '), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_135,kas_Arab,lua,"- مثالہٕ- دوگنہٕ قدرن۔ - یتھن عنصرن چھنہٕ موجود تیلہٕ چُھ واپسی -1۔ دِنہٕ آمت جدولس منٛز چھنہٕ - چُھ نہٕ ایمہِ برونٛہہ کنہِ تہٕ موجود عنصرن سٕتۍ زیادٕہ یا برابر کینٛہہ۔ اگر - اکھ فنکشن بنٲوِتھ یُس اکہِ عنصرک ساروی کھوتہٕ بوٕڑ انڈیکس چُھ رٹان یُس -- >>> can_arrange({1, 2, 4, 3, 5})
-- 3
-- >>> can_arrange({1, 2, 3})
-- -1
local function can_arrange(arr)
","local function can_arrange(arr)
    for i = #arr, 2, -1 do
        if arr[i] < arr[i - 1] then
            return i
        end
    end
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = can_arrange
    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)
    lu.assertEquals(candidate({1, 2, 4, 5}), -1)
    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)
    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)
    lu.assertEquals(candidate({}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_136,kas_Arab,lua,"- مثالہٕ- اگر کنٛہہ منفی یا مثبت عدد چُھ نہٕ، تہٕ چُھ ایمہِ کِس طورس پیٹھ واپس گژھان۔- مثبت عددن ہندس جدولس منز۔- منفی عدد چُھ بڑِ، تہٕ b چُھ لَکِٹ عدد - اکھ فنکشن بناوُن یُس اکھ ٹیبل (a، b) چُھ رٹرن کران۔ یتَھ منٛز 'a' چُھ -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})
-- {None, 1}
-- >>> largest_smallest_integers({})
-- {None, None}
-- >>> largest_smallest_integers({0})
-- {None, None}
local function largest_smallest_integers(lst)
","local function largest_smallest_integers(lst)
    local max_negative = nil
    local min_positive = nil

    for _, num in ipairs(lst) do
        if num < 0 then
            if max_negative == nil or num > max_negative then
                max_negative = num
            end
        elseif num > 0 then
            if min_positive == nil or num < min_positive then
                min_positive = num
            end
        end
    end

    return {max_negative, min_positive}
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_smallest_integers
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})
    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})
    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})
    lu.assertEquals(candidate({}), {None, None})
    lu.assertEquals(candidate({0}), {None, None})
    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})
    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})
    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})
    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_137,kas_Arab,lua,"- نوٹ: اگر اکھ حقیقی نمبر چُھ سٹرنگ کس طورس پیٹھ ظٲہر کرنہٕ یوان، تیلہٕ ہیکہٕ فلوٹنگ پوائنٹٕچ شکلہٕ . یا ،  ٲستھ۔- اگر قدر برابر آسن تہٕ 0 چُھ واپس کران۔- ریل نمبر، تہٕ چُھ ایمہِ ویریبلہِ ہندس ڈاٹا ٹائپس منز بڑِ متغیر واپس کران۔- اکھ فنکشن بنٲوِتھ یُس انٹیجر، فلوٹ، یا سٹرنگس چُھ نیوان یم نمائندگی کران چِھ-- >>> compare_one(1, 2.5)
-- 2.5
-- >>> compare_one(1, '2,3')
-- '2,3'
-- >>> compare_one('5,1', '6')
-- '6'
-- >>> compare_one('1', 1)
-- None
local function compare_one(a, b)
","local function to_real_number(val)
    if type(val) == ""string"" then
        val = val:gsub("","", ""."")
        return tonumber(val)
    end
    return val
end

local function compare_one(a, b)
    local a_type = type(a)
    local b_type = type(b)
    
    if a_type == b_type then
        if a == b then
            return nil
        end
        return a > b and a or b
    else
        local a_real = to_real_number(a)
        local b_real = to_real_number(b)
        
        if a_real == b_real then
            return nil
        end
        return a_real > b_real and a or b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare_one
    lu.assertEquals(candidate(1, 2), 2)
    lu.assertEquals(candidate(1, 2.5), 2.5)
    lu.assertEquals(candidate(2, 3), 3)
    lu.assertEquals(candidate(5, 6), 6)
    lu.assertEquals(candidate(1, '2,3'), '2,3')
    lu.assertEquals(candidate('5,1', '6'), '6')
    lu.assertEquals(candidate('1', '2'), '2')
    lu.assertEquals(candidate('1', 1), None)
end

os.exit(lu.LuaUnit.run())"
HumanEval_138,kas_Arab,lua,"- مثال ٕ- اندازٕ لگٲوِو زِ کیا یہ دِنہٕ آمُت نمبر چُھ درست 4 پازِٹو پرنٹ نمبرن ہند مجموعہ کِس طورس پیٹھ لیکھِتھ ہیکان؟-- >>> is_equal_to_sum_even(4)
-- false
-- >>> is_equal_to_sum_even(6)
-- false
-- >>> is_equal_to_sum_even(8)
-- true
local function is_equal_to_sum_even(n)
","local function is_equal_to_sum_even(n)
    -- Check if n can be expressed as the sum of 4 positive even numbers
    -- which means n should at least be 8 (2 + 2 + 2 + 2) and n should be even.
    if n >= 8 and n % 2 == 0 then
        return true
    else
        return false
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_equal_to_sum_even
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), true)
    lu.assertEquals(candidate(11), false)
    lu.assertEquals(candidate(12), true)
    lu.assertEquals(candidate(13), false)
    lu.assertEquals(candidate(16), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_139,kas_Arab,lua,"- مثلن: ٔ- جہاں n > 0 - برازیلین فیکٹریئل (n) = n! * (n-1)! * (n-2)! * ... * 1! برازیلین فیکٹریئلچ تعریف چِھ یتھہٕ پٲٹھۍ: -- >>> special_factorial(4)
-- 288
-- The function will receive an integer as input and should return the special
-- factorial of this integer.
local function special_factorial(n)
","local function factorial(m)
    if m == 0 then
        return 1
    else
        return m * factorial(m - 1)
    end
end

local function special_factorial(n)
    local result = 1
    for i = 1, n do
        result = result * factorial(i)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = special_factorial
    lu.assertEquals(candidate(4), 288)
    lu.assertEquals(candidate(5), 34560)
    lu.assertEquals(candidate(7), 125411328000)
    lu.assertEquals(candidate(1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_140,kas_Arab,lua,"- تہٕ پتہٕ چُھ تمام مسلسل جایہٕ -  سۭتۍ تبدیل کران۔- تہٕ اگر کنہہ سٹرنگس منٛز چِھ 2 کھوتہٕ زیادٕ لگاتار اسپیس آسان، تہٕ - اکھ سٹرنگ ٹیکسٹ دیتھ، امہِ منٛز موجود تمام اسپیسزس انڈر اسکرونس سۭتۍ تبدیل کرُن، -- >>> fix_spaces(' Example')
-- 'Example'
-- >>> fix_spaces(' Example 1')
-- 'Example_1'
-- >>> fix_spaces(' Example 2')
-- '_Example_2'
-- >>> fix_spaces(' Example 3')
-- '_Example-3'
local function fix_spaces(text)
","local function fix_spaces(text)
    -- Trim leading and trailing spaces
    text = text:match(""^%s*(.-)%s*$"")
    
    -- Replace more than 2 consecutive spaces with '-'
    text = text:gsub(""%s%s%s+"", ""-"")
    
    -- Replace single spaces and double spaces with underscores
    text = text:gsub(""%s"", ""_"")
    
    return text
end","lu = require('luaunit')

function test_humaneval()
local candidate = fix_spaces
    lu.assertEquals(candidate('Example'), 'Example')
    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')
    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')
    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')
    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')
end

os.exit(lu.LuaUnit.run())"
HumanEval_141,kas_Arab,lua,"- مثالہٕ- - ڈاٹہِ پتہٕ ذیلی تار گژھہِ یِمَن منز اکھ آسُن: ['txt', 'exe', 'dll'] - لاطینی الفٕظ ('a'-'z' تہٕ 'A'-'Z') ۔ڈاٹہٕ برونٹھ ذیلی تار گژھ نہٕ خٲلی گژھٕن تہٕ یہٕ چُھ ٕ ہندس حرفس سۭتۍ شروع گژھان۔-فائل کس ناوس پیٹھ چُھ صرف اکھ ڈاٹ'۔'- - فائل کس ناوس منٛز گژھہٕ نہٕ تریہ کھوتہٕ زیادٕ ہندسہٕ آسنہٕ چاہنہٕ ('0'-'9') ۔- چِھ پورٕ گژھان: - اکھ فائل ناو چُھ صیح ماننہٕ یوان صرف تَوَے اگر تمام یمَن شَروطَن پورٕ گژھہِ یِن - اگر فائلُک ناو چُھ درست، تہٕ بییہِ چُھ جواب ""1""ناں""2""۔- اکھ فنکشن بنٲوِتھ یُس اکھ سٹرنگ نٲمی فائلٕچ نمائندگی کران چھ، تہٕ  چُھ واپس کران۔-- >>> file_name_check('example.txt')
-- 'Yes'
-- >>> file_name_check('1example.dll')
-- 'No'
local function file_name_check(file_name)
","local function file_name_check(file_name)
    -- Check exactly one dot in the file name
    local dot_pos = file_name:find(""%."")
    if not dot_pos or dot_pos ~= file_name:find(""%."", dot_pos + 1) then
        return 'No'
    end
    
    -- Split the name into prefix and suffix
    local prefix = file_name:sub(1, dot_pos - 1)
    local suffix = file_name:sub(dot_pos + 1)

    -- Check if suffix is valid
    local valid_suffixes = { txt = true, exe = true, dll = true }
    if not valid_suffixes[suffix] then
        return 'No'
    end

    -- Check prefix is not empty and starts with a letter
    if #prefix == 0 or not prefix:match(""^[a-zA-Z]"") then
        return 'No'
    end

    -- Check that prefix has no more than 3 digits
    local digit_count = 0
    for i = 1, #prefix do
        if prefix:sub(i, i):match(""%d"") then
            digit_count = digit_count + 1
            if digit_count > 3 then
                return 'No'
            end
        end
    end

    return 'Yes'
end","lu = require('luaunit')

function test_humaneval()
local candidate = file_name_check
    lu.assertEquals(candidate('example.txt'), 'Yes')
    lu.assertEquals(candidate('1example.dll'), 'No')
    lu.assertEquals(candidate('s1sdf3.asd'), 'No')
    lu.assertEquals(candidate('K.dll'), 'Yes')
    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')
    lu.assertEquals(candidate('His12FILE94.exe'), 'No')
    lu.assertEquals(candidate('_Y.txt'), 'No')
    lu.assertEquals(candidate('?aREYA.exe'), 'No')
    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')
    lu.assertEquals(candidate('this_is_valid.wow'), 'No')
    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')
    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')
    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')
    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')
    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')
    lu.assertEquals(candidate('all.exe.txt'), 'No')
    lu.assertEquals(candidate('I563_No.exe'), 'Yes')
    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')
    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')
    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')
    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')
    lu.assertEquals(candidate('final..txt'), 'No')
    lu.assertEquals(candidate('final132'), 'No')
    lu.assertEquals(candidate('_f4indsartal132.'), 'No')
    lu.assertEquals(candidate('.txt'), 'No')
    lu.assertEquals(candidate('s.'), 'No')
end

os.exit(lu.LuaUnit.run())"
HumanEval_142,kas_Arab,lua,"- مثالہٕ- ٹیبلہِ منز چِھ یِم اندراج تبدیل کران یمن ہند انڈیکس چُھ نہٕ 3 یا 4 ہند ضرب کینٛہہ ۔ فنکشن چُھ پتہٕ تمام اندراجاتُک مجموعہٕ واپس کران۔- 3 ہند ضرب تہٕ انٹیجر انٹری ہند مکعب بنان اگر ایمِچ انڈیکس 4 ہند ضرب تہٕ نہٕ 3 ہند ضرب۔ فنکشن چُھ نہٕ یہٕ فنکشن چُھ انٹیجرزن ہند ٹیبل نوان۔ ٹیبل کہِ تمام اندراجاتٕ خٲطرٕہ، فنکشنس چُھ انٹیجر انٹری ہند مربع کرُن ییلہِ ایمِچ انڈیکس a چُھ۔-  چُھس-- >>> lst
-- {1, 2, 3}
-- >>> lst
-- {}
-- >>> lst
-- {-1, -5, 2, -1, -5}
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for i, v in ipairs(lst) do
        if i % 3 == 0 then
            sum = sum + v^2
        elseif i % 4 == 0 then
            sum = sum + v^3
        else
            sum = sum + v
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1, 2, 3}), 6)
    lu.assertEquals(candidate({1, 4, 9}), 14)
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)
    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)
    lu.assertEquals(candidate({0}), 0)
    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)
    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)
    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)
    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)
    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)
end

os.exit(lu.LuaUnit.run())"
HumanEval_143,kas_Arab,lua,"- مثال 1: ٕ- لفظن ہنز ترتیب گژھہِ نٲئی سٹرنگس منز اصلی سٹرنگس سٕتۍ ہیوۍ آسن۔- یمک لمبائی چھ پرائم نمبر، تہٕ توہیہ چھوہ اکس سٹرنگس پیٹھ واپس گژھُن ییتھ منٛز گوڑنچ سٹرنگک الفاظ آسہٕ،- جملس منز چِھ کینٛہہ لفظ یمۍ ایکِس جایہِ پیٹھ بییس جایہِ پیٹھ آسن، -تُہندِس جملس منز چُھ اکھ ڈریگ دیُت، -- >>> words_in_sentence('This is a test')
-- 'is'
-- Example 2:
-- >>> words_in_sentence('lets go for swimming')
-- 'go for'
-- Constraints:
--     * 1 <= len(sentence) <= 100
--     * sentence contains only letters
local function words_in_sentence(sentence)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function words_in_sentence(sentence)
    local words = {}
    for word in sentence:gmatch(""%S+"") do
        table.insert(words, word)
    end
    
    local result = {}
    for _, word in ipairs(words) do
        if is_prime(#word) then
            table.insert(result, word)
        end
    end
    
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_in_sentence
    lu.assertEquals(candidate('This is a test'), 'is')
    lu.assertEquals(candidate('lets go for swimming'), 'go for')
    lu.assertEquals(candidate('there is no place available here'), 'there is no place')
    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
    lu.assertEquals(candidate('go for it'), 'go for it')
    lu.assertEquals(candidate('here'), '')
    lu.assertEquals(candidate('here is'), 'is')
end

os.exit(lu.LuaUnit.run())"
HumanEval_144,kas_Arab,lua,"توہہ ہیکہِ یہٕ فرض کٔرِتھ زِ x، تہٕ n چِھ درست فریکشن، تہٕ تہندِ ڈینومینٹر چُھ نہٕ صفر کینٛہہ۔- < عددی>/< تقسیم> یتہِ عددی تہٕ تقسیم دونوٲی مثبت عدد چِھ۔x تہٕ n دشویۍ چِھ فریکشنچ سٹرنگ نمائندگی، تہٕ یمن ہنٛز شکل چِھ ییتھ کیٛن،- x * n فنکشن چُھ اگر x * n اکھ عدد تہٕ false چُھ درست رٹان۔توہہٕ ہکو کُنہِ فنکشنہٕ کہِ ایپلی کیشنہٕ سٕتۍ ایپلی کیشن بنٲوِتھ یوس اظہار چُھ آسان بناوِتھ۔-- >>> simplify('1/5', '5/1')
-- true
-- >>> simplify('1/6', '2/1')
-- false
-- >>> simplify('7/10', '10/2')
-- false
local function simplify(x, n)
","local function simplify(x, n)
    local function parseFraction(frac)
        local num, denom = frac:match(""(%d+)/(%d+)"")
        return tonumber(num), tonumber(denom)
    end

    local xn, xd = parseFraction(x)
    local nn, nd = parseFraction(n)

    local resultNumerator = xn * nn
    local resultDenominator = xd * nd

    return resultNumerator % resultDenominator == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = simplify
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/6', '2/1'), false)
    lu.assertEquals(candidate('5/1', '3/1'), true)
    lu.assertEquals(candidate('7/10', '10/2'), false)
    lu.assertEquals(candidate('2/10', '50/10'), true)
    lu.assertEquals(candidate('7/2', '4/2'), true)
    lu.assertEquals(candidate('11/6', '6/1'), true)
    lu.assertEquals(candidate('2/3', '5/2'), false)
    lu.assertEquals(candidate('5/2', '3/5'), false)
    lu.assertEquals(candidate('2/4', '8/4'), true)
    lu.assertEquals(candidate('2/4', '4/2'), true)
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/5', '1/5'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_145,kas_Arab,lua,"- مثلن: ٕ- ترتیب دیتُن تمن اصلی جدولس منز تہندِس انڈیکس کہِ بنیادس پیٹھ۔- نوٹ: اگر زن تہِ چِھ واریاہ عدد یمن ہندسن ہند مجموعہ چُھ ہوی، تہٕ - تہندِ ہندسن ہند مجموع کہِ مطٲبق چُھ بڑنٕکہِ ترتیبس منز۔- اکھ فنکشن لیوکھمُت یوس انٹیجرزن ہنز دِنہٕ آمٕژِ ٹیبلہ چُھ ترتیب دِوان۔-- >>> order_by_points({1, 11, -1, -11, -12})
-- {-1, -11, 1, -12, 11}
-- >>> order_by_points({})
-- {}
local function order_by_points(nums)
","local function order_by_points(nums)
    local function digit_sum(num)
        local sum = 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        return sum
    end

    table.sort(nums, function(a, b)
        local sum_a = digit_sum(a)
        local sum_b = digit_sum(b)
        if sum_a == sum_b then
            -- Preserve original order if digit sums are equal
            return false
        else
            return sum_a < sum_b
        end
    end)

    return nums
end","lu = require('luaunit')

function test_humaneval()
local candidate = order_by_points
    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_146,kas_Arab,lua,"- مثلن: ٕ- نمبرن ہنز گۅڈنیُک تہٕ ٲخری ہندسہٕ چِھ odd (1, 3, 5, 7, 9) ۔- جدولس منز چِھ عناصرک تعداد یوس 10 کھوتہٕ زیادٕ چُھ تہٕ دونوٲی چِھ اکھ فنکشن لیوکھمُت یُس اعدادٕچ اکھ ٹیبل ان پٹ تہٕ ریٹرنس کِس طورس پیٹھ لیکھِ۔-- >>> specialFilter({15, -73, 14, -15})
-- 1
-- >>> specialFilter({33, -2, -3, 45, 21, 109})
-- 2
local function specialFilter(nums)
","local function isOddDigit(num)
    local digit = num % 10
    return digit % 2 == 1
end

local function specialFilter(nums)
    local count = 0
    for _, num in ipairs(nums) do
        local absNum = math.abs(num)
        if absNum > 10 then
            local firstDigit = tonumber(tostring(absNum):sub(1, 1))
            local lastDigit = absNum % 10
            if isOddDigit(firstDigit) and isOddDigit(lastDigit) then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = specialFilter
    lu.assertEquals(candidate({5, -2, 1, -5}), 0)
    lu.assertEquals(candidate({15, -73, 14, -15}), 1)
    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)
    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)
    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_147,kas_Arab,lua,"- مثال: ٕ- تہٕ a[i] + a[j] + a[k] چُھ 3 کِس ضربس برابر۔- a کہِ ٹرپلزن ہند تعداد واپس کرٕ (a[i]، a[j]، a[k]) یتہِ i < j < k، - پرتھ i (1 ≤ i ≤ n) خٲطرٕہ، a[i] = i * i - i + 1 چُھ ویلیو۔توہہ چھیہ مثبت عدد n دنہ آمت۔ توہہ چھیہ عدد ٹیبل بناون پیوان a یچ لمبائی n چھیہ۔--     >>> get_max_triples(5)
--     1
-- Explanation: 
-- a = [1, 3, 7, 13, 21]
-- The only valid triple is (1, 7, 13).
local function get_max_triples(n)
","local function get_max_triples(n)
    local a = {}
    for i = 1, n do
        a[i] = i * i - i + 1
    end

    local count = 0
    for i = 1, n - 2 do
        for j = i + 1, n - 1 do
            for k = j + 1, n do
                if (a[i] + a[j] + a[k]) % 3 == 0 then
                    count = count + 1
                end
            end
        end
    end

    return count
end

-- Example Usage:
-- print(get_max_triples(5)) -- Output: 1","lu = require('luaunit')

function test_humaneval()
local candidate = get_max_triples
    lu.assertEquals(candidate(5), 1)
    lu.assertEquals(candidate(6), 4)
    lu.assertEquals(candidate(10), 36)
    lu.assertEquals(candidate(100), 53361)
end

os.exit(lu.LuaUnit.run())"
HumanEval_148,kas_Arab,lua,"- مثالہٕ- کَتھ چھُ نہٕ سیارن ہٕندین ناون سٕتۍ صحیح۔- فنکشن گژھہٕ خٲلی ٹیبل رٹرن ییلہٕ planet1 یا planet2 چُھ - آفتاب کہِ قربٲنی۔- کائناتس منز چُھ سیارٕہ کِس مدارس تہٕ کائناتس منز کِس مدارس درمیان واقع، تہٕ چُھ سیارٕہ کِس مدارس سٕتۍ ترتیب دِنہٕ آمُت۔- فنکشن گژھہِ اکھ ٹیبل واپس کرُن یتھ منز تمام سیارٕ یمٕچ مداری چھے اکھ فنکشن لیوکھ یتھ زِ سٹرنگس planet1 تہٕ planet2 کہِ طورس پیٹھ چُھ زٕہ سیارن ہند ناو نیران۔- یورینس، نیپچون۔- چُھ مرکیری، برونٹھُک چُھ ونیوس، تہٕ پتہٕ زمین، مریخ، مشتری، زحل، - تہٕ چُھس شمسی نظامس منز آٹھ سیارٕہ آسان: آفتابس قریب ترین۔-- >>> bf('Jupiter', 'Neptune')
-- {'Saturn', 'Uranus'}
-- >>> bf('Earth', 'Mercury')
-- 'Venus'
-- >>> bf('Mercury', 'Uranus')
-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}
local function bf(planet1, planet2)
","local function bf(planet1, planet2)
    local planets = {
        ""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    }
    
    local planet_index = {}
    for i, planet in ipairs(planets) do
        planet_index[planet] = i
    end
    
    local index1 = planet_index[planet1]
    local index2 = planet_index[planet2]
    
    if not index1 or not index2 then
        return {}
    end
    
    local start_index = math.min(index1, index2) + 1
    local end_index = math.max(index1, index2) - 1
    
    local result = {}
    for i = start_index, end_index do
        table.insert(result, planets[i])
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = bf
    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})
    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})
    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Earth'), {})
    lu.assertEquals(candidate('Mars', 'Earth'), {})
    lu.assertEquals(candidate('Jupiter', 'Makemake'), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_149,kas_Arab,lua,"- مثلن: ٕ- توہیہ ہیکو یہٕ فرض کرتھ زِ تمام لفظن ہنز ترتیب چِھ اکھ۔ - فنکشن گژھہِ ترتیب شدہ ترتیبس منز سٹرنگزن ہنز اکھ ٹیبل واپس کرُن۔اگر زٕ لفظ چِھ یکساں زیٹھ، تہٕ ٹیبل چُھ الفبائی ترتیبس منٛز ترتیب دینہٕ یوان۔- ییہٕ ٹیبل ییہٕ امہٕ قاعدس مطٲبق ترتیب دینہٕ۔ - ترتیب میز گژھہِ پرتھ لفظہٕ کہِ لمبٲے بڑھنہٕ ینہٕ واجین، تہٕ توہہٕ - تہٕ یہٕ ہیکہٕ جُڑتھ۔ میز چِھ ہمیشہٕ تارن ہند میز تہٕ نہٕ زانٛہہ نمبرن ہند میزٕ، - تہٕ ترتیب شدہ ترتیب سۭتۍ چُھ نتیجہٕ ٹیبل واپس کران۔- تمن تارن چُھ ہٹاوان یمن پیٹھ عجیب لمبائی چِھ آسان، اکھ فنکشن لیوکھن یس سٹرنگس ہٕنٛز ٹیبل پیرامیٹر کس طورس پیٚٹھ قبول کران چھ،-- >>> list_sort({'aa', 'a', 'aaa'})
-- {'aa'}
-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})
-- {'ab', 'cd'}
local function sorted_list_sum(lst)
","local function list_sort(tbl)
    local function is_even_length(s)
        return #s % 2 == 0
    end

    local function compare_strings(a, b)
        if #a == #b then
            return a < b
        else
            return #a < #b
        end
    end

    local result = {}
    for _, v in ipairs(tbl) do
        if is_even_length(v) then
            table.insert(result, v)
        end
    end

    table.sort(result, compare_strings)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sorted_list_sum
    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})
    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})
    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})
    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})
    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})
    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})
    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_150,kas_Arab,lua,"- مثالہٕ- اکھ پرائم نمبر تہٕ ییہٕ گژھہٕ y ہیند ویلیو واپس کرنہٕ ورٲے۔ اکھ سادٕ پروگرام یُس x کہِ ویلیو چُھ رٹرن کران اگر n چُھ -- >>> x_or_y(7, 34, 12)
-- 34
-- >>> x_or_y(15, 8, 5)
-- 5
local function x_or_y(n, x, y)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    for i = 2, math.sqrt(num) do
        if num % i == 0 then
            return false
        end
    end
    return true
end

local function x_or_y(n, x, y)
    if is_prime(n) then
        return x
    else
        return y
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = x_or_y
    lu.assertEquals(candidate(7, 34, 12), 34)
    lu.assertEquals(candidate(15, 8, 5), 5)
    lu.assertEquals(candidate(3, 33, 5212), 33)
    lu.assertEquals(candidate(1259, 3, 52), 3)
    lu.assertEquals(candidate(7919, -1, 12), -1)
    lu.assertEquals(candidate(3609, 1245, 583), 583)
    lu.assertEquals(candidate(91, 56, 129), 129)
    lu.assertEquals(candidate(6, 34, 1234), 1234)
    lu.assertEquals(candidate(1, 2, 0), 0)
    lu.assertEquals(candidate(2, 2, 0), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_151,kas_Arab,lua,"- جدولس منز چِھ یم عجیب آسان۔ منفی یا غٲر انٹیجر نمبرن نظر انداز کرٕو۔- نمبر ٹیبل دِنہٕ آمت، نمبرن ہندس مربعس ہند جمع کٔرو واپس -- >>> double_the_difference({1, 3, 2, 0})
-- 10
-- >>> double_the_difference({-1, -2, 0})
-- 0
-- >>> double_the_difference({9, -2})
-- 81
-- >>> double_the_difference({0})
-- 0
-- If the input table is empty, return 0.
local function double_the_difference(lst)
","local function double_the_difference(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        if type(num) == ""number"" and num >= 0 and num % 1 == 0 and num % 2 == 1 then
            sum = sum + num * num
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = double_the_difference
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({5.0, 4.0}), 25)
    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
end

os.exit(lu.LuaUnit.run())"
HumanEval_152,kas_Arab,lua,"- مثال: ٕ- ویلیو چُھ 0، تہٕ اگر نہٕ ویلیو آسہٕ، تیلہٕ چُھ گِبز تہٕ اسکور کہِ درمیان مطلق فرق۔- اکہ ٹیبلہٕ ہیند لمبٲے واپس یمہٕ سۭتۍ یہٕ ظٲہر چُھ گژھان زِ پرتھ اندازٕ کتھ حدس تام اوس۔ اگر تمو صحیح اندازٕ لگاؤ، تہٕ تیلہٕ چُھ- توہیہ چھِ توہیہ دوٛن ٹیبلن ہند سکور تہٕ اندازٕ برابر لمبائی سۭتۍ یوان، یتن پرتھ انڈیکس اکھ میچ چُھ ہاوان۔- تہندِ کٲم چھ یہٕ پتاہ کرن زِ اگر کانہہ شخص چُھ صحیح پٲٹھۍ کینٛہہ میچ کَرنُک نتیجہٕ ژھانڈان۔- یقینی طور پأٹھۍ نوٹ کرنچ تہٕ موازنہٕ کرنک قأبل۔ - واقعس چُھ أخری پأٹھۍ معلوم۔ تم چِھ تمن احساسات تہٕ خیالات یم تمن لمحاتن منٛز چِھ آسان۔- بہٕ چُھس یژھان زِ سُوٛ چُھ امہٕ احساسک بیاکھ حصہٕ یُس زن واریہ عرصہٕ پیٹھ انتظار کرنچ نتیجہٕ چُھ بنان۔-- >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})
-- {0, 0, 0, 0, 3, 3}
-- >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})
-- {4, 4, 1, 0, 0, 6}
local function compare(game, guess)
","local function compare(game, guess)
    local differences = {}
    for i = 1, #game do
        if game[i] == guess[i] then
            differences[i] = 0
        else
            differences[i] = math.abs(game[i] - guess[i])
        end
    end
    return differences
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})
    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})
    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})
    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_153,kas_Arab,lua,"- مثال: ٕ- (یِہُنٛدوستٲنۍ قوت چھےٚ - ۱)- واپس 'Slices.SERvINGSliCes' چونکہ 'SERvINGSliCes' مضبوط ترین توسیع ہے - توسیع: ['SERVINGSliCes'، 'Cheese'، 'StuFfed'] تہٕ توہیہ گژھہِ - مثلن، اگر توہیہ چُھ ""سلائسز"" کلاسک پانٹھ تہٕ اکھ ٹیبل یُس - چُھس بہٕ یُس بہٕ یُس بہٕ یُساگر زٕ یا زیادٕ کھوتہٕ زیادٕ اکسٹینشن آسن توٲی چُھ- فارمیٹ: ClassName.StrongestExtensionName۔ توہیہ ہیکو مضبوط ترین توسیع تلاش کرتھ تہٕ اتھ منٛز گژھہٕ اکھ تار واپس۔- توسیع کس ناوس منٛز، طاقت چِھ فرکشن CAP - SM سۭتۍ دِنہٕ یوان۔ - اکسٹینشن کس ناوس منٛز حروف، تہٕ SM لوکئسٹرس سۭتۍ حروفن ہینز تعداد۔- توسیعُک قۄدرٔ چُھ یِتھٔ پأٹھی: سی اے پی چُھ وُنی کینڈِک نمبر۔توسیعہٕ چھ کلاسس منٛز اضٲفی کلاس لوڈ کرنہٕ خٲطرٕ استعمال کرنہٕ یوان۔- توہیہ چُھہ آمُت اکھ کلاسُک ناو (اکھ سٹرنگ) تہٕ ایکسٹینشنُک ٹیبل۔-- >>> Strongest_Extension('my_class', {'AA', 'Be', 'CC'})
-- 'my_class.AA'
local function Strongest_Extension(class_name, extensions)
","local function Strongest_Extension(class_name, extensions)
    local strongest_extension = nil
    local max_strength = nil

    for _, extension in ipairs(extensions) do
        local cap = 0
        local sm = 0
        for i = 1, #extension do
            local char = extension:sub(i, i)
            if char:match(""%u"") then
                cap = cap + 1
            elseif char:match(""%l"") then
                sm = sm + 1
            end
        end
        local strength = cap - sm
        if max_strength == nil or strength > max_strength then
            max_strength = strength
            strongest_extension = extension
        end
    end

    return class_name .. ""."" .. strongest_extension
end","lu = require('luaunit')

function test_humaneval()
local candidate = Strongest_Extension
    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')
    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')
    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')
    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')
    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')
    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')
    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')
    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')
    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')
end

os.exit(lu.LuaUnit.run())"
HumanEval_154,kas_Arab,lua,"توہیہ چھیہ 2 لفظ دنہ آمتۍ۔ توہیہ پزِ صحیح واپس کرُن اگر دویم لفظ یا امہ کہ کنہِ تہِ گردشہ چھیہ گوڈنچ لفظس منز سبسٹرننگ۔-- >>> cycpattern_check('abcd', 'abd')
-- false
-- >>> cycpattern_check('hello', 'ell')
-- true
-- >>> cycpattern_check('whassup', 'psus')
-- false
-- >>> cycpattern_check('abab', 'baa')
-- true
-- >>> cycpattern_check('efef', 'eeff')
-- false
-- >>> cycpattern_check('himenss', 'simen')
-- true
local function cycpattern_check(a, b)
","local function is_rotation(s1, s2)
    return #s1 == #s2 and (s1 .. s1):find(s2) ~= nil
end

local function generate_rotations(s)
    local rotations = {}
    for i = 1, #s do
        local rotation = s:sub(i) .. s:sub(1, i-1)
        table.insert(rotations, rotation)
    end
    return rotations
end

local function cycpattern_check(a, b)
    local rotations = generate_rotations(b)
    for _, rotation in ipairs(rotations) do
        if a:find(rotation) then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = cycpattern_check
    lu.assertEquals(candidate('xyzw', 'xyw'), false)
    lu.assertEquals(candidate('yello', 'ell'), true)
    lu.assertEquals(candidate('whattup', 'ptut'), false)
    lu.assertEquals(candidate('efef', 'fee'), true)
    lu.assertEquals(candidate('abab', 'aabb'), false)
    lu.assertEquals(candidate('winemtt', 'tinem'), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_155,kas_Arab,lua,"- مثال: ٕ- اکھ عدد عدد دیتھ، اکھ میز واپس ییتھ منٛز بالترتیب برابر تہٕ عجیب ہندسن ہند تعداد آسہٕ۔--     >>> even_odd_count(-12)
--     {1, 1}
--     >>> even_odd_count(123)
--     {1, 2}
local function even_odd_count(num)
","local function even_odd_count(num)
    local even_count, odd_count = 0, 0
    num = math.abs(num)  -- remove the sign of the number
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            even_count = even_count + 1
        else
            odd_count = odd_count + 1
        end
        num = math.floor(num / 10)
    end
    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_count
    lu.assertEquals(candidate(7), {0, 1})
    lu.assertEquals(candidate(-78), {1, 1})
    lu.assertEquals(candidate(3452), {2, 2})
    lu.assertEquals(candidate(346211), {3, 3})
    lu.assertEquals(candidate(-345821), {3, 3})
    lu.assertEquals(candidate(-2), {1, 0})
    lu.assertEquals(candidate(-45347), {2, 3})
    lu.assertEquals(candidate(0), {1, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_156,kas_Arab,lua,"- مثالہٕ- پابندی: 1 <= نمبر <= 1000 - تہٕ لوٗکھ لیٹرزس منز واپس۔- اکھ مثبت عدد، امک رومی ہندسہٕ مساوی تارک پٲنٹھ پٔدٕ کرو، -- >>> int_to_mini_roman(19)
-- 'xix'
-- >>> int_to_mini_roman(152)
-- 'clii'
-- >>> int_to_mini_roman(426)
-- 'cdxxvi'
local function int_to_mini_roman(number)
","local function int_to_mini_roman(number)
    local roman_numerals = {
        {1000, ""m""},
        {900, ""cm""},
        {500, ""d""},
        {400, ""cd""},
        {100, ""c""},
        {90, ""xc""},
        {50, ""l""},
        {40, ""xl""},
        {10, ""x""},
        {9, ""ix""},
        {5, ""v""},
        {4, ""iv""},
        {1, ""i""}
    }
    
    local result = {}
    for _, value_pair in ipairs(roman_numerals) do
        local value, symbol = unpack(value_pair)
        while number >= value do
            number = number - value
            table.insert(result, symbol)
        end
    end
    
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = int_to_mini_roman
    lu.assertEquals(candidate(19), 'xix')
    lu.assertEquals(candidate(152), 'clii')
    lu.assertEquals(candidate(251), 'ccli')
    lu.assertEquals(candidate(426), 'cdxxvi')
    lu.assertEquals(candidate(500), 'd')
    lu.assertEquals(candidate(1), 'i')
    lu.assertEquals(candidate(4), 'iv')
    lu.assertEquals(candidate(43), 'xliii')
    lu.assertEquals(candidate(90), 'xc')
    lu.assertEquals(candidate(94), 'xciv')
    lu.assertEquals(candidate(532), 'dxxxii')
    lu.assertEquals(candidate(900), 'cm')
    lu.assertEquals(candidate(994), 'cmxciv')
    lu.assertEquals(candidate(1000), 'm')
end

os.exit(lu.LuaUnit.run())"
HumanEval_157,kas_Arab,lua,"- مثال: ٕ- 90 ڈگری ٕ- اکھ ریٹائرڈ مثلث چِھ اکھ مثلث ییتھ منٛز اکھ زاویہٕ سیدھ زاویہٕ چُھ یا- اطراف چِھ اکھ مستطیل مثلث بناوان، بییہٕ غلط۔اگر مثلث کہِ تریو طرفو ہند لمبائی دِنہٕ ییہٕ، تہٕ اگر یہٕ تین تہٕ زٕ چُھ، تہٕ چُھ صحیح واپس گژھان۔-- >>> right_angle_triangle(3, 4, 5)
-- true
-- >>> right_angle_triangle(1, 2, 3)
-- false
local function right_angle_triangle(a, b, c)
","local function right_angle_triangle(a, b, c)
    -- Sort the sides to make sure we always compare the largest with the sum of squares of the other two
    local sides = {a, b, c}
    table.sort(sides)

    -- Check the Pythagorean theorem
    return sides[1]^2 + sides[2]^2 == sides[3]^2
end","lu = require('luaunit')

function test_humaneval()
local candidate = right_angle_triangle
    lu.assertEquals(candidate(3, 4, 5), true)
    lu.assertEquals(candidate(1, 2, 3), false)
    lu.assertEquals(candidate(10, 6, 8), true)
    lu.assertEquals(candidate(2, 2, 2), false)
    lu.assertEquals(candidate(7, 24, 25), true)
    lu.assertEquals(candidate(10, 5, 7), false)
    lu.assertEquals(candidate(5, 12, 13), true)
    lu.assertEquals(candidate(15, 8, 17), true)
    lu.assertEquals(candidate(48, 55, 73), true)
    lu.assertEquals(candidate(1, 1, 1), false)
    lu.assertEquals(candidate(2, 2, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_158,kas_Arab,lua,"- حروف، چھُ لغوی ترتیبس منز گۄڈنیُک حروف لٲگِتھ دِنہٕ یِوان۔اگر ملٹیپل سٹرنگس منٛز چھِ زیادہ سے زیادہ منفرد کرکٹرز آسان۔- میزس منز چِھ مختلف لفظ۔ لفظس منز یمہٕ حد کھوتہٕ زیادٕ نمبر آسنہٕ چُھ واپس کرُناکھ فنکشن لیوکھن یس سٹرنگس ہٕنٛز ٹیبل قبول کران چھ۔-- >>> find_max({'name', 'of', 'string'})
-- 'string'
-- >>> find_max({'name', 'enam', 'game'})
-- 'enam'
-- >>> find_max({'aaaaaaa', 'bb', 'cc'})
-- 'aaaaaaa'
local function find_max(words)
","local function find_max(words)
    local function unique_characters_count(word)
        local char_set = {}
        for char in word:gmatch('.') do
            char_set[char] = true
        end
        local count = 0
        for _ in pairs(char_set) do
            count = count + 1
        end
        return count
    end

    local max_word = ''
    local max_unique_count = 0

    for _, word in ipairs(words) do
        local unique_count = unique_characters_count(word)
        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word) then
            max_word = word
            max_unique_count = unique_count
        end
    end

    return max_word
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_max
    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
    lu.assertEquals(candidate({'b'}), 'b')
    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
end

os.exit(lu.LuaUnit.run())"
HumanEval_159,kas_Arab,lua,"- مثال: ٕ- اگر گُزرٕ نہٕ کینٛہہ، تہٕ توہہ ہکو تمام گُزرٕ کٔرِتھ، مگر گوسہٕ وُن بھوکیمٕت۔- چُھٹیاں کھیوانہٕ پتہٕ باقی ماندہٕ کیروٹسن ہنز تعداد۔ ] - توہہِ گژھہِ [ کھین کِس پورٕ تعدادس منز گاجر کھیون وول کھیون وول ٹیبل واپس نِن، - مگر از چھہ تمۍ دوان زیادہ کارٹ کھیتھ دوان۔- توہہ چھیہ بھوک ہنز کتھ، تہ توہہ چھوہ گوڈہ کٲنسہِ کارٹون کھیتھ، -- >>> eat(5, 6, 10)
-- {11, 4}
-- >>> eat(4, 8, 9)
-- {12, 1}
-- >>> eat(1, 10, 10)
-- {11, 0}
-- >>> eat(2, 11, 5)
-- {7, 0}
-- Variables:
-- @number : integer
--     the number of carrots that you have eaten.
-- @need : integer
--     the number of carrots that you need to eat.
-- @remaining : integer
--     the number of remaining carrots thet exist in stock
-- Constrain:
-- * 0 <= number <= 1000
-- * 0 <= need <= 1000
-- * 0 <= remaining <= 1000
-- Have fun :)
local function eat(number, need, remaining)
","local function eat(number, need, remaining)
    local totalEaten
    local leftOver
    
    if remaining >= need then
        totalEaten = number + need
        leftOver = remaining - need
    else
        totalEaten = number + remaining
        leftOver = 0
    end
    
    return {totalEaten, leftOver}
end","lu = require('luaunit')

function test_humaneval()
local candidate = eat
    lu.assertEquals(candidate(5, 6, 10), {11, 4})
    lu.assertEquals(candidate(4, 8, 9), {12, 1})
    lu.assertEquals(candidate(1, 10, 10), {11, 0})
    lu.assertEquals(candidate(2, 11, 5), {7, 0})
    lu.assertEquals(candidate(4, 5, 7), {9, 2})
    lu.assertEquals(candidate(4, 5, 1), {5, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_160,kas_Arab,lua,"- آپریٹر ٹیبل چُھ کم کھوتہٕ کم اکھ آپریٹر آسان، تہٕ آپریٹ ٹیبل چُھ کم کھوتہٕ کم زٕ آپریٹ۔- اوپیرینڈ چُھ اکھ ٹیبل آف نان نیگیٹو انٹیجرزن ہند۔- آپریٹر ٹیبلچ لمبائی چِھ آپریٹنڈ ٹیبلچ لمبائی کس کم اکسی برابر۔- نوٹ: ٕ- => نتیجہ = 9 - نتیجِ = 2 + 3 * 4 - 5 - میز = [2, 3, 4, 5] - آپریٹر['+'، '*'، '-'] - مثال: ٕ- ایکسپونینٹائزیشن (**) - فرش تقسیم (//) ٕضرب (*) ٕ- تفریق ( - ) - اضافی (+) - بنیادی الجبرا آپریشنز: - اظہار تہٕ امکہٕ اظہارُک تشخیص واپس ییہٕ کرنہٕ۔ -دویم ٹیبل چُھ انٹیجرزن ہند ٹیبل۔ الجبری بناونہٕ خٲطرٕہ استعمال کرِو دۄن ٹیبلن - دوٛن میزن ہند آپریٹر تہٕ آپریڈنڈ۔ گۄڈنچ میز چِھ بنیأدی الجبرا آپریشن، تہٕ local function do_algebra(operator, operand)
","local function do_algebra(operator, operand)
    local expression = tostring(operand[1])
    
    for i = 1, #operator do
        expression = expression .. "" "" .. operator[i] .. "" "" .. operand[i+1]
    end
    
    return load(""return "" .. expression)()
end

-- Example usage:
-- local operator = {'+', '*', '-'}
-- local operand = {2, 3, 4, 5}
-- local result = do_algebra(operator, operand)
-- print(result) -- Output: 9","lu = require('luaunit')

function test_humaneval()
local candidate = do_algebra
    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)
    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)
    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)
end

os.exit(lu.LuaUnit.run())"
HumanEval_161,kas_Arab,lua,"- مثالہٕ- فنکشن گژھہِ نتیجس منز سٹرنگ رٹرن۔- اگر سٹرنگس منز چُھ نہٕ کنٛہہ لیٹر، سٹرنگس پٕژھ کٔرتھ پلٹٲوِتھ۔-بٔلکہٕ یہٕ کٔرِو یتھ کٔنۍ بہٕ کٲم کران۔اگر s[i] اکھ حَرٕف چُھ، تہٕ چُھ لیٹرٕ پٔزی پٹھۍ ہاونہٕ آمُت۔- توہہ چھا اکھ جملہ سکریوڈان؟-- >>> solve('1234')
-- '4321'
-- >>> solve('ab')
-- 'AB'
-- >>> solve('#a@C')
-- '#A@c'
local function solve(s)
","local function solve(s)
  local has_letters = false
  local result = {}
  
  for i = 1, #s do
    local char = s:sub(i, i)
    if char:match(""%a"") then
      has_letters = true
      if char:lower() == char then
        table.insert(result, char:upper())
      else
        table.insert(result, char:lower())
      end
    else
      table.insert(result, char)
    end
  end
  
  if has_letters then
    return table.concat(result)
  else
    return s:reverse()
  end
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate('AsDf'), 'aSdF')
    lu.assertEquals(candidate('1234'), '4321')
    lu.assertEquals(candidate('ab'), 'AB')
    lu.assertEquals(candidate('#a@C'), '#A@c')
    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')
    lu.assertEquals(candidate('#6@2'), '2@6#')
    lu.assertEquals(candidate('#$a^D'), '#$A^d')
    lu.assertEquals(candidate('#ccc'), '#CCC')
end

os.exit(lu.LuaUnit.run())"
HumanEval_162,kas_Arab,lua,"- اگر 'متن' چُھ اکھ خالی سٹرنگ، توہہ چھوہ واپس nil۔ - اکھ سٹرنگ 'ٹیکسٹ' دنہٕ آمژ، امچ md5 ہیش مساوی سٹرنگ پٔدٕ کٔرِتھ۔ -- >>> string_to_md5('Hello world')
-- '3e25960a79dbc69b674cd4ec67a72c62'
local function string_to_md5(text)
","local md5 = require(""md5"")

local function string_to_md5(text)
    if text == """" then
        return nil
    end
    return md5.sumhexa(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_to_md5
    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
    lu.assertEquals(candidate(''), None)
    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')
    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')
end

os.exit(lu.LuaUnit.run())"
HumanEval_163,kas_Arab,lua,"- مثلن: ٔ- تہٕ b، بڑنس منٛز ترتیب سۭتۍ۔ - دوٛن مثبت عدد a تہٕ b دینہٕ آمت، a تہٕ b کہ درمیان even ہندسہٕ واپس ییہٕ دینہٕ۔-- >>> generate_integers(2, 8)
-- {2, 4, 6, 8}
-- >>> generate_integers(8, 2)
-- {2, 4, 6, 8}
-- >>> generate_integers(10, 14)
-- {}
local function generate_integers(a, b)
","local function generate_integers(a, b)
    local evens = {}
    local start, finish = math.min(a, b), math.max(a, b)
    
    for i = start, finish do
        if i % 2 == 0 then
            table.insert(evens, i)
        end
    end
    
    return evens
end","lu = require('luaunit')

function test_humaneval()
local candidate = generate_integers
    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})
    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(17, 89), {})
end

os.exit(lu.LuaUnit.run())"
