task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,uig_Arab,lua,"- مۇئەييەن مىقداردا .-- سىز ئىككى نومۇرنى بىر-بىرىگە يېقىن ئورۇنغا ئايرىسىڭىز،-- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
-- false
-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
-- true
local function has_close_elements(numbers, threshold)
","local function has_close_elements(numbers, threshold)
    for i = 1, #numbers do
        for j = i + 1, #numbers do
            if math.abs(numbers[i] - numbers[j]) < threshold then
                return true
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = has_close_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_1,uig_Arab,lua,"- كىرگۈزگۈچ سىتونىدىكى بوشلۇقلارنى چەتكە قاق(ھەربىر ئوچۇق قىسمى توغرا يېپىلىدۇ) ، ئۇلار بىر - بىرىگە قوشۇلۇپ كەتمەيدۇ .-- بۇلارنى ئايرىم سەترىگە ئايلاندۇرۇپ، سەترىنىڭ جەدۋىلىنى قايتۇرىمىز.-- بۇ فۇنكسىيەگە كىرگۈزگەن سىتون بولسا بىر قانچە گۇرۇپپا يۇشۇرۇنغان بوغۇملارنى ئۆز ئىچىگە ئالىدۇ. سىزنىڭ مەقسىتىڭىز-- >>> separate_paren_groups('( ) (( )) (( )( ))')
-- {'()', '(())', '(()())'}
local function separate_paren_groups(paren_string)
","local function separate_paren_groups(paren_string)
    local result = {}
    local balance = 0
    local current_group = {}

    for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        
        if char == '(' then
            balance = balance + 1
        elseif char == ')' then
            balance = balance - 1
        end

        if char ~= ' ' then
            table.insert(current_group, char)
        end
        
        if balance == 0 and #current_group > 0 then
            table.insert(result, table.concat(current_group))
            current_group = {}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = separate_paren_groups
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_2,uig_Arab,lua,".ئاندىن ئوندىن بىرىنىڭ ئورنىنى ئېلىپ بۇ ساننى قايتۇرىمىز(باقىغان قىسمى 1 دىن كىچىك بولىدۇ)-- ۋە پۈتۈن ساننىڭ بىر قىسمى (بەلگىلەنگەن ساندىن كىچىك بولغان ئەڭ چوڭ پۈتۈن سان) ۋە ئوندىن كېيىن كەلگەن سان.ئەگەر بىز بىر جۈپ ئەركىن كۇنۇپكىغا ئىگە بولساق، بۇ ئەركىن كۇنۇپكىغا بۆلۈپ بىرىمىز-- >>> truncate_number(3.5)
-- 0.5
local function truncate_number(number)
","local function truncate_number(number)
    local integer_part = math.floor(number)
    local decimal_part = number - integer_part
    return decimal_part
end","lu = require('luaunit')

function test_humaneval()
local candidate = truncate_number
    lu.assertEquals(candidate(3.5), 0.5)
    lu.assertEquals(candidate(1.25), 0.25)
    lu.assertEquals(candidate(123.0), 0.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_3,uig_Arab,lua,"-- بۇ يەردىكى ۋەزىپە true نى قايتۇرۇشى كېرەك. بولمىسا false نى قايتۇرۇشى كېرەك.-- سىز بۇنى قانداق قىلماقچى؟ -- ھىم، مېنىڭ ئويلىغىنىم بولسا.سىز شۇ تور بېكەتتە پۇل تاپشۇرۇش، ئېلىش دېتالىغا كىرسىڭىز، .بۇ ئۇسۇلدا پۇل تاپشۇرۇش .ۋە ئېلىش دېتالىغا كىرسىڭىز،-- >>> below_zero({1, 2, 3})
-- false
-- >>> below_zero({1, 2, -4, 5})
-- true
local function below_zero(operations)
","local function below_zero(operations)
    local balance = 0
    for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_zero
    lu.assertEquals(candidate({}), false)
    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_4,uig_Arab,lua,".ئەرەبچىگە ئايلانغاندىن كېيىن، بىز بۇنى ئېنىقلايمىز-- بىرىنجى تەرەپتىكى گەۋدىسى ۋە مەركىزى (ئەركىنلىك نوقتىسى دېگەندەك)-- بۇ بولسا ھەر ئىككىسىنىڭ ئوتتۇرىچە ھەرپىنىڭ چۈشۈشى-- بۇ سانلىق مەلۇماتلار توپلىمىدىكى ئوتتۇرىچە سانغا توغرا كېلىدۇ.-- سانلىق مەلۇمات جەدۋىلىگە قاراپ، ئوتتۇرىچە ئېنىقلىقتىكى پەرقنى ھېسابلايمىز .-- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
-- 1.0
local function mean_absolute_deviation(numbers)
","local function mean_absolute_deviation(numbers)
    local sum = 0
    local count = #numbers
    
    -- Calculate the mean
    for _, number in ipairs(numbers) do
        sum = sum + number
    end
    local mean = sum / count
    
    -- Calculate the mean absolute deviation
    local total_deviation = 0
    for _, number in ipairs(numbers) do
        total_deviation = total_deviation + math.abs(number - mean)
    end
    
    return total_deviation / count
end

-- Example usage
-- print(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})) -- Output: 1.0","lu = require('luaunit')

function test_humaneval()
local candidate = mean_absolute_deviation
    lu.assertEquals(candidate({1.0, 2.0}), 0.5)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_5,uig_Arab,lua,"- كىرگۈزگۈچ جەدۋىلىدىكى ھەر ئىككى ئارقا-ئارقىدىن كىرگەن سانلار ئارىسىغا ""مەزكۇر"" ساننى كىرگۈزۈڭ-- >>> intersperse({}, 4)
-- {}
-- >>> intersperse({1, 2, 3}, 4)
-- {1, 4, 2, 4, 3}
local function intersperse(numbers, delimeter)
","local function intersperse(numbers, delimeter)
    local result = {}
    for i = 1, #numbers do
        table.insert(result, numbers[i])
        if i < #numbers then
            table.insert(result, delimeter)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersperse
    lu.assertEquals(candidate({}, 7), {})
    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_6,uig_Arab,lua,"-- مەسىلەن: (() (()) نىڭ ئەڭ كۆپ بولغاندا ئىككى دەرىجە يۇرۇش ئورنى بار ، ((())) نىڭ بولسا ئۈچ دەرىجە يۇرۇش ئورنى بار .- ھەر بىر گۇرۇپپا ئۈچۈن، ئەڭ چوڭقۇر قاتلامدىكى سانلىق مەلۇماتلارنى چىقىرىپ بېرىڭ.-- بۇ يەردىكى مۇناسىۋەتلىك ئورۇنلارنى بېسىپ چىقىرىش ئۈچۈن، بىر قانچە تەرەپتىن نۇرغۇنلىغان بۆلۈكلەرنى چىقىرىپ چىقىرىشقا توغرا كېلىدۇ.-- >>> parse_nested_parens('(()()) ((())) () ((())()())')
-- {2, 3, 1, 3}
local function parse_nested_parens(paren_string)
","local function parse_nested_parens(paren_string)
    local results = {}
    for group in paren_string:gmatch(""%S+"") do
        local max_depth = 0
        local current_depth = 0
        for char in group:gmatch(""."") do
            if char == '(' then
                current_depth = current_depth + 1
                if current_depth > max_depth then
                    max_depth = current_depth
                end
            elseif char == ')' then
                current_depth = current_depth - 1
            end
        end
        table.insert(results, max_depth)
    end
    return results
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_nested_parens
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})
    lu.assertEquals(candidate('(()(())((())))'), {4})
end

os.exit(lu.LuaUnit.run())"
HumanEval_7,uig_Arab,lua,"- پەقەت مەلۇم تارماق تىزىملىكىگە مۇناسىۋەتلىك تارماق تىزىملىكىگە سۈزۈك كىرگۈزۈش-- >>> filter_by_substring({}, 'a')
-- {}
-- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
-- {'abc', 'bacd', 'array'}
local function filter_by_substring(strings, substring)
","local function filter_by_substring(strings, substring)
    local result = {}
    for _, str in ipairs(strings) do
        if string.find(str, substring) then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_substring
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_8,uig_Arab,lua,"-- بۇ خالىي جەدۋەل 0 گە تەڭ، خالىي بىرىكمە 1 گە تەڭ- بىر جەدۋەلدىكى پۈتۈن سانلارنى قوشۇپ، جەدۋەلدىكى پۈتۈن سانلارنىڭ قوشۇمچە ھاسىلاتىنى قايتۇرىمىز.-- >>> sum_product({})
-- {0, 1}
-- >>> sum_product({1, 2, 3, 4})
-- {10, 24}
local function sum_product(numbers)
","local function sum_product(numbers)
    local sum = 0
    local product = 1

    for _, number in ipairs(numbers) do
        sum = sum + number
        product = product * number
    end

    return {sum, product}
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_product
    lu.assertEquals(candidate({}), {0, 1})
    lu.assertEquals(candidate({1, 1, 1}), {3, 1})
    lu.assertEquals(candidate({100, 0}), {100, 0})
    lu.assertEquals(candidate({3, 5, 7}), {15, 105})
    lu.assertEquals(candidate({10}), {10, 10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_9,uig_Arab,lua,"-- بۇ يەردىكى خاتىرە سىز نى قانداق ماتېماتىكا قىلىپ ياسىغان ؟-- مۇئەييەن بىر جەدۋەلدىن، مۇئەييەن بىر ۋاقىتقىچە تېپىلغان ئەڭ چوڭ ئېلېمېنتنى چىقىرىپ چىقىرىدۇ ---- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})
-- {1, 2, 3, 3, 3, 4, 4}
local function rolling_max(numbers)
","local function rolling_max(numbers)
    local result = {}
    local max_so_far = numbers[1]
    
    for i = 1, #numbers do
        if numbers[i] > max_so_far then
            max_so_far = numbers[i]
        end
        table.insert(result, max_so_far)
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = rolling_max
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})
    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})
end

os.exit(lu.LuaUnit.run())"
HumanEval_10,uig_Arab,lua,"-- بۇ سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ ئالدىغا يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ ئالدىغا يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش سىتونلۇق سۆز بىرىكمىسىنىڭ كەينى تەرىپىگە يانداش- - تەمىنلەنگەن ھەرپنىڭ ئەڭ ئۇزۇن ئارقا قىسمىنى تېپىپ چىقىڭ.- ئالگورىتمىنىڭ پىكرى ئاددىي: - بىر تاردىن باشلانغان ئەڭ قىسقا پالىندرومنى تېپىڭ.-- >>> make_palindrome('')
-- ''
-- >>> make_palindrome('cat')
-- 'catac'
-- >>> make_palindrome('cata')
-- 'catac'
local function make_palindrome(string)
","local function make_palindrome(s)
    -- Function to check if a given string is a palindrome
    local function is_palindrome(str)
        local len = #str
        for i = 1, len // 2 do
            if str:sub(i, i) ~= str:sub(len - i + 1, len - i + 1) then
                return false
            end
        end
        return true
    end

    local len = #s
    -- Find the longest postfix of the string that is a palindrome
    for i = len, 1, -1 do
        if is_palindrome(s:sub(i)) then
            local prefix = s:sub(1, i - 1)
            -- Reverse the prefix and append to the original string
            return s .. prefix:reverse()
        end
    end

    -- If the string is empty or no palindrome is found (shouldn't happen as 
    -- an empty or single character string is a palindrome), return the string itself
    return s
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_palindrome
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('x'), 'x')
    lu.assertEquals(candidate('xyz'), 'xyzyx')
    lu.assertEquals(candidate('xyx'), 'xyx')
    lu.assertEquals(candidate('jerry'), 'jerryrrej')
end

os.exit(lu.LuaUnit.run())"
HumanEval_11,uig_Arab,lua,"بۇ كىرگۈزگۈچلەرگە ئىككىلىك XOR نى ئىجرا قىلىڭ ۋە نەتىجىنى بىر تارماق قىلىپ قايتۇرىڭ..ئۈچۈن سىز بىر، ئىككى، ئۈچ، تۆت، بەش، ئالتە، تۆت، ئالتە، تۆت، ئالتە، تۆت، ئالتە، تۆت، ئالتە، تۆت، ئالتە، تۆت، ئالتە، بەش، ئالتە، تۆت، ئالتە، تۆت، ئالتە، تۆت، ئالتە، بەش، ئالتە، تۆت، ئالتە، تۆت، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، ئالتە، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، بەش، .-- >>> string_xor('010', '110')
-- '100'
local function string_xor(a, b)
","local function string_xor(a, b)
    local result = {}
    for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
            table.insert(result, '0')
        else
            table.insert(result, '1')
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_xor
    lu.assertEquals(candidate('111000', '101010'), '010010')
    lu.assertEquals(candidate('1', '1'), '0')
    lu.assertEquals(candidate('0101', '0000'), '0101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_12,uig_Arab,lua,"- ئوخشاش ئۇزۇنلۇقتىكى ھەرپلەر. كىرگۈزگۈچ جەدۋىلى بوش بولسا، nil نى قايتۇرۇڭ..ئەگەر سىز بىر قانچە قېتىم ئىشلەتسىڭىز، ئەڭ ئۇزۇن قىسقۇچنى تاللاڭ، ئەگەر كۆپ قىسقۇچ بولسا، بىرىنچى قىسقۇچنى تاللاڭ-- >>> longest({})
-- None
-- >>> longest({'a', 'b', 'c'})
-- 'a'
-- >>> longest({'a', 'bb', 'ccc'})
-- 'ccc'
local function longest(strings)
","local function longest(strings)
    if #strings == 0 then
        return nil
    end

    local max_len = 0
    local longest_str = nil

    for _, str in ipairs(strings) do
        if #str > max_len then
            max_len = #str
            longest_str = str
        end
    end

    return longest_str
end","lu = require('luaunit')

function test_humaneval()
local candidate = longest
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')
    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')
end

os.exit(lu.LuaUnit.run())"
HumanEval_13,uig_Arab,lua,"a ۋە b نىڭ ئەڭ چوڭ ئورتاق بۆلگۈچ سانىنى قايتۇرىمىز.-- >>> greatest_common_divisor(3, 5)
-- 1
-- >>> greatest_common_divisor(25, 15)
-- 5
local function greatest_common_divisor(a, b)
","local function greatest_common_divisor(a, b)
    while b ~= 0 do
        local temp = b
        b = a % b
        a = temp
    end
    return a
end","lu = require('luaunit')

function test_humaneval()
local candidate = greatest_common_divisor
    lu.assertEquals(candidate(3, 7), 1)
    lu.assertEquals(candidate(10, 15), 5)
    lu.assertEquals(candidate(49, 14), 7)
    lu.assertEquals(candidate(144, 60), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_14,uig_Arab,lua,"- كىرگۈزگۈچ سىتونىنىڭ ئەڭ قىسقا سىتونىدىن ئەڭ ئۇزۇن سىتونىغىچە بولغان بارلىق ئالدىنقىسىنىڭ قايتۇرىش جەدۋىلىنى قايتۇرىدۇ .-- >>> all_prefixes('abc')
-- {'a', 'ab', 'abc'}
local function all_prefixes(string)
","local function all_prefixes(string)
    local prefixes = {}
    for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
    end
    return prefixes
end","lu = require('luaunit')

function test_humaneval()
local candidate = all_prefixes
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_15,uig_Arab,lua,"- 0 دىن n گىچە بولغان ئارىلىقتىكى سانلارنى ئۆز ئىچىگە ئالغان بىر تار تارماق قايتۇرۇپ بىرىدۇ.-- >>> string_sequence(0)
-- '0'
-- >>> string_sequence(5)
-- '0 1 2 3 4 5'
local function string_sequence(n)
","local function string_sequence(n)
    local result = {}
    for i = 0, n do
        table.insert(result, tostring(i))
    end
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_sequence
    lu.assertEquals(candidate(0), '0')
    lu.assertEquals(candidate(3), '0 1 2 3')
    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')
end

os.exit(lu.LuaUnit.run())"
HumanEval_16,uig_Arab,lua,".ھەر بىر بوغۇمغا قاراپ ھەربىر بوغۇمنىڭ ھەر قانداق بىر ھەرپىنى ئىپادىلىگىلى بولىدۇ-- >>> count_distinct_characters('xyzXYZ')
-- 3
-- >>> count_distinct_characters('Jerry')
-- 4
local function count_distinct_characters(string)
","local function count_distinct_characters(string)
    local char_set = {}
    local lower_string = string:lower()
    for i = 1, #lower_string do
        local char = lower_string:sub(i, i)
        char_set[char] = true
    end
    local count = 0
    for _ in pairs(char_set) do
        count = count + 1
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_distinct_characters
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abcde'), 5)
    lu.assertEquals(candidate('abcdecadeCADE'), 5)
    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)
    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)
end

os.exit(lu.LuaUnit.run())"
HumanEval_17,uig_Arab,lua,""".شۇنداقمۇ؟"" بۇ بىر بوغۇم، بىر بوغۇمغا سوزۇلۇپ كېتىدۇ- ""o"" نىڭ مەنىسى ""ياكى"" . - يېرىم نوتا، ئىككى قېتىم.ئۇمۇرتقىسىز،تۆت قېتىملىق،يۇقۇملىنىشچان- مانا بۇ بىر رىۋايەت:- ئاخىرقى قېتىم ئەمەس.ئەمدى، بۇ سىتوننى چىقىرىپ، ھەربىر جەدۋەلنىڭ قانچىلىك قېتىمدا ئۇرۇلىدىغانلىقىنى ھېسابلايمىز-- بۇ فۇنكسىيەگە ئالاھىدە بىر خىل ASCII شەكلىدە نۇتۇقلار تىزىملىكى كىرگۈزۈلىدۇ .-- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
local function parse_music(music_string)
","local function parse_music(music_string)
    local beats = {}
    for note in music_string:gmatch(""%S+"") do
        if note == 'o' then
            table.insert(beats, 4)
        elseif note == 'o|' then
            table.insert(beats, 2)
        elseif note == '.|' then
            table.insert(beats, 1)
        end
    end
    return beats
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_music
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_18,uig_Arab,lua,"-- مەلۇم بىر تارماقنىڭ ئەسلى تارماقتىن قانچە قېتىم تېپىلىدىغانلىقىنى تېپىپ چىقىڭ.-- >>> how_many_times('', 'a')
-- 0
-- >>> how_many_times('aaa', 'a')
-- 3
-- >>> how_many_times('aaaa', 'aa')
-- 3
local function how_many_times(string, substring)
","local function how_many_times(string, substring)
    if substring == '' then return 0 end
    local count = 0
    local start = 1

    while true do
        local found = string:find(substring, start, true)
        if not found then
            break
        end
        count = count + 1
        start = found + 1
    end

    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = how_many_times
    lu.assertEquals(candidate('', 'x'), 0)
    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
    lu.assertEquals(candidate('cacacacac', 'cac'), 4)
    lu.assertEquals(candidate('john doe', 'john'), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_19,uig_Arab,lua,"- ئەڭ كىچىك ساندىن ئەڭ چوڭ سانغا تەرتىپلىك تارماقنى قايتۇرىدۇ .- ""نۆل""، ""بىر""، ""ئىككى""، ""ئۈچ""، ""تۆت""، ""بەش""، ""ئالتە""، ""يەتتە""، ""سەككىز"" ۋە ""توققۇز"" دېگەنلەر توغرا تاللاشلار.-- بۇ بولسا سىنبەلگە ئارقىلىق بەلگىلەنگەن نۇمۇرلار تىزىملىكى ""0"" دىن ""9"" گە قەدەر-- >>> sort_numbers('three one five')
-- 'one three five'
local function sort_numbers(numbers)
","local function sort_numbers(numbers)
    local number_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
    }

    local number_names = {
        [0] = 'zero',
        [1] = 'one',
        [2] = 'two',
        [3] = 'three',
        [4] = 'four',
        [5] = 'five',
        [6] = 'six',
        [7] = 'seven',
        [8] = 'eight',
        [9] = 'nine'
    }

    local words = {}
    for word in numbers:gmatch(""%S+"") do
        table.insert(words, word)
    end

    table.sort(words, function(a, b)
        return number_map[a] < number_map[b]
    end)

    local sorted_numbers = {}
    for _, word in ipairs(words) do
        table.insert(sorted_numbers, number_names[number_map[word]])
    end

    return table.concat(sorted_numbers, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_numbers
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('three'), 'three')
    lu.assertEquals(candidate('three five nine'), 'three five nine')
    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
end

os.exit(lu.LuaUnit.run())"
HumanEval_20,uig_Arab,lua,"-- يەنە بىرنى ئالسىڭىز، ئۇنىڭدا يەنە بىرنى ئالسىڭىز، ئاندىن ئۇنىڭدا يەنە بىرنى ئالسىڭىز، ئاندىن ئۇنى رەت-تەرتىپ بويىچە قايتۇرسىڭىز بولىدۇ (ئازراق سان، كۆپ سان)-- سىز تەمىنلىگەن سان جەدۋىلىدىن (ئاز دېگەندە ئىككى ساندىن ئېشىپ كېتىشى كېرەك) ھەر بىرىگە ئەڭ يېقىن بولغان ئىككى ساننى تاللاپ، قايتۇرۇپ بېرىڭ .-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})
-- {2.0, 2.2}
-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})
-- {2.0, 2.0}
local function find_closest_elements(numbers)
","local function find_closest_elements(numbers)
    table.sort(numbers)
    local min_diff = math.huge
    local result = {}

    for i = 1, #numbers - 1 do
        local diff = numbers[i + 1] - numbers[i]
        if diff < min_diff then
            min_diff = diff
            result = {numbers[i], numbers[i + 1]}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_closest_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_21,uig_Arab,lua,"-- ئەڭ كىچىك سانى 0، ئەڭ چوڭ سانى 1 .-- سان جەدۋىلىگە (ئاز دېگەندە ئىككى دانە ئېلېمېنتتىن ئىبارەت) سىزىقلىق ئۆزگەرتىشنى ئىشلىتىمىز،-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
-- {0.0, 0.25, 0.5, 0.75, 1.0}
local function rescale_to_unit(numbers)
","local function rescale_to_unit(numbers)
    local min_val = math.huge
    local max_val = -math.huge

    -- Find the min and max values in the table
    for _, num in ipairs(numbers) do
        if num < min_val then
            min_val = num
        end
        if num > max_val then
            max_val = num
        end
    end

    local scale = max_val - min_val

    -- Apply the transformation
    local transformed = {}
    for i, num in ipairs(numbers) do
        transformed[i] = (num - min_val) / scale
    end

    return transformed
end","lu = require('luaunit')

function test_humaneval()
local candidate = rescale_to_unit
    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
end

os.exit(lu.LuaUnit.run())"
HumanEval_22,uig_Arab,lua,"-- بۇ سانلارنى پەقەت پۈتۈن سانلارغا ئايرىپ چىقساقلا بولىدۇ ---- >>> filter_integers({'a', 3.14, 5})
-- {5}
-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
-- {1, 2, 3}
local function filter_integers(values)
","local function filter_integers(values)
    local result = {}
    for _, value in ipairs(values) do
        if type(value) == ""number"" and math.type(value) == ""integer"" then
            table.insert(result, value)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_integers
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_23,uig_Arab,lua,"- بەلگىلەنگەن تارنىڭ ئۇزۇنلۇقىنى قايتۇرىمىز .-- >>> strlen('')
-- 0
-- >>> strlen('abc')
-- 3
local function strlen(string)
","local function strlen(string)
    return #string
end","lu = require('luaunit')

function test_humaneval()
local candidate = strlen
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('x'), 1)
    lu.assertEquals(candidate('asdasnakj'), 9)
end

os.exit(lu.LuaUnit.run())"
HumanEval_24,uig_Arab,lua,".بىر نۇمۇردىن كېيىن، n دىن كىچىك، ئەڭ چوڭ، n نى تەڭ بۆلىدىغان چوڭ نۇمۇرنى تېپىپ چىقىڭ-- >>> largest_divisor(15)
-- 5
local function largest_divisor(n)
","local function largest_divisor(n)
    for i = n - 1, 1, -1 do
        if n % i == 0 then
            return i
        end
    end
    return nil -- In case no divisor is found, though this will not happen for n > 1
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_divisor
    lu.assertEquals(candidate(3), 1)
    lu.assertEquals(candidate(7), 1)
    lu.assertEquals(candidate(10), 5)
    lu.assertEquals(candidate(100), 50)
    lu.assertEquals(candidate(49), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_25,uig_Arab,lua,".ئۇنداقتا، بۇ خىل سىنئالغۇنىڭ ئېكرانغا چىقىش سۈرئىتى چوقۇم .بارلىق ئامىللارنىڭ تەڭلىمىسىغا تەڭ بولۇشى كېرەك .ھەربىر ئامىلنىڭ ئامىلغا ئايرىش جەريانىدا پەيدا بولغان قېتىم سانى بىلەن ماس كېلىدىغان قېتىم سانى جەدۋەلگە يېزىلىشى كېرەك.-- بۇ بىر جەدۋەلگە، كىچىك ساندىن چوڭ سانغا تەرتىپلىك بېرىلگەن نۇپۇس سانلارنىڭ ھەر قايسى ئامىللىرىنى قوشۇپ چىقىش جەدۋىلى.-- >>> factorize(8)
-- {2, 2, 2}
-- >>> factorize(25)
-- {5, 5}
-- >>> factorize(70)
-- {2, 5, 7}
local function factorize(n)
","local function factorize(n)
    local factors = {}
    local divisor = 2
    while n > 1 do
        while n % divisor == 0 do
            table.insert(factors, divisor)
            n = n / divisor
        end
        divisor = divisor + 1
    end
    return factors
end","lu = require('luaunit')

function test_humaneval()
local candidate = factorize
    lu.assertEquals(candidate(2), {2})
    lu.assertEquals(candidate(4), {2, 2})
    lu.assertEquals(candidate(8), {2, 2, 2})
    lu.assertEquals(candidate(57), {3, 19})
    lu.assertEquals(candidate(3249), {3, 3, 19, 19})
    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})
    lu.assertEquals(candidate(20577), {3, 19, 19, 19})
    lu.assertEquals(candidate(18), {2, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_26,uig_Arab,lua,"-- سىز باياتىن كىرگەن ئۇچۇرنىڭ تەرتىپىنى ئۆز ئىچىگە ئالىدۇ- بىر قېتىمدىن كۆپ ئۇچرايدىغان ھەربىر ئېلمىنتنى پۈتۈن سان جەدۋىلىدىن چىقىرىۋېتىمىز.-- >>> remove_duplicates({1, 2, 3, 2, 4})
-- {1, 3, 4}
local function remove_duplicates(numbers)
","local function remove_duplicates(numbers)
    local counts = {}
    -- Count occurrences of each element
    for _, num in ipairs(numbers) do
        counts[num] = (counts[num] or 0) + 1
    end
    -- Collect elements that occur exactly once
    local result = {}
    for _, num in ipairs(numbers) do
        if counts[num] == 1 then
            table.insert(result, num)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_duplicates
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})
end

os.exit(lu.LuaUnit.run())"
HumanEval_27,uig_Arab,lua,".ھەر بىر بوغۇمنىڭ چوڭ-كىچىك ھەرپىنى چوڭ-كىچىك ھەرپىگە ئايلاندۇرۇڭ-- >>> flip_case('Hello')
-- 'hELLO'
local function flip_case(string)
","local function flip_case(str)
    return (str:gsub(""%a"", function(c)
        if c:lower() == c then
            return c:upper()
        else
            return c:lower()
        end
    end))
end","lu = require('luaunit')

function test_humaneval()
local candidate = flip_case
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hello!'), 'hELLO!')
    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
end

os.exit(lu.LuaUnit.run())"
HumanEval_28,uig_Arab,lua,".بىر تال قىسقۇچنى بىر تار قىسقۇچقا ئايلاندۇرۇڭ-- >>> concatenate({})
-- ''
-- >>> concatenate({'a', 'b', 'c'})
-- 'abc'
local function concatenate(strings)
","local function concatenate(strings)
    return table.concat(strings, """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = concatenate
    lu.assertEquals(candidate({}), '')
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')
    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')
end

os.exit(lu.LuaUnit.run())"
HumanEval_29,uig_Arab,lua,".پەقەت مەلۇم بىر ئارخىپنىلا باشلايدىغان سىتونىلا كىرگۈزۈپ چىقىڭ-- >>> filter_by_prefix({}, 'a')
-- {}
-- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
-- {'abc', 'array'}
local function filter_by_prefix(strings, prefix)
","local function filter_by_prefix(strings, prefix)
    local result = {}
    for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_prefix
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_30,uig_Arab,lua,".پەقەت ئىجابىي نومۇرلارنىلا قايتۇرۇپ بېرىڭ-- >>> get_positive({-1, 2, -4, 5, 6})
-- {2, 5, 6}
-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- {5, 3, 2, 3, 9, 123, 1}
local function get_positive(l)
","local function get_positive(l)
    local positives = {}
    for _, v in ipairs(l) do
        if v > 0 then
            table.insert(positives, v)
        end
    end
    return positives
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_positive
    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
    lu.assertEquals(candidate({-1, -2}), {})
    lu.assertEquals(candidate({}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_31,uig_Arab,lua,"ئەگەر بىر سان باشتا توغرا بولسا راست دەپ قايتۇرۇپ بىرىمىز، بولمىسا خاتا دەپ قايتۇرۇپ بىرىمىز.-- >>> is_prime(6)
-- false
-- >>> is_prime(101)
-- true
-- >>> is_prime(11)
-- true
-- >>> is_prime(13441)
-- true
-- >>> is_prime(61)
-- true
-- >>> is_prime(4)
-- false
-- >>> is_prime(1)
-- false
local function is_prime(n)
","local function is_prime(n)
    if n <= 1 then
        return false
    end
    if n <= 3 then
        return true
    end
    if n % 2 == 0 or n % 3 == 0 then
        return false
    end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_prime
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(101), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(13441), true)
    lu.assertEquals(candidate(61), true)
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(1), false)
    lu.assertEquals(candidate(5), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(17), true)
    lu.assertEquals(candidate(85), false)
    lu.assertEquals(candidate(77), false)
    lu.assertEquals(candidate(255379), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_33,uig_Arab,lua,"- ئوخشاش سانلىق مەلۇماتلارنىڭ قىممىتىگە ئوخشاش، لېكىن رەتلەشكەن.- l' بولسا 3گە بۆلۈنمەيدىغان كۆرسەتكۈچلەردىكى l بىلەن ئوخشاش، 3گە بۆلۈنگەن كۆرسەتكۈچلەردىكى قىممەت ئوخشاش.- بۇ فۇنكسىيە بىر جەدۋەل l نى قوبۇل قىلىپ ، بىر جەدۋەل l' نى قايتۇرۇپ بېرىدۇ ، يەنى-- >>> sort_third({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})
-- {2, 6, 3, 4, 8, 9, 5}
local function sort_third(l)
","local function sort_third(l)
    local divisible_by_three = {}
    
    -- Collect elements at indices divisible by three
    for i = 3, #l, 3 do
        table.insert(divisible_by_three, l[i])
    end

    -- Sort collected elements
    table.sort(divisible_by_three)
    
    -- Create a copy of the original table
    local l_prime = {}
    for i = 1, #l do
        l_prime[i] = l[i]
    end

    -- Replace elements at indices divisible by three with sorted elements
    local sorted_index = 1
    for i = 3, #l, 3 do
        l_prime[i] = divisible_by_three[sorted_index]
        sorted_index = sorted_index + 1
    end

    return l_prime
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_third
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})
    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})
    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_34,uig_Arab,lua,"- جەدۋەلدىكى رەتلەنگەن ئۆزگىچە تۈرلەرنى قايتۇرۇپ بېرىدۇ-- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {0, 2, 3, 5, 9, 123}
local function unique(l)
","local function unique(l)
    local seen = {}
    local result = {}
    
    for _, value in ipairs(l) do
        if not seen[value] then
            table.insert(result, value)
            seen[value] = true
        end
    end
    
    table.sort(result)
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique
    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})
end

os.exit(lu.LuaUnit.run())"
HumanEval_35,uig_Arab,lua,"- جەدۋەلدىكى ئەڭ چوڭ ئېلېمېنتنى قايتۇرىدۇ.-- >>> max_element({1, 2, 3})
-- 3
-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- 123
local function max_element(l)
","local function max_element(l)
    local max = l[1]
    for i = 2, #l do
        if l[i] > max then
            max = l[i]
        end
    end
    return max
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_element
    lu.assertEquals(candidate({1, 2, 3}), 3)
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
end

os.exit(lu.LuaUnit.run())"
HumanEval_36,uig_Arab,lua,"-- بۇ بولسا 11 ياكى 13 گە بۆلۈنىدىغان ن دىن كىچىك پۈتۈن سانلاردا 7 نىڭ پەيدا بولۇش قېتىم سانىنى قايتۇرۇپ بېرىدۇ.-- >>> fizz_buzz(50)
-- 0
-- >>> fizz_buzz(78)
-- 2
-- >>> fizz_buzz(79)
-- 3
local function fizz_buzz(n)
","local function fizz_buzz(n)
    local count = 0
    for i = 1, n - 1 do
        if i % 11 == 0 or i % 13 == 0 then
            local str_i = tostring(i)
            if str_i:find(""7"") then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = fizz_buzz
    lu.assertEquals(candidate(50), 0)
    lu.assertEquals(candidate(78), 2)
    lu.assertEquals(candidate(79), 3)
    lu.assertEquals(candidate(100), 3)
    lu.assertEquals(candidate(200), 6)
    lu.assertEquals(candidate(4000), 192)
    lu.assertEquals(candidate(10000), 639)
    lu.assertEquals(candidate(100000), 8026)
end

os.exit(lu.LuaUnit.run())"
HumanEval_37,uig_Arab,lua,"-- l نىڭ جۈپ كۆرسەتكۈچىنىڭ قىممىتىگە ئوخشاش، لېكىن رەتلەشكەن.- l' بىلەن ئوخشاش، ئوخشاش بولمىغان كۆرسەتكۈچتە ئوخشاش، ئوخشاش كۆرسەتكۈچتە ئوخشاش- بۇ فۇنكسىيە بىر جەدۋەل l نى قوبۇل قىلىپ ، بىر جەدۋەل l' نى قايتۇرۇپ بېرىدۇ ، يەنى-- >>> sort_even({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_even({5, 6, 3, 4})
-- {3, 6, 5, 4}
local function sort_even(l)
","local function sort_even(l)
    -- Extract the even indexed elements
    local even_elements = {}
    for i = 2, #l, 2 do
        table.insert(even_elements, l[i])
    end

    -- Sort the extracted even elements
    table.sort(even_elements)

    -- Create a new table for the result and fill it with the appropriate elements
    local result = {}
    local even_index = 1
    for i = 1, #l do
        if i % 2 == 0 then
            result[i] = even_elements[even_index]
            even_index = even_index + 1
        else
            result[i] = l[i]
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_even
    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})
    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_39,uig_Arab,lua,"-- prime_fib بۇ فىپوناتچى نومۇرى بولغان ن-نۇمۇرنى قايتۇرۇپ بېرىدۇ.-- >>> prime_fib(1)
-- 2
-- >>> prime_fib(2)
-- 3
-- >>> prime_fib(3)
-- 5
-- >>> prime_fib(4)
-- 13
-- >>> prime_fib(5)
-- 89
local function prime_fib(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function fibonacci()
    local a, b = 0, 1
    return function()
        local temp = a
        a, b = b, a + b
        return temp
    end
end

local function prime_fib(n)
    local count = 0
    local fib_gen = fibonacci()
    while true do
        local fib_num = fib_gen()
        if is_prime(fib_num) then
            count = count + 1
            if count == n then
                return fib_num
            end
        end
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_fib
    lu.assertEquals(candidate(1), 2)
    lu.assertEquals(candidate(2), 3)
    lu.assertEquals(candidate(3), 5)
    lu.assertEquals(candidate(4), 13)
    lu.assertEquals(candidate(5), 89)
    lu.assertEquals(candidate(6), 233)
    lu.assertEquals(candidate(7), 1597)
    lu.assertEquals(candidate(8), 28657)
    lu.assertEquals(candidate(9), 514229)
    lu.assertEquals(candidate(10), 433494437)
end

os.exit(lu.LuaUnit.run())"
HumanEval_40,uig_Arab,lua,". - بۇ سۆزلەرنىڭ ھەممىسى يالغان-- ئەگەر سىز ئىستىپا ئۈستەلدىكى ئۈچ ئوخشىمىغان تۈرنى تاللىسىڭىز، بۇ تۈر true غا قايتىدۇ..ئۈچ قات_سوم_تولۇققا ئوخشاش جەدۋەلگە پۈتۈن سانلارنى كىرگۈزىمىز-- >>> triples_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> triples_sum_to_zero({1, 3, -2, 1})
-- true
-- >>> triples_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
-- true
-- >>> triples_sum_to_zero({1})
-- false
local function triples_sum_to_zero(l)
","local function triples_sum_to_zero(l)
    table.sort(l)
    for i = 1, #l - 2 do
        local a = l[i]
        local left = i + 1
        local right = #l
        while left < right do
            local b = l[left]
            local c = l[right]
            local sum = a + b + c
            if sum == 0 then
                return true
            elseif sum < 0 then
                left = left + 1
            else
                right = right - 1
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = triples_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, 5, -1}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), true)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({1, 2, 5, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({1, 3, 5, -100}), false)
    lu.assertEquals(candidate({100, 3, 5, -100}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_41,uig_Arab,lua,"-- بۇ فۇنكسىيەگە ئاساسەن، بۇ خىل تاسادىپىي ھادىسىلەرنىڭ سانىنى چىقىرىپ بېرىدۇ..ئۇلار بىر - بىرىگە قارىشىپ ئۆز ئارا مالامەت قىلىشتى-- بىراق، بۇ ماشىنا ئادەملەرنىڭ يۆتكىلىشى بەكلا ئاسان .شۇڭا ئۇلار توختىماي يۆتكىلىۋاتىدۇبۇ بولسا سىلكىيمىز. قاتناش ۋاستىسى پەقەتلا بىرلا خىل .ئۇچۇرلار بىلەن قاتناشتۇرۇلغان ،شۇڭا، بىز بۇنى "" قاتناشتۇرۇش "" دەپ بىلىمىز .ئۇچۇرلار بولسا بىر تەرەپتىن يەنە بىر تەرەپكە قاراپ قاتناشتۇرۇلغانھەر ئىككى ئاپتوموبىل ئوخشاش سۈرئەتتە ھەرىكەت قىلىدۇ. ئىككى ئاپتوموبىل سوقۇلۇپ كېتىدۇ.بۇ ئىككى ماشىنا ئادەم يۆتكىلىش نۇقتىسىدىن بەكلا يىراق-- بۇ يەردە بىر n ئاپتوموبىل سولدىن ئوڭغا قاراپ يۈرۈۋاتىدۇ .ھازىر بىر جۈپ ئوخشىمىغان n ئاپتوموبىلنىڭ ھەممىسى-- سىز بۇنى خۇددى چەكسىز ئۇزۇن بولغان، ئىنتايىن تۈز سىزىققا ئوخشىتىپ باقسىڭىزمۇ بولىدۇ .بۇ ئىشلارنىڭ ھەممىسى ئىنتايىن ئاسان، ناھايىتى ئاسان، ناھايىتى ئاسان .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن دېگەندەك سىزىقلار بار .مەن سىزىقلار بارlocal function car_race_collision(n)
","local function car_race_collision(n)
    -- Since each car from the left to right collides with each car from the right to left,
    -- the number of collisions will be n*n.
    return n * n
end","lu = require('luaunit')

function test_humaneval()
local candidate = car_race_collision
    lu.assertEquals(candidate(2), 4)
    lu.assertEquals(candidate(3), 9)
    lu.assertEquals(candidate(4), 16)
    lu.assertEquals(candidate(8), 64)
    lu.assertEquals(candidate(10), 100)
end

os.exit(lu.LuaUnit.run())"
HumanEval_42,uig_Arab,lua,".بىر قېتىمدا بىر قانچە قېتىم، يەنى بىر قانچە قېتىم، يەنە بىر قانچە قېتىم-- >>> incr_list({1, 2, 3})
-- {2, 3, 4}
-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {6, 4, 6, 3, 4, 4, 10, 1, 124}
local function incr_list(l)
","local function incr_list(l)
    local result = {}
    for i = 1, #l do
        result[i] = l[i] + 1
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = incr_list
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
end

os.exit(lu.LuaUnit.run())"
HumanEval_43,uig_Arab,lua,". - بۇ سۆزلەرنىڭ ھەممىسى يالغان-- ئەگەر ئىككى ئوخشىمىغان تۈر مەۋجۇت بولسا، بۇ تۈر true غا قايتىدۇ- pairs_sum_to_zero بولسا بىر جەدۋەلدىكى پۈتۈن سانلارنى كىرگۈزگۈچ شەكلىدە ئىشلەتكەن.-- >>> pairs_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> pairs_sum_to_zero({1, 3, -2, 1})
-- false
-- >>> pairs_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
-- true
-- >>> pairs_sum_to_zero({1})
-- false
local function pairs_sum_to_zero(l)
","local function pairs_sum_to_zero(l)
    local seen = {}
    for _, value in ipairs(l) do
        if seen[-value] then
            return true
        end
        seen[value] = true
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = pairs_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), false)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_44,uig_Arab,lua,".ئەگەر سىزدە 10 دىن تۆۋەن نۇمۇر بولسا.ئۇلىنىشنى ئۆزگەرتكەندىن كېيىن، string نىڭ ئىپادىسىنى قايتۇرىدۇ.نۇمۇرغا ئاساسەن كىرگۈزگۈچنىڭ نومۇرىنى ئۆزگەرتىمىز-- >>> change_base(8, 3)
-- '22'
-- >>> change_base(8, 2)
-- '1000'
-- >>> change_base(7, 2)
-- '111'
local function change_base(x, base)
","local function change_base(x, base)
    if base < 2 or base > 9 then
        error(""Base must be between 2 and 9"")
    end

    if x == 0 then
        return ""0""
    end

    local result = """"
    while x > 0 do
        local remainder = x % base
        result = tostring(remainder) .. result
        x = math.floor(x / base)
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = change_base
    lu.assertEquals(candidate(8, 3), '22')
    lu.assertEquals(candidate(9, 3), '100')
    lu.assertEquals(candidate(234, 2), '11101010')
    lu.assertEquals(candidate(16, 2), '10000')
    lu.assertEquals(candidate(8, 2), '1000')
    lu.assertEquals(candidate(7, 2), '111')
    lu.assertEquals(candidate(2, 3), '2')
    lu.assertEquals(candidate(3, 4), '3')
    lu.assertEquals(candidate(4, 5), '4')
    lu.assertEquals(candidate(5, 6), '5')
    lu.assertEquals(candidate(6, 7), '6')
    lu.assertEquals(candidate(7, 8), '7')
end

os.exit(lu.LuaUnit.run())"
HumanEval_45,uig_Arab,lua,".ئۇمۇرتقىسىز ئۈچ بۇلۇڭلۇقنىڭ ئۇزۇنلۇقى ۋە ئېگىزلىكى بىلەن ئوخشاش-- >>> triangle_area(5, 3)
-- 7.5
local function triangle_area(a, h)
","local function triangle_area(a, h)
    return 0.5 * a * h
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(5, 3), 7.5)
    lu.assertEquals(candidate(2, 2), 2.0)
    lu.assertEquals(candidate(10, 8), 40.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_46,uig_Arab,lua,"----- بۇ يەردىكى ھەرپلەرنى ئىشلىتىشكە توغرا كەلسە، بىر فۇنكسىيە يېزىپ بىرىڭ.-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).-- fib4(3) -> 0 -- fib4(2) -> 2  بولسا- fib4(1) -> 0 -- fib4(0) -> 0 .فايبوناتچى سىكۇنىستىكىسىغا ئوخشىشىپ كېتىدىغان فايبوناتچى سىكۇنىستىكىسى تۆۋەندىكىدەك ئېنىقلىنىدۇ-- >>> fib4(5)
-- 4
-- >>> fib4(6)
-- 8
-- >>> fib4(7)
-- 14
local function fib4(n)
","local function fib4(n)
    if n == 0 then return 0 end
    if n == 1 then return 0 end
    if n == 2 then return 2 end
    if n == 3 then return 0 end

    local a, b, c, d = 0, 0, 2, 0

    for i = 4, n do
        local temp = a + b + c + d
        a, b, c, d = b, c, d, temp
    end

    return d
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib4
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 28)
    lu.assertEquals(candidate(10), 104)
    lu.assertEquals(candidate(12), 386)
end

os.exit(lu.LuaUnit.run())"
HumanEval_47,uig_Arab,lua,"-- بۇ جەدۋەلدىكى ھەربىر ئېلمىنتنىڭ ئوتتۇرا قىممىتى-- >>> median({3, 1, 2, 4, 5})
-- 3
-- >>> median({-10, 4, 6, 1000, 10, 20})
-- 15.0
local function median(l)
","local function median(l)
    table.sort(l)
    local n = #l
    if n % 2 == 1 then
        return l[(n + 1) / 2]
    else
        local mid1 = n / 2
        local mid2 = mid1 + 1
        return (l[mid1] + l[mid2]) / 2
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = median
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)
    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)
    lu.assertEquals(candidate({5}), 5)
    lu.assertEquals(candidate({6, 5}), 5.5)
    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_48,uig_Arab,lua,"- بۇ بىر تال تارنىڭ پالىندروم ئىكەنلىكىنى تەكشۈرىدۇ .-- >>> is_palindrome('')
-- true
-- >>> is_palindrome('aba')
-- true
-- >>> is_palindrome('aaaaa')
-- true
-- >>> is_palindrome('zbcd')
-- false
local function is_palindrome(text)
","local function is_palindrome(text)
    return text == string.reverse(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_palindrome
    lu.assertEquals(candidate(''), true)
    lu.assertEquals(candidate('aba'), true)
    lu.assertEquals(candidate('aaaaa'), true)
    lu.assertEquals(candidate('zbcd'), false)
    lu.assertEquals(candidate('xywyx'), true)
    lu.assertEquals(candidate('xywyz'), false)
    lu.assertEquals(candidate('xywzx'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_49,uig_Arab,lua,".2n نى قايتۇرۇپ باقايلى (ئالدىمىزدىكى ھەرپلەرنى ئېسىڭىزدە ساقلىڭ)-- >>> modp(3, 5)
-- 3
-- >>> modp(1101, 101)
-- 2
-- >>> modp(0, 101)
-- 1
-- >>> modp(3, 11)
-- 8
-- >>> modp(100, 101)
-- 1
local function modp(n, p)
","local function modp(n, p)
    return (2^n) % p
end","lu = require('luaunit')

function test_humaneval()
local candidate = modp
    lu.assertEquals(candidate(3, 5), 3)
    lu.assertEquals(candidate(1101, 101), 2)
    lu.assertEquals(candidate(0, 101), 1)
    lu.assertEquals(candidate(3, 11), 8)
    lu.assertEquals(candidate(100, 101), 1)
    lu.assertEquals(candidate(30, 5), 4)
    lu.assertEquals(candidate(31, 5), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_51,uig_Arab,lua,"- remove_vowels بولسا سىترىنگ (string) نى قوبۇل قىلىپ سىترىنگ (string) نىڭ سىترىنگ (vowel) نى قايتۇرۇش فۇنكسىيەسى.-- >>> remove_vowels('')
-- ''
-- >>> remove_vowels('abcdef')
-- 'bcdf'
-- >>> remove_vowels('aaaaa')
-- ''
-- >>> remove_vowels('aaBAA')
-- 'B'
-- >>> remove_vowels('zbcd')
-- 'zbcd'
local function remove_vowels(text)
","local function remove_vowels(text)
    return text:gsub(""[aeiouAEIOU]"", """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_vowels
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
    lu.assertEquals(candidate('fedcba'), 'fdcb')
    lu.assertEquals(candidate('eeeee'), '')
    lu.assertEquals(candidate('acBAA'), 'cB')
    lu.assertEquals(candidate('EcBOO'), 'cB')
    lu.assertEquals(candidate('ybcd'), 'ybcd')
end

os.exit(lu.LuaUnit.run())"
HumanEval_52,uig_Arab,lua,"- ئەگەر جەدۋەلدىكى l نىڭ ھەربىر نومۇرى t نىڭ ئاستىدا بولسا true نى قايتۇرۇپ بېرىڭ.-- >>> below_threshold({1, 2, 4, 10}, 100)
-- true
-- >>> below_threshold({1, 20, 4, 10}, 5)
-- false
local function below_threshold(l, t)
","local function below_threshold(l, t)
    for _, number in ipairs(l) do
        if number >= t then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_threshold
    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)
    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_53,uig_Arab,lua,"- ئىككى ساننى قوشۇپ x ۋە y-- >>> add(2, 3)
-- 5
-- >>> add(5, 7)
-- 12
local function add(x, y)
","local function add(x, y)
    return x + y
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate(0, 1), 1)
    lu.assertEquals(candidate(1, 0), 1)
    lu.assertEquals(candidate(2, 3), 5)
    lu.assertEquals(candidate(5, 7), 12)
    lu.assertEquals(candidate(7, 5), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_54,uig_Arab,lua,"- ئىككى سۆزنىڭ ھەرپى ئوخشاشمۇ؟-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
-- true
-- >>> same_chars('abcd', 'dddddddabc')
-- true
-- >>> same_chars('dddddddabc', 'abcd')
-- true
-- >>> same_chars('eabcd', 'dddddddabc')
-- false
-- >>> same_chars('abcd', 'dddddddabce')
-- false
-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
-- false
local function same_chars(s0, s1)
","local function same_chars(s0, s1)
    local function char_set(str)
        local set = {}
        for c in str:gmatch(""."") do
            set[c] = true
        end
        return set
    end

    local set0 = char_set(s0)
    local set1 = char_set(s1)

    for c in pairs(set0) do
        if not set1[c] then
            return false
        end
    end

    for c in pairs(set1) do
        if not set0[c] then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = same_chars
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)
    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)
    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)
    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)
    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)
    lu.assertEquals(candidate('aabb', 'aaccc'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_55,uig_Arab,lua,"- n-چىسلا فىبوناتچى نومۇرىنى قايتۇرىمىز.-- >>> fib(10)
-- 55
-- >>> fib(1)
-- 1
-- >>> fib(8)
-- 21
local function fib(n)
","local function fib(n)
    if n <= 0 then
        return 0
    elseif n == 1 then
        return 1
    else
        local a, b = 0, 1
        for i = 2, n do
            a, b = b, a + b
        end
        return b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib
    lu.assertEquals(candidate(10), 55)
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(8), 21)
    lu.assertEquals(candidate(11), 89)
    lu.assertEquals(candidate(12), 144)
end

os.exit(lu.LuaUnit.run())"
HumanEval_56,uig_Arab,lua,"- ئەگەر ھەر بىر ئېچىلىش قىسمىدا بىر تاقاش قىسمى بولسا true نى قايتۇرۇپ بېرىڭ..كۆرگۈچلەر بولسا بىر يۈرۈش <"" ۋە "">"" لەر-- >>> correct_bracketing('<')
-- false
-- >>> correct_bracketing('<>')
-- true
-- >>> correct_bracketing('<<><>>')
-- true
-- >>> correct_bracketing('><<>')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '<' then
            balance = balance + 1
        elseif char == '>' then
            balance = balance - 1
        end
        
        if balance < 0 then
            return false
        end
    end
    
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('<>'), true)
    lu.assertEquals(candidate('<<><>>'), true)
    lu.assertEquals(candidate('<><><<><>><>'), true)
    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
    lu.assertEquals(candidate('<<<><>>>>'), false)
    lu.assertEquals(candidate('><<>'), false)
    lu.assertEquals(candidate('<'), false)
    lu.assertEquals(candidate('<<<<'), false)
    lu.assertEquals(candidate('>'), false)
    lu.assertEquals(candidate('<<>'), false)
    lu.assertEquals(candidate('<><><<><>><>><<>'), false)
    lu.assertEquals(candidate('<><><<><>><>>><>'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_57,uig_Arab,lua,"true نى قايتۇرۇپ بىرىمىز، بۇ يەردىكى ھەر بىر تۈرنىڭ بىرخىل ئۆسۈش ياكى تۆۋەنلەش ھەرىكىتى بولىدۇ.-- >>> monotonic({1, 2, 4, 20})
-- true
-- >>> monotonic({1, 20, 4, 10})
-- false
-- >>> monotonic({4, 1, 0, -10})
-- true
local function monotonic(l)
","local function monotonic(l)
    if #l < 2 then
        return true
    end

    local increasing = true
    local decreasing = true

    for i = 2, #l do
        if l[i] > l[i - 1] then
            decreasing = false
        elseif l[i] < l[i - 1] then
            increasing = false
        end
    end

    return increasing or decreasing
end","lu = require('luaunit')

function test_humaneval()
local candidate = monotonic
    lu.assertEquals(candidate({1, 2, 4, 10}), true)
    lu.assertEquals(candidate({1, 2, 4, 20}), true)
    lu.assertEquals(candidate({1, 20, 4, 10}), false)
    lu.assertEquals(candidate({4, 1, 0, -10}), true)
    lu.assertEquals(candidate({4, 1, 1, 0}), true)
    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)
    lu.assertEquals(candidate({9, 9, 9, 9}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_58,uig_Arab,lua,"ئىككى جەدۋەلنىڭ تۈرگە ئايرىلىپ چىققان ئورتاق گەۋدىسىنى قايتۇرىدۇ.-- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})
-- {1, 5, 653}
-- >>> common({5, 3, 2, 8}, {3, 2})
-- {2, 3}
local function common(l1, l2)
","local function common(l1, l2)
    local set1 = {}
    local set2 = {}
    local result = {}

    -- Create a set for the first list
    for _, value in ipairs(l1) do
        set1[value] = true
    end

    -- Create a set for the second list, noting only common elements
    for _, value in ipairs(l2) do
        if set1[value] then
            set2[value] = true
        end
    end

    -- Collect the keys from the set into a results table
    for key in pairs(set2) do
        table.insert(result, key)
    end

    -- Sort the results table
    table.sort(result)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = common
    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})
    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})
    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_59,uig_Arab,lua,"- n نىڭ ئەڭ چوڭ نۇپۇس ئامىلىنى قايتۇرىمىز. n > 1 نى نۇپۇس ئامىلى ئەمەس دەپ پەرەز قىلايلى.-- >>> largest_prime_factor(13195)
-- 29
-- >>> largest_prime_factor(2048)
-- 2
local function largest_prime_factor(n)
","local function largest_prime_factor(n)
    local factor = 2
    while n > 1 do
        if n % factor == 0 then
            n = n / factor
        else
            factor = factor + 1
        end
    end
    return factor
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_prime_factor
    lu.assertEquals(candidate(15), 5)
    lu.assertEquals(candidate(27), 3)
    lu.assertEquals(candidate(63), 7)
    lu.assertEquals(candidate(330), 11)
    lu.assertEquals(candidate(13195), 29)
end

os.exit(lu.LuaUnit.run())"
HumanEval_60,uig_Arab,lua,"-- sum_to_n بولسا 1 دىن n گىچە بولغان سانلارنى قوشۇپ چىقىدىغان فۇنكسىيە-- >>> sum_to_n(30)
-- 465
-- >>> sum_to_n(100)
-- 5050
-- >>> sum_to_n(5)
-- 15
-- >>> sum_to_n(10)
-- 55
-- >>> sum_to_n(1)
-- 1
local function sum_to_n(n)
","local function sum_to_n(n)
    return n * (n + 1) // 2
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_to_n
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(6), 21)
    lu.assertEquals(candidate(11), 66)
    lu.assertEquals(candidate(30), 465)
    lu.assertEquals(candidate(100), 5050)
end

os.exit(lu.LuaUnit.run())"
HumanEval_61,uig_Arab,lua,"- ئەگەر ھەر بىر ئېچىلىش قىسمىدا بىر تاقاش قىسمى بولسا true نى قايتۇرۇپ بېرىڭ.-- بۇ ئىككىسىنىڭ ھەر بىرى "" (_) "" ۋە "" (_) ""-- >>> correct_bracketing('(')
-- false
-- >>> correct_bracketing('()')
-- true
-- >>> correct_bracketing('(()())')
-- true
-- >>> correct_bracketing(')(()')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == ""("" then
            balance = balance + 1
        elseif char == "")"" then
            balance = balance - 1
        end
        if balance < 0 then
            return false
        end
    end
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('()'), true)
    lu.assertEquals(candidate('(()())'), true)
    lu.assertEquals(candidate('()()(()())()'), true)
    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
    lu.assertEquals(candidate('((()())))'), false)
    lu.assertEquals(candidate(')(()'), false)
    lu.assertEquals(candidate('('), false)
    lu.assertEquals(candidate('(((('), false)
    lu.assertEquals(candidate(')'), false)
    lu.assertEquals(candidate('(()'), false)
    lu.assertEquals(candidate('()()(()())())(()'), false)
    lu.assertEquals(candidate('()()(()())()))()'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_62,uig_Arab,lua,"-- بۇ خىلدىكى كۆپ خىل نومۇرلۇقنىڭ ئوخشاش شەكلىدىكى بىر تۈرنىڭ تۈرىنى قايتۇرىمىز.--xs[0] + xs[1] * x + xs[2] * x^2 + .... - xs كۆپ ئىسمنىڭ قوشۇمچىسى-- >>> derivative({3, 1, 2, 4, 5})
-- {1, 4, 12, 20}
-- >>> derivative({1, 2, 3})
-- {2, 6}
local function derivative(xs)
","local function derivative(xs)
    local result = {}
    for i = 2, #xs do
        result[i - 1] = xs[i] * (i - 1)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = derivative
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})
    lu.assertEquals(candidate({1, 2, 3}), {2, 6})
    lu.assertEquals(candidate({3, 2, 1}), {2, 2})
    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})
    lu.assertEquals(candidate({1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_63,uig_Arab,lua,"-- f (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x,y) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x) ^ (x)- fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3)- fib fib ({2) == 1 - fib fib ({1) == 0 - fib fib ({0) == 0 -- فابىنوكى سىكۇنىسى بولسا فابىنوكى سىكۇنىسىغا ئوخشايدۇ،ئۇنىڭ مەنىسى تۆۋەندىكىچە:-- >>> fibfib(1)
-- 0
-- >>> fibfib(5)
-- 4
-- >>> fibfib(8)
-- 24
local function fibfib(n)
","local function fibfib(n)
    if n == 0 then
        return 0
    elseif n == 1 then
        return 0
    elseif n == 2 then
        return 1
    else
        local a, b, c = 0, 0, 1
        for i = 3, n do
            local next_fibfib = a + b + c
            a, b, c = b, c, next_fibfib
        end
        return c
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fibfib
    lu.assertEquals(candidate(2), 1)
    lu.assertEquals(candidate(1), 0)
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 24)
    lu.assertEquals(candidate(10), 81)
    lu.assertEquals(candidate(12), 274)
    lu.assertEquals(candidate(14), 927)
end

os.exit(lu.LuaUnit.run())"
HumanEval_64,uig_Arab,lua,"- مىسال:.مۇشۇنداقلا بۇ سۆزلەرنىڭ ئاخىرىدا يېزىلغان بولسا .ئەرەبچىگە ئايلىنىدۇبۇ يەردە سۆزلەرنىڭ ھەرپى a، e، i، o، u. بۇ يەردە yمۇ a.ئۇلىنىشنى چەكلەش كۆزنىكى ئارقىلىق بىر سۆزنى كىرگۈزۈپ، string نىڭ ئىچىدىكى ھەرپلەرنى قايتۇرۇپ بېرىدۇ- بىر فونكىسىيە يېزىڭ vowels_count بۇ فۇنكىسىيەگە بىر ھەرپ تالنى قوشۇپ -- >>> vowels_count('abcde')
-- 2
-- >>> vowels_count('ACEDY')
-- 3
local function vowels_count(s)
","local function vowels_count(s)
    local count = 0
    local vowels = {a = true, e = true, i = true, o = true, u = true, 
                    A = true, E = true, I = true, O = true, U = true}
                    
    for i = 1, #s do
        local char = s:sub(i, i)
        if vowels[char] or (char == 'y' or char == 'Y') and i == #s then
            count = count + 1
        end
    end
    
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = vowels_count
    lu.assertEquals(candidate('abcde'), 2)
    lu.assertEquals(candidate('Alone'), 3)
    lu.assertEquals(candidate('key'), 2)
    lu.assertEquals(candidate('bye'), 1)
    lu.assertEquals(candidate('keY'), 2)
    lu.assertEquals(candidate('bYe'), 1)
    lu.assertEquals(candidate('ACEDY'), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_65,uig_Arab,lua,"- ئەگەر shift> سانلىق بەلگە بولسا، قايتۇرغان سانلىق بەلگىلەرنى ئەكسىچە يازىمىز.-- ۋە نەتىجىنى بىر تارماق قىلىپ قايتۇرۇپ بېرىدۇ.سىنبەلگە ئارقىلىق، بىز بىكەتنىڭ ھەر بىر بۆلۈمىنى ئايلاندۇرۇپ، بىكەتنىڭ ھەر بىر بۆلۈمىنى يۆتكەپ،-- >>> circular_shift(12, 1)
-- '21'
-- >>> circular_shift(12, 2)
-- '12'
local function circular_shift(x, shift)
","local function circular_shift(x, shift)
    local num_str = tostring(x)
    local num_digits = #num_str
    if shift > num_digits then
        return num_str:reverse()
    else
        local shift_pos = num_digits - (shift % num_digits)
        return num_str:sub(shift_pos + 1) .. num_str:sub(1, shift_pos)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = circular_shift
    lu.assertEquals(candidate(100, 2), '001')
    lu.assertEquals(candidate(12, 2), '12')
    lu.assertEquals(candidate(97, 8), '79')
    lu.assertEquals(candidate(12, 1), '21')
    lu.assertEquals(candidate(11, 101), '11')
end

os.exit(lu.LuaUnit.run())"
HumanEval_66,uig_Arab,lua,"- مىساللار:- ASCII كودى-- بىر كىچىك سەترىگە ئايلىنىپ، ئۇنىڭدىكى ئەڭ چوڭ سەترىگە پەقەتلا ئايلىنىدۇ- ۋەزىپە .-- >>> digitSum('')
-- 0
-- >>> digitSum('abAB')
-- 131
-- >>> digitSum('abcCd')
-- 67
-- >>> digitSum('helloE')
-- 69
-- >>> digitSum('woArBld')
-- 131
-- >>> digitSum('aAaaaXa')
-- 153
local function digitSum(s)
","local function digitSum(s)
    local sum = 0
    for i = 1, #s do
        local char = s:sub(i, i)
        if char:match(""%u"") then
            sum = sum + string.byte(char)
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = digitSum
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abAB'), 131)
    lu.assertEquals(candidate('abcCd'), 67)
    lu.assertEquals(candidate('helloE'), 69)
    lu.assertEquals(candidate('woArBld'), 131)
    lu.assertEquals(candidate('aAaaaXa'), 153)
    lu.assertEquals(candidate(' How are yOu?'), 151)
    lu.assertEquals(candidate('You arE Very Smart'), 327)
end

os.exit(lu.LuaUnit.run())"
HumanEval_67,uig_Arab,lua,"- ھەجەپ قالتىسكەن .- ساندۇققا ساندۇقتىكى مانگو مىۋىسىنىڭ سانىنى قايتۇرىمىز.-- سۇلغۇن ۋە ئالما ، شۇنداقلا مېۋىلەرنىڭ ئومۇمىي سانىنى بىلدۈرىدىغان پۈتۈن سان .-- كۆكتىن (بۇلۇتتىن) مۇبارەك، ئاپلىسىن ۋە مانگو ياسالغان .ئۇمۇرتقىسىز، سۇ سۈيىگە بۇلاقتىن ياسالغان-- ئۇلار بۇ خىلدىكى مېۋىلەرنى بىر تال باغلامغا سالىدۇ .-- بۇ مەشىق ئارقىلىق، بىر قىسىم ئالمىلارنى ۋە نارىنالىرىنى .سىزگە كۆرسىتىپ بېرىمىز-- >>> fruit_distribution('5 apples and 6 oranges', 19)
-- 8
-- >>> fruit_distribution('0 apples and 1 oranges', 3)
-- 2
-- >>> fruit_distribution('2 apples and 3 oranges', 100)
-- 95
-- >>> fruit_distribution('100 apples and 1 oranges', 120)
-- 19
local function fruit_distribution(s, n)
","local function fruit_distribution(s, n)
    local apples, oranges = s:match(""(%d+)%s*apples%s*and%s*(%d+)%s*oranges"")
    apples = tonumber(apples)
    oranges = tonumber(oranges)
    local mangoes = n - (apples + oranges)
    return mangoes
end","lu = require('luaunit')

function test_humaneval()
local candidate = fruit_distribution
    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)
    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)
    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)
    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)
    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)
    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)
    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)
end

os.exit(lu.LuaUnit.run())"
HumanEval_68,uig_Arab,lua,"- بىرىنچى مىسال:- ئەگەر جۈپ قىممەت بولمىسا ياكى بېرىلگەن جەدۋەل بوش بولسا، [] نى قايتۇرۇڭ.-- بۇ يەردىكى ھەر بىر تۈرگە ئايرىم بىر جەدۋەل يېزىپ بىر تەرەپ قىلساق بولىدۇ.-- ئەگەر ئوخشاش كىچىك چەكلىك قىممىتى بار بىر قانچە نوپۇس تېپىلسا ئەڭ كىچىك كۆرسەتكۈچكە ئىگە نوپۇسنى قايتۇرىمىز..بۇ يەردە سىز ئەڭ ئاز ساندىكى .بەلگە بار گىروھنى بايقايسىز.سىز شۇ يېرىدىن بىرنى ئالسىڭىز، يەنە بىرنى ئالسىڭىز بولىدۇ-- سىز بۇنى خۇددى ماڭا دېگەندەك قىلىدۇ سىز دەل مۇشۇنداق قىلماقچى بولىسىز -- (ئالقىش) ، يەنە بىرنى ئېيتاي -- (ئالقىش) ، بەلكى سىز بۇنى خۇددى ماڭا دېگەندەك قىلسىڭىز بولىدۇ-- >>> pluck({4, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 2:
-- >>> pluck({1, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 3:
-- >>> pluck({})
-- {}
-- Example 4:
-- >>> pluck({5, 0, 3, 0, 4, 2})
-- {0, 1}
-- Explanation: 0 is the smallest value, but  there are two zeros,
--              so we will choose the first zero, which has the smallest index.
-- Constraints:
--     * 1 <= nodes.length <= 10000
--     * 0 <= node.value
local function pluck(arr)
","local function pluck(arr)
    local smallest_even_value = nil
    local smallest_index = nil

    for index, value in ipairs(arr) do
        if value % 2 == 0 then
            if smallest_even_value == nil or value < smallest_even_value then
                smallest_even_value = value
                smallest_index = index
            end
        end
    end

    if smallest_even_value == nil then
        return {}
    else
        return {smallest_even_value, smallest_index}
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = pluck
    lu.assertEquals(candidate({4, 2, 3}), {2, 1})
    lu.assertEquals(candidate({1, 2, 3}), {2, 1})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})
    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})
    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})
    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})
    lu.assertEquals(candidate({7, 9, 7, 1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_69,uig_Arab,lua,"- مىساللار:- ئەگەر بۇنداق قىممەت مەۋجۇت بولمىسا، -1 نى قايتۇرۇڭ.-- بىر پۈتۈن ساننىڭ تەكرارلىنىشى جەدۋەلدىكى كۆپ قېتىملىق كۆرۈنىشى.نۆل، شۇنداقلا ئۇنۋېرسال ئۇچۇرنىڭ كۆپلۈكى نۆلدىن چوڭ ياكى باراۋەر-- سىز ئىجابىي تولۇق سانلارنى بېكىتكەندە، ئەڭ چوڭ تولۇق ساننى قايتۇرىسىز.-- >>> search({4, 1, 2, 2, 3, 1})
-- 2
-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})
-- 3
-- >>> search({5, 5, 4, 4, 4})
-- -1
local function search(lst)
","local function search(lst)
    local frequency = {}
    
    -- Calculate the frequency of each number in the list
    for _, num in ipairs(lst) do
        frequency[num] = (frequency[num] or 0) + 1
    end

    local result = -1
    
    -- Determine the maximum valid integer with the criteria
    for num, freq in pairs(frequency) do
        if num > 0 and freq >= num and num > result then
            result = num
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = search
    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)
    lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)
    lu.assertEquals(candidate({3, 3}), -1)
    lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)
    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)
    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)
    lu.assertEquals(candidate({3, 2, 8, 2}), 2)
    lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)
    lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)
    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)
    lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)
    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)
    lu.assertEquals(candidate({1}), 1)
    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)
    lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)
    lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)
    lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)
    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)
    lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)
    lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)
    lu.assertEquals(candidate({10}), -1)
    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)
    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)
    lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)
    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_70,uig_Arab,lua,"- مىساللار:-- ئاندىن قالغان ئەڭ چوڭ، ئەڭ كىچىك، ئەڭ كىچىك قاتارلىقلارنى .مۇكاپاتى بويىچە تارقىتىمىز .ئاندىن، ئەڭ كىچىك، ئەڭ چوڭ بولغاندىكىن، يەنە ئەڭ كىچىك بولغاندىكىن .شۇنداق قىلىسىز-- بۇ خىل ئۇسۇلدا ئىشلەتسىڭىز، ئەڭ تۆۋەن چەكتىن ئاشقاندا ئاندىن بىر تەرەپ قىلىسىز.ئۇزۇن نومۇرلۇق بىر جەدۋەل بولسا، ئېنىقسىز بىر جەدۋەلنى كۆرسىتىپ بىرىڭ-- >>> strange_sort_list({1, 2, 3, 4})
-- {1, 4, 2, 3}
-- >>> strange_sort_list({5, 5, 5, 5})
-- {5, 5, 5, 5}
-- >>> strange_sort_list({})
-- {}
local function strange_sort_list(lst)
","local function strange_sort_list(lst)
    table.sort(lst) -- Sort the list
    local result = {}
    local i, j = 1, #lst
    
    while i <= j do
        table.insert(result, lst[i])
        if i ~= j then
            table.insert(result, lst[j])
        end
        i = i + 1
        j = j - 1
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = strange_sort_list
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})
    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})
    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})
    lu.assertEquals(candidate({111111}), {111111})
end

os.exit(lu.LuaUnit.run())"
HumanEval_71,uig_Arab,lua,"- مىسال:.ئۈچىنچى تەرەپتىن قارىغاندا تېخىمۇ ئېنىقئۈچ يان تەرەپتىن تۈزۈلگەن ئۈچ بۇلۇڭلۇق ھەر ئىككى يان تەرەپنىڭ يىغىندىسى چوڭ بولغاندا توغرا كېلىدۇ.- ئۇنداق بولمىسا قايتىپ كېتىڭ .- ئۈچ تەرەپ بىر ئۈچ بۇلۇڭنى تۈزسە ئۈچ بۇلۇڭنىڭ ئۇچىدا ئوندىن ئىككى بار.ئۈچ بۇلۇڭلۇقنىڭ ئۈچ تەرىپىنىڭ ئۇزۇنلۇقىنى بېكىتىمىز.-- >>> triangle_area(3, 4, 5)
-- 6.0
-- >>> triangle_area(1, 2, 10)
-- -1
local function triangle_area(a, b, c)
","local function triangle_area(a, b, c)
    -- Check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a then
        -- Calculate the semi-perimeter
        local s = (a + b + c) / 2
        -- Calculate the area using Heron's formula
        local area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        -- Return the area rounded to 2 decimal points
        return math.floor(area * 100 + 0.5) / 100
    else
        -- Return -1 if not a valid triangle
        return -1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(3, 4, 5), 6.0)
    lu.assertEquals(candidate(1, 2, 10), -1)
    lu.assertEquals(candidate(4, 8, 5), 8.18)
    lu.assertEquals(candidate(2, 2, 2), 1.73)
    lu.assertEquals(candidate(1, 2, 3), -1)
    lu.assertEquals(candidate(10, 5, 7), 16.25)
    lu.assertEquals(candidate(2, 6, 3), -1)
    lu.assertEquals(candidate(1, 1, 1), 0.43)
    lu.assertEquals(candidate(2, 2, 10), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_72,uig_Arab,lua,"- مىسال:-- ئەگەر سىز Q ھەرپىنىڭ توازنلىق ئېنېرگىيە ئۆلچىمى ۋە جەدۋەلدىكى ھەرپلەرنىڭ ئومۇمىي قىممىتىنى بىلسىڭىز، سىز بۇنى ئەڭ چوڭ بولغان قىممەت بىلەن تەڭ ياكى ئۇنىڭدىن كىچىك بولغان قىممەت دەپ بىلىسىز.- ئەگەر q جىسىم ئۇچۇپ كەتسە true، ئەگەر ئۇچمىسا false دەپ قايتۇرغان فۇنكسىيەنى يازىمىز.-- >>> will_it_fly({1, 2}, 5)
-- false
-- # 1+2 is less than the maximum possible weight, but it's unbalanced.
-- >>> will_it_fly({3, 2, 3}, 1)
-- false
-- # it's balanced, but 3+2+3 is more than the maximum possible weight.
-- >>> will_it_fly({3, 2, 3}, 9)
-- true
-- # 3+2+3 is less than the maximum possible weight, and it's balanced.
-- >>> will_it_fly({3}, 5)
-- true
-- # 3 is less than the maximum possible weight, and it's balanced.
local function will_it_fly(q, w)
","local function will_it_fly(q, w)
    local function is_palindrome(tbl)
        local len = #tbl
        for i = 1, math.floor(len / 2) do
            if tbl[i] ~= tbl[len - i + 1] then
                return false
            end
        end
        return true
    end

    local function sum_elements(tbl)
        local sum = 0
        for _, value in ipairs(tbl) do
            sum = sum + value
        end
        return sum
    end

    if not is_palindrome(q) then
        return false
    end

    local total_weight = sum_elements(q)
    return total_weight <= w
end","lu = require('luaunit')

function test_humaneval()
local candidate = will_it_fly
    lu.assertEquals(candidate({3, 2, 3}, 9), true)
    lu.assertEquals(candidate({1, 2}, 5), false)
    lu.assertEquals(candidate({3}, 5), true)
    lu.assertEquals(candidate({3, 2, 3}, 1), false)
    lu.assertEquals(candidate({1, 2, 3}, 6), false)
    lu.assertEquals(candidate({5}, 5), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_73,uig_Arab,lua,"- مەسىلەن: -- بۇ يەردىكى سۆز ھەر ئىككى تەرەپتىن ئوخشاشلا ئاڭلىنىدۇ سىز بىر تەرەپنى ئۆزگەرتىۋېتىپ، باشقا تەرەپنى ئۆزگەرتەلەيسىز-- بۇ جەدۋەلنى پاليندروم قىلىپ ئۆزگەرتىشكە توغرا كېلىدۇ. پاليندروم جەدۋىلى بولسا،.بىر جەدۋەلنىڭ ئىچىدىكى نۆلگە ئوخشاش ھەرپلەرنى تېپىپ چىقىڭ-- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})
-- 4
-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})
-- 1
-- >>> smallest_change({1, 2, 3, 2, 1})
-- 0
local function smallest_change(arr)
","local function smallest_change(arr)
    local n = #arr
    local changes = 0
    
    for i = 1, math.floor(n / 2) do
        if arr[i] ~= arr[n - i + 1] then
            changes = changes + 1
        end
    end
    
    return changes
end","lu = require('luaunit')

function test_humaneval()
local candidate = smallest_change
    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)
    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)
    lu.assertEquals(candidate({1, 4, 2}), 1)
    lu.assertEquals(candidate({1, 4, 4, 2}), 1)
    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)
    lu.assertEquals(candidate({3, 1, 1, 3}), 0)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({0, 1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_74,uig_Arab,lua,"- مىساللار- ئىككى جەدۋەلنىڭ ھەرپ سانى ئوخشاش بولسا، بىرىنچى جەدۋەلنى قايتۇرىمىز..بىر جەدۋەلدىكى ھەر بىر تارماقتىكى خەتلىكلەرنىڭ ئومۇمىي سانى .باشقا جەدۋەلدىكى خەتلىكلەرنىڭ سانىدىن ئاز-- ئىككى تال ھالقىلىق جەدۋەلنى قوبۇل قىلىپ،  نىڭ بارلىقىنى قايتۇرىدىغان فۇنكسىيەنى يېزىۋېلىڭ-- >>> total_match({}, {})
-- {}
-- >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})
-- {'hI', 'Hi'}
-- >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})
-- {'hi', 'admin'}
-- >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})
-- {'hI', 'hi', 'hi'}
-- >>> total_match({'4'}, {'1', '2', '3', '4', '5'})
-- {'4'}
local function total_match(lst1, lst2)
","local function total_match(lst1, lst2)
    local function total_chars(lst)
        local count = 0
        for _, str in ipairs(lst) do
            count = count + #str
        end
        return count
    end

    local chars_lst1 = total_chars(lst1)
    local chars_lst2 = total_chars(lst2)

    if chars_lst1 < chars_lst2 then
        return lst1
    elseif chars_lst2 < chars_lst1 then
        return lst2
    else
        return lst1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = total_match
    lu.assertEquals(candidate({}, {}), {})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})
    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})
    lu.assertEquals(candidate({}, {'this'}), {})
    lu.assertEquals(candidate({'this'}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_75,uig_Arab,lua,"- مىسال:.ئەگەر بىز A نىڭ 100 دىن كىچىك ئىكەنلىكىنى بىلسەك.بۇ پەقەتلا بىر مەنبە، خالاسئەگەر باشتا بېرىلگەن سان 3 باشتا بېرىلگەن ساننىڭ ھەسسىلەپ بىرىمى بولسا، true دەپ قايتۇرغان فۇنكسىيەنى يازىمىز.-- >>> is_multiply_prime(30)
-- true
-- 30 = 2 * 3 * 5
local function is_multiply_prime(a)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while (i * i) <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function generate_primes(limit)
    local primes = {}
    for i = 2, limit do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end

local function is_multiply_prime(a)
    local primes = generate_primes(100)
    local count = #primes
    for i = 1, count do
        for j = i + 1, count do
            for k = j + 1, count do
                if primes[i] * primes[j] * primes[k] == a then
                    return true
                end
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_multiply_prime
    lu.assertEquals(candidate(5), false)
    lu.assertEquals(candidate(30), true)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), false)
    lu.assertEquals(candidate(125), true)
    lu.assertEquals(candidate(105), true)
    lu.assertEquals(candidate(126), false)
    lu.assertEquals(candidate(729), false)
    lu.assertEquals(candidate(891), false)
    lu.assertEquals(candidate(1001), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_76,uig_Arab,lua,"- مەسىلەن: .ئەگەر n*int=x بولسا x نىڭ بىر دەرىجىسى بولىدۇ. - n نىڭ دەرىجىسى ۋە باشقا ئەھۋاللاردا false نىڭ دەرىجىسىئەگەر سىز x نىڭ بىر ئاددىسىنى يازماقچى بولسىڭىز، true نى قايتۇرغانغا ئوخشاش-- >>> is_simple_power(1, 4)
-- true
-- >>> is_simple_power(2, 2)
-- true
-- >>> is_simple_power(8, 2)
-- true
-- >>> is_simple_power(3, 2)
-- false
-- >>> is_simple_power(3, 1)
-- false
-- >>> is_simple_power(5, 3)
-- false
local function is_simple_power(x, n)
","local function is_simple_power(x, n)
    if x == 1 then
        return true
    end
    if n <= 0 or x <= 0 then
        return false
    end
    local current_power = 1
    while current_power < x do
        current_power = current_power * n
    end
    return current_power == x
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_simple_power
    lu.assertEquals(candidate(16, 2), true)
    lu.assertEquals(candidate(143214, 16), false)
    lu.assertEquals(candidate(4, 2), true)
    lu.assertEquals(candidate(9, 3), true)
    lu.assertEquals(candidate(16, 4), true)
    lu.assertEquals(candidate(24, 2), false)
    lu.assertEquals(candidate(128, 4), false)
    lu.assertEquals(candidate(12, 6), false)
    lu.assertEquals(candidate(1, 1), true)
    lu.assertEquals(candidate(1, 12), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_77,uig_Arab,lua,"- مىساللار:-- دىققەت: سىز ھەرۋاقىت كىرىش قىممىتىنى ساقلاپ قالالايسىز-- ئەگەر بۇ خىل ئوخشىتىش توغرا كەلسە .ئۇ بىر پۈتۈن ساننىڭ بىر تەرەپ قىلغۇچىمۇ؟بىر پۈتۈن سان a نى ئېلىپ true نى قايتۇرغان فۇنكسىيەنى يازىمىز .-- >>> iscube(1)
-- true
-- >>> iscube(2)
-- false
-- >>> iscube(-1)
-- true
-- >>> iscube(64)
-- true
-- >>> iscube(0)
-- true
-- >>> iscube(180)
-- false
local function iscube(a)
","local function iscube(a)
    if a < 0 then
        a = -a
    end
    local cbrt = math.floor(a ^ (1/3) + 0.5)
    return cbrt * cbrt * cbrt == a
end","lu = require('luaunit')

function test_humaneval()
local candidate = iscube
    lu.assertEquals(candidate(1), true)
    lu.assertEquals(candidate(2), false)
    lu.assertEquals(candidate(-1), true)
    lu.assertEquals(candidate(64), true)
    lu.assertEquals(candidate(180), false)
    lu.assertEquals(candidate(1000), true)
    lu.assertEquals(candidate(0), true)
    lu.assertEquals(candidate(1729), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_78,uig_Arab,lua,"- مىساللار:.ئەرەبچىدىكى ھەرپلەر دائىم چوڭ ھەرپلەر بولۇپ يېزىلىدۇ.ئەسكەرتمە: سىز دائىم بىرنى تاللايسىز .ئەسلىدىكى، سىز ئۆزىڭىزگە شۇنى دەيسىز .بۇ بىر خىل مۇناسىۋەت، يەنى .سىزگە ئېنىق بىر مۇناسىۋەت.ب (= ئوندىن بىرى 11), D (= ئوندىن بىرى 13)-- شۇڭا سىز تۆۋەندىكىدەك سانلارنى تېپىپ چىقىشىڭىز كېرەك: 2,3,5,7,-بۇرۇنقى سانلار بولسا 2,3,5,7,11,13,17،....6، 10، 12، 13، 14، 15، 16، 17، 20، 21، 21، 22، 23، 25، 25، 25، 26، 27، 28، 29، 30، 30، 40، 40، 50، 50، 50، 50، 60، 70، 70، 70، 80، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100، 100 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ..بىر دانىدىن چوڭ بولغان .بۇ ئىككى كىچىك تەبىئىي ساننىڭ بىرىنىڭ قوشۇلمىسى ئەمەس .-- بۇ بىر جۈملىگە كىرىدۇ ئېنگىلىزچىدىكى ""prime"" سۆزىنىڭ مەنىسى ""باش"".ھەسەدسەمالدىن ئىبارەت بۇ ئەرزىمەس بۆلىكىگە قاراڭ .ھەمدە بۇنى ئاساس قىلغان-- سىز تاپشۇرۇۋالغان ۋەزىپە شۇكى .-- >>> hex_key('AB')
-- 1
-- >>> hex_key('1077E')
-- 2
-- >>> hex_key('ABED1A33')
-- 4
-- >>> hex_key('123456789ABCDEF0')
-- 6
-- >>> hex_key('2020')
-- 2
local function hex_key(num)
","local function hex_key(num)
    local prime_digits = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true, ['B'] = true, ['D'] = true}
    local count = 0
    for digit in num:gmatch('.') do
        if prime_digits[digit] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = hex_key
    lu.assertEquals(candidate('AB'), 1)
    lu.assertEquals(candidate('1077E'), 2)
    lu.assertEquals(candidate('ABED1A33'), 4)
    lu.assertEquals(candidate('2020'), 2)
    lu.assertEquals(candidate('123456789ABCDEF0'), 6)
    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_79,uig_Arab,lua,"- مىساللار:-- بۇ كىچىك سان ئەمەس .ئۇ چوڭ ساننى كۆرسىتىپ بېرىدۇ.سىز بىر قانچە ھەرپلەرنى ئۆز ئىچىگە ئالىدۇ db ھەرپلەر بىرىنىڭ بېشىدا ۋە يەنە بىرى سەترىنىڭ ئاخىرىداھەربىر ھەرپنىڭ بىر (0،1) ھەرپى بار.ھەربىر ھەرپ بىر قوشۇمچە ھەرپ بولۇپ، ھەرپ بىر تار تارماق قايتۇرۇلىدۇ.-- سىز بىر پارچە ئونلۇق شەكىلدىكى ساننى ئالىسىز .سىزنىڭ ۋەزىپىڭىز ئۇنى .ئەسلىگە ئۆزگەرتىش .-- >>> decimal_to_binary(15)
-- 'db1111db'
-- >>> decimal_to_binary(32)
-- 'db100000db'
local function decimal_to_binary(decimal)
","local function decimal_to_binary(decimal)
    -- Convert the decimal number to binary and remove the '0b' prefix using string.sub
    local binary = string.sub(string.format(""%b"", decimal), 0)
    -- Concatenate 'db' at the start and end of the binary string
    return 'db' .. binary .. 'db'
end","lu = require('luaunit')

function test_humaneval()
local candidate = decimal_to_binary
    lu.assertEquals(candidate(0), 'db0db')
    lu.assertEquals(candidate(32), 'db100000db')
    lu.assertEquals(candidate(103), 'db1100111db')
    lu.assertEquals(candidate(15), 'db1111db')
end

os.exit(lu.LuaUnit.run())"
HumanEval_80,uig_Arab,lua,"- مەسىلەن: .ئەگەر ھەر ئۈچ ھەرپ بىردىن ئېنىق بولسا، ھەرپنىڭ ئۇزۇنلۇقى 3 دىن ئاز ئەمەسلىكى ئېنىق .-- بۇ سىز دېرىزىنىڭ ئۇمۇرتقىسىز ياكى ئۇمۇرتقىسىز ئىكەنلىكىنى تەكشۈرۈشكە توغرا كېلىدۇ ..سىز شۇ تور بېكەتتە:-- >>> is_happy('a')
-- false
-- >>> is_happy('aa')
-- false
-- >>> is_happy('abcd')
-- true
-- >>> is_happy('aabb')
-- false
-- >>> is_happy('adb')
-- true
-- >>> is_happy('xyy')
-- false
local function is_happy(s)
","local function is_happy(s)
    -- Check if the string length is less than 3
    if #s < 3 then
        return false
    end

    -- Iterate through the string and check every 3 consecutive characters
    for i = 1, #s - 2 do
        local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i + 2)
        if a == b or b == c or a == c then
            return false
        end
    end

    -- If no 3 consecutive characters are the same, return true
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_happy
    lu.assertEquals(candidate('a'), false)
    lu.assertEquals(candidate('aa'), false)
    lu.assertEquals(candidate('abcd'), true)
    lu.assertEquals(candidate('aabb'), false)
    lu.assertEquals(candidate('adb'), true)
    lu.assertEquals(candidate('xyy'), false)
    lu.assertEquals(candidate('iopaxpoi'), true)
    lu.assertEquals(candidate('iopaxioi'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_81,uig_Arab,lua,"- مىسال:- 0.0 E - > 0.0 D- - 0.7دىن يۇقىرى- > 1.0 D+ - > 1.3 C- - > 1.7 سېنتېگىراد- > 2.0 C+ - > 2.3 B- - > 2.7 ب- >3.0 B+ - > 3.3 A- - > 3.7 A - 4.0 A+  دەپ قويدۇم.ئادەتتىكى ئوقۇتقۇچىلىق سالاھىيىتىڭىز-- تۆۋەندىكى جەدۋەل ئارقىلىق ھەرپ دەرىجىسى جەدۋىلىنى چىقىرىدىغان فۇنكسىيە:- ئۇ سىزگە بىر قانچە ئوقۇغۇچىلارنىڭ ئوتتۇرىچە نەتىجىسىنى بەردى . سىز چوقۇم يېزىپ بېرىشىڭىز كېرەك .-- مەسىلە شۇكى، ئۇ ئۆلچەمگە ئىشلىتىدىغان كودنى يوقىتىپ قويغان..ئوقۇتقۇچى ئۆزىنىڭ بىر خىل ئېلىپبەسىنى تەتقىق قىلىپ چىقتى- بۇ مەۋسۈمنىڭ ئاخىرقى ھەپتىسى . ئوقۇتقۇچى نومۇر بېرىشكە توغرا كېلىدۇ .-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})
-- {'A+', 'B', 'C-', 'C', 'A-'}
local function numerical_letter_grade(grades)
","local function numerical_letter_grade(grades)
    local letter_grades = {}
    for _, gpa in ipairs(grades) do
        local letter
        if gpa == 4.0 then
            letter = ""A+""
        elseif gpa > 3.7 then
            letter = ""A""
        elseif gpa > 3.3 then
            letter = ""A-""
        elseif gpa > 3.0 then
            letter = ""B+""
        elseif gpa > 2.7 then
            letter = ""B""
        elseif gpa > 2.3 then
            letter = ""B-""
        elseif gpa > 2.0 then
            letter = ""C+""
        elseif gpa > 1.7 then
            letter = ""C""
        elseif gpa > 1.3 then
            letter = ""C-""
        elseif gpa > 1.0 then
            letter = ""D+""
        elseif gpa > 0.7 then
            letter = ""D""
        elseif gpa > 0.0 then
            letter = ""D-""
        else
            letter = ""E""
        end
        table.insert(letter_grades, letter)
    end
    return letter_grades
end","lu = require('luaunit')

function test_humaneval()
local candidate = numerical_letter_grade
    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})
    lu.assertEquals(candidate({1.2}), {'D+'})
    lu.assertEquals(candidate({0.5}), {'D-'})
    lu.assertEquals(candidate({0.0}), {'E'})
    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})
    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_82,uig_Arab,lua,"- مىساللار.ئۇزۇنلۇق سان بولسا جۈملىدىن ياكى خاتا بولسا جۈملىدىن-- ئەگەر string نىڭ ھەرپ جەدۋىلى توغرا بولسا true نى قايتۇرغان فۇنكسىيەنى يازىمىز-- >>> prime_length('Hello')
-- true
-- >>> prime_length('abcdcba')
-- true
-- >>> prime_length('kittens')
-- true
-- >>> prime_length('orange')
-- false
local function prime_length(string)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function prime_length(str)
    local length = #str
    return is_prime(length)
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_length
    lu.assertEquals(candidate('Hello'), true)
    lu.assertEquals(candidate('abcdcba'), true)
    lu.assertEquals(candidate('kittens'), true)
    lu.assertEquals(candidate('orange'), false)
    lu.assertEquals(candidate('wow'), true)
    lu.assertEquals(candidate('world'), true)
    lu.assertEquals(candidate('MadaM'), true)
    lu.assertEquals(candidate('Wow'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('HI'), true)
    lu.assertEquals(candidate('go'), true)
    lu.assertEquals(candidate('gogo'), false)
    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)
    lu.assertEquals(candidate('Madam'), true)
    lu.assertEquals(candidate('M'), false)
    lu.assertEquals(candidate('0'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_83,uig_Arab,lua,".1 دىن باشلانغان ۋە ئاخىرلاشقان.بىر نۆلدىن كۆپ ئەرزىيدىغان بىر پۈتۈن ساننى بېكىتىمىز.local function starts_one_ends(n)
","local function starts_one_ends(n)
    if n == 1 then
        return 1 -- The single-digit numbers starting or ending with 1 is just 1 itself.
    end
    -- Calculate the count of n-digit numbers starting with 1 and ending with 1.
    local count_start_with_1 = 10 ^ (n - 1) -- All numbers from 100... to 199...
    local count_end_with_1 = 9 * (10 ^ (n - 1)) -- All numbers from 1, 11, 21,... excluding those starting with 1.
    
    -- A number starting and ending with 1 like 101 has been counted twice, correct for that.
    return count_start_with_1 + count_end_with_1 - 10 ^ (n - 2)
end","lu = require('luaunit')

function test_humaneval()
local candidate = starts_one_ends
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(2), 18)
    lu.assertEquals(candidate(3), 180)
    lu.assertEquals(candidate(4), 1800)
    lu.assertEquals(candidate(5), 18000)
end

os.exit(lu.LuaUnit.run())"
HumanEval_84,uig_Arab,lua,"- مىسالىم .- قوشۇمچە پۈتۈن سان N نى بايقايمىز، قوشۇمچە ھەرپلەرنى قوشۇپ يازىمىز.-- >>> solve(1000)
-- '1'
-- >>> solve(150)
-- '110'
-- >>> solve(147)
-- '1100'
-- Variables:
--     @N integer
--          Constraints: 0 ≤ N ≤ 10000.
-- Output:
--      a string of binary number
local function solve(N)
","local function solve(N)
    local sum = 0
    while N > 0 do
        sum = sum + (N % 10)
        N = math.floor(N / 10)
    end
    return string.format(""%b"", sum)
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate(1000), '1')
    lu.assertEquals(candidate(150), '110')
    lu.assertEquals(candidate(147), '1100')
    lu.assertEquals(candidate(333), '1001')
    lu.assertEquals(candidate(963), '10010')
end

os.exit(lu.LuaUnit.run())"
HumanEval_85,uig_Arab,lua,"- مىساللار:.بىر پۈتۈن سان جەدۋىلى بولۇپ، بىز باشتا ھەرپلەرنى قوشۇپ، ئۇلارنى بىر-بىرىگە ئوخشىتىپ،-- >>> add({4, 2, 6, 7})
-- 2
local function add(lst)
","local function add(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 0 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate({4, 88}), 88)
    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)
    lu.assertEquals(candidate({4, 0, 6, 7}), 0)
    lu.assertEquals(candidate({4, 4, 6, 8}), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_86,uig_Arab,lua,"- مەسىلەن: - دىققەت: سۆز تەرتىپى ۋە جۈملىدىكى بوشلۇقلارنى ساقلاش كېرەك.- قىممەتنىڭ ئۆسۈشىگە ئاساسەن. - يېڭى سۆزگە ئۆزگىرىدۇ ..تارتىپلىق سۆز بىرىكمىسى بولسا، سۆز بىرىكمىسىدىكى ھەر بىر سۆزنى ئايرىيدىغان بىر دانە سۆز-- بىز بۇ يەردىكى ھەرپلەرنى بىر تۈرگە ئايرىپ ئېنىق بىر جۈملىگە ئايلاندۇرالايدىغان بىر فۇنكسىيەنى يازايلى-- >>> anti_shuffle('Hi')
-- 'Hi'
-- >>> anti_shuffle('hello')
-- 'ehllo'
-- >>> anti_shuffle('Hello World!!!')
-- 'Hello !!!Wdlor'
local function anti_shuffle(s)
","local function anti_shuffle(s)
    local function sort_word(word)
        local chars = {}
        for char in word:gmatch(""."") do
            table.insert(chars, char)
        end
        table.sort(chars)
        return table.concat(chars)
    end

    return (s:gsub(""%S+"", sort_word))
end","lu = require('luaunit')

function test_humaneval()
local candidate = anti_shuffle
    lu.assertEquals(candidate('Hi'), 'Hi')
    lu.assertEquals(candidate('hello'), 'ehllo')
    lu.assertEquals(candidate('number'), 'bemnru')
    lu.assertEquals(candidate('abcd'), 'abcd')
    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
end

os.exit(lu.LuaUnit.run())"
HumanEval_87,uig_Arab,lua,"- مىساللار:.شۇنداقلا بۇ يەردە سىز ئەڭ ئاستىدىكى خەتنى باسسىڭىز بولىدۇ-- سىز ئۇنۋېرسال ئۇچۇرنى تارقىتىۋېلىڭ -- ئادەتتە، تارقىتىش ئۇسۇلى بولسا، بىر تەرەپ قىلغۇچتا، ئۈستۈنكى ئۇنۋېرسال ئۇچۇرنى تارقىتىڭ..ھەر بىر جەدۋەل بىر كوزىنتازا (سامان، قۇر) ، يەنى 0 دىن باشلىنىدۇ.قاتارلىقلار تىزىملىكىدىن تېپىلغىنى ...، (x1,y1), (x2,y2) ]،ھازىرقى ۋاقىتتا بىز Lst نى ۋە x نى بايقايمىز .ھازىرقى سانى: x- ھەر بىر قۇردا ھەرخىل ساندىكى ئىستون بولۇشى مۇمكىن..مائارتىسقا ئوخشىشىپ كېتىدۇ .لېكىن بەزى ماتېرىسلار-- سىز بۇنى خۇددى ئىككى ئۆلچەملىك سىستېمىدەك كۆرەلەيسىز.-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)
-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}
-- >>> get_row({}, 1)
-- {}
-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)
-- {{2, 2}}
local function get_row(lst, x)
","local function get_row(lst, x)
    local coordinates = {}
    for row_index, row in ipairs(lst) do
        for col_index = #row, 1, -1 do
            if row[col_index] == x then
                table.insert(coordinates, {row_index - 1, col_index - 1})
            end
        end
    end
    table.sort(coordinates, function(a, b)
        if a[1] == b[1] then
            return a[2] > b[2]
        else
            return a[1] < b[1]
        end
    end)
    return coordinates
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_row
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})
    lu.assertEquals(candidate({}, 1), {})
    lu.assertEquals(candidate({{1}}, 2), {})
    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})
end

os.exit(lu.LuaUnit.run())"
HumanEval_88,uig_Arab,lua,"- مىساللار:.مەزكۇر بەتنى ئۆزگەرتمەڭ- دىققەت:-- ياكى بۇ ساننى تۆۋەنلەش تەرتىپى بويىچە رەتلىسەك .ئەگەر {ئۈچىنچى سان قىممىتى، بىرىنچى سان قىممىتى} جۈپ بولسا .-- ئەگەر سىز بۇ جەدۋەلنى يۇقىرىغا ئۆرلىسەك، بۇ جەدۋەلدىكى (ئالدىنقى كۆرسەتكۈچ قىممىتى، ئاخىرقى كۆرسەتكۈچ قىممىتى) ئوخشاش ئەمەس،- بىر جەدۋەلگە سالاھىيەتسىز پۈتۈن سانلارنى قوشۇپ، تۈرگە ئايرىغاندىن كېيىن، بۇ جەدۋەلنىڭ بىر قىسمىنى قايتۇرىمىز،-- >>> sort_array({})
-- {}
-- >>> sort_array({5})
-- {5}
-- >>> sort_array({2, 4, 3, 0, 1, 5})
-- {0, 1, 2, 3, 4, 5}
-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})
-- {6, 5, 4, 3, 2, 1, 0}
local function sort_array(array)
","local function sort_array(array)
    -- Create a copy of the given table
    local sorted_array = {}
    for i = 1, #array do
        sorted_array[i] = array[i]
    end

    -- If the table is not empty
    if #sorted_array > 0 then
        local first = sorted_array[1]
        local last = sorted_array[#sorted_array]
        local sum = first + last
        
        -- Sort in ascending or descending order based on the sum
        if sum % 2 == 0 then
            table.sort(sorted_array, function(a, b) return a > b end)
        else
            table.sort(sorted_array, function(a, b) return a < b end)
        end
    end

    return sorted_array
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5}), {5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})
    lu.assertEquals(candidate({2, 1}), {1, 2})
    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})
    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})
end

os.exit(lu.LuaUnit.run())"
HumanEval_89,uig_Arab,lua,"- مەسىلەن: .ئىككى قات، ئۈچ قاتلاپ ئىككى ئورۇنغا يۆتكىلىدۇ.ئەرەبچىدە ھەرپلەر ئايلىنىشى كېرەك ..ئەرەبچىنىڭ ھەرپىنى ئايلاندۇرغاندىن كېيىن .بىر قىسىم خەتكۈچلەرنى ئۆز ئىچىگە ئالىدۇ- بىر ھەرپنىڭ ئارگومېنتىنى بىر تەرەپ قىلىدىغان فۇنكسىيە كودى ياساپ ۋە -- >>> encrypt('hi')
-- 'lm'
-- >>> encrypt('asdfghjkl')
-- 'ewhjklnop'
-- >>> encrypt('gf')
-- 'kj'
-- >>> encrypt('et')
-- 'ix'
local function encrypt(s)
","local function encrypt(s)
    local result = {}
    local shift = 2 * 2
    for i = 1, #s do
        local char = s:sub(i,i)
        if char:match(""%a"") then
            local ascii_offset = char:match(""%l"") and string.byte('a') or string.byte('A')
            local new_char = string.char(((string.byte(char) - ascii_offset + shift) % 26) + ascii_offset)
            table.insert(result, new_char)
        else
            table.insert(result, char)
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encrypt
    lu.assertEquals(candidate('hi'), 'lm')
    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')
    lu.assertEquals(candidate('gf'), 'kj')
    lu.assertEquals(candidate('et'), 'ix')
    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')
    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')
    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')
    lu.assertEquals(candidate('a'), 'e')
end

os.exit(lu.LuaUnit.run())"
HumanEval_90,uig_Arab,lua,"- ئەگەر بۇ تۈر مەۋجۇت بولمىسا نۆلنى قايتۇر.-- ئەڭ كىچىك (_N) دىگەن فۇنكسىيەنى يېزىپ بىرىڭ..سىزگە بىر پۈتۈن سان جەدۋىلى بېرىلدۇ-- >>> next_smallest({1, 2, 3, 4, 5})
-- 2
-- >>> next_smallest({5, 1, 4, 3, 2})
-- 2
-- >>> next_smallest({})
-- None
-- >>> next_smallest({1, 1})
-- None
local function next_smallest(lst)
","local function next_smallest(lst)
    if #lst < 2 then
        return nil
    end

    table.sort(lst)

    local first = lst[1]
    for i = 2, #lst do
        if lst[i] > first then
            return lst[i]
        end
    end

    return nil
end","lu = require('luaunit')

function test_humaneval()
local candidate = next_smallest
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)
    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)
end

os.exit(lu.LuaUnit.run())"
HumanEval_91,uig_Arab,lua,"- مەسىلەن: - جۈملىلەر ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، ""، "" قاتارلىقلار بىلەن چەكلىنىدۇ.""مەن"" سۆزىدىن باشلانغان جۈملە ""مەلۇم"" سۆزىدىن باشلىنىدۇ.-- سىز بىر قانچە ھەرپلەرنى ئۆز ئىچىگە ئالغان .سىزنىڭ خىزمىتىڭىز بولسا، ئۇلارغا سان چىقىش-- >>> is_bored('Hello world')
-- 0
-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')
-- 1
local function is_bored(S)
","local function is_bored(S)
    local count = 0
    -- Split the string into sentences using patterns
    for sentence in S:gmatch(""[^%.!?]+"") do
        -- Trim leading whitespace from the sentence
        sentence = sentence:gsub(""^%s+"", """")
        -- Check if the sentence starts with ""I""
        if sentence:sub(1, 1) == ""I"" then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_bored
    lu.assertEquals(candidate('Hello world'), 0)
    lu.assertEquals(candidate('Is the sky blue?'), 0)
    lu.assertEquals(candidate('I love It !'), 1)
    lu.assertEquals(candidate('bIt'), 0)
    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)
    lu.assertEquals(candidate('You and I are going for a walk'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_92,uig_Arab,lua,"- مىساللار- باشقا ئەھۋاللاردا false نى قايتۇرىدۇ..ئەگەر بىر ھەرپ ئىككى ھەرپنىڭ بىرىنىڭ جۈملىسىدىن ئېشىپ كەتسە بۇ سۆز true غا قايتىدۇ .ھەممىمىز جۈملىدىن ئىككى جۈملىدىن ئېشىپ كەتسەك بۇ سۆز true غا قايتىدۇ.ئۈچ خىل نومۇرغا ئىگە بىر فۇنكسىيە تۈزۈڭ-- >>> any_int(5, 2, 7)
-- true
-- >>> any_int(3, 2, 2)
-- false
-- >>> any_int(3, -2, 1)
-- true
-- >>> any_int(3.6, -2.2, 2)
-- false
local function any_int(x, y, z)
","local function any_int(x, y, z)
    if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then
        if x == y + z or y == x + z or z == x + y then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = any_int
    lu.assertEquals(candidate(2, 3, 1), true)
    lu.assertEquals(candidate(2.5, 2, 3), false)
    lu.assertEquals(candidate(1.5, 5, 3.5), false)
    lu.assertEquals(candidate(2, 6, 2), false)
    lu.assertEquals(candidate(4, 2, 2), true)
    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
    lu.assertEquals(candidate(-4, 6, 2), true)
    lu.assertEquals(candidate(2, 1, 1), true)
    lu.assertEquals(candidate(3, 4, 7), true)
    lu.assertEquals(candidate(3.0, 4, 7), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_93,uig_Arab,lua,"- مىساللار:- پەقەتلا خەتلەرنىلا ئالىمىز..ئۇيغۇرچە ئېلىپبەدىكى بىر بوغۇم.بۇ خەتنى ئىككى ئورۇندا قويۇپ باقايلى-- شۇڭا ئۇ ھەرپلەرنى ئۆزگەرتكەن ۋە .ئاۋۇ ھەرپلەرنىڭ ئورنىغا .سۈرەتلىك ھالدا .ھەرپلەرنى يەشكەن-- ماڭا بىر ئۇچۇر ئەۋەتىپ بېرىڭ، ۋە بۇ ئۇچۇرغا .ئۆلچەملىك كىرگۈزۈپ بېرىڭ-- >>> encode('test')
-- 'TGST'
-- >>> encode('This is a message')
-- 'tHKS KS C MGSSCGG'
local function encode(message)
","local function encode(message)
    local vowels = { a = 'c', e = 'g', i = 'k', o = 'q', u = 'w', A = 'C', E = 'G', I = 'K', O = 'Q', U = 'W' }
    local encodedMessage = {}
    
    for i = 1, #message do
        local char = message:sub(i, i)
        
        -- Swap case
        if char:match('%l') then
            char = char:upper()
        else
            char = char:lower()
        end
        
        -- Replace vowels
        if vowels[char] then
            char = vowels[char]
        end
        
        table.insert(encodedMessage, char)
    end
    
    return table.concat(encodedMessage)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encode
    lu.assertEquals(candidate('TEST'), 'tgst')
    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')
    lu.assertEquals(candidate('YES'), 'ygs')
    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')
    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')
end

os.exit(lu.LuaUnit.run())"
HumanEval_94,uig_Arab,lua,"- مىساللار:ئەڭ چوڭ نۇپۇسقا ۋارىسلىق قىلماقچى بولسىڭىز ئۇنىڭ نۇپۇسىنى تېپىپ چىقىڭ.سىزگە بىر پۈتۈن سان جەدۋىلى بېرىلدۇ-- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
-- 10
-- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
-- 25
-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
-- 13
-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
-- 11
-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
-- 3
-- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
-- 7
local function skjkasdkd(lst)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.sqrt(n), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
    end
    return true
end

local function sum_of_digits(n)
    local sum = 0
    while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
    end
    return sum
end

local function skjkasdkd(lst)
    local largest_prime = -1
    for _, v in ipairs(lst) do
        if is_prime(v) and v > largest_prime then
            largest_prime = v
        end
    end
    if largest_prime == -1 then return 0 end
    return sum_of_digits(largest_prime)
end","lu = require('luaunit')

function test_humaneval()
local candidate = skjkasdkd
    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
    lu.assertEquals(candidate({8191}), 19)
    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
    lu.assertEquals(candidate({127, 97, 8192}), 10)
end

os.exit(lu.LuaUnit.run())"
HumanEval_95,uig_Arab,lua,"- مىساللار:- ئەگەر جەدۋەل بوش بولسا فۇنكسىيە false نى قايتۇرۇشى كېرەك.- چوڭ خەت ياكى ھەممە خەتلەر چوڭ خەت تارىدۇر، بولمىسا false نى قايتۇر.- جەدۋەلگە قارىغاندا، ئەگەر ھەممە كۇنۇپكا كىچىك تىپتىكى تارلار بولسا true نى قايتۇرۇپ بىرىمىز.-- >>> check_dict_case({['a'] = 'apple', ['b'] = 'banana'})
-- true
-- >>> check_dict_case({['a'] = 'apple', ['A'] = 'banana', ['B'] = 'banana'})
-- false
-- >>> check_dict_case({['a'] = 'apple', [8] = 'banana', ['a'] = 'apple'})
-- false
-- >>> check_dict_case({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'})
-- false
-- >>> check_dict_case({['STATE'] = 'NC', ['ZIP'] = '12345'})
-- true
local function check_dict_case(dict)
","local function is_lowercase(s)
    return s:lower() == s
end

local function is_uppercase(s)
    return s:upper() == s
end

local function check_dict_case(dict)
    if next(dict) == nil then
        return false
    end

    local lower_case = nil
    for key, _ in pairs(dict) do
        if type(key) ~= 'string' then
            return false
        end
        
        if lower_case == nil then
            lower_case = is_lowercase(key)
        elseif lower_case ~= is_lowercase(key) then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_dict_case
    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)
    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)
    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)
    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)
    lu.assertEquals(candidate({}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_96,uig_Arab,lua,".مەسىلەن:.نۆلدىن كىچىك، تىپى ئاساسىي سان- بىر خىل نۆلگە سالمىغۇسىز پۈتۈن ساننى قوبۇل قىلىپ بىرىنچى نۇملۇقنىڭ جەدۋىلىنى قايتۇرۇش فۇنكسىيەسىنى ئىشلىتىمىز .-- >>> count_up_to(5)
-- {2, 3}
-- >>> count_up_to(11)
-- {2, 3, 5, 7}
-- >>> count_up_to(0)
-- {}
-- >>> count_up_to(20)
-- {2, 3, 5, 7, 11, 13, 17, 19}
-- >>> count_up_to(1)
-- {}
-- >>> count_up_to(18)
-- {2, 3, 5, 7, 11, 13, 17}
local function count_up_to(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function count_up_to(n)
    local primes = {}
    for i = 2, n - 1 do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_up_to
    lu.assertEquals(candidate(5), {2, 3})
    lu.assertEquals(candidate(6), {2, 3, 5})
    lu.assertEquals(candidate(7), {2, 3, 5})
    lu.assertEquals(candidate(10), {2, 3, 5, 7})
    lu.assertEquals(candidate(0), {})
    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})
    lu.assertEquals(candidate(1), {})
    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})
    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})
end

os.exit(lu.LuaUnit.run())"
HumanEval_97,uig_Arab,lua,"- مىساللار:-- بۇ ئۇچۇر مەڭگۈ مەۋجۇت بولىدۇ دەپ پەرەز قىلايلى .- ئۇلارنىڭ بىرلىك سانىنىڭ ھەسسىلەپ سانى..ئۇ ئىككى سىننى ئېلىپ، نەتىجىنى قايتۇرىدۇ-- >>> multiply(148, 412)
-- 16
-- >>> multiply(19, 28)
-- 72
-- >>> multiply(2020, 1851)
-- 0
-- >>> multiply(14, -15)
-- 20
local function multiply(a, b)
","local function multiply(a, b)
    local unitDigitA = math.abs(a) % 10
    local unitDigitB = math.abs(b) % 10
    return unitDigitA * unitDigitB
end","lu = require('luaunit')

function test_humaneval()
local candidate = multiply
    lu.assertEquals(candidate(148, 412), 16)
    lu.assertEquals(candidate(19, 28), 72)
    lu.assertEquals(candidate(2020, 1851), 0)
    lu.assertEquals(candidate(14, -15), 20)
    lu.assertEquals(candidate(76, 67), 42)
    lu.assertEquals(candidate(17, 27), 49)
    lu.assertEquals(candidate(0, 1), 0)
    lu.assertEquals(candidate(0, 0), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_98,uig_Arab,lua,"- مەسىلەن: .بىر قىسىم سىنلارنى ئېلىپ باقايلى، قېنى بىز بىر قىسىم سىنلارنى ئېلىپ باقايلى .سىز ئەڭ يىڭى سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن سىنغا كىرگەن-- >>> count_upper('aBCdEf')
-- 1
-- >>> count_upper('abcdefg')
-- 0
-- >>> count_upper('dBBE')
-- 0
local function count_upper(s)
","local function count_upper(s)
    local count = 0
    local vowels = { A = true, E = true, I = true, O = true, U = true }
    for i = 1, #s, 2 do
        local char = s:sub(i, i)
        if vowels[char] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_upper
    lu.assertEquals(candidate('aBCdEf'), 1)
    lu.assertEquals(candidate('abcdefg'), 0)
    lu.assertEquals(candidate('dBBE'), 0)
    lu.assertEquals(candidate('B'), 0)
    lu.assertEquals(candidate('U'), 1)
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('EEEE'), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_99,uig_Arab,lua,"- مىساللار.بىرنى ئېلىپ قاتلايلى، قاتلايمىزبۇ ئەركىنلىك بىر جەدۋەل. ئەگەر ئۇ جەدۋەلدە ئوخشاش بىر نۇمۇر بار بولسا،- بىر ساننى ئىپادىلەيدىغان قىممەت (سىناق) قوبۇل قىلىدىغان فۇنكسىيە قۇرۇڭ .-- >>> closest_integer('10')
-- 10
-- >>> closest_integer('15.3')
-- 15
-- Note:
-- Rounding away from zero means that if the given number is equidistant
-- from two integers, the one you should return is the one that is the
-- farthest from zero. For example closest_integer(""14.5"") should
-- return 15 and closest_integer(""-14.5"") should return -15.
local function closest_integer(value)
","local function closest_integer(value)
    local number = tonumber(value)
    if not number then
        error(""Invalid number"")
    end
    if number > 0 then
        return math.floor(number + 0.5)
    else
        return math.ceil(number - 0.5)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = closest_integer
    lu.assertEquals(candidate('10'), 10)
    lu.assertEquals(candidate('14.5'), 15)
    lu.assertEquals(candidate('-15.5'), -16)
    lu.assertEquals(candidate('15.3'), 15)
    lu.assertEquals(candidate('0'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_100,uig_Arab,lua,"- مىساللار:-- بۇ i بولسا قاتلامدىكى تاش سانى (i+1)-- ھەر بىر دەرىجىدىكى تاش سانىنى جەدۋەلگە قايتۇرىمىز، بۇ يەردە تۈرگە كۆرسەتكۈچ بار.ئەگەر n جۈپ بولسا، كېيىنكى جۈپ نومۇرغا ئالماشتۇرۇپ بىر تەرەپ قىلىڭ.ئەگەر n تار بولسا بۇ كېيىنكى تار سانغا ئايلىنىدۇ- كېيىنكى قاتلامدىكى تاش سانى: - بىرىنچى قەۋەتتە n تاش بار.بىر جۈملە ن، بىز بۇنى ن قاتلاملىق تاشلارغا ئايلاندۇرىمىز.-- >>> make_a_pile(3)
-- {3, 5, 7}
local function make_a_pile(n)
","local function make_a_pile(n)
    local pile = {}
    local current_stones = n
    for i = 1, n do
        table.insert(pile, current_stones)
        if n % 2 == 0 then
            current_stones = current_stones + 2
        else
            current_stones = current_stones + 2
        end
    end
    return pile
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_a_pile
    lu.assertEquals(candidate(3), {3, 5, 7})
    lu.assertEquals(candidate(4), {4, 6, 8, 10})
    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})
    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})
    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})
end

os.exit(lu.LuaUnit.run())"
HumanEval_101,uig_Arab,lua,"- مەسىلەن: .سىز شۇ سۆزلۈكلەرنى تاللايسىز .ئاندىن بىر جەدۋەل يېزىپ چىقىسىز.سىزگە بىر قىسىم سۆزلەر بېرىلىدۇ .ئۇلار ئايرىم-ئايرىم ھالدا ئىپادىلىنىدۇ .سىزنىڭ ۋەزىپىڭىز:-- >>> words_string('Hi, my name is John')
-- {'Hi', 'my', 'name', 'is', 'John'}
-- >>> words_string('One, two, three, four, five, six')
-- {'One', 'two', 'three', 'four', 'five', 'six'}
local function words_string(s)
","local function words_string(s)
    local words = {}
    for word in s:gmatch(""[^,%s]+"") do
        table.insert(words, word)
    end
    return words
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_string
    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_102,uig_Arab,lua,"- مەسىلەن: ئەگەر بۇ خىلدىكى سانلار بولمىسا، بىز چوقۇم قايتۇرۇشقا تېگىشلىك نۆلدىن تۆۋەن ساننى باسىمىز..ئەگەر بىز ھەرپى ئۆلچىمىدە ئىپادىلىمەكچى بولساق، بىز چوقۇم ھەرپى ئۆلچىمىدە ئىپادىلىمەكچىبۇ فۇنكسىيەگە ئىككى ئەرزىي سان x ۋە y قوشۇلىدۇ .-- >>> choose_num(12, 15)
-- 14
-- >>> choose_num(13, 12)
-- -1
local function choose_num(x, y)
","local function choose_num(x, y)
    -- Ensure x is the smaller and y is the larger
    if x > y then
        x, y = y, x
    end
    
    -- Start from y and work backwards
    for i = y, x, -1 do
        if i % 2 == 0 then
            return i
        end
    end
    
    -- If no even number is found
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = choose_num
    lu.assertEquals(candidate(12, 15), 14)
    lu.assertEquals(candidate(13, 12), -1)
    lu.assertEquals(candidate(33, 12354), 12354)
    lu.assertEquals(candidate(5234, 5233), -1)
    lu.assertEquals(candidate(6, 29), 28)
    lu.assertEquals(candidate(27, 10), -1)
    lu.assertEquals(candidate(7, 7), -1)
    lu.assertEquals(candidate(546, 546), 546)
end

os.exit(lu.LuaUnit.run())"
HumanEval_103,uig_Arab,lua,"- مىسال:-n نىڭ چوڭلۇقى m نىڭكىدىن چوڭ بولسا، -1 نى قايتۇرۇپ باقايلىبۇ جاۋابنى يىقىنقى پۈتۈن سانغا ئايلاندۇرۇپ، ئىككىلىك سانغا ئايلاندۇرۇڭ.-n دىن m گىچە بولغان پۈتۈن سانلارنىڭ ئوتتۇرىچە سانى (n ۋە m نى ئۆز ئىچىگە ئالىدۇ).سىزگە ئىككى ئەرزىي بىر پۈتۈن نۇمۇر بېرىلدۇ N ۋە M نى كۆرسىتىپ بىرىمىز.سىزگە بۇ نۇمۇرنى قايتىدىن كۆرسىتىپ بىرىمىز-- >>> rounded_avg(1, 5)
-- '0b11'
-- >>> rounded_avg(7, 5)
-- -1
-- >>> rounded_avg(10, 20)
-- '0b1111'
-- >>> rounded_avg(20, 33)
-- '0b11010'
local function rounded_avg(n, m)
","local function rounded_avg(n, m)
    if n > m then
        return -1
    end
    
    local sum = 0
    local count = 0

    for i = n, m do
        sum = sum + i
        count = count + 1
    end

    local average = sum / count
    local rounded_avg = math.floor(average + 0.5)

    return string.format(""0b%d"", tonumber(string.format(""%o"", rounded_avg), 8))
end","lu = require('luaunit')

function test_humaneval()
local candidate = rounded_avg
    lu.assertEquals(candidate(1, 5), '0b11')
    lu.assertEquals(candidate(7, 13), '0b1010')
    lu.assertEquals(candidate(964, 977), '0b1111001010')
    lu.assertEquals(candidate(996, 997), '0b1111100100')
    lu.assertEquals(candidate(560, 851), '0b1011000010')
    lu.assertEquals(candidate(185, 546), '0b101101110')
    lu.assertEquals(candidate(362, 496), '0b110101101')
    lu.assertEquals(candidate(350, 902), '0b1001110010')
    lu.assertEquals(candidate(197, 233), '0b11010111')
    lu.assertEquals(candidate(7, 5), -1)
    lu.assertEquals(candidate(5, 1), -1)
    lu.assertEquals(candidate(5, 5), '0b101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_104,uig_Arab,lua,"- مەسىلەن: - ئەسكەرتىش: قايتۇرىدىغان جەدۋەلنى يۇقىرى ئۆرلەش تەرتىپى بويىچە رەتلەش كېرەك.-- شۇڭا بىر قانچە تاللاپ كۆرسەم،.ھەممە X نىڭ بىر جەدۋىلىنى بېسىپ، بىر جەدۋەلگە تىزىپ قايتۇرىمىز-- >>> unique_digits({15, 33, 1422, 1})
-- {1, 15, 33}
-- >>> unique_digits({152, 323, 1422, 10})
-- {}
local function unique_digits(x)
","local function has_even_digit(num)
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            return true
        end
        num = math.floor(num / 10)
    end
    return false
end

local function unique_digits(x)
    local result = {}
    for _, num in ipairs(x) do
        if not has_even_digit(num) then
            table.insert(result, num)
        end
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique_digits
    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})
    lu.assertEquals(candidate({152, 323, 1422, 10}), {})
    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})
    lu.assertEquals(candidate({135, 103, 31}), {31, 135})
end

os.exit(lu.LuaUnit.run())"
HumanEval_105,uig_Arab,lua,"- مەسىلەن: - ""بىر، ئىككى، ئۈچ، تۆت، بەش، ئالتە، يەتتە، سەككىز، توققۇز"".-- نەتىجە ساننى ئەكسىچە قىلىپ ھەربىر خانىنى ئوخشاش نام بىلەن ئالماشتۇرۇپ چىقىڭ.بىر پۈتۈن ساننى بېكىتىمىز، ئاندىن 1 دىن 9 گىچە بولغان پۈتۈن سانلارنى تۈرگە ئايرىمىز-- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
--   If the table is empty, return an empty table:
-- >>> by_length({})
-- {}
--   If the table has any strange number ignore it:
-- >>> by_length({1, -1, 55})
-- {'One'}
local function by_length(arr)
","local function by_length(arr)
    local digits_names = {
        [1] = ""One"", [2] = ""Two"", [3] = ""Three"", [4] = ""Four"", [5] = ""Five"",
        [6] = ""Six"", [7] = ""Seven"", [8] = ""Eight"", [9] = ""Nine""
    }

    local filtered = {}
    for _, num in ipairs(arr) do
        if num >= 1 and num <= 9 then
            table.insert(filtered, num)
        end
    end

    table.sort(filtered, function(a, b) return a > b end)

    for i, num in ipairs(filtered) do
        filtered[i] = digits_names[num]
    end

    return filtered
end","lu = require('luaunit')

function test_humaneval()
local candidate = by_length
    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -1, 55}), {'One'})
    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_106,uig_Arab,lua,"- مىسال:- i نىڭ فاكتورى 1 دىن i گە باراۋەر بولغان سانلارنىڭ ھەسسىلەپ بىرىلىشى (1 * 2 * ... * i).بىر قېتىمدا بىر يېرىمدىن باشلاپ.1 دىن i گىچە بولغان ھەربىر نومۇرنىڭ جەدۋىلى-- ۋە n چوڭلۇقتىكى جەدۋەلنى قايتۇرىدۇ، يەنى، ئەگەر i جۈپ بولسا، i نىڭ قىممىتى i نىڭ فاكتورى بولىدۇ.-- f نىڭ ھەرپىنى چىقىرىپ باقايلى n نى پارامېتىرغا ئايلاندۇرۇپ باقايلى-- >>> f(5)
-- {1, 2, 6, 24, 15}
local function f(n)
","local function factorial(x)
    if x == 0 then
        return 1
    else
        local result = 1
        for i = 2, x do
            result = result * i
        end
        return result
    end
end

local function sum_to_i(x)
    return (x * (x + 1)) // 2
end

local function f(n)
    local result = {}
    for i = 1, n do
        if i % 2 == 0 then
            result[i] = factorial(i)
        else
            result[i] = sum_to_i(i)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = f
    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})
    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})
    lu.assertEquals(candidate(1), {1})
    lu.assertEquals(candidate(3), {1, 2, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_107,uig_Arab,lua,"- بىرىنچى مىسال:-- بۇ بىر پۈتۈن سانلىق قىممەتلىك جەدۋەل، بۇ جەدۋەلنىڭ ھەر قايسى نۇمۇرلىرى {1,n} نىڭ ئىچىدىكى نۇمۇرلار..بىر پۈتۈن سانغا (n) ئېرىشسەك، بىر جەدۋەل تۈزۈپ چىقىمىز-- >>> even_odd_palindrome(3)
-- {1, 2}
--     Explanation:
--     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
-- Example 2:
-- >>> even_odd_palindrome(12)
-- {4, 6}
--     Explanation:
--     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
-- Note:
--     1. 1 <= n <= 10^3
--     2. returned table has the number of even and odd integer palindromes respectively.
local function even_odd_palindrome(n)
","local function is_palindrome(num)
    local str = tostring(num)
    return str == string.reverse(str)
end

local function even_odd_palindrome(n)
    local even_count = 0
    local odd_count = 0

    for i = 1, n do
        if is_palindrome(i) then
            if i % 2 == 0 then
                even_count = even_count + 1
            else
                odd_count = odd_count + 1
            end
        end
    end

    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_palindrome
    lu.assertEquals(candidate(123), {8, 13})
    lu.assertEquals(candidate(12), {4, 6})
    lu.assertEquals(candidate(3), {1, 2})
    lu.assertEquals(candidate(63), {6, 8})
    lu.assertEquals(candidate(25), {5, 6})
    lu.assertEquals(candidate(19), {4, 6})
    lu.assertEquals(candidate(9), {4, 5})
    lu.assertEquals(candidate(1), {0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_108,uig_Arab,lua,".مەسىلەن: 123 نىڭ ھەرپىگە 1، 2، 3 قاتارلىق سىنبەلگىلەر قوشۇلىدۇ.ئەگەر بىر سان سالىھ بولسا، بىرىنچى بوغۇممۇ سالىھ بولىدۇ- ھەربىر ساننىڭ سان سوممىسى 0 دىن يۇقىرى بولغان ئېلېمېنت سانى.-- f (count_nums) دىگەن فۇنكسىيەنى يېزىڭ .ئۇ بىر پۈتۈن سان جەدۋىلىنى ئېلىپ قايتىپ كېلىدۇ .-- >>> count_nums({})
-- 0
-- >>> count_nums({-1, 11, -11})
-- 1
-- >>> count_nums({1, 1, 2})
-- 3
local function count_nums(arr)
","local function count_nums(arr)
    local function sum_of_digits(num)
        local sum = 0
        local is_negative = num < 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        if is_negative then
            sum = sum - 2 * (math.floor(math.abs(arr[index]) / 10 ^ (math.floor(math.log10(math.abs(arr[index]))))))
        end
        return sum
    end

    local count = 0
    for _, num in ipairs(arr) do
        local digit_sum = sum_of_digits(num)
        if digit_sum > 0 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_nums
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({-1, -2, 0}), 0)
    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)
    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)
    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)
    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)
    lu.assertEquals(candidate({0, 1}), 1)
    lu.assertEquals(candidate({1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_109,uig_Arab,lua,".مەسىلەن:- ئەسكەرتىش: بۇ جەدۋەلدە پەقەتلا ئۆزگىچە بولغان ئېلمىنتلار بار.- ئەگەر بېرىلگەن جەدۋەل بوش بولسا true نى قايتۇرۇپ بېرىڭ.- ئاندىن راستنى قايتۇرۇڭ ياكى خاتانى قايتۇرۇڭ.- ئەگەر يۇقارقى مەشغۇلات ئارقىلىق رەتلەنگەن جەدۋەلنى تېپىپ چىققىلى بولسا .-- بۇ جەدۋەلدىكى باشلىنىش ئورنى يەنى 0-نومۇرلۇق كۆرسەتكۈچ-- بۇ يەردىكى ئەڭ ئاخىرقى تۈر .ئەسلىدىكى ئەڭ ئاخىرقى تۈر.بىر قېتىم ئوڭغا يۆتكەش ھەرىكىتى، جەدۋەلدىكى بارلىق تۈرلەرنى بىر قېتىم يۆتكەشنى كۆرسىتىدۇ.سىز خالىغان ۋاقىتتا بۇ ئەسۋاپنى ئوڭ تەرەپكە يۆتكەپ ئىشلەتسىڭىز بولىدۇ- تۆۋەندىكى جەدۋەلدىكى مەشغۇلات:-- بۇ يەردىكى جەدۋەلنى تۆۋەنلەپ كەتمەسلىك تەرتىپى بويىچە رەتلەش مۇمكىن .-- سانلىق مەلۇماتلار ئاساسىي قاتلامغا كىرگەن -- بۇ سانلىق مەلۇماتلار ئاساسىي قاتلامغا كىرگەن -- سىلەر بۇنى تەكشۈرۈپ باققاندا .- بىزدە N پۈتۈن ساندىن تەركىپ تاپقان بىر جەدۋەل بار arr[1], arr[2], ..., arr[N].-- >>> move_one_ball({3, 4, 5, 1, 2})
-- true
-- Explanation: By performin 2 right shift operations, non-decreasing order can
--              be achieved for the given table.
-- >>> move_one_ball({3, 5, 4, 1, 2})
-- false
-- Explanation:It is not possible to get non-decreasing order for the given
--             table by performing any number of right shift operations.
local function move_one_ball(arr)
","local function move_one_ball(arr)
    local n = #arr
    if n == 0 then
        return true
    end

    local count_descending_pairs = 0

    for i = 1, n do
        if arr[i] > arr[(i % n) + 1] then
            count_descending_pairs = count_descending_pairs + 1
        end
        if count_descending_pairs > 1 then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = move_one_ball
    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)
    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)
    lu.assertEquals(candidate({4, 3, 1, 2}), false)
    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)
    lu.assertEquals(candidate({}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_110,uig_Arab,lua,"- مەسىلەن: - ئۇنداق بولمىسا ""ياق"" دەپ قايتۇرۇڭ.- lst1 نىڭ ھەر بىر ئېلېمېنتىنىڭ جۈپ بولۇشىغا ""YES"" نى قايتۇرۇڭ..ئەگەر سىز L1 ، L1 ، L1 ، L2 قاتارلىقلارنى .ئۆزىڭىزگە ئالماشتۇرسىڭىز بولىدۇ-- بۇ يەردىكى L1 بىلەن L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L2 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L2 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1 ، L1.بۇ يەردىكى خاتىرە سىز نى قانداق قىلىپ .تۈزۈۋېلىسىز؟-- ۋە بۇ يەردىكى ""مۇناسىۋەتلىك تۈر"" گە ئايلىنىش مۇمكىنلىكىنى بېكىتىدۇ .-- بۇ مەزمونغا قاراپ باقايلى، ئىككى نومۇرلۇق تاختىغا توغرا كېلىدۇ.-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})
-- 'YES'
-- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})
-- 'NO'
-- It is assumed that the input tables will be non-empty.
local function exchange(lst1, lst2)
","local function exchange(lst1, lst2)
    local is_all_even = true
    local odd_count_lst1 = 0
    local even_count_lst2 = 0

    -- Check lst1 for odd numbers
    for _, num in ipairs(lst1) do
        if num % 2 ~= 0 then
            odd_count_lst1 = odd_count_lst1 + 1
        end
    end

    -- Check lst2 for even numbers
    for _, num in ipairs(lst2) do
        if num % 2 == 0 then
            even_count_lst2 = even_count_lst2 + 1
        end
    end

    -- It is possible to make lst1 all even if the number of odd elements
    -- in lst1 can be swapped with the number of even elements in lst2
    if odd_count_lst1 <= even_count_lst2 then
        return ""YES""
    else
        return ""NO""
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = exchange
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')
    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')
    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')
    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')
end

os.exit(lu.LuaUnit.run())"
HumanEval_111,uig_Arab,lua,"- مىسال:.ئەگەر ئوخشاش خەتنى كۆپ قېتىم يازسىڭىز، ھەممىسىدىن بىرنى ئېلىپ قالسىڭىزلا بولىدۇ- ئەڭ كۆپ قېتىم تەكرارلانغان ۋە شۇ ساننى ئۆز ئىچىگە ئالغان خەتنى تاللاش.-- ئەگەر سىز بىر ھەرپنىڭ ھەرپىنى ئىككى ئاياغنىڭ ئارىسىغا ئايرىپ ئىپادىلەيدىغانلىقىنى تەسەۋۋۇر قىلسىڭىز، بۇ بىر جەدۋەل.-- >>> histogram('a b c')
-- {['a'] = 1, ['b'] = 1, ['c'] = 1}
-- >>> histogram('a b b a')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('a b c a b')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('b b b b a')
-- {['b'] = 4}
-- >>> histogram('')
-- {}
local function histogram(test)
","local function histogram(test)
    if test == """" then return {} end
    
    local words = {}
    for word in test:gmatch(""%S"") do
        words[word] = (words[word] or 0) + 1
    end
    
    local max_count = 0
    local result = {}
    for letter, count in pairs(words) do
        if count > max_count then
            max_count = count
            result = {[letter] = count}
        elseif count == max_count then
            result[letter] = count
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = histogram
    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('a'), {['a'] = 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_112,uig_Arab,lua,"- مىسالىم ..سىز نەتىجە سىتونى ۋە true/false نى ئۆز ئىچىگە ئالغان جەدۋەلنى قايتۇرىسىز-- ئەگەر سىز ئارقا تەرەپكە قاراپ ئوقۇيدىغان بولسىڭىز ئارقا تەرەپكە قاراپ ئوقۇيدىغان بولسىڭىز بۇ سىزىقلىق لىنىيە بار دەپ ئاتىلىدۇ-- ئاندىن نەتىجە سىتونىنىڭ توغرىلىقىنى تەكشۈرۈڭ .بىز ئىككى ھەرپ s ۋە c نى ئىپادىلەپ بەرگەن. سىز s نىڭ ھەربىر بۆلۈمىدىكى ھەرپلەرنى چىقىرىپ تاشلاپ، يەنە c نىڭ ھەرپىگە ئوخشايدىغان بىر قىسىم ھەرپلەرنى چىقىرىپ تاشلايسىز.- ۋەزىپە .-- >>> reverse_delete('abcde', 'ae')
-- {'bcd', false}
-- >>> reverse_delete('abcdef', 'b')
-- {'acdef', false}
-- >>> reverse_delete('abcdedcba', 'ab')
-- {'cdedc', true}
local function reverse_delete(s, c)
","local function reverse_delete(s, c)
    -- Create a set for characters to delete
    local delete_set = {}
    for i = 1, #c do
        delete_set[c:sub(i, i)] = true
    end
    
    -- Create the result string by filtering out characters in delete_set
    local result = {}
    for i = 1, #s do
        local char = s:sub(i, i)
        if not delete_set[char] then
            table.insert(result, char)
        end
    end
    
    -- Convert result table to string
    local result_str = table.concat(result)
    
    -- Check if the result string is a palindrome
    local is_palindrome = true
    local len = #result_str
    for i = 1, math.floor(len / 2) do
        if result_str:sub(i, i) ~= result_str:sub(len - i + 1, len - i + 1) then
            is_palindrome = false
            break
        end
    end
    
    -- Return the result string and palindrome check as a table
    return {result_str, is_palindrome}
end","lu = require('luaunit')

function test_humaneval()
local candidate = reverse_delete
    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
    lu.assertEquals(candidate('a', 'a'), {'', true})
    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
    lu.assertEquals(candidate('mamma', 'mia'), {'', true})
end

os.exit(lu.LuaUnit.run())"
HumanEval_113,uig_Arab,lua,"-- بۇ بولسا سىنبەلگە ئىچىدىكى كىچىككىنە سىن-- بۇ بولسا كىرگۈزگۈچنىڭ i خانىسى بۇ يەردە ھەربىر i نىڭ ئورنىغا  دىگەن سانغا ئالماشتۇرۇلۇشى كېرەك-- بۇ بولسا سىنغا ئېلىش ئۈچۈن ئىشلىتىلىدىغان ھەر بىر تۈرنىڭ سانى.- ھەر بىر ھەرپ سانلىق قىممەت سانلىق قىممەتتىن ئىبارەت بولغان جەدۋەلگە بىر جەدۋەل قايتۇرىمىز.-- >>> odd_count({'1234567'})
-- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}
-- >>> odd_count({'3', '11111111'})
-- {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'}
local function odd_count(lst)
","local function odd_count(lst)
    local result = {}
    for _, str in ipairs(lst) do
        local odd_count = 0
        for i = 1, #str do
            local digit = tonumber(str:sub(i, i))
            if digit % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        local element = string.format(""the number of odd elements %dn the str%1dng %d of the %d"", odd_count, odd_count, odd_count, odd_count)
        result[#result + 1] = element
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = odd_count
    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the str4ng 4 of the 4nput.'})
    lu.assertEquals(candidate({'3', '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'})
    lu.assertEquals(candidate({'271', '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_114,uig_Arab,lua,"- مىسالىم .- سانلىق مەلۇماتلار-- بۇ بىر جەدۋەل، ئۇ سىز بىر جەدۋەلنىڭ ئەڭ كىچىك سوممىسىنى تېپىپ بىرەلەيدۇ .سىزگە بىر جەدۋەلنىڭ ئەڭ كىچىك سوممىسىغا ئوخشاش بولغان نۇمۇرىنى تېپىپ بىرەلەيدۇ .-- >>> minSubArraySum({2, 3, 4, 1, 2, 4})
-- 1
-- >>> minSubArraySum({-1, -2, -3})
-- -6
local function minSubArraySum(nums)
","local function minSubArraySum(nums)
    local min_sum = nums[1]
    local current_sum = nums[1]

    for i = 2, #nums do
        current_sum = math.min(nums[i], current_sum + nums[i])
        min_sum = math.min(min_sum, current_sum)
    end

    return min_sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = minSubArraySum
    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)
    lu.assertEquals(candidate({-1, -2, -3}), -6)
    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)
    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)
    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)
    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)
    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)
    lu.assertEquals(candidate({-10}), -10)
    lu.assertEquals(candidate({7}), 7)
    lu.assertEquals(candidate({1, -1}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_115,uig_Arab,lua,"- بىرىنچى مىسال:.بەلگىنى قانچە قېتىم چۈشۈرۈشنى بېكىتىمىز- سىزنىڭ ۋەزىپىڭىز قۇدۇقلارنى بوشىتىش ئۈچۈن قۇدۇقلارنى ئىشلىتىش..ھەممىمىز بىر خىل، ئوخشىمىغان مىقداردا تۇرايلى.ھەر بىر قۇدۇققا بىر دانە سۇ قۇيۇلىدۇ.ھەممە بىر قاتاردا 1، يەنى سۇنىڭ بىرلىكىگە ۋەكىللىك قىلىدۇ.سىز شۇ كۈرۈنۈش ئارقىلىق بىر قىسىم ماتېرىياللارنى ئۆز ئىچىگە ئالغان .بۇلار بولسا ئۈنئالغۇ لىنتىسى، ئۈنئالغۇ لىنتىسى ۋە .مۇكاپاتلاش لىنتىسى-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)
-- 6
-- Example 2:
-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2)
-- 5
-- Example 3:
-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)
-- 0
-- Constraints:
--     * all wells have the same length
--     * 1 <= grid.length <= 10^2
--     * 1 <= grid[:,1].length <= 10^2
--     * grid[i][j] -> 0 | 1
--     * 1 <= capacity <= 10
local function max_fill(grid, capacity)
","local function max_fill(grid, capacity)
    local total_units = 0

    -- Traverse each well in the grid
    for i = 1, #grid do
        for j = 1, #grid[i] do
            total_units = total_units + grid[i][j]
        end
    end

    -- Calculate the number of times the bucket needs to be lowered
    local num_lowerings = math.ceil(total_units / capacity)

    return num_lowerings
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_fill
    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)
    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)
    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_116,uig_Arab,lua,".بۇ خىل ئەھۋال تۆۋەندىكىدەك شەكىللىنىدۇ- ئوخشاش ساندىكى بىرلىك ئۈچۈن، ئونلىق قىممىتىنى ئاساس قىلىپ رەتلەيمىز..ئىككى نومۇرلۇق تەڭلىگۈچتىكى بىرلىكلەر تىزىملىكىدىكى نومۇرلار-- بۇ سىناقتىن -- سىز بىر جەدۋەلدىكى نۆلنى قايتىدىن ئايرىشىڭىز كېرەك-- >>> sort_array({1, 5, 2, 3, 4})
-- {1, 2, 3, 4, 5}
-- >>> sort_array({-2, -3, -4, -5, -6})
-- {-6, -5, -4, -3, -2}
-- >>> sort_array({1, 0, 2, 3, 4})
-- {0, 1, 2, 3, 4}
local function sort_array(arr)
","local function count_ones(n)
    local count = 0
    while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
    end
    return count
end

local function sort_array(arr)
    table.sort(arr, function(a, b)
        local ones_a = count_ones(math.abs(a))
        local ones_b = count_ones(math.abs(b))
        if ones_a == ones_b then
            return a < b
        else
            return ones_a < ones_b
        end
    end)
    return arr
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
    lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
end

os.exit(lu.LuaUnit.run())"
HumanEval_117,uig_Arab,lua,"- مىساللار:-- دىققەت: سىز كىرگۈزگەن خەتنىڭ ھەممىسى پەقەت ھەرپلەر ۋە بوشلۇقلارلا بولۇشى مۇمكىنئەگەر s بوش بولسا، بۇ فۇنكسىيە بوش جەدۋەلنى قايتۇرىدۇ..n ھەرپلەر تىزىملىكىدە .s ھەرپلەر تىزىملىكىدە-- بۇ فۇنكسىيە دەل مۇشۇ سۆزلۈكلەرنى ئۆز ئىچىگە ئالغان ھەر بىر سۆزلۈكنىڭ جەدۋىلىنى قايتۇرىدۇ..سىز بىر جەدۋەل تۈزۈلۈشىدىكى ھەرپلەرنى ئۆز ئىچىگە ئالغان .سىزگە يەنە بىر جەدۋەل تۈزۈش ۋەزىپىسى تاپشۇرۇلدى-- >>> select_words('Mary had a little lamb', 4)
-- {'little'}
-- >>> select_words('Mary had a little lamb', 3)
-- {'Mary', 'lamb'}
-- >>> select_words('simple white space', 2)
-- {}
-- >>> select_words('Hello world', 4)
-- {'world'}
-- >>> select_words('Uncle sam', 3)
-- {'Uncle'}
local function select_words(s, n)
","local function select_words(s, n)
    local vowels = { a = true, e = true, i = true, o = true, u = true,
                     A = true, E = true, I = true, O = true, U = true }
    local result = {}
    
    for word in s:gmatch(""%S+"") do
        local consonant_count = 0
        for char in word:gmatch(""%a"") do
            if not vowels[char] then
                consonant_count = consonant_count + 1
            end
        end
        if consonant_count == n then
            table.insert(result, word)
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = select_words
    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})
    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})
    lu.assertEquals(candidate('simple white space', 2), {})
    lu.assertEquals(candidate('Hello world', 4), {'world'})
    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})
    lu.assertEquals(candidate('', 4), {})
    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_118,uig_Arab,lua,"- مىسال:-- سىز پەقەت ئىنگلىزچىدىكى ھەرپلەرنىلا چۈشىنىسىز- يۇقىرىدىكى شەرتلەرگە ئۇيغۇن كەلگەن ھەر بىر بوغۇمغا قاراپ چىقايلى.باش ۋە ئاخىرقى تاۋۇشلار سانىمايدۇ. ئەگەر قۇرۇق تاۋۇش بولمىسا، قۇرۇق تاۋۇش قايتۇرۇڭ.- ئىككى تاۋۇشلۇق ھەرپ سۆزنىڭ ئوڭ تەرىپىدە .-- سىز بىر سۆزنى تاللىيالايسىز .سىزنىڭ ۋەزىپىڭىز:بۇ سۆز بىلەن .ئورتاق بولغان ئەڭ يېقىن بوغۇمنىڭ ئارىسىنى تېپىپ چىقىش .ئەمەلىيەتتە ئۇ ئىككى بوغۇمنىڭ ئارىسىغا يېقىن بوغۇمنىڭ بىرىنى تېپىپ چىقىش-- >>> get_closest_vowel('yogurt')
-- 'u'
-- >>> get_closest_vowel('FULL')
-- 'U'
-- >>> get_closest_vowel('quick')
-- ''
-- >>> get_closest_vowel('ab')
-- ''
local function get_closest_vowel(word)
","local function get_closest_vowel(word)
    local vowels = ""AEIOUaeiou""
    local found_vowel = false
    local last_consonant = false

    for i = #word - 1, 2, -1 do
        local char = word:sub(i, i)
        if vowels:find(char) then
            if last_consonant then
                return char
            end
            found_vowel = true
        else
            if found_vowel then
                return ''
            end
            last_consonant = true
        end
    end

    return ''
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_closest_vowel
    lu.assertEquals(candidate('yogurt'), 'u')
    lu.assertEquals(candidate('full'), 'u')
    lu.assertEquals(candidate('easy'), '')
    lu.assertEquals(candidate('eAsy'), '')
    lu.assertEquals(candidate('ali'), '')
    lu.assertEquals(candidate('bad'), 'a')
    lu.assertEquals(candidate('most'), 'o')
    lu.assertEquals(candidate('ab'), '')
    lu.assertEquals(candidate('ba'), '')
    lu.assertEquals(candidate('quick'), '')
    lu.assertEquals(candidate('anime'), 'i')
    lu.assertEquals(candidate('Asia'), '')
    lu.assertEquals(candidate('Above'), 'o')
end

os.exit(lu.LuaUnit.run())"
HumanEval_119,uig_Arab,lua,"- مىساللار:.ئەگەر سىز بىر تەرەپ قىلماقچى بولسىڭىز، ""بولدى"" نى بېسىڭ .ئەگەر سىز بىر تەرەپ قىلماقچى بولمىسا، ""ياق"" نى بېسىڭ- "" (ئەرەبچىدە) "" ئەمەس-- بۇ تەڭپۇڭ. مەسىلەن: string '(((() ' ياخشى، string  بولسا-- س س نىڭ ئىچىدىكى بارلىق بوغۇملار S نىڭ ئىچىدىكى بارلىق بوغۇملار بولسا ئاندىن ئاندىن ئۇنىڭدىكى س س س نىڭ ئىچىدىكى بارلىق بوغۇملار S نىڭ ئىچىدىكى بارلىق بوغۇملار S نىڭ ئىچىدىكى بارلىق بوغۇملار S نىڭ ئىچىدىكى بارلىق بوغۇملار-- بۇ بولسا بىرخىل سىناق ئۇسۇلى بولسا كېرەك بۇ ئۇسۇل ئارقىلىق سىز بىر قىسىم مۇناسىۋەتلىك تۈرلەرنى ئېنىقلاپ چىقالايسىز-- سىز ئىككى تارنى ئۇمۇملىشىپ چەتكە ئالسىڭىز بولىدۇ .سىز: ""بولىدۇ"" دەيسىز .ئۇنداقتا، بىز ئىككى تارنى ئۇمۇملىشىپ چەتكە ئالساق بولىدۇ .- پەقەت "" (_) "" ياكى "" (_) "" دېگەن سانلارنىلا قوشۇپ يېزىلىدۇ..سىز شۇ كودنى ئىككى قېتىملا ئىشلەتكەن بولسىڭىز، ئىككى قېتىملىق تاللاش ئۇسۇلى بولسا .بۇنى ئىپادىلەپ بېرىڭ-- >>> match_parens({'()(', ')'})
-- 'Yes'
-- >>> match_parens({')', ')'})
-- 'No'
local function match_parens(lst)
","local function match_parens(lst)
    local function is_balanced(s)
        local balance = 0
        for i = 1, #s do
            if s:sub(i,i) == '(' then
                balance = balance + 1
            else
                balance = balance - 1
            end

            if balance < 0 then
                return false
            end
        end
        return balance == 0
    end

    local s1, s2 = lst[1], lst[2]
    return (is_balanced(s1 .. s2) or is_balanced(s2 .. s1)) and 'Yes' or 'No'
end","lu = require('luaunit')

function test_humaneval()
local candidate = match_parens
    lu.assertEquals(candidate({'()(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', ')'}), 'No')
    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
    lu.assertEquals(candidate({'()', '())'}), 'No')
    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
    lu.assertEquals(candidate({'((((', '((())'}), 'No')
    lu.assertEquals(candidate({')(()', '(()('}), 'No')
    lu.assertEquals(candidate({')(', ')('}), 'No')
    lu.assertEquals(candidate({'(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', '('}), 'Yes')
end

os.exit(lu.LuaUnit.run())"
HumanEval_120,uig_Arab,lua,"- بىرىنچى مىسال:.ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار ئار- ئار ئار سانلىق پۈتۈن سانلىق جەدۋەل ۋە بىر قوش سانلىق پۈتۈن سانلىق ك كارتونغا ئىگە، رەتلەنگەن جەدۋەل قايتۇرۇپ بىرىڭ -- >>> maximum({-3, -4, 5}, 3)
-- {-4, -3, 5}
-- Example 2:
-- >>> maximum({4, -4, 4}, 2)
-- {4, 4}
-- Example 3:
-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)
-- {2}
-- Note:
--     1. The length of the table will be in the range of [1, 1000].
--     2. The elements in the table will be in the range of [-1000, 1000].
--     3. 0 <= k <= len(arr)
local function maximum(arr, k)
","local function maximum(arr, k)
    table.sort(arr, function(a, b) return a > b end)
    local result = {}
    for i = 1, k do
        table.insert(result, arr[i])
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = maximum
    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})
    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})
    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})
    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})
    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})
    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})
    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})
    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})
    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})
    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})
    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_121,uig_Arab,lua,"- مىساللار-- بۇ بىر پۈتۈن سان جەدۋىلى، بىز بىر پۈتۈن سان جەدۋىلىگە توغرا كەلگەندە، جەدۋەلدىكى ھەر بىر بىرنەپەر سان جەدۋىلىنىڭ يىغىندىسىغا ئوخشاش جەدۋەلنى قايتۇرىمىز.-- >>> solution({5, 8, 7, 1})
-- 12
-- >>> solution({3, 3, 3, 3, 3})
-- 9
-- >>> solution({30, 13, 24, 321})
-- 0
local function solution(lst)
","local function solution(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 1 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = solution
    lu.assertEquals(candidate({5, 8, 7, 1}), 12)
    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)
    lu.assertEquals(candidate({30, 13, 24, 321}), 0)
    lu.assertEquals(candidate({5, 9}), 5)
    lu.assertEquals(candidate({2, 4, 8}), 0)
    lu.assertEquals(candidate({30, 13, 23, 32}), 23)
    lu.assertEquals(candidate({3, 13, 2, 9}), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_122,uig_Arab,lua,"- مىسال:-- بۇ ئار ئارنىڭ بىرىنچى k ھەرپىدىن ئىككى خانىدىن كۆپ بولمىغان ھەرپلەرنىڭ جۈملىسى- ئار ئار، ك ك ر ر رېتېرلىق بىر پۈتۈن سانلىق قىممەتلىك بوش بولمىغان جەدۋەلگە قارىغاندا،-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
-- 24
-- Constraints:
--     1. 1 <= len(arr) <= 100
--     2. 1 <= k <= len(arr)
local function add_elements(arr, k)
","local function add_elements(arr, k)
    local sum = 0
    for i = 1, k do
        local element = arr[i]
        if element >= -99 and element <= 99 then
            sum = sum + element
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add_elements
    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
    lu.assertEquals(candidate({1}, 1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_123,uig_Arab,lua,"-- get_odd_collatz(5) بولسا [1, 5] نى قايتۇرۇپ بېرىدۇ. # 5 نىڭ كوللاتز تىزىملىكى بولسا [5, 16, 8, 4, 2, 1] ، شۇڭا بىرلا قېتىملىق جىپسى سانلار پەقەت 1 ۋە 5 بولىدۇ.- مەسىلەن: .2 .ئۈستۈن قايتىدىن تىزىپ چىقىلدى.بىرنى ئېلىپ باقساق، بىرنى ئېلىپ باقساق- دىققەت:.ھازىرنىڭ ھىكايىسى شۇكى، n نىڭ ھەر قانداق قىممىتىدىن قەتئىينەزەر، بۇ خىل ھالەتتىكى جەدۋەللەر ھەمىشە 1 غا تارقالىدۇ.ئەگەر ئالدىنقى قېتىمقى سىنبەلگە غەلىتە بولسا، كېيىنكى قېتىمقى سىنبەلگە 3 قېتىمدىن ئاشىدۇ-- ئالدىنقى قېتىملىق سىن: ئەگەر ئالدىنقى قېتىملىق سىن جۈپ بولسا، كېيىنكى قېتىملىق سىن .كېيىنكى قېتىملىق سىن:-- بۇ يەردىكى ھەربىر قوشۇمچە ھەرپنى باشتىن تارتىپ ھەربىر قوشۇمچە ھەرپنى بېسىپ چىقىرىمىز.-- كولاتز پەرەزى بولسا ماتېماتىكا بويىچە بىر پەرەز بولۇپ ، ئېنىق بەلگىلەنگەن تەرتىپنى كۆرسىتىدۇ .- قوشۇمچە پۈتۈن سان nنى بەرسەك، بىر جەدۋەلگە تىزىپ، ئۇ جەدۋەلدىكى بىر قانچە ساننى بىر-بىرىگە ئوخشىتىپ، رەتلەش ئۇسۇلى ئارقىلىق،-- >>> get_odd_collatz(5)
-- {1, 5}
local function get_odd_collatz(n)
","local function get_odd_collatz(n)
    local collatz_sequence = {}
    while n ~= 1 do
        if n % 2 == 1 then
            table.insert(collatz_sequence, n)
        end
        if n % 2 == 0 then
            n = n / 2
        else
            n = 3 * n + 1
        end
    end
    table.insert(collatz_sequence, 1)  -- Always add 1 as the sequence ends with 1
    
    -- Remove duplicates and sort the table
    local unique_odds = {}
    for _, num in ipairs(collatz_sequence) do
        unique_odds[num] = true
    end

    local sorted_odds = {}
    for num, _ in pairs(unique_odds) do
        table.insert(sorted_odds, num)
    end
    table.sort(sorted_odds)

    return sorted_odds
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_odd_collatz
    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(5), {1, 5})
    lu.assertEquals(candidate(12), {1, 3, 5})
    lu.assertEquals(candidate(1), {1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_124,uig_Arab,lua,".4 .تۈنۈگۈننى: م-د-ي-ي-ي شەكىلدە يازسىڭىز بولىدۇ ..بىر ئايدىن كىچىكىپ .ئون ئىككى ئاينىڭ كۆلىمىدە بولۇشى كېرەكئايدا بىر كۈن 31 كۈندىن ئاز ياكى كۆپ بولسا 1 كۈن، ئايدا بىر كۈن 31 كۈندىن ئاز ياكى كۆپ بولسا 1 كۈن، ئايدا بىر كۈن 31 كۈندىن ئاز ياكى كۆپ بولسا 1 كۈن، ئايدا بىر كۈن 30 كۈندىن ئاز ياكى كۆپ بولسا 1 كۈن، ئايدا بىر كۈن 6، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر كۈن، ئايدا بىر ئايدا بىر كۈن، ئايدا بىر ئايدا بىر كۈن، ئايدا بىر ئايدا بىر كۈن، ئايدا بىر ئايدا بىر كۈن، بىر ئايدا بىر ئايدا بىر كۈن، بىر ئايدا بىر ئايدا بىر ئايدا بىر كۈن، بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر ئايدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا بىر يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا يىلدا.1 .تۈنۈگۈن سانلىق مەلۇماتلار قۇرۇق ئەمەس- تۆۋەندىكى قائىدىلەرنىڭ ھەممىسى ئىجرا قىلىنسا، شۇ ۋاقىت كۈچكە ئىگە بولىدۇ: - ئەگەر ۋاقتىڭىز توغرا بولسا true نى قايتۇرسىڭىز، ئەگەر راست بولمىسا false نى قايتۇرسىڭىز بولىدۇ.-- سىز بىر قېتىملىق ۋاقىت جەدۋىلىنى چەكلىمە فوندونى يېزىپ چىقىسىز .-- >>> valid_date('03-11-2000')
-- true
-- >>> valid_date('15-01-2012')
-- false
-- >>> valid_date('04-0-2040')
-- false
-- >>> valid_date('06-04-2020')
-- true
-- >>> valid_date('06/04/2020')
-- false
local function valid_date(date)
","local function valid_date(date)
    if date == """" then
        return false
    end
    
    local month, day, year = date:match(""^(%d%d)%-(%d%d)%-(%d%d%d%d)$"")
    
    if not month or not day or not year then
        return false
    end
    
    month = tonumber(month)
    day = tonumber(day)
    year = tonumber(year)
    
    if month < 1 or month > 12 then
        return false
    end
    
    local days_in_month = {
        [1] = 31,
        [2] = 29, -- Leap year check not required for this problem
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
    }
    
    if day < 1 or day > days_in_month[month] then
        return false
    end
    
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = valid_date
    lu.assertEquals(candidate('03-11-2000'), true)
    lu.assertEquals(candidate('15-01-2012'), false)
    lu.assertEquals(candidate('04-0-2040'), false)
    lu.assertEquals(candidate('06-04-2020'), true)
    lu.assertEquals(candidate('01-01-2007'), true)
    lu.assertEquals(candidate('03-32-2011'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('04-31-3000'), false)
    lu.assertEquals(candidate('06-06-2005'), true)
    lu.assertEquals(candidate('21-31-2000'), false)
    lu.assertEquals(candidate('04-12-2003'), true)
    lu.assertEquals(candidate('04122003'), false)
    lu.assertEquals(candidate('20030412'), false)
    lu.assertEquals(candidate('2003-04'), false)
    lu.assertEquals(candidate('2003-04-12'), false)
    lu.assertEquals(candidate('04-2003'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_125,uig_Arab,lua,"- مىساللار- ھەرپ، (a) =0، (b) =1، (z) =25- بولسا، قوشۇمچە خەتنى بۆلۈپ يازساق بولىدۇ .,' ئەگەر قوشۇمچە خەت بولمىسا، سىز  نىڭ ئىچىدىكى كىچىك ھەرپلەرنىڭ سانىنى بىر قاتاردا يازسىڭىز بولىدۇ.- سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىكمىسىدىن ئىبارەت سۆز بىرىك-- >>> split_words('Hello world!')
-- {'Hello', 'world!'}
-- >>> split_words('Hello,world!')
-- {'Hello', 'world!'}
-- >>> split_words('abcdef')
-- 3
local function split_words(txt)
","local function split_words(txt)
    -- Check if there is any whitespace to split on
    if txt:find(""%s"") then
        local words = {}
        for word in txt:gmatch(""%S+"") do
            table.insert(words, word)
        end
        return words
    end

    -- Check if there are commas to split on
    if txt:find("","") then
        local words = {}
        for word in txt:gmatch(""([^,]+)"") do
            table.insert(words, word)
        end
        return words
    end

    -- Otherwise, count the number of lowercase letters with odd order
    local count = 0
    for i = 1, #txt do
        local char = txt:sub(i, i)
        local ord = char:byte() - string.byte('a')
        if ord >= 0 and ord <= 25 and ord % 2 == 1 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = split_words
    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
    lu.assertEquals(candidate('abcdef'), 3)
    lu.assertEquals(candidate('aaabb'), 2)
    lu.assertEquals(candidate('aaaBb'), 1)
    lu.assertEquals(candidate(''), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_126,uig_Arab,lua,"- مىساللار- سان، false نى قايتۇر.-- سانلىق مەلۇماتلار تىزىملىكىدە بار-- سانلىق مەلۇماتلار جەدۋىلى بولسا، رەتلىگىنىگە ياكى رەتلىمىگەنلىكىگە قاراپ قايتۇرىمىز .-- >>> is_sorted({5})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5})
-- false
-- >>> is_sorted({1, 2, 3, 4, 5, 6})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})
-- false
-- >>> is_sorted({1, 2, 2, 3, 3, 4})
-- true
-- >>> is_sorted({1, 2, 2, 2, 3, 4})
-- false
local function is_sorted(lst)
","local function is_sorted(lst)
    local seen = {}
    for i = 1, #lst - 1 do
        if lst[i] > lst[i + 1] then
            return false
        end
    end

    for _, num in ipairs(lst) do
        if seen[num] then
            seen[num] = seen[num] + 1
            if seen[num] > 2 then
                return false
            end
        else
            seen[num] = 1
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_sorted
    lu.assertEquals(candidate({5}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)
    lu.assertEquals(candidate({}), true)
    lu.assertEquals(candidate({1}), true)
    lu.assertEquals(candidate({3, 2, 1}), false)
    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)
    lu.assertEquals(candidate({1, 2, 3, 4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_127,uig_Arab,lua,"-- كىرگۈزگۈچ، چېكىش نۇسخىلىرى:.ئەگەر ئىككىلا قېتىملىق سىن ئارىلىقىدا سىنبەلگە بولمىسا، ""No"" نى قايتۇرۇڭ- ئۇنداق بولمىسا، ""ياق"" دەپ قايتۇرۇڭ.- ئەگەر كېسىشمە نۇقتىنىڭ ئۇزۇنلۇقى بىر باشتا سان بولسا، ""YES"" نى قايتۇرۇڭ،.ئۇ ئۇزۇنلۇقى بىر، جىنىس بوغۇم ئەمەس-- مەسىلەن: بۇ يەردىكى سىرىتتىكى ھەرپلەرنىڭ بىرىنىڭ ئايلىنىشى (1,3) ، (2,4) -- بۇ سىرىتتىكى ھەرپلەرنىڭ ئايلىنىشى (2,3).بىر كىچىككىنە نۇقتىدا، ئۇ بولسىمۇ،-- سىز بۇنى قانداق ئېنىقلىمايسىز؟ بۇ ئىككىسىنىڭ جەدۋىلى-- ھەر بىر ۋاقىتنىڭ بېشىدا بىر مەزگىلنىڭ ئاخىرقى ۋاقىتقا باراۋەر ياكى ئۇنىڭدىن كىچىك ۋاقىت بولىدۇ دەپ پەرەز قىلىنىدۇ .-- باشلىنىش ۋە ئاخىرلىشىش ئىككىلىسىنى ئۆز ئىچىگە ئالىدۇ.-- بۇ ئارىلىقلار يېپىق، يەنى ئارىلىق (باشلىنىش، ئاخىرلاش) ---- ھەربىر ئارىلىق بىر جۈپ پۈتۈن سان. مەسىلەن: ئارىلىق = (باشلىنىش، ئاخىرلاش) = (1,2)- ئىككى قېتىملىق ۋاقىت ئارىلىقىدا، - ھە، ئۇنداقتا...-- >>> intersection({1, 2}, {2, 3})
-- 'NO'
-- >>> intersection({-1, 1}, {0, 4})
-- 'NO'
-- >>> intersection({-3, -1}, {-5, 5})
-- 'YES'
local function intersection(interval1, interval2)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    if num <= 3 then
        return true
    end
    if num % 2 == 0 or num % 3 == 0 then
        return false
    end
    for i = 5, math.sqrt(num), 6 do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function intersection(interval1, interval2)
    local start1, end1 = interval1[1], interval1[2]
    local start2, end2 = interval2[1], interval2[2]
    
    local intersection_start = math.max(start1, start2)
    local intersection_end = math.min(end1, end2)
    
    if intersection_start > intersection_end then
        return 'NO'
    end
    
    local intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length) then
        return 'YES'
    else
        return 'NO'
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersection
    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')
    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')
    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')
    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')
    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')
    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')
    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')
    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')
end

os.exit(lu.LuaUnit.run())"
HumanEval_128,uig_Arab,lua,"- مىسال:- ئەسكەرتىش: بوش ئار ئار ئارغا نىسبەتەن نۆل قايتىدۇ..ھازىرقى ھەربىر ساننى 1-، 1-، ياكى 0 بىلەن ئىپادىلىگىلى بولىدۇ-- بۇ بولسا سىلىق نومۇرلار خانىسىنىڭ نومۇرى.سىزگە بىر جەدۋەل بېرىلىدۇ، ۋە سىز قايتىدىن بىر جەدۋەلگە كىرسىڭىز-- >>> prod_signs({1, 2, 2, -4})
-- 9
-- >>> prod_signs({0, 1})
-- 0
-- >>> prod_signs({})
-- None
local function prod_signs(arr)
","local function prod_signs(arr)
    if #arr == 0 then
        return nil
    end

    local sum_magnitudes = 0
    local product_signs = 1

    for _, num in ipairs(arr) do
        sum_magnitudes = sum_magnitudes + math.abs(num)
        if num > 0 then
            product_signs = product_signs * 1
        elseif num < 0 then
            product_signs = product_signs * -1
        else
            product_signs = 0
            break
        end
    end

    return sum_magnitudes * product_signs
end","lu = require('luaunit')

function test_humaneval()
local candidate = prod_signs
    lu.assertEquals(candidate({1, 2, 2, -4}), -9)
    lu.assertEquals(candidate({0, 1}), 0)
    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_129,uig_Arab,lua,"- مىساللار:-- ئەڭ كىچىك يولنى تاللىغان ھۈجەيرىدىكى قىممەتلەرنى رەتلەپ جەدۋەلگە قايتۇرىمىز..بۇ سىزگە بىر خىل .جاۋاب بېرىشكە كاپالەتلىك قىلىدۇ- lst_A[j] = lst_B[j] . - بۇ يەردىكى خەت-- شۇڭا lst_A[i] < lst_B[i] ھەر قانداق j (1 <= j < i) نىڭ نۇمۇرىغا نىسبەتەن بىزدە-- بۇ بولسا بىر پۈتۈن سانلىق قىممەت i (1 <= i <= k).ئۇلىنىشنى چەكلەش ئۈچۈن، بۇ يەردىكى ""ئەرزىمەيدۇ"" تېمىسىغا قاراڭ.ئۈچىنچى، A،B ھەرپلەردىكى قىممەتلەرنى رەتلەش-- ئۇزۇنلۇقى k بولغان يول A بولسا ئۇزۇنلۇقى k بولغان يول B دىن كىچىك دەپ قارىلىدۇ ئەگەر- سىز توردىن چىقالمايسىز.- چوقۇم ئوخشىمايدۇ .-- دىققەت قىلىڭ، ئۇزۇنلۇقى k بولغان بىر يول دەل k خىلىتقا بارىدۇ (خىلىتقا ئەمەس)- يانفوندا-- مۇنداقچە ئېيتقاندا، سىز ھازىر يەنە بىر قېتىم بۇ كالمار بېتىدە ئۆزىڭىز بىلەن ئالاقە قىلماقچى بولسىڭىز، ئۇنداقتا سىز ھازىر يەنە بىر قېتىم بۇ كالمار بېتىنى ئۆزىڭىز قۇرۇپ چىقىشىڭىز كېرەك.ھەربىر قېتىمدا سىز ئۇلارنى بىر قانچە، ئۈچ قېتىم سىناپ بېقىڭسىز ئەڭ كىچىك تىپتىكى ئۇزۇنلۇقتىكى يولنى تېپىپ چىقىشىڭىز كېرەك.-- بۇ يەردىكى ""inclusive"" ھەرپ ھەرپ شەكلىدە پەقەت بىرلا قېتىم كۆرۈنىدۇ-- ھەربىر خانىدا بىر دانە قىممەت بار .ھەممە سانلار تىپىدىكى ھەربىر پۈتۈن سان .1،n * n.بىر گىردالدا N رەت، N تۈۋرۈك بولسا (N >=2) ، ھەمدە بىر قوش كۇرۇس بولسا (k) ،-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3)
-- {1, 2, 1}
-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)
-- {1}
local function minPath(grid, k)
","local function minPath(grid, k)
    local N = #grid
    local directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}

    -- Check if a position is within the grid boundaries
    local function inBounds(x, y)
        return x >= 1 and x <= N and y >= 1 and y <= N
    end

    -- DFS to find the minimum path of length k
    local function dfs(x, y, path, visited, result)
        -- Append current cell's value to path
        table.insert(path, grid[x][y])

        if #path == k then
            -- Check if we have a new minimum lexicographical path
            if not result.min or table.concat(path) < table.concat(result.min) then
                result.min = {table.unpack(path)}
            end
        else
            for _, dir in ipairs(directions) do
                local nx, ny = x + dir[1], y + dir[2]
                if inBounds(nx, ny) then
                    dfs(nx, ny, path, visited, result)
                end
            end
        end

        -- Backtrack
        table.remove(path)
    end

    local result = {min = nil}

    -- Start DFS from each cell
    for i = 1, N do
        for j = 1, N do
            dfs(i, j, {}, {}, result)
        end
    end

    return result.min
end","lu = require('luaunit')

function test_humaneval()
local candidate = minPath
    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})
    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})
    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})
    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})
    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})
    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})
    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})
    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})
    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})
    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})
    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_130,uig_Arab,lua,"- مىساللار:-- تريبوناتچى جەدۋىلىدىكى بىرىنچى ن + 1 نۇمۇر.سىزگە بىر جەدۋەل بېرىلىدۇ، يەنى، سىز بىر جەدۋەلنىڭ يۆنىلىشىنى ئۆزگەرتەلەيسىز، جەدۋەلدىكى نۆلدىن باشلاپ .سىزگە بىر جەدۋەل بېرىلىدۇ.2+3+3=8 بولىدۇ.ئۈچ قاتلايمىز- ئۈچ (ئۈچ) = ئۈچ- ئۈچ (ئۈچ) = 1 + (2 / 2) = 2- مەسىلەن: .ئەگەر n بىر جۈپ بولسا، n+1 = n+1 ..ئەگەر n قوش بولسا، (n) = 1 + n / 2- ئۈچ (ئۈچ) = ئۈچ- تىربوناچى تەرتىپى تۆۋەندىكىدەك قايتىلىشى بىلەن ئىپادىلىنىدۇ:بىراق بىز بۇنى بىلمەيمىز. بىراق بىز بۇنى بىلمىدۇق، شۇڭا بىر قىسىم تەتقىقاتچىلار بۇ سىستېمىنى تەتقىق قىلىشنى تەتقىق قىلىشنى توختاتتىفىپوناتچى سىدرىسىنى ھەممە ئادەم بىلىدۇ، ماتېماتىكا ئالىملىرى ئۇنى چوڭقۇر تەتقىق قىلغان.-- >>> tri(3)
-- {1, 3, 2, 8}
local function tri(n)
","local function tri(n)
    local sequence = {}
    
    -- Handle the first element separately
    sequence[1] = 3

    for i = 2, n + 1 do
        if i % 2 == 0 then
            sequence[i] = 1 + i / 2
        else
            sequence[i] = (i - 1 <= 0 and 0 or sequence[i - 1]) +
                          (i - 2 <= 0 and 0 or sequence[i - 2]) +
                          (i + 1 > n + 1 and 0 or sequence[i + 1])
        end
    end
    
    return sequence
end","lu = require('luaunit')

function test_humaneval()
local candidate = tri
    lu.assertEquals(candidate(3), {1, 3, 2, 8})
    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})
    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})
    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})
    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})
    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})
    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})
    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})
    lu.assertEquals(candidate(0), {1})
    lu.assertEquals(candidate(1), {1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_131,uig_Arab,lua,"- مەسىلەن: - ئەگەر ھەربىر خانىچە قوش بولسا 0 نى قايتۇرۇپ بېرىڭ.- قوشۇمچە پۈتۈن سان nنى بېسىپ، بىرنەپەر خانىنىڭ قوشۇمچە مىقدارىنى قايتۇرىمىز.-- >>> digits(1)
-- 1
-- >>> digits(4)
-- 0
-- >>> digits(235)
-- 15
local function digits(n)
","local function digits(n)
    local product = 1
    local hasOdd = false
    
    while n > 0 do
        local digit = n % 10
        if digit % 2 == 1 then
            product = product * digit
            hasOdd = true
        end
        n = math.floor(n / 10)
    end
    
    return hasOdd and product or 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = digits
    lu.assertEquals(candidate(5), 5)
    lu.assertEquals(candidate(54), 5)
    lu.assertEquals(candidate(120), 1)
    lu.assertEquals(candidate(5014), 5)
    lu.assertEquals(candidate(98765), 315)
    lu.assertEquals(candidate(5576543), 2625)
    lu.assertEquals(candidate(2468), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_132,uig_Arab,lua,"-- بۇ يەردىكى ئەڭ ئاز دېگەندە بىر دانە ھالقىلىق سۆز بىرىككەن .- ئەگەر بىر تال ئىغىرلىق بار بولسا، ئاندىن ئاندىن بۇ فۇنكسىيە true نى قايتۇرۇشى كېرەك.-- سىز بىر ھەرپلەرنى كىرگۈزگۈچ قىلىپ ئىشلەتمەكچى بولسىڭىز .مەزكۇر قىسقۇچنى ئىشلىتىڭ-- >>> is_nested('[[]]')
-- true
-- >>> is_nested('[]]]]]]][[[[[]')
-- false
-- >>> is_nested('[][]')
-- false
-- >>> is_nested('[]')
-- false
-- >>> is_nested('[[][]]')
-- true
-- >>> is_nested('[[]][[')
-- true
local function is_nested(string)
","local function is_nested(brackets)
    local stack = {}
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '[' then
            table.insert(stack, char)
        elseif char == ']' then
            if #stack > 0 and stack[#stack] == '[' then
                table.remove(stack)
                if #stack > 0 then
                    -- Found at least one nested bracket
                    return true
                end
            else
                -- Mismatched bracket
                return false
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_nested
    lu.assertEquals(candidate('[[]]'), true)
    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)
    lu.assertEquals(candidate('[][]'), false)
    lu.assertEquals(candidate('[]'), false)
    lu.assertEquals(candidate('[[[[]]]]'), true)
    lu.assertEquals(candidate('[]]]]]]]]]]'), false)
    lu.assertEquals(candidate('[][][[]]'), true)
    lu.assertEquals(candidate('[[]'), false)
    lu.assertEquals(candidate('[]]'), false)
    lu.assertEquals(candidate('[[]][['), true)
    lu.assertEquals(candidate('[[][]]'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('[[[[[[[['), false)
    lu.assertEquals(candidate(']]]]]]]]'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_133,uig_Arab,lua,"- مىساللار:-- ھەربىر تۈرنى ئۈستۈنكى قەۋەتتىكى سانغا (_BAR_) ئايلاندۇرۇڭ.سىز شۇ كودتىكى ھەربىر ساننىڭ بىرىكمىسىنىڭ ئىككىنجى نومۇرىنى تېپىپ چىقىشىڭىز كېرەك.سىز شۇ كودتا بار ئىدىڭىزغۇ؟-- >>> lst({1.0, 2.0, 3.0})
-- 14
-- >>> lst({1.0, 4.0, 9.0})
-- 98
-- >>> lst({1.0, 3.0, 5.0, 7.0})
-- 84
-- >>> lst({1.4, 4.2, 0.0})
-- 29
-- >>> lst({-2.4, 1.0, 1.0})
-- 6
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        local ceil_num = math.ceil(num)
        sum = sum + (ceil_num * ceil_num)
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)
    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)
    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)
    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)
    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)
    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)
    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)
    lu.assertEquals(candidate({0.0}), 0)
    lu.assertEquals(candidate({-1.0}), 1)
    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_134,uig_Arab,lua,"- مىساللار:- دىققەت: ""word"" بولسا بىر تۈركۈم بوشلۇق بىلەن ئايرىلىپ تۇرىدىغان ھەرپلەر..بىر سۆزنىڭ قىسمى، ياكى بىر سۆزنىڭ پۈتۈن قىسمى يالغان.بۇنىڭدىن كېيىن، ھەرپلەر تىزىملىكىگە كىرگەن سىنبەلگە ھەرپلەرنىڭ تىزىملىكىگە كىرگەن سىنبەلگە پەقەت ئالفابېت بەلگىسىلا بولۇپ،- ئەڭ ئاخىرقى ھەرپ  بولسا true دەپ قايتۇرغان فۇنكسىيە قۇرۇڭ .-- >>> check_if_last_char_is_a_letter('apple pie')
-- false
-- >>> check_if_last_char_is_a_letter('apple pi e')
-- true
-- >>> check_if_last_char_is_a_letter('apple pi e ')
-- false
-- >>> check_if_last_char_is_a_letter('')
-- false
local function check_if_last_char_is_a_letter(txt)
","local function check_if_last_char_is_a_letter(txt)
    -- Remove trailing spaces
    txt = txt:match(""^(.-)%s*$"")
    -- Check if the string is empty after trimming spaces
    if #txt == 0 then
        return false
    end
    -- Get the last character of the string
    local lastChar = txt:sub(-1)
    -- Check if the last character is an alphabet and not part of a word
    return lastChar:match(""%a"") and not txt:match(""%s%a*$"")
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_if_last_char_is_a_letter
    lu.assertEquals(candidate('apple'), false)
    lu.assertEquals(candidate('apple pi e'), true)
    lu.assertEquals(candidate('eeeee'), false)
    lu.assertEquals(candidate('A'), true)
    lu.assertEquals(candidate('Pumpkin pie '), false)
    lu.assertEquals(candidate('Pumpkin pie 1'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('eeeee e '), false)
    lu.assertEquals(candidate('apple pie'), false)
    lu.assertEquals(candidate('apple pi e '), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_135,uig_Arab,lua,"- مىساللار:- ئىككى خىل قىممەت بار- ئۇنداق بىر ئامىل يوق بولسا، -1 نى قايتۇرۇڭ.-- بۇ ئېلېمېنت ئالدىدىكى ئېلېمېنتتىن چوڭ ياكى باراۋەر ئەمەس.-- بۇ فۇنكسىيەگە ئەڭ چوڭ سانلىق مەلۇمات قايتۇرۇپ بىرىڭ ---- >>> can_arrange({1, 2, 4, 3, 5})
-- 3
-- >>> can_arrange({1, 2, 3})
-- -1
local function can_arrange(arr)
","local function can_arrange(arr)
    for i = #arr, 2, -1 do
        if arr[i] < arr[i - 1] then
            return i
        end
    end
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = can_arrange
    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)
    lu.assertEquals(candidate({1, 2, 4, 5}), -1)
    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)
    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)
    lu.assertEquals(candidate({}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_136,uig_Arab,lua,"- مىساللار:- ئەگەر سىزدە سالاھىيەت ياكى سالاھىيەتسىز پۈتۈن سانلار بولمىسا، ئۇلارنى نۆل دەپ قايتۇرۇڭ..بىر جەدۋەلدىكى قوشۇمچە پۈتۈن سانلارنى ..ئۇ سەلبىي پۈتۈن سانلارنىڭ ئەڭ چوڭى، ئەڭ كىچىك سان B-- بىز بىر جەدۋەل تۈزۈش ئۈچۈن بىر فۇنكسىيە ياسايمىز (a,b) ، بۇ يەردىكى ""a"" بولسا-- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})
-- {None, 1}
-- >>> largest_smallest_integers({})
-- {None, None}
-- >>> largest_smallest_integers({0})
-- {None, None}
local function largest_smallest_integers(lst)
","local function largest_smallest_integers(lst)
    local max_negative = nil
    local min_positive = nil

    for _, num in ipairs(lst) do
        if num < 0 then
            if max_negative == nil or num > max_negative then
                max_negative = num
            end
        elseif num > 0 then
            if min_positive == nil or num < min_positive then
                min_positive = num
            end
        end
    end

    return {max_negative, min_positive}
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_smallest_integers
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})
    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})
    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})
    lu.assertEquals(candidate({}), {None, None})
    lu.assertEquals(candidate({0}), {None, None})
    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})
    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})
    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})
    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_137,uig_Arab,lua,"-- دىققەت: ئەگەر بىر رېئال سان سىتېرېنگ شەكلىدە ئىپادىلەنسە، ئۈزۈلدۈرەلمەس نۇقتا . ياكى ، - ئەگەر قىممەتلەر ئوخشاش بولسا نۆل قايتۇرۇڭ..ئەسلى ھەرپلەرنى تۈرگە ئايرىپ، چوڭ ھەرپلەرنى تۈرگە ئايرىپ، ئۇلارغا ئۆزگىرىشچان تۈرگە ئايرىپ كۆرسەتكەن-- سىز بۇنى خۇددى بىر پارچە ئەرزان چۈشۈرۈش سىتونىدەك ياسىغان بولسىڭىزمۇ بولىدۇ .ئۇنى كونترول قىلالايسىز .ئۇنى كونترول قىلالايسىز-- >>> compare_one(1, 2.5)
-- 2.5
-- >>> compare_one(1, '2,3')
-- '2,3'
-- >>> compare_one('5,1', '6')
-- '6'
-- >>> compare_one('1', 1)
-- None
local function compare_one(a, b)
","local function to_real_number(val)
    if type(val) == ""string"" then
        val = val:gsub("","", ""."")
        return tonumber(val)
    end
    return val
end

local function compare_one(a, b)
    local a_type = type(a)
    local b_type = type(b)
    
    if a_type == b_type then
        if a == b then
            return nil
        end
        return a > b and a or b
    else
        local a_real = to_real_number(a)
        local b_real = to_real_number(b)
        
        if a_real == b_real then
            return nil
        end
        return a_real > b_real and a or b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare_one
    lu.assertEquals(candidate(1, 2), 2)
    lu.assertEquals(candidate(1, 2.5), 2.5)
    lu.assertEquals(candidate(2, 3), 3)
    lu.assertEquals(candidate(5, 6), 6)
    lu.assertEquals(candidate(1, '2,3'), '2,3')
    lu.assertEquals(candidate('5,1', '6'), '6')
    lu.assertEquals(candidate('1', '2'), '2')
    lu.assertEquals(candidate('1', 1), None)
end

os.exit(lu.LuaUnit.run())"
HumanEval_138,uig_Arab,lua,"- مىسالىم .-- N نىڭ تۆت قوش قوش قوش قوش نۇمۇرنىڭ قوشۇمچىسى ئىكەنلىكىگە قاراپ باقايلى .-- >>> is_equal_to_sum_even(4)
-- false
-- >>> is_equal_to_sum_even(6)
-- false
-- >>> is_equal_to_sum_even(8)
-- true
local function is_equal_to_sum_even(n)
","local function is_equal_to_sum_even(n)
    -- Check if n can be expressed as the sum of 4 positive even numbers
    -- which means n should at least be 8 (2 + 2 + 2 + 2) and n should be even.
    if n >= 8 and n % 2 == 0 then
        return true
    else
        return false
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_equal_to_sum_even
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), true)
    lu.assertEquals(candidate(11), false)
    lu.assertEquals(candidate(12), true)
    lu.assertEquals(candidate(13), false)
    lu.assertEquals(candidate(16), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_139,uig_Arab,lua,"- مەسىلەن: - بۇ يەردە n > 0-- برازىلىيە فاكتورى (n) = n! * (n-1)! * (n-2)! * ... * 1! - بىرازىلىيە فاكتورى مۇنداق بەلگىلەنگەن: -- >>> special_factorial(4)
-- 288
-- The function will receive an integer as input and should return the special
-- factorial of this integer.
local function special_factorial(n)
","local function factorial(m)
    if m == 0 then
        return 1
    else
        return m * factorial(m - 1)
    end
end

local function special_factorial(n)
    local result = 1
    for i = 1, n do
        result = result * factorial(i)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = special_factorial
    lu.assertEquals(candidate(4), 288)
    lu.assertEquals(candidate(5), 34560)
    lu.assertEquals(candidate(7), 125411328000)
    lu.assertEquals(candidate(1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_140,uig_Arab,lua,"- ئاندىن ئارقا-ئارقىدىن كەلگەن بوشلۇقلارنى - بىلەن ئالماشتۇرۇڭ ..ئەگەر سىز ئىنگلىزچىدىكى ھەربىر بوغۇمغا ئىككىدىن ئارتۇق ھەرپ كىرگۈزمەكچى بولسىڭىز،- تېكىست سىتونى بېرىلسە، ئۇنىڭدىكى ھەربىر بوشلۇقنى ئاستىغا سىزىپ يېزىڭ،-- >>> fix_spaces(' Example')
-- 'Example'
-- >>> fix_spaces(' Example 1')
-- 'Example_1'
-- >>> fix_spaces(' Example 2')
-- '_Example_2'
-- >>> fix_spaces(' Example 3')
-- '_Example-3'
local function fix_spaces(text)
","local function fix_spaces(text)
    -- Trim leading and trailing spaces
    text = text:match(""^%s*(.-)%s*$"")
    
    -- Replace more than 2 consecutive spaces with '-'
    text = text:gsub(""%s%s%s+"", ""-"")
    
    -- Replace single spaces and double spaces with underscores
    text = text:gsub(""%s"", ""_"")
    
    return text
end","lu = require('luaunit')

function test_humaneval()
local candidate = fix_spaces
    lu.assertEquals(candidate('Example'), 'Example')
    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')
    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')
    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')
    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')
end

os.exit(lu.LuaUnit.run())"
HumanEval_141,uig_Arab,lua,"- مىساللار:.ئۈچىنچى تەرەپتە سىز چوقۇم، x، y، z، i، u، z، v، u، u، u، u، u، v، u، u، u، u، u، v، u، u، u، u، v، u، u، v، u، u، v، u، v، u، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v، v- لاتىن ھەرپى (a-z ۋە A-Z).بۇنىڭدىن كېيىنكى قىسقۇچ بولسا قۇرۇق قۇرۇق قۇرۇق بولماسلىقى كېرەك .ۋە بۇ قىسقۇچتا بىر ھەرپ بار- ھۆججەتنىڭ ئىسمىدا پەقەت بىرلا نۇقتا بار- - ھۆججەت نامىدا ئۈچتىن ئارتۇق سان ('0'-'9') بولۇشى كېرەك.- يېتىلگەن بولسا:- ھۆججەتنىڭ ئاتى تۆۋەندىكى شەرتلەرنىڭ ھەممىسى ئىجرا قىلىنغاندىلا ئاندىن كۈچكە ئىگە دەپ قارىلىدۇ:- ئەگەر ھۆججەتنىڭ ئاتى توغرا بولسا ""شۇنداق"" دەپ بېكىتىدۇ، بولمىسا ""ياق"" دەپ بېكىتىدۇ.-- بىر ھۆججەتنىڭ نامىنى ئىپادىلەيدىغان بىر ھەرپلەرنى ئېلىپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ بىر تەرەپ قىلغۇچقا ئايلاندۇرۇپ-- >>> file_name_check('example.txt')
-- 'Yes'
-- >>> file_name_check('1example.dll')
-- 'No'
local function file_name_check(file_name)
","local function file_name_check(file_name)
    -- Check exactly one dot in the file name
    local dot_pos = file_name:find(""%."")
    if not dot_pos or dot_pos ~= file_name:find(""%."", dot_pos + 1) then
        return 'No'
    end
    
    -- Split the name into prefix and suffix
    local prefix = file_name:sub(1, dot_pos - 1)
    local suffix = file_name:sub(dot_pos + 1)

    -- Check if suffix is valid
    local valid_suffixes = { txt = true, exe = true, dll = true }
    if not valid_suffixes[suffix] then
        return 'No'
    end

    -- Check prefix is not empty and starts with a letter
    if #prefix == 0 or not prefix:match(""^[a-zA-Z]"") then
        return 'No'
    end

    -- Check that prefix has no more than 3 digits
    local digit_count = 0
    for i = 1, #prefix do
        if prefix:sub(i, i):match(""%d"") then
            digit_count = digit_count + 1
            if digit_count > 3 then
                return 'No'
            end
        end
    end

    return 'Yes'
end","lu = require('luaunit')

function test_humaneval()
local candidate = file_name_check
    lu.assertEquals(candidate('example.txt'), 'Yes')
    lu.assertEquals(candidate('1example.dll'), 'No')
    lu.assertEquals(candidate('s1sdf3.asd'), 'No')
    lu.assertEquals(candidate('K.dll'), 'Yes')
    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')
    lu.assertEquals(candidate('His12FILE94.exe'), 'No')
    lu.assertEquals(candidate('_Y.txt'), 'No')
    lu.assertEquals(candidate('?aREYA.exe'), 'No')
    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')
    lu.assertEquals(candidate('this_is_valid.wow'), 'No')
    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')
    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')
    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')
    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')
    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')
    lu.assertEquals(candidate('all.exe.txt'), 'No')
    lu.assertEquals(candidate('I563_No.exe'), 'Yes')
    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')
    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')
    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')
    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')
    lu.assertEquals(candidate('final..txt'), 'No')
    lu.assertEquals(candidate('final132'), 'No')
    lu.assertEquals(candidate('_f4indsartal132.'), 'No')
    lu.assertEquals(candidate('.txt'), 'No')
    lu.assertEquals(candidate('s.'), 'No')
end

os.exit(lu.LuaUnit.run())"
HumanEval_142,uig_Arab,lua,"- مىساللار:-- بۇ فۇنكسىيە 3- ۋە 4-نىڭ كۆپ خىلدىكى سانلىق مەلۇماتىغا ئوخشىمايدىغان سانلىق مەلۇماتلارنى ئۆزگەرتىدۇ..ئەگەر سىز 3نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 4نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 3نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 4نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 3نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 4نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 3نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 4نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 3نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 4نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 3نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 4نىڭ كۆپىيىشىگە توغرا كەلسە .سىزنىڭ كۆرسەتكۈچىڭىز 3نىڭ كۆپىيىشىگە توغرا كېلىدۇ .بۇ فۇنكسىيە پۈتۈن سانلار جەدۋىلىنى ئالىدۇ. ئەگەر ئۇنىڭ كۆرسەتكۈچى a بولسا، فۇنكسىيە پۈتۈن سانلارنى كۋادرات قىلىدۇ.- ھەئە .-- >>> lst
-- {1, 2, 3}
-- >>> lst
-- {}
-- >>> lst
-- {-1, -5, 2, -1, -5}
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for i, v in ipairs(lst) do
        if i % 3 == 0 then
            sum = sum + v^2
        elseif i % 4 == 0 then
            sum = sum + v^3
        else
            sum = sum + v
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1, 2, 3}), 6)
    lu.assertEquals(candidate({1, 4, 9}), 14)
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)
    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)
    lu.assertEquals(candidate({0}), 0)
    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)
    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)
    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)
    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)
    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)
end

os.exit(lu.LuaUnit.run())"
HumanEval_143,uig_Arab,lua,"- بىرىنچى مىسال:- يېڭى سۆز سىتونىدىكى سۆز تەرتىپى ئەسلىدىكىگە ئوخشاش بولۇشى كېرەك..ئۇزۇنلۇقى نۇپۇزلۇق سانغا تەڭھەمدە سىز ئەسلىدىكى سۆزلۈكنى ئۆز ئىچىگە ئالغان بىر قىسىم سۆزلەرنى قايتۇرسىڭىز بولىدۇ،- جۈملىدە بىر قىسىم سۆزلەر بار بولۇپ، ئارىدا بوشلۇق بار،.سىز شۇ كودنى يەنە بىر قېتىم ئىشلەتكەن بولسىڭىز، بۇ ۋاقىتتا، ئۇ چاغدا-- >>> words_in_sentence('This is a test')
-- 'is'
-- Example 2:
-- >>> words_in_sentence('lets go for swimming')
-- 'go for'
-- Constraints:
--     * 1 <= len(sentence) <= 100
--     * sentence contains only letters
local function words_in_sentence(sentence)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function words_in_sentence(sentence)
    local words = {}
    for word in sentence:gmatch(""%S+"") do
        table.insert(words, word)
    end
    
    local result = {}
    for _, word in ipairs(words) do
        if is_prime(#word) then
            table.insert(result, word)
        end
    end
    
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_in_sentence
    lu.assertEquals(candidate('This is a test'), 'is')
    lu.assertEquals(candidate('lets go for swimming'), 'go for')
    lu.assertEquals(candidate('there is no place available here'), 'there is no place')
    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
    lu.assertEquals(candidate('go for it'), 'go for it')
    lu.assertEquals(candidate('here'), '')
    lu.assertEquals(candidate('here is'), 'is')
end

os.exit(lu.LuaUnit.run())"
HumanEval_144,uig_Arab,lua,".سىزنىڭچە،x،n بولسا بىرخىل ئۇقۇمغا ئىگە بولغان جۈملىلەر،ئەمەلىيەتتە ئۇلار بىرخىل ئۇقۇمغا ئىگە،سىزنىڭچە،n بىلەن xنىڭ ھەر ئىككىسىنىڭ ئوزۇقلۇق مىقدارى ئوخشاش،شۇڭا سىز بىر تەرەپ قىلالايسىز-- بۇ يەردىكى ھەر ئىككى تەرەپ پۇزىتسىيە پۈتۈن سان.بۇنىڭدىن كېيىن، بىز x،n ھەر ئىككىلىسىنى ھەرخىل شەكىلدە باھالاپ چىقتۇق- x * n. ئەگەر x * n بىر پۈتۈن سانغا تەڭشەلسە ۋە false بولسا، فۇنكسىيە true نى قايتۇرىدۇ.- سىزنىڭ ۋەزىپىڭىز بولسا ئىپادىنى ئاددىيلاشتۇرۇش ئۈچۈن فۇنكسىيە تۈزۈش .-- >>> simplify('1/5', '5/1')
-- true
-- >>> simplify('1/6', '2/1')
-- false
-- >>> simplify('7/10', '10/2')
-- false
local function simplify(x, n)
","local function simplify(x, n)
    local function parseFraction(frac)
        local num, denom = frac:match(""(%d+)/(%d+)"")
        return tonumber(num), tonumber(denom)
    end

    local xn, xd = parseFraction(x)
    local nn, nd = parseFraction(n)

    local resultNumerator = xn * nn
    local resultDenominator = xd * nd

    return resultNumerator % resultDenominator == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = simplify
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/6', '2/1'), false)
    lu.assertEquals(candidate('5/1', '3/1'), true)
    lu.assertEquals(candidate('7/10', '10/2'), false)
    lu.assertEquals(candidate('2/10', '50/10'), true)
    lu.assertEquals(candidate('7/2', '4/2'), true)
    lu.assertEquals(candidate('11/6', '6/1'), true)
    lu.assertEquals(candidate('2/3', '5/2'), false)
    lu.assertEquals(candidate('5/2', '3/5'), false)
    lu.assertEquals(candidate('2/4', '8/4'), true)
    lu.assertEquals(candidate('2/4', '4/2'), true)
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/5', '1/5'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_145,uig_Arab,lua,"- مەسىلەن: - ئۇلارنىڭ ئەسلى جەدۋىلىدىكى ئىندېكس بويىچە رەتلەش- ئەسكەرتىش: ئەگەر ئوخشاش سانلىق قىممەتتىكى بىر قانچە تۈر بولسا،-- ھەربىر ساننىڭ جەدۋىلىگە ئاساسەن ئۆرلەپ چىقىدۇ-- بۇ يەردىكى بىر جەدۋەلگە نۇسخىلارنى ئايرىيدىغان فۇنكسىيەنى يېزىڭ .-- >>> order_by_points({1, 11, -1, -11, -12})
-- {-1, -11, 1, -12, 11}
-- >>> order_by_points({})
-- {}
local function order_by_points(nums)
","local function order_by_points(nums)
    local function digit_sum(num)
        local sum = 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        return sum
    end

    table.sort(nums, function(a, b)
        local sum_a = digit_sum(a)
        local sum_b = digit_sum(b)
        if sum_a == sum_b then
            -- Preserve original order if digit sums are equal
            return false
        else
            return sum_a < sum_b
        end
    end)

    return nums
end","lu = require('luaunit')

function test_humaneval()
local candidate = order_by_points
    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_146,uig_Arab,lua,"- مەسىلەن: -- بىر ساننىڭ بىرىنچى ۋە ئاخىرقى ھەرپلىرى چەكسىز (1، 3، 5، 7، 9)-- بۇ سانلىق مەلۇماتلار جەدۋىلىدىكى 10 دىن يۇقىرى بولغان تۈرلەرنىڭ سانى .-- بىر جەدۋەلگە سانلارنى كىرگۈزۈپ، قايتۇرىدىغان فۇنكسىيە يېزىڭ .-- >>> specialFilter({15, -73, 14, -15})
-- 1
-- >>> specialFilter({33, -2, -3, 45, 21, 109})
-- 2
local function specialFilter(nums)
","local function isOddDigit(num)
    local digit = num % 10
    return digit % 2 == 1
end

local function specialFilter(nums)
    local count = 0
    for _, num in ipairs(nums) do
        local absNum = math.abs(num)
        if absNum > 10 then
            local firstDigit = tonumber(tostring(absNum):sub(1, 1))
            local lastDigit = absNum % 10
            if isOddDigit(firstDigit) and isOddDigit(lastDigit) then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = specialFilter
    lu.assertEquals(candidate({5, -2, 1, -5}), 0)
    lu.assertEquals(candidate({15, -73, 14, -15}), 1)
    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)
    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)
    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_147,uig_Arab,lua,"- مىسال:.- a (i) + a (j) + a (k) بولسا 3نىڭ ھەسسىلەپ بىرى-- a نىڭ ئۈچ قېتىملىق (a[i], a[j], a[k]) سانىنى قايتۇرىمىز، بۇ يەردە i < j < k, -- ھەربىر i (1 ≤ i ≤ n) نىڭ قىممىتى a[i] = i * i - i + 1.سىزگە بىر پۈتۈن سان بېرىلگەنىدى N.سىزگە بىر پۈتۈن سان جەدۋىلى تۈزۈپ بىر n ئۇزۇنلۇقتا .--     >>> get_max_triples(5)
--     1
-- Explanation: 
-- a = [1, 3, 7, 13, 21]
-- The only valid triple is (1, 7, 13).
local function get_max_triples(n)
","local function get_max_triples(n)
    local a = {}
    for i = 1, n do
        a[i] = i * i - i + 1
    end

    local count = 0
    for i = 1, n - 2 do
        for j = i + 1, n - 1 do
            for k = j + 1, n do
                if (a[i] + a[j] + a[k]) % 3 == 0 then
                    count = count + 1
                end
            end
        end
    end

    return count
end

-- Example Usage:
-- print(get_max_triples(5)) -- Output: 1","lu = require('luaunit')

function test_humaneval()
local candidate = get_max_triples
    lu.assertEquals(candidate(5), 1)
    lu.assertEquals(candidate(6), 4)
    lu.assertEquals(candidate(10), 36)
    lu.assertEquals(candidate(100), 53361)
end

os.exit(lu.LuaUnit.run())"
HumanEval_148,uig_Arab,lua,"- مىساللار-- بۇ يەر شارىنىڭ ئىسمىنى خاتا ئاتىۋالغانلار.- بۇ فۇنكسىيە ئەگەر planet1 ياكى planet2 بولسا بوش جەدۋەل قايتۇرۇشى كېرەك ..چۈنكى ئۇ كۈنگە ناھايىتى يېقىنلاشتى-- بۇ بولسا 1-مەزكۇر يۇلتۇز بىلەن 2-مەزكۇر يۇلتۇزنىڭ ئارىلىقىدىكى ئوربىتىتلار -- بۇ تۈرگە ئايرىلىدۇ-- بۇ فۇنكسىيە بىر جەدۋەل قايتۇرىدۇ . بۇ جەدۋەلدىكى پىلانېتلارنىڭ ھەممىسىنىڭ ئوربىتى-- ئىككى يەر شارى نامىنى بىرىككەن سىتونغا ئايلاندۇرۇش فۇنكسىيەسىنى يېزىڭ.- ئۇران، نېپۇتۇن.-- بىرى مېركۇرى، بىرى ۋېنۇس، بىرى يەر شارى، بىرى مارس، بىرى جۇبېيىت، بىرى ساتۇرن..بىزنىڭ قۇياش سىستېمىمىزدا سەككىز چوڭ پىلانېتا بار ، يەنى قۇياشقا ئەڭ يېقىن پىلانېتا-- >>> bf('Jupiter', 'Neptune')
-- {'Saturn', 'Uranus'}
-- >>> bf('Earth', 'Mercury')
-- 'Venus'
-- >>> bf('Mercury', 'Uranus')
-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}
local function bf(planet1, planet2)
","local function bf(planet1, planet2)
    local planets = {
        ""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    }
    
    local planet_index = {}
    for i, planet in ipairs(planets) do
        planet_index[planet] = i
    end
    
    local index1 = planet_index[planet1]
    local index2 = planet_index[planet2]
    
    if not index1 or not index2 then
        return {}
    end
    
    local start_index = math.min(index1, index2) + 1
    local end_index = math.max(index1, index2) - 1
    
    local result = {}
    for i = start_index, end_index do
        table.insert(result, planets[i])
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = bf
    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})
    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})
    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Earth'), {})
    lu.assertEquals(candidate('Mars', 'Earth'), {})
    lu.assertEquals(candidate('Jupiter', 'Makemake'), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_149,uig_Arab,lua,"- مەسىلەن: .سىز سۆزلەرنىڭ ئۇزۇنلۇقى ئوخشاش دەپ پەرەز قىلىشىڭىز مۇمكىن- بۇ فۇنكسىيە بىر جەدۋەلدىكى ھەرپلەرنى رەتلەش تەرتىپى بويىچە قايتۇرىدۇ.- ئىككى سۆز ئوخشاش ئۇزۇن بولسا، جەدۋەلنى ئالىپبىتى بويىچە رەتلەڭ.-- بۇ قائىدە بويىچە رەتلەنگەن جەدۋەلنى قايتۇرۇشى كېرەك..مەزكۇر سۆزلەرنىڭ تەرتىپى ھەر بىر سۆزنىڭ ئۇزۇنلۇقىغا قاراپ يۇقىرى ئۆرلەيدۇ .سىز بۇنى تولۇق چۈشەندۈرۈپ بېرەلەيسىز.ئۇ يەردە بەلكىم بىر نەچچە پارچە قەغەز بار بولۇشى مۇمكىنجەدۋەل ھەرۋاقىت بىر جەدۋەل بولۇپ، ھەرگىزمۇ بىر جەدۋەل سان ئەمەس.-- ۋە بۇ يەردىكى جەدۋەلگە رەتلەنگەن رەتنى قايتۇرىدۇ،-- تارتىنچاق ئۇزۇنلۇقتىكى سىتوننى چىقىرىپ تاشلايمىز ..تارماق جەدۋىلىنى بىر پارامېتىرغا ئايلاندۇرغان بىر فونكىسىيە يازىمىز-- >>> list_sort({'aa', 'a', 'aaa'})
-- {'aa'}
-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})
-- {'ab', 'cd'}
local function sorted_list_sum(lst)
","local function list_sort(tbl)
    local function is_even_length(s)
        return #s % 2 == 0
    end

    local function compare_strings(a, b)
        if #a == #b then
            return a < b
        else
            return #a < #b
        end
    end

    local result = {}
    for _, v in ipairs(tbl) do
        if is_even_length(v) then
            table.insert(result, v)
        end
    end

    table.sort(result, compare_strings)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sorted_list_sum
    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})
    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})
    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})
    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})
    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})
    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})
    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_150,uig_Arab,lua,"- مىساللار:.بۇ بىر جۈملە نۇسخا، ئۇ يەنە بىر جۈملە نۇسخىنىمۇ ئۆز ئىچىگە ئالىدۇ-- ئاددىي بىر پروگرامما، ئەگەر n بولسا، x نىڭ قىممىتىنى قايتۇرۇپ بېرىدۇ-- >>> x_or_y(7, 34, 12)
-- 34
-- >>> x_or_y(15, 8, 5)
-- 5
local function x_or_y(n, x, y)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    for i = 2, math.sqrt(num) do
        if num % i == 0 then
            return false
        end
    end
    return true
end

local function x_or_y(n, x, y)
    if is_prime(n) then
        return x
    else
        return y
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = x_or_y
    lu.assertEquals(candidate(7, 34, 12), 34)
    lu.assertEquals(candidate(15, 8, 5), 5)
    lu.assertEquals(candidate(3, 33, 5212), 33)
    lu.assertEquals(candidate(1259, 3, 52), 3)
    lu.assertEquals(candidate(7919, -1, 12), -1)
    lu.assertEquals(candidate(3609, 1245, 583), 583)
    lu.assertEquals(candidate(91, 56, 129), 129)
    lu.assertEquals(candidate(6, 34, 1234), 1234)
    lu.assertEquals(candidate(1, 2, 0), 0)
    lu.assertEquals(candidate(2, 2, 0), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_151,uig_Arab,lua,"سىلكىيمىز، ياكى باشقا بىر نۇسخا قويۇپ بېرىمىز..بىر جەدۋەلگە يۆتكەپ، ھەربىر جەدۋەلنىڭ تېلفۇن نومۇرىنى چىقىرىپ، ئۇنىڭدىكى ھەربىر نومۇرىنىڭ ئىككىلەنچىسىنى چىقىرىپ، ئاندىن جەدۋەلنىڭ تېلفۇن نومۇرىنى چىقىرىپ، ئاندىن ئۇنى ئۆزگەرتىپ، ئاندىن ئۇنى ئۆزگەرتىش-- >>> double_the_difference({1, 3, 2, 0})
-- 10
-- >>> double_the_difference({-1, -2, 0})
-- 0
-- >>> double_the_difference({9, -2})
-- 81
-- >>> double_the_difference({0})
-- 0
-- If the input table is empty, return 0.
local function double_the_difference(lst)
","local function double_the_difference(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        if type(num) == ""number"" and num >= 0 and num % 1 == 0 and num % 2 == 1 then
            sum = sum + num * num
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = double_the_difference
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({5.0, 4.0}), 25)
    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
end

os.exit(lu.LuaUnit.run())"
HumanEval_152,uig_Arab,lua,"- مىسال: - قىممەت 0، بولمىسا قىممەت بولسا پەرەز بىلەن نەتىجىنىڭ ئوتتۇرىسىدىكى ئېنىق پەرق بولىدۇ.ئۇلار ھەربىر ئويۇننىڭ قانچىلىك يىراقلىقتا ئىكەنلىكىنى بىلدۈرىدىغان .ئادەمنىڭ ئۇزۇنلۇقى ئوخشاش بولغان بىر جەدۋەلنى قايتۇرىدۇ.سىزگە ئىككى پارچە قىممەتلىك خەت بېرىلىدۇ ،ھەمدە سىز ئۇلارنى ئۆزىڭىزگە ئوخشىتىپ قويىسىز .ھەممە خەتلەر بىر خىل ئوخشىتىشنى كۆرسىتىپ بېرىدۇ-- سىزنىڭ مەسئۇلىيىتىڭىز بىر ئادەمنىڭ بىر قانچە قېتىملىق مۇسابىقىگە قاتنىشىش نەتىجىسىنى توغرا تاپالىغان- تاپالمىغانلىقىنى ئېنىقلاش.بۇلار سېلىشتۇرۇشقا ئەرزىيدۇ.سىز شۇ ۋاقىتتا نېمىنى ئويلاۋاتىسىز، شۇنى بىلىسىز.بىز بۇ ئىشنى ئاران كۆرۈۋاتىمىز دەپ ئويلايمىزمۇ؟-- >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})
-- {0, 0, 0, 0, 3, 3}
-- >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})
-- {4, 4, 1, 0, 0, 6}
local function compare(game, guess)
","local function compare(game, guess)
    local differences = {}
    for i = 1, #game do
        if game[i] == guess[i] then
            differences[i] = 0
        else
            differences[i] = math.abs(game[i] - guess[i])
        end
    end
    return differences
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})
    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})
    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})
    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_153,uig_Arab,lua,"- مىسال:(كۈچ -1)- ""Slices.SERVINGSliCes"" نى قايتۇرىمىز، چۈنكى ""SERVINGSliCes"" ئەڭ كۈچلۈك كېڭەيتىلگەن سۆز.ئۇنداق بولسا، بۇ يەردىكى .ئەر كىشىگە خاس بولغان-- مەسىلەن: سىز بىر پارچە ئىشلەتمەكچى بولسىڭىز .بۇنى بىر جەدۋەلگە ئايلاندۇرۇپ .سىزگە بىر پارچە ئەكەلگەن.مەزكۇر بەتنى تاللاڭ- ئەگەر ئىككى ياكى ئۇنىڭدىن ئارتۇق ئۇزارتىشنىڭ كۈچى ئوخشاش بولسا، سىز چوقۇم- فورمات: ClassName.StrongestExtensionName. .سىز ئەڭ كۈچلۈك بولغان قىسقۇچنى تېپىپ بۇ قىسقۇچقا سىم كىرگۈزسىڭىز بولىدۇ- كېڭەيتىلگەن نومۇردا، كۈچ CAP-SM قىسمىدا كۆرسىتىلگەن..ئەرەبچە ئاتنى چىقىرىپ، SM نى كىچىك ھەرپلەرنىڭ سانى قىلىپ بېكىتىمىز-- بۇ سۆزنىڭ مەزمۇنى تۆۋەندىكىچە: CAP نى چوڭ ھەرپ سانى دەپ بېكىتىمىز .-- سىز ئۇلانما ئارقىلىق بىر قىسىم دەرسلەرنى تولۇقلىيالايسىز .-- سىز بىر تۈرنىڭ ئىسمىنى (ئەرخەت تۈرى) ۋە تولۇقلىما جەدۋىلىنى كۆرسىتىپ بېرىدۇ .-- >>> Strongest_Extension('my_class', {'AA', 'Be', 'CC'})
-- 'my_class.AA'
local function Strongest_Extension(class_name, extensions)
","local function Strongest_Extension(class_name, extensions)
    local strongest_extension = nil
    local max_strength = nil

    for _, extension in ipairs(extensions) do
        local cap = 0
        local sm = 0
        for i = 1, #extension do
            local char = extension:sub(i, i)
            if char:match(""%u"") then
                cap = cap + 1
            elseif char:match(""%l"") then
                sm = sm + 1
            end
        end
        local strength = cap - sm
        if max_strength == nil or strength > max_strength then
            max_strength = strength
            strongest_extension = extension
        end
    end

    return class_name .. ""."" .. strongest_extension
end","lu = require('luaunit')

function test_humaneval()
local candidate = Strongest_Extension
    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')
    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')
    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')
    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')
    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')
    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')
    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')
    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')
    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')
end

os.exit(lu.LuaUnit.run())"
HumanEval_154,uig_Arab,lua,".سىزگە ئىككى سۆز بېرىلىدۇ، ئەگەر ئىككىنچى سۆز ياكى ھەر بىر ئايلاندۇرۇش بىرىنچى سۆزدىكى ماتېماتىكىغا مۇناسىۋەتلىك بولسا بۇ سۆزنى true غا ئۆزگەرتىڭ-- >>> cycpattern_check('abcd', 'abd')
-- false
-- >>> cycpattern_check('hello', 'ell')
-- true
-- >>> cycpattern_check('whassup', 'psus')
-- false
-- >>> cycpattern_check('abab', 'baa')
-- true
-- >>> cycpattern_check('efef', 'eeff')
-- false
-- >>> cycpattern_check('himenss', 'simen')
-- true
local function cycpattern_check(a, b)
","local function is_rotation(s1, s2)
    return #s1 == #s2 and (s1 .. s1):find(s2) ~= nil
end

local function generate_rotations(s)
    local rotations = {}
    for i = 1, #s do
        local rotation = s:sub(i) .. s:sub(1, i-1)
        table.insert(rotations, rotation)
    end
    return rotations
end

local function cycpattern_check(a, b)
    local rotations = generate_rotations(b)
    for _, rotation in ipairs(rotations) do
        if a:find(rotation) then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = cycpattern_check
    lu.assertEquals(candidate('xyzw', 'xyw'), false)
    lu.assertEquals(candidate('yello', 'ell'), true)
    lu.assertEquals(candidate('whattup', 'ptut'), false)
    lu.assertEquals(candidate('efef', 'fee'), true)
    lu.assertEquals(candidate('abab', 'aabb'), false)
    lu.assertEquals(candidate('winemtt', 'tinem'), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_155,uig_Arab,lua,"- مىسال:.بىر پۈتۈن ساننى بېكىتىمىز.--     >>> even_odd_count(-12)
--     {1, 1}
--     >>> even_odd_count(123)
--     {1, 2}
local function even_odd_count(num)
","local function even_odd_count(num)
    local even_count, odd_count = 0, 0
    num = math.abs(num)  -- remove the sign of the number
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            even_count = even_count + 1
        else
            odd_count = odd_count + 1
        end
        num = math.floor(num / 10)
    end
    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_count
    lu.assertEquals(candidate(7), {0, 1})
    lu.assertEquals(candidate(-78), {1, 1})
    lu.assertEquals(candidate(3452), {2, 2})
    lu.assertEquals(candidate(346211), {3, 3})
    lu.assertEquals(candidate(-345821), {3, 3})
    lu.assertEquals(candidate(-2), {1, 0})
    lu.assertEquals(candidate(-45347), {2, 3})
    lu.assertEquals(candidate(0), {1, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_156,uig_Arab,lua,"- مىساللار:- چەكلىمە: 1 <= num <= 1000.ئۇنى كىچىك خەت قىلىپ يېزىپ قويۇڭ.بىر پۈتۈن باھانى قوشۇپ، ئۇنىڭ رىم سانلىق قىممىتىنى سىتونغا ئايلاندۇرۇپ چىقىمىز-- >>> int_to_mini_roman(19)
-- 'xix'
-- >>> int_to_mini_roman(152)
-- 'clii'
-- >>> int_to_mini_roman(426)
-- 'cdxxvi'
local function int_to_mini_roman(number)
","local function int_to_mini_roman(number)
    local roman_numerals = {
        {1000, ""m""},
        {900, ""cm""},
        {500, ""d""},
        {400, ""cd""},
        {100, ""c""},
        {90, ""xc""},
        {50, ""l""},
        {40, ""xl""},
        {10, ""x""},
        {9, ""ix""},
        {5, ""v""},
        {4, ""iv""},
        {1, ""i""}
    }
    
    local result = {}
    for _, value_pair in ipairs(roman_numerals) do
        local value, symbol = unpack(value_pair)
        while number >= value do
            number = number - value
            table.insert(result, symbol)
        end
    end
    
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = int_to_mini_roman
    lu.assertEquals(candidate(19), 'xix')
    lu.assertEquals(candidate(152), 'clii')
    lu.assertEquals(candidate(251), 'ccli')
    lu.assertEquals(candidate(426), 'cdxxvi')
    lu.assertEquals(candidate(500), 'd')
    lu.assertEquals(candidate(1), 'i')
    lu.assertEquals(candidate(4), 'iv')
    lu.assertEquals(candidate(43), 'xliii')
    lu.assertEquals(candidate(90), 'xc')
    lu.assertEquals(candidate(94), 'xciv')
    lu.assertEquals(candidate(532), 'dxxxii')
    lu.assertEquals(candidate(900), 'cm')
    lu.assertEquals(candidate(994), 'cmxciv')
    lu.assertEquals(candidate(1000), 'm')
end

os.exit(lu.LuaUnit.run())"
HumanEval_157,uig_Arab,lua,"- مىسال:- 90گىرادۇسلۇقتوغرا بۇلۇڭلۇق ئۈچ بۇلۇڭلۇق بولسا ئۇ ئۈچ بۇلۇڭلۇقنىڭ بىرى توغرا بۇلۇڭلۇق ياكى.ئەگەر سىز بىر ئۈچ بۇلۇڭلۇق تۈز سىزىقلىق ئۈچ بۇلۇڭلۇقنى ياساپ چىقسىڭىز بۇ خاتا.ئەگەر ئۈچ تەرەپكە توغرا كەلسە true نى قايتۇرۇپ بېرىدۇ-- >>> right_angle_triangle(3, 4, 5)
-- true
-- >>> right_angle_triangle(1, 2, 3)
-- false
local function right_angle_triangle(a, b, c)
","local function right_angle_triangle(a, b, c)
    -- Sort the sides to make sure we always compare the largest with the sum of squares of the other two
    local sides = {a, b, c}
    table.sort(sides)

    -- Check the Pythagorean theorem
    return sides[1]^2 + sides[2]^2 == sides[3]^2
end","lu = require('luaunit')

function test_humaneval()
local candidate = right_angle_triangle
    lu.assertEquals(candidate(3, 4, 5), true)
    lu.assertEquals(candidate(1, 2, 3), false)
    lu.assertEquals(candidate(10, 6, 8), true)
    lu.assertEquals(candidate(2, 2, 2), false)
    lu.assertEquals(candidate(7, 24, 25), true)
    lu.assertEquals(candidate(10, 5, 7), false)
    lu.assertEquals(candidate(5, 12, 13), true)
    lu.assertEquals(candidate(15, 8, 17), true)
    lu.assertEquals(candidate(48, 55, 73), true)
    lu.assertEquals(candidate(1, 1, 1), false)
    lu.assertEquals(candidate(2, 2, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_158,uig_Arab,lua,"- ھەرپلەر، سۆزلۈك تەرتىپى بويىچە بىرىنچى بولۇپ كەلگەن ھەرپنى قايتۇر..ئەگەر سىز بىر قانچە ھەرپلەرنى تاللىسىڭىز .بۇ ئۇسۇلدا قىلالايدىغان ئەڭ چوڭ ئىش- جەدۋەلدە ھەرخىل سۆزلەر بار. ئەڭ كۆپ سۆزنى قايتۇرۇڭ..ئۇلىنىشنى قوبۇل قىلىدىغان فۇنكسىيەنى يېزىش-- >>> find_max({'name', 'of', 'string'})
-- 'string'
-- >>> find_max({'name', 'enam', 'game'})
-- 'enam'
-- >>> find_max({'aaaaaaa', 'bb', 'cc'})
-- 'aaaaaaa'
local function find_max(words)
","local function find_max(words)
    local function unique_characters_count(word)
        local char_set = {}
        for char in word:gmatch('.') do
            char_set[char] = true
        end
        local count = 0
        for _ in pairs(char_set) do
            count = count + 1
        end
        return count
    end

    local max_word = ''
    local max_unique_count = 0

    for _, word in ipairs(words) do
        local unique_count = unique_characters_count(word)
        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word) then
            max_word = word
            max_unique_count = unique_count
        end
    end

    return max_word
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_max
    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
    lu.assertEquals(candidate({'b'}), 'b')
    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
end

os.exit(lu.LuaUnit.run())"
HumanEval_159,uig_Arab,lua,"- مىسال:-- ئەگەر سىزدە يېتەرلىك گۆش قالمىغان بولسا، قېلىن گۆشلەرنىمۇ يەيسىز.- تاماقتىن كېيىن قالغان گازىرنىڭ سانى بىلەن .- سىز بىر جەدۋەلگە [ تاماقتىن كېيىن يېگەن گازىرنىڭ ئومۇمىي سانى ] نى قايتۇرىسىز،-- بىراق ھازىر سىز بىر كۈنلۈك تاماقنى تولۇقلاش ئۈچۈن تېخىمۇ كۆپ گىرۋەك يېيىشىڭىز كېرەك.- سەن ئاچ خەنجەر، سەن ئاللىقاچان مەلۇم ساندىكى گازىرنى يېگەنسەن،-- >>> eat(5, 6, 10)
-- {11, 4}
-- >>> eat(4, 8, 9)
-- {12, 1}
-- >>> eat(1, 10, 10)
-- {11, 0}
-- >>> eat(2, 11, 5)
-- {7, 0}
-- Variables:
-- @number : integer
--     the number of carrots that you have eaten.
-- @need : integer
--     the number of carrots that you need to eat.
-- @remaining : integer
--     the number of remaining carrots thet exist in stock
-- Constrain:
-- * 0 <= number <= 1000
-- * 0 <= need <= 1000
-- * 0 <= remaining <= 1000
-- Have fun :)
local function eat(number, need, remaining)
","local function eat(number, need, remaining)
    local totalEaten
    local leftOver
    
    if remaining >= need then
        totalEaten = number + need
        leftOver = remaining - need
    else
        totalEaten = number + remaining
        leftOver = 0
    end
    
    return {totalEaten, leftOver}
end","lu = require('luaunit')

function test_humaneval()
local candidate = eat
    lu.assertEquals(candidate(5, 6, 10), {11, 4})
    lu.assertEquals(candidate(4, 8, 9), {12, 1})
    lu.assertEquals(candidate(1, 10, 10), {11, 0})
    lu.assertEquals(candidate(2, 11, 5), {7, 0})
    lu.assertEquals(candidate(4, 5, 7), {9, 2})
    lu.assertEquals(candidate(4, 5, 1), {5, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_160,uig_Arab,lua,".ئاپرېتور جەدۋىلىدە ئاز دېگەندە بىر ئاپرېتور بار، ۋە ئوپېرانت جەدۋىلىدە ئاز دېگەندە ئىككى ئوپېرانت بار-- بۇ بىر جەدۋەل، ئۇ سەلبىي بولمىغان پۈتۈن سانلار جەدۋىلى.- مەشغۇلاتچى جەدۋىلىنىڭ ئۇزۇنلۇقى مەشغۇلاتچى جەدۋىلىنىڭ ئۇزۇنلۇقىغا تەڭ - بىر- دىققەت:= نەتىجە = 9نەتىجە = 2 + 3 * 4 - 5- جەدۋەل = [2,3,4,5] - مەشغۇلاتچى['+', '*', '-']- مىسال:- دەرىجە ئۆلچىمى (**)- قەۋەت بۆلۈمى (_)- كۆپەيتىش (*)- تارتىش (--)- قوشۇش (+)- ئاساسىي ئالگېبرا مەشغۇلاتلىرى: -- ۋە بۇ ئىپادىنىڭ قىممىتىنى قايتۇرۇپ بېرىدۇ..ئىككىنچى جەدۋەل بولسا سىلىق نۇمۇرلار جەدۋىلى بولۇپ، ئىككى جەدۋەلنىڭ ھەر بىرىنى ئىشلىتىپ ئىنگلىزچىدىكى .algebra نى چىقىرىپ چىقىمىز.ئىككى گۇرۇپپاغا بۆلۈنگەن، بىرى، تېپىشتۇرغۇچ بىرى، بىرى، كونكرېت بىرىlocal function do_algebra(operator, operand)
","local function do_algebra(operator, operand)
    local expression = tostring(operand[1])
    
    for i = 1, #operator do
        expression = expression .. "" "" .. operator[i] .. "" "" .. operand[i+1]
    end
    
    return load(""return "" .. expression)()
end

-- Example usage:
-- local operator = {'+', '*', '-'}
-- local operand = {2, 3, 4, 5}
-- local result = do_algebra(operator, operand)
-- print(result) -- Output: 9","lu = require('luaunit')

function test_humaneval()
local candidate = do_algebra
    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)
    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)
    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)
end

os.exit(lu.LuaUnit.run())"
HumanEval_161,uig_Arab,lua,"- مىساللار- بۇ فۇنكسىيە نەتىجە سىتونىنى قايتۇرۇپ بېرىشى كېرەك..ئەگەر سىز خەتنى ئۆزگەرتمىسىڭىز، خەتنى ئۆزگەرتمەيسىز- ئۇنداق بولسا، شۇ ھالىتىدە قالغىن .-- ئەگەر s[i] بىر ھەرپ بولسا، ئاستىدىكى ھەرپتىن ئۈستۈنكى ھەرپكە ئايلاندۇرۇڭ ياكى ئايلاندۇرۇڭ.سىز شۇ تور بېكەتتە:-- >>> solve('1234')
-- '4321'
-- >>> solve('ab')
-- 'AB'
-- >>> solve('#a@C')
-- '#A@c'
local function solve(s)
","local function solve(s)
  local has_letters = false
  local result = {}
  
  for i = 1, #s do
    local char = s:sub(i, i)
    if char:match(""%a"") then
      has_letters = true
      if char:lower() == char then
        table.insert(result, char:upper())
      else
        table.insert(result, char:lower())
      end
    else
      table.insert(result, char)
    end
  end
  
  if has_letters then
    return table.concat(result)
  else
    return s:reverse()
  end
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate('AsDf'), 'aSdF')
    lu.assertEquals(candidate('1234'), '4321')
    lu.assertEquals(candidate('ab'), 'AB')
    lu.assertEquals(candidate('#a@C'), '#A@c')
    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')
    lu.assertEquals(candidate('#6@2'), '2@6#')
    lu.assertEquals(candidate('#$a^D'), '#$A^d')
    lu.assertEquals(candidate('#ccc'), '#CCC')
end

os.exit(lu.LuaUnit.run())"
HumanEval_162,uig_Arab,lua,"- ئەگەر 'text' بولسا قۇرۇق تار بولسا، nil نى قايتۇرۇڭ.- ""text"" غا توغرا كەلگەن بولسا، ئۇنىڭ md5 خىش نومۇرىنى قايتۇرۇڭ.-- >>> string_to_md5('Hello world')
-- '3e25960a79dbc69b674cd4ec67a72c62'
local function string_to_md5(text)
","local md5 = require(""md5"")

local function string_to_md5(text)
    if text == """" then
        return nil
    end
    return md5.sumhexa(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_to_md5
    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
    lu.assertEquals(candidate(''), None)
    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')
    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')
end

os.exit(lu.LuaUnit.run())"
HumanEval_163,uig_Arab,lua,"- مەسىلەن: . - ۋە b، يۇقىرى ئۆرلەش تەرتىپى بويىچەa ۋە b نىڭ قوش سانلىق قىممىتى بار ئىككىلا تەرەپنىڭ جۈپ سانلىق قىممىتىنى قايتۇرۇپ بىرىڭ.-- >>> generate_integers(2, 8)
-- {2, 4, 6, 8}
-- >>> generate_integers(8, 2)
-- {2, 4, 6, 8}
-- >>> generate_integers(10, 14)
-- {}
local function generate_integers(a, b)
","local function generate_integers(a, b)
    local evens = {}
    local start, finish = math.min(a, b), math.max(a, b)
    
    for i = start, finish do
        if i % 2 == 0 then
            table.insert(evens, i)
        end
    end
    
    return evens
end","lu = require('luaunit')

function test_humaneval()
local candidate = generate_integers
    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})
    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(17, 89), {})
end

os.exit(lu.LuaUnit.run())"
