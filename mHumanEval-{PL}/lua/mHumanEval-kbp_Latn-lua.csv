task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,kbp_Latn,lua,"- kɩ-taa wɛʊ yɔ. - Cɔnɩ se paa mayaɣ ŋga lɛ, kɛwɛna mayaɣ ŋga kɛwɛna kɩ-cɔlɔ yɔ nɛ pɩɖɛɛ mayaɣ ŋga kɛwɛna kɩ-cɔlɔ yɔ.-- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
-- false
-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
-- true
local function has_close_elements(numbers, threshold)
","local function has_close_elements(numbers, threshold)
    for i = 1, #numbers do
        for j = i + 1, #numbers do
            if math.abs(numbers[i] - numbers[j]) < threshold then
                return true
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = has_close_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_1,kbp_Latn,lua,"- Taawɛɛna kɩ-tɛ matʋ natʋyʋ.- Kpaŋnaŋ ndɩ ndɩ wɛna ɖama cɔlɔ (paa ŋgʊ kɩ-taa lɛ, patɩŋɩɣna nɛ patɩŋɩɣna nɛ patɩŋɩɣna nɛ patɩŋɩɣna nɛ patɩŋɩɣna nɛ patɩŋɩɣna nɛ patɩŋɩɣna ɖama cɔlɔ)- ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ nɛ ɛlɩzɩ-wɛ.- Tʋma ana a-tɛ tɔm kɛna tɔmpiye nɖɩ ɖɩ-taa wɛ tɔmpiye ndɩ ndɩ yɔ.-- >>> separate_paren_groups('( ) (( )) (( )( ))')
-- {'()', '(())', '(()())'}
local function separate_paren_groups(paren_string)
","local function separate_paren_groups(paren_string)
    local result = {}
    local balance = 0
    local current_group = {}

    for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        
        if char == '(' then
            balance = balance + 1
        elseif char == ')' then
            balance = balance - 1
        end

        if char ~= ' ' then
            table.insert(current_group, char)
        end
        
        if balance == 0 and #current_group > 0 then
            table.insert(result, table.concat(current_group))
            current_group = {}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = separate_paren_groups
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_2,kbp_Latn,lua,"- Pɩsɩ nɛ ŋna-ɩ tɔm kɩsɔzɩtʋ- (Paa ɛzɩmtaa lɛ, pɩkazɩ hɔɔlʋʋ kʋɖʋmʋʋ yɔɔ).- nɛ ɛyʊ hɔɔlʊʊ (ɛyʊ kɩlɩm hɔɔlʊʊ ŋgʊ kɩ-taa ɛfɛyɩ yɔ) nɛ ɛyʊ kʊyʊmʊtʊ - Yee ɖɩkpaɣ ɛyʊ ɛ-tɛ ɛyʊtʊ mayaɣ kɔyɔ, ɖɩnaɣ se ɛ-tɛ ɛyʊtʊ mayaɣ kɔyɔ:-- >>> truncate_number(3.5)
-- 0.5
local function truncate_number(number)
","local function truncate_number(number)
    local integer_part = math.floor(number)
    local decimal_part = number - integer_part
    return decimal_part
end","lu = require('luaunit')

function test_humaneval()
local candidate = truncate_number
    lu.assertEquals(candidate(3.5), 0.5)
    lu.assertEquals(candidate(1.25), 0.25)
    lu.assertEquals(candidate(123.0), 0.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_3,kbp_Latn,lua,"- pʋbʋ lɛ, pɩwɛɛ se tʋmɩyɛ nɖɩ ɖɩpɩsɩ tɔm ndʋ tɩkɛ toovenim yɔ.Pɩwɛɛ se ŋtɩlɩ alɩwaatʋ ndʋ tɩ-taa kɛzɛɣa ŋga ŋwɛna yɔ, kɛtɛŋ nɛ kaatalɩ zero yɔ.- Pɩɩha-ŋ liidiye nɖɩ ŋhɛyɩɣ yaa ŋhɛzɩɣ yɔ, ɖɩ-tɛ aɖakaɣ ŋga ka-taa pamaɣ-ŋ takayaɣ ŋga ka-taa yɔ.-- >>> below_zero({1, 2, 3})
-- false
-- >>> below_zero({1, 2, -4, 5})
-- true
local function below_zero(operations)
","local function below_zero(operations)
    local balance = 0
    for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_zero
    lu.assertEquals(candidate({}), false)
    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_4,kbp_Latn,lua,"- MAD = cɛjɛ. x - x_mɩyɛ. - kɩ-tɛ tɔmpiye nɛ ɖɩ-hɛkʊ taa tɔmpiye (nɛ ɖɩ-taa lɛ, tɔmpiye nɖɩ ɖɩ-taa tɔmpiye ɖɩkɛnaa yɔ): - Kʊɖʊmʊʊ ŋgʊ kɩ-tɛ wɛtʊ wɛ ndɩ nɛ lɛɛŋ yɔ- kɩ-taa wɛ ɛzɩ kɩ-taa wɛ yɔ.- Pɩcɔ nɛ ŋtɩlɩ ɛzɩma ŋpɩzɩɣ ŋlabɩnɩ tʋmɩyɛ tɔm pee kɩbana yɔ lɛ, kalɩ tɩ-taa lɛɣtʋ kɩfatʋ nɛ ŋtɩlɩ ɛzɩma ŋpɩzɩɣ ŋlabɩnɩ tʋmɩyɛ tɩ-taa tɔm pee kɩbana yɔ.-- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
-- 1.0
local function mean_absolute_deviation(numbers)
","local function mean_absolute_deviation(numbers)
    local sum = 0
    local count = #numbers
    
    -- Calculate the mean
    for _, number in ipairs(numbers) do
        sum = sum + number
    end
    local mean = sum / count
    
    -- Calculate the mean absolute deviation
    local total_deviation = 0
    for _, number in ipairs(numbers) do
        total_deviation = total_deviation + math.abs(number - mean)
    end
    
    return total_deviation / count
end

-- Example usage
-- print(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})) -- Output: 1.0","lu = require('luaunit')

function test_humaneval()
local candidate = mean_absolute_deviation
    lu.assertEquals(candidate({1.0, 2.0}), 0.5)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_5,kbp_Latn,lua,"- Tɩŋga nɛ ŋsɩɩ ""delimite"" n̄ɩnʋʋ paa tɔm naalɛ weyi lɛ ɩ-hɛkʋ taa.-- >>> intersperse({}, 4)
-- {}
-- >>> intersperse({1, 2, 3}, 4)
-- {1, 4, 2, 4, 3}
local function intersperse(numbers, delimeter)
","local function intersperse(numbers, delimeter)
    local result = {}
    for i = 1, #numbers do
        table.insert(result, numbers[i])
        if i < #numbers then
            table.insert(result, delimeter)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersperse
    lu.assertEquals(candidate({}, 7), {})
    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_6,kbp_Latn,lua,"- Ɖɩkpaɣ ɛzɩ (() (()) yɔ, pɩtalɩɣ pɩ-tɛ nabʊlɛ nɛ ((())) lɛ, pɩtalɩɣ naadozo.- Pɩtɛ kpɩnɛ nɖɩ ɖɩ-taa lɛ, ŋlɩzɩ hɔɔlɩŋ weyi ɩ-taa pɩtɛ kpɩnɛ nɖɩ ɖɩ-taa kɩlɩna wɛʋ yɔ.- Tʋma ana a-taa lɛ, pamaɣna tɔmpiye nɖɩ ɖɩ-taa pamaɣna tɔmpiye ndɩ ndɩ nɛ ɖɩ-taa lɛ, pamaɣna tɔmpiye nɖɩ nɛ ɖɩ-taa lɛ, pamaɣna tɔmpiye nɖɩ nɛ ɖɩ-taa lɛ, pamaɣna tɔmpiye nɖɩ nɛ ɖɩ-taa lɛ, pamaɣna tɔmpiye nɖɩ nɛ ɖɩ-taa lɛ.-- >>> parse_nested_parens('(()()) ((())) () ((())()())')
-- {2, 3, 1, 3}
local function parse_nested_parens(paren_string)
","local function parse_nested_parens(paren_string)
    local results = {}
    for group in paren_string:gmatch(""%S+"") do
        local max_depth = 0
        local current_depth = 0
        for char in group:gmatch(""."") do
            if char == '(' then
                current_depth = current_depth + 1
                if current_depth > max_depth then
                    max_depth = current_depth
                end
            elseif char == ')' then
                current_depth = current_depth - 1
            end
        end
        table.insert(results, max_depth)
    end
    return results
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_nested_parens
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})
    lu.assertEquals(candidate('(()(())((())))'), {4})
end

os.exit(lu.LuaUnit.run())"
HumanEval_7,kbp_Latn,lua,"- Wɩlɩ se ŋñɔɔzɩna tɔm kɩhʊhʊtʊ ndʊ tɩ-taa wɛ tɔm kɩhʊhʊtʊ yɔ nɛ ŋñɔɔzɩ-tʊ nɛ tɩ-taa wɛ tɔm kɩhʊhʊtʊ ndʊ tɩ-taa wɛ tɔm kɩhʊhʊtʊ yɔ.-- >>> filter_by_substring({}, 'a')
-- {}
-- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
-- {'abc', 'bacd', 'array'}
local function filter_by_substring(strings, substring)
","local function filter_by_substring(strings, substring)
    local result = {}
    for _, str in ipairs(strings) do
        if string.find(str, substring) then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_substring
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_8,kbp_Latn,lua,"- Pɩwɛɛ se kɩ-tɛ kɩjɛyɩɣ kɔyɔ 0 nɛ kɩ-tɛ kɩjɛyɩɣ kɔyɔ 1.- Pɩsa nɛ ŋpɩzɩ ŋla akɔnta lɛ, ŋtɛzɩna takayɩhayʋʋ kɩfalʋʋ nakʋyʋ nɛ ŋtɛzɩna takayɩhayʋʋ kɩfalʋʋ nakʋyʋ.-- >>> sum_product({})
-- {0, 1}
-- >>> sum_product({1, 2, 3, 4})
-- {10, 24}
local function sum_product(numbers)
","local function sum_product(numbers)
    local sum = 0
    local product = 1

    for _, number in ipairs(numbers) do
        sum = sum + number
        product = product * number
    end

    return {sum, product}
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_product
    lu.assertEquals(candidate({}), {0, 1})
    lu.assertEquals(candidate({1, 1, 1}), {3, 1})
    lu.assertEquals(candidate({100, 0}), {100, 0})
    lu.assertEquals(candidate({3, 5, 7}), {15, 105})
    lu.assertEquals(candidate({10}), {10, 10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_9,kbp_Latn,lua,"- Kɩ-taa tɔm.- Pɩlɩna ɛyʊ kʊyʊm yɔɔ lɛ, ɛyʊ kʊyʊm yɔɔ lɛ, ɛyʊ kʊyʊm yɔɔ lɛ, ɛyʊ kʊyʊm yɔɔ lɛ, ɛyʊ kʊyʊm yɔɔ lɛ, ɛyʊ kʊyʊm yɔɔ lɛ, ɛyʊ kʊyʊm yɔɔ lɛ.-- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})
-- {1, 2, 3, 3, 3, 4, 4}
local function rolling_max(numbers)
","local function rolling_max(numbers)
    local result = {}
    local max_so_far = numbers[1]
    
    for i = 1, #numbers do
        if numbers[i] > max_so_far then
            max_so_far = numbers[i]
        end
        table.insert(result, max_so_far)
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = rolling_max
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})
    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})
end

os.exit(lu.LuaUnit.run())"
HumanEval_10,kbp_Latn,lua,"- - Pɩsɩ nɛ pɩsɩɩna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.- - Ñɩnɩɣ nɛ ŋnaɣ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye kɩɖaɣlɩyɛ yɔ, ɖɩ-tɛ tɔmpiye nɖɩ ɖɩkɛ palindrome yɔ. - Kɩ-tɛ maɣzɩm wɛ kɛlɛʋ: - Ñɩnɩ palindrome kɩpɩɣlʋʋ ŋgʋ kɩpaɣzɩɣna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye yɔ.-- >>> make_palindrome('')
-- ''
-- >>> make_palindrome('cat')
-- 'catac'
-- >>> make_palindrome('cata')
-- 'catac'
local function make_palindrome(string)
","local function make_palindrome(s)
    -- Function to check if a given string is a palindrome
    local function is_palindrome(str)
        local len = #str
        for i = 1, len // 2 do
            if str:sub(i, i) ~= str:sub(len - i + 1, len - i + 1) then
                return false
            end
        end
        return true
    end

    local len = #s
    -- Find the longest postfix of the string that is a palindrome
    for i = len, 1, -1 do
        if is_palindrome(s:sub(i)) then
            local prefix = s:sub(1, i - 1)
            -- Reverse the prefix and append to the original string
            return s .. prefix:reverse()
        end
    end

    -- If the string is empty or no palindrome is found (shouldn't happen as 
    -- an empty or single character string is a palindrome), return the string itself
    return s
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_palindrome
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('x'), 'x')
    lu.assertEquals(candidate('xyz'), 'xyzyx')
    lu.assertEquals(candidate('xyx'), 'xyx')
    lu.assertEquals(candidate('jerry'), 'jerryrrej')
end

os.exit(lu.LuaUnit.run())"
HumanEval_11,kbp_Latn,lua,"- Tɩŋna XOR yɔɔ nɛ ŋpɩsɩɣ pɩlɩʋ ɖɔɖɔ ɛzɩ tɔmpiye yɔ.- Pɩtɛ lɛ, a nɛ b wɛna 1 nɛ 0 pɛ-hɛkʊ taa.-- >>> string_xor('010', '110')
-- '100'
local function string_xor(a, b)
","local function string_xor(a, b)
    local result = {}
    for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
            table.insert(result, '0')
        else
            table.insert(result, '1')
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_xor
    lu.assertEquals(candidate('111000', '101010'), '010010')
    lu.assertEquals(candidate('1', '1'), '0')
    lu.assertEquals(candidate('0101', '0000'), '0101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_12,kbp_Latn,lua,"- kɩmaŋ weyi ɩ-ɖaɣlɩkɩŋ kɩmaŋ yɔ.- Pɩtɛ pɩlɩʋ taa lɛ, ŋpɩsɩɣ kɩ-kɩɖaɣlʋʋ.-- >>> longest({})
-- None
-- >>> longest({'a', 'b', 'c'})
-- 'a'
-- >>> longest({'a', 'bb', 'ccc'})
-- 'ccc'
local function longest(strings)
","local function longest(strings)
    if #strings == 0 then
        return nil
    end

    local max_len = 0
    local longest_str = nil

    for _, str in ipairs(strings) do
        if #str > max_len then
            max_len = #str
            longest_str = str
        end
    end

    return longest_str
end","lu = require('luaunit')

function test_humaneval()
local candidate = longest
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')
    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')
end

os.exit(lu.LuaUnit.run())"
HumanEval_13,kbp_Latn,lua,"- Haɣ ɛ-tɛ tɔm kɩfatʋ nɛ ɛ-tɛ tɔm kɩfatʋ.-- >>> greatest_common_divisor(3, 5)
-- 1
-- >>> greatest_common_divisor(25, 15)
-- 5
local function greatest_common_divisor(a, b)
","local function greatest_common_divisor(a, b)
    while b ~= 0 do
        local temp = b
        b = a % b
        a = temp
    end
    return a
end","lu = require('luaunit')

function test_humaneval()
local candidate = greatest_common_divisor
    lu.assertEquals(candidate(3, 7), 1)
    lu.assertEquals(candidate(10, 15), 5)
    lu.assertEquals(candidate(49, 14), 7)
    lu.assertEquals(candidate(144, 60), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_14,kbp_Latn,lua,"- Pɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-taa paɖʊ-ɖɩ nɛ ɖɩ-taa yɔ kpaɣ nɛ kɩɖaɣlɩm nɛ puwolo kɩɖaɣlɩm.-- >>> all_prefixes('abc')
-- {'a', 'ab', 'abc'}
local function all_prefixes(string)
","local function all_prefixes(string)
    local prefixes = {}
    for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
    end
    return prefixes
end","lu = require('luaunit')

function test_humaneval()
local candidate = all_prefixes
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_15,kbp_Latn,lua,"- Pɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-taa wɛ nimero waa mba pa-hɩla wɛna yɔ nɛ pɩpaɣzɩna 0 nɛ pɩkɔɔ pɩtalɩ n.-- >>> string_sequence(0)
-- '0'
-- >>> string_sequence(5)
-- '0 1 2 3 4 5'
local function string_sequence(n)
","local function string_sequence(n)
    local result = {}
    for i = 0, n do
        table.insert(result, tostring(i))
    end
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_sequence
    lu.assertEquals(candidate(0), '0')
    lu.assertEquals(candidate(3), '0 1 2 3')
    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')
end

os.exit(lu.LuaUnit.run())"
HumanEval_16,kbp_Latn,lua,"- Ye ŋha-ɖʋ tɔm piye naɖɩyɛ lɛ, ŋñɩnɩ nɛ ŋna ɛzɩma ɖɩ-taa matʋ ndɩ ndɩ wɛɛ yɔ (paa tɔmpiye nɖɩ ɖɩ-taa) yɔ.-- >>> count_distinct_characters('xyzXYZ')
-- 3
-- >>> count_distinct_characters('Jerry')
-- 4
local function count_distinct_characters(string)
","local function count_distinct_characters(string)
    local char_set = {}
    local lower_string = string:lower()
    for i = 1, #lower_string do
        local char = lower_string:sub(i, i)
        char_set[char] = true
    end
    local count = 0
    for _ in pairs(char_set) do
        count = count + 1
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_distinct_characters
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abcde'), 5)
    lu.assertEquals(candidate('abcdecadeCADE'), 5)
    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)
    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)
end

os.exit(lu.LuaUnit.run())"
HumanEval_17,kbp_Latn,lua,"- 'Nɔɔ' - Nɔɔ kɩbɩnɖɛ, ɖɩ-tɛ hendu kʋɖʋmtʋ.- 'o 'kadɩ ' - hɩlaɣ hɔɔlʋʋ, pɩlakɩ hɩlaɣ naalɛ - 'O' - hendu tɩŋa, pɩlakɩ tam naanza - Kɩɖaʋ kʋnɛ kɩ-tɔm pɔyɔɔdʋʋ:- Pɩtɩkɛ kɛdɛzaɣ ñɩndʋ.- Ña-tʋmɩyɛ lɛ se ŋtazɩ tɔmpiye ɖɩnɛ nɛ ŋpɩsɩna taŋgalɩnaa mba pa-taa paa weyi ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ- Tʊma ana a-taa lɛ, pɔcɔna nɛ pana se a-taa lɛ, minziiki wondu wɛna nɛ tɩwɛɛna ASCII.-- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
local function parse_music(music_string)
","local function parse_music(music_string)
    local beats = {}
    for note in music_string:gmatch(""%S+"") do
        if note == 'o' then
            table.insert(beats, 4)
        elseif note == 'o|' then
            table.insert(beats, 2)
        elseif note == '.|' then
            table.insert(beats, 1)
        end
    end
    return beats
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_music
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_18,kbp_Latn,lua,"- Kpaɣ nɛ ŋmaɣzɩ nɛ ŋna tam ɛzɩma tɔm piye naɖɩyɛ wɛ tɔm piye nɖɩ ɖɩ-taa yɔ.-- >>> how_many_times('', 'a')
-- 0
-- >>> how_many_times('aaa', 'a')
-- 3
-- >>> how_many_times('aaaa', 'aa')
-- 3
local function how_many_times(string, substring)
","local function how_many_times(string, substring)
    if substring == '' then return 0 end
    local count = 0
    local start = 1

    while true do
        local found = string:find(substring, start, true)
        if not found then
            break
        end
        count = count + 1
        start = found + 1
    end

    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = how_many_times
    lu.assertEquals(candidate('', 'x'), 0)
    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
    lu.assertEquals(candidate('cacacacac', 'cac'), 4)
    lu.assertEquals(candidate('john doe', 'john'), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_19,kbp_Latn,lua,"- Pɩsɩ nɛ ŋna-ɩ kɩlɛlʋʋ nɛ ŋpaɣzɩnɩ ññɩɩ nɛ ŋwolo ŋtalɩ sɔsɔm taa .- Lɩmaɣza wena awɛ ɖeu yɔ lɛ 'zɛɛrɩ', 'ɛyʋ kʋɖʋm', 'naalɛ', 'naatozo', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanza', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa', 'naanzaa'.- Pɩtɛ tɔm kɛna nimero waa ndɩ ndɩ kpaɣnɩ ""zéro"" nɛ puwolo ""neuf"" nɛ pɩtalɩɣ ɖenɖe pɩtalɩɣ yɔ.-- >>> sort_numbers('three one five')
-- 'one three five'
local function sort_numbers(numbers)
","local function sort_numbers(numbers)
    local number_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
    }

    local number_names = {
        [0] = 'zero',
        [1] = 'one',
        [2] = 'two',
        [3] = 'three',
        [4] = 'four',
        [5] = 'five',
        [6] = 'six',
        [7] = 'seven',
        [8] = 'eight',
        [9] = 'nine'
    }

    local words = {}
    for word in numbers:gmatch(""%S+"") do
        table.insert(words, word)
    end

    table.sort(words, function(a, b)
        return number_map[a] < number_map[b]
    end)

    local sorted_numbers = {}
    for _, word in ipairs(words) do
        table.insert(sorted_numbers, number_names[number_map[word]])
    end

    return table.concat(sorted_numbers, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_numbers
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('three'), 'three')
    lu.assertEquals(candidate('three five nine'), 'three five nine')
    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
end

os.exit(lu.LuaUnit.run())"
HumanEval_20,kbp_Latn,lua,"- lɛɛbʋ nɛ ɛpɩsɩnɩ-wɛ pa-tɩ yɔɔ (ɛzɩma pɩɖɔma yɔ, mbʋ pɩɖɔma yɔ).- Ɛyʊ ɛ-tʊmɩyɛ taa ɛpɩzɩɣ ɛlɩzɩ ɛ-tɛ nabʊlɛ natʊyʊ nɛ ɛɖʊ-tʊ nɛ ɛcɛlɩ-ɩ.-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})
-- {2.0, 2.2}
-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})
-- {2.0, 2.0}
local function find_closest_elements(numbers)
","local function find_closest_elements(numbers)
    table.sort(numbers)
    local min_diff = math.huge
    local result = {}

    for i = 1, #numbers - 1 do
        local diff = numbers[i + 1] - numbers[i]
        if diff < min_diff then
            min_diff = diff
            result = {numbers[i], numbers[i + 1]}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_closest_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_21,kbp_Latn,lua,"- nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele nɛ piyele- Ɛyʊ ɛ-tɛ tɔm natʊyʊ taa (ɛ-tɛ tɔm natʊyʊ taa kɔyɔ naalɛ), ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ nɛ ɛtɛzɩna-tʊ.-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
-- {0.0, 0.25, 0.5, 0.75, 1.0}
local function rescale_to_unit(numbers)
","local function rescale_to_unit(numbers)
    local min_val = math.huge
    local max_val = -math.huge

    -- Find the min and max values in the table
    for _, num in ipairs(numbers) do
        if num < min_val then
            min_val = num
        end
        if num > max_val then
            max_val = num
        end
    end

    local scale = max_val - min_val

    -- Apply the transformation
    local transformed = {}
    for i, num in ipairs(numbers) do
        transformed[i] = (num - min_val) / scale
    end

    return transformed
end","lu = require('luaunit')

function test_humaneval()
local candidate = rescale_to_unit
    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
end

os.exit(lu.LuaUnit.run())"
HumanEval_22,kbp_Latn,lua,"- Wɩlɩ se ŋñɔɔzɩ takayɩhayʋʋ ŋgʋ kɩ-taa ŋnaɣ kɩ-taa tɔm kɩfatʋ yɔ nɛ ŋyele nɛ kɩ-taa tɔm kɩfatʋ ɖeke.-- >>> filter_integers({'a', 3.14, 5})
-- {5}
-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
-- {1, 2, 3}
local function filter_integers(values)
","local function filter_integers(values)
    local result = {}
    for _, value in ipairs(values) do
        if type(value) == ""number"" and math.type(value) == ""integer"" then
            table.insert(result, value)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_integers
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_23,kbp_Latn,lua,"- Kɩ-tɛ kɩɖaʋ kɩɖaʋ kɩlɛlʋʋ -- >>> strlen('')
-- 0
-- >>> strlen('abc')
-- 3
local function strlen(string)
","local function strlen(string)
    return #string
end","lu = require('luaunit')

function test_humaneval()
local candidate = strlen
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('x'), 1)
    lu.assertEquals(candidate('asdasnakj'), 9)
end

os.exit(lu.LuaUnit.run())"
HumanEval_24,kbp_Latn,lua,"- Pɩcɔ nɛ ŋtɩlɩ n mayaɣ kɔyɔ, ŋñɩnɩɣ mayaɣ ŋga kɛwɛna n yɔɔ yɔ, ŋga kakɩlɩ n yɔɔ yɔ.-- >>> largest_divisor(15)
-- 5
local function largest_divisor(n)
","local function largest_divisor(n)
    for i = n - 1, 1, -1 do
        if n % i == 0 then
            return i
        end
    end
    return nil -- In case no divisor is found, though this will not happen for n > 1
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_divisor
    lu.assertEquals(candidate(3), 1)
    lu.assertEquals(candidate(7), 1)
    lu.assertEquals(candidate(10), 5)
    lu.assertEquals(candidate(100), 50)
    lu.assertEquals(candidate(49), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_25,kbp_Latn,lua,"- Pɩwɛɛ se tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.- Pɩwɛɛ se pama ɛyʊ hɔɔlʊʊ ŋgʊ kɩ-taa tam sakɩyɛ ɛzɩ ɛ-tɛ hɔɔlʊʊ ŋgʊ kɩ-taa ɛ-tɛ hɔɔlʊʊ wɛɛ yɔ.- Kɩpɩsɩɣ ɛ-tɛ kajalaɣ tɔmpiye ndɩ ndɩ kpaɣ nɛ cikpeɖe nɛ ŋwolo sɔsɔyɛ taa.-- >>> factorize(8)
-- {2, 2, 2}
-- >>> factorize(25)
-- {5, 5}
-- >>> factorize(70)
-- {2, 5, 7}
local function factorize(n)
","local function factorize(n)
    local factors = {}
    local divisor = 2
    while n > 1 do
        while n % divisor == 0 do
            table.insert(factors, divisor)
            n = n / divisor
        end
        divisor = divisor + 1
    end
    return factors
end","lu = require('luaunit')

function test_humaneval()
local candidate = factorize
    lu.assertEquals(candidate(2), {2})
    lu.assertEquals(candidate(4), {2, 2})
    lu.assertEquals(candidate(8), {2, 2, 2})
    lu.assertEquals(candidate(57), {3, 19})
    lu.assertEquals(candidate(3249), {3, 3, 19, 19})
    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})
    lu.assertEquals(candidate(20577), {3, 19, 19, 19})
    lu.assertEquals(candidate(18), {2, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_26,kbp_Latn,lua,"- Wɩlɩ mbʋ pɩ-taa ŋtɩŋna yɔ nɛ ŋyele nɛ pɩ-taa tɔm pee wɛɛ ɛzɩ ŋlabʋ-tʋ yɔ.- Pɩtɛ lɛ, ɖɩkpaɣ kɩlɛmʋʋ ŋgʋ kɩ-taa ɖɩnaɣ se ɛyaa mba pɛfɛyɩ kɩmaŋ yɔ, pɛfɛyɩ kɩmaŋ.-- >>> remove_duplicates({1, 2, 3, 2, 4})
-- {1, 3, 4}
local function remove_duplicates(numbers)
","local function remove_duplicates(numbers)
    local counts = {}
    -- Count occurrences of each element
    for _, num in ipairs(numbers) do
        counts[num] = (counts[num] or 0) + 1
    end
    -- Collect elements that occur exactly once
    local result = {}
    for _, num in ipairs(numbers) do
        if counts[num] == 1 then
            table.insert(result, num)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_duplicates
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})
end

os.exit(lu.LuaUnit.run())"
HumanEval_27,kbp_Latn,lua,"- Pɩsa nɛ ŋpɩzɩ ŋla mbʋ lɛ, ŋlɛɣzɩ mayaɣ cikpelaɣ ŋga ŋnaɣ yɔ nɛ ŋyele mayaɣ sɔsɔɔ nɛ ŋyele mayaɣ sɔsɔɔ nɛ ŋyele mayaɣ cikpelaɣ.-- >>> flip_case('Hello')
-- 'hELLO'
local function flip_case(string)
","local function flip_case(str)
    return (str:gsub(""%a"", function(c)
        if c:lower() == c then
            return c:upper()
        else
            return c:lower()
        end
    end))
end","lu = require('luaunit')

function test_humaneval()
local candidate = flip_case
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hello!'), 'hELLO!')
    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
end

os.exit(lu.LuaUnit.run())"
HumanEval_28,kbp_Latn,lua,"- Ɛyʊ ɛ-tɛ tɔm kpɛlɛkʊʊ tʊmɩyɛ taa lɛ, ɛ-tɛ tɔm kpɛlɛkʊʊ tʊmɩyɛ taa lɛ, ɛ-tɛ tɔm kpɛlɛkʊʊ tʊmɩyɛ taa lɛ, ɛ-tɛ tɔm kpɛlɛkʊʊ tʊmɩyɛ taa.-- >>> concatenate({})
-- ''
-- >>> concatenate({'a', 'b', 'c'})
-- 'abc'
local function concatenate(strings)
","local function concatenate(strings)
    return table.concat(strings, """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = concatenate
    lu.assertEquals(candidate({}), '')
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')
    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')
end

os.exit(lu.LuaUnit.run())"
HumanEval_29,kbp_Latn,lua,"- Wɩlɩ se ŋñɔɔzʋʋ tɔm pee wena a-taa pɔtɔm se tɔm loyaɣ nakɛyɛ wɛɛ yɔ, a-taa ɖeke.-- >>> filter_by_prefix({}, 'a')
-- {}
-- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
-- {'abc', 'array'}
local function filter_by_prefix(strings, prefix)
","local function filter_by_prefix(strings, prefix)
    local result = {}
    for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_prefix
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_30,kbp_Latn,lua,"- Kɩpɩsɩɣ kɩ-taa kɩ-tɛ kɩmaŋ kɩmaŋ ɖeke.-- >>> get_positive({-1, 2, -4, 5, 6})
-- {2, 5, 6}
-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- {5, 3, 2, 3, 9, 123, 1}
local function get_positive(l)
","local function get_positive(l)
    local positives = {}
    for _, v in ipairs(l) do
        if v > 0 then
            table.insert(positives, v)
        end
    end
    return positives
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_positive
    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
    lu.assertEquals(candidate({-1, -2}), {})
    lu.assertEquals(candidate({}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_31,kbp_Latn,lua,"- Ye nimero waa nabɛyɛ ɩkɛ kajalaɣ mba yɔ, pɩpɩsɩɣ toovenim, ye pɩtɛkɛ mbʋ yɔ, pɩkɛ cɛtɩm.-- >>> is_prime(6)
-- false
-- >>> is_prime(101)
-- true
-- >>> is_prime(11)
-- true
-- >>> is_prime(13441)
-- true
-- >>> is_prime(61)
-- true
-- >>> is_prime(4)
-- false
-- >>> is_prime(1)
-- false
local function is_prime(n)
","local function is_prime(n)
    if n <= 1 then
        return false
    end
    if n <= 3 then
        return true
    end
    if n % 2 == 0 or n % 3 == 0 then
        return false
    end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_prime
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(101), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(13441), true)
    lu.assertEquals(candidate(61), true)
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(1), false)
    lu.assertEquals(candidate(5), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(17), true)
    lu.assertEquals(candidate(85), false)
    lu.assertEquals(candidate(77), false)
    lu.assertEquals(candidate(255379), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_33,kbp_Latn,lua,"- nɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ- l' wɛ ɛzɩ l yɔ, yee ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ- Tʋma ana a-taa lɛ, pakpaɣ taabɩlɩ l nɛ papɩsɩna taabɩlɩ l' ŋgʋ kɩ-taa -- >>> sort_third({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})
-- {2, 6, 3, 4, 8, 9, 5}
local function sort_third(l)
","local function sort_third(l)
    local divisible_by_three = {}
    
    -- Collect elements at indices divisible by three
    for i = 3, #l, 3 do
        table.insert(divisible_by_three, l[i])
    end

    -- Sort collected elements
    table.sort(divisible_by_three)
    
    -- Create a copy of the original table
    local l_prime = {}
    for i = 1, #l do
        l_prime[i] = l[i]
    end

    -- Replace elements at indices divisible by three with sorted elements
    local sorted_index = 1
    for i = 3, #l, 3 do
        l_prime[i] = divisible_by_three[sorted_index]
        sorted_index = sorted_index + 1
    end

    return l_prime
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_third
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})
    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})
    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_34,kbp_Latn,lua,"- Pɩsɩɣnɩ-ɩ nɛ ɛpɩzɩ ɛlɩzɩ ɛ-tɛ tɔm kɩfatʋ takayɩhatʋ taa.-- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {0, 2, 3, 5, 9, 123}
local function unique(l)
","local function unique(l)
    local seen = {}
    local result = {}
    
    for _, value in ipairs(l) do
        if not seen[value] then
            table.insert(result, value)
            seen[value] = true
        end
    end
    
    table.sort(result)
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique
    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})
end

os.exit(lu.LuaUnit.run())"
HumanEval_35,kbp_Latn,lua,"- Pɩsɩɣnɩ-ɖʋ nɛ ɖɩtɩlɩ mbʋ pɩ-taa ɖɩpɩzɩɣ nɛ ɖɩwɛɛ yɔ.-- >>> max_element({1, 2, 3})
-- 3
-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- 123
local function max_element(l)
","local function max_element(l)
    local max = l[1]
    for i = 2, #l do
        if l[i] > max then
            max = l[i]
        end
    end
    return max
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_element
    lu.assertEquals(candidate({1, 2, 3}), 3)
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
end

os.exit(lu.LuaUnit.run())"
HumanEval_36,kbp_Latn,lua,"- Pɩsɩna nɛ ɖɩna tam ɛzɩma 7 lɩna hɔɔlɩŋ weyi ɩ-taa lɛ, 11 yaa 13 pɩzɩɣ nɛ pɩtayɩ-ɩ yɔ.-- >>> fizz_buzz(50)
-- 0
-- >>> fizz_buzz(78)
-- 2
-- >>> fizz_buzz(79)
-- 3
local function fizz_buzz(n)
","local function fizz_buzz(n)
    local count = 0
    for i = 1, n - 1 do
        if i % 11 == 0 or i % 13 == 0 then
            local str_i = tostring(i)
            if str_i:find(""7"") then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = fizz_buzz
    lu.assertEquals(candidate(50), 0)
    lu.assertEquals(candidate(78), 2)
    lu.assertEquals(candidate(79), 3)
    lu.assertEquals(candidate(100), 3)
    lu.assertEquals(candidate(200), 6)
    lu.assertEquals(candidate(4000), 192)
    lu.assertEquals(candidate(10000), 639)
    lu.assertEquals(candidate(100000), 8026)
end

os.exit(lu.LuaUnit.run())"
HumanEval_37,kbp_Latn,lua,"- nɛ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ.- l' wɛ ɛzɩ l yɔ, ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ- Tʋma ana a-taa lɛ, pakpaɣ taabɩlɩ l nɛ papɩsɩna taabɩlɩ l' ŋgʋ kɩ-taa -- >>> sort_even({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_even({5, 6, 3, 4})
-- {3, 6, 5, 4}
local function sort_even(l)
","local function sort_even(l)
    -- Extract the even indexed elements
    local even_elements = {}
    for i = 2, #l, 2 do
        table.insert(even_elements, l[i])
    end

    -- Sort the extracted even elements
    table.sort(even_elements)

    -- Create a new table for the result and fill it with the appropriate elements
    local result = {}
    local even_index = 1
    for i = 1, #l do
        if i % 2 == 0 then
            result[i] = even_elements[even_index]
            even_index = even_index + 1
        else
            result[i] = l[i]
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_even
    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})
    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_39,kbp_Latn,lua,"- prime_fib pɩlɩɣna n-n̄ɩŋgʋ ŋgʋ kɩkɛ Fibonacci n̄ɩŋgʋ nɛ kɩkɛ ɖɔɖɔ kajalaɣ n̄ɩŋgʋ yɔ.-- >>> prime_fib(1)
-- 2
-- >>> prime_fib(2)
-- 3
-- >>> prime_fib(3)
-- 5
-- >>> prime_fib(4)
-- 13
-- >>> prime_fib(5)
-- 89
local function prime_fib(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function fibonacci()
    local a, b = 0, 1
    return function()
        local temp = a
        a, b = b, a + b
        return temp
    end
end

local function prime_fib(n)
    local count = 0
    local fib_gen = fibonacci()
    while true do
        local fib_num = fib_gen()
        if is_prime(fib_num) then
            count = count + 1
            if count == n then
                return fib_num
            end
        end
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_fib
    lu.assertEquals(candidate(1), 2)
    lu.assertEquals(candidate(2), 3)
    lu.assertEquals(candidate(3), 5)
    lu.assertEquals(candidate(4), 13)
    lu.assertEquals(candidate(5), 89)
    lu.assertEquals(candidate(6), 233)
    lu.assertEquals(candidate(7), 1597)
    lu.assertEquals(candidate(8), 28657)
    lu.assertEquals(candidate(9), 514229)
    lu.assertEquals(candidate(10), 433494437)
end

os.exit(lu.LuaUnit.run())"
HumanEval_40,kbp_Latn,lua,"- nɛ ɛ-tɛ tɔm kɛ cɛtɩm.- pɩpɩsɩɣ tɔmpiye true yee tɔmpiye nɖɩ ɖɩ-taa wɛ tɔmpiye ndɩ ndɩ naadozo yɔ nɛ - triple_sum_to_zero kpaɣ ɛyʊ ɛ-tɛ intɛrɩjɛrɩ waa tɛ taŋ.-- >>> triples_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> triples_sum_to_zero({1, 3, -2, 1})
-- true
-- >>> triples_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
-- true
-- >>> triples_sum_to_zero({1})
-- false
local function triples_sum_to_zero(l)
","local function triples_sum_to_zero(l)
    table.sort(l)
    for i = 1, #l - 2 do
        local a = l[i]
        local left = i + 1
        local right = #l
        while left < right do
            local b = l[left]
            local c = l[right]
            local sum = a + b + c
            if sum == 0 then
                return true
            elseif sum < 0 then
                left = left + 1
            else
                right = right - 1
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = triples_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, 5, -1}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), true)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({1, 2, 5, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({1, 3, 5, -100}), false)
    lu.assertEquals(candidate({100, 3, 5, -100}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_41,kbp_Latn,lua,"- Kɩ-tʋmɩyɛ ɖɩnɛ ɖɩlɩzɩɣna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye ndɩ ɖɩ-taa.- nɛ pɔɖɔm nʋmɔʋ ŋgʋ ɛzɩ pataatɔʋ ɖama yɔ.Ɛlɛ, lɔɔɖa ana awɛ ɖoŋ nɛ awɛ ɖɔɖɔ kpɩzɩŋ nɛ pʋyɔɔ lɛ, awɛɛ nɛ awɛɛ nɛ awɛɛ.- alɩwaatʋ ndʋ lɔɔɖɩyɛ nɖɩ ɖɩɖɛɣ nɛ ɖɩlɩɣ nɛ ɖɩɖɛɣ nɛ ɖɩɖɛɣ yɔ, ɖɩkatɩɣ lɔɔɖɩyɛ nɖɩ ɖɩɖɛɣ nɛ ɖɩlɩɣ nɛ ɖɩɖɛɣ yɔ.Pɩkɛna mbʋ se, yee ɖɩkpaɣ se ɖɩcaɣ ɖɩ-tɩ yɔɔ yɔ, ɖɩnaɣ se ɖɩ-taa wɛ leleŋ nɛ ɖɩ-taa wɛ leleŋ.Kpɛndɩɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna nɛ pɩɖɛɣna.- lɔɔɖa n wɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛ nɛ awɛɛMaɣzɩ se ŋwɛ habɩyɛ nɖɩ ɖɩtɩŋʋʋ camɩyɛ yɔ ɖɩ-yɔɔ.local function car_race_collision(n)
","local function car_race_collision(n)
    -- Since each car from the left to right collides with each car from the right to left,
    -- the number of collisions will be n*n.
    return n * n
end","lu = require('luaunit')

function test_humaneval()
local candidate = car_race_collision
    lu.assertEquals(candidate(2), 4)
    lu.assertEquals(candidate(3), 9)
    lu.assertEquals(candidate(4), 16)
    lu.assertEquals(candidate(8), 64)
    lu.assertEquals(candidate(10), 100)
end

os.exit(lu.LuaUnit.run())"
HumanEval_42,kbp_Latn,lua,"- Kɩ-tɛ kɔɔnɔɔ tɔm nɛ kɩ-tɛ kajalaɣ tɔm.-- >>> incr_list({1, 2, 3})
-- {2, 3, 4}
-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {6, 4, 6, 3, 4, 4, 10, 1, 124}
local function incr_list(l)
","local function incr_list(l)
    local result = {}
    for i = 1, #l do
        result[i] = l[i] + 1
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = incr_list
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
end

os.exit(lu.LuaUnit.run())"
HumanEval_43,kbp_Latn,lua,"- nɛ ɛ-tɛ tɔm kɛ cɛtɩm.- pɩpɩsɩɣ tɔmpiye true yee pɩ-taa wɛ tɔmpiye naalɛ ndɩ ndɩ nɛ - pairs_sum_to_zero kpaɣ ɛyʊ kʊyʊm hɔɔlʊʊ taa lɛ, pɩkɛ ɛyʊ kʊyʊm hɔɔlʊʊ taa.-- >>> pairs_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> pairs_sum_to_zero({1, 3, -2, 1})
-- false
-- >>> pairs_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
-- true
-- >>> pairs_sum_to_zero({1})
-- false
local function pairs_sum_to_zero(l)
","local function pairs_sum_to_zero(l)
    local seen = {}
    for _, value in ipairs(l) do
        if seen[-value] then
            return true
        end
        seen[value] = true
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = pairs_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), false)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_44,kbp_Latn,lua,"- kɩ-tɛ kɩlɩm wɛʊ kɔyɔ pɩfɛyɩ 10.- pɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye lɛɣzɩtʋ wayɩ yɔ.- Lɛɣzɩ kɩ-tɛ n̄ɩɣyʋʋ nɛ kɩ-tɛ n̄ɩɣyʋʋ.-- >>> change_base(8, 3)
-- '22'
-- >>> change_base(8, 2)
-- '1000'
-- >>> change_base(7, 2)
-- '111'
local function change_base(x, base)
","local function change_base(x, base)
    if base < 2 or base > 9 then
        error(""Base must be between 2 and 9"")
    end

    if x == 0 then
        return ""0""
    end

    local result = """"
    while x > 0 do
        local remainder = x % base
        result = tostring(remainder) .. result
        x = math.floor(x / base)
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = change_base
    lu.assertEquals(candidate(8, 3), '22')
    lu.assertEquals(candidate(9, 3), '100')
    lu.assertEquals(candidate(234, 2), '11101010')
    lu.assertEquals(candidate(16, 2), '10000')
    lu.assertEquals(candidate(8, 2), '1000')
    lu.assertEquals(candidate(7, 2), '111')
    lu.assertEquals(candidate(2, 3), '2')
    lu.assertEquals(candidate(3, 4), '3')
    lu.assertEquals(candidate(4, 5), '4')
    lu.assertEquals(candidate(5, 6), '5')
    lu.assertEquals(candidate(6, 7), '6')
    lu.assertEquals(candidate(7, 8), '7')
end

os.exit(lu.LuaUnit.run())"
HumanEval_45,kbp_Latn,lua,"- Pɩkɛna hɔɔlɩŋ weyi ɛ-taa pʊcɔ nɛ pʊcɔ nɛ pʊcɔ nɛ pʊcɔ nɛ pʊcɔ nɛ pʊcɔ yɔ.-- >>> triangle_area(5, 3)
-- 7.5
local function triangle_area(a, h)
","local function triangle_area(a, h)
    return 0.5 * a * h
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(5, 3), 7.5)
    lu.assertEquals(candidate(2, 2), 2.0)
    lu.assertEquals(candidate(10, 8), 40.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_46,kbp_Latn,lua,"- Tɩŋnɩ ɖɔnɛ nɖɩ ɖɩ-yɔɔ nɛ ŋla akɔnta nɛ ŋtɩlɩ ɛ-tɛ n-n̄ɩŋga ŋga kɛwɛ fib4 taa yɔ.- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).- fib4(3) -> 0 - fib4(2) -> 2 - fib4(1) -> 0 - fib4(0) -> 0 - Fib4 kɛna Fibbonacci tɛ kʊyʊmʊʊ ŋgʊ kɩwɛ ɛzɩ mbʊ yɔ: -- >>> fib4(5)
-- 4
-- >>> fib4(6)
-- 8
-- >>> fib4(7)
-- 14
local function fib4(n)
","local function fib4(n)
    if n == 0 then return 0 end
    if n == 1 then return 0 end
    if n == 2 then return 2 end
    if n == 3 then return 0 end

    local a, b, c, d = 0, 0, 2, 0

    for i = 4, n do
        local temp = a + b + c + d
        a, b, c, d = b, c, d, temp
    end

    return d
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib4
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 28)
    lu.assertEquals(candidate(10), 104)
    lu.assertEquals(candidate(12), 386)
end

os.exit(lu.LuaUnit.run())"
HumanEval_47,kbp_Latn,lua,"- Kɩ-tɛ hɔɔlɩŋ hɔɔlɩŋ weyi ɩwɛ pʊtʊnaa l taa yɔ, ɛ-tɛ hɔɔlɩŋ hɔɔlɩŋ kɩcɛzɩna naalɛ.-- >>> median({3, 1, 2, 4, 5})
-- 3
-- >>> median({-10, 4, 6, 1000, 10, 20})
-- 15.0
local function median(l)
","local function median(l)
    table.sort(l)
    local n = #l
    if n % 2 == 1 then
        return l[(n + 1) / 2]
    else
        local mid1 = n / 2
        local mid2 = mid1 + 1
        return (l[mid1] + l[mid2]) / 2
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = median
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)
    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)
    lu.assertEquals(candidate({5}), 5)
    lu.assertEquals(candidate({6, 5}), 5.5)
    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_48,kbp_Latn,lua,"- Ɛcɔŋna se ɛ-tɛ tɔmpiye nɖɩ ɖɩ-taa ɛlaba yɔ, ɖɩkɛ palindrome yaa we ?-- >>> is_palindrome('')
-- true
-- >>> is_palindrome('aba')
-- true
-- >>> is_palindrome('aaaaa')
-- true
-- >>> is_palindrome('zbcd')
-- false
local function is_palindrome(text)
","local function is_palindrome(text)
    return text == string.reverse(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_palindrome
    lu.assertEquals(candidate(''), true)
    lu.assertEquals(candidate('aba'), true)
    lu.assertEquals(candidate('aaaaa'), true)
    lu.assertEquals(candidate('zbcd'), false)
    lu.assertEquals(candidate('xywyx'), true)
    lu.assertEquals(candidate('xywyz'), false)
    lu.assertEquals(candidate('xywzx'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_49,kbp_Latn,lua,"- Pɩpɩsɩɣ 2^n modulo p (ɩtɩlɩɣ nimerikɩwaa).-- >>> modp(3, 5)
-- 3
-- >>> modp(1101, 101)
-- 2
-- >>> modp(0, 101)
-- 1
-- >>> modp(3, 11)
-- 8
-- >>> modp(100, 101)
-- 1
local function modp(n, p)
","local function modp(n, p)
    return (2^n) % p
end","lu = require('luaunit')

function test_humaneval()
local candidate = modp
    lu.assertEquals(candidate(3, 5), 3)
    lu.assertEquals(candidate(1101, 101), 2)
    lu.assertEquals(candidate(0, 101), 1)
    lu.assertEquals(candidate(3, 11), 8)
    lu.assertEquals(candidate(100, 101), 1)
    lu.assertEquals(candidate(30, 5), 4)
    lu.assertEquals(candidate(31, 5), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_51,kbp_Latn,lua,"- remove_vowels kɛna tʋmɩyɛ nɖɩ ɖɩkpaɣ tɔmpiye nɛ ɖɩpɩsɩ tɔmpiye nɖɩ ɖɩfɛyɩna tɔmpiye yɔ. -- >>> remove_vowels('')
-- ''
-- >>> remove_vowels('abcdef')
-- 'bcdf'
-- >>> remove_vowels('aaaaa')
-- ''
-- >>> remove_vowels('aaBAA')
-- 'B'
-- >>> remove_vowels('zbcd')
-- 'zbcd'
local function remove_vowels(text)
","local function remove_vowels(text)
    return text:gsub(""[aeiouAEIOU]"", """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_vowels
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
    lu.assertEquals(candidate('fedcba'), 'fdcb')
    lu.assertEquals(candidate('eeeee'), '')
    lu.assertEquals(candidate('acBAA'), 'cB')
    lu.assertEquals(candidate('EcBOO'), 'cB')
    lu.assertEquals(candidate('ybcd'), 'ybcd')
end

os.exit(lu.LuaUnit.run())"
HumanEval_52,kbp_Latn,lua,"- Yee ɛyʊ ɛ-ñʊʊ mayaɣ kɔyɔ, ɛ-tɛ tɔm ndʊ tɩ-taa lɛ, ɛ-tɛ tɔm ndʊ tɩ-taa lɛ, ɛ-tɛ tɔm ndʊ tɩ-taa lɛ, ɛ-tɛ tɔm ndʊ tɩ-taa lɛ.-- >>> below_threshold({1, 2, 4, 10}, 100)
-- true
-- >>> below_threshold({1, 20, 4, 10}, 5)
-- false
local function below_threshold(l, t)
","local function below_threshold(l, t)
    for _, number in ipairs(l) do
        if number >= t then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_threshold
    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)
    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_53,kbp_Latn,lua,"- Kɩkpɛndɩna x nɛ y pa-naalɛ .-- >>> add(2, 3)
-- 5
-- >>> add(5, 7)
-- 12
local function add(x, y)
","local function add(x, y)
    return x + y
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate(0, 1), 1)
    lu.assertEquals(candidate(1, 0), 1)
    lu.assertEquals(candidate(2, 3), 5)
    lu.assertEquals(candidate(5, 7), 12)
    lu.assertEquals(candidate(7, 5), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_54,kbp_Latn,lua,"- Cɔnɩ se tɔm pee naalɛ ɩwɛna masɩ kʋɖʋmsɩ yaa we. -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
-- true
-- >>> same_chars('abcd', 'dddddddabc')
-- true
-- >>> same_chars('dddddddabc', 'abcd')
-- true
-- >>> same_chars('eabcd', 'dddddddabc')
-- false
-- >>> same_chars('abcd', 'dddddddabce')
-- false
-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
-- false
local function same_chars(s0, s1)
","local function same_chars(s0, s1)
    local function char_set(str)
        local set = {}
        for c in str:gmatch(""."") do
            set[c] = true
        end
        return set
    end

    local set0 = char_set(s0)
    local set1 = char_set(s1)

    for c in pairs(set0) do
        if not set1[c] then
            return false
        end
    end

    for c in pairs(set1) do
        if not set0[c] then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = same_chars
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)
    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)
    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)
    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)
    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)
    lu.assertEquals(candidate('aabb', 'aaccc'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_55,kbp_Latn,lua,"- Ɩpɩsɩ Fibonacci n-n̄ɩŋgʋ.-- >>> fib(10)
-- 55
-- >>> fib(1)
-- 1
-- >>> fib(8)
-- 21
local function fib(n)
","local function fib(n)
    if n <= 0 then
        return 0
    elseif n == 1 then
        return 1
    else
        local a, b = 0, 1
        for i = 2, n do
            a, b = b, a + b
        end
        return b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib
    lu.assertEquals(candidate(10), 55)
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(8), 21)
    lu.assertEquals(candidate(11), 89)
    lu.assertEquals(candidate(12), 144)
end

os.exit(lu.LuaUnit.run())"
HumanEval_56,kbp_Latn,lua,"- pɩpɩsɩɣ true yee paa kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ- kɩ-taa lɛ, ""<"" nɛ "">"" wɛna.-- >>> correct_bracketing('<')
-- false
-- >>> correct_bracketing('<>')
-- true
-- >>> correct_bracketing('<<><>>')
-- true
-- >>> correct_bracketing('><<>')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '<' then
            balance = balance + 1
        elseif char == '>' then
            balance = balance - 1
        end
        
        if balance < 0 then
            return false
        end
    end
    
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('<>'), true)
    lu.assertEquals(candidate('<<><>>'), true)
    lu.assertEquals(candidate('<><><<><>><>'), true)
    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
    lu.assertEquals(candidate('<<<><>>>>'), false)
    lu.assertEquals(candidate('><<>'), false)
    lu.assertEquals(candidate('<'), false)
    lu.assertEquals(candidate('<<<<'), false)
    lu.assertEquals(candidate('>'), false)
    lu.assertEquals(candidate('<<>'), false)
    lu.assertEquals(candidate('<><><<><>><>><<>'), false)
    lu.assertEquals(candidate('<><><<><>><>>><>'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_57,kbp_Latn,lua,"- Pɩpɩsɩɣ true kɔyɔ, pɩwɩlɩɣ se taabɩlɩ taa wondu wɛɛ nɛ tɩpaɣlɩɣ yaa tɩwɛɛ nɛ tɩtɛzɩɣ ɖɔʋ.-- >>> monotonic({1, 2, 4, 20})
-- true
-- >>> monotonic({1, 20, 4, 10})
-- false
-- >>> monotonic({4, 1, 0, -10})
-- true
local function monotonic(l)
","local function monotonic(l)
    if #l < 2 then
        return true
    end

    local increasing = true
    local decreasing = true

    for i = 2, #l do
        if l[i] > l[i - 1] then
            decreasing = false
        elseif l[i] < l[i - 1] then
            increasing = false
        end
    end

    return increasing or decreasing
end","lu = require('luaunit')

function test_humaneval()
local candidate = monotonic
    lu.assertEquals(candidate({1, 2, 4, 10}), true)
    lu.assertEquals(candidate({1, 2, 4, 20}), true)
    lu.assertEquals(candidate({1, 20, 4, 10}), false)
    lu.assertEquals(candidate({4, 1, 0, -10}), true)
    lu.assertEquals(candidate({4, 1, 1, 0}), true)
    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)
    lu.assertEquals(candidate({9, 9, 9, 9}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_58,kbp_Latn,lua,"- Ɛpɩsɩɣ ɛ-tɛ wondu ndɩ ndɩ ndʋ tɩ-taa ɛyʊ wɛna yɔ, pɩlɩna ɛ-tɛ wondu naalɛ yɔɔ.-- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})
-- {1, 5, 653}
-- >>> common({5, 3, 2, 8}, {3, 2})
-- {2, 3}
local function common(l1, l2)
","local function common(l1, l2)
    local set1 = {}
    local set2 = {}
    local result = {}

    -- Create a set for the first list
    for _, value in ipairs(l1) do
        set1[value] = true
    end

    -- Create a set for the second list, noting only common elements
    for _, value in ipairs(l2) do
        if set1[value] then
            set2[value] = true
        end
    end

    -- Collect the keys from the set into a results table
    for key in pairs(set2) do
        table.insert(result, key)
    end

    -- Sort the results table
    table.sort(result)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = common
    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})
    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})
    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_59,kbp_Latn,lua,"- Pɩsɩ nɛ ŋna-ɩ kɩlɛlʋʋ n. Ɖɩkpaɣ se n > 1 nɛ pɩtɛkɛ kɩlɛlʋʋ. -- >>> largest_prime_factor(13195)
-- 29
-- >>> largest_prime_factor(2048)
-- 2
local function largest_prime_factor(n)
","local function largest_prime_factor(n)
    local factor = 2
    while n > 1 do
        if n % factor == 0 then
            n = n / factor
        else
            factor = factor + 1
        end
    end
    return factor
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_prime_factor
    lu.assertEquals(candidate(15), 5)
    lu.assertEquals(candidate(27), 3)
    lu.assertEquals(candidate(63), 7)
    lu.assertEquals(candidate(330), 11)
    lu.assertEquals(candidate(13195), 29)
end

os.exit(lu.LuaUnit.run())"
HumanEval_60,kbp_Latn,lua,"- sum_to_n kɛna tʋmɩyɛ nɖɩ ɖɩtɔyɩɣ 1 nɛ puwolo n yɔ. -- >>> sum_to_n(30)
-- 465
-- >>> sum_to_n(100)
-- 5050
-- >>> sum_to_n(5)
-- 15
-- >>> sum_to_n(10)
-- 55
-- >>> sum_to_n(1)
-- 1
local function sum_to_n(n)
","local function sum_to_n(n)
    return n * (n + 1) // 2
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_to_n
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(6), 21)
    lu.assertEquals(candidate(11), 66)
    lu.assertEquals(candidate(30), 465)
    lu.assertEquals(candidate(100), 5050)
end

os.exit(lu.LuaUnit.run())"
HumanEval_61,kbp_Latn,lua,"- pɩpɩsɩɣ true yee paa kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ kɩ-tɛ- kɩ-taa lɛ, pamaɣna "" ("") nɛ "" ("").-- >>> correct_bracketing('(')
-- false
-- >>> correct_bracketing('()')
-- true
-- >>> correct_bracketing('(()())')
-- true
-- >>> correct_bracketing(')(()')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == ""("" then
            balance = balance + 1
        elseif char == "")"" then
            balance = balance - 1
        end
        if balance < 0 then
            return false
        end
    end
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('()'), true)
    lu.assertEquals(candidate('(()())'), true)
    lu.assertEquals(candidate('()()(()())()'), true)
    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
    lu.assertEquals(candidate('((()())))'), false)
    lu.assertEquals(candidate(')(()'), false)
    lu.assertEquals(candidate('('), false)
    lu.assertEquals(candidate('(((('), false)
    lu.assertEquals(candidate(')'), false)
    lu.assertEquals(candidate('(()'), false)
    lu.assertEquals(candidate('()()(()())())(()'), false)
    lu.assertEquals(candidate('()()(()())()))()'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_62,kbp_Latn,lua,"- Pɩpɩsɩ polinomiye nɖɩ ɖɩ-tɛ derivative nɛ ɖɩ-tɛ formɩ kʋɖʋmʋʋ.- xs[0] + xs[1] * x + xs[2] * x^2 + .... - xs kɛna polinomiye naɖɩyɛ taa tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.-- >>> derivative({3, 1, 2, 4, 5})
-- {1, 4, 12, 20}
-- >>> derivative({1, 2, 3})
-- {2, 6}
local function derivative(xs)
","local function derivative(xs)
    local result = {}
    for i = 2, #xs do
        result[i - 1] = xs[i] * (i - 1)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = derivative
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})
    lu.assertEquals(candidate({1, 2, 3}), {2, 6})
    lu.assertEquals(candidate({3, 2, 1}), {2, 2})
    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})
    lu.assertEquals(candidate({1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_63,kbp_Latn,lua,"- Tɩŋna nɛ ŋma tʋmɩyɛ nɖɩ ɖɩpɩzɩɣ nɛ ɖɩlɩzɩ n-tɛ tɔmpiye nɖɩ ɖɩ-tɛ n-tɛ tɔmpiye yɔ.- fib fib (n) == fib fib (n-1) + fib fib (n-2) + fib (n-3). - fɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩ- fɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩ- fɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩfɩ- FibFib n̄ɩnʋʋ n̄ɩnʋʋ kɛ n̄ɩnʋʋ ŋgʋ kɩwɛ ɛzɩ Fibbonacci n̄ɩnʋʋ mbʋ yɔ nɛ kɩ-tɔm kɔyɔ:-- >>> fibfib(1)
-- 0
-- >>> fibfib(5)
-- 4
-- >>> fibfib(8)
-- 24
local function fibfib(n)
","local function fibfib(n)
    if n == 0 then
        return 0
    elseif n == 1 then
        return 0
    elseif n == 2 then
        return 1
    else
        local a, b, c = 0, 0, 1
        for i = 3, n do
            local next_fibfib = a + b + c
            a, b, c = b, c, next_fibfib
        end
        return c
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fibfib
    lu.assertEquals(candidate(2), 1)
    lu.assertEquals(candidate(1), 0)
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 24)
    lu.assertEquals(candidate(10), 81)
    lu.assertEquals(candidate(12), 274)
    lu.assertEquals(candidate(14), 927)
end

os.exit(lu.LuaUnit.run())"
HumanEval_64,kbp_Latn,lua,"- Kɩɖaʋ: - nɔɔ ŋga pamaɣ yɔ, ɛlɛ kɔ-tɔm kɛdɛzaɣ tɔm pee taa.- Hɩla ana a-taa lɛ, 'a', 'e', 'i', 'o', 'u'.- tɔm piye naɖɩyɛ nɛ ɖɩpɩsɩ-ɖɩ nɛ ɖɩ-taa lɛ, ɖɩ-taa nɔɔ taa tɔm loyaɣ mayaɣ.- Maʋ tʋmɩyɛ nɖɩ payaɣ se vowels_count yɔ ɖɩ-taa tɔmpiye nɖɩ ɖɩwɩlɩɣ se -- >>> vowels_count('abcde')
-- 2
-- >>> vowels_count('ACEDY')
-- 3
local function vowels_count(s)
","local function vowels_count(s)
    local count = 0
    local vowels = {a = true, e = true, i = true, o = true, u = true, 
                    A = true, E = true, I = true, O = true, U = true}
                    
    for i = 1, #s do
        local char = s:sub(i, i)
        if vowels[char] or (char == 'y' or char == 'Y') and i == #s then
            count = count + 1
        end
    end
    
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = vowels_count
    lu.assertEquals(candidate('abcde'), 2)
    lu.assertEquals(candidate('Alone'), 3)
    lu.assertEquals(candidate('key'), 2)
    lu.assertEquals(candidate('bye'), 1)
    lu.assertEquals(candidate('keY'), 2)
    lu.assertEquals(candidate('bYe'), 1)
    lu.assertEquals(candidate('ACEDY'), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_65,kbp_Latn,lua,"- Yee shift > nimero waa kɔyɔ, pɩpɩsɩɣ nimero waa mba pɛlɛɣzɩ-wɛ yɔ.- nɛ pɩpɩsɩɣ pɩ-tɛ lɩmaɣzɩyɛ ɛzɩ tɔmpiye yɔ. - Kɩ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛ-tɛ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ-- >>> circular_shift(12, 1)
-- '21'
-- >>> circular_shift(12, 2)
-- '12'
local function circular_shift(x, shift)
","local function circular_shift(x, shift)
    local num_str = tostring(x)
    local num_digits = #num_str
    if shift > num_digits then
        return num_str:reverse()
    else
        local shift_pos = num_digits - (shift % num_digits)
        return num_str:sub(shift_pos + 1) .. num_str:sub(1, shift_pos)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = circular_shift
    lu.assertEquals(candidate(100, 2), '001')
    lu.assertEquals(candidate(12, 2), '12')
    lu.assertEquals(candidate(97, 8), '79')
    lu.assertEquals(candidate(12, 1), '21')
    lu.assertEquals(candidate(11, 101), '11')
end

os.exit(lu.LuaUnit.run())"
HumanEval_66,kbp_Latn,lua,"- Kɩɖaŋ: - ASCII mayaɣ.- Maʋ tʋmɩyɛ nɖɩ ɖɩkpaɣ tɔmpiye naɖɩyɛ nɛ ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-taa tɔmpiye sɔsɔyɛ wɛna yɔ ɖɩ-tɛ tɔmpiye ɖeke yɔ.- Tʋmɩyɛ nɖɩ ?-- >>> digitSum('')
-- 0
-- >>> digitSum('abAB')
-- 131
-- >>> digitSum('abcCd')
-- 67
-- >>> digitSum('helloE')
-- 69
-- >>> digitSum('woArBld')
-- 131
-- >>> digitSum('aAaaaXa')
-- 153
local function digitSum(s)
","local function digitSum(s)
    local sum = 0
    for i = 1, #s do
        local char = s:sub(i, i)
        if char:match(""%u"") then
            sum = sum + string.byte(char)
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = digitSum
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abAB'), 131)
    lu.assertEquals(candidate('abcCd'), 67)
    lu.assertEquals(candidate('helloE'), 69)
    lu.assertEquals(candidate('woArBld'), 131)
    lu.assertEquals(candidate('aAaaaXa'), 153)
    lu.assertEquals(candidate(' How are yOu?'), 151)
    lu.assertEquals(candidate('You arE Very Smart'), 327)
end

os.exit(lu.LuaUnit.run())"
HumanEval_67,kbp_Latn,lua,"- nɛ pɩcɔ nɛ pɩtalɩɣ: - kɛtɛɖaɣ taa lɛ, ŋhaɣ liidiye nɖɩ ɖɩ-taa ŋwɛna yɔ.- pomegranates nɛ pommes nɛ nimero entier ŋgʋ kɩwɩlɩɣ tɩŋ pee tɩŋa yɔ - pommes, oranges, et manges.- nɛ pɔcɔna nɛ pana se pɔ-hɔɔlʋʋ nakʋyʋ taa lɛ, pɔhɔkɩ-kʋ nɛ pɔhɔkɩ-kʋ nɛ pɔhɔkɩ.- Tʋma ana a-taa lɛ, pakaɣ-ŋ haʋ tɔm pee wena awɩlɩɣ pombo nɛ pombo yɔ a-taa sakɩyɛ.-- >>> fruit_distribution('5 apples and 6 oranges', 19)
-- 8
-- >>> fruit_distribution('0 apples and 1 oranges', 3)
-- 2
-- >>> fruit_distribution('2 apples and 3 oranges', 100)
-- 95
-- >>> fruit_distribution('100 apples and 1 oranges', 120)
-- 19
local function fruit_distribution(s, n)
","local function fruit_distribution(s, n)
    local apples, oranges = s:match(""(%d+)%s*apples%s*and%s*(%d+)%s*oranges"")
    apples = tonumber(apples)
    oranges = tonumber(oranges)
    local mangoes = n - (apples + oranges)
    return mangoes
end","lu = require('luaunit')

function test_humaneval()
local candidate = fruit_distribution
    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)
    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)
    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)
    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)
    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)
    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)
    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)
end

os.exit(lu.LuaUnit.run())"
HumanEval_68,kbp_Latn,lua,"- Kɩɖaʋ 1:- Yee ɛyʊ ɛfɛyɩna ɛ-tɛ kɩlabʊ yaa ɛ-tɛ kɩlabʊ ŋgʊ kɩ-taa ɛfɛyɩ yɔ, pɩpɩsɩɣ [].- Pɩwɛɛ se patasɩ haʋ n̄ɩɣyʋʋ ŋgʋ palɩzɩ-kʋ yɔ, kɩ-tɛ n̄ɩɣyʋʋ lɛɛkʋ, [small_value, its index] taa, - Yee panaa nɩŋgbaŋgʊʊ ndɩ ndɩ nɛ kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna kɩwɛna- Nɔɔɖɛ nɖɩ ɖɩ-taa pɛcɛzɩ-ɖɩ yɔ, nɖɩ lɛ nɖɩ ɖɩ-taa ɛyʊ kɩlɩna tɔyʊʊ yɔ.- Ña-tʋmɩyɛ lɛ se ŋlɩzɩ-ɩ nɛ ŋwoni-i.- ""Ɛzɩma pamaɣ takayaɣ ŋga ka-taa yɔ, ka-taa lɛ, pamaɣ tɩʋ nakʋyʋ piliŋa ŋga ka-taa lɛ, pamaɣ ɖɔɖɔ takayɩsɩ nzɩ sɩ-taa pamaɣ takayɩsɩ nzɩ sɩ-taa yɔ.-- >>> pluck({4, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 2:
-- >>> pluck({1, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 3:
-- >>> pluck({})
-- {}
-- Example 4:
-- >>> pluck({5, 0, 3, 0, 4, 2})
-- {0, 1}
-- Explanation: 0 is the smallest value, but  there are two zeros,
--              so we will choose the first zero, which has the smallest index.
-- Constraints:
--     * 1 <= nodes.length <= 10000
--     * 0 <= node.value
local function pluck(arr)
","local function pluck(arr)
    local smallest_even_value = nil
    local smallest_index = nil

    for index, value in ipairs(arr) do
        if value % 2 == 0 then
            if smallest_even_value == nil or value < smallest_even_value then
                smallest_even_value = value
                smallest_index = index
            end
        end
    end

    if smallest_even_value == nil then
        return {}
    else
        return {smallest_even_value, smallest_index}
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = pluck
    lu.assertEquals(candidate({4, 2, 3}), {2, 1})
    lu.assertEquals(candidate({1, 2, 3}), {2, 1})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})
    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})
    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})
    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})
    lu.assertEquals(candidate({7, 9, 7, 1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_69,kbp_Latn,lua,"- Kɩɖaŋ: - Yee pɩfɛyɩ kɔyɔ, pɩpɩsɩɣ -1.- Kɩ-tɛ ɖoŋ wɛna tam nabʊyʊ taa lɛ, pɩkɛ tam ɛzɩma kɩwɛna yɔ.- kɩtatɩɩfɛyɩ, nɛ kɩ-tɛ ɖoŋ wɛʊ kɩlɩna yaa kɩmaɣna ɛyʊ ɛ-tɩ yɔɔ wɛʊ.- Paha-ŋ takayɩhayʋʋ kɩfalʋʋ nakʋyʋ, kɩ-taa wɛ nimero waa kɩbama nɛ pɩ-taa lɛ, ŋpɩzɩɣ ŋñɩnɩ nimero kɩfalʋʋ ŋgʋ kɩkɩlɩ  yɔ.-- >>> search({4, 1, 2, 2, 3, 1})
-- 2
-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})
-- 3
-- >>> search({5, 5, 4, 4, 4})
-- -1
local function search(lst)
","local function search(lst)
    local frequency = {}
    
    -- Calculate the frequency of each number in the list
    for _, num in ipairs(lst) do
        frequency[num] = (frequency[num] or 0) + 1
    end

    local result = -1
    
    -- Determine the maximum valid integer with the criteria
    for num, freq in pairs(frequency) do
        if num > 0 and freq >= num and num > result then
            result = num
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = search
    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)
    lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)
    lu.assertEquals(candidate({3, 3}), -1)
    lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)
    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)
    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)
    lu.assertEquals(candidate({3, 2, 8, 2}), 2)
    lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)
    lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)
    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)
    lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)
    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)
    lu.assertEquals(candidate({1}), 1)
    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)
    lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)
    lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)
    lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)
    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)
    lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)
    lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)
    lu.assertEquals(candidate({10}), -1)
    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)
    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)
    lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)
    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_70,kbp_Latn,lua,"- Kɩɖaŋ: - nɛ pʋwayɩ lɛ, ɛ-tɛ kɩlɩm nɛ pɩtɛ lɛ, ɛ-tɛ kɩlɩm nɛ pɩtɛ lɛ, ɛ-tɛ kɩlɩm nɛ pɩtɛ lɛ.- Pɩwɛɣ ɖeu se ŋpaɣzɩnɩ mbʋ pɩ-tɔm kɩlɩ cɛyʋʋ yɔ.- Yee ɖɩha ɛyʊ ɛ-tɛ nimero waa tɩŋa yɔ, ɖɩpɩsɩɣ ɛ-tɛ nimero waa tɩŋa nɛ ɖɩtɛ ɖɩpɩsɩɣ ɛ-tɛ nimero waa tɩŋa.-- >>> strange_sort_list({1, 2, 3, 4})
-- {1, 4, 2, 3}
-- >>> strange_sort_list({5, 5, 5, 5})
-- {5, 5, 5, 5}
-- >>> strange_sort_list({})
-- {}
local function strange_sort_list(lst)
","local function strange_sort_list(lst)
    table.sort(lst) -- Sort the list
    local result = {}
    local i, j = 1, #lst
    
    while i <= j do
        table.insert(result, lst[i])
        if i ~= j then
            table.insert(result, lst[j])
        end
        i = i + 1
        j = j - 1
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = strange_sort_list
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})
    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})
    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})
    lu.assertEquals(candidate({111111}), {111111})
end

os.exit(lu.LuaUnit.run())"
HumanEval_71,kbp_Latn,lua,"- Kɩɖaʋ: - nɛ pɩtasɩnɩ hɔɔlʋʋ tozo ñɩŋgʋ.- Hɔɔlɩŋ naadozo wɛna tam nabudozo taa yee ɛ-hɔɔlɩŋ naalɛ ɩ-taa lɛɛkʋ ɛkɩlɩna yɔ.- Ye pɩtaakɛ mbʋ yɔ, pɩpɩsɩɣ -1.- tam nabudozo ŋga ka-taa lɛ, ŋñɔɔzɩ-kɛ nɛ ŋyele nɛ ŋtazɩ kɩ-taa lɛ, ŋtazɩ kɩ-taa lɛ, ŋñɔɔzɩ-kɛ nɛ ŋtazɩ kɩ-taa lɛ, ŋñɔɔzɩ-kɛ nɛ ŋyele nɛ ŋtazɩ kɩ-taa lɛ, ŋñɔɔzɩ-kɛ nɛ ŋyele.- Yee ɖɩkpaɣ tam nabudozo n̄ɩŋgʋ ŋgʋ kɩwɛna hɔɔlɩŋ naadozo yɔ, ɖɩpɩsɩɣ pʊtʊ weyi ɛ-hɔɔlɩŋ naadozo taa yɔ.-- >>> triangle_area(3, 4, 5)
-- 6.0
-- >>> triangle_area(1, 2, 10)
-- -1
local function triangle_area(a, b, c)
","local function triangle_area(a, b, c)
    -- Check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a then
        -- Calculate the semi-perimeter
        local s = (a + b + c) / 2
        -- Calculate the area using Heron's formula
        local area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        -- Return the area rounded to 2 decimal points
        return math.floor(area * 100 + 0.5) / 100
    else
        -- Return -1 if not a valid triangle
        return -1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(3, 4, 5), 6.0)
    lu.assertEquals(candidate(1, 2, 10), -1)
    lu.assertEquals(candidate(4, 8, 5), 8.18)
    lu.assertEquals(candidate(2, 2, 2), 1.73)
    lu.assertEquals(candidate(1, 2, 3), -1)
    lu.assertEquals(candidate(10, 5, 7), 16.25)
    lu.assertEquals(candidate(2, 6, 3), -1)
    lu.assertEquals(candidate(1, 1, 1), 0.43)
    lu.assertEquals(candidate(2, 2, 10), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_72,kbp_Latn,lua,"- Kɩɖaʋ: - Pɩkɛna pʊtʊ weyi ɛ-tɛ ɛyʊ wɛna tɩlasɩ yɔ, ɛpɩzɩɣ ɛɖɛɛna ɖooo ɛsɔdaa yee ɛ-tɛ ɛyʊ wɛna tɩlasɩ yɔ (pʊ-tɔbʊʊ se ɛ-tɛ ɛyʊ wɛna tɩlasɩ yɔ) nɛ ɛ-tɛ ɛyʊ wɛna tɩlasɩ nzɩ sɩ-tɛ ɛyʊ wɛna tɩlasɩ yɔ.- Ma tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm ndʋ tɩkɛ toovenim yɔ, ye wondu q ɛkʋyʋʋ yɔ, nɛ tɔm ndʋ tɩkɛ cɛtɩm yɔ, ye pɩtɩkɛ mbʋ yɔ.-- >>> will_it_fly({1, 2}, 5)
-- false
-- # 1+2 is less than the maximum possible weight, but it's unbalanced.
-- >>> will_it_fly({3, 2, 3}, 1)
-- false
-- # it's balanced, but 3+2+3 is more than the maximum possible weight.
-- >>> will_it_fly({3, 2, 3}, 9)
-- true
-- # 3+2+3 is less than the maximum possible weight, and it's balanced.
-- >>> will_it_fly({3}, 5)
-- true
-- # 3 is less than the maximum possible weight, and it's balanced.
local function will_it_fly(q, w)
","local function will_it_fly(q, w)
    local function is_palindrome(tbl)
        local len = #tbl
        for i = 1, math.floor(len / 2) do
            if tbl[i] ~= tbl[len - i + 1] then
                return false
            end
        end
        return true
    end

    local function sum_elements(tbl)
        local sum = 0
        for _, value in ipairs(tbl) do
            sum = sum + value
        end
        return sum
    end

    if not is_palindrome(q) then
        return false
    end

    local total_weight = sum_elements(q)
    return total_weight <= w
end","lu = require('luaunit')

function test_humaneval()
local candidate = will_it_fly
    lu.assertEquals(candidate({3, 2, 3}, 9), true)
    lu.assertEquals(candidate({1, 2}, 5), false)
    lu.assertEquals(candidate({3}, 5), true)
    lu.assertEquals(candidate({3, 2, 3}, 1), false)
    lu.assertEquals(candidate({1, 2, 3}, 6), false)
    lu.assertEquals(candidate({5}, 5), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_73,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- kɩkalɩɣ kɩ-taa ɖɔɖɔ ɛzɩ kɩ-wayɩ nɛ kɩ-wayɩ yɔ.Pɩtɛ lɛ, pɩpɔzʋʋ se pɛlɛɣzɩ-ɩ nɛ pɩsa nɛ ɛ-tɔm pee ɩwɛɛ ɛzɩ palindrom yɔ.- Ye ŋha-ɖʋ takayɩhayʋʋ nakʋyʋ nɛ kɩwɛɛ nimero waa tɩŋa yɔ, ŋñɩnɩɣ nɛ ŋtɩlɩ mbʋ pɩ-taa nimero waa kɩlɩɣ ɖɔʋ yɔ.-- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})
-- 4
-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})
-- 1
-- >>> smallest_change({1, 2, 3, 2, 1})
-- 0
local function smallest_change(arr)
","local function smallest_change(arr)
    local n = #arr
    local changes = 0
    
    for i = 1, math.floor(n / 2) do
        if arr[i] ~= arr[n - i + 1] then
            changes = changes + 1
        end
    end
    
    return changes
end","lu = require('luaunit')

function test_humaneval()
local candidate = smallest_change
    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)
    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)
    lu.assertEquals(candidate({1, 4, 2}), 1)
    lu.assertEquals(candidate({1, 4, 4, 2}), 1)
    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)
    lu.assertEquals(candidate({3, 1, 1, 3}), 0)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({0, 1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_74,kbp_Latn,lua,"- Kɩɖaŋ - yee ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ.- kɩ-tɛ tɔmpiye ndɩ ɖɩ-tɛ tɔmpiye ndɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.- Maʋ tʋmɩyɛ nɖɩ ɖɩmʋna tɔmpiye naalɛ nɛ ɖɩpɩsɩ tɔmpiye nɖɩ ɖɩ-taa tɔmpiye  wɛɛ yɔ.-- >>> total_match({}, {})
-- {}
-- >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})
-- {'hI', 'Hi'}
-- >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})
-- {'hi', 'admin'}
-- >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})
-- {'hI', 'hi', 'hi'}
-- >>> total_match({'4'}, {'1', '2', '3', '4', '5'})
-- {'4'}
local function total_match(lst1, lst2)
","local function total_match(lst1, lst2)
    local function total_chars(lst)
        local count = 0
        for _, str in ipairs(lst) do
            count = count + #str
        end
        return count
    end

    local chars_lst1 = total_chars(lst1)
    local chars_lst2 = total_chars(lst2)

    if chars_lst1 < chars_lst2 then
        return lst1
    elseif chars_lst2 < chars_lst1 then
        return lst2
    else
        return lst1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = total_match
    lu.assertEquals(candidate({}, {}), {})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})
    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})
    lu.assertEquals(candidate({}, {'this'}), {})
    lu.assertEquals(candidate({'this'}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_75,kbp_Latn,lua,"- Kɩɖaʋ: - Ye ɖɩtɩlɩ se a) tɩtalɩ 100 yɔ.- nɛ cɛtɩm ɖɔɖɔ. - Maɣna tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩkɛ toovenim yɔ, ye ɖɩnaɣ se tɔmpiye nɖɩ ɖɩkɛ 3 kɩbɩnjaazɩ tɔmpiye ndɩ ɖɩ-tɛ tɔmpiye yɔ.-- >>> is_multiply_prime(30)
-- true
-- 30 = 2 * 3 * 5
local function is_multiply_prime(a)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while (i * i) <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function generate_primes(limit)
    local primes = {}
    for i = 2, limit do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end

local function is_multiply_prime(a)
    local primes = generate_primes(100)
    local count = #primes
    for i = 1, count do
        for j = i + 1, count do
            for k = j + 1, count do
                if primes[i] * primes[j] * primes[k] == a then
                    return true
                end
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_multiply_prime
    lu.assertEquals(candidate(5), false)
    lu.assertEquals(candidate(30), true)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), false)
    lu.assertEquals(candidate(125), true)
    lu.assertEquals(candidate(105), true)
    lu.assertEquals(candidate(126), false)
    lu.assertEquals(candidate(729), false)
    lu.assertEquals(candidate(891), false)
    lu.assertEquals(candidate(1001), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_76,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- x kɛ n tɛ ɖoŋ mbʊ yɔ, yee n**int=x - nɛ n tɛ ɖoŋ nɛ false lɛɛbʋ taa. - Pɩwɛɛ se ŋma function ŋgʋ kɩpɩsɩɣ true yee x kɛ ɛyʊ yem yɔ.-- >>> is_simple_power(1, 4)
-- true
-- >>> is_simple_power(2, 2)
-- true
-- >>> is_simple_power(8, 2)
-- true
-- >>> is_simple_power(3, 2)
-- false
-- >>> is_simple_power(3, 1)
-- false
-- >>> is_simple_power(5, 3)
-- false
local function is_simple_power(x, n)
","local function is_simple_power(x, n)
    if x == 1 then
        return true
    end
    if n <= 0 or x <= 0 then
        return false
    end
    local current_power = 1
    while current_power < x do
        current_power = current_power * n
    end
    return current_power == x
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_simple_power
    lu.assertEquals(candidate(16, 2), true)
    lu.assertEquals(candidate(143214, 16), false)
    lu.assertEquals(candidate(4, 2), true)
    lu.assertEquals(candidate(9, 3), true)
    lu.assertEquals(candidate(16, 4), true)
    lu.assertEquals(candidate(24, 2), false)
    lu.assertEquals(candidate(128, 4), false)
    lu.assertEquals(candidate(12, 6), false)
    lu.assertEquals(candidate(1, 1), true)
    lu.assertEquals(candidate(1, 12), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_77,kbp_Latn,lua,"- Kɩɖaŋ: - Cɔnɩ: ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔm ndʋ ŋma yɔ tɩkɛ toovenim paa ɛzɩmtaa.- yee ɛyʊ ɛnɛ ɛkɛ ɛyʊ ɛyʊ tɛ kʊyʊm yɔ.- Ma tʋmɩyɛ nɖɩ ɖɩkpaɣɣ ɛyʊ ɛ-tɛ ɛyʊ nɛ ɖɩpɩsɩɣ ɛ-tɛ ɛyʊ yɔ -- >>> iscube(1)
-- true
-- >>> iscube(2)
-- false
-- >>> iscube(-1)
-- true
-- >>> iscube(64)
-- true
-- >>> iscube(0)
-- true
-- >>> iscube(180)
-- false
local function iscube(a)
","local function iscube(a)
    if a < 0 then
        a = -a
    end
    local cbrt = math.floor(a ^ (1/3) + 0.5)
    return cbrt * cbrt * cbrt == a
end","lu = require('luaunit')

function test_humaneval()
local candidate = iscube
    lu.assertEquals(candidate(1), true)
    lu.assertEquals(candidate(2), false)
    lu.assertEquals(candidate(-1), true)
    lu.assertEquals(candidate(64), true)
    lu.assertEquals(candidate(180), false)
    lu.assertEquals(candidate(1000), true)
    lu.assertEquals(candidate(0), true)
    lu.assertEquals(candidate(1729), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_78,kbp_Latn,lua,"- Kɩɖaŋ: - nɛ matʋ A,B,C,D,E,F, tɩ-taa paa ɛzɩmtaa lɛ, pama-tʋ nɛ masɩ sɔsɔsɩ. - Cɔnɩ: ŋpɩzɩɣ ŋmaɣzɩ se tɔm ndʋ ŋma yɔ tɩkɛ toovenim yaa tɩkɛ cɛtɩm tɔm.- B (= hiu nɛ kʋɖʋm), D (= hiu nɛ kʋɖʋm 13). - Pʋ-tɔbʋʋ se pɩwɛɛ se ŋñɩnɩ ɛ-tɛ nimerowaa mba pɔ-yɔɔ ŋpɩzɩɣ ŋtɩŋna yɔ: 2, 3, 5, 7, - Kɩjɩkpɩŋ weyi ɩ-taa lɛ 2, 3, 5, 7, 11, 13, 17...- Ɛkɩsɩzɛnɩ waa mba payaɣ se 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. - kɩkɩlɩ 1 nɛ pɩtɛkɛ natʊyʊ kɩlɩna naalɛ yɔ).- nimɛyɩwaa mba pɛkɛ kajalaɣ n̄ɩnzɩ yɔ (n̄ɩnzɩ kajalaɣ n̄ɩnzɩ yaa kajalaɣ n̄ɩnzɩ kɛ n̄ɩnzɩ nzɩ sɩ-taa lɛ, nimɛyɩ kɩlɩɣ yɔ)- ɛzadezimalɩ mayaɣ kɛna mayaɣ ŋga payaɣ se string yɔ nɛ ɛkalɩɣ ɛzadezimalɩ mayaɣ ŋga yɔ - Petiyi-ŋ se ŋma tʋmɩyɛ nɖɩ ɖɩmʋyaa yɔ -- >>> hex_key('AB')
-- 1
-- >>> hex_key('1077E')
-- 2
-- >>> hex_key('ABED1A33')
-- 4
-- >>> hex_key('123456789ABCDEF0')
-- 6
-- >>> hex_key('2020')
-- 2
local function hex_key(num)
","local function hex_key(num)
    local prime_digits = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true, ['B'] = true, ['D'] = true}
    local count = 0
    for digit in num:gmatch('.') do
        if prime_digits[digit] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = hex_key
    lu.assertEquals(candidate('AB'), 1)
    lu.assertEquals(candidate('1077E'), 2)
    lu.assertEquals(candidate('ABED1A33'), 4)
    lu.assertEquals(candidate('2020'), 2)
    lu.assertEquals(candidate('123456789ABCDEF0'), 6)
    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_79,kbp_Latn,lua,"- Kɩɖaŋ: - Kɩ-taa lɛ, pamaɣ-kʋ nɛ pɩkpaɖɩ mbʋ.- Pɩkaɣ wɛʋ tɔmpiye ""db"" pazɩyɛ nɛ ɖɩtɛ lɛɣtʋ ñɩnɖɛ.Paa mayaɣ ŋga lɛ, kɛwɛɣ "" 0 "" yaa "" 1 "".- binary format. Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔmpiye, paa mayaɣ ŋga lɛ kɛwɛna binary - Pɔkɔŋ-mɩ haʋ nimero waa sakɩyɛ nɛ mɩ-tʋmɩyɛ lɛ se ɩlɛɣzɩ-ɩ nɛ -- >>> decimal_to_binary(15)
-- 'db1111db'
-- >>> decimal_to_binary(32)
-- 'db100000db'
local function decimal_to_binary(decimal)
","local function decimal_to_binary(decimal)
    -- Convert the decimal number to binary and remove the '0b' prefix using string.sub
    local binary = string.sub(string.format(""%b"", decimal), 0)
    -- Concatenate 'db' at the start and end of the binary string
    return 'db' .. binary .. 'db'
end","lu = require('luaunit')

function test_humaneval()
local candidate = decimal_to_binary
    lu.assertEquals(candidate(0), 'db0db')
    lu.assertEquals(candidate(32), 'db100000db')
    lu.assertEquals(candidate(103), 'db1100111db')
    lu.assertEquals(candidate(15), 'db1111db')
end

os.exit(lu.LuaUnit.run())"
HumanEval_80,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Kɩ-tɛ matʋ kɛ haplua ye kɩ-ɖaɣlɩkɩŋ ɛtalɩ 3 nɛ paa matʋ 3 weyi lɛ, ɛ-taa wɛ ndɩ ndɩ.- Ña-tʋmɩyɛ lɛ se ŋtazɩ nɛ ŋna se tɔm ndʋ tɩ-taa ŋwɛɛ yɔ, tɩkɛ toovenim yaa tɩkɛ toovenim.- Pɩɩwɛ ɛzɩ ŋtɩmʋna yɔ.-- >>> is_happy('a')
-- false
-- >>> is_happy('aa')
-- false
-- >>> is_happy('abcd')
-- true
-- >>> is_happy('aabb')
-- false
-- >>> is_happy('adb')
-- true
-- >>> is_happy('xyy')
-- false
local function is_happy(s)
","local function is_happy(s)
    -- Check if the string length is less than 3
    if #s < 3 then
        return false
    end

    -- Iterate through the string and check every 3 consecutive characters
    for i = 1, #s - 2 do
        local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i + 2)
        if a == b or b == c or a == c then
            return false
        end
    end

    -- If no 3 consecutive characters are the same, return true
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_happy
    lu.assertEquals(candidate('a'), false)
    lu.assertEquals(candidate('aa'), false)
    lu.assertEquals(candidate('abcd'), true)
    lu.assertEquals(candidate('aabb'), false)
    lu.assertEquals(candidate('adb'), true)
    lu.assertEquals(candidate('xyy'), false)
    lu.assertEquals(candidate('iopaxpoi'), true)
    lu.assertEquals(candidate('iopaxioi'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_81,kbp_Latn,lua,"- Kɩɖaʋ: - 0.0 E - > 0.0 D- - > 0,7 D - > 1.0 D+ - > 1.3 C- - > 1.7 C - > 2.0 C+ - > 2.3 B- - > 2.7 B - > 3.0 B+ - > 3.3 A- - > 3.7 A - 4.0 A+ - Ɛ-tɛ GPA.- kʊɖʊmʊʊ ŋgʊ kɩpɩzɩɣ kɩlɩzɩ takayɩhayʋʋ takayɩhatʋ takayɩhatʋ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ kɩtatasɩ- Ɛha-ŋ takayɩsɩ nzɩ sɩ-taa ɛyaa nabɛyɛ kaalabɩ tʋmɩyɛ camɩyɛ yɔ nɛ ŋma-sɩ nɛ ŋna.- Kaɖɛ kʋɖʋmɖɩyɛ lɛ se, ɛ-maɣmaɣ ɛ-kɩlɛmʋʋ ŋgʋ ɛlabɩnɩ tʋmɩyɛ nɛ ɛmaɣna yɔ, kɩcɛba.Tɔm wɩlɩyʋ ɛnʋ ɛ-maɣmaɣ ɛlabɩnɩ ɛ-tɩ takayɩsɩ maʋ lɛɣtʋ.- Pɩkɛ kpelaɣ fenaɣ kɛdɛzaɣ kpɩtaʋ taa nɛ wɩlɩyʋ wɛɛ nɛ ɛwɩlɩɣ tɔm nɛ ɛwɩlɩɣ tɔm ndʋ tɩ-taa ɛmaɣzɩɣ yɔ .-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})
-- {'A+', 'B', 'C-', 'C', 'A-'}
local function numerical_letter_grade(grades)
","local function numerical_letter_grade(grades)
    local letter_grades = {}
    for _, gpa in ipairs(grades) do
        local letter
        if gpa == 4.0 then
            letter = ""A+""
        elseif gpa > 3.7 then
            letter = ""A""
        elseif gpa > 3.3 then
            letter = ""A-""
        elseif gpa > 3.0 then
            letter = ""B+""
        elseif gpa > 2.7 then
            letter = ""B""
        elseif gpa > 2.3 then
            letter = ""B-""
        elseif gpa > 2.0 then
            letter = ""C+""
        elseif gpa > 1.7 then
            letter = ""C""
        elseif gpa > 1.3 then
            letter = ""C-""
        elseif gpa > 1.0 then
            letter = ""D+""
        elseif gpa > 0.7 then
            letter = ""D""
        elseif gpa > 0.0 then
            letter = ""D-""
        else
            letter = ""E""
        end
        table.insert(letter_grades, letter)
    end
    return letter_grades
end","lu = require('luaunit')

function test_humaneval()
local candidate = numerical_letter_grade
    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})
    lu.assertEquals(candidate({1.2}), {'D+'})
    lu.assertEquals(candidate({0.5}), {'D-'})
    lu.assertEquals(candidate({0.0}), {'E'})
    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})
    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_82,kbp_Latn,lua,"- Kɩɖaŋ - kɩɖaɣlʋʋ kɛna kɩjɛyʊʊ yaa kɩfɛyɩ ɖeu - Maʋ tʋmɩyɛ nɖɩ ɖɩkpaɣ tɔmpiye naɖɩyɛ nɛ ɖɩpɩsɩ tɔmpiye nɖɩ ɖɩkɛ toovenim yɔ, ye tɔmpiye nɖɩ ɖɩkɛ toovenim yɔ.-- >>> prime_length('Hello')
-- true
-- >>> prime_length('abcdcba')
-- true
-- >>> prime_length('kittens')
-- true
-- >>> prime_length('orange')
-- false
local function prime_length(string)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function prime_length(str)
    local length = #str
    return is_prime(length)
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_length
    lu.assertEquals(candidate('Hello'), true)
    lu.assertEquals(candidate('abcdcba'), true)
    lu.assertEquals(candidate('kittens'), true)
    lu.assertEquals(candidate('orange'), false)
    lu.assertEquals(candidate('wow'), true)
    lu.assertEquals(candidate('world'), true)
    lu.assertEquals(candidate('MadaM'), true)
    lu.assertEquals(candidate('Wow'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('HI'), true)
    lu.assertEquals(candidate('go'), true)
    lu.assertEquals(candidate('gogo'), false)
    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)
    lu.assertEquals(candidate('Madam'), true)
    lu.assertEquals(candidate('M'), false)
    lu.assertEquals(candidate('0'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_83,kbp_Latn,lua,"- Kɩwɛna nimasɩ kɩbana nzɩ sɩpaɣzɩɣ yaa sɩtɛŋna 1 yɔ.- Ye ɖɩhaɣ ɛyʊ kʊyʊm mbʊ yɔ, ɖɩhaɣ ɛyʊ kʊyʊm mbʊ yɔ ɛ-tɛ kʊdɔŋ local function starts_one_ends(n)
","local function starts_one_ends(n)
    if n == 1 then
        return 1 -- The single-digit numbers starting or ending with 1 is just 1 itself.
    end
    -- Calculate the count of n-digit numbers starting with 1 and ending with 1.
    local count_start_with_1 = 10 ^ (n - 1) -- All numbers from 100... to 199...
    local count_end_with_1 = 9 * (10 ^ (n - 1)) -- All numbers from 1, 11, 21,... excluding those starting with 1.
    
    -- A number starting and ending with 1 like 101 has been counted twice, correct for that.
    return count_start_with_1 + count_end_with_1 - 10 ^ (n - 2)
end","lu = require('luaunit')

function test_humaneval()
local candidate = starts_one_ends
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(2), 18)
    lu.assertEquals(candidate(3), 180)
    lu.assertEquals(candidate(4), 1800)
    lu.assertEquals(candidate(5), 18000)
end

os.exit(lu.LuaUnit.run())"
HumanEval_84,kbp_Latn,lua,"- Kɩɖaʋ kɩdɛɛka- Ye ŋha-ɖʋ ɛtɛyɩɣ kɩbam N kɔyɔ, ŋhaɣ ɛtɛyɩɣ kɩbam nabʋlɛ taa ɛtɛyɩɣ kɩbam nabʋlɛ taa. -- >>> solve(1000)
-- '1'
-- >>> solve(150)
-- '110'
-- >>> solve(147)
-- '1100'
-- Variables:
--     @N integer
--          Constraints: 0 ≤ N ≤ 10000.
-- Output:
--      a string of binary number
local function solve(N)
","local function solve(N)
    local sum = 0
    while N > 0 do
        sum = sum + (N % 10)
        N = math.floor(N / 10)
    end
    return string.format(""%b"", sum)
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate(1000), '1')
    lu.assertEquals(candidate(150), '110')
    lu.assertEquals(candidate(147), '1100')
    lu.assertEquals(candidate(333), '1001')
    lu.assertEquals(candidate(963), '10010')
end

os.exit(lu.LuaUnit.run())"
HumanEval_85,kbp_Latn,lua,"- Kɩɖaŋ: - Ye ɖɩhaɣ ɛyʊ ɛ-tɛ nimero waa kɩmaŋ yɔ, ɖɩcalɩɣna ɛ-tɛ nimero waa mba pɛfɛyɩ kɩmaŋ yɔ, nɛ ɖɩtɛzɩɣna-wɛ nɛ nimero waa mba pɛfɛyɩ kɩmaŋ yɔ.-- >>> add({4, 2, 6, 7})
-- 2
local function add(lst)
","local function add(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 0 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate({4, 88}), 88)
    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)
    lu.assertEquals(candidate({4, 0, 6, 7}), 0)
    lu.assertEquals(candidate({4, 4, 6, 8}), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_86,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Cɔnɩ: Ŋŋpɩzɩɣ nɛ ŋtɩŋnɩ tɔm pee nɛ tɔm hɔɔlɩŋ weyi ɩwɛ tɔm hʋʋ taa yɔ ɩ-yɔɔ nɛ ŋwɩlɩ-ŋ ɛzɩma tɔm pee wɛɛ yɔ.- nɛ pɩkpazɩɣ-ɩ ɖoŋ nɛ pɩlɩɩnɩ ɛ-kɩhɛyʋʋ taa.- pɛlɛɣzɩ-yɛ nɛ tɔm pee kɩfana wena a-taa lɛ, pamaɣna tɔm pee tɩŋa nɛ - Tɔmpiye nɖɩ ɖɩ-taa tɔm pee tɩŋa wɛna ɖama yɔ, ɖɩ-tɛ tɔm pee (ɖɩ-taa lɛ, ɖɩ-taa tɔm pee tɩŋa wɛna ɖama)- Ma tʋmɩyɛ naɖɩyɛ nɛ ɖɩkpaɣ tɔm piye naɖɩyɛ nɛ ɖɩpɩsɩ-ɖɩ nɛ ɖɩ-tɛ tɔm pee.-- >>> anti_shuffle('Hi')
-- 'Hi'
-- >>> anti_shuffle('hello')
-- 'ehllo'
-- >>> anti_shuffle('Hello World!!!')
-- 'Hello !!!Wdlor'
local function anti_shuffle(s)
","local function anti_shuffle(s)
    local function sort_word(word)
        local chars = {}
        for char in word:gmatch(""."") do
            table.insert(chars, char)
        end
        table.sort(chars)
        return table.concat(chars)
    end

    return (s:gsub(""%S+"", sort_word))
end","lu = require('luaunit')

function test_humaneval()
local candidate = anti_shuffle
    lu.assertEquals(candidate('Hi'), 'Hi')
    lu.assertEquals(candidate('hello'), 'ehllo')
    lu.assertEquals(candidate('number'), 'bemnru')
    lu.assertEquals(candidate('abcd'), 'abcd')
    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
end

os.exit(lu.LuaUnit.run())"
HumanEval_87,kbp_Latn,lua,"- Kɩɖaŋ: - Pɩtasɩ lɛ, ŋtazɩ tɔm hɔɔlɩŋ weyi ɩwɛ hɔɔlʋʋ ŋgʋ kɩ-taa yɔ, ɩ-taa nɛ ŋna se ɩ-taa tɔm hɔɔlɩŋ weyi ɩ-taa tɔm hɔɔlɩŋ wɛɛ yɔ, ɩ-taa tɔm hɔɔlɩŋ weyi ɩ-taa tɔm hɔɔlɩŋ wɛɛ yɔ, ɩ-taa tɔm hɔɔlɩŋ weyi ɩ-taa tɔm hɔɔlɩŋ wɛɛ yɔ.- Ñɔɔzɩ tɔm ñʋŋ weyi ɩ-taa ŋcaɣ se ŋcɔŋna yɔ, nɛ ŋpaɣzɩnɩ pɩ-taa.- paa takayɩhayʋʋ ŋgʋ lɛ, kɩ-taa lɛ, pamaɣna - (ñɩŋgʋ, tilimiye) nɛ kɩpaɣzɩɣnɩ 0.- nɛ pɩpɩsɩɣ taabɩlɩnaa tɛ taŋ [(x1, y1), (x2, y2) ...] nɛ pɩwɩlɩɣ se - Ye ŋha-ɖʋ lst nɛ ɛtɛrɩ x, ɖɩñɩnɩ ɛtɛrɩ x takayɩhatʋ taa, - paa n̄ɩŋgʋ ŋgʋ kɩ-taa lɛ, pɩpɩzɩɣ nɛ pɩla se pilinzi ndɩ ndɩ wɛɛ.- kɩwɛ ɛzɩ matrix yɔ, ɛlɛ kɩfɛyɩ ɛzɩ matrix waa yɔ, - Paha-ŋ 2 dimension lɛɣtʋ, ɛzɩ taabɩlɩnaa mba pɛkpɛndɩ ɖama yɔ, -- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)
-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}
-- >>> get_row({}, 1)
-- {}
-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)
-- {{2, 2}}
local function get_row(lst, x)
","local function get_row(lst, x)
    local coordinates = {}
    for row_index, row in ipairs(lst) do
        for col_index = #row, 1, -1 do
            if row[col_index] == x then
                table.insert(coordinates, {row_index - 1, col_index - 1})
            end
        end
    end
    table.sort(coordinates, function(a, b)
        if a[1] == b[1] then
            return a[2] > b[2]
        else
            return a[1] < b[1]
        end
    end)
    return coordinates
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_row
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})
    lu.assertEquals(candidate({}, 1), {})
    lu.assertEquals(candidate({{1}}, 2), {})
    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})
end

os.exit(lu.LuaUnit.run())"
HumanEval_88,kbp_Latn,lua,"- Kɩɖaŋ: - * Taayele nɛ taabɩlɩ ŋgʋ kɩ-taa ŋwɛɛ yɔ kɩlɛɣzɩ. - Cɔnɩ hɔɔlʋʋ: - yaa ɛ-tɛ tɔlɩm taa wɛʊ kɔyɔ, yee ɛ-tɛ tɔlɩm kɔyɔ ((kajalaɣ tɔlɩm, kɛdɛzaɣ tɔlɩm) kɔyɔ, pɩkɛ ɖɔɖɔ.- ŋkaɣ ñɔɔzʋʋ takayasɩ kɩkalasɩ nzɩ sɩ-taa tɔm kɩkalasɩ wɛ ndɩ yɔ, nɛ ŋtɛ ŋñɔɔzʋʋ-sɩ nɛ sɩ-taa tɔm kɩkalasɩ nzɩ sɩ-taa tɔm kɩkalasɩ wɛ ndɩ yɔ.- Yee ɖɩha ɛyʊ kʊɖʊm mbʊ yɔ, ɖɩpɩsɩɣ ɛyʊ kʊɖʊm mbʊ lɛ, ɖɩpɩsɩɣ ɛyʊ kʊɖʊm mbʊ lɛ, ɖɩpɩsɩɣ ɛyʊ kʊɖʊm mbʊ lɛ, ɖɩpɩsɩɣ ɛyʊ kʊɖʊm mbʊ lɛ, ɖɩpɩsɩɣ ɛyʊ kʊɖʊm mbʊ lɛ, ɖɩpɩsɩɣ ɛyʊ kʊɖʊm mbʊ lɛ.-- >>> sort_array({})
-- {}
-- >>> sort_array({5})
-- {5}
-- >>> sort_array({2, 4, 3, 0, 1, 5})
-- {0, 1, 2, 3, 4, 5}
-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})
-- {6, 5, 4, 3, 2, 1, 0}
local function sort_array(array)
","local function sort_array(array)
    -- Create a copy of the given table
    local sorted_array = {}
    for i = 1, #array do
        sorted_array[i] = array[i]
    end

    -- If the table is not empty
    if #sorted_array > 0 then
        local first = sorted_array[1]
        local last = sorted_array[#sorted_array]
        local sum = first + last
        
        -- Sort in ascending or descending order based on the sum
        if sum % 2 == 0 then
            table.sort(sorted_array, function(a, b) return a > b end)
        else
            table.sort(sorted_array, function(a, b) return a < b end)
        end
    end

    return sorted_array
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5}), {5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})
    lu.assertEquals(candidate({2, 1}), {1, 2})
    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})
    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})
end

os.exit(lu.LuaUnit.run())"
HumanEval_89,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- nɛ ɖɩkpaɣ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ nɛ ɖɩkpaɣ.- Pɩwɛɛ se pɛlɛɣzɩ alɛbɛɛtɩ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ nɛ pama-kʋ.- pɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-taa pama alɩfaabɛɛtɩ yɔ.- Lɩzɩ tʋmɩyɛ nɖɩ ɖɩ-tɛ tɔm pee wɛ ndɩ yɔ nɛ -- >>> encrypt('hi')
-- 'lm'
-- >>> encrypt('asdfghjkl')
-- 'ewhjklnop'
-- >>> encrypt('gf')
-- 'kj'
-- >>> encrypt('et')
-- 'ix'
local function encrypt(s)
","local function encrypt(s)
    local result = {}
    local shift = 2 * 2
    for i = 1, #s do
        local char = s:sub(i,i)
        if char:match(""%a"") then
            local ascii_offset = char:match(""%l"") and string.byte('a') or string.byte('A')
            local new_char = string.char(((string.byte(char) - ascii_offset + shift) % 26) + ascii_offset)
            table.insert(result, new_char)
        else
            table.insert(result, char)
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encrypt
    lu.assertEquals(candidate('hi'), 'lm')
    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')
    lu.assertEquals(candidate('gf'), 'kj')
    lu.assertEquals(candidate('et'), 'ix')
    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')
    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')
    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')
    lu.assertEquals(candidate('a'), 'e')
end

os.exit(lu.LuaUnit.run())"
HumanEval_90,kbp_Latn,lua,"- Ye pɩfɛyɩ mbʋ yɔ, pɩpɩsɩɣ nil.- Maʋ tʋmɩyɛ nɖɩ payaɣ se next_smallest (_) yɔ nɛ ɖɩpɩsɩɣ tɔm kɩcɛyɩtʋ naalɛ ñɩndʋ ndʋ tɩ-taa tɔm kɩcɛyɩtʋ naalɛ ñɩndʋ wɛɛ yɔ.- Paha-ŋ intɛrjɛɛtɩwaa.-- >>> next_smallest({1, 2, 3, 4, 5})
-- 2
-- >>> next_smallest({5, 1, 4, 3, 2})
-- 2
-- >>> next_smallest({})
-- None
-- >>> next_smallest({1, 1})
-- None
local function next_smallest(lst)
","local function next_smallest(lst)
    if #lst < 2 then
        return nil
    end

    table.sort(lst)

    local first = lst[1]
    for i = 2, #lst do
        if lst[i] > first then
            return lst[i]
        end
    end

    return nil
end","lu = require('luaunit')

function test_humaneval()
local candidate = next_smallest
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)
    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)
end

os.exit(lu.LuaUnit.run())"
HumanEval_91,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Tɔm hɔɔlɩŋ taa lɛ, pamaɣna-ɩ nɛ mayaɣ '.', '?' yaa '!'.Tɔm piye nɖɩ ɖɩpaɣzɩɣnɩ ""m"" yɔ, ɖɩ-taa tɔm loyaɣ payaɣ se ""m"".- Pɔkɔŋ-ŋ haʋ tɔm pee sakɩyɛ nɛ ña-tʋmɩyɛ lɛ se ŋkalɩ-yɛ.-- >>> is_bored('Hello world')
-- 0
-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')
-- 1
local function is_bored(S)
","local function is_bored(S)
    local count = 0
    -- Split the string into sentences using patterns
    for sentence in S:gmatch(""[^%.!?]+"") do
        -- Trim leading whitespace from the sentence
        sentence = sentence:gsub(""^%s+"", """")
        -- Check if the sentence starts with ""I""
        if sentence:sub(1, 1) == ""I"" then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_bored
    lu.assertEquals(candidate('Hello world'), 0)
    lu.assertEquals(candidate('Is the sky blue?'), 0)
    lu.assertEquals(candidate('I love It !'), 1)
    lu.assertEquals(candidate('bIt'), 0)
    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)
    lu.assertEquals(candidate('You and I are going for a walk'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_92,kbp_Latn,lua,"- Kɩɖaŋ - Pɩpɩsɩɣ false tɔm lɛɛtʋ taa.- Pɩpɩsɩɣ tɔmpiye true yee tɔmpiye naɖɩyɛ ɛtalɩ naalɛ lɛɛna yɔ nɛ tɔmpiye nɖɩ ɖɩ-tɩŋa ɖɩkɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye.- Maɣzɩ nɛ ŋna ɛzɩma ŋpɩzɩɣ nɛ ŋlabɩnɩ tʋmɩyɛ tɔm pee naadozo yɔ.-- >>> any_int(5, 2, 7)
-- true
-- >>> any_int(3, 2, 2)
-- false
-- >>> any_int(3, -2, 1)
-- true
-- >>> any_int(3.6, -2.2, 2)
-- false
local function any_int(x, y, z)
","local function any_int(x, y, z)
    if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then
        if x == y + z or y == x + z or z == x + y then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = any_int
    lu.assertEquals(candidate(2, 3, 1), true)
    lu.assertEquals(candidate(2.5, 2, 3), false)
    lu.assertEquals(candidate(1.5, 5, 3.5), false)
    lu.assertEquals(candidate(2, 6, 2), false)
    lu.assertEquals(candidate(4, 2, 2), true)
    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
    lu.assertEquals(candidate(-4, 6, 2), true)
    lu.assertEquals(candidate(2, 1, 1), true)
    lu.assertEquals(candidate(3, 4, 7), true)
    lu.assertEquals(candidate(3.0, 4, 7), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_93,kbp_Latn,lua,"- Kɩɖaŋ: - Maɣzɩ se masɩ ɖeke tɔm.- Kɩ-tɛ matʋ ndʋ tɩwɛ Aŋglɛɛ kʋnʋŋ taa yɔ.- Tɔm ndʋ tɩ-taa pama takayaɣ ŋga ka-taa tɔm pee naalɛ wɛɛ yɔ .- nɛ ɛlɛɣzɩɣ tɔm pee tɩŋa nɛ ɛñɩɣ niye tɔm pee kɩbana yɔɔ.- Maʋ tʋmɩyɛ nɖɩ ɖɩmʋɣ tɔm natʋyʋ nɛ ɖɩɖʋ-tʋ takayaɣ taa yɔ.-- >>> encode('test')
-- 'TGST'
-- >>> encode('This is a message')
-- 'tHKS KS C MGSSCGG'
local function encode(message)
","local function encode(message)
    local vowels = { a = 'c', e = 'g', i = 'k', o = 'q', u = 'w', A = 'C', E = 'G', I = 'K', O = 'Q', U = 'W' }
    local encodedMessage = {}
    
    for i = 1, #message do
        local char = message:sub(i, i)
        
        -- Swap case
        if char:match('%l') then
            char = char:upper()
        else
            char = char:lower()
        end
        
        -- Replace vowels
        if vowels[char] then
            char = vowels[char]
        end
        
        table.insert(encodedMessage, char)
    end
    
    return table.concat(encodedMessage)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encode
    lu.assertEquals(candidate('TEST'), 'tgst')
    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')
    lu.assertEquals(candidate('YES'), 'ygs')
    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')
    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')
end

os.exit(lu.LuaUnit.run())"
HumanEval_94,kbp_Latn,lua,"- Kɩɖaŋ: - Pɩwɛɛ se ŋñɩnɩ mayaɣ ŋga kɛwɛ ñɩm siŋŋ yɔ nɛ ŋyele nɛ ka-taa mayaɣ ŋga kɛwɛ ñɩm siŋŋ yɔ.- Paha-ŋ intɛrjɛɛtɩwaa.-- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
-- 10
-- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
-- 25
-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
-- 13
-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
-- 11
-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
-- 3
-- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
-- 7
local function skjkasdkd(lst)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.sqrt(n), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
    end
    return true
end

local function sum_of_digits(n)
    local sum = 0
    while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
    end
    return sum
end

local function skjkasdkd(lst)
    local largest_prime = -1
    for _, v in ipairs(lst) do
        if is_prime(v) and v > largest_prime then
            largest_prime = v
        end
    end
    if largest_prime == -1 then return 0 end
    return sum_of_digits(largest_prime)
end","lu = require('luaunit')

function test_humaneval()
local candidate = skjkasdkd
    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
    lu.assertEquals(candidate({8191}), 19)
    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
    lu.assertEquals(candidate({127, 97, 8192}), 10)
end

os.exit(lu.LuaUnit.run())"
HumanEval_95,kbp_Latn,lua,"- Kɩɖaŋ: - Pɩwɛɛ se tʋmɩyɛ nɖɩ ɖɩpɩsɩ false ye taabɩlɩ ŋgʋ kɩ-taa tɔm fɛyɩ yɔ.- tɔmpiye yaa tɔmpiye tɩŋa kɛ tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye sɔsɔyɛ yɔ, yee pɩtɛkɛ mbʋ yɔ pɩpɩsɩɣ false.- Pɩkɛna takayasɩ kɩkalasɩ, pɩpɩsɩɣ toovenim yee pɩ-tɛ tɔm tɩŋa wɛna ñɩɩtʊ cikpetu yɔ.-- >>> check_dict_case({['a'] = 'apple', ['b'] = 'banana'})
-- true
-- >>> check_dict_case({['a'] = 'apple', ['A'] = 'banana', ['B'] = 'banana'})
-- false
-- >>> check_dict_case({['a'] = 'apple', [8] = 'banana', ['a'] = 'apple'})
-- false
-- >>> check_dict_case({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'})
-- false
-- >>> check_dict_case({['STATE'] = 'NC', ['ZIP'] = '12345'})
-- true
local function check_dict_case(dict)
","local function is_lowercase(s)
    return s:lower() == s
end

local function is_uppercase(s)
    return s:upper() == s
end

local function check_dict_case(dict)
    if next(dict) == nil then
        return false
    end

    local lower_case = nil
    for key, _ in pairs(dict) do
        if type(key) ~= 'string' then
            return false
        end
        
        if lower_case == nil then
            lower_case = is_lowercase(key)
        elseif lower_case ~= is_lowercase(key) then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_dict_case
    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)
    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)
    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)
    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)
    lu.assertEquals(candidate({}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_96,kbp_Latn,lua,"- kɩɖaʋ nakʋyʋ yɔ: - Kɩjɩkpɩŋ weyi ɩkɛ kajalaɣ nɩŋgbaŋʋʋ nɛ ɩtɩtalɩ n yɔ. - Palakɩ tʊmɩyɛ nɖɩ ɖɩkpaɣɣ ɛyʊ kʊyʊm nɛ ɖɩpɩsɩɣ kajalaɣ n ñɩŋʊ yɔ.-- >>> count_up_to(5)
-- {2, 3}
-- >>> count_up_to(11)
-- {2, 3, 5, 7}
-- >>> count_up_to(0)
-- {}
-- >>> count_up_to(20)
-- {2, 3, 5, 7, 11, 13, 17, 19}
-- >>> count_up_to(1)
-- {}
-- >>> count_up_to(18)
-- {2, 3, 5, 7, 11, 13, 17}
local function count_up_to(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function count_up_to(n)
    local primes = {}
    for i = 2, n - 1 do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_up_to
    lu.assertEquals(candidate(5), {2, 3})
    lu.assertEquals(candidate(6), {2, 3, 5})
    lu.assertEquals(candidate(7), {2, 3, 5})
    lu.assertEquals(candidate(10), {2, 3, 5, 7})
    lu.assertEquals(candidate(0), {})
    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})
    lu.assertEquals(candidate(1), {})
    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})
    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})
end

os.exit(lu.LuaUnit.run())"
HumanEval_97,kbp_Latn,lua,"- Kɩɖaŋ: - Pɩwɛɛ se ɖɩmaɣzɩ se tɔm ndʋ ɖɩyɔɔdaa yɔ tɩkɛ toovenim paa ɛzɩmtaa.- pɛtɛyɩɣ-wɛ pa-ñʋŋ taa lɛ, pɩlɩɣna pa-ñʋŋ taa.- Tɩŋna kɩ-tɛ ɛyʊ nɛ ɛ-tɛ ɛyʊ pɩlɩna ɛ-tɛ ɛyʊ yɔɔ nɛ ɛpɩzɩ ɛlɩzɩ ɛ-tɛ ɛyʊ yɔɔ.-- >>> multiply(148, 412)
-- 16
-- >>> multiply(19, 28)
-- 72
-- >>> multiply(2020, 1851)
-- 0
-- >>> multiply(14, -15)
-- 20
local function multiply(a, b)
","local function multiply(a, b)
    local unitDigitA = math.abs(a) % 10
    local unitDigitB = math.abs(b) % 10
    return unitDigitA * unitDigitB
end","lu = require('luaunit')

function test_humaneval()
local candidate = multiply
    lu.assertEquals(candidate(148, 412), 16)
    lu.assertEquals(candidate(19, 28), 72)
    lu.assertEquals(candidate(2020, 1851), 0)
    lu.assertEquals(candidate(14, -15), 20)
    lu.assertEquals(candidate(76, 67), 42)
    lu.assertEquals(candidate(17, 27), 49)
    lu.assertEquals(candidate(0, 1), 0)
    lu.assertEquals(candidate(0, 0), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_98,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Ye ŋwɛna masɩ nzɩ sɩ-taa pamaɣ-sɩ nɛ tɔm pee sɔsɔna yɔ, kalɩ sɩ-taa tɔm pee wena awɛ ɖɔɖɔ nɛ tɔm pee kɩkpɛdaa yɔ.-- >>> count_upper('aBCdEf')
-- 1
-- >>> count_upper('abcdefg')
-- 0
-- >>> count_upper('dBBE')
-- 0
local function count_upper(s)
","local function count_upper(s)
    local count = 0
    local vowels = { A = true, E = true, I = true, O = true, U = true }
    for i = 1, #s, 2 do
        local char = s:sub(i, i)
        if vowels[char] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_upper
    lu.assertEquals(candidate('aBCdEf'), 1)
    lu.assertEquals(candidate('abcdefg'), 0)
    lu.assertEquals(candidate('dBBE'), 0)
    lu.assertEquals(candidate('B'), 0)
    lu.assertEquals(candidate('U'), 1)
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('EEEE'), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_99,kbp_Latn,lua,"- Kɩɖaŋ - nɛ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ lɛ, ɛ-tɛ ɛyʊ lɛ, ɛ-tɛ ɛyʊ lɛ.Ye ɖɩkpaɣ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ nɛ ɖɩmaɣzɩ se ɖɩkpaɣ- Lɩzɩ tʋmɩyɛ nɖɩ ɖɩmʋɣ kɩjɛyʋʋ (ɖɩ-tɛ tɔm) nɛ ɖɩkɛɣ mayaɣ nakɛyɛ yɔ -- >>> closest_integer('10')
-- 10
-- >>> closest_integer('15.3')
-- 15
-- Note:
-- Rounding away from zero means that if the given number is equidistant
-- from two integers, the one you should return is the one that is the
-- farthest from zero. For example closest_integer(""14.5"") should
-- return 15 and closest_integer(""-14.5"") should return -15.
local function closest_integer(value)
","local function closest_integer(value)
    local number = tonumber(value)
    if not number then
        error(""Invalid number"")
    end
    if number > 0 then
        return math.floor(number + 0.5)
    else
        return math.ceil(number - 0.5)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = closest_integer
    lu.assertEquals(candidate('10'), 10)
    lu.assertEquals(candidate('14.5'), 15)
    lu.assertEquals(candidate('-15.5'), -16)
    lu.assertEquals(candidate('15.3'), 15)
    lu.assertEquals(candidate('0'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_100,kbp_Latn,lua,"- Kɩɖaŋ: - i kɛna pɩyɛ ndɩ ɖɩ-tɛ wɛtʊ (i+1). - Kɩpɩsɩɣ pɩyɛ ndɩ ɖɩ-tɛ maɣzɩm taa, ɖenɖe pɩyɛ nɖɩ ɖɩ-taa pamaɣ-ɖɩ yɔ.- - ɛ-wayɩ lɛ, ɛ-tɛ ɛyʊ weyi ɛ-tɛ ɛyʊ kɔyɔ.- - ɛtɛyɩɣ nabʊyʊ taa yee n ɛtɛyɩɣ kɔyɔ. - Payaɣ pɩyɛ ndɩ ɖɩ-taa pɩyɛ lɛɛna se: - Kajalaɣ n̄ɩɣyʋʋ taa lɛ, pɛɛ n.- Yee ŋha-ɖʋ ɛyʊ kʊyʊmʊm n kɔyɔ, pɩwɛɛ se ŋñɔɔzɩ ɛ-tɩ nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa nɛ ɛ-taa.-- >>> make_a_pile(3)
-- {3, 5, 7}
local function make_a_pile(n)
","local function make_a_pile(n)
    local pile = {}
    local current_stones = n
    for i = 1, n do
        table.insert(pile, current_stones)
        if n % 2 == 0 then
            current_stones = current_stones + 2
        else
            current_stones = current_stones + 2
        end
    end
    return pile
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_a_pile
    lu.assertEquals(candidate(3), {3, 5, 7})
    lu.assertEquals(candidate(4), {4, 6, 8, 10})
    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})
    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})
    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})
end

os.exit(lu.LuaUnit.run())"
HumanEval_101,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- nɛ ɛtayɩ tɔm pee nɛ ɛpɩsɩnɩ tɔm pee tɛ tablɛtɩ yɔɔ. - Pɔkɔŋ-mɩ haʋ tɔm pee sakɩyɛ nɛ pɛtɛzɩ-yɛ nɛ hɩlaɣ yaa tɩyɛ.-- >>> words_string('Hi, my name is John')
-- {'Hi', 'my', 'name', 'is', 'John'}
-- >>> words_string('One, two, three, four, five, six')
-- {'One', 'two', 'three', 'four', 'five', 'six'}
local function words_string(s)
","local function words_string(s)
    local words = {}
    for word in s:gmatch(""[^,%s]+"") do
        table.insert(words, word)
    end
    return words
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_string
    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_102,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- yee mayaɣ nakɛyɛ fɛyɩ kɔyɔ, pɩpɔzʋʋ se ɖɩpɩsɩɣ -1.- kɩlɩna wɛʊ ɛyʊ ɛyʊ hɛkʊ taa nɛ pɩtalɩ [x, y] pɩkpɛndʊʊ.- Kɩ-tʋmɩyɛ ɖɩnɛ ɖɩkpaɣ kɩ-tɛ ɛyʊ mayaɣ x nɛ y nɛ ɖɩpɩsɩ ɛ-tɛ ɛyʊ mayaɣ -- >>> choose_num(12, 15)
-- 14
-- >>> choose_num(13, 12)
-- -1
local function choose_num(x, y)
","local function choose_num(x, y)
    -- Ensure x is the smaller and y is the larger
    if x > y then
        x, y = y, x
    end
    
    -- Start from y and work backwards
    for i = y, x, -1 do
        if i % 2 == 0 then
            return i
        end
    end
    
    -- If no even number is found
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = choose_num
    lu.assertEquals(candidate(12, 15), 14)
    lu.assertEquals(candidate(13, 12), -1)
    lu.assertEquals(candidate(33, 12354), 12354)
    lu.assertEquals(candidate(5234, 5233), -1)
    lu.assertEquals(candidate(6, 29), 28)
    lu.assertEquals(candidate(27, 10), -1)
    lu.assertEquals(candidate(7, 7), -1)
    lu.assertEquals(candidate(546, 546), 546)
end

os.exit(lu.LuaUnit.run())"
HumanEval_103,kbp_Latn,lua,"- Kɩɖaʋ: - Yee n ɛkɩlɩ m yɔ, pɩsɩna -1.- Wɩlɩ se ŋtɛm pɩ-taa nɛ ŋpɩsɩɣ-kɛ binɛɛrɩ.- kɩ-tɛ hɔɔlɩŋ weyi ɛ-taa lɛ, hɔɔlɩŋ weyi ɛ-taa lɛ, hɔɔlɩŋ weyi ɛ-taa lɛ, hɔɔlɩŋ weyi ɛ-taa lɛ, hɔɔlɩŋ weyi ɛ-taa lɛ, hɔɔlɩŋ weyi ɛ-taa lɛ.- Paha-ŋ nimɛyɩ naalɛ nɛ ɩ-taa lɛ, n nɛ m, nɛ ña-tʋmɩyɛ lɛ se ŋmaɣzɩ nɛ ŋtɩlɩ -- >>> rounded_avg(1, 5)
-- '0b11'
-- >>> rounded_avg(7, 5)
-- -1
-- >>> rounded_avg(10, 20)
-- '0b1111'
-- >>> rounded_avg(20, 33)
-- '0b11010'
local function rounded_avg(n, m)
","local function rounded_avg(n, m)
    if n > m then
        return -1
    end
    
    local sum = 0
    local count = 0

    for i = n, m do
        sum = sum + i
        count = count + 1
    end

    local average = sum / count
    local rounded_avg = math.floor(average + 0.5)

    return string.format(""0b%d"", tonumber(string.format(""%o"", rounded_avg), 8))
end","lu = require('luaunit')

function test_humaneval()
local candidate = rounded_avg
    lu.assertEquals(candidate(1, 5), '0b11')
    lu.assertEquals(candidate(7, 13), '0b1010')
    lu.assertEquals(candidate(964, 977), '0b1111001010')
    lu.assertEquals(candidate(996, 997), '0b1111100100')
    lu.assertEquals(candidate(560, 851), '0b1011000010')
    lu.assertEquals(candidate(185, 546), '0b101101110')
    lu.assertEquals(candidate(362, 496), '0b110101101')
    lu.assertEquals(candidate(350, 902), '0b1001110010')
    lu.assertEquals(candidate(197, 233), '0b11010111')
    lu.assertEquals(candidate(7, 5), -1)
    lu.assertEquals(candidate(5, 1), -1)
    lu.assertEquals(candidate(5, 5), '0b101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_104,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Cɔnɩ: Pɩwɛɛ se pañɩnɩ takayɩhayʋʋ ŋgʋ kɩ-taa pama-kʋ yɔ nɛ pɩkpaɖɩ.- kɩ-taa lɛ, ɛyʊ ɛfɛyɩna ɛ-tɛ ɛyʊ mayaɣ nakɛyɛ.- Yee paha-ɖʋ ɛyʊ kʊyʊmʊʊ kʊyʊmʊʊ x yɔ, ɖɩpɩsɩɣ ɛyʊ kʊyʊmʊmʊmʊmʊm ɛyʊ kʊyʊmʊmʊm kpeekpe taa.-- >>> unique_digits({15, 33, 1422, 1})
-- {1, 15, 33}
-- >>> unique_digits({152, 323, 1422, 10})
-- {}
local function unique_digits(x)
","local function has_even_digit(num)
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            return true
        end
        num = math.floor(num / 10)
    end
    return false
end

local function unique_digits(x)
    local result = {}
    for _, num in ipairs(x) do
        if not has_even_digit(num) then
            table.insert(result, num)
        end
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique_digits
    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})
    lu.assertEquals(candidate({152, 323, 1422, 10}), {})
    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})
    lu.assertEquals(candidate({135, 103, 31}), {31, 135})
end

os.exit(lu.LuaUnit.run())"
HumanEval_105,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- ""Yele"", ""Naalɛ"", ""Naatozo"", ""Naanza"", ""Lala kagbanzɩ"", ""Lala loɖo"", ""Lala lʋbɛ"", ""Lala lutozo"", ""Lala nakʋ"".- nɛ ɖɩlɛɣzɩ takayɩhayʋʋ ŋgʋ kɩlɩnɩ  nɛ ɖɩlɛɣzɩ paa mayaɣ ŋga lɛ nɛ ka-hɩɖɛ - Ye ŋwɛna nimasɩ kɩkalasɩ yɔ, kpaɣ nimasɩ kɩkalasɩ nzɩ sɩwɛ 1 nɛ 9 pɛ-hɛkʋ taa yɔ, nɛ ŋlɩzɩ sɩ-taa.-- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
--   If the table is empty, return an empty table:
-- >>> by_length({})
-- {}
--   If the table has any strange number ignore it:
-- >>> by_length({1, -1, 55})
-- {'One'}
local function by_length(arr)
","local function by_length(arr)
    local digits_names = {
        [1] = ""One"", [2] = ""Two"", [3] = ""Three"", [4] = ""Four"", [5] = ""Five"",
        [6] = ""Six"", [7] = ""Seven"", [8] = ""Eight"", [9] = ""Nine""
    }

    local filtered = {}
    for _, num in ipairs(arr) do
        if num >= 1 and num <= 9 then
            table.insert(filtered, num)
        end
    end

    table.sort(filtered, function(a, b) return a > b end)

    for i, num in ipairs(filtered) do
        filtered[i] = digits_names[num]
    end

    return filtered
end","lu = require('luaunit')

function test_humaneval()
local candidate = by_length
    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -1, 55}), {'One'})
    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_106,kbp_Latn,lua,"- Kɩɖaʋ: - i tɛ tɔmpiye nɖɩ ɖɩkɛ 1 nɛ i pɛ-tɛ tɔmpiye ndɩ ɖɩ-tɛ tɔmpiye (1 * 2 * ... * i).- Mɛnpaɣzɩɣ kpaɣnɩ 1 yɔɔ.- yaa hɔɔlɩŋ weyi ɩ-taa 1 nɛ piwolo i pɛkpɛndɩ yɔ. - nɛ pɩpɩsɩɣ taŋgbaka ŋga kɛwɛ n yɔ, nɛ pɩwɩlɩɣ se ɛyʊ weyi ɛwɛ index i taa yɔ, ɛ-ñʊʊ mayaɣ kɔyɔ i ye i ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ kɔyɔ.- Ɩlabɩnɩ tʋmɩyɛ f ŋgʋ kɩ-taa n kɛ ɛyʊ kʊyʊm yɔ, -- >>> f(5)
-- {1, 2, 6, 24, 15}
local function f(n)
","local function factorial(x)
    if x == 0 then
        return 1
    else
        local result = 1
        for i = 2, x do
            result = result * i
        end
        return result
    end
end

local function sum_to_i(x)
    return (x * (x + 1)) // 2
end

local function f(n)
    local result = {}
    for i = 1, n do
        if i % 2 == 0 then
            result[i] = factorial(i)
        else
            result[i] = sum_to_i(i)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = f
    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})
    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})
    lu.assertEquals(candidate(1), {1})
    lu.assertEquals(candidate(3), {1, 2, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_107,kbp_Latn,lua,"- Kɩɖaʋ 1:- palindromes waa mba pɛwɛ hɔɔlɩŋ weyi ɩ-taa yɔ, ɩ-taa lɛ, ((1, n), nɛ pɩtasɩna.- Ye ɖɩhaɣ ɛyʊ kʊyʊm mbʊ yɔ, ɖɩpɩsɩɣ ɛyʊ kʊyʊm nɛ ɛyʊ kʊyʊm -- >>> even_odd_palindrome(3)
-- {1, 2}
--     Explanation:
--     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
-- Example 2:
-- >>> even_odd_palindrome(12)
-- {4, 6}
--     Explanation:
--     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
-- Note:
--     1. 1 <= n <= 10^3
--     2. returned table has the number of even and odd integer palindromes respectively.
local function even_odd_palindrome(n)
","local function is_palindrome(num)
    local str = tostring(num)
    return str == string.reverse(str)
end

local function even_odd_palindrome(n)
    local even_count = 0
    local odd_count = 0

    for i = 1, n do
        if is_palindrome(i) then
            if i % 2 == 0 then
                even_count = even_count + 1
            else
                odd_count = odd_count + 1
            end
        end
    end

    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_palindrome
    lu.assertEquals(candidate(123), {8, 13})
    lu.assertEquals(candidate(12), {4, 6})
    lu.assertEquals(candidate(3), {1, 2})
    lu.assertEquals(candidate(63), {6, 8})
    lu.assertEquals(candidate(25), {5, 6})
    lu.assertEquals(candidate(19), {4, 6})
    lu.assertEquals(candidate(9), {4, 5})
    lu.assertEquals(candidate(1), {0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_108,kbp_Latn,lua,"- Ɖɩkpaɣ ɛzɩ 123 yɔ, ɛ-tɛ mayaɣ kɔyɔ -1, 2 nɛ 3.- Yee nimero nakʋyʋ ɛwɛ kɩjɛyʊʊ kɔyɔ, ɛ-tɛ kajalaɣ nimero kɩjɛyʊʊ kɔyɔ: - kɩ-tɛ ɛyʊ kʊdɔŋ ŋgʊ kɩ-tɛ kʊdɔŋ ŋgʊ kɩ-tɛ kʊdɔŋ ŋgʊ kɩ-tɛ kʊdɔŋ ŋgʊ kɩ-tɛ kʊdɔŋ ŋgʊ kɩ-tɛ kʊdɔŋ ŋgʊ kɩ-tɛ kʊdɔŋ yɔ.- Maʋ tʋmɩyɛ count_nums nɖɩ ɖɩkpaɣɣ ɛyʊ tɛtʊ taa ɛyʊ tɛtʊ nɛ ɖɩpɩsɩɣ ɛ-tɛtʊ taa ɛyʊ tɛtʊ yɔ -- >>> count_nums({})
-- 0
-- >>> count_nums({-1, 11, -11})
-- 1
-- >>> count_nums({1, 1, 2})
-- 3
local function count_nums(arr)
","local function count_nums(arr)
    local function sum_of_digits(num)
        local sum = 0
        local is_negative = num < 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        if is_negative then
            sum = sum - 2 * (math.floor(math.abs(arr[index]) / 10 ^ (math.floor(math.log10(math.abs(arr[index]))))))
        end
        return sum
    end

    local count = 0
    for _, num in ipairs(arr) do
        local digit_sum = sum_of_digits(num)
        if digit_sum > 0 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_nums
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({-1, -2, 0}), 0)
    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)
    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)
    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)
    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)
    lu.assertEquals(candidate({0, 1}), 1)
    lu.assertEquals(candidate({1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_109,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Cɔnɩ: Pɩwɛɣ ɖeu se pamaɣzɩ se tɔm pee wena awɛ kɩlɛmʋʋ yɔɔ yɔ, awɛ ndɩ nɛ a-taa lɛɛbʋ.- Yee taabɩlɩ kɩfalʋʋ ɛfɛyɩ kɔyɔ, pɩpɩsɩɣ true.- nɛ pʋwayɩ lɛ, pɩpɩsɩɣ true nɛ pɩtɛ lɛ pɩpɩsɩɣ false. - Yee pɩsaŋ kɔyɔ, ŋpɩzɩɣ ŋla tʊmɩyɛ nɖɩ ɖɩ-yɔɔ nɛ ŋhiɣ takayɩhayʋʋ kɩfalʊʊ ŋgʊ kɩ-taa.- kɩpaɣzʋʋ lone taa, pʋ-tɔbʋʋ se 0 ñɩnɖɛ taa.- nɛ ɖɩkpaɣ kɩ-tɛ tɔm kɩlɛlʋʋ nɛ ɖɩlɛɣzɩ-kʋ nɛ ɖɩɖʋna kɩ-tɛ tɔm kɩlɛlʋʋ.- Kɩ-tɛ kɩ-tɩ yɔɔ wɛʊ tɔbʋʋ se kɩ-tɛ kɩ-tɩ yɔɔ wɛʊ tɔbʋʋ se kɩ-tɛ kɩ-tɩ yɔɔ wɛʊ tɔbʋʋ se kɩ-tɛ kɩ-tɩ yɔɔ wɛʊ tɔbʋʋ.- Ŋpɩzɩɣ nɛ ŋla tʋmɩyɛ nɖɩ tam sakɩyɛ.- Kɩ-tɛ tʊmɩyɛ nɖɩ ɖɩ-tɛ ɛyʊ yɔ: - papɩzɩɣ nɛ palɩzɩ takayɩhayʋʋ nakʋyʋ nɛ palɩzɩ-kʋ nɛ pɩtaakɩlɩ ɖɔʋ pɩtɩŋna ɛzɩma palaba yɔ Pɩwɛɛ se ŋtɩlɩ mbʋ pɩ-yɔɔ ŋtɩŋna nɛ ŋlɩzɩ-ɩ yɔ.- Ɖɩwɛna N tam nabʊyʊ taa lɛ, ɖɩnaɣ se 'arr' kɛna ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ ɛyʊ-- >>> move_one_ball({3, 4, 5, 1, 2})
-- true
-- Explanation: By performin 2 right shift operations, non-decreasing order can
--              be achieved for the given table.
-- >>> move_one_ball({3, 5, 4, 1, 2})
-- false
-- Explanation:It is not possible to get non-decreasing order for the given
--             table by performing any number of right shift operations.
local function move_one_ball(arr)
","local function move_one_ball(arr)
    local n = #arr
    if n == 0 then
        return true
    end

    local count_descending_pairs = 0

    for i = 1, n do
        if arr[i] > arr[(i % n) + 1] then
            count_descending_pairs = count_descending_pairs + 1
        end
        if count_descending_pairs > 1 then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = move_one_ball
    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)
    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)
    lu.assertEquals(candidate({4, 3, 1, 2}), false)
    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)
    lu.assertEquals(candidate({}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_110,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Ye pɩtɛkɛ mbʋ yɔ, ŋpɩsɩɣ ""Aayɩ"".- lst1 hɔɔlɩŋ tɩŋa taa lɛ, pɩpɔzʋʋ se ɛpɩzɩ nɛ ɛyɔɔdɩ se ɛɛɛ.- Yee pɩsaŋ se pɛlɛɣzɩ wondu lst1 nɛ lst2 pɛ-hɛkʋ taa nɛ pɩsaŋ nɛ pala - Paɖɩzɩɣ hɔɔlɩŋ weyi ɛ-taa pɛlɛɣzɩɣ ɛ-hɔɔlɩŋ lst1 nɛ lst2 yɔ.- nɛ pɛkpɛndɩ-wɛ nɛ papɩsɩ lst1 lɛ, pama-kʋ nɛ nimero waa mba pɛtɛyɩ-wɛ yɔ.- nɛ kɩna se papɩzɩɣ nɛ pɛlɛɣzɩ wondu yaa we - Tɔm pɔzʋʋ pʋnɛ pɩ-taa, ŋkaɣ labʋ tʋmɩyɛ nɖɩ ɖɩ-taa pamaɣna hɔɔlɩŋ naalɛ yɔ.-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})
-- 'YES'
-- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})
-- 'NO'
-- It is assumed that the input tables will be non-empty.
local function exchange(lst1, lst2)
","local function exchange(lst1, lst2)
    local is_all_even = true
    local odd_count_lst1 = 0
    local even_count_lst2 = 0

    -- Check lst1 for odd numbers
    for _, num in ipairs(lst1) do
        if num % 2 ~= 0 then
            odd_count_lst1 = odd_count_lst1 + 1
        end
    end

    -- Check lst2 for even numbers
    for _, num in ipairs(lst2) do
        if num % 2 == 0 then
            even_count_lst2 = even_count_lst2 + 1
        end
    end

    -- It is possible to make lst1 all even if the number of odd elements
    -- in lst1 can be swapped with the number of even elements in lst2
    if odd_count_lst1 <= even_count_lst2 then
        return ""YES""
    else
        return ""NO""
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = exchange
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')
    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')
    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')
    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')
end

os.exit(lu.LuaUnit.run())"
HumanEval_111,kbp_Latn,lua,"- Kɩɖaʋ: - Yee tɔm pee naayɛ ɛfɛyɩ kʋɖʋmʋʋ yɔ, pɩpɔzʋʋ se papɩsɩna-yɛ tɩŋa.- takayaɣ ŋga ka-taa tɔm kɩlɩɣ pɩsʋʋ nɛ ka-taa tɔm kɩlɩɣ ɖɔʋ yɔ.- Ye ŋwɛna tɔmpiye nɖɩ ɖɩwɩlɩɣ mayaɣ cikpelaɣ ŋga kɛwɛna mayaɣ cikpelaɣ yɔ, pɩsɩna nɛ ŋlɩzɩ takayɩhayʋʋ nakʋyʋ.-- >>> histogram('a b c')
-- {['a'] = 1, ['b'] = 1, ['c'] = 1}
-- >>> histogram('a b b a')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('a b c a b')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('b b b b a')
-- {['b'] = 4}
-- >>> histogram('')
-- {}
local function histogram(test)
","local function histogram(test)
    if test == """" then return {} end
    
    local words = {}
    for word in test:gmatch(""%S"") do
        words[word] = (words[word] or 0) + 1
    end
    
    local max_count = 0
    local result = {}
    for letter, count in pairs(words) do
        if count > max_count then
            max_count = count
            result = {[letter] = count}
        elseif count == max_count then
            result[letter] = count
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = histogram
    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('a'), {['a'] = 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_112,kbp_Latn,lua,"- Kɩɖaʋ kɩdɛɛka- Pɩwɛɛ se ŋyele nɛ pɩwɩlɩ se ŋwɛnɩ takayɩhayʋʋ ŋgʋ kɩ-taa tɔm pee kɩlɩɣ lɩʋ yɔ nɛ tɔm pee kɩbana yaa cɛtɩm yɔ.- Kɩ-tɛ tɔmpiye payaɣ se palindrome yee ɖɩkalɩɣ-ɖɩ ɛzɩ ɖɩkalɩɣ-ɖɩ nɛ ɛsɩndaa yɔ.- nɛ pʋwayɩ lɛ, ŋtazɩ nɛ ŋna se tɔm pee wena a-taa pama-yɛ yɔ, awɛ ɛzɩ palindrome yɔ. - Paha-ɖʋ tɔmpiye naalɛ s nɛ c, pɩwɛɛ se ɖɩlɩzɩ tɔmpiye nɖɩ ɖɩ-taa ɖɩ-taa tɔmpiye naɖɩyɛ wɛɛ yɔ.- Tʋmɩyɛ nɖɩ ?-- >>> reverse_delete('abcde', 'ae')
-- {'bcd', false}
-- >>> reverse_delete('abcdef', 'b')
-- {'acdef', false}
-- >>> reverse_delete('abcdedcba', 'ab')
-- {'cdedc', true}
local function reverse_delete(s, c)
","local function reverse_delete(s, c)
    -- Create a set for characters to delete
    local delete_set = {}
    for i = 1, #c do
        delete_set[c:sub(i, i)] = true
    end
    
    -- Create the result string by filtering out characters in delete_set
    local result = {}
    for i = 1, #s do
        local char = s:sub(i, i)
        if not delete_set[char] then
            table.insert(result, char)
        end
    end
    
    -- Convert result table to string
    local result_str = table.concat(result)
    
    -- Check if the result string is a palindrome
    local is_palindrome = true
    local len = #result_str
    for i = 1, math.floor(len / 2) do
        if result_str:sub(i, i) ~= result_str:sub(len - i + 1, len - i + 1) then
            is_palindrome = false
            break
        end
    end
    
    -- Return the result string and palindrome check as a table
    return {result_str, is_palindrome}
end","lu = require('luaunit')

function test_humaneval()
local candidate = reverse_delete
    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
    lu.assertEquals(candidate('a', 'a'), {'', true})
    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
    lu.assertEquals(candidate('mamma', 'mia'), {'', true})
end

os.exit(lu.LuaUnit.run())"
HumanEval_113,kbp_Latn,lua,"- nɛ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ- tɔmpiye i. "" ɖenɖe lɛ, pɩwɛɛ se pɛlɛɣzɩ i waa tɩŋa nɛ mayaɣ - Pɩwɛɛ se tɔmpiye nɖɩ ɖɩ-taa paa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa lɛ, ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa.- Ye ŋwɛna tɔm hɔɔlɩŋ takayaɣ nakɛyɛ taa nɛ tɔm hɔɔlɩŋ takayaɣ ŋga ka-taa lɛ, tɔm hɔɔlɩŋ takayaɣ ŋga ka-taa lɛ, tɔm hɔɔlɩŋ takayaɣ ŋga ka-taa lɛ, tɔm hɔɔlɩŋ takayaɣ ŋga ka-taa lɛ, tɔm hɔɔlɩŋ takayaɣ ŋga ka-taa lɛ, tɔm hɔɔlɩŋ takayaɣ ŋga ka-taa lɛ.-- >>> odd_count({'1234567'})
-- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}
-- >>> odd_count({'3', '11111111'})
-- {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'}
local function odd_count(lst)
","local function odd_count(lst)
    local result = {}
    for _, str in ipairs(lst) do
        local odd_count = 0
        for i = 1, #str do
            local digit = tonumber(str:sub(i, i))
            if digit % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        local element = string.format(""the number of odd elements %dn the str%1dng %d of the %d"", odd_count, odd_count, odd_count, odd_count)
        result[#result + 1] = element
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = odd_count
    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the str4ng 4 of the 4nput.'})
    lu.assertEquals(candidate({'3', '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'})
    lu.assertEquals(candidate({'271', '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_114,kbp_Latn,lua,"- Kɩɖaʋ kɩdɛɛka- nɛ hɩlaɣ. - Ye ŋwɛna nimero waa tɩŋa yɔ, ŋñɩnɩɣ nɛ ŋnaɣ nimero waa tɩŋa taa lɛ, nimero waa mba pɛfɛyɩ kɩ-taa yɔ, pa-taa lɛ, nimero waa tɩŋa taa lɛ, ŋnaɣ nɛ nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ, nimero waa tɩŋa taa lɛ.-- >>> minSubArraySum({2, 3, 4, 1, 2, 4})
-- 1
-- >>> minSubArraySum({-1, -2, -3})
-- -6
local function minSubArraySum(nums)
","local function minSubArraySum(nums)
    local min_sum = nums[1]
    local current_sum = nums[1]

    for i = 2, #nums do
        current_sum = math.min(nums[i], current_sum + nums[i])
        min_sum = math.min(min_sum, current_sum)
    end

    return min_sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = minSubArraySum
    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)
    lu.assertEquals(candidate({-1, -2, -3}), -6)
    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)
    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)
    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)
    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)
    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)
    lu.assertEquals(candidate({-10}), -10)
    lu.assertEquals(candidate({7}), 7)
    lu.assertEquals(candidate({1, -1}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_115,kbp_Latn,lua,"- Kɩɖaʋ 1:- Wɩlɩ tam ɛzɩma pɩwɛɛ se ŋlabɩnɩ lɩm haɖaʋ yɔ.- Ña-tʋmɩyɛ lɛ se ŋlabɩnɩ tʋmɩyɛ pɔŋ nɛ ŋhɛzɩ pɔŋ taa.- nɛ pɔŋ tɩŋa taa lɛ, lɩm ɖɔŋ kʋɖʋm. - Paa lɔkɔ ŋgʋ lɛ, kɩwɛna pɔʋ ŋgʋ kɩ-taa papɩzɩɣ nɛ palɩzɩ lɩm yɔ.- nɛ paa 1 ŋgʊ lɛ kɩkɛ lɩm pʊtʊ kʋɖʋmʊ. - Paha-ŋ lɔkɔnaa mba pa-taa paa weyi lɛ ɛwɛ ɛzɩ ɛ-tɩ yɔ.-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)
-- 6
-- Example 2:
-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2)
-- 5
-- Example 3:
-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)
-- 0
-- Constraints:
--     * all wells have the same length
--     * 1 <= grid.length <= 10^2
--     * 1 <= grid[:,1].length <= 10^2
--     * grid[i][j] -> 0 | 1
--     * 1 <= capacity <= 10
local function max_fill(grid, capacity)
","local function max_fill(grid, capacity)
    local total_units = 0

    -- Traverse each well in the grid
    for i = 1, #grid do
        for j = 1, #grid[i] do
            total_units = total_units + grid[i][j]
        end
    end

    -- Calculate the number of times the bucket needs to be lowered
    local num_lowerings = math.ceil(total_units / capacity)

    return num_lowerings
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_fill
    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)
    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)
    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_116,kbp_Latn,lua,"- Pɩwɛɛ se pala-ɖɩ nɛ ɖɩwɛɛ ɛzɩ ɖɩyɔɔdʋʋ yɔ: - Ye ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa ɛ-taa- 1 waa mba pɛwɛ pa-tɩ yɔɔ yɔ, pa-taa naalɛ mba pa-taa nɛ pɩkpaɖɩ.- Kata kʋnɛ kɩ-taa, pɩwɛɛ se ŋñɔɔzɩ takayasɩ nzɩ sɩ-taa tɔm fɛyɩ yɔ, nɛ ŋmaɣzɩna -- >>> sort_array({1, 5, 2, 3, 4})
-- {1, 2, 3, 4, 5}
-- >>> sort_array({-2, -3, -4, -5, -6})
-- {-6, -5, -4, -3, -2}
-- >>> sort_array({1, 0, 2, 3, 4})
-- {0, 1, 2, 3, 4}
local function sort_array(arr)
","local function count_ones(n)
    local count = 0
    while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
    end
    return count
end

local function sort_array(arr)
    table.sort(arr, function(a, b)
        local ones_a = count_ones(math.abs(a))
        local ones_b = count_ones(math.abs(b))
        if ones_a == ones_b then
            return a < b
        else
            return ones_a < ones_b
        end
    end)
    return arr
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
    lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
end

os.exit(lu.LuaUnit.run())"
HumanEval_117,kbp_Latn,lua,"- Kɩɖaŋ: - Cɔnɩ nɛ ŋna: ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔm ndʋ ŋtiyaa yɔ, tɩ-taa lɛ, masɩ nɛ tɔm hɔɔlɩŋ ɖeke wɛna.- Yee tɔmpiye s ɖɩfɛyɩ kɔyɔ, pɩpɔzʋʋ se ɖɩpɩsɩna tabalɩ kɩfalʋʋ.- n tɔmpiye, nɛ tɔm pee ana awɛ tɔmpiye s taa.- tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm pee kpeekpe kpata taa nɛ pɩ-taa wɛ tɔm pee - Yee ŋha-ɖʋ ɛ-tɛ nɩŋgbaŋgʋʋ nɛ ɛ-tɛ nɩŋgbaŋgʋʋ kɔyɔ, ɖɩnaɣ se ŋlaba tʋmɩyɛ nɛ ŋlabɩnɩ-ɖɩ tʋmɩyɛ.-- >>> select_words('Mary had a little lamb', 4)
-- {'little'}
-- >>> select_words('Mary had a little lamb', 3)
-- {'Mary', 'lamb'}
-- >>> select_words('simple white space', 2)
-- {}
-- >>> select_words('Hello world', 4)
-- {'world'}
-- >>> select_words('Uncle sam', 3)
-- {'Uncle'}
local function select_words(s, n)
","local function select_words(s, n)
    local vowels = { a = true, e = true, i = true, o = true, u = true,
                     A = true, E = true, I = true, O = true, U = true }
    local result = {}
    
    for word in s:gmatch(""%S+"") do
        local consonant_count = 0
        for char in word:gmatch(""%a"") do
            if not vowels[char] then
                consonant_count = consonant_count + 1
            end
        end
        if consonant_count == n then
            table.insert(result, word)
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = select_words
    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})
    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})
    lu.assertEquals(candidate('simple white space', 2), {})
    lu.assertEquals(candidate('Hello world', 4), {'world'})
    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})
    lu.assertEquals(candidate('', 4), {})
    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_118,kbp_Latn,lua,"- Kɩɖaʋ: - Ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔmpiye nɖɩ ɖɩ-taa ŋnaɣ-ɩ yɔ, ɖɩ-taa wɛ aŋglɛɛ kʋnʋŋ taa masɩ ɖeke.- nɛ pana se tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ yɔ.Ye ŋtɩtasɩ mayaɣ nakɛyɛ labʋ yɔ, yele nɛ ɖɩpɩsɩ mayaɣ ŋga ka-taa ŋtɩyɔɔdɩ natʋyʋ yɔ.- tɔmpiye nɖɩ ɖɩlɩna tɔmpiye nɖɩ ɖɩ-nɩwaŋ yɔɔ yɔ ɖɩ-taa tɔm naalɛ (ɖɩlɩna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye sɔsɔyɛ taa).- Payaɣ-ŋ se ""W"" nɛ ña-tʋmɩyɛ lɛ se ŋñɩnɩ mayaɣ ŋga kɛwɛna nɔɔ kʋɖʋmaɣ nɛ mayaɣ ŋga yɔ.-- >>> get_closest_vowel('yogurt')
-- 'u'
-- >>> get_closest_vowel('FULL')
-- 'U'
-- >>> get_closest_vowel('quick')
-- ''
-- >>> get_closest_vowel('ab')
-- ''
local function get_closest_vowel(word)
","local function get_closest_vowel(word)
    local vowels = ""AEIOUaeiou""
    local found_vowel = false
    local last_consonant = false

    for i = #word - 1, 2, -1 do
        local char = word:sub(i, i)
        if vowels:find(char) then
            if last_consonant then
                return char
            end
            found_vowel = true
        else
            if found_vowel then
                return ''
            end
            last_consonant = true
        end
    end

    return ''
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_closest_vowel
    lu.assertEquals(candidate('yogurt'), 'u')
    lu.assertEquals(candidate('full'), 'u')
    lu.assertEquals(candidate('easy'), '')
    lu.assertEquals(candidate('eAsy'), '')
    lu.assertEquals(candidate('ali'), '')
    lu.assertEquals(candidate('bad'), 'a')
    lu.assertEquals(candidate('most'), 'o')
    lu.assertEquals(candidate('ab'), '')
    lu.assertEquals(candidate('ba'), '')
    lu.assertEquals(candidate('quick'), '')
    lu.assertEquals(candidate('anime'), 'i')
    lu.assertEquals(candidate('Asia'), '')
    lu.assertEquals(candidate('Above'), 'o')
end

os.exit(lu.LuaUnit.run())"
HumanEval_119,kbp_Latn,lua,"- Kɩɖaŋ: - Ye pɩsaŋ se ɛyʋ ɛlɩzɩ tɔm piye nɖɩ ɖɩ-taa tɔm pee kɩbana yɔ, ɛpɩzɩɣ nɛ ɛyɔɔdɩ se ɛpɩzɩɣ nɛ ɛlɩzɩ-yɛ nɛ ɛlɛ ɛpɩzɩɣ nɛ ɛyɔɔdɩ se ɛpɩzɩɣ nɛ ɛla.- ""()) "" tɩkɛ mbʋ.Ɖɩkpaɣ ɛzɩ: tɔmpiye '(())))' wɛ ɖeu, ɛlɛ tɔmpiye - Paɣtʊ ndʊ tɩ-taa lɛ, yee pɩ-taa ɛyʊ ɛ-tɔm ɛlaba camɩyɛ kɔyɔ, pɩwɩlɩɣ se ɛ-tɔm ɛlaba camɩyɛ.- nɛ pɩsa nɛ pɩsa nɛ tɔm ndʋ tɩkɔŋ yɔ tɩwɛɛ ɖeu.- Ña-tʋmɩyɛ lɛ se ŋtazɩ nɛ ŋna se ŋpɩzɩɣ nɛ ŋkpɛndɩ tɔm pee ana a-naalɛ nɛ ŋlabɩnɩ tʋmɩyɛ .- kɩ-taa lɛ, pamaɣ "" ("", yaa kɩ-taa lɛ, pamaɣ """") - Paha-ŋ taabɩlɩ ŋgʋ kɩ-taa wɛ tɔm pee naalɛ yɔ, tɔm pee ana a-naalɛ lɛ:-- >>> match_parens({'()(', ')'})
-- 'Yes'
-- >>> match_parens({')', ')'})
-- 'No'
local function match_parens(lst)
","local function match_parens(lst)
    local function is_balanced(s)
        local balance = 0
        for i = 1, #s do
            if s:sub(i,i) == '(' then
                balance = balance + 1
            else
                balance = balance - 1
            end

            if balance < 0 then
                return false
            end
        end
        return balance == 0
    end

    local s1, s2 = lst[1], lst[2]
    return (is_balanced(s1 .. s2) or is_balanced(s2 .. s1)) and 'Yes' or 'No'
end","lu = require('luaunit')

function test_humaneval()
local candidate = match_parens
    lu.assertEquals(candidate({'()(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', ')'}), 'No')
    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
    lu.assertEquals(candidate({'()', '())'}), 'No')
    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
    lu.assertEquals(candidate({'((((', '((())'}), 'No')
    lu.assertEquals(candidate({')(()', '(()('}), 'No')
    lu.assertEquals(candidate({')(', ')('}), 'No')
    lu.assertEquals(candidate({'(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', '('}), 'Yes')
end

os.exit(lu.LuaUnit.run())"
HumanEval_120,kbp_Latn,lua,"- Kɩɖaʋ 1:- nɛ pɩtaatalɩ k nɛ ɛ-tɛ kʊnʊŋ taa lɛ, ɛ-tɛ kʊnʊŋ taa lɛ, ɛ-tɛ kʊnʊŋ taa lɛ.- Yee ɖɩhaɣ ɛyʊ kʊyʊm tɛtʊ taa lɛ, ɖɩpɩsɩɣ ɛyʊ kʊyʊm tɛtʊ taa lɛ, ɖɩpɩsɩɣ ɛyʊ kʊyʊm tɛtʊ taa lɛ, ɖɩpɩsɩɣ ɛyʊ kʊyʊm tɛtʊ taa lɛ.-- >>> maximum({-3, -4, 5}, 3)
-- {-4, -3, 5}
-- Example 2:
-- >>> maximum({4, -4, 4}, 2)
-- {4, 4}
-- Example 3:
-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)
-- {2}
-- Note:
--     1. The length of the table will be in the range of [1, 1000].
--     2. The elements in the table will be in the range of [-1000, 1000].
--     3. 0 <= k <= len(arr)
local function maximum(arr, k)
","local function maximum(arr, k)
    table.sort(arr, function(a, b) return a > b end)
    local result = {}
    for i = 1, k do
        table.insert(result, arr[i])
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = maximum
    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})
    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})
    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})
    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})
    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})
    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})
    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})
    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})
    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})
    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})
    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_121,kbp_Latn,lua,"- Kɩɖaŋ - Ye ɖɩhaɣ ɛyʊ kʊyʊm hɔɔlɩŋ weyi ɛfɛyɩ kɩ-tɩ yɔɔ yɔ, ɖɩhaɣ ɛyʊ kʊyʊm hɔɔlɩŋ weyi ɛ-tɛ hɔɔlɩŋ tɩŋa wɛ kɩ-tɩ yɔɔ yɔ.-- >>> solution({5, 8, 7, 1})
-- 12
-- >>> solution({3, 3, 3, 3, 3})
-- 9
-- >>> solution({30, 13, 24, 321})
-- 0
local function solution(lst)
","local function solution(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 1 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = solution
    lu.assertEquals(candidate({5, 8, 7, 1}), 12)
    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)
    lu.assertEquals(candidate({30, 13, 24, 321}), 0)
    lu.assertEquals(candidate({5, 9}), 5)
    lu.assertEquals(candidate({2, 4, 8}), 0)
    lu.assertEquals(candidate({30, 13, 23, 32}), 23)
    lu.assertEquals(candidate({3, 13, 2, 9}), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_122,kbp_Latn,lua,"- Kɩɖaʋ: - kɩ-tɛ kʊdɔmɩŋ weyi ɩ-tɛ kʊdɔmɩŋ kajalaɣ kʊdɔmɩŋ weyi ɩ-tɛ lɛlʊ ɛfɛyɩ nɛ pɩɖɛɛ kʊdɔmɩŋ naalɛ yɔ.- Yee ɖɩhaɣ ɛyʊ ɛ-tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ tɛ ɛyʊ-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
-- 24
-- Constraints:
--     1. 1 <= len(arr) <= 100
--     2. 1 <= k <= len(arr)
local function add_elements(arr, k)
","local function add_elements(arr, k)
    local sum = 0
    for i = 1, k do
        local element = arr[i]
        if element >= -99 and element <= 99 then
            sum = sum + element
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add_elements
    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
    lu.assertEquals(candidate({1}, 1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_123,kbp_Latn,lua,"- get_odd_collatz(5) pɩsɩna [1, 5] # Kollatz tɛtʊ taa lɛ 5 kɛ [5, 16, 8, 4, 2, 1], mbʊ pʊyɔɔ yɔ, ɛyʊ ɛ-ñʊʊ mayaɣ kɔyɔ 1 nɛ 5. - Kɩɖaʋ nakʋyʋ yɔ:- 2. ɛ-tɛ kɔɔnɔɔ tɔm kɩlɩʋ taa.- 1. Collatz(1) kɛna [1].- Cɔnɩ hɔɔlʋʋ: - tɔmpiye nɛ pɩtasɩ 1. Tɔmpiye nɖɩ ɖɩ-taa lɛ, paa n ɛ-tɛ wazaɣ ŋga yɔ, tɔmpiye nɖɩ ɖɩ-tɛ wɛtʊ kaɣ talʋʋ 1.Ye tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-yɔɔ tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-ɖɩ yɔ.- kɩ-tɛ tɔmpiye: yee kɩ-tɛ tɔmpiye ɛwɛ kɩmaŋ kɔyɔ, tɔmpiye nɖɩ ɖɩkɔŋ yɔ ɖɩ-tɛ tɔmpiye wɛ ɛzɩ hɔɔlʋʋ yɔ.- ɛzɩ pɩkɔŋ yɔ: paɣzɩna paa mayaɣ ŋga nɛ pɩtɛ lɛ, paa mayaɣ ŋga lɛ, palɩzɩ-kɛ nɛ - Collatz tɛ maɣzɩm kɛ maɣzɩm kɛ matʋ taa nɛ pɩcɔna nɛ ɖɩtɩlɩ mbʋ payaɣ se "" séquence "" yɔ .- Yee paha-ɖʋ ɛyʊ kʊyʊmʊʊ hɔɔlʊʊ n kɔyɔ, ɖɩpɩsɩɣ ɛyʊ kʊyʊmʊʊ hɔɔlʊʊ ŋgʊ kɩwɛna ɛyʊ kʊyʊmʊʊ hɔɔlʊʊ taa yɔ.-- >>> get_odd_collatz(5)
-- {1, 5}
local function get_odd_collatz(n)
","local function get_odd_collatz(n)
    local collatz_sequence = {}
    while n ~= 1 do
        if n % 2 == 1 then
            table.insert(collatz_sequence, n)
        end
        if n % 2 == 0 then
            n = n / 2
        else
            n = 3 * n + 1
        end
    end
    table.insert(collatz_sequence, 1)  -- Always add 1 as the sequence ends with 1
    
    -- Remove duplicates and sort the table
    local unique_odds = {}
    for _, num in ipairs(collatz_sequence) do
        unique_odds[num] = true
    end

    local sorted_odds = {}
    for num, _ in pairs(unique_odds) do
        table.insert(sorted_odds, num)
    end
    table.sort(sorted_odds)

    return sorted_odds
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_odd_collatz
    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(5), {1, 5})
    lu.assertEquals(candidate(12), {1, 3, 5})
    lu.assertEquals(candidate(1), {1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_124,kbp_Latn,lua,"- 4. Pɩwɛɛ se pama kɩyakʋ ŋgʋ nɛ kɩwɛɛ ɛzɩ: f-y-y-y-y.Pɩfɛyɩ se fenasɩ nzɩ sɩtɛŋ fenaɣ kʋɖʋmaɣ yaa sɩtɛzɩ fenasɩ hiu nɛ naalɛ.Pɩtɛ alɩwaatʊ taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ ndʊ tɩ-taa lɛ, alɩwaatʊ ndʊ ndʊ tɩ-taa lɛ.- 1. Pɩtɛkɛ kɩyakʋ kɩ-taa tɔm natʋyʋ fɛyɩ.- Kɩyakʋ ŋgʋ kɩ-taa paa paɣtʋ ndʋ lɛ, tɩ-tɩŋa tɩwɛɛ: - ye kɩyakʋ ɛ-taa tɔm ɛfɛyɩ yɔ, pʋdʋ pɩsɩɣ true, ye pɩɩkɛ mbʋ yɔ, pɩkɛ false. - Pɩwɛɛ se ŋma tʋmɩyɛ nɖɩ ɖɩñɔɔzʋʋ kɩyakʋ nakʋyʋ yɔ nɛ -- >>> valid_date('03-11-2000')
-- true
-- >>> valid_date('15-01-2012')
-- false
-- >>> valid_date('04-0-2040')
-- false
-- >>> valid_date('06-04-2020')
-- true
-- >>> valid_date('06/04/2020')
-- false
local function valid_date(date)
","local function valid_date(date)
    if date == """" then
        return false
    end
    
    local month, day, year = date:match(""^(%d%d)%-(%d%d)%-(%d%d%d%d)$"")
    
    if not month or not day or not year then
        return false
    end
    
    month = tonumber(month)
    day = tonumber(day)
    year = tonumber(year)
    
    if month < 1 or month > 12 then
        return false
    end
    
    local days_in_month = {
        [1] = 31,
        [2] = 29, -- Leap year check not required for this problem
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
    }
    
    if day < 1 or day > days_in_month[month] then
        return false
    end
    
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = valid_date
    lu.assertEquals(candidate('03-11-2000'), true)
    lu.assertEquals(candidate('15-01-2012'), false)
    lu.assertEquals(candidate('04-0-2040'), false)
    lu.assertEquals(candidate('06-04-2020'), true)
    lu.assertEquals(candidate('01-01-2007'), true)
    lu.assertEquals(candidate('03-32-2011'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('04-31-3000'), false)
    lu.assertEquals(candidate('06-06-2005'), true)
    lu.assertEquals(candidate('21-31-2000'), false)
    lu.assertEquals(candidate('04-12-2003'), true)
    lu.assertEquals(candidate('04122003'), false)
    lu.assertEquals(candidate('20030412'), false)
    lu.assertEquals(candidate('2003-04'), false)
    lu.assertEquals(candidate('2003-04-12'), false)
    lu.assertEquals(candidate('04-2003'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_125,kbp_Latn,lua,"- Kɩɖaŋ - alɛbɛɛtɩ taa lɛ, tɔmpiye a) = 0, tɔmpiye b) = 1, ... tɔmpiye z) = 25- pɩpɔzaa se pɛtɛyɩ-ɩ nɛ kʊñɔnzɩ ',' yee kʊñɔnzɩ ɛfɛyɩ kɔyɔ, pɩwɛɛ se ŋpɩsɩna takayɩhayʋʋ kɩfalʊʊ ŋgʊ kɩwɛna kʊñɔnzɩ yɔ kɩ-tɛ kʊñɔnzɩ nɛ kʊñɔnzɩ nzɩ sɩwɛna kʊñɔnzɩ yɔ.- Ye ŋwɛ tɔm pee kɩmanzɩ taa yɔ, ŋpɩzɩɣ nɛ ŋlɩzɩ tɔm pee wena awɛ hɔɔlʋʋ nakʋyʋ taa yɔ, nɛ ŋyele nɛ a-taa lɛ, ŋtazɩ tɔm pee wena awɛ hɔɔlʋʋ nakʋyʋ taa yɔ a-taa.-- >>> split_words('Hello world!')
-- {'Hello', 'world!'}
-- >>> split_words('Hello,world!')
-- {'Hello', 'world!'}
-- >>> split_words('abcdef')
-- 3
local function split_words(txt)
","local function split_words(txt)
    -- Check if there is any whitespace to split on
    if txt:find(""%s"") then
        local words = {}
        for word in txt:gmatch(""%S+"") do
            table.insert(words, word)
        end
        return words
    end

    -- Check if there are commas to split on
    if txt:find("","") then
        local words = {}
        for word in txt:gmatch(""([^,]+)"") do
            table.insert(words, word)
        end
        return words
    end

    -- Otherwise, count the number of lowercase letters with odd order
    local count = 0
    for i = 1, #txt do
        local char = txt:sub(i, i)
        local ord = char:byte() - string.byte('a')
        if ord >= 0 and ord <= 25 and ord % 2 == 1 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = split_words
    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
    lu.assertEquals(candidate('abcdef'), 3)
    lu.assertEquals(candidate('aaabb'), 2)
    lu.assertEquals(candidate('aaaBb'), 1)
    lu.assertEquals(candidate(''), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_126,kbp_Latn,lua,"- Kɩɖaŋ - number, return false. Ɖɩcɔna kɔyɔ, kɩ-taa fɛyɩ nimero négatif nɛ nimero entier yeke.- nɛ pɩkpazɩɣna ɖama nɛ pɩkpazɩɣna ɖama nɛ pɩkpazɩɣna ɖama nɛ pɩkpazɩɣna ɖama nɛ pɩkpazɩɣna ɖama nɛ pɩkpazɩɣna ɖama nɛ pɩkpazɩɣna ɖama.- Ye ŋwɛna nimasɩ yɔ, ŋpɩsɩɣ-sɩ paa sɩ-taa ɛlaba yaa sɩtɩla yɔ.-- >>> is_sorted({5})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5})
-- false
-- >>> is_sorted({1, 2, 3, 4, 5, 6})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})
-- false
-- >>> is_sorted({1, 2, 2, 3, 3, 4})
-- true
-- >>> is_sorted({1, 2, 2, 2, 3, 4})
-- false
local function is_sorted(lst)
","local function is_sorted(lst)
    local seen = {}
    for i = 1, #lst - 1 do
        if lst[i] > lst[i + 1] then
            return false
        end
    end

    for _, num in ipairs(lst) do
        if seen[num] then
            seen[num] = seen[num] + 1
            if seen[num] > 2 then
                return false
            end
        else
            seen[num] = 1
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_sorted
    lu.assertEquals(candidate({5}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)
    lu.assertEquals(candidate({}), true)
    lu.assertEquals(candidate({1}), true)
    lu.assertEquals(candidate({3, 2, 1}), false)
    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)
    lu.assertEquals(candidate({1, 2, 3, 4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_127,kbp_Latn,lua,"- [Input/output] kɩɖaŋ: - Yee hɔɔlɩŋ ɛnɩ ɩtɩkpɛndɩ kɔyɔ, ŋpɩsɩɣ ""Aayɩ"".- Pɩtɛkɛ mbʋ yɔ, ŋpɩsɩɣ ""Aayɩ"".- Yee tɔm hʋʋ ŋgʊ kɩ-ɖaɣlɩkɩŋ ɛtɛyɩ kɩ-tɛ kɩlɩm kɔyɔ, ŋpɩsɩɣ ""ƐƐƐƐ"", - nɛ ɛ-ɖaɣlɩkɩŋ lɛ 1, nɛ pɩtɛkɛ kajalaɣ n̄ɩnʋʋ.- Kɩɖaʋ, hɔɔlɩŋ weyi ɩ-taa (1, 3), (2, 4) nɛ (2, 3) pɛtɛyɩɣ ɖama yɔ.- kɩkɛ kajalaɣ n̄ɩnʋʋ.- Ña-tʋmɩyɛ lɛ se ŋtɩlɩ se ɛzɩmtaa pɩtɛŋna nɛ pɩtalɩna-ŋ.- Paa alɩwaatʋ ndʋ tɩ-taa lɛ, ɖɩkpaɣ se tɩ-paɣzʋʋ talɩɣ yaa tɩtalɩɣ tɩ-tɛ.- kɩ-taa wɛ paɣzʋʋ nɛ pɛtɛ. - Kɩ-taa lɛ, pɔyɔɔdɩ se alɩwaatʋ ndʋ tɩ-taa (paɣzʋʋ, tɛm)- ɖenɖe paa hɔɔlʊʊ ŋgʊ lɛ kɩkɛ hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩwɛna hɔɔlɩŋ naalɛ.- Pɩɩha-ŋ alɩwaatʋ naalɛ.-- >>> intersection({1, 2}, {2, 3})
-- 'NO'
-- >>> intersection({-1, 1}, {0, 4})
-- 'NO'
-- >>> intersection({-3, -1}, {-5, 5})
-- 'YES'
local function intersection(interval1, interval2)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    if num <= 3 then
        return true
    end
    if num % 2 == 0 or num % 3 == 0 then
        return false
    end
    for i = 5, math.sqrt(num), 6 do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function intersection(interval1, interval2)
    local start1, end1 = interval1[1], interval1[2]
    local start2, end2 = interval2[1], interval2[2]
    
    local intersection_start = math.max(start1, start2)
    local intersection_end = math.min(end1, end2)
    
    if intersection_start > intersection_end then
        return 'NO'
    end
    
    local intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length) then
        return 'YES'
    else
        return 'NO'
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersection
    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')
    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')
    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')
    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')
    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')
    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')
    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')
    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')
end

os.exit(lu.LuaUnit.run())"
HumanEval_128,kbp_Latn,lua,"- Kɩɖaʋ: - Tɔzɩ: ŋtaakpaɣ tɔm kɩmamatʋ natʋyʋ.- paa mayaɣ ŋga lɛ, mayaɣ ŋga lɛ 1, -1 yaa 0 - kɩ-tɛ kɩjɩkpʋʋ nɛ kɩ-tɛ kɩjɩkpʋʋ nɛ kɩ-tɛ kɩjɩkpʋʋ- Paha-ŋ takayɩhayʋʋ nakʋyʋ nɛ pɩwɛɛ se ŋpɩsɩ-kʋ.-- >>> prod_signs({1, 2, 2, -4})
-- 9
-- >>> prod_signs({0, 1})
-- 0
-- >>> prod_signs({})
-- None
local function prod_signs(arr)
","local function prod_signs(arr)
    if #arr == 0 then
        return nil
    end

    local sum_magnitudes = 0
    local product_signs = 1

    for _, num in ipairs(arr) do
        sum_magnitudes = sum_magnitudes + math.abs(num)
        if num > 0 then
            product_signs = product_signs * 1
        elseif num < 0 then
            product_signs = product_signs * -1
        else
            product_signs = 0
            break
        end
    end

    return sum_magnitudes * product_signs
end","lu = require('luaunit')

function test_humaneval()
local candidate = prod_signs
    lu.assertEquals(candidate({1, 2, 2, -4}), -9)
    lu.assertEquals(candidate({0, 1}), 0)
    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_129,kbp_Latn,lua,"- Kɩɖaŋ: - Ɛpɩsɩɣ ɛ-tɛ kɩlɛmɩŋ weyi ɛ-taa ɛ-tɛ kɩlɛmɩŋ kɩlɩna ɖɔʊ yɔ.- Pɩkɛ toovenim se tɔm cosuu tɩkɛ mbʋ pɩwɛ ndɩ yɔ.- Lɩmaɣzɩyɛ A[j] = Lɩmaɣzɩyɛ B[j].- nɛ pɩ-taa lɛ, lst_A[i] < lst_B[i] nɛ j (1 <= j < i) ɖanɩ-ɩ - nɛ pɩtasɩnɩ lst_B, pʋ-tɔbʋʋ se, ɛyʊ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛ-tɛ ɛyʊ kɩlɛlʋʋ ɛyʊ kɩlɛlʋʋ ɛyʊ kɩlɛlʋʋ ɛyʊ kɩlɛlʋʋ ɛyʊ kɩlɛlʋʋ ɛyʊ kɩlɛlʋʋ ɛyʊ kɩlɛlʋʋ- nɛ (ɖɩya-wɛ se lst_A nɛ lst_B), lst_A wɛna tɔm pee kɩtatasɩ sakɩyɛ - nɛ pɩtɛ lɛ, ŋtɛzɩna takayɩhayʋʋ A nɛ B ñɩŋgʋ nɛ ŋtɛzɩna takayɩhayʋʋ B ñɩŋgʋ nɛ ŋtɛzɩna ñɩŋgʋ A ñɩŋgʋ nɛ B ñɩŋgʋ.- Nʋmɔʋ A (kʋ-ɖaɣlɩkɩŋ k) wɛ cikpeluu nɛ pɩkɩlɩ nʋmɔʋ B (kʋ-ɖaɣlɩkɩŋ k) ye:- ŊYƐƐLƐƐ se ŋtaatasɩ naʋ nɔɔyʋ.- nɛ pɩfɛyɩ se pɛkpɛndɩna ɖama).- Ɖɩcɔna kɔyɔ, ɖɩnaɣ se nʋmɔʋ ŋgʋ kɩ-ɖaɣlɩkɩŋ talɩ k yɔ, kɩwɩlɩɣ se ɖɩtalɩɣ kʊlʊmɩŋ ɖeyi ɖeyi (ɛtɛkɛ kʊlʊmɩŋ tɩŋa).- Nɔɔɖɛyaa Ɛgbɛyɛ- Pʋ-tɔbʋʋ se ŋpɩzɩɣ nɛ ŋwolo lone nɖɩ ɖɩ-taa ŋwɛna yɔ nɛ ŋtazɩ kɩ-taa.- nɛ paa lone nɖɩ ɖɩ-taa lɛ, ŋpɩzɩɣ ŋwolo lone nɖɩ ɖɩ-taa ŋwɛɛ yɔ.Pɩwɛɛ se ŋñɩnɩ n̄ɩɣyʋʋ cikpeluu ŋgʋ kɩ-ɖaɣlɩkɩŋ talɩɣ k yɔ, nɛ ŋpaɣzɩ.- inclusive lɩzɩɣna tam kʋɖʋmam kɛ ɛyʊ yɔɔ. - paa ɛyʊ weyi lɛ ɛ-tɛ ɛyʊ kɩlaʊ taa.- Yee ɖɩkpaɣ ɛyʊ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ ɛ-tɛ-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3)
-- {1, 2, 1}
-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)
-- {1}
local function minPath(grid, k)
","local function minPath(grid, k)
    local N = #grid
    local directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}

    -- Check if a position is within the grid boundaries
    local function inBounds(x, y)
        return x >= 1 and x <= N and y >= 1 and y <= N
    end

    -- DFS to find the minimum path of length k
    local function dfs(x, y, path, visited, result)
        -- Append current cell's value to path
        table.insert(path, grid[x][y])

        if #path == k then
            -- Check if we have a new minimum lexicographical path
            if not result.min or table.concat(path) < table.concat(result.min) then
                result.min = {table.unpack(path)}
            end
        else
            for _, dir in ipairs(directions) do
                local nx, ny = x + dir[1], y + dir[2]
                if inBounds(nx, ny) then
                    dfs(nx, ny, path, visited, result)
                end
            end
        end

        -- Backtrack
        table.remove(path)
    end

    local result = {min = nil}

    -- Start DFS from each cell
    for i = 1, N do
        for j = 1, N do
            dfs(i, j, {}, {}, result)
        end
    end

    return result.min
end","lu = require('luaunit')

function test_humaneval()
local candidate = minPath
    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})
    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})
    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})
    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})
    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})
    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})
    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})
    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})
    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})
    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})
    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_130,kbp_Latn,lua,"- Kɩɖaŋ: - kajalaɣ n + 1 n̄ɩnzɩ Tribonacci n̄ɩnzɩ taa. - Paha-ŋ nimero entier n weyi ɛfɛyɩ kɩgalʋʋ yɔ, pɩwɛɛ se ŋpɩsɩ ɛ-tɛ tablɛt taa nɛ ŋlɩzɩ ɛ-tɛ nimero entier n weyi ɛfɛyɩ kɩgalʋʋ yɔ.- = 2 + 3 + 3 = 8 - 3 = 2 + 3 + 4 - 3 = 4 - tri(2) = 1 + (2 / 2) = 2 - Kɩɖaʋ nakʋyʋ yɔ:-tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ye n ɛfɛyɩ ndɩ yɔ. -tri (n) = 1 + n / 2 ye n ɛkpɛndɩ kɔyɔ.- tri(1) = 3 - Tribonacci tɔmpiye lɩna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye: Ɛlɛ, ɛyaa ɩɩsɩŋ Tribonacci tɔm piye nɖɩ.- Paa anɩ ɛsɩm Fibonacci tɛ n̄ɩɣyʋʋ, pama-kʋ nɛ pɔcɔna siŋŋ kɛ maɣzɩm takayasɩ taa n̄ɩma cɔlɔ pɩnaɣ -- >>> tri(3)
-- {1, 3, 2, 8}
local function tri(n)
","local function tri(n)
    local sequence = {}
    
    -- Handle the first element separately
    sequence[1] = 3

    for i = 2, n + 1 do
        if i % 2 == 0 then
            sequence[i] = 1 + i / 2
        else
            sequence[i] = (i - 1 <= 0 and 0 or sequence[i - 1]) +
                          (i - 2 <= 0 and 0 or sequence[i - 2]) +
                          (i + 1 > n + 1 and 0 or sequence[i + 1])
        end
    end
    
    return sequence
end","lu = require('luaunit')

function test_humaneval()
local candidate = tri
    lu.assertEquals(candidate(3), {1, 3, 2, 8})
    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})
    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})
    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})
    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})
    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})
    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})
    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})
    lu.assertEquals(candidate(0), {1})
    lu.assertEquals(candidate(1), {1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_131,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Ye nimasɩ tɩŋa ɩkɛ kɩkpɛndɩna yɔ, pɩsɩɣnɩ-ɖʋ nɛ ɖɩpɩsɩ 0.- Ye ɖɩhaɣ ɛyʊ kʊyʊm mbʊ yɔ, ɖɩpɩsɩɣ ɛyʊ kʊyʊm pʊtʊnaa mba pa-taa ɛfɛyɩ yɔ.-- >>> digits(1)
-- 1
-- >>> digits(4)
-- 0
-- >>> digits(235)
-- 15
local function digits(n)
","local function digits(n)
    local product = 1
    local hasOdd = false
    
    while n > 0 do
        local digit = n % 10
        if digit % 2 == 1 then
            product = product * digit
            hasOdd = true
        end
        n = math.floor(n / 10)
    end
    
    return hasOdd and product or 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = digits
    lu.assertEquals(candidate(5), 5)
    lu.assertEquals(candidate(54), 5)
    lu.assertEquals(candidate(120), 1)
    lu.assertEquals(candidate(5014), 5)
    lu.assertEquals(candidate(98765), 315)
    lu.assertEquals(candidate(5576543), 2625)
    lu.assertEquals(candidate(2468), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_132,kbp_Latn,lua,"- nɛ pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ.- Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩ tɔmpiye true yee nɛ yee pɛtɛyɩ-ɖɩ nɛ tɔmpiye kʊɖʊmɖɩyɛ yɔ.- Lɩzɩ tʋmɩyɛ nɖɩ ɖɩ-taa pamaɣna tɔmpiye nɖɩ ɖɩ-taa wɛ tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye.-- >>> is_nested('[[]]')
-- true
-- >>> is_nested('[]]]]]]][[[[[]')
-- false
-- >>> is_nested('[][]')
-- false
-- >>> is_nested('[]')
-- false
-- >>> is_nested('[[][]]')
-- true
-- >>> is_nested('[[]][[')
-- true
local function is_nested(string)
","local function is_nested(brackets)
    local stack = {}
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '[' then
            table.insert(stack, char)
        elseif char == ']' then
            if #stack > 0 and stack[#stack] == '[' then
                table.remove(stack)
                if #stack > 0 then
                    -- Found at least one nested bracket
                    return true
                end
            else
                -- Mismatched bracket
                return false
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_nested
    lu.assertEquals(candidate('[[]]'), true)
    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)
    lu.assertEquals(candidate('[][]'), false)
    lu.assertEquals(candidate('[]'), false)
    lu.assertEquals(candidate('[[[[]]]]'), true)
    lu.assertEquals(candidate('[]]]]]]]]]]'), false)
    lu.assertEquals(candidate('[][][[]]'), true)
    lu.assertEquals(candidate('[[]'), false)
    lu.assertEquals(candidate('[]]'), false)
    lu.assertEquals(candidate('[[]][['), true)
    lu.assertEquals(candidate('[[][]]'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('[[[[[[[['), false)
    lu.assertEquals(candidate(']]]]]]]]'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_133,kbp_Latn,lua,"- Kɩɖaŋ: - paa wonuu ŋgʋ lɛ, ŋcalɩɣ-kʋ ñɔɔzʋʋ nɛ ŋtalɩ kɩ-kajalaɣ ñɩŋgʋ.- Pɩwɛɛ se ŋyele nɛ ɖɩna ɛzɩma pamaɣ kɩkalʋʋ ŋgʋ kɩ-taa yɔ, nɛ ɖɩna ɖɔɖɔ ɛzɩma pamaɣ kɩ-taa yɔ.- Payaɣ-ŋ se ""ɛyaa"".-- >>> lst({1.0, 2.0, 3.0})
-- 14
-- >>> lst({1.0, 4.0, 9.0})
-- 98
-- >>> lst({1.0, 3.0, 5.0, 7.0})
-- 84
-- >>> lst({1.4, 4.2, 0.0})
-- 29
-- >>> lst({-2.4, 1.0, 1.0})
-- 6
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        local ceil_num = math.ceil(num)
        sum = sum + (ceil_num * ceil_num)
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)
    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)
    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)
    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)
    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)
    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)
    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)
    lu.assertEquals(candidate({0.0}), 0)
    lu.assertEquals(candidate({-1.0}), 1)
    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_134,kbp_Latn,lua,"- Kɩɖaŋ: - Cɔnɩ: tɔm piye ""word"" kɛna matʋ ndɩ ndɩ ndɩ ndɩ nɛ sɩ-taa lɛ, ɖɩkpaɣ lone nɛ ɖɩtayɩ ɖama.- tɔm piye naɖɩyɛ hɔɔlʋʋ, nɛ tɔm piye lɛɛɖɛ taa lɛ, pɩkɛ cɛtɩm tɔm.- nɛ pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ, pɩtɛ lɛ- Maɣzɩ se ŋpɩzɩɣ ŋlɩzɩ function ŋgʋ kɩpɩsɩɣ true yee pɩtɛŋna mayaɣ ŋga kɛtɛŋ yɔ -- >>> check_if_last_char_is_a_letter('apple pie')
-- false
-- >>> check_if_last_char_is_a_letter('apple pi e')
-- true
-- >>> check_if_last_char_is_a_letter('apple pi e ')
-- false
-- >>> check_if_last_char_is_a_letter('')
-- false
local function check_if_last_char_is_a_letter(txt)
","local function check_if_last_char_is_a_letter(txt)
    -- Remove trailing spaces
    txt = txt:match(""^(.-)%s*$"")
    -- Check if the string is empty after trimming spaces
    if #txt == 0 then
        return false
    end
    -- Get the last character of the string
    local lastChar = txt:sub(-1)
    -- Check if the last character is an alphabet and not part of a word
    return lastChar:match(""%a"") and not txt:match(""%s%a*$"")
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_if_last_char_is_a_letter
    lu.assertEquals(candidate('apple'), false)
    lu.assertEquals(candidate('apple pi e'), true)
    lu.assertEquals(candidate('eeeee'), false)
    lu.assertEquals(candidate('A'), true)
    lu.assertEquals(candidate('Pumpkin pie '), false)
    lu.assertEquals(candidate('Pumpkin pie 1'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('eeeee e '), false)
    lu.assertEquals(candidate('apple pie'), false)
    lu.assertEquals(candidate('apple pi e '), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_135,kbp_Latn,lua,"- Kɩɖaŋ: - kɩmaŋ weyi ɩ-taa tɔm kʋɖʋmtʋ fɛyɩ yɔ.- yee pɩfɛyɩ kɔyɔ, pɩpɩsɩɣ -1.- kɩkɩlɩna yaa kɩtalɩna kɩ-kajalaɣ ñɩmbʋ.- Maɣzɩ nɛ ŋna ɛzɩma ŋpɩzɩɣ nɛ ŋlabɩnɩ tʋmɩyɛ tɔm pee kɩbana wena awɛ tɔm pee kɩbana taa yɔ .-- >>> can_arrange({1, 2, 4, 3, 5})
-- 3
-- >>> can_arrange({1, 2, 3})
-- -1
local function can_arrange(arr)
","local function can_arrange(arr)
    for i = #arr, 2, -1 do
        if arr[i] < arr[i - 1] then
            return i
        end
    end
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = can_arrange
    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)
    lu.assertEquals(candidate({1, 2, 4, 5}), -1)
    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)
    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)
    lu.assertEquals(candidate({}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_136,kbp_Latn,lua,"- Kɩɖaŋ: - Yee ɛyʊ ɛfɛyɩna ɛyʊ kʊyʊm yaa ɛyʊ kɩlɛyʊ kɔyɔ, pɩpɩsɩɣ ɛyʊ kʊyʊm.- nɛ ɛ-tɛ ɛyʊ lɛlʊ taa.- kɩlɩna kɩjɛyʊʊ nɛ b kɛna kɩjɛyʊʊ - Wɩlɩ tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ takayɩhayʋʋ (a, b) yɔ, ɖenɖe a yɔ -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})
-- {None, 1}
-- >>> largest_smallest_integers({})
-- {None, None}
-- >>> largest_smallest_integers({0})
-- {None, None}
local function largest_smallest_integers(lst)
","local function largest_smallest_integers(lst)
    local max_negative = nil
    local min_positive = nil

    for _, num in ipairs(lst) do
        if num < 0 then
            if max_negative == nil or num > max_negative then
                max_negative = num
            end
        elseif num > 0 then
            if min_positive == nil or num < min_positive then
                min_positive = num
            end
        end
    end

    return {max_negative, min_positive}
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_smallest_integers
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})
    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})
    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})
    lu.assertEquals(candidate({}), {None, None})
    lu.assertEquals(candidate({0}), {None, None})
    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})
    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})
    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})
    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_137,kbp_Latn,lua,"- Tɔzɩ se: Ye pamaɣ mayaɣ nakɛyɛ nɛ ka-taa lɛ, mayaɣ ŋga ka-taa tɔm pee wɛ ndɩ yɔ, pɩpɩzɩɣ nɛ pɩkɛ . yaa , - Ye kɩ-kɩcɛyɩm ɩnɩ ɩ-tɩŋa ɩnɩ ɩ-taa nabʋyʋ ɛfɛyɩ yɔ, pɩsɩɣnɩ-ɖʋ nɛ ɖɩna.- kɩlɩɣ lɛɣzʋʋ nɛ kɩpɩsɩɣ kɩlɩɣ lɛɣzʋʋ kɩ-tɛ kɩlɩɣ lɛɣzʋʋ.- Maɣzɩ nɛ ŋna ɛzɩma ŋpɩzɩɣ nɛ ŋlabɩnɩ tʋmɩyɛ tɔm pee kɩbana yɔ.-- >>> compare_one(1, 2.5)
-- 2.5
-- >>> compare_one(1, '2,3')
-- '2,3'
-- >>> compare_one('5,1', '6')
-- '6'
-- >>> compare_one('1', 1)
-- None
local function compare_one(a, b)
","local function to_real_number(val)
    if type(val) == ""string"" then
        val = val:gsub("","", ""."")
        return tonumber(val)
    end
    return val
end

local function compare_one(a, b)
    local a_type = type(a)
    local b_type = type(b)
    
    if a_type == b_type then
        if a == b then
            return nil
        end
        return a > b and a or b
    else
        local a_real = to_real_number(a)
        local b_real = to_real_number(b)
        
        if a_real == b_real then
            return nil
        end
        return a_real > b_real and a or b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare_one
    lu.assertEquals(candidate(1, 2), 2)
    lu.assertEquals(candidate(1, 2.5), 2.5)
    lu.assertEquals(candidate(2, 3), 3)
    lu.assertEquals(candidate(5, 6), 6)
    lu.assertEquals(candidate(1, '2,3'), '2,3')
    lu.assertEquals(candidate('5,1', '6'), '6')
    lu.assertEquals(candidate('1', '2'), '2')
    lu.assertEquals(candidate('1', 1), None)
end

os.exit(lu.LuaUnit.run())"
HumanEval_138,kbp_Latn,lua,"- Kɩɖaʋ kɩdɛɛka- Pɩwɛɛ se ɖɩtɩlɩ se paa mayaɣ ŋga lɛ, papɩzɩɣ pama-kɛ nɛ pama-kɛ ɖɔɖɔ ɛzɩ mayaɣ kɩfalʋʋ naanza yɔ.-- >>> is_equal_to_sum_even(4)
-- false
-- >>> is_equal_to_sum_even(6)
-- false
-- >>> is_equal_to_sum_even(8)
-- true
local function is_equal_to_sum_even(n)
","local function is_equal_to_sum_even(n)
    -- Check if n can be expressed as the sum of 4 positive even numbers
    -- which means n should at least be 8 (2 + 2 + 2 + 2) and n should be even.
    if n >= 8 and n % 2 == 0 then
        return true
    else
        return false
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_equal_to_sum_even
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), true)
    lu.assertEquals(candidate(11), false)
    lu.assertEquals(candidate(12), true)
    lu.assertEquals(candidate(13), false)
    lu.assertEquals(candidate(16), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_139,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- ɖenɖe n > 0 yɔ- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! - Pɛtɛyɩɣ ɛyʊ ɛ-tɛ ɛyʊtʊ lɛ, pɩkɛna: -- >>> special_factorial(4)
-- 288
-- The function will receive an integer as input and should return the special
-- factorial of this integer.
local function special_factorial(n)
","local function factorial(m)
    if m == 0 then
        return 1
    else
        return m * factorial(m - 1)
    end
end

local function special_factorial(n)
    local result = 1
    for i = 1, n do
        result = result * factorial(i)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = special_factorial
    lu.assertEquals(candidate(4), 288)
    lu.assertEquals(candidate(5), 34560)
    lu.assertEquals(candidate(7), 125411328000)
    lu.assertEquals(candidate(1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_140,kbp_Latn,lua,"- pʋwayɩ lɛ, pɛlɛɣzɩ matʋ ndʋ tɩ-tɩŋa nɛ - - nɛ yee pɩcɛzɩ nabʊlɛ mbʊ yɔ, - Ye ŋwɛna tɔm natʋyʋ yɔ, kpaɣ tɩ-taa ɖenɖe pɩfɛyɩ yɔ nɛ ŋlɛɣzɩ-tʋ nɛ tɩ-tɛɛ tɔm.-- >>> fix_spaces(' Example')
-- 'Example'
-- >>> fix_spaces(' Example 1')
-- 'Example_1'
-- >>> fix_spaces(' Example 2')
-- '_Example_2'
-- >>> fix_spaces(' Example 3')
-- '_Example-3'
local function fix_spaces(text)
","local function fix_spaces(text)
    -- Trim leading and trailing spaces
    text = text:match(""^%s*(.-)%s*$"")
    
    -- Replace more than 2 consecutive spaces with '-'
    text = text:gsub(""%s%s%s+"", ""-"")
    
    -- Replace single spaces and double spaces with underscores
    text = text:gsub(""%s"", ""_"")
    
    return text
end","lu = require('luaunit')

function test_humaneval()
local candidate = fix_spaces
    lu.assertEquals(candidate('Example'), 'Example')
    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')
    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')
    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')
    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')
end

os.exit(lu.LuaUnit.run())"
HumanEval_141,kbp_Latn,lua,"- Kɩɖaŋ: - - Pɩwɛɛ se tɔmpiye nɖɩ ɖɩtɩŋɩɣ tɩʋ yɔɔ yɔ ɖɩkɛ tɔmpiye nɖɩ ɖɩ-taa: ['txt', 'exe', 'dll'] - Latɛŋ masɩ taa tɔmpiye 'a' nɛ 'a' nɛ 'a' nɛ 'a'.- - Pɩtɩmʋna se tɔmpiye nɖɩ ɖɩ-taa ɖɩwɛɛ yɔ ɖɩwɛɛ yem nɛ ɖɩpaɣzɩnɩ mayaɣ ŋga ka-taa - Takayaɣ ŋga ka-hɩɖɛ wɛna tɩʋ kʋɖʋmʋʋ ɖeyi ɖeyi.- - Takayaɣ mayaɣ taa mayaɣ kɔyɔ: ""0"" nɛ ""9"".- Pa-taa nabɛyɛ: - Pʊtɔbʊʊ se takayaɣ nakɛyɛ hɩɖɛ wɛ ɖeu kɔyɔ, pɩpɔzʋʋ se ɖɩwɛɛna tɔm ndʊ tɩ-tɩŋa payɩ yɔ:- Yee tɔmpiye nɖɩ ɖɩ-hɩɖɛ ɛwɛ ɖeu yɔ, ɖɩpɩsɩɣ ""ɛɛɛ"" nɛ yee ɖɩfɛyɩ ɖeu yɔ, ɖɩpɩsɩɣ ""ɛɛɛ"".- Lɩzɩ tʋmɩyɛ nɖɩ ɖɩkpaɣ tɔmpiye nɖɩ ɖɩkɛ takayaɣ nakɛyɛ hɩɖɛ yɔ nɛ ɖɩpɩsɩ -- >>> file_name_check('example.txt')
-- 'Yes'
-- >>> file_name_check('1example.dll')
-- 'No'
local function file_name_check(file_name)
","local function file_name_check(file_name)
    -- Check exactly one dot in the file name
    local dot_pos = file_name:find(""%."")
    if not dot_pos or dot_pos ~= file_name:find(""%."", dot_pos + 1) then
        return 'No'
    end
    
    -- Split the name into prefix and suffix
    local prefix = file_name:sub(1, dot_pos - 1)
    local suffix = file_name:sub(dot_pos + 1)

    -- Check if suffix is valid
    local valid_suffixes = { txt = true, exe = true, dll = true }
    if not valid_suffixes[suffix] then
        return 'No'
    end

    -- Check prefix is not empty and starts with a letter
    if #prefix == 0 or not prefix:match(""^[a-zA-Z]"") then
        return 'No'
    end

    -- Check that prefix has no more than 3 digits
    local digit_count = 0
    for i = 1, #prefix do
        if prefix:sub(i, i):match(""%d"") then
            digit_count = digit_count + 1
            if digit_count > 3 then
                return 'No'
            end
        end
    end

    return 'Yes'
end","lu = require('luaunit')

function test_humaneval()
local candidate = file_name_check
    lu.assertEquals(candidate('example.txt'), 'Yes')
    lu.assertEquals(candidate('1example.dll'), 'No')
    lu.assertEquals(candidate('s1sdf3.asd'), 'No')
    lu.assertEquals(candidate('K.dll'), 'Yes')
    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')
    lu.assertEquals(candidate('His12FILE94.exe'), 'No')
    lu.assertEquals(candidate('_Y.txt'), 'No')
    lu.assertEquals(candidate('?aREYA.exe'), 'No')
    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')
    lu.assertEquals(candidate('this_is_valid.wow'), 'No')
    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')
    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')
    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')
    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')
    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')
    lu.assertEquals(candidate('all.exe.txt'), 'No')
    lu.assertEquals(candidate('I563_No.exe'), 'Yes')
    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')
    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')
    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')
    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')
    lu.assertEquals(candidate('final..txt'), 'No')
    lu.assertEquals(candidate('final132'), 'No')
    lu.assertEquals(candidate('_f4indsartal132.'), 'No')
    lu.assertEquals(candidate('.txt'), 'No')
    lu.assertEquals(candidate('s.'), 'No')
end

os.exit(lu.LuaUnit.run())"
HumanEval_142,kbp_Latn,lua,"- Kɩɖaŋ: - ɛtɛzɩɣ lɛɣzʋʋ takayasɩ nzɩ sɩ-tɛ nimasi fɛyɩ 3 yaa 4 yɔ.- ɛ-tɛ sakɩyɛ wɛ 3 nɛ ɛkaɣ pɩsʋʋ ɛ-tɛ ɛyʊ ɛ-tɛ ɛyʊ ɛ-tɛ sakɩyɛ wɛ 4 nɛ pɩtɛkɛ ɛ-tɛ sakɩyɛ wɛ 3.Pɩtɛ lɛ, ɛyʊ ɛ-tʊmɩyɛ nɖɩ ɖɩ-taa ɛ-tɛ ɛyʊ wɛtʊ tɩŋa yɔ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa lɛ, ɛ-tɛ ɛyʊ wɛtʊ tɩŋa taa.- ""  Kɩ-taa tɔm-- >>> lst
-- {1, 2, 3}
-- >>> lst
-- {}
-- >>> lst
-- {-1, -5, 2, -1, -5}
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for i, v in ipairs(lst) do
        if i % 3 == 0 then
            sum = sum + v^2
        elseif i % 4 == 0 then
            sum = sum + v^3
        else
            sum = sum + v
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1, 2, 3}), 6)
    lu.assertEquals(candidate({1, 4, 9}), 14)
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)
    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)
    lu.assertEquals(candidate({0}), 0)
    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)
    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)
    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)
    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)
    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)
end

os.exit(lu.LuaUnit.run())"
HumanEval_143,kbp_Latn,lua,"- Kɩɖaʋ 1:- tɔm pee wena awɛ tɔm pee kɩfana taa yɔ, a-nʋmɔʋ taa lɛ, pɩwɛɛ se ɩɖɔ ɛzɩ kajalaɣ ñɩŋgʋ yɔ.- nɛ ɛ-hɛkʊ taa lɛ, kɩkɛ kajalaɣ tɔm, - nɛ pɩwɛɛ se ŋyele nɛ tɔm pee wena awɛ kajalaɣ tɔm piye taa yɔ, - tɔm pee naayɛ wɛ tɔm hʋʋ taa nɛ pɔɖɔkʋʋ-yɛ nɛ mayaɣ nakɛyɛ, - Pɩɩha-ŋ tɔm loyaɣ ŋga kɛwɛ ɛzɩ tɔm loyaɣ yɔ.-- >>> words_in_sentence('This is a test')
-- 'is'
-- Example 2:
-- >>> words_in_sentence('lets go for swimming')
-- 'go for'
-- Constraints:
--     * 1 <= len(sentence) <= 100
--     * sentence contains only letters
local function words_in_sentence(sentence)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function words_in_sentence(sentence)
    local words = {}
    for word in sentence:gmatch(""%S+"") do
        table.insert(words, word)
    end
    
    local result = {}
    for _, word in ipairs(words) do
        if is_prime(#word) then
            table.insert(result, word)
        end
    end
    
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_in_sentence
    lu.assertEquals(candidate('This is a test'), 'is')
    lu.assertEquals(candidate('lets go for swimming'), 'go for')
    lu.assertEquals(candidate('there is no place available here'), 'there is no place')
    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
    lu.assertEquals(candidate('go for it'), 'go for it')
    lu.assertEquals(candidate('here'), '')
    lu.assertEquals(candidate('here is'), 'is')
end

os.exit(lu.LuaUnit.run())"
HumanEval_144,kbp_Latn,lua,"Ŋpɩzɩɣ ŋmaɣzɩ se x nɛ n pɛkɛ hɔɔlɩŋ weyi ɩfɛyɩnɩ nimero yɔ.- < numérateur>/< dénominateur> ɖenɖe numérateur nɛ dénominateur pa-naalɛ pɛkɛ nimero waa tɩŋa nɛ pɛwɛ ɖeu yɔ.Pɩtasɩna lɛ, x nɛ n, pɛtɛyɩɣ ɖama nɛ pamaɣna hɔɔlɩŋ cikpeŋ nɛ pamaɣna-wɛ nɛ hɔɔlɩŋ cikpeŋ ɛnɩ yɔ:- x * n. Kɩ-tɛ lɛɣtʊ tʊmɩyɛ pɩsɩɣna toovenim yee x * n ɛ-tɛ lɛɣtʊ tʊmɩyɛ ɛtɛ lɛɣtʊ tʊmɩyɛ kɔyɔ nɛ false - Ña-tʋmɩyɛ lɛ se ŋlabɩnɩ tʋmɩyɛ tɔm pee kɩbana wena ayeki nɛ tɔm pee kɩbana ɩwɛɛ kɛlɛʋ yɔ .-- >>> simplify('1/5', '5/1')
-- true
-- >>> simplify('1/6', '2/1')
-- false
-- >>> simplify('7/10', '10/2')
-- false
local function simplify(x, n)
","local function simplify(x, n)
    local function parseFraction(frac)
        local num, denom = frac:match(""(%d+)/(%d+)"")
        return tonumber(num), tonumber(denom)
    end

    local xn, xd = parseFraction(x)
    local nn, nd = parseFraction(n)

    local resultNumerator = xn * nn
    local resultDenominator = xd * nd

    return resultNumerator % resultDenominator == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = simplify
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/6', '2/1'), false)
    lu.assertEquals(candidate('5/1', '3/1'), true)
    lu.assertEquals(candidate('7/10', '10/2'), false)
    lu.assertEquals(candidate('2/10', '50/10'), true)
    lu.assertEquals(candidate('7/2', '4/2'), true)
    lu.assertEquals(candidate('11/6', '6/1'), true)
    lu.assertEquals(candidate('2/3', '5/2'), false)
    lu.assertEquals(candidate('5/2', '3/5'), false)
    lu.assertEquals(candidate('2/4', '8/4'), true)
    lu.assertEquals(candidate('2/4', '4/2'), true)
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/5', '1/5'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_145,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- patɩŋnɩ pa-takayaɣ taa tɔm yɔɔ nɛ pɔñɔɔzɩ-wɛ.- Tɔzɩ se: yee wondu ndɩ ndɩ wɛna nɛ tɩ-taa nimasɩ kpɛndɩna nɛ sɩwɛɛ kɩmaŋ kɔyɔ, - nɛ pɔcɔlɩ-wɛ nɛ pɩkpaɖɩ ɛzɩ pa-kɩyakɩŋ yɔ. - Maʋ tʋmɩyɛ nɖɩ ɖɩñɔɔzʋʋ tɔmpiye nɖɩ ɖɩ-taa pama tɔmpiye nɖɩ yɔ.-- >>> order_by_points({1, 11, -1, -11, -12})
-- {-1, -11, 1, -12, 11}
-- >>> order_by_points({})
-- {}
local function order_by_points(nums)
","local function order_by_points(nums)
    local function digit_sum(num)
        local sum = 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        return sum
    end

    table.sort(nums, function(a, b)
        local sum_a = digit_sum(a)
        local sum_b = digit_sum(b)
        if sum_a == sum_b then
            -- Preserve original order if digit sums are equal
            return false
        else
            return sum_a < sum_b
        end
    end)

    return nums
end","lu = require('luaunit')

function test_humaneval()
local candidate = order_by_points
    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_146,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- kajalaɣ nɛ kɛdɛzaɣ nimero waa wɛ ndɩ ndɩ (1, 3, 5, 7, 9).- takayasɩ nzɩ sɩ-taa tɔm kɩlɩ 10 yɔ nɛ pɩtasɩna takayasɩ nzɩ sɩ-naalɛ yɔ - Ma tʋmɩyɛ nɖɩ ɖɩkpaɣɣ kɩkalʋʋ nakʋyʋ nɛ ɖɩpɩsɩɣ kɩ-tɛ tɔm yɔ -- >>> specialFilter({15, -73, 14, -15})
-- 1
-- >>> specialFilter({33, -2, -3, 45, 21, 109})
-- 2
local function specialFilter(nums)
","local function isOddDigit(num)
    local digit = num % 10
    return digit % 2 == 1
end

local function specialFilter(nums)
    local count = 0
    for _, num in ipairs(nums) do
        local absNum = math.abs(num)
        if absNum > 10 then
            local firstDigit = tonumber(tostring(absNum):sub(1, 1))
            local lastDigit = absNum % 10
            if isOddDigit(firstDigit) and isOddDigit(lastDigit) then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = specialFilter
    lu.assertEquals(candidate({5, -2, 1, -5}), 0)
    lu.assertEquals(candidate({15, -73, 14, -15}), 1)
    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)
    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)
    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_147,kbp_Latn,lua,"- Kɩɖaʋ:- nɛ a[i] + a[j] + a[k] kɛ 3 tam nabʊyʊ. - Pɩpɩsɩɣ tam nabudozo (a[i], a[j], a[k]) taa a ɖenɖe i < j < k, - Paa i weyi lɛ, ɛ-ñɩm kɔyɔ: a[i] = i * i - i + 1.- Pʊtɔbʊʊ se ŋwɛna ɛyʊ kʊyʊmʊm n. Pɩwɛɛ se ŋñɔɔzɩ ɛyʊ kʊyʊmʊm a weyi ɛ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ n yɔ.--     >>> get_max_triples(5)
--     1
-- Explanation: 
-- a = [1, 3, 7, 13, 21]
-- The only valid triple is (1, 7, 13).
local function get_max_triples(n)
","local function get_max_triples(n)
    local a = {}
    for i = 1, n do
        a[i] = i * i - i + 1
    end

    local count = 0
    for i = 1, n - 2 do
        for j = i + 1, n - 1 do
            for k = j + 1, n do
                if (a[i] + a[j] + a[k]) % 3 == 0 then
                    count = count + 1
                end
            end
        end
    end

    return count
end

-- Example Usage:
-- print(get_max_triples(5)) -- Output: 1","lu = require('luaunit')

function test_humaneval()
local candidate = get_max_triples
    lu.assertEquals(candidate(5), 1)
    lu.assertEquals(candidate(6), 4)
    lu.assertEquals(candidate(10), 36)
    lu.assertEquals(candidate(100), 53361)
end

os.exit(lu.LuaUnit.run())"
HumanEval_148,kbp_Latn,lua,"- Kɩɖaŋ - Pɩtɩkɛ tɛtʋ wandamm hɩla.- Pɩwɛɛ se tʊmɩyɛ nɖɩ ɖɩpɩsɩ ɛyʊ yɔɔ tɔm ndʊ ɛfɛyɩ yɔ yee pɩkɛ planet1 yaa planet2 - wɩsɩ ñɔtɩ kpam.- nɛ tɩ-hɛkʊ taa lɛ, tɩ-hɛkʊ taa lɛ, tɩ-hɛkʊ taa lɛ, tɩ-hɛkʊ taa lɛ, tɩ-hɛkʊ taa lɛ- Pɩwɛɛ se kɩpɩsɩɣ takayasɩ nzɩ sɩ-taa wɛ kedeŋa kpeekpe tɛtʋ wandamm yɔ nɛ sɩ-tɛ ñɩɣlɩm wondu.- Ma tʋmɩyɛ nɖɩ ɖɩkpaɣ kpɩnɛ naalɛ hɩla ɛzɩ kpɩnɛ 1 nɛ kpɩnɛ 2 yɔ.- Uranɩ nɛ Neptunɩ.- Merkuiri, pʋwayɩ lɛ Vénus, pʋwayɩ lɛ tɛtʋ, Mars, Jupiter, Saturne, - Pɩtɛ wɩsɩ ɖɩlɩyɛ taa tɛtʋ wandamm waa lutozo wɛna: wɩsɩ ɖɩlɩyɛ taa tɛtʋ wandamm waa mba pɔñɔtɩnɩ wɩsɩ yɔ .-- >>> bf('Jupiter', 'Neptune')
-- {'Saturn', 'Uranus'}
-- >>> bf('Earth', 'Mercury')
-- 'Venus'
-- >>> bf('Mercury', 'Uranus')
-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}
local function bf(planet1, planet2)
","local function bf(planet1, planet2)
    local planets = {
        ""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    }
    
    local planet_index = {}
    for i, planet in ipairs(planets) do
        planet_index[planet] = i
    end
    
    local index1 = planet_index[planet1]
    local index2 = planet_index[planet2]
    
    if not index1 or not index2 then
        return {}
    end
    
    local start_index = math.min(index1, index2) + 1
    local end_index = math.max(index1, index2) - 1
    
    local result = {}
    for i = start_index, end_index do
        table.insert(result, planets[i])
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = bf
    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})
    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})
    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Earth'), {})
    lu.assertEquals(candidate('Mars', 'Earth'), {})
    lu.assertEquals(candidate('Jupiter', 'Makemake'), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_149,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- Ŋpɩzɩɣ nɛ ŋmaɣzɩ se tɔm pee tɩŋa wɛna kɩmaŋ kʋɖʋmɩŋ.- Pɩwɛɛ se tʋmɩyɛ nɖɩ ɖɩpɩsɩna tɔmpiye nɖɩ ɖɩ-tɛ tablɛtɩ nɛ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye nɖɩ ɖɩ-taa tɔmpiye wɛɛ yɔ.- Ye tɔm pee naalɛ ɩwɛna kɩmaŋ kʋɖʋmʋʋ yɔ, ɖiyeki nɛ pama-yɛ nɛ alɩbɛɛtɩ.- ɛpɩzɩ nɛ ɛlɩzɩ takayaɣ ŋga ɛ-maɣmaɣ ɛlɩzɩ yɔ nɛ ɛcɛlɩ-ɩ.- Pɩwɛɛ se pɔñɔɔzɩ tɔm pee wena awɛ takayaɣ taa yɔ nɛ pɩkpaɖɩ.- nɛ pɩpɩzɩɣ nɛ pɩla ɛzɩ kɩ-taa tɔm yɔ.- Taafɩya kɛna tam sakɩyɛ taa taafɩya nɛ kaʋ taa kɛna tam sakɩyɛ taa.- nɛ ɛɖaɣnɩ pɩsʋʋ ɛ-tɛ taŋgbaka ŋga ka-taa ɛlɩzɩ-kɛ yɔ, nɛ ɛlɩzɩ-kɛ nɛ ɛ-taa tɔm nɛ ɛlɩzɩ-tʋ ɖɔɖɔ.- ɛñɩɣ nesi tɔm ndʋ tɩ-hɛkʊ taa wɛ ndɩ yɔ, - Ma tʋmɩyɛ nɖɩ ɖɩmʋna tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye yɔ, -- >>> list_sort({'aa', 'a', 'aaa'})
-- {'aa'}
-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})
-- {'ab', 'cd'}
local function sorted_list_sum(lst)
","local function list_sort(tbl)
    local function is_even_length(s)
        return #s % 2 == 0
    end

    local function compare_strings(a, b)
        if #a == #b then
            return a < b
        else
            return #a < #b
        end
    end

    local result = {}
    for _, v in ipairs(tbl) do
        if is_even_length(v) then
            table.insert(result, v)
        end
    end

    table.sort(result, compare_strings)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sorted_list_sum
    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})
    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})
    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})
    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})
    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})
    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})
    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_150,kbp_Latn,lua,"- Kɩɖaŋ: - ɛtɛyɩɣ ɛ-tɩ nɛ ɛ-tɛ yʊʊ yɔ pɩfɛyɩ ɖeu.- Pɩkɛna kɩlɛmʋʋ kɩlɛmʋʋ ŋgʋ kɩ-taa papɩzɩɣ nɛ palɩzɩ x yee n ɛ-tɛ lɛlʊ kɔyɔ.-- >>> x_or_y(7, 34, 12)
-- 34
-- >>> x_or_y(15, 8, 5)
-- 5
local function x_or_y(n, x, y)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    for i = 2, math.sqrt(num) do
        if num % i == 0 then
            return false
        end
    end
    return true
end

local function x_or_y(n, x, y)
    if is_prime(n) then
        return x
    else
        return y
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = x_or_y
    lu.assertEquals(candidate(7, 34, 12), 34)
    lu.assertEquals(candidate(15, 8, 5), 5)
    lu.assertEquals(candidate(3, 33, 5212), 33)
    lu.assertEquals(candidate(1259, 3, 52), 3)
    lu.assertEquals(candidate(7919, -1, 12), -1)
    lu.assertEquals(candidate(3609, 1245, 583), 583)
    lu.assertEquals(candidate(91, 56, 129), 129)
    lu.assertEquals(candidate(6, 34, 1234), 1234)
    lu.assertEquals(candidate(1, 2, 0), 0)
    lu.assertEquals(candidate(2, 2, 0), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_151,kbp_Latn,lua,"- Kɩ-taa lɛ, ɖɩtaatasɩ naʋ ɛyʊ weyi ɛ-tɛ ɛyʊ wɛʊ yɔ.- Ye ŋwɛna nimbrɩwaa yɔ, ŋpɩzɩɣ ŋlɩzɩ nimbrɩwaa mba pa-naalɛ pa-kɩɖaʋ taa yɔ.-- >>> double_the_difference({1, 3, 2, 0})
-- 10
-- >>> double_the_difference({-1, -2, 0})
-- 0
-- >>> double_the_difference({9, -2})
-- 81
-- >>> double_the_difference({0})
-- 0
-- If the input table is empty, return 0.
local function double_the_difference(lst)
","local function double_the_difference(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        if type(num) == ""number"" and num >= 0 and num % 1 == 0 and num % 2 == 1 then
            sum = sum + num * num
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = double_the_difference
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({5.0, 4.0}), 25)
    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
end

os.exit(lu.LuaUnit.run())"
HumanEval_152,kbp_Latn,lua,"- Kɩɖaʋ: - kɩ-tɛ wazaɣ kɔyɔ 0, yee pɩtɛkɛ mbʋ yɔ, kɩ-tɛ wazaɣ kɔyɔ, kɩ-tɛ wazaɣ kɛna ndɩ ndɩ nɖɩ ɖɩwɛna yɔ nɛ nɖɩ ɖɩ-taa paɖanɩ-ɩ yɔ.Ye ŋlabɩ mbʋ yɔ, ŋkaɣ naʋ se paa weyi ɛ-lɩmaɣza wɛ ndɩ nɛ lalaa ñɩna.- Paha-ŋ takayɩsɩ naalɛ nɛ paa takayɩsɩ nzɩ lɛ, sɩ-taa tɔm ndʋ ŋmaɣ yɔ, tɩ-tɩŋa tɩ-hɔɔlʋʋ kʋɖʋmʋʋ taa.- Pɩwɛɛ se ŋtɩlɩ se ɛyʋ nɔɔyʋ maɣzaɣ se ɛ-tɔm kɛ toovenim.- Pɩmʋnaa se ɖɩmaɣzɩ nɛ ɖɩmaɣzɩ. Pɩtasɩ lɛ, ye ŋcaɣ se ŋtɩlɩ mbʋ pɩ-taa ŋwɛɛ yɔ, ŋpɩzɩɣ nɛ ŋmaɣzɩ mbʋ pɩ-taa ŋwɛɛ yɔ pɩ-yɔɔ.- Maɣzɩ se ɖa-tɩŋa ɖɩtɔzʋʋ ɛzɩma pɩlakaɣ ɛyʋ alɩwaatʋ ndʋ ɛ-taa lakɩ leleŋ nɛ mbʋ pɩɖaŋ-ɩ ɖooo lɔŋ yɔ pɩ-yɔɔ yɔ .-- >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})
-- {0, 0, 0, 0, 3, 3}
-- >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})
-- {4, 4, 1, 0, 0, 6}
local function compare(game, guess)
","local function compare(game, guess)
    local differences = {}
    for i = 1, #game do
        if game[i] == guess[i] then
            differences[i] = 0
        else
            differences[i] = math.abs(game[i] - guess[i])
        end
    end
    return differences
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})
    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})
    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})
    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_153,kbp_Latn,lua,"- Kɩɖaʋ: - (Ɛ-tɛ ɖoŋ wɛ -1).- pɩpɩsɩɣ ""Slices.SERVINGSliCes"" mbʋ pʋyɔɔ yɔ ""SERVINGSliCes"" kɛna kɩwalʋʋ ŋgʋ kɩkɩlɩ ɖoŋ yɔ - tɔmpiye: ['SERVINGSliCes', 'Cheese', 'StuFfed'] pʋbʋ lɛ, pɩwɛɛ se ŋpɔzɩ tɔmpiye nɖɩ nɛ ŋwɩlɩ-ɖɩ nɛ nɔɔ taa tɔmpiye nɖɩ ɖɩ-taa ŋcaɣ yɔ.- Kɩɖaʋ nakʋyʋ yɔ: ye ŋha-ŋ ""Slices"" nɛ ŋlabɩnɩ tʋmɩyɛ lɛ, ŋnaɣ se- Lɩzɩ mbʋ pɩ-tɔm kɩlɩ cɛyʋʋ yɔ.- Ye ŋwɛna kɩwalɩ naalɛ yaa sakɩyɛ nɛ ɩwɛ ɖoŋ kʋɖʋmʋʋ yɔ, ŋtaakpaɣ- wɛ nɛ ɖoŋ.- kɩ-tɛ: ClassName.StrongestExtensionName. - Pɩwɛɛ se ŋñɩnɩ kɩwalʋʋ ŋgʋ kɩkɩlɩ ɖoŋ yɔ nɛ ŋyele nɛ kɩpɩsɩ tɔmpiye nɖɩ ɖɩ-taa.- nɛ pɩtasɩna se, pɩ-tɛ ɖoŋ wɛna CAP - SM tɔmpiye. - takayɩhatʋ ndʋ tɩ-taa pɩpɔzʋʋ se ŋla-tʋ yɔ, nɛ SM kɛ takayɩhatʋ ndʋ tɩ-taa pɩpɔzʋʋ se ŋla-tʋ yɔ - tɔmpiye nɖɩ ɖɩ-tɛ ɖoŋ wɛ ɛzɩ pɩkɔŋ yɔ: CAP kɛna mayaɣ sɔsɔɣa ŋga ka-taa pama tɔmpiye nɖɩ yɔ.- Pɩwɛɛ se patɩŋnɩ kɩwalɩtʊ yɔɔ nɛ pakpaɣ tɔm kpɛlɛkʊʊ lɛɛŋ nɛ pɛtɛzɩ-tʊ.- Pɔkɔŋ-ŋ haʋ takayaɣ ŋga ka-hɩɖɛ (kɛkɛdaɣ) nɛ ka-taa tɔm kɩwalɩtʋ.-- >>> Strongest_Extension('my_class', {'AA', 'Be', 'CC'})
-- 'my_class.AA'
local function Strongest_Extension(class_name, extensions)
","local function Strongest_Extension(class_name, extensions)
    local strongest_extension = nil
    local max_strength = nil

    for _, extension in ipairs(extensions) do
        local cap = 0
        local sm = 0
        for i = 1, #extension do
            local char = extension:sub(i, i)
            if char:match(""%u"") then
                cap = cap + 1
            elseif char:match(""%l"") then
                sm = sm + 1
            end
        end
        local strength = cap - sm
        if max_strength == nil or strength > max_strength then
            max_strength = strength
            strongest_extension = extension
        end
    end

    return class_name .. ""."" .. strongest_extension
end","lu = require('luaunit')

function test_humaneval()
local candidate = Strongest_Extension
    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')
    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')
    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')
    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')
    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')
    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')
    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')
    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')
    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')
end

os.exit(lu.LuaUnit.run())"
HumanEval_154,kbp_Latn,lua,"Pɩwɛɛ se ŋyele nɛ tɔm pee naalɛ pɩsɩɣ toovenim ye tɔm piye naalɛ ñɩnɖɛ yaa ɖɩ-tɛ lɛɣzʋʋ nakʋyʋ ɛ-tɛ kajalaɣ tɔm piye taa kɔyɔ.-- >>> cycpattern_check('abcd', 'abd')
-- false
-- >>> cycpattern_check('hello', 'ell')
-- true
-- >>> cycpattern_check('whassup', 'psus')
-- false
-- >>> cycpattern_check('abab', 'baa')
-- true
-- >>> cycpattern_check('efef', 'eeff')
-- false
-- >>> cycpattern_check('himenss', 'simen')
-- true
local function cycpattern_check(a, b)
","local function is_rotation(s1, s2)
    return #s1 == #s2 and (s1 .. s1):find(s2) ~= nil
end

local function generate_rotations(s)
    local rotations = {}
    for i = 1, #s do
        local rotation = s:sub(i) .. s:sub(1, i-1)
        table.insert(rotations, rotation)
    end
    return rotations
end

local function cycpattern_check(a, b)
    local rotations = generate_rotations(b)
    for _, rotation in ipairs(rotations) do
        if a:find(rotation) then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = cycpattern_check
    lu.assertEquals(candidate('xyzw', 'xyw'), false)
    lu.assertEquals(candidate('yello', 'ell'), true)
    lu.assertEquals(candidate('whattup', 'ptut'), false)
    lu.assertEquals(candidate('efef', 'fee'), true)
    lu.assertEquals(candidate('abab', 'aabb'), false)
    lu.assertEquals(candidate('winemtt', 'tinem'), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_155,kbp_Latn,lua,"- Kɩɖaʋ: - Ye ŋha-ɖʋ nimero waa tɩŋa yɔ, pɩsɩɣnɩ-ɖʋ nɛ ɖɩna takayɩhayʋʋ ŋgʋ kɩ-taa nimerowaa mba pɛtɛyɩɣ yɔ nɛ mba pɛtɛyɩɣ yɔ pɛwɛɛ yɔ.--     >>> even_odd_count(-12)
--     {1, 1}
--     >>> even_odd_count(123)
--     {1, 2}
local function even_odd_count(num)
","local function even_odd_count(num)
    local even_count, odd_count = 0, 0
    num = math.abs(num)  -- remove the sign of the number
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            even_count = even_count + 1
        else
            odd_count = odd_count + 1
        end
        num = math.floor(num / 10)
    end
    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_count
    lu.assertEquals(candidate(7), {0, 1})
    lu.assertEquals(candidate(-78), {1, 1})
    lu.assertEquals(candidate(3452), {2, 2})
    lu.assertEquals(candidate(346211), {3, 3})
    lu.assertEquals(candidate(-345821), {3, 3})
    lu.assertEquals(candidate(-2), {1, 0})
    lu.assertEquals(candidate(-45347), {2, 3})
    lu.assertEquals(candidate(0), {1, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_156,kbp_Latn,lua,"- Kɩɖaŋ: - Paɖɩzɩɣ: 1 <= num <= 1000 - nɛ ŋyele nɛ pama-kʋ nɛ mayaɣ cikpelaɣ.- Ye ŋha-ɖʋ kɩmaŋ mayaɣ kɔyɔ, ŋpɩzɩɣ ŋlɩzɩ-kɛ nɛ Room n̄ɩnzɩ taa ɛzɩ n̄ɩɣyʋʋ ŋgʋ kɩwɛna yɔ.-- >>> int_to_mini_roman(19)
-- 'xix'
-- >>> int_to_mini_roman(152)
-- 'clii'
-- >>> int_to_mini_roman(426)
-- 'cdxxvi'
local function int_to_mini_roman(number)
","local function int_to_mini_roman(number)
    local roman_numerals = {
        {1000, ""m""},
        {900, ""cm""},
        {500, ""d""},
        {400, ""cd""},
        {100, ""c""},
        {90, ""xc""},
        {50, ""l""},
        {40, ""xl""},
        {10, ""x""},
        {9, ""ix""},
        {5, ""v""},
        {4, ""iv""},
        {1, ""i""}
    }
    
    local result = {}
    for _, value_pair in ipairs(roman_numerals) do
        local value, symbol = unpack(value_pair)
        while number >= value do
            number = number - value
            table.insert(result, symbol)
        end
    end
    
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = int_to_mini_roman
    lu.assertEquals(candidate(19), 'xix')
    lu.assertEquals(candidate(152), 'clii')
    lu.assertEquals(candidate(251), 'ccli')
    lu.assertEquals(candidate(426), 'cdxxvi')
    lu.assertEquals(candidate(500), 'd')
    lu.assertEquals(candidate(1), 'i')
    lu.assertEquals(candidate(4), 'iv')
    lu.assertEquals(candidate(43), 'xliii')
    lu.assertEquals(candidate(90), 'xc')
    lu.assertEquals(candidate(94), 'xciv')
    lu.assertEquals(candidate(532), 'dxxxii')
    lu.assertEquals(candidate(900), 'cm')
    lu.assertEquals(candidate(994), 'cmxciv')
    lu.assertEquals(candidate(1000), 'm')
end

os.exit(lu.LuaUnit.run())"
HumanEval_157,kbp_Latn,lua,"- Kɩɖaʋ: - Pɩkɛ 90 degré.- Hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩ-taa lɛ, hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩ-taa lɛ, hɔɔlʊʊ ŋgʊ kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ, kɩ-taa lɛ.- hɔɔlɩŋ ɛnɩ ɩwɛ ɛzɩ tam nabudozo yɔ, ye pɩtɛkɛ mbʋ yɔ, pɩkɛ cɛtɩm tɔm.- Yee ɖɩkpaɣ tɔmpiye nɖɩ ɖɩ-hɔɔlɩŋ naadozo yɔ, ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ toovenim tɔm kɔyɔ, tɔmpiye nɖɩ ɖɩ-hɔɔlɩŋ naadozo yɔ, ɖɩpɩsɩɣ tɔmpiye nɖɩ ɖɩ-tɛ toovenim tɔm yɔ.-- >>> right_angle_triangle(3, 4, 5)
-- true
-- >>> right_angle_triangle(1, 2, 3)
-- false
local function right_angle_triangle(a, b, c)
","local function right_angle_triangle(a, b, c)
    -- Sort the sides to make sure we always compare the largest with the sum of squares of the other two
    local sides = {a, b, c}
    table.sort(sides)

    -- Check the Pythagorean theorem
    return sides[1]^2 + sides[2]^2 == sides[3]^2
end","lu = require('luaunit')

function test_humaneval()
local candidate = right_angle_triangle
    lu.assertEquals(candidate(3, 4, 5), true)
    lu.assertEquals(candidate(1, 2, 3), false)
    lu.assertEquals(candidate(10, 6, 8), true)
    lu.assertEquals(candidate(2, 2, 2), false)
    lu.assertEquals(candidate(7, 24, 25), true)
    lu.assertEquals(candidate(10, 5, 7), false)
    lu.assertEquals(candidate(5, 12, 13), true)
    lu.assertEquals(candidate(15, 8, 17), true)
    lu.assertEquals(candidate(48, 55, 73), true)
    lu.assertEquals(candidate(1, 1, 1), false)
    lu.assertEquals(candidate(2, 2, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_158,kbp_Latn,lua,"- takayɩsɩ taa lɛ, ŋyele nɛ ɖɩna takayɩsɩ nzɩ sɩ-taa tɔm pee kɩlɩɣ ɖɔʋ yɔ.Ye ŋwɛna tɔm pee kɩkpɛdaa sakɩyɛ yɔ, ŋpɩzɩɣ ŋtɩŋnɩ tɔm pee kɩkpɛdaa sakɩyɛ yɔɔ nɛ ŋlɩzɩ-yɛ.- Tɔm pee ndɩ ndɩ wɛ tɔm hʋʋ kʋnɛ kɩ-taa.- Ma tʋmɩyɛ nɖɩ ɖɩmʋɣ tɔmpiye nɖɩ ɖɩ-tɛ tablɛtɩ yɔ.-- >>> find_max({'name', 'of', 'string'})
-- 'string'
-- >>> find_max({'name', 'enam', 'game'})
-- 'enam'
-- >>> find_max({'aaaaaaa', 'bb', 'cc'})
-- 'aaaaaaa'
local function find_max(words)
","local function find_max(words)
    local function unique_characters_count(word)
        local char_set = {}
        for char in word:gmatch('.') do
            char_set[char] = true
        end
        local count = 0
        for _ in pairs(char_set) do
            count = count + 1
        end
        return count
    end

    local max_word = ''
    local max_unique_count = 0

    for _, word in ipairs(words) do
        local unique_count = unique_characters_count(word)
        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word) then
            max_word = word
            max_unique_count = unique_count
        end
    end

    return max_word
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_max
    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
    lu.assertEquals(candidate({'b'}), 'b')
    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
end

os.exit(lu.LuaUnit.run())"
HumanEval_159,kbp_Latn,lua,"- Kɩɖaʋ: - ye ŋfɛyɩnɩ karɩbɔɔnɩ sakɩyɛ yɔ, ŋkaɣ tɔɔʋ karɩbɔɔnɩ tɩŋa, ɛlɛ ñɔɔsɩ kaɣ-ŋ wɩʋ.- Kʋdɔmɩŋ weyi ɩ-taa ŋwɛɛ yɔ [- ŋpɩsɩɣ- i takayaɣ ŋga ka- taa ŋnaɣ [ tɔɔnasɩ nzɩ ŋtɔɔ yɔ sɩ- tɔɔnasɩ tɩŋa, - ɛlɛ lɛɛlɛɛyɔ lɛ, pɩwɛɛ se ŋtɔɔ karɩbɔɔnɩ nɛ pɩsa nɛ ŋtɛzɩ tɔɔnaɣ tɔɔʋ.- Ŋkɛ ñɔɔsɩ wɩɣ-ŋ nɛ ŋtɛm tɔɔʋ kaarooti sakɩyɛ.-- >>> eat(5, 6, 10)
-- {11, 4}
-- >>> eat(4, 8, 9)
-- {12, 1}
-- >>> eat(1, 10, 10)
-- {11, 0}
-- >>> eat(2, 11, 5)
-- {7, 0}
-- Variables:
-- @number : integer
--     the number of carrots that you have eaten.
-- @need : integer
--     the number of carrots that you need to eat.
-- @remaining : integer
--     the number of remaining carrots thet exist in stock
-- Constrain:
-- * 0 <= number <= 1000
-- * 0 <= need <= 1000
-- * 0 <= remaining <= 1000
-- Have fun :)
local function eat(number, need, remaining)
","local function eat(number, need, remaining)
    local totalEaten
    local leftOver
    
    if remaining >= need then
        totalEaten = number + need
        leftOver = remaining - need
    else
        totalEaten = number + remaining
        leftOver = 0
    end
    
    return {totalEaten, leftOver}
end","lu = require('luaunit')

function test_humaneval()
local candidate = eat
    lu.assertEquals(candidate(5, 6, 10), {11, 4})
    lu.assertEquals(candidate(4, 8, 9), {12, 1})
    lu.assertEquals(candidate(1, 10, 10), {11, 0})
    lu.assertEquals(candidate(2, 11, 5), {7, 0})
    lu.assertEquals(candidate(4, 5, 7), {9, 2})
    lu.assertEquals(candidate(4, 5, 1), {5, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_160,kbp_Latn,lua,"- Kɩ-tɛ ɛyʊ weyi ɛ-tɛ ɛyʊ wɛʊ yɔ, ɛwɛna ɛyʊ kʊyʊmʊm, nɛ ɛ-tɛ ɛyʊ weyi ɛ-tɛ ɛyʊ wɛʊ yɔ, ɛwɛna ɛyʊ kʊyʊmʊm naalɛ.- Ɛyʋ weyi ɛ-tʋmɩyɛ wɛ ndɩ nɛ ɛ-tʋmɩyɛ yɔ, ɛkɛ ɛ-tʋmɩyɛ nɖɩ ɖɩ-taa ɛ-tʋmɩyɛ wɛ ndɩ nɛ ɛ-tʋmɩyɛ yɔ.- Kɩ-tɛ kpɩnɛ nɖɩ ɖɩ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ kpɩnɛ nɖɩ ɖɩ-tɛ kpɩnɛ nɖɩ ɖɩ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ kpɩnɛ nɖɩ ɖɩ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ kpɩnɛ nɖɩ ɖɩ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ kpɩnɛ nɖɩ ɖɩ-ɖaɣlɩkɩŋ talɩɣ ɛzɩ kpɩnɛ nɖɩ ɖɩ-ɖaɣlɩkɩŋ yɔ.- Cɔnɩ hɔɔlʋʋ: - => Kɩ-tɛ lɩmaɣzɩyɛ = 9 - pɩlɩɣna 2 + 3 * 4 - 5 - takayɩhatʋ = [2, 3, 4, 5] - ɛyʊ weyi ɛ-tɛ tɔm wɛ ndɩ yɔ['+', '*', '-'] - Kɩɖaʋ: - Kpɛlɩ kpɛlɛkʋʋ (**) - Tɛtʊ tʊnɛ tɩ-taa tɛtʊ sɔsɔtʊ payaɣ se ().- Kɩwalʋʋ (*) - Kɩ-taa tɔm ( - ) - Kɩ-tɛ nɛ pɩ-tɛ nɛ pɩ-tɛ nɛ pɩ-tɛ nɛ pɩ-tɛ nɛ pɩ-tɛ- Algebra taa tʋma kɩbana: - nɛ ɛɖaɣnɩ pɩsʋʋ nɛ ɛlɩzɩ tɔm ndʋ tɩ-taa ɛlaba yɔ.- Takayaɣ naalɛ ñɩŋga kɛna takayasɩ kɩkalasɩ takayasɩ.Kajalaɣ n̄ɩŋgʋ taa lɛ, pama algebra tʋmɩyɛ nɛ local function do_algebra(operator, operand)
","local function do_algebra(operator, operand)
    local expression = tostring(operand[1])
    
    for i = 1, #operator do
        expression = expression .. "" "" .. operator[i] .. "" "" .. operand[i+1]
    end
    
    return load(""return "" .. expression)()
end

-- Example usage:
-- local operator = {'+', '*', '-'}
-- local operand = {2, 3, 4, 5}
-- local result = do_algebra(operator, operand)
-- print(result) -- Output: 9","lu = require('luaunit')

function test_humaneval()
local candidate = do_algebra
    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)
    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)
    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)
end

os.exit(lu.LuaUnit.run())"
HumanEval_161,kbp_Latn,lua,"- Kɩɖaŋ - Pɩwɛɛ se tʋmɩyɛ nɖɩ ɖɩpɩsɩɣ tɔm pee wena awɛ pɩ-taa yɔ.- Ye tɔmpiye nɖɩ ɖɩfɛyɩna masɩ nasɩyɩ yɔ, pɛlɛɣzɩ-ɖɩ nɛ ɖɩpɩsɩ.- Pɩtɛkɛ mbʋ yɔ, yele-kʋ nɛ kɩwɛɛ mbʋ.- yee s[i] kɛna mayaɣ kɔyɔ, pɛlɛɣzɩ-kɛ nɛ pɩɖɛɛna hɛkʋ nɛ pɩkɔɔ pɩtalɩ hɛkʋ nɛ hɛkʋ, - Pɩɩha-ŋ waɖɛ se ŋla mbʋ ŋsɔɔlaa yɔ.-- >>> solve('1234')
-- '4321'
-- >>> solve('ab')
-- 'AB'
-- >>> solve('#a@C')
-- '#A@c'
local function solve(s)
","local function solve(s)
  local has_letters = false
  local result = {}
  
  for i = 1, #s do
    local char = s:sub(i, i)
    if char:match(""%a"") then
      has_letters = true
      if char:lower() == char then
        table.insert(result, char:upper())
      else
        table.insert(result, char:lower())
      end
    else
      table.insert(result, char)
    end
  end
  
  if has_letters then
    return table.concat(result)
  else
    return s:reverse()
  end
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate('AsDf'), 'aSdF')
    lu.assertEquals(candidate('1234'), '4321')
    lu.assertEquals(candidate('ab'), 'AB')
    lu.assertEquals(candidate('#a@C'), '#A@c')
    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')
    lu.assertEquals(candidate('#6@2'), '2@6#')
    lu.assertEquals(candidate('#$a^D'), '#$A^d')
    lu.assertEquals(candidate('#ccc'), '#CCC')
end

os.exit(lu.LuaUnit.run())"
HumanEval_162,kbp_Latn,lua,"- Yee 'text' ɛkɛ matʋ kɩtatasɩ yɔ, pɩpɩsɩɣ nil. - Ye ŋha-ɩ tɔmpiye 'text' kɔyɔ, ŋpɩsɩɣ-ɖɩ nɛ md5 tɔmpiye nɖɩ ɖɩ-tɛ tɔmpiye. -- >>> string_to_md5('Hello world')
-- '3e25960a79dbc69b674cd4ec67a72c62'
local function string_to_md5(text)
","local md5 = require(""md5"")

local function string_to_md5(text)
    if text == """" then
        return nil
    end
    return md5.sumhexa(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_to_md5
    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
    lu.assertEquals(candidate(''), None)
    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')
    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')
end

os.exit(lu.LuaUnit.run())"
HumanEval_163,kbp_Latn,lua,"- Kɩɖaʋ nakʋyʋ yɔ:- nɛ b, pɩlɩɣna ɛzɩma pɩpaɣlɩɣ yɔ. - Ye ŋha-ɖʋ ɛtɛrɩyɔm waa naalɛ a nɛ b, ɖitiyiɣ a nɛ b pɛ-hɛkʋ taa ɛtɛrɩyɔm waa mba pa-taa lɛ, pa-taa lɛ, a nɛ b pɛtɛrɩyɔm waa mba pa-taa lɛ, pa-taa lɛ, a nɛ b pɛtɛrɩyɔm waa mba pa-taa lɛ, pa-taa lɛ, a nɛ b pɛtɛrɩyɔm waa mba pa-taa lɛ-- >>> generate_integers(2, 8)
-- {2, 4, 6, 8}
-- >>> generate_integers(8, 2)
-- {2, 4, 6, 8}
-- >>> generate_integers(10, 14)
-- {}
local function generate_integers(a, b)
","local function generate_integers(a, b)
    local evens = {}
    local start, finish = math.min(a, b), math.max(a, b)
    
    for i = start, finish do
        if i % 2 == 0 then
            table.insert(evens, i)
        end
    end
    
    return evens
end","lu = require('luaunit')

function test_humaneval()
local candidate = generate_integers
    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})
    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(17, 89), {})
end

os.exit(lu.LuaUnit.run())"
