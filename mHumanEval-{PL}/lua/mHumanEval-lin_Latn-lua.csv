task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,lin_Latn,lua,"- motango ya motuya oyo epesami. - Talá soki na liste ya mitángo, ezali na mitángo mibale oyo ezali penepene koleka -- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
-- false
-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
-- true
local function has_close_elements(numbers, threshold)
","local function has_close_elements(numbers, threshold)
    for i = 1, #numbers do
        for j = i + 1, #numbers do
            if math.abs(numbers[i] - numbers[j]) < threshold then
                return true
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = has_close_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_1,lin_Latn,lua,"- Kotala te bisika nyonso oyo ezali na kati ya maloba. - Bituluku ya bato oyo bazali na bango esika moko ezali na boyokani (mwa liboke mokomoko ya liboke oyo ezali polele ekangami malamu) mpe ezali na kati ya moko te.- kokabola bituluku yango na milɔngɔ́ ya maloba mpe kozongisa mesa ya milɔngɔ́ yango. - Na fonction oyo, tokotinda string oyo ezali na ba parenthèse ebele.-- >>> separate_paren_groups('( ) (( )) (( )( ))')
-- {'()', '(())', '(()())'}
local function separate_paren_groups(paren_string)
","local function separate_paren_groups(paren_string)
    local result = {}
    local balance = 0
    local current_group = {}

    for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        
        if char == '(' then
            balance = balance + 1
        elseif char == ')' then
            balance = balance - 1
        end

        if char ~= ' ' then
            table.insert(current_group, char)
        end
        
        if balance == 0 and #current_group > 0 then
            table.insert(result, table.concat(current_group))
            current_group = {}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = separate_paren_groups
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_2,lin_Latn,lua,"- Zongisá eteni ya nimero oyo ezali na nsima ya nɔ́rdi. - (mwa ndambo oyo etikali ezalaka ntango nyonso moke koleka 1). - mpe eteni ya motuya mobimba (motango ya monene ya motuya mobimba oyo ezali moke koleka motango oyo epesami) mpe ya decimal - Soki motango ya point flottant ezali ya malamu, tokoki kokomisa yango na -- >>> truncate_number(3.5)
-- 0.5
local function truncate_number(number)
","local function truncate_number(number)
    local integer_part = math.floor(number)
    local decimal_part = number - integer_part
    return decimal_part
end","lu = require('luaunit')

function test_humaneval()
local candidate = truncate_number
    lu.assertEquals(candidate(3.5), 0.5)
    lu.assertEquals(candidate(1.25), 0.25)
    lu.assertEquals(candidate(123.0), 0.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_3,lin_Latn,lua,"- na esika wana, esengeli kofuta true. soki te, esengeli kofuta false. Mosala na yo ezali ya koyeba soki na ntango moko boye salde ya compte ekiti na nse ya zero, mpe - Bapesi yo liste ya mbongo oyo otyaki mpe oyo obimisaki na banki oyo ebandi na -- >>> below_zero({1, 2, 3})
-- false
-- >>> below_zero({1, 2, -4, 5})
-- true
local function below_zero(operations)
","local function below_zero(operations)
    local balance = 0
    for _, operation in ipairs(operations) do
        balance = balance + operation
        if balance < 0 then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_zero
    lu.assertEquals(candidate({}), false)
    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)
    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)
    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)
    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_4,lin_Latn,lua,"- MAD = mwayene.  x - x_mwayene. - elembo mpe esika ya katikati (na ndakisa, katikati ya eloko): - Etali na kati ya ba déviation absolue ezali na kati ya ba différence absolue kati na moko na moko - pene na katikati ya ba données oyo. - Mpo na table ya ba nombre ya entrée, tala moyen ya déviation absolue -- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
-- 1.0
local function mean_absolute_deviation(numbers)
","local function mean_absolute_deviation(numbers)
    local sum = 0
    local count = #numbers
    
    -- Calculate the mean
    for _, number in ipairs(numbers) do
        sum = sum + number
    end
    local mean = sum / count
    
    -- Calculate the mean absolute deviation
    local total_deviation = 0
    for _, number in ipairs(numbers) do
        total_deviation = total_deviation + math.abs(number - mean)
    end
    
    return total_deviation / count
end

-- Example usage
-- print(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})) -- Output: 1.0","lu = require('luaunit')

function test_humaneval()
local candidate = mean_absolute_deviation
    lu.assertEquals(candidate({1.0, 2.0}), 0.5)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_5,lin_Latn,lua,"- Kotya motango ""delimiter"" kati na biloko mibale ya molongo ya mesa ya kobakisa ∀mitango"" -- >>> intersperse({}, 4)
-- {}
-- >>> intersperse({1, 2, 3}, 4)
-- {1, 4, 2, 4, 3}
local function intersperse(numbers, delimeter)
","local function intersperse(numbers, delimeter)
    local result = {}
    for i = 1, #numbers do
        table.insert(result, numbers[i])
        if i < #numbers then
            table.insert(result, delimeter)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersperse
    lu.assertEquals(candidate({}, 7), {})
    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_6,lin_Latn,lua,"- Na ndakisa (() (()) ezali na nivo mibale ya kotimola nzokande ((())) ezali na misato. - Mpo na etuluku mokomoko, monisá na elembo ya nse esika oyo ba parenthèse ezali. - Na kati ya fonction oyo, ezali na string oyo ezali na ba groupes ebele mpo na ba parenthèse oyo ekabwani na espace.-- >>> parse_nested_parens('(()()) ((())) () ((())()())')
-- {2, 3, 1, 3}
local function parse_nested_parens(paren_string)
","local function parse_nested_parens(paren_string)
    local results = {}
    for group in paren_string:gmatch(""%S+"") do
        local max_depth = 0
        local current_depth = 0
        for char in group:gmatch(""."") do
            if char == '(' then
                current_depth = current_depth + 1
                if current_depth > max_depth then
                    max_depth = current_depth
                end
            elseif char == ')' then
                current_depth = current_depth - 1
            end
        end
        table.insert(results, max_depth)
    end
    return results
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_nested_parens
    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})
    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})
    lu.assertEquals(candidate('(()(())((())))'), {4})
end

os.exit(lu.LuaUnit.run())"
HumanEval_7,lin_Latn,lua,"- Kofongola na kati ya liste ya ba string oyo ezali na ba string oyo ezali na kati ya liste ya ba string -- >>> filter_by_substring({}, 'a')
-- {}
-- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
-- {'abc', 'bacd', 'array'}
local function filter_by_substring(strings, substring)
","local function filter_by_substring(strings, substring)
    local result = {}
    for _, str in ipairs(strings) do
        if string.find(str, substring) then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_substring
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_8,lin_Latn,lua,"- Motango ya mpamba esengeli kozala 0 mpe motango ya mpamba esengeli kozala 1. - Mpo na table ya ba integers, kozongisa table oyo ezali na somme mpe produit ya ba integers nionso na table. -- >>> sum_product({})
-- {0, 1}
-- >>> sum_product({1, 2, 3, 4})
-- {10, 24}
local function sum_product(numbers)
","local function sum_product(numbers)
    local sum = 0
    local product = 1

    for _, number in ipairs(numbers) do
        sum = sum + number
        product = product * number
    end

    return {sum, product}
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_product
    lu.assertEquals(candidate({}), {0, 1})
    lu.assertEquals(candidate({1, 1, 1}), {3, 1})
    lu.assertEquals(candidate({100, 0}), {100, 0})
    lu.assertEquals(candidate({3, 5, 7}), {15, 105})
    lu.assertEquals(candidate({10}), {10, 10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_9,lin_Latn,lua,"- na molɔngɔ́. - Na table ya ba integres, tobimisi table ya ba éléments maximaux ya rolling oyo ezwami kino na moment oyo epesami -- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})
-- {1, 2, 3, 3, 3, 4, 4}
local function rolling_max(numbers)
","local function rolling_max(numbers)
    local result = {}
    local max_so_far = numbers[1]
    
    for i = 1, #numbers do
        if numbers[i] > max_so_far then
            max_so_far = numbers[i]
        end
        table.insert(result, max_so_far)
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = rolling_max
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})
    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})
end

os.exit(lu.LuaUnit.run())"
HumanEval_10,lin_Latn,lua,"- - Kotia na nsuka ya molongo ya maloba ya liboso ya molongo oyo ezali liboso ya maloba ya nsuka ya palindrome. - - Luká postfix ya molayi ya molayi oyo epesami oyo ezali palindrome. - Likanisi ya algorithme ezali pete: - Luká palindrome ya mokuse oyo ebandi na molɔngɔ oyo epesami. -- >>> make_palindrome('')
-- ''
-- >>> make_palindrome('cat')
-- 'catac'
-- >>> make_palindrome('cata')
-- 'catac'
local function make_palindrome(string)
","local function make_palindrome(s)
    -- Function to check if a given string is a palindrome
    local function is_palindrome(str)
        local len = #str
        for i = 1, len // 2 do
            if str:sub(i, i) ~= str:sub(len - i + 1, len - i + 1) then
                return false
            end
        end
        return true
    end

    local len = #s
    -- Find the longest postfix of the string that is a palindrome
    for i = len, 1, -1 do
        if is_palindrome(s:sub(i)) then
            local prefix = s:sub(1, i - 1)
            -- Reverse the prefix and append to the original string
            return s .. prefix:reverse()
        end
    end

    -- If the string is empty or no palindrome is found (shouldn't happen as 
    -- an empty or single character string is a palindrome), return the string itself
    return s
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_palindrome
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('x'), 'x')
    lu.assertEquals(candidate('xyz'), 'xyzyx')
    lu.assertEquals(candidate('xyx'), 'xyx')
    lu.assertEquals(candidate('jerry'), 'jerryrrej')
end

os.exit(lu.LuaUnit.run())"
HumanEval_11,lin_Latn,lua,"- Kosala XOR binal na ba input oyo mpe kozongisa résultat lokola string. - Ba input ezali ba strings mibale a mpe b oyo ezali kaka na 1 mpe 0 -- >>> string_xor('010', '110')
-- '100'
local function string_xor(a, b)
","local function string_xor(a, b)
    local result = {}
    for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
            table.insert(result, '0')
        else
            table.insert(result, '1')
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_xor
    lu.assertEquals(candidate('111000', '101010'), '010010')
    lu.assertEquals(candidate('1', '1'), '0')
    lu.assertEquals(candidate('0101', '0000'), '0101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_12,lin_Latn,lua,"- milɔngɔ́ ya molai moko. Zongisa nil soki mesa ya kobakisa ezali mpamba. Na kati ya liste ya ba string, kozongisa oyo eleki molai.-- >>> longest({})
-- None
-- >>> longest({'a', 'b', 'c'})
-- 'a'
-- >>> longest({'a', 'bb', 'ccc'})
-- 'ccc'
local function longest(strings)
","local function longest(strings)
    if #strings == 0 then
        return nil
    end

    local max_len = 0
    local longest_str = nil

    for _, str in ipairs(strings) do
        if #str > max_len then
            max_len = #str
            longest_str = str
        end
    end

    return longest_str
end","lu = require('luaunit')

function test_humaneval()
local candidate = longest
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')
    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')
end

os.exit(lu.LuaUnit.run())"
HumanEval_13,lin_Latn,lua,"- Zongisa motango ya monene ya ba commun divizere ya ba integres mibale a mpe b -- >>> greatest_common_divisor(3, 5)
-- 1
-- >>> greatest_common_divisor(25, 15)
-- 5
local function greatest_common_divisor(a, b)
","local function greatest_common_divisor(a, b)
    while b ~= 0 do
        local temp = b
        b = a % b
        a = temp
    end
    return a
end","lu = require('luaunit')

function test_humaneval()
local candidate = greatest_common_divisor
    lu.assertEquals(candidate(3, 7), 1)
    lu.assertEquals(candidate(10, 15), 5)
    lu.assertEquals(candidate(49, 14), 7)
    lu.assertEquals(candidate(144, 60), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_14,lin_Latn,lua,"- Ekomema ba préfixes nyonso kobanda na oyo ya mokuse kino oyo ya molai ya string ya kobakisa -- >>> all_prefixes('abc')
-- {'a', 'ab', 'abc'}
local function all_prefixes(string)
","local function all_prefixes(string)
    local prefixes = {}
    for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
    end
    return prefixes
end","lu = require('luaunit')

function test_humaneval()
local candidate = all_prefixes
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_15,lin_Latn,lua,"- Ekomema na molongo oyo ezali na mitango oyo ekeseni na esika kobanda 0 kino n. -- >>> string_sequence(0)
-- '0'
-- >>> string_sequence(5)
-- '0 1 2 3 4 5'
local function string_sequence(n)
","local function string_sequence(n)
    local result = {}
    for i = 0, n do
        table.insert(result, tostring(i))
    end
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_sequence
    lu.assertEquals(candidate(0), '0')
    lu.assertEquals(candidate(3), '0 1 2 3')
    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')
end

os.exit(lu.LuaUnit.run())"
HumanEval_16,lin_Latn,lua,"- Soki bapesi yo string, luká koyeba soki ezali na balɛtrɛ boni (ata soki ezali na makomi minene to ya mike) -- >>> count_distinct_characters('xyzXYZ')
-- 3
-- >>> count_distinct_characters('Jerry')
-- 4
local function count_distinct_characters(string)
","local function count_distinct_characters(string)
    local char_set = {}
    local lower_string = string:lower()
    for i = 1, #lower_string do
        local char = lower_string:sub(i, i)
        char_set[char] = true
    end
    local count = 0
    for _ in pairs(char_set) do
        count = count + 1
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_distinct_characters
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abcde'), 5)
    lu.assertEquals(candidate('abcdecadeCADE'), 5)
    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)
    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)
end

os.exit(lu.LuaUnit.run())"
HumanEval_17,lin_Latn,lua,"- ' ' ' ' ' ' ' ' ' ' ' - ' ' ' ' ' ' ' ' ' ' ' - ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '- 'o sacer' - ndambo ya note, eumelaka na biteni mibale - 'o' - note mobimba, eumelaka ngonga minei - Talá lisapo oyo: - ya nsuka te. - Mosala na yo ezali ya ko parser singa oyo mpe kozongisa liste ya ba integers oyo ekokani na motango ya ba battements oyo moko na moko azali kosala - Na kati ya fonctions yango, ezali na maloba oyo ezali komonisa makomi ya miziki na lolenge moko ya ASCII.-- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
local function parse_music(music_string)
","local function parse_music(music_string)
    local beats = {}
    for note in music_string:gmatch(""%S+"") do
        if note == 'o' then
            table.insert(beats, 4)
        elseif note == 'o|' then
            table.insert(beats, 2)
        elseif note == '.|' then
            table.insert(beats, 1)
        end
    end
    return beats
end","lu = require('luaunit')

function test_humaneval()
local candidate = parse_music
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
end

os.exit(lu.LuaUnit.run())"
HumanEval_18,lin_Latn,lua,"- Luká mbala boni molɔngɔ́ ya mikemike ekoki komonana na molɔngɔ́ ya ebandeli.-- >>> how_many_times('', 'a')
-- 0
-- >>> how_many_times('aaa', 'a')
-- 3
-- >>> how_many_times('aaaa', 'aa')
-- 3
local function how_many_times(string, substring)
","local function how_many_times(string, substring)
    if substring == '' then return 0 end
    local count = 0
    local start = 1

    while true do
        local found = string:find(substring, start, true)
        if not found then
            break
        end
        count = count + 1
        start = found + 1
    end

    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = how_many_times
    lu.assertEquals(candidate('', 'x'), 0)
    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
    lu.assertEquals(candidate('cacacacac', 'cac'), 4)
    lu.assertEquals(candidate('john doe', 'john'), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_19,lin_Latn,lua,"- Zongisa molɔngɔ́ na mitángo oyo ekomami na molɔngɔ́ kobanda na moke kino na monene - Ba choix ya malamu ezali 'zéro', 'un', 'deux', 'trois', 'quatre', 'cinq', 'six', 'sept', 'huit' mpe 'neuf'. - Na kati ya mokanda, ezali na mitángo kobanda na ""zéro"" tii na ""nueve"".-- >>> sort_numbers('three one five')
-- 'one three five'
local function sort_numbers(numbers)
","local function sort_numbers(numbers)
    local number_map = {
        zero = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9
    }

    local number_names = {
        [0] = 'zero',
        [1] = 'one',
        [2] = 'two',
        [3] = 'three',
        [4] = 'four',
        [5] = 'five',
        [6] = 'six',
        [7] = 'seven',
        [8] = 'eight',
        [9] = 'nine'
    }

    local words = {}
    for word in numbers:gmatch(""%S+"") do
        table.insert(words, word)
    end

    table.sort(words, function(a, b)
        return number_map[a] < number_map[b]
    end)

    local sorted_numbers = {}
    for _, word in ipairs(words) do
        table.insert(sorted_numbers, number_names[number_map[word]])
    end

    return table.concat(sorted_numbers, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_numbers
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('three'), 'three')
    lu.assertEquals(candidate('three five nine'), 'three five nine')
    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')
    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')
end

os.exit(lu.LuaUnit.run())"
HumanEval_20,lin_Latn,lua,"- mosusu mpe kozongisa yango na molongo (mwa motuya moke, motuya monene).- Na liste ya ba numéros oyo epesami (oyo ezali na molai ya mibale) poná mpe zongisa mibale oyo ezali pene na moko na moko -- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})
-- {2.0, 2.2}
-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})
-- {2.0, 2.0}
local function find_closest_elements(numbers)
","local function find_closest_elements(numbers)
    table.sort(numbers)
    local min_diff = math.huge
    local result = {}

    for i = 1, #numbers - 1 do
        local diff = numbers[i + 1] - numbers[i]
        if diff < min_diff then
            min_diff = diff
            result = {numbers[i], numbers[i + 1]}
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_closest_elements
    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})
    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})
    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_21,lin_Latn,lua,"- na boye ete motango ya moke ekokoma 0 mpe motango ya monene ekokoma 1 - Soki ozwi liste ya mitángo (ya biloko mibale to koleka), salelá transformation linéaire na liste yango, -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
-- {0.0, 0.25, 0.5, 0.75, 1.0}
local function rescale_to_unit(numbers)
","local function rescale_to_unit(numbers)
    local min_val = math.huge
    local max_val = -math.huge

    -- Find the min and max values in the table
    for _, num in ipairs(numbers) do
        if num < min_val then
            min_val = num
        end
        if num > max_val then
            max_val = num
        end
    end

    local scale = max_val - min_val

    -- Apply the transformation
    local transformed = {}
    for i, num in ipairs(numbers) do
        transformed[i] = (num - min_val) / scale
    end

    return transformed
end","lu = require('luaunit')

function test_humaneval()
local candidate = rescale_to_unit
    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
end

os.exit(lu.LuaUnit.run())"
HumanEval_22,lin_Latn,lua,"- Kofongola na molɔngɔ́ ya motuya nyonso oyo epesami na molɔngɔ́ ya motuya ya motuya bobele mpo na mitángo ya mobimba -- >>> filter_integers({'a', 3.14, 5})
-- {5}
-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
-- {1, 2, 3}
local function filter_integers(values)
","local function filter_integers(values)
    local result = {}
    for _, value in ipairs(values) do
        if type(value) == ""number"" and math.type(value) == ""integer"" then
            table.insert(result, value)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_integers
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_23,lin_Latn,lua,"- Boumeli ya molɔngɔ́ oyo epesami -- >>> strlen('')
-- 0
-- >>> strlen('abc')
-- 3
local function strlen(string)
","local function strlen(string)
    return #string
end","lu = require('luaunit')

function test_humaneval()
local candidate = strlen
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('x'), 1)
    lu.assertEquals(candidate('asdasnakj'), 9)
end

os.exit(lu.LuaUnit.run())"
HumanEval_24,lin_Latn,lua,"- Mpo na motango moko n, luka motango ya monene oyo ekaboli n na ndenge ya bokokani, moke koleka n -- >>> largest_divisor(15)
-- 5
local function largest_divisor(n)
","local function largest_divisor(n)
    for i = n - 1, 1, -1 do
        if n % i == 0 then
            return i
        end
    end
    return nil -- In case no divisor is found, though this will not happen for n > 1
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_divisor
    lu.assertEquals(candidate(3), 1)
    lu.assertEquals(candidate(7), 1)
    lu.assertEquals(candidate(10), 5)
    lu.assertEquals(candidate(100), 50)
    lu.assertEquals(candidate(49), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_25,lin_Latn,lua,"- Motángo ya biloko oyo ezali na kati ya ordinatɛrɛ esengeli kozala ndenge moko na motángo ya biloko nyonso oyo ezali na kati ya ordinatɛrɛ.- Motuya ya ba facteurs moko na moko esengeli kotyama na table na kolanda motango ya ba facteurs oyo ezali na kati ya ba facteurs.- Tablo ya bozongi ya ba facteurs premiers ya motuya mobimba oyo epesami na molongo kobanda na moke kino monene. -- >>> factorize(8)
-- {2, 2, 2}
-- >>> factorize(25)
-- {5, 5}
-- >>> factorize(70)
-- {2, 5, 7}
local function factorize(n)
","local function factorize(n)
    local factors = {}
    local divisor = 2
    while n > 1 do
        while n % divisor == 0 do
            table.insert(factors, divisor)
            n = n / divisor
        end
        divisor = divisor + 1
    end
    return factors
end","lu = require('luaunit')

function test_humaneval()
local candidate = factorize
    lu.assertEquals(candidate(2), {2})
    lu.assertEquals(candidate(4), {2, 2})
    lu.assertEquals(candidate(8), {2, 2, 2})
    lu.assertEquals(candidate(57), {3, 19})
    lu.assertEquals(candidate(3249), {3, 3, 19, 19})
    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})
    lu.assertEquals(candidate(20577), {3, 19, 19, 19})
    lu.assertEquals(candidate(18), {2, 3, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_26,lin_Latn,lua,"- Kobatela molɔngɔ ya biloko oyo etikali ndenge moko na oyo ya liboso. - Na liste ya mitángo ya mobimba, longolá mitángo nyonso oyo ezali mbala ebele. -- >>> remove_duplicates({1, 2, 3, 2, 4})
-- {1, 3, 4}
local function remove_duplicates(numbers)
","local function remove_duplicates(numbers)
    local counts = {}
    -- Count occurrences of each element
    for _, num in ipairs(numbers) do
        counts[num] = (counts[num] or 0) + 1
    end
    -- Collect elements that occur exactly once
    local result = {}
    for _, num in ipairs(numbers) do
        if counts[num] == 1 then
            table.insert(result, num)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_duplicates
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})
end

os.exit(lu.LuaUnit.run())"
HumanEval_27,lin_Latn,lua,"- Mpo na molɔngɔ́ moko ya maloba, balisa makomi ya mineneminene na makomi ya mineneminene mpe makomi ya mineneminene na makomi ya mineneminene. -- >>> flip_case('Hello')
-- 'hELLO'
local function flip_case(string)
","local function flip_case(str)
    return (str:gsub(""%a"", function(c)
        if c:lower() == c then
            return c:upper()
        else
            return c:lower()
        end
    end))
end","lu = require('luaunit')

function test_humaneval()
local candidate = flip_case
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hello!'), 'hELLO!')
    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
end

os.exit(lu.LuaUnit.run())"
HumanEval_28,lin_Latn,lua,"- Kokangisa molɔngɔ́ ya milɔngɔ́ na molɔngɔ́ moko.-- >>> concatenate({})
-- ''
-- >>> concatenate({'a', 'b', 'c'})
-- 'abc'
local function concatenate(strings)
","local function concatenate(strings)
    return table.concat(strings, """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = concatenate
    lu.assertEquals(candidate({}), '')
    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')
    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')
end

os.exit(lu.LuaUnit.run())"
HumanEval_29,lin_Latn,lua,"- Kofongola na liste ya ba string oyo ezali na kati ya liste ya ba string oyo ezali na ebandeli na préfixe. -- >>> filter_by_prefix({}, 'a')
-- {}
-- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')
-- {'abc', 'array'}
local function filter_by_prefix(strings, prefix)
","local function filter_by_prefix(strings, prefix)
    local result = {}
    for _, str in ipairs(strings) do
        if str:sub(1, #prefix) == prefix then
            table.insert(result, str)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = filter_by_prefix
    lu.assertEquals(candidate({}, 'john'), {})
    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_30,lin_Latn,lua,"- Epesaka kaka mitángo ya malamu na kati ya mesa. -- >>> get_positive({-1, 2, -4, 5, 6})
-- {2, 5, 6}
-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- {5, 3, 2, 3, 9, 123, 1}
local function get_positive(l)
","local function get_positive(l)
    local positives = {}
    for _, v in ipairs(l) do
        if v > 0 then
            table.insert(positives, v)
        end
    end
    return positives
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_positive
    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
    lu.assertEquals(candidate({-1, -2}), {})
    lu.assertEquals(candidate({}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_31,lin_Latn,lua,"- Soki nimero moko ezali ya liboso, ezongisaka solo, soki ezali ya liboso te, ezongisaka lokuta. -- >>> is_prime(6)
-- false
-- >>> is_prime(101)
-- true
-- >>> is_prime(11)
-- true
-- >>> is_prime(13441)
-- true
-- >>> is_prime(61)
-- true
-- >>> is_prime(4)
-- false
-- >>> is_prime(1)
-- false
local function is_prime(n)
","local function is_prime(n)
    if n <= 1 then
        return false
    end
    if n <= 3 then
        return true
    end
    if n % 2 == 0 or n % 3 == 0 then
        return false
    end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_prime
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(101), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(13441), true)
    lu.assertEquals(candidate(61), true)
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(1), false)
    lu.assertEquals(candidate(5), true)
    lu.assertEquals(candidate(11), true)
    lu.assertEquals(candidate(17), true)
    lu.assertEquals(candidate(85), false)
    lu.assertEquals(candidate(77), false)
    lu.assertEquals(candidate(255379), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_33,lin_Latn,lua,"- na motuya ya ba indices oyo ekokani na l, kasi na molongo.- l' ekokani na l na ba indices oyo ekabwani na misato te, nzoka nde ba valeurs na yango na ba indices oyo ekabwani na misato ezali ndenge moko - Fonction oyo ezwaka table l mpe ezongaka table l' boye ete -- >>> sort_third({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})
-- {2, 6, 3, 4, 8, 9, 5}
local function sort_third(l)
","local function sort_third(l)
    local divisible_by_three = {}
    
    -- Collect elements at indices divisible by three
    for i = 3, #l, 3 do
        table.insert(divisible_by_three, l[i])
    end

    -- Sort collected elements
    table.sort(divisible_by_three)
    
    -- Create a copy of the original table
    local l_prime = {}
    for i = 1, #l do
        l_prime[i] = l[i]
    end

    -- Replace elements at indices divisible by three with sorted elements
    local sorted_index = 1
    for i = 3, #l, 3 do
        l_prime[i] = divisible_by_three[sorted_index]
        sorted_index = sorted_index + 1
    end

    return l_prime
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_third
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})
    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})
    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})
    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_34,lin_Latn,lua,"- Ekomema elembo ya sika na molongo na table -- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {0, 2, 3, 5, 9, 123}
local function unique(l)
","local function unique(l)
    local seen = {}
    local result = {}
    
    for _, value in ipairs(l) do
        if not seen[value] then
            table.insert(result, value)
            seen[value] = true
        end
    end
    
    table.sort(result)
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique
    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})
end

os.exit(lu.LuaUnit.run())"
HumanEval_35,lin_Latn,lua,"- Ekomonisa elembo ya monene na kati ya tableau. -- >>> max_element({1, 2, 3})
-- 3
-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
-- 123
local function max_element(l)
","local function max_element(l)
    local max = l[1]
    for i = 2, #l do
        if l[i] > max then
            max = l[i]
        end
    end
    return max
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_element
    lu.assertEquals(candidate({1, 2, 3}), 3)
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
end

os.exit(lu.LuaUnit.run())"
HumanEval_36,lin_Latn,lua,"- Zwá motángo ya mbala oyo motángo 7 emonani na mitángo ya mobimba oyo ezali na nse ya n oyo ekoki kokabolama na 11 to 13. -- >>> fizz_buzz(50)
-- 0
-- >>> fizz_buzz(78)
-- 2
-- >>> fizz_buzz(79)
-- 3
local function fizz_buzz(n)
","local function fizz_buzz(n)
    local count = 0
    for i = 1, n - 1 do
        if i % 11 == 0 or i % 13 == 0 then
            local str_i = tostring(i)
            if str_i:find(""7"") then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = fizz_buzz
    lu.assertEquals(candidate(50), 0)
    lu.assertEquals(candidate(78), 2)
    lu.assertEquals(candidate(79), 3)
    lu.assertEquals(candidate(100), 3)
    lu.assertEquals(candidate(200), 6)
    lu.assertEquals(candidate(4000), 192)
    lu.assertEquals(candidate(10000), 639)
    lu.assertEquals(candidate(100000), 8026)
end

os.exit(lu.LuaUnit.run())"
HumanEval_37,lin_Latn,lua,"- na motuya ya ba indices ya l, kasi na molongo.- l' ekokani na l na ba indices paires, nzoka nde ba valeurs na ba indices paires ezali ndenge moko - Fonction oyo ezwaka table l mpe ezongaka table l' boye ete -- >>> sort_even({1, 2, 3})
-- {1, 2, 3}
-- >>> sort_even({5, 6, 3, 4})
-- {3, 6, 5, 4}
local function sort_even(l)
","local function sort_even(l)
    -- Extract the even indexed elements
    local even_elements = {}
    for i = 2, #l, 2 do
        table.insert(even_elements, l[i])
    end

    -- Sort the extracted even elements
    table.sort(even_elements)

    -- Create a new table for the result and fill it with the appropriate elements
    local result = {}
    local even_index = 1
    for i = 1, #l do
        if i % 2 == 0 then
            result[i] = even_elements[even_index]
            even_index = even_index + 1
        else
            result[i] = l[i]
        end
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_even
    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})
    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})
    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})
end

os.exit(lu.LuaUnit.run())"
HumanEval_39,lin_Latn,lua,"- prime_fib ezongisi motango ya n oyo ezali motango ya Fibonacci mpe ezali mpe motango ya liboso. -- >>> prime_fib(1)
-- 2
-- >>> prime_fib(2)
-- 3
-- >>> prime_fib(3)
-- 5
-- >>> prime_fib(4)
-- 13
-- >>> prime_fib(5)
-- 89
local function prime_fib(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function fibonacci()
    local a, b = 0, 1
    return function()
        local temp = a
        a, b = b, a + b
        return temp
    end
end

local function prime_fib(n)
    local count = 0
    local fib_gen = fibonacci()
    while true do
        local fib_num = fib_gen()
        if is_prime(fib_num) then
            count = count + 1
            if count == n then
                return fib_num
            end
        end
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_fib
    lu.assertEquals(candidate(1), 2)
    lu.assertEquals(candidate(2), 3)
    lu.assertEquals(candidate(3), 5)
    lu.assertEquals(candidate(4), 13)
    lu.assertEquals(candidate(5), 89)
    lu.assertEquals(candidate(6), 233)
    lu.assertEquals(candidate(7), 1597)
    lu.assertEquals(candidate(8), 28657)
    lu.assertEquals(candidate(9), 514229)
    lu.assertEquals(candidate(10), 433494437)
end

os.exit(lu.LuaUnit.run())"
HumanEval_40,lin_Latn,lua,"- ezali na motuya moko te, mpe ezali lokuta soki ezali bongo te. - ezongisi solo soki ezali na biloko misato ya kokesana na mesa oyo - triple_sum_to_zero ezwaka liste ya mituya ya mobimba lokola motango ya kobakisa. -- >>> triples_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> triples_sum_to_zero({1, 3, -2, 1})
-- true
-- >>> triples_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
-- true
-- >>> triples_sum_to_zero({1})
-- false
local function triples_sum_to_zero(l)
","local function triples_sum_to_zero(l)
    table.sort(l)
    for i = 1, #l - 2 do
        local a = l[i]
        local left = i + 1
        local right = #l
        while left < right do
            local b = l[left]
            local c = l[right]
            local sum = a + b + c
            if sum == 0 then
                return true
            elseif sum < 0 then
                left = left + 1
            else
                right = right - 1
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = triples_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, 5, -1}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), true)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({1, 2, 5, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({1, 3, 5, -100}), false)
    lu.assertEquals(candidate({100, 3, 5, -100}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_41,lin_Latn,lua,"- Fonction oyo ezali kopesa motango ya ba collisions ya ndenge wana. - na nzela na bango lokola nde bakutanaki te. - Nzokande, mituka yango mizali makasi mpe mizali makasi na lolenge ya nsuka; na yango, mizali kokóba kotambola.- ntango motuka oyo ezali kotambola na lobɔkɔ ya mwasi ezali kokutana na motuka mosusu oyo ezali kotambola na lobɔkɔ ya mobali. Mituka nyonso mizali kotambola na lombangu moko.Na ebandeli, mituka mibale ezalaki mosika mpenza na esika oyo motuka ezalaki.- mituka n ezali kotambola na loboko ya mwasi na loboko ya mobali; na mbala moko, mituka n ekeseni - Kanisá ete nzela ezali semba mpe molai mpenza.local function car_race_collision(n)
","local function car_race_collision(n)
    -- Since each car from the left to right collides with each car from the right to left,
    -- the number of collisions will be n*n.
    return n * n
end","lu = require('luaunit')

function test_humaneval()
local candidate = car_race_collision
    lu.assertEquals(candidate(2), 4)
    lu.assertEquals(candidate(3), 9)
    lu.assertEquals(candidate(4), 16)
    lu.assertEquals(candidate(8), 64)
    lu.assertEquals(candidate(10), 100)
end

os.exit(lu.LuaUnit.run())"
HumanEval_42,lin_Latn,lua,"- Tablo ya bozongi na biloko oyo bibakisami na 1. -- >>> incr_list({1, 2, 3})
-- {2, 3, 4}
-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
-- {6, 4, 6, 3, 4, 4, 10, 1, 124}
local function incr_list(l)
","local function incr_list(l)
    local result = {}
    for i = 1, #l do
        result[i] = l[i] + 1
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = incr_list
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
end

os.exit(lu.LuaUnit.run())"
HumanEval_43,lin_Latn,lua,"- ezali na motuya moko te, mpe ezali lokuta soki ezali bongo te. - ezongisi solo soki ezali na biloko mibale na kati ya table oyo - pairs_sum_to_zero ezwaka liste ya mituya ya mobimba lokola motango ya kobakisa. -- >>> pairs_sum_to_zero({1, 3, 5, 0})
-- false
-- >>> pairs_sum_to_zero({1, 3, -2, 1})
-- false
-- >>> pairs_sum_to_zero({1, 2, 3, 7})
-- false
-- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
-- true
-- >>> pairs_sum_to_zero({1})
-- false
local function pairs_sum_to_zero(l)
","local function pairs_sum_to_zero(l)
    local seen = {}
    for _, value in ipairs(l) do
        if seen[-value] then
            return true
        end
        seen[value] = true
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = pairs_sum_to_zero
    lu.assertEquals(candidate({1, 3, 5, 0}), false)
    lu.assertEquals(candidate({1, 3, -2, 1}), false)
    lu.assertEquals(candidate({1, 2, 3, 7}), false)
    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
    lu.assertEquals(candidate({1}), false)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_44,lin_Latn,lua,"- motángo ya base ezali na nse ya 10. - kozongisa maloba ya maloba nsima ya kobongola yango. - Kotika te ete motángo ya base ya nimero x oyo otye na esika ya liboso ekóma na esika ya liboso. -- >>> change_base(8, 3)
-- '22'
-- >>> change_base(8, 2)
-- '1000'
-- >>> change_base(7, 2)
-- '111'
local function change_base(x, base)
","local function change_base(x, base)
    if base < 2 or base > 9 then
        error(""Base must be between 2 and 9"")
    end

    if x == 0 then
        return ""0""
    end

    local result = """"
    while x > 0 do
        local remainder = x % base
        result = tostring(remainder) .. result
        x = math.floor(x / base)
    end

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = change_base
    lu.assertEquals(candidate(8, 3), '22')
    lu.assertEquals(candidate(9, 3), '100')
    lu.assertEquals(candidate(234, 2), '11101010')
    lu.assertEquals(candidate(16, 2), '10000')
    lu.assertEquals(candidate(8, 2), '1000')
    lu.assertEquals(candidate(7, 2), '111')
    lu.assertEquals(candidate(2, 3), '2')
    lu.assertEquals(candidate(3, 4), '3')
    lu.assertEquals(candidate(4, 5), '4')
    lu.assertEquals(candidate(5, 6), '5')
    lu.assertEquals(candidate(6, 7), '6')
    lu.assertEquals(candidate(7, 8), '7')
end

os.exit(lu.LuaUnit.run())"
HumanEval_45,lin_Latn,lua,"- Bolai ya ngámbo mpe bonene ya esika oyo triangle moko ekoki kozonga. -- >>> triangle_area(5, 3)
-- 7.5
local function triangle_area(a, h)
","local function triangle_area(a, h)
    return 0.5 * a * h
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(5, 3), 7.5)
    lu.assertEquals(candidate(2, 2), 2.0)
    lu.assertEquals(candidate(10, 8), 40.0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_46,lin_Latn,lua,"- Na sengi na bino, bokoma fonction moko mpo na koyeba malamu elembo ya n ya molongo ya ba nombres fib4.- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). - fib4(3) -> 0 - fib4(2) -> 2 - fib4(1) -> 0 - fib4(0) -> 0 - Molɔngɔ́ ya mitángo ya Fib4 ezali molɔngɔ́ ekokani na molɔngɔ́ ya Fibbonacci oyo eyebani na lolenge oyo: -- >>> fib4(5)
-- 4
-- >>> fib4(6)
-- 8
-- >>> fib4(7)
-- 14
local function fib4(n)
","local function fib4(n)
    if n == 0 then return 0 end
    if n == 1 then return 0 end
    if n == 2 then return 2 end
    if n == 3 then return 0 end

    local a, b, c, d = 0, 0, 2, 0

    for i = 4, n do
        local temp = a + b + c + d
        a, b, c, d = b, c, d, temp
    end

    return d
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib4
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 28)
    lu.assertEquals(candidate(10), 104)
    lu.assertEquals(candidate(12), 386)
end

os.exit(lu.LuaUnit.run())"
HumanEval_47,lin_Latn,lua,"- Mediane ya biloko oyo ezali na mesa l. -- >>> median({3, 1, 2, 4, 5})
-- 3
-- >>> median({-10, 4, 6, 1000, 10, 20})
-- 15.0
local function median(l)
","local function median(l)
    table.sort(l)
    local n = #l
    if n % 2 == 1 then
        return l[(n + 1) / 2]
    else
        local mid1 = n / 2
        local mid2 = mid1 + 1
        return (l[mid1] + l[mid2]) / 2
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = median
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)
    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)
    lu.assertEquals(candidate({5}), 5)
    lu.assertEquals(candidate({6, 5}), 5.5)
    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)
end

os.exit(lu.LuaUnit.run())"
HumanEval_48,lin_Latn,lua,"- Emekaka soki string oyo epesami ezali palindrome -- >>> is_palindrome('')
-- true
-- >>> is_palindrome('aba')
-- true
-- >>> is_palindrome('aaaaa')
-- true
-- >>> is_palindrome('zbcd')
-- false
local function is_palindrome(text)
","local function is_palindrome(text)
    return text == string.reverse(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_palindrome
    lu.assertEquals(candidate(''), true)
    lu.assertEquals(candidate('aba'), true)
    lu.assertEquals(candidate('aaaaa'), true)
    lu.assertEquals(candidate('zbcd'), false)
    lu.assertEquals(candidate('xywyx'), true)
    lu.assertEquals(candidate('xywyz'), false)
    lu.assertEquals(candidate('xywzx'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_49,lin_Latn,lua,"- Zwá 2^n modulo p (bósimba mitángo).-- >>> modp(3, 5)
-- 3
-- >>> modp(1101, 101)
-- 2
-- >>> modp(0, 101)
-- 1
-- >>> modp(3, 11)
-- 8
-- >>> modp(100, 101)
-- 1
local function modp(n, p)
","local function modp(n, p)
    return (2^n) % p
end","lu = require('luaunit')

function test_humaneval()
local candidate = modp
    lu.assertEquals(candidate(3, 5), 3)
    lu.assertEquals(candidate(1101, 101), 2)
    lu.assertEquals(candidate(0, 101), 1)
    lu.assertEquals(candidate(3, 11), 8)
    lu.assertEquals(candidate(100, 101), 1)
    lu.assertEquals(candidate(30, 5), 4)
    lu.assertEquals(candidate(31, 5), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_51,lin_Latn,lua,"- remove_vowels ezali fonction oyo ezwaka string mpe ezongaka string sans voyelles. -- >>> remove_vowels('')
-- ''
-- >>> remove_vowels('abcdef')
-- 'bcdf'
-- >>> remove_vowels('aaaaa')
-- ''
-- >>> remove_vowels('aaBAA')
-- 'B'
-- >>> remove_vowels('zbcd')
-- 'zbcd'
local function remove_vowels(text)
","local function remove_vowels(text)
    return text:gsub(""[aeiouAEIOU]"", """")
end","lu = require('luaunit')

function test_humaneval()
local candidate = remove_vowels
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
    lu.assertEquals(candidate('fedcba'), 'fdcb')
    lu.assertEquals(candidate('eeeee'), '')
    lu.assertEquals(candidate('acBAA'), 'cB')
    lu.assertEquals(candidate('EcBOO'), 'cB')
    lu.assertEquals(candidate('ybcd'), 'ybcd')
end

os.exit(lu.LuaUnit.run())"
HumanEval_52,lin_Latn,lua,"- Ekomema true soki ba nombre nionso na table l ezali na nse ya threshold t. -- >>> below_threshold({1, 2, 4, 10}, 100)
-- true
-- >>> below_threshold({1, 20, 4, 10}, 5)
-- false
local function below_threshold(l, t)
","local function below_threshold(l, t)
    for _, number in ipairs(l) do
        if number >= t then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = below_threshold
    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)
    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)
    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)
    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_53,lin_Latn,lua,"- Koyanganisa mitángo mibale x mpe y -- >>> add(2, 3)
-- 5
-- >>> add(5, 7)
-- 12
local function add(x, y)
","local function add(x, y)
    return x + y
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate(0, 1), 1)
    lu.assertEquals(candidate(1, 0), 1)
    lu.assertEquals(candidate(2, 3), 5)
    lu.assertEquals(candidate(5, 7), 12)
    lu.assertEquals(candidate(7, 5), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_54,lin_Latn,lua,"- Talá soki maloba mibale ezali na balɛtrɛ oyo ekokani. -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
-- true
-- >>> same_chars('abcd', 'dddddddabc')
-- true
-- >>> same_chars('dddddddabc', 'abcd')
-- true
-- >>> same_chars('eabcd', 'dddddddabc')
-- false
-- >>> same_chars('abcd', 'dddddddabce')
-- false
-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
-- false
local function same_chars(s0, s1)
","local function same_chars(s0, s1)
    local function char_set(str)
        local set = {}
        for c in str:gmatch(""."") do
            set[c] = true
        end
        return set
    end

    local set0 = char_set(s0)
    local set1 = char_set(s1)

    for c in pairs(set0) do
        if not set1[c] then
            return false
        end
    end

    for c in pairs(set1) do
        if not set0[c] then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = same_chars
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)
    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)
    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)
    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)
    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)
    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)
    lu.assertEquals(candidate('aabb', 'aaccc'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_55,lin_Latn,lua,"- Zwá nimero ya Fibonacci ya n. -- >>> fib(10)
-- 55
-- >>> fib(1)
-- 1
-- >>> fib(8)
-- 21
local function fib(n)
","local function fib(n)
    if n <= 0 then
        return 0
    elseif n == 1 then
        return 1
    else
        local a, b = 0, 1
        for i = 2, n do
            a, b = b, a + b
        end
        return b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fib
    lu.assertEquals(candidate(10), 55)
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(8), 21)
    lu.assertEquals(candidate(11), 89)
    lu.assertEquals(candidate(12), 144)
end

os.exit(lu.LuaUnit.run())"
HumanEval_56,lin_Latn,lua,"- ezongisi true soki libaya ya kofungola ezali na libaya ya kokanga. - ba parenthèse ezali ""<"" mpe "">"". -- >>> correct_bracketing('<')
-- false
-- >>> correct_bracketing('<>')
-- true
-- >>> correct_bracketing('<<><>>')
-- true
-- >>> correct_bracketing('><<>')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '<' then
            balance = balance + 1
        elseif char == '>' then
            balance = balance - 1
        end
        
        if balance < 0 then
            return false
        end
    end
    
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('<>'), true)
    lu.assertEquals(candidate('<<><>>'), true)
    lu.assertEquals(candidate('<><><<><>><>'), true)
    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
    lu.assertEquals(candidate('<<<><>>>>'), false)
    lu.assertEquals(candidate('><<>'), false)
    lu.assertEquals(candidate('<'), false)
    lu.assertEquals(candidate('<<<<'), false)
    lu.assertEquals(candidate('>'), false)
    lu.assertEquals(candidate('<<>'), false)
    lu.assertEquals(candidate('<><><<><>><>><<>'), false)
    lu.assertEquals(candidate('<><><<><>><>>><>'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_57,lin_Latn,lua,"- Return true is table elements are monotonically increasing or decreasing.  biloko ya mesa ezali kobakisama to kokita na ndenge ya monotone. -- >>> monotonic({1, 2, 4, 20})
-- true
-- >>> monotonic({1, 20, 4, 10})
-- false
-- >>> monotonic({4, 1, 0, -10})
-- true
local function monotonic(l)
","local function monotonic(l)
    if #l < 2 then
        return true
    end

    local increasing = true
    local decreasing = true

    for i = 2, #l do
        if l[i] > l[i - 1] then
            decreasing = false
        elseif l[i] < l[i - 1] then
            increasing = false
        end
    end

    return increasing or decreasing
end","lu = require('luaunit')

function test_humaneval()
local candidate = monotonic
    lu.assertEquals(candidate({1, 2, 4, 10}), true)
    lu.assertEquals(candidate({1, 2, 4, 20}), true)
    lu.assertEquals(candidate({1, 20, 4, 10}), false)
    lu.assertEquals(candidate({4, 1, 0, -10}), true)
    lu.assertEquals(candidate({4, 1, 1, 0}), true)
    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)
    lu.assertEquals(candidate({9, 9, 9, 9}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_58,lin_Latn,lua,"- Ekomonisa biloko oyo ekokani te, oyo ebongisami malamu, mpo na biteni mibale ya mesa. -- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})
-- {1, 5, 653}
-- >>> common({5, 3, 2, 8}, {3, 2})
-- {2, 3}
local function common(l1, l2)
","local function common(l1, l2)
    local set1 = {}
    local set2 = {}
    local result = {}

    -- Create a set for the first list
    for _, value in ipairs(l1) do
        set1[value] = true
    end

    -- Create a set for the second list, noting only common elements
    for _, value in ipairs(l2) do
        if set1[value] then
            set2[value] = true
        end
    end

    -- Collect the keys from the set into a results table
    for key in pairs(set2) do
        table.insert(result, key)
    end

    -- Sort the results table
    table.sort(result)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = common
    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})
    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})
    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})
    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_59,lin_Latn,lua,"- Zongisa factor ya n oyo eleki monene. Soki n > 1 ezali prime te. -- >>> largest_prime_factor(13195)
-- 29
-- >>> largest_prime_factor(2048)
-- 2
local function largest_prime_factor(n)
","local function largest_prime_factor(n)
    local factor = 2
    while n > 1 do
        if n % factor == 0 then
            n = n / factor
        else
            factor = factor + 1
        end
    end
    return factor
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_prime_factor
    lu.assertEquals(candidate(15), 5)
    lu.assertEquals(candidate(27), 3)
    lu.assertEquals(candidate(63), 7)
    lu.assertEquals(candidate(330), 11)
    lu.assertEquals(candidate(13195), 29)
end

os.exit(lu.LuaUnit.run())"
HumanEval_60,lin_Latn,lua,"- sum_to_n ezali fonction oyo esangisaka ba nombre uta 1 kino n. -- >>> sum_to_n(30)
-- 465
-- >>> sum_to_n(100)
-- 5050
-- >>> sum_to_n(5)
-- 15
-- >>> sum_to_n(10)
-- 55
-- >>> sum_to_n(1)
-- 1
local function sum_to_n(n)
","local function sum_to_n(n)
    return n * (n + 1) // 2
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_to_n
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(6), 21)
    lu.assertEquals(candidate(11), 66)
    lu.assertEquals(candidate(30), 465)
    lu.assertEquals(candidate(100), 5050)
end

os.exit(lu.LuaUnit.run())"
HumanEval_61,lin_Latn,lua,"- ezongisi true soki libaya ya kofungola ezali na libaya ya kokanga. - na kati ya bilembo ezali na maloba ""("" mpe "")"". -- >>> correct_bracketing('(')
-- false
-- >>> correct_bracketing('()')
-- true
-- >>> correct_bracketing('(()())')
-- true
-- >>> correct_bracketing(')(()')
-- false
local function correct_bracketing(brackets)
","local function correct_bracketing(brackets)
    local balance = 0
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == ""("" then
            balance = balance + 1
        elseif char == "")"" then
            balance = balance - 1
        end
        if balance < 0 then
            return false
        end
    end
    return balance == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = correct_bracketing
    lu.assertEquals(candidate('()'), true)
    lu.assertEquals(candidate('(()())'), true)
    lu.assertEquals(candidate('()()(()())()'), true)
    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
    lu.assertEquals(candidate('((()())))'), false)
    lu.assertEquals(candidate(')(()'), false)
    lu.assertEquals(candidate('('), false)
    lu.assertEquals(candidate('(((('), false)
    lu.assertEquals(candidate(')'), false)
    lu.assertEquals(candidate('(()'), false)
    lu.assertEquals(candidate('()()(()())())(()'), false)
    lu.assertEquals(candidate('()()(()())()))()'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_62,lin_Latn,lua,"- Zwá derivate ya polynôme oyo na lolenge moko. - xs[0] + xs[1] * x + xs[2] * x^2 + .... - xs elakisi ba coefficients ya polynôme moko. -- >>> derivative({3, 1, 2, 4, 5})
-- {1, 4, 12, 20}
-- >>> derivative({1, 2, 3})
-- {2, 6}
local function derivative(xs)
","local function derivative(xs)
    local result = {}
    for i = 2, #xs do
        result[i - 1] = xs[i] * (i - 1)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = derivative
    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})
    lu.assertEquals(candidate({1, 2, 3}), {2, 6})
    lu.assertEquals(candidate({3, 2, 1}), {2, 2})
    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})
    lu.assertEquals(candidate({1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_63,lin_Latn,lua,"- Na sengi na bino, bokoma fonction moko mpo na koyeba malamu elembo ya n ya molongo ya ba nombres fibfib. - fibfib (n) == fibfib (n-1) + fibfib (n-2) + fibfib (n-3). - fib fib ((2) == 1 - fib fib ((1) == 0 - fib fib ((0) == 0 - Molɔngɔ́ ya mitángo ya FibFib ezali molɔngɔ́ ekokani na molɔngɔ́ ya Fibbonacci oyo eyebani na lolenge oyo: -- >>> fibfib(1)
-- 0
-- >>> fibfib(5)
-- 4
-- >>> fibfib(8)
-- 24
local function fibfib(n)
","local function fibfib(n)
    if n == 0 then
        return 0
    elseif n == 1 then
        return 0
    elseif n == 2 then
        return 1
    else
        local a, b, c = 0, 0, 1
        for i = 3, n do
            local next_fibfib = a + b + c
            a, b, c = b, c, next_fibfib
        end
        return c
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = fibfib
    lu.assertEquals(candidate(2), 1)
    lu.assertEquals(candidate(1), 0)
    lu.assertEquals(candidate(5), 4)
    lu.assertEquals(candidate(8), 24)
    lu.assertEquals(candidate(10), 81)
    lu.assertEquals(candidate(12), 274)
    lu.assertEquals(candidate(14), 927)
end

os.exit(lu.LuaUnit.run())"
HumanEval_64,lin_Latn,lua,"- Ndakisa: - monoko, kasi bobele soki ezali na nsuka ya liloba oyo epesami. - Bavocale oyo ezali awa ezali ""a"", ""e"", ""i"", ""o"", ""u"". Awa, ""y"" ezali mpe ""a""- liloba moko lokola input mpe ezongisi motango ya ba voyelles na string. - Komá fonction vowels_count oyo ezali na singa oyo ezali komonisa -- >>> vowels_count('abcde')
-- 2
-- >>> vowels_count('ACEDY')
-- 3
local function vowels_count(s)
","local function vowels_count(s)
    local count = 0
    local vowels = {a = true, e = true, i = true, o = true, u = true, 
                    A = true, E = true, I = true, O = true, U = true}
                    
    for i = 1, #s do
        local char = s:sub(i, i)
        if vowels[char] or (char == 'y' or char == 'Y') and i == #s then
            count = count + 1
        end
    end
    
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = vowels_count
    lu.assertEquals(candidate('abcde'), 2)
    lu.assertEquals(candidate('Alone'), 3)
    lu.assertEquals(candidate('key'), 2)
    lu.assertEquals(candidate('bye'), 1)
    lu.assertEquals(candidate('keY'), 2)
    lu.assertEquals(candidate('bYe'), 1)
    lu.assertEquals(candidate('ACEDY'), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_65,lin_Latn,lua,"- Soki motango ya balɛtrɛ ezali mingi, balɛtrɛ oyo ezali na nsima esengeli kozala na esika na yango.- mpe azongisaka yango lokola string. - Zongisá na molɔngɔ́ mitángo ya nimero mobimba x, zongisá mitángo na loboko ya mobali na kobalukáká.-- >>> circular_shift(12, 1)
-- '21'
-- >>> circular_shift(12, 2)
-- '12'
local function circular_shift(x, shift)
","local function circular_shift(x, shift)
    local num_str = tostring(x)
    local num_digits = #num_str
    if shift > num_digits then
        return num_str:reverse()
    else
        local shift_pos = num_digits - (shift % num_digits)
        return num_str:sub(shift_pos + 1) .. num_str:sub(1, shift_pos)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = circular_shift
    lu.assertEquals(candidate(100, 2), '001')
    lu.assertEquals(candidate(12, 2), '12')
    lu.assertEquals(candidate(97, 8), '79')
    lu.assertEquals(candidate(12, 1), '21')
    lu.assertEquals(candidate(11, 101), '11')
end

os.exit(lu.LuaUnit.run())"
HumanEval_66,lin_Latn,lua,"- Bandakisa: - Bakɔ́ti ya ASCII. - Komá mosala oyo ezali kozwa molɔngɔ́ ya maloba lokola lilako mpe ezali kozongisa bobele motuya ya makomi ya likoló' - Mokumba -- >>> digitSum('')
-- 0
-- >>> digitSum('abAB')
-- 131
-- >>> digitSum('abcCd')
-- 67
-- >>> digitSum('helloE')
-- 69
-- >>> digitSum('woArBld')
-- 131
-- >>> digitSum('aAaaaXa')
-- 153
local function digitSum(s)
","local function digitSum(s)
    local sum = 0
    for i = 1, #s do
        local char = s:sub(i, i)
        if char:match(""%u"") then
            sum = sum + string.byte(char)
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = digitSum
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('abAB'), 131)
    lu.assertEquals(candidate('abcCd'), 67)
    lu.assertEquals(candidate('helloE'), 69)
    lu.assertEquals(candidate('woArBld'), 131)
    lu.assertEquals(candidate('aAaaaXa'), 153)
    lu.assertEquals(candidate(' How are yOu?'), 151)
    lu.assertEquals(candidate('You arE Very Smart'), 327)
end

os.exit(lu.LuaUnit.run())"
HumanEval_67,lin_Latn,lua,"- mpo na examble: - na kati ya kitunga, lobá motángo ya mbuma ya manga na kati ya kitunga. - Ba pommes ya orange mpe ya pomme mpe motango mobimba oyo ezali komonisa motango mobimba ya mbuma - mbuma ya pɔme, ya lilala, mpe ya manga.- oyo ekabolami na kati ya kitunga ya mbuma oyo ezali na kati ya kitunga yango - Na mosala oyo, bakopesa yo nsinga oyo ezali komonisa motángo ya pɔme mpe ya malala -- >>> fruit_distribution('5 apples and 6 oranges', 19)
-- 8
-- >>> fruit_distribution('0 apples and 1 oranges', 3)
-- 2
-- >>> fruit_distribution('2 apples and 3 oranges', 100)
-- 95
-- >>> fruit_distribution('100 apples and 1 oranges', 120)
-- 19
local function fruit_distribution(s, n)
","local function fruit_distribution(s, n)
    local apples, oranges = s:match(""(%d+)%s*apples%s*and%s*(%d+)%s*oranges"")
    apples = tonumber(apples)
    oranges = tonumber(oranges)
    local mangoes = n - (apples + oranges)
    return mangoes
end","lu = require('luaunit')

function test_humaneval()
local candidate = fruit_distribution
    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)
    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)
    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)
    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)
    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)
    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)
    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)
end

os.exit(lu.LuaUnit.run())"
HumanEval_68,lin_Latn,lua,"- Ndakisa 1: - Soki ezali na ba valeurs ya paire te to table oyo epesami ezali pamba, kozongisa []. - Node oyo epasami esengeli kozongisama na kati ya tableau, [smallest_value, its index] , - Soki ba nœuds ebele na valeur ya moke ya ndenge moko ezwami, bozongisa nœud oyo ezali na index ya moke. - Nœud oyo ekatami esengeli kozala oyo ezali na motuya moke koleka.- Mosala na yo ezali ya kopikola moko ya mitó mpe kozongisa yango. - ""Soki bapesi yo mesa oyo ezali komonisa etape ya nzete oyo ezali na ba nœuds ya mituya ya mobimba oyo ezali ya mabe te -- >>> pluck({4, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 2:
-- >>> pluck({1, 2, 3})
-- {2, 1}
-- Explanation: 2 has the smallest even value, and 2 has the smallest index.
-- Example 3:
-- >>> pluck({})
-- {}
-- Example 4:
-- >>> pluck({5, 0, 3, 0, 4, 2})
-- {0, 1}
-- Explanation: 0 is the smallest value, but  there are two zeros,
--              so we will choose the first zero, which has the smallest index.
-- Constraints:
--     * 1 <= nodes.length <= 10000
--     * 0 <= node.value
local function pluck(arr)
","local function pluck(arr)
    local smallest_even_value = nil
    local smallest_index = nil

    for index, value in ipairs(arr) do
        if value % 2 == 0 then
            if smallest_even_value == nil or value < smallest_even_value then
                smallest_even_value = value
                smallest_index = index
            end
        end
    end

    if smallest_even_value == nil then
        return {}
    else
        return {smallest_even_value, smallest_index}
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = pluck
    lu.assertEquals(candidate({4, 2, 3}), {2, 1})
    lu.assertEquals(candidate({1, 2, 3}), {2, 1})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})
    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})
    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})
    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})
    lu.assertEquals(candidate({7, 9, 7, 1}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_69,lin_Latn,lua,"- Bandakisa: - Soki motuya ya boye ezali te, kozongisa -1. - Mbala boni motango mobimba ezali komonana na mesa. - zero, mpe ezali na motuya ya mbala moko koleka to ekokani na motuya ya motuya mobimba yango moko. - Bapesi yo table ya ba integers ya positif oyo ezali ya pamba te. Zongisa motuya ya mobimba oyo eleki monene koleka -- >>> search({4, 1, 2, 2, 3, 1})
-- 2
-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})
-- 3
-- >>> search({5, 5, 4, 4, 4})
-- -1
local function search(lst)
","local function search(lst)
    local frequency = {}
    
    -- Calculate the frequency of each number in the list
    for _, num in ipairs(lst) do
        frequency[num] = (frequency[num] or 0) + 1
    end

    local result = -1
    
    -- Determine the maximum valid integer with the criteria
    for num, freq in pairs(frequency) do
        if num > 0 and freq >= num and num > result then
            result = num
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = search
    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)
    lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)
    lu.assertEquals(candidate({3, 3}), -1)
    lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)
    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)
    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)
    lu.assertEquals(candidate({3, 2, 8, 2}), 2)
    lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)
    lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)
    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)
    lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)
    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)
    lu.assertEquals(candidate({1}), 1)
    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)
    lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)
    lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)
    lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)
    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)
    lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)
    lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)
    lu.assertEquals(candidate({10}), -1)
    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)
    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)
    lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)
    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_70,lin_Latn,lua,"- Bandakisa: - na nsima, motángo ya mineneminene ya mitángo ya mobimba oyo etikali, na nsima motángo ya moke mpe bongo na bongo. - Kokata biloko na ndenge ya kokamwa, ezali ntango ozali kobanda na motuya ya moke, - Soki bapesi yo liste ya mituya ya mobimba, kozongisa liste na molɔngɔ ya ndenge mosusu. -- >>> strange_sort_list({1, 2, 3, 4})
-- {1, 4, 2, 3}
-- >>> strange_sort_list({5, 5, 5, 5})
-- {5, 5, 5, 5}
-- >>> strange_sort_list({})
-- {}
local function strange_sort_list(lst)
","local function strange_sort_list(lst)
    table.sort(lst) -- Sort the list
    local result = {}
    local i, j = 1, #lst
    
    while i <= j do
        table.insert(result, lst[i])
        if i ~= j then
            table.insert(result, lst[j])
        end
        i = i + 1
        j = j - 1
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = strange_sort_list
    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})
    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})
    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})
    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})
    lu.assertEquals(candidate({111111}), {111111})
end

os.exit(lu.LuaUnit.run())"
HumanEval_71,lin_Latn,lua,"- Ndakisa: - koleka ngámbo ya misato. - Biteni misato bizali kosala triangle ya solo soki motuya ya biteni mibale ezali monene koleka.- Soki te, kozonga na -1 - triangle oyo ekangisami na biteni mibale ya decimal soki ngambo misato ezali triangle ya solo. - Soki ozwi milai ya ngámbo misato ya triangle, lobá elongi ya -- >>> triangle_area(3, 4, 5)
-- 6.0
-- >>> triangle_area(1, 2, 10)
-- -1
local function triangle_area(a, b, c)
","local function triangle_area(a, b, c)
    -- Check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a then
        -- Calculate the semi-perimeter
        local s = (a + b + c) / 2
        -- Calculate the area using Heron's formula
        local area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        -- Return the area rounded to 2 decimal points
        return math.floor(area * 100 + 0.5) / 100
    else
        -- Return -1 if not a valid triangle
        return -1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = triangle_area
    lu.assertEquals(candidate(3, 4, 5), 6.0)
    lu.assertEquals(candidate(1, 2, 10), -1)
    lu.assertEquals(candidate(4, 8, 5), 8.18)
    lu.assertEquals(candidate(2, 2, 2), 1.73)
    lu.assertEquals(candidate(1, 2, 3), -1)
    lu.assertEquals(candidate(10, 5, 7), 16.25)
    lu.assertEquals(candidate(2, 6, 3), -1)
    lu.assertEquals(candidate(1, 1, 1), 0.43)
    lu.assertEquals(candidate(2, 2, 10), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_72,lin_Latn,lua,"- Ndakisa: - Eloko q ekopumbwa soki ezali na bokokani (ezali mesa palindrome) mpe motuya ya biloko na yango ezali moke to ekokani na bozito ya monene oyo ekoki w. - Komá mosala oyo ekozongisa solo soki eloko q ekopumbwa, mpe lokuta soki te. -- >>> will_it_fly({1, 2}, 5)
-- false
-- # 1+2 is less than the maximum possible weight, but it's unbalanced.
-- >>> will_it_fly({3, 2, 3}, 1)
-- false
-- # it's balanced, but 3+2+3 is more than the maximum possible weight.
-- >>> will_it_fly({3, 2, 3}, 9)
-- true
-- # 3+2+3 is less than the maximum possible weight, and it's balanced.
-- >>> will_it_fly({3}, 5)
-- true
-- # 3 is less than the maximum possible weight, and it's balanced.
local function will_it_fly(q, w)
","local function will_it_fly(q, w)
    local function is_palindrome(tbl)
        local len = #tbl
        for i = 1, math.floor(len / 2) do
            if tbl[i] ~= tbl[len - i + 1] then
                return false
            end
        end
        return true
    end

    local function sum_elements(tbl)
        local sum = 0
        for _, value in ipairs(tbl) do
            sum = sum + value
        end
        return sum
    end

    if not is_palindrome(q) then
        return false
    end

    local total_weight = sum_elements(q)
    return total_weight <= w
end","lu = require('luaunit')

function test_humaneval()
local candidate = will_it_fly
    lu.assertEquals(candidate({3, 2, 3}, 9), true)
    lu.assertEquals(candidate({1, 2}, 5), false)
    lu.assertEquals(candidate({3}, 5), true)
    lu.assertEquals(candidate({3, 2, 3}, 1), false)
    lu.assertEquals(candidate({1, 2, 3}, 6), false)
    lu.assertEquals(candidate({5}, 5), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_73,lin_Latn,lua,"- Na ndakisa: - ezali ndenge moko na liboso mpe na nsima. Na mbongwana moko, okoki kobongola elembo moko na elembo mosusu nyonso. - esengeli kobongola yango mpo ete mesa ezala palindrome.- Soki bapesi yo tableau arr ya ba integres, luka motuya ya elembo oyo ezali na kati ya -- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})
-- 4
-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})
-- 1
-- >>> smallest_change({1, 2, 3, 2, 1})
-- 0
local function smallest_change(arr)
","local function smallest_change(arr)
    local n = #arr
    local changes = 0
    
    for i = 1, math.floor(n / 2) do
        if arr[i] ~= arr[n - i + 1] then
            changes = changes + 1
        end
    end
    
    return changes
end","lu = require('luaunit')

function test_humaneval()
local candidate = smallest_change
    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)
    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)
    lu.assertEquals(candidate({1, 4, 2}), 1)
    lu.assertEquals(candidate({1, 4, 4, 2}), 1)
    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)
    lu.assertEquals(candidate({3, 1, 1, 3}), 0)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({0, 1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_74,lin_Latn,lua,"- Bandakisa - soki ba table mibale ezali na motango moko ya ba chars, bozongisa table ya yambo. - motango ya ba chars na ba strings nionso ya table ezali moke koleka oyo ya table mosusu.- Komaka fonction oyo endimaka ba table mibale ya ba chaines mpe ezongisi table oyo ezali na -- >>> total_match({}, {})
-- {}
-- >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})
-- {'hI', 'Hi'}
-- >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})
-- {'hi', 'admin'}
-- >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})
-- {'hI', 'hi', 'hi'}
-- >>> total_match({'4'}, {'1', '2', '3', '4', '5'})
-- {'4'}
local function total_match(lst1, lst2)
","local function total_match(lst1, lst2)
    local function total_chars(lst)
        local count = 0
        for _, str in ipairs(lst) do
            count = count + #str
        end
        return count
    end

    local chars_lst1 = total_chars(lst1)
    local chars_lst2 = total_chars(lst2)

    if chars_lst1 < chars_lst2 then
        return lst1
    elseif chars_lst2 < chars_lst1 then
        return lst2
    else
        return lst1
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = total_match
    lu.assertEquals(candidate({}, {}), {})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})
    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})
    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})
    lu.assertEquals(candidate({}, {'this'}), {})
    lu.assertEquals(candidate({'this'}, {}), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_75,lin_Latn,lua,"- Ndakisa: - Koyeba ete (a) ezali moke koleka 100. - mpe lokuta na makambo mosusu. - Komá fonction oyo ekozongisa solo soki motango oyo epesami ezali molɔngɔ ya 3 ya ba nombres premiers -- >>> is_multiply_prime(30)
-- true
-- 30 = 2 * 3 * 5
local function is_multiply_prime(a)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while (i * i) <= n do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
        i = i + 6
    end
    return true
end

local function generate_primes(limit)
    local primes = {}
    for i = 2, limit do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end

local function is_multiply_prime(a)
    local primes = generate_primes(100)
    local count = #primes
    for i = 1, count do
        for j = i + 1, count do
            for k = j + 1, count do
                if primes[i] * primes[j] * primes[k] == a then
                    return true
                end
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_multiply_prime
    lu.assertEquals(candidate(5), false)
    lu.assertEquals(candidate(30), true)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), false)
    lu.assertEquals(candidate(125), true)
    lu.assertEquals(candidate(105), true)
    lu.assertEquals(candidate(126), false)
    lu.assertEquals(candidate(729), false)
    lu.assertEquals(candidate(891), false)
    lu.assertEquals(candidate(1001), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_76,lin_Latn,lua,"- Na ndakisa: - x ezali nguya ya n soki n**int=x - nguya ya n mpe lokuta na makambo mosusu. - Mosala na yo ezali ya kokoma fonction oyo ekozongisa true soki motuya x ezali simple -- >>> is_simple_power(1, 4)
-- true
-- >>> is_simple_power(2, 2)
-- true
-- >>> is_simple_power(8, 2)
-- true
-- >>> is_simple_power(3, 2)
-- false
-- >>> is_simple_power(3, 1)
-- false
-- >>> is_simple_power(5, 3)
-- false
local function is_simple_power(x, n)
","local function is_simple_power(x, n)
    if x == 1 then
        return true
    end
    if n <= 0 or x <= 0 then
        return false
    end
    local current_power = 1
    while current_power < x do
        current_power = current_power * n
    end
    return current_power == x
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_simple_power
    lu.assertEquals(candidate(16, 2), true)
    lu.assertEquals(candidate(143214, 16), false)
    lu.assertEquals(candidate(4, 2), true)
    lu.assertEquals(candidate(9, 3), true)
    lu.assertEquals(candidate(16, 4), true)
    lu.assertEquals(candidate(24, 2), false)
    lu.assertEquals(candidate(128, 4), false)
    lu.assertEquals(candidate(12, 6), false)
    lu.assertEquals(candidate(1, 1), true)
    lu.assertEquals(candidate(1, 12), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_77,lin_Latn,lua,"- Bandakisa: - Limbolá: okoki kokanisa ete makambo oyo okɔtisi ezali ntango nyonso solo. - soki motango oyo ezali na kati ya cube ya motuya moko ya mobimba. - Komá mosala oyo ezwaka motángo mobimba a mpe ezongisaka solo -- >>> iscube(1)
-- true
-- >>> iscube(2)
-- false
-- >>> iscube(-1)
-- true
-- >>> iscube(64)
-- true
-- >>> iscube(0)
-- true
-- >>> iscube(180)
-- false
local function iscube(a)
","local function iscube(a)
    if a < 0 then
        a = -a
    end
    local cbrt = math.floor(a ^ (1/3) + 0.5)
    return cbrt * cbrt * cbrt == a
end","lu = require('luaunit')

function test_humaneval()
local candidate = iscube
    lu.assertEquals(candidate(1), true)
    lu.assertEquals(candidate(2), false)
    lu.assertEquals(candidate(-1), true)
    lu.assertEquals(candidate(64), true)
    lu.assertEquals(candidate(180), false)
    lu.assertEquals(candidate(1000), true)
    lu.assertEquals(candidate(0), true)
    lu.assertEquals(candidate(1729), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_78,lin_Latn,lua,"- Bandakisa: - mpe bilembo A,B,C,D,E,F ezalaka ntango nyonso na makomi minene. - Limbolá: okoki kokanisa ete makambo oyo okɔtisi ezali ntango nyonso ya solo to ezangi ntina.- B (= decimal 11), D (= decimal 13). - Na yango, osengeli koyeba motango ya mituya oyo elandi: 2, 3, 5, 7, - Mitángo ya liboso ezali 2, 3, 5, 7, 11, 13, 17,... - Mitángo ya hexadecimal ezali 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. - koleka 1 oyo ezali te mbuma ya mineneminene mibale ya motuya ya solo).- mitángo oyo ezali ya liboso (motángo ya liboso, to prime, ezali motángo ya solo - motango ya hexadecimal lokola string mpe etanga motango ya hexadecimal - Batindi yo okoma fonction oyo ezwaka -- >>> hex_key('AB')
-- 1
-- >>> hex_key('1077E')
-- 2
-- >>> hex_key('ABED1A33')
-- 4
-- >>> hex_key('123456789ABCDEF0')
-- 6
-- >>> hex_key('2020')
-- 2
local function hex_key(num)
","local function hex_key(num)
    local prime_digits = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true, ['B'] = true, ['D'] = true}
    local count = 0
    for digit in num:gmatch('.') do
        if prime_digits[digit] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = hex_key
    lu.assertEquals(candidate('AB'), 1)
    lu.assertEquals(candidate('1077E'), 2)
    lu.assertEquals(candidate('ABED1A33'), 4)
    lu.assertEquals(candidate('2020'), 2)
    lu.assertEquals(candidate('123456789ABCDEF0'), 6)
    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_79,lin_Latn,lua,"- Bandakisa: - Bilembo mosusu ezali mpo na kosalisa na lolenge ya kokoma. - Ekozala na makomi mibale ya ""db"" na ebandeli mpe na nsuka ya molɔngɔ́. Nkombo ya elembo nyonso na molɔngɔ́ ekozala ""0"" to ""1"".- lolenge ya binary. Fonction esengeli kozongisa string, na elembo moko moko oyo ezali komonisa binary - Bakopesa yo motango na lolenge ya ba décimales mpe mosala na yo ezali ya kobongola yango na -- >>> decimal_to_binary(15)
-- 'db1111db'
-- >>> decimal_to_binary(32)
-- 'db100000db'
local function decimal_to_binary(decimal)
","local function decimal_to_binary(decimal)
    -- Convert the decimal number to binary and remove the '0b' prefix using string.sub
    local binary = string.sub(string.format(""%b"", decimal), 0)
    -- Concatenate 'db' at the start and end of the binary string
    return 'db' .. binary .. 'db'
end","lu = require('luaunit')

function test_humaneval()
local candidate = decimal_to_binary
    lu.assertEquals(candidate(0), 'db0db')
    lu.assertEquals(candidate(32), 'db100000db')
    lu.assertEquals(candidate(103), 'db1100111db')
    lu.assertEquals(candidate(15), 'db1111db')
end

os.exit(lu.LuaUnit.run())"
HumanEval_80,lin_Latn,lua,"- Na ndakisa: - Motango ya maloba ezali haplua soki bolai na yango ezali na 3 mpe balɛtrɛ 3 oyo elandi ezali na bokeseni - Mosala na yo ezali ya kotala soki singa ezali na haplua to te. - Bapesi yo molɔngɔ́ ya mitó.-- >>> is_happy('a')
-- false
-- >>> is_happy('aa')
-- false
-- >>> is_happy('abcd')
-- true
-- >>> is_happy('aabb')
-- false
-- >>> is_happy('adb')
-- true
-- >>> is_happy('xyy')
-- false
local function is_happy(s)
","local function is_happy(s)
    -- Check if the string length is less than 3
    if #s < 3 then
        return false
    end

    -- Iterate through the string and check every 3 consecutive characters
    for i = 1, #s - 2 do
        local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i + 2)
        if a == b or b == c or a == c then
            return false
        end
    end

    -- If no 3 consecutive characters are the same, return true
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_happy
    lu.assertEquals(candidate('a'), false)
    lu.assertEquals(candidate('aa'), false)
    lu.assertEquals(candidate('abcd'), true)
    lu.assertEquals(candidate('aabb'), false)
    lu.assertEquals(candidate('adb'), true)
    lu.assertEquals(candidate('xyy'), false)
    lu.assertEquals(candidate('iopaxpoi'), true)
    lu.assertEquals(candidate('iopaxioi'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_81,lin_Latn,lua,"- Ndakisa: - 0.0 E - > 0,0 D- - > 0,7 D - > 1,0 D+ - > 1.3 C- - > 1,7 C - > 2.0 C+ - > 2.3 B- - > 2.7 B - > 3.0 B+ - > 3.3 A- - > 3.7 A - 4,0 A+ - Mwayene ya bana-kelasi.- fonction oyo ekoki kobimisa liste ya ba grade ya ba lettres na lisalisi ya liste oyo: - Apesi yo liste ya ba GPA ya bayekoli mosusu mpe osengeli kokoma .- Mokakatano bobele moko ezali ete, abungisaki code oyo azalaki kosalela mpo na kopesa bango bapwɛ.Molakisi azalaki kosala algorithme na ye moko mpo na kopesa bana-kelasi bapwɛ.- Ezali poso ya nsuka ya semestre mpe molakisi asengeli kopesa ba notes -- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})
-- {'A+', 'B', 'C-', 'C', 'A-'}
local function numerical_letter_grade(grades)
","local function numerical_letter_grade(grades)
    local letter_grades = {}
    for _, gpa in ipairs(grades) do
        local letter
        if gpa == 4.0 then
            letter = ""A+""
        elseif gpa > 3.7 then
            letter = ""A""
        elseif gpa > 3.3 then
            letter = ""A-""
        elseif gpa > 3.0 then
            letter = ""B+""
        elseif gpa > 2.7 then
            letter = ""B""
        elseif gpa > 2.3 then
            letter = ""B-""
        elseif gpa > 2.0 then
            letter = ""C+""
        elseif gpa > 1.7 then
            letter = ""C""
        elseif gpa > 1.3 then
            letter = ""C-""
        elseif gpa > 1.0 then
            letter = ""D+""
        elseif gpa > 0.7 then
            letter = ""D""
        elseif gpa > 0.0 then
            letter = ""D-""
        else
            letter = ""E""
        end
        table.insert(letter_grades, letter)
    end
    return letter_grades
end","lu = require('luaunit')

function test_humaneval()
local candidate = numerical_letter_grade
    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})
    lu.assertEquals(candidate({1.2}), {'D+'})
    lu.assertEquals(candidate({0.5}), {'D-'})
    lu.assertEquals(candidate({0.0}), {'E'})
    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})
    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_82,lin_Latn,lua,"- Bandakisa - bolai ezali motango ya liboso to ezali lokuta soki te - Komá mosala oyo ezwaka molɔngɔ́ mpe ezongisaka solo soki molɔngɔ́ yango ezali -- >>> prime_length('Hello')
-- true
-- >>> prime_length('abcdcba')
-- true
-- >>> prime_length('kittens')
-- true
-- >>> prime_length('orange')
-- false
local function prime_length(string)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    local i = 5
    while i * i <= n do
        if n % i == 0 or n % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function prime_length(str)
    local length = #str
    return is_prime(length)
end","lu = require('luaunit')

function test_humaneval()
local candidate = prime_length
    lu.assertEquals(candidate('Hello'), true)
    lu.assertEquals(candidate('abcdcba'), true)
    lu.assertEquals(candidate('kittens'), true)
    lu.assertEquals(candidate('orange'), false)
    lu.assertEquals(candidate('wow'), true)
    lu.assertEquals(candidate('world'), true)
    lu.assertEquals(candidate('MadaM'), true)
    lu.assertEquals(candidate('Wow'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('HI'), true)
    lu.assertEquals(candidate('go'), true)
    lu.assertEquals(candidate('gogo'), false)
    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)
    lu.assertEquals(candidate('Madam'), true)
    lu.assertEquals(candidate('M'), false)
    lu.assertEquals(candidate('0'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_83,lin_Latn,lua,"- Mitángo ya mobimba ya malamu oyo ebandi na 1 to esuki na 1. - Soki ozwi motango ya mobimba n, zongisa motango ya ba nombre ya ba chiffres n local function starts_one_ends(n)
","local function starts_one_ends(n)
    if n == 1 then
        return 1 -- The single-digit numbers starting or ending with 1 is just 1 itself.
    end
    -- Calculate the count of n-digit numbers starting with 1 and ending with 1.
    local count_start_with_1 = 10 ^ (n - 1) -- All numbers from 100... to 199...
    local count_end_with_1 = 9 * (10 ^ (n - 1)) -- All numbers from 1, 11, 21,... excluding those starting with 1.
    
    -- A number starting and ending with 1 like 101 has been counted twice, correct for that.
    return count_start_with_1 + count_end_with_1 - 10 ^ (n - 2)
end","lu = require('luaunit')

function test_humaneval()
local candidate = starts_one_ends
    lu.assertEquals(candidate(1), 1)
    lu.assertEquals(candidate(2), 18)
    lu.assertEquals(candidate(3), 180)
    lu.assertEquals(candidate(4), 1800)
    lu.assertEquals(candidate(5), 18000)
end

os.exit(lu.LuaUnit.run())"
HumanEval_84,lin_Latn,lua,"- Ndakisa - Soki bapesi yo motango ya mobimba N, zongisá motango ya mituya na yango na binɛrɛ. -- >>> solve(1000)
-- '1'
-- >>> solve(150)
-- '110'
-- >>> solve(147)
-- '1100'
-- Variables:
--     @N integer
--          Constraints: 0 ≤ N ≤ 10000.
-- Output:
--      a string of binary number
local function solve(N)
","local function solve(N)
    local sum = 0
    while N > 0 do
        sum = sum + (N % 10)
        N = math.floor(N / 10)
    end
    return string.format(""%b"", sum)
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate(1000), '1')
    lu.assertEquals(candidate(150), '110')
    lu.assertEquals(candidate(147), '1100')
    lu.assertEquals(candidate(333), '1001')
    lu.assertEquals(candidate(963), '10010')
end

os.exit(lu.LuaUnit.run())"
HumanEval_85,lin_Latn,lua,"- Bandakisa: - Soki tozwi liste ya mitángo ya mobimba oyo ezali ya mpamba te, tóbakisa mitángo ya mitángo ya zolongano oyo ezali na mitángo ya zolongano te.-- >>> add({4, 2, 6, 7})
-- 2
local function add(lst)
","local function add(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 0 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add
    lu.assertEquals(candidate({4, 88}), 88)
    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)
    lu.assertEquals(candidate({4, 0, 6, 7}), 0)
    lu.assertEquals(candidate({4, 4, 6, 8}), 12)
end

os.exit(lu.LuaUnit.run())"
HumanEval_86,lin_Latn,lua,"- Na ndakisa: - Likanisi: Esengeli kobatela molɔngɔ ya maloba mpe bisika ya polele na kati ya fraze. - molɔngɔ́ ya kokita na kotalela motuya ya ascii. - bakomi na esika ya liloba ya sika oyo ezali na makomi nyonso oyo ezali na kati ya - Molɔngɔ́ ya maloba oyo etyami na molɔngɔ́, ezali molɔngɔ́ oyo maloba nyonso (ekabwani na esika) - Komá mosala moko oyo ezwaka molɔngɔ́ moko mpe ezongisaka molɔngɔ́ oyo etyami na molɔngɔ́. -- >>> anti_shuffle('Hi')
-- 'Hi'
-- >>> anti_shuffle('hello')
-- 'ehllo'
-- >>> anti_shuffle('Hello World!!!')
-- 'Hello !!!Wdlor'
local function anti_shuffle(s)
","local function anti_shuffle(s)
    local function sort_word(word)
        local chars = {}
        for char in word:gmatch(""."") do
            table.insert(chars, char)
        end
        table.sort(chars)
        return table.concat(chars)
    end

    return (s:gsub(""%S+"", sort_word))
end","lu = require('luaunit')

function test_humaneval()
local candidate = anti_shuffle
    lu.assertEquals(candidate('Hi'), 'Hi')
    lu.assertEquals(candidate('hello'), 'ehllo')
    lu.assertEquals(candidate('number'), 'bemnru')
    lu.assertEquals(candidate('abcd'), 'abcd')
    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
    lu.assertEquals(candidate(''), '')
    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
end

os.exit(lu.LuaUnit.run())"
HumanEval_87,lin_Latn,lua,"- Bandakisa: - Lisusu, bongisá ba coordonnées ya molɔngɔ na kolanda milɔngɔ na molɔngɔ. - Na ebandeli, bongisá bisika na molɔngɔ na kolanda ndenge oyo ezali komata. - etanda mokomoko ezali na esika moko - (molɔngɔ, milɔngɔ), kobanda na 0. - mpe kozongisa mesa ya mesa, [(x1, y1), (x2, y2) ...] lolenge ete - Soki ozwi lst, mpe motango mobimba x, luka motango mobimba x na table, - molongo moko moko ekoki kozala na motango ya makomi ekeseni. - oyo ekokani na matrice, kasi ekeseni na matrices, - Bapesi yo makambo ya dimension mibale, lokola mesa ya kolala, -- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)
-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}
-- >>> get_row({}, 1)
-- {}
-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)
-- {{2, 2}}
local function get_row(lst, x)
","local function get_row(lst, x)
    local coordinates = {}
    for row_index, row in ipairs(lst) do
        for col_index = #row, 1, -1 do
            if row[col_index] == x then
                table.insert(coordinates, {row_index - 1, col_index - 1})
            end
        end
    end
    table.sort(coordinates, function(a, b)
        if a[1] == b[1] then
            return a[2] > b[2]
        else
            return a[1] < b[1]
        end
    end)
    return coordinates
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_row
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})
    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})
    lu.assertEquals(candidate({}, 1), {})
    lu.assertEquals(candidate({{1}}, 2), {})
    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})
end

os.exit(lu.LuaUnit.run())"
HumanEval_88,lin_Latn,lua,"- Bandakisa: - * kobongola te mesa oyo epesami. - Elembo: - to kokabola yango na molɔngɔ ya kokita soki motuya ya ((motuya ya liboso ya index, motango ya nsuka ya index) ezali ata moko. - okotya molɔngɔ na molɔngɔ ya likoló soki motuya ya ((motuya ya liboso ya index, motango ya nsuka ya index) ezali ya mopaya, - Soki bapesi yo liste ya mituya ya mobimba oyo ezali ya mabe te, kozongisa liste ya liste oyo bapesi yo nsima ya kobongisa, -- >>> sort_array({})
-- {}
-- >>> sort_array({5})
-- {5}
-- >>> sort_array({2, 4, 3, 0, 1, 5})
-- {0, 1, 2, 3, 4, 5}
-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})
-- {6, 5, 4, 3, 2, 1, 0}
local function sort_array(array)
","local function sort_array(array)
    -- Create a copy of the given table
    local sorted_array = {}
    for i = 1, #array do
        sorted_array[i] = array[i]
    end

    -- If the table is not empty
    if #sorted_array > 0 then
        local first = sorted_array[1]
        local last = sorted_array[#sorted_array]
        local sum = first + last
        
        -- Sort in ascending or descending order based on the sum
        if sum % 2 == 0 then
            table.sort(sorted_array, function(a, b) return a > b end)
        else
            table.sort(sorted_array, function(a, b) return a < b end)
        end
    end

    return sorted_array
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({5}), {5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})
    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})
    lu.assertEquals(candidate({2, 1}), {1, 2})
    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})
    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})
end

os.exit(lu.LuaUnit.run())"
HumanEval_89,lin_Latn,lua,"- Na ndakisa: - kokita na nse na biteni mibale mbala mibale. - Alfabɛ esengeli kobaluka na lolenge oyo ete balɛtrɛ - ezongisi string oyo ekomami na alfabɛ oyo ezali kobaluka. - Sala encrypt ya fonction oyo ekozwa string lokola argument mpe -- >>> encrypt('hi')
-- 'lm'
-- >>> encrypt('asdfghjkl')
-- 'ewhjklnop'
-- >>> encrypt('gf')
-- 'kj'
-- >>> encrypt('et')
-- 'ix'
local function encrypt(s)
","local function encrypt(s)
    local result = {}
    local shift = 2 * 2
    for i = 1, #s do
        local char = s:sub(i,i)
        if char:match(""%a"") then
            local ascii_offset = char:match(""%l"") and string.byte('a') or string.byte('A')
            local new_char = string.char(((string.byte(char) - ascii_offset + shift) % 26) + ascii_offset)
            table.insert(result, new_char)
        else
            table.insert(result, char)
        end
    end
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encrypt
    lu.assertEquals(candidate('hi'), 'lm')
    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')
    lu.assertEquals(candidate('gf'), 'kj')
    lu.assertEquals(candidate('et'), 'ix')
    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')
    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')
    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')
    lu.assertEquals(candidate('a'), 'e')
end

os.exit(lu.LuaUnit.run())"
HumanEval_90,lin_Latn,lua,"- Zongisa nil soki elembo ya ndenge wana ezali te. - Komá mosala next_smallest (ya moke) oyo ezongisaka elembo ya mibale ya moke na mesa. - Bapesi yo liste ya mitángo ya mobimba.-- >>> next_smallest({1, 2, 3, 4, 5})
-- 2
-- >>> next_smallest({5, 1, 4, 3, 2})
-- 2
-- >>> next_smallest({})
-- None
-- >>> next_smallest({1, 1})
-- None
local function next_smallest(lst)
","local function next_smallest(lst)
    if #lst < 2 then
        return nil
    end

    table.sort(lst)

    local first = lst[1]
    for i = 2, #lst do
        if lst[i] > first then
            return lst[i]
        end
    end

    return nil
end","lu = require('luaunit')

function test_humaneval()
local candidate = next_smallest
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)
    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)
    lu.assertEquals(candidate({1, 1}), None)
    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)
end

os.exit(lu.LuaUnit.run())"
HumanEval_91,lin_Latn,lua,"- Na ndakisa: - Bafraze ekatanaka na """", ""?"" to ""!"" Koyoka nsɔni ezali maloba oyo ebandi na liloba ""ngai"".- Bakopesa yo maloba ebele, mpe mokumba na yo ezali ya kotánga motángo na yango.-- >>> is_bored('Hello world')
-- 0
-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')
-- 1
local function is_bored(S)
","local function is_bored(S)
    local count = 0
    -- Split the string into sentences using patterns
    for sentence in S:gmatch(""[^%.!?]+"") do
        -- Trim leading whitespace from the sentence
        sentence = sentence:gsub(""^%s+"", """")
        -- Check if the sentence starts with ""I""
        if sentence:sub(1, 1) == ""I"" then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_bored
    lu.assertEquals(candidate('Hello world'), 0)
    lu.assertEquals(candidate('Is the sky blue?'), 0)
    lu.assertEquals(candidate('I love It !'), 1)
    lu.assertEquals(candidate('bIt'), 0)
    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)
    lu.assertEquals(candidate('You and I are going for a walk'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_92,lin_Latn,lua,"- Bandakisa - Ekomonisa lokuta na makambo mosusu nyonso. - Ekomonisa solo soki moko ya mitángo yango ekokani na motángo ya mitángo mosusu mibale, mpe mitángo nyonso ezali ya mobimba. - Salá mosala oyo ekozwa mituya 3. -- >>> any_int(5, 2, 7)
-- true
-- >>> any_int(3, 2, 2)
-- false
-- >>> any_int(3, -2, 1)
-- true
-- >>> any_int(3.6, -2.2, 2)
-- false
local function any_int(x, y, z)
","local function any_int(x, y, z)
    if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then
        if x == y + z or y == x + z or z == x + y then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = any_int
    lu.assertEquals(candidate(2, 3, 1), true)
    lu.assertEquals(candidate(2.5, 2, 3), false)
    lu.assertEquals(candidate(1.5, 5, 3.5), false)
    lu.assertEquals(candidate(2, 6, 2), false)
    lu.assertEquals(candidate(4, 2, 2), true)
    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
    lu.assertEquals(candidate(-4, 6, 2), true)
    lu.assertEquals(candidate(2, 1, 1), true)
    lu.assertEquals(candidate(3, 4, 7), true)
    lu.assertEquals(candidate(3.0, 4, 7), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_93,lin_Latn,lua,"- Bandakisa: - Kosalela kaka makomi. - monoko ya lokótá ya Lingelesi. - nsango oyo ezali na lɛtɛlɛ oyo ezali na bisika mibale liboso na yango - lolenge oyo ezali kobaluka ya makomi nyonso, ezali kokitana na makomi nyonso ya monoko na kati ya - Komá mosala moko oyo ezwaka nsango, mpe ekotisaka yango na lolenge oyo:-- >>> encode('test')
-- 'TGST'
-- >>> encode('This is a message')
-- 'tHKS KS C MGSSCGG'
local function encode(message)
","local function encode(message)
    local vowels = { a = 'c', e = 'g', i = 'k', o = 'q', u = 'w', A = 'C', E = 'G', I = 'K', O = 'Q', U = 'W' }
    local encodedMessage = {}
    
    for i = 1, #message do
        local char = message:sub(i, i)
        
        -- Swap case
        if char:match('%l') then
            char = char:upper()
        else
            char = char:lower()
        end
        
        -- Replace vowels
        if vowels[char] then
            char = vowels[char]
        end
        
        table.insert(encodedMessage, char)
    end
    
    return table.concat(encodedMessage)
end","lu = require('luaunit')

function test_humaneval()
local candidate = encode
    lu.assertEquals(candidate('TEST'), 'tgst')
    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')
    lu.assertEquals(candidate('YES'), 'ygs')
    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')
    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')
end

os.exit(lu.LuaUnit.run())"
HumanEval_94,lin_Latn,lua,"- Bandakisa: - Esengeli ozwa motuya ya liboso ya motuya monene mpe ozongisa motuya ya mituya na yango. - Bapesi yo liste ya mitángo ya mobimba.-- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
-- 10
-- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
-- 25
-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
-- 13
-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
-- 11
-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
-- 3
-- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
-- 7
local function skjkasdkd(lst)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.sqrt(n), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
    end
    return true
end

local function sum_of_digits(n)
    local sum = 0
    while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
    end
    return sum
end

local function skjkasdkd(lst)
    local largest_prime = -1
    for _, v in ipairs(lst) do
        if is_prime(v) and v > largest_prime then
            largest_prime = v
        end
    end
    if largest_prime == -1 then return 0 end
    return sum_of_digits(largest_prime)
end","lu = require('luaunit')

function test_humaneval()
local candidate = skjkasdkd
    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
    lu.assertEquals(candidate({8191}), 19)
    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
    lu.assertEquals(candidate({127, 97, 8192}), 10)
end

os.exit(lu.LuaUnit.run())"
HumanEval_95,lin_Latn,lua,"- Bandakisa: - Fonction esengeli kozongisa false soki table oyo epesami ezali na eloko te. - case to bafungola nionso ezali string na case ya monene, soki te bozongisi false. - Soki ozwi table, bozongisaka solo soki ba clés nionso ezali ba chaînes na lower -- >>> check_dict_case({['a'] = 'apple', ['b'] = 'banana'})
-- true
-- >>> check_dict_case({['a'] = 'apple', ['A'] = 'banana', ['B'] = 'banana'})
-- false
-- >>> check_dict_case({['a'] = 'apple', [8] = 'banana', ['a'] = 'apple'})
-- false
-- >>> check_dict_case({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'})
-- false
-- >>> check_dict_case({['STATE'] = 'NC', ['ZIP'] = '12345'})
-- true
local function check_dict_case(dict)
","local function is_lowercase(s)
    return s:lower() == s
end

local function is_uppercase(s)
    return s:upper() == s
end

local function check_dict_case(dict)
    if next(dict) == nil then
        return false
    end

    local lower_case = nil
    for key, _ in pairs(dict) do
        if type(key) ~= 'string' then
            return false
        end
        
        if lower_case == nil then
            lower_case = is_lowercase(key)
        elseif lower_case ~= is_lowercase(key) then
            return false
        end
    end
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_dict_case
    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)
    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)
    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)
    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)
    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)
    lu.assertEquals(candidate({}), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_96,lin_Latn,lua,"- na ndakisa: - Mitángo ya mobimba oyo ezali ya liboso mpe ya moke koleka n. - Kokokisa mosala oyo ezwaka motango mobimba oyo ezali ya mabe te mpe ezongisaka mesa ya n ya liboso -- >>> count_up_to(5)
-- {2, 3}
-- >>> count_up_to(11)
-- {2, 3, 5, 7}
-- >>> count_up_to(0)
-- {}
-- >>> count_up_to(20)
-- {2, 3, 5, 7, 11, 13, 17, 19}
-- >>> count_up_to(1)
-- {}
-- >>> count_up_to(18)
-- {2, 3, 5, 7, 11, 13, 17}
local function count_up_to(n)
","local function is_prime(num)
    if num <= 1 then return false end
    if num <= 3 then return true end
    if num % 2 == 0 or num % 3 == 0 then return false end
    local i = 5
    while i * i <= num do
        if num % i == 0 or num % (i + 2) == 0 then return false end
        i = i + 6
    end
    return true
end

local function count_up_to(n)
    local primes = {}
    for i = 2, n - 1 do
        if is_prime(i) then
            table.insert(primes, i)
        end
    end
    return primes
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_up_to
    lu.assertEquals(candidate(5), {2, 3})
    lu.assertEquals(candidate(6), {2, 3, 5})
    lu.assertEquals(candidate(7), {2, 3, 5})
    lu.assertEquals(candidate(10), {2, 3, 5, 7})
    lu.assertEquals(candidate(0), {})
    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})
    lu.assertEquals(candidate(1), {})
    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})
    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})
end

os.exit(lu.LuaUnit.run())"
HumanEval_97,lin_Latn,lua,"- Bandakisa: - Tókanisa ete makambo oyo ezali na kati ezali ntango nyonso solo.- molɔngɔ ya mitángo ya mitángo na bango. - Kokisa mosala oyo ezwaka mituya mibale mpe ezongisi -- >>> multiply(148, 412)
-- 16
-- >>> multiply(19, 28)
-- 72
-- >>> multiply(2020, 1851)
-- 0
-- >>> multiply(14, -15)
-- 20
local function multiply(a, b)
","local function multiply(a, b)
    local unitDigitA = math.abs(a) % 10
    local unitDigitB = math.abs(b) % 10
    return unitDigitA * unitDigitB
end","lu = require('luaunit')

function test_humaneval()
local candidate = multiply
    lu.assertEquals(candidate(148, 412), 16)
    lu.assertEquals(candidate(19, 28), 72)
    lu.assertEquals(candidate(2020, 1851), 0)
    lu.assertEquals(candidate(14, -15), 20)
    lu.assertEquals(candidate(76, 67), 42)
    lu.assertEquals(candidate(17, 27), 49)
    lu.assertEquals(candidate(0, 1), 0)
    lu.assertEquals(candidate(0, 0), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_98,lin_Latn,lua,"- Na ndakisa: - Soki bapesi yo molɔngɔ́ ya maloba s, tángá motángo ya bavocales ya minene na ba indices ya paire. -- >>> count_upper('aBCdEf')
-- 1
-- >>> count_upper('abcdefg')
-- 0
-- >>> count_upper('dBBE')
-- 0
local function count_upper(s)
","local function count_upper(s)
    local count = 0
    local vowels = { A = true, E = true, I = true, O = true, U = true }
    for i = 1, #s, 2 do
        local char = s:sub(i, i)
        if vowels[char] then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_upper
    lu.assertEquals(candidate('aBCdEf'), 1)
    lu.assertEquals(candidate('abcdefg'), 0)
    lu.assertEquals(candidate('dBBE'), 0)
    lu.assertEquals(candidate('B'), 0)
    lu.assertEquals(candidate('U'), 1)
    lu.assertEquals(candidate(''), 0)
    lu.assertEquals(candidate('EEEE'), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_99,lin_Latn,lua,"- Bandakisa - na mitángo mibale ya mobimba, na nsima tokokende na zero. - mpe ezongisi motango ya mobimba oyo ezali pene na yango.- Kozala na mosala oyo ekozwa motuya (molongo) oyo ezali komonisa motango moko -- >>> closest_integer('10')
-- 10
-- >>> closest_integer('15.3')
-- 15
-- Note:
-- Rounding away from zero means that if the given number is equidistant
-- from two integers, the one you should return is the one that is the
-- farthest from zero. For example closest_integer(""14.5"") should
-- return 15 and closest_integer(""-14.5"") should return -15.
local function closest_integer(value)
","local function closest_integer(value)
    local number = tonumber(value)
    if not number then
        error(""Invalid number"")
    end
    if number > 0 then
        return math.floor(number + 0.5)
    else
        return math.ceil(number - 0.5)
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = closest_integer
    lu.assertEquals(candidate('10'), 10)
    lu.assertEquals(candidate('14.5'), 15)
    lu.assertEquals(candidate('-15.5'), -16)
    lu.assertEquals(candidate('15.3'), 15)
    lu.assertEquals(candidate('0'), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_100,lin_Latn,lua,"- Bandakisa: - i ezali motango ya mabanga na nivo (i+1). - Ekomonisa motángo ya mabanga na etando mokomoko na kati ya mesa, epai elembo na index - - motángo ya mibale ya pauni soki n ezali pauni. - - motango ya liboso ya motango ya mibale soki n ezali motango ya mibale. - Motángo ya mabanga na etaze oyo elandi ezali: - Na etaje ya liboso, mabanga ezali mingi.Soki ozwi motángo mobimba n, osengeli kosala liboke ya mabanga oyo ezali na milɔngɔ n.-- >>> make_a_pile(3)
-- {3, 5, 7}
local function make_a_pile(n)
","local function make_a_pile(n)
    local pile = {}
    local current_stones = n
    for i = 1, n do
        table.insert(pile, current_stones)
        if n % 2 == 0 then
            current_stones = current_stones + 2
        else
            current_stones = current_stones + 2
        end
    end
    return pile
end","lu = require('luaunit')

function test_humaneval()
local candidate = make_a_pile
    lu.assertEquals(candidate(3), {3, 5, 7})
    lu.assertEquals(candidate(4), {4, 6, 8, 10})
    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})
    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})
    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})
end

os.exit(lu.LuaUnit.run())"
HumanEval_101,lin_Latn,lua,"- Na ndakisa: - kokabola maloba na maloba mpe kozongisa liste ya maloba. - Bakopesa yo maloba oyo ekokabolama na mwa ba commas to na mwa bisika.-- >>> words_string('Hi, my name is John')
-- {'Hi', 'my', 'name', 'is', 'John'}
-- >>> words_string('One, two, three, four, five, six')
-- {'One', 'two', 'three', 'four', 'five', 'six'}
local function words_string(s)
","local function words_string(s)
    local words = {}
    for word in s:gmatch(""[^,%s]+"") do
        table.insert(words, word)
    end
    return words
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_string
    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})
    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})
    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_102,lin_Latn,lua,"- Na ndakisa: - ezali na motango ya boye te, bongo mosala esengeli kozongisa -1. - motuya ya monene ya mobimba oyo ezali kati na [x, y] nyonso.- Fonction oyo ezwaka ba nombres positifs mibale x mpe y mpe ezongaka na -- >>> choose_num(12, 15)
-- 14
-- >>> choose_num(13, 12)
-- -1
local function choose_num(x, y)
","local function choose_num(x, y)
    -- Ensure x is the smaller and y is the larger
    if x > y then
        x, y = y, x
    end
    
    -- Start from y and work backwards
    for i = y, x, -1 do
        if i % 2 == 0 then
            return i
        end
    end
    
    -- If no even number is found
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = choose_num
    lu.assertEquals(candidate(12, 15), 14)
    lu.assertEquals(candidate(13, 12), -1)
    lu.assertEquals(candidate(33, 12354), 12354)
    lu.assertEquals(candidate(5234, 5233), -1)
    lu.assertEquals(candidate(6, 29), 28)
    lu.assertEquals(candidate(27, 10), -1)
    lu.assertEquals(candidate(7, 7), -1)
    lu.assertEquals(candidate(546, 546), 546)
end

os.exit(lu.LuaUnit.run())"
HumanEval_103,lin_Latn,lua,"- Ndakisa: - Soki n eleki m, kozongisa -1. - Zongisá eyano na nimero mobimba oyo ezali pene mpe bongisá yango na binɛrɛ. - mwayene ya mitángo ya mobimba kobanda na n tii na m (na kati na yango n mpe m). - Bapesi yo mituya mibale ya malamu n mpe m, mpe mosala na yo ezali ya koyeba -- >>> rounded_avg(1, 5)
-- '0b11'
-- >>> rounded_avg(7, 5)
-- -1
-- >>> rounded_avg(10, 20)
-- '0b1111'
-- >>> rounded_avg(20, 33)
-- '0b11010'
local function rounded_avg(n, m)
","local function rounded_avg(n, m)
    if n > m then
        return -1
    end
    
    local sum = 0
    local count = 0

    for i = n, m do
        sum = sum + i
        count = count + 1
    end

    local average = sum / count
    local rounded_avg = math.floor(average + 0.5)

    return string.format(""0b%d"", tonumber(string.format(""%o"", rounded_avg), 8))
end","lu = require('luaunit')

function test_humaneval()
local candidate = rounded_avg
    lu.assertEquals(candidate(1, 5), '0b11')
    lu.assertEquals(candidate(7, 13), '0b1010')
    lu.assertEquals(candidate(964, 977), '0b1111001010')
    lu.assertEquals(candidate(996, 997), '0b1111100100')
    lu.assertEquals(candidate(560, 851), '0b1011000010')
    lu.assertEquals(candidate(185, 546), '0b101101110')
    lu.assertEquals(candidate(362, 496), '0b110101101')
    lu.assertEquals(candidate(350, 902), '0b1001110010')
    lu.assertEquals(candidate(197, 233), '0b11010111')
    lu.assertEquals(candidate(7, 5), -1)
    lu.assertEquals(candidate(5, 1), -1)
    lu.assertEquals(candidate(5, 5), '0b101')
end

os.exit(lu.LuaUnit.run())"
HumanEval_104,lin_Latn,lua,"- Na ndakisa: - Esengeli kotia na molongo ya komata na molongo ya komata.- biloko oyo ezali na mitángo ya paire te. - Soki bapesi yo table ya ba integres ya positif x. Zongisa table ya ba -- >>> unique_digits({15, 33, 1422, 1})
-- {1, 15, 33}
-- >>> unique_digits({152, 323, 1422, 10})
-- {}
local function unique_digits(x)
","local function has_even_digit(num)
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            return true
        end
        num = math.floor(num / 10)
    end
    return false
end

local function unique_digits(x)
    local result = {}
    for _, num in ipairs(x) do
        if not has_even_digit(num) then
            table.insert(result, num)
        end
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = unique_digits
    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})
    lu.assertEquals(candidate({152, 323, 1422, 10}), {})
    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})
    lu.assertEquals(candidate({135, 103, 31}), {31, 135})
end

os.exit(lu.LuaUnit.run())"
HumanEval_105,lin_Latn,lua,"- Na ndakisa: - ""Moko"", ""Mokobale"", ""Mikóló"", ""Mikóló"", ""Mikóló"", ""Mikóló"", ""Mikóló"", ""Mikóló"", ""Mikóló"", ""Mikóló"".- kobalusa mesa oyo ezwami, mpe na nsima kobakisa nimero mokomoko na nkombo na yango oyo ekokani na oyo ya - Soki bapesi yo liste ya mituya ya mobimba, poná mituya ya mobimba oyo ezali kati na 1 mpe 9 nyonso, -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
--   If the table is empty, return an empty table:
-- >>> by_length({})
-- {}
--   If the table has any strange number ignore it:
-- >>> by_length({1, -1, 55})
-- {'One'}
local function by_length(arr)
","local function by_length(arr)
    local digits_names = {
        [1] = ""One"", [2] = ""Two"", [3] = ""Three"", [4] = ""Four"", [5] = ""Five"",
        [6] = ""Six"", [7] = ""Seven"", [8] = ""Eight"", [9] = ""Nine""
    }

    local filtered = {}
    for _, num in ipairs(arr) do
        if num >= 1 and num <= 9 then
            table.insert(filtered, num)
        end
    end

    table.sort(filtered, function(a, b) return a > b end)

    for i, num in ipairs(filtered) do
        filtered[i] = digits_names[num]
    end

    return filtered
end","lu = require('luaunit')

function test_humaneval()
local candidate = by_length
    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -1, 55}), {'One'})
    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_106,lin_Latn,lua,"- Ndakisa: - factoriale ya i ezali kobakisa ya mitángo uta 1 kino i (1 * 2 * ... * i). - Ebandaka na 1. - to motuya ya mituya uta 1 kino i. - mpe ezongisi table ya monene n, boye ete motuya ya elembo na index i ezali factoriel ya i soki i ezali paire - Tosalela fonction f oyo ezwi n lokola paramètre, -- >>> f(5)
-- {1, 2, 6, 24, 15}
local function f(n)
","local function factorial(x)
    if x == 0 then
        return 1
    else
        local result = 1
        for i = 2, x do
            result = result * i
        end
        return result
    end
end

local function sum_to_i(x)
    return (x * (x + 1)) // 2
end

local function f(n)
    local result = {}
    for i = 1, n do
        if i % 2 == 0 then
            result[i] = factorial(i)
        else
            result[i] = sum_to_i(i)
        end
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = f
    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})
    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})
    lu.assertEquals(candidate(1), {1})
    lu.assertEquals(candidate(3), {1, 2, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_107,lin_Latn,lua,"- Ndakisa 1: - palindrome ya motuya mobimba oyo ezali na kati ya molongo ((1, n), na kati. - Soki ozwi motuya mobimba n, zongisa mesa oyo ezali na motuya ya mituya ya paire mpe ya impaire -- >>> even_odd_palindrome(3)
-- {1, 2}
--     Explanation:
--     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
-- Example 2:
-- >>> even_odd_palindrome(12)
-- {4, 6}
--     Explanation:
--     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
-- Note:
--     1. 1 <= n <= 10^3
--     2. returned table has the number of even and odd integer palindromes respectively.
local function even_odd_palindrome(n)
","local function is_palindrome(num)
    local str = tostring(num)
    return str == string.reverse(str)
end

local function even_odd_palindrome(n)
    local even_count = 0
    local odd_count = 0

    for i = 1, n do
        if is_palindrome(i) then
            if i % 2 == 0 then
                even_count = even_count + 1
            else
                odd_count = odd_count + 1
            end
        end
    end

    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_palindrome
    lu.assertEquals(candidate(123), {8, 13})
    lu.assertEquals(candidate(12), {4, 6})
    lu.assertEquals(candidate(3), {1, 2})
    lu.assertEquals(candidate(63), {6, 8})
    lu.assertEquals(candidate(25), {5, 6})
    lu.assertEquals(candidate(19), {4, 6})
    lu.assertEquals(candidate(9), {4, 5})
    lu.assertEquals(candidate(1), {0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_108,lin_Latn,lua,"- na ndakisa -123 ezali na bilembo -1, 2, mpe 3. - Soki motango moko ezali ya mabe, bongo motango ya liboso oyo ezali na elembo na yango ekozala ya mabe: - motango ya biloko oyo ezali na motango ya ba chiffres > 0. - Komá mosala count_nums oyo ezwaka etanda ya mitángo ya mobimba mpe ezongisaka -- >>> count_nums({})
-- 0
-- >>> count_nums({-1, 11, -11})
-- 1
-- >>> count_nums({1, 1, 2})
-- 3
local function count_nums(arr)
","local function count_nums(arr)
    local function sum_of_digits(num)
        local sum = 0
        local is_negative = num < 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        if is_negative then
            sum = sum - 2 * (math.floor(math.abs(arr[index]) / 10 ^ (math.floor(math.log10(math.abs(arr[index]))))))
        end
        return sum
    end

    local count = 0
    for _, num in ipairs(arr) do
        local digit_sum = sum_of_digits(num)
        if digit_sum > 0 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = count_nums
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({-1, -2, 0}), 0)
    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)
    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)
    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)
    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)
    lu.assertEquals(candidate({0, 1}), 1)
    lu.assertEquals(candidate({1}), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_109,lin_Latn,lua,"- Na ndakisa: - Esengeli koyeba ete elembo moko te ekokani na mosusu.- Soki table oyo epesami eza na eloko te, ezongisi true. - na nsima bozongisaka solo to bozongisaka lokuta. - Soki ekoki kosalema ete ozwa liste oyo etyami na molɔngɔ́ na kosaleláká misala oyo ezali awa na likoló - esika ya ebandeli na tableau, elingi koloba index ya 0e. - esika na nzela ya malamu elembo ya nsuka ya mesa ekotindama na - Kosala likambo moko ya kobaluka na lobɔkɔ ya mobali elimboli kobalusa elembo nyonso ya mesa na moko - Okoki kosala mosala ya kobaluka na lobɔkɔ ya mobali mbala nyonso oyo olingi.- mosala oyo elandi na table oyo epesami: - ekoki kosalema ete molɔngɔ́ ya mesa ekita te na kosaleláká - Mitángo ya mesa ekotyama na molɔngɔ́ na mbalakaka.- Tozali na mesa 'arr' ya N ba integers arr[1], arr[2], ..., arr[N].-- >>> move_one_ball({3, 4, 5, 1, 2})
-- true
-- Explanation: By performin 2 right shift operations, non-decreasing order can
--              be achieved for the given table.
-- >>> move_one_ball({3, 5, 4, 1, 2})
-- false
-- Explanation:It is not possible to get non-decreasing order for the given
--             table by performing any number of right shift operations.
local function move_one_ball(arr)
","local function move_one_ball(arr)
    local n = #arr
    if n == 0 then
        return true
    end

    local count_descending_pairs = 0

    for i = 1, n do
        if arr[i] > arr[(i % n) + 1] then
            count_descending_pairs = count_descending_pairs + 1
        end
        if count_descending_pairs > 1 then
            return false
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = move_one_ball
    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)
    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)
    lu.assertEquals(candidate({4, 3, 1, 2}), false)
    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)
    lu.assertEquals(candidate({}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_110,lin_Latn,lua,"- Na ndakisa: - Soki te, kozongisa ""NO"". - ba elembo nyonso ya lst1 ezala ata moko, bozongisaka ""YES"". - Soki likoki ezali ya kotia elembo moko na elembo mosusu kati na elembo ya lst1 mpe elembo ya lst2 mpo na kosala - Ezali na ndelo te na motango ya biloko oyo ekoki kotɛkama kati na lst1 mpe lst2. - kati na bango mpo na kosala Lst1 etanda ya mitángo ya paire. - mpe emonaka soki ekoki kosalema ete bápesa biloko mosusu na moto mosusu Na lisoló oyo, okosala mosala oyo ekozwa ba table mibale ya mitángo, -- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})
-- 'YES'
-- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})
-- 'NO'
-- It is assumed that the input tables will be non-empty.
local function exchange(lst1, lst2)
","local function exchange(lst1, lst2)
    local is_all_even = true
    local odd_count_lst1 = 0
    local even_count_lst2 = 0

    -- Check lst1 for odd numbers
    for _, num in ipairs(lst1) do
        if num % 2 ~= 0 then
            odd_count_lst1 = odd_count_lst1 + 1
        end
    end

    -- Check lst2 for even numbers
    for _, num in ipairs(lst2) do
        if num % 2 == 0 then
            even_count_lst2 = even_count_lst2 + 1
        end
    end

    -- It is possible to make lst1 all even if the number of odd elements
    -- in lst1 can be swapped with the number of even elements in lst2
    if odd_count_lst1 <= even_count_lst2 then
        return ""YES""
    else
        return ""NO""
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = exchange
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')
    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')
    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')
    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')
    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')
    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')
end

os.exit(lu.LuaUnit.run())"
HumanEval_111,lin_Latn,lua,"- Ndakisa: - Soki makomi mingi ezali na maloba ndenge moko, kozongisa yango nyonso. - ya mokanda oyo ezongelami mingi mpe ezali na motango ya motuya oyo ekokani na yango. - Soki bapesi yo molɔngɔ́ ya makomi oyo ezali komonisa makomi ya mikemike oyo ekabwani na esika moko, zongisá mesa moko -- >>> histogram('a b c')
-- {['a'] = 1, ['b'] = 1, ['c'] = 1}
-- >>> histogram('a b b a')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('a b c a b')
-- {['a'] = 2, ['b'] = 2}
-- >>> histogram('b b b b a')
-- {['b'] = 4}
-- >>> histogram('')
-- {}
local function histogram(test)
","local function histogram(test)
    if test == """" then return {} end
    
    local words = {}
    for word in test:gmatch(""%S"") do
        words[word] = (words[word] or 0) + 1
    end
    
    local max_count = 0
    local result = {}
    for letter, count in pairs(words) do
        if count > max_count then
            max_count = count
            result = {[letter] = count}
        elseif count == max_count then
            result[letter] = count
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = histogram
    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})
    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})
    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})
    lu.assertEquals(candidate(''), {})
    lu.assertEquals(candidate('a'), {['a'] = 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_112,lin_Latn,lua,"- Ndakisa - Osengeli kozongisa table oyo ezali na molɔngɔ ya ba résultat mpe ya solo/solo te mpo na kotala. - Molɔngɔ́ moko ebéngami palindrome soki ezali kotángama ndenge moko na nsima mpe liboso. - na nsima talá soki molɔngɔ́ ya bosukisi ezali palindrome. - Bapesi biso ba string mibale s mpe c, esengeli to longola makomi nionso na s oyo ekokani na makomi nionso na c - Mokumba -- >>> reverse_delete('abcde', 'ae')
-- {'bcd', false}
-- >>> reverse_delete('abcdef', 'b')
-- {'acdef', false}
-- >>> reverse_delete('abcdedcba', 'ab')
-- {'cdedc', true}
local function reverse_delete(s, c)
","local function reverse_delete(s, c)
    -- Create a set for characters to delete
    local delete_set = {}
    for i = 1, #c do
        delete_set[c:sub(i, i)] = true
    end
    
    -- Create the result string by filtering out characters in delete_set
    local result = {}
    for i = 1, #s do
        local char = s:sub(i, i)
        if not delete_set[char] then
            table.insert(result, char)
        end
    end
    
    -- Convert result table to string
    local result_str = table.concat(result)
    
    -- Check if the result string is a palindrome
    local is_palindrome = true
    local len = #result_str
    for i = 1, math.floor(len / 2) do
        if result_str:sub(i, i) ~= result_str:sub(len - i + 1, len - i + 1) then
            is_palindrome = false
            break
        end
    end
    
    -- Return the result string and palindrome check as a table
    return {result_str, is_palindrome}
end","lu = require('luaunit')

function test_humaneval()
local candidate = reverse_delete
    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})
    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})
    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})
    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})
    lu.assertEquals(candidate('a', 'a'), {'', true})
    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})
    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})
    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})
    lu.assertEquals(candidate('mamma', 'mia'), {'', true})
end

os.exit(lu.LuaUnit.run())"
HumanEval_113,lin_Latn,lua,"- ya mitángo ya mitango te na molɔngɔ́ ya i ya maloba oyo ekɔti. - string i ya input. "" epai wapi ba i nyonso esengeli ko remplacé na numero - Elembo mokomoko i ya eloko oyo ezali kobima esengeli kozala ""motángo ya biloko ya mineneminene na kati ya . . .- Soki ozwi table ya ba string, esika string moko na moko ezali kaka na ba chiffres, kozongisa table. -- >>> odd_count({'1234567'})
-- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}
-- >>> odd_count({'3', '11111111'})
-- {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'}
local function odd_count(lst)
","local function odd_count(lst)
    local result = {}
    for _, str in ipairs(lst) do
        local odd_count = 0
        for i = 1, #str do
            local digit = tonumber(str:sub(i, i))
            if digit % 2 == 1 then
                odd_count = odd_count + 1
            end
        end
        local element = string.format(""the number of odd elements %dn the str%1dng %d of the %d"", odd_count, odd_count, odd_count, odd_count)
        result[#result + 1] = element
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = odd_count
    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the str4ng 4 of the 4nput.'})
    lu.assertEquals(candidate({'3', '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'})
    lu.assertEquals(candidate({'271', '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_114,lin_Latn,lua,"- Ndakisa - ya mitángo. - Soki bapesi yo liste ya mituya ya mobimba, luka motuya ya moke ya liste nyonso ya mikemike oyo ezali ya mpamba te -- >>> minSubArraySum({2, 3, 4, 1, 2, 4})
-- 1
-- >>> minSubArraySum({-1, -2, -3})
-- -6
local function minSubArraySum(nums)
","local function minSubArraySum(nums)
    local min_sum = nums[1]
    local current_sum = nums[1]

    for i = 2, #nums do
        current_sum = math.min(nums[i], current_sum + nums[i])
        min_sum = math.min(min_sum, current_sum)
    end

    return min_sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = minSubArraySum
    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)
    lu.assertEquals(candidate({-1, -2, -3}), -6)
    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)
    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)
    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)
    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)
    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)
    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)
    lu.assertEquals(candidate({-10}), -10)
    lu.assertEquals(candidate({7}), 7)
    lu.assertEquals(candidate({1, -1}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_115,lin_Latn,lua,"- Ndakisa 1: - Bimisa motango ya mbala oyo osengeli kokitisa bakiti. - Mosala na bino ezali ya kosalela maboke mpo na kosopa mai na mabulu. - mpe bakɛsi nyonso ezali na makoki ndenge moko. - Libulu mokomoko ezali na katini oyo ekoki kosalelama mpo na kobenda mai na libulu yango, - mpe motángo mokomoko 1 na molɔngɔ ezali komonisa eteni moko ya mai. - Ozali na liboke ya mabulu ya mai oyo ezali na molɔngɔ́ ya molai, molɔngɔ́ mokomoko ezali komonisa libulu moko.-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)
-- 6
-- Example 2:
-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2)
-- 5
-- Example 3:
-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)
-- 0
-- Constraints:
--     * all wells have the same length
--     * 1 <= grid.length <= 10^2
--     * 1 <= grid[:,1].length <= 10^2
--     * grid[i][j] -> 0 | 1
--     * 1 <= capacity <= 10
local function max_fill(grid, capacity)
","local function max_fill(grid, capacity)
    local total_units = 0

    -- Traverse each well in the grid
    for i = 1, #grid do
        for j = 1, #grid[i] do
            total_units = total_units + grid[i][j]
        end
    end

    -- Calculate the number of times the bucket needs to be lowered
    local num_lowerings = math.ceil(total_units / capacity)

    return num_lowerings
end","lu = require('luaunit')

function test_humaneval()
local candidate = max_fill
    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)
    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)
    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)
    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_116,lin_Latn,lua,"- Esengeli kosalelama boye: - Mpo na motuya ya ba 1 oyo ekokani, bongisá na kolanda motuya ya ba décalés. - motango ya ba un na kati ya elembo na bango ya binary na molongo ya komata. - Na kati ya Kata oyo, osengeli kobongisa mesa ya mitángo ya mobimba oyo ezali ya mabe te na kolanda -- >>> sort_array({1, 5, 2, 3, 4})
-- {1, 2, 3, 4, 5}
-- >>> sort_array({-2, -3, -4, -5, -6})
-- {-6, -5, -4, -3, -2}
-- >>> sort_array({1, 0, 2, 3, 4})
-- {0, 1, 2, 3, 4}
local function sort_array(arr)
","local function count_ones(n)
    local count = 0
    while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
    end
    return count
end

local function sort_array(arr)
    table.sort(arr, function(a, b)
        local ones_a = count_ones(math.abs(a))
        local ones_b = count_ones(math.abs(b))
        if ones_a == ones_b then
            return a < b
        else
            return ones_a < ones_b
        end
    end)
    return arr
end","lu = require('luaunit')

function test_humaneval()
local candidate = sort_array
    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
    lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
end

os.exit(lu.LuaUnit.run())"
HumanEval_117,lin_Latn,lua,"- Bandakisa: - Na ndakisa: okoki kokanisa ete maloba oyo ezali na kati ezali kaka na balɛtrɛ mpe na mwa bisika. - Soki string s ezali na eloko te, bongo fonction esengeli kozongisa table oyo ezali na eloko te. - n balɛtrɛ oyo ezali na molɔngɔ, mpo maloba yango ebima na molɔngɔ oyo ezali na maloba ya s. - fonction oyo ezongaka na liste ya maloba nyonso ya string s oyo ezali na exact - Soki bapesi yo molɔngɔ́ s mpe motángo n, batindi yo osala -- >>> select_words('Mary had a little lamb', 4)
-- {'little'}
-- >>> select_words('Mary had a little lamb', 3)
-- {'Mary', 'lamb'}
-- >>> select_words('simple white space', 2)
-- {}
-- >>> select_words('Hello world', 4)
-- {'world'}
-- >>> select_words('Uncle sam', 3)
-- {'Uncle'}
local function select_words(s, n)
","local function select_words(s, n)
    local vowels = { a = true, e = true, i = true, o = true, u = true,
                     A = true, E = true, I = true, O = true, U = true }
    local result = {}
    
    for word in s:gmatch(""%S+"") do
        local consonant_count = 0
        for char in word:gmatch(""%a"") do
            if not vowels[char] then
                consonant_count = consonant_count + 1
            end
        end
        if consonant_count == n then
            table.insert(result, word)
        end
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = select_words
    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})
    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})
    lu.assertEquals(candidate('simple white space', 2), {})
    lu.assertEquals(candidate('Hello world', 4), {'world'})
    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})
    lu.assertEquals(candidate('', 4), {})
    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_118,lin_Latn,lua,"- Ndakisa: - Okoki kokanisa ete maloba oyo ezali na kati ya molɔngɔ́ yango ezali bobele na makomi ya Lingelesi. - komona monoko moko oyo ekokani na oyo ya liboso. - Ba voyelles na ebandeli mpe na suka na yango etalelami te. Zongisa string ya pamba soki osalaki yango te.- ba consonnes mibale na ngámbo ya lobɔkɔ ya mobali ya liloba (misala ya bokomi ya moke). - Bapesi yo liloba moko, mpe mokumba na yo ezali ya koluka monzɛlɛ oyo ezali pene na oyo ezali na katikati ya liloba moko na liloba mosusu.-- >>> get_closest_vowel('yogurt')
-- 'u'
-- >>> get_closest_vowel('FULL')
-- 'U'
-- >>> get_closest_vowel('quick')
-- ''
-- >>> get_closest_vowel('ab')
-- ''
local function get_closest_vowel(word)
","local function get_closest_vowel(word)
    local vowels = ""AEIOUaeiou""
    local found_vowel = false
    local last_consonant = false

    for i = #word - 1, 2, -1 do
        local char = word:sub(i, i)
        if vowels:find(char) then
            if last_consonant then
                return char
            end
            found_vowel = true
        else
            if found_vowel then
                return ''
            end
            last_consonant = true
        end
    end

    return ''
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_closest_vowel
    lu.assertEquals(candidate('yogurt'), 'u')
    lu.assertEquals(candidate('full'), 'u')
    lu.assertEquals(candidate('easy'), '')
    lu.assertEquals(candidate('eAsy'), '')
    lu.assertEquals(candidate('ali'), '')
    lu.assertEquals(candidate('bad'), 'a')
    lu.assertEquals(candidate('most'), 'o')
    lu.assertEquals(candidate('ab'), '')
    lu.assertEquals(candidate('ba'), '')
    lu.assertEquals(candidate('quick'), '')
    lu.assertEquals(candidate('anime'), 'i')
    lu.assertEquals(candidate('Asia'), '')
    lu.assertEquals(candidate('Above'), 'o')
end

os.exit(lu.LuaUnit.run())"
HumanEval_119,lin_Latn,lua,"- Bandakisa: - Zongisá 'Ɛɛ' soki ezali na ndenge ya kosala singa ya malamu, mpe zongisa 'Te' soki ezali te. - ""()) "" ezali te. Na ndakisa: string '(())))' ezali malamu, nzokande string - Molɔngɔ́ S ezali malamu soki mpe bobele soki bilembo nyonso bizali na kati ya bilembo S - etinda moko, ete nsinga oyo ekomonana ekozala malamu. - Mosala na yo ezali ya kotala soki ekoki kosalema kokangisa bansinga mibale na kati ya - kaka na kati ya bilembo "" (("") to bilembo ya pembeni "") "".- Bapesi yo mesa moko ya milɔngɔ mibale, milɔngɔ nyonso mibale ezali na bilembo ya polele.-- >>> match_parens({'()(', ')'})
-- 'Yes'
-- >>> match_parens({')', ')'})
-- 'No'
local function match_parens(lst)
","local function match_parens(lst)
    local function is_balanced(s)
        local balance = 0
        for i = 1, #s do
            if s:sub(i,i) == '(' then
                balance = balance + 1
            else
                balance = balance - 1
            end

            if balance < 0 then
                return false
            end
        end
        return balance == 0
    end

    local s1, s2 = lst[1], lst[2]
    return (is_balanced(s1 .. s2) or is_balanced(s2 .. s1)) and 'Yes' or 'No'
end","lu = require('luaunit')

function test_humaneval()
local candidate = match_parens
    lu.assertEquals(candidate({'()(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', ')'}), 'No')
    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
    lu.assertEquals(candidate({'()', '())'}), 'No')
    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
    lu.assertEquals(candidate({'((((', '((())'}), 'No')
    lu.assertEquals(candidate({')(()', '(()('}), 'No')
    lu.assertEquals(candidate({')(', ')('}), 'No')
    lu.assertEquals(candidate({'(', ')'}), 'Yes')
    lu.assertEquals(candidate({')', '('}), 'Yes')
end

os.exit(lu.LuaUnit.run())"
HumanEval_120,lin_Latn,lua,"- Ndakisa 1: - ya bolai k na motango ya motuya ya ntalo ya ntalo ya ntalo ya ntalo ya ntalo ya ntalo ya ntalo ya ntalo ya ntalo.- Soki ozwi table arr ya ba integers mpe ya positif k, kozongisa table ya ordinateur -- >>> maximum({-3, -4, 5}, 3)
-- {-4, -3, 5}
-- Example 2:
-- >>> maximum({4, -4, 4}, 2)
-- {4, 4}
-- Example 3:
-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)
-- {2}
-- Note:
--     1. The length of the table will be in the range of [1, 1000].
--     2. The elements in the table will be in the range of [-1000, 1000].
--     3. 0 <= k <= len(arr)
local function maximum(arr, k)
","local function maximum(arr, k)
    table.sort(arr, function(a, b) return a > b end)
    local result = {}
    for i = 1, k do
        table.insert(result, arr[i])
    end
    table.sort(result)
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = maximum
    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})
    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})
    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})
    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})
    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})
    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})
    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})
    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})
    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})
    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})
    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_121,lin_Latn,lua,"- Bandakisa - Soki ozwi table ya ba integres oyo ezali ya pamba te, kozongisa motuya ya ba éléments ya paires oyo ezali na position ya paire. -- >>> solution({5, 8, 7, 1})
-- 12
-- >>> solution({3, 3, 3, 3, 3})
-- 9
-- >>> solution({30, 13, 24, 321})
-- 0
local function solution(lst)
","local function solution(lst)
    local sum = 0
    for i = 2, #lst, 2 do
        if lst[i] % 2 == 1 then
            sum = sum + lst[i]
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = solution
    lu.assertEquals(candidate({5, 8, 7, 1}), 12)
    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)
    lu.assertEquals(candidate({30, 13, 24, 321}), 0)
    lu.assertEquals(candidate({5, 9}), 5)
    lu.assertEquals(candidate({2, 4, 8}), 0)
    lu.assertEquals(candidate({30, 13, 23, 32}), 23)
    lu.assertEquals(candidate({3, 13, 2, 9}), 3)
end

os.exit(lu.LuaUnit.run())"
HumanEval_122,lin_Latn,lua,"- Ndakisa: - motuya ya biloko oyo ezali na mitu mibale ya biloko ya liboso k ya arr. - Soki tozwi table ya ba nombre entiers arr mpe k, tokozonga na -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
-- 24
-- Constraints:
--     1. 1 <= len(arr) <= 100
--     2. 1 <= k <= len(arr)
local function add_elements(arr, k)
","local function add_elements(arr, k)
    local sum = 0
    for i = 1, k do
        local element = arr[i]
        if element >= -99 and element <= 99 then
            sum = sum + element
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = add_elements
    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
    lu.assertEquals(candidate({1}, 1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_123,lin_Latn,lua,"- get_odd_collatz(5) ezongisi [1, 5] # Molɔngɔ́ ya collatz mpo na 5 ezali [5, 16, 8, 4, 2, 1], boye motuya ya mineneminene ezali bobele 1, mpe 5. - Na ndakisa: - 2. mesa oyo ezongisami na molɔngɔ́ ya bokóli.- 1. Collatz ((1) ezali [1]. - Elembo: - liloba + 1. likanisi ezali ete ata soki n ezali na motuya nini, molɔngɔ́ ekokokisa ntango nyonso 1. Soki liloba ya liboso ezali ya mopanzi, liloba oyo elandi ekozala na motuya mbala 3 ya liloba ya liboso.- molɔngɔ ya liboso ndenge elandi: soki molɔngɔ ya liboso ezali na paire, molɔngɔ ya mibale ezali na ndambo ya - na lolenge oyo: kobanda na motango mobimba n. Na nsima, liloba mokomoko ezwami na - Lisapo ya Collatz ezali lisapo ya matematiki oyo etali molɔngɔ́ moko ya makambo oyo elimbolami - Soki ozwi motango ya mobimba n, kozongisa liste oyo ezali na mitango ya kokokana te na molongo ya collatz. -- >>> get_odd_collatz(5)
-- {1, 5}
local function get_odd_collatz(n)
","local function get_odd_collatz(n)
    local collatz_sequence = {}
    while n ~= 1 do
        if n % 2 == 1 then
            table.insert(collatz_sequence, n)
        end
        if n % 2 == 0 then
            n = n / 2
        else
            n = 3 * n + 1
        end
    end
    table.insert(collatz_sequence, 1)  -- Always add 1 as the sequence ends with 1
    
    -- Remove duplicates and sort the table
    local unique_odds = {}
    for _, num in ipairs(collatz_sequence) do
        unique_odds[num] = true
    end

    local sorted_odds = {}
    for num, _ in pairs(unique_odds) do
        table.insert(sorted_odds, num)
    end
    table.sort(sorted_odds)

    return sorted_odds
end","lu = require('luaunit')

function test_humaneval()
local candidate = get_odd_collatz
    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})
    lu.assertEquals(candidate(5), {1, 5})
    lu.assertEquals(candidate(12), {1, 3, 5})
    lu.assertEquals(candidate(1), {1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_124,lin_Latn,lua,"- 4. dati esengeli ezala na lolenge oyo: mm-dd-yyyy - 3. sanza esengeli kozala na nse ya 1 te to na likolo ya 12.- 2. motango ya mikolo ezali na nse ya 1 to likolo ya 31 mikolo mpo na sanza 1,3,5,7,8,10,12. mpe motango ya mikolo ezali na nse ya 1 to likolo ya 30 mikolo mpo na sanza 4,6,9,11. mpe motango ya mikolo ezali na nse ya 1 to likolo ya 29 mikolo mpo na sanza 2. - 1. Molɔngɔ́ ya badati ezali mpamba te. - Dati yango ezali na ntina soki mibeko oyo elandi ezali: - ezongisi solo soki mokolo ezali ya solo soki te lokuta. - Osengeli kokoma fonction oyo eko valider date oyo epesami na string mpe -- >>> valid_date('03-11-2000')
-- true
-- >>> valid_date('15-01-2012')
-- false
-- >>> valid_date('04-0-2040')
-- false
-- >>> valid_date('06-04-2020')
-- true
-- >>> valid_date('06/04/2020')
-- false
local function valid_date(date)
","local function valid_date(date)
    if date == """" then
        return false
    end
    
    local month, day, year = date:match(""^(%d%d)%-(%d%d)%-(%d%d%d%d)$"")
    
    if not month or not day or not year then
        return false
    end
    
    month = tonumber(month)
    day = tonumber(day)
    year = tonumber(year)
    
    if month < 1 or month > 12 then
        return false
    end
    
    local days_in_month = {
        [1] = 31,
        [2] = 29, -- Leap year check not required for this problem
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
    }
    
    if day < 1 or day > days_in_month[month] then
        return false
    end
    
    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = valid_date
    lu.assertEquals(candidate('03-11-2000'), true)
    lu.assertEquals(candidate('15-01-2012'), false)
    lu.assertEquals(candidate('04-0-2040'), false)
    lu.assertEquals(candidate('06-04-2020'), true)
    lu.assertEquals(candidate('01-01-2007'), true)
    lu.assertEquals(candidate('03-32-2011'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('04-31-3000'), false)
    lu.assertEquals(candidate('06-06-2005'), true)
    lu.assertEquals(candidate('21-31-2000'), false)
    lu.assertEquals(candidate('04-12-2003'), true)
    lu.assertEquals(candidate('04122003'), false)
    lu.assertEquals(candidate('20030412'), false)
    lu.assertEquals(candidate('2003-04'), false)
    lu.assertEquals(candidate('2003-04-12'), false)
    lu.assertEquals(candidate('04-2003'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_125,lin_Latn,lua,"- Bandakisa - alfabɛ, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 - esengeli kokabola na ba commas ',' soki ba commas ezali te esengeli ozongisa motango ya makomi ya mikuse na molongo ya kokabwana na kati ya - Soki ozwi maloba ebele, zongisá liste ya maloba oyo ekabolami na bisika ya polele, soki bisika ya polele ezali te na makomi oyo ozali koluka -- >>> split_words('Hello world!')
-- {'Hello', 'world!'}
-- >>> split_words('Hello,world!')
-- {'Hello', 'world!'}
-- >>> split_words('abcdef')
-- 3
local function split_words(txt)
","local function split_words(txt)
    -- Check if there is any whitespace to split on
    if txt:find(""%s"") then
        local words = {}
        for word in txt:gmatch(""%S+"") do
            table.insert(words, word)
        end
        return words
    end

    -- Check if there are commas to split on
    if txt:find("","") then
        local words = {}
        for word in txt:gmatch(""([^,]+)"") do
            table.insert(words, word)
        end
        return words
    end

    -- Otherwise, count the number of lowercase letters with odd order
    local count = 0
    for i = 1, #txt do
        local char = txt:sub(i, i)
        local ord = char:byte() - string.byte('a')
        if ord >= 0 and ord <= 25 and ord % 2 == 1 then
            count = count + 1
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = split_words
    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
    lu.assertEquals(candidate('abcdef'), 3)
    lu.assertEquals(candidate('aaabb'), 2)
    lu.assertEquals(candidate('aaaBb'), 1)
    lu.assertEquals(candidate(''), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_126,lin_Latn,lua,"- Bandakisa - motángo, bozongi ya lokuta.Soki mesa ezali na ba kopi koleka moko ya mesa yango moko - Soki ozwi liste ya mitángo, kozongisa yango ata soki etyami na molɔngɔ to te -- >>> is_sorted({5})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5})
-- false
-- >>> is_sorted({1, 2, 3, 4, 5, 6})
-- true
-- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})
-- true
-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})
-- false
-- >>> is_sorted({1, 2, 2, 3, 3, 4})
-- true
-- >>> is_sorted({1, 2, 2, 2, 3, 4})
-- false
local function is_sorted(lst)
","local function is_sorted(lst)
    local seen = {}
    for i = 1, #lst - 1 do
        if lst[i] > lst[i + 1] then
            return false
        end
    end

    for _, num in ipairs(lst) do
        if seen[num] then
            seen[num] = seen[num] + 1
            if seen[num] > 2 then
                return false
            end
        else
            seen[num] = 1
        end
    end

    return true
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_sorted
    lu.assertEquals(candidate({5}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)
    lu.assertEquals(candidate({}), true)
    lu.assertEquals(candidate({1}), true)
    lu.assertEquals(candidate({3, 2, 1}), false)
    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)
    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)
    lu.assertEquals(candidate({1, 2, 3, 4}), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_127,lin_Latn,lua,"- [ba échantillons ya input/output] - Soki biteni mibale ya ntango ekokani te, zongisá ""NO"". - soki te, kozongisa ""NO"". - Soki bolai ya esika oyo ekatami ezali motango ya liboso, zongisá ""YES"", - oyo molai na yango ezali 1, oyo ezali motango ya liboso te. - Ndakisa, esika oyo biteni (1, 3), (2, 4) ekatani ezali (2, 3) - ezali motángo ya liboso. - Mosala na yo ezali ya koyeba soki bolai ya esika oyo yango mibale ekutaná ezali - Mpo na eteni moko na moko, ezali na likanisi ete ebandeli na yango ezali moke to ekokani na nsuka na yango. - ezali na ebandeli mpe nsuka. - Biteni oyo epesami ezali ya kokangama, elingi koloba ete biteni oyo (ebandeli, nsuka) Na ndakisa, interval = (ebandeli, nsuka) = (1, 2).- Bozali na ntango mibale, -- >>> intersection({1, 2}, {2, 3})
-- 'NO'
-- >>> intersection({-1, 1}, {0, 4})
-- 'NO'
-- >>> intersection({-3, -1}, {-5, 5})
-- 'YES'
local function intersection(interval1, interval2)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    if num <= 3 then
        return true
    end
    if num % 2 == 0 or num % 3 == 0 then
        return false
    end
    for i = 5, math.sqrt(num), 6 do
        if num % i == 0 or num % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function intersection(interval1, interval2)
    local start1, end1 = interval1[1], interval1[2]
    local start2, end2 = interval2[1], interval2[2]
    
    local intersection_start = math.max(start1, start2)
    local intersection_end = math.min(end1, end2)
    
    if intersection_start > intersection_end then
        return 'NO'
    end
    
    local intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length) then
        return 'YES'
    else
        return 'NO'
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = intersection
    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')
    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')
    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')
    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')
    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')
    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')
    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')
    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')
end

os.exit(lu.LuaUnit.run())"
HumanEval_128,lin_Latn,lua,"- Ndakisa: - Note: retourne nil pour arr. ya pamba.- ya motango mokomoko na molɔngɔ́, emonisami na 1, -1 to 0. - motango ya motuya ya mituya ya mobimba oyo ekotisami na mbuma ya bilembo nyonso - Bapesi yo liste ya mitángo ya mobimba mpe osengeli kozonga -- >>> prod_signs({1, 2, 2, -4})
-- 9
-- >>> prod_signs({0, 1})
-- 0
-- >>> prod_signs({})
-- None
local function prod_signs(arr)
","local function prod_signs(arr)
    if #arr == 0 then
        return nil
    end

    local sum_magnitudes = 0
    local product_signs = 1

    for _, num in ipairs(arr) do
        sum_magnitudes = sum_magnitudes + math.abs(num)
        if num > 0 then
            product_signs = product_signs * 1
        elseif num < 0 then
            product_signs = product_signs * -1
        else
            product_signs = 0
            break
        end
    end

    return sum_magnitudes * product_signs
end","lu = require('luaunit')

function test_humaneval()
local candidate = prod_signs
    lu.assertEquals(candidate({1, 2, 2, -4}), -9)
    lu.assertEquals(candidate({0, 1}), 0)
    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
    lu.assertEquals(candidate({}), None)
    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_129,lin_Latn,lua,"- Bandakisa: - Ekomema na molɔngɔ moko ya mesa ya motuya ya baselile oyo nzela ya moke elekaka. - Elaka yango ekokokisama kaka mbala moko. - L[i] = L[i] = L[i]- lolenge oyo lst_A[i] < lst_B[i] mpe mpo na j (1 <= j < i) tozali na - koleka lst_B, na maloba mosusu, ezali na index ya motango mobimba i (1 <= i <= k) - na nzela ya (tokomema bango lst_A mpe lst_B), lst_A ezali na lolenge ya lexicographique moke - nsima ya kosala ba table ya ba valeurs na ba cellules oyo A na B bakokende na - Nzela A (ya bolai k) etalelami moke koleka nzela B (ya bolai k) soki - Okoki te kobunga na nzela.- esengeli kokabwana).- Tosengi na yo oyeba ete nzela ya bolai k elakisi kotala mpenza ba cellules k (esengeli te kozala na ba cellules - na telefone. Na maloba mosusu, okoki kokende na baselile oyo ezali na ndelo moko na oyo ya yo.- na cellule moko, mpe na eteni moko na moko okoki kokende na cellule moko ya pembeni, - Osengeli koluka nzela ya moke ya bolai k na kati ya grille. Okoki kobanda - inclusive emonanaka kaka mbala moko na ba cellules ya grille. - na kati ya grille, na kati ya selile mokomoko, ezali na motuya moko.- Soki bapesi biso lisano oyo ezali na milɔngɔ N mpe milɔngɔ N (N >= 2) mpe motángo mobimba k, -- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3)
-- {1, 2, 1}
-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)
-- {1}
local function minPath(grid, k)
","local function minPath(grid, k)
    local N = #grid
    local directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}

    -- Check if a position is within the grid boundaries
    local function inBounds(x, y)
        return x >= 1 and x <= N and y >= 1 and y <= N
    end

    -- DFS to find the minimum path of length k
    local function dfs(x, y, path, visited, result)
        -- Append current cell's value to path
        table.insert(path, grid[x][y])

        if #path == k then
            -- Check if we have a new minimum lexicographical path
            if not result.min or table.concat(path) < table.concat(result.min) then
                result.min = {table.unpack(path)}
            end
        else
            for _, dir in ipairs(directions) do
                local nx, ny = x + dir[1], y + dir[2]
                if inBounds(nx, ny) then
                    dfs(nx, ny, path, visited, result)
                end
            end
        end

        -- Backtrack
        table.remove(path)
    end

    local result = {min = nil}

    -- Start DFS from each cell
    for i = 1, N do
        for j = 1, N do
            dfs(i, j, {}, {}, result)
        end
    end

    return result.min
end","lu = require('luaunit')

function test_humaneval()
local candidate = minPath
    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})
    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})
    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})
    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})
    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})
    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})
    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})
    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})
    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})
    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})
    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_130,lin_Latn,lua,"- Bandakisa: - Nambala ya liboso n + 1 ya molɔngɔ ya Tribonacci. - Bapesi yo nimero mobimba n oyo ezali ya mabe te, osengeli kozongisa mesa ya - = 2 + 3 + 3 = 8 - tri(3) = tri(2) + tri(1) + tri(4) - tri(4) = 3 - tri(2) = 1 + (2 / 2) = 2 - Na ndakisa: - tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), soki n ezali ya mopanzi. - tri (n) = 1 + n / 2, soki n ezali paire. - tri(1) = 3 - Molɔngɔ́ ya Tribonacci emonisami na kozongelama: Nzokande, oyo bato bayebi te ezali molɔngɔ́ ya Tribonacci.- Moto nyonso ayebi molɔngɔ́ ya Fibonacci, bato ya matematiki bayekolaki yango na mozindo na mobu -- >>> tri(3)
-- {1, 3, 2, 8}
local function tri(n)
","local function tri(n)
    local sequence = {}
    
    -- Handle the first element separately
    sequence[1] = 3

    for i = 2, n + 1 do
        if i % 2 == 0 then
            sequence[i] = 1 + i / 2
        else
            sequence[i] = (i - 1 <= 0 and 0 or sequence[i - 1]) +
                          (i - 2 <= 0 and 0 or sequence[i - 2]) +
                          (i + 1 > n + 1 and 0 or sequence[i + 1])
        end
    end
    
    return sequence
end","lu = require('luaunit')

function test_humaneval()
local candidate = tri
    lu.assertEquals(candidate(3), {1, 3, 2, 8})
    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})
    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})
    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})
    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})
    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})
    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})
    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})
    lu.assertEquals(candidate(0), {1})
    lu.assertEquals(candidate(1), {1, 3})
end

os.exit(lu.LuaUnit.run())"
HumanEval_131,lin_Latn,lua,"- Na ndakisa: - Ekomonisa 0 soki mituya nyonso ezali ya paire. - Soki ozwi motango ya mobimba n, zongisa molɔngɔ ya mitango ya mitango ya mikeseni. -- >>> digits(1)
-- 1
-- >>> digits(4)
-- 0
-- >>> digits(235)
-- 15
local function digits(n)
","local function digits(n)
    local product = 1
    local hasOdd = false
    
    while n > 0 do
        local digit = n % 10
        if digit % 2 == 1 then
            product = product * digit
            hasOdd = true
        end
        n = math.floor(n / 10)
    end
    
    return hasOdd and product or 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = digits
    lu.assertEquals(candidate(5), 5)
    lu.assertEquals(candidate(54), 5)
    lu.assertEquals(candidate(120), 1)
    lu.assertEquals(candidate(5014), 5)
    lu.assertEquals(candidate(98765), 315)
    lu.assertEquals(candidate(5576543), 2625)
    lu.assertEquals(candidate(2468), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_132,lin_Latn,lua,"- esika oyo ata moko na kati ya milɔngɔ́ ya mikemike ezali na kati ya molɔngɔ́. - Fonction esengeli ezongisa true soki mpe kaka soki ezali na sous-sequence ya ba parenthèse ya solo - Kozala na fonction oyo ekozwa string lokola input oyo eza na ba parenthèse ya carré. -- >>> is_nested('[[]]')
-- true
-- >>> is_nested('[]]]]]]][[[[[]')
-- false
-- >>> is_nested('[][]')
-- false
-- >>> is_nested('[]')
-- false
-- >>> is_nested('[[][]]')
-- true
-- >>> is_nested('[[]][[')
-- true
local function is_nested(string)
","local function is_nested(brackets)
    local stack = {}
    for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '[' then
            table.insert(stack, char)
        elseif char == ']' then
            if #stack > 0 and stack[#stack] == '[' then
                table.remove(stack)
                if #stack > 0 then
                    -- Found at least one nested bracket
                    return true
                end
            else
                -- Mismatched bracket
                return false
            end
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_nested
    lu.assertEquals(candidate('[[]]'), true)
    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)
    lu.assertEquals(candidate('[][]'), false)
    lu.assertEquals(candidate('[]'), false)
    lu.assertEquals(candidate('[[[[]]]]'), true)
    lu.assertEquals(candidate('[]]]]]]]]]]'), false)
    lu.assertEquals(candidate('[][][[]]'), true)
    lu.assertEquals(candidate('[[]'), false)
    lu.assertEquals(candidate('[]]'), false)
    lu.assertEquals(candidate('[[]][['), true)
    lu.assertEquals(candidate('[[][]]'), true)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('[[[[[[[['), false)
    lu.assertEquals(candidate(']]]]]]]]'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_133,lin_Latn,lua,"- Bandakisa: - liboso, zonga elembo mokomoko na etanda na likoló ya nsé.- Osengeli kozongisa motuya ya mituya oyo mizali na kati ya tableau oyo epesami, - Bapesi yo liste ya mitángo.-- >>> lst({1.0, 2.0, 3.0})
-- 14
-- >>> lst({1.0, 4.0, 9.0})
-- 98
-- >>> lst({1.0, 3.0, 5.0, 7.0})
-- 84
-- >>> lst({1.4, 4.2, 0.0})
-- 29
-- >>> lst({-2.4, 1.0, 1.0})
-- 6
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        local ceil_num = math.ceil(num)
        sum = sum + (ceil_num * ceil_num)
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)
    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)
    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)
    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)
    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)
    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)
    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)
    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)
    lu.assertEquals(candidate({0.0}), 0)
    lu.assertEquals(candidate({-1.0}), 1)
    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_134,lin_Latn,lua,"- Bandakisa: - ""Liloba"" ezali etuluku ya makomi oyo ekabolami na esika moko.- eteni ya liloba, mpe lokuta soki ezali bongo te. - ya string moko ezali elembo ya alfabɛ mpe ezali te - Bongisa fonction oyo ekozongisa true soki elembo ya suka ezali -- >>> check_if_last_char_is_a_letter('apple pie')
-- false
-- >>> check_if_last_char_is_a_letter('apple pi e')
-- true
-- >>> check_if_last_char_is_a_letter('apple pi e ')
-- false
-- >>> check_if_last_char_is_a_letter('')
-- false
local function check_if_last_char_is_a_letter(txt)
","local function check_if_last_char_is_a_letter(txt)
    -- Remove trailing spaces
    txt = txt:match(""^(.-)%s*$"")
    -- Check if the string is empty after trimming spaces
    if #txt == 0 then
        return false
    end
    -- Get the last character of the string
    local lastChar = txt:sub(-1)
    -- Check if the last character is an alphabet and not part of a word
    return lastChar:match(""%a"") and not txt:match(""%s%a*$"")
end","lu = require('luaunit')

function test_humaneval()
local candidate = check_if_last_char_is_a_letter
    lu.assertEquals(candidate('apple'), false)
    lu.assertEquals(candidate('apple pi e'), true)
    lu.assertEquals(candidate('eeeee'), false)
    lu.assertEquals(candidate('A'), true)
    lu.assertEquals(candidate('Pumpkin pie '), false)
    lu.assertEquals(candidate('Pumpkin pie 1'), false)
    lu.assertEquals(candidate(''), false)
    lu.assertEquals(candidate('eeeee e '), false)
    lu.assertEquals(candidate('apple pie'), false)
    lu.assertEquals(candidate('apple pi e '), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_135,lin_Latn,lua,"- Bandakisa: - motuya ya biloko oyo ezali mbala mibale. - elembo ya boye ezali te, boye bozongi -1.- ezali monene te to ekokani na elembo oyo ezali liboso na yango.- Ko sala fonction oyo ezongisaka index ya monene ya élément oyo -- >>> can_arrange({1, 2, 4, 3, 5})
-- 3
-- >>> can_arrange({1, 2, 3})
-- -1
local function can_arrange(arr)
","local function can_arrange(arr)
    for i = #arr, 2, -1 do
        if arr[i] < arr[i - 1] then
            return i
        end
    end
    return -1
end","lu = require('luaunit')

function test_humaneval()
local candidate = can_arrange
    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)
    lu.assertEquals(candidate({1, 2, 4, 5}), -1)
    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)
    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)
    lu.assertEquals(candidate({}), -1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_136,lin_Latn,lua,"- Bandakisa: - Soki ezali na mitángo ya mobimba ya mabe to ya malamu te, kozongisa yango lokola nil. - ya mitángo ya mobimba ya malamu kati na mesa. - ya monene kati na ba integres ya mabe, mpe ""b"" ezali ya moke - Kozongisa table (a, b), esika 'a' ezali -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})
-- {None, 1}
-- >>> largest_smallest_integers({})
-- {None, None}
-- >>> largest_smallest_integers({0})
-- {None, None}
local function largest_smallest_integers(lst)
","local function largest_smallest_integers(lst)
    local max_negative = nil
    local min_positive = nil

    for _, num in ipairs(lst) do
        if num < 0 then
            if max_negative == nil or num > max_negative then
                max_negative = num
            end
        elseif num > 0 then
            if min_positive == nil or num < min_positive then
                min_positive = num
            end
        end
    end

    return {max_negative, min_positive}
end","lu = require('luaunit')

function test_humaneval()
local candidate = largest_smallest_integers
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})
    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})
    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})
    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})
    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})
    lu.assertEquals(candidate({}), {None, None})
    lu.assertEquals(candidate({0}), {None, None})
    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})
    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})
    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})
    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_137,lin_Latn,lua,"- Elembo: Soki motángo ya solo emonisami na lolenge ya nsinga, elembo ya point flottant ekoki kozala . to , - Zwá nil soki balɛrɛ yango ekokani. - mitángo ya solo, mpe ezongisi variable ya monene na lolenge ya variable oyo epesami. - Kozala na fonction oyo ekozwa ba integers, floats, to ba string oyo ezali komonisa -- >>> compare_one(1, 2.5)
-- 2.5
-- >>> compare_one(1, '2,3')
-- '2,3'
-- >>> compare_one('5,1', '6')
-- '6'
-- >>> compare_one('1', 1)
-- None
local function compare_one(a, b)
","local function to_real_number(val)
    if type(val) == ""string"" then
        val = val:gsub("","", ""."")
        return tonumber(val)
    end
    return val
end

local function compare_one(a, b)
    local a_type = type(a)
    local b_type = type(b)
    
    if a_type == b_type then
        if a == b then
            return nil
        end
        return a > b and a or b
    else
        local a_real = to_real_number(a)
        local b_real = to_real_number(b)
        
        if a_real == b_real then
            return nil
        end
        return a_real > b_real and a or b
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare_one
    lu.assertEquals(candidate(1, 2), 2)
    lu.assertEquals(candidate(1, 2.5), 2.5)
    lu.assertEquals(candidate(2, 3), 3)
    lu.assertEquals(candidate(5, 6), 6)
    lu.assertEquals(candidate(1, '2,3'), '2,3')
    lu.assertEquals(candidate('5,1', '6'), '6')
    lu.assertEquals(candidate('1', '2'), '2')
    lu.assertEquals(candidate('1', 1), None)
end

os.exit(lu.LuaUnit.run())"
HumanEval_138,lin_Latn,lua,"- Ndakisa - Luká koyeba soki motángo n oyo bapesi ekoki kokomama lokola motángo ya mitángo minei ya malamu mpenza -- >>> is_equal_to_sum_even(4)
-- false
-- >>> is_equal_to_sum_even(6)
-- false
-- >>> is_equal_to_sum_even(8)
-- true
local function is_equal_to_sum_even(n)
","local function is_equal_to_sum_even(n)
    -- Check if n can be expressed as the sum of 4 positive even numbers
    -- which means n should at least be 8 (2 + 2 + 2 + 2) and n should be even.
    if n >= 8 and n % 2 == 0 then
        return true
    else
        return false
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = is_equal_to_sum_even
    lu.assertEquals(candidate(4), false)
    lu.assertEquals(candidate(6), false)
    lu.assertEquals(candidate(8), true)
    lu.assertEquals(candidate(10), true)
    lu.assertEquals(candidate(11), false)
    lu.assertEquals(candidate(12), true)
    lu.assertEquals(candidate(13), false)
    lu.assertEquals(candidate(16), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_139,lin_Latn,lua,"- Na ndakisa: - epai n > 0 - brazilian_factorial (n) = n! * (n-1)! * (n-2)! * ... * 1! - Factoriale ya Brésil elimbolami lokola: -- >>> special_factorial(4)
-- 288
-- The function will receive an integer as input and should return the special
-- factorial of this integer.
local function special_factorial(n)
","local function factorial(m)
    if m == 0 then
        return 1
    else
        return m * factorial(m - 1)
    end
end

local function special_factorial(n)
    local result = 1
    for i = 1, n do
        result = result * factorial(i)
    end
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = special_factorial
    lu.assertEquals(candidate(4), 288)
    lu.assertEquals(candidate(5), 34560)
    lu.assertEquals(candidate(7), 125411328000)
    lu.assertEquals(candidate(1), 1)
end

os.exit(lu.LuaUnit.run())"
HumanEval_140,lin_Latn,lua,"- na nsima, kokoma na esika ya bilembo nyonso oyo elandi na - - mpe soki molɔngɔ́ moko ezali na makɛlɛlɛ koleka 2 oyo elandani, - Soki ozwi makomi ya molongo, tyá makomi ya nse na esika ya bisika nyonso, -- >>> fix_spaces(' Example')
-- 'Example'
-- >>> fix_spaces(' Example 1')
-- 'Example_1'
-- >>> fix_spaces(' Example 2')
-- '_Example_2'
-- >>> fix_spaces(' Example 3')
-- '_Example-3'
local function fix_spaces(text)
","local function fix_spaces(text)
    -- Trim leading and trailing spaces
    text = text:match(""^%s*(.-)%s*$"")
    
    -- Replace more than 2 consecutive spaces with '-'
    text = text:gsub(""%s%s%s+"", ""-"")
    
    -- Replace single spaces and double spaces with underscores
    text = text:gsub(""%s"", ""_"")
    
    return text
end","lu = require('luaunit')

function test_humaneval()
local candidate = fix_spaces
    lu.assertEquals(candidate('Example'), 'Example')
    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')
    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')
    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')
    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')
end

os.exit(lu.LuaUnit.run())"
HumanEval_141,lin_Latn,lua,"- Bandakisa: - - Motango ya nse nsima ya elembo esengeli kozala moko na oyo: ['txt', 'exe', 'dll'] - alfabɛ ya Latin ('a'-'z' mpe 'A'-'Z'). - - Motango ya liboso liboso ya elembo esengeli kozala ya mpamba te, mpe ebandi na lɛtɛlɛ ya - Nkombo ya makambo yango ezali na mwa eteni moke '.' - - Kombo ya dossier esengeli kozala na ba chiffres misato te ('0'-'9'). - bakokisami: - Kombo ya dossier etalelami lokola ya solo soki mpe kaka soki makambo nyonso oyo elandi ekokisi:- 'Ɛɛ' soki nkombo ya dossier ezali ya solo, mpe ezongisi 'Te' soki te. - Kozongisa elembo oyo ezali na nkombo ya fichier, mpe kozongisa -- >>> file_name_check('example.txt')
-- 'Yes'
-- >>> file_name_check('1example.dll')
-- 'No'
local function file_name_check(file_name)
","local function file_name_check(file_name)
    -- Check exactly one dot in the file name
    local dot_pos = file_name:find(""%."")
    if not dot_pos or dot_pos ~= file_name:find(""%."", dot_pos + 1) then
        return 'No'
    end
    
    -- Split the name into prefix and suffix
    local prefix = file_name:sub(1, dot_pos - 1)
    local suffix = file_name:sub(dot_pos + 1)

    -- Check if suffix is valid
    local valid_suffixes = { txt = true, exe = true, dll = true }
    if not valid_suffixes[suffix] then
        return 'No'
    end

    -- Check prefix is not empty and starts with a letter
    if #prefix == 0 or not prefix:match(""^[a-zA-Z]"") then
        return 'No'
    end

    -- Check that prefix has no more than 3 digits
    local digit_count = 0
    for i = 1, #prefix do
        if prefix:sub(i, i):match(""%d"") then
            digit_count = digit_count + 1
            if digit_count > 3 then
                return 'No'
            end
        end
    end

    return 'Yes'
end","lu = require('luaunit')

function test_humaneval()
local candidate = file_name_check
    lu.assertEquals(candidate('example.txt'), 'Yes')
    lu.assertEquals(candidate('1example.dll'), 'No')
    lu.assertEquals(candidate('s1sdf3.asd'), 'No')
    lu.assertEquals(candidate('K.dll'), 'Yes')
    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')
    lu.assertEquals(candidate('His12FILE94.exe'), 'No')
    lu.assertEquals(candidate('_Y.txt'), 'No')
    lu.assertEquals(candidate('?aREYA.exe'), 'No')
    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')
    lu.assertEquals(candidate('this_is_valid.wow'), 'No')
    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')
    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')
    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')
    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')
    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')
    lu.assertEquals(candidate('all.exe.txt'), 'No')
    lu.assertEquals(candidate('I563_No.exe'), 'Yes')
    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')
    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')
    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')
    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')
    lu.assertEquals(candidate('final..txt'), 'No')
    lu.assertEquals(candidate('final132'), 'No')
    lu.assertEquals(candidate('_f4indsartal132.'), 'No')
    lu.assertEquals(candidate('.txt'), 'No')
    lu.assertEquals(candidate('s.'), 'No')
end

os.exit(lu.LuaUnit.run())"
HumanEval_142,lin_Latn,lua,"- Bandakisa: - kobongola makomi na table oyo ba index na yango ezali te ba multiples ya 3 to 4.- ezali na motuya mingi koleka 3 mpe ekotya na cube motuya mobimba oyo ekomami soki index na yango ezali na motuya mingi koleka 4 kasi ezali na motuya mingi koleka 3. Fonction oyo ekotya te na cube motuya oyo ekomami soki ezali na motuya mingi koleka 4 kasi ezali na motuya mingi koleka 3.- Fonction oyo ekozwa table ya ba integers. pona ba entries nionso na table, fonction eko ko square entries ya ba integers soki index na yango ezali a - ""  Makambo-- >>> lst
-- {1, 2, 3}
-- >>> lst
-- {}
-- >>> lst
-- {-1, -5, 2, -1, -5}
local function sum_squares(lst)
","local function sum_squares(lst)
    local sum = 0
    for i, v in ipairs(lst) do
        if i % 3 == 0 then
            sum = sum + v^2
        elseif i % 4 == 0 then
            sum = sum + v^3
        else
            sum = sum + v
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = sum_squares
    lu.assertEquals(candidate({1, 2, 3}), 6)
    lu.assertEquals(candidate({1, 4, 9}), 14)
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)
    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)
    lu.assertEquals(candidate({0}), 0)
    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)
    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)
    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)
    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)
    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)
end

os.exit(lu.LuaUnit.run())"
HumanEval_143,lin_Latn,lua,"- Ndakisa 1: - molɔngɔ ya maloba na molɔngɔ ya maloba ya sika esengeli kozala ndenge moko na oyo ya ebandeli. - oyo molai na yango ezali mituya ya liboso, - mpe osengeli kozongisa maloba oyo ezali na maloba ya lisese ya ebandeli, - na kati ya maloba ezali na mwa maloba oyo ekabolami na mwa esika moko, - Bapesi yo molɔngɔ́ moko oyo ezali komonisa lisese moko, -- >>> words_in_sentence('This is a test')
-- 'is'
-- Example 2:
-- >>> words_in_sentence('lets go for swimming')
-- 'go for'
-- Constraints:
--     * 1 <= len(sentence) <= 100
--     * sentence contains only letters
local function words_in_sentence(sentence)
","local function is_prime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then
            return false
        end
    end
    return true
end

local function words_in_sentence(sentence)
    local words = {}
    for word in sentence:gmatch(""%S+"") do
        table.insert(words, word)
    end
    
    local result = {}
    for _, word in ipairs(words) do
        if is_prime(#word) then
            table.insert(result, word)
        end
    end
    
    return table.concat(result, "" "")
end","lu = require('luaunit')

function test_humaneval()
local candidate = words_in_sentence
    lu.assertEquals(candidate('This is a test'), 'is')
    lu.assertEquals(candidate('lets go for swimming'), 'go for')
    lu.assertEquals(candidate('there is no place available here'), 'there is no place')
    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
    lu.assertEquals(candidate('go for it'), 'go for it')
    lu.assertEquals(candidate('here'), '')
    lu.assertEquals(candidate('here is'), 'is')
end

os.exit(lu.LuaUnit.run())"
HumanEval_144,lin_Latn,lua,"- Okoki kokanisa ete x, na n ezali ba fractions ya solo, mpe ezali na zero te lokola dénominateur. - <numerateur>/<denominateur> esika numérateur mpe dénominateur ezali mituya ya mobimba ya malamu. - soki te. x mpe n, ezali maloba ya elembo ya fraction, mpe ezali na lolenge oyo: - x * n. Fonction ekozongisa true soki x * n eza na motuya mobimba mpe false - Mosala na yo ezali ya kosala fonction oyo ekokómisa expression simple -- >>> simplify('1/5', '5/1')
-- true
-- >>> simplify('1/6', '2/1')
-- false
-- >>> simplify('7/10', '10/2')
-- false
local function simplify(x, n)
","local function simplify(x, n)
    local function parseFraction(frac)
        local num, denom = frac:match(""(%d+)/(%d+)"")
        return tonumber(num), tonumber(denom)
    end

    local xn, xd = parseFraction(x)
    local nn, nd = parseFraction(n)

    local resultNumerator = xn * nn
    local resultDenominator = xd * nd

    return resultNumerator % resultDenominator == 0
end","lu = require('luaunit')

function test_humaneval()
local candidate = simplify
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/6', '2/1'), false)
    lu.assertEquals(candidate('5/1', '3/1'), true)
    lu.assertEquals(candidate('7/10', '10/2'), false)
    lu.assertEquals(candidate('2/10', '50/10'), true)
    lu.assertEquals(candidate('7/2', '4/2'), true)
    lu.assertEquals(candidate('11/6', '6/1'), true)
    lu.assertEquals(candidate('2/3', '5/2'), false)
    lu.assertEquals(candidate('5/2', '3/5'), false)
    lu.assertEquals(candidate('2/4', '8/4'), true)
    lu.assertEquals(candidate('2/4', '4/2'), true)
    lu.assertEquals(candidate('1/5', '5/1'), true)
    lu.assertEquals(candidate('1/5', '1/5'), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_145,lin_Latn,lua,"- Na ndakisa: - kokomisa bango na molɔngɔ na kolanda index na bango na kati ya tablo ya ebandeli.- Elembo: soki ezali na mitango mingi na motuya ya mituya na yango, - na molɔngɔ ya kobakisama na kolanda motángo ya mituya na yango. - Komá mosala oyo ekotya na molɔngɔ́ molɔngɔ́ ya mitángo ya mobimba oyo epesami -- >>> order_by_points({1, 11, -1, -11, -12})
-- {-1, -11, 1, -12, 11}
-- >>> order_by_points({})
-- {}
local function order_by_points(nums)
","local function order_by_points(nums)
    local function digit_sum(num)
        local sum = 0
        num = math.abs(num)
        while num > 0 do
            sum = sum + (num % 10)
            num = math.floor(num / 10)
        end
        return sum
    end

    table.sort(nums, function(a, b)
        local sum_a = digit_sum(a)
        local sum_b = digit_sum(b)
        if sum_a == sum_b then
            -- Preserve original order if digit sums are equal
            return false
        else
            return sum_a < sum_b
        end
    end)

    return nums
end","lu = require('luaunit')

function test_humaneval()
local candidate = order_by_points
    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
    lu.assertEquals(candidate({}), {})
    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
end

os.exit(lu.LuaUnit.run())"
HumanEval_146,lin_Latn,lua,"- Na ndakisa: - nimero ya liboso mpe ya nsuka ya motángo moko ezali ya mopanzi (1, 3, 5, 7, 9). - motango ya biloko na table oyo eleki 10 mpe nyonso mibale - Komá mosala oyo ekozwa molɔngɔ ya mitángo lokola liboke mpe ekozongisa -- >>> specialFilter({15, -73, 14, -15})
-- 1
-- >>> specialFilter({33, -2, -3, 45, 21, 109})
-- 2
local function specialFilter(nums)
","local function isOddDigit(num)
    local digit = num % 10
    return digit % 2 == 1
end

local function specialFilter(nums)
    local count = 0
    for _, num in ipairs(nums) do
        local absNum = math.abs(num)
        if absNum > 10 then
            local firstDigit = tonumber(tostring(absNum):sub(1, 1))
            local lastDigit = absNum % 10
            if isOddDigit(firstDigit) and isOddDigit(lastDigit) then
                count = count + 1
            end
        end
    end
    return count
end","lu = require('luaunit')

function test_humaneval()
local candidate = specialFilter
    lu.assertEquals(candidate({5, -2, 1, -5}), 0)
    lu.assertEquals(candidate({15, -73, 14, -15}), 1)
    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)
    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)
    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)
    lu.assertEquals(candidate({1}), 0)
    lu.assertEquals(candidate({}), 0)
end

os.exit(lu.LuaUnit.run())"
HumanEval_147,lin_Latn,lua,"- Ndakisa: - mpe a[i] + a[j] + a[k] ezali mbala misato ya 3. - Zwá motángo ya biteni misato (a[i], a[j], a[k]) ya a, epai i < j < k, - Mpo na i nyonso (1 ≤ i ≤ n), motuya ya a[i] = i * i - i + 1. - Bapesi yo motango ya mobimba n. Osengeli kosala liste ya mitango ya mobimba a ya molai n. --     >>> get_max_triples(5)
--     1
-- Explanation: 
-- a = [1, 3, 7, 13, 21]
-- The only valid triple is (1, 7, 13).
local function get_max_triples(n)
","local function get_max_triples(n)
    local a = {}
    for i = 1, n do
        a[i] = i * i - i + 1
    end

    local count = 0
    for i = 1, n - 2 do
        for j = i + 1, n - 1 do
            for k = j + 1, n do
                if (a[i] + a[j] + a[k]) % 3 == 0 then
                    count = count + 1
                end
            end
        end
    end

    return count
end

-- Example Usage:
-- print(get_max_triples(5)) -- Output: 1","lu = require('luaunit')

function test_humaneval()
local candidate = get_max_triples
    lu.assertEquals(candidate(5), 1)
    lu.assertEquals(candidate(6), 4)
    lu.assertEquals(candidate(10), 36)
    lu.assertEquals(candidate(100), 53361)
end

os.exit(lu.LuaUnit.run())"
HumanEval_148,lin_Latn,lua,"- Bandakisa - ezali bankombo ya baplanɛti te. - Fonction esengeli ezongisa table ya pamba soki planète1 to planète2 - kozala pene na moi. - ezali kati na orbite ya planète1 mpe orbite ya planète2, ekomami na molɔngɔ́ ya - Fonction esengeli ezongisa table oyo eza na ba planètes nionso oyo ba orbites na yango eza - Komá mosala oyo ezali kozwa nkombo ya baplanɛti mibale lokola milɔngɔ́ planète1 mpe planète2. - Ouranos, Neptun. - Mercure, oyo elandi ezali Vénus, na nsima, Mabele, Mars, Jupiter, Saturne, - Ezali na baplanɛti mwambe na kati ya système solaire na biso: oyo ezali pene na moi .-- >>> bf('Jupiter', 'Neptune')
-- {'Saturn', 'Uranus'}
-- >>> bf('Earth', 'Mercury')
-- 'Venus'
-- >>> bf('Mercury', 'Uranus')
-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}
local function bf(planet1, planet2)
","local function bf(planet1, planet2)
    local planets = {
        ""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    }
    
    local planet_index = {}
    for i, planet in ipairs(planets) do
        planet_index[planet] = i
    end
    
    local index1 = planet_index[planet1]
    local index2 = planet_index[planet2]
    
    if not index1 or not index2 then
        return {}
    end
    
    local start_index = math.min(index1, index2) + 1
    local end_index = math.max(index1, index2) - 1
    
    local result = {}
    for i = start_index, end_index do
        table.insert(result, planets[i])
    end
    
    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = bf
    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})
    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})
    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})
    lu.assertEquals(candidate('Earth', 'Earth'), {})
    lu.assertEquals(candidate('Mars', 'Earth'), {})
    lu.assertEquals(candidate('Jupiter', 'Makemake'), {})
end

os.exit(lu.LuaUnit.run())"
HumanEval_149,lin_Latn,lua,"- Na ndakisa: - Okoki kokanisa ete maloba nyonso ekozala na molai ndenge moko. - Fonction esengeli ezongisa table ya ba chaines na ordre. - Soki maloba mibale ezali na molai ndenge moko, bongisa yango na molɔngɔ ya alfabɛ. - esengeli kozongisa mesa oyo ekomami na kolanda mobeko wana. - Molɔngɔ ya maloba esengeli kokita na kolanda molai ya liloba mokomoko, mpe yo - mpe ekoki kozala na ba kopi. - Mesa ezalaka ntango nyonso mesa ya milɔngɔ́ mpe ezalaka soko moke te mesa ya mitángo, - mpe ezongisi mesa oyo ezwami na molɔngɔ́, - alongolaka makomi oyo ezali na bolai ya kokokana te, - Komá mosala oyo endimaka molɔngɔ́ ya mitó lokola paramètre, -- >>> list_sort({'aa', 'a', 'aaa'})
-- {'aa'}
-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})
-- {'ab', 'cd'}
local function sorted_list_sum(lst)
","local function list_sort(tbl)
    local function is_even_length(s)
        return #s % 2 == 0
    end

    local function compare_strings(a, b)
        if #a == #b then
            return a < b
        else
            return #a < #b
        end
    end

    local result = {}
    for _, v in ipairs(tbl) do
        if is_even_length(v) then
            table.insert(result, v)
        end
    end

    table.sort(result, compare_strings)

    return result
end","lu = require('luaunit')

function test_humaneval()
local candidate = sorted_list_sum
    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})
    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})
    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})
    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})
    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})
    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})
    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})
end

os.exit(lu.LuaUnit.run())"
HumanEval_150,lin_Latn,lua,"- Bandakisa: - ezali motango ya liboso mpe esengeli kozongisa motuya ya y soki te. - Programɛ moko ya pete oyo esengeli kozongisa motuya ya x soki n ezali -- >>> x_or_y(7, 34, 12)
-- 34
-- >>> x_or_y(15, 8, 5)
-- 5
local function x_or_y(n, x, y)
","local function is_prime(num)
    if num <= 1 then
        return false
    end
    for i = 2, math.sqrt(num) do
        if num % i == 0 then
            return false
        end
    end
    return true
end

local function x_or_y(n, x, y)
    if is_prime(n) then
        return x
    else
        return y
    end
end","lu = require('luaunit')

function test_humaneval()
local candidate = x_or_y
    lu.assertEquals(candidate(7, 34, 12), 34)
    lu.assertEquals(candidate(15, 8, 5), 5)
    lu.assertEquals(candidate(3, 33, 5212), 33)
    lu.assertEquals(candidate(1259, 3, 52), 3)
    lu.assertEquals(candidate(7919, -1, 12), -1)
    lu.assertEquals(candidate(3609, 1245, 583), 583)
    lu.assertEquals(candidate(91, 56, 129), 129)
    lu.assertEquals(candidate(6, 34, 1234), 1234)
    lu.assertEquals(candidate(1, 2, 0), 0)
    lu.assertEquals(candidate(2, 2, 0), 2)
end

os.exit(lu.LuaUnit.run())"
HumanEval_151,lin_Latn,lua,"Kozanga kotalela mitángo oyo ezali ya mabe to oyo ezali ya mobimba te.- Soki ozwi liste ya mitángo, lobá motángo ya ba nombre oyo ezali na kati ya liste yango.-- >>> double_the_difference({1, 3, 2, 0})
-- 10
-- >>> double_the_difference({-1, -2, 0})
-- 0
-- >>> double_the_difference({9, -2})
-- 81
-- >>> double_the_difference({0})
-- 0
-- If the input table is empty, return 0.
local function double_the_difference(lst)
","local function double_the_difference(lst)
    local sum = 0
    for _, num in ipairs(lst) do
        if type(num) == ""number"" and num >= 0 and num % 1 == 0 and num % 2 == 1 then
            sum = sum + num * num
        end
    end
    return sum
end","lu = require('luaunit')

function test_humaneval()
local candidate = double_the_difference
    lu.assertEquals(candidate({}), 0)
    lu.assertEquals(candidate({5.0, 4.0}), 25)
    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)
    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)
    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)
    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)
    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)
end

os.exit(lu.LuaUnit.run())"
HumanEval_152,lin_Latn,lua,"- ndakisa: - motuya ezali 0, mpe soki te, motuya ezali bokeseni ya solo kati na likanisi mpe na motuya. - Zongisá mesa ya molai moko oyo ezali komonisa bokeseni ya makanisi na bango.- Bapesi yo ba table mibale ya ba scores mpe ba suppositions ya bolai moko, esika index moko na moko ezali kolakisa correspondance. - Mosala na yo ezali ya koyeba soki moto moko akanisaki malamu na ntina na matomba ya masano mingi.- ebongi mpenza kokoma yango mpe kokokanisa yango. Na ntango wana, makanisi mpe mayoki na yo ezali na ntina mingi.- Nakanisi biso banso tozali komikundola mayoki wana ntango mbuma ya likambo moko oyo tozelaki uta kala-- >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})
-- {0, 0, 0, 0, 3, 3}
-- >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})
-- {4, 4, 1, 0, 0, 6}
local function compare(game, guess)
","local function compare(game, guess)
    local differences = {}
    for i = 1, #game do
        if game[i] == guess[i] then
            differences[i] = 0
        else
            differences[i] = math.abs(game[i] - guess[i])
        end
    end
    return differences
end","lu = require('luaunit')

function test_humaneval()
local candidate = compare
    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})
    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})
    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})
    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})
end

os.exit(lu.LuaUnit.run())"
HumanEval_153,lin_Latn,lua,"- Ndakisa: - (nguya na yango ezali -1). - azongisaka 'Slices.SERVINGSliCes' mpo 'SERVINGSliCes' ezali extension ya makasi koleka - ba extensions: ['SERVINGSliCes', 'Cheese', 'StuFfed'] bongo osengeli - Na ndakisa, soki bapesi yo ""Slices"" lokola kelasi mpe mesa ya - poná oyo ezali na esika ya liboso na liste. - Soki ezali na ba extension mibale to koleka na makasi moko, osengeli kofuta yango na- format: ClassName.StrongestExtensionName. - Osengeli koluka extension ya makasi mpe kozongisa string na kati ya oyo - na nkombo ya extension, makasi ya yango epesami na fraction CAP - SM. - makomi na nkombo ya extension, mpe tika SM ezala motango ya makomi ya mikuse - makasi ya extension ezali boye: Tika CAP ezala motango ya makomi minene - Ba extensions esengeli kosalelama mpo na kotiya ba classes misusu na classe.- Okozwa nkombo ya kelasi (motángo) mpe liste ya ba extensions. -- >>> Strongest_Extension('my_class', {'AA', 'Be', 'CC'})
-- 'my_class.AA'
local function Strongest_Extension(class_name, extensions)
","local function Strongest_Extension(class_name, extensions)
    local strongest_extension = nil
    local max_strength = nil

    for _, extension in ipairs(extensions) do
        local cap = 0
        local sm = 0
        for i = 1, #extension do
            local char = extension:sub(i, i)
            if char:match(""%u"") then
                cap = cap + 1
            elseif char:match(""%l"") then
                sm = sm + 1
            end
        end
        local strength = cap - sm
        if max_strength == nil or strength > max_strength then
            max_strength = strength
            strongest_extension = extension
        end
    end

    return class_name .. ""."" .. strongest_extension
end","lu = require('luaunit')

function test_humaneval()
local candidate = Strongest_Extension
    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')
    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')
    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')
    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')
    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')
    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')
    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')
    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')
    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')
end

os.exit(lu.LuaUnit.run())"
HumanEval_154,lin_Latn,lua,"- Bapesi yo maloba mibale. Esengeli ozongisa true soki liloba ya mibale to moko ya kobaluka na yango ezali motango ya nse na liloba ya yambo -- >>> cycpattern_check('abcd', 'abd')
-- false
-- >>> cycpattern_check('hello', 'ell')
-- true
-- >>> cycpattern_check('whassup', 'psus')
-- false
-- >>> cycpattern_check('abab', 'baa')
-- true
-- >>> cycpattern_check('efef', 'eeff')
-- false
-- >>> cycpattern_check('himenss', 'simen')
-- true
local function cycpattern_check(a, b)
","local function is_rotation(s1, s2)
    return #s1 == #s2 and (s1 .. s1):find(s2) ~= nil
end

local function generate_rotations(s)
    local rotations = {}
    for i = 1, #s do
        local rotation = s:sub(i) .. s:sub(1, i-1)
        table.insert(rotations, rotation)
    end
    return rotations
end

local function cycpattern_check(a, b)
    local rotations = generate_rotations(b)
    for _, rotation in ipairs(rotations) do
        if a:find(rotation) then
            return true
        end
    end
    return false
end","lu = require('luaunit')

function test_humaneval()
local candidate = cycpattern_check
    lu.assertEquals(candidate('xyzw', 'xyw'), false)
    lu.assertEquals(candidate('yello', 'ell'), true)
    lu.assertEquals(candidate('whattup', 'ptut'), false)
    lu.assertEquals(candidate('efef', 'fee'), true)
    lu.assertEquals(candidate('abab', 'aabb'), false)
    lu.assertEquals(candidate('winemtt', 'tinem'), true)
end

os.exit(lu.LuaUnit.run())"
HumanEval_155,lin_Latn,lua,"- Ndakisa: - Soki bapesi yo motango mobimba, kozongisa mesa oyo ezali na motango ya mituya ya paire mpe ya impaire. --     >>> even_odd_count(-12)
--     {1, 1}
--     >>> even_odd_count(123)
--     {1, 2}
local function even_odd_count(num)
","local function even_odd_count(num)
    local even_count, odd_count = 0, 0
    num = math.abs(num)  -- remove the sign of the number
    while num > 0 do
        local digit = num % 10
        if digit % 2 == 0 then
            even_count = even_count + 1
        else
            odd_count = odd_count + 1
        end
        num = math.floor(num / 10)
    end
    return {even_count, odd_count}
end","lu = require('luaunit')

function test_humaneval()
local candidate = even_odd_count
    lu.assertEquals(candidate(7), {0, 1})
    lu.assertEquals(candidate(-78), {1, 1})
    lu.assertEquals(candidate(3452), {2, 2})
    lu.assertEquals(candidate(346211), {3, 3})
    lu.assertEquals(candidate(-345821), {3, 3})
    lu.assertEquals(candidate(-2), {1, 0})
    lu.assertEquals(candidate(-45347), {2, 3})
    lu.assertEquals(candidate(0), {1, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_156,lin_Latn,lua,"- Bandakisa: - Mikano: 1 <= num <= 1000 - mpe kozongisa yango na makomi ya mikemike. - Soki bapesi yo motango ya mobimba, luká motango ya motuya ya balomɛ ya Loma oyo ekokani na yango na lolenge ya molɔngɔ́, -- >>> int_to_mini_roman(19)
-- 'xix'
-- >>> int_to_mini_roman(152)
-- 'clii'
-- >>> int_to_mini_roman(426)
-- 'cdxxvi'
local function int_to_mini_roman(number)
","local function int_to_mini_roman(number)
    local roman_numerals = {
        {1000, ""m""},
        {900, ""cm""},
        {500, ""d""},
        {400, ""cd""},
        {100, ""c""},
        {90, ""xc""},
        {50, ""l""},
        {40, ""xl""},
        {10, ""x""},
        {9, ""ix""},
        {5, ""v""},
        {4, ""iv""},
        {1, ""i""}
    }
    
    local result = {}
    for _, value_pair in ipairs(roman_numerals) do
        local value, symbol = unpack(value_pair)
        while number >= value do
            number = number - value
            table.insert(result, symbol)
        end
    end
    
    return table.concat(result)
end","lu = require('luaunit')

function test_humaneval()
local candidate = int_to_mini_roman
    lu.assertEquals(candidate(19), 'xix')
    lu.assertEquals(candidate(152), 'clii')
    lu.assertEquals(candidate(251), 'ccli')
    lu.assertEquals(candidate(426), 'cdxxvi')
    lu.assertEquals(candidate(500), 'd')
    lu.assertEquals(candidate(1), 'i')
    lu.assertEquals(candidate(4), 'iv')
    lu.assertEquals(candidate(43), 'xliii')
    lu.assertEquals(candidate(90), 'xc')
    lu.assertEquals(candidate(94), 'xciv')
    lu.assertEquals(candidate(532), 'dxxxii')
    lu.assertEquals(candidate(900), 'cm')
    lu.assertEquals(candidate(994), 'cmxciv')
    lu.assertEquals(candidate(1000), 'm')
end

os.exit(lu.LuaUnit.run())"
HumanEval_157,lin_Latn,lua,"- Ndakisa: - Bavɛrsɛ 90- Triangle ya angle droit ezali triangle oyo angle moko ezali angle droit to - ngámbo nyonso mibale ezali na mpembeni moko, soki te ezali solo te. - Soki ozwi bolai ya ngámbo misato ya triangle, bozongisaka solo soki misato -- >>> right_angle_triangle(3, 4, 5)
-- true
-- >>> right_angle_triangle(1, 2, 3)
-- false
local function right_angle_triangle(a, b, c)
","local function right_angle_triangle(a, b, c)
    -- Sort the sides to make sure we always compare the largest with the sum of squares of the other two
    local sides = {a, b, c}
    table.sort(sides)

    -- Check the Pythagorean theorem
    return sides[1]^2 + sides[2]^2 == sides[3]^2
end","lu = require('luaunit')

function test_humaneval()
local candidate = right_angle_triangle
    lu.assertEquals(candidate(3, 4, 5), true)
    lu.assertEquals(candidate(1, 2, 3), false)
    lu.assertEquals(candidate(10, 6, 8), true)
    lu.assertEquals(candidate(2, 2, 2), false)
    lu.assertEquals(candidate(7, 24, 25), true)
    lu.assertEquals(candidate(10, 5, 7), false)
    lu.assertEquals(candidate(5, 12, 13), true)
    lu.assertEquals(candidate(15, 8, 17), true)
    lu.assertEquals(candidate(48, 55, 73), true)
    lu.assertEquals(candidate(1, 1, 1), false)
    lu.assertEquals(candidate(2, 2, 10), false)
end

os.exit(lu.LuaUnit.run())"
HumanEval_158,lin_Latn,lua,"- makomi, kozongisa oyo ezali liboso na molɔngɔ ya makomi. Soki balɛtrɛ mingi ezali na balɛtrɛ ebele, balɛtrɛ nyonso ekozala kaka moko.- Na table ezali na maloba ekeseni. Zongisa liloba na motango ya monene - Komá mosala oyo endimaka molɔngɔ́ ya milɔngɔ́. -- >>> find_max({'name', 'of', 'string'})
-- 'string'
-- >>> find_max({'name', 'enam', 'game'})
-- 'enam'
-- >>> find_max({'aaaaaaa', 'bb', 'cc'})
-- 'aaaaaaa'
local function find_max(words)
","local function find_max(words)
    local function unique_characters_count(word)
        local char_set = {}
        for char in word:gmatch('.') do
            char_set[char] = true
        end
        local count = 0
        for _ in pairs(char_set) do
            count = count + 1
        end
        return count
    end

    local max_word = ''
    local max_unique_count = 0

    for _, word in ipairs(words) do
        local unique_count = unique_characters_count(word)
        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word) then
            max_word = word
            max_unique_count = unique_count
        end
    end

    return max_word
end","lu = require('luaunit')

function test_humaneval()
local candidate = find_max
    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
    lu.assertEquals(candidate({'b'}), 'b')
    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
end

os.exit(lu.LuaUnit.run())"
HumanEval_159,lin_Latn,lua,"- Ndakisa: - soki ezali na mbuto ya kotanga te, okolia mbuto nyonso oyo etikali, kasi okozala kaka na nzala.- motángo ya karɔtɛ oyo etikali nsima ya kolya ] - okozongisa mesa ya [ motango ya ba carottes oyo olei nsima ya kolya, - kasi sikoyo osengeli kolya lisusu karɔtɛ mpo na kosilisa kolya mokolo mobimba.- Ozali soso oyo azali na nzala, mpe osili kolya mwa ndambo ya karɔ́ti, -- >>> eat(5, 6, 10)
-- {11, 4}
-- >>> eat(4, 8, 9)
-- {12, 1}
-- >>> eat(1, 10, 10)
-- {11, 0}
-- >>> eat(2, 11, 5)
-- {7, 0}
-- Variables:
-- @number : integer
--     the number of carrots that you have eaten.
-- @need : integer
--     the number of carrots that you need to eat.
-- @remaining : integer
--     the number of remaining carrots thet exist in stock
-- Constrain:
-- * 0 <= number <= 1000
-- * 0 <= need <= 1000
-- * 0 <= remaining <= 1000
-- Have fun :)
local function eat(number, need, remaining)
","local function eat(number, need, remaining)
    local totalEaten
    local leftOver
    
    if remaining >= need then
        totalEaten = number + need
        leftOver = remaining - need
    else
        totalEaten = number + remaining
        leftOver = 0
    end
    
    return {totalEaten, leftOver}
end","lu = require('luaunit')

function test_humaneval()
local candidate = eat
    lu.assertEquals(candidate(5, 6, 10), {11, 4})
    lu.assertEquals(candidate(4, 8, 9), {12, 1})
    lu.assertEquals(candidate(1, 10, 10), {11, 0})
    lu.assertEquals(candidate(2, 11, 5), {7, 0})
    lu.assertEquals(candidate(4, 5, 7), {9, 2})
    lu.assertEquals(candidate(4, 5, 1), {5, 0})
end

os.exit(lu.LuaUnit.run())"
HumanEval_160,lin_Latn,lua,"- Tablo ya ba opérateurs ezali na opérateur moko, mpe oyo ya ba opérands ezali na opérands mibale. - Operand ezali molɔngɔ ya mitángo ya mobimba oyo ezali ya mabe te. - Bolai ya table ya ba opérateurs ekokani na bolai ya table ya ba opérands moins un. - Elembo: - => mbano = 9 - mbano = 2 + 3 * 4 - 5 - table = [2, 3, 4, 5] - motambwisi['+', '*', '-'] - Ndakisa: - Kozala na motuya (**) - Eteni ya ndako ( //) - Koyikana (*) - Kozongisa ( - ) - Koyikanisa (+) - Misala ya algebra ya ebandeli: - maloba mpe kozongisa motuya ya maloba yango. Na nsima, na esika ya liboso, okomona ete ezali na mitángo ya malamu oyo ezali na kati ya mitángo ya liboso.Na ndakisa, soki bapesi biso operator ya ba table mibale, mpe operand, oyo ya liboso ezali na misala ya algebra, mpe local function do_algebra(operator, operand)
","local function do_algebra(operator, operand)
    local expression = tostring(operand[1])
    
    for i = 1, #operator do
        expression = expression .. "" "" .. operator[i] .. "" "" .. operand[i+1]
    end
    
    return load(""return "" .. expression)()
end

-- Example usage:
-- local operator = {'+', '*', '-'}
-- local operand = {2, 3, 4, 5}
-- local result = do_algebra(operator, operand)
-- print(result) -- Output: 9","lu = require('luaunit')

function test_humaneval()
local candidate = do_algebra
    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)
    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)
    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)
end

os.exit(lu.LuaUnit.run())"
HumanEval_161,lin_Latn,lua,"- Bandakisa - Fonkálo esengeli kozongisa molɔngɔ́ ya maloba oyo ezwami. - Soki molɔngɔ́ ezali na makomi te, balongola molɔngɔ́.- soki te, batika yango ndenge ezali. - soki s[i] ezali lɛtɛlɛ, balongoli yango na likoló mpe na nse to na ngámbo mosusu, - Bapesi yo molɔngɔ́ ya mitó.-- >>> solve('1234')
-- '4321'
-- >>> solve('ab')
-- 'AB'
-- >>> solve('#a@C')
-- '#A@c'
local function solve(s)
","local function solve(s)
  local has_letters = false
  local result = {}
  
  for i = 1, #s do
    local char = s:sub(i, i)
    if char:match(""%a"") then
      has_letters = true
      if char:lower() == char then
        table.insert(result, char:upper())
      else
        table.insert(result, char:lower())
      end
    else
      table.insert(result, char)
    end
  end
  
  if has_letters then
    return table.concat(result)
  else
    return s:reverse()
  end
end","lu = require('luaunit')

function test_humaneval()
local candidate = solve
    lu.assertEquals(candidate('AsDf'), 'aSdF')
    lu.assertEquals(candidate('1234'), '4321')
    lu.assertEquals(candidate('ab'), 'AB')
    lu.assertEquals(candidate('#a@C'), '#A@c')
    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')
    lu.assertEquals(candidate('#6@2'), '2@6#')
    lu.assertEquals(candidate('#$a^D'), '#$A^d')
    lu.assertEquals(candidate('#ccc'), '#CCC')
end

os.exit(lu.LuaUnit.run())"
HumanEval_162,lin_Latn,lua,"- Soki 'text' ezali string ya pamba, bozongi nil. - Soki bapesi yo string 'text', zongisela biso string ya md5 hash oyo ekokani na yango. -- >>> string_to_md5('Hello world')
-- '3e25960a79dbc69b674cd4ec67a72c62'
local function string_to_md5(text)
","local md5 = require(""md5"")

local function string_to_md5(text)
    if text == """" then
        return nil
    end
    return md5.sumhexa(text)
end","lu = require('luaunit')

function test_humaneval()
local candidate = string_to_md5
    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')
    lu.assertEquals(candidate(''), None)
    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')
    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')
end

os.exit(lu.LuaUnit.run())"
HumanEval_163,lin_Latn,lua,"- Na ndakisa: - mpe b, na molɔngɔ́ ya kobakisama. - Soki bapesi biso mituya mibale ya malamu a mpe b, tozongisa mituya ya paire kati na a -- >>> generate_integers(2, 8)
-- {2, 4, 6, 8}
-- >>> generate_integers(8, 2)
-- {2, 4, 6, 8}
-- >>> generate_integers(10, 14)
-- {}
local function generate_integers(a, b)
","local function generate_integers(a, b)
    local evens = {}
    local start, finish = math.min(a, b), math.max(a, b)
    
    for i = start, finish do
        if i % 2 == 0 then
            table.insert(evens, i)
        end
    end
    
    return evens
end","lu = require('luaunit')

function test_humaneval()
local candidate = generate_integers
    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})
    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})
    lu.assertEquals(candidate(17, 89), {})
end

os.exit(lu.LuaUnit.run())"
