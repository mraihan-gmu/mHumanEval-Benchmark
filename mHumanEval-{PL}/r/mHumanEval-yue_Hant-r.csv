task_id,nl,pl,prompt,canonical_solution,tests
HumanEval_0,yue_Hant,r,"值得注意嘅一個點.檢查一下係咪有兩個數字係比0 更加近嘅# >>> has_close_elements(c(1.0, 2.0, 3.0), 0.5)
# FALSE
# >>> has_close_elements(c(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)
# TRUE
has_close_elements <- function(numbers, threshold) {","has_close_elements <- function(numbers, threshold) {
  for (i in seq_along(numbers)) {
    for (j in seq_along(numbers)) {
      if (i != j && abs(numbers[i] - numbers[j]) < threshold) {
        return(TRUE)
      }
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- has_close_elements
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0), 0.95), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0), 0.8), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1), 1.0), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1), 0.5), FALSE)))
}
test_humaneval()"
HumanEval_1,yue_Hant,r,"忽略輸入字符串嘅空格.兩個唔同嘅組別都平衡 (每個開嘅都被正確地封閉),而唔係埋喺對方裡面.將呢啲組別分成唔同嘅字符串 然後返回呢啲字符串嘅列表.函數嘅輸入數字串包含多個組嘅嵌套括號.你嘅目標係# >>> separate_paren_groups('( ) (( )) (( )( ))')
# c('()', '(())', '(()())')
separate_paren_groups <- function(paren_string) {","separate_paren_groups <- function(paren_string) {
  # Remove spaces from the input string
  paren_string <- gsub("" "", """", paren_string)
  
  # Initialize variables for processing
  result <- c()
  current_group <- """"
  balance <- 0
  
  # Iterate through each character in the string
  for (char in strsplit(paren_string, """")[[1]]) {
    current_group <- paste0(current_group, char)
    if (char == ""("") {
      balance <- balance + 1
    } else if (char == "")"") {
      balance <- balance - 1
    }
    
    # If balance is zero, we found a complete group
    if (balance == 0 && nchar(current_group) > 0) {
      result <- c(result, current_group)
      current_group <- """"
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- separate_paren_groups
    stopifnot(isTRUE(all.equal(candidate('(()()) ((())) () ((())()())'), c('(()())', '((()))', '()', '((())()())'))))
    stopifnot(isTRUE(all.equal(candidate('() (()) ((())) (((())))'), c('()', '(())', '((()))', '(((())))'))))
    stopifnot(isTRUE(all.equal(candidate('(()(())((())))'), c('(()(())((())))'))))
    stopifnot(isTRUE(all.equal(candidate('( ) (( )) (( )( ))'), c('()', '(())', '(()())'))))
}
test_humaneval()"
HumanEval_2,yue_Hant,r,"返回数字的小数部分.(剩餘部分總比1小).整數部分 (最大的整數小於數字) 及小數點數给定一个正的浮点数,它可以分解成# >>> truncate_number(3.5)
# 0.5
truncate_number <- function(number) {","truncate_number <- function(number) {
  return(number - floor(number))
}","test_humaneval <- function() {
    candidate <- truncate_number
    stopifnot(isTRUE(all.equal(candidate(3.5), 0.5)))
    stopifnot(isTRUE(all.equal(candidate(1.25), 0.25)))
    stopifnot(isTRUE(all.equal(candidate(123.0), 0.0)))
}
test_humaneval()"
HumanEval_3,yue_Hant,r,"函數應該返回TRUE.如果唔係,它應該返回FALSE.你嘅任務就係搵出是否有任何一個時段 帳戶餘額跌到零銀行會將你存款和提款的資料列出來# >>> below_zero(c(1, 2, 3))
# FALSE
# >>> below_zero(c(1, 2, -4, 5))
# TRUE
below_zero <- function(operations) {","below_zero <- function(operations) {
  balance <- 0
  for (op in operations) {
    balance <- balance + op
    if (balance < 0) {
      return(TRUE)
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- below_zero
    stopifnot(isTRUE(all.equal(candidate(c()), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, -3, 1, 2, -3)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, -4, 5, 6)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 2, -2, 5, -5, 4, -4)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 2, -2, 5, -5, 4, -5)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -2, 2, -2, 5, -5, 4, -4)), TRUE)))
}
test_humaneval()"
HumanEval_4,yue_Hant,r,"MAD=平均值.x - x_mean.元素同中間點 (在這個例子中,平均值):平均絕對偏差係每個數值之間嘅平均絕對差異差唔多喺呢個數據集嘅平均值.計算輸入數據列表中嘅平均絕對偏差# >>> mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))
# 1.0
mean_absolute_deviation <- function(numbers) {","mean_absolute_deviation <- function(numbers) {
  x_mean <- mean(numbers)
  mad <- mean(abs(numbers - x_mean))
  return(mad)
}

# Example usage
mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))","test_humaneval <- function() {
    candidate <- mean_absolute_deviation
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0)), 0.5)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0)), 1.0)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0)), 1.2)))
}
test_humaneval()"
HumanEval_5,yue_Hant,r,"輸入列表每兩個連續元素之間,請輸入一個""分隔符""數字.# >>> intersperse(c(), 4)
# c()
# >>> intersperse(c(1, 2, 3), 4)
# c(1, 4, 2, 4, 3)
intersperse <- function(numbers, delimeter) {","intersperse <- function(numbers, delimeter) {
  if (length(numbers) <= 1) {
    return(numbers)
  }
  result <- c()
  for (i in 1:(length(numbers) - 1)) {
    result <- c(result, numbers[i], delimeter)
  }
  result <- c(result, numbers[length(numbers)])
  return(result)
}","test_humaneval <- function() {
    candidate <- intersperse
    stopifnot(isTRUE(all.equal(candidate(c(), 7), c())))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 2), 8), c(5, 8, 6, 8, 3, 8, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 2, 2), 2), c(2, 2, 2, 2, 2))))
}
test_humaneval()"
HumanEval_6,yue_Hant,r,"例如, ()) 有最多兩層嘅巢,而 ()) 有三層.输出每个组的括号最深层次的嵌套.呢一個函數嘅輸入輸入輸入嘅方式,就係用空格分隔嘅括號, 代表一個字符串嘅多個組.# >>> parse_nested_parens('(()()) ((())) () ((())()())')
# c(2, 3, 1, 3)
parse_nested_parens <- function(paren_string) {","parse_nested_parens <- function(paren_string) {
  sapply(strsplit(paren_string, "" "")[[1]], function(group) {
    max_nesting <- 0
    current_nesting <- 0
    for (char in strsplit(group, """")[[1]]) {
      if (char == ""("") {
        current_nesting <- current_nesting + 1
        max_nesting <- max(max_nesting, current_nesting)
      } else if (char == "")"") {
        current_nesting <- current_nesting - 1
      }
    }
    return(max_nesting)
  })
}","test_humaneval <- function() {
    candidate <- parse_nested_parens
    stopifnot(isTRUE(all.equal(candidate('(()()) ((())) () ((())()())'), c(2, 3, 1, 3))))
    stopifnot(isTRUE(all.equal(candidate('() (()) ((())) (((())))'), c(1, 2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate('(()(())((())))'), c(4))))
}
test_humaneval()"
HumanEval_7,yue_Hant,r,"單選題 選取包含特定子字符串嘅字符串來過濾輸入列表# >>> filter_by_substring(c(), 'a')
# c()
# >>> filter_by_substring(c('abc', 'bacd', 'cde', 'array'), 'a')
# c('abc', 'bacd', 'array')
filter_by_substring <- function(strings, substring) {","filter_by_substring <- function(strings, substring) {
  return(strings[grepl(substring, strings)])
}","test_humaneval <- function() {
    candidate <- filter_by_substring
    stopifnot(isTRUE(all.equal(candidate(c(), 'john'), c())))
    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))))
    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'), 'xx'), c('xxx', 'aaaxxy', 'xxxAAA', 'xxx'))))
    stopifnot(isTRUE(all.equal(candidate(c('grunt', 'trumpet', 'prune', 'gruesome'), 'run'), c('grunt', 'prune'))))
}
test_humaneval()"
HumanEval_8,yue_Hant,r,"空總和應該係 0 而空積則應該係 1对于给定的整数列表,返回一个由列表中所有整数的和和乘积组成的列表.# >>> sum_product(c())
# c(0, 1)
# >>> sum_product(c(1, 2, 3, 4))
# c(10, 24)
sum_product <- function(numbers) {","sum_product <- function(numbers) {
  sum_val <- sum(numbers)
  prod_val <- ifelse(length(numbers) == 0, 1, prod(numbers))
  return(c(sum_val, prod_val))
}","test_humaneval <- function() {
    candidate <- sum_product
    stopifnot(isTRUE(all.equal(candidate(c()), c(0, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1)), c(3, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(100, 0)), c(100, 0))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 7)), c(15, 105))))
    stopifnot(isTRUE(all.equal(candidate(c(10)), c(10, 10))))
}
test_humaneval()"
HumanEval_9,yue_Hant,r,"應該係個順序.從一個已知嘅整數列表,生成一個列表 包含到某一時刻發現嘅最大元素.# >>> rolling_max(c(1, 2, 3, 2, 3, 4, 2))
# c(1, 2, 3, 3, 3, 4, 4)
rolling_max <- function(numbers) {","rolling_max <- function(numbers) {
  max_list <- c()
  current_max <- -Inf
  for (number in numbers) {
    current_max <- max(current_max, number)
    max_list <- c(max_list, current_max)
  }
  return(max_list)
}","test_humaneval <- function() {
    candidate <- rolling_max
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))))
}
test_humaneval()"
HumanEval_10,yue_Hant,r,"- 請將字符串前,以至於喺 palindromic 後之前, 加入到字符串尾.- 找到最长的后续函数 提供字符串的 palindrome.算法嘅概念簡單:求出最短嘅以已知字符串開始嘅對應式.# >>> make_palindrome('')
# ''
# >>> make_palindrome('cat')
# 'catac'
# >>> make_palindrome('cata')
# 'catac'
make_palindrome <- function(string) {","make_palindrome <- function(string) {
  is_palindrome <- function(s) {
    return(s == stringi::stri_reverse(s))
  }
  
  n <- nchar(string)
  
  for (i in seq(n, 0, by = -1)) {
    suffix <- substr(string, i, n)
    if (is_palindrome(suffix)) {
      prefix <- substr(string, 1, i - 1)
      return(paste0(string, stringi::stri_reverse(prefix)))
    }
  }
  
  return(string) # for the empty string case
}","test_humaneval <- function() {
    candidate <- make_palindrome
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('x'), 'x')))
    stopifnot(isTRUE(all.equal(candidate('xyz'), 'xyzyx')))
    stopifnot(isTRUE(all.equal(candidate('xyx'), 'xyx')))
    stopifnot(isTRUE(all.equal(candidate('jerry'), 'jerryrrej')))
}
test_humaneval()"
HumanEval_11,yue_Hant,r,"執行對二進制 XOR 對於這些輸入,並以字符串形式返回結果.輸入嘅兩個字串 a 同 b 只包含 1 同 0# >>> string_xor('010', '110')
# '100'
string_xor <- function(a, b) {","string_xor <- function(a, b) {
  xor_result <- mapply(function(x, y) { 
    ifelse(x == y, 0, 1) 
  }, strsplit(a, NULL)[[1]], strsplit(b, NULL)[[1]])
  return(paste(xor_result, collapse = """"))
}","test_humaneval <- function() {
    candidate <- string_xor
    stopifnot(isTRUE(all.equal(candidate('111000', '101010'), '010010')))
    stopifnot(isTRUE(all.equal(candidate('1', '1'), '0')))
    stopifnot(isTRUE(all.equal(candidate('0101', '0000'), '0101')))
}
test_humaneval()"
HumanEval_12,yue_Hant,r,"同一長度嘅字符串.如果輸入列表係空,返回NULL.喺字符串列表中,返回最長嘅字符串.如果有多個字符串,返回第一個.# >>> longest(c())
# NULL
# >>> longest(c('a', 'b', 'c'))
# 'a'
# >>> longest(c('a', 'bb', 'ccc'))
# 'ccc'
longest <- function(strings) {","longest <- function(strings) {
  if (length(strings) == 0) return(NULL)
  longest_string <- strings[1]
  for (s in strings) {
    if (nchar(s) > nchar(longest_string)) {
      longest_string <- s
    }
  }
  return(longest_string)
}","test_humaneval <- function() {
    candidate <- longest
    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z')), 'x')))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc')), 'zzzz')))
}
test_humaneval()"
HumanEval_13,yue_Hant,r,"返回两个整数a和b的最大公分数# >>> greatest_common_divisor(3, 5)
# 1
# >>> greatest_common_divisor(25, 15)
# 5
greatest_common_divisor <- function(a, b) {","greatest_common_divisor <- function(a, b) {
  while (b != 0) {
    temp <- b
    b <- a %% b
    a <- temp
  }
  return(abs(a))
}","test_humaneval <- function() {
    candidate <- greatest_common_divisor
    stopifnot(isTRUE(all.equal(candidate(3, 7), 1)))
    stopifnot(isTRUE(all.equal(candidate(10, 15), 5)))
    stopifnot(isTRUE(all.equal(candidate(49, 14), 7)))
    stopifnot(isTRUE(all.equal(candidate(144, 60), 12)))
}
test_humaneval()"
HumanEval_14,yue_Hant,r,"返回所有序列列从最短到最长的输入字符串的列表# >>> all_prefixes('abc')
# c('a', 'ab', 'abc')
all_prefixes <- function(string) {","all_prefixes <- function(string) {
  prefixes <- character(nchar(string))
  for (i in seq_along(prefixes)) {
    prefixes[i] <- substr(string, 1, i)
  }
  return(prefixes)
}","test_humaneval <- function() {
    candidate <- all_prefixes
    stopifnot(isTRUE(all.equal(candidate(''), c())))
    stopifnot(isTRUE(all.equal(candidate('asdfgh'), c('a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'))))
    stopifnot(isTRUE(all.equal(candidate('WWW'), c('W', 'WW', 'WWW'))))
}
test_humaneval()"
HumanEval_15,yue_Hant,r,"返回包含由0到n包含的空间划分的数列.# >>> string_sequence(0)
# '0'
# >>> string_sequence(5)
# '0 1 2 3 4 5'
string_sequence <- function(n) {","string_sequence <- function(n) {
  return(paste(0:n, collapse = "" ""))
}","test_humaneval <- function() {
    candidate <- string_sequence
    stopifnot(isTRUE(all.equal(candidate(0), '0')))
    stopifnot(isTRUE(all.equal(candidate(3), '0 1 2 3')))
    stopifnot(isTRUE(all.equal(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')))
}
test_humaneval()"
HumanEval_16,yue_Hant,r,"给定一个字符串,找出它有多少个不同的字符 (不论大小写)# >>> count_distinct_characters('xyzXYZ')
# 3
# >>> count_distinct_characters('Jerry')
# 4
count_distinct_characters <- function(string) {","count_distinct_characters <- function(string) {
  # Convert the string to lowercase to handle case insensitivity
  lower_string <- tolower(string)
  # Split the string into individual characters
  chars <- strsplit(lower_string, NULL)[[1]]
  # Find the unique characters and count them
  distinct_count <- length(unique(chars))
  return(distinct_count)
}","test_humaneval <- function() {
    candidate <- count_distinct_characters
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('abcde'), 5)))
    stopifnot(isTRUE(all.equal(candidate('abcdecadeCADE'), 5)))
    stopifnot(isTRUE(all.equal(candidate('aaaaAAAAaaaa'), 1)))
    stopifnot(isTRUE(all.equal(candidate('Jerry jERRY JeRRRY'), 5)))
}
test_humaneval()"
HumanEval_17,yue_Hant,r,"""""嘅四音,可以到一個節奏""o""字係半個音符,可以連續兩拍""O"" - - 音符,可以連續四次呢度有個傳說:最後一個唔係.你需要解析這個字符串,然後返回一個整數列表, 代表每個數字有多少次拍子.音樂音符串以特殊嘅 ASCII 格式輸入到呢個函數.# >>> parse_music('o o| .| o| o| .| .| .| .| o o')
# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)
parse_music <- function(music_string) {","parse_music <- function(music_string) {
  # Split the input string by spaces to get individual notes
  notes <- strsplit(music_string, "" "")[[1]]
  
  # Map each note to its corresponding beat duration
  beats <- sapply(notes, function(note) {
    if (note == 'o') {
      return(4)
    } else if (note == 'o|') {
      return(2)
    } else if (note == '.|') {
      return(1)
    } else {
      stop(""Invalid note"")
    }
  })
  
  return(beats)
}

# Example usage:
# parse_music('o o| .| o| o| .| .| .| .| o o')
# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)","test_humaneval <- function() {
    candidate <- parse_music
    stopifnot(isTRUE(all.equal(candidate(''), c())))
    stopifnot(isTRUE(all.equal(candidate('o o o o'), c(4, 4, 4, 4))))
    stopifnot(isTRUE(all.equal(candidate('.| .| .| .|'), c(1, 1, 1, 1))))
    stopifnot(isTRUE(all.equal(candidate('o| o| .| .| o o o o'), c(2, 2, 1, 1, 4, 4, 4, 4))))
    stopifnot(isTRUE(all.equal(candidate('o| .| o| .| o o| o o|'), c(2, 1, 2, 1, 4, 2, 4, 2))))
}
test_humaneval()"
HumanEval_18,yue_Hant,r,"求出某個字符串嘅字符串子串嘅重複數.# >>> how_many_times('', 'a')
# 0
# >>> how_many_times('aaa', 'a')
# 3
# >>> how_many_times('aaaa', 'aa')
# 3
how_many_times <- function(string, substring) {","how_many_times <- function(string, substring) {
  if (nchar(substring) == 0) {
    return(0)
  }
  
  count <- 0
  for (i in seq(nchar(string) - nchar(substring) + 1)) {
    if (substr(string, i, i + nchar(substring) - 1) == substring) {
      count <- count + 1
    }
  }
  
  return(count)
}","test_humaneval <- function() {
    candidate <- how_many_times
    stopifnot(isTRUE(all.equal(candidate('', 'x'), 0)))
    stopifnot(isTRUE(all.equal(candidate('xyxyxyx', 'x'), 4)))
    stopifnot(isTRUE(all.equal(candidate('cacacacac', 'cac'), 4)))
    stopifnot(isTRUE(all.equal(candidate('john doe', 'john'), 1)))
}
test_humaneval()"
HumanEval_19,yue_Hant,r,"將從最小排序到最大排序嘅數字串返回有效選擇係""零"""",一"""",兩"""",三"""",四"""",五"""",六"""",七"""",八""同埋""九"".入力係由零到九嘅數字串連接起嚟# >>> sort_numbers('three one five')
# 'one three five'
sort_numbers <- function(numbers) {","sort_numbers <- function(numbers) {
  words_to_numbers <- c(
    ""zero"" = 0, ""one"" = 1, ""two"" = 2, ""three"" = 3, ""four"" = 4, 
    ""five"" = 5, ""six"" = 6, ""seven"" = 7, ""eight"" = 8, ""nine"" = 9
  )
  
  number_list <- strsplit(numbers, "" "")[[1]]
  sorted_numbers <- number_list[order(sapply(number_list, function(word) words_to_numbers[word]))]
  return(paste(sorted_numbers, collapse = "" ""))
}","test_humaneval <- function() {
    candidate <- sort_numbers
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('three'), 'three')))
    stopifnot(isTRUE(all.equal(candidate('three five nine'), 'three five nine')))
    stopifnot(isTRUE(all.equal(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')))
    stopifnot(isTRUE(all.equal(candidate('six five four three two one zero'), 'zero one two three four five six')))
}
test_humaneval()"
HumanEval_20,yue_Hant,r,"按次序返回 (數量較少,數量較大).從數字列表中 (至少要有兩個數字) 選擇並返回最接近每一個數字的兩個數字# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))
# c(2.0, 2.2)
# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))
# c(2.0, 2.0)
find_closest_elements <- function(numbers) {","find_closest_elements <- function(numbers) {
  sorted_numbers <- sort(numbers)
  min_diff <- Inf
  closest_pair <- c()

  for (i in 1:(length(sorted_numbers) - 1)) {
    diff <- sorted_numbers[i + 1] - sorted_numbers[i]
    if (diff < min_diff) {
      min_diff <- diff
      closest_pair <- c(sorted_numbers[i], sorted_numbers[i + 1])
    }
  }

  return(closest_pair)
}","test_humaneval <- function() {
    candidate <- find_closest_elements
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), c(3.9, 4.0))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 5.9, 4.0, 5.0)), c(5.0, 5.9))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)), c(2.0, 2.2))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), c(2.0, 2.0))))
    stopifnot(isTRUE(all.equal(candidate(c(1.1, 2.2, 3.1, 4.1, 5.1)), c(2.2, 3.1))))
}
test_humaneval()"
HumanEval_21,yue_Hant,r,"所以最小嘅數字變成0 而最大嘅數字變成1.给出一系列数 (至少有两个元素),对这个列表应用一个线性变换,# >>> rescale_to_unit(c(1.0, 2.0, 3.0, 4.0, 5.0))
# c(0.0, 0.25, 0.5, 0.75, 1.0)
rescale_to_unit <- function(numbers) {","rescale_to_unit <- function(numbers) {
  min_val <- min(numbers)
  max_val <- max(numbers)
  (numbers - min_val) / (max_val - min_val)
}","test_humaneval <- function() {
    candidate <- rescale_to_unit
    stopifnot(isTRUE(all.equal(candidate(c(2.0, 49.9)), c(0.0, 1.0))))
    stopifnot(isTRUE(all.equal(candidate(c(100.0, 49.9)), c(1.0, 0.0))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0, 4.0, 5.0)), c(0.0, 0.25, 0.5, 0.75, 1.0))))
    stopifnot(isTRUE(all.equal(candidate(c(2.0, 1.0, 5.0, 3.0, 4.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))))
    stopifnot(isTRUE(all.equal(candidate(c(12.0, 11.0, 15.0, 13.0, 14.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))))
}
test_humaneval()"
HumanEval_22,yue_Hant,r,"过给出的列表中任何rthon值只能用于整数.# >>> filter_integers(list('a', 3.14, 5))
# c(5)
# >>> filter_integers(list(1, 2, 3, 'abc', list(), c()))
# c(1, 2, 3)
filter_integers <- function(values) {","filter_integers <- function(values) {
  return(unlist(Filter(is.integer, values)))
}","test_humaneval <- function() {
    candidate <- filter_integers
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(list(4, list(), c(), 23.2, 9, 'adasd')), c(4, 9))))
    stopifnot(isTRUE(all.equal(candidate(list(3, 'c', 3, 3, 'a', 'b')), c(3, 3, 3))))
}
test_humaneval()"
HumanEval_23,yue_Hant,r,"返回给定的字符串的长度# >>> strlen('')
# 0
# >>> strlen('abc')
# 3
strlen <- function(string) {","strlen <- function(string) {
  return(nchar(string))
}","test_humaneval <- function() {
    candidate <- strlen
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('x'), 1)))
    stopifnot(isTRUE(all.equal(candidate('asdasnakj'), 9)))
}
test_humaneval()"
HumanEval_24,yue_Hant,r,"给定一个数 n,求最大的数 能平分 n,小于 n # >>> largest_divisor(15)
# 5
largest_divisor <- function(n) {","largest_divisor <- function(n) {
  for (i in (n-1):1) {
    if (n %% i == 0) {
      return(i)
    }
  }
}","test_humaneval <- function() {
    candidate <- largest_divisor
    stopifnot(isTRUE(all.equal(candidate(3), 1)))
    stopifnot(isTRUE(all.equal(candidate(7), 1)))
    stopifnot(isTRUE(all.equal(candidate(10), 5)))
    stopifnot(isTRUE(all.equal(candidate(100), 50)))
    stopifnot(isTRUE(all.equal(candidate(49), 7)))
}
test_humaneval()"
HumanEval_25,yue_Hant,r,"輸入嘅數字應該等於所有因子嘅積分每一個因子嘅數目 應該係相應於因子分解中出現嘅次數返回由最小到最大的顺序列出的给定整数的质因数列表.# >>> factorize(8)
# c(2, 2, 2)
# >>> factorize(25)
# c(5, 5)
# >>> factorize(70)
# c(2, 5, 7)
factorize <- function(n) {","factorize <- function(n) {
  if (n < 2) {
    return(c())
  }
  factors <- c()
  divisor <- 2
  
  while (n > 1) {
    while (n %% divisor == 0) {
      factors <- c(factors, divisor)
      n <- n / divisor
    }
    divisor <- divisor + 1
  }
  
  return(factors)
}","test_humaneval <- function() {
    candidate <- factorize
    stopifnot(isTRUE(all.equal(candidate(2), c(2))))
    stopifnot(isTRUE(all.equal(candidate(4), c(2, 2))))
    stopifnot(isTRUE(all.equal(candidate(8), c(2, 2, 2))))
    stopifnot(isTRUE(all.equal(candidate(57), c(3, 19))))
    stopifnot(isTRUE(all.equal(candidate(3249), c(3, 3, 19, 19))))
    stopifnot(isTRUE(all.equal(candidate(185193), c(3, 3, 3, 19, 19, 19))))
    stopifnot(isTRUE(all.equal(candidate(20577), c(3, 19, 19, 19))))
    stopifnot(isTRUE(all.equal(candidate(18), c(2, 3, 3))))
}
test_humaneval()"
HumanEval_26,yue_Hant,r,"保持元素嘅排序跟輸入嘅一樣.從整數清單中,將所有多次出現嘅元素除.# >>> remove_duplicates(c(1, 2, 3, 2, 4))
# c(1, 3, 4)
remove_duplicates <- function(numbers) {","remove_duplicates <- function(numbers) {
  unique_numbers <- numbers[!duplicated(numbers) & !duplicated(numbers, fromLast = TRUE)]
  return(unique_numbers)
}","test_humaneval <- function() {
    candidate <- remove_duplicates
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 4, 3, 5)), c(1, 4, 5))))
}
test_humaneval()"
HumanEval_27,yue_Hant,r,"轉換小寫字符串,# >>> flip_case('Hello')
# 'hELLO'
flip_case <- function(string) {","flip_case <- function(string) {
  chars <- strsplit(string, NULL)[[1]]
  flipped_chars <- sapply(chars, function(c) {
    if (grepl(""[a-z]"", c)) {
      return(toupper(c))
    } else if (grepl(""[A-Z]"", c)) {
      return(tolower(c))
    } else {
      return(c)
    }
  })
  return(paste(flipped_chars, collapse = """"))
}","test_humaneval <- function() {
    candidate <- flip_case
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('Hello!'), 'hELLO!')))
    stopifnot(isTRUE(all.equal(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')))
}
test_humaneval()"
HumanEval_28,yue_Hant,r,"將字符串串串聯成一個字符串# >>> concatenate(c())
# ''
# >>> concatenate(c('a', 'b', 'c'))
# 'abc'
concatenate <- function(strings) {","concatenate <- function(strings) {
  paste(strings, collapse = """")
}","test_humaneval <- function() {
    candidate <- concatenate
    stopifnot(isTRUE(all.equal(candidate(c()), '')))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z')), 'xyz')))
    stopifnot(isTRUE(all.equal(candidate(c('x', 'y', 'z', 'w', 'k')), 'xyzwk')))
}
test_humaneval()"
HumanEval_29,yue_Hant,r,"單純以一個先頭開始嘅字符串來過濾輸入串.# >>> filter_by_prefix(c(), 'a')
# c()
# >>> filter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')
# c('abc', 'array')
filter_by_prefix <- function(strings, prefix) {","filter_by_prefix <- function(strings, prefix) {
  return(strings[startsWith(strings, prefix)])
}","test_humaneval <- function() {
    candidate <- filter_by_prefix
    stopifnot(isTRUE(all.equal(candidate(c(), 'john'), c())))
    stopifnot(isTRUE(all.equal(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))))
}
test_humaneval()"
HumanEval_30,yue_Hant,r,"返回列表中只有正數.# >>> get_positive(c(-1, 2, -4, 5, 6))
# c(2, 5, 6)
# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
# c(5, 3, 2, 3, 9, 123, 1)
get_positive <- function(l) {","get_positive <- function(l) {
  return(l[l > 0])
}","test_humaneval <- function() {
    candidate <- get_positive
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, 4, 5, 6)), c(4, 5, 6))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)), c(5, 3, 2, 3, 3, 9, 123, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2)), c())))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
}
test_humaneval()"
HumanEval_31,yue_Hant,r,"如果一個數字係素數,返回 true,如果唔係就返回 false.# >>> is_prime(6)
# FALSE
# >>> is_prime(101)
# TRUE
# >>> is_prime(11)
# TRUE
# >>> is_prime(13441)
# TRUE
# >>> is_prime(61)
# TRUE
# >>> is_prime(4)
# FALSE
# >>> is_prime(1)
# FALSE
is_prime <- function(n) {","is_prime <- function(n) {
  if (n <= 1) {
    return(FALSE)
  }
  if (n <= 3) {
    return(TRUE)
  }
  if (n %% 2 == 0 || n %% 3 == 0) {
    return(FALSE)
  }
  i <- 5
  while (i * i <= n) {
    if (n %% i == 0 || n %% (i + 2) == 0) {
      return(FALSE)
    }
    i <- i + 6
  }
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- is_prime
    stopifnot(isTRUE(all.equal(candidate(6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(101), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(11), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(13441), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(61), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(4), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(5), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(11), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(17), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(85), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(77), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(255379), FALSE)))
}
test_humaneval()"
HumanEval_33,yue_Hant,r,"值,但並列.l' 同於未能除以三的數值,而其值在可以除以三的數值上是相同的.呢個函數取一個列表l,然後返回一個列表l',這樣# >>> sort_third(c(1, 2, 3))
# c(1, 2, 3)
# >>> sort_third(c(5, 6, 3, 4, 8, 9, 2))
# c(2, 6, 3, 4, 8, 9, 5)
sort_third <- function(l) {","sort_third <- function(l) {
  # Find the indices that are divisible by three
  indices_div_by_3 <- seq(3, length(l), by = 3)
  
  # Extract the elements at those indices and sort them
  elements_to_sort <- l[indices_div_by_3]
  sorted_elements <- sort(elements_to_sort)
  
  # Replace the original elements at those indices with sorted ones
  l[indices_div_by_3] <- sorted_elements
  
  return(l)
}","test_humaneval <- function() {
    candidate <- sort_third
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 4, 8, 9, 2)), c(2, 6, 3, 4, 8, 9, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 8, 3, 4, 6, 9, 2)), c(2, 8, 3, 4, 6, 9, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 9, 4, 8, 3, 2)), c(2, 6, 9, 4, 8, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 3, 4, 8, 9, 2, 1)), c(2, 6, 3, 4, 8, 9, 5, 1))))
}
test_humaneval()"
HumanEval_34,yue_Hant,r,"返回列表中排序的唯一元素# >>> unique(c(5, 3, 5, 2, 3, 3, 9, 0, 123))
# c(0, 2, 3, 5, 9, 123)
unique <- function(l) {","unique <- function(l) {
  return(sort(unique(l)))
}","test_humaneval <- function() {
    candidate <- unique
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, 5, 2, 3, 3, 9, 0, 123)), c(0, 2, 3, 5, 9, 123))))
}
test_humaneval()"
HumanEval_35,yue_Hant,r,"返回列表中最大元素.# >>> max_element(c(1, 2, 3))
# 3
# >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
# 123
max_element <- function(l) {","max_element <- function(l) {
  return(max(l))
}","test_humaneval <- function() {
    candidate <- max_element
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)), 124)))
}
test_humaneval()"
HumanEval_36,yue_Hant,r,"返回数字7在小于n的整数中出现的次数,该整数可被11或13除以.# >>> fizz_buzz(50)
# 0
# >>> fizz_buzz(78)
# 2
# >>> fizz_buzz(79)
# 3
fizz_buzz <- function(n) {","fizz_buzz <- function(n) {
  count <- 0
  for (i in 1:(n-1)) {
    if (i %% 11 == 0 || i %% 13 == 0) {
      count <- count + sum(unlist(strsplit(as.character(i), """")) == ""7"")
    }
  }
  return(count)
}","test_humaneval <- function() {
    candidate <- fizz_buzz
    stopifnot(isTRUE(all.equal(candidate(50), 0)))
    stopifnot(isTRUE(all.equal(candidate(78), 2)))
    stopifnot(isTRUE(all.equal(candidate(79), 3)))
    stopifnot(isTRUE(all.equal(candidate(100), 3)))
    stopifnot(isTRUE(all.equal(candidate(200), 6)))
    stopifnot(isTRUE(all.equal(candidate(4000), 192)))
    stopifnot(isTRUE(all.equal(candidate(10000), 639)))
    stopifnot(isTRUE(all.equal(candidate(100000), 8026)))
}
test_humaneval()"
HumanEval_37,yue_Hant,r,"值,但有序.l' 同奇數值嘅 l 同等,但偶數值嘅 l 同等呢個函數取一個列表l,然後返回一個列表l',這樣# >>> sort_even(c(1, 2, 3))
# c(1, 2, 3)
# >>> sort_even(c(5, 6, 3, 4))
# c(3, 6, 5, 4)
sort_even <- function(l) {","sort_even <- function(l) {
  even_indices <- seq(2, length(l), by=2)
  l[even_indices] <- sort(l[even_indices])
  return(l)
}","test_humaneval <- function() {
    candidate <- sort_even
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(1, 2, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)), c(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)), c(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))))
}
test_humaneval()"
HumanEval_39,yue_Hant,r,"prime_fib 返回第 n 个是斐波那契数的数,同时也是个素数.# >>> prime_fib(1)
# 2
# >>> prime_fib(2)
# 3
# >>> prime_fib(3)
# 5
# >>> prime_fib(4)
# 13
# >>> prime_fib(5)
# 89
prime_fib <- function(n) {","prime_fib <- function(n) {
  is_prime <- function(num) {
    if (num < 2) return(FALSE)
    for (i in 2:sqrt(num)) {
      if (num %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  fibonacci <- function() {
    a <- 0
    b <- 1
    while (TRUE) {
      yield <- a + b
      a <<- b
      b <<- yield
      yield
    }
  }
  
  fib_gen <- fibonacci()
  count <- 0
  repeat {
    current_fib <- fib_gen()
    if (is_prime(current_fib)) {
      count <- count + 1
      if (count == n) return(current_fib)
    }
  }
}","test_humaneval <- function() {
    candidate <- prime_fib
    stopifnot(isTRUE(all.equal(candidate(1), 2)))
    stopifnot(isTRUE(all.equal(candidate(2), 3)))
    stopifnot(isTRUE(all.equal(candidate(3), 5)))
    stopifnot(isTRUE(all.equal(candidate(4), 13)))
    stopifnot(isTRUE(all.equal(candidate(5), 89)))
    stopifnot(isTRUE(all.equal(candidate(6), 233)))
    stopifnot(isTRUE(all.equal(candidate(7), 1597)))
    stopifnot(isTRUE(all.equal(candidate(8), 28657)))
    stopifnot(isTRUE(all.equal(candidate(9), 514229)))
    stopifnot(isTRUE(all.equal(candidate(10), 433494437)))
}
test_humaneval()"
HumanEval_40,yue_Hant,r,"其他情況下,FALSE.如果列表中有三个不同的元素,则返回TRUEtriples_sum_to_zero 需要整數列表來做輸入.# >>> triples_sum_to_zero(c(1, 3, 5, 0))
# FALSE
# >>> triples_sum_to_zero(c(1, 3, -2, 1))
# TRUE
# >>> triples_sum_to_zero(c(1, 2, 3, 7))
# FALSE
# >>> triples_sum_to_zero(c(2, 4, -5, 3, 9, 7))
# TRUE
# >>> triples_sum_to_zero(c(1))
# FALSE
triples_sum_to_zero <- function(l) {","triples_sum_to_zero <- function(l) {
  n <- length(l)
  if (n < 3) {
    return(FALSE)
  }
  for (i in 1:(n - 2)) {
    for (j in (i + 1):(n - 1)) {
      for (k in (j + 1):n) {
        if (l[i] + l[j] + l[k] == 0) {
          return(TRUE)
        }
      }
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- triples_sum_to_zero
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, 0)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, -1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, -2, 1)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 5, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, -5, 3, 9, 7)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, -100)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(100, 3, 5, -100)), FALSE)))
}
test_humaneval()"
HumanEval_41,yue_Hant,r,"呢個函數會輸入呢啲碰撞嘅數量.佢哋好似未撞過咁直立但係呢啲車好強大 堅固無阻 所以佢哋會繼續行路當一輛車從左往右移動時 撞到一輛從右往左移動的車兩輛車嘅速度都一樣. 兩個車嘅相撞,就係佢地碰撞.兩組車開始時 距地好遠n 部車由左行到右行 同時,另外一組車想像一下一個完美直線 路徑無限長car_race_collision <- function(n) {","car_race_collision <- function(n) {
  # Each car moving left to right will eventually collide with each car moving right to left
  return(n)
}","test_humaneval <- function() {
    candidate <- car_race_collision
    stopifnot(isTRUE(all.equal(candidate(2), 4)))
    stopifnot(isTRUE(all.equal(candidate(3), 9)))
    stopifnot(isTRUE(all.equal(candidate(4), 16)))
    stopifnot(isTRUE(all.equal(candidate(8), 64)))
    stopifnot(isTRUE(all.equal(candidate(10), 100)))
}
test_humaneval()"
HumanEval_42,yue_Hant,r,"返回嘅單位列表嘅元素加上1.# >>> incr_list(c(1, 2, 3))
# c(2, 3, 4)
# >>> incr_list(c(5, 3, 5, 2, 3, 3, 9, 0, 123))
# c(6, 4, 6, 3, 4, 4, 10, 1, 124)
incr_list <- function(l) {","incr_list <- function(l) {
  return(l + 1)
}","test_humaneval <- function() {
    candidate <- incr_list
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), c(4, 3, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 2, 5, 2, 3, 3, 9, 0, 123)), c(6, 3, 6, 3, 4, 4, 10, 1, 124))))
}
test_humaneval()"
HumanEval_43,yue_Hant,r,"其他情況下,FALSE.如果列表中有两个不同的元素是 pairs_sum_to_zero 列出一個整數列表作為輸入.# >>> pairs_sum_to_zero(c(1, 3, 5, 0))
# FALSE
# >>> pairs_sum_to_zero(c(1, 3, -2, 1))
# FALSE
# >>> pairs_sum_to_zero(c(1, 2, 3, 7))
# FALSE
# >>> pairs_sum_to_zero(c(2, 4, -5, 3, 5, 7))
# TRUE
# >>> pairs_sum_to_zero(c(1))
# FALSE
pairs_sum_to_zero <- function(l) {","pairs_sum_to_zero <- function(l) {
  n <- length(l)
  if (n < 2) return(FALSE)
  
  for (i in 1:(n-1)) {
    for (j in (i+1):n) {
      if (l[i] + l[j] == 0) {
        return(TRUE)
      }
    }
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- pairs_sum_to_zero
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 5, 0)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, -2, 1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, -5, 3, 5, 7)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 3, 2, 30)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 3, 2, 31)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 4, 2, 30)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 9, -1, 4, 2, 31)), FALSE)))
}
test_humaneval()"
HumanEval_44,yue_Hant,r,"基數小於10轉換之後會返回字符串表示.將輸入數字x的數值底數改為底數.# >>> change_base(8, 3)
# '22'
# >>> change_base(8, 2)
# '1000'
# >>> change_base(7, 2)
# '111'
change_base <- function(x, base) {","change_base <- function(x, base) {
  if (x == 0) return('0')
  result <- ''
  while (x > 0) {
    remainder <- x %% base
    result <- paste0(remainder, result)
    x <- x %/% base
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- change_base
    stopifnot(isTRUE(all.equal(candidate(8, 3), '22')))
    stopifnot(isTRUE(all.equal(candidate(9, 3), '100')))
    stopifnot(isTRUE(all.equal(candidate(234, 2), '11101010')))
    stopifnot(isTRUE(all.equal(candidate(16, 2), '10000')))
    stopifnot(isTRUE(all.equal(candidate(8, 2), '1000')))
    stopifnot(isTRUE(all.equal(candidate(7, 2), '111')))
    stopifnot(isTRUE(all.equal(candidate(2, 3), '2')))
    stopifnot(isTRUE(all.equal(candidate(3, 4), '3')))
    stopifnot(isTRUE(all.equal(candidate(4, 5), '4')))
    stopifnot(isTRUE(all.equal(candidate(5, 6), '5')))
    stopifnot(isTRUE(all.equal(candidate(6, 7), '6')))
    stopifnot(isTRUE(all.equal(candidate(7, 8), '7')))
}
test_humaneval()"
HumanEval_45,yue_Hant,r,"给定边长和高回归面积的三角形.# >>> triangle_area(5, 3)
# 7.5
triangle_area <- function(a, h) {","triangle_area <- function(a, h) {
  return(0.5 * a * h)
}","test_humaneval <- function() {
    candidate <- triangle_area
    stopifnot(isTRUE(all.equal(candidate(5, 3), 7.5)))
    stopifnot(isTRUE(all.equal(candidate(2, 2), 2.0)))
    stopifnot(isTRUE(all.equal(candidate(10, 8), 40.0)))
}
test_humaneval()"
HumanEval_46,yue_Hant,r,"請寫一個函數,有效計算 fib4數列的第 n 元素.不要使用復習.4n) -> 4n-1) + 4n-2) + 4n-3) + 4n-4).fib4(3) -> 0 fib4(2) -> 2 fib4(1) -> 0 fib4(0) -> 0 Fib4 序列嘅數字類似於 Fibbonacci 序列嘅數字序列,其定義係咁:# >>> fib4(5)
# 4
# >>> fib4(6)
# 8
# >>> fib4(7)
# 14
fib4 <- function(n) {","fib4 <- function(n) {
  if (n == 0) return(0)
  if (n == 1) return(0)
  if (n == 2) return(2)
  if (n == 3) return(0)
  
  fib_seq <- c(0, 0, 2, 0) # Initialize with base cases
  for (i in 4:n) {
    fib_seq[i] <- fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]
  }
  return(fib_seq[n])
}","test_humaneval <- function() {
    candidate <- fib4
    stopifnot(isTRUE(all.equal(candidate(5), 4)))
    stopifnot(isTRUE(all.equal(candidate(8), 28)))
    stopifnot(isTRUE(all.equal(candidate(10), 104)))
    stopifnot(isTRUE(all.equal(candidate(12), 386)))
}
test_humaneval()"
HumanEval_47,yue_Hant,r,"返回列表中元素的中位数# >>> median(c(3, 1, 2, 4, 5))
# 3
# >>> median(c(-10, 4, 6, 1000, 10, 20))
# 15.0
median <- function(l) {","median <- function(l) {
  return(median(l))
}","test_humaneval <- function() {
    candidate <- median
    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 2, 4, 5)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(-10, 4, 6, 1000, 10, 20)), 8.0)))
    stopifnot(isTRUE(all.equal(candidate(c(5)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 5)), 5.5)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 1, 3, 9, 9, 2, 7)), 7)))
}
test_humaneval()"
HumanEval_48,yue_Hant,r,"檢查一個字符串是否為平行符號# >>> is_palindrome('')
# TRUE
# >>> is_palindrome('aba')
# TRUE
# >>> is_palindrome('aaaaa')
# TRUE
# >>> is_palindrome('zbcd')
# FALSE
is_palindrome <- function(text) {","is_palindrome <- function(text) {
  return(text == paste(rev(unlist(strsplit(text, NULL))), collapse = """"))
}","test_humaneval <- function() {
    candidate <- is_palindrome
    stopifnot(isTRUE(all.equal(candidate(''), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('aba'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('aaaaa'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('zbcd'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('xywyx'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('xywyz'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('xywzx'), FALSE)))
}
test_humaneval()"
HumanEval_49,yue_Hant,r,"返回2^n模块p (请注意数字).# >>> modp(3, 5)
# 3
# >>> modp(1101, 101)
# 2
# >>> modp(0, 101)
# 1
# >>> modp(3, 11)
# 8
# >>> modp(100, 101)
# 1
modp <- function(n, p) {","modp <- function(n, p) {
  result <- 1
  base <- 2
  
  while (n > 0) {
    if (n %% 2 == 1) {
      result <- (result * base) %% p
    }
    base <- (base * base) %% p
    n <- n %/% 2
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- modp
    stopifnot(isTRUE(all.equal(candidate(3, 5), 3)))
    stopifnot(isTRUE(all.equal(candidate(1101, 101), 2)))
    stopifnot(isTRUE(all.equal(candidate(0, 101), 1)))
    stopifnot(isTRUE(all.equal(candidate(3, 11), 8)))
    stopifnot(isTRUE(all.equal(candidate(100, 101), 1)))
    stopifnot(isTRUE(all.equal(candidate(30, 5), 4)))
    stopifnot(isTRUE(all.equal(candidate(31, 5), 3)))
}
test_humaneval()"
HumanEval_51,yue_Hant,r,"remove_vowels係一個函數,佢取 string 然後返回無 vowels 嘅 string.# >>> remove_vowels('')
# ''
# >>> remove_vowels('abcdef')
# 'bcdf'
# >>> remove_vowels('aaaaa')
# ''
# >>> remove_vowels('aaBAA')
# 'B'
# >>> remove_vowels('zbcd')
# 'zbcd'
remove_vowels <- function(text) {","remove_vowels <- function(text) {
  gsub(""[aeiouAEIOU]"", """", text)
}","test_humaneval <- function() {
    candidate <- remove_vowels
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')))
    stopifnot(isTRUE(all.equal(candidate('fedcba'), 'fdcb')))
    stopifnot(isTRUE(all.equal(candidate('eeeee'), '')))
    stopifnot(isTRUE(all.equal(candidate('acBAA'), 'cB')))
    stopifnot(isTRUE(all.equal(candidate('EcBOO'), 'cB')))
    stopifnot(isTRUE(all.equal(candidate('ybcd'), 'ybcd')))
}
test_humaneval()"
HumanEval_52,yue_Hant,r,"如果列表 l 中所有数都低于值 t,则返回 TRUE.# >>> below_threshold(c(1, 2, 4, 10), 100)
# TRUE
# >>> below_threshold(c(1, 20, 4, 10), 5)
# FALSE
below_threshold <- function(l, t) {","below_threshold <- function(l, t) {
  return(all(l < t))
}","test_humaneval <- function() {
    candidate <- below_threshold
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 10), 100), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 21), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10), 22), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 8, 4, 10), 11), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 8, 4, 10), 10), FALSE)))
}
test_humaneval()"
HumanEval_53,yue_Hant,r,"總之,我們加上兩個數字,x和y# >>> add(2, 3)
# 5
# >>> add(5, 7)
# 12
add <- function(x, y) {","add <- function(x, y) {
  return(x + y)
}","test_humaneval <- function() {
    candidate <- add
    stopifnot(isTRUE(all.equal(candidate(0, 1), 1)))
    stopifnot(isTRUE(all.equal(candidate(1, 0), 1)))
    stopifnot(isTRUE(all.equal(candidate(2, 3), 5)))
    stopifnot(isTRUE(all.equal(candidate(5, 7), 12)))
    stopifnot(isTRUE(all.equal(candidate(7, 5), 12)))
}
test_humaneval()"
HumanEval_54,yue_Hant,r,"檢查一下兩個詞是否有相同嘅字符.# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
# TRUE
# >>> same_chars('abcd', 'dddddddabc')
# TRUE
# >>> same_chars('dddddddabc', 'abcd')
# TRUE
# >>> same_chars('eabcd', 'dddddddabc')
# FALSE
# >>> same_chars('abcd', 'dddddddabce')
# FALSE
# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
# FALSE
same_chars <- function(s0, s1) {","same_chars <- function(s0, s1) {
  return(identical(sort(unique(unlist(strsplit(s0, """")))), sort(unique(unlist(strsplit(s1, """"))))))
}","test_humaneval <- function() {
    candidate <- same_chars
    stopifnot(isTRUE(all.equal(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('abcd', 'dddddddabc'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('dddddddabc', 'abcd'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('eabcd', 'dddddddabc'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('abcd', 'dddddddabcf'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('aabb', 'aaccc'), FALSE)))
}
test_humaneval()"
HumanEval_55,yue_Hant,r,"返回第 n 个斐波那契数.# >>> fib(10)
# 55
# >>> fib(1)
# 1
# >>> fib(8)
# 21
fib <- function(n) {","fib <- function(n) {
  if (n <= 1) {
    return(n)
  }
  a <- 0
  b <- 1
  for (i in 2:n) {
    temp <- b
    b <- a + b
    a <- temp
  }
  return(b)
}","test_humaneval <- function() {
    candidate <- fib
    stopifnot(isTRUE(all.equal(candidate(10), 55)))
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
    stopifnot(isTRUE(all.equal(candidate(8), 21)))
    stopifnot(isTRUE(all.equal(candidate(11), 89)))
    stopifnot(isTRUE(all.equal(candidate(12), 144)))
}
test_humaneval()"
HumanEval_56,yue_Hant,r,"return TRUE 如果每個開關括號都有相應的閉關括號.括号是个字符串,它包含了""<""和"">"".# >>> correct_bracketing('<')
# FALSE
# >>> correct_bracketing('<>')
# TRUE
# >>> correct_bracketing('<<><>>')
# TRUE
# >>> correct_bracketing('><<>')
# FALSE
correct_bracketing <- function(brackets) {","correct_bracketing <- function(brackets) {
  count <- 0
  for (char in strsplit(brackets, NULL)[[1]]) {
    if (char == ""<"") {
      count <- count + 1
    } else if (char == "">"") {
      count <- count - 1
    }
    if (count < 0) {
      return(FALSE)
    }
  }
  return(count == 0)
}","test_humaneval <- function() {
    candidate <- correct_bracketing
    stopifnot(isTRUE(all.equal(candidate('<>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<<><>>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<<><><>><>><<><><<>>>'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('<<<><>>>>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('><<>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<<<<'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<<>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>><<>'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('<><><<><>><>>><>'), FALSE)))
}
test_humaneval()"
HumanEval_57,yue_Hant,r,"如果列表元素均增大或减少,则返回TRUE.# >>> monotonic(c(1, 2, 4, 20))
# TRUE
# >>> monotonic(c(1, 20, 4, 10))
# FALSE
# >>> monotonic(c(4, 1, 0, -10))
# TRUE
monotonic <- function(l) {","monotonic <- function(l) {
  is_increasing <- all(diff(l) >= 0)
  is_decreasing <- all(diff(l) <= 0)
  return(is_increasing || is_decreasing)
}","test_humaneval <- function() {
    candidate <- monotonic
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 10)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 20)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 20, 4, 10)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 0, -10)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 1, 0)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 5, 60)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 60)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 9, 9, 9)), TRUE)))
}
test_humaneval()"
HumanEval_58,yue_Hant,r,"返回兩個列表中排序的唯一的共同元素.# >>> common(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))
# c(1, 5, 653)
# >>> common(c(5, 3, 2, 8), c(3, 2))
# c(2, 3)
common <- function(l1, l2) {","common <- function(l1, l2) {
  common_elements <- intersect(l1, l2)
  sorted_unique_common <- sort(unique(common_elements))
  return(sorted_unique_common)
}","test_humaneval <- function() {
    candidate <- common
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 2, 8), c()), c())))
}
test_humaneval()"
HumanEval_59,yue_Hant,r,"返回n的最大素因数.假设n > 1且不是素因数.# >>> largest_prime_factor(13195)
# 29
# >>> largest_prime_factor(2048)
# 2
largest_prime_factor <- function(n) {","largest_prime_factor <- function(n) {
  # Initialize the largest prime factor
  largest_prime <- -1
  
  # Remove factors of 2
  while (n %% 2 == 0) {
    largest_prime <- 2
    n <- n / 2
  }
  
  # Try odd factors from 3 upwards
  factor <- 3
  while (factor * factor <= n) {
    while (n %% factor == 0) {
      largest_prime <- factor
      n <- n / factor
    }
    factor <- factor + 2
  }
  
  # If n is a prime number greater than 2
  if (n > 2) {
    largest_prime <- n
  }
  
  # Return the largest prime factor found
  return(largest_prime)
}","test_humaneval <- function() {
    candidate <- largest_prime_factor
    stopifnot(isTRUE(all.equal(candidate(15), 5)))
    stopifnot(isTRUE(all.equal(candidate(27), 3)))
    stopifnot(isTRUE(all.equal(candidate(63), 7)))
    stopifnot(isTRUE(all.equal(candidate(330), 11)))
    stopifnot(isTRUE(all.equal(candidate(13195), 29)))
}
test_humaneval()"
HumanEval_60,yue_Hant,r,"sum_to_n 係一個函數,可以從 1 到 n 總結數字.# >>> sum_to_n(30)
# 465
# >>> sum_to_n(100)
# 5050
# >>> sum_to_n(5)
# 15
# >>> sum_to_n(10)
# 55
# >>> sum_to_n(1)
# 1
sum_to_n <- function(n) {","sum_to_n <- function(n) {
  return(sum(1:n))
}","test_humaneval <- function() {
    candidate <- sum_to_n
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
    stopifnot(isTRUE(all.equal(candidate(6), 21)))
    stopifnot(isTRUE(all.equal(candidate(11), 66)))
    stopifnot(isTRUE(all.equal(candidate(30), 465)))
    stopifnot(isTRUE(all.equal(candidate(100), 5050)))
}
test_humaneval()"
HumanEval_61,yue_Hant,r,"return TRUE 如果每個開關括號都有相應的閉關括號.括号是个字符串,它包含"" (),""和"" ().# >>> correct_bracketing('(')
# FALSE
# >>> correct_bracketing('()')
# TRUE
# >>> correct_bracketing('(()())')
# TRUE
# >>> correct_bracketing(')(()')
# FALSE
correct_bracketing <- function(brackets) {","correct_bracketing <- function(brackets) {
  balance <- 0
  for (char in strsplit(brackets, NULL)[[1]]) {
    if (char == ""("") {
      balance <- balance + 1
    } else if (char == "")"") {
      balance <- balance - 1
    }
    if (balance < 0) {
      return(FALSE)
    }
  }
  return(balance == 0)
}","test_humaneval <- function() {
    candidate <- correct_bracketing
    stopifnot(isTRUE(all.equal(candidate('()'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('(()())'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('()()(()())()'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('()()((()()())())(()()(()))'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('((()())))'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(')(()'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('('), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('(((('), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(')'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('(()'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('()()(()())())(()'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('()()(()())()))()'), FALSE)))
}
test_humaneval()"
HumanEval_62,yue_Hant,r,"返回这个多项式的同一个形式的导数.xs[0] + xs[1] * x + xs[2] * x^2 + .... xs 代表多項式的系數.# >>> derivative(c(3, 1, 2, 4, 5))
# c(1, 4, 12, 20)
# >>> derivative(c(1, 2, 3))
# c(2, 6)
derivative <- function(xs) {","derivative <- function(xs) {
  n <- length(xs)
  if (n <= 1) return(numeric(0))  # Derivative of a constant is zero
  
  deriv <- numeric(n - 1)
  for (i in 2:n) {
    deriv[i - 1] <- xs[i] * (i - 1)
  }
  return(deriv)
}","test_humaneval <- function() {
    candidate <- derivative
    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 2, 4, 5)), c(1, 4, 12, 20))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(2, 6))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), c(2, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1, 0, 4)), c(2, 2, 0, 16))))
    stopifnot(isTRUE(all.equal(candidate(c(1)), c())))
}
test_humaneval()"
HumanEval_63,yue_Hant,r,"請寫一個函數,有效計算出 fibfib數列的第 n 元素.粉 (n) == 粉 (n-1) + 粉 (n-2) + 粉 (n-3). ()  ()  ()      FibFib數列係類似 Fibbonacci 序列嘅,被定義為:# >>> fibfib(1)
# 0
# >>> fibfib(5)
# 4
# >>> fibfib(8)
# 24
fibfib <- function(n) {","fibfib <- function(n) {
  # Base cases
  if (n == 0) return(0)
  if (n == 1) return(0)
  if (n == 2) return(1)

  # Initialize the first three values
  fibfib_values <- c(0, 0, 1)
  
  # Compute fibfib for the rest using iteration
  for (i in 3:n) {
    fibfib_values[i + 1] <- fibfib_values[i] + fibfib_values[i - 1] + fibfib_values[i - 2]
  }
  # Return the nth value
  return(fibfib_values[n + 1])
}","test_humaneval <- function() {
    candidate <- fibfib
    stopifnot(isTRUE(all.equal(candidate(2), 1)))
    stopifnot(isTRUE(all.equal(candidate(1), 0)))
    stopifnot(isTRUE(all.equal(candidate(5), 4)))
    stopifnot(isTRUE(all.equal(candidate(8), 24)))
    stopifnot(isTRUE(all.equal(candidate(10), 81)))
    stopifnot(isTRUE(all.equal(candidate(12), 274)))
    stopifnot(isTRUE(all.equal(candidate(14), 927)))
}
test_humaneval()"
HumanEval_64,yue_Hant,r,"譬如..只有當個詞嘅最後出現時,才會出現母音喺呢度嘅母音係""a"", ""e"", ""i"", ""o"", ""u"". ""y""都係""a""輸入一個字,並返回字串中母音嘅數量.寫一個函數,叫做 vowels_count,用一條代表# >>> vowels_count('abcde')
# 2
# >>> vowels_count('ACEDY')
# 3
vowels_count <- function(s) {","vowels_count <- function(s) {
  s <- tolower(s)
  n <- nchar(s)
  count <- sum(unlist(strsplit(s, NULL)) %in% c('a', 'e', 'i', 'o', 'u'))
  if (n > 0 && substr(s, n, n) == 'y') {
    count <- count + 1
  }
  return(count)
}","test_humaneval <- function() {
    candidate <- vowels_count
    stopifnot(isTRUE(all.equal(candidate('abcde'), 2)))
    stopifnot(isTRUE(all.equal(candidate('Alone'), 3)))
    stopifnot(isTRUE(all.equal(candidate('key'), 2)))
    stopifnot(isTRUE(all.equal(candidate('bye'), 1)))
    stopifnot(isTRUE(all.equal(candidate('keY'), 2)))
    stopifnot(isTRUE(all.equal(candidate('bYe'), 1)))
    stopifnot(isTRUE(all.equal(candidate('ACEDY'), 3)))
}
test_humaneval()"
HumanEval_65,yue_Hant,r,"如果shift > 数字数,返回数字反转.返回嘅結果會係一個字符串.轉換整數 x 轉換成一個圓,# >>> circular_shift(12, 1)
# '21'
# >>> circular_shift(12, 2)
# '12'
circular_shift <- function(x, shift) {","circular_shift <- function(x, shift) {
  digits <- as.character(x)
  n <- nchar(digits)
  
  if (shift > n) {
    return(paste0(rev(unlist(strsplit(digits, """"))), collapse = """"))
  }
  
  shift <- shift %% n
  if (shift == 0) {
    return(digits)
  }
  
  right_part <- substr(digits, n - shift + 1, n)
  left_part <- substr(digits, 1, n - shift)
  result <- paste0(right_part, left_part)
  
  return(result)
}","test_humaneval <- function() {
    candidate <- circular_shift
    stopifnot(isTRUE(all.equal(candidate(100, 2), '001')))
    stopifnot(isTRUE(all.equal(candidate(12, 2), '12')))
    stopifnot(isTRUE(all.equal(candidate(97, 8), '79')))
    stopifnot(isTRUE(all.equal(candidate(12, 1), '21')))
    stopifnot(isTRUE(all.equal(candidate(11, 101), '11')))
}
test_humaneval()"
HumanEval_66,yue_Hant,r,"譬如:ASCII 代碼寫一個函數,當字符串係輸入嘅,只會返回最上面嘅字符""任務# >>> digitSum('')
# 0
# >>> digitSum('abAB')
# 131
# >>> digitSum('abcCd')
# 67
# >>> digitSum('helloE')
# 69
# >>> digitSum('woArBld')
# 131
# >>> digitSum('aAaaaXa')
# 153
digitSum <- function(s) {","digitSum <- function(s) {
  sum(sapply(unlist(strsplit(s, """")), function(x) {
    if (grepl(""[A-Z]"", x)) {
      return(as.integer(charToRaw(x)))
    } else {
      return(0)
    }
  }))
}","test_humaneval <- function() {
    candidate <- digitSum
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('abAB'), 131)))
    stopifnot(isTRUE(all.equal(candidate('abcCd'), 67)))
    stopifnot(isTRUE(all.equal(candidate('helloE'), 69)))
    stopifnot(isTRUE(all.equal(candidate('woArBld'), 131)))
    stopifnot(isTRUE(all.equal(candidate('aAaaaXa'), 153)))
    stopifnot(isTRUE(all.equal(candidate(' How are yOu?'), 151)))
    stopifnot(isTRUE(all.equal(candidate('You arE Very Smart'), 327)))
}
test_humaneval()"
HumanEval_67,yue_Hant,r,"關於""examble""嘅:喺裡面,返回果果喺裡面嘅數字.子同果,同埋整數,代表果實嘅總數.果,子,果果. 如果给出代表 个数的字符串,果實可以放入一個果裡面喺呢個任務裏邊 你會得到一條代表果同子嘅字符串# >>> fruit_distribution('5 apples and 6 oranges', 19)
# 8
# >>> fruit_distribution('0 apples and 1 oranges', 3)
# 2
# >>> fruit_distribution('2 apples and 3 oranges', 100)
# 95
# >>> fruit_distribution('100 apples and 1 oranges', 120)
# 19
fruit_distribution <- function(s, n) {","fruit_distribution <- function(s, n) {
  # Extract numbers using regular expressions
  matches <- regmatches(s, gregexpr(""\\d+"", s))
  # Convert extracted number strings to integers
  fruits_count <- as.integer(unlist(matches))
  # Total fruits described in the string
  total_apples_oranges <- sum(fruits_count)
  # Calculate mangoes
  mangoes <- n - total_apples_oranges
  return(mangoes)
}","test_humaneval <- function() {
    candidate <- fruit_distribution
    stopifnot(isTRUE(all.equal(candidate('5 apples and 6 oranges', 19), 8)))
    stopifnot(isTRUE(all.equal(candidate('5 apples and 6 oranges', 21), 10)))
    stopifnot(isTRUE(all.equal(candidate('0 apples and 1 oranges', 3), 2)))
    stopifnot(isTRUE(all.equal(candidate('1 apples and 0 oranges', 3), 2)))
    stopifnot(isTRUE(all.equal(candidate('2 apples and 3 oranges', 100), 95)))
    stopifnot(isTRUE(all.equal(candidate('2 apples and 3 oranges', 5), 0)))
    stopifnot(isTRUE(all.equal(candidate('1 apples and 100 oranges', 120), 19)))
}
test_humaneval()"
HumanEval_68,yue_Hant,r,"舉例一:如果無偶數值或者已知向量是空的,返回 [].摘取的节点应该返回一个列表, [smallest_value,它的索引], 如果多個節點都有同一個最小偶數值, 返回最小索引的節點.摘取嘅节点应该是最小偶数值的节点.你嘅任務就係搵返其中一個節點,然後將佢送返畀你根據一個向量代表樹的分支, 代表一個樹有非負整數節點的向量# >>> pluck(c(4, 2, 3))
# c(2, 1)
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 2:
# >>> pluck(c(1, 2, 3))
# c(2, 1)
# Explanation: 2 has the smallest even value, and 2 has the smallest index.
# Example 3:
# >>> pluck(c())
# c()
# Example 4:
# >>> pluck(c(5, 0, 3, 0, 4, 2))
# c(0, 1)
# Explanation: 0 is the smallest value, but  there are two zeros,
#              so we will choose the first zero, which has the smallest index.
# Constraints:
#     * 1 <= nodes.length <= 10000
#     * 0 <= node.value
pluck <- function(arr) {","pluck <- function(arr) {
  # Find indices for even numbers in the array
  even_indices <- which(arr %% 2 == 0)
  
  # If no even numbers are found, return an empty list
  if (length(even_indices) == 0) {
    return(c())
  }
  
  # Extract even numbers
  even_values <- arr[even_indices]
  
  # Find the smallest even value
  min_even_value <- min(even_values)
  
  # Find the index of the first occurrence of the smallest even value
  min_index <- even_indices[which.min(even_values)]
  
  # Return the smallest even value and its index (0-based index)
  return(c(min_even_value, min_index - 1))
}","test_humaneval <- function() {
    candidate <- pluck
    stopifnot(isTRUE(all.equal(candidate(c(4, 2, 3)), c(2, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), c(2, 1))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(5, 0, 3, 0, 4, 2)), c(0, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 0, 5, 3)), c(0, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 4, 8, 4, 8)), c(4, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(7, 6, 7, 1)), c(6, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(7, 9, 7, 1)), c())))
}
test_humaneval()"
HumanEval_69,yue_Hant,r,"譬如:如果無任何值,返回 -1.一個整數嘅頻率,就係佢喺列表入面出現嘅次數.零,同埋佢嘅頻率大於,或者等於整數本身嘅值.你得到一個非空嘅正整數列表.返回最大的整數大於# >>> search(c(4, 1, 2, 2, 3, 1))
# 2
# >>> search(c(1, 2, 2, 3, 3, 3, 4, 4, 4))
# 3
# >>> search(c(5, 5, 4, 4, 4))
# -1
search <- function(lst) {","search <- function(lst) {
  # Calculate the frequency table
  freq_table <- table(lst)
  
  # Convert to a data frame for easier processing
  freq_df <- as.data.frame(freq_table)
  
  # Rename columns for convenience
  names(freq_df) <- c(""value"", ""frequency"")
  
  # Filter the values where the frequency is greater than or equal to the value itself
  valid_values <- freq_df[freq_df$value <= freq_df$frequency, ""value""]
  
  # If no valid values exist, return -1
  if (length(valid_values) == 0) {
    return(-1)
  }
  
  # Otherwise, return the greatest valid value
  return(max(valid_values))
}","test_humaneval <- function() {
    candidate <- search
    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 5, 5, 1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 1, 4, 1, 4, 4)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 3)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 8, 8, 8, 8, 8, 8)), 8)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 3, 3, 2, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 8, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 3, 6, 5, 6, 4)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 9, 10, 1, 3)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(10)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 10, 10, 9, 2)), -1)))
}
test_humaneval()"
HumanEval_70,yue_Hant,r,"譬如:剩下的整数中最大的数,然后是最小的数,等等.奇怪的排序,是从最小值开始的,给出整数列表,返回奇序列表.# >>> strange_sort_list(c(1, 2, 3, 4))
# c(1, 4, 2, 3)
# >>> strange_sort_list(c(5, 5, 5, 5))
# c(5, 5, 5, 5)
# >>> strange_sort_list(c())
# c()
strange_sort_list <- function(lst) {","strange_sort_list <- function(lst) {
  result <- c()
  while (length(lst) > 0) {
    # Find and append the minimum of the list
    min_val <- min(lst)
    result <- c(result, min_val)
    lst <- lst[lst != min_val]
    
    # Check if list is not empty before finding maximum
    if (length(lst) > 0) {
      # Find and append the maximum of the list
      max_val <- max(lst)
      result <- c(result, max_val)
      lst <- lst[lst != max_val]
    }
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- strange_sort_list
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), c(1, 4, 2, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 7, 8, 9)), c(5, 9, 6, 8, 7))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), c(1, 5, 2, 4, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 6, 7, 8, 9, 1)), c(1, 9, 5, 8, 6, 7))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 5, 5, 5)), c(5, 5, 5, 5))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7, 8)), c(1, 8, 2, 7, 3, 6, 4, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(0, 2, 2, 2, 5, 5, -5, -5)), c(-5, 5, -5, 5, 0, 2, 2, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(111111)), c(111111))))
}
test_humaneval()"
HumanEval_71,yue_Hant,r,"譬如..而唔係第三個面當任何兩邊的總和都大過三邊,否則返回-1如果三邊係合法的三角形,那就將三角形成 2 十進位给出三角形的三边长.返回 面积的# >>> triangle_area(3, 4, 5)
# 6.0
# >>> triangle_area(1, 2, 10)
# -1
triangle_area <- function(a, b, c) {","triangle_area <- function(a, b, c) {
  if (a + b > c && a + c > b && b + c > a) {
    # Using Heron's formula
    s <- (a + b + c) / 2
    area <- sqrt(s * (s - a) * (s - b) * (s - c))
    return(round(area, 2))
  } else {
    return(-1)
  }
}","test_humaneval <- function() {
    candidate <- triangle_area
    stopifnot(isTRUE(all.equal(candidate(3, 4, 5), 6.0)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 10), -1)))
    stopifnot(isTRUE(all.equal(candidate(4, 8, 5), 8.18)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 2), 1.73)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 3), -1)))
    stopifnot(isTRUE(all.equal(candidate(10, 5, 7), 16.25)))
    stopifnot(isTRUE(all.equal(candidate(2, 6, 3), -1)))
    stopifnot(isTRUE(all.equal(candidate(1, 1, 1), 0.43)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 10), -1)))
}
test_humaneval()"
HumanEval_72,yue_Hant,r,"譬如..如果物體q平衡 (呢個係一列平行列表) 而物體總和小於或等於最大可能嘅重量w,物體q就會飛寫一個函數,如果物件q會飛,則返回TRUE,否則返回FALSE.# >>> will_it_fly(c(1, 2), 5)
# FALSE
# # 1+2 is less than the maximum possible weight, but it's unbalanced.
# >>> will_it_fly(c(3, 2, 3), 1)
# FALSE
# # it's balanced, but 3+2+3 is more than the maximum possible weight.
# >>> will_it_fly(c(3, 2, 3), 9)
# TRUE
# # 3+2+3 is less than the maximum possible weight, and it's balanced.
# >>> will_it_fly(c(3), 5)
# TRUE
# # 3 is less than the maximum possible weight, and it's balanced.
will_it_fly <- function(q, w) {","will_it_fly <- function(q, w) {
  is_palindromic <- function(lst) {
    return(all(lst == rev(lst)))
  }
  
  is_balanced <- is_palindromic(q)
  sum_elements <- sum(q)
  
  return(is_balanced && (sum_elements <= w))
}","test_humaneval <- function() {
    candidate <- will_it_fly
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3), 9), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), 5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(3), 5), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 3), 1), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3), 6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(5), 5), TRUE)))
}
test_humaneval()"
HumanEval_73,yue_Hant,r,"例如:兩者都可以用同一方式閱讀.你可以從一個元素轉換成另一種元素.要使矢量變成平行進數,需要改變.平行進數係一個向量,给定一个整数的向量arr, 求出最小元素数,# >>> smallest_change(c(1, 2, 3, 5, 4, 7, 9, 6))
# 4
# >>> smallest_change(c(1, 2, 3, 4, 3, 2, 2))
# 1
# >>> smallest_change(c(1, 2, 3, 2, 1))
# 0
smallest_change <- function(arr) {","smallest_change <- function(arr) {
  n <- length(arr)
  changes <- 0
  
  for (i in 1:(n %/% 2)) {
    if (arr[i] != arr[n - i + 1]) {
      changes <- changes + 1
    }
  }
  
  return(changes)
}","test_humaneval <- function() {
    candidate <- smallest_change
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 5, 4, 7, 9, 6)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 3, 2, 2)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 2)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 4, 2)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 2, 1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 1, 1, 3)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 1)))
}
test_humaneval()"
HumanEval_74,yue_Hant,r,"譬如話..如果兩個列表嘅字母數量相同,請返回第一個列表.單行列嘅所有字符串嘅總數 都少過其他單行列嘅總數.寫一個函數,它可以接受兩個字符串列表,並返回一個有 字符串的列表.# >>> total_match(c(), c())
# c()
# >>> total_match(c('hi', 'admin'), c('hI', 'Hi'))
# c('hI', 'Hi')
# >>> total_match(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project'))
# c('hi', 'admin')
# >>> total_match(c('hi', 'admin'), c('hI', 'hi', 'hi'))
# c('hI', 'hi', 'hi')
# >>> total_match(c('4'), c('1', '2', '3', '4', '5'))
# c('4')
total_match <- function(lst1, lst2) {","total_match <- function(lst1, lst2) {
  chars_count <- function(lst) {
    sum(nchar(lst))
  }
  
  count1 <- chars_count(lst1)
  count2 <- chars_count(lst2)
  
  if (count1 < count2) {
    return(lst1)
  } else if (count1 > count2) {
    return(lst2)
  } else {
    return(lst1)
  }
}","test_humaneval <- function() {
    candidate <- total_match
    stopifnot(isTRUE(all.equal(candidate(c(), c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hi', 'hi')), c('hi', 'hi'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project')), c('hi', 'admin'))))
    stopifnot(isTRUE(all.equal(candidate(c('4'), c('1', '2', '3', '4', '5')), c('4'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'Hi')), c('hI', 'Hi'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'hi', 'hi')), c('hI', 'hi', 'hi'))))
    stopifnot(isTRUE(all.equal(candidate(c('hi', 'admin'), c('hI', 'hi', 'hii')), c('hi', 'admin'))))
    stopifnot(isTRUE(all.equal(candidate(c(), c('this')), c())))
    stopifnot(isTRUE(all.equal(candidate(c('this'), c()), c())))
}
test_humaneval()"
HumanEval_75,yue_Hant,r,"譬如..知道 (a) 小於 100其他話,都係錯嘅寫一個函數,如果數字係 3 個素數嘅乘法,則函數會返回 true# >>> is_multiply_prime(30)
# TRUE
# 30 = 2 * 3 * 5
is_multiply_prime <- function(a) {","is_multiply_prime <- function(a) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n <= 3) return(TRUE)
    if (n %% 2 == 0 || n %% 3 == 0) return(FALSE)
    i <- 5
    while (i * i <= n) {
      if (n %% i == 0 || n %% (i + 2) == 0) return(FALSE)
      i <- i + 6
    }
    return(TRUE)
  }

  if (a >= 100) return(FALSE)
  
  primes <- c()
  for (i in 2:a) {
    if (is_prime(i)) {
      primes <- c(primes, i)
    }
  }
  
  for (i in 1:length(primes)) {
    for (j in i:length(primes)) {
      for (k in j:length(primes)) {
        if (primes[i] * primes[j] * primes[k] == a) {
          return(TRUE)
        }
      }
    }
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- is_multiply_prime
    stopifnot(isTRUE(all.equal(candidate(5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(30), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(8), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(10), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(125), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(105), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(126), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(729), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(891), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1001), TRUE)))
}
test_humaneval()"
HumanEval_76,yue_Hant,r,"例如:如果n**int=x,则x是n的简数乘法而其他情況下,則為 false.你需要寫一個函數,如果一個數字x是個簡單的函數,它就會返回 true# >>> is_simple_power(1, 4)
# TRUE
# >>> is_simple_power(2, 2)
# TRUE
# >>> is_simple_power(8, 2)
# TRUE
# >>> is_simple_power(3, 2)
# FALSE
# >>> is_simple_power(3, 1)
# FALSE
# >>> is_simple_power(5, 3)
# FALSE
is_simple_power <- function(x, n) {","is_simple_power <- function(x, n) {
  if (x == 1) return(TRUE)
  power <- 1
  while (power < x) {
    power <- power * n
    if (power == x) return(TRUE)
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- is_simple_power
    stopifnot(isTRUE(all.equal(candidate(16, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(143214, 16), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(4, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(9, 3), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(16, 4), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(24, 2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(128, 4), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(12, 6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1, 1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1, 12), TRUE)))
}
test_humaneval()"
HumanEval_77,yue_Hant,r,"譬如:注意:你可以假設輸入嘅訊息永遠都係正確嘅.如果这个数是某个整数的立方体.写一个函数,它取一个整数 a,返回 TRUE # >>> iscube(1)
# TRUE
# >>> iscube(2)
# FALSE
# >>> iscube(-1)
# TRUE
# >>> iscube(64)
# TRUE
# >>> iscube(0)
# TRUE
# >>> iscube(180)
# FALSE
iscube <- function(a) {","iscube <- function(a) {
  if (a == 0) return(TRUE)
  root <- round(abs(a)^(1/3))
  return(root^3 == abs(a))
}","test_humaneval <- function() {
    candidate <- iscube
    stopifnot(isTRUE(all.equal(candidate(1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(-1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(64), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(180), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1000), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(0), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1729), FALSE)))
}
test_humaneval()"
HumanEval_78,yue_Hant,r,"譬如:而符號A,B,C,D,E,F 都係大寫注意:你可以假設輸入嘅訊息係正確嘅 或者係空嘅字符串,B (=十進制11),D (=十進制13).所以你要找出以下数字中的一个: 2,3,5,7,素數係 2,3,5,7,11,13,17,...十六進制數字係 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F大於1而唔係兩個較小嘅自然數嘅乘法).數字係素數 (素數,或者素數,係自然數)一個十六進制數字嘅字符串,並計數十六進制數字嘅數字.你被要求寫一個可以接收函數# >>> hex_key('AB')
# 1
# >>> hex_key('1077E')
# 2
# >>> hex_key('ABED1A33')
# 4
# >>> hex_key('123456789ABCDEF0')
# 6
# >>> hex_key('2020')
# 2
hex_key <- function(num) {","hex_key <- function(num) {
  # Define the set of prime hexadecimal digits
  prime_hex_digits <- c('2', '3', '5', '7', 'B', 'D')
  
  # Initialize a counter
  count <- 0
  
  # Convert the input string to a list of characters
  chars <- strsplit(num, NULL)[[1]]
  
  # Loop over each character in the list
  for (char in chars) {
    # Check if the character is in the list of prime hexadecimal digits
    if (char %in% prime_hex_digits) {
      # Increment the count
      count <- count + 1
    }
  }
  
  # Return the count
  return(count)
}","test_humaneval <- function() {
    candidate <- hex_key
    stopifnot(isTRUE(all.equal(candidate('AB'), 1)))
    stopifnot(isTRUE(all.equal(candidate('1077E'), 2)))
    stopifnot(isTRUE(all.equal(candidate('ABED1A33'), 4)))
    stopifnot(isTRUE(all.equal(candidate('2020'), 2)))
    stopifnot(isTRUE(all.equal(candidate('123456789ABCDEF0'), 6)))
    stopifnot(isTRUE(all.equal(candidate('112233445566778899AABBCCDDEEFF00'), 12)))
}
test_humaneval()"
HumanEval_79,yue_Hant,r,"譬如:哩啲文字組合起嚟係爲咗 幫助編輯喺字符串嘅開始同結尾,會多出一對""db""字符.每一個字符串嘅數字都係 ""0""或者""1"".函數應該返回一個字符串,每一個字符代表一個二進制字符你會得到一個數字,用小數點的形式, 你的任務是將它轉換成# >>> decimal_to_binary(15)
# 'db1111db'
# >>> decimal_to_binary(32)
# 'db100000db'
decimal_to_binary <- function(decimal) {","decimal_to_binary <- function(decimal) {
  binary_string <- as.character(intToBits(decimal))
  binary_clean <- paste0(rev(binary_string), collapse = """")
  binary_trimmed <- sub(""^0+"", """", binary_clean)
  return(paste0(""db"", binary_trimmed, ""db""))
}","test_humaneval <- function() {
    candidate <- decimal_to_binary
    stopifnot(isTRUE(all.equal(candidate(0), 'db0db')))
    stopifnot(isTRUE(all.equal(candidate(32), 'db100000db')))
    stopifnot(isTRUE(all.equal(candidate(103), 'db1100111db')))
    stopifnot(isTRUE(all.equal(candidate(15), 'db1111db')))
}
test_humaneval()"
HumanEval_80,yue_Hant,r,"例如:字符串嘅长度至少要係3個 而每3個字母係不同的話你嘅任務就係要確認個字串係咪正確你得到一個字符串 s.# >>> is_happy('a')
# FALSE
# >>> is_happy('aa')
# FALSE
# >>> is_happy('abcd')
# TRUE
# >>> is_happy('aabb')
# FALSE
# >>> is_happy('adb')
# TRUE
# >>> is_happy('xyy')
# FALSE
is_happy <- function(s) {","is_happy <- function(s) {
  n <- nchar(s)
  if (n < 3) {
    return(FALSE)
  }
  for (i in 1:(n - 2)) {
    if (length(unique(substring(s, i, i + 2))) != 3) {
      return(FALSE)
    }
  }
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- is_happy
    stopifnot(isTRUE(all.equal(candidate('a'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('aa'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('abcd'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('aabb'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('adb'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('xyy'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('iopaxpoi'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('iopaxioi'), FALSE)))
}
test_humaneval()"
HumanEval_81,yue_Hant,r,"譬如..0.0 E D- > 0.7 D > 1.0 D+ > 1.3 C- > 1.7°C> 2.0 C+ > 2.3 B- > 2.7 B > 3.0 B+ > 3.3 A- > 3.7 A 4.0 A+ 平均成績,學分一個可以用下表輸出字母等級清單嘅函數:佢畀咗你學生嘅平均分數 你就要寫落嚟唯一唧問題喺,佢唔記得有咩代號先系度寫分數嘅.老師一直喺度創造佢自己嘅評分編碼呢學期嘅最後一個禮拜,老師要評分# >>> grade_equation(c(4.0, 3, 1.7, 2, 3.5))
# c('A+', 'B', 'C-', 'C', 'A-')
numerical_letter_grade <- function(grades) {","numerical_letter_grade <- function(grades) {
  letter_grades <- sapply(grades, function(gpa) {
    if (gpa == 4.0) {
      ""A+""
    } else if (gpa > 3.7) {
      ""A""
    } else if (gpa > 3.3) {
      ""A-""
    } else if (gpa > 3.0) {
      ""B+""
    } else if (gpa > 2.7) {
      ""B""
    } else if (gpa > 2.3) {
      ""B-""
    } else if (gpa > 2.0) {
      ""C+""
    } else if (gpa > 1.7) {
      ""C""
    } else if (gpa > 1.3) {
      ""C-""
    } else if (gpa > 1.0) {
      ""D+""
    } else if (gpa > 0.7) {
      ""D""
    } else if (gpa > 0.0) {
      ""D-""
    } else {
      ""E""
    }
  })
  return(letter_grades)
}","test_humaneval <- function() {
    candidate <- numerical_letter_grade
    stopifnot(isTRUE(all.equal(candidate(c(4.0, 3, 1.7, 2, 3.5)), c('A+', 'B', 'C-', 'C', 'A-'))))
    stopifnot(isTRUE(all.equal(candidate(c(1.2)), c('D+'))))
    stopifnot(isTRUE(all.equal(candidate(c(0.5)), c('D-'))))
    stopifnot(isTRUE(all.equal(candidate(c(0.0)), c('E'))))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 0.3, 1.5, 2.8, 3.3)), c('D', 'D-', 'C-', 'B', 'B+'))))
    stopifnot(isTRUE(all.equal(candidate(c(0.0, 0.7)), c('E', 'D-'))))
}
test_humaneval()"
HumanEval_82,yue_Hant,r,"譬如話..length 是一個素數,否則則為 FALSE 寫一個函數,如果 string 代表 TRUE,則返回 TRUE# >>> prime_length('Hello')
# TRUE
# >>> prime_length('abcdcba')
# TRUE
# >>> prime_length('kittens')
# TRUE
# >>> prime_length('orange')
# FALSE
prime_length <- function(string) {","prime_length <- function(string) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n <= 3) return(TRUE)
    if (n %% 2 == 0 || n %% 3 == 0) return(FALSE)
    
    i <- 5
    while (i * i <= n) {
      if (n %% i == 0 || n %% (i + 2) == 0) return(FALSE)
      i <- i + 6
    }
    
    return(TRUE)
  }
  
  string_length <- nchar(string)
  return(is_prime(string_length))
}","test_humaneval <- function() {
    candidate <- prime_length
    stopifnot(isTRUE(all.equal(candidate('Hello'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('abcdcba'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('kittens'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('orange'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('wow'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('world'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('MadaM'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('Wow'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('HI'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('go'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('gogo'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('aaaaaaaaaaaaaaa'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('Madam'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('M'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('0'), FALSE)))
}
test_humaneval()"
HumanEval_83,yue_Hant,r,"整數嘅前數係由 1 開始, 整數嘅後數係由 1 結束给定一个正整数 n,返回 n 位数的数值starts_one_ends <- function(n) {","starts_one_ends <- function(n) {
  if (n == 1) {
    return(1)
  } else {
    return(9 * (10^(n-2)) * 2)
  }
}","test_humaneval <- function() {
    candidate <- starts_one_ends
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
    stopifnot(isTRUE(all.equal(candidate(2), 18)))
    stopifnot(isTRUE(all.equal(candidate(3), 180)))
    stopifnot(isTRUE(all.equal(candidate(4), 1800)))
    stopifnot(isTRUE(all.equal(candidate(5), 18000)))
}
test_humaneval()"
HumanEval_84,yue_Hant,r,"舉例给定一个正整数 N,返回它的数字的二进制总和.# >>> solve(1000)
# '1'
# >>> solve(150)
# '110'
# >>> solve(147)
# '1100'
# Variables:
#     @N integer
#          Constraints: 0 ≤ N ≤ 10000.
# Output:
#      a string of binary number
solve <- function(N) {","solve <- function(N) {
  # Sum the digits of the number
  digit_sum <- sum(as.numeric(unlist(strsplit(as.character(N), """"))))
  # Convert the sum to binary and return as a string
  return(as.character(as.binary(digit_sum)))
}

# Helper function to convert number to binary
as.binary <- function(number) {
  if (number == 0) return(""0"")
  binary <- """"
  while (number > 0) {
    binary <- paste0(number %% 2, binary)
    number <- number %/% 2
  }
  return(binary)
}","test_humaneval <- function() {
    candidate <- solve
    stopifnot(isTRUE(all.equal(candidate(1000), '1')))
    stopifnot(isTRUE(all.equal(candidate(150), '110')))
    stopifnot(isTRUE(all.equal(candidate(147), '1100')))
    stopifnot(isTRUE(all.equal(candidate(333), '1001')))
    stopifnot(isTRUE(all.equal(candidate(963), '10010')))
}
test_humaneval()"
HumanEval_85,yue_Hant,r,"譬如:给出一个非空的整数列表,先加上偶数元素,# >>> add(c(4, 2, 6, 7))
# 2
add <- function(lst) {","add <- function(lst) {
  # Select elements at odd indices (which are even positions)
  elements_at_odd_indices <- lst[seq(2, length(lst), by=2)]
  # Keep only the even elements
  even_elements <- elements_at_odd_indices[elements_at_odd_indices %% 2 == 0]
  # Sum the even elements
  sum(even_elements)
}","test_humaneval <- function() {
    candidate <- add
    stopifnot(isTRUE(all.equal(candidate(c(4, 88)), 88)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 5, 6, 7, 2, 122)), 122)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 0, 6, 7)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 4, 6, 8)), 12)))
}
test_humaneval()"
HumanEval_86,yue_Hant,r,"例如:注意:你應該保持句子裡嘅單詞順序同空白空間.根據 ASCII 值嘅上升順序.用一個新詞代替,其中所有字符都排列在字符串嘅排序式,就係所有單詞 (用空格分隔) 包含嘅字符串.寫一個函數,取一個字符串,然後返回它有序的版本.# >>> anti_shuffle('Hi')
# 'Hi'
# >>> anti_shuffle('hello')
# 'ehllo'
# >>> anti_shuffle('Hello World!!!')
# 'Hello !!!Wdlor'
anti_shuffle <- function(s) {","anti_shuffle <- function(s) {
  words <- strsplit(s, ""(\\s+)"", perl = TRUE)[[1]]
  sorted_words <- sapply(words, function(word) {
    if (word == """") return(word)
    chars <- unlist(strsplit(word, split = """"))
    return(paste0(sort(chars), collapse = """"))
  })
  return(paste0(sorted_words, collapse = """"))
}","test_humaneval <- function() {
    candidate <- anti_shuffle
    stopifnot(isTRUE(all.equal(candidate('Hi'), 'Hi')))
    stopifnot(isTRUE(all.equal(candidate('hello'), 'ehllo')))
    stopifnot(isTRUE(all.equal(candidate('number'), 'bemnru')))
    stopifnot(isTRUE(all.equal(candidate('abcd'), 'abcd')))
    stopifnot(isTRUE(all.equal(candidate('Hello World!!!'), 'Hello !!!Wdlor')))
    stopifnot(isTRUE(all.equal(candidate(''), '')))
    stopifnot(isTRUE(all.equal(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')))
}
test_humaneval()"
HumanEval_87,yue_Hant,r,"譬如:同樣,將行嘅坐標按列嘅順序排序.開始從行到行,坐標就會由上升順序排列.每個列表都代表一個坐標 - - (行,列),以0開始.然後返回列表列表, [(x1, y1), (x2, y2) ...] 如此,给出 lst,和整数 x,在列表中找到整数 x,每一行可能有唔同嘅列數.類似於矩陣,但唔同於矩陣,你會得到一個二維資料, 一個嵌入式列表,# >>> get_row(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1)
# list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0))
# >>> get_row(c(), 1)
# c()
# >>> get_row(list(c(), c(1), c(1, 2, 3)), 3)
# list(c(2, 2))
get_row <- function(lst, x) {","get_row <- function(lst, x) {
  result <- list()
  for (i in seq_along(lst)) {
    row <- lst[[i]]
    cols <- which(row == x)
    for (col in rev(sort(cols - 1))) {
      result <- append(result, list(c(i - 1, col)))
    }
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- get_row
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1), list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0)))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6)), 2), list(c(0, 1), c(1, 1), c(2, 1), c(3, 1), c(4, 1), c(5, 1)))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 5, 6), c(1, 1, 3, 4, 5, 6), c(1, 2, 1, 4, 5, 6), c(1, 2, 3, 1, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1), list(c(0, 0), c(1, 0), c(2, 1), c(2, 0), c(3, 2), c(3, 0), c(4, 3), c(4, 0), c(5, 4), c(5, 0), c(6, 5), c(6, 0)))))
    stopifnot(isTRUE(all.equal(candidate(c(), 1), c())))
    stopifnot(isTRUE(all.equal(candidate(list(c(1)), 2), c())))
    stopifnot(isTRUE(all.equal(candidate(list(c(), c(1), c(1, 2, 3)), 3), list(c(2, 2)))))
}
test_humaneval()"
HumanEval_88,yue_Hant,r,"譬如:*不要改變已知向量.注意:或者如果總和 (第一個指數值,最後一個指數值) 是偶數的話,就以下降順序排序.如果總和 (第一個索引值,最後一個索引值) 係奇數,你會以上升順序排序给定一个非负数整数向量, 排序后返回给定向量的一个COR,# >>> sort_array(c())
# c()
# >>> sort_array(c(5))
# c(5)
# >>> sort_array(c(2, 4, 3, 0, 1, 5))
# c(0, 1, 2, 3, 4, 5)
# >>> sort_array(c(2, 4, 3, 0, 1, 5, 6))
# c(6, 5, 4, 3, 2, 1, 0)
sort_array <- function(array) {","sort_array <- function(array) {
  if (length(array) <= 1) {
    return(array)
  }
  
  first_value <- array[1]
  last_value <- array[length(array)]
  sum_values <- first_value + last_value
  
  if (sum_values %% 2 == 1) {
    return(sort(array))
  } else {
    return(sort(array, decreasing = TRUE))
  }
}","test_humaneval <- function() {
    candidate <- sort_array
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(5)), c(5))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 3, 0, 1, 5)), c(0, 1, 2, 3, 4, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 3, 0, 1, 5, 6)), c(6, 5, 4, 3, 2, 1, 0))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 1)), c(1, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(15, 42, 87, 32, 11, 0)), c(0, 11, 15, 32, 42, 87))))
    stopifnot(isTRUE(all.equal(candidate(c(21, 14, 23, 11)), c(23, 21, 14, 11))))
}
test_humaneval()"
HumanEval_89,yue_Hant,r,"例如:兩位數的兩倍變數字母嘅順序應該係咁嘅:返回一個字符串,加密字母轉換.建立一個函數加密, 取一個字符串作為引數,# >>> encrypt('hi')
# 'lm'
# >>> encrypt('asdfghjkl')
# 'ewhjklnop'
# >>> encrypt('gf')
# 'kj'
# >>> encrypt('et')
# 'ix'
encrypt <- function(s) {","encrypt <- function(s) {
  alphabet <- letters
  shift <- 2 * 2
  encrypted <- sapply(strsplit(s, NULL)[[1]], function(char) {
    if (char %in% alphabet) {
      new_index <- (match(char, alphabet) + shift - 1) %% 26 + 1
      alphabet[new_index]
    } else {
      char
    }
  })
  paste(encrypted, collapse = """")
}","test_humaneval <- function() {
    candidate <- encrypt
    stopifnot(isTRUE(all.equal(candidate('hi'), 'lm')))
    stopifnot(isTRUE(all.equal(candidate('asdfghjkl'), 'ewhjklnop')))
    stopifnot(isTRUE(all.equal(candidate('gf'), 'kj')))
    stopifnot(isTRUE(all.equal(candidate('et'), 'ix')))
    stopifnot(isTRUE(all.equal(candidate('faewfawefaewg'), 'jeiajeaijeiak')))
    stopifnot(isTRUE(all.equal(candidate('hellomyfriend'), 'lippsqcjvmirh')))
    stopifnot(isTRUE(all.equal(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')))
    stopifnot(isTRUE(all.equal(candidate('a'), 'e')))
}
test_humaneval()"
HumanEval_90,yue_Hant,r,"如果無任何元素,返回NULL.寫一個函數 next_smallest (下_最小) 返回列表中第2個最小元素你得到一個整數列表.# >>> next_smallest(c(1, 2, 3, 4, 5))
# 2
# >>> next_smallest(c(5, 1, 4, 3, 2))
# 2
# >>> next_smallest(c())
# NULL
# >>> next_smallest(c(1, 1))
# NULL
next_smallest <- function(lst) {","next_smallest <- function(lst) {
  # Sort the list and remove duplicates
  unique_sorted_lst <- sort(unique(lst))
  
  # Check if list contains at least two distinct elements
  if (length(unique_sorted_lst) < 2) {
    return(NULL)
  }
  
  # Return the second smallest element
  return(unique_sorted_lst[2])
}","test_humaneval <- function() {
    candidate <- next_smallest
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 1, 4, 3, 2)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1)), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 1, 0)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1)), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(-35, 34, 12, -45)), -35)))
}
test_humaneval()"
HumanEval_91,yue_Hant,r,"例如:句子嘅界限用"""", ""?""或者""!""枯燥嘅句子喺由""我""開始你只需要一行文字,然後計算個數字# >>> is_bored('Hello world')
# 0
# >>> is_bored('The sky is blue. The sun is shining. I love this weather')
# 1
is_bored <- function(S) {","is_bored <- function(S) {
  # Split the string into sentences using '.', '?', and '!' as delimiters
  sentences <- unlist(strsplit(S, split = ""[.?!]""))
  
  # Trim leading and trailing whitespace from each sentence
  sentences <- trimws(sentences)
  
  # Count the number of sentences that start with ""I""
  boredom_count <- sum(startsWith(sentences, ""I""))
  
  return(boredom_count)
}","test_humaneval <- function() {
    candidate <- is_bored
    stopifnot(isTRUE(all.equal(candidate('Hello world'), 0)))
    stopifnot(isTRUE(all.equal(candidate('Is the sky blue?'), 0)))
    stopifnot(isTRUE(all.equal(candidate('I love It !'), 1)))
    stopifnot(isTRUE(all.equal(candidate('bIt'), 0)))
    stopifnot(isTRUE(all.equal(candidate('I feel good today. I will be productive. will kill It'), 2)))
    stopifnot(isTRUE(all.equal(candidate('You and I are going for a walk'), 0)))
}
test_humaneval()"
HumanEval_92,yue_Hant,r,"譬如話..返回 false 其他任何一個例子.如果其中一個數字等於其他兩個數字嘅總和 而所有數字都係整數的話,則返回真建立一個函數,需要3個數字.# >>> any_int(5, 2, 7)
# TRUE
# >>> any_int(3, 2, 2)
# FALSE
# >>> any_int(3, -2, 1)
# TRUE
# >>> any_int(3.6, -2.2, 2)
# FALSE
any_int <- function(x, y, z) {","any_int <- function(x, y, z) {
  if (is.integer(x) && is.integer(y) && is.integer(z)) {
    return(x == y + z || y == x + z || z == x + y)
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- any_int
    stopifnot(isTRUE(all.equal(candidate(2, 3, 1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2.5, 2, 3), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(1.5, 5, 3.5), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(2, 6, 2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(4, 2, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2.2, 2.2, 2.2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(-4, 6, 2), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2, 1, 1), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(3, 4, 7), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(3.0, 4, 7), FALSE)))
}
test_humaneval()"
HumanEval_93,yue_Hant,r,"譬如:假設只寫字母單音係英文母音嘅文字喺呢張相前兩排佢會更換所有字母嘅大小寫作方式 代替所有母音嘅寫一個函數,收到訊息,然後編碼成一個函數# >>> encode('test')
# 'TGST'
# >>> encode('This is a message')
# 'tHKS KS C MGSSCGG'
encode <- function(message) {","encode <- function(message) {
  # Function to swap case of letters
  swap_case <- function(char) {
    if (grepl(""[A-Za-z]"", char)) {
      if (char %in% LETTERS) {
        return(tolower(char))
      } else {
        return(toupper(char))
      }
    } else {
      return(char)
    }
  }
  
  # Vowel replacement rules
  vowel_replacement <- function(char) {
    vowels <- c(""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U"")
    replacements <- c(""c"", ""g"", ""k"", ""q"", ""w"", ""C"", ""G"", ""K"", ""Q"", ""W"")
    if (char %in% vowels) {
      index <- match(char, vowels)
      return(replacements[index])
    } else {
      return(char)
    }
  }
  
  # Splitting the message into its characters
  message_chars <- strsplit(message, """")[[1]]
  
  # Apply swap case and vowel replacement
  encoded_chars <- sapply(message_chars, function(x) vowel_replacement(swap_case(x)))
  
  # Combine the characters back into a single string
  return(paste(encoded_chars, collapse = """"))
}","test_humaneval <- function() {
    candidate <- encode
    stopifnot(isTRUE(all.equal(candidate('TEST'), 'tgst')))
    stopifnot(isTRUE(all.equal(candidate('Mudasir'), 'mWDCSKR')))
    stopifnot(isTRUE(all.equal(candidate('YES'), 'ygs')))
    stopifnot(isTRUE(all.equal(candidate('This is a message'), 'tHKS KS C MGSSCGG')))
    stopifnot(isTRUE(all.equal(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')))
}
test_humaneval()"
HumanEval_94,yue_Hant,r,"譬如:您需要找到最大的素数,并返回其数字的和.你得到一個整數列表.# >>> skjkasdkd(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))
# 10
# >>> skjkasdkd(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))
# 25
# >>> skjkasdkd(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))
# 13
# >>> skjkasdkd(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))
# 11
# >>> skjkasdkd(c(0, 81, 12, 3, 1, 21))
# 3
# >>> skjkasdkd(c(0, 8, 1, 2, 1, 7))
# 7
skjkasdkd <- function(lst) {","skjkasdkd <- function(lst) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n == 2) return(TRUE)
    if (n %% 2 == 0) return(FALSE)
    for (i in 3:sqrt(n)) {
      if (n %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  prime_values <- lst[sapply(lst, is_prime)]
  if (length(prime_values) == 0) return(0)
  
  largest_prime <- max(prime_values)
  
  sum_of_digits <- function(n) {
    sum(as.numeric(unlist(strsplit(as.character(n), """"))))
  }
  
  return(sum_of_digits(largest_prime))
}","test_humaneval <- function() {
    candidate <- skjkasdkd
    stopifnot(isTRUE(all.equal(candidate(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)), 10)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)), 25)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)), 13)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)), 11)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 81, 12, 3, 1, 21)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 8, 1, 2, 1, 7)), 7)))
    stopifnot(isTRUE(all.equal(candidate(c(8191)), 19)))
    stopifnot(isTRUE(all.equal(candidate(c(8191, 123456, 127, 7)), 19)))
    stopifnot(isTRUE(all.equal(candidate(c(127, 97, 8192)), 10)))
}
test_humaneval()"
HumanEval_95,yue_Hant,r,"譬如:函數應該返回FALSE,如果已指定的名單是空的.字母大小写或者所有键都是大小写字符串,否则返回FALSE.如果一個名稱清單,如果所有鍵都是 lower 字符串,則返回 TRUE.# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))
# TRUE
# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))
# FALSE
# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))
# FALSE
# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))
# FALSE
# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))
# TRUE
check_dict_case <- function(dict) {","check_dict_case <- function(dict) {
  if (length(dict) == 0) return(FALSE)
  
  keys <- names(dict)
  
  all_lower <- all(keys == tolower(keys))
  all_upper <- all(keys == toupper(keys))
  
  return(all_lower || all_upper)
}","test_humaneval <- function() {
    candidate <- check_dict_case
    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(list()), FALSE)))
}
test_humaneval()"
HumanEval_96,yue_Hant,r,"例如:整數係素數,小於n.實現一個函數,它取一個非負整數,並返回第一個 n 的向量.# >>> count_up_to(5)
# c(2, 3)
# >>> count_up_to(11)
# c(2, 3, 5, 7)
# >>> count_up_to(0)
# c()
# >>> count_up_to(20)
# c(2, 3, 5, 7, 11, 13, 17, 19)
# >>> count_up_to(1)
# c()
# >>> count_up_to(18)
# c(2, 3, 5, 7, 11, 13, 17)
count_up_to <- function(n) {","count_up_to <- function(n) {
  is_prime <- function(num) {
    if (num <= 1) return(FALSE)
    if (num == 2) return(TRUE)
    if (num %% 2 == 0) return(FALSE)
    for (i in 3:sqrt(num)) {
      if (num %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  primes_below_n <- c()
  for (i in 2:(n-1)) {
    if (is_prime(i)) {
      primes_below_n <- c(primes_below_n, i)
    }
  }
  
  return(primes_below_n)
}","test_humaneval <- function() {
    candidate <- count_up_to
    stopifnot(isTRUE(all.equal(candidate(5), c(2, 3))))
    stopifnot(isTRUE(all.equal(candidate(6), c(2, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(7), c(2, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(10), c(2, 3, 5, 7))))
    stopifnot(isTRUE(all.equal(candidate(0), c())))
    stopifnot(isTRUE(all.equal(candidate(22), c(2, 3, 5, 7, 11, 13, 17, 19))))
    stopifnot(isTRUE(all.equal(candidate(1), c())))
    stopifnot(isTRUE(all.equal(candidate(18), c(2, 3, 5, 7, 11, 13, 17))))
    stopifnot(isTRUE(all.equal(candidate(47), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43))))
    stopifnot(isTRUE(all.equal(candidate(101), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))))
}
test_humaneval()"
HumanEval_97,yue_Hant,r,"譬如:假設輸入嘅訊息始終係有效嘅.單位數字嘅積分完成函数,取两个整数,返回# >>> multiply(148, 412)
# 16
# >>> multiply(19, 28)
# 72
# >>> multiply(2020, 1851)
# 0
# >>> multiply(14, -15)
# 20
multiply <- function(a, b) {","multiply <- function(a, b) {
  unit_digit_a <- abs(a) %% 10
  unit_digit_b <- abs(b) %% 10
  return(unit_digit_a * unit_digit_b)
}","test_humaneval <- function() {
    candidate <- multiply
    stopifnot(isTRUE(all.equal(candidate(148, 412), 16)))
    stopifnot(isTRUE(all.equal(candidate(19, 28), 72)))
    stopifnot(isTRUE(all.equal(candidate(2020, 1851), 0)))
    stopifnot(isTRUE(all.equal(candidate(14, -15), 20)))
    stopifnot(isTRUE(all.equal(candidate(76, 67), 42)))
    stopifnot(isTRUE(all.equal(candidate(17, 27), 49)))
    stopifnot(isTRUE(all.equal(candidate(0, 1), 0)))
    stopifnot(isTRUE(all.equal(candidate(0, 0), 0)))
}
test_humaneval()"
HumanEval_98,yue_Hant,r,"例如:给定一个字符串 s, 计算大母音的偶数.# >>> count_upper('aBCdEf')
# 1
# >>> count_upper('abcdefg')
# 0
# >>> count_upper('dBBE')
# 0
count_upper <- function(s) {","count_upper <- function(s) {
  # Define uppercase vowels
  uppercase_vowels <- c('A', 'E', 'I', 'O', 'U')
  
  # Initialize counter
  count <- 0
  
  # Iterate over string indices
  for (i in seq(1, nchar(s), by=2)) {
    # Check if character at even index is an uppercase vowel
    if (substr(s, i, i) %in% uppercase_vowels) {
      count <- count + 1
    }
  }
  
  return(count)
}","test_humaneval <- function() {
    candidate <- count_upper
    stopifnot(isTRUE(all.equal(candidate('aBCdEf'), 1)))
    stopifnot(isTRUE(all.equal(candidate('abcdefg'), 0)))
    stopifnot(isTRUE(all.equal(candidate('dBBE'), 0)))
    stopifnot(isTRUE(all.equal(candidate('B'), 0)))
    stopifnot(isTRUE(all.equal(candidate('U'), 1)))
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
    stopifnot(isTRUE(all.equal(candidate('EEEE'), 2)))
}
test_humaneval()"
HumanEval_99,yue_Hant,r,"譬如話..由兩個整數去除零,如果個數係等距離嘅建立一個函數,它會取一個數值 (字串),表示一個數字.# >>> closest_integer('10')
# 10
# >>> closest_integer('15.3')
# 15
# Note:
# Rounding away from zero means that if the given number is equidistant
# from two integers, the one you should return is the one that is the
# farthest from zero. For example closest_integer(""14.5"") should
# return 15 and closest_integer(""-14.5"") should return -15.
closest_integer <- function(value) {","closest_integer <- function(value) {
  num <- as.numeric(value)
  if (num %% 1 == 0.5 || num %% 1 == -0.5) {
    return(ifelse(num > 0, ceiling(num), floor(num)))
  } else {
    return(round(num))
  }
}","test_humaneval <- function() {
    candidate <- closest_integer
    stopifnot(isTRUE(all.equal(candidate('10'), 10)))
    stopifnot(isTRUE(all.equal(candidate('14.5'), 15)))
    stopifnot(isTRUE(all.equal(candidate('-15.5'), -16)))
    stopifnot(isTRUE(all.equal(candidate('15.3'), 15)))
    stopifnot(isTRUE(all.equal(candidate('0'), 0)))
}
test_humaneval()"
HumanEval_100,yue_Hant,r,"譬如:i代表一层 (i+1) 中的石头数.返回列表中每一层的石头数,其中元素在索引中- 如果 n 是偶数,则是下一个偶数.- 如果 n 是奇数,则是下一个奇数.下一個層嘅石頭數量係:第一個層面有n塊石頭给定一个正整数n,你必须做一堆 n个层的石头.# >>> make_a_pile(3)
# c(3, 5, 7)
make_a_pile <- function(n) {","make_a_pile <- function(n) {
  stones <- numeric(n)
  stones[1] <- n
  for (i in 2:n) {
    if (n %% 2 == 0) {
      stones[i] <- stones[i - 1] + 2
    } else {
      stones[i] <- stones[i - 1] + 2
    }
  }
  return(stones)
}","test_humaneval <- function() {
    candidate <- make_a_pile
    stopifnot(isTRUE(all.equal(candidate(3), c(3, 5, 7))))
    stopifnot(isTRUE(all.equal(candidate(4), c(4, 6, 8, 10))))
    stopifnot(isTRUE(all.equal(candidate(5), c(5, 7, 9, 11, 13))))
    stopifnot(isTRUE(all.equal(candidate(6), c(6, 8, 10, 12, 14, 16))))
    stopifnot(isTRUE(all.equal(candidate(8), c(8, 10, 12, 14, 16, 18, 20, 22))))
}
test_humaneval()"
HumanEval_101,yue_Hant,r,"例如:用來將字符串分成幾個單詞,並返回一個單詞的向量.你會得到一串字符串,用逗號或者空格去分開. 你嘅任務就係# >>> words_string('Hi, my name is John')
# c('Hi', 'my', 'name', 'is', 'John')
# >>> words_string('One, two, three, four, five, six')
# c('One', 'two', 'three', 'four', 'five', 'six')
words_string <- function(s) {","words_string <- function(s) {
  s <- gsub("","", "" "", s)
  words <- unlist(strsplit(s, ""\\s+""))
  words <- words[words != """"]
  return(words)
}","test_humaneval <- function() {
    candidate <- words_string
    stopifnot(isTRUE(all.equal(candidate('Hi, my name is John'), c('Hi', 'my', 'name', 'is', 'John'))))
    stopifnot(isTRUE(all.equal(candidate('One, two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))))
    stopifnot(isTRUE(all.equal(candidate('Hi, my name'), c('Hi', 'my', 'name'))))
    stopifnot(isTRUE(all.equal(candidate('One,, two, three, four, five, six,'), c('One', 'two', 'three', 'four', 'five', 'six'))))
    stopifnot(isTRUE(all.equal(candidate(''), c())))
    stopifnot(isTRUE(all.equal(candidate('ahmed     , gamal'), c('ahmed', 'gamal'))))
}
test_humaneval()"
HumanEval_102,yue_Hant,r,"例如:如果没有这样的数, 函数应该返回-1最大的偶数是包含在 [x,y] 范围内.如果函數取兩個正數 x 和 y 返回# >>> choose_num(12, 15)
# 14
# >>> choose_num(13, 12)
# -1
choose_num <- function(x, y) {","choose_num <- function(x, y) {
  if (x > y) {
    return(-1)
  }
  
  for (num in seq(y, x, by = -1)) {
    if (num %% 2 == 0) {
      return(num)
    }
  }
  
  return(-1)
}","test_humaneval <- function() {
    candidate <- choose_num
    stopifnot(isTRUE(all.equal(candidate(12, 15), 14)))
    stopifnot(isTRUE(all.equal(candidate(13, 12), -1)))
    stopifnot(isTRUE(all.equal(candidate(33, 12354), 12354)))
    stopifnot(isTRUE(all.equal(candidate(5234, 5233), -1)))
    stopifnot(isTRUE(all.equal(candidate(6, 29), 28)))
    stopifnot(isTRUE(all.equal(candidate(27, 10), -1)))
    stopifnot(isTRUE(all.equal(candidate(7, 7), -1)))
    stopifnot(isTRUE(all.equal(candidate(546, 546), 546)))
}
test_humaneval()"
HumanEval_103,yue_Hant,r,"譬如..如果 n 大于m,返回-1將答案圓到最近嘅整數,然後將其轉換成二進制數字.由 n 到 m (包括 n 和 m) 的整數的平均值.你有兩個正嘅整數 n 同 m, 你需要計算出# >>> rounded_avg(1, 5)
# '0b11'
# >>> rounded_avg(7, 5)
# -1
# >>> rounded_avg(10, 20)
# '0b1111'
# >>> rounded_avg(20, 33)
# '0b11010'
rounded_avg <- function(n, m) {","rounded_avg <- function(n, m) {
  if (n > m) {
    return(-1)
  }
  avg <- mean(n:m)
  rounded_avg <- round(avg)
  binary_avg <- as.character(as.binary(rounded_avg))
  return(paste0(""0b"", binary_avg))
}

as.binary <- function(num) {
  if (num == 0) {
    return(""0"")
  }
  binary <- """"
  while (num > 0) {
    binary <- paste0(num %% 2, binary)
    num <- num %/% 2
  }
  return(binary)
}","test_humaneval <- function() {
    candidate <- rounded_avg
    stopifnot(isTRUE(all.equal(candidate(1, 5), '0b11')))
    stopifnot(isTRUE(all.equal(candidate(7, 13), '0b1010')))
    stopifnot(isTRUE(all.equal(candidate(964, 977), '0b1111001010')))
    stopifnot(isTRUE(all.equal(candidate(996, 997), '0b1111100100')))
    stopifnot(isTRUE(all.equal(candidate(560, 851), '0b1011000010')))
    stopifnot(isTRUE(all.equal(candidate(185, 546), '0b101101110')))
    stopifnot(isTRUE(all.equal(candidate(362, 496), '0b110101101')))
    stopifnot(isTRUE(all.equal(candidate(350, 902), '0b1001110010')))
    stopifnot(isTRUE(all.equal(candidate(197, 233), '0b11010111')))
    stopifnot(isTRUE(all.equal(candidate(7, 5), -1)))
    stopifnot(isTRUE(all.equal(candidate(5, 1), -1)))
    stopifnot(isTRUE(all.equal(candidate(5, 5), '0b101')))
}
test_humaneval()"
HumanEval_104,yue_Hant,r,"例如:注意:返回嘅清單要按增長順序排列.任何元素都未有偶數给定一个正整数x的列表,返回所有整数的排序列表.# >>> unique_digits(c(15, 33, 1422, 1))
# c(1, 15, 33)
# >>> unique_digits(c(152, 323, 1422, 10))
# c()
unique_digits <- function(x) {","unique_digits <- function(x) {
  has_no_even_digit <- function(num) {
    digits <- as.numeric(strsplit(as.character(num), """")[[1]])
    return(all(digits %% 2 != 0))
  }
  
  result <- Filter(has_no_even_digit, x)
  return(sort(result))
}","test_humaneval <- function() {
    candidate <- unique_digits
    stopifnot(isTRUE(all.equal(candidate(c(15, 33, 1422, 1)), c(1, 15, 33))))
    stopifnot(isTRUE(all.equal(candidate(c(152, 323, 1422, 10)), c())))
    stopifnot(isTRUE(all.equal(candidate(c(12345, 2033, 111, 151)), c(111, 151))))
    stopifnot(isTRUE(all.equal(candidate(c(135, 103, 31)), c(31, 135))))
}
test_humaneval()"
HumanEval_105,yue_Hant,r,"例如:一,二,三,四,五,六,七,八,九倒數個結果向量,然後以相對應嘅數字取代每個數字,從给定一个整数向量,把1到9的整数排序,# >>> by_length(c(2, 1, 1, 4, 5, 8, 2, 3))
# c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One')
#   If the vector is empty, return an empty vector:
# >>> by_length(c())
# c()
#   If the vector has any strange number ignore it:
# >>> by_length(c(1, -1, 55))
# c('One')
by_length <- function(arr) {","by_length <- function(arr) {
  # Filter numbers between 1 and 9
  valid_nums <- arr[arr >= 1 & arr <= 9]
  # Sort the numbers
  sorted_nums <- sort(valid_nums, decreasing = TRUE)
  # Map numbers to their names
  num_to_name <- c(""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"")
  result <- num_to_name[sorted_nums]
  return(result)
}","test_humaneval <- function() {
    candidate <- by_length
    stopifnot(isTRUE(all.equal(candidate(c(2, 1, 1, 4, 5, 8, 2, 3)), c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 55)), c('One'))))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1, 3, 2)), c('Three', 'Two', 'One'))))
    stopifnot(isTRUE(all.equal(candidate(c(9, 4, 8)), c('Nine', 'Eight', 'Four'))))
}
test_humaneval()"
HumanEval_106,yue_Hant,r,"譬如..i 的因数系是从 1 到 i 的乘法 (1 * 2 * ... * i).我從1開始.或者1到i嘅數字之和.如果 i 是偶数,则返回一个大小为 n 的列表,这样元素在索引 i 的值就是 i 的因数.實現一個函數 f 取 n 為參數,# >>> f(5)
# c(1, 2, 6, 24, 15)
f <- function(n) {","f <- function(n) {
  result <- numeric(n)  # Initialize a numeric vector of length n
  for (i in 1:n) {
    if (i %% 2 == 0) {  # Check if i is even
      result[i] <- factorial(i)
    } else {
      result[i] <- sum(1:i)
    }
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- f
    stopifnot(isTRUE(all.equal(candidate(5), c(1, 2, 6, 24, 15))))
    stopifnot(isTRUE(all.equal(candidate(7), c(1, 2, 6, 24, 15, 720, 28))))
    stopifnot(isTRUE(all.equal(candidate(1), c(1))))
    stopifnot(isTRUE(all.equal(candidate(3), c(1, 2, 6))))
}
test_humaneval()"
HumanEval_107,yue_Hant,r,"舉例一:整數體,包括在內的{1,n}範圍內.给定一个正整数 n,返回一个有偶数和奇数的列表# >>> even_odd_palindrome(3)
# c(1, 2)
#     Explanation:
#     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
# Example 2:
# >>> even_odd_palindrome(12)
# c(4, 6)
#     Explanation:
#     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
# Note:
#     1. 1 <= n <= 10^3
#     2. returned list has the number of even and odd integer palindromes respectively.
even_odd_palindrome <- function(n) {","even_odd_palindrome <- function(n) {
  is_palindrome <- function(x) {
    str_x <- as.character(x)
    return(str_x == paste(rev(unlist(strsplit(str_x, """"))), collapse = """"))
  }
  
  even_count <- 0
  odd_count <- 0
  
  for (i in 1:n) {
    if (is_palindrome(i)) {
      if (i %% 2 == 0) {
        even_count <- even_count + 1
      } else {
        odd_count <- odd_count + 1
      }
    }
  }
  
  return(c(even_count, odd_count))
}","test_humaneval <- function() {
    candidate <- even_odd_palindrome
    stopifnot(isTRUE(all.equal(candidate(123), c(8, 13))))
    stopifnot(isTRUE(all.equal(candidate(12), c(4, 6))))
    stopifnot(isTRUE(all.equal(candidate(3), c(1, 2))))
    stopifnot(isTRUE(all.equal(candidate(63), c(6, 8))))
    stopifnot(isTRUE(all.equal(candidate(25), c(5, 6))))
    stopifnot(isTRUE(all.equal(candidate(19), c(4, 6))))
    stopifnot(isTRUE(all.equal(candidate(9), c(4, 5))))
    stopifnot(isTRUE(all.equal(candidate(1), c(0, 1))))
}
test_humaneval()"
HumanEval_108,yue_Hant,r,"譬如 -123 代表 -1,2,3如果一個數字係負數, 咁它的第一個已加符號嘅數字就會是負數:元素嘅數目,其中嘅數字總和大於 0.寫一個函數 count_nums 取一個整數向量,然後返回# >>> count_nums(c())
# 0
# >>> count_nums(c(-1, 11, -11))
# 1
# >>> count_nums(c(1, 1, 2))
# 3
count_nums <- function(arr) {","count_nums <- function(arr) {
  # Helper function to calculate sum of digits
  sum_of_digits <- function(num) {
    digits <- as.numeric(unlist(strsplit(as.character(num), """")))
    return(sum(digits, na.rm = TRUE))
  }
  
  # Apply the sum_of_digits function and count numbers with sum > 0
  return(sum(sapply(arr, sum_of_digits) > 0))
}","test_humaneval <- function() {
    candidate <- count_nums
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, 0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 100, 98, -7, 1, -1)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(12, 23, 34, -45, -56, 0)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 1)))
}
test_humaneval()"
HumanEval_109,yue_Hant,r,"例如:注意: 列表中一定有獨特嘅元素.如果给定的向量是空的,则返回True.返回TRUE 返回FALSE如果可以通过执行上述操作得到排序的向量矢量嘅起始位置,即第0個指數矢量嘅最後一個元素會移到一次向右移动的运算意味着向量所有元素都被移动1个.你可以任意數次進行右轉操作.对于给定的向量,下面的操作:通過做一個不減少順序排序的向量,矢量中的数将被随机排序.你的任务是确定是否我們有一個向量arr,它是由N個整數arr[1],arr[2], ...,arr[N]組成.# >>> move_one_ball(c(3, 4, 5, 1, 2))
# TRUE
# Explanation: By performin 2 right shift operations, non-decreasing order can
#              be achieved for the given vector.
# >>> move_one_ball(c(3, 5, 4, 1, 2))
# FALSE
# Explanation:It is not possible to get non-decreasing order for the given
#             vector by performing any number of right shift operations.
move_one_ball <- function(arr) {","move_one_ball <- function(arr) {
  if (length(arr) == 0) {
    return(TRUE)
  }
  
  n <- length(arr)
  for (i in 1:n) {
    shifted_arr <- c(tail(arr, n - i), head(arr, i))
    if (all(diff(shifted_arr) >= 0)) {
      return(TRUE)
    }
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- move_one_ball
    stopifnot(isTRUE(all.equal(candidate(c(3, 4, 5, 1, 2)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 10, 1, 2)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 3, 1, 2)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 5, 4, 1, 2)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c()), TRUE)))
}
test_humaneval()"
HumanEval_110,yue_Hant,r,"例如:否則,返回""NO"".如果 lst1 中嘅元素都係偶數,返回""YES"".如果可以將元素從 lst1 交換到 lst2兩者之間嘅交換元素無限列出一個列表中只有偶數字.決定是否可以進行元素交換喺呢個問題裡面,你會執行一個函數 函數會取兩個數列,# >>> exchange(c(1, 2, 3, 4), c(1, 2, 3, 4))
# 'YES'
# >>> exchange(c(1, 2, 3, 4), c(1, 5, 3, 4))
# 'NO'
# It is assumed that the input lists will be non-empty.
exchange <- function(lst1, lst2) {","exchange <- function(lst1, lst2) {
  # Identify even and odd numbers in lst1
  lst1_even <- lst1[lst1 %% 2 == 0]
  lst1_odd <- lst1[lst1 %% 2 != 0]
  
  # Identify even numbers in lst2
  lst2_even <- lst2[lst2 %% 2 == 0]
  
  # Check if the number of odd elements in lst1 can be replaced with even elements from lst2
  if (length(lst1_odd) <= length(lst2_even)) {
    return(""YES"")
  } else {
    return(""NO"")
  }
}","test_humaneval <- function() {
    candidate <- exchange
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(1, 2, 3, 4)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(1, 5, 3, 4)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4), c(2, 1, 4, 3)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(5, 7, 3), c(2, 6, 4)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(5, 7, 3), c(2, 6, 3)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 6, 1, 8, 9), c(3, 5, 5, 1, 1, 1)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(100, 200), c(200, 200)), 'YES')))
}
test_humaneval()"
HumanEval_111,yue_Hant,r,"譬如..如果有幾個字母出現同一個字母,請將全部字母輸入.字母嘅重複數目係最多嘅,所以佢包含嘅字母數目都係最多嘅给定一个字符串代表一个空格隔开的小写字母,返回一个命名的列表.# >>> histogram('a b c')
# list('a' = 1, 'b' = 1, 'c' = 1)
# >>> histogram('a b b a')
# list('a' = 2, 'b' = 2)
# >>> histogram('a b c a b')
# list('a' = 2, 'b' = 2)
# >>> histogram('b b b b a')
# list('b' = 4)
# >>> histogram('')
# list()
histogram <- function(test) {","histogram <- function(test) {
  # Split the string into individual letters.
  letters <- unlist(strsplit(test, "" ""))
  
  # Create a table to count the occurrences of each letter.
  count_table <- table(letters)
  
  # Find the maximum frequency of occurrences.
  max_count <- max(count_table, na.rm = TRUE)
  
  # Find all letters that have the maximum frequency.
  max_letters <- names(count_table[count_table == max_count])
  
  # Create a named list with letters as names and their max occurrences as values.
  result <- setNames(as.list(rep(max_count, length(max_letters))), max_letters)
  
  return(result)
}","test_humaneval <- function() {
    candidate <- histogram
    stopifnot(isTRUE(all.equal(candidate('a b b a'), list('a' = 2, 'b' = 2))))
    stopifnot(isTRUE(all.equal(candidate('a b c a b'), list('a' = 2, 'b' = 2))))
    stopifnot(isTRUE(all.equal(candidate('a b c d g'), list('a' = 1, 'b' = 1, 'c' = 1, 'd' = 1, 'g' = 1))))
    stopifnot(isTRUE(all.equal(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))))
    stopifnot(isTRUE(all.equal(candidate('b b b b a'), list('b' = 4))))
    stopifnot(isTRUE(all.equal(candidate('r t g'), list('r' = 1, 't' = 1, 'g' = 1))))
    stopifnot(isTRUE(all.equal(candidate(''), list())))
    stopifnot(isTRUE(all.equal(candidate('a'), list('a' = 1))))
}
test_humaneval()"
HumanEval_112,yue_Hant,r,"舉例你應該返回一個包含結果字符串和TRUE/FALSE的列表來進行檢查.一個字符串嘅前後讀法相同,叫做 palindrome.然後檢查結果字符串係咪係平行列.我們有兩個字符串 s 和 c,我們要除 s 中所有等於 c 中任何一個字符的字符.任務# >>> reverse_delete('abcde', 'ae')
# list('bcd', FALSE)
# >>> reverse_delete('abcdef', 'b')
# list('acdef', FALSE)
# >>> reverse_delete('abcdedcba', 'ab')
# list('cdedc', TRUE)
reverse_delete <- function(s, c) {","reverse_delete <- function(s, c) {
  # Remove characters in 'c' from 's'
  for (char in strsplit(c, '')[[1]]) {
    s <- gsub(char, """", s)
  }
  
  # Check if the resultant string is a palindrome
  is_palindrome <- s == paste(rev(strsplit(s, NULL)[[1]]), collapse = """")
  
  # Return the resultant string and the palindrome check result
  return(list(s, is_palindrome))
}","test_humaneval <- function() {
    candidate <- reverse_delete
    stopifnot(isTRUE(all.equal(candidate('abcde', 'ae'), list('bcd', FALSE))))
    stopifnot(isTRUE(all.equal(candidate('abcdef', 'b'), list('acdef', FALSE))))
    stopifnot(isTRUE(all.equal(candidate('abcdedcba', 'ab'), list('cdedc', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('dwik', 'w'), list('dik', FALSE))))
    stopifnot(isTRUE(all.equal(candidate('a', 'a'), list('', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('abcdedcba', ''), list('abcdedcba', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('abcdedcba', 'v'), list('abcdedcba', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('vabba', 'v'), list('abba', TRUE))))
    stopifnot(isTRUE(all.equal(candidate('mamma', 'mia'), list('', TRUE))))
}
test_humaneval()"
HumanEval_113,yue_Hant,r,"输入字符串的第 i 个数字符串中輸入嘅字符串"" 所有嘅""i"" 應該被數字""i"" 取代每一個i的元素應該是""在""的奇數元素的數量给出一列字符串,每一个字符串只包含数字,返回一个列表.# >>> odd_count(c('1234567'))
# c('the number of odd elements 4n the str4ng 4 of the 4nput.')
# >>> odd_count(c('3', '11111111'))
# c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.')
odd_count <- function(lst) {","odd_count <- function(lst) {
  sapply(lst, function(x) {
    odd_digits <- sum(as.numeric(unlist(strsplit(x, """"))) %% 2 == 1)
    sprintf(""the number of odd elements %dn the str%2$sing %1$d of the %3$nput."", odd_digits, odd_digits, odd_digits)
  })
}

# Example usage
print(odd_count(c('1234567')))
print(odd_count(c('3', '11111111')))","test_humaneval <- function() {
    candidate <- odd_count
    stopifnot(isTRUE(all.equal(candidate(c('1234567')), c('the number of odd elements 4n the str4ng 4 of the 4nput.'))))
    stopifnot(isTRUE(all.equal(candidate(c('3', '11111111')), c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'))))
    stopifnot(isTRUE(all.equal(candidate(c('271', '137', '314')), c('the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'))))
}
test_humaneval()"
HumanEval_114,yue_Hant,r,"舉例數字嘅數字.给定一个整数n的向量, 求出任何非空子向量的最小和# >>> minSubArraySum(c(2, 3, 4, 1, 2, 4))
# 1
# >>> minSubArraySum(c(-1, -2, -3))
# -6
minSubArraySum <- function(nums) {","minSubArraySum <- function(nums) {
  min_sum <- nums[1]
  current_sum <- 0
  
  for (num in nums) {
    if (current_sum > 0) {
      current_sum <- 0
    }
    current_sum <- current_sum + num
    if (current_sum < min_sum) {
      min_sum <- current_sum
    }
  }
  
  return(min_sum)
}","test_humaneval <- function() {
    candidate <- minSubArraySum
    stopifnot(isTRUE(all.equal(candidate(c(2, 3, 4, 1, 2, 4)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3)), -6)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3, 2, -10)), -14)))
    stopifnot(isTRUE(all.equal(candidate(c(-9999999999999999)), -9999999999999999)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 10, 20, 1000000)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -2, -3, 10, -5)), -6)))
    stopifnot(isTRUE(all.equal(candidate(c(100, -1, -2, -3, 10, -5)), -6)))
    stopifnot(isTRUE(all.equal(candidate(c(10, 11, 13, 8, 3, 4)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(100, -33, 32, -1, 0, -2)), -33)))
    stopifnot(isTRUE(all.equal(candidate(c(-10)), -10)))
    stopifnot(isTRUE(all.equal(candidate(c(7)), 7)))
    stopifnot(isTRUE(all.equal(candidate(c(1, -1)), -1)))
}
test_humaneval()"
HumanEval_115,yue_Hant,r,"舉例一:输出你需要放下桶的次数.你嘅任務就係用水桶去清理井嘅水所有嘅桶都同一個容量.每個井都有一個應用嘅桶,用嚟抽水嘅,而每一行嘅 1 代表一個單位嘅水你會見到一個長方形嘅,每一行代表住一個# >>> max_fill(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1)
# 6
# Example 2:
# >>> max_fill(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2)
# 5
# Example 3:
# >>> max_fill(list(c(0, 0, 0), c(0, 0, 0)), 5)
# 0
# Constraints:
#     * all wells have the same length
#     * 1 <= grid.length <= 10^2
#     * 1 <= grid[:,1].length <= 10^2
#     * grid[i][j] -> 0 | 1
#     * 1 <= capacity <= 10
max_fill <- function(grid, capacity) {","max_fill <- function(grid, capacity) {
  total_water <- sum(unlist(grid))
  num_buckets_needed <- ceiling(total_water / capacity)
  return(num_buckets_needed)
}","test_humaneval <- function() {
    candidate <- max_fill
    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1), 6)))
    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2), 5)))
    stopifnot(isTRUE(all.equal(candidate(list(c(0, 0, 0), c(0, 0, 0)), 5), 0)))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 1, 1, 1), c(1, 1, 1, 1)), 2), 4)))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 1, 1, 1), c(1, 1, 1, 1)), 9), 2)))
}
test_humaneval()"
HumanEval_116,yue_Hant,r,"實施方法係咁:同樣嘅數字,以小數值來排序.一,二進制嘅數字,從上升順序.喺呢個 Kata 函數裡面,你需要根據# >>> sort_array(c(1, 5, 2, 3, 4))
# c(1, 2, 3, 4, 5)
# >>> sort_array(c(-2, -3, -4, -5, -6))
# c(-6, -5, -4, -3, -2)
# >>> sort_array(c(1, 0, 2, 3, 4))
# c(0, 1, 2, 3, 4)
sort_array <- function(arr) {","sort_array <- function(arr) {
  # Filter out negative numbers and sort them directly
  negative_numbers <- sort(arr[arr < 0])
  
  # Process non-negative numbers
  non_negative_numbers <- arr[arr >= 0]
  
  # Sort non-negative numbers based on number of 1s in binary representation, then by decimal value
  sorted_non_negative_numbers <- non_negative_numbers[order(sapply(non_negative_numbers, function(x) {
    sum(as.integer(intToBits(x)))
  }), non_negative_numbers)]
  
  # Combine sorted negative and non-negative numbers
  c(negative_numbers, sorted_non_negative_numbers)
}","test_humaneval <- function() {
    candidate <- sort_array
    stopifnot(isTRUE(all.equal(candidate(c(1, 5, 2, 3, 4)), c(1, 2, 4, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(-2, -3, -4, -5, -6)), c(-4, -2, -6, -5, -3))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 2, 3, 4)), c(0, 1, 2, 4, 3))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)), c(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))))
    stopifnot(isTRUE(all.equal(candidate(c(3, 6, 44, 12, 32, 5)), c(32, 3, 5, 6, 12, 44))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8, 16, 32)), c(2, 4, 8, 16, 32))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8, 16, 32)), c(2, 4, 8, 16, 32))))
}
test_humaneval()"
HumanEval_117,yue_Hant,r,"譬如:注意:你可以假設輸入字符串只包含字母同空格.如果s字符串是空的,那么函数应该返回一个空的列表.n 個輔音,依序寫喺字串 s 裡面一個函數,返回一個包含正確的字符串 s 中所有單詞的列表给定一个字符串 s 和一个自然数 n,你被赋予执行任务# >>> select_words('Mary had a little lamb', 4)
# c('little')
# >>> select_words('Mary had a little lamb', 3)
# c('Mary', 'lamb')
# >>> select_words('simple white space', 2)
# c()
# >>> select_words('Hello world', 4)
# c('world')
# >>> select_words('Uncle sam', 3)
# c('Uncle')
select_words <- function(s, n) {","select_words <- function(s, n) {
  vowels <- c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
  words <- strsplit(s, "" "")[[1]]
  result <- sapply(words, function(word) {
    consonants_count <- nchar(gsub(paste(vowels, collapse = ""|""), """", word))
    if (consonants_count == n) return(word)
    else return(NULL)
  })
  result <- result[!sapply(result, is.null)]
  unname(result)
}","test_humaneval <- function() {
    candidate <- select_words
    stopifnot(isTRUE(all.equal(candidate('Mary had a little lamb', 4), c('little'))))
    stopifnot(isTRUE(all.equal(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))))
    stopifnot(isTRUE(all.equal(candidate('simple white space', 2), c())))
    stopifnot(isTRUE(all.equal(candidate('Hello world', 4), c('world'))))
    stopifnot(isTRUE(all.equal(candidate('Uncle sam', 3), c('Uncle'))))
    stopifnot(isTRUE(all.equal(candidate('', 4), c())))
    stopifnot(isTRUE(all.equal(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))))
}
test_humaneval()"
HumanEval_118,yue_Hant,r,"譬如..你可以假设给定的字符串只包含英文字母.搵出符合以上條件嘅母音開始同結束嘅母音唔計.如果冇,返回空嘅字串.兩個從詞嘅右邊開始嘅輔音 (大小寫字體敏感).你需要一個詞,一個詞之間最接近嘅單元# >>> get_closest_vowel('yogurt')
# 'u'
# >>> get_closest_vowel('FULL')
# 'U'
# >>> get_closest_vowel('quick')
# ''
# >>> get_closest_vowel('ab')
# ''
get_closest_vowel <- function(word) {","get_closest_vowel <- function(word) {
  vowels <- c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
  n <- nchar(word)
  
  # Iterate from the second to last position to the second position
  for (i in (n-1):2) {
    if (substr(word, i, i) %in% vowels) {
      if (!substr(word, i-1, i-1) %in% vowels && !substr(word, i+1, i+1) %in% vowels) {
        return(substr(word, i, i))
      }
    }
  }
  
  # Return empty string if no vowel is found
  return('')
}","test_humaneval <- function() {
    candidate <- get_closest_vowel
    stopifnot(isTRUE(all.equal(candidate('yogurt'), 'u')))
    stopifnot(isTRUE(all.equal(candidate('full'), 'u')))
    stopifnot(isTRUE(all.equal(candidate('easy'), '')))
    stopifnot(isTRUE(all.equal(candidate('eAsy'), '')))
    stopifnot(isTRUE(all.equal(candidate('ali'), '')))
    stopifnot(isTRUE(all.equal(candidate('bad'), 'a')))
    stopifnot(isTRUE(all.equal(candidate('most'), 'o')))
    stopifnot(isTRUE(all.equal(candidate('ab'), '')))
    stopifnot(isTRUE(all.equal(candidate('ba'), '')))
    stopifnot(isTRUE(all.equal(candidate('quick'), '')))
    stopifnot(isTRUE(all.equal(candidate('anime'), 'i')))
    stopifnot(isTRUE(all.equal(candidate('Asia'), '')))
    stopifnot(isTRUE(all.equal(candidate('Above'), 'o')))
}
test_humaneval()"
HumanEval_119,yue_Hant,r,"譬如:如果有辦法建立一個好嘅字符串,請返回""yes"",如果冇辦法,請返回""no""."" (()) ""唔係.例如:字符串""(((() ""是好的,而字符串""一個字符串 S 只有當所有 S 中的括號都被認為是好的,得到嘅字符串一定係好好嘅你的工作是检查是否可以将两个字符串连接到一起.只有括號"" (() ""或者括號"" ()) ""你有兩個字符串嘅列表, 兩個字符串都係由開頭組成嘅.# >>> match_parens(c('()(', ')'))
# 'Yes'
# >>> match_parens(c(')', ')'))
# 'No'
match_parens <- function(lst) {","match_parens <- function(lst) {
  is_balanced <- function(s) {
    balance <- 0
    for (ch in strsplit(s, """")[[1]]) {
      if (ch == '(') {
        balance <- balance + 1
      } else {
        balance <- balance - 1
      }
      if (balance < 0) return(FALSE)
    }
    return(balance == 0)
  }
  
  s1 <- lst[1]
  s2 <- lst[2]
  
  if (is_balanced(paste0(s1, s2)) || is_balanced(paste0(s2, s1))) {
    return('Yes')
  } else {
    return('No')
  }
}","test_humaneval <- function() {
    candidate <- match_parens
    stopifnot(isTRUE(all.equal(candidate(c('()(', ')')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c(')', ')')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c('(()(())', '())())')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c(')())', '(()()(')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c('(())))', '(()())((')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c('()', '())')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c('(()(', '()))()')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c('((((', '((())')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c(')(()', '(()(')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c(')(', ')(')), 'No')))
    stopifnot(isTRUE(all.equal(candidate(c('(', ')')), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate(c(')', '(')), 'Yes')))
}
test_humaneval()"
HumanEval_120,yue_Hant,r,"舉例一:代表最多數字 k 代表最多數字 k 代表最多數字 k给定一个整数的向量arr和一个正整数k,返回一个排序的列表.# >>> maximum(c(-3, -4, 5), 3)
# c(-4, -3, 5)
# Example 2:
# >>> maximum(c(4, -4, 4), 2)
# c(4, 4)
# Example 3:
# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)
# c(2)
# Note:
#     1. The length of the vector will be in the range of [1, 1000].
#     2. The elements in the vector will be in the range of [-1000, 1000].
#     3. 0 <= k <= len(arr)
maximum <- function(arr, k) {","maximum <- function(arr, k) {
  return(sort(tail(sort(arr), k)))
}","test_humaneval <- function() {
    candidate <- maximum
    stopifnot(isTRUE(all.equal(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(4, -4, 4), 2), c(4, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))))
    stopifnot(isTRUE(all.equal(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))))
    stopifnot(isTRUE(all.equal(candidate(c(-123, 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))))
    stopifnot(isTRUE(all.equal(candidate(c(5, 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 0, 5, -7), 1), c(5))))
    stopifnot(isTRUE(all.equal(candidate(c(4, -4), 2), c(-4, 4))))
    stopifnot(isTRUE(all.equal(candidate(c(-10, 10), 2), c(-10, 10))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, -23, 243, -400, 0), 0), c())))
}
test_humaneval()"
HumanEval_121,yue_Hant,r,"譬如話..给出一个非空的整数列表,返回所有偶数元素的和.# >>> solution(c(5, 8, 7, 1))
# 12
# >>> solution(c(3, 3, 3, 3, 3))
# 9
# >>> solution(c(30, 13, 24, 321))
# 0
solution <- function(lst) {","solution <- function(lst) {
  sum(lst[seq(2, length(lst), by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 != 0])
}","test_humaneval <- function() {
    candidate <- solution
    stopifnot(isTRUE(all.equal(candidate(c(5, 8, 7, 1)), 12)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 3, 3, 3, 3)), 9)))
    stopifnot(isTRUE(all.equal(candidate(c(30, 13, 24, 321)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(5, 9)), 5)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 8)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(30, 13, 23, 32)), 23)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 13, 2, 9)), 3)))
}
test_humaneval()"
HumanEval_122,yue_Hant,r,"譬如..元素的和,最多可以是从 arr 中第 k 个元素中取出两个数字.给定一个非空的整数向量 arr 和一个整数 k,返回 # >>> add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)
# 24
# Constraints:
#     1. 1 <= len(arr) <= 100
#     2. 1 <= k <= len(arr)
add_elements <- function(arr, k) {","add_elements <- function(arr, k) {
  sum(arr[1:k][nchar(abs(arr[1:k])) <= 2])
}","test_humaneval <- function() {
    candidate <- add_elements
    stopifnot(isTRUE(all.equal(candidate(c(1, -2, -3, 41, 57, 76, 87, 88, 99), 3), -4)))
    stopifnot(isTRUE(all.equal(candidate(c(111, 121, 3, 4000, 5, 6), 2), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(11, 21, 3, 90, 5, 6, 7, 8, 9), 4), 125)))
    stopifnot(isTRUE(all.equal(candidate(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4), 24)))
    stopifnot(isTRUE(all.equal(candidate(c(1), 1), 1)))
}
test_humaneval()"
HumanEval_123,yue_Hant,r,"get_odd_collatz(5) 返回[1, 5] # 对于5的collatz序列是[5, 16, 8, 4, 2, 1],所以奇数只有1和5.例如:2.返回嘅名單,按增加嘅順序排列.1. Collatz(1) 係 [1].注意:項加 1 根據推論,無論 n 有幾多值,序列總會達到 1如果前面的数为奇数,下一个数是前面的3倍.上一個項,如下:如果上一個項是偶數,下一個項是開始係任意一個正嘅整數n. 然後每一個項都取自於科拉茨推理係數學入面嘅一個推理 涉及到一個已定義嘅序列给定一个正整数 n,返回一个有奇数列表, 列出奇数列中的奇数.# >>> get_odd_collatz(5)
# c(1, 5)
get_odd_collatz <- function(n) {","get_odd_collatz <- function(n) {
  collatz_sequence <- function(n) {
    sequence <- c(n)
    while (n != 1) {
      if (n %% 2 == 0) {
        n <- n / 2
      } else {
        n <- 3 * n + 1
      }
      sequence <- c(sequence, n)
    }
    return(sequence)
  }
  
  sequence <- collatz_sequence(n)
  odd_numbers <- unique(sequence[sequence %% 2 != 0])
  return(sort(odd_numbers))
}","test_humaneval <- function() {
    candidate <- get_odd_collatz
    stopifnot(isTRUE(all.equal(candidate(14), c(1, 5, 7, 11, 13, 17))))
    stopifnot(isTRUE(all.equal(candidate(5), c(1, 5))))
    stopifnot(isTRUE(all.equal(candidate(12), c(1, 3, 5))))
    stopifnot(isTRUE(all.equal(candidate(1), c(1))))
}
test_humaneval()"
HumanEval_124,yue_Hant,r,"4.日期應該係以個月唔可以少過1個月,唔可以大過12個月.2,每月的日数不少于1或大于31天. 1,3,5,7,8,10,12. 每月的日数不少于1或大于30天. 4,6,9,11. 每月的日数不少于1或大于29天.1.日期字符串不是空的.假如符合下列所有规则,该日期是有效的:如果日期係有效,返回 TRUE,否則返回 FALSE.你需要寫一個函數嚟驗證一個已知日期字符串,然後# >>> valid_date('03-11-2000')
# TRUE
# >>> valid_date('15-01-2012')
# FALSE
# >>> valid_date('04-0-2040')
# FALSE
# >>> valid_date('06-04-2020')
# TRUE
# >>> valid_date('06/04/2020')
# FALSE
valid_date <- function(date) {","valid_date <- function(date) {
  # Check if the date is not empty
  if (date == """") {
    return(FALSE)
  }
  
  # Check the format of the date
  if (!grepl(""^\\d{2}-\\d{2}-\\d{4}$"", date)) {
    return(FALSE)
  }
  
  # Extract the month, day, and year
  parts <- unlist(strsplit(date, ""-""))
  month <- as.numeric(parts[1])
  day <- as.numeric(parts[2])
  year <- as.numeric(parts[3])
  
  # Check if the month is valid
  if (month < 1 || month > 12) {
    return(FALSE)
  }
  
  # Check if the day is valid
  if (month %in% c(1, 3, 5, 7, 8, 10, 12) && (day < 1 || day > 31)) {
    return(FALSE)
  }
  
  if (month %in% c(4, 6, 9, 11) && (day < 1 || day > 30)) {
    return(FALSE)
  }
  
  if (month == 2 && (day < 1 || day > 29)) {
    return(FALSE)
  }
  
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- valid_date
    stopifnot(isTRUE(all.equal(candidate('03-11-2000'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('15-01-2012'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-0-2040'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('06-04-2020'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('01-01-2007'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('03-32-2011'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-31-3000'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('06-06-2005'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('21-31-2000'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-12-2003'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('04122003'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('20030412'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2003-04'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2003-04-12'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('04-2003'), FALSE)))
}
test_humaneval()"
HumanEval_125,yue_Hant,r,"譬如話..字母表, 字母表""a""=0, 字母表""b""=1, ... 字母表""z""=25如果沒有逗號,你應該返回小寫字母數以奇數序列的數字.给定一串单词,返回一个单词列表,用空白划分,如果您的文本中没有空白,则返回一个单词列表.# >>> split_words('Hello world!')
# c('Hello', 'world!')
# >>> split_words('Hello,world!')
# c('Hello', 'world!')
# >>> split_words('abcdef')
# 3
split_words <- function(txt) {","split_words <- function(txt) {
  if (grepl(""\\s"", txt)) {
    return(strsplit(txt, ""\\s+"")[[1]])
  } else if (grepl("","", txt)) {
    return(strsplit(txt, "","")[[1]])
  } else {
    odd_order_count <- sum(
      sapply(unlist(strsplit(txt, """")), function(x) {
        ord <- utf8ToInt(tolower(x)) - utf8ToInt(""a"")
        ord %% 2 == 1
      })
    )
    return(odd_order_count)
  }
}","test_humaneval <- function() {
    candidate <- split_words
    stopifnot(isTRUE(all.equal(candidate('Hello world!'), c('Hello', 'world!'))))
    stopifnot(isTRUE(all.equal(candidate('Hello,world!'), c('Hello', 'world!'))))
    stopifnot(isTRUE(all.equal(candidate('Hello world,!'), c('Hello', 'world,!'))))
    stopifnot(isTRUE(all.equal(candidate('Hello,Hello,world !'), c('Hello,Hello,world', '!'))))
    stopifnot(isTRUE(all.equal(candidate('abcdef'), 3)))
    stopifnot(isTRUE(all.equal(candidate('aaabb'), 2)))
    stopifnot(isTRUE(all.equal(candidate('aaaBb'), 1)))
    stopifnot(isTRUE(all.equal(candidate(''), 0)))
}
test_humaneval()"
HumanEval_126,yue_Hant,r,"譬如話..假設無負數,只有整數.如果係同一份清單,重複嘅數字多過一個,列出一個數字列表,返回無論是否已排序.# >>> is_sorted(c(5))
# TRUE
# >>> is_sorted(c(1, 2, 3, 4, 5))
# TRUE
# >>> is_sorted(c(1, 3, 2, 4, 5))
# FALSE
# >>> is_sorted(c(1, 2, 3, 4, 5, 6))
# TRUE
# >>> is_sorted(c(1, 2, 3, 4, 5, 6, 7))
# TRUE
# >>> is_sorted(c(1, 3, 2, 4, 5, 6, 7))
# FALSE
# >>> is_sorted(c(1, 2, 2, 3, 3, 4))
# TRUE
# >>> is_sorted(c(1, 2, 2, 2, 3, 4))
# FALSE
is_sorted <- function(lst) {","is_sorted <- function(lst) {
  if (length(lst) <= 1) {
    return(TRUE)
  }
  
  # Check for duplicates more than once
  tbl <- table(lst)
  if (any(tbl > 2)) {
    return(FALSE)
  }
  
  # Check if the list is sorted in ascending order
  for (i in 2:length(lst)) {
    if (lst[i] < lst[i - 1]) {
      return(FALSE)
    }
  }
  
  return(TRUE)
}","test_humaneval <- function() {
    candidate <- is_sorted
    stopifnot(isTRUE(all.equal(candidate(c(5)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5, 6, 7)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c()), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 1)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, 2, 3, 4)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 3, 3, 4)), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, 3, 3, 4)), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4)), TRUE)))
}
test_humaneval()"
HumanEval_127,yue_Hant,r,"[輸入/輸出] 樣本:如果兩個區間沒有交叉,返回""NO"".否則返回""NO"".如果交叉點嘅長度係一個素數,返回""YES"",长度为1的数,不算是素数.譬如, (1,3) (2,4) 嘅交點係 (2,3)个数的区间是个素数.你嘅任務就係搵出 呢兩點之間嘅交叉點嘅長短假設每一個特定嘅時間段, 開始嘅時間段大於,或者等於結束嘅時間段.包含開始同結束嘅時間.既定嘅時間段係閉嘅,意思係話,時間段 (開始,結束) 已被加上每一個區間都係一對整數,例如,區間= (開始,結束) = (1,2).你有兩個時間,# >>> intersection(c(1, 2), c(2, 3))
# 'NO'
# >>> intersection(c(-1, 1), c(0, 4))
# 'NO'
# >>> intersection(c(-3, -1), c(-5, 5))
# 'YES'
intersection <- function(interval1, interval2) {","intersection <- function(interval1, interval2) {
  start1 <- interval1[1]
  end1 <- interval1[2]
  start2 <- interval2[1]
  end2 <- interval2[2]
  
  # Determine the start and end of the intersection
  intersection_start <- max(start1, start2)
  intersection_end <- min(end1, end2)
  
  # Calculate the length of the intersection
  length_of_intersection <- intersection_end - intersection_start
  
  # If there's no intersection, return ""NO""
  if (length_of_intersection < 0) {
    return('NO')
  }
  
  # Check if the length is a prime number
  is_prime <- function(num) {
    if (num <= 1) {
      return(FALSE)
    }
    for (i in 2:sqrt(num)) {
      if (num %% i == 0) {
        return(FALSE)
      }
    }
    return(TRUE)
  }
  
  # Return ""YES"" if the length is prime, otherwise ""NO""
  if (is_prime(length_of_intersection)) {
    return('YES')
  } else {
    return('NO')
  }
}","test_humaneval <- function() {
    candidate <- intersection
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(2, 3)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1), c(0, 4)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(-3, -1), c(-5, 5)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(-2, 2), c(-4, 0)), 'YES')))
    stopifnot(isTRUE(all.equal(candidate(c(-11, 2), c(-1, -1)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(3, 5)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2), c(1, 2)), 'NO')))
    stopifnot(isTRUE(all.equal(candidate(c(-2, -2), c(-3, -2)), 'NO')))
}
test_humaneval()"
HumanEval_128,yue_Hant,r,"譬如..注意: return NULL for empty arr. 返回空的arr. 返回空的arr. 返回空的arr.每個數字嘅向量,表示為1,-1 或者 0.整數嘅倍數加所有符號嘅積你得到一個向量,一個整數的數列,你需要返回# >>> prod_signs(c(1, 2, 2, -4))
# 9
# >>> prod_signs(c(0, 1))
# 0
# >>> prod_signs(c())
# NULL
prod_signs <- function(arr) {","prod_signs <- function(arr) {
  if (length(arr) == 0) {
    return(NULL)
  }
  magnitude_sum <- sum(abs(arr))
  sign_product <- prod(sign(arr))
  return(magnitude_sum * sign_product)
}","test_humaneval <- function() {
    candidate <- prod_signs
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 2, -4)), -9)))
    stopifnot(isTRUE(all.equal(candidate(c(0, 1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)))
    stopifnot(isTRUE(all.equal(candidate(c()), NULL)))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, -1, 1)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, 1, 1)), -4)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 1, 1, 0)), 0)))
}
test_humaneval()"
HumanEval_129,yue_Hant,r,"譬如:返回最小路径经过的单元格的值的排序列表.答案肯定係唯一嘅lst_A[j] = lst_B[j].所以 lst_A[i] < lst_B[i] 對於任意一個 j (1 <= j < i) 我們有換句話講,有個整數指數 i (1 <= i <= k)通過 (讓我們稱為 lst_A 和 lst_B), lst_A 在詞典上比較少列出A,B 单元格的数值,然后再按顺序列出如果路径A (长度为k) 较路径B (长度为k) 短,则你唔可以喺網頁度消失.兩者都未必係同一種).請留意,一個長度為 k 的路徑意味著參觀的細胞數量確實是 k (而不是 細胞.換句話講,你可以去到 同你有同樣嘅電流邊緣嘅細胞從任何一個細胞,每一步你都可以移到任何一個鄰近嘅細胞,你需要喺網格度搵一個最短 k 條長嘅路徑inclusive 喺網格嘅單元格上面出現一次每個格子嘅單元格都包含一個值.每個係 [1,N * N] 範圍嘅整數给定一个有N行和N列 (N >=2) 的网格,以及一个正整数k,# >>> minPath(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3)
# c(1, 2, 1)
# >>> minPath(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1)
# c(1)
minPath <- function(grid, k) {","minPath <- function(grid, k) {
  N <- length(grid)
  directions <- list(c(0, 1), c(1, 0), c(0, -1), c(-1, 0))
  
  is_valid <- function(x, y) {
    return(x >= 1 && x <= N && y >= 1 && y <= N)
  }
  
  # DFS to find all paths
  dfs <- function(x, y, path) {
    if (length(path) == k) {
      paths <<- append(paths, list(path))
      return()
    }
    
    for (direction in directions) {
      nx <- x + direction[1]
      ny <- y + direction[2]
      if (is_valid(nx, ny)) {
        dfs(nx, ny, c(path, grid[[nx]][[ny]]))
      }
    }
  }
  
  paths <- list()
  
  # Start from every cell
  for (i in 1:N) {
    for (j in 1:N) {
      dfs(i, j, c(grid[[i]][[j]]))
    }
  }
  
  # Find and return the lexicographically smallest path
  min_path <- paths[[1]]
  for (path in paths) {
    if (path < min_path) {
      min_path <- path
    }
  }
  
  return(min_path)
}","test_humaneval <- function() {
    candidate <- minPath
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3), c(1, 2, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1), c(1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2, 3, 4), c(5, 6, 7, 8), c(9, 10, 11, 12), c(13, 14, 15, 16)), 4), c(1, 2, 1, 2))))
    stopifnot(isTRUE(all.equal(candidate(list(c(6, 4, 13, 10), c(5, 7, 12, 1), c(3, 16, 11, 15), c(8, 14, 9, 2)), 7), c(1, 10, 1, 10, 1, 10, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(8, 14, 9, 2), c(6, 4, 13, 15), c(5, 7, 1, 12), c(3, 10, 11, 16)), 5), c(1, 7, 1, 7, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(11, 8, 7, 2), c(5, 16, 14, 4), c(9, 3, 15, 6), c(12, 13, 10, 1)), 9), c(1, 6, 1, 6, 1, 6, 1, 6, 1))))
    stopifnot(isTRUE(all.equal(candidate(list(c(12, 13, 10, 1), c(9, 3, 15, 6), c(5, 16, 14, 4), c(11, 8, 7, 2)), 12), c(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6))))
    stopifnot(isTRUE(all.equal(candidate(list(c(2, 7, 4), c(3, 1, 5), c(6, 8, 9)), 8), c(1, 3, 1, 3, 1, 3, 1, 3))))
    stopifnot(isTRUE(all.equal(candidate(list(c(6, 1, 5), c(3, 8, 9), c(2, 7, 4)), 8), c(1, 5, 1, 5, 1, 5, 1, 5))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 2), c(3, 4)), 10), c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2))))
    stopifnot(isTRUE(all.equal(candidate(list(c(1, 3), c(3, 2)), 10), c(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))))
}
test_humaneval()"
HumanEval_130,yue_Hant,r,"譬如:第一個n+1個Tribonacci序列數字.给你一个非负数整数 n,你必须返回一个列表兩個加三個加三個等於八個三三 = 三二 + 三一 + 三四tri(4) = 3 tri(2) = 1 + (2 / 2) = 2 例如:如果 n 係奇數, tri (n-1) = tri (n-1) + tri (n-2) + tri (n-1)如果 n 是偶数, tri (n) = 1 + n / 2tri(1) = 3 黎波納奇序列嘅定義係:但係啲人唔知,究竟係咩係""特里波納契序列""每個人都知道斐波那契序列, 它是由数学家们在1950年深入研究的.# >>> tri(3)
# c(1, 3, 2, 8)
tri <- function(n) {","tri <- function(n) {
  if (n == 0) return(c(3))
  
  tribonacci <- numeric(n + 1)
  tribonacci[1] <- 3
  
  for (i in 2:(n + 1)) {
    if (i %% 2 == 0) {
      tribonacci[i] <- 1 + i / 2
    } else {
      if (i == 3) {
        tribonacci[i] <- tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]  # tri(3) requires tri(4)
      } else {
        # When i > 3 and i is odd, dependencies are always available
        tribonacci[i] <- tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3 + 2]  # i + 1 becomes i - 3 + 2
      }
    }
  }
  
  return(tribonacci)
}","test_humaneval <- function() {
    candidate <- tri
    stopifnot(isTRUE(all.equal(candidate(3), c(1, 3, 2, 8))))
    stopifnot(isTRUE(all.equal(candidate(4), c(1, 3, 2, 8, 3))))
    stopifnot(isTRUE(all.equal(candidate(5), c(1, 3, 2, 8, 3, 15))))
    stopifnot(isTRUE(all.equal(candidate(6), c(1, 3, 2, 8, 3, 15, 4))))
    stopifnot(isTRUE(all.equal(candidate(7), c(1, 3, 2, 8, 3, 15, 4, 24))))
    stopifnot(isTRUE(all.equal(candidate(8), c(1, 3, 2, 8, 3, 15, 4, 24, 5))))
    stopifnot(isTRUE(all.equal(candidate(9), c(1, 3, 2, 8, 3, 15, 4, 24, 5, 35))))
    stopifnot(isTRUE(all.equal(candidate(20), c(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11))))
    stopifnot(isTRUE(all.equal(candidate(0), c(1))))
    stopifnot(isTRUE(all.equal(candidate(1), c(1, 3))))
}
test_humaneval()"
HumanEval_131,yue_Hant,r,"例如:如果所有數字都係偶數,返回0给定一个正整数 n,返回奇数的乘积.# >>> digits(1)
# 1
# >>> digits(4)
# 0
# >>> digits(235)
# 15
digits <- function(n) {","digits <- function(n) {
  # Convert the number to a character vector
  digits_vector <- unlist(strsplit(as.character(n), """"))
  
  # Convert the character vector back to numeric
  digits_vector <- as.numeric(digits_vector)
  
  # Filter out the odd digits
  odd_digits <- digits_vector[digits_vector %% 2 != 0]
  
  # If all digits are even, return 0
  if (length(odd_digits) == 0) {
    return(0)
  }
  
  # Calculate and return the product of odd digits
  return(prod(odd_digits))
}","test_humaneval <- function() {
    candidate <- digits
    stopifnot(isTRUE(all.equal(candidate(5), 5)))
    stopifnot(isTRUE(all.equal(candidate(54), 5)))
    stopifnot(isTRUE(all.equal(candidate(120), 1)))
    stopifnot(isTRUE(all.equal(candidate(5014), 5)))
    stopifnot(isTRUE(all.equal(candidate(98765), 315)))
    stopifnot(isTRUE(all.equal(candidate(5576543), 2625)))
    stopifnot(isTRUE(all.equal(candidate(2468), 0)))
}
test_humaneval()"
HumanEval_132,yue_Hant,r,"字母串嘅至少一個括號係嵌套嘅.如果只有一個有效的括號子序列,函數應該返回TRUE.建立一個函數,以字符串為輸入,而字符串只包含方括號.# >>> is_nested('[[]]')
# TRUE
# >>> is_nested('[]]]]]]][[[[[]')
# FALSE
# >>> is_nested('[][]')
# FALSE
# >>> is_nested('[]')
# FALSE
# >>> is_nested('[[][]]')
# TRUE
# >>> is_nested('[[]][[')
# TRUE
is_nested <- function(string) {","is_nested <- function(string) {
  open_count <- 0
  for (char in unlist(strsplit(string, """"))) {
    if (char == ""["") {
      open_count <- open_count + 1
    } else if (char == ""]"") {
      if (open_count > 1) {
        return(TRUE)
      }
      open_count <- open_count - 1
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- is_nested
    stopifnot(isTRUE(all.equal(candidate('[[]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[]]]]]]][[[[[]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[][]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[[[[]]]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[]]]]]]]]]]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[][][[]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[[]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[]]'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[[]][['), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('[[][]]'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('[[[[[[[['), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(']]]]]]]]'), FALSE)))
}
test_humaneval()"
HumanEval_133,yue_Hant,r,"譬如:首先將列表中的每一個元素成一個最上面嘅數字你需要返回给定的数列表中的平方数的和,你會得到一個電話號碼清單.# >>> lst(c(1.0, 2.0, 3.0))
# 14
# >>> lst(c(1.0, 4.0, 9.0))
# 98
# >>> lst(c(1.0, 3.0, 5.0, 7.0))
# 84
# >>> lst(c(1.4, 4.2, 0.0))
# 29
# >>> lst(c(-2.4, 1.0, 1.0))
# 6
sum_squares <- function(lst) {","sum_squares <- function(lst) {
  sum(ceiling(lst)^2)
}","test_humaneval <- function() {
    candidate <- sum_squares
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0)), 14)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 2.0, 3.0)), 14)))
    stopifnot(isTRUE(all.equal(candidate(c(1.0, 3.0, 5.0, 7.0)), 84)))
    stopifnot(isTRUE(all.equal(candidate(c(1.4, 4.2, 0.0)), 29)))
    stopifnot(isTRUE(all.equal(candidate(c(-2.4, 1.0, 1.0)), 6)))
    stopifnot(isTRUE(all.equal(candidate(c(100.0, 1.0, 15.0, 2.0)), 10230)))
    stopifnot(isTRUE(all.equal(candidate(c(10000.0, 10000.0)), 200000000)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.4, 4.6, 6.3)), 75)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.4, 17.9, 18.9, 19.9)), 1086)))
    stopifnot(isTRUE(all.equal(candidate(c(0.0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.0)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.0, 1.0, 0.0)), 2)))
}
test_humaneval()"
HumanEval_134,yue_Hant,r,"譬如:注意:""word""係由空格隔開嘅字符組.單詞嘅一部分,而其他話系錯嘅.某個字符串嘅一個字母係個字母符 而唔係個字母如果最後一個字符是 的話 ,建立一個函數,返回 TRUE# >>> check_if_last_char_is_a_letter('apple pie')
# FALSE
# >>> check_if_last_char_is_a_letter('apple pi e')
# TRUE
# >>> check_if_last_char_is_a_letter('apple pi e ')
# FALSE
# >>> check_if_last_char_is_a_letter('')
# FALSE
check_if_last_char_is_a_letter <- function(txt) {","check_if_last_char_is_a_letter <- function(txt) {
  # Trim any trailing whitespace
  trimmed_txt <- trimws(txt, which = ""right"")
  
  # If the trimmed text is empty, return FALSE
  if (nchar(trimmed_txt) == 0) {
    return(FALSE)
  }
  
  # Get the last character
  last_char <- substr(trimmed_txt, nchar(trimmed_txt), nchar(trimmed_txt))
  
  # Check if the last character is an alphabetical character
  if (grepl(""[a-zA-Z]"", last_char)) {
    # Split the text by spaces
    words <- strsplit(trimmed_txt, "" "")[[1]]
    # Get the last word
    last_word <- tail(words, n = 1)
    # If last character is the only character in the last ""word"", return TRUE
    # Otherwise, it is part of a word, return FALSE
    return(nchar(last_word) == 1)
  }
  
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- check_if_last_char_is_a_letter
    stopifnot(isTRUE(all.equal(candidate('apple'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('apple pi e'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('eeeee'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('A'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('Pumpkin pie '), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('Pumpkin pie 1'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(''), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('eeeee e '), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('apple pie'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('apple pi e '), FALSE)))
}
test_humaneval()"
HumanEval_135,yue_Hant,r,"譬如:值重複.如果無任何元素,返回 -1. 既定向量不會包含唔係大過,亦唔係等於即時先前嘅元素.如果建立一個函數,返回一個元素的最大索引,# >>> can_arrange(c(1, 2, 4, 3, 5))
# 3
# >>> can_arrange(c(1, 2, 3))
# -1
can_arrange <- function(arr) {","can_arrange <- function(arr) {
  for (i in seq(length(arr) - 1, 1)) {
    if (arr[i] > arr[i + 1]) {
      return(i)
    }
  }
  return(-1)
}","test_humaneval <- function() {
    candidate <- can_arrange
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 3, 5)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 4, 5)), -1)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 2, 5, 6, 7, 8, 9, 10)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(4, 8, 5, 7, 3)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c()), -1)))
}
test_humaneval()"
HumanEval_136,yue_Hant,r,"譬如:如果無負數或正數,請將其返回為NULL.列表中正整數嘅數值.負數中最大嘅數字,b是最小嘅數字建立一個函數,返回一個列表 (a,b),其中""a""為# >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))
# list(NULL, 1)
# >>> largest_smallest_integers(c())
# list(NULL, NULL)
# >>> largest_smallest_integers(c(0))
# list(NULL, NULL)
largest_smallest_integers <- function(lst) {","largest_smallest_integers <- function(lst) {
  negatives <- lst[lst < 0]
  positives <- lst[lst > 0]
  
  largest_negative <- if(length(negatives) > 0) max(negatives) else NULL
  smallest_positive <- if(length(positives) > 0) min(positives) else NULL
  
  list(largest_negative, smallest_positive)
}","test_humaneval <- function() {
    candidate <- largest_smallest_integers
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 3, 5, 7)), list(NULL, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(2, 4, 1, 3, 5, 7, 0)), list(NULL, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 3, 2, 4, 5, 6, -2)), c(-2, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(4, 5, 3, 6, 2, 7, -7)), c(-7, 2))))
    stopifnot(isTRUE(all.equal(candidate(c(7, 3, 8, 4, 9, 2, 5, -9)), c(-9, 2))))
    stopifnot(isTRUE(all.equal(candidate(c()), list(NULL, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(0)), list(NULL, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, -5, -6)), list(-1, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, -5, -6, 0)), list(-1, NULL))))
    stopifnot(isTRUE(all.equal(candidate(c(-6, -4, -4, -3, 1)), c(-3, 1))))
    stopifnot(isTRUE(all.equal(candidate(c(-6, -4, -4, -3, -100, 1)), c(-3, 1))))
}
test_humaneval()"
HumanEval_137,yue_Hant,r,"注意:如果一個實數被表示成一個字符串,浮點可能是 . 或者 , 如果值是相同的,返回NULL.返回最大嘅變量,以它所屬變量類型.建立一個函數,以整數,浮數,或串表示# >>> compare_one(1, 2.5)
# 2.5
# >>> compare_one(1, '2,3')
# '2,3'
# >>> compare_one('5,1', '6')
# '6'
# >>> compare_one('1', 1)
# NULL
compare_one <- function(a, b) {","compare_one <- function(a, b) {
  to_number <- function(x) {
    if (is.character(x)) {
      x <- gsub("","", ""."", x)
      as.numeric(x)
    } else {
      as.numeric(x)
    }
  }
  
  a_num <- to_number(a)
  b_num <- to_number(b)
  
  if (a_num == b_num) {
    return(NULL)
  } else if (a_num > b_num) {
    return(a)
  } else {
    return(b)
  }
}","test_humaneval <- function() {
    candidate <- compare_one
    stopifnot(isTRUE(all.equal(candidate(1, 2), 2)))
    stopifnot(isTRUE(all.equal(candidate(1, 2.5), 2.5)))
    stopifnot(isTRUE(all.equal(candidate(2, 3), 3)))
    stopifnot(isTRUE(all.equal(candidate(5, 6), 6)))
    stopifnot(isTRUE(all.equal(candidate(1, '2,3'), '2,3')))
    stopifnot(isTRUE(all.equal(candidate('5,1', '6'), '6')))
    stopifnot(isTRUE(all.equal(candidate('1', '2'), '2')))
    stopifnot(isTRUE(all.equal(candidate('1', 1), NULL)))
}
test_humaneval()"
HumanEval_138,yue_Hant,r,"舉例試想下,有沒有 n 可以寫成正 4 個正偶數的總和?# >>> is_equal_to_sum_even(4)
# FALSE
# >>> is_equal_to_sum_even(6)
# FALSE
# >>> is_equal_to_sum_even(8)
# TRUE
is_equal_to_sum_even <- function(n) {","is_equal_to_sum_even <- function(n) {
  if (n <= 0 || n %% 2 != 0 || n < 8) {
    return(FALSE)
  }
  remaining_sum <- n
  count <- 0
  for (i in seq(2, n, by = 2)) {
    if (remaining_sum - i >= 2 * (4 - count - 1)) {
      remaining_sum <- remaining_sum - i
      count <- count + 1
    }
    if (count == 4) {
      return(TRUE)
    }
  }
  return(FALSE)
}

# Examples
is_equal_to_sum_even(4)   # FALSE
is_equal_to_sum_even(6)   # FALSE
is_equal_to_sum_even(8)   # TRUE","test_humaneval <- function() {
    candidate <- is_equal_to_sum_even
    stopifnot(isTRUE(all.equal(candidate(4), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(6), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(8), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(10), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(11), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(12), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(13), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(16), TRUE)))
}
test_humaneval()"
HumanEval_139,yue_Hant,r,"例如:喺呢度,n > 0brazilian_factorial (n) = n! (n-1)! (n-2)! (n-1)! (n-1)! (n-1)! (n-2)! (n-1)! (n-1)! (n-1)! (n-1)! (n-1)! (n-1)! (n-1)! (n-1)! (n-1)! (n-1)!)巴西因數系式的定義為:# >>> special_factorial(4)
# 288
# The function will receive an integer as input and should return the special
# factorial of this integer.
special_factorial <- function(n) {","special_factorial <- function(n) {
  result <- 1
  for (i in 1:n) {
    result <- result * factorial(i)
  }
  return(result)
}","test_humaneval <- function() {
    candidate <- special_factorial
    stopifnot(isTRUE(all.equal(candidate(4), 288)))
    stopifnot(isTRUE(all.equal(candidate(5), 34560)))
    stopifnot(isTRUE(all.equal(candidate(7), 125411328000)))
    stopifnot(isTRUE(all.equal(candidate(1), 1)))
}
test_humaneval()"
HumanEval_140,yue_Hant,r,"然後將所有連續嘅空格替換成 - 如果一個字符串有超過兩個連續的空格,给定一条文字串,用字符串的底线来代替所有的空格,# >>> fix_spaces(' Example')
# 'Example'
# >>> fix_spaces(' Example 1')
# 'Example_1'
# >>> fix_spaces(' Example 2')
# '_Example_2'
# >>> fix_spaces(' Example 3')
# '_Example-3'
fix_spaces <- function(text) {","fix_spaces <- function(text) {
  # Trim leading and trailing spaces
  text <- trimws(text)
  # Replace 3 or more consecutive spaces with a dash
  text <- gsub("" {3,}"", ""-"", text)
  # Replace remaining spaces with underscores
  text <- gsub("" "", ""_"", text)
  return(text)
}","test_humaneval <- function() {
    candidate <- fix_spaces
    stopifnot(isTRUE(all.equal(candidate('Example'), 'Example')))
    stopifnot(isTRUE(all.equal(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')))
    stopifnot(isTRUE(all.equal(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')))
    stopifnot(isTRUE(all.equal(candidate('Exa   mple'), 'Exa-mple')))
    stopifnot(isTRUE(all.equal(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')))
}
test_humaneval()"
HumanEval_141,yue_Hant,r,"譬如:- - 點之後嘅字符串應該係其中一個: ['txt', 'exe', 'dll']拉丁字母 (a-z,A-Z) - - 之前的子字符串不应该是空的,它以字母从 开始- 文件名包含一個點 ""'- 文件名不應該超過三個數字 (0 - 9)符合:文件名稱如果符合下列所有條件,且只有在此情況下才會被認為為有效:如果文件名稱係有效,則返回""是"" 否則返回""否"".建立一個函數,它會取一個字符串來表示一個檔案的名稱,並返回# >>> file_name_check('example.txt')
# 'Yes'
# >>> file_name_check('1example.dll')
# 'No'
file_name_check <- function(file_name) {","file_name_check <- function(file_name) {
  # Split the file name into the name part and the extension part
  parts <- strsplit(file_name, ""\\."", fixed = TRUE)[[1]]
  
  # Check there is exactly one dot
  if (length(parts) != 2) {
    return('No')
  }
  
  # Extract the name and extension
  name_part <- parts[1]
  ext_part <- parts[2]
  
  # Check the extension is valid
  if (!(ext_part %in% c('txt', 'exe', 'dll'))) {
    return('No')
  }
  
  # Check the name part is not empty and starts with a letter
  if (nchar(name_part) == 0 || !grepl(""^[A-Za-z]"", name_part)) {
    return('No')
  }
  
  # Count digits in the name part
  digit_count <- nchar(gsub(""[^0-9]"", """", name_part))
  
  # Check there are no more than three digits
  if (digit_count > 3) {
    return('No')
  }
  
  return('Yes')
}","test_humaneval <- function() {
    candidate <- file_name_check
    stopifnot(isTRUE(all.equal(candidate('example.txt'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('1example.dll'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('s1sdf3.asd'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('K.dll'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('MY16FILE3.exe'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('His12FILE94.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('_Y.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('?aREYA.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('/this_is_valid.dll'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('this_is_valid.wow'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('this_is_valid.txt'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('this_is_valid.txtexe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('#this2_i4s_5valid.ten'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('@this1_is6_valid.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('this_is_12valid.6exe4.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('all.exe.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('I563_No.exe'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('Is3youfault.txt'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('no_one#knows.dll'), 'Yes')))
    stopifnot(isTRUE(all.equal(candidate('1I563_Yes3.exe'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('I563_Yes3.txtt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('final..txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('final132'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('_f4indsartal132.'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('.txt'), 'No')))
    stopifnot(isTRUE(all.equal(candidate('s.'), 'No')))
}
test_humaneval()"
HumanEval_142,yue_Hant,r,"譬如:函数将返回所有项的和. 函数将返回所有项的和. 函数将返回所有项的和.如果佢係 3 嘅倍數 而唔係 4 嘅倍數,佢就會立方化整數呢個函數會取一個整數列表.如果函數的索引是 a,則函數會對列表中的所有項來說,將整數項加到平方."" 哩個就係# >>> lst
# c(1, 2, 3)
# >>> lst
# c()
# >>> lst
# c(-1, -5, 2, -1, -5)
sum_squares <- function(lst) {","sum_squares <- function(lst) {
  lst <- sapply(seq_along(lst), function(i) {
    if (i %% 3 == 0) {
      return(lst[i]^2)
    } else if (i %% 4 == 0) {
      return(lst[i]^3)
    } else {
      return(lst[i])
    }
  })
  return(sum(lst))
}","test_humaneval <- function() {
    candidate <- sum_squares
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3)), 6)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 4, 9)), 14)))
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(1, 1, 1, 1, 1, 1, 1, 1, 1)), 9)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -1, -1, -1, -1, -1, -1, -1, -1)), -3)))
    stopifnot(isTRUE(all.equal(candidate(c(0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -5, 2, -1, -5)), -126)))
    stopifnot(isTRUE(all.equal(candidate(c(-56, -99, 1, 0, -2)), 3030)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, 0, 0, 0, 0, 0, 0, 0, -1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)), -14196)))
    stopifnot(isTRUE(all.equal(candidate(c(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)), -1448)))
}
test_humaneval()"
HumanEval_143,yue_Hant,r,"舉例一:字串嘅排序應該與原始字串一樣.它们的长度是素数,你需要返回一個包含 句子嘅字符串,句子包含有字母,用空格隔開,你得到一個詞串,代表一個句子,# >>> words_in_sentence('This is a test')
# 'is'
# Example 2:
# >>> words_in_sentence('lets go for swimming')
# 'go for'
# Constraints:
#     * 1 <= len(sentence) <= 100
#     * sentence contains only letters
words_in_sentence <- function(sentence) {","words_in_sentence <- function(sentence) {
  is_prime <- function(n) {
    if (n <= 1) return(FALSE)
    if (n == 2) return(TRUE)
    for (i in 2:sqrt(n)) {
      if (n %% i == 0) return(FALSE)
    }
    return(TRUE)
  }
  
  words <- strsplit(sentence, "" "")[[1]]
  prime_words <- words[sapply(words, function(word) is_prime(nchar(word)))]
  return(paste(prime_words, collapse = "" ""))
}","test_humaneval <- function() {
    candidate <- words_in_sentence
    stopifnot(isTRUE(all.equal(candidate('This is a test'), 'is')))
    stopifnot(isTRUE(all.equal(candidate('lets go for swimming'), 'go for')))
    stopifnot(isTRUE(all.equal(candidate('there is no place available here'), 'there is no place')))
    stopifnot(isTRUE(all.equal(candidate('Hi I am Hussein'), 'Hi am Hussein')))
    stopifnot(isTRUE(all.equal(candidate('go for it'), 'go for it')))
    stopifnot(isTRUE(all.equal(candidate('here'), '')))
    stopifnot(isTRUE(all.equal(candidate('here is'), 'is')))
}
test_humaneval()"
HumanEval_144,yue_Hant,r,"你可以假设 x,n 都是有效的分数,并且没有0作为分母.數字和分母都是正整數所以 x 同 n 都係一個數字串嘅分數,同埋有以下形式,x * n 如果 x * n 值为整数且值为 FALSE 则函数返回 TRUE你嘅任務就係要實現一個函數, 來簡化表達式.# >>> simplify('1/5', '5/1')
# TRUE
# >>> simplify('1/6', '2/1')
# FALSE
# >>> simplify('7/10', '10/2')
# FALSE
simplify <- function(x, n) {","simplify <- function(x, n) {
  parse_fraction <- function(fraction) {
    parts <- strsplit(fraction, ""/"")[[1]]
    return(as.numeric(parts[1]) / as.numeric(parts[2]))
  }
  
  x_value <- parse_fraction(x)
  n_value <- parse_fraction(n)
  
  product <- x_value * n_value
  
  # Check if the product is a whole number
  return(product == floor(product))
}","test_humaneval <- function() {
    candidate <- simplify
    stopifnot(isTRUE(all.equal(candidate('1/5', '5/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('1/6', '2/1'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('5/1', '3/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('7/10', '10/2'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2/10', '50/10'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('7/2', '4/2'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('11/6', '6/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('2/3', '5/2'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('5/2', '3/5'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('2/4', '8/4'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('2/4', '4/2'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('1/5', '5/1'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('1/5', '1/5'), FALSE)))
}
test_humaneval()"
HumanEval_145,yue_Hant,r,"例如:根據佢哋原本嘅名單排序注意:如果有幾個項目嘅數字和相似,根據數字嘅總和排列.寫一個函數來排序數列# >>> order_by_points(c(1, 11, -1, -11, -12))
# c(-1, -11, 1, -12, 11)
# >>> order_by_points(c())
# c()
order_by_points <- function(nums) {","order_by_points <- function(nums) {
  # Helper function to calculate the sum of digits
  sum_of_digits <- function(n) {
    sum(as.integer(unlist(strsplit(as.character(abs(n)), """"))))
  }
  
  # Order the numbers based on the sum of their digits first, 
  # and then by their original index
  indices <- seq_along(nums)
  nums[order(sapply(nums, sum_of_digits), indices)]
}","test_humaneval <- function() {
    candidate <- order_by_points
    stopifnot(isTRUE(all.equal(candidate(c(1, 11, -1, -11, -12)), c(-1, -11, 1, -12, 11))))
    stopifnot(isTRUE(all.equal(candidate(c(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), c(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))))
    stopifnot(isTRUE(all.equal(candidate(c()), c())))
    stopifnot(isTRUE(all.equal(candidate(c(1, -11, -32, 43, 54, -98, 2, -3)), c(-3, -32, -98, -11, 1, 2, 43, 54))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), c(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))))
    stopifnot(isTRUE(all.equal(candidate(c(0, 6, 6, -76, -21, 23, 4)), c(-76, -21, 0, 4, 23, 6, 6))))
}
test_humaneval()"
HumanEval_146,yue_Hant,r,"例如:一個數字嘅第一個和最後一個數字是奇數 (1, 3, 5, 7, 9).矢量中元素的数量大于10的元素和两个元素的数量寫一個函數, 取一個數的向量來做輸入, 然後返回# >>> specialFilter(c(15, -73, 14, -15))
# 1
# >>> specialFilter(c(33, -2, -3, 45, 21, 109))
# 2
specialFilter <- function(nums) {","specialFilter <- function(nums) {
  # Helper function to check if both first and last digits are odd
  are_first_last_digits_odd <- function(x) {
    str_num <- as.character(abs(x))
    first_digit <- as.numeric(substr(str_num, 1, 1))
    last_digit <- as.numeric(substr(str_num, nchar(str_num), nchar(str_num)))
    first_digit %% 2 == 1 && last_digit %% 2 == 1
  }

  # Filter numbers greater than 10 with both first and last digits odd
  filtered_nums <- nums[nums > 10 & sapply(nums, are_first_last_digits_odd)]
  
  # Return the count of such numbers
  length(filtered_nums)
}","test_humaneval <- function() {
    candidate <- specialFilter
    stopifnot(isTRUE(all.equal(candidate(c(5, -2, 1, -5)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(15, -73, 14, -15)), 1)))
    stopifnot(isTRUE(all.equal(candidate(c(33, -2, -3, 45, 21, 109)), 2)))
    stopifnot(isTRUE(all.equal(candidate(c(43, -12, 93, 125, 121, 109)), 4)))
    stopifnot(isTRUE(all.equal(candidate(c(71, -2, -33, 75, 21, 19)), 3)))
    stopifnot(isTRUE(all.equal(candidate(c(1)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
}
test_humaneval()"
HumanEval_147,yue_Hant,r,"譬如:a[i] + a[j] + a[k] 係 3 嘅倍數返回i < j < k, 值的三倍数 (a[i], a[j], a[k])對於每個i (1 ≤ i ≤ n) 來說,a[i]=i * i - i + 1的值.你得到一个正整数 n.你必须创建一个长度为 n 的整数向量 a.#     >>> get_max_triples(5)
#     1
# Explanation: 
# a = [1, 3, 7, 13, 21]
# The only valid triple is (1, 7, 13).
get_max_triples <- function(n) {","get_max_triples <- function(n) {
  # Create the vector a according to the given rule
  a <- sapply(1:n, function(i) i * i - i + 1)
  
  # Initialize the count of valid triples
  count <- 0
  
  # Iterate over all possible triples (i, j, k) with i < j < k
  for (i in 1:(n-2)) {
    for (j in (i+1):(n-1)) {
      for (k in (j+1):n) {
        # Check if the sum of the selected triple is a multiple of 3
        if ((a[i] + a[j] + a[k]) %% 3 == 0) {
          count <- count + 1
        }
      }
    }
  }
  
  # Return the count of valid triples
  return(count)
}","test_humaneval <- function() {
    candidate <- get_max_triples
    stopifnot(isTRUE(all.equal(candidate(5), 1)))
    stopifnot(isTRUE(all.equal(candidate(6), 4)))
    stopifnot(isTRUE(all.equal(candidate(10), 36)))
    stopifnot(isTRUE(all.equal(candidate(100), 53361)))
}
test_humaneval()"
HumanEval_148,yue_Hant,r,"譬如話..唔係正確嘅星球名如果是 planet1 或者 planet2 函数应该返回一个空列表靠近太陽.位於行星1同行星2之間,按函數應該返回一個包含所有行星嘅列表,寫一個函數,以兩個行星的名稱為行列, planet1 和 planet2.太空人王星,海王星下一個係金星,然後係地球,火星,木星,土星我哋太陽系有八個行星, 而其中嗰啲係最接近太陽嘅.# >>> bf('Jupiter', 'Neptune')
# c('Saturn', 'Uranus')
# >>> bf('Earth', 'Mercury')
# 'Venus'
# >>> bf('Mercury', 'Uranus')
# c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')
bf <- function(planet1, planet2) {","bf <- function(planet1, planet2) {
  planets <- c('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
  if (!(planet1 %in% planets) || !(planet2 %in% planets)) {
    return(c())
  }
  
  index1 <- which(planets == planet1)
  index2 <- which(planets == planet2)
  
  if (index1 < index2) {
    return(planets[(index1 + 1):(index2 - 1)])
  } else if (index2 < index1) {
    return(planets[(index2 + 1):(index1 - 1)])
  } else {
    return(c())
  }
}","test_humaneval <- function() {
    candidate <- bf
    stopifnot(isTRUE(all.equal(candidate('Jupiter', 'Neptune'), c('Saturn', 'Uranus'))))
    stopifnot(isTRUE(all.equal(candidate('Earth', 'Mercury'), c('Venus'))))
    stopifnot(isTRUE(all.equal(candidate('Mercury', 'Uranus'), c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'))))
    stopifnot(isTRUE(all.equal(candidate('Neptune', 'Venus'), c('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'))))
    stopifnot(isTRUE(all.equal(candidate('Earth', 'Earth'), c())))
    stopifnot(isTRUE(all.equal(candidate('Mars', 'Earth'), c())))
    stopifnot(isTRUE(all.equal(candidate('Jupiter', 'Makemake'), c())))
}
test_humaneval()"
HumanEval_149,yue_Hant,r,"例如:你可能會假設所有詞語都係一樣長函數應該以排序的方式返回一個字符串列表.如果兩個詞長度係一樣嘅,請按字母順序排列.應該返回依依規則排序嘅列表.單字嘅順序應該係按每個單詞嘅長度而上升,所以你可能會包含重複嘅資料.列表永远是字符串的列表,而不是数字的向量,返回得到嘅列表,以排序嘅顺序,删除所有与它异常长的字符串,寫一個函數, 接受一個字符串列表作為參數,# >>> list_sort(c('aa', 'a', 'aaa'))
# c('aa')
# >>> list_sort(c('ab', 'a', 'aaa', 'cd'))
# c('ab', 'cd')
sorted_list_sum <- function(lst) {","list_sort <- function(lst) {
  # Filter out strings with odd lengths
  filtered_list <- lst[nchar(lst) %% 2 == 0]
  
  # Sort the list first by length, then alphabetically
  sorted_list <- filtered_list[order(nchar(filtered_list), filtered_list)]
  
  return(sorted_list)
}","test_humaneval <- function() {
    candidate <- sorted_list_sum
    stopifnot(isTRUE(all.equal(candidate(c('aa', 'a', 'aaa')), c('aa'))))
    stopifnot(isTRUE(all.equal(candidate(c('school', 'AI', 'asdf', 'b')), c('AI', 'asdf', 'school'))))
    stopifnot(isTRUE(all.equal(candidate(c('d', 'b', 'c', 'a')), c())))
    stopifnot(isTRUE(all.equal(candidate(c('d', 'dcba', 'abcd', 'a')), c('abcd', 'dcba'))))
    stopifnot(isTRUE(all.equal(candidate(c('AI', 'ai', 'au')), c('AI', 'ai', 'au'))))
    stopifnot(isTRUE(all.equal(candidate(c('a', 'b', 'b', 'c', 'c', 'a')), c())))
    stopifnot(isTRUE(all.equal(candidate(c('aaaa', 'bbbb', 'dd', 'cc')), c('cc', 'dd', 'aaaa', 'bbbb'))))
}
test_humaneval()"
HumanEval_150,yue_Hant,r,"譬如:值为 y,或者 y 值为 y.一個簡單嘅程序,如果n是,它應該返回x的值.# >>> x_or_y(7, 34, 12)
# 34
# >>> x_or_y(15, 8, 5)
# 5
x_or_y <- function(n, x, y) {","x_or_y <- function(n, x, y) {
  is_prime <- function(num) {
    if (num <= 1) {
      return(FALSE)
    }
    for (i in 2:sqrt(num)) {
      if (num %% i == 0) {
        return(FALSE)
      }
    }
    return(TRUE)
  }
  
  if (is_prime(n)) {
    return(x)
  } else {
    return(y)
  }
}","test_humaneval <- function() {
    candidate <- x_or_y
    stopifnot(isTRUE(all.equal(candidate(7, 34, 12), 34)))
    stopifnot(isTRUE(all.equal(candidate(15, 8, 5), 5)))
    stopifnot(isTRUE(all.equal(candidate(3, 33, 5212), 33)))
    stopifnot(isTRUE(all.equal(candidate(1259, 3, 52), 3)))
    stopifnot(isTRUE(all.equal(candidate(7919, -1, 12), -1)))
    stopifnot(isTRUE(all.equal(candidate(3609, 1245, 583), 583)))
    stopifnot(isTRUE(all.equal(candidate(91, 56, 129), 129)))
    stopifnot(isTRUE(all.equal(candidate(6, 34, 1234), 1234)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 0), 0)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 0), 2)))
}
test_humaneval()"
HumanEval_151,yue_Hant,r,"忽略那些是負數或非整數的數字.给出一系列数字,返回数字的平方和# >>> double_the_difference(c(1, 3, 2, 0))
# 10
# >>> double_the_difference(c(-1, -2, 0))
# 0
# >>> double_the_difference(c(9, -2))
# 81
# >>> double_the_difference(c(0))
# 0
# If the input list is empty, return 0.
double_the_difference <- function(lst) {","double_the_difference <- function(lst) {
  # Filter out non-positive, non-integer, and non-odd numbers
  lst <- lst[lst > 0 & lst %% 1 == 0 & lst %% 2 == 1]
  # Calculate the sum of squares of remaining numbers
  sum(lst^2)
}","test_humaneval <- function() {
    candidate <- double_the_difference
    stopifnot(isTRUE(all.equal(candidate(c()), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(5.0, 4.0)), 25)))
    stopifnot(isTRUE(all.equal(candidate(c(0.1, 0.2, 0.3)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-10.0, -20.0, -30.0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(-1.0, -2.0, 8.0)), 0)))
    stopifnot(isTRUE(all.equal(candidate(c(0.2, 3.0, 5.0)), 34)))
    stopifnot(isTRUE(all.equal(candidate(c(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)), 165)))
}
test_humaneval()"
HumanEval_152,yue_Hant,r,"譬如..值為0 如果沒有,則值為猜測與得分之間的絕對差異.返回一個長度相同的向量 表示每一個猜測的距離.如果他們猜得正確,你有兩個等長嘅分數同推測數據, 而每個參數都顯示一個匹配數字.你嘅任務就係搵出一個人 係咪正確咁預測咗一系列嘅結果值得大家去記錄同比較.果一刻,你對果件事嘅感覺同想法 都系你最想知道嘅.我諗我哋都記得當時嘅感覺# >>> compare(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2))
# c(0, 0, 0, 0, 3, 3)
# >>> compare(c(0, 5, 0, 0, 0, 4), c(4, 1, 1, 0, 0, -2))
# c(4, 4, 1, 0, 0, 6)
compare <- function(game, guess) {","compare <- function(game, guess) {
  abs(game - guess)
}","test_humaneval <- function() {
    candidate <- compare
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2)), c(0, 0, 0, 0, 3, 3))))
    stopifnot(isTRUE(all.equal(candidate(c(0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0)), c(0, 0, 0, 0, 0, 0))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3), c(-1, -2, -3)), c(2, 4, 6))))
    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 5), c(-1, 2, 3, 4)), c(2, 0, 0, 1))))
}
test_humaneval()"
HumanEval_153,yue_Hant,r,"譬如..(它的強度係-1).返回""Slices.SErviNGSliCes"" 既然""SErviNGSliCes""是最強的擴展延伸: ['SERVINGSliCes', 'Cheese', 'StuFfed'] 你應該係譬如,如果我哋將""Slices"" 列為課堂,然後列出揀一張喺名單上頭張嘅相如果有兩個或更多嘅延伸具有相同嘅強度,你應該格式: ClassName.StrongestExtensionName. 你應該搵出最強嘅擴展,然後返回一個字符串.喺擴展名稱中,強度係用CAP-SM分數來表示.請將 SM 代表小寫字母嘅數量扩展的强度如下:让CAP是大写的数字扩展可以用来加载到类中的其他类.你會得到一個類別的名稱 (一個字符串) 以及一個擴展名單.# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))
# 'my_class.AA'
Strongest_Extension <- function(class_name, extensions) {","Strongest_Extension <- function(class_name, extensions) {
  # Function to calculate the strength of an extension
  extension_strength <- function(ext) {
    cap_count <- sum(grepl(""[A-Z]"", strsplit(ext, """")[[1]]))
    sm_count <- sum(grepl(""[a-z]"", strsplit(ext, """")[[1]]))
    return(cap_count - sm_count)
  }
  
  # Calculate strength for each extension and find the strongest one
  strengths <- sapply(extensions, extension_strength)
  max_strength_index <- which.max(strengths)
  
  # Construct the result string
  return(paste0(class_name, ""."", extensions[max_strength_index]))
}","test_humaneval <- function() {
    candidate <- Strongest_Extension
    stopifnot(isTRUE(all.equal(candidate('Watashi', c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')))
    stopifnot(isTRUE(all.equal(candidate('Boku123', c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')))
    stopifnot(isTRUE(all.equal(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')))
    stopifnot(isTRUE(all.equal(candidate('K', c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')))
    stopifnot(isTRUE(all.equal(candidate('__HAHA', c('Tab', '123', '781345', '-_-')), '__HAHA.123')))
    stopifnot(isTRUE(all.equal(candidate('YameRore', c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')))
    stopifnot(isTRUE(all.equal(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')), 'finNNalLLly.WoW')))
    stopifnot(isTRUE(all.equal(candidate('_', c('Bb', '91245')), '_.Bb')))
    stopifnot(isTRUE(all.equal(candidate('Sp', c('671235', 'Bb')), 'Sp.671235')))
}
test_humaneval()"
HumanEval_154,yue_Hant,r,"如果第二個字或者其中任何一個轉換,係第一個字嘅子字串,你需要返回True# >>> cycpattern_check('abcd', 'abd')
# FALSE
# >>> cycpattern_check('hello', 'ell')
# TRUE
# >>> cycpattern_check('whassup', 'psus')
# FALSE
# >>> cycpattern_check('abab', 'baa')
# TRUE
# >>> cycpattern_check('efef', 'eeff')
# FALSE
# >>> cycpattern_check('himenss', 'simen')
# TRUE
cycpattern_check <- function(a, b) {","cycpattern_check <- function(a, b) {
  n <- nchar(b)
  # Check all rotations of b
  for (i in 0:(n-1)) {
    # Rotate the string b by i characters
    rotated_b <- substring(b, i+1, n) %/% substring(b, 1, i)
    # Check if the rotated string is a substring of a
    if (grepl(rotated_b, a)) {
      return(TRUE)
    }
  }
  return(FALSE)
}","test_humaneval <- function() {
    candidate <- cycpattern_check
    stopifnot(isTRUE(all.equal(candidate('xyzw', 'xyw'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('yello', 'ell'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('whattup', 'ptut'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('efef', 'fee'), TRUE)))
    stopifnot(isTRUE(all.equal(candidate('abab', 'aabb'), FALSE)))
    stopifnot(isTRUE(all.equal(candidate('winemtt', 'tinem'), TRUE)))
}
test_humaneval()"
HumanEval_155,yue_Hant,r,"譬如..给定一个整数,返回一个列表,其中的偶数和奇数分别是多少位.#     >>> even_odd_count(-12)
#     c(1, 1)
#     >>> even_odd_count(123)
#     c(1, 2)
even_odd_count <- function(num) {","even_odd_count <- function(num) {
  # Handle negative numbers by taking the absolute value
  num <- abs(num)
  
  # Convert the number to a character vector to access digits
  digits <- unlist(strsplit(as.character(num), """"))
  
  # Convert character vector back to integer
  digits <- as.integer(digits)
  
  # Count even digits
  even_count <- sum(digits %% 2 == 0)
  
  # Count odd digits
  odd_count <- length(digits) - even_count
  
  # Return a vector with even and odd counts
  return(c(even_count, odd_count))
}","test_humaneval <- function() {
    candidate <- even_odd_count
    stopifnot(isTRUE(all.equal(candidate(7), c(0, 1))))
    stopifnot(isTRUE(all.equal(candidate(-78), c(1, 1))))
    stopifnot(isTRUE(all.equal(candidate(3452), c(2, 2))))
    stopifnot(isTRUE(all.equal(candidate(346211), c(3, 3))))
    stopifnot(isTRUE(all.equal(candidate(-345821), c(3, 3))))
    stopifnot(isTRUE(all.equal(candidate(-2), c(1, 0))))
    stopifnot(isTRUE(all.equal(candidate(-45347), c(2, 3))))
    stopifnot(isTRUE(all.equal(candidate(0), c(1, 0))))
}
test_humaneval()"
HumanEval_156,yue_Hant,r,"譬如:限制: 1 <= num <= 1000 用小写返来.给定一个正整数, 得到它的罗马数字等价值, 作为一个字符串,# >>> int_to_mini_roman(19)
# 'xix'
# >>> int_to_mini_roman(152)
# 'clii'
# >>> int_to_mini_roman(426)
# 'cdxxvi'
int_to_mini_roman <- function(number) {","int_to_mini_roman <- function(number) {
  values <- c(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)
  numerals <- c(""m"", ""cm"", ""d"", ""cd"", ""c"", ""xc"", ""l"", ""xl"", ""x"", ""ix"", ""v"", ""iv"", ""i"")
  
  result <- """"
  remainder <- number
  
  for (i in seq_along(values)) {
    while (remainder >= values[i]) {
      result <- paste0(result, numerals[i])
      remainder <- remainder - values[i]
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- int_to_mini_roman
    stopifnot(isTRUE(all.equal(candidate(19), 'xix')))
    stopifnot(isTRUE(all.equal(candidate(152), 'clii')))
    stopifnot(isTRUE(all.equal(candidate(251), 'ccli')))
    stopifnot(isTRUE(all.equal(candidate(426), 'cdxxvi')))
    stopifnot(isTRUE(all.equal(candidate(500), 'd')))
    stopifnot(isTRUE(all.equal(candidate(1), 'i')))
    stopifnot(isTRUE(all.equal(candidate(4), 'iv')))
    stopifnot(isTRUE(all.equal(candidate(43), 'xliii')))
    stopifnot(isTRUE(all.equal(candidate(90), 'xc')))
    stopifnot(isTRUE(all.equal(candidate(94), 'xciv')))
    stopifnot(isTRUE(all.equal(candidate(532), 'dxxxii')))
    stopifnot(isTRUE(all.equal(candidate(900), 'cm')))
    stopifnot(isTRUE(all.equal(candidate(994), 'cmxciv')))
    stopifnot(isTRUE(all.equal(candidate(1000), 'm')))
}
test_humaneval()"
HumanEval_157,yue_Hant,r,"譬如..90度.一個直角三角形,其中一個角是直角或兩邊係一個直角三角形,否則係錯嘅.给出三角形的三边长.如果三边长是# >>> right_angle_triangle(3, 4, 5)
# TRUE
# >>> right_angle_triangle(1, 2, 3)
# FALSE
right_angle_triangle <- function(a, b, c) {","right_angle_triangle <- function(a, b, c) {
  # Sort the sides to easily compare the largest side
  sides <- sort(c(a, b, c))
  
  # Check if the sum of squares of the two smaller sides equals the square of the largest side
  return(sides[1]^2 + sides[2]^2 == sides[3]^2)
}","test_humaneval <- function() {
    candidate <- right_angle_triangle
    stopifnot(isTRUE(all.equal(candidate(3, 4, 5), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1, 2, 3), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(10, 6, 8), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 2), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(7, 24, 25), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(10, 5, 7), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(5, 12, 13), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(15, 8, 17), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(48, 55, 73), TRUE)))
    stopifnot(isTRUE(all.equal(candidate(1, 1, 1), FALSE)))
    stopifnot(isTRUE(all.equal(candidate(2, 2, 10), FALSE)))
}
test_humaneval()"
HumanEval_158,yue_Hant,r,"字母,返回第一個出現喺詞典順序嘅字母.如果多個字符串有最大數量嘅獨特字符列表包含不同单词.返回最多数字的单词寫一個函數,可以接受一個字符串列表.# >>> find_max(c('name', 'of', 'string'))
# 'string'
# >>> find_max(c('name', 'enam', 'game'))
# 'enam'
# >>> find_max(c('aaaaaaa', 'bb', 'cc'))
# 'aaaaaaa'
find_max <- function(words) {","find_max <- function(words) {
  max_unique_chars <- 0
  result <- """"
  
  for (word in words) {
    unique_chars_count <- length(unique(strsplit(word, NULL)[[1]]))
    
    if (unique_chars_count > max_unique_chars ||
       (unique_chars_count == max_unique_chars && word < result)) {
      max_unique_chars <- unique_chars_count
      result <- word
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- find_max
    stopifnot(isTRUE(all.equal(candidate(c('name', 'of', 'string')), 'string')))
    stopifnot(isTRUE(all.equal(candidate(c('name', 'enam', 'game')), 'enam')))
    stopifnot(isTRUE(all.equal(candidate(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')))
    stopifnot(isTRUE(all.equal(candidate(c('abc', 'cba')), 'abc')))
    stopifnot(isTRUE(all.equal(candidate(c('play', 'this', 'game', 'of', 'footbott')), 'footbott')))
    stopifnot(isTRUE(all.equal(candidate(c('we', 'are', 'gonna', 'rock')), 'gonna')))
    stopifnot(isTRUE(all.equal(candidate(c('we', 'are', 'a', 'mad', 'nation')), 'nation')))
    stopifnot(isTRUE(all.equal(candidate(c('this', 'is', 'a', 'prrk')), 'this')))
    stopifnot(isTRUE(all.equal(candidate(c('b')), 'b')))
    stopifnot(isTRUE(all.equal(candidate(c('play', 'play', 'play')), 'play')))
}
test_humaneval()"
HumanEval_159,yue_Hant,r,"譬如..如果剩返嘅胡卜唔夠,你就可以食曬全部胡卜,但你仍然好餓.剩下的胡卜数量你應該返一個向量,即係 [ 晚餐之後食過嘅胡卜總數,但係你宜家需要多啲胡卜去完成一日嘅食物你係一個好餓嘅,而且已經食咗好多胡卜,# >>> eat(5, 6, 10)
# c(11, 4)
# >>> eat(4, 8, 9)
# c(12, 1)
# >>> eat(1, 10, 10)
# c(11, 0)
# >>> eat(2, 11, 5)
# c(7, 0)
# Variables:
# @number : integer
#     the number of carrots that you have eaten.
# @need : integer
#     the number of carrots that you need to eat.
# @remaining : integer
#     the number of remaining carrots thet exist in stock
# Constrain:
# * 0 <= number <= 1000
# * 0 <= need <= 1000
# * 0 <= remaining <= 1000
# Have fun :)
eat <- function(number, need, remaining) {","eat <- function(number, need, remaining) {
  total_eaten <- number + min(need, remaining)
  remaining_carrots <- max(0, remaining - need)
  return(c(total_eaten, remaining_carrots))
}","test_humaneval <- function() {
    candidate <- eat
    stopifnot(isTRUE(all.equal(candidate(5, 6, 10), c(11, 4))))
    stopifnot(isTRUE(all.equal(candidate(4, 8, 9), c(12, 1))))
    stopifnot(isTRUE(all.equal(candidate(1, 10, 10), c(11, 0))))
    stopifnot(isTRUE(all.equal(candidate(2, 11, 5), c(7, 0))))
    stopifnot(isTRUE(all.equal(candidate(4, 5, 7), c(9, 2))))
    stopifnot(isTRUE(all.equal(candidate(4, 5, 1), c(5, 0))))
}
test_humaneval()"
HumanEval_160,yue_Hant,r,"運算符列表至少有一個運算符,同埋運算符列表至少有兩個運算符.運算子係列表中嘅非負嘅整數演算子列表的长度等于操作数列表的长度减去一.注意:=> 结果=9结果是2+3*4-5矢量=[2,3,4,5]運營者['+', '*', '-'] 譬如..乘法 (**) 樓層分佈 (//) 乘法 (*) 减去 ( - ) 增加 (+) 基本嘅代數運算:返回這個表達式的評估.第二個清單係整數嘅清單 用兩個已畀名單去建立代數學俾兩個列表,一個係運算子,一個係運算子 第一個列表有基本嘅代數運算,同埋do_algebra <- function(operator, operand) {","do_algebra <- function(operator, operand) {
  if (length(operator) != length(operand) - 1) {
    stop(""The length of operator list must be equal to the length of operand list minus one."")
  }
  
  # Initialize the result with the first operand
  result <- operand[1]
  
  # Iterate through the operators and operands
  for (i in 1:length(operator)) {
    op <- operator[i]
    num <- operand[i + 1]
    
    # Apply the appropriate operation
    if (op == '+') {
      result <- result + num
    } else if (op == '-') {
      result <- result - num
    } else if (op == '*') {
      result <- result * num
    } else if (op == '//') {
      result <- result %/% num
    } else if (op == '**') {
      result <- result ^ num
    } else {
      stop(""Unsupported operation"")
    }
  }
  
  return(result)
}","test_humaneval <- function() {
    candidate <- do_algebra
    stopifnot(isTRUE(all.equal(candidate(c('**', '*', '+'), c(2, 3, 4, 5)), 37)))
    stopifnot(isTRUE(all.equal(candidate(c('+', '*', '-'), c(2, 3, 4, 5)), 9)))
    stopifnot(isTRUE(all.equal(candidate(c('//', '*'), c(7, 3, 4)), 8)))
}
test_humaneval()"
HumanEval_161,yue_Hant,r,"譬如話..函數應該返回得到嘅字符串.如果字符串中没有字母,请反转字符串.否則,請繼續閱讀.如果 s[i] 係一個字母,請將字母嘅大小寫成 逆轉,由下到上,或者反過來,你得到一個字符串 s.# >>> solve('1234')
# '4321'
# >>> solve('ab')
# 'AB'
# >>> solve('#a@C')
# '#A@c'
solve <- function(s) {","solve <- function(s) {
  if (grepl(""[a-zA-Z]"", s)) {
    return(chartr(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",
                  ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"", s))
  } else {
    return(intToUtf8(rev(utf8ToInt(s))))
  }
}","test_humaneval <- function() {
    candidate <- solve
    stopifnot(isTRUE(all.equal(candidate('AsDf'), 'aSdF')))
    stopifnot(isTRUE(all.equal(candidate('1234'), '4321')))
    stopifnot(isTRUE(all.equal(candidate('ab'), 'AB')))
    stopifnot(isTRUE(all.equal(candidate('#a@C'), '#A@c')))
    stopifnot(isTRUE(all.equal(candidate('#AsdfW^45'), '#aSDFw^45')))
    stopifnot(isTRUE(all.equal(candidate('#6@2'), '2@6#')))
    stopifnot(isTRUE(all.equal(candidate('#$a^D'), '#$A^d')))
    stopifnot(isTRUE(all.equal(candidate('#ccc'), '#CCC')))
}
test_humaneval()"
HumanEval_162,yue_Hant,r,"如果'text'係空字符串,返回NULL.给定一个字符串'text',返回它的md5散列等价字符串.# >>> string_to_md5('Hello world')
# '3e25960a79dbc69b674cd4ec67a72c62'
string_to_md5 <- function(text) {","string_to_md5 <- function(text) {
  if (text == """") {
    return(NULL)
  } else {
    return(digest::digest(text, algo = ""md5"", serialize = FALSE))
  }
}

# Ensure the required library is loaded
if(!requireNamespace(""digest"", quietly = TRUE)) {
  install.packages(""digest"")
}

# Load the digest library
library(digest)","test_humaneval <- function() {
    candidate <- string_to_md5
    stopifnot(isTRUE(all.equal(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')))
    stopifnot(isTRUE(all.equal(candidate(''), NULL)))
    stopifnot(isTRUE(all.equal(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')))
    stopifnot(isTRUE(all.equal(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')))
}
test_humaneval()"
HumanEval_163,yue_Hant,r,"例如:b, 按上升的顺序.给出两个正整数 a 和 b,返回 a 之间的偶数# >>> generate_integers(2, 8)
# c(2, 4, 6, 8)
# >>> generate_integers(8, 2)
# c(2, 4, 6, 8)
# >>> generate_integers(10, 14)
# c()
generate_integers <- function(a, b) {","generate_integers <- function(a, b) {
  start <- min(a, b)
  end <- max(a, b)
  even_digits <- seq(start, end)[seq(start, end) %% 2 == 0 & seq(start, end) <= 8]
  return(even_digits)
}","test_humaneval <- function() {
    candidate <- generate_integers
    stopifnot(isTRUE(all.equal(candidate(2, 10), c(2, 4, 6, 8))))
    stopifnot(isTRUE(all.equal(candidate(10, 2), c(2, 4, 6, 8))))
    stopifnot(isTRUE(all.equal(candidate(132, 2), c(2, 4, 6, 8))))
    stopifnot(isTRUE(all.equal(candidate(17, 89), c())))
}
test_humaneval()"
