task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ssw_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Hlola kutsi kuloluhlu loluniketwe lwetinombolo, kukhona yini tinombolo letimbili letisedvute kunaloku lokuniketwe. Sibonelo: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) Akusilo liciniso >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Kuliciniso """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ssw_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Kufaka kulomsebenti yintfo lehlanganisiwe lenemacembu lamanyenti lahlanganisiwe. Injongo yakho kwehlukanisa lamacembu abe ngemiculu lehlukene bese ubuyisa luhla lwaleyo miculu. Emacembu lehlukene alinganisiwe (ngulowo nalowo mkhonto lovulekile uvalwe kahle) futsi awentiwanga ngekhatsi kwalamanye. Unganaki tikhala ku-input string. Sibonelo: >>> separate_paren_groups' ((( ) (() (()))))))) ['() ', '(()) ', '((() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ssw_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Uma kunenombolo legucukako, ingahle ihlukaniswe ibe yinombolo lephelele (inombolo lephelele lenkhulu lencane kunalena leniketwe) kanye nemasentimitha (incenye lesele ihlala incane kuna 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ssw_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Utawutfola luhlu lwekukhishwa kwemali nekubekwa kwemali ku-akhawunti yasebhange lecala nge-zero. Umsebenti wakho kutfola kutsi ngabe kunesikhatsi lapho ibhalansi ye-akhawunti iwela ngaphansi kwa-zero, futsi kuleyo ndzawo umsebenti kumele ubuyisele i-True. Uma kungenjalo kufanele ubuyisele i-False. Sibonelo: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ssw_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Kuloluhla loluniketwe lwetinombolo tekungenisa, bala lokujikela lokukhulu lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambukile lokuphambene naloku""""""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ssw_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Faka inombolo 'yelikhetselo' emkhatsini wetintfo letimbili letilandzelanako teluhla lwekungenisa `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ssw_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Kulesisento, kufakwa inkhombandlela lemelele emacembu lamaningi lahlanganisiwe lahlukaniswe tikhala. Kwelinye ngalinye licembu, kukhipha lizinga lelisetulu lelisetulu lelisetulu lelisetulu. Sibonelo, (() (()) linetigaba letimbili lelisetulu lelisetulu lelisetulu kantsi ((())) linetigaba letintsatfu.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ssw_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Hlunga luhlu lwekungenisa lwema-string kuphela kulabo labane-substring leniketwe >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ssw_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Kuleluhla loluniketwe lwema integers, buyisela i tuple leyakhiwe yinhlanganisela kanye nemkhicito wato tonkhe tinombolo letingenakubalwa eluhlwini.""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ssw_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Kusuka kuloluhla loluniketwe lwema integers, kwakha luhlu lwe rolling maximum element letfolwe kuze kube sikhatsi lesiniketiwe kulokulandzelana. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ssw_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Tfola i-palindrome lemfishane lecala ngemugca lophakanyisiwe. Umcondvo we-algorithm ulula: - Tfola i-postfix lendze yemugca lophakanyisiwe loyi-palindrome. - Faka ekugcineni kwemugca lophambene we-prefix yemugca lofika ngaphambi kwesilandvo se-palindromic. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Hlola kutsi ngabe loluhlelo loluniketwako luyi palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ssw_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Kufaka tinhla letimbili a na b letinemagama la-1 na-0. Yenta i-binary XOR kuletintfo letingenako bese ubuyisa umphumela njengentambo.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ssw_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Kuleluhla lwetinhlavu, buyisela loludze. Buyisela lolunye nangabe kunetinhlavu letinyenti letindze ngalokulinganako. Buyisela kute nangabe loluhla lwetinhlavu alunalutfo. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ssw_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Buyisela sibalo lesivamile lesikhulu setinombolo letimbili letinemaphuzu a na b >>> sibalo lesivamile lesikhulu (greatest_common_divisor) (<3, 5) 1 >>> sibalo lesivamile lesikhulu (greatest_common_divisor) (<25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ssw_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""<p><a></a> <p><a></a> <p><b><a></a> <p><b><b><b><c></b> <p><b><b><c></b> <p><b><b><c></b> <p><b><b><c></b> <p><b><b><b><c></b> <p><b><b><b><b><c></b> <p><b><b><b><b><a></b> <p><a></b> <p>""""""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ssw_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Buyisa inombolo yetinombolo letinemkhawulo wesikhala kusuka ku-0 kuya ku-n.""""""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ssw_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Tfola kutsi kunetinhlavu letingakhi (kungakakhatsaleki kutsi tikhulu kangakanani) letitfolakala ku-string >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ssw_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Kufaka kulesisento nguloluhlu lwekuhlanganisa lokumele kumelele emanotsi emculo ngendlela ye ASCII. Umsebenti wakho kuhlatiya luhlu lwekuhlanganisa lwema integers lalingana nekushaya lokunyenti. Nayi incwadzi yekubhala: 'o' - inothi, lokugcina kunetinhlavu letine 'o' - incenye yenothi, lokugcina kunetinhlavu letimbili 'o' - incenye yenothi, lokugcina kunetinhlavu letine 'o' - incenye yenothi, lokugcina kunetinhlavu letine 'o' - incenye yenothi, lokugcina kunetinhlavu letine 'o' >>> parse_music. 'o' . o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ssw_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Tfola kutsi kunemagama lamanyenti kangakanani lafana nalama. Bala emacala lafanako. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ssw_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input is a space-delimited string of numerals from 'zero' to 'nine'. valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ssw_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Kuloluhlu loluniketwe lwetinombolo (lokungenani letimbili) khetsa bese ubuyisa letimbili leticishe tifane bese ulandzelana ngato (inombolo lencane, inombolo lenkhulu). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ssw_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Kuniketwa luhlu lwetinombolo (lokungenani tintfo letimbili), sebentisa indlela yekugucula lencane kuleluhla, lencane kakhulu ibe ngu 0 bese lenkhulu ibe ngu 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ssw_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter linani leliphawulwe lalamanye emagugu e-python kuphela etinombolo letinemininingwane >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ssw_Latn,python,"

def strlen(string: str) -> int:
    """"""Buyela ku-string leniketiwe >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ssw_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Kulelinani leliniketwe n, tfola linani lelikhulu lehlukanisa n ngalokulinganako, lelincane kuna n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ssw_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Buyisela luhla lwetintfo letibalulekile telinani leliphelele ngekulandzelana kusuka kulencane kuya kulenkhulu. Linye ngalinye leticumbi kumele libalwe linani lematfuba lalingana netikhatsi letivelako ekubaleni. Inombolo yekungenisa kumele ilingane nemkhicito wato tonkhe tintfo letibalulekile >>> factorise ((8) [2, 2, 2] >>> factorise ((25) [5, 5] >>> factorise ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ssw_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Kusuka kuluhlu lwema integers, susa tonkhe tintfo letenteka ngetulu kwesisodwa. Gcina indlela yetintfo letisele njengaleyo lelapho ufake khona. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ssw_Latn,python,"

def flip_case(string: str) -> str:
    """"""Kulelinani leminye, shintja tinhlavu temagama letincane tibe nguletinkhulu bese kutsi letinkhulu tibe nguletincane. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ssw_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Luhla lwekuhlanganisa imisho ibe yimisho lefanako >>> kuhlanganisa (([]) '' >>> kuhlanganisa ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ssw_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Hlunga luhlu lwekungenisa lwema-string kuphela lwalawo lacala ngemisho leniketwe. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ssw_Latn,python,"

def get_positive(l: list):
    """"""Buyisa kuphela tinombolo letinemaphuzu lamanyenti kuloluhlu. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ssw_Latn,python,"

def is_prime(n):
    """"""Buyisela liciniso nangabe inombolo inenombolo yekucala, bese uletsa emanga ngalenye indlela. >>> is_prime(6) Emanga >>> is_prime(101) Liciniso >>> is_prime(11) Liciniso >>> is_prime(13441) Liciniso >>> is_prime(61) Liciniso >>> is_prime(4) Emanga >>> is_prime(1) Emanga """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ssw_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ngulelinganako le-polynomial. find_zero utfola x ngendlela yekutsi poly ((x) = 0. find_zero ubuyisa kuphela kuphela zero point, ngisho nobe kunebantfu labanyenti. Ngetulu kwaloko, find_zero utsatsa kuphela luhlu lwe xs lolunelinani lelingu-zero kanye ne-zero coefficient lenkhulu njengoba kucinisekisa sisombululo. >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Kwenta sibalo se-polynomial lesinetigaba xs ku-point x. buyisela xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ssw_Latn,python,"

def sort_third(l: list):
    """"""Lomsebenti utsatsa luhlu l bese ubuyisa luhlu l' lolwenta l' lufanane nalolu kuletinkhomba letingahlukaniseki ngaletintsatfu, kantsi linani laletinkhomba lehlukaniseka ngaletintsatfu lilingana nelinani letinkhomba letihambelana na-l, kepha lihlelwe. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ssw_Latn,python,"

def unique(l: list):
    """"""Buyisela tintfo letihleliwe letingafani eluchungechungeni >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ssw_Latn,python,"

def max_element(l: list):
    """"""Buyisela linani lelisetulu le-element eluhlwini. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ssw_Latn,python,"

def fizz_buzz(n: int):
    """"""Buyisela linani lemalanga lapho 7 avele khona etinombolweni letincane kuna-n letihlukaniseka nga-11 nobe 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ssw_Latn,python,"

def sort_even(l: list):
    """"""Lomsebenti utsatsa luhlu l bese ubuyisa luhlu l' lolunjalo kutsi l' lufana nalolungu l etinhlelweni letingafani, kantsi linani lalo etinhlelweni letimbili lilingana nelinani letinhlelweni letimbili ta l, kepha lihlelwe. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ssw_Latn,python,"

def encode_cyclic(s: str):
    """"""utsatsa njengentfo yekungenisa intambo lebhalwe nge-encode_cyclic function.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""ibuyisela umtfwalo lobhalwe ngemagama ngekuhlanganisa tinhlavu letintsatfu.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ssw_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ibuyisa inombolo ye-n lengulenye yetinombolo te Fibonacci futsi nayo ingulencenye lencane. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ssw_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero utsatsa luhlu lwema integers njengentfo yekungena. ibuyisa i True uma kukhona tintfo letintsatfu letihlukile kuloluhlu letihlanganisa ku zero, bese i False ngalenye indlela. >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ssw_Latn,python,"

def car_race_collision(n: int):
    """"""Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto. Umcondvo longenamkhawulo wekushayisana kwemoto.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ssw_Latn,python,"

def incr_list(l: list):
    """"""Luhlu lwekubuyisa lolunetintfo letinyuswe nga 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ssw_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero utsatsa luhlu lwema integers njengentfo yekungena. ibuyisa i True uma kukhona tintfo letimbili letehlukene kuloluhlu letisho kutsi sibalo siphelele ku zero, bese i False ngalenye indlela. >>> pairs_sum_to_zero (([1, 3, 5, 0]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero (([1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ssw_Latn,python,"

def change_base(x: int, base: int):
    """"""Shintsha isisekelo senombolo yekungena x ibe sisekelo. buyisela umfutfo wekumelwa ngemuva kwekuguculwa. tinombolo tesisekelo tincane kuna 10. >>> shintja_sisekelo (8, 3) '22' >>> shintja_sisekelo (8, 2) '1000' >>> shintja_sisekelo (7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ssw_Latn,python,"

def triangle_area(a, h):
    """"""Kuniketwa budze balomncele kanye nendzawo lephakeme yekuphindza kwentiwe. >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ssw_Latn,python,"

def fib4(n: int):
    """"""Kulandzelana kwetinombolo te Fib4 kulandzelana lokufana naloku kwe Fibbonacci lokuchazwa ngalendlela lelandzelako: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Sicela ubhale umsebenti wekubhala ngekusebenta kahle i-n-th element yelandzelana lemininingwane ye fib4. Ungasebentisi kubuyela emuva. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ssw_Latn,python,"

def median(l: list):
    """"""Kubuyela emuva kwe-median yetintfo kuloluhlu l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ssw_Latn,python,"

def is_palindrome(text: str):
    """"""Kuhlola kutsi ngabe inchazelo yeligama lelichaziwe i-palindrome >>> is_palindrome (('') Kuliciniso >>> is_palindrome (('aba') Kuliciniso >>> is_palindrome (('aaaaa') Kuliciniso >>> is_palindrome (('zbcd') Kuliciniso """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ssw_Latn,python,"

def modp(n: int, p: int):
    """"""Buyisa 2^n modulo p (khombisa tinombolo). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ssw_Latn,python,"

def encode_shift(s: str):
    """"""utsatsa njengentfo yekungenisa intambo lebhalwe nge-encode_shift function.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ibuyisela inchazelo yeluhla lwemagama ngekuhambisa tinhlavu nga-5 ku-alfabhethi. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ssw_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ngumsebenti lotsatsa umtfwalo bese ubuyisa umtfwalo ngaphandle kwemabonakudze. >>> remove_vowels (('') ' ' >>> remove_vowels (('abcdef\nghijklm') 'bcdf\nghjklm' >>> remove_vowels (('abcdef') 'bcdf' >>> remove_vowels (('aaaaa') ' ' >>> remove_vowels (('aaBAA') 'B' >>> remove_vowels (('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ssw_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Buyisela liciniso nangabe tonkhe tinombolo kuloluhlu tibe ngaphansi kwelizinga t. >>> below_threshold (([1, 2, 4, 10], 100) Liciniso >>> below_threshold (([1, 20, 4, 10], 5) Emanga """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ssw_Latn,python,"

def add(x: int, y: int):
    """"""Faka tinombolo letimbili x na-y.""""""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ssw_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Hlola kutsi emagama lamabili anetinhlavu letifanako yini. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Liciniso >>> same_chars (('abcd', 'dddddddddabc') Liciniso >>> same_chars (('dddddddabc', 'abcd') Liciniso >>> same_chars (('eabcd', 'dddddddddabc') Liciniso >>> same_chars (('eabcd', 'dddddddabc') Liciniso >>> same_chars ((('abcd', 'dddddddddabddce') Liciniso >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddabddc') Liciniso """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ssw_Latn,python,"

def fib(n: int):
    """"""Buyisa inombolo ye-nth ye-Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ssw_Latn,python,"

def correct_bracketing(brackets: str):
    """"""<>. return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing ((""<"") False >>> correct_bracketing ((""<>"") True >>> correct_bracketing ((""<><>"") True >>> correct_bracketing ((""<><>"") True >>> correct_bracketing ((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ssw_Latn,python,"

def monotonic(l: list):
    """"""Buyisela Liciniso uma tintfo teluhlu tikhula noma tincipha ngendlela lefanako. >>> monotonic (([1, 2, 4, 20]) Liciniso >>> monotonic (([1, 20, 4, 10]) Liciniso >>> monotonic (([4, 1, 0, -10]) Liciniso """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ssw_Latn,python,"

def common(l1: list, l2: list):
    """"""Buyisela tintfo letifanako letihleliwe letihlukile temininingwane lemibili. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ssw_Latn,python,"

def largest_prime_factor(n: int):
    """"""Buyisa sibalo lesikhulu kunawo onkhe sa-n. Asitsi n > 1 futsi akusiyo sibalo lesikhulu. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ssw_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ngumsebenti lohlanganisa inombolo kusuka ku-1 kuya ku-n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ssw_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets is a string of ""("" and "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ssw_Latn,python,"

def derivative(xs: list):
    """"""xs imele ema-coefficients e-polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Buyisa i-derivative yaleli-polynomial ngendlela lefanako. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ssw_Latn,python,"

def fibfib(n: int):
    """"""Luhla lwetinombolo lwe FibFib lufana nalolu lwe Fibbonacci lolunendlela lelandzelako: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Sicela ubhale umsebenti wekubhala ngekusebenta kahle i-n-th element yeluhlu lwe fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ssw_Latn,python,"
FIX = """"""Bhala umusho lotsi vowels_count lotsatsa umusho lomelele ligama ube ngumlayeto bese ubuyisa linani lemitsetfo kulelogama. Emagama lasemtsetfweni kulendzaba ngu 'a', 'e', 'i', 'o', 'u'. Lapha, 'y' nawo ngemagama lasemtsetfweni, kepha kuphela uma ekugcineni kweligama leliniketwe. Sibonelo: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Faka letinye tibonelo tekulingwa. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ssw_Latn,python,"
def circular_shift(x, shift):
    """"""Kuyisusa ngekususa emadijithi alelinani leliphelele x, bese ususa lamadijithi uya ngesekudla ngekususa bese ubuyisa umphumela njengentambo. Uma ususa > linani lamadijithi, buyisa lamadijithi ngekuphambene. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ssw_Latn,python,"
def digitSum(s):
    """"""Umsebenti Bhala umsebenti lotsatsa luhlu njengemlayeto bese ubuyisa samba setinhlamvu letisetulu kuphela' emakhodi e-ASCII. Tibonelo: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ssw_Latn,python,"
def fruit_distribution(s,n):
    """"""Kulomsebenti, utawuniketwa inombolo yemilayeto lemele linani lema-apula nema orintji lahlukaniswe ngekhatsi kwenkhwama yetitselo lenkhwama inema-apula, ema-orintji kanye netitselo tamangoza. Uma kuniketwe inombolo yemilayeto lemele linani leliphelele lema-apula nema-apula kanye nenombolo lephelele lemele linani leliphelele letitselo letikulenkhaba buyisela linani letitselo tamangoza kulenkhaba. sibonelo: fruit_distribution""5(ema-apula nema-orintji lasitfupha"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 ema-apula nema-orintji lasitfupha"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 ema-apula nema-orintji lasitfupha"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 ema-apula nema-orintji lasitfupha"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ssw_Latn,python,"
def pluck(arr):
    """"""""Nakunikelwa nge-array lemele ligatja lalesihlahla lesinemagama langasiwo emanga, umsebenti wakho kutsi ukhetse linye lalama-node bese uyalibuyisela. I-node lekhetsiwe kufanele kube yi-node lenenombolo lencane kakhulu. Uma kutfolakala ema-node lamaningi lanenombolo lencane kakhulu, buyisela i-node lenenombolo lencane kakhulu. I-node lekhetsiwe kufanele ibuyiselwe eluhlwini, [smallest_value, its index] , Uma kute emagugu lafanako noma i-array lekhetsiwe ayinalutfo, buyisela []. Sibonelo 1: Kufakwa: [4,2,3] Kukhicitwa: [2, 1] Inchazelo: 2 inelinani lelincane kakhulu, bese 2 inelinanombolo lencane kakhulu. Sibonelo 2: Kufakwa: [1,2,3] Kukhicitwa: [2, 1] Inchazelo: 2 inelinani lelincane kakhulu, bese 2 inelinanombolo lencane kakhulu. Sibonelo 3: Kufakwa: [] Kukhicitwa: [4:] Kufakwa: [5, 3, 4, 2] Kufakwa: [0, 0] Kukhicitwa: 1 inombolo lencane kakhulu, kepha inombolo lencane kakhulu, sibonelo: * sinemagama lemincane kunawo, kepha linani leliphansi ngu-zero.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ssw_Latn,python,"
def search(lst):
    '''Inombolo lephelele lenkhulu kunalena ngulelikhulu kunawo onkhe futsi lenemvamisa lenkhulu kunawo onkhe nobe lelingana nelizinga lalenombolo lephelele. Umvamisa walenombolo lephelele linani lematfuba lavelako kuloluhla. Uma kungekho lelinani lelinjalo, buyisela -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ssw_Latn,python,"
def strange_sort_list(lst):
    '''Uma uniketwe luhla lwetinombolo letinemcondvo lophelele, buyisela luhla ngekulandzelana lokungaketayeleki. Kuhlela ngalokungaketayeleki, kulapho ucala ngelizinga lelincane, bese kuba linani lelisetulu laletinombolo letisele, bese kuba linani leliphansi nalokunye.'''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ssw_Latn,python,"
def triangle_area(a, b, c):
    '''Kuniketwe budze bemikhawulo lemitsatfu. Buyisa indzawo yaletinkwembe lehlehliselwe ku 2 emakhoma uma lamakhawulo lamatsatfu akha inkwembe levumelekile. Ngaphandle kwaloko buyisa -1 Emakhawulo lamatsatfu enta inkwembe levumelekile uma inhlanganisela yalamanye emakhawulo lamabili inkhulu kunalena yesitsatfu. Sibonelo: inkwembe_indzawo (a) 3, 4, 5) == 6.00 inkwembe_indzawo (a) 1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ssw_Latn,python,"
def will_it_fly(q,w):
    '''Bhala umusho lotawuphindza True uma intfo q itawundiza, bese u-False ngalenye indlela. Intfo q itawundiza uma ilinganisiwe (luhlu lwe palindromic) bese kutsi linani letintfo tayo lincane nobe lilingana nesisindvo lesisetulu lesikhona w. Sibonelo: will_it_fly (([1, 2], 5) â -> False # 1+2 lincane kunesisindvo lesisetulu lesikhona, kepha alikalinganiswa. will_it_fly (([3, 2, 3], 1) â -> False # ilinganisiwe, kepha 3+2+3 inesisindvo lesisetulu lesisetulu lesikhona. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 inesisindvo lesisetulu lesisetulu lesikhona, futsi ilinganisiwe. will_it_fly ((([3], â 5) -> True # 3 inesisindvo lesisetulu lesisetulu lesikhona, futsi ilinganisiwe '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ssw_Latn,python,"
def smallest_change(arr):
    """"""Kulesinye simo, ungashintja intfo yinye ube ngulenye. Sibonelo: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ssw_Latn,python,"
def total_match(lst1, lst2):
    '''Bhala umsebenti lowemukela luhla lwetinhlaka letimbili bese ubuyisa luhla lolunelinani leliphelele le-chars ku-all strings yeluhlu loluncane kunalelomunye. uma luhla lolunetinhlaka letilinganako, buyisela luhlu lwekucala. Tibonelo total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'', '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ssw_Latn,python,"
def is_multiply_prime(a):
    """"""Bhala umusho lotawuphendvula ngekutsi yebo nangabe lenombolo inemaprimes lamatsatfu kantsi uma kungenjalo awemanga.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ssw_Latn,python,"
def is_simple_power(x, n):
    """"""Umsebenti wakho kutsi ubhale umsebenti lotawubuyisela liciniso nangabe linani x lingumandla lalula e-n bese libuyele emanga kuletinye timo. x lingumandla lalula e-n nangabe n**int=x Sibonelo: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ssw_Latn,python,"
def iscube(a):
    '''Bhala umusho lotawutsatsa inombolo lephelele bese ubuyisa lolokulandzelako. Caphela: ungacabanga kutsi loku lokungenako kuliciniso ngaso sonkhe sikhatsi.'''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ssw_Latn,python,"
def hex_key(num):
    """"""Ucelwe kutsi ubhale umsebenti lowemukela inombolo ye-hexadecimal njengentambo bese ubala linani lemanani e-hexadecimal langema-primes (inombolo ye-primes, yinombolo yemvelo lenkhulu kuna-1 lengasiyo umkhicito wetinombolo letimbili letincane). Emadijithi e-hexadecimal ngu-0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Tinombolo te-primes ngu-2, 3, 5, 7, 11, 13, 17,... Ngako-ke kufanele utfole inombolo yalamadijithi lalandzelako: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Caphela: ungacabanga kutsi lokufakwako kuhlale kulungile nobe kungenalutfo, netimphawu te-A,B,C,D,E,F tihlala tinemagama lamakhulu. Tibonelo: Ku-num ""AB"" lokukhicitwako kufanele kube ngu-num = 1. Ku-num ""1077E"" lokukhicitwako kufanele kube ngu- 2. Ku-num ""AB"" kufanele kube ngu-num = 1.331 Ku-num ""AB"" kufanele kube ngu-num = 4.333333 ""ABC"" kufanele kube ngu-num = 6.0""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ssw_Latn,python,"
def decimal_to_binary(decimal):
    """"""Utawuphiwa inombolo lebhalwe ngemagama lasemkhatsini bese umsebenti wakho kutsi uyigucule ibe ngemagama lasemkhatsini. lomsebenti kumele ubuyise inombolo lengumlayeto, lapho khona umlingisi ngamunye amele inombolo lengumlayeto. umlingisi ngamunye kulomlayeto utawuba ngu '0' nobe '1'. kutawuba nemlingisi longetulu 'db' ekucaleni nasekugcineni kwaloluhlelo. lemlingisi lengetulu ikhona kute usite ngalomlayeto.""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ssw_Latn,python,"
def is_happy(s):
    """"""Umsebenti wakho kuhlola kutsi ngabe loluhlelo luyahambisana yini nobe cha. Luhlelo luyahambisana nangabe budze balo bunganga 3 futsi tonkhe tinhlavu letintsatfu letilandzelanako tihlukile. Sibonelo: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ssw_Latn,python,"
def numerical_letter_grade(grades):
    """"""Kuliviki lekugcina lesemester futsi thishela kumele anikete bafundzi emamaki. Thishela usebente ngekwakhe indlela yekuhlola. Inkinga nje kutsi, ulahlekelwe yikhodi lebekasebentisa ekuhloleni. Ukunikete luhla lwema-GPA kulamanye bafundzi futsi kumele ubhale umsebenti longakhokha luhla lwema-GPA ngekusebentisa lelithebula lelilandzelako: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ssw_Latn,python,"
def prime_length(string):
    """"""Bhala umusho lotawutsatsa umtfwalo bese ubuyisa lolungile uma loluhlangotsi luyinombolo leyinhloko nobe lolungemanga uma kungenjalo Sibonelo prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ssw_Latn,python,"
def starts_one_ends(n):
    """"""Nawunenombolo lephelele lephelele n, buyisela linani letinombolo letiphelele letiphelele letinemagama langema-n lacala noma aphele nga-1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ssw_Latn,python,"
def solve(N):
    """"""N = 1000, sibalo semagama lesingu 1 kufanele kube ngu ""1"". N = 150, sibalo semagama lesingu 6 kufanele kube ngu ""110"". N = 147, sibalo semagama lesingu 12 kufanele kube ngu ""1100"". Variables: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Output: a string of binary number """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ssw_Latn,python,"
def add(lst):
    """"""Kuniketwe luhlu lolungasilo lwekugcina lwema integers, hlanganisa letintfo letifanako letitfolakala etindzaweni letingafani.""""""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ssw_Latn,python,"
def anti_shuffle(s):
    """"""Bhala umusho lotsatsa umusho bese ubuyisa luhlobo loluhleliwe lwawo. Luhlobo loluhleliwe lwemusho, ngumusho lapho onkhe emagama (ahlukaniswe sitfupha) afakwa esikhundleni sawo ligama lelisha lapho tonkhe tinhlavu tihlelwe ngekulandzelana ngekukhula ngekulandzelana ngekubaluleka kwe-ascii. Caphela: Kufanele ugcine luhlelo lwemagama netindzawo letingenalutfo emshweni. Sibonelo: anti_shuffle ((('Hi') ubuyisa 'Hi' anti_shuffle (('hello') ubuyisa 'ehllo' anti_shuffle (('Hello World!!!') ubuyisa 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ssw_Latn,python,"
def get_row(lst, x):
    """"""Kwenta loko, utawutfola kutsi i-x inemigca lemibili, njengema-list lanetintfo letitsite, lefanana nematrix, kodvwa, ngalokwehlukile kuma-matrix, umugca ngamunye ungaba nelinani lehlukile lemasondvo. Uma uniketwe lst, kanye ne-integer x, tfola ema-integer x kuloluhla, bese ubuyisa luhla lwetintfo letitsite, [(x1, y1), (x2, y2) ...] ngendlela yekutsi i-tuple ngayinye ibe ngu-coordinate - (row, columns), kucalwa nga-0. Hlela emarubhrini ngekulandzelana kwemigca. Phindze, hlunga emarubhrini emugca ngemakholomu ngekulandzelana kwemigca.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ssw_Latn,python,"
def sort_array(array):
    """"""Uma uniketwe inombolo lengasiyo ye-negative, buyisela ikhophi yalenombolo ngemuva kwekuhlela, utawuhlela lenombolo ngendlela lekhulako uma inombolo ye-{} ye-index yekucala, inombolo yekugcina) ingekho, noma uyihlele ngendlela leyehlako uma inombolo ye-{} ye-index yekucala, inombolo yekugcina) ilungile.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ssw_Latn,python,"
def encrypt(s):
    """"""Yakha umusho wekubhala ngekubhala lotawutsatsa umtfwalo njengenchazelo bese ubuyisa umtfwalo lobhaliwe ngekubhala ngekubhala ngekuguculwa. Luhla lwetinhlavu kumele lugucwe ngendlela yekutsi letincwadzi tibe nguletimbili tiphindvwe kabili. Sibonelo: kubhala ngekubhala ngekubhala ngekubhala ngekugucula (encrypt) kubuyisa (lm) kubhala ngekubhala ngekugucula (encrypt) kubuyisa (ewhjklnop) kubhala ngekubhala ngekugucula (encrypt) kubuyisa (kj) kubhala ngekugucula (encrypt) kubuyisa (ix)""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ssw_Latn,python,"
def next_smallest(lst):
    """"""Bhala umusho lolandzelako lolandzelako loluncane lolubitwa ngekutsi yi-next_smallest (<->) lolutfumela intfo yesibili lencane kuloluhla
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ssw_Latn,python,"
def is_bored(S):
    """"""Utawutfola silandzelo semagama, bese umsebenti wakho kutsi ubale linani lemalulwane. Lilulwane ngumusho locala ngeligama lelitsi ""I"". Letinye timisho tihlukaniswe nga '.', '?' nobe '!'. Sibonelo: >>> is_bored ((""Sawubona mhlaba"") 0 >>> is_bored ((""Lizulu liluhlata sasibhakabhaka. Lilanga liyakhanya. Ngiyayitsandza lesimo selitulu"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ssw_Latn,python,"
def any_int(x, y, z):
    '''Yakha umsebenti lotsatsa tinombolo letintsatfu. Ibuyisela liciniso nangabe yinye yaletinombolo ilingana nesamba saletinye letimbili, futsi tonkhe tinombolo tingema-integer. Ibuyisela lokungemanga kunobe ngutiphi letinye timo. Sibonelo any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ssw_Latn,python,"
def encode(message):
    """"""Bhala umusho lotawutsatsa umlayeto, bese uyawuhlela ngendlela yekutsi utsintshe tinhlavu temagama, bese uhlanganisa tonkhe tinhlavu temagama letisemlayetweni, bese uwahlela ngendlela yekutsi tinhlavu temagama letisembili tivele ngekulandzelana kwato.""""""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ssw_Latn,python,"

def skjkasdkd(lst):
    """"""Uphiwe luhla lwetinombolo letingenakubalwa. Kufanele utfole linani lelikhulu kakhulu bese ubuyisa linani lelingumbhalo walo. Sibonelo: Ku lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] umphumela kufanele ube ngu 10 Ku lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] umphumela kufanele ube ngu 25 Ku lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] umphumela kufanele ube ngu 13 Ku lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] umphumela kufanele ube ngu 11 Ku lst = [0,81,12,31,21] umphumela kufanele ube ngu 3 Ku lst = [1,0,8,1,2,1,7] umphumela kufanele ube ngu  7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ssw_Latn,python,"
def check_dict_case(dict):
    """"""Uma kunesisho, buyisela liciniso nangabe tonkhe tinkhombandlela tinemisho lencane nobe yonkhe tinkhombandlela tinemisho lenkhulu, kungenjalo buyisela emanga. Umsebenti kufanele ubuyisele emanga uma lesisho singenalutfo. Tibonelo: check_dict_case{""a"":""apple"", ""b"":""banana""}) kufanele ubuyisele liciniso. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) kufanele ubuyisele emanga. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) kufanele ubuyisele emanga. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) kufanele ubuyisele emanga. check_dict_case{""NC"":""STATE"", ""ZIP"":""12345""}) kufanele ubuyisele liciniso.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ssw_Latn,python,"
def count_up_to(n):
    """"""Sebentisa umsebenti lotsatsa inombolo lengasiyo negative bese ubuyisa inombolo yemadvodza ekucala langema-n langema-n langema-n langasiwo. sibonelo: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ssw_Latn,python,"
def multiply(a, b):
    """"""Gcwalisa lomsebenti lotsatsa tinombolo letimbili bese ubuyisa umkhicito wetinombolo tato. tsatsa kutsi lokufakwa kuhlale kusebenta. tibonelo: phindza ngekuphindzaphindza 148, 412) kufanele ubuyise 16. phindza ngekuphindzaphindza 19,28) kufanele ubuyise 72. phindza ngekuphindzaphindza 2020, 1851) kufanele ubuyise 0. phindza ngekuphindzaphindza 14,-15) kufanele ubuyise 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ssw_Latn,python,"
def count_upper(s):
    """"""Kulesitfombe, buka kutsi kunemagama lamanyenti kangakanani labhalwe ngemagama lamakhulu. Sibonelo: count_upper (('aBCdEf') iphendvula 1 count_upper (('abcdefg') iphendvula 0 count_upper (('dBBE') iphendvula 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ssw_Latn,python,"
def closest_integer(value):
    '''Yakha umsebenti lotsatsa linani (string) lemele inombolo bese ubuyisa inombolo lephelele lecishe ibe nguleyonkhana. Uma lenombolo ikhashane nalamanye lamanani lamabili, yijube kusuka ku zero. Sibonelo >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Caphela: Kujuba kusuka ku zero kusho kutsi uma inombolo leniketwe ikhashane nalamanye lamanani lamabili, lena lekufanele uyibuyisele nguleyo lekhashane na-zero. Sibonelo: closest_integer "" ((14.5"") kufanele ibuyise 15 bese closest_integer "" ((-14.5"") kufanele ibuyise -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ssw_Latn,python,"
def make_a_pile(n):
    """"""Uma uniketwe inombolo lephelele lephelele n, kumele wakhe inqwaba yematje lalinganako. Inombolo yematje lalinganako kulelizinga lelilandzelako ngule: - inombolo lelandzelako lengasiyo inombolo uma n ingasiyo inombolo - inombolo lelandzelako lengasiyo inombolo uma n ingunombolo lengasiyo inombolo. Buyisa inombolo yematje kulelo nalelo lizinga eluhla, lapho intfo lekhona ku-index i imele inombolo yematje kulelo nalelo lizinga (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ssw_Latn,python,"
def words_string(s):
    """"""Utawuniketwa silandzelo semagama lahlukaniswe ngemakhoma nobe tikhala. umsebenti wakho kutsi uhlukanise silandzelo semagama bese ubuyisa inhlanganisela yemagama. sibonelo: words_string ((""Sawubona, ligama lami ngingu John"") == [""Sawubona"", ""wami"", ""ligama"", ""ngu"", ""John""] words_string ((""Linye, mabili, lamatsatfu, lamane, lasihlanu, lasitfupha"") == [""Linye"", ""mabili"", ""lamatsatfu"", ""lamane"", ""sihlanu"", ""sitfupha""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ssw_Latn,python,"
def choose_num(x, y):
    """"""Lomsebenti utsatsa tinombolo letimbili letifanele x na-y bese ubuyisa inombolo lenkhulu lephelele lelinganako lelisendzaweni [x, y] ifaka ekhatsi. uma kute lenombolo, lomsebenti kumele ubuyise -1. sibonelo: khetha_inombolo 12 = 14 khetha_inombolo 13 = 12 = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ssw_Latn,python,"
def rounded_avg(n, m):
    """"""Uma n ungetulu kwa-m, buyisela -1. Sibonelo: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ssw_Latn,python,"
def unique_digits(x):
    """"""Kuniketwe luhlu lwema-integer lalusito x. buyisela luhlu loluhleliwe lwawo onkhe emagama langenayo inombolo lelinganako.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ssw_Latn,python,"
def by_length(arr):
    """"""Uma uniketwe inombolo lephelele, hlunga inombolo lephelele lesemkhatsini wa 1 na 9, bese ugucula inombolo lephelele, bese ubeka inombolo ngayinye esikhundleni sayo. Sibonelo: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> hlunga arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> hlunga arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""] Uma inombolo ingenalutfo, buyisela inombolo lengasiyo: arr = [] return [] Uma inombolo inelinani lelingasiyo, ungayitsatsi ngekutsi: arr = [1, 1 , 55] -> arr -> [1, 1], 55 -> arr -> [55, 1] - return ['One'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ssw_Latn,python,"
def f(n):
    """"""Sebentisa lomsebenti f lotsatsa n njengemlingisi, bese ubuyisa luhla lolukhulu n, lolusebenta njengeligugu lale element ku-index i i-factorial ya-i uma i i-pair noma inombolo yetinombolo kusuka ku-1 kuya ku-i ngalenye indlela. i icala ku-1. i-factorial ya-i kuhlanganiswa kwetinombolo kusuka ku-1 kuya ku-i (1 * 2 * ... * i). Sibonelo: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ssw_Latn,python,"
def even_odd_palindrome(n):
    """"""Nasiniketwe inombolo lephelele n, sibuyisela i-tuple lenenombolo yetinombolo letinemapalindromu letifanako naletingafani letiwela ngekhatsi kwebanga ((1, n), kufaka ekhatsi. Sibonelo1: Kufakwa: 3 Umphumela: (1, 2) Kuchazwa: I-palindrome yemapalindromu ayincenye yinye, futsi lamabili awo ayincenye. Sibonelo2: Kufakwa: 12 Umphumela: (4, 6) Kuchazwa: I-palindrome yemapalindromu ayincenye yinye, lamabili, lamatsatfu, lamane, lasitfupha, lasiphohlongo, lasiphohlongo, lasiphohlongo. Caphela: 1 <= n <= 10^3 2. i-tuple ibuyisele linani leliphelele lelinganako kanye neliphelele lelinganako. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ssw_Latn,python,"
def count_nums(arr):
    """"""Bhala umsebenti lotsi count_nums lotsatsa luhlu lwetinombolo letinemcondvo lophelele bese uphendvula linani letintfo letinemcondvo lophelele lonetinombolo letingu- > 0. Uma inombolo ingemcondvo longemuhle, bese kutsi inombolo yayo yekucala lesayinwe itawuba ngulelingemuhle: sibonelo: -123 inetinombolo letinesigci -1, 2, na-3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ssw_Latn,python,"
def move_one_ball(arr):
    """"""Umsebenti wakho kutsi ubone kutsi kuyakhona yini kutsi i-array ihlelwe ngendlela lengenako kwehla ngekwenta lomsebenti lolandzelako ku-array leniketwe: Ungenta umsebenti wekususa ngesekudla noma ngabe ngukuphi. Umsebenti wekususa ngesekudla kusho kususa tonkhe tintfo ku-array ngesikhundla sinye ngendlela lengiyo. Lento yekugcina ku-array itawususwa iye endzaweni yekucala ku-array i. 0th index. Uma kukhonakala kutfola i-array lehleliwe ngekwenta lomsebenti longenhla bese ubuyela ku True, loku lokunye kubuyela ku False. Uma i-array leniketwe ingenalutfo bese ubuyela ku True. Caphela: Luhlu loluniketwe lucinisekisiwe kutsi lunetintfo letisipesheli. Sibonelo: move_one_{(ball_[3, 4, 5, 2] Tsintselo lesiliciniso: Ngekwenta imisebenti lengenako nge 2min, kungafinyelelwa ku-array lengenako kwehla ngekwenta lomsebenti. Ku-array leniketwe: 1, 2, 3, 4, 5, (====ball_{right}, ku-False) akunakwenzeka kwenta umsebenti wekususa ngesibalo lekuniketwe.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ssw_Latn,python,"
def exchange(lst1, lst2):
    """"""Kulenkinga, utawusebentisa umshini lotsatsa luhlu lwetinombolo letimbili, bese uchaza kutsi kuyenteka yini kutsi kwentiwe kuchumana kwetintfo emkhatsini wato kute lst1 ibe luhlu lwetinombolo letimbili kuphela. kute umkhawulo wenombolo yetintfo letishintjanisiwe emkhatsini wa lst1 na lst2. uma kuyenteka kuchumana tintfo emkhatsini wa lst1 na lst2 kwentela kwenta tonkhe tintfo te lst1 tibe nguletifanako, buyisela ""YES"". uma kungenjalo, buyisela ""NO"". sibonelo: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Kucatjangwa kutsi luhlu lwekungenisa angeke lube ngulolungenalutfo. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ssw_Latn,python,"
def histogram(test):
    """"""Uma kunemagama lamanyenti lafana, buyisela onkhe. Sibonelo: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4} histogram ' (((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ssw_Latn,python,"
def reverse_delete(s,c):
    """"""Umsebenti siniketwe imisho lemibili s na c, kumele ususe tonkhe tinhlavu ku s letilingana nanobe nguyiphi inhlavu ku c bese uhlola kutsi umphumela walomusho uyalingana yini. Umusho ubitwa ngekutsi yi palindrome uma ufundzeka ngendlela lefanako emuva naphambili. Kufanele ubuyise i-tuple lequkethe umphumela walomusho kanye neliciniso/kungemanga kwentela kuhlola. Sibonelo: Uma s = ""abcde"", c = ""ae"", umphumela kufanele ube ('bcd', false) Uma s = ""abcdef"", c = ""b"" umphumela kufanele ube ('acdef', false) Uma s = ""abcdedcba"", c = ""ab"", umphumela kufanele ube ('cdedc', true)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ssw_Latn,python,"
def odd_count(lst):
    """"""Kuniketwe luhlu lwema string, lapho khona umlayeto ngamunye unetinombolo, buyisela luhlu. i ngayinye yetintfo letitfolakalako kumele kube ""sibalo setintfo letingafani ku string i yekungenisa. "" lapho tonkhe i kufanele tibuyiselwe sibalo setinombolo letingafani ku string i'th yekungenisa. >>> odd_count['1234567']) [""sibalo setintfo letingafani 4n i str4ng 4 ye 4nput.""] >>> odd_count['3',""111111""]) [""sibalo setintfo letingafani 1n i str1ng 1 ye 1nput."", ""sibalo setintfo letingafani 8n i str8ng 8 ye 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ssw_Latn,python,"
def minSubArraySum(nums):
    """"""Kuniketwe inombolo yetinombolo letinemaphuzu, tfola linani lelincane lalenombolo lengenamaphuzu. Sibonelo minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ssw_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Umsebenti wakho kutsi usebentise lamakamu kute ukhiphe emanti. Bhala linani lemitsi lekudzingeka kutsi wehlise lamakamu. Sibonelo 1: Kufakwa: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Kufakwa: 62: Kufakwa: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 Kufakwa: 53: Kufakwa: [[0,0,0], [0,0,0]] bucket_capacity: 5 Kufakwa: [[0,0,0]], [0,0,0]] Bucket_capacity: 5 Kufakwa: 0 * 0 * 0 * 1 * Kufakwa: 1 * 0 * 1 * 0 * 1 * 0 * 1 * 1 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ssw_Latn,python,"
def sort_array(arr):
    """"""Kulenkondlo, kufanele uhlele inombolo lengasiyo ye-negative integer ngekulandzela linani le-ones emfanekisweni wabo we-binary ngekukhuphuka. Kwelinani lelifanako le-ones, hlunga ngekulandzela linani le-decimals. Kumele kusetjentiswe ngalendlela: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ssw_Latn,python,"
def select_words(s, n):
    """"""Uma kunelucingo lolungu-s kanye nelinombolo lelingu-n, utfola umsebenti wekutsi usebentise umusho lotawuphindze uletse luhla lwawo onkhe emagama lavela ku-string s lanemagama langetulu kwa-n, kute lamagama avele ku-string s. Uma lolucingo lungenalutfo, lomsebenti kufanele ubuyise luhla lolungenalutfo. Caphela: ungacabanga kutsi lolucingo lolungenako lunetincwadzi kuphela kanye netindzawo.""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ssw_Latn,python,"
def get_closest_vowel(word):
    """"""Uphiwe ligama. Umsebenti wakho kutfola umshwana losedvute losemkhatsini wemabhonakele lamabili langasekudla (luhla lwekugucuka). Emabhonakele ekucala nasekugcineni akabalwa. Buyisa umshwana longenalutfo uma ungakhandzi umshwana lohlangabetana naletimo letingenhla. Ungatsatsa ngekutsi lomshwana loniketiwe ucuketse incwadzi yesiNgisi kuphela. Sibonelo: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ssw_Latn,python,"
def match_parens(lst):
    '''Utawutfola luhla lwetinhlaka letimbili, totimbili letinhlaka tifaka ekhatsi emakhekhe lavulekile '(' noma emakhekhe lavaliwe ') '. Umsebenti wakho kutsi uhlole kutsi kuyakhona yini kuhlanganisa letintambo letimbili ngekulandzelana lokutsite, kutsi le-string letawuphuma itawuba yinhle. Umshini we-string S utsatfwa ngekutsi unhle uma futsi kuphela uma onkhe emakhegi ku-S alinganisiwe. Sibonelo: i-string '((())' yinhle, kantsi i-string '()) ' ayikho. Buyisa 'Yebo' uma kunendlela yekwenta i-string lenhle, bese ubuyisa 'Cha' ngalenye indlela.'''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ssw_Latn,python,"
def maximum(arr, k):
    """"""Kuniketwe iarr yetinombolo letingenhla kanye nelinani leliphelele lelisemtsetfweni k, buyisela luhla loluhleliwe loludze k ngelinani lelisetulu k le-arr. Sibonelo1: Kufakwa: arr = [-3, -4, 5], k = 3 Umphumela: [-4, -3, 5] Sibonelo2: Kufakwa: arr = [4, -4, 4], k = 2 Umphumela: [4, 4] Sibonelo3: Kufakwa: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Umphumela: [2] Caphela: 1. Budze be-arr butawuhamba kusuka ku [1, 1000]. 2. Tintfo letise-arr tiyawuhamba kusuka ku [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ssw_Latn,python,"
def solution(lst):
    """"""Kuniketwe luhlu lolungasilo lwekugcina lwema integers, buyisela linani lawonkhe lamaphuzu langakahlanganiswa lasemiphakatsini.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ssw_Latn,python,"
def add_elements(arr, k):
    """"""Kuniketwe i-arr lengasiyo indzawo lengenalutfo kanye ne-arr lengasilo lutfo, buyisela linani letintfo letinemadijithi lamabili kusuka kuletintfo tekucala letingu-arr. Sibonelo: Kufakwa: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Umphumela: 24 # kuhlanganiswa kwa 21 + 3 Imikhawulo: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ssw_Latn,python,"
def get_odd_collatz(n):
    """"""Uma kunelinani leliphelele leliphelele n, buyisela luhlu loluhleliwe lolunetinombolo letingafani ngekulandzelana kwe collatz. Umcabango we Collatz ngumcabango kumathematics lohlobene nekulandzelana lokuchazwe ngalendlela lelandzelako: kucala nganoma nguluphi luhla loluphelele lwe n. Ngemuva kwaloko, umusho ngamunye utfolwa kusuka kumusho wangaphambilini ngalendlela lelandzelako: uma umusho wangaphambilini ulingana, umusho lolandzelako uyingxenye yemusho wangaphambilini. Uma umusho wangaphambilini ungakalungi, umusho lolandzelako uphindvwa katsatfu kunemusho wangaphambilini longetiwe 1. Umcabango kutsi akunandzaba kutsi nguyiphi inombolo ye n, kulandzelana kutawufika ku 1. Caphela: 1. Collatz (((1) ngu [1]. 2. luhlu loluhleliwe loluhleliwe ngekulandzelana lokwenyukako. Sibonelo: get_odd_collatz ((5) ubuyisa [1, 5] # Umusho we collatz wa 5 ngu [5, 8, 16, 4, 2, 1], ngako-ke tinombolo letingakalungi ngu 1, na 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ssw_Latn,python,"
def valid_date(date):
    """"""Kufanele ubhale umsebenti locinisekisa luhlu lwemalanga loluniketwe bese ubuyisa liciniso nangabe lusuku luliciniso ngalenye indlela, emanga. Lusuku luliciniso nangabe yonkhe lemitsetfo lelandzelako ihlangabetene: 1. Luhlu lwemalanga alukenalutfo. 2. Linani lemalanga alingabi ngaphasi kwa-1 nobe ngetulu kwa-31 etinyangeni 1,3,5,7,8,10,12. Linani lemalanga alingabi ngaphasi kwa-1 nobe ngetulu kwa-30 etinyangeni 4,6,9,11. Linani lemalanga alingabi ngaphasi kwa-1 nobe ngetulu kwa-29 enyangeni 2. 3. Tinyanga akukafaneli tibe ngaphasi kwa-1 nobe ngetulu kwa-12. 4. Lusuku kufanele lube ngendlela: mm-dd-yyyy sibonelo: valid_date (('03-11-2000') => true_date (valid) (('15-01-2012') => false (valid) (date) (valid) (('04-02040') => false (valid) (valid) (date) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (valid) (""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ssw_Latn,python,"
def split_words(txt):
    '''Uma kunemagama, buyisela luhla lwemagama lahlukaniswe ngetindzawo letingenalutfo, uma kute tindzawo letingenalutfo embhalweni kufanele uhlukanise ngemakhoma ',' uma kute emakoma kufanele ubuyisele linani letincwadzi letincane letinemagama langakahleleki ku-alfabhethi, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Tibonelo split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words"" ((abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ssw_Latn,python,"
def is_sorted(lst):
    '''Uma uniketwe luhla lwetinombolo, buyisela noma ngabe tihlelwe ngekwehla. Uma luhla lunetintfo letingetulu kwa 1 letitfolakala ngalokuphindziwe, buyisela i-False. Ungatsatsi tinombolo letinemaphutsa, tibalo letinemaphuzu.'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ssw_Latn,python,"
def intersection(interval1, interval2):
    """"""Umsebenti wakho kutsi ubone kutsi ngabe budze bekuhlangana kwaletindzawo letimbili bunenombolo leyodvwa yini. Sibonelo, kuhlangana kwetindzawo (1, 3), (2, 4) ngu (2, 3) lobudze balo ngu 1, lobungasiyo inombolo leyodvwa. Uma budze bekuhlangana bunenombolo leyodvwa, buyisela ""YEBO"", uma kungenjalo, buyisela ""CHA"". Uma letindzawo letimbili tingehlangani, buyisela ""CHA"". [input/output] tibonelo: kuhlangana:""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ssw_Latn,python,"
def prod_signs(arr):
    """"""Uniketwe inombolo lephelele ye-arr bese kufanele ubuyise linani lelingu-arr lelingu-arr lelihlanganiswe netimphawu taleyo naleyo nombolo ku-arr, lemelelwe ngu-1, -1 nobe 0. Caphela: ungabuyisi lutfo ku-arr lengenalutfo. Sibonelo: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ssw_Latn,python,"
def minPath(grid, k):
    """"""Uma kunemigca le-N nemakholomu la-N (N >= 2) kanye nelinani leliphelele le-k, lilinye nalelinye lisele laleligridi licuketse linani. Lelinye nalelinye linani leliphelele lelisendzaweni [1, N * N] kuyafana livela kanye kumaseli aleligridi. Kufanele utfole indlela lencane le-k kuleligridi. Ungacala kunoma nguyiphi inombolo, futsi kuleso naleso sinyatselo ungaya kunoma nguyiphi inombolo lengumakhelwane, ngalamanye emagama, ungaya kumaseli lahlanganyela emaphetselweni nalelo seli lakho. Khumbula kutsi indlela le-k kusho kutsi uvakashela emacembu la-k (hhayi kutsi lahlukene). KUNGENZEKA uphume kuligridi. Indlela A (yebudze be-k) itsatfwa njengencane kunendlela B (yebudze be-k) uma ngemuva kwekwenta luhla loluhleliwe lwemagugu kuletinsita A na-B (asitsi ngu-l_l_l_l_l_l_l_l_l), i-l_l_l_l_l_l_l_l_l_l_ng ngule-le-lexographically incane kunaleli-l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l_l, ngalamanye emagama, ungaya kunomahla leliligridi le-khatsi nawe, ngalamanye emagama lamanye, ungaya kulelo leligridi. Ungakwati kutsi ungaya kunoma, ungaya kunomahla, ngulo leligridi. Sicela ubuke ku-khatsi kunoma-khatsi nalelo leligridi. Sicela ubuke ku-khatsi: [A, khokha, khokha, khombisa indlela ye-k] [4, [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha] [i, khokha""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ssw_Latn,python,"
def tri(n):
    """"""Umlandvo we Fibonacci watiwa ngibo bonkhe bantfu, wafundvwa kakhulu bosati betibalo eminyakeni lembalwa leyengcile. Kepha, loko bantfu labangakwati ngumlandvo we Tribonacci. Umlandvo we Tribonacci uchazwa ngekuphindzaphindzeka: tri(1) = 3 tri(n) = 1 + n / 2, uma n ulengilengi. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), uma n ulengilengi. Sibonelo: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Uniketwe inombolo lephelele lengasiyo, kufanele ubuyise luhla lwetinombolo tekucala letifana na n + 1 temlandvo we Tribonacci. Sibonelo: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ssw_Latn,python,"
def digits(n):
    """"""Faka inombolo lephelele lengu-n, buyisela umkhicito wetinombolo letingafani. Buyisela 0 uma tonkhe tinombolo tiyimphahla. Sibonelo: tinombolo""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ssw_Latn,python,"
def is_nested(string):
    '''Yakha umsebenti lotsatsa umtfwalo njengekungenisa lokufaka emakhekhe lalinganisiwe kuphela. lomsebenti kumele ubuyisele liciniso nangabe futsi kuphela nangabe kunekulandzelana kwemakhekhe lavumelekile lapho lokungenani linye likhekhe kulelandzelana lihlanganisiwe. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]]') â -> True is_nested'[[]][[') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ssw_Latn,python,"

def sum_squares(lst):
    """"""Uphiwe luhla lwetinombolo. Kufanele ubuyise linani lelingu squared kuloluhla loluniketiwe, uhlanganise tonkhe tintfo kuloluhla tibe ngulelingu int lelisetulu (Lophakeme) kucala. Sibonelo: Ku lst = [1,2,3] umphumela kufanele ube ngu 14 Ku lst = [1,4,9] umphumela kufanele ube ngu 98 Ku lst = [1,3,5,7] umphumela kufanele ube ngu 84 Ku lst = [1.4,4.2,0] umphumela kufanele ube ngu 29 Ku lst = [-2.4,1,1] umphumela kufanele ube ngu 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ssw_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Yakha umsebenti lotawuphindza True uma inhlamvu yekugcina yelucingo loluniketwako iyinhlamvu ye-alfabhethi futsi ingasiyo incenye yeligama, bese u-False ngalenye indlela. Caphela: ""ligama"" licembu letinhlamvu lehlukaniswe tikhala.'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ssw_Latn,python,"
def can_arrange(arr):
    """"""Yakha umsebenti lotawuphindza inombolo lenkhulu yetintfo letingabi ngetulu nobe tilingana naleto letingaphambi kwato. Uma kute tintfo letinjalo letiphilako bese ubuyisa -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ssw_Latn,python,"
def largest_smallest_integers(lst):
    '''Yakha umsebenti lotawubuyisela i-tuple (a, b), lapho khona 'a' ngulelikhulu kunawo onkhe lamanani langakahleleki, bese 'b' ngulelincane kunawo onkhe lamanani langakahleleki eluhlwini. Uma kungekho lamanani langakahleleki nobe lamanani langakahleleki, abuyisele njenga None. Tibonelo: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ssw_Latn,python,"
def compare_one(a, b):
    """"""Yakha umsebenti lotsatsa inombolo lephelele, noma inombolo legucukako, noma inombolo lechazako, bese ubuyisa lenombolo lenkhulu leniketwe yona. Buyisa i-None uma lamagugu alinganako. Caphela: Uma inombolo lechazako imele inombolo legucukako, i-floating point ingaba ngu . nobe , compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_one, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_, compare_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_____________________________________________________________________________________________________________""""""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ssw_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Hlola kutsi lenombolo leniketwe i-n ingabhalwa yini njengenombolo lehlanganisiwe yetinombolo letine leticondzile letingaba nguletiphindvwe kabili. Sibonelo is_equal_to_sum_even (e) {4) == Emanga is_equal_to_sum_even (e) } (6) == Emanga is_equal_to_sum_even (e) } (8) == Liciniso """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ssw_Latn,python,"
def special_factorial(n):
    """"""I-factorial yaseBrazil ichazwa ngekutsi: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! lapho khona n > 0 Sibonelo: >>> special_factorial ((4) 288 Lomsebenti utotfola inombolo lephelele njengekungenisa futsi kufanele ubuyise i-factorial lelikhetselo yaleli nani leliphelele. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ssw_Latn,python,"
def fix_spaces(text):
    """"""_Sibonelo-3etincwadzi, faka tonkhe tikhala letingaphansi, bese uma kunetincwadzi letingaphansi letendlula ku-2 letilandzelanako, bese ufaka tonkhe tikhala letilandzelanako - fix_spaces ((""Sibonelo"") == ""Sibonelo"" fix_spaces ((""Sibonelo1"") == ""Sibonelo1"" fix_spaces ((""Sibonelo2"") == ""_Sibonelo2"" fix_spaces ((""Sibonelo 3"") == ""_Sibonelo-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ssw_Latn,python,"
def file_name_check(file_name):
    """"""Yakha umsebenti lotsatsa umtfwalo lomele ligama lefayela, bese ubuyisa 'Yebo' uma ligama lefayela livumelekile, bese ubuyisa 'Cha' uma kungasiko. Ligama lefayela libukwa njengalelivumelekile uma ngabe lemitsetfo lelandzelako ihlangabetene: - Akukafaneli kube netinombolo letingetulu kwetinombolo letintsatfu ('0'-'9') egameni lefayela. - Ligama lefayela licuketse ncamashi ichashazi '.' - Umtfwalo lomncane ngaphambi kwechashazi akumele ube ngulongenalutfo, futsi kumele ucale ngetinhlavu temagama latin alphapet ('a'-'z' na 'A'Z'). - Umtfwalo lomncane ngemuva kwechashazi kumele ube ngulomunye waletintfo letilandzelako: ['txt', 'exe', 'lld'] Sibonelo: file_name_check""{example.txt.} # => 'Yebo' file_name_check""{example.dll1} # => 'Cha' (ligama kufanele licale ngetinhlavu temagama latin alphapet)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ssw_Latn,python,"


def sum_squares(lst):
    """""""" Lomsebenti utawutsatsa luhlu lwema integers. Kuwo onkhe emarekhodi aloluhlu, lomsebenti utawuphindza ngekuphindza ngekuphindza inombolo lephelele uma inombolo yayo iyinombolo lephindvwe katsatfu bese uyawuphindza ngekuphindza ngekuphindza ngekuphindza ngekuphindza kane uma inombolo yayo iyinombolo lephindvwe kane hhayi iyinombolo lephindvwe katsatfu. Lomsebenti angeke ugucule emarekhodi aloluhlu lanemarekhodi langasiwo emaphindvwe katsatfu nobe lamane. Lomsebenti utawuphindza ngekuphindza inombolo lephelele.""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ssw_Latn,python,"
def words_in_sentence(sentence):
    """"""Uphiwe silandzelo lesichaza umusho, umusho ucuketse emagama lahlukaniswe sitfombe, futsi kumele ubuyise silandzelo lesicuketse emagama lasemushweni wekucala, lobudze bawo bunetinombolo letisembili, indlela yemagama kuloluhlelo lolusha kumele ifane nalena yekucala. Sibonelo1: Kufaka: umusho = ""Loku kulingwa"" Kuveta: ""ku"" Sibonelo2: Kufaka: umusho = ""let go for swimming"" Kuveta: ""go for"" Imikhawulo: * 1 <= len(sentence) <= 100 * umusho ucuketse tinhlavu kuphela """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ssw_Latn,python,"
def simplify(x, n):
    """"""Umsebenti wakho kutsi usebentise umshini lotawulinganisa leligama x * n. Lomshini utawubuyisela liciniso nangabe x * n lilingana nenombolo lephelele bese uphindze ubuye liciniso nangabe x * n lilingana nenombolo lephelele. Kokubili x na n, kumelela imicu yetinombolo letincane, futsi kunendlela lelandzelako, <numerator>/<denominator> lapho kokubili sibalo kanye nesibongo kuyinombolo lephelele lephelele. Ungatsatsa kutsi x, na n tinemaphrakshini lavumelekile, futsi kute zero njengesibongo. simplify ""1/5"", ""5/1"") = True simplify ""1/6"", ""2/1"") = False simplify ""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ssw_Latn,python,"
def order_by_points(nums):
    """"""Bhala umsebenti lohlunga luhla loluniketwe lwema integers ngekulandzelana ngekukhula ngekuhlanganiswa kwetinombolo tawo. Caphela: uma kunetintfo letinyenti letinemali lefanako yetinombolo tato, tihlele ngekuhlanganiswa kwetinombolo tato eluhlwini lwekucala. Sibonelo: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ssw_Latn,python,"
def specialFilter(nums):
    """"""Bhala umsebenti lotsatsa inombolo ye-array njengekungenisa bese ubuyisa inombolo yetintfo ku-array letinkhulu kuna-10 futsi kokubili inombolo yekucala neyekugcina ayisiyo (1, 3, 5, 7, 9). Sibonelo: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ssw_Latn,python,"
def get_max_triples(n):
    """"""Faka i-i = i * i - i + 1. Buyisa linani lemitsatfu (a[i], a[j], a[k]) ya-a lapho i < j < k, bese i[i] + a[j] + a[k] kuba ngulokuphindvwe kabili kwa-3. Sibonelo: Kufakwa: n = 5 Kukhipha: 1 Inchazelo: a = [1, 3, 7, 13, 21] Lokukuphela kwe-triple levumelekile ngu (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ssw_Latn,python,"
def bf(planet1, planet2):
    '''Kunemaplanethi lasiphohlongo endzaweni yetfu yelanga: lelisedvute nelilanga yiMercury, lelilandzelako yiVenus, bese kuba nguMhlaba, iMars, iJupiter, iSaturn, iUranus, neNeptune. Bhala umusho lofaka emagama emaplanethi lamabili njengemicu planet1 ne planet2. Umusho lofanele ubuyise i-tuple lehlanganisa onkhe emaplanethi lanemigudvu lephakathi kwemgudvu weplanethi1 nemgudvu weplanethi2, lehlelwe ngekusondzela elangeni. Umusho lofanele ubuyise i-tuple lengenalutfo uma iplanethi1 nobe iplanethi2 kungemagama emaplanethi lafanele.'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ssw_Latn,python,"
def sorted_list_sum(lst):
    """"""Bhala umsebenti lowemukela luhlu lwema string njenge parameter, ususe ema string lanebudze lobungalingani kuwo, bese ubuyisa loluhlu loluphetfwe ngekuhleleka. Loluhlu luhlala luluhla lwema string futsi alukabuki luhlu lwetinombolo, futsi lungaba netintfo letiphindzekako. Loluhlu kumele lukhuphuke ngebudze beligama ngalinye, futsi kumele ubuyise loluhlu luhlelwe ngalelo gunya. Uma emagama lamabili anebudze lobulinganako, hlunga loluhlu ngekulandzelana kwetinhlavu. Lomsebenti kumele ubuyise luhlu lwema string ngekuhleleka. Ungacabanga kutsi onkhe emagama atawuba nebudze lobulinganako. Sibonelo: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ssw_Latn,python,"
def x_or_y(n, x, y):
    """"""Luhlelo lolulula lolungabuyisa linani la x uma n yinombolo lecondzile kantsi uma kungenjalo lingabuyisa linani la y. Sibonelo: ku x_or_y ((7, 34, 12) == 34 ku x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ssw_Latn,python,"
def double_the_difference(lst):
    '''Uma uniketwe luhla lwetinombolo, buyisela lemali yetikwele tetinombolo kuloluhlu letingafani. Ungatinaki tinombolo letinemaphutsa nobe letingasiwo ema integers. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Uma loluhlu lwekufaka lungenalutfo, buyisela 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ssw_Latn,python,"
def compare(game,guess):
    """"""Ngicabanga kutsi sonkhe siyakhumbula kutsi bekunjani uma umphumela wesehlakalo lesilindzelwe sikhatsi lesidze sewubonakala. imiva nemicabango lonayo ngaleso sikhatsi kufanele kutsi uyibhale phansi bese uyicatsanisa. umsebenti wakho kutsi ubone kutsi umuntfu uvele wacabanga kahle yini imiphumela yetehlulelo letifanele. uniketwa tinhla letimbili temaphuzu kanye nekucagela kwebudze lobulinganako, lapho khona lizinga ngalinye libonisa kufanelana. Buyisa inhla yebudze lobulinganako lekhombisa kutsi bekusehlukanisweni kangakanani. uma bacagele kahle, linani ngu-0, kantsi uma kungasiko njalo, linani ngumehluko lophelele emkhatsini wekucagela kanye nemphumela. sibonelo: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,2,4]) -> [4,4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ssw_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Utawuniketwa ligama lelicembu (umshini) neluhla lwetitfombe. Letitfombe titawusetjentiswa kulayisha letinye titfombe kulelo cembu. Emandla aloluhlu ngalokulandzelako: Cap akabe linani letincwadzi letinkhulu kulelogama, bese SM aba linani letincwadzi letincane kulelogama, emandla aniketwa ngekuhlukaniswa kwe CAP - SM. Kufanele utfole titfombe letinkhulu bese ubuyisa inombolo ngalendlela: ClassName.StrongestExtensionName. Uma kunetintfo letimbili nobe ngetulu letinemandla lafanako, kufanele ukhetse lokutfolakala kucala kuloluhlu. Sibonelo, uma uniketwe ""Slices"" njengelisiko neluhla lwetitfombe: ['SEviviviSNGliCes', 'Cheese', 'Stufed'] bese kufanele ubuyise 'Slices.SEviviSNGliCes' 'SviviSNGliCes' my my mySviviSNGliCes' (Sicwebu lesinemandla kakhulu) ' (Example: 'AA_Beats'), ngoba 'AA_class' ngulona sitfombe sinemandla lamakhulu.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ssw_Latn,python,"
def cycpattern_check(a , b):
    """"""Uniketwe emagama lamabili. Kufanele ubuyisele liciniso nangabe ligama lesibili nobe lokujikeletako kwalo kungumsinga wesitsatfu kuligama lekucala cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ssw_Latn,python,"
def even_odd_count(num):
    """"""Inombolo lephelele. ibuyisela i-tuple lenenombolo yetinombolo letingafani. Sibonelo: even_odd_count ((-12) ==> (1, 1) even_odd_count ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ssw_Latn,python,"
def int_to_mini_roman(number):
    """"""Kuniketwa inombolo lephelele, tsatsa inombolo yayo yemaRoma njengentambo, bese uyibuyisela ngemagama lamancane.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ssw_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Kuniketwa budze bemaphetselo lamatsatfu. Buyisela liciniso nangabe lamaphetselo lamatsatfu akha unxantathu longakwesekudla, phutsa ngalenye indlela. Unxantathu longakwesekudla ngulona longunxantathu lapho khona lelinye lilangotsi lilinye likona lelingakwesekudla nobe li-90°. Sibonelo: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ssw_Latn,python,"
def find_max(words):
    """"""Bhala umusho lowemukela luhlu lwemininingwane. Loluhlu lunemagama lehlukene. Buyisa ligama lelinelinani lelisetulu lebalingisi labahlukile. Uma ngabe mininingwane leminyenti inelinani lelisetulu lebalingisi labahlukile, buyisa lelisembili ngekulandzelana kwe-lexicographical order.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ssw_Latn,python,"
def eat(number, need, remaining):
    """"""Uyinkhwenyane lelambile, futsi sewuvele udle inombolo letsite yemakotapeni, kepha nyalo udzinga kudla emakotapeni lamanyenti kute ucedzele kudla kwelilanga. kufanele ubuyise inombolo ya [inombolo lephelele yemakotapeni lodliwe ngemuva kwekudla kwakho, linani lemakhukhamba lasele ngemuva kwekudla kwakho] uma kungekho emakherotsi lamaningi lasele, utawudla onkhe emakherotsi lasele, kepha usazoba nendlala. Sibonelo: * udle ((5, 6, 10) -> [11, 4] * udle ((4, 8, 9) -> [12, 1] * udle ((1, 10, 10) -> [11, 0] * udle ((2, 11, 5) -> [7, 0] Tintfo letingagucuki: @number: inombolo lengiyo yemakotapeni lowadla. @need: inombolo lengiyo yemakotapeni lofuna kuwudla. @remaining: inombolo lengiyo yemakotapeni lesele lekhona esitokisini: *constrain: 0=0 * 0 = <1000 * 0 = <1000 * 0 = <1000 = <000 = 1000  Fun = fun = fun:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ssw_Latn,python,"
def do_algebra(operator, operand):
    """"""Kuloluhla lwekucala kunemisebenti lecondzile ye-algebra, bese kuloluhlu lwesibili kuneluhla lwetinombolo letinemcondvo lophelele. Sebentisa luhla loluniketwe kutsi wakhe inchazelo ye-algebra bese ubuyisa inchazelo yalenchazelo. Imisebenti lecondzile ye-algebra: Kufaka ( +) Kususa ( - ) Kuphindza ( *) Kuhlukanisa ( //) Kwenta ( ** Sibonelo): umshayeli['+', '*', '-'] luhlaka = [2, 3, 4, 5] umphumela = 2 + 3 * 4 - 5 => umphumela = 9 Caphela: Budze beluhla lwebasebenti bulingana nebudze beluhla lwe-operand minus munye. I-operand luhla lwebantfu labangabi nguleliphelele. Umshayeli unemshayeli munye lokungenani, bese luhla lwe-operand lune-operands lokungenani letimbili. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ssw_Latn,python,"
def solve(s):
    """"""Uma ngabe i-s[i] iyincwadzi, shintja tinhlavu tayo kusuka ngaphansi kuya etulu, uma kungenjalo, gcina njengobe tinjalo. Uma ngabe i-string ite tincwadzi, shintja i-string. Umsebenti kumele ubuyise i-string lephumelelisako. Sibonelo solve ((""1234"") = ""4321"" (((""ab"") = ""AB"" solve ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ssw_Latn,python,"
def string_to_md5(text):
    """"""Uma kunemugca lotsi 'text', buyisela umugca lofana ne md5 hash. Uma 'text' ungemugca longenalutfo, buyisela None. >>> string_to_md5 (('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ssw_Latn,python,"
def generate_integers(a, b):
    """"""Kuniketwe tinombolo letimbili leticinile a na b, buyisela emadijithi lalinganako emkhatsini wa a na b, ngekukhula. Sibonelo: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
