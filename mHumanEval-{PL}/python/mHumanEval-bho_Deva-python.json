[
    {
        "task_id": "HumanEval/0",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"जाँच करीं कि संख्या के दिहल गइल सूची में, का कौनो दूगो संख्या दिहल गइल सीमा के तुलना में एक दुसरा के करीब बा. उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ई फलन में इनपुट एगो स्ट्रिंग बा जेमे नेस्टेड कोष्ठक के कईगो समूह होला. रउआ के लक्ष्य उ समूह के अलग-अलग स्ट्रिंग में अलग करल बा आउर उ सब के सूची लौटावल बा. अलग-अलग समूह संतुलित होला (हर खुलल कोष्ठक ठीक से बंद होला) आउर एक दूसरे के भीतर नेस्टेड ना होला. इनपुट स्ट्रिंग में कौनो भी अंतराल के अनदेखा करीं. उदाहरण: >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ' ['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"एगो सकारात्मक फ्लोटिंग पॉइंट संख्या के देख के, एकरा के पूर्णांक भाग (सबसे बड़ पूर्णांक दिहल गइल संख्या से छोट) आउर दशमलव (बाकी भाग हमेशा 1 से छोट) में विभाजित कइल जा सकेला. संख्या के दशमलव भाग लौटाईं. उदाहरण: >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"आपके खाता में जमा आ निकासी के काम के लिस्ट दिहल गइल बा, जवन शून्य से शुरू होला. आपके काम ई पता लगावल बा कि कहीं खाता में जमा के रकम शून्य से कम हो गइल बा त फलन के सही लौटावे के चाहीं. अगर सही नइखे त गलत लौटावे के चाहीं. उदाहरण: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"इनपुट संख्या के एगो दिहल गइल सूची खातिर, इ डेटासेट के औसत के आसपास औसत पूर्ण विचलन के गणना करीं. औसत पूर्ण विचलन प्रत्येक तत्व आउर एगो केंद्रबिंदु (इस मामले में औसत) के बीच औसत पूर्ण अंतर होला: MAD = औसत । x - x_mean । उदाहरण: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"इनपुट सूची के हर दू गो लगातार तत्व के बीच एगो संख्या 'डिलीमीटर' डालीं `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ई फलन में इनपुट एगो स्ट्रिंग बा जे में नेस्टेड कोष्ठक खातिर कई गो समूह के प्रतिनिधित्व कइल जाला. प्रत्येक समूह खातिर, कोष्ठक के नेस्टिंग के सबसे गहरा स्तर आउटपुट कइल जाला. उदाहरण खातिर (() (()) में अधिकतम दू गो नेस्टिंग स्तर होला जबकि ((())) में तीन गो होला. >>> parse_nested_parens('((()) ((())) () (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"स्ट्रिंग के इनपुट लिस्ट के खाली अइसन स्ट्रिंग के फिल्टर करीं जेवन में दिहल गइल सबस्ट्रिंग >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] होखे\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"पूर्णांक के एगो दिहल गइल सूची खातिर, एगो योग आउर सूची में सब पूर्णांक के गुणनफल से बनल एगो ट्यूपल लौटाई. खाली योग 0 के बराबर होवे के चाहीं आउर खाली गुणनफल 1 के बराबर होवे के चाहीं. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक के दिहल गइल सूची से, अनुक्रम में दिहल गइल समय तक पावल गइल अधिकतम रोलिंग तत्व के सूची उत्पन्न करीं. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"सबसे छोट पैलिंड्रोम खोजें जे एगो दिहल गइल स्ट्रिंग से शुरू होखे. एल्गोरिथ्म विचार आसान बा: - दिहल गइल स्ट्रिंग के सबसे लंबा पोस्टफिक्स खोजें जे एगो पैलिंड्रोम हो. - स्ट्रिंग के अंत में एगो स्ट्रिंग उपसर्ग के रिवर्स जोड़ें जे पैलिंड्रोमिक प्रत्यय से पहिले आवेला. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"अगर दिहल गइल स्ट्रिंग एगो पैलिंड्रोम बा त परीक्षण करीं \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"इनपुट दुगो स्ट्रिंग a आउर b होला जेमे खाली 1 आउर 0 होला. इनपुट पर बाइनरी XOR निष्पादित करीं आउर परिणाम के एगो स्ट्रिंग के रूप में भी लौटाईं. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"स्ट्रिंग्स के सूची में से सबसे लंबा के लौटाई. एकही लंबाई के कई स्ट्रिंग्स के स्थिति में पहिला के लौटाई. इनपुट सूची खाली होखे पर ना लौटाई. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"दूगो पूर्णांक a आउर b के सबसे बड़ा सामान्य भाजक के वापसी >>> सबसे बड़ा_सामान्य_विभाजक ((3, 5) 1 >>> सबसे बड़ा_सामान्य_विभाजक ((25, 15) 5 \"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"इनपुट स्ट्रिंग के सबसे छोट से सबसे लंबा तक के सब उपसर्ग के सूची लौटाई >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"एगो स्ट्रिंग लौटाई जेमे 0 से लेके n तक के अंतराल-सीमित संख्या समाहित बा. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"एगो स्ट्रिंग के दे के, ई पता लगाईं कि ई में कतना अलग-अलग वर्ण बा (केस के बावजूद) >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"एगो विशेष ASCII प्रारूप में संगीत नोट के प्रतिनिधित्व करे वाला एगो स्ट्रिंग इनपुट करीं. आप के काम कई बीट के अनुरूप पूर्णांक के स्ट्रिंग सूची के पार्स करे के बा. इहा एगो उपपन्ना बा: 'o' नोट, आखिरी चार बीट 'o' - आधा नोट, आखिरी दू बीट 'o' - चौथा नोट, आखिरी एक बीट >>> parse_music. 'on",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"मूल स्ट्रिंग में कौनों उपस्ट्रिंग के केतना बेर पावल जा सकेला, खोजीं। ओवरलैपिंग केस के गिनती करीं. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"इनपुट 'शून्य' से 'नौ' तक के संख्या के एगो स्थान-सीमित स्ट्रिंग बा. वैध विकल्प 'शून्य', 'एक', 'दू', 'तीन', 'चार', 'पांच', 'छह', 'सात', 'आठ' आउर 'नौ' बा. संख्या के साथ स्ट्रिंग के छोट से लेके बड़ तक क्रमबद्ध करके लौटाई >>> sort_numbers (('तीन एक पांच') 'एक तीन पांच' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"संख्या के एगो आपूर्ति कइल गइल सूची से (कम से कम दू के लंबाई के) दू गो के चुनें आउर लौटावे जे एक-दूसरे के सबसे नजदीक होखें आउर ओके क्रम में लौटावे (छोटा संख्या, बड़ संख्या). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"संख्या के एगो सूची (कम से कम दू तत्व के), उ सूची में एगो रैखिक परिवर्तन लागू करीं, अइसन कि सबसे छोट संख्या 0 हो जाई आउर सबसे बड़ संख्या 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"खाली पूर्णांक खातिर कवनो पायथन मान के दिहल गइल सूची के फ़िल्टर करीं >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"दिहल गइल स्ट्रिंग के लमहरई >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"एगो दिहल गइल संख्या n खातिर, सबसे बड़ संख्या के खोज करीं जे n से छोट बा, जे n से छोट बा >>> सबसे बड़_विभाजक ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"एगो दिहल गइल पूर्णांक के अभाज्य गुणनखंड के सूची छोट से बड़ ले क्रम में लौटाई. हर गुणनखंड के गुणनखंड के संख्या के बराबर लिखल जाए के चाहीं. इनपुट संख्या के गुणनखंड के बराबर लिखल जाए के चाहीं >>> गुणनखंड (,) [2, 2, 2] >>> गुणनखंड (,) [5, 5] >>> गुणनखंड (,) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"पूर्णांक के सूची से, उ सब तत्व के हटा दीं जे एक से अधिक बार आवेला. इनपुट में जइसन क्रम बाचल बा, ओइसन ही क्रम में तत्व के रखीं. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"एगो दिहल गइल स्ट्रिंग खातिर, छोट अक्षर के बड़ अक्षर में आ बड़ अक्षर के छोट अक्षर में घुमाईं. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"एगो एकल स्ट्रिंग में स्ट्रिंग के सूची के संयोजन >>> संयोजन (क) ' ' >>> संयोजन (क) ' (ख) ' (ग) ' (ख) '\"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"स्ट्रिंग के एगो इनपुट लिस्ट के खाली एगो दिहल गइल उपसर्ग से सुरू होखे वाला के ही फ़िल्टर करीं. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"सूची में खाली धनात्मक संख्या के लौटाई. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"अगर दिहल गइल संख्या अभाज्य बा त सही लौटाईं, आउर अगर दिहल गइल संख्या अभाज्य बा त गलत लौटाईं. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs एगो बहुपद के गुणांक हवे. find_zero find x अइसन कि poly(x) = 0. find_zero खाली शून्य बिंदु ही लौटावेला, भले ही बहुत सारा होखे. एकरे अलावा, find_zero खाली सूची xs लेला जेकर गुणांक के संख्या भी होला आउर सबसे बड़ गैर-शून्य गुणांक होला काहे कि ई एगो समाधान के गारंटी देला. >>> गोल ((find_zero[(1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> गोल ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"बहुपद के मूल्यांकन बिंदु x पर गुणांक xs के साथ करेला. वापसी xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ई फलन एगो सूची l लेला आउर एगो सूची l' लौटावेला, जेमे l' उ सूचकांक में l के समान होला जे तीन से विभाज्य ना होला, जबकि एकर मान उ सूचकांक में जे तीन से विभाज्य होला, l के संबंधित सूचकांक के मान के बराबर होला, लेकिन क्रमबद्ध होला. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"एगो सूची में क्रमबद्ध अनूठा तत्व के लौटाई >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"सूची में अधिकतम तत्व लौटाई. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"संख्या 7 के संख्या के संख्या के लौटावेला जवन कि n से कम पूर्णांक में आवेला आउर 11 या 13 से विभाज्य बा. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ई फलन एगो सूची लेला आउर एगो सूची लौटावेला l' अइसन कि l' विषम सूचकांक में l के समान हो, जबकि एकर मान सम सूचकांक में l के सम सूचकांक के मान के बराबर हो, लेकिन क्रमबद्ध हो. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"इनपुट स्ट्रिंग के रूप में लेवेला जेकरा के encode_cyclic फलन से एन्कोड कइल गइल होखे. डिकोड कइल गइल स्ट्रिंग लौटावेला.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"तीन अक्षर के चक्र समूह द्वारा एन्कोडेड स्ट्रिंग लौटावेला.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib एगो n-वां संख्या के फर्कावेला जे एगो फाइबोनैचि संख्या बा आउर इ भी अभाज्य बा. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero पूर्णांक के एगो सूची के इनपुट के रूप में लेला. अगर सूची में तीन अलग-अलग तत्व बा जे शून्य के योग बा त इ सही लौटावेला, आउर अगर ना बा त गलत. >>> triple_sum_to_zero (([1, 3, 5, 0]) गलत >>> triple_sum_to_zero (([1, 3, -2, 1]) सही >>> triple_sum_to_zero (([1, 2, 3, 7]) गलत >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) सही >>> triple_sum_to_zero ([1, 3, -2, 1]) गलत \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"एगो अइसन सड़क के कल्पना करीं जे एकदम सीधा बा आ अनंत लंबाई के बा. n कार बाएं से दाएं चलत बाड़ी स; ओही समय, n कार के एगो अलग सेट दाएं से बाएं चलत बाड़ी स. कार के दु सेट एक दूसरा से बहुत दूर से शुरू होला. सब कार एकही गति से चलेली स. दू गो कार के टक्कर तब होखेला जब एगो कार जे बाएं से दाएं बढ़ रहल बा, दाएं से बाएं बढ़ रहल कार से टकरा जाला. हालाँकि, कार असीम रूप से मजबूत आ मजबूत बाड़ी स; नतीजतन, ऊ आपन ट्रैकटोरिया में चलत रहीहें जइसे कि ऊ टक्कर ना कइले होखें. ई फलन अइसन टक्कर के संख्या के आउटपुट देला.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"एगो तत्व के साथ सूची लौटाई जेमे 1. के वृद्धि भइल बा. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] \"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero पूर्णांक के एगो सूची के इनपुट के रूप में लेला. अगर सूची में दू गो अलग-अलग तत्व बा जे शून्य के योग बनावेला, त इ सही लौटावेला, आउर अगर ना बा त गलत. >>> pairs_sum_to_zero([1, 3, 5, 0]) गलत >>> pairs_sum_to_zero[(1, 3, -2, 1]) गलत >>> pairs_sum_to_zero([1, 2, 3, 7]) गलत >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) सही >>> pairs_sum_to_zero[1]) गलत \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"इनपुट संख्या x के संख्यात्मक आधार के आधार में बदलें. रूपांतरण के बाद स्ट्रिंग प्रतिनिधित्व लौटाएं. आधार संख्या 10 से कम बा. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"एगो त्रिभुज खातिर एगो तरफ के लंबाई आउर उच्च वापसी क्षेत्र के दिहल गइल. >>> त्रिभुज_क्षेत्र\"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"फिबोनैकी अनुक्रम के समान एगो अनुक्रम बा जे निम्न प्रकार से परिभाषित होला: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया एगो फलन लिखीं ताकि fib4 संख्या अनुक्रम के n-वां तत्व के कुशलता से गणना कइल जा सके. रिकर्सन के उपयोग मत करीं. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"सूची में तत्वन के मध्यफल l. >>> मध्यफल (([3, 1, 2, 4, 5]) 3 >>> मध्यफल (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"जाँच करे कि का दिहल गइल स्ट्रिंग एगो पालिंड्रोम बा >>> is_palindrome('') सही बा >>> is_palindrome('aba') सही बा >>> is_palindrome('aaaaa') सही बा >>> is_palindrome('zbcd') गलत बा \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n मॉडुलो p (संख्या के बारे में सचेत रह). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"इनपुट स्ट्रिंग के रूप में लेवेला जेकरा के encode_shift फलन से एन्कोड कइल गइल होखे. डिकोड कइल गइल स्ट्रिंग लौटावेला.\"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"वर्णमाला में हर वर्ण के 5 से स्थानांतरित करके एन्कोडेड स्ट्रिंग लौटाई.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels एगो फलन बा जे स्ट्रिंग के लेला आ बिना स्वर के स्ट्रिंग लौटावेला. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"अगर सूची में सब संख्या सीमा से नीचे बा त सही लौटाई. >>> सीमा से नीचे_{[1, 2, 4, 10], 100) सही >>> सीमा से नीचे_{[1, 20, 4, 10], 5) गलत \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"दूगो संख्या x आउर y जोड़ल जाय >>> जोड़ल जाय ((2, 3) 5 >>> जोड़ल जाय ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"जाँच करीं कि का दू गो शब्द में एके तरह के अक्षर बा. >>> same_chars('eabcdzzzz', 'dddzzzzzzdeddabc') सही >>> same_chars('abcd', 'dddddddddabc') सही >>> same_chars('dddddddabc', 'abcd') सही >>> same_chars('eabcd', 'dddddddddabc') गलत >>> same_chars('abcd', 'dddddddabddce') गलत >>> same_chars'(abcdzzzz', 'dddzzzzzzdddabc') गलत \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"फिबोनाची के n-वाँ संख्या लौटाई. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets एगो स्ट्रिंग बा \"<\" आ \">\". अगर हर खोले वाला ब्रैकेट में एगो संबंधित बंद करे वाला ब्रैकेट बा त True लौटाई. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"True लौटाई अगर सूची तत्व एकरुपता से बढ़ रहल बा या घट रहल बा. >>> एकरुपता (([1, 2, 4, 20]) True >>> एकरुपता (([1, 20, 4, 10]) False >>> एकरुपता (([4, 1, 0, -10]) True \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"दू गो सूची खातिर क्रमबद्ध अद्वितीय सामान्य तत्व लौटाई. >>> सामान्य ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> सामान्य ([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n के सबसे बड़ा अभाज्य गुणनखंड के लौटाईं. मान लीं कि n > 1 आउर अभाज्य संख्या ना हवे. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n एगो फलन बा जे 1 से n तक के संख्या के योग बनावेला. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets एगो स्ट्रिंग बा \"(\" आ \")\". अगर हर खोले वाला ब्रैकेट में एगो संबंधित बंद करे वाला ब्रैकेट बा त सही लौटाई. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs एगो बहुपद के गुणांक के निरूपित करेला. xs[0] + xs[1] * x + xs[2] * x^2 + .... एही रूप में एह बहुपद के व्युत्पन्न के लौटाई. >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"फिबफिब संख्या अनुक्रम फिबोनैकी अनुक्रम के समान एगो अनुक्रम बा जेकर परिभाषा नीचे दिहल गइल बा: फिबफिब ({0}) == 0 फिबफिब ({1}) == 0 फिबफिब ({2}) == 1 फिबफिब ({1}) == फिबफिब ({1}) + फिबफिब ({2}) + फिबफिब ({3}) । कृपया एगो फलन लिखीं ताकि फिबफिब संख्या अनुक्रम के n-वाँ तत्व के कुशलता से गणना कइल जा सके. >>> फिबफिब ({1}) 0 >>> फिबफिब ({4}) 5 >>> फिबफिब ({4}) 8) 24 \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"एगो फलन लिखें vowels_count जवन एगो शब्द के प्रतिनिधित्व करे वाला स्ट्रिंग के इनपुट के रूप में लेला आउर स्ट्रिंग में स्वर के संख्या लौटावेला. इ मामला में स्वर 'a', 'e', 'i', 'o', 'u' होला. इहा, 'y' भी स्वर होला, लेकिन खाली तब जब इ दिहल शब्द के अंत में होला. उदाहरण: >>> vowels_count(\"abcde\") 2 >>> vowels_count(\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"अउरी टेस्ट केस जोड़ल जाय।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"परिपत्र संख्या x के अंक के घुमाव, अंक के दाहिना ओर घुमाव आ परिणाम के स्ट्रिंग के रूप में लौटाव. अगर shift > अंक के संख्या बा त, अंक के उलटा लौटावे के बा. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"कार्य एगो फलन लिखें जे इनपुट के रूप में एगो स्ट्रिंग लेई आउर खाली ऊपरी वर्ण के योग के वापस करे. उदाहरण: digitSum{\"\") => 0 digitSum{\"abAB\") => 131 digitSum{\"abcCd\") => 67 digitSum{\"helloE\") => 69 digitSum{\"woArBld\") => 131 digitSum{\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"इ काम में, आपके एगो स्ट्रिंग दिहल जाई जे एगो फल टोकरी में वितरित आम आउर संतरा के संख्या के प्रतिनिधित्व करेला इ टोकरी में आम, संतरा आउर आम के फल होला. स्ट्रिंग के देखते हुए जे आम आउर आम के कुल संख्या के प्रतिनिधित्व करेला आउर टोकरी में आम के कुल संख्या के प्रतिनिधित्व करे वाला पूर्णांक टोकरी में आम के फल के संख्या लौटावेला. उदाहरण खातिरः fruit_distribution\"5(apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples and 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"एगो सरणी के एगो शाखा के प्रतिनिधित्व करे खातिर एगो पेड़ के दिहल गइल बा जेकरा में गैर-ऋणात्मक पूर्णांक नोड बा, त राउर काम एगो नोड के चुनल आ वापस कइल बा. चुनल गइल नोड सबसे छोट सम मान वाला नोड होखे के चाहीं. अगर एके तरह के सबसे छोट सम मान वाला कईगो नोड पावल गइल बा त सबसे छोट सूचकांक वाला नोड लौटा दिहल जाला. चुनल गइल नोड के एगो सूची में लौटावल जाए के चाहीं, [smallest_value, its index] , अगर कौनो सम मान ना होखे या दिहल गइल सरणी खाली बा, लौटा दिहल जाय []. उदाहरण 1: इनपुटः [4,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 में सबसे छोट सम मान बा, आ 2 में सबसे छोट सूचकांक बा. उदाहरण 2: इनपुटः [1,2,3] आउटपुटः [2, 1] स्पष्टीकरणः 2 में सबसे छोट सम मान बा, आ 2 में सबसे छोट सम मान बा. उदाहरण 3: इनपुटः [] आउटपुटः [] इनपुटः [4: [5, 3, 4, 2] आउटपुटः 0, 1 आउटपुटः 0 सबसे छोट नोड, लेकिन एकर मान शून्य बा. उदाहरणः सबसे छोट नोड के लंबाई सबसे छोट बा, लेकिन एकर मान शून्य बा. पहिला नोड बा, जेकरा में 10000 के मान बा, लेकिन एकर मान शून्य बा.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''एगो पूर्णांक के आवृत्ति उ संख्या होला जवन सूची में आवेला. अगर अइसन कौनो मान ना होखे, त -1 लौटावे के चाहीं. उदाहरण: खोज ([4, 1, 2, 2, 3, 1]) == 2 खोज ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 खोज ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''पूर्णांक के सूची दिहल गइल बा, अजीब क्रम में सूची लौटाई. अजीब क्रम में, जब आप न्यूनतम मान से शुरू करीं, तब शेष पूर्णांक के अधिकतम, तब न्यूनतम आउर अइसने. उदाहरण: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''अगर तीनों गो किनारा एगो वैध त्रिभुज के रूप में बा त त्रिभुज के क्षेत्रफल के दू दशमलव बिंदु पर गोल करके लौटाई. अगर अइसन ना बा त -1 लौटाई. अगर कौनो दू गो किनारा के योग तिसरका किनारा से बड़ बा त तीनों किनारा वैध त्रिभुज बनावेला. उदाहरण: त्रिभुज_क्षेत्रफल ((3, 4, 5) == 6.00 त्रिभुज_क्षेत्रफल ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''एगो फलन लिखब जउन सही लौटाई अगर ऑब्जेक्ट q उड़ जाई, आउर गलत अगर ऑब्जेक्ट q संतुलित बा (ई एगो पालिंड्रोमिक सूची बा) आउर एकर तत्व के योग अधिकतम संभव वजन से कम या बराबर बा w. उदाहरण: will_it_fly([1, 2], 5) â -> False # 1+2 अधिकतम संभव वजन से कम बा, लेकिन इ असंतुलित बा. will_it_fly([3, 2, 3], 1) â -> False # इ संतुलित बा, लेकिन 3+2+3 अधिकतम संभव वजन से अधिक बा. will_it_fly[3, 2, 3], 9) â -> True # 3+23 अधिकतम संभव वजन से कम बा, आउर इ संतुलित बा. will_it_fly([3], 5) â -> True # 3 अधिकतम संभव वजन से कम बा, आउर इ संतुलित बा.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"पूर्णांक के एगो सरणी के क्रम दिहल जाय तब, सरणी के पालिंड्रोमिक बनावे खातिर न्यूनतम संख्या में कौनों तत्व के बदले के जरूरत बा. पालिंड्रोमिक सरणी अइसन सरणी होला जेकर पठन आगे-पीछे एके तरह से होला. एगो बदलाव में, आप एगो तत्व के कौनों दूसर तत्व में बदल सकत बानी. उदाहरण खातिरः smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''एगो फलन लिखल जाय जे दू गो स्ट्रिंग के लिस्ट स्वीकार करे आ ऊ लिस्ट लौटावे जेकर लिस्ट में कुल वर्ण के संख्या दूसर लिस्ट से कम होखे। अगर दुनों लिस्ट में वर्ण के संख्या एके होखे, त पहिला लिस्ट लौटावल जाय। उदाहरण कुल_मैच (https://www.txt.com/index.php?topic=1&oldid=4&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=10&oldid=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old; कुल_4&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=1&old=3&old=3&old=3&old=3&old=3&old=3&old=3&old=3&old=3&old; कुल_4&old=3&old='''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"एगो फलन लिखब जउन सही लौटाई अगर दिहल गइल संख्या 3 अभाज्य संख्या के गुणनफल बा आउर गलत बा त. इ जान के कि (ए) 100 से कम बा उदाहरण: is_multiply_prime(30) == सही 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"एगो फलन लिखल जाय जे अगर संख्या x n के साधारण गुणनखंड बा त सही आ अगर n**int=x बा त गलत के उत्तर देवेला. उदाहरण खातिरः is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''एगो फलन लिखल जाय जे एगो पूर्णांक a लेला आउर अगर इ इंकरेटर कौनो पूर्णांक संख्या के घन बा त सही लौटावेला. ध्यान दीं: आप मान सकत बानी कि इनपुट हमेशा मान्य होला. उदाहरण: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"एगो फलन लिखल जाय जे में से एगो हेक्साडेसिमल संख्या के स्ट्रिंग के रूप में प्राप्त कइल जाय आ ऊ हेक्साडेसिमल अंक के संख्या के गणना करे जे प्राइम संख्या हवे (प्राइम संख्या, या प्राइम, 1 से बड़ प्राकृतिक संख्या होला जे दू गो छोट प्राकृतिक संख्या के गुणनफल ना होला) । हेक्साडेसिमल अंक 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. प्राइम संख्या 2, 3, 5, 7, 11, 13, 17,... हवे, एही से नीचे दिहल अंक के संख्या के निर्धारण करे के बा: 2, 3, 5, 7, B (=डेसिमल 11), D (=डेसिमल 13) नोटः आप मान लीं कि इनपुट हमेशा सही या खाली स्ट्रिंग होला, आ प्रतीक A,B,C,D,E,F हमेशा अपरकेस होला उदाहरण खातिरः \"num\" = AB आउटपुट के संख्या 1. \"num\" = AB, \"num\" = 1077E आउटपुट के संख्या 2. \"num\" = AB331EDA आउटपुट के संख्या 4. \"num\" = \"BC\" के संख्या 6.01234567DEF \"2020\" के आउटपुट के संख्या 2.0123DEF \"2020\" के रूप में लिखल जाय।\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"एगो संख्या बाइनरी में रूपांतरित करे खातिर एगो दशमलव संख्या के रूप में दिहल जाई. फलन के एगो स्ट्रिंग लौटावे के चाहीं, जहाँ से प्रत्येक वर्ण एगो बाइनरी संख्या के प्रतिनिधित्व करेला. स्ट्रिंग में प्रत्येक वर्ण '0' या '1' होई. स्ट्रिंग के शुरुआत में आउर अंत में अतिरिक्त वर्ण 'db' होई. अतिरिक्त वर्ण प्रारूप में मदद करे खातिर होला. उदाहरण: दशमलव_से_बाइनरी(15) # \"db1111db\" दशमलव_से_बाइनरी32) # \"db100000db\" लौटावेला\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"एगो स्ट्रिंग तबे खुश होला जब एकर लंबाई कम से कम 3 होखे आ हर 3 लगातार अक्षर अलग होखे उदाहरण खातिरः is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (a) => True is_happy (b) => True is_happy (adb) => True is_happy (x) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ई सेमेस्टर के आखिरी हफ़्ता ह आ शिक्षक के छात्रन के ग्रेड देवे के बा. शिक्षक ग्रेडिंग खातिर आपन खुद के एल्गोरिथ्म बना रहल बाड़ी। खाली समस्या ई बा कि ऊ ग्रेडिंग खातिर इस्तेमाल कइल कोड भुला गइल बाड़ी। ऊ कुछ छात्रन खातिर आपके जीपीए के लिस्ट देले बाड़ी आ रउआ के एगो फलन लिखे के बा जवन नीचे दिहल तालिका के उपयोग क के अक्षर ग्रेड के लिस्ट आउटपुट कर सके ला: जीपीए । अक्षर ग्रेड 4.0 ए+ > 3.7 ए > 3.3 ए- > 3.0 बी+ > 2.7 बी- > 2.3 बी- > 2.0 सी+ > 1.7 सी > 1.3 सी- > 1.0 डी+ > 0.7 डी > 0.0 डी- 0.0 ई उदाहरणः grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"एगो फलन लिखीं जे एगो स्ट्रिंग ले ले आ अगर स्ट्रिंग के लंबाई अभाज्य संख्या होखे तब ई सही आ अगर ना होखे तब गलत के परिणाम देवे उदाहरण prime_length('Hello') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"धनात्मक पूर्णांक n के देखते हुए, उन n-अंकीय धनात्मक पूर्णांक की संख्या लौटाएं, जो 1 से शुरू या समाप्त हो रहे हों.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"एगो धनात्मक पूर्णांक N के द्वापर संख्या में अंक के कुल योग के वापस करीं. उदाहरण खातिर N = 1000, अंक के योग 1 होई आ आउटपुट \"1\" होई. N = 150 खातिर अंक के योग 6 होई आ आउटपुट \"110\" होई. N = 147 खातिर अंक के योग 12 होई आ आउटपुट \"1100\" होई. चरः @N पूर्णांक बाधाः 0 â‰¤ N â‰¤ 10000. आउटपुटः बाइनरी संख्या के एगो स्ट्रिंग \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"पूर्णांक के एगो गैर-खाली सूची दिहल गइल lst. जोड़े खातिर सम तत्व के जोड़ल जाला जे विषम सूचकांक पर होला. उदाहरण: जोड़ (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"एगो फलन लिखें जे एगो स्ट्रिंग ले ले आ ओकर एगो क्रमबद्ध संस्करण लौटावेला. स्ट्रिंग के क्रमबद्ध संस्करण, एगो अइसन स्ट्रिंग होला जहाँ सब शब्द (स्पेस से अलग) के एगो नया शब्द से बदल दिहल जाला जहाँ सब अक्षर के क्रम क्रम में क्रमबद्ध कइल जाला. ध्यान दीं: आपके वाक्य में शब्द आ खाली जगह के क्रम के ध्यान रखे के चाहीं. उदाहरण खातिरः anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') लौटावेला 'ehllo' anti_shuffle (('Hello World!!!') लौटावेला 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"एगो मैट्रिक्स के समान एगो नेस्टेड सूची के रूप में एगो 2 आयामी डेटा दिहल जाला, हालाँकि, मैट्रिक्स के विपरीत, प्रत्येक पंक्ति में भिन्न संख्या में स्तंभ हो सकेला. lst, आ पूर्णांक x के ध्यान में रख के, सूची में पूर्णांक x खोजीं, आ ट्यूपल्स के सूची लौटाईं, [(x1, y1), (x2, y2) ...] अइसन कि प्रत्येक ट्यूपल एगो निर्देशांक - (पंक्ति, स्तंभ) होखे, 0 से शुरू होला. सुरु में निर्देशांक के आरोही क्रम में पंक्तियन द्वारा क्रमबद्ध करीं. साथ ही, पंक्ति के निर्देशांक के अवरोही क्रम में स्तंभन द्वारा क्रमबद्ध करीं. उदाहरण: get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 4), 0 (2, 5), (2, 0) get_((1), 1) [] == [[, पंक्ति [1], 2, 3, 2]], [2, 3]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"अगर अभाज्य पूर्णांक के एगो सरणी दिहल गइल बा, तब क्रमबद्ध करे के बाद दिहल गइल सरणी के एगो प्रति लौटाईं, अगर योग (पहिला इंडेक्स मान, आखिरी इंडेक्स मान) विषम बा त दिहल गइल सरणी के क्रम में क्रमबद्ध करीं, या अगर योग (पहिला इंडेक्स मान, आखिरी इंडेक्स मान) सम बा त ओकरा के क्रम में क्रमबद्ध करीं। ध्यान दींः * दिहल गइल सरणी के मत बदलीं। उदाहरणः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"एगो फलन एन्क्रिप्ट बनाईं जे एगो स्ट्रिंग के तर्क के रूप में ले ले आ वर्णमाला के घुमा के एगो एन्क्रिप्ट कइल स्ट्रिंग लौटावे. वर्णमाला के अइसन तरीका से घुमावल जाए के चाहीं कि अक्षर दू स्थान पर दू से गुणा करके नीचे आ जाव. उदाहरण खातिरः एन्क्रिप्ट (hi) लौटावे 'lm' एन्क्रिप्ट (asdfghjkl) लौटावे 'ewhjklnop' एन्क्रिप्ट (gf) लौटावे 'kj' एन्क्रिप्ट (et) लौटावे 'ix'\"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"एगो फलन लिखें जे सूची के दूसरका सबसे छोट तत्व के लौटावेला. अगर अइसन कौनों तत्व ना बा त फलन ना लौटावेला. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"एगो शब्द के एगो स्ट्रिंग दिहल जाई, आ राउर काम उबाऊपन के संख्या गिनावल होई. उबाऊपन एगो अइसन वाक्य होला जवन \"मैं\" शब्द से शुरू होला. वाक्य के सीमा '.', '?' या '!' से होला. उदाहरण खातिरः >>> is_bored(\"हैलो वर्ल्ड\") 0 >>> is_bored(\"आकाश नीला बा. सूरज चमकेला. हमरा इ मौसम पसंद बा\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''एगो फलन बनावे खातिर 3 संख्या के उपयोग कइल जाला. अगर संख्या में से एगो संख्या दूसर दू संख्या के योग के बराबर बा त इ सही लौटावेला, आउर सब संख्या पूर्णांक होला. बाकी सब मामला में इ गलत लौटावेला. उदाहरण any_int{5, 2, 7} -> True any_int{3, 2, 2}) -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"एगो फलन लिखब जउन एगो संदेस लेई, अउर अइसन तरीका से एन्कोड करे कि इ सब अक्षर के केस बदल देई, संदेस में सब स्वर के बदल के ओही अक्षर के साथ जो अंग्रेजी वर्णमाला में उ स्वर के 2 स्थान आगे दिखाई देई. खाली अक्षर मान लीं. उदाहरण: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"एगो पूर्णांक के सूची दिहल गइल बा. सबसे बड़ प्राइम मान के खोज के एकर अंक के योग लौटावे के बा. उदाहरण: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] आउटपुट 10 होखे के चाहीं lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] आउटपुट 25 होखे के चाहीं lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] आउटपुट 13 होखे के चाहीं lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] आउटपुट 11 होखे के चाहीं lst = [0,81,12,3,21,1] आउटपुट 3 होखे के चाहीं lst = [0,1,8,1,2,7] आउटपुट 7 होखे के चाहीं \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"अगर एगो शब्दकोश दिहल गइल बा, त अगर सब कुंजी छोट अक्षर में स्ट्रिंग बा या सब कुंजी बड़ अक्षर में स्ट्रिंग बा त सही लौटाईं, अन्यथा गलत लौटाईं. फलन के गलत लौटावे के चाहीं अगर दिहल गइल शब्दकोश खाली बा. उदाहरण: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) के सही लौटावे के चाहीं. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) के गलत लौटावे के चाहीं. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) के गलत लौटावे के चाहीं. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) के गलत लौटावे के चाहीं. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"12345}) के सही लौटावे के चाहीं.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"एगो फलन लागू करीं जे एगो गैर-ऋणात्मक पूर्णांक लेला आउर पहिला n पूर्णांक के एगो सरणी लौटावेला जे प्राइम संख्या होला आउर n से छोट होला. उदाहरण खातिरः count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"एगो फलन के पूरा करीं जे दू गो पूर्णांक के ले ले आ उनहन के इकाई अंक के गुणनफल के लौटावेला. मान लीं कि इनपुट हमेशा मान्य होला. उदाहरण: गुणा करे से {148, 412) 16 लौटावे के चाहीं. गुणा करे से {19, 28) 72 लौटावे के चाहीं. गुणा करे से {2020, 1851) 0 लौटावे के चाहीं. गुणा करे से {14,-15) 20 लौटावे के चाहीं.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"एगो स्ट्रिंग s के देख के, सम सूचकांक में अपरकेस स्वर के संख्या गिने के कोशिश करीं. उदाहरण खातिरः count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 लौटाई \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''एगो फलन बनावेला जे एगो संख्या के निरूपित करे वाला मान (स्ट्रिंग) लेला आउर एकरा खातिर सबसे नजदीक पूर्णांक लौटावेला. अगर संख्या दूगो पूर्णांक से समान दूरी पर बा, त एकरा के शून्य से दूर गोल करीं. उदाहरण >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 नोट: शून्य से दूर गोल करे के मतलब बा कि अगर दिहल गइल संख्या दूगो पूर्णांक से समान दूरी पर बा, त जवन संख्या के वापस करे के चाहीं ऊ शून्य से सबसे दूर के संख्या होला. उदाहरण खातिर closest_integer \" ((14.5\") 15 लौटावे के चाहीं आउर closest_integer \" ((-14.5\") -15. लौटावे के चाहीं. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"एगो धनात्मक पूर्णांक n के मान के आधार पर, रउआ के n स्तर के पत्थर के ढेर बनावे के बा. पहिला स्तर में n पत्थर बा. अगिला स्तर में पत्थर के संख्या ई बा:- अगिला विषम संख्या अगर n विषम बा. - अगिला सम संख्या अगर n सम बा. एगो सूची में प्रत्येक स्तर में पत्थर के संख्या लौटाईं, जहाँ इंडेक्स i में तत्व स्तर (i+1) में पत्थर के संख्या के प्रतिनिधित्व करेला. उदाहरण: >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"एगो शब्द के स्ट्रिंग दिहल जाई जेकरा के कॉमा या स्पेस से अलग कइल जाई. राउर काम बा कि स्ट्रिंग के शब्द में बाँट के शब्द के एगो सरणी लौटाईं. उदाहरण खातिरः words_string ((\"हाय, हमार नाम जॉन बा\") == [\"हाय\", \"मेरा\", \"नाम\", \"is\", \"जॉन\"] words_string ((\"एक, दो, तीन, चार, पांच, छह\") == [\"एक\", \"दो\", \"तीन\", \"चार\", \"पांच\", \"छह\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ई फलन दूगो धनात्मक संख्या x आउर y लेला आउर सबसे बड़ सम पूर्णांक संख्या के लौटावेला जे कि सीमा में समावेशी बा. अगर अइसन संख्या ना बा, त फलन -1 लौटावेला. उदाहरण खातिरः choose_num(12, 15) = 14 choose_num(13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"अगर n m से बड़ बा त, -1 लौटाईं. उदाहरण: rounded_avg{1, 5) => \"0b11\" rounded_avg{7, 5) => -1 rounded_avg{10, 20) => \"0b1111\" rounded_avg{20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"धनात्मक पूर्णांक x के एगो सूची दिहल गइल बा. उ सब तत्व के एगो क्रमबद्ध सूची लौटाई जेकरा में कौनो भी अंक न होखे. नोटः लौटावल गइल सूची के बढ़त क्रम में क्रमबद्ध कइल जाए के चाहीं. उदाहरण खातिरः >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"पूर्णांक के एगो सरणी के देख के, 1 से 9 के बीच के पूर्णांक के क्रमबद्ध करीं, परिणामी सरणी के उल्टा करीं, आ फिर हर अंक के एकर संबंधित नाम से बदल दीं \"एक\", \"दू\", \"तीन\", \"चार\", \"पांच\", \"छह\", \"सात\", \"आठ\", \"नौ\". उदाहरण खातिरः arr = [2, 1, 1, 4, 5, 8, 2, 3] -> क्रमबद्ध करीं arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> उल्टा arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"आठ\", \"चार\", \"तीन\", \"दु\", \"दु\", \"एगो\", \"एगो\"] अगर सरणी खाली बा, एगो खाली संख्या लौटाईं: arr = [] return [] अगर सरणी में कौनों अजीब संख्या बा त एकरा के अनदेखा करीं: arr = [1, -1 , 55 -> arr -> [1, 1], 55 -> arr -> [55, 1] return - ['one'] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"फलन f के लागू करीं जे n के पैरामीटर के रूप में लेला, आउर आकार n के एगो सूची लौटावेला, अइसन कि इंडेक्स i में तत्व के मान अगर i सम बा त i के गुणनखंड होला या 1 से i तक के संख्या के योग बा. i 1 से शुरू होला. i के गुणनखंड 1 से i तक के संख्या के गुणनखंड होला (1 * 2 * ... * i). उदाहरणः f (((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"धनात्मक पूर्णांक n के एगो टपल के वापस कइल जा सकेला जेकरा में सम आ विषम पूर्णांक पालिंड्रोम के संख्या शामिल बा, जे क्रम में आवेला. उदाहरण 1: इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिंड्रोम में से एक सम आ दूगो विषम बा. उदाहरण 2: इनपुटः 12 आउटपुट: (4, 6) स्पष्टीकरणः पूर्णांक पालिंड्रोम में से चार सम आ छह विषम बा. नोटः 1. 1 <= n <= 10^3 2. टपल में क्रमशः सम आ विषम पूर्णांक पालिंड्रोम के संख्या लउकल बा. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"एगो फलन count_nums लिखब जउन पूर्णांक के एगो सरणी लेला आउर अइसन तत्व के संख्या लौटावेला जेकर अंक के योग > 0 बा. अगर कौनो संख्या ऋणात्मक बा, त ओकर पहिला हस्ताक्षरित अंक ऋणात्मक होईः उदाहरण खातिर -123 के अंक -1, 2, आउर 3 बा. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"एगो दाहिना-ढलान के काम के मतलब होला कि एरे के सब तत्व के एक स्थिति में दाहिना ओर स्थानांतरित कइल. एरे के अंतिम तत्व के एरे में प्रारंभिक स्थिति में स्थानांतरित कइल जाई, अर्थात 0 वां. अगर ऊपर दिहल गइल ऑपरेशन के प्रदर्शन करके क्रमबद्ध एरे प्राप्त कइल संभव बा त रिटर्न ट्रू, अन्यथा रिटर्न फॉलस. अगर दिहल गइल एरे खाली बा त रिटर्न ट्रू. नोटः दिहल गइल सूची में अद्वितीय तत्व होखे के गारंटी बा. उदाहरण खातिरः move_one_ball[3,4,5,== 1, 2>True स्पष्टीकरण: 2 द्वारा दाहिना-ढलान के ऑपरेशन, एरे खातिर गैर-घटत क्रम प्राप्त कइल जा सकेला. array के दाहिना-ढलान के ऑपरेशन खातिर, कौनो भी संख्या के दाहिना ओर स्थानांतरित कइल संभव नइखे.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"एगो फलन जे संख्या के दू गो सूची लेला आउर इ निर्धारित करेला कि का ई संभव बा कि उनकरा बीच तत्वन के आदान-प्रदान कइल जाए ताकि lst1 खाली सम संख्या के सूची बन जाय. lst1 आउर lst2 के बीच आदान-प्रदान कइल जाए वाला तत्वन के संख्या पर कौनो सीमा ना बा. अगर lst1 आउर lst2 के बीच तत्वन के आदान-प्रदान कइल संभव बा ताकि lst1 के सब तत्व सम हो जासु, त \"YES\" लौटाई. अन्यथा, \"NO\" लौटाई. उदाहरण खातिरः exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" इ मानल जाला कि इनपुट सूची खाली ना होखी. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"एगो स्ट्रिंग दिहल गइल बा जे एगो स्पेस से अलग कइल गइल लोअरकेस अक्षर के प्रतिनिधित्व करेला, सबसे ढेर दोहराव वाला अक्षर के एगो शब्दकोश लौटाई आ ओही में संबंधित गिनती शामिल होखे. अगर कई अक्षर में एके तरह के घटना होखे, त उनहन के सब लौटाई. उदाहरण: हिस्टोग्राम ((('a b c') == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम ((('a b b a') == {'a': 2, 'b': 2} हिस्टोग्राम ((('a b c a b') == {'a': 2, 'b': 2} हिस्टोग्राम ((('b b a') == {'b 4}': हिस्टोग्राम (((')) == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"उदाहरण खातिर, अगर s = \"abcde\", c = \"ae\", त परिणाम ('bcd', False) के रूप में आ जाई. अगर s = \"abcdef\", c = \"b\", त परिणाम ('acdef', False) के रूप में आ जाई. अगर s = \"abcdedcba\", c = \"ab\", त परिणाम ('cdedc',True) के रूप में आ जाई.\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"एगो स्ट्रिंग के सूची दिहल गइल बा, जहाँ हर स्ट्रिंग में खाली अंक होला, एगो सूची लौटाई. आउटपुट के प्रत्येक तत्व i के \"इनपुट के स्ट्रिंग i में विषम तत्व के संख्या\" होवे के चाहीं. जहाँ सब i के इनपुट के i'वीं स्ट्रिंग में विषम अंक के संख्या से बदल दिहल जाए के चाहीं. >>> odd_count['1234567']) [\"odd_element 4n the str4ng 4 of the 4nput.\"] >>> odd_count['3',\"111111\"]) [\"odd elements 1n the str1ng 1 of the 1nput.\", \"odd elements 8n the str8ng 8 of the 8nput.\"] \"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"पूर्णांक संख्या के एगो सरणी के देख के, संख्या के कौनो भी खाली उप-सरणी के न्यूनतम योग ज्ञात करीं. उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"आपके लगे कुँवन के एगो आयताकार ग्रिड बा. हर पंक्ति में एक कुँवन के प्रतिनिधित्व करेला, आ हर पंक्ति में 1 पानी के एक इकाई के प्रतिनिधित्व करेला. हर कुँवन में एगो बकेट होला जेकर उपयोग पानी निकाले खातिर कइल जा सकेला, आ सब बकेट में एकही क्षमता होला. आपके काम कुँवन के खाली करे खातिर बकेट के उपयोग करे के होला. कुँवन के उतारे खातिर जेतना बेर जरूरत होखे ओतना बार आउटपुट देईं. उदाहरण 1: इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 आउटपुटः 6 उदाहरण 2: इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 आउटपुटः 5 उदाहरण 3: इनपुटः [[:0,0,0], [0,0,0]] bucket_capacity: 5 आउटपुटः 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 1 * 2 * 2 * 3 * 1 * 2 * 2 * 2 * 3 * 4 * 5 * 6 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"एह काता में, आप के एगो गैर-ऋणात्मक पूर्णांक के क्रमबद्ध करे के बा, ऊ क्रम में बाइनरी निरूपण में एक के संख्या के अनुसार बा. एक के समान संख्या खातिर, दशमलव मान के आधार पर क्रमबद्ध कइल जाय. एकरा के एह तरह से लागू कइल जायः >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"एगो स्ट्रिंग s आ एगो नेचुरल नंबर n के देख के, आपके एगो फलन बनावे के काम दिहल गइल बा जे स्ट्रिंग s से सगरी शब्द के लिस्ट लउकावे जेकरा में ठीक n व्यंजन बा, ताकि ई शब्द स्ट्रिंग s में लउके। अगर स्ट्रिंग s खाली बा त फलन के खाली लिस्ट लउकावे के चाहीं। नोटः आप मान सकत बानी कि इनपुट स्ट्रिंग में खाली अक्षर आ स्पेस बा। उदाहरण: select_words \"मैरी के एगो छोट मेमना रहे\", 4) ==> [\"छोटी\"] select_words \"मैरी के एगो छोट मेमना रहे\", 3) ==> [\"मैरी\", \"छोटी\"] select_words \"सादा सफेद जगह\", 2) ==> [] select_words \"हैलो वर्ल्ड\", 4) ==> [\"वर्ल्ड\"] select_words \"अंकल सैम\", 3) ==> [\"अंकल\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"अगर आपके ऊपर कौनों स्वर ना मिलल होखे तब खाली स्ट्रिंग लौटाईं। आप मान सकत बानी कि दिहल गइल स्ट्रिंग में खाली अंगरेजी के अक्षर बा। उदाहरणः get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''एगो स्ट्रिंग S तब आ खाली तबे बढ़िया मानल जाला जब S में सब परेंटिस संतुलित होखें. उदाहरण खातिरः स्ट्रिंग '(()) ' बढ़िया बा, जबकि स्ट्रिंग '()) ' ना बा. अगर बढ़िया स्ट्रिंग बनावे के कौनो तरीका बा त 'हाँ' लौटाईं, आ अगर ना त 'ना' लौटाईं. उदाहरण: match_parens[('() ', ') ']) == 'हाँ' match_parens[(') ', ') ']) == 'ना' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"पूर्णांक के एगो सरणी आ धनात्मक पूर्णांक k के एगो क्रमबद्ध सूची के अधिकतम संख्या के साथ क्रमबद्ध संख्या के क्रम में लौटाई. उदाहरण 1: इनपुट: arr = [-3, -4, 5], k = 3 आउटपुट: [-4, -3, 5] उदाहरण 2: इनपुट: arr = [4, -4, 4], k = 2 आउटपुट: [4, 4] उदाहरण 3: इनपुट: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुट: [2] नोटः 1. सरणी के लंबाई [1, 1000] के सीमा में होई. 2. सरणी में तत्व [-1000, 1000] के सीमा में होई. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"पूर्णांक के एगो गैर-खाली सूची दिहल गइल बा, तब उन सब विषम तत्व के योग के लौटाई जे सम स्थिति में बा. उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"पूर्णांक arr आउर पूर्णांक k के एगो गैर-खाली सरणी के दिहल गइल बा, तब एआर के पहिला के तत्वन से अधिकतम दू अंक वाला तत्वन के योग लौटाई. उदाहरणः इनपुटः एआर = [111,21,3,4000,5,6,7,8,9], के = 4 आउटपुटः 24 # 21 + 3 के योग बाधाः 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"एगो सकारात्मक पूर्णांक n के क्रम में विषम संख्या के क्रमबद्ध सूची लौटाई. कोलाट्ज़ अनुमान गणित में एगो अनुमान बा जे क्रम के बारे में बा जेकर परिभाषा नीचे दिहल गइल बा: कौनो भी सकारात्मक पूर्णांक n से शुरू करीं. फिर प्रत्येक पद पिछला पद से नीचे के रूप में प्राप्त कइल जाला: अगर पिछला पद सम बा, अगला पद पिछला पद के आधा बा. अगर पिछला पद विषम बा, अगला पद पिछला पद के 3 गुना बा प्लस 1. अनुमान ई बा कि n के कौनो भी मान के बावजूद, क्रम हमेशा 1 तक पहुँच जाई. नोटः 1. कोलाट्ज़ (((1) [1] बा. 2. क्रम में क्रमबद्ध सूची लौटाई. उदाहरण खातिरः get_odd_collatz ((5) [1, 5] लौटाई. 5 खातिर कोलाट्ज़ अनुक्रम [5, 8, 16, 4, 2, 1], एही से विषम संख्या केवल 1 आउर 5 बा. \"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"आप के एगो फलन लिखे के बा जे दिहल गइल दिनांक स्ट्रिंग के मान्य करेला आ अगर दिनांक मान्य बा त सही लौटावेला अन्यथा गलत. तारीख तब मान्य बा जब नीचे दिहल नियम के पूरा कइल गइल बा: 1. दिनांक स्ट्रिंग खाली ना होखे. 2. महीना 1,3,5,7,8,10,12 खातिर दिन के संख्या 1 से कम ना होखे आ 31 दिन से बेसी ना होखे. आ महीना 4,6,9,11 खातिर दिन के संख्या 1 से कम ना होखे आ 30 दिन से बेसी ना होखे. आ महीना 2 खातिर दिन के संख्या 1 से कम ना होखे आ 29 से बेसी ना होखे. 3. महीना 1 से कम ना होखे आ 12 से बेसी ना होखे. 4. दिनांक के प्रारूप में होखे के चाहीं उदाहरण खातिरः valid_date (('03-11-2000') => true_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date) => false_date (valid_date)\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''अगर कवनो शब्द के स्ट्रिंग दिहल गइल होखे, खाली जगह पर विभाजित शब्द के सूची लौटाई, अगर पाठ में खाली जगह ना बा त रउआ कोमा पर विभाजित करे के चाहीं ',' अगर कोमा ना बा त अल्फाबेट में विषम क्रम के साथ छोट-छोट अक्षर के संख्या लौटाई, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 उदाहरण split_words ((\"Hello world!\") â -> [\"Hello\", \"world!\"] split_words ((\"Hello,world!\") â -> [\"Hello\", \"world!\" split_words\" ((abcdef\") == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''उदाहरण is_sorted (), गलत संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के संख्या के आधार पर क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम में क्रम'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"उदाहरण खातिर, अंतराल = (सुरुआत, अंत) = (1, 2) । दिहल गइल अंतराल बंद बा जेकर मतलब बा कि अंतराल (सुरुआत, अंत) में सुरुआत आ अंत दुनों शामिल बा. हर दिहल गइल अंतराल खातिर, ई मानल जाला कि एकर सुरुआत एकर अंत के बराबर या कम बा. राउर काम ई निर्धारित कइल बा कि का एह दु अंतराल के अंतराल के लंबाई अभाज्य संख्या बा. उदाहरण खातिर, अंतराल के अंतराल (1, 3), (2, 4) के अंतराल (2, 3) बा जेकर लंबाई 1 बा, जवन कि अभाज्य संख्या नइखे. अगर अंतराल के लंबाई अभाज्य संख्या बा, \"YES\" लौटाईं, अन्यथा, \"NO\" लौटाईं. अगर दुनो अंतराल आपस में न मिलेला त \"NO\" लौटाईं. [input/output] नमूनाः अंतराल (((1, 2), (2, 3) ==> \"अंतराल-1, ((1), NO\") ==> अंतराल (0, 4) \"NO\" ==> 5-1, ((5, - \"YES\", - \"YES\") ।\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"आप के पूर्णांक के एगो सरणी दिहल गइल बा आउर आप के पूर्णांक के परिमाण के योग के सरणी में प्रत्येक संख्या के सब चिह्न के गुणनफल से गुणा करके लौटावे के जरूरत बा, जेकर प्रतिनिधित्व 1, -1 या 0 से कइल जाला. ध्यान दींः खाली सरणी खातिर कौनो ना लौटाई. उदाहरण: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) ==  None\"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"एगो ग्रिड के N पंक्ति आ N कॉलम (N >= 2) आ एगो सकारात्मक पूर्णांक k दिहल गइल बा, ग्रिड के हर कोष में एगो मान होला. [1, N * N] समावेशी सीमा के हर पूर्णांक ग्रिड के कोष में ठीक एक बेर आवेला. आपके ग्रिड में लंबाई k के न्यूनतम पथ खोजे के होई. आप कवनो भी कोष से शुरू कर सकत बानी, आ हर चरण में आप कौनों भी पड़ोसी कोष में जा सकत बानी, दूसर शब्द में, आप कौनों भी कोष में जा सकत बानी जे आपके वर्तमान कोष के किनारा साझा करेले. कृपया ध्यान दीं कि लंबाई k के पथ के मतलब होला कि ठीक k कोष (जरूरी से अलग ना) पर जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के जा के\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"फिबोनाकी अनुक्रम के बारे में त सभे जानेला, गणितज्ञ लोग पिछला कुछ सदी में एकर गहन अध्ययन कइले बा. हालाँकि, लोग के त्रिबोनाकी अनुक्रम के बारे में जानकारी नइखे. त्रिबोनाकी अनुक्रम के परिभाषा पुनरावृत्ति से होला: tri(1) = 3 tri(n) = 1 + n / 2, अगर n सम बा. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), अगर n विषम बा. उदाहरण खातिर: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 रउआ के एगो गैर-ऋणात्मक पूर्णांक संख्या n दिहल गइल बा, रउआ के त्रिबोनाकी अनुक्रम के पहिला n + 1 संख्या के सूची वापस करे के बा. उदाहरण: tri(3) = [1, 3, 2, 8]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"धनात्मक पूर्णांक n के गुणनफल के फर्कि के, अगर सब अंक सम हो त 0 लौटाई. उदाहरण खातिर: अंक (अंक) == 1 अंक (अंक) == 0 अंक (अंक) == 235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''एगो फलन बनावे जे इनपुट के रूप में खाली वर्ग कोष्ठक वाला स्ट्रिंग ले. फलन के तब सही लौटावे के चाहीं अगर आउर खाली अगर कोष्ठक के एगो वैध उपक्रम बा जहाँ कम से कम एगो कोष्ठक के उपक्रम में घोंसला बा. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested '[[][]]') â -> True is_nested '[[]]]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"उदाहरण: lst = [1,2,3] आउटपुट 14 होना चाहिए lst = [1,4,9] आउटपुट 98 होना चाहिए lst = [1,3,5,7] आउटपुट 84 होना चाहिए lst = [1.4,4.2,0] आउटपुट 29 होना चाहिए lst = [-2.4,1,1] आउटपुट 6 होना चाहिए \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''एगो फलन बनावे जे True लौटावे अगर दिहल गइल स्ट्रिंग के अंतिम अक्षर वर्णमाला के अक्षर होखे आ शब्द के हिस्सा ना होखे, आउर False अगर ना होखे. नोटः \"word\" अक्षर के एगो समूह बा जे स्पेस से अलग बा. उदाहरण: check_if_last_char_is_a_letter\" \"apple pie\") â -> False check_if_last_char_is_a_letter\" \"apple pi e\") â -> True check_if_last_char_is_a_letter\" \"apple pi e\") â -> False check_if_last_char_is_a_letter\" \"apple pi e\") â -> False check_if_last_char_is_a_letter\" \"'''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"एगो फलन बनावे जे कौनों अइसन तत्व के सभसे बड़ सूचकांक के लौटावे जे ओकरे से पहिले वाला तत्व के बराबर चाहे ओसे बड़ ना होखे। अगर अइसन कौनों तत्व मौजूद ना होखे तब -1 लौटावे के चाहीं। दिहल गइल सरणी में दोहरावल मान ना होखल चाहीं। उदाहरण: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''एगो फलन बनावे जे एगो टपल (a, b) लौटाई, जहाँ 'a' नकारात्मक पूर्णांक में सबसे बड़ होला, आउर 'b' सूची में धनात्मक पूर्णांक में सबसे छोट होला. अगर कौनो नकारात्मक या धनात्मक पूर्णांक ना होला, त उ सब के None के रूप में लौटाई. उदाहरण: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"एगो फलन बनावेला जे पूर्णांक, फ्लोट या स्ट्रिंग के वास्तविक संख्या के रूप में लेला, आउर ओकरे दिहल गइल चर प्रकार में बड़ चर के लौटावेला. अगर मान बराबर बा त शून्य लौटावेला. ध्यान दीं: अगर एगो वास्तविक संख्या के एगो स्ट्रिंग के रूप में देखावल जाला, त फ्लोटिंग पॉइंट हो सकेला . या , तुलना_एक, 2.5) â -> 2.5 तुलना_एक, \"2,3\") â -> \"2,3\" तुलना_एक, \"5,1\", \"6\") â -> \"6\" तुलना_एक, \"1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"ई आंकलन करीं कि का दिहल गइल संख्या n के ठीक 4 धनात्मक सम संख्या के योग के रूप में लिखल जा सकेला उदाहरण is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ब्राजीलियन फैक्टोरियल के परिभाषा ई होला: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! जहाँ n > 0 उदाहरण खातिर: >>> special_factorial(4) 288 फलन के इनपुट के रूप में एगो पूर्णांक प्राप्त होई आउर इ पूर्णांक के विशेष फैक्टोरियल लौटावे के चाहीं. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_उदाहरण-3स्ट के देख के, एमें सब स्पेस के अंडरस्कोर से बदल देईं, आ अगर एगो स्ट्रिंग में 2 से अधिक लगातार स्पेस बा त, तब सब लगातार स्पेस के - fix_spaces से बदल देईं. उदाहरण खातिर) == \"उदाहरण\" fix_spaces. उदाहरण खातिर) == \"उदाहरण1\" fix_spaces. उदाहरण खातिर) == \"उदाहरण2\") == \"_उदाहरण2\" fix_spaces. उदाहरण खातिर 3\") == \"_उदाहरण-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"एगो फलन बनावे जे एगो फ़ाइल के नाँव के प्रतिनिधित्व करे वाली स्ट्रिंग ले, आ अगर फाइल के नाँव मान्य बा त 'हाँ' लौटावे, आ अगर मान्य न बा त 'ना' लौटावे. एगो फाइल के नाँव वैध मानल जाला अगर अउरी खाली अगर नीचे दिहल शर्त पूरा होखेंः - फाइल के नाँव में तीन से बेसी अंक ('0'-'9') ना होखे के चाहीं. - फाइल के नाँव में ठीक एक ठो बिंदु '.' होखे के चाहीं. - बिंदु से पहिले के सबस्ट्रिंग खाली ना होखे के चाहीं, आ ई लातीनी अल्फाबेट ('a'-'z' आ 'A'Z'-) से शुरू होखे के चाहीं. - बिंदु के बाद के सबस्ट्रिंग में से एगो होखे के चाहींः ['txt', 'exe', 'lld'] उदाहरणः file_name_check\"{example.txt.} # => 'हाँ' file_name_check\"{example.txt.} # => 'ना' (नाम लैटिन अल्फाबेट से शुरू होखे के चाहीं)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" इ फलन पूर्णांक के एगो सूची लेई. सूची में सब प्रविष्टियन खातिर, फलन के पूर्णांक प्रविष्टि के वर्ग करे के होई अगर एकर अनुक्रमणिका 3 के गुणक बा आउर पूर्णांक प्रविष्टि के घन करे के होई अगर एकर अनुक्रमणिका 4 के गुणक बा आउर 3 के गुणक ना बा. फलन सूची में प्रविष्टियन के ना बदलेला जेकर अनुक्रमणिका 3 या 4 के गुणक ना बा. फलन तब सब प्रविष्टियन के योग लौटाई. उदाहरण: lst = [1,2,3] आउटपुट 6 होना चाहि lst = [] आउटपुट 0 होना चाहि lst = [-1,-5,2,-1,-5] आउटपुट -126 होना चाहि \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"एगो वाक्य के प्रतिनिधित्व करे वाला एगो स्ट्रिंग दिहल गइल बा, एह में कुछ शब्द बाड़ी स जेकरा के एगो स्पेस से अलग कइल गइल बा, आउर आप के एगो अइसन स्ट्रिंग लौटावे के बा जेह में मूल वाक्य के शब्द बा, जेकर लंबाई अभाज्य संख्या बा, नया स्ट्रिंग में शब्द के क्रम मूल के समान होखे के चाहीं. उदाहरण 1: इनपुटः वाक्य = \"ई एगो परीक्षण बा\" आउटपुटः \"ई बा\" उदाहरण 2: इनपुटः वाक्य = \"चलो स्विमिंग खातिर जाईं\" आउटपुटः \"जाईं\" बाधाः * 1 <= len(sentence) <= 100 * वाक्य में खाली अक्षर बा \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"एगो फलन के लागू करे के बा जे एक्सप्रेशन के सरल बनावेला x * n. फलन अगर x * n के मान पूर्णांक होखे त सही आ अगर पूर्णांक ना होखे त गलत के जवाब देला. x आ n, एगो भिन्न के स्ट्रिंग निरूपण होला, आ एकर प्रारूप होला, <numerator>/<denominator> जहवाँ भिन्न आ भाजक दुनों धनात्मक पूर्णांक होला. आप मान सकत बानी कि x, आ n वैध भिन्न होला, आ भाजक के रूप में शून्य ना होला. simplify{\"1/5\", \"5/1\") = True{\"1/6\", \"2/1\") = False{\"7/10\", \"10/2\") = False \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"एगो फलन लिखीं जे पूर्णांक के दिहल गइल सूची के उनके अंक के योग के अनुसार आरोही क्रम में क्रमबद्ध करे. ध्यान दीं: अगर उनके अंक के समान योग वाला कई गो आइटम बा, त ओके मूल सूची में उनके अनुक्रमणिका के आधार पर क्रमबद्ध करीं. उदाहरण खातिरः >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"एगो फलन लिखल जाय जे संख्या के सरणी के इनपुट के रूप में ले ले आ 10 से बड़ संख्या में तत्व के संख्या लौटावे आ संख्या के पहिला आ अंतिम अंक दुनों विषम (1, 3, 5, 7, 9) होखे उदाहरण खातिरः specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"एगो पूर्णांक n के एगो सकारात्मक पूर्णांक देहल जाला. आप के लंबाई n के पूर्णांक सरणी बनावे के बा. प्रत्येक i (1 ‰¤ i ‰¤ n) खातिर, a[i] = i * i - i + 1 के मान, a के तिगुना (a[i], a[j], a[k]) के संख्या लौटाई जहवाँ i < j < k, आउर a[i] + a[j] + a[k] 3 के गुणक होला. उदाहरण: इनपुट: n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्र वैध तिगुना (1, 7, 13) बा.\"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''हमनी के सौर मंडल में आठ गो ग्रह बाड़ें: सूर्य से सभसे नजदीक बुध बा, अगिला शुक्र बा, फिर पृथ्वी, मंगल, बृहस्पति, शनि, यूरेनस, नेपच्यून बा. एगो फलन लिखें जे दू गो ग्रह के नाँव ग्रह1 आ ग्रह2 के स्ट्रिंग के रूप में ले। फलन के एगो टपल लौटावे के चाहीं जेह में अइसन सगरी ग्रह शामिल होखे जिनहन के कक्षा ग्रह1 के कक्षा आ ग्रह2 के कक्षा के बीच में बा, आ सूर्य के नजदीकिया के आधार पर क्रमबद्ध कइल गइल होखे। फलन के खाली टपल लौटावे के चाहीं अगर ग्रह1 या ग्रह2 सही ग्रह नाँव ना होखे। उदाहरण bf\"(जुपिटर\", \"नेपच्यून\") ==> (\"शनि\", \"यूरेनस\") bf(\"पृथ्वी\", \"मर्क्यूरी\") ==> (\"शुक्र\", \"पृथ्वी\", \"मंगल\", \"जुपिटर\", \"शनि\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"एगो फलन लिखीं जे स्ट्रिंग के एगो सूची के पैरामीटर के रूप में स्वीकार करेला, ओह में से विषम लंबाई वाला स्ट्रिंग के हटावेला, आउर क्रमबद्ध क्रम के साथ परिणामी सूची लौटावेला. सूची हमेशा स्ट्रिंग के सूची होला आउर कभी संख्या के सरणी ना होला, आउर एह में दोहराव हो सकेला. सूची के क्रम प्रत्येक शब्द के लंबाई के अनुसार बढ़त रहे के चाहीं, आउर रउआ सूची के ओ नियम से क्रमबद्ध लौटावे के चाहीं. अगर दुगो शब्द के लंबाई एके जइसन बा, त सूची के वर्णमाला क्रम में क्रमबद्ध कइल जाय. फलन के क्रमबद्ध क्रम में स्ट्रिंग के सूची लौटावे के चाहीं. रउआ मान सकत बानी कि सब शब्द के लंबाई एके जइसन होई. उदाहरण खातिरः assertlist_sort[\"aa\", \"a\", \"aaa\"]) => assertlist_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd\")\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"एगो साधारण प्रोग्राम जे अगर n एगो अभाज्य संख्या बा त x के मान लौटावेला आउर अगर n अभाज्य संख्या ना बा त y के मान लौटावेला. उदाहरण: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''संख्या के सूची दिहल गइल बा, सूची में विषम संख्या के वर्ग के योग लौटाईं. ऋणात्मक संख्या के अनदेखा करीं चाहे पूर्णांक ना होखे. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 अगर इनपुट सूची खाली बा त 0 लौटाईं. '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"हम सब के उ भावना याद बा जब कौनो लम्बा समय से प्रतीक्षित घटना के परिणाम अंततः जानल जाला. उ समय आपके जवन भावना आ विचार रहे उ निश्चित रूप से ध्यान देवे लायक बा आ तुलना करे लायक बा. राउर काम ई निर्धारित करे के बा कि का कौनो व्यक्ति कई गो मैच के परिणाम सही से अनुमान लगवले रहे. राउर बराबर लंबाई के स्कोर आ अनुमान के दूगो सरणी दिहल गइल बा, जहाँ हर सूचकांक एगो मैच देखावेला. ओही लंबाई के एगो सरणी लौटाईं जवन ई दर्शावेला कि हर अनुमान केतना दूर रहे. अगर उ सही से अनुमान लगवले बा, मान 0 बा, आ अगर ना, मान अनुमान आ स्कोर के बीच के पूर्ण अंतर बा. उदाहरण: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,0,1,0,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"आपके एगो क्लास के नाम (स्ट्रिंग) आ एक्सटेंशन के लिस्ट दिहल जाई. एक्सटेंशन के ताकत नीचे दिहल गइल बा: सीएपी के एक्सटेंशन के नाम में बड़ अक्षर के संख्या मानल जाय आ एसएम के छोट अक्षर के संख्या मानल जाय, एकर ताकत के अंश सीएपी-एसएम के रूप में दिहल गइल बा. आपके सबसे मजबूत एक्सटेंशन के खोजल आ ए फॉर्मेट में स्ट्रिंग के रिटर्न कइल चाहीः ClassName.StrongestExtensionName. अगर दू गो या अधिक एक्स्टेंशन एकही ताकत के बा, त आप सूची में पहिला आवे वाला के चुनल जाय. उदाहरण खातिर, अगर आपके क्लास के रूप में \"स्लाइस\" दिहल गइल बा आ एक्सटेंशन के लिस्ट दिहल गइल बा: ['SEviRNGSliCes', 'Cheese', 'StuFfed'] तब आप के 'Slices.SliCes.SliCes' लौटावे के चाहीं, काहे कि एक्सटेंशन के नाम में बड़ अक्षर के संख्या बा, आ SM के एक्स्टेंशन के नाम में छोट अक्षर के संख्या बा, एकर ताकत के अंश सीएपी-एसएम से दिहल गइल बा. आप सबसे मजबूत एक्सटेंशन के खोजल आ एगो स्ट्रिंग के रूप में रिटर्न देबे चाहीः ClassName.StrongestExtensionName.StrongestExtensionName.StrongestExtensionName.ExtensionName.ExtensionName.ExtensionName.ExtensionName.ExtensionName.Extension.Extension.Extension.Extension.StrongestExtension.StrongestExtension.StrongestExtension.Extension.Extension.Extension.StrongestExtension.Extended.StrongestExtended.StrongestExtended.Strongest.Extended.Strongest.Strongest.Extended.Strongest.Strongest.Strongest.Extended.Strongest.Class = 'AA' (आइसे) - 'AA' - Strongest' = 'AA' (', उदाहरण खातिर 'AA' strongest_Class' => 'AA', 'Class'\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"आप के 2 शब्द दिहल गइल बा. आप के सही लौटावे के बा अगर दूसरा शब्द या एकर कौनो भी घूर्णन पहिला शब्द में एगो सबस्ट्रिंग बा cycpattern_check(\"abcd\",\"abd\") => गलत cycpattern_check(\"hello\",\"ell\") => सही cycpattern_check(\"whassup\",\"psus\") => गलत cycpattern_check\"abab\",\"baa\") => सही cycpattern_check\"(\"efef\",\"eeff\") => गलत cycpattern_check\"(hims\",\"simen\") => सही \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"एगो पूर्णांक के दिहल जाय, एगो टपल लौटाई जे क्रमशः सम आउर विषम अंक के संख्या होला. उदाहरण: सम_असमान_गणना(-12) ==> (1, 1) सम_असमान_गणना(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"एगो धनात्मक पूर्णांक के दिहल जाय, एकर रोमन अंक समकक्ष के स्ट्रिंग के रूप में प्राप्त करीं, आउर एकरा के लघु अक्षर में लौटाईं. प्रतिबंधः 1 <= num <= 1000 उदाहरणः >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''अगर तीनों गो किनारा एगो समकोण त्रिभुज के रूप में बा त सही लौटाई, अगर ना त गलत. समकोण त्रिभुज एगो त्रिभुज होला जेमे एगो कोण 90 डिग्री के बा. उदाहरण: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"एगो फलन लिखीं जे स्ट्रिंग के सूची स्वीकार करेला. सूची में अलग-अलग शब्द होला. अधिकतम संख्या में अद्वितीय वर्ण वाला शब्द लौटाईं. अगर कई स्ट्रिंग में अधिकतम संख्या में अद्वितीय वर्ण होखे, त उ शब्द लौटाईं जे शब्दकोश के क्रम में सबसे पहिले आवेला. find_max (([\"नाम\", \"के\", \"स्ट्रिंग\"]) == \"स्ट्रिंग\" find_max (([\"नाम\", \"enam\", \"गेम\"]) == \"enam\" find_max (([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"आप एगो भूखे खरगोश हईं, अउर आप पहिले से ही कुछ गाजर खा चुकल बानी, लेकिन अब आपके दिन के भोजन पूरा करे खातिर और गाजर खाए के जरूरत बा. आप के एगो सरणी लौटावे के चाही [ खाना के बाद खाए वाला गाजर के कुल संख्या, खाना के बाद बचल गाजर के संख्या ] अगर पर्याप्त गाजर ना बा, त आप बाकी गाजर के खा जाईं, लेकिन फिर भी भूखे रहीब. उदाहरण: * खाईं ((5, 6, 10) -> [11, 4] * खाईं ((4, 8, 9) -> [12, 1] * खाईं ((1, 10, 10) -> [11, 0] * खाईं ((2, 11, 5) -> [7, 0] चरः @number: आपके द्वारा खाए जाए वाला गाजर के संख्या के पूर्णांक. @need: आपके द्वारा खाए के जरूरत गाजर के संख्या के पूर्णांक. @remaining: शेष गाजर के शेष संख्या के पूर्णांक. Constrain: * number = 0 * number = 0 * 1000 * number = 0 * resting = 1000 < number = 0 < number = 1000 < number = 1000 = resting = 1000 Have fun :)\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"एगो ऑपरेटर आ एगो ऑपरेन्ड के दू गो लिस्ट दिहल गइल बा. पहिला लिस्ट में मूलभूत बीजगणित के काम होला आ दूसरा लिस्ट में पूर्णांक के लिस्ट होला. बीजगणित के अभिव्यक्ति बनावे खातिर दू गो लिस्ट दिहल गइल बा आ ऊ अभिव्यक्ति के मूल्यांकन के वापस करे खातिर इस्तेमाल कइल जाला. मूलभूत बीजगणित के कामः जोड़ (+) घटाव (-)) गुणा (*) तल भाग (//) घातांक (**) उदाहरण: ऑपरेटर['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोटः ऑपरेन्ड के लिस्ट के लंबाई ऑपरेंड लिस्ट के लंबाई के बराबर होला से घटा के एक. ऑपरेंड गैर-ऋणात्मक पूर्णांक के लिस्ट होला. ऑपरेटर के लिस्ट में कम से कम एगो ऑपरेडर होला आ ऑपरेंड के लिस्ट में कम से कम दू गो ऑपरेन्ड होला. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"अगर आपके लगे एगो स्ट्रिंग s बा त, एकर केस के निचला से ऊपरी या उल्टा से उल्टा करीं, अगर अइसन ना होखे त अइसन ही रखीं. अगर स्ट्रिंग में कौनो अक्षर ना होखे त, स्ट्रिंग के उल्टा करीं. फलन के रिजल्ट स्ट्रिंग लौटावे के चाहीं. उदाहरण solve{\"1234\") = \"4321\"{\"ab\") = \"AB\"{\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"एगो स्ट्रिंग 'text' दिहल गइल बा, एकर md5 हैश समकक्ष स्ट्रिंग लौटाईं. अगर 'text' खाली स्ट्रिंग बा, None लौटाईं. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "bho_Deva",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"दूगो धनात्मक पूर्णांक a आउर b के देखते हुए, a आउर b के बीच के सम अंक के आरोही क्रम में लौटाई. उदाहरण खातिर: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]