task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ibo_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Lelee ma na ndepụta nke nọmba, enwere nọmba abụọ dị nso karịa ọnụ ọgụgụ enyere. Ihe Nlereanya: >>> nwere_ihe_dị nso (([1.0, 2.0, 3.0], 0.5) Ụgha >>> nwere_ihe_dị nso (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) Eziokwu """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ibo_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ihe ntinye na ọrụ a bụ eriri nwere ọtụtụ ìgwè nke nkedo nkedo. Ihe mgbaru ọsọ gị bụ ikewapụ ndị otu ahụ n'ime eriri dị iche iche ma weghachite ndepụta nke ndị ahụ. Otu dị iche iche dị iche iche (a na-emechi ihe nkedo ọ bụla nke ọma) ma ghara itinye ya n'ime ibe ha. Eleghara ohere ọ bụla na ntinye ntinye anya. Ihe Nlereanya: >>> separate_paren_groups' ((( ) (() (()))))))) ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ibo_Latn,python,"

def truncate_number(number: float) -> float:
    """"""N'inye ọnụọgụgụ na-agbanwe agbanwe, enwere ike ịba ya na akụkụ integer (nke kachasị ukwuu dị ntakịrị karịa nọmba enyere) na decimals (akụkụ nke fọdụrụ na-adịkarị obere karịa 1). Laghachi akụkụ nke ọnụọgụgụ nke ọnụọgụgụ. Ihe Nlereanya: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ibo_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""A na-enye gị ndepụta nke nkwụnye ego na ịdọrọ ọrụ na akaụntụ akụ nke na-amalite na nguzozi efu. Ọrụ gị bụ ịchọpụta ma ọ bụrụ na n'oge ọ bụla, nguzozi akaụntụ ahụ dara n'okpuru efu, na n'oge ahụ, ọrụ ahụ kwesịrị ịlaghachi Eziokwu. Ma ọ bụghị ya, ọ ga-alọghachite Ụgha. Ihe Nlereanya: >>> n'okpuru_zero([1, 2, 3]) Ụgha >>> n'okpuru_zero([1, 2, -4, 5]) Eziokwu """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ibo_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Maka ndepụta enyere nke ọnụọgụ ntinye, gbakọọ Mean Absolute Deviation gburugburu nkezi nke dataset a. Mean Absolute Deviation bụ nkezi ọdịiche zuru oke n'etiti ihe ọ bụla na etiti etiti (nkezi na nke a): MAD = nkezi ∙ x - x_mean ∙ Ihe atụ: >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ibo_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Tinye nọmba 'delimeter' n'etiti ihe abụọ ọ bụla na-esote nke ndepụta ntinye `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ibo_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ntinye aka na ọrụ a bụ eriri na-anọchite anya ọtụtụ ìgwè maka nkedo nkedo nkewapụrụ site na oghere. Maka otu ọ bụla, mmepụta nke kachasị omimi nke nkedo nke nkedo. Dịka ọmụmaatụ (() (()) nwere oke ọkwa abụọ nke nkedo mgbe ((())) nwere atọ. >>> parse_nested_parens('((()) ((())) () (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ibo_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Nchịkọta ndepụta ntinye nke eriri naanị maka ndị nwere substring enyere >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ibo_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Maka ndepụta nke integers, laghachi a tuple esịnede a nchikota na a ngwaahịa nke niile integers na a ndepụta. Efu nchikota kwesịrị hà ka 0 na efu ngwaahịa kwesịrị hà ka 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ibo_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Site na ndepụta nke integers, mepụta ndepụta nke ihe kachasị elu nke a chọtara ruo oge enyere na usoro. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ibo_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Chọta palindrome nke kachasị dị mkpirikpi nke na-amalite site na eriri enyere. Echiche algọridim dị mfe: - Chọta postfix kachasị ogologo nke eriri enyere nke bụ palindrome. - Tinye na njedebe nke eriri azụ nke eriri prefix nke na-abịa tupu suffix palindromic. >>> make_palindrome (('') ' ' >>> make_palindrome (('cat') 'catac' >>> make_palindrome (('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Nyochaa ma ọ bụrụ na e nyere eriri bụ palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ibo_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Ntinye bụ eriri abụọ a na b nke nwere naanị 1s na 0s. Mee XOR ọnụọgụ abụọ na ntinye ndị a ma weghachite nsonaazụ dịka eriri. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ibo_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Site na ndepụta nke eriri, laghachi nke kachasị ogologo. Laghachi nke mbụ ma ọ bụrụ na enwere ọtụtụ eriri nke ogologo ahụ. Laghachi Enweghị ma ọ bụrụ na ndepụta ntinye bụ ihe efu. >>> ogologo (([]) >>> ogologo ((['a', 'b', 'c']) 'a' >>> ogologo ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ibo_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Laghachi a kasị ukwuu nkịtị divisor nke abụọ integers a na b >>> kasị ukwuu_common_divisor ((3, 5) 1 >>> kasị ukwuu_common_divisor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ibo_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Nchịkọta ndepụta nke prefixes niile site na nke kachasị dị mkpirikpi ruo ogologo nke eriri ntinye >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ibo_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Laghachi eriri nwere nọmba nke nwere ohere site na 0 ruo n gụnyere. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ibo_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""N'inye eriri, chọpụta ole mkpụrụedemede dị iche iche (n'agbanyeghị ụdị okwu) ọ nwere >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ibo_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Ntinye na ọrụ a bụ eriri na-anọchite anya egwu egwu na usoro ASCII pụrụ iche. Ọrụ gị bụ ịkọwa ndepụta eriri nke integers kwekọrọ na ọtụtụ ihe ọkụkụ na-eme. Lee nkọwa: 'o' - ederede, ikpeazụ anọ na-akụ 'o' dakọtara - ọkara ederede, ikpeazụ abụọ beats 'o' dakọtara - quater dee, ikpeazụ otu beat >>> parse_music '. 'o o .""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ibo_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Chọpụta ugboro ole a na-enye mkpụrụokwu nwere ike ịchọta na eriri mbụ. Gụkọta ihe ndị na-ekpuchi. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ibo_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Ntinye bụ eriri ọnụọgụgụ nke nwere ohere site na 'efu' ruo 'isa'. Nhọrọ ndị dị mma bụ 'efu', 'otu', 'abụọ', 'atọ', 'anọ', 'ise', 'isii', 'asaa', 'asatọ' na 'isa'. Laghachi eriri ahụ na ọnụọgụ ndị a họọrọ site na nke kacha nta ruo nke kachasị ukwuu >>> sort_numbers (('atọ otu ise') 'otu atọ ise' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ibo_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Site na ndepụta ọnụọgụgụ (nke dịkarịa ala abụọ) họrọ ma laghachi abụọ nke kachasị nso na ibe ha ma laghachi ha n'usoro (obere ọnụ ọgụgụ, ọnụ ọgụgụ ka ukwuu). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ibo_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""N'enye ndepụta nke nọmba (nke ọ dịkarịa ala abụọ), tinye mgbanwe ntụgharị na ndepụta ahụ, nke mere na ọnụ ọgụgụ kachasị nta ga-aghọ 0 na nke kachasị ukwuu ga-aghọ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ibo_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Nchịkọta ndepụta nke ihe ọ bụla Python bara uru naanị maka integers >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ibo_Latn,python,"

def strlen(string: str) -> int:
    """"""Laghachi ogologo nke nyere eriri >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ibo_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Maka ọnụọgụgụ n, chọta ọnụọgụgụ kachasị nke na-eke n n, nke pere mpe karịa n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ibo_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Nchịkọta nke ndị isi nke ọnụ ọgụgụ zuru ezu site na nke kachasị nta ruo nke kachasị ukwuu. A ga-edepụta nọmba nke oge ọ bụla kwekọrọ na ugboro ole ọ na-apụta na factorization. Ọnụ ọgụgụ ntinye kwesịrị ịdị ka ngwaahịa nke ihe niile >>> factorization ((8) [2, 2, 2] >>> factorization ((25) [5, 5] >>> factorization ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ibo_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Site na ndepụta nke integers, wepu ihe niile na-eme ihe karịrị otu ugboro. Debe usoro nke ihe ndị fọdụrụ dị ka nke dị na ntinye. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ibo_Latn,python,"

def flip_case(string: str) -> str:
    """"""Maka eriri enyere, tụgharịa obere mkpụrụedemede ka ọ bụrụ nnukwu na nnukwu mkpụrụedemede ka ọ bụrụ obere. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ibo_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate ndepụta nke eriri n'ime otu eriri >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ibo_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Nchịkọta ndepụta ntinye nke eriri naanị maka ndị na-amalite site na prefix nyere. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ibo_Latn,python,"

def get_positive(l: list):
    """"""Laghachi naanị nọmba dị mma na ndepụta ahụ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ibo_Latn,python,"

def is_prime(n):
    """"""Laghachi ezi ma ọ bụrụ na ọnụọgụ nyere bụ isi, na ụgha ma ọ bụghị. >>> bụ_isi(6) Ụgha >>> bụ_isi(101) Ezi >>> bụ_isi(11) Ezi >>> bụ_isi(13441) Ezi >>> bụ_isi(61) Ezi >>> bụ_isi(4) Ụgha >>> bụ_isi(1) Ụgha """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ibo_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs bụ ọnụọgụ nke polynomial. chọta_efu chọta x dị ka poly(x) = 0. chọta_efu na-alaghachi naanị naanị isi efu, ọbụlagodi na enwere ọtụtụ. Ọzọkwa, chọta_efu na-ewe ndepụta xs nwere ọnụọgụ ọnụọgụ na ọnụọgụ kachasị ukwuu na-abụghị efu ka ọ na-ekwe nkwa ngwọta. >>> gburugburu (((chọta_efu[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> gburugburu (((chọta_efu([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Na-enyocha polynomial na ọnụọgụ xs na isi x. laghachi xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ibo_Latn,python,"

def sort_third(l: list):
    """"""Ọrụ a na-ewe ndepụta l ma weghachite ndepụta l' dị ka nke ahụ l' bụ otu na l na indexes ndị na-adịghị nkewa site na atọ, ebe uru ya na indexes ndị na-ekewa site na atọ hà nhata na ụkpụrụ nke ihe kwekọrọ na l, ma edozi. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ibo_Latn,python,"

def unique(l: list):
    """"""Laghachi edozi ihe ndị pụrụ iche na ndepụta >>> pụrụ iche (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ibo_Latn,python,"

def max_element(l: list):
    """"""Laghachi ihe kachasị na ndepụta. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ibo_Latn,python,"

def fizz_buzz(n: int):
    """"""Laghachi ọnụọgụgụ nke ọnụọgụgụ 7 na-apụta na integers na-erughị n nke a na-ekewa site na 11 ma ọ bụ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ibo_Latn,python,"

def sort_even(l: list):
    """"""Ọrụ a na-ewe ndepụta l ma weghachite ndepụta l' dị ka nke ahụ l' bụ otu ihe ahụ na l na ndị na-adịghị ahụkebe, ebe uru ya na ndị na-ahụ maka ihe ndị ahụ hà nhata na uru nke ndị na-ahụ maka ihe ndị ahụ. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ibo_Latn,python,"

def encode_cyclic(s: str):
    """"""na-ewere dị ka eriri ntinye nke ejiri encode_cyclic arụ ọrụ. Na-alaghachi eriri decoded. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""na-alaghachi koodu nke koodu site na ìgwè ndị na-agbagharị nke mkpụrụedemede atọ. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ibo_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib na-alaghachi n-nke nọmba nke bụ nọmba Fibonacci ma ọ bụkwa isi. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ibo_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero na-ewe ndepụta nke integers dị ka ntinye. ọ na-alaghachi Eziokwu ma ọ bụrụ na e nwere ihe atọ dị iche iche na ndepụta ahụ nke nchịkọta na efu, na Ụgha ma ọ bụghị. >>> triples_sum_to_zero([1, 3, 5, 0]) Ụgha >>> triples_sum_to_zero[(1, 3, -2, 1]) Eziokwu >>> triples_sum_to_zero([1, 2, 3, 7]) Ụgha >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) Eziokwu >>> triples_sum_to_zero[1]) Ụgha """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ibo_Latn,python,"

def car_race_collision(n: int):
    """"""Were anya nke uche hụ okporo ụzọ nke dị ogologo ogologo. n ụgbọala na-aga n'aka ekpe gaa n'aka nri; n n ụgbọala ndị ọzọ na-aga n'aka nri gaa n'aka ekpe. Ụgbọala abụọ ahụ na-amalite site n'ịdị anya site n'otu ibe ha. Ụgbọala niile na-aga n'otu ọsọ. A na-ekwu na ụgbọala abụọ na-agbagọ mgbe ụgbọala na-aga n'aka ekpe gaa n'aka nri kụrụ ụgbọala na-aga n'aka nri gaa n'aka ekpe. Otú ọ dị, ụgbọala ndị ahụ siri ike ma sie ike n'ụzọ na-enweghị njedebe; n'ihi ya, ha na-aga n'ihu na-agagharị na trajectory ha dị ka a ga-asị na ha agbaghị. Ọrụ a na-ewepụta ọnụ ọgụgụ nke nkwekọrịta dị otú ahụ. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ibo_Latn,python,"

def incr_list(l: list):
    """"""Nchịkọta ihe na-eweghachi ihe ndị e ji 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ibo_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero na-ewe ndepụta nke integers dị ka ntinye. ọ na-alaghachi Eziokwu ma ọ bụrụ na e nwere ihe abụọ dị iche iche na ndepụta ahụ nke nchịkọta na efu, na Ụgha ma ọ bụghị. >>> pairs_sum_to_zero([1, 3, 5, 0]) Ụgha >>> pairs_sum_to_zero[(1, 3, -2, 1]) Ụgha >>> pairs_sum_to_zero([1, 2, 3, 7]) Ụgha >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) Eziokwu >>> pairs_sum_to_zero[1]) Ụgha """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ibo_Latn,python,"

def change_base(x: int, base: int):
    """"""Gbanwee isi ọnụọgụ nke nọmba ntinye x na isi. laghachi akara ngosi eriri mgbe ntụgharị ahụ gasịrị. nọmba isi dị obere karịa 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ibo_Latn,python,"

def triangle_area(a, h):
    """"""E nyere ogologo nke akụkụ na elu nloghachi ebe maka triangle. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ibo_Latn,python,"

def fib4(n: int):
    """"""Usoro ọnụọgụgụ Fib4 bụ usoro yiri nke Fibbonacci nke akọwapụtara dị ka ndị a: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Biko dee ọrụ iji rụọ ọrụ nke ọma na-agbakọ n-th element nke usoro ọnụọgụ fib4. Ejila recursion. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ibo_Latn,python,"

def median(l: list):
    """"""Laghachi etiti nke ihe ndị dị na ndepụta l. >>> etiti (([3, 1, 2, 4, 5]) 3 >>> etiti (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ibo_Latn,python,"

def is_palindrome(text: str):
    """"""Na-enyocha ma eriri enyere bụ palindrome >>> is_palindrome('') Eziokwu >>> is_palindrome('aba') Eziokwu >>> is_palindrome('aaaaa') Eziokwu >>> is_palindrome('zbcd') Ụgha """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ibo_Latn,python,"

def modp(n: int, p: int):
    """"""Laghachi 2^n modulo p (mara maka ọnụọgụgụ). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ibo_Latn,python,"

def encode_shift(s: str):
    """"""na-ewere dị ka eriri ntinye nke ejiri encode_shift arụ ọrụ. Na-alaghachi eriri decoded. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""na-alaghachi eriri koodu site na ịkwaga ihe odide ọ bụla site na 5 na mkpụrụedemede. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ibo_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels bụ ọrụ na-ewe eriri ma weghachite eriri na-enweghị ụda olu. >>> wepụ_vowels('') '' >>> wepụ_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> wepụ_vowels('abcdef') 'bcdf' >>> wepụ_vowels('aaaaa') '' >>> wepụ_vowels('aaBAA') 'B' >>> wepụ_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ibo_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Laghachi Eziokwu ma ọ bụrụ na nọmba niile dị na ndepụta l dị n'okpuru ọnụego t. >>> n'okpuru_ọnụego([1, 2, 4, 10], 100) Eziokwu >>> n'okpuru_ọnụego([1, 20, 4, 10], 5) Ụgha """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ibo_Latn,python,"

def add(x: int, y: int):
    """"""Tinye nọmba abụọ x na y >>> tinye ((2, 3) 5 >>> tinye ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ibo_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Lelee ma okwu abụọ nwere otu mkpụrụedemede. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Eziokwu >>> same_chars (('abcd', 'dddddddabc') Eziokwu >>> same_chars (('dddddddabc', 'abcd') Eziokwu >>> same_chars (('eabcd', 'dddddddabc') Ụgha >>> same_chars ((('abcd', 'dddddddabddce') Ụgha >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Ụgha """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ibo_Latn,python,"

def fib(n: int):
    """"""Laghachi n-nke Fibonacci nọmba. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ibo_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets bụ eriri nke ""<"" na "">"". laghachi Eziokwu ma ọ bụrụ na bracket mmeghe ọ bụla nwere bracket mmechi kwekọrọ. >>> correct_bracketing(""<"") Ụgha >>> correct_bracketing(""<>"") Eziokwu >>> correct_bracketing(""<><>>"") Eziokwu >>> correct_bracketing(""><<>"") Ụgha """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ibo_Latn,python,"

def monotonic(l: list):
    """"""Laghachi Eziokwu bụ ndepụta ihe na-abawanye ma ọ bụ na-ebelata. >>> monotonic (([1, 2, 4, 20]) Eziokwu >>> monotonic (([1, 20, 4, 10]) Ụgha >>> monotonic (([4, 1, 0, -10]) Eziokwu """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ibo_Latn,python,"

def common(l1: list, l2: list):
    """"""Laghachi edozi ihe ndị a na-ahụkarị maka ndepụta abụọ. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ibo_Latn,python,"

def largest_prime_factor(n: int):
    """"""Laghachi ihe kachasị ukwuu nke n. Were n > 1 ma ọ bụghị onye isi. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ibo_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n bụ ọrụ na-agbakọta nọmba site na 1 ruo n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ibo_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets bụ eriri nke ""("" na "")"". laghachi Eziokwu ma ọ bụrụ na bracket ọ bụla na-emepe nwere bracket mmechi kwekọrọ. >>> correct_bracketing(""("") Ụgha >>> correct_bracketing(""() Eziokwu >>> correct_bracketing(""() Eziokwu >>> correct_bracketing("") Ụgha """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ibo_Latn,python,"

def derivative(xs: list):
    """"""xs na-anọchite anya ọnụọgụ nke polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Laghachi ntụgharị nke polynomial a n'otu ụdị ahụ. >>> derivative (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ibo_Latn,python,"

def fibfib(n: int):
    """"""Usoro ọnụọgụgụ FibFib bụ usoro yiri nke Fibbonacci nke akọwapụtara dị ka ndị a: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Biko dee ọrụ iji rụọ ọrụ nke ọma na-agbakọ n-th element nke usoro ọnụọgụ fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ibo_Latn,python,"
FIX = """"""Dee ọrụ vowels_count nke na-ewe eriri na-anọchite anya okwu dị ka ntinye ma weghachite ọnụ ọgụgụ nke ụda olu na eriri ahụ. Olu olu na nke a bụ 'a', 'e', 'i', 'o', 'u'. N'ebe a, 'y' bụkwa ụda olu, mana ọ bụ naanị mgbe ọ dị na njedebe nke okwu ahụ. Ihe Nlereanya: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Tinye ihe ndị ọzọ a na-eme n'ule. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ibo_Latn,python,"
def circular_shift(x, shift):
    """"""Gbanwee mkpụrụokwu nke integer x, gbanwee mkpụrụokwu ahụ n'aka nri site na mbugharị ma weghachite nsonaazụ dịka eriri. Ọ bụrụ na mbugharị > ọnụọgụ nke mkpụrụokwu, weghachite mkpụrụokwu gbanwere. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ibo_Latn,python,"
def digitSum(s):
    """"""Ọrụ Dee ọrụ nke na-ewe eriri dị ka ntinye ma weghachite nchikota nke mkpụrụedemede elu naanị' koodu ASCII. Ihe atụ: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ibo_Latn,python,"
def fruit_distribution(s,n):
    """"""Na ọrụ a, a ga-enye gị eriri nke na-anọchite anya ọnụ ọgụgụ apụl na oranges nke a na-ekesa na nkata mkpụrụ osisi nkata a nwere apụl, oranges, na mango mkpụrụ osisi. Nyere eriri nke na-anọchite anya ọnụ ọgụgụ nke oranges na apụl na integer nke na-anọchite anya ọnụ ọgụgụ nke mkpụrụ osisi na nkata weghachite ọnụ ọgụgụ nke mkpụrụ osisi mango na nkata. maka examble: fruit_distribution""5(apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 apụl na 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apụl na 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apụl na 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ibo_Latn,python,"
def pluck(arr):
    """"""""E nyere usoro nke na-anọchite anya alaka nke osisi nke nwere ọnụ ọgụgụ na-abụghị nke na-adịghị mma ọrụ gị bụ ịdọrọ otu n'ime ọnụ na laghachi ya. Nchịkọta a na-adọrọ kwesịrị ịbụ ọnụ na ọnụ ọgụgụ kachasị nta. Ọ bụrụ na a chọtara ọtụtụ ọnụ na ọnụ ọgụgụ kachasị nta na ọnụ ọgụgụ kachasị nta na ọnụ ọgụgụ kachasị nta. A ga-eweghachi ọnụ nke nwere ọnụ ọgụgụ kachasị nta. A ga-eweghachi ọnụ na-adọrọ na ndepụta, [small_value, ya index ], Ọ bụrụ na enweghị ọnụ ọgụgụ ma ọ bụ na usoro a na-enye bụ ihe efu, laghachi []. Ihe Nlereanya 1: Ntinye: [4,2,3] Mmepụta: [2, 1] Nkọwa: 2 nwere ọnụ ọgụgụ kachasị nta, na 2 nwere ọnụ ọgụgụ kachasị nta. Ihe Nlereanya 2: Ntinye: [1,2,3] Mmepụta: [2, 1] Nkọwa: 2 nwere ọnụ ọgụgụ kachasị nta, na 2 nwere ọnụ ọgụgụ kachasị nta. Ihe Nlereanya 3: Ntinye: [] Ntinye: [4:] Ntinye: [5, 3, 4,] Ntinye: [0,] Ntinye: 1 Ntinye: 0 Nke kachasị nta bụ ọnụ ọgụgụ kachasị nta, ma ọ bụ ihe atụ abụọ. Ihe atụ: Nke mbụ bụ ihe atụ: * Nke kachasị nta, nke nwere ọnụ ọgụgụ kachasị nta bụ 0 = 0, ma ọ bụ ihe na-efu.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ibo_Latn,python,"
def search(lst):
    '''A na-enye gị ndepụta nke ọnụọgụgụ nke ọnụọgụgụ. Laghachi ọnụọgụgụ kachasị ukwuu nke dị ukwuu karịa efu, ma nwee ugboro ole ka ọ dị ukwuu ma ọ bụ hà nhata na uru nke integer n'onwe ya. Ugboro ole nke integer bụ ọnụọgụgụ ugboro ole ọ na-apụta na ndepụta ahụ. Ọ bụrụ na ọnụọgụ dị otú ahụ adịghị, laghachi -1. Ihe atụ: search (([4, 1, 2, 2, 3, 1]) == 2 search ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 search ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ibo_Latn,python,"
def strange_sort_list(lst):
    '''N'enye ndepụta nke integers, laghachi ndepụta na ihe ijuanya. Ihe ijuanya na-adịghị mma, bụ mgbe ị na-amalite na uru kachasị, mgbe ahụ, kachasị nke integers ndị fọdụrụnụ, mgbe ahụ, nke kachasị na ihe ndị ọzọ. Ihe atụ: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ibo_Latn,python,"
def triangle_area(a, b, c):
    '''N'inye ogologo nke akụkụ atọ nke triangle. Laghachi mpaghara triangle ahụ na-agbanye na 2 decimal ma ọ bụrụ na akụkụ atọ ahụ mepụtara triangle ziri ezi. Ma ọ bụghị ya laghachi -1 Akụkụ atọ na-eme triangle ziri ezi mgbe ngụkọta nke akụkụ abụọ ọ bụla dị ukwuu karịa akụkụ nke atọ. Ihe Nlereanya: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ibo_Latn,python,"
def will_it_fly(q,w):
    '''Dee ọrụ nke na-alaghachi Eziokwu ma ọ bụrụ na ihe q ga-efe, na Ụgha ma ọ bụghị. Ihe q ga-efe ma ọ bụrụ na ọ dị mma (ọ bụ ndepụta palindromic) na nchikota nke ihe ya dị obere ma ọ bụ hà nhata na oke ike w. Ihe Nlereanya: will_it_fly([1, 2], 5) â -> Ụgha # 1+2 dị obere karịa oke ike, ma ọ bụ enweghị ike. will_it_fly([3, 2, 3], 1) â -> Ụgha # ọ bụ ihe ziri ezi, ma 3+2+3 dị elu karịa oke ike. will_it_fly[3, 2, 3], 9) â -> Eziokwu # 3+23 dị ala karịa oke ike, ma ọ bụ ihe ziri ezi. will_it_fly([3], â 5) -> Eziokwu # 3 dị ala karịa oke ike, ma ọ bụ ihe ziri ezi. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ibo_Latn,python,"
def smallest_change(arr):
    """"""N'inye usoro nke integers, chọta ọnụọgụgụ nke ihe ndị dị mkpa ka a gbanwee iji mee ka usoro ahụ dị palindromic. Usoro palindromic bụ usoro a na-agụ otu azụ na n'ihu. Na otu mgbanwe, ị nwere ike ịgbanwe otu ihe na ihe ọ bụla ọzọ. Dịka ọmụmaatụ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ibo_Latn,python,"
def total_match(lst1, lst2):
    '''Dee ọrụ nke na-anabata ndepụta abụọ nke eriri ma weghachite ndepụta nke nwere ọnụ ọgụgụ zuru ezu nke akara na ndepụta niile nke ndepụta ahụ karịa nke ọzọ. ọ bụrụ na ndepụta abụọ ahụ nwere ọnụ ọgụgụ nke akara, laghachi ndepụta mbụ. Ihe atụ total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ibo_Latn,python,"
def is_multiply_prime(a):
    """"""Dee ihe omume nke na-alaghachi ezi ma ọ bụrụ na ọnụọgụgụ enyere bụ ịba ụba nke nọmba atọ na-adịghị mma ma ọ bụghị ụgha. Ịmara na (a) dị obere karịa 100. Ihe Nlereanya: is_multiply_prime(30) == Ezi 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ibo_Latn,python,"
def is_simple_power(x, n):
    """"""Ọrụ gị bụ ide ọrụ nke na-alaghachi eziokwu ma ọ bụrụ na ọnụọgụ x bụ ike dị mfe nke n na ụgha na ikpe ndị ọzọ. x bụ ike dị mfe nke n ma ọ bụrụ na n**int=x Dịka ọmụmaatụ: is_simple_power(1, 4) => eziokwu bụ_simple_power(2, 2) => eziokwu bụ_simple_power(8, 2) => eziokwu bụ_simple_power(3, 2) => ụgha bụ_simple_power_(3, 1) ụgha => bụ_simple_power_(5, 3) => ụgha """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ibo_Latn,python,"
def iscube(a):
    '''Dee ọrụ nke na-ewe ọnụọgụgụ a ma weghachite Eziokwu ma ọ bụrụ na nke a bụ cube nke ụfọdụ nọmba. Rịba ama: ị nwere ike iche na ntinye ahụ bụ ihe ziri ezi mgbe niile. Ihe atụ: iscube(1) ==> Eziokwu iscube(2) ==> Ụgha iscube(-1) ==> Eziokwu iscube(64) ==> Eziokwu iscube(0) ==> Eziokwu iscube(180) ==> Ụgha '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ibo_Latn,python,"
def hex_key(num):
    """"""A gwara gị ka ị dee ọrụ nke na-enweta nọmba hexadecimal dị ka eriri ma gụọ ọnụọgụ nke mkpụrụedemede hexadecimal bụ ndị bụ isi (nọmba isi, ma ọ bụ isi, bụ ọnụọgụ anụ ahụ karịrị 1 nke na-abụghị ngwaahịa nke ọnụọgụ abụọ dị obere). Ọnụ ọgụgụ hexadecimal bụ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Ọnụ ọgụgụ isi bụ 2, 3, 5, 7, 11, 13, 17,... Ya mere, ị ga-achọpụta ọnụọgụ nke mkpụrụedemede ndị a: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Cheta: ị nwere ike iche na ntinye bụ mgbe niile ziri ezi ma ọ bụ oghere, na akara A,B,C,D,E,F, bụ nnukwu okwu. Ihe atụ: Maka num = ""AB"" ihe mmepụta kwesịrị ịbụ 1. maka num = ""1077E"" ihe mmepụta kwesịrị ịbụ 2. maka num = ""AB33ED"" ihe mmepụta kwesịrị ịbụ 4. ""ABC"" kwesịrị ịbụ 6.089123A ""A"" maka ""2020DEF"" kwesịrị ịbụ 2.045""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ibo_Latn,python,"
def decimal_to_binary(decimal):
    """"""A ga-enye gị nọmba na decimal ụdị na ọrụ gị bụ iji tọghata ya na ọnụọgụ abụọ usoro. The ọrụ kwesịrị laghachi a eriri, na onye ọ bụla agwa na-anọchi anya a ọnụọgụ abụọ usoro. Onye ọ bụla agwa na eriri ga-abụ '0' ma ọ bụ '1'. A ga-enwe ihe mmezi di na nwunye nke odide 'db' na mmalite na na njedebe nke eriri. The mmezi odide na-e-enyere na usoro. Ihe Nlereanya: decimal_to_binary(15) # alaghachi ""db1111db"" decimal_to_binary32) # alaghachi ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ibo_Latn,python,"
def is_happy(s):
    """"""A na-enye gị eriri s. Ọrụ gị bụ ịlele ma eriri ahụ ọ dị mma ma ọ bụ na ọ bụghị. A na-enwe obi ụtọ ma ọ bụrụ na ogologo ya dịkarịa ala 3 na mkpụrụedemede 3 ọ bụla dị iche iche Dị ka ihe atụ: is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy)) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ibo_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ọ bụ izu ikpeazụ nke ọkara afọ agụmakwụkwọ na onye nkụzi nwere inye akara ule na ụmụ akwụkwọ. Onye nkụzi ahụ na-eme ya onwe ya algọridim maka grading. Nanị nsogbu bụ, ọ na-efu koodu ọ na-eji maka grading. Ọ nyere gị a ndepụta nke GPAs maka ụfọdụ ụmụ akwụkwọ na ị ga-ede a ọrụ na ike mmepụta a ndepụta nke akwụkwọ ozi akara ule na-eji na-esonụ table: GPA. Letter akara 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E: grade_equation ([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ibo_Latn,python,"
def prime_length(string):
    """"""Dee ọrụ nke na-ewe eriri ma laghachi Eziokwu ma ọ bụrụ na ogologo eriri bụ nọmba isi ma ọ bụ Ụgha ma ọ bụghị Ihe atụ prime_length (('Ekele') == Eziokwu prime_length (('abcdcba') == Eziokwu prime_length (('kittens') == Eziokwu prime_length (('orange') == Ụgha """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ibo_Latn,python,"
def starts_one_ends(n):
    """"""Nyere a nti integer n, laghachi na ọnụ ọgụgụ nke nọmba nke n-ọbula nti integer na-amalite ma ọ bụ na-agwụ na 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ibo_Latn,python,"
def solve(N):
    """"""N'enye ọnụọgụgụ dị mma N, weghachite ngụkọta nke mkpụrụedemede ya na ọnụọgụ abụọ. Ihe Nlereanya Maka N = 1000, ngụkọta nke mkpụrụedemede ga-abụ 1 mmepụta kwesịrị ịbụ ""1"". Maka N = 150, ngụkọta nke mkpụrụedemede ga-abụ 6 mmepụta kwesịrị ịbụ ""110"". Maka N = 147, ngụkọta nke mkpụrụedemede ga-abụ 12 mmepụta kwesịrị ịbụ ""1100"". Mgbanwe: @N integer Constraints: 0 â‰¤ N â‰¤ 10000. Mmepụta: eriri ọnụọgụ abụọ """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ibo_Latn,python,"
def add(lst):
    """"""N'enye ndepụta nke integer ndị na-abụghị oghere lst. gbakwunye ihe ndị ahụ na-adịghị ahụkebe na ndị na-adịghị ahụkebe.. Ihe atụ: gbakwunye (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ibo_Latn,python,"
def anti_shuffle(s):
    """"""Dee ọrụ nke na-ewe eriri ma weghachite ụdị nke ya. Ụdị nke eriri, bụ eriri ebe a na-edochi okwu niile (nkewapụrụ site na oghere) site na okwu ọhụrụ ebe a na-edozi ihe odide niile na-arịgo n'usoro dabere na uru ascii. Rịba ama: Ị ga-edebe usoro nke okwu na oghere efu na ahịrịokwu ahụ. Dịka ọmụmaatụ: anti_shuffle ((('Hi') laghachi 'Hi' anti_shuffle ((('hello') laghachi 'ehllo' anti_shuffle (('Hello World!!!') laghachi 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ibo_Latn,python,"
def get_row(lst, x):
    """"""A na-enye gị data 2 dimensional, dị ka ndepụta ndị na-agbakọta, nke yiri matriks, Otú ọ dị, n'adịghị ka matriks, ahịrị ọ bụla nwere ike ịnwe ọnụọgụ dị iche iche nke ogidi. Nyere lst, na integer x, chọta integers x na ndepụta ahụ, wee laghachi ndepụta nke tuples, [(x1, y1), (x2, y2) ...] dị ka nke na tuple ọ bụla bụ nhazi - (ahịrị, ogidi), malite na 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ibo_Latn,python,"
def sort_array(array):
    """"""N'enye usoro nke ọnụọgụgụ na-abụghị nke na-adịghị mma, weghachite otu nke usoro ahụ e nyere mgbe ị na-edozi, ị ga-edozi usoro ahụ e nyere na-arịgo ma ọ bụrụ na nchikota ((mkpụrụ ego mbụ, uru ikpeazụ) bụ ihe dị iche, ma ọ bụ dozie ya na-agbadata ma ọ bụrụ na nchikota ((mkpụrụ ego mbụ, uru ikpeazụ) bụ ọbụna. Rịba ama: * agbanwela usoro ahụ e nyere. Ihe atụ: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6]  0""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ibo_Latn,python,"
def encrypt(s):
    """"""Mepụta ọrụ encrypt nke na-ewe eriri dị ka arụmụka ma weghachite eriri ezoro ezo na mkpụrụedemede na-agbagharị. Ekwesịrị ịtụgharị mkpụrụedemede n'ụzọ dị otú ahụ ka mkpụrụedemede na-agbada site na abụọ na-amụba na ebe abụọ. Dịka ọmụmaatụ: encrypt('hi') na-alaghachi 'lm' encrypt('asdfghjkl') na-alaghachi 'ewhjklnop' encrypt('gf') na-alaghachi 'kj' encrypt('et') na-alaghachi 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ibo_Latn,python,"
def next_smallest(lst):
    """"""A na-enye gị ndepụta nke integers. Dee ọrụ next_smallest (() nke na-alaghachi ihe nke abụọ kachasị nta na ndepụta ahụ. Laghachi None ma ọ bụrụ na enweghị ihe dị otú ahụ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ibo_Latn,python,"
def is_bored(S):
    """"""A ga-enye gị okwu, ọrụ gị ga-abụ ịgụta ọnụ ọgụgụ nke okwu. Ihe na-agwụ ike bụ ahịrịokwu nke na-amalite site na okwu ""M"". A na-ejikọta ahịrịokwu site na '.', '?' ma ọ bụ '!'. Dịka ọmụmaatụ: >>> is_bored(""Hello world"") 0 >>> is_bored(""Eluigwe na-acha anụnụ anụnụ. Anyanwụ na-enwu. M hụrụ ihu igwe a n'anya"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ibo_Latn,python,"
def any_int(x, y, z):
    '''Mepụta ọrụ nke na-ewe 3 nọmba. Na-alaghachi ezi ma ọ bụrụ na otu n'ime nọmba ahụ hà nhata na ngụkọta nke abụọ ndị ọzọ, na nọmba niile bụ integers. Na-alaghachi ụgha na ikpe ọ bụla ọzọ. Ihe atụ ọ bụla_int{5, 2, 7) â -> Eziokwu ọ bụla_int{3, 2, 2) â -> Ụgha ọ bụla_int{3, -2, 1) â -> Eziokwu ọ bụla_int{3.6, -2.2, 2) â -> Ụgha '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ibo_Latn,python,"
def encode(message):
    """"""Dee ọrụ nke na-ewe ozi, ma tinye ya n'ụzọ ga-eme ka ọ gbanwee mkpụrụedemede niile, dochie vowels niile na ozi ahụ na mkpụrụedemede nke pụtara 2 ebe n'ihu vowel ahụ na mkpụrụedemede bekee. Were naanị mkpụrụedemede. Ihe atụ: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ibo_Latn,python,"

def skjkasdkd(lst):
    """"""A na-enye gị ndepụta nke integers. Ịkwesịrị ịchọta ọnụ ọgụgụ kachasị elu ma weghachite nchịkọta nke mkpụrụedemede ya. Ihe atụ: Maka lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] mmepụta kwesịrị ịbụ 10 Maka lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,1,2,4,2,5,1] mmepụta kwesịrị ịbụ 25 Maka lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] mmepụta kwesịrị ịbụ 13 Maka lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] mmepụta kwesịrị ịbụ 11 Maka lst = [0,81,12,31,21] mmepụta kwesịrị ịbụ 3 Maka lst = [0,1,8,1,2,7] mmepụta kwesịrị ịbụ 7 Maka lst = [1,8,1,2,7] mmepụta kwesịrị ịbụ 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ibo_Latn,python,"
def check_dict_case(dict):
    """"""N'inye okwu, laghachi Eziokwu ma ọ bụrụ na igodo niile bụ eriri na obere ma ọ bụ igodo niile bụ eriri na nnukwu, ma ọ bụghị laghachi Ụgha. Ọrụ ahụ kwesịrị ịlaghachi Ụgha bụ okwu ahụ enyere bụ oghere. Ihe atụ: check_dict_case{""a"":""apple"", ""b"":""banana""}) kwesịrị ịlaghachi Eziokwu. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) kwesịrị ịlaghachi Ụgha. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) kwesịrị ịlaghachi Ụgha. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) kwesịrị ịlaghachi Ụgha. check_dict_case{""NC"":""STATE"", ""Z"":""IP""}) kwesịrị ịlaghachi Eziokwu.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ibo_Latn,python,"
def count_up_to(n):
    """"""Mejuputa oru nke na-ewe ọnụọgụgụ na-abụghị nke na-adịghị mma ma weghachite usoro nke mbụ n integers ndị bụ nọmba mbụ na obere karịa n. dịka ọmụmaatụ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ibo_Latn,python,"
def multiply(a, b):
    """"""Mezue ọrụ nke na-ewe ọnụọgụ abụọ ma weghachite ngwaahịa nke ọnụọgụ ha. Were ya na ntinye ahụ dị mma mgbe niile. Ihe atụ: ịba ụba 148, 412) kwesịrị ịlaghachi 16. ịba ụba 19 , 28 kwesịrị ịlaghachi 72. ịba ụba 2020 , 1851 kwesịrị ịlaghachi 0. ịba ụba 14 , 15 kwesịrị ịlaghachi 20 .""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ibo_Latn,python,"
def count_upper(s):
    """"""N'inye eriri s, gụọ ọnụ ọgụgụ nke ụda olu dị elu na ọbụna indexes. Dịka ọmụmaatụ: count_upper (('aBCdEf') na-alaghachi 1 count_upper (('abcdefg') na-alaghachi 0 count_upper (('dBBE') na-alaghachi 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ibo_Latn,python,"
def closest_integer(value):
    '''Mepụta ọrụ nke na-ewe uru (ụdọ) na-anọchite anya ọnụọgụ ma weghachite nọmba zuru oke kacha nso ya. Ọ bụrụ na ọnụọgụ ahụ dị anya site na ọnụọgụ abụọ, gbasaa ya site na efu. Ihe Nlereanya >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Rịba ama: Ịgbasa site na efu pụtara na ọ bụrụ na ọnụọgụ nyere dị anya site na ọnụọgụ abụọ, nke ị ga-alaghachi bụ nke kachasị anya site na efu. Maka ihe atụ closest_integer "" ((14.5"") kwesịrị ịlaghachi 15 na closest_integer "" ((-14.5"") kwesịrị ịlaghachi -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ibo_Latn,python,"
def make_a_pile(n):
    """"""N'enye ọnụọgụgụ dị mma n, ị ga-eme ka nkume dị n n. N'elu nke mbụ nwere nkume n. Ọnụ ọgụgụ nke nkume dị na ọkwa ọzọ bụ: - nọmba ọzọ na-esote ma ọ bụrụ na n bụ ihe dị iche. - nọmba ọzọ na-esote ma ọ bụrụ na n bụ ọbụna. Laghachi ọnụ ọgụgụ nke nkume na ọkwa ọ bụla na ndepụta, ebe ihe dị na index i na-anọchite anya ọnụ ọgụgụ nke nkume na ọkwa (i+1). Ihe atụ: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ibo_Latn,python,"
def words_string(s):
    """"""A ga-enye gị eriri okwu nkewapụrụ site na commas ma ọ bụ oghere. Ọrụ gị bụ ikewa eriri ahụ n'ime okwu ma weghachite usoro nke okwu. Dịka ọmụmaatụ: words_string ((""Hi, aha m bụ John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ibo_Latn,python,"
def choose_num(x, y):
    """"""Ọrụ a na-ewe nọmba abụọ dị mma x na y ma weghachite ọnụ ọgụgụ kachasị elu nke dị na nso [x, y] gụnyere. Ọ bụrụ na ọnweghị nọmba dị otú ahụ, mgbe ahụ ọrụ ahụ kwesịrị ịlaghachi -1. Dịka ọmụmaatụ: họrọ_nọmba 12 , 15) = 14 họrọ_nọmba 13 , 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ibo_Latn,python,"
def rounded_avg(n, m):
    """"""A na-enye gị ọnụọgụ abụọ dị mma n na m, ọrụ gị bụ ịgbakọ nkezi nke ọnụọgụgụ site n ruo m (gụnyere n na m). Gbanwee azịza ya na ọnụọgụgụ kachasị nso ma gbanwee ya na ọnụọgụ abụọ. Ọ bụrụ na n karịrị m, laghachi -1. Ihe Nlereanya: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ibo_Latn,python,"
def unique_digits(x):
    """"""N'enye ndepụta nke nọmba zuru oke x. weghachite ndepụta nke ihe niile na-enweghị ihe ọ bụla. Rịba ama: A ga-edozi ndepụta ahụ na-arịwanye elu. Dịka ọmụmaatụ: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ibo_Latn,python,"
def by_length(arr):
    """"""N'inye usoro nke integers, dozie usoro nke integers nke dị n'etiti 1 na 9 gụnyere, gbanwee usoro ahụ, wee dochie anya mkpụrụedemede ọ bụla site na aha ya kwekọrọ na ""Otu"", ""Abụọ"", ""Atọ"", ""Anọ"", ""Asaa"", ""Asaa"", ""Asaa"", ""Asaa"", ""Iri"". Dịka ọmụmaatụ: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ụdị arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ụdị arr -> [8, 5, 4, 3, 2, 2, 1, 1] laghachi [""Asaa"", ""Asaa"", ""Atọ"", ""Atọ"", ""Atọ"", ""Otu"", ""Otu""] Ọ bụrụ na usoro ahụ bụ ihe efu, laghachi usoro: arr = [] laghachi [] Ọ bụrụ na usoro ahụ nwere nọmba ọ bụla dị iche iche na-eleghara ya anya: arr = [1, 1 , 55] -> arr - 1 , 55 -> arr - 1 , 55 -> reverse arr = [51] - 1 'laghachi' """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ibo_Latn,python,"
def f(n):
    """"""Mejuputa oru f nke na-ewere n dika ihe omuma, ma weghachite ndepụta nke nha n, nke mere na uru nke ihe omuma na index i bu ihe omuma nke m ma oburu na m bu kwa ma obu nchikota onu ogugu site na 1 rue i ma obu. i na-amalite site na 1. ihe omuma nke i bu otutu onu ogugu site na 1 rue i (1 * 2 * ... * i). Ihe Nlereanya: f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ibo_Latn,python,"
def even_odd_palindrome(n):
    """"""N'enye ọnụọgụgụ dị mma n, laghachi otu tuple nke nwere ọnụ ọgụgụ nke palindromes na-adịghị ahụkebe na nke na-adaba n'ime oke ((1, n), gụnyere. Ihe Nlereanya1: Ntinye: 3 Ntinye: (1, 2) Nkọwa: Ntinye palindromes bụ 1, 2, 3. otu n'ime ha bụ ọbụna, na abụọ n'ime ha bụ ndị na-adịghị ahụkebe. Ihe Nlereanya2: Ntinye: 12 Ntinye: (4, 6) Nkọwa: Ntinye palindromes bụ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. anọ n'ime ha bụ ọbụna, na 6 n'ime ha bụ ndị na-adịghị ahụkebe. Rịba ama: 1. 1 <= n <= 10 ^ 3 2. tuple laghachiri ọnụ ọgụgụ nke palindromes na-adịghị ahụkebe na ndị na-adịghị ahụkebe. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ibo_Latn,python,"
def count_nums(arr):
    """"""Dee ọrụ count_nums nke na-ewe usoro nke integers ma weghachite ọnụọgụ nke ihe ndị nwere nchịkọta nke mkpụrụedemede > 0. Ọ bụrụ na ọnụọgụ dị njọ, mgbe ahụ akara mbụ ya ga-abụ ihe na-adịghị mma: dịka -123 nwere akara akara -1, 2, na 3. >>> count_nums (([]) == 0 >>> count_nums ([-1, 11, -11]) == 1 >>> count_nums ([(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ibo_Latn,python,"
def move_one_ball(arr):
    """"""Anyị nwere 'arr' nke N integers arr[1], arr[2], ..., arr[N].A ga-edozi ọnụọgụgụ ndị dị na array ahụ. Ọrụ gị bụ ịchọpụta ma ọ ga-ekwe omume ịhazi usoro na-adịghị adaba site na ịrụ ọrụ ndị a na array: A na-ahapụ gị ka ị rụọ ọrụ nke ọma ugboro ole ọ bụla. Otu ọrụ nke ọma pụtara ịmegharị ihe niile nke array site na otu ọnọdụ na ntụziaka ziri ezi. Ihe ikpeazụ nke array ga-akwaga na mmalite ọnọdụ na array i.e. 0th index. Ọ bụrụ na ọ ga-ekwe omume inweta usoro a haziri ahazi site na ịrụ ọrụ n'elu mgbe ahụ laghachi Ezi ma ọ bụghị laghachi Ụgha. Ọ bụrụ na e nyere array bụ ihe efu mgbe ahụ laghachi Ezi. Rịba ama: E nyere ndepụta a na-ekwe nkwa inwe ihe ndị pụrụ iche. Dịka ọmụmaatụ: move_one_ball[3, 4, 5, 2] (Nkọwa: Ezi) Nkọwa: Site na ime ihe omume 2min nri, enwere ike nweta usoro na-adịghị adaba maka array. [3, 4, 5, 2] (Nkọwa: Ọ gaghị ekwe omume ịrụ ọrụ ọ bụla maka ịmegharị_ball_one_ball site na nọmba nke array.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ibo_Latn,python,"
def exchange(lst1, lst2):
    """"""N'ime nsogbu a, ị ga-emejuputa ọrụ nke na-ewe ndepụta abụọ nke nọmba, ma chọpụta ma ọ ga-ekwe omume iji gbanwee ihe dị n'etiti ha iji mee ka lst1 bụrụ ndepụta nke naanị nọmba abụọ. Enweghị oke na ọnụọgụ nke ihe gbanwere n'etiti lst1 na lst2. Ọ bụrụ na ọ ga-ekwe omume ịgbanwe ihe dị n'etiti lst1 na lst2 iji mee ka ihe niile dị na lst1 bụrụ ọbụna, laghachi ""EE"". Ma ọ bụghị, laghachi ""EE"". Dịka ọmụmaatụ: mgbanwe [1, 2, 3, 4], [1, 2, 3, 4]) => ""EE"" mgbanwe [1, 2, 3, 4], [1, 5, 3, 4]) => ""EE"" A na-eche na ndepụta ntinye agaghị abụ efu. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ibo_Latn,python,"
def histogram(test):
    """"""N'enye eriri na-anọchite anya mkpụrụedemede pere mpe nkewapụrụ, laghachi akwụkwọ ọkọwa okwu nke mkpụrụedemede nwere ọtụtụ ugboro ugboro ma nwee ọnụ ọgụgụ kwekọrọ. Ọ bụrụ na mkpụrụedemede nwere otu ihe ahụ, laghachi ha niile. Ihe Nlereanya: histogram (('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram (('a b b a') == {'a': 2, 'b': 2} histogram (('a b c a b') == {'a': 2, 'b': 2} histogram (('b b a') == {'b 4}: histogram ' ((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ibo_Latn,python,"
def reverse_delete(s,c):
    """"""Ọrụ E nyere anyị eriri abụọ s na c, ị ga-ehichapụ mkpụrụedemede niile na s nke hà nhata na mkpụrụedemede ọ bụla na c wee lelee ma eriri nsonaazụ ahụ bụ palindrome. A na-akpọ eriri palindrome ma ọ bụrụ na ọ na-agụ otu azụ azụ dị ka n'ihu. Ị ga-eweghachi otu tuple nwere eriri nsonaazụ na Eziokwu / Ụgha maka nlele. Ihe Nlereanya Maka s = ""abcde"", c = ""ae"", nsonaazụ kwesịrị ịbụ ('bcd', Ụgha) Maka s = ""abcdef"", c = ""b"" nsonaazụ kwesịrị ịbụ ('acdef', Ụgha) Maka s = ""abcdedcba"", c = ""ab"", nsonaazụ kwesịrị ịbụ ('cdedc', Eziokwu) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ibo_Latn,python,"
def odd_count(lst):
    """"""N'enye ndepụta nke eriri, ebe eriri ọ bụla nwere naanị ọnụọgụ, laghachi ndepụta. Ihe ọ bụla i nke mmepụta kwesịrị ịbụ ""ọnụ ọgụgụ nke ihe ndị dị iche na eriri i nke ntinye. "" ebe a ga-eji ọnụ ọgụgụ nke ihe ndị dị iche na nọmba nke eriri nke ntinye. >>> odd_count['1234567']) [""ọnụ ọgụgụ nke ihe ndị dị iche iche 4n nke str4ng 4 nke 4nput.""] >>> odd_count['3',""111111""]) [""ọnụ ọgụgụ nke ihe ndị dị iche iche 1n nke str1ng 1 nke 1nput."", ""ọnụ ọgụgụ nke ihe ndị dị iche iche 8n nke str8ng 8 nke 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ibo_Latn,python,"
def minSubArraySum(nums):
    """"""N'enye usoro nke integers n, chọta obere nchikota nke ọ bụla na-abụghị oghere sub-usoro nke n. Ihe Nlereanya minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ibo_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""A na-enye gị grid nke olulu mmiri. Ahịrị ọ bụla na-anọchite anya otu olulu mmiri, na nke ọ bụla n'ime ahịrị na-anọchite anya otu mmiri. Olulu mmiri ọ bụla nwere bọket kwekọrọ na ya nke enwere ike iji wepụ mmiri na ya, na bọket niile nwere otu ikike. Ọrụ gị bụ iji bọket ahụ kpochapụ olulu mmiri. Nweta ọnụọgụ oge ị chọrọ iji belata bọket.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ibo_Latn,python,"
def sort_array(arr):
    """"""N'ime Kata a, ị ga-edozi usoro nke ọnụọgụgụ ndị na-abụghị nke na-adịghị mma dịka ọnụọgụ nke ndị dị na ọnụọgụ abụọ ha na-arị elu. Maka ọnụ ọgụgụ ndị yiri nke ahụ, nhazi dabere na uru decimal. A ghaghị itinye ya n'ọrụ dị ka nke a: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ibo_Latn,python,"
def select_words(s, n):
    """"""N'inye eriri s na ọnụọgụgụ n, a gwara gị ka ị rụọ ọrụ nke na-alọghachi ndepụta nke okwu niile site na eriri s nke nwere kpọmkwem n consonants, ka okwu ndị a wee pụta na eriri s. Ọ bụrụ na eriri s bụ ihe efu mgbe ahụ ọrụ ahụ kwesịrị ịlaghachi ndepụta efu. Rịba ama: ị nwere ike iche na eriri ntinye nwere naanị mkpụrụedemede na oghere. Ihe atụ: họrọ_okwu (s) """"Mary nwere obere nwa atụrụ"", 4) ==> ["" obere""] họrọ_okwu (s) """"Mary nwere obere nwa atụrụ"", 3) ==> [""Mary"", ""nwa atụrụ""] họrọ_okwu (s) """"ebe ọcha dị mfe"", 2) ==> [] họrọ_okwu (s) """"Ndewo ụwa"", 4) ==> ["" ụwa""] họrọ_okwu (s) """" Uncle sam "", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ibo_Latn,python,"
def get_closest_vowel(word):
    """"""A na-enye gị okwu. Ọrụ gị bụ ịchọta ụdaume kacha nso nke dị n'etiti ụdaume abụọ site n'akụkụ aka nri nke okwu ahụ (okwu na-emetụta okwu). Olu na mmalite na njedebe anaghị agụta. Laghachi eriri efu ma ọ bụrụ na ịchọtaghị ụdaume ọ bụla zutere ọnọdụ dị n'elu. Ị nwere ike iche na eriri ahụ nyere nwere mkpụrụedemede Bekee naanị. Ihe Nlereanya: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ibo_Latn,python,"
def match_parens(lst):
    '''A na-enye gị ndepụta nke eriri abụọ, eriri abụọ ahụ nwere oghere oghere '(' ma ọ bụ oghere oghere ') '. Ọrụ gị bụ ịlele ma ọ bụrụ na ọ ga-ekwe omume ijikọta eriri abụọ ahụ n'usoro ụfọdụ, na eriri ahụ ga-adị mma. A na-ewere eriri S dị ka ihe dị mma ma ọ bụrụ na naanị ma ọ bụrụ na nkwonkwo niile dị na S dị mma. Dịka ọmụmaatụ: eriri '((()) 'dị mma, ebe eriri '()) 'adịghị mma. Laghachi 'Ee' ma ọ bụrụ na e nwere ụzọ isi mee eriri dị mma, ma laghachi 'Mba' ma ọ bụghị. Ihe atụ: match_parens[('() ', ') ']) == 'Ee' match_parens[(') ', ') ']) == 'Mba' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ibo_Latn,python,"
def maximum(arr, k):
    """"""N'enye usoro nke integers na k, weghachite ndepụta nke ogologo k na ọnụ ọgụgụ kachasị elu k na arr. Ihe Nlereanya1: Ntinye: arr = [-3, -4, 5], k = 3 Ntinye: [-4, -3, 5] Ihe Nlereanya2: Ntinye: arr = [4, -4, 4], k = 2 Ntinye: [4, 4] Ihe Nlereanya3: Ntinye: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Ntinye: [2] Rịba ama: 1. Ogologo nke usoro ahụ ga-adị na [1, 1000]. 2. Ihe ndị dị na usoro ahụ ga-adị na [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ibo_Latn,python,"
def solution(lst):
    """"""N'enye ndepụta nke integer ndị na-abụghị efu, laghachi nchịkọta nke ihe niile dị iche iche dị na ọnọdụ ọbụla. Ihe Nlereanya ngwọta (([5, 8, 7, 1]) ==> 12 ngwọta (([3, 3, 3, 3]) ==> 9 ngwọta (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ibo_Latn,python,"
def add_elements(arr, k):
    """"""Nyere a na-abụghị oghere n'usoro nke integers arr na a integer k, laghachi nchikota nke ihe na kasị abụọ digits si mbụ k ọcha nke arr. Ihe Nlereanya: Ntinye: arr = [111,21,3,4000,5,6,7,8,9], k = 4 mmepụta: 24 # nchikota nke 21 + 3 constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ibo_Latn,python,"
def get_odd_collatz(n):
    """"""N'enye ọnụọgụgụ dị mma n, weghachite ndepụta nke nwere ọnụọgụgụ na-enweghị atụ na usoro collatz. Nkọwa Collatz bụ ịkọ nkọ na mgbakọ na mwepụ nke metụtara usoro akọwapụtara dị ka ndị a: bido na ọnụọgụgụ ọ bụla dị mma n. Mgbe ahụ, a na-enweta okwu ọ bụla site na usoro gara aga dị ka ndị a: ọ bụrụ na okwu gara aga bụ ọbụna, okwu na-esote bụ ọkara nke okwu gara aga. Ọ bụrụ na okwu gara aga bụ ihe na-adịghị mma, okwu na-esote bụ 3 ugboro nke okwu gara aga gbakwunyere 1. Nkọwa bụ na n'agbanyeghị uru n, usoro ahụ ga-eru 1. Rịba ama: 1. Collatz(1) bụ [1]. 2. ndepụta a na-edozi na-arịwanye elu. Dịka ọmụmaatụ: get_odd_collatz(5) na-alaghachi [1, 5] # Usoro collatz maka 5 bụ [5, 8, 16, 4, 2, 1], yabụ ọnụọgụgụ ndị dị iche bụ naanị 1, na 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ibo_Latn,python,"
def valid_date(date):
    """"""Ị ga-ede ọrụ nke na-enyocha ụbọchị e nyere ma weghachite Eziokwu ma ọ bụrụ na ụbọchị ahụ dị irè ma ọ bụghị Ụgha. Ụbọchị ahụ dị irè ma ọ bụrụ na iwu niile ndị a na-eju afọ: 1. Ụbọchị ụbọchị adịghị efu. 2. Ọnụ ọgụgụ ụbọchị adịghị ihe na-erughị 1 ma ọ bụ karịa ụbọchị 31 maka ọnwa 1,3,5,7,8,10,12. Na ọnụ ọgụgụ ụbọchị adịghị ihe na-erughị 1 ma ọ bụ karịa ụbọchị 30 maka ọnwa 4,6,9,11. Na, ọnụ ọgụgụ ụbọchị adịghị ihe na-erughị 1 ma ọ bụ karịa 29 maka ọnwa 2. 3. Ọnwa ekwesịghị ịdị obere karịa 1 ma ọ bụ karịa 12. 4. Ụbọchị kwesịrị ịdị na usoro: mm-dd-yyyy dịka ọmụmaatụ: valid_date (('03-11-2000') => Eziokwu_ụbọchị (_'15-01-2012') => Ụgha (_'04-040-20') => Ụgha (_'06-04-2020') => Eziokwu (_'06-04/2020') => Ụgha (_'06-04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ibo_Latn,python,"
def split_words(txt):
    '''N'enye usoro okwu, weghachite ndepụta nke okwu kewara na oghere ọcha, ọ bụrụ na enweghị oghere ọcha dị na ederede ị kwesịrị ịkewa na commas ',' ọ bụrụ na enweghị commas ị kwesịrị ịlaghachi ọnụ ọgụgụ nke obere mkpụrụedemede na usoro na-adịghị mma na mkpụrụedemede, ord (('a') = 0, ord ((b') = 1, ... ord ((z') = 25 Ihe Nlereanya split_words ((""Ndewo ụwa!"") â -> [""Ndewo"", ""ụwa!""] split_words ((""Ndewo, ụwa!"") â -> [""Ndewo"", ""ụwa!"" split_words ((abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ibo_Latn,python,"
def is_sorted(lst):
    '''N'enye ndepụta nke nọmba, laghachi ma ha edozi ma ọ bụ na ha adịghị n'usoro na-arị elu. Ọ bụrụ na ndepụta nwere ihe karịrị 1 oyiri nke otu nọmba ahụ, laghachi Ụgha. Were na ọnụọgụgụ na-adịghị mma na naanị integers. Ihe atụ bụ_sorted ((([5]) â -> Eziokwu bụ_sorted (([1, 2, 3, 4, 5, 5]) â -> Eziokwu bụ_sorted (([1, 2, 3, 4, 5, 6]) â -> Ụgha bụ_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Eziokwu bụ_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Eziokwu bụ_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Ụgha bụ_sorted (([1, 2, 2, 3, 3, 4]) â -> Eziokwu bụ_sorted (([1, 2, 2, 3, 4 -> Ụgha ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ibo_Latn,python,"
def intersection(interval1, interval2):
    """"""A na-enye gị oge abụọ, ebe oge ọ bụla bụ ụzọ nke integers. Dịka ọmụmaatụ, oge = (mmalite, njedebe) = (1, 2). Oge ndị ahụ enyere emechi nke pụtara na oge (mmalite, njedebe) gụnyere ma mmalite na njedebe. Maka oge ọ bụla, a na-eche na mmalite ya dị obere ma ọ bụ hà njedebe ya. Ọrụ gị bụ ịchọpụta ma ogologo nke nkwụsị nke oge abụọ a bụ nọmba isi. Ihe atụ, nkwụsị nke oge (1, 3), (2, 4) bụ (2, 3) nke ogologo ya bụ 1, nke na-abụghị nọmba isi. Ọ bụrụ na ogologo nke nkwụsị bụ nọmba isi, laghachi ""EE"", ma ọ bụghị, laghachi ""EE"". Ọ bụrụ na oge abụọ ahụ adịghị agba, laghachi ""EE"". [nbanye / mmepụta] ihe atụ: intersection (((1, 2), (2, 3) ==> ""intersection"", ""NO"", ""intersection-1, 1), ""NO"", ""intersection"", ""NO"", ""intersection"", ""NO"", ""intersection"", ""0, 4"", ""NO"", ""0, 5"", ""1, """", """", "" ((((5, - ""Y"",))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ibo_Latn,python,"
def prod_signs(arr):
    """"""A na-enye gị usoro nke integers na ị ga-alaghachi nchikota nke nha nke integers mụbara site na ngwaahịa nke ihe ịrịba ama niile nke nọmba ọ bụla na usoro ahụ, nke 1, -1 ma ọ bụ 0. Rịba ama: laghachi Ọ dịghị ihe ọ bụla maka oghere efu. Ihe Nlereanya: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == Ọ dịghị """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ibo_Latn,python,"
def minPath(grid, k):
    """"""Ị nwere ike ịmalite site na sel ọ bụla, na na ọ bụla nzọụkwụ ị nwere ike ịkwaga na nke ọ bụla nke ndị agbata obi mkpụrụ ndụ, na ndị ọzọ okwu, ị nwere ike ịga na mkpụrụ ndụ na-ekere òkè a onu na gị ugbu a cell. Biko mara na a ụzọ nke ogologo k pụtara ịga kpọmkwem k mkpụrụ ndụ (bụghị n'ụzọ doro anya dị iche iche). Ị PỤGHỊ aga na grid. A ụzọ A (nke ogologo k) na-atụle obere karịa a ụzọ B (nke ogologo k) ma ọ bụrụ na mgbe na-eme ka ndị na-usoro anatara nke ụkpụrụ na mkpụrụ ndụ na-aga site A na B (ka anyị na-akpọ ha l_st na l_stA), l_stA lexically bụ obere karịa l_stB, na ndị ọzọ okwu, a integer index i. [A = 1, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, j_stA, jA_stA, jA_stA, jA_stA, jA_stA, jA_1, [A_stA_stA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, [4, jA_7, jA_8, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1, jA_1,""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ibo_Latn,python,"
def tri(n):
    """"""Onye ọ bụla maara usoro Fibonacci, ndị ọkà mmụta mgbakọ na mwepụ na-amụ ya nke ọma na narị afọ abụọ gara aga. Otú ọ dị, ihe ndị mmadụ na-amaghị bụ usoro Tribonacci. A na-akọwa usoro Tribonacci site na nlọghachi: tri(1) = 3 tri(n) = 1 + n / 2, ma ọ bụrụ na n bụ ọbụna. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ma ọ bụrụ na n bụ ihe dị iche. Dịka ọmụmaatụ: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 A na-enye gị nọmba integer na-abụghị nke na-adịghị mma, ị ga-alaghachi ndepụta nke nọmba mbụ n + 1 nke usoro Tribonacci. Ihe atụ: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ibo_Latn,python,"
def digits(n):
    """"""N'enye ọnụọgụgụ dị mma n, weghachite ngwaahịa nke ọnụọgụgụ ndị ọzọ. Laghachi 0 ma ọ bụrụ na ọnụọgụgụ niile bụ ọbụna. Dịka ọmụmaatụ: digits(1) == 1 digits(4) == 0 digits(235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ibo_Latn,python,"
def is_nested(string):
    '''Mepụta ọrụ nke na-ewe eriri dị ka ntinye nke nwere naanị brackets square. Ọrụ ahụ kwesịrị ịlaghachi Eziokwu ma ọ bụrụ na ọ bụrụ na enwere usoro ziri ezi nke brackets ebe ọ dịkarịa ala otu bracket na-agbakọta. is_nested '[[]]') â -> Eziokwu bụ_nested '[[]]]]]]]]][[[[[[]') â -> Ụgha bụ_nested '[][]') â -> Ụgha bụ_nested '[[]') â -> Ụgha bụ_nested '[[]') â -> Ụgha bụ_nested '[[][]]') â -> Eziokwu bụ_nested'[[]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ibo_Latn,python,"

def sum_squares(lst):
    """"""A na-enye gị ndepụta nke nọmba. Ịkwesịrị ịlaghachi nchịkọta nke nọmba squared na ndepụta enyere, gbasaa ihe ọ bụla na ndepụta ahụ na elu int ((mkpuchi) mbụ. Ihe Nlereanya: Maka lst = [1,2,3] mmepụta kwesịrị ịbụ 14 Maka lst = [1,4,9] mmepụta kwesịrị ịbụ 98 Maka lst = [1,3,5,7] mmepụta kwesịrị ịbụ 84 Maka lst = [1.4,4.2,0] mmepụta kwesịrị ịbụ 29 Maka lst = [-2.4,1,1] mmepụta kwesịrị ịbụ 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ibo_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Mepụta ọrụ nke na-alaghachi Eziokwu ma ọ bụrụ na akara ikpeazụ nke eriri enyere bụ mkpụrụedemede mkpụrụedemede na abụghị akụkụ nke okwu, na Ụgha ma ọ bụghị. Rịba ama: ""okwu"" bụ otu mkpụrụedemede nkewapụrụ site na oghere. Ihe atụ: check_if_last_char_is_a_letter"" ""Epeepe apụl"") â -> False check_if_last_char_is_a_letter"" ""Epeepe apụl"") â -> Eziokwu check_if_last_char_is_a_letter"" ""Epeepe apụl"") â -> False check_if_last_char_is_a_letter"" ""Epeepe apụl"") â -> False check_if_last_char_is_a_letter"" ""Epeepe apụl"") â -> False '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ibo_Latn,python,"
def can_arrange(arr):
    """"""Mepụta ọrụ nke na-alaghachi na ntinye kachasị nke ihe na-abụghị nke dị ukwuu ma ọ bụ hà nhata na ihe dị na ya. Ọ bụrụ na enweghị ihe dị otú ahụ, laghachi -1. Nhazi a nyere agaghị enwe ụkpụrụ abụọ. Ihe atụ: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ibo_Latn,python,"
def largest_smallest_integers(lst):
    '''Mepụta ọrụ nke na-alaghachi otu tuple (a, b), ebe 'a' bụ nke kachasị nke nọmba na-adịghị mma, na 'b' bụ nke kachasị nta nke nọmba dị mma na ndepụta. Ọ bụrụ na enweghị nọmba na-adịghị mma ma ọ bụ nke dị mma, laghachi ha dị ka Ọ dịghị onye. Ihe atụ: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (Ọ dịghị onye, 1) largest_smallest_integers([]) == (Ọ dịghị onye, Ọ dịghị onye) largest_smallest_integers[0]) == (Ọ dịghị onye, Ọ dịghị onye) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ibo_Latn,python,"
def compare_one(a, b):
    """"""Mepụta ọrụ nke na-ewe integers, floats, ma ọ bụ eriri na-anọchite anya ọnụ ọgụgụ dị adị, ma weghachite mgbanwe dị ukwuu na ụdị mgbanwe ya. Laghachi None ma ọ bụrụ na ụkpụrụ ndị ahụ hà nhata. Rịba ama: Ọ bụrụ na a na-anọchite anya ọnụ ọgụgụ dị adị dị ka eriri, isi ihe na-ese n'elu mmiri nwere ike ịbụ . ma ọ bụ , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ibo_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Nyochaa ma ọnụọgụgụ enyere n nwere ike ide dị ka nchikota nke nọmba 4 ziri ezi dị mma Ihe Nlereanya is_equal_to_sum_even ((4) == Ụgha is_equal_to_sum_even ((6) == Ụgha is_equal_to_sum_even ((8) == Eziokwu """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ibo_Latn,python,"
def special_factorial(n):
    """"""A na-akọwapụta ihe omume Brazil dị ka: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! ebe n > 0 Dịka ọmụmaatụ: >>> special_factorial ((4) 288 Ọrụ ahụ ga-enweta integer dị ka ntinye ma kwesịrị ịlaghachi ihe pụrụ iche nke integer a. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ibo_Latn,python,"
def fix_spaces(text):
    """"""_Ihe atụ-3derede, dochie oghere niile dị na ya na akara ala, ma ọ bụrụ na eriri nwere ihe karịrị 2 oghere ndị na-esote, wee dochie oghere niile na-esote - fix_spaces (((""Ihe Nlereanya"") == ""Ihe Nlereanya"" fix_spaces (((""Ihe Nlereanya1"") == ""Ihe Nlereanya1"" fix_spaces (((""Ihe Nlereanya2"") == ""_Ihe Nlereanya_2"" fix_spaces ((("" Ihe Nlereanya 3"") == ""_Ihe Nlereanya-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ibo_Latn,python,"
def file_name_check(file_name):
    """"""Mepụta ọrụ nke na-ewe eriri na-anọchite anya aha faịlụ, ma laghachi 'Ee' ma ọ bụrụ na aha faịlụ ahụ dị irè, ma laghachi 'Mba' ma ọ bụghị. A na-ewere aha faịlụ dị ka ihe ziri ezi ma ọ bụrụ na ọ bụrụ na ọnọdụ niile ndị a na-ezute: - E kwesịghị inwe ihe karịrị mkpụrụedemede atọ ('0'-'9') na aha faịlụ ahụ. - Aha faịlụ ahụ nwere kpọmkwem otu ntụpọ '.' - Ihe ntinye tupu ntụpọ ahụ ekwesịghị ịbụ ihe efu, ọ ga-amalite na akwụkwọ ozi sitere na mkpụrụedemede Latin alphapet ('a'-'z' na 'A'Z'). - Ihe ntinye mgbe ntụpọ ahụ ga-abụ otu n'ime ndị a: ['txt', 'exe', 'll'd'] Ihe Nlereanya: file_name_check""{example.txt"") # => 'Ee'file_name_check""{example.ll1"") # => 'Mba' (aha kwesịrị ịmalite na mkpụrụedemede alphapet latin)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ibo_Latn,python,"


def sum_squares(lst):
    """""""" Ọrụ a ga-ewepụta ndepụta nke integers. Maka ihe niile dị na ndepụta ahụ, ọrụ ahụ ga-agbanye square na ntinye integer ma ọ bụrụ na ndeksi ya bụ ọtụtụ nke 3 ma ga-etinye ọnụ ọgụgụ integer ma ọ bụrụ na ndeksi ya bụ ọtụtụ nke 4 ma ọ bụghị ọtụtụ nke 3. Ọrụ ahụ agaghị agbanwe ihe ndị dị na ndepụta ahụ nke ndeksi ha abụghị ọtụtụ nke 3 ma ọ bụ 4. Ọrụ ahụ ga-eweghachi ngụkọta nke ihe niile. Ihe Nlereanya: Maka lst = [1,2,3] mmepụta kwesịrị ịbụ 6 Maka lst = [] mmepụta kwesịrị ịbụ 0 Maka lst = [-1,-5,2,-1,-5] mmepụta kwesịrị ịbụ -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ibo_Latn,python,"
def words_in_sentence(sentence):
    """"""A na-enye gị eriri na-anọchite anya ahịrịokwu, ahịrịokwu ahụ nwere ụfọdụ okwu nkewapụrụ site na oghere, ma ị ga-eweghachi eriri nke nwere okwu sitere na ahịrịokwu mbụ, nke ogologo ya bụ nọmba mbụ, usoro nke okwu na eriri ọhụrụ ahụ kwesịrị ịbụ otu ihe ahụ dị ka nke mbụ. Ihe Nlereanya1: Ntinye: ahịrịokwu = ""Nke a bụ ule"" Ntinye: ""bụ"" Ihe Nlereanya2: Ntinye: ahịrịokwu = ""ka anyị gaa maka igwu mmiri"" Ntinye: ""gaa maka"" Ihe mgbochi: * 1 <= len(sentence) <= 100 * ahịrịokwu nwere naanị mkpụrụedemede """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ibo_Latn,python,"
def simplify(x, n):
    """"""Ọrụ gị bụ imejuputa ọrụ nke ga-eme ka okwu x * n dị mfe. Ọrụ ahụ na-alaghachi Eziokwu ma ọ bụrụ na x * n na-atụle ọnụ ọgụgụ zuru ezu na Ụgha ma ọ bụghị. Ma x na n, bụ akara akara nke nkebi, ma nwee usoro ndị a, <numerator> / <denominator> ebe ọnụọgụ na denominator bụ nọmba zuru ezu dị mma. Ị nwere ike iche na x, na n bụ nkebi ziri ezi, ma enweghị efu dị ka denominator. simplify "" 1/5 "", ""5/1"") = Eziokwu simplify "" 1/6 "", ""2/1"") = Ụgha simplify "" 7/10 "", ""10/2"") = Ụgha """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ibo_Latn,python,"
def order_by_points(nums):
    """"""Dee ọrụ nke na-edozi ndepụta nke nọmba zuru ezu na-arịgo n'usoro dịka nchịkọta nke mkpụrụedemede ha. Rịba ama: ọ bụrụ na e nwere ọtụtụ ihe nwere ọnụ ọgụgụ yiri nke mkpụrụedemede ha, hazie ha dabere na ndeksi ha na ndepụta mbụ. Dịka ọmụmaatụ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ibo_Latn,python,"
def specialFilter(nums):
    """"""Dee ọrụ nke na-ewe usoro nke nọmba dị ka ntinye ma weghachite ọnụọgụ nke ihe ndị dị na usoro ahụ nke karịrị 10 na nọmba abụọ mbụ na nke ikpeazụ nke nọmba bụ ihe efu (1, 3, 5, 7, 9). Dịka ọmụmaatụ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ibo_Latn,python,"
def get_max_triples(n):
    """"""A na-enye gị nọmba dị mma n. Ị ga-emepụta usoro nke ogologo n. Maka onye ọ bụla i (1 ‰¤ i ‰¤ n), uru nke a[i] = i * i - i + 1. Laghachi ọnụ ọgụgụ nke atọ (a[i], a[j], a[k]) nke a ebe i < j < k, na a[i] + a[j] + a[k] bụ ọtụtụ nke 3. Ihe Nlereanya: Ntinye: n = 5 Ntinye: 1 Nkọwa: a = [1, 3, 7, 13, 21] Nanị atọ dị irè bụ (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ibo_Latn,python,"
def bf(planet1, planet2):
    '''E nwere mbara ala asatọ na mbara igwe anyị: nke dị nso na Sun bụ Mercury, nke ọzọ bụ Venus, mgbe ahụ Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Dee ọrụ nke na-ewe aha mbara ala abụọ dị ka eriri planet1 na planet2. Ọrụ ahụ kwesịrị ịlaghachi otu tuple nwere mbara ala niile nke orbit dị n'etiti orbit nke planet1 na orbit nke planet2, nke a na-edozi site na nso anyanwụ. Ọrụ ahụ kwesịrị ịlaghachi tuple efu ma ọ bụrụ na planet1 ma ọ bụ planet2 abụghị aha mbara ala ziri ezi. Ihe atụ bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Earth"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ibo_Latn,python,"
def sorted_list_sum(lst):
    """"""Dee ọrụ nke na-anabata ndepụta nke eriri dị ka ihe nkedo, na-ehichapụ eriri ndị nwere ogologo dị iche iche site na ya, ma weghachite ndepụta ahụ na usoro a haziri ahazi, Ndepụta ahụ bụ mgbe niile ndepụta nke eriri na ọ bụghị usoro nke nọmba, ọ nwere ike ịnwe duplicates. Usoro nke ndepụta ahụ kwesịrị ịdị na-arị elu site na ogologo nke okwu ọ bụla, ị ga-eweghachite ndepụta ahụ nke a haziri site na iwu ahụ. Ọ bụrụ na okwu abụọ nwere otu ogologo, dozie ndepụta ahụ n'usoro mkpụrụedemede. Ọrụ ahụ kwesịrị ịlaghachi ndepụta nke eriri na usoro nhazi. Ị nwere ike iche na okwu niile ga-enwe otu ogologo. Dịka ọmụmaatụ: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => [""ab"", ""cd""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ibo_Latn,python,"
def x_or_y(n, x, y):
    """"""Ihe omume dị mfe nke kwesịrị ịlaghachi uru nke x ma ọ bụrụ na n bụ nọmba mbụ ma kwesịrị ịlaghachi uru nke y ma ọ bụghị. Ihe atụ: maka x_or_y(7, 34, 12) == 34 maka x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ibo_Latn,python,"
def double_the_difference(lst):
    '''N'enye ndepụta nke nọmba, laghachi nchikota nke square nke nọmba na ndepụta ahụ na-adịghị ahụkebe. Eleghara nọmba ndị na-adịghị mma ma ọ bụ na-abụghị integers. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Ọ bụrụ na ndepụta ntinye bụ ihe efu, laghachi 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ibo_Latn,python,"
def compare(game,guess):
    """"""Echere m na anyị niile na-echeta mmetụta ahụ mgbe nsonaazụ nke ihe omume a na-echere ogologo oge mechara mara. Mmetụta na echiche ị nwere n'oge ahụ bara uru ịdebanye na ịtụnyere. Ọrụ gị bụ ịchọpụta ma mmadụ ọ kwadoro nsonaazụ nke ọtụtụ egwuregwu. A na-enye gị usoro abụọ nke akara na ịkọ nkọ nke nha anya, ebe akara ọ bụla na-egosi egwuregwu. Laghachi usoro nke nha anya na-egosi ebe ọ bụla ịkọ nkọ dị. Ọ bụrụ na ha kwadoro, uru ahụ bụ 0, ma ọ bụrụ na ọ bụghị, uru ahụ bụ ọdịiche zuru oke n'etiti ịkọ nkọ na akara. ihe atụ: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,3,3] compare (([0,5,0,4],[0,4,1,0,-2]) -> [4,4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ibo_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""A ga-enye gị aha klas (ihe ndọtị) na ndepụta nke ndọtị. A ga-eji ndọtị ndị ahụ bulite klas ndị ọzọ na klas ahụ. Ike nke ndọtị bụ dị ka ndị a: Ka CAP bụrụ ọnụ ọgụgụ nke mkpụrụedemede ukwu na aha ndọtị ahụ, ma ka SM bụrụ ọnụ ọgụgụ nke mkpụrụedemede obere na aha ndọtị ahụ, ike ahụ nyere site na nkewa CAP - SM. Ị ga-ahụ ndọtị kachasị ike ma weghachite eriri na usoro a: ClassName.StrongestExtensionName. Ọ bụrụ na enwere ndọtị abụọ ma ọ bụ karịa nwere otu ike, ị ga-ahọrọ nke mbụ na ndepụta ahụ. Dịka ọmụmaatụ, ọ bụrụ na e nyere gị ""Slices"" dịka klas na ndepụta nke ndọtị: ['SEviviviSNGliCes', 'Cheese', 'StuFfed'] mgbe ahụ ị ga-alaghachi 'Slices.SEviSNGliCes' ebe ọ bụ na ndọtị kachasị ike bụ: 'SviviSNGliCes' (most strongestExtensionName.StrongestExtensionName.StrongestExtensionName.StrongestExtensionName.ExtensionName.StrongestExtensionName='), 'AA' maka ihe atụ: 'AA_class'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ibo_Latn,python,"
def cycpattern_check(a , b):
    """"""A na-enye gị okwu abụọ. Ịkwesịrị ịlaghachi Eziokwu ma ọ bụrụ na okwu nke abụọ ma ọ bụ nke ọ bụla n'ime ntụgharị ya bụ substring na okwu mbụ cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => Eziokwu cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => Eziokwu cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => Eziokwu """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ibo_Latn,python,"
def even_odd_count(num):
    """"""Nyere nọmba zuru ezu. weghachite otu tuple nke nwere ọnụ ọgụgụ nke ọbụna na ọnụọgụgụ ọnụọgụgụ. Ihe Nlereanya: ọbụna_odd_count(-12) ==> (1, 1) ọbụna_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ibo_Latn,python,"
def int_to_mini_roman(number):
    """"""N'enye nọmba zuru oke, nweta ọnụọgụgụ ya nke Roman dị ka eriri, ma weghachite ya na obere mkpụrụedemede. Ihe mgbochi: 1 <= num <= 1000 Ihe atụ: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ibo_Latn,python,"
def right_angle_triangle(a, b, c):
    '''N'ihi ogologo nke akụkụ atọ nke triangle. Laghachi Eziokwu ma ọ bụrụ na akụkụ atọ ahụ na-etolite triangle ziri ezi, Ụgha ma ọ bụghị. A right-angled triangle bụ triangle nke otu akụkụ bụ akụkụ ziri ezi ma ọ bụ 90 ogo. Ihe Nlereanya: right_angle_triangle ((3, 4, 5) == Ezi right_angle_triangle ((1, 2, 3) == Ụgha '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ibo_Latn,python,"
def find_max(words):
    """"""Dee ọrụ nke na-anabata ndepụta nke eriri. Ndepụta ahụ nwere okwu dị iche iche. Laghachi okwu ahụ na ọnụ ọgụgụ kachasị nke mkpụrụedemede pụrụ iche. Ọ bụrụ na ọtụtụ eriri nwere ọnụ ọgụgụ kachasị nke mkpụrụedemede pụrụ iche, laghachi nke na-abịa na mbụ na usoro lexicographical. chọta_max (([""aha"", ""nke"", ""eriri""]) == ""eriri"" chọta_max (([""aha"", ""enam"", ""egwuregwu""]) == ""enam"" chọta_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ibo_Latn,python,"
def eat(number, need, remaining):
    """"""Ị bụ oke bekee agụụ na-agụ, ma ị riworị ọnụ ọgụgụ ụfọdụ nke carrots, ma ugbu a, ị chọrọ iri ọtụtụ carrots iji mezue nri ụbọchị. ị kwesịrị ịlaghachi usoro nke [ọnụ ọgụgụ nke carrots riri mgbe nri gị gasịrị, ọnụ ọgụgụ nke carrots fọdụrụ mgbe nri gị gasịrị ] ma ọ bụrụ na enweghi carrots fọdụrụ, ị ga-eri carrots fọdụrụ, ma ị ka ga-enwe agụụ. Ihe Nlereanya: * rie ((5, 6, 10) -> [11, 4] * rie ((4, 8, 9) -> [12, 1] * rie ((1, 10, 10) -> [11, 0] * rie ((2, 11, 5) -> [7, 0] Mgbanwe: @ nọmba: ọnụ ọgụgụ zuru ezu nke carrots ị riri. @ mkpa: ọnụ ọgụgụ zuru ezu nke carrots ị chọrọ iri. @ fọdụrụnụ: ọnụ ọgụgụ zuru ezu nke carrots fọdụrụ na ngwaahịa Constrain: * 0 = <= 0 * 1000 = <= 1000 * 0 = <= 1000 = fọdụrụ  = = = = 1000  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =                                                                                                                                                  """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ibo_Latn,python,"
def do_algebra(operator, operand):
    """"""N'enye ndepụta abụọ, onye ọrụ, na onye ọrụ. Ndepụta nke mbụ nwere ọrụ algebra, na ndepụta nke abụọ bụ ndepụta nke integers. Jiri ndepụta abụọ enyere iji wuo okwu algebra ma weghachite nyocha nke okwu a. Ọrụ algebra ndị bụ isi: Mgbakwunye ( +) Mwepu ( - ) Nkọwapụta ( *) Nkewa ala ( //) Nkọwapụta ( ** Ihe atụ) Onye ọrụ['+', '*', '-'] array = [2, 3, 4, 5] nsonaazụ = 2 + 3 * 4 - 5 => nsonaazụ = 9 Rịba ama: Ogologo ndepụta nke onye ọrụ bụ otu ogologo nke ndepụta nke onye ọrụ na-ewepu otu. Onye ọrụ bụ ndepụta nke ndị na-abụghị ndị na-adịghị mma. Onye ọrụ nwere ọ dịkarịa ala otu onye ọrụ, na ndepụta nke onye ọrụ nwere ọ dịkarịa ala abụọ.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ibo_Latn,python,"
def solve(s):
    """"""A na-enye gị eriri s. ọ bụrụ na s[i] bụ mkpụrụedemede, gbanwee ya site na ala ruo n'elu ma ọ bụ vice versa, ma ọ bụghị ya, debe ya dị ka ọ dị. Ọ bụrụ na eriri ahụ enweghị mkpụrụedemede, gbanwee eriri ahụ. Ọrụ ahụ kwesịrị ịlaghachi eriri nsonaazụ. Ihe Nlereanya dozie""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ibo_Latn,python,"
def string_to_md5(text):
    """"""N'inye eriri 'ederede', laghachi ya md5 hash yiri eriri. Ọ bụrụ na 'ederede' bụ eriri efu, laghachi None. >>> string_to_md5('Ekele ụwa') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ibo_Latn,python,"
def generate_integers(a, b):
    """"""Nyere ọnụọgụ abụọ dị mma a na b, laghachi ọbụna ọnụọgụgụ n'etiti a na b, na-arị elu. Dịka ọmụmaatụ: mepụta_integers ((2, 8) => [2, 4, 6, 8] mepụta_integers ((8, 2) => [2, 4, 6, 8] mepụta_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
