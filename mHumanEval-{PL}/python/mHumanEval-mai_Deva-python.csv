task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,mai_Deva,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""जाँचू जे संख्याक देल गेल सूचीमे, कोनो दूटा संख्या देल गेल सीमा सँ एक-दोसर सँ नजदीक अछि की नहि। उदाहरणः >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) गलत >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) सही """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,mai_Deva,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ई फंक्शनक इनपुट एकटा स्ट्रिंग अछि जाहिमे नेस्टेड कोष्ठकक बहु समूह अछि. अहाँक लक्ष्य ई अछि जे ओ समूहकेँ अलग स्ट्रिंगमे अलग करी आ ओकर सूची वापस करी। अलग समूहसभ संतुलित अछि (प्रत्येक खुल्ला कोष्ठक ठीक सँ बंद अछि) आ एक-दोसराक भीतर नेस्टेड नहि अछि इनपुट स्ट्रिंगमे कोनो रिक्त स्थानकेँ अनदेखा करू। उदाहरणः >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) ['() ', '(()) ', '(() ')) ]""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,mai_Deva,python,"

def truncate_number(number: float) -> float:
    """"""सकारात्मक फ्लोटिंग प्वाइंट नम्बर देल गेल अछि, एकरा पूर्णांक भाग (सबसँ पैघ पूर्णांक देल गेल संख्या सँ छोट) आ दशमलव (बाँकी भाग हमेशा 1 सँ छोट) मे विभाजित कएल जा सकैत अछि। संख्याक दशमलव भाग लौटाउ। उदाहरणः >>> truncate_number ((3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,mai_Deva,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""अहाँकेँ बैंक खाता पर जमा आ निकासी परिचालनक सूची देल गेल अछि जे शून्य शेष सँ शुरू होइत अछि। अहाँक काज ई पता लगाना अछि जे कोनो समय खाताक शेष शून्य सँ कम अछि, आ ओहि समय फलनकेँ सही लौटाबए चाही। अन्यथा ई गलत लौटाबए चाही। उदाहरणः >>> below_zero([1, 2, 3]) गलत >>> below_zero([1, 2, -4, 5]) सही """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,mai_Deva,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""इनपुट संख्यासभक देल गेल सूचीक लेल, ई डाटासेटक माध्यमे माध्यमे पूर्ण विचलनक गणना करू। माध्यमे पूर्ण विचलन प्रत्येक तत्व आ केन्द्रबिन्दु (एहि मामलामे माध्यमे) बीच औसत पूर्ण भिन्नता अछि: MAD = औसत । x - x_mean । उदाहरण: >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,mai_Deva,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""इनपुट सूचीक प्रत्येक दू पाछाँक तत्वसभक बीच एकटा संख्या 'डिलिमिटर' घुसाउ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,mai_Deva,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ई फंक्शनक इनपुट एकटा स्ट्रिंग अछि जे नेस्टेड कोष्ठकक लेल बहु समूहक प्रतिनिधित्व करैत अछि, जे स्पेस द्वारा अलग कएल गेल अछि। प्रत्येक समूहक लेल, कोष्ठकक गहिराईक स्तर आउटपुट करैत अछि। उदाहरणक लेल (() (()) क अधिकतम दुई स्तर अछि जबकि ((())) क तीन अछि। >>> parse_nested_parens (('((()) ((())) () (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,mai_Deva,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""एकटा इनपुट स्ट्रिंग सूची केँ मात्र ओहि सबस्ट्रिंगक लेल फिल्टर करू जकर अन्तर्गत देल गेल अछि >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,mai_Deva,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""पूर्णांकसभक सूचीक लेल, एक योग आ सूचीमे सभ पूर्णांकसभक गुणनफलसँ बनल टपल लौटाउ. खाली योग 0 के बराबर होएत आ खाली गुणनफल 1 के बराबर होएत। >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) ।""""""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,mai_Deva,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""पूर्णांकक देल गेल सूची सँ, क्रममे देल गेल क्षण धरि भेटल अधिकतम रोलिंग तत्वक सूची उत्पन्न करू. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,mai_Deva,python,"

def is_palindrome(string: str) -> bool:
    """"""एकटा छोटो पालिन्ड्रोम खोजू जे एकटा देल गेल स्ट्रिंग सँ शुरू होइत अछि। एल्गोरिथ्म विचार सरल अछि:- देल गेल स्ट्रिंगक सबसँ लम्बा पोस्टफिक्स खोजू जे पालिन्ड्रोम अछि। - स्ट्रिंगक अंतमे एकटा स्ट्रिंग उपसर्गक रिवर्स जोड़ू जे पालिन्ड्रोमिक प्रत्यय सँ पहिने अबैत अछि। >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""जाँचू जे देल गेल स्ट्रिंग एकटा पालिन्ड्रोम अछि """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,mai_Deva,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""इनपुट दू टा स्ट्रिंग अछि a आ b जे मात्र 1s आ 0s सँ बनल अछि. एहि इनपुट पर बाइनरी XOR क प्रदर्शन करू आ परिणामकेँ एकटा स्ट्रिंग क रूप मे सेहो लौटाउ. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,mai_Deva,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""स्ट्रिंगसभक सूची सँ, सबसँ लम्बा लौटाउ. एक समान लम्बाइक बहु स्ट्रिंगसभक मामलामे पहिल लौटाउ. इनपुट सूची खाली होए पर कोनो नहि लौटाउ. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,mai_Deva,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""दूटा पूर्णांक a आ b कs सभसँ पैघ आम भाजककेँ लौटाउ >>> सभसँ पैघ_सामान्य_विभाजक ({3, 5) 1 >>> सभसँ पैघ_सामान्य_विभाजक ({25, 15) 5)""""""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,mai_Deva,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""सब उपसर्गसभक सूची लौटाउ जे सबसँ छोट सँ लम्बा इनपुट स्ट्रिंगक >>> all_prefixes (('abc') ['a', 'ab', 'abc'] तक अछि""""""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,mai_Deva,python,"

def string_sequence(n: int) -> str:
    """"""एकटा स्ट्रिंग लौटाउ जकरामे 0 सँ n तकक स्थान-सीमित संख्यासभ समाहित अछि. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,mai_Deva,python,"

def count_distinct_characters(string: str) -> int:
    """"""एकटा स्ट्रिंग देल गेल अछि, पता लगाउ की कतेक अलग-अलग अक्षर (केस सँ परहेज) एहिमे अछि >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,mai_Deva,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""ई फंक्शनमे इनपुट अछि एकटा स्ट्रिंग जे म्यूजिकल नोट्सक प्रतिनिधित्व करैत अछि एकटा विशेष ASCII प्रारूपमे। अहाँक कार्य अछि कि पूर्णांक स्ट्रिंग सूचीक पार्स करब जे बहुत बीट्सक अनुरूप अछि। एतए एकटा लीजेन्ड अछि: 'o' नोट, अन्तिम चारि बीट्स 'o, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k, k,""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,mai_Deva,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""मूल स्ट्रिंग मे कोनो उप-स्ट्रिंग कते बेर भेटैत अछि. ओभरलैपिंग केस क गणना करू. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,mai_Deva,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""इनपुट 'शून्य' सँ 'नौ' धरि संख्याक एकटा स्थान-सीमित स्ट्रिंग अछि। वैध विकल्प 'शून्य', 'एक', 'दू', 'तीन', 'चार', 'पाँच', 'छह', 'सात', 'आठ' आ 'नौ' अछि। संख्याक संग स्ट्रिंग छोट सँ पैघ धरि क्रमबद्ध कऽ लौटाउ >>> sort_numbers (('तीन एक पाँच') 'एक तीन पाँच' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,mai_Deva,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""संख्याक सूची सँ (कम सँ कम दू टा) दू टा चुनू आ लौटाउ जे एक-दोसराक निकट अछि आ ओ क्रम सँ लौटाउ (छोटका संख्या, पैघ संख्या) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,mai_Deva,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""संख्यासभक सूची देल गेल अछि (कम सँ कम दू तत्वसभक), ओ सूचीमे एकटा रैखिक परिवर्तन लागू करू, जे सबसँ छोट संख्या 0 होएत आ सबसँ पैग 1 होएत >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,mai_Deva,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""फिल्टर देल गेल सूची कोनो पाइथन मूल्यसभक मात्र पूर्णांकसभक लेल >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,mai_Deva,python,"

def strlen(string: str) -> int:
    """"""दिइएको स्ट्रिंगको लम्बाई फिर्ता गर्नुहोस् >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,mai_Deva,python,"

def largest_divisor(n: int) -> int:
    """"""कोनो देल गेल संख्या n लेल, सभ सँ पैघ संख्या खोजू जे n सँ छोट अछि, आ जे n सँ समान रूप सँ विभाजित अछि >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,mai_Deva,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""ई सभ पन्ना सम्बन्धित अछि आकृतिःInput number:Input number of factors >>> factorization (आकृतिःआकृतिःआकृतिःfactorize (आकृतिःfactorize)) [२, २, २] >>> factorization (आकृतिःfactorize (आकृतिःfactorize)) [२, २, २] >>> factorization (आकृतिःfactorize (factorize)) [२, ५] >>> factorization (factorize (factorize)) [२, ५, ७] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,mai_Deva,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""पूर्णांक सूची सँ, ओ सब तत्व हटाउ जे एक सँ बेसी बेर भेटैत अछि. तत्वसभक क्रमकेँ समान राखू जहिना इनपुटमे अछि. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,mai_Deva,python,"

def flip_case(string: str) -> str:
    """"""कोनो देल गेल स्ट्रिंग लेल, छोट अक्षरकेँ अपरकेस आओर अपरकेसकेँ माइनरकेस मे फ्लिप करू. >>> flip_case ((('Hello') 'HELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,mai_Deva,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""एकटा स्ट्रिंग मे स्ट्रिंग क सूची क संयोजन >>> संयोजन (([]) ' ' >>> संयोजन ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,mai_Deva,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""एकटा इनपुट स्ट्रिंग सूची केँ मात्र ओहि सभक लेल फिल्टर करू जे एकटा देल गेल उपसर्ग सँ शुरू होइत अछि. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,mai_Deva,python,"

def get_positive(l: list):
    """"""सूचीमे केवल धनात्मक संख्याकेँ लौटाउ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,mai_Deva,python,"

def is_prime(n):
    """"""यदि कोनो देल गेल संख्या अभाज्य अछि तँ सही लौटाउ, आ अन्यथा गलत. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,mai_Deva,python,"import math


def poly(xs: list, x: float):
    """"""xs बहुपद के गुणांक अछि. find_zero find x एहेन जे poly ((x) = 0. find_zero मात्र शून्य बिंदु वापस करैत अछि, भलेही बहुत रास होइक। एकर अतिरिक्त, find_zero मात्र सूची xs लेता अछि जकर गुणांकक संख्या सेहो अछि आ सबसँ पैघ गैर-शून्य गुणांकक कारण ई समाधानक गारंटी दैत अछि। >>> round ((find_zero[(1, 2]), 2) # f ((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,mai_Deva,python,"

def sort_third(l: list):
    """"""ई फंक्शन एकटा सूची लैत अछि आ एकटा सूची ल' वापस करैत अछि जे l' ऐ तरहक अछि जे l ओ सूचकांकमे जे तीन सँ भागल नहि जा सकैत अछि, जखन कि एकर मूल्य ओ सूचकांकमे जे तीन सँ भागल जा सकैत अछि, ओ बराबर अछि lक संबंधित सूचकांकक मूल्यसँ, मुदा क्रमबद्ध अछि। >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,mai_Deva,python,"

def unique(l: list):
    """"""एकटा सूचीमे क्रमबद्ध अनन्य तत्वकेँ लौटाउ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,mai_Deva,python,"

def max_element(l: list):
    """"""सूची मे अधिकतम तत्व लौटाउ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,mai_Deva,python,"

def fizz_buzz(n: int):
    """"""ई संख्याक संख्याकेँ लौटाउ जे 7 सँ छोट पूर्णांकमे भेटैत अछि जे 11 वा 13 सँ भागल जा सकैत अछि।""""""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,mai_Deva,python,"

def sort_even(l: list):
    """"""ई फंक्शन एकटा सूची लैत अछि आ एकटा सूची ल' वापस करैत अछि जे l' एक समान अछि, जबकि एकर मान l क सम संख्याक संग बराबर अछि, मुदा क्रमबद्ध अछि। >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,mai_Deva,python,"

def encode_cyclic(s: str):
    """"""इनपुट स्ट्रिंग क रूप मे लेलक अछि जकरा encode_cyclic फलन क साथ एन्कोड कएल गेल अछि. डिकोड कएल गेल स्ट्रिंग लौटाबैत अछि.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""तीन अक्षरक चक्रवर्ती समूह द्वारा एन्कोड कएल स्ट्रिंग लौटाबैत अछि.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,mai_Deva,python,"

def prime_fib(n: int):
    """"""prime_fib n-अम संख्या केँ लौटाबैत अछि जे एक फिबोनैचि संख्या अछि आ ई सेहो प्राइम अछि. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,mai_Deva,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero पूर्णांकसभक सूचीकेँ इनपुट रूपमे लेलक अछि। ई सत्य लौटाएत अछि जँ सूचीमे तीनटा भिन्न तत्व अछि जे शून्य सँ योग करैत अछि, आ अन्यथा गलत। >>> triple_sum_to_zero (([1, 3, 5, 0]) गलत >>> triple_sum_to_zero (([1, 3, -2, 1]) सही >>> triple_sum_to_zero (([1, 2, 3, 7]) गलत >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) सही >>> triple_sum_to_zero ([1, 3, -2, 1]) गलत """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,mai_Deva,python,"

def car_race_collision(n: int):
    """"""कल्पना करू जे एकटा सड़क अछि जे एकदम सीधा अछि आ असीम लम्बा अछि. n कार बाम सँ दाहिने जा रहल अछि; एकहि समयमे, n कारक एक अलग सेट दाहिने सँ बाम जा रहल अछि। कारक दू सेट एक-दोसर सँ बहुत दूरसँ शुरू होइत अछि। सभ कार एक समान गतिसँ चलैत अछि। दू कारक टक्कर होइत अछि जखन बाम सँ दाहिने जा रहल कार दाहिने सँ बाम जा रहल कार सँ टकराइत अछि। मुदा, कार असीम रूपसँ मजबूत आ मजबूत अछि; एकर परिणाम ई भेल जे ओ अपन प्रक्षेपवक्रमे चलैत रहैत अछि जेना ओ टक्कर नहि केने हो। ई फलन एहन टक्करक संख्याकेँ आउटपुट करैत अछि।""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,mai_Deva,python,"

def incr_list(l: list):
    """"""[2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] द्वारा वृद्धि भेल तत्वसभक संग सूची लौटाउ""""""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,mai_Deva,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero पूर्णांकसभक सूचीकेँ इनपुट रूपमे लेलक अछि। ई सत्य लौटाएत अछि जँ सूचीमे दूटा अलग-अलग तत्व अछि जे शून्यमे योग करैत अछि, आ अन्यथा गलत। >>> pairs_sum_to_zero (([1, 3, 5, 0]) गलत >>> pairs_sum_to_zero (([1, 3, -2, 1]) गलत >>> pairs_sum_to_zero (([1, 2, 3, 7]) गलत >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) सही >>> pairs_sum_to_zero (([1]) गलत """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,mai_Deva,python,"

def change_base(x: int, base: int):
    """"""आगत संख्या x क संख्यात्मक आधार क आधार मे बदलब. रूपांतरण क बाद स्ट्रिंग प्रतिनिधित्व लौटाब. आधार संख्या 10 सँ कम अछि. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,mai_Deva,python,"

def triangle_area(a, h):
    """"""त्रिभुज क लेल एक पक्ष क लम्बाई आ उच्च वापसी क्षेत्र देल गेल अछि। >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,mai_Deva,python,"

def fib4(n: int):
    """"""Fib4 संख्या क्रम एक क्रम अछि जे फिबोनैकी अनुक्रम सँ समान अछि जे निम्न प्रकार सँ परिभाषित अछि: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). कृपया एक फलन लिखू जे fib4 संख्या क्रम क n-अम तत्व क कुशलता सँ गणना करए। रिकर्सन क उपयोग नहि करू। >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,mai_Deva,python,"

def median(l: list):
    """"""सूची मे तत्वसभक मध्यफल लौटाउ l. >>> मध्यफल (([3, 1, 2, 4, 5]) 3 >>> मध्यफल (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,mai_Deva,python,"

def is_palindrome(text: str):
    """"""जाँच करैत अछि जे देल गेल स्ट्रिंग एकटा पालिन्ड्रोम अछि >>> is_palindrome (('') सही अछि >>> is_palindrome (('aba') सही अछि >>> is_palindrome (('aaaaa') सही अछि >>> is_palindrome (('zbcd') गलत अछि """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,mai_Deva,python,"

def modp(n: int, p: int):
    """"""वापसी 2^n मोडुलो p (संख्याक कें बारे मे जागरूक होय). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,mai_Deva,python,"

def encode_shift(s: str):
    """"""एन्कोड_शिफ्ट फंक्शन सँ इनपुट स्ट्रिंग क रूप मे लेल जाइत अछि. डिकोड कएल स्ट्रिंग लौटाबैत अछि. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""प्रत्येक अक्षरकेँ 5 सँ स्थानांतरित कऽ कूटबद्ध स्ट्रिंग लौटाबैत अछि.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,mai_Deva,python,"

def remove_vowels(text):
    """"""remove_vowels एकटा फंक्शन अछि जे स्ट्रिंग लैत अछि आ बिना स्वरक स्ट्रिंग लौटाबैत अछि. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,mai_Deva,python,"

def below_threshold(l: list, t: int):
    """"""यदि सूचीमे सभ संख्या सीमा सँ नीचा अछि तँ सही लौटाउ. >>> सीमा सँ नीचा (([1, 2, 4, 10], 100) सही >>> सीमा सँ नीचा (([1, 20, 4, 10], 5) गलत """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,mai_Deva,python,"

def add(x: int, y: int):
    """"""दू टा संख्या x आ y जोड़ू >>> जोड़ू (२,३) ५ >>> जोड़ू (५,७) १२ """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,mai_Deva,python,"

def same_chars(s0: str, s1: str):
    """"""जाँचू जे दू शब्दमे समान अक्षर अछि की नहि. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') सही >>> same_chars (('abcd', 'dddddddabc') सही >>> same_chars (('dddddddabc', 'abcd') सही >>> same_chars (('eabcd', 'dddddddabc') गलत >>> same_chars ((('abcd', 'dddddddabc') गलत >>> same_chars ((('abcdzzzz', 'dddzzzzzzdddabc') गलत """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,mai_Deva,python,"

def fib(n: int):
    """"""फिबोनाचीक n-अम संख्याकेँ लौटाउ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,mai_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets ""<"" आ "">"" क स्ट्रिंग अछि. जँ प्रत्येक खुलने बला ब्रैकेटमे एक संगत समापन ब्रैकेट अछि तँ सही लौटाउ. >>> correct_bracketing (((""<"") False >>> correct_bracketing ((""<>"") True >>> correct_bracketing ((""<><>>"") True >>> correct_bracketing ((""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,mai_Deva,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonic (([1, 2, 4, 20]) True >>> monotonic (([1, 20, 4, 10]) False >>> monotonic (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,mai_Deva,python,"

def common(l1: list, l2: list):
    """"""दूटा सूचीक लेल क्रमबद्ध अद्वितीय सामान्य तत्वकेँ लौटाउ. >>> common (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> common (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,mai_Deva,python,"

def largest_prime_factor(n: int):
    """"""n कs सबस बड़ प्राइम फॅक्टर लौटाउ. मानू n > 1 आ प्राइम नहि अछि. >>> largest_prime_factor ((१३१९५) २९ >>> largest_prime_factor ((२०४८) २ """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,mai_Deva,python,"

def sum_to_n(n: int):
    """"""sum_to_n एकटा फंक्शन अछि जे 1 सँ n धरि संख्यासभक योग करैत अछि। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,mai_Deva,python,"

def correct_bracketing(brackets: str):
    """"""brackets एक स्ट्रिंग अछि ""("" आ "")"". return True यदि प्रत्येक खुलनेवाला ब्रैकेटमे एक संगत समापन ब्रैकेट अछि. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() "") True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,mai_Deva,python,"

def derivative(xs: list):
    """"""xs बहुपद के गुणांक के प्रतिनिधित्व करैत अछि. xs[0] + xs[1] * x + xs[2] * x^2 + .... एहि बहुपद के व्युत्पन्न कs ओही रूप मे लौटाउ. >>> व्युत्पन्न (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> व्युत्पन्न ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,mai_Deva,python,"

def fibfib(n: int):
    """"""FibFib संख्या क्रम एक क्रम हो जो Fibbonacci sequence के समान है जो निम्नानुसार परिभाषित किया गया हैः fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3। कृपया एक समारोह लिखें जो fibfib संख्या क्रम के n-वें तत्व की कुशलतापूर्वक गणना करे। >>> fibfib(1) 0 >>> fib fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,mai_Deva,python,"
FIX = """"""एकटा फंक्शन vowels_count लिखू जे एकटा शब्दक प्रतिनिधित्व करैत एकटा स्ट्रिंग केँ इनपुट के रूप मे लेता अछि आ स्ट्रिंग मे स्वरक संख्या केँ लौटाबैत अछि। एहि मामला मे स्वर 'a', 'e', 'i', 'o', 'u' अछि। एहि ठाम, 'y' सेहो एकटा स्वर अछि, मुदा जखन ई देल गेल शब्दक अंत मे अछि तखन। उदाहरण: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""अधिक परीक्षण मामला जोड़ू।""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,mai_Deva,python,"
def circular_shift(x, shift):
    """"""परिमेय सँ पूर्णांक x क अंक बदलि, सँ अंक केँ दाहिना सँ बदलि परिणाम केँ स्ट्रिंग क रूप मे लौटाउ. जँ shift > अंक क संख्या, तँ सँ अंक केँ उल्टा लौटाउ. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,mai_Deva,python,"
def digitSum(s):
    """"""कार्य एकटा फंक्शन लिखू जे एकटा स्ट्रिंग केँ इनपुट के रूप मे लेताह आ केवल उपरका अक्षरक योग केँ वापस करैत अछि. उदाहरण: digitSum ((("""") => 0 digitSum (((""abAB"") => 131 digitSum (((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,mai_Deva,python,"
def fruit_distribution(s,n):
    """"""एहि कार्यमे, अहाँकेँ एकटा स्ट्रिंग देल जाएत जे एप्पल आ नारंगीक संख्याक प्रतिनिधित्व करैत अछि जे फलसभक टोकरीमे वितरित कएल जाएत अछि ई टोकरीमे एप्पल, नारंगी आ आमक फलसभ अछि। स्ट्रिंग देल जाएत जे आमक आ सेबक कुल संख्याक प्रतिनिधित्व करैत अछि आ एकटा पूर्णांक जे टोकरीमे फलसभक कुल संख्याक प्रतिनिधित्व करैत अछि टोकरीमे आमक फलसभक संख्या परताएत अछि। उदाहरण लेल: fruit_distribution""5(एप्पल आ 6 नारंगी"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 apples आ 1 oranges"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 apples आ 3 oranges"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 apples आ 1 oranges"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,mai_Deva,python,"
def pluck(arr):
    """"""""एगो एरे देल गेल अछि जे एकटा गाछक शाखाक प्रतिनिधित्व करैत अछि जकर गैर-ऋणात्मक पूर्णांक नोडसभ अछि अहाँक काज एकटा नोडकेँ चुनब आ ओकरा वापस करब अछि। चुनल गेल नोड सबसँ छोट सम मूल्य वाला नोड होएत। जँ सबसँ छोट सम मूल्य वाला बहुतो नोड भेटैत अछि तँ सबसँ छोट सूचकांक वाला नोड वापस करब। चुनल गेल नोडकेँ सूचीमे लौटाओल जाएत, [smallest_value, its index], जँ कोनो सम मूल्य नहि अछि वा देल गेल एरे खाली अछि तँ [] वापस करब। उदाहरणः १ः इनपुटः [४,२,३] आउटपुटः [२,१] स्पष्टीकरणः २ क सबसँ छोट सम मूल्य अछि, आ २ क सबसँ छोट सूचकांक अछि। उदाहरणः २ः इनपुटः [१,२,३] आउटपुटः [२,१] स्पष्टीकरणः २ क सबसँ छोट मान अछि, आ २ क सबसँ छोट सम सूचकांक अछि। उदाहरणः ३ः इनपुटः [] आउटपुटः [४] इनपुटः [५,३,४] इनपुटः [०,४,०,२] आउटपुटः [१,०] आउटपुटः ० नोडः सबसँ छोट सूचकांक मूल्य वाला नोड लौटा देब, मुदा दूटा सूचकांक मूल्य अछि। उदाहरणः पहिल नोडमे शून्य अछि, मुदा एकर लम्बाई शून्य अछि, तेँ हमसभसँ छोट नोड चुनबैक छी, जे सबसँ छोट सूचकांक अछि, मुदा एकर सूचकांक शून्य अछि। उदाहरणः १. * पहिल नोडमे शून्य अछि, मुदा एकर लम्बाई शून्य अछि, मुदा दू शून्य अछि, तँ दू शून्य अछि।""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,mai_Deva,python,"
def search(lst):
    '''अहाँकेँ सकारात्मक पूर्णांकसभक एकटा गैर-खाली सूची देल गेल अछि। सबसँ पैग पूर्णांक लौटाउ जे शून्य सँ पैघ अछि, आ एकर आवृत्ति स्वयं पूर्णांकक मूल्य सँ पैघ वा बराबर अछि। कोनो पूर्णांकक आवृत्ति सूचीमे एकर देखाबेक संख्या छी। जँ एहन कोनो मूल्य नहि अछि, तँ लौटाउ -१। उदाहरण: खोज ([4, 1, 2, 2, 3, 1]) == 2 खोज ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 खोज ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,mai_Deva,python,"
def strange_sort_list(lst):
    '''पूर्णांकसभक सूची देल गेल, सूची अजीब क्रममे लौटाउ. अजीब क्रमबद्धता, ओ समय अछि जखन अहाँ न्यूनतम मान सँ शुरू करैत छी, तखन शेष पूर्णांकसभक अधिकतम, तखन न्यूनतम आ तहिना। उदाहरण: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,mai_Deva,python,"
def triangle_area(a, b, c):
    '''त्रिकोणक तीन भुजाक लम्बाई देल गेल अछि. यदि तीन भुजा वैध त्रिकोण बनबैत अछि तँ त्रिकोणक क्षेत्रफल केँ 2 दशमलव स्थान पर गोल कऽ लौटाउ. अन्यथा -1 लौटाउ. जखन कोनो दू भुजाक योग तृतीय भुजा सँ बेसी अछि तँ तीन भुजा वैध त्रिकोण बनबैत अछि। उदाहरण: त्रिकोण_क्षेत्र_ (३, ४, ५) == 6.00 त्रिकोण_क्षेत्र_ (१, २, १०) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,mai_Deva,python,"
def will_it_fly(q,w):
    '''एकटा फलन लिखू जे सही वापस करैत अछि जँ वस्तु q उड़त, आ गलत अन्यथा। वस्तु q उड़त जँ ई संतुलित अछि (ई एकटा पालिन्ड्रोमिक सूची अछि) आ एकर तत्वसभक योग अधिकतम सम्भावित वजन सँ कम वा बराबर अछि w. उदाहरण: will_it_fly (([1, 2], 5) â -> False # 1+2 अधिकतम सम्भावित वजन सँ कम अछि, मुदा ई असंतुलित अछि। will_it_fly (([3, 2, 3], 1) â -> False # ई संतुलित अछि, मुदा 3+2+3 अधिकतम सम्भावित वजन सँ बेसी अछि। will_it_fly (([3, 2, 3], 9) â -> True # 3+23 अधिकतम सम्भावित वजन सँ कम अछि, आ ई संतुलित अछि। will_it_fly ((([3], 5) â -> True # 3 अधिकतम सम्भावित वजन सँ कम अछि, आ ई संतुलित अछि।'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,mai_Deva,python,"
def smallest_change(arr):
    """"""एक एरेमे पूर्णांकसभक न्यूनतम संख्या ज्ञात करू जे एरेकेँ पालिन्ड्रोमिक बनाबए लेल परिवर्तन कएल जाएत अछि। पालिन्ड्रोमिक एरे एकटा एरे छी जे समान रूपसँ पछाडि आ आगाँ पढल जाइत अछि। एक परिवर्तनमे, अहाँ एक एरेमे कोनो दोसर एरेमे परिवर्तन कऽ सकैत छी। उदाहरणक लेलः smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,mai_Deva,python,"
def total_match(lst1, lst2):
    '''एकटा फंक्शन लिखू जे दू टा स्ट्रिंगक सूची स्वीकार करैत अछि आ ओहि सूची केँ वापस करैत अछि जकर सूचीक सभ स्ट्रिंगमे क्यारोक कुल संख्या दोसर सूची सँ कम अछि। जँ दुनू सूचीमे क्यारोक समान संख्या अछि, तँ पहिल सूची वापस करैत अछि। उदाहरण कुल_मैच (([], []) â -> [] कुल_मैच ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] कुल_मैच ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] कुल_मैच ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] कुल_मैच ((['4', ['1', '2', '3', '4', '5', '4]) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,mai_Deva,python,"
def is_multiply_prime(a):
    """"""एकटा फलन लिखू जे जँ देल गेल संख्या 3 अभाज्य संख्याक गुणनफल अछि तँ सही आ अन्यथा गलत केँ लौटाबैत अछि। ई जनैत जे (a) 100 सँ कम अछि। उदाहरण: is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,mai_Deva,python,"
def is_simple_power(x, n):
    """"""अहाँक काज ई अछि जे एकटा फलन लिखू जे जँ कोनो संख्या x एकटा साधारण शक्ति n अछि तँ सही आ दोसर मामलामे गलत वापस करैत अछि। x एकटा साधारण शक्ति n अछि जँ n**int=x उदाहरण लेलः is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,mai_Deva,python,"
def iscube(a):
    '''एकटा फलन लिखू जे एकटा पूर्णांक a लैत अछि आ जँ ई पूर्णांक कोनो पूर्णांक सँ घन अछि तँ सही लौटाबैत अछि। नोटः अहाँ मान सकैत छी जे इनपुट हमेशा मान्य अछि। उदाहरण: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,mai_Deva,python,"
def hex_key(num):
    """"""अहाँकेँ एकटा फंक्शन लिखबाक लेल कहल गेल अछि जे हेक्साडेसिमल संख्याकेँ स्ट्रिंगक रूपमे प्राप्त करैत अछि आ ओ हेक्साडेसिमल अंकसभक संख्या गिनैत अछि जे प्राइम अछि (प्राइम नम्बर, वा प्राइम, 1 सँ पैघ प्राकृतिक संख्या छी जे दू छोट प्राकृतिक संख्याक गुणनफल नहि अछि) । हेक्साडेसिमल अंकसभ ०, १, २, ३, ४, ५, ६, ७, ८, ९, ए, बी, सी, डी, ई, एफ छी । प्राइम संख्यासभ २, ३, ५, ७, ११, १३, १७,... अछि, तेँ अहाँकेँ निम्नलिखित अंकसभक संख्या निर्धारित करए पड़त: २, ३, ५, ७, बी (=डेसिमल ११), डी (=डेसिमल १३) । नोट: अहाँ ई मान सकैत छी जे इनपुट हमेशा सही वा खाली स्ट्रिंग अछि, आ प्रतीक ए, बी, सी, डी, ई, एफ, हमेशा अपरकेस होइत अछि । उदाहरण: ""एबी"" लेल आउटपुट १ होएबाक चाही ""एबी"" लेल आउटपुट १ होएबाक चाही ""एबी"" लेल आउटपुट २ होएबाक चाही ""एबी"" लेल एबी = एबी३३, ""ए"" लेल ४.एबीसी"" लेल ""एबी"" होएबाक चाही ""एबी"" लेल आउटपुट २.एबी.ए.ए.ए.ए.ए.६.२०१३ होएबाक चाही ""ए.६.६.६.६.४.६.६.२०२०२०""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,mai_Deva,python,"
def decimal_to_binary(decimal):
    """"""अहाँकेँ दशमलव रूपमे एकटा संख्या देल जाएत आ अहाँकेँ एकर द्विआधारी प्रारूपमे परिवर्तित करैक कार्य अछि। फलनकेँ एकटा स्ट्रिंग लौटाबए पड़त, जाहिमे प्रत्येक अक्षर एकटा द्विआधारी संख्याक प्रतिनिधित्व करैत अछि। स्ट्रिंगक प्रत्येक अक्षर '0' वा '1' होएत। स्ट्रिंगक आरम्भ आ अन्तमे अतिरिक्त 'db' अक्षरक जोडी होएत। अतिरिक्त वर्ण प्रारूपमे सहायताक लेल होएत अछि। उदाहरण: decimal_to_binary ((15) # लौटाबैत अछि ""db1111db"" decimal_to_binary32) # लौटाबैत अछि ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,mai_Deva,python,"
def is_happy(s):
    """"""अहाँकेँ एकटा स्ट्रिंग देल गेल अछि. अहाँक काज अछि जाँच करब जे स्ट्रिंग खुश अछि वा नहि। एकटा स्ट्रिंग खुश अछि जँ एकर लम्बाई कम सँ कम ३ अछि आ प्रत्येक ३ लगातार अक्षर अलग अछि उदाहरण लेलः is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False is_happy (e) => False is_happy (f) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,mai_Deva,python,"
def numerical_letter_grade(grades):
    """"""ई सेमेस्टरक अन्तिम सप्ताह अछि आ शिक्षककेँ छात्रसभक ग्रेड देबए पड़त। शिक्षक अपन ग्रेडिंगक लेल अपन एल्गोरिथ्म बना रहल अछि। एकटा समस्या अछि, ओ अपन कोड गमा चुकल अछि जे ओ ग्रेडिंगक लेल प्रयोग करैत छल। ओ अहाँकेँ किछु छात्रसभक लेल जीपीएक सूची देने अछि आ अहाँकेँ एकटा फंक्शन लिखबाक अछि जे निम्नलिखित तालिकाक उपयोग कऽ अक्षरक ग्रेडसभक सूची आउटपुट कऽ सकैत अछि: जीपीए  अक्षर ग्रेड 4.0 ए+ > 3.7 ए > 3.3 ए- > 3.0 बी+ > 2.7 बी > 2.3 बी- > 2.0 बी+ > 1.7 सी > 1.3 सी- > 1.0 डी+ > 0.7 डी > 0.0 डी- 0.0 ई उदाहरण: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['ए+', 'बी', 'सी-', 'सी', 'ए'] -'""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,mai_Deva,python,"
def prime_length(string):
    """"""एकटा फलन लिखू जे एकटा स्ट्रिंग लएत आ जँ स्ट्रिंगक लम्बाई प्राइम नम्बर होए तँ सही आ अन्यथा गलत लौटाओत उदाहरण prime_length{'हेलो') == True prime_length{'abcdcba') == True prime_length{'किटन्स') == True prime_length{'ऑरेंज') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,mai_Deva,python,"
def starts_one_ends(n):
    """"""सकारात्मक पूर्णांक n देल गेल अछि, तँ एहिमे n-अंकक सकारात्मक पूर्णांकक संख्याकेँ लौटाउ जे 1 सँ शुरू वा समाप्त होइत अछि।""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,mai_Deva,python,"
def solve(N):
    """"""उदाहरण: N = 1000 लेल, अंकक योग 1 होएत आ आउटपुट ""1"" होएत। N = 150 लेल, अंकक योग 6 होएत आ आउटपुट ""110"" होएत। N = 147 लेल, अंकक योग 12 होएत आ आउटपुट ""1100"" होएत। चरः @N पूर्णांक बाधाः 0 â‰¤ N â‰¤ 10000. आउटपुटः द्विआधारी संख्याक एकटा स्ट्रिंग """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,mai_Deva,python,"
def add(lst):
    """"""पूर्णांकक एकटा गैर-खाली सूची देल गेल अछि lst. जोड़ू सम तत्व जे विषम सूचकांक पर अछि.. उदाहरणः add (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,mai_Deva,python,"
def anti_shuffle(s):
    """"""एकटा फंक्शन लिखू जे एकटा स्ट्रिंग लैत अछि आ ओकर एक क्रमबद्ध संस्करण वापस करैत अछि. स्ट्रिंगक क्रमबद्ध संस्करण, एकटा स्ट्रिंग अछि जतए सभ शब्द (स्पेस द्वारा अलग) एकटा नव शब्द द्वारा प्रतिस्थापित कएल जाइत अछि जतए सभ अक्षर ASCII मानक आधार पर आरोही क्रममे व्यवस्थित कएल गेल अछि। नोट: अहाँकेँ वाक्यमे शब्द आ रिक्त स्थानक क्रम राखब चाही। उदाहरणक लेल: anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') 'ehllo' anti_shuffle (('Hello World!!!') 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,mai_Deva,python,"
def get_row(lst, x):
    """"""अहाँकेँ एक २ आयामी डाटा देल गेल अछि, जेना कि नेस्टेड सूची, जे मैट्रिक्सक समान अछि, मुदा, मैट्रिक्सक विपरीत, प्रत्येक पंक्तिमे विभिन्न संख्यामे स्तम्भसभ रहल होएत अछि। lst, आ पूर्णांक x देल गेल अछि, सूचीमे पूर्णांक x खोजू, आ ट्यूपलसभक सूची लौटाउ, [(x1, y1), (x2, y2) ...] जकर प्रत्येक ट्यूपल एक निर्देशांक अछि - (पंक्ति, स्तम्भसभ), जे ० सँ शुरू होइत अछि। निर्देशांकसभकेँ क्रमबद्ध करू आरम्भमे पंक्तिसभक क्रममे आरोही क्रममे। एकर अलावा, पंक्तिसभक निर्देशांकसभक क्रमबद्ध करू स्तम्भसभक क्रममे अवरोही क्रममे। उदाहरणः get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0,0, 0], (1, 4), 0), (2, 5 (2, 0), get_(1, 1) [] == [[[[row]], 1, 2, 3, 2]] [2, 3]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,mai_Deva,python,"
def sort_array(array):
    """"""अकार्थिक पूर्णांकक एकटा सरणी देल गेल अछि, क्रमबद्धिकय बाद देल गेल सरणीक एक प्रति फेर सँ पठाउ, अहाँ देल गेल सरणीकेँ आरोही क्रममे क्रमबद्ध करब जँ योग (प्रथम अनुक्रमणिका मूल्य, अन्तिम अनुक्रमणिका मूल्य) विषम अछि, वा जँ योग (प्रथम अनुक्रमणिका मूल्य, अन्तिम अनुक्रमणिका मूल्य) सम अछि तँ ओकरा अवरोही क्रममे क्रमबद्ध करू। नोटः * देल गेल सरणीकेँ नहि बदलू। उदाहरणः * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,mai_Deva,python,"
def encrypt(s):
    """"""एकटा फंक्शन एन्क्रिप्ट बनाउ जे एकटा स्ट्रिंग केँ तर्कक रूपमे लैत अछि आ एकटा एन्क्रिप्ट कएल स्ट्रिंग केँ वापस करैत अछि आ वर्णमाला घुमाओल जाइत अछि। वर्णमाला केँ एहि तरह सँ घुमाओल जाएत जे अक्षर दू सँ गुणा कए दू स्थान पर स्थानांतरित भ' जाए। उदाहरणक लेल: encrypt('hi') 'lm' encrypt('asdfghjkl') 'ewhjklnop' encrypt('gf') 'kj' encrypt('et') 'ix' लौटाबैत अछि।""""""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,mai_Deva,python,"
def next_smallest(lst):
    """"""अहाँकेँ पूर्णांकसभक सूची देल गेल अछि। एकटा फंक्शन next_smallest लिखू जे सूचीक दोसर छोट तत्वकेँ लौटाएत अछि। जँ एहन कोनो तत्व नहि अछि तँ कोनो नहि लौटाउ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == कोनो नहि next_smallest (([1, 1]) == कोनो नहि """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,mai_Deva,python,"
def is_bored(S):
    """"""अहाँकेँ शब्दक एकटा स्ट्रिंग देल जाएत, आ अहाँक काज अछि बोरडमसभक संख्या गनब। बोरडम एकटा वाक्य अछि जे ""I"" शब्दसँ शुरू होइत अछि। वाक्यसभ '.', '?' वा '!' सँ परिमित अछि। उदाहरणक लेल: >>> is_bored ((""हैलो वर्ल्ड"") 0 >>> is_bored ((""आकाश नीला अछि। सूर्य चमकैत अछि। हमरा ई मौसम नीक लगैत अछि"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,mai_Deva,python,"
def any_int(x, y, z):
    '''कोनो फलन बनाउ जे ३ टा संख्या लएत। जँ एकटा संख्या दोसर दू टा संख्याक योग सँ बराबर अछि तँ सही लौटाउ, आ सभ संख्या पूर्णांक अछि। कोनो अन्य मामलामे गलत लौटाउ। उदाहरण कोनो_इंक (5, 2, 7) â -> सही कोनो_इंक (3, 2, 2) â -> गलत कोनो_इंक (3, -2, 1) â -> सही कोनो_इंक (3.6, -2.2, 2) â -> गलत '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,mai_Deva,python,"
def encode(message):
    """"""एकटा फंक्शन लिखू जे एकटा संदेश लैत अछि, आ एहन रूपमे एन्कोड करैत अछि जे ई सभ अक्षरक केस अदला-बदली करैत अछि, संदेशमे सभ स्वरकेँ ओहि अक्षरसँ बदलैत अछि जे अंग्रेजी वर्णमालामे ओहि स्वरसँ २ स्थान आगाँ देखाइ दैत अछि। केवल अक्षरकेँ मानू। उदाहरण: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,mai_Deva,python,"

def skjkasdkd(lst):
    """"""अहाँकेँ पूर्णांकसभक सूची देल गेल अछि। अहाँकेँ सबसँ पैग प्राइम मान खोजबाक अछि आ ओकर अंकसभक योगक प्रतिफल देबए पड़त। उदाहरण: lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] लेल आउटपुट १० होएत lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] लेल आउटपुट २५ होएत lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] लेल आउटपुट १३ होएत lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] लेल आउटपुट ११ होएत lst = [0,81,12,3,21,1] लेल आउटपुट ३ होएत lst = [0,1,8,2,1,7] लेल आउटपुट ७ होएत """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,mai_Deva,python,"
def check_dict_case(dict):
    """"""कोनो शब्दकोश देल गेल, जँ सभ कुंजी छोट अक्षरमे स्ट्रिंग अछि वा सभ कुंजी पैघ अक्षरमे स्ट्रिंग अछि तँ सही लौटाउ, अन्यथा गलत लौटाउ. फलनकेँ गलत लौटाब चाही जँ देल गेल शब्दकोश खाली अछि। उदाहरण: check_dict_case{""a"":""apple"", ""b"":""banana""}) सही लौटाब चाही. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) गलत लौटाब चाही. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) गलत लौटाब चाही. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) गलत लौटाब चाही. check_dict_case{""NC"":""STATE"", ""Z"":""IP""45"") सही लौटाब चाही।""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,mai_Deva,python,"
def count_up_to(n):
    """"""एकटा फंक्शन लागू करू जे एक गैर-ऋणात्मक पूर्णांक लैत अछि आ पहिल n पूर्णांकक एकटा सरणी लैत अछि जे प्राइम नम्बर अछि आ n सँ छोट अछि। उदाहरण लेलः count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,mai_Deva,python,"
def multiply(a, b):
    """"""ई फलन क पूर्ण करी जे दू पूर्णांक लैत अछि आ ओकर इकाई अंक क गुणनफल लैत अछि. मानू जे इनपुट हमेशा मान्य अछि. उदाहरण: गुणा करी ((148, 412) वापस लौटाउ 16. गुणा करी ((19, 28) वापस लौटाउ 72. गुणा करी ((2020, 1851) वापस लौटाउ 0. गुणा करी ((14,-15) वापस लौटाउ 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,mai_Deva,python,"
def count_upper(s):
    """"""उदाहरण: count_upper{'aBCdEf'} 1 count_upper{'abcdefg'} 0 count_upper{'dBBE'} 0 लौटाता है।""""""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,mai_Deva,python,"
def closest_integer(value):
    '''एकटा फंक्शन बनाउ जे एकटा मान (स्ट्रिंग) लेल जाए जे एकटा संख्याक प्रतिनिधित्व करैत अछि आ एकरा निकटतम पूर्णांक केँ लौटाबैत अछि। जँ संख्या दू पूर्णांक सँ समान दूरी पर अछि तँ एकरा शून्य सँ दूर घुमाउ। उदाहरण >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 नोट: शून्य सँ दूर घुमाउक अर्थ ई अछि जे जँ देल गेल संख्या दू पूर्णांक सँ समान दूरी पर अछि, तँ अहाँकेँ जे लौटाबैक अछि ओ ओ अछि जे शून्य सँ दूर अछि। उदाहरणक लेल closest_integer "" ((14.5"") केँ 15 आ closest_integer "" ((-14.5"") केँ -15. लौटाबैक चाही। '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,mai_Deva,python,"
def make_a_pile(n):
    """"""सकारात्मक पूर्णांक n देल गेल अछि, अहाँकेँ पाथरक n स्तरक एकटा ढेर बनाब' पड़त। पहिल स्तरमे n पाथर अछि। अगिला स्तरमे पाथरक संख्या ई अछि:- अगिला विषम संख्या जँ n विषम अछि - अगिला सम संख्या जँ n सम अछि। प्रत्येक स्तरमे पाथरक संख्याकेँ सूचीमे लौटाउ, जतए तत्व i सूचकांकमे स्तर (i+1) मे पाथरक संख्याक प्रतिनिधित्व करैत अछि। उदाहरणः >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,mai_Deva,python,"
def words_string(s):
    """"""अहाँकेँ शब्दसभक एकटा स्ट्रिंग देल जाएत जकरा कमेटा वा स्पेससँ अलग कएल जाएत अछि. अहाँक काज अछि शब्दसभक स्ट्रिंगकेँ शब्दसभमे विभाजित करब आ शब्दसभक एकटा एरे वापस करब। उदाहरण: words_string ((""हाय, हमर नाम जॉन अछि"") == [""हाय"", ""माई"", ""नाम"", ""हो"", ""जॉन""] words_string ((""एक, दो, तीन, चार, पांच, छह"") == [""एक"", ""दो"", ""तीन"", ""चार"", ""पाँच"", ""छह""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,mai_Deva,python,"
def choose_num(x, y):
    """"""ई फलन दू टा धनात्मक संख्या x आ y लैत अछि आ [x, y] समावेशी श्रेणीमे रहल सबसँ पैघ सम पूर्णांक लैत अछि। जँ एहन कोनो संख्या नहि अछि, तँ फलन -1 लैत अछि। उदाहरण लेल: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,mai_Deva,python,"
def rounded_avg(n, m):
    """"""अहाँकेँ दूटा धनात्मक पूर्णांक n आ m देल गेल अछि, आ अहाँकेँ अपन कार्य n सँ m धरि पूर्णांकक औसत गणना करबामे अछि (n आ m सहित) । उत्तर केँ निकटतम पूर्णांकमे गोल करू आ एकरा द्विआधारीमे परिवर्तित करू। जँ n m सँ पैघ अछि, तँ -1 लौटाउ। उदाहरण: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b1111"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,mai_Deva,python,"
def unique_digits(x):
    """"""सकारात्मक पूर्णांक x क सूची देल गेल अछि. सब तत्वसभ क एक क्रमबद्ध सूची लौटाउ जकर कोनो अंक नहि अछि. नोट: लौटाओल सूची बढ़ैत क्रम मे क्रमबद्ध कएल जाएत. उदाहरणक लेल: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,mai_Deva,python,"
def by_length(arr):
    """"""पूर्णांकक एकटा सरणी देल गेल अछि, 1 आ 9 क बीचक पूर्णांककेँ क्रमबद्ध करू, परिणामी सरणी केँ उलट करू, आ फेर प्रत्येक अंक केँ एकर संबंधित नाम सँ ""एक"", ""दू"", ""तीन"", ""चार"", ""पाँच"", ""छह"", ""सात"", ""आठ"", ""नौ"" सँ प्रतिस्थापित करू। उदाहरणक लेल: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> क्रमबद्ध करू arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> रिवर्स arr -> [8, 5, 4, 3, 2, 2, 1, 1] वापसी [""आठ"", ""पाँच"", ""तीन"", ""दू"", ""दू"", ""एक"", ""एक""] जँ सरणी खाली अछि, तँ एकटा वापसीः arr = [] वापसी [] जँ सरणीमे कोनो अनजान संख्या अछि तँ एकरा अनदेखा करू: arr = [1, -1 , 55] -> arr -> [-1, 1, 55] -> reverse arr = [55, return - 1, 1] - 'एक' """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,mai_Deva,python,"
def f(n):
    """"""फलन f केँ लागू करू जे n केँ पैरामीटर रूपमे लैत अछि, आ आकार n क सूची लैत अछि, जकर अर्थ ई अछि जे यदि i सम अछि तँ i क कारक i अछि वा अन्यथा 1 सँ i तकक संख्याक योग अछि। i 1 सँ शुरू होइत अछि। i क कारक 1 सँ i तकक संख्याक गुणनफल अछि (1 * 2 * ... * i) उदाहरणः f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,mai_Deva,python,"
def even_odd_palindrome(n):
    """"""सकारात्मक पूर्णांक n देल गेल अछि, तँ एकटा टपल लौटाउ जकरामे सम आ विषम पूर्णांक पालिन्ड्रोमसभक संख्या अछि जे दायराक अन्तर्गत अबैत अछि। उदाहरणः इनपुटः 3 आउटपुटः (1, 2) स्पष्टीकरणः पूर्णांक पालिन्ड्रोम 1, 2, 3. एक तँ सम अछि, आ दू तँ विषम अछि। उदाहरणः इनपुटः 12 आउटपुटः (4, 6) स्पष्टीकरणः पूर्णांक पालिन्ड्रोम 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 अछि। चारि टा सम अछि, आ 6 विषम अछि। नोटः 1. 1 <= n <= 10^3 2. टपल लौटाओत क्रमशः सम आ विषम पूर्णांक पालिन्ड्रोमसभक संख्या। """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,mai_Deva,python,"
def count_nums(arr):
    """"""एकटा फंक्शन count_nums लिखू जे पूर्णांकक एकटा सरणी लैत अछि आ ओ तत्वसभक संख्या लैत अछि जकर अंकक योग > 0 अछि। जँ कोनो संख्या ऋणात्मक अछि, तँ ओकर पहिल हस्ताक्षरित अंक ऋणात्मक होएत: उदाहरण -123 अंक -1, 2, आ 3 सँ हस्ताक्षरित अछि। >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,mai_Deva,python,"
def move_one_ball(arr):
    """"""अहाँकेँ दाहिना सँ ससरबाक क्रिया कए कोनो संख्या कए बेर करबाक अनुमति अछि। एकटा दाहिना सँ ससरबाक क्रियाक अर्थ अछि सरणीक सब तत्वकेँ दाहिना दिशामे एक स्थानसँ ससरनाइ। सरणीक अन्तिम तत्व सरणीमे प्रारम्भिक स्थितिमे अर्थात ०अम सूचकांकमे ससरि जाएत। जँ उपर देल गेल कार्य कएलासँ क्रमबद्ध सरणी प्राप्त करब संभव अछि तँ फेर True लौटाउ अन्यथा False लौटाउ। जँ देल गेल सरणी खाली अछि तँ फेर True लौटाउ। नोटः देल गेल सूचीमे अद्वितीय तत्व होएबाक ग्यारेन्टी अछि। उदाहरण लेलः move_one_{\ball_{3,4,5,2}True स्पष्टीकरणः 2 right-min () द्वारा, सरणीक लेल गैर-असमान क्रम प्राप्त कएल जा सकैत अछि। [\ball_{1,3,4,5,2}False ===] ई कोनो संख्याकेँ दाहिना सँ ससरबाक द्वारा प्राप्त कएल जा सकैत अछि।""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,mai_Deva,python,"
def exchange(lst1, lst2):
    """"""ई समस्यामे, अहाँ एकटा फंक्शन लागू करब जे दूटा संख्याक सूची लैत अछि, आ ई निर्धारित करैत अछि जे की ई संभव अछि कि ईसभक बीच तत्वसभक आदान-प्रदान कएल जाए जे lst1 मात्र सम संख्याक सूची बनएत। lst1 आ lst2 बीच आदान-प्रदान कएल गेल तत्वसभक संख्या पर कोनो सीमा नहि अछि। जँ ई संभव अछि कि lst1 आ lst2 बीच तत्वसभक आदान-प्रदान कएल जाए जे lst1क सभ तत्वसभ सम होएत, तँ ""YES"" लौटाउ। अन्यथा, ""NO"" लौटाउ। उदाहरणक लेल: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" ई मानि लेल जाइत अछि जे इनपुट सूचीसभ गैर-खाली होएत। """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,mai_Deva,python,"
def histogram(test):
    """"""यदि अक्षरसभमे सँ एक सँ अधिक अक्षरसभक पुनरावृत्ति होएत अछि, तँ ओ सभटाकेँ वापस करबा चाही। उदाहरण: हिस्टोग्राम (a) == {'a': 1, 'b': 1, 'c': 1} हिस्टोग्राम (a) == {'a': 2, 'b': 2} हिस्टोग्राम (a) == {'a': 2, 'b': 2} हिस्टोग्राम (b) == {'a': 2, 'b': 2} हिस्टोग्राम (b) == {'b 4}': हिस्टोग्राम (b) == {'b'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} } } } } {'} {'} {'} {'} {'} {'} } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,mai_Deva,python,"
def reverse_delete(s,c):
    """"""कार्य हमरासभकेँ दू टा स्ट्रिंग s आ c देल गेल अछि, अहाँकेँ s मे सभटा अक्षर जे c मे कोनो अक्षरक बराबर अछि, से हटाएब अछि आ फेर जाँच करब जे परिणाम स्ट्रिंग पालिन्ड्रोम अछि की नहि। एकटा स्ट्रिंग पालिन्ड्रोम कहल जाइत अछि जँ ई पूर्ववत् समान पढ़ल जाइत अछि। अहाँकेँ जाँचक लेल परिणाम स्ट्रिंग आ ट्रू/फॉल्स युक्त एकटा टपल लौटाब अछि। उदाहरण लेल s = ""abcde"", c = ""ae"", परिणाम ('bcd',False) होएबाक चाही। s = ""abcdef"", c = ""b"" परिणाम ('acdef',False) होएबाक चाही। s = ""abcdedcba"", c = ""ab"", परिणाम ('cdedc',True) होएबाक चाही।""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,mai_Deva,python,"
def odd_count(lst):
    """"""प्रत्येक तत्व i आउटपुट मे ""इनपुट क स्ट्रिंग i मे विषम तत्व क संख्या"" होएबाक चाही जतए सभ i क इनपुट क i'th स्ट्रिंग मे विषम अंक क संख्या सँ प्रतिस्थापित कएल जाएबाक चाही. >>> odd_count['1234567']) [""odd elements 4n the str4ng 4 of the 4nput.""] >>> odd_count['3',""111111""]) [""odd elements 1n the str1ng 1 of the 1nput. "", ""odd elements 8n the str8ng 8 of the 8nput. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,mai_Deva,python,"
def minSubArraySum(nums):
    """"""पूर्णांक संख्यकक एकटा सरणी देल गेल अछि, कोनो गैर-खाली उप-सरणीक न्यूनतम योग भेटैत अछि। उदाहरण minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,mai_Deva,python,"
def max_fill(grid, capacity):
    import math
    """"""अहाँकेँ कुलक एक आयताकार ग्रिड देल गेल अछि। प्रत्येक पंक्ति एकटा कुलक प्रतिनिधित्व करैत अछि, आ प्रत्येक पंक्तिमे 1 एकटा जल इकाईक प्रतिनिधित्व करैत अछि। प्रत्येक कुलक एक संबंधित बाल्टी अछि जे ओहिसँ पानि निकालेबाक लेल उपयोग कएल जाए सकैत अछि, आ सभ बाल्टीमे समान क्षमता अछि। अहाँक काज अछि बाल्टीक उपयोग कुलक खाली करबाक लेल। आउटपुट ओ संख्या जे अहाँकेँ बाल्टीकेँ नीचाँ करबाक आवश्यकता अछि। उदाहरणः १ः इनपुटः ग्रिडः [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: १ आउटपुटः ६ः इनपुटः ग्रिडः [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: २ आउटपुटः ५ः इनपुटः [[:0,0,0], [0,0,0]] bucket_capacity: ५ आउटपुटः ० * कन्स्ट्रैक्ट्सः * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १ * १""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,mai_Deva,python,"
def sort_array(arr):
    """"""ई कटामे, अहाँकेँ गैर-ऋणात्मक पूर्णांकक एकटा सरणीकेँ ओकर द्विआधारी प्रतिनिधित्वमे एकक संख्याक अनुसार आरोही क्रममे क्रमबद्ध करए पड़त। समान संख्याक लेल, दशमलव मूल्यक आधार पर क्रमबद्ध करू। एकरा एहि तरहें लागू कएल जाएतः >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,mai_Deva,python,"
def select_words(s, n):
    """"""यदि string s खाली अछि त फलन खाली सूची वापस करएत. नोट: अहाँ मान सकैत छी जे इनपुट स्ट्रिंगमे केवल अक्षर आ स्पेस अछि. उदाहरण: select_words ""मैरी के पास एक छोटा मेमना था"", 4) ==> [""छोट""] select_words ""मैरी के पास एक छोटा मेमना था"", 3) ==> [""मैरी"", ""मेमना""] select_words ""सादा सफेद स्थान"", 2) ==> [] select_words ""हैलो वर्ल्ड"", 4) ==> [""विश्व""] select_words ""अंकल सैम"", 3) ==> [""अंकल""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,mai_Deva,python,"
def get_closest_vowel(word):
    """"""अहाँकेँ एकटा शब्द देल गेल अछि. अहाँक काज ई अछि जे शब्दक दहिना कातसँ दूटा व्यंजनक बीचमे रहल निकटतम स्वरक खोज करी (केस संवेदनशील) । आरम्भ आ अन्तमे स्वरक गणना नहि कएल जाएत अछि। खाली स्ट्रिंग लौटाउ जँ अहाँकेँ कोनो स्वर उपर्युक्त शर्तक अनुरूप नहि भेटल अछि। अहाँ ई मान सकैत छी जे देल गेल स्ट्रिंगमे केवल अङ्ग्रेजी अक्षर अछि। उदाहरणः get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,mai_Deva,python,"
def match_parens(lst):
    '''अहाँकेँ दू टा स्ट्रिंगक सूची देल गेल अछि, दुनू स्ट्रिंगमे केवल खुल्ला कोष्ठक '(' अथवा बन्द कोष्ठक ') ' अछि। अहाँक काज ई जाँच करब अछि जे की ई संभव अछि जे दू टा स्ट्रिंगकेँ कोनो क्रममे जोड़ल जाए, जे परिणाम स्वरूप स्ट्रिंग नीक होएत। एकटा स्ट्रिंग S नीक मानल जाएत जँ आ मात्र तखने जँ S मे सभ कोष्ठक संतुलित होएत। उदाहरण लेल: स्ट्रिंग '((())' नीक अछि, जखन कि स्ट्रिंग '()) ' नहि अछि। जँ नीक स्ट्रिंग बनएबाक कोनो तरीका अछि तँ 'Yes' लौटाउ, आ अन्यथा 'No' लौटाउ। उदाहरण: match_parens[('() ', ') ']) == 'Yes' match_parens[(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,mai_Deva,python,"
def maximum(arr, k):
    """"""उदाहरण: इनपुट: arr = [-3, -4, 5], k = 3 आउटपुट: [-4, -3, 5] उदाहरणः इनपुट: arr = [4, -4, 4], k = 2 आउटपुट: [4, 4] उदाहरणः इनपुट: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 आउटपुट: [2] नोटः 1. सरणीक लम्बाई [1, 1000]क सीमामे रहत। 2. सरणीक तत्व [-1000, 1000]क सीमामे रहत। 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,mai_Deva,python,"
def solution(lst):
    """"""पूर्णांकसभक एकटा गैर-खाली सूची देल गेल अछि, जे सम स्थितिमे रहल सभ अनौठा तत्वसभक योगकेँ लौटाउ. उदाहरण समाधान (([5, 8, 7, 1]) ==> 12 समाधान (([3, 3, 3, 3, 3]) ==> 9 समाधान (([30, 13, 24, 321]) ==>0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,mai_Deva,python,"
def add_elements(arr, k):
    """"""पूर्णांक arr आ पूर्णांक k क एकटा गैर-खाली सरणी देल गेल अछि, आर आर क पहिल k तत्व सँ बेसी सँ बेसी दू अंकक संग तत्वसभक योग लौटाउ. उदाहरण: इनपुटः आर आर = [111,21,3,4000,5,6,7,8,9], के = 4 आउटपुटः 24 # 21 + 3 क योग कन्ट्रास्ट्सः 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,mai_Deva,python,"
def get_odd_collatz(n):
    """"""कोनो सकारात्मक पूर्णांक n देल गेल अछि, तँ एक क्रमबद्ध सूची वापस करू जकर संग कोलाट्ज क्रममे विषम संख्यासभ अछि। कोलाट्ज अनुमान गणितमे एकटा अनुमान अछि जे निम्नानुसार परिभाषित कएल गेल अनुक्रमसँ सम्बन्धित अछि: कोनो सकारात्मक पूर्णांक n सँ शुरू करू। तखन प्रत्येक पद पिछला पद सँ निम्नानुसार प्राप्त कएल जाएत अछि: यदि पिछला पद सम अछि, तँ अगिला पद पिछला पदक आधा अछि। यदि पिछला पद विषम अछि, तँ अगला पद पिछला पदक 3 गुणा अछि प्लस 1. अनुमान ई अछि जे n क कोनहु मूल्य होए, अनुक्रम हमेशा 1. तक पहुँचत नोटः 1. कोलाट्ज (((1) [1] अछि। 2. क्रमबद्ध सूची वापस कएल गेल अछि। उदाहरणार्थः get_odd_collatz ((5) [1, 5] 5 क लेल कोलाट्ज अनुक्रम [5, 8, 16, 4, 2, 1], तेँ विषम संख्या मात्र 1 आ 5 अछि।""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,mai_Deva,python,"
def valid_date(date):
    """"""अहाँकेँ एकटा फंक्शन लिखबाक अछि जे कोनो देल गेल तिथि स्ट्रिंग केँ मान्य करैत अछि आ जँ तिथि मान्य अछि तँ सही फेर गलत केँ लौटाबैत अछि। तिथि वैध अछि जँ निम्नलिखित सभ नियमसभ पूरा कएल जाए: 1. तिथि स्ट्रिंग खाली नहि अछि। 2. दिनक संख्या महिना 1,3,5,7,8,10,12 लेल 1 सँ कम वा 31 दिन सँ बेसी नहि अछि। आ दिनक संख्या महिना 4,6,9,11 लेल 1 सँ कम वा 30 दिन सँ बेसी नहि अछि। आ, दिनक संख्या महिना 2 लेल 1 सँ कम वा 29 सँ बेसी नहि अछि। 3. महिना 1 सँ कम वा 12 सँ बेसी नहि होएबाक चाही। 4. तिथि प्रारूप मे होएबाक चाहीः mm-dd-yyyy उदाहरणक लेलः valid_date (('03-11-2000') => valid_date (('15-01-2012') => false valid_date (('04-01-2040') => false_date (('06-04-2020') => valid_date (('06/04/2020') => false""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,mai_Deva,python,"
def split_words(txt):
    '''शब्दसभक एकटा स्ट्रिंग देल गेल, रिक्त स्थान पर विभाजित शब्दसभक सूची लौटाउ, जँ पाठमे कोनो रिक्त स्थान नहि अछि तँ अहाँकेँ कमा ',' पर विभाजित करबाक चाही, यदि कमा नहि अछि तँ अहाँकेँ अल्फाबेटमे अनियमित क्रममे छोट अक्षरसभक संख्या लौटाब' चाही, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 उदाहरणसभ split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,mai_Deva,python,"
def is_sorted(lst):
    '''यदि सूचीमे एक सँ बेसी संख्याक दोहराव अछि, तँ गलत लौटाउ। कोनो ऋणात्मक संख्या नहि आ केवल पूर्णांक मानू। उदाहरण is_sorted (१, २, ३, ४, ५) -> True is_sorted (१, २, ३, ४, ५) -> True is_sorted (१, २, ३, ४, ५) -> False is_sorted (१, २, ३, ४, ५, ६) -> True is_sorted (१, २, ३, ४, ५, ६) -> True is_sorted (१, २, ३, ४, ६, ७) -> True is_sorted (१, ३, ४, ५, ६, ७) -> False is_sorted (१, ३, २, ४, ५, ६, ७) -> False is_sorted (१, २, २, ३, ४) -> True is_sorted (१, २, २, ३, ४) -> False '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,mai_Deva,python,"
def intersection(interval1, interval2):
    """"""अहाँकेँ दू टा अंतराल देल गेल अछि, जतए प्रत्येक अंतराल पूर्णांकक जोड़ी अछि। उदाहरण लेल, अंतराल = (सुरुआत, अन्त) = (1, 2) । देल गेल अंतराल बंद अछि जेकर अर्थ अछि जे अंतराल (सुरुआत, अन्त) मे प्रारंभ आ अंत दुनू शामिल अछि। प्रत्येक देल गेल अंतराल लेल, ई मानल जाइत अछि जे एकर प्रारंभ एकर अंत सँ कम वा बराबर अछि। अहाँक काज ई निर्धारित करब अछि जे एहि दू अंतरालक अन्तरालक लम्बाई एकटा अभाज्य संख्या अछि की नहि। उदाहरण, अंतराल (1, 3), (2, 4) क अन्तराल (2, 3) अछि, जेकर लम्बाई 1 अछि, जे एकटा अभाज्य संख्या नहि अछि। यदि अन्तरालक लम्बाई एक अभाज्य संख्या अछि तँ ""YES"" लौटाउ, अन्यथा ""NO"" लौटाउ। जँ दू अंतराल आपसमे नहि कटाएत तँ ""NO"" लौटाउ। [इनपुट/आउटपुट] नमूनाः अन्तराल (२, २, ३) ==> ""अन्तराल-1, (२, १) ==> ""अन्तराल (०, (१, ४) ==""अन्तराल (१, (२, (१, ५), ==> (२, (३, ५) ==>) ""YES (-"", -)) ।""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,mai_Deva,python,"
def prod_signs(arr):
    """"""अहाँकेँ पूर्णांकक एकटा सरणी देल गेल अछि आ अहाँकेँ पूर्णांकक परिमाणक योगकेँ सरणीमे प्रत्येक संख्याक सब संकेतसभक गुणनफलसँ गुणनफल कऽ कऽ लौटाबऽ पड़त, जकरा १, -१ वा ० सँ प्रतिनिधित्व कएल जाएत अछि। नोटः खाली सरणीक लेल कोनो नहि लौटाउ। उदाहरणः >>> prod_signs (([१, २, २, -४]) == -९ >>> prod_signs (([०, १]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,mai_Deva,python,"
def minPath(grid, k):
    """"""अहाँ कोनो कक्ष सँ शुरू कऽ सकैत छी, आ प्रत्येक चरणमे अहाँ कोनो पड़ोसी कक्षमे जाए सकैत छी, दोसर शब्दमे, अहाँ कोनो ओइ कक्षमे जाए सकैत छी जे अहाँक वर्तमान कक्षक संग किनार साझा करैत अछि। कृपया ध्यान दिअ जे k लम्बाइक पथक अर्थ अछि कि k कक्ष (अनिवार्य रूपसँ भिन्न नहि) पर जाएब। अहाँ ग्रिड सँ बाहर नहि जा सकैत छी। A पथ (k लम्बाइक) क B पथ (k लम्बाइक) सँ कम मानल जाएत अछि जँ A आ B क लेल मानसभक क्रमबद्ध सूची बनालाक बाद (एकरा lA_st आ lA_st कहू), lA_st शब्दकोषीय रूपसँ lA_st सँ कम अछि, दोसर शब्दमे, k पूर्णांक i, j[A_st, j[A_st, j[A_st, j] = 1, [A_st, j[A_st, j] = 2, [A_st, j[A_st, j] = 4, [A_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st, j_st""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,mai_Deva,python,"
def tri(n):
    """"""सभ कियो फिबोनाची अनुक्रम के जनैत अछि, एकर गहन अध्ययन गणितज्ञ द्वारा पिछला दू शताब्दी मे कएल गेल छल। मुदा, जे लोक के पता नहि अछि ओ त्रिबोनाची अनुक्रम अछि। त्रिबोनाची अनुक्रम पुनरावृत्ति द्वारा परिभाषित कएल गेल अछि: tri(1) = 3 tri(n) = 1 + n / 2, यदि n सम अछि. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), यदि n विषम अछि। उदाहरण के लेल: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 अहाँके एक गैर-ऋणात्मक पूर्णांक संख्या n देल गेल अछि, अहाँके त्रिबोनाची अनुक्रम के पहिल n + 1 संख्याक सूची वापस करबा के अछि। उदाहरण: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,mai_Deva,python,"
def digits(n):
    """"""यदि सब अंक सम अछि तँ 0 लौटाउ. उदाहरण लेल: अंक (१) == १ अंक (४) == ० अंक (२३५) == १५ """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,mai_Deva,python,"
def is_nested(string):
    '''एकटा फलन बनाउ जे एकटा स्ट्रिंग क इनपुट क रूपमे लए जे केवल वर्ग कोष्ठकसभ पर مشتمل अछि। फलनकेँ सही लौटाबय चाही जँ आ मात्र तखने जँ कोष्ठकसभक एकटा वैध अनुक्रम अछि जतए कम सँ कम एक कोष्ठकसभ घोंसलामे अछि। is_nested'[[]]') â -> True is_nested'[[]]]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,mai_Deva,python,"

def sum_squares(lst):
    """"""अहाँकेँ संख्यासभक सूची देल गेल अछि। अहाँकेँ देल गेल सूचीमे वर्गमे कएल गेल संख्यासभक योगकेँ वापस करए पड़त, सूचीमे प्रत्येक तत्वकेँ उपरका int{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,mai_Deva,python,"
def check_if_last_char_is_a_letter(txt):
    '''एकटा फलन बनाउ जे जँ कोनो देल गेल स्ट्रिंगक अन्तिम अक्षर वर्णमालाक वर्ण अछि आ शब्दक भाग नहि अछि तँ सही आ अन्यथा गलत क' लौटाउ. नोट: ""शब्द"" वर्णसभक एकटा समूह अछि जे स्पेस द्वारा अलग कएल गेल अछि. उदाहरण: check_if_last_char_is_a_letter"" ""सेब पाई"") â -> False check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> True check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> False check_if_last_char_is_a_letter"" ""सेब पाई ई"") â -> False check_if_last_char_is_a_letter"" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,mai_Deva,python,"
def can_arrange(arr):
    """"""कोनो ऐसन तत्व जे एकर पूर्ववर्ती तत्व सं बेसी या बराबर नहि होए, ओकर सबस बड़ सूचकांक वापस करए वाला फलन बनाबी. यदि एहन कोनो तत्व मौजूद नहि होए त फेर -1 लौटाबी. देल गेल सरणी मे डुप्लिकेट मान नहि होएत. उदाहरण: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,mai_Deva,python,"
def largest_smallest_integers(lst):
    '''एकटा फलन बनाउ जे टपल (a, b) वापस करैत अछि, जतय 'a' नकारात्मक पूर्णांकसभमे सबसँ पैघ अछि, आ 'b' सूचीमे सकारात्मक पूर्णांकसभमे सबसँ छोट अछि। जँ कोनो नकारात्मक वा सकारात्मक पूर्णांक नहि अछि, त' ओकरा None क रूपमे लौटाउ। उदाहरण: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,mai_Deva,python,"
def compare_one(a, b):
    """"""एकटा फंक्शन बनाउ जे पूर्णांक, फ्लोट, वा स्ट्रिंग्स लेल वास्तविक संख्यासभक प्रतिनिधित्व करैत अछि, आ अपन देल गेल चर प्रकारमे पैघ चरकेँ लौटाबैत अछि। यदि मान समान अछि तँ कोनो नहि लौटाउ। नोट: यदि वास्तविक संख्याकेँ स्ट्रिंगक रूपमे प्रतिनिधित्व कएल जाए तँ फ्लोटिंग प्वाइंट . या, तुलना_एक, २.५) â -> २.५ तुलना_एक, ""२,३"") â -> ""२,३"" तुलना_एक, ""५,१"", ""६"") â -> ""६"" तुलना_एक, ""१"", १) â -> कोनो नहि """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,mai_Deva,python,"
def is_equal_to_sum_even(n):
    """"""ई आकलन करू जे की देल गेल संख्या n क' ठीक 4 धनात्मक सम संख्याक योगक रूपमे लिखल जा सकैत अछि उदाहरण is_equal_to_sum_even ({4) == False is_equal_to_sum_even ({6) == False is_equal_to_sum_even ({8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,mai_Deva,python,"
def special_factorial(n):
    """"""ब्राजीली कारक के रूप मे परिभाषित कएल गेल अछि: ब्राजीली_कारक (n) = n! * (n-1)! * (n-2)! * ... * 1! जतय n > 0 उदाहरण लेल: >>> विशेष_कारक (n) 288 फलन केँ इनपुट के रूप मे एकटा पूर्णांक प्राप्त होयत आ एहि पूर्णांक के विशेष कारक केँ वापस करबा चाही.""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,mai_Deva,python,"
def fix_spaces(text):
    """"""_उदाहरण-3 पाठ देल गेल अछि, तँ ओहिमे सभ स्पेस केँ अंडरस्कोर सँ बदलू, आ जँ कोनो स्ट्रिंग मे 2 सँ बेसी लगातार स्पेस अछि, तखन सभ लगातार स्पेस केँ - fix_spaces सँ बदलू (_Example) == ""Example"" fix_spaces (_Example1"") == ""Example_1"" fix_spaces (_Example2"") == ""_Example_2"" fix_spaces (_Example3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,mai_Deva,python,"
def file_name_check(file_name):
    """"""एकटा फंक्शन बनाउ जे एकटा फाइलक नाम केँ प्रतिनिधित्व करैत एकटा स्ट्रिंग लैत अछि, आ जँ फाइलक नाम वैध अछि तँ 'Yes' लौटा दैत अछि, आ अन्यथा 'No' लौटा दैत अछि. एकटा फाइलक नाम वैध मानल जाइत अछि जँ आ मात्र तखने जखन निम्नलिखित सभ शर्त पूरा होइत अछि: - फाइलक नाम मे तीन सँ बेसी अंक ('0'-'9') नहि होएत अछि. - फाइलक नाममे ठीक एक डॉट '.' - डॉट सँ पहिने सबस्ट्रिंग खाली नहि होएत अछि, आ ई लातिन अल्फापेट सँ शुरू होएत अछि ('a'-'z' आ 'A'Z'). - डॉटक बाद सबस्ट्रिंग एहिमे सँ एकटा होएत अछि: ['txt', 'exe', 'lld'] उदाहरणः file_name_check""{example.txt.} # => 'Yes' file_name_check""{example.txt.ll1} => 'No' (# नाम लातिन अल्फापेट सँ शुरू होएत अछि)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,mai_Deva,python,"


def sum_squares(lst):
    """"""ई फंक्शन पूर्णांकसभक सूची लैत अछि। सूचीमे सभ प्रविष्टिक लेल, ई फंक्शन पूर्णांक प्रविष्टिक वर्ग कएत यदि एकर सूचकांक 3 क गुणक अछि आ ई पूर्णांक प्रविष्टिक घन कएत यदि एकर सूचकांक 4 क गुणक अछि आ 3 क गुणक नहि अछि। ई फंक्शन सूचीमे प्रविष्टिक परिवर्तन नहि करत जेकर सूचकांक 3 वा 4 क गुणक नहि अछि। ई फंक्शन फेर सभ प्रविष्टिक योग लौटाओत। उदाहरण: lst = [1,2,3] लेल आउटपुट 6 होएबाक चाही lst = [] लेल आउटपुट 0 होएबाक चाही lst = [-1,-5,2,-1,-5] लेल आउटपुट -126 होएबाक चाही।""""""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,mai_Deva,python,"
def words_in_sentence(sentence):
    """"""अहाँकेँ एकटा वाक्यक प्रतिनिधित्व करैत एकटा स्ट्रिंग देल गेल अछि, एहिमे किछु शब्द अछि जकरा स्पेस सँ अलग कएल गेल अछि, आ अहाँकेँ एकटा स्ट्रिंग वापस करए पड़त जकर मूल वाक्यसँ शब्द अछि, जकर लम्बाई अभाज्य संख्या अछि, नव स्ट्रिंगमे शब्दसभक क्रम मूलमे समान होएबाक चाही. उदाहरण १ः इनपुटः वाक्य = ""ई एकटा परीक्षण अछि"" आउटपुटः ""छ"" उदाहरण २ः इनपुटः वाक्य = ""स्विमिंग लेल जाएब"" आउटपुटः ""जाउ"" बाधाः * १ <= len(sentence) <= १०० * वाक्यमे मात्र अक्षर अछि """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,mai_Deva,python,"
def simplify(x, n):
    """"""अहाँक कार्य एकटा फलन केँ लागू करबा लेल अछि जे एक्सप्रेशन x * n केँ सरल बना देत। फलन सत्य लौटा दैत अछि जँ x * n एकटा पूर्णांकक लेल मूल्यांकन करैत अछि आ अन्यथा गलत। x आ n, एक अंशक स्ट्रिंग प्रतिनिधित्व अछि, आ निम्नलिखित प्रारूप अछि, <numerator>/<denominator> जतए संख्या आ नामकरण दुनू धनात्मक पूर्णांक अछि। अहाँ ई मान सकैत छी जे x, आ n वैध अंश अछि, आ शून्य केँ नामकरणक रूपमे नहि अछि। सरल बनाउ ({""1/5"", ""5/1"") = सत्य सरल बनाउ ({""1/6"", ""2/1"") = गलत सरल बनाउ ({""7/10"", ""10/2"") = गलत """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,mai_Deva,python,"
def order_by_points(nums):
    """"""एकटा फंक्शन लिखू जे देल गेल पूर्णांक सूचीकेँ ओकर अंकक योगक अनुसार आरोही क्रममे क्रमबद्ध करैत अछि। नोट: जँ एकर अंकक समान योगक संग कतेको आइटम अछि, तँ ओकरा मूल सूचीमे ओकर अनुक्रमणिकाक आधार पर क्रमबद्ध करू। उदाहरणक लेल: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,mai_Deva,python,"
def specialFilter(nums):
    """"""एकटा फंक्शन लिखू जे संख्याक एकटा सरणीकेँ इनपुट रूपमे लएए आ सरणीमे तत्वसभक संख्याकेँ लौटाए जे १० सँ बेसी अछि आ कोनो संख्याक पहिल आ अन्तिम अंक दुनूक संख्या अनौठा अछि (1, 3, 5, 7, 9) । उदाहरण: specialFilter (([१५, -७३, १४, -१५]) => १ specialFilter (([33, -२, -३, ४५, २१, १०९)) => २ """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,mai_Deva,python,"
def get_max_triples(n):
    """"""अहाँकेँ एकटा सकारात्मक पूर्णांक n देल गेल अछि। अहाँकेँ लम्बाई n क एकटा पूर्णांक सरणी a बनाबऽ पड़त। प्रत्येक i (1 ‰¤ i ‰¤ n) क लेल, a[i] = i * i - i + 1 क मान। a क ट्रिपल क संख्या लौटाउ (a[i], a[j], a[k]) जतए i < j < k, आ a[i] + a[j] + a[k] 3 क गुणक अछि। उदाहरण: इनपुटः n = 5 आउटपुटः 1 स्पष्टीकरणः a = [1, 3, 7, 13, 21] एकमात्र मान्य ट्रिपल (1, 7, 13) अछि।""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,mai_Deva,python,"
def bf(planet1, planet2):
    '''सौर मंडलमे आठ ग्रह अछि: सूर्यसँ निकटतम बुध, दोसर शुक्र, फेर पृथ्वी, मंगल, बृहस्पति, शनि, युरेनस, नेप्च्यून। एकटा फलन लिखू जे ग्रह1 आ ग्रह2 क तारक रूपमे दूटा ग्रहक नाम लएत अछि। फलन एकटा टपल लौटाओत जकर सभ ग्रह जकर कक्ष ग्रह1 आ ग्रह2 क क कक्ष बीच स्थित अछि, सूर्यक निकटता द्वारा क्रमबद्ध कएल गेल अछि। फलन खाली टपल लौटाओत जँ ग्रह1 वा ग्रह2 सही ग्रह नाम नहि अछि। उदाहरण bf ""(जुपिटर"", ""नेप्च्यून"") ==> (""शनि"", ""यूरेनस"") bf ""(पृथ्वी"", ""मर्करी"") ==> (""शुक्र"") bf ""मर्करी"", ""युरेनस"") ==> (""शुक्र"", ""पृथ्वी"", ""मंगल"", ""जुपिटर"", ""शनि"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,mai_Deva,python,"
def sorted_list_sum(lst):
    """"""एकटा फंक्शन लिखू जे स्ट्रिंगसभक सूचीकेँ एकटा पैरामीटरक रूपमे स्वीकार करैत अछि, ओहिसँ अनियमित लम्बाईक स्ट्रिंगसभकेँ हटा दैत अछि, आ क्रमबद्ध क्रममे परिणामी सूचीकेँ लौटा दैत अछि. सूची हमेशा स्ट्रिंगसभक सूची होइत अछि आ कहियो संख्यासभक एरे नहि, आ ई डुप्लिकेटसभ समाहित कए सकैत अछि। सूचीक क्रम प्रत्येक शब्दक लम्बाई द्वारा आरोही होएबाक चाही, आ अहाँकेँ ओ नियम द्वारा क्रमबद्ध सूची लौटाएबाक चाही। जँ दू शब्दक लम्बाई समान अछि, तँ सूचीकेँ वर्णमाला क्रममे क्रमबद्ध करू। फंक्शनकेँ क्रमबद्ध क्रममे स्ट्रिंगसभक सूची लौटाएबाक चाही। अहाँ ई मान सकैत छी जे सभ शब्दक लम्बाई समान होएत। उदाहरणक लेलः assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,mai_Deva,python,"
def x_or_y(n, x, y):
    """"""एकटा साधारण प्रोग्राम जे x क मान वापस करएत जँ n एकटा प्राइम नम्बर अछि आ y क मान वापस करएत अन्यथा उदाहरणः x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,mai_Deva,python,"
def double_the_difference(lst):
    '''संख्यासभक सूची देल गेल अछि, सूचीमे संख्यासभक वर्गसभक योगकेँ लौटाउ जे विषम अछि। ओ संख्यासभकेँ अनदेखा करू जे ऋणात्मक अछि वा पूर्णांक नहि अछि। double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 जँ इनपुट सूची खाली अछि, तँ 0 लौटाउ। '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,mai_Deva,python,"
def compare(game,guess):
    """"""हमसभ ई भावनाके याद करैत छी जखन कोनो लम्बा समयसँ प्रतीक्षित घटनाक परिणाम अन्ततः ज्ञात होइत अछि । अहाँक भावना आ विचारसभ जे अहाँ ओहि समयमे रखने छी, निश्चित रूपसँ नोट कएनाइ आ तुलना करए योग्य अछि । अहाँक कार्य ई निर्धारित करब अछि जे कोनो व्यक्ति सही सँ कतेको मैचसभक परिणाम अनुमान कएने अछि । अहाँकेँ स्कोर आ अनुमानक दूटा एरे देल गेल अछि, जतए प्रत्येक सूचकांक एकटा मैच देखाबएत अछि । समान लम्बाइक एरे लौटाउ जे प्रत्येक अनुमानक कतेक दूर छल से दर्शाएत अछि । यदि ओ सही सँ अनुमान कएने अछि, तँ मान ० अछि आ यदि नहि, तँ मान अनुमान आ स्कोरक बीच पूर्ण अन्तर अछि । उदाहरण: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] तुलना करी [0,5,0,4],[0,4,1,0,2]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,mai_Deva,python,"
def Strongest_Extension(class_name, extensions):
    """"""अहाँकेँ एकटा वर्गक नाम (एक स्ट्रिंग) आ एक्सटेंशनसभक सूची देल जाएत। एक्सटेंशनसभक उपयोग वर्गमे अतिरिक्त वर्ग लोड करबाक लेल कएल जाएत अछि। एक्सटेंशनक ताकत निम्न प्रकार अछि: CAP एक्सटेंशनक नाममे अपरकेस अक्षरसभक संख्या होएत, आ SM एक्सटेंशनक नाममे लोअरकेस अक्षरसभक संख्या होएत, एकर ताकत CAP - SM अंशसँ देल जाएत अछि। अहाँकेँ सबसँ मजबूत एक्सटेंशन खोजबाक चाही आ ई प्रारूपमे एकटा स्ट्रिंग लौटाबैक चाही: ClassName.StrongestExtensionName। जँ समान ताकतक संग दू वा बेसी एक्सटेंशन अछि, अहाँकेँ सूचीमे पहिल आएल विकल्प चुनबाक चाही। उदाहरणक लेल, जँ अहाँकेँ ""स्लाइस"" वर्ग आ एक्सटेंशनसभक सूचीक रूपमे देल गेल अछि: ['SEviviSliNGCes', 'Cheese', 'StuFfed'] तखन अहाँकेँ 'Slices.SliNGCes.SliNGCes' 'mySliNGCes' (MySliNGCes') नाम सँ मजबूत अछि, तँ अहाँकेँ 'SliNGCs.SliNGCes.SliNGCes' = StrongestExtensionName' (ए) 'क रूपमे लौटाब चाही, उदाहरणक लेल 'AA_Be' वर्गक लेल, 'Strongest_class' =='""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,mai_Deva,python,"
def cycpattern_check(a , b):
    """"""अहाँकेँ २ टा शब्द देल गेल अछि। अहाँकेँ जँ दोसर शब्द अथवा ओकर कोनो घुमाबसँ पहिल शब्दमे सबस्ट्रिंग अछि तँ अहाँकेँ सही लौटाबऽ पड़त cycpattern_check{""abcd"",""abd"") => False cycpattern_check{""hello"",""ell"") => True cycpattern_check{""whassup"",""psus"") => False cycpattern_check{""abab"",""baa"") => True cycpattern_check{""efef"",""eeff"") => False cycpattern_check{""hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,mai_Deva,python,"
def even_odd_count(num):
    """"""एकटा पूर्णांक देल गेल अछि. एकटा टपल लौटाउ जकरा क्रमशः सम आ विषम अंकसभक संख्या अछि. उदाहरण: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,mai_Deva,python,"
def int_to_mini_roman(number):
    """"""सकारात्मक पूर्णांक देल गेल, एकर रोमन अंक समकक्षकेँ एकटा स्ट्रिंगक रूपमे प्राप्त करू, आ एकरा लघु अक्षरमे लौटाउ. प्रतिबन्ध: 1 <= num <= 1000 उदाहरण: >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,mai_Deva,python,"
def right_angle_triangle(a, b, c):
    '''यदि तीनो पक्षसभसँ एक समकोण त्रिभुज बनैत अछि तँ सही लौटाउ, अन्यथा गलत लौटाउ. एक समकोण त्रिभुज एक त्रिभुज छी जहिमे एक कोण 90 डिग्री अछि। उदाहरण: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,mai_Deva,python,"
def find_max(words):
    """"""एकटा फंक्शन लिखू जे स्ट्रिंगसभक सूची स्वीकार करैत अछि. सूचीमे विभिन्न शब्दसभ अछि. अधिकतम संख्यामे अद्वितीय अक्षरसभक संग शब्द लौटाउ. जँ बहु स्ट्रिंगसभमे अधिकतम संख्यामे अद्वितीय अक्षरसभ अछि, तँ ओहिमेसँ जे शब्दकोश क्रममे पहिल आएल अछि, लौटाउ. find_max (([""नाम"", ""के"", ""स्ट्रिंग""]) == ""स्ट्रिंग"" find_max (([""नाम"", ""enam"", ""गेम""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,mai_Deva,python,"
def eat(number, need, remaining):
    """"""अहाँ एकटा भुखायल खरगोश छी, आ अहाँ पहिनहिसँ निश्चित संख्यामे गाजर खयलहुँ अछि, मुदा आब अहाँकेँ दिनक भोजन पूरा करबाक लेल आओर गाजर खएबाक आवश्यकता अछि। अहाँकेँ [खएलाक बाद खाएल गेल गाजरक कुल संख्या, भोजनक बाद बचेल गाजरक संख्या] क एकटा सरणी वापस करए पड़त जँ पर्याप्त शेष गाजर नहि अछि, अहाँ सभटा शेष गाजर खएब, मुदा तैयो अहाँ भुखायल रहब। उदाहरणः * खाउ (५, ६, १०) -> [11, 4] * खाउ (४, ८, ९) -> [12, 1] * खाउ (१, १०) -> [11, 0] * खाउ (२, ११, ५) -> [7, 0] चरः @number: अहाँ खाएल गाजरक संख्याक पूर्णांक। @need: अहाँकेँ खाएबाक लेल आवश्यक गाजरक संख्याक पूर्णांक। @remaining: शेष गाजरक शेष संख्याक पूर्णांक स्टॉकमे अछि। Constrain: * 0= <= 0 * 1000 = <= 1000 * resting: 0 = <= 1000 = resting = 1000 = have fun :)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,mai_Deva,python,"
def do_algebra(operator, operand):
    """"""मूलभूत बीजगणित परिचालन: जोड़ (+) घटाब (-)) गुणन (*) फ्लोर डिवीजन (//) घातांक (**) उदाहरण: परिचालक['+', '*', '-'] सरणी = [2, 3, 4, 5] परिणाम = 2 + 3 * 4 - 5 => परिणाम = 9 नोट: परिचालक सूचीक लम्बाई परिचालक सूचीक लम्बाई बराबर अछि शून्य सँ एक। परिचालक सूची गैर-ऋणात्मक पूर्णांकक सूची अछि। परिचालक सूचीमे कम सँ कम एक परिचालक अछि, आ परिचालक सूचीमे कम सँ कम दू परिचालक अछि।""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,mai_Deva,python,"
def solve(s):
    """"""अहाँकेँ एकटा स्ट्रिंग s देल गेल अछि. जँ s[i] एकटा अक्षर अछि, तँ एकर केस निचला सँ उपर या विसे वर्सामे उलट दिअ, अन्यथा एकरा जहिना अछि तहिना राखू. जँ स्ट्रिंगमे कोनो अक्षर नहि अछि, तँ स्ट्रिंग उलट दिअ. फंक्शन केँ परिणामी स्ट्रिंग लौटाबय पड़त. उदाहरण solve{""1234"") = ""4321"" solve{""ab"") = ""AB"" solve{""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,mai_Deva,python,"
def string_to_md5(text):
    """"""यदि 'text' खाली स्ट्रिंग अछि, तँ None लौटाउ. >>> string_to_md5 (('हेलो वर्ल्ड') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,mai_Deva,python,"
def generate_integers(a, b):
    """"""दू टा धनात्मक पूर्णांक a आ b देल गेल अछि, तँ a आ b क बीचक सम अंक आरोही क्रममे लौटाउ. उदाहरण लेल: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
