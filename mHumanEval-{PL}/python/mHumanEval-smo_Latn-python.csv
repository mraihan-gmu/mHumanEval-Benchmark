task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,smo_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Siaki pe i le lisi o numera ua tuuina mai, o so o se numera e lua e latalata atu i le tasi i le isi nai lo le tapulaa ua tuuina mai. faataitaiga: >>> ua_latalata_elements (([1.0, 2.0, 3.0], 0.5) sese >>> ua_latalata_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) moni """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,smo_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Faʻaulu i lenei galuega tauave o se manoa o loʻo i ai le tele o kulupu o faʻamau faʻamau. O lau sini o le vavaeeseina o na kulupu i ni manoa eseese ma toe foʻi mai le lisi o na. O vaega eseese e paleni (o tapunia tapunia tapunia tapunia tapunia) ma e le faʻapipiʻi i totonu o le tasi le isi Faʻagalo soʻo se avanoa i le manoa ulufale. Faataitaiga: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ' [' (()) ', '(()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,smo_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Tuuina atu se numera lelei o le numera o le numera, e mafai ona vaevaeina i le ma le vaega o le integer (tele integer laiti nai lo le numera tuuina atu) ma decimals (le vaega o totoe e laiti ifo nai lo le 1). Toe foi le vaega decimal o le numera. Faataitaiga: >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,smo_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""E tuuina atu ia te oe se lisi o tupe teu ma le talaina i tua gaoioiga i luga o se teugatupe i le faletupe e amata i le paleni o le zero. O lau galuega o le iloa pe afai i soo se taimi le paleni o le tala pau i lalo o le zero, ma i lena tulaga e tatau ona toe foi galuega tauave moni. ese e tatau ona toe foi sese. faataitaiga: >>> below_zero([1, 2, 3]) sese >>> below_zero([1, 2, -4, 5]) moni """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,smo_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Mo se lisi o fuainumera o le sao, fuafua le Mean Absolute Deviation e tusa ai ma le uiga o lenei faʻamaumauga. O le Mean Absolute Deviation o le averesi o le eseesega i le va o elemene taʻitasi ma se nofoaga tutotonu (o lona uiga i lenei tulaga): MAD = averesi │ x - x_mean │ Faataitaiga: >>> mean_absolute_deviation │ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,smo_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Faʻaofi se numera 'delimeter' i le va o elemene sosoʻo e lua o le lisi o faʻamatalaga `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,smo_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""O le sao i lenei galuega tauave o se manoa sui vaega tele mo puipui nested tuueseeseina e avanoa. Mo vaega taitasi, galuega faatino le tulaga loloto o nesting o puipui. f.t.t. (() (()) e maualuga lua tulaga o nesting ao ((())) e tolu. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,smo_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Faamama se sao lisi o manoa na o mo i latou o loo i ai tuuina substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,smo_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Mo se lisi o tuuina mai o integers, toe foi se tuple aofia ai o se aofaiga ma se oloa o le integers uma i se lisi. e tatau ona tutusa le aofaiga gaogao e 0 ma e tatau ona tutusa le oloa gaogao e 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,smo_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Mai se lisi o integer, faatupuina se lisi o le faataamilo elemene aupito maualuga maua seia oo i le taimi na tuuina mai i le faasologa. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,smo_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Saili le palindrome puupuu e amata i se manoa tuuina. manatu algorithm e faigofie: - Saili le postfix umi o tuuina manoa o se palindrome. - Faaopoopo i le faaiuga o le manoa faafeagai o se manoa prefix e oo mai i luma o le suffix palindromic. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Tofotofoina pe afai ua tuuina mai le manoa o se palindrome """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,smo_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""O le sao o ni manoa se lua a ma le b e aofia ai na o le 1s ma 0s. Faia binary XOR i nei sao ma toe foi taunuuga foi o se manoa. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,smo_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Mai le lisi o manoa, toe foi le tasi umi. Toe foi le muamua i le tulaga o manoa tele o le umi lava lea e tasi. Toe foi leai i le tulaga o le lisi sao o le gaogao. >>> umi([]) >>> umi(['a', 'b', 'c']) 'a' >>> umi(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,smo_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Toe foi a sili ona tele e masani ona vaevaeina o le lua integers a ma b >>> sili_e masani ona vaevaeina ((3, 5) 1 >>> sili_e masani ona vaevaeina ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,smo_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Toe foi lisi o prefixes uma mai puupuu i le umi o le manoa sao >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,smo_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Toe faafoi mai se manoa o loo i ai le avanoa-faamaotiina numera amata mai 0 e oo atu i n aofia ai. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,smo_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Tuuina atu se manoa, saili pe fia ni tagata eseese (e tusa lava po o le tulaga) e aofia ai o le >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,smo_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Faʻaulu i lenei galuega tauave o se manoa sui o musika faʻamatalaga i se faapitoa ASCII faatulagaga. O lau galuega o le a parse manoa lisi o integers tutusa i le tele o ta faia. O iinei o se legend: 'o' faamatalaga, mulimuli ta 'o' faamatalaga fa - o le tasi le afa o le faamatalaga, mulimuli ta lua o le tasi - o le tasi le fa fa fa - o le tasi le faamatalaga. mulimuli ta >>> parse_music. 'o o . o o o . o o o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o . o""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,smo_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Saili le tele o taimi e mafai ona maua se substring tuuina i le manoa uluai. Faitau overlapping tulaga. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,smo_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""O le sao o se manoa avanoa-faʻatapulaʻaina o numera mai le 'leai' i le 'iva'. Filifiliga talafeagai o le 'leai', 'tasi', 'lua', 'tolu', 'fa', 'lima', 'ono', 'fitu', 'valu' ma 'iva'. Toe foʻi le manoa ma numera faʻavasegaina mai le laʻititi i le sili ona tele >>> sort_numbers (('tolu tasi lima') 'tasi tolu lima' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,smo_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Mai se lisi o numera ua tuuina mai (o le umi e le itiiti ifo i le lua) filifili ma toe foi lua e sili ona latalata i le tasi i le isi ma toe foi i latou i le faasologa (numera laiti, numera tele). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,smo_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Tuuina atu se lisi o numera (o le itiiti ifo i le lua elemene), faaaoga se linear suia i lena lisi, ina ia o le a avea le numera aupito itiiti 0 ma le a avea le aupito tele 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,smo_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Faamama lisi tuuina atu o so o se tulaga faatauaina Python mo integers na >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,smo_Latn,python,"

def strlen(string: str) -> int:
    """"""Toe foi umi o le tuuina atu manoa >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,smo_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Mo se numera n, saili le numera sili e vaevaeina tutusa le n, laʻititi nai lo le n >>> largest_divisor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,smo_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Toe foi lisi o le autu vaega o tuuina integer i le poloaiga mai laiti e sili ona tele. e tatau ona lisiina taitasi o le vaega o le tele o taimi e tutusa ai ma le tele o taimi e foliga mai i factorization. e tatau ona tutusa numera sao i le oloa o vaega uma >>> factorization(8) [2, 2, 2] >>> factorization(25) [5, 5] >>> factorization(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,smo_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Mai se lisi o integers, aveese elemene uma e tupu sili atu nai lo le faatasi. Ia tausia le faatulagaga o elemene tuua le lava lea e tasi e pei o le sao. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,smo_Latn,python,"

def flip_case(string: str) -> str:
    """"""Mo se manoa tuuina mai, flip mataitusi lowercase i uppercase ma uppercase i lowercase. >>> flip_case ((('Talofa') 'Talofa' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,smo_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate lisi o manoa i se manoa e tasi >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,smo_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Faamama se lisi sao o manoa na o mo i latou e amata i se muai upu tuuina atu. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,smo_Latn,python,"

def get_positive(l: list):
    """"""Toe foi na o le numera lelei i le lisi. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,smo_Latn,python,"

def is_prime(n):
    """"""Toe foʻi moni pe afai o se numera ua tuuina mai o le muamua, ma sese i se isi tulaga. >>> is_prime(6) Sese >>> is_prime(101) Moni >>> is_prime(11) Moni >>> is_prime(13441) Moni >>> is_prime(61) Moni >>> is_prime(4) Sese >>> is_prime(1) Sese """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,smo_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs o coefficients o se polynomial. find_zero maua x e faapea poly(x) = 0. find_zero toe foi na o le na o le zero manatu, e tusa lava pe e tele. lē gata i lea, find_zero na o le lisi xs ua e oo lava i le aofai o coefficients ma le coefficient nonzero aupito tele e pei ona faamaonia ai se fofo. >>> faataamilo (((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> faataamilo (((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Iloiloina polynomial ma coefficients xs i le taimi x. toe foi xs[0] + xs[1] * x + xs[1] * x ^ 2 + .... xs[n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,smo_Latn,python,"

def sort_third(l: list):
    """"""O lenei galuega tauave e ave se lisi l ma toe foi mai se lisi l 'e pei o le l' e tutusa ma le i le indices e le vaevaeina i le tolu, ao lona taua i le indices e vaevaeina i le tolu e tutusa ma le taua o le indices tutusa o le l, ae faatulagaina. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,smo_Latn,python,"

def unique(l: list):
    """"""Toe foi mai elemene tulaga ese faavasegaina i se lisi >>> tulaga ese (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,smo_Latn,python,"

def max_element(l: list):
    """"""Toe faafoi elemene aupito maualuga i le lisi. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,smo_Latn,python,"

def fizz_buzz(n: int):
    """"""Toe foi le aofai o taimi o le digit 7 foliga mai i integers itiiti ifo nai lo n e vaevaeina i le 11 po o le 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,smo_Latn,python,"

def sort_even(l: list):
    """"""O lenei galuega tauave e ave se lisi l ma toe foi mai se lisi l 'e pei o le l' e tutusa ma le i le indices ese, ao lona taua i le indices pea e tutusa ma le taua o le indices pea o le l, ae faatulagaina. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,smo_Latn,python,"

def encode_cyclic(s: str):
    """"""e avea o se sao manoa ua encoded ma encode_cyclic galuega tauave. Toe foi manoa decoded. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""toe foi mai ua encoded manoa e ala i vaega faataamilosaga o le tolu tagata. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,smo_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib e toe faafoi mai le numera n-th o se numera Fibonacci ma o se numera muamua foi. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,smo_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero e ave se lisi o integers o se sao. e toe foi moni pe afai ei ai elemene eseese e tolu i le lisi e aofaiga i le zero, ma sese i se isi tulaga. >>> triples_sum_to_zero([1, 3, 5, 0]) sese >>> triples_sum_to_zero[(1, 3, -2, 1]) moni >>> triples_sum_to_zero([1, 2, 3, 7]) sese >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) moni >>> triples_sum_to_zero[1]) sese """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,smo_Latn,python,"

def car_race_collision(n: int):
    """"""Seʻi faapea o se auala e matua saʻo lava ma e leai se gataaga o le umi. n taavale o loo tiʻetiʻe mai i le agavale i le taumatau; i le taimi lava e tasi, o se vaega eseese o n taavale o loo tiʻetiʻe mai i le taumatau i le agavale. O taavale e lua e amata mai i le mamao tele mai le tasi i le isi. O taavale uma e feoaʻi i le saoasaoa e tasi. E lua taavale e taʻua e fetauai pe a fetaiaʻi se taavale o loo agaʻi i le agavale i le taumatau ma se taavale o loo agaʻi i le taumatau i le agavale. Ae ui i lea, o taavale e matua mausali ma malolosi; o le iʻuga, latou te faaauau pea ona feoaʻi i lo latou ala e pei lava latou te leʻi fetaiaʻi. O lenei galuega tauave e maua ai le numera o ia fetauiga. """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,smo_Latn,python,"

def incr_list(l: list):
    """"""Toe foi lisi ma elemene faateleina e 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,smo_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero e ave se lisi o integers o se sao. e toe foi moni pe afai ei ai elemene eseese e lua i le lisi e aofaiga i le zero, ma sese i se isi tulaga. >>> pairs_sum_to_zero([1, 3, 5, 0]) sese >>> pairs_sum_to_zero[(1, 3, -2, 1]) sese >>> pairs_sum_to_zero([1, 2, 3, 7]) sese >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) moni >>> pairs_sum_to_zero[1]) sese """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,smo_Latn,python,"

def change_base(x: int, base: int):
    """"""Suiga numera faavae o le sao numera x i le faavae. faatusa manoa toe foi ina ua uma le liua. e itiiti ifo nai lo numera faavae 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,smo_Latn,python,"

def triangle_area(a, h):
    """"""Tuuina atu le umi o se itu ma le maualuga o le toe foi mai o le eria mo se tafatolu. >>> tafatolu_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,smo_Latn,python,"

def fib4(n: int):
    """"""O le faasologa o numera Fib4 o se faasologa e tutusa ma le faasologa o Fibbonacci ua faamatalaina e faapea: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Faamolemole tusi se galuega tauave e fuafua lelei ai le elemene n-th o le faasologa o numera fib4. Aua le faaaogaina o le toe faʻaaogaina. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,smo_Latn,python,"

def median(l: list):
    """"""Toe foʻi mai median o elemene i le lisi l. >>> median (([3, 1, 2, 4, 5]) 3 >>> median (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,smo_Latn,python,"

def is_palindrome(text: str):
    """"""Siaki pe afai ua tuuina mai ua se manoa palindrome >>> is_palindrome (('') Moni >>> is_palindrome (('aba') Moni >>> is_palindrome (('aaaaa') Moni >>> is_palindrome (('zbcd') sese """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,smo_Latn,python,"

def modp(n: int, p: int):
    """"""Toe foʻi mai 2^n modulo p (ia iloa numera). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,smo_Latn,python,"

def encode_shift(s: str):
    """"""e avea o se sao manoa ua encoded ma encode_shift galuega tauave. Toe foi manoa decoded. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""toe faafoi mai ua faapipii i ai le manoa e ala i le siitia o tagata uma e 5 i le alafapeta. """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,smo_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels o se galuega tauave e ave manoa ma toe foi manoa e aunoa ma vowels. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,smo_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Toe foi moni pe afai o numera uma i le lisi o loo i lalo t tapulaa. >>> below_threshold([1, 2, 4, 10], 100) moni >>> below_threshold([1, 20, 4, 10], 5) sese """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,smo_Latn,python,"

def add(x: int, y: int):
    """"""Faʻaopoopo ni numera se lua x ma le y >>> faʻaopoopo le 2 i le 3 i le 5 >>> faʻaopoopo le 5 i le 7 i le 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,smo_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Siaki pe tutusa mataitusi o upu e lua. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Moni >>> same_chars (('abcd', 'dddddddabc') Moni >>> same_chars (('dddddddabc', 'abcd') Moni >>> same_chars (('eabcd', 'dddddddabc') Sese >>> same_chars ((('abcd', 'dddddddabc') Sese >>> same_chars ((('abcdzzzz', 'dddzzzzzzdddabc') Sese """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,smo_Latn,python,"

def fib(n: int):
    """"""Toe foi numera n-th Fibonacci. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,smo_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets o se manoa o ""<"" ma le "">"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,smo_Latn,python,"

def monotonic(l: list):
    """"""Toe foi Moni o elemene lisi ua monotonically faateleina po o le faaitiitia. >>> monotonically (([1, 2, 4, 20]) Moni >>> monotonically (([1, 20, 4, 10]) Sese >>> monotonically (([4, 1, 0, -10]) Moni """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,smo_Latn,python,"

def common(l1: list, l2: list):
    """"""Toe foi mai faavasegaina elemene masani tulaga ese mo lisi e lua. >>> masani (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> masani (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,smo_Latn,python,"

def largest_prime_factor(n: int):
    """"""Toe faafoi le vaega autu aupito tele o le n. Manatu n > 1 ma e le o se vaega autu. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,smo_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n o se galuega tauave e aoteleina numera mai le 1 i le n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,smo_Latn,python,"

def correct_bracketing(brackets: str):
    """"""brackets o se manoa o ""("" ma le "")"". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") True >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,smo_Latn,python,"

def derivative(xs: list):
    """"""xs faatusa coefficients o se polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Toe faafoi mai le faauigaga o lenei polynomial i le faiga lava lea e tasi. >>> faauigaga (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> faauigaga (([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,smo_Latn,python,"

def fibfib(n: int):
    """"""O le faasologa o numera FibFib o se faasologa e tutusa ma le faasologa Fibbonacci ua faamatalaina e faapea: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Faamolemole tusi se galuega tauave e fuafua lelei le n-th elemene o le faasologa o numera fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,smo_Latn,python,"
FIX = """"""Tusi se galuega tauave vowels_count lea e ave se manoa o loo fai ma sui o se upu e avea o se sao ma toe foi mai le aofai o vowels i le manoa. vowels i lenei tulaga o 'a', 'e', 'i', 'o', 'u'. iinei, 'y' o se vowel foi, ae na o le taimi o loo i le faaiuga o le upu ua tuuina mai. faataitaiga: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Faaopoopo nisi suʻega. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,smo_Latn,python,"
def circular_shift(x, shift):
    """"""Faʻataʻamilo faʻasolosolo le numera o le integer x, faʻasolosolo le numera i le taumatau e ala i le faʻasolosolo ma toe faʻafoʻi le iʻuga o se manoa. Afai shift > numera o numera, toe faʻafoʻi numera faʻasolosolo. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,smo_Latn,python,"
def digitSum(s):
    """"""Galuega tauave Tusi se galuega tauave e ave se manoa o se sao ma toe foi mai le aofaiga o le tagata pito i luga na o 'code ASCII. Faataitaiga: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,smo_Latn,python,"
def fruit_distribution(s,n):
    """"""I lenei galuega, o le a tuuina atu ia te oe se manoa e fai ma sui o se aofai o apu ma moli ua tufatufaina i se ato o fualaau aina lenei ato o loo i ai apu, moli, ma fua mango. tuuina atu i le manoa e fai ma sui o le aofaiga atoa o le moli ma apu ma se integer e fai ma sui o le aofaiga atoa o le fua i le ato toe foi mai le aofai o le fua o mango i le ato. mo examble: fruit_distribution""5( apu ma 6 moli"", 19) -> 19 - 5 - 6 = 8 fua_distribution""0 apu ma 1 moli"",3) -> 3 - 0 - 1 = 2 fua_distribution""2 apu ma 3 moli"", 100) -> 100 - 2 - 3 = 95 fua_distribution""100 apu ma 1 moli"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,smo_Latn,python,"
def pluck(arr):
    """"""""A tuuina atu se faasologa e fai ma sui o se paranesi o se laau o loo i ai node integer lē lelei o lau galuega o le toso se tasi o le nodes ma toe foi atu. e tatau ona avea le node toso ma le taua e oo lava i le laitiiti. pe afai e maua nodes tele ma le taua e oo lava i le tasi laitiiti toe foi mai le node ua i ai le faasino upu laitiiti. e tatau ona toe foi mai le node toso i se lisi, [small_value, lona faasino upu ], pe afai e leai ni tulaga faatauaina e oo lava po o le tuuina atu faasologa o gaogao, toe foi []. faataitaiga 1: sao: [4,2,3] galuega faatino: [2, 1] Faamatalaga: 2 ei ai le taua e oo lava i le laitiiti, ma le 2 ei ai le faasino upu laitiiti. faataitaiga 2: sao: [1,2,3] galuega faatino: [2, 1] Faamatalaga: 2 ei ai le taua e oo lava i le laitiiti, ma le 2 ei ai le faasino upu laitiiti. faataitaiga 3: sao: [] galuega faatino: [] [] sao: [4: [5, 3] [0, 4] sao: [0, 2 galuega faatino: 1] galuega faatino: 0: o le node e sili ona laitiiti o le faasino upu, o le taua o le laitiiti. faataitaiga: o le node muamua o le a le aupito itiiti o le taua, ae o le zero. o le faasino upu muamua, o le faasino upu o le taua o le itiiti ifo i le faasino upu o le.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,smo_Latn,python,"
def search(lst):
    '''E tuuina atu ia te oe se lisi e le o gaogao o integers lelei. Toe foi le integer aupito tele e sili atu nai lo le zero, ma ua i ai se taimi e sili atu nai lo po o le tutusa i le taua o le integer lava ia. O le taimi o se integer o le aofai o taimi e foliga mai i le lisi. Afai e leai se taua e pei o loo i ai, toe foi -1. faataitaiga: saili (([4, 1, 2, 2, 3, 1]) == 2 saili (([1, 2, 2, 3, 3, 3, 4, 4]) == 3 saili (([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,smo_Latn,python,"
def strange_sort_list(lst):
    '''Tuuina atu le lisi o integers, toe foi lisi i le faasologa ese. faavasegaina ese, o le taimi e amata i le taua aupito i maualalo, ona maualuga o le integers totoe, lea aupito i maualalo ma isi. faataitaiga: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,smo_Latn,python,"
def triangle_area(a, b, c):
    '''Tuuina atu le umi o le itu e tolu o se tafatolu. Toe foi le vaega o le tafatolu faataamilo i le 2 decimal manatu pe afai o le itu e tolu faia se tafatolu aloaia. ese toe foi -1 Tolu itu faia se tafatolu aloaia pe afai o le aofaiga o so o se itu e lua e sili atu nai lo le itu lona tolu. Faataitaiga: tafatolu_area(3, 4, 5) == 6.00 tafatolu_area(1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,smo_Latn,python,"
def will_it_fly(q,w):
    '''Tusi se galuega tauave e toe foi moni pe afai o le a felelei mea q, ma sese i se isi. O le a felelei mea q pe afai e palindromic (o se lisi palindromic) ma le aofaiga o lona elemene e itiiti ifo nai lo po o tutusa le mamafa aupito maualuga e mafai w. faataitaiga: will_it_fly (([1, 2], 5) â -> sese # 1 + 2 e itiiti ifo nai lo le mamafa aupito maualuga e mafai, ae e le paleni. will_it_fly (([3, 2, 3], 1) â -> sese # e paleni, ae 3 + 2 + 3 e sili atu nai lo le mamafa aupito maualuga e mafai. will_it_fly (([3, 2, 3], 9) â -> moni # 3 + 2 3 e itiiti ifo nai lo le mamafa aupito maualuga e mafai, ma e paleni. will_it_fly ((([3], 5) â -> moni # 3 e itiiti ifo nai lo le mamafa aupito maualuga e mafai, ma e paleni '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,smo_Latn,python,"
def smallest_change(arr):
    """"""Tuuina atu se faasologa o integer, saili le numera aupito maualalo o elemene e manaomia ona suia ina ia faia palindromic le faasologa. O se palindromic faasologa o se faasologa e faitau i tua ma luma e tasi. I se tasi suiga, e mafai ona suia se tasi elemene i so o se isi elemene. Mo se faataitaiga: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,smo_Latn,python,"
def total_match(lst1, lst2):
    '''Tusi se galuega tauave e taliaina lua lisi o manoa ma toe foi mai le lisi o loo i ai le aofaiga atoa o chars i le manoa uma o le lisi itiiti ifo nai lo le isi lisi. pe afai o le lisi e lua i ai le aofaiga lava lea e tasi o chars, toe foi mai le lisi muamua. faataitaiga total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['i', 'hi', 'hi']) â -> ['i', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['i'] ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,smo_Latn,python,"
def is_multiply_prime(a):
    """"""Tusi se galuega tauave e toe foi moni pe afai o le numera ua tuuina mai o le faateleina o le 3 numera autu ma sese isi. Iloa o (a) e itiiti ifo nai lo 100. faataitaiga: is_multiply_prime(30) == moni 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,smo_Latn,python,"
def is_simple_power(x, n):
    """"""O lau galuega o le tusia lea o se galuega tauave e toe faafoi mai ai le moni pe afai o se numera x o se tulaga faigofie o le n ma sese i isi tulaga. x o se tulaga faigofie o le n pe afai n**int=x Mo se faataitaiga: is_simple_power(1, 4) => moni is_simple_power(2, 2) => moni is_simple_power(8, 2) => moni is_simple_power(3, 2) => sese is_simple_power(3, 1) pepelo => is_simple_power(5, 3) => pepelo """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,smo_Latn,python,"
def iscube(a):
    '''Tusi se galuega tauave e ave se integer a ma toe foi moni pe afai o lenei ingeger o se kupita o nisi integer numera. Faaaliga: e mafai ona e manatu o le sao e aloaia i taimi uma. Faataitaiga: iscube(1) ==> moni iscube(2) ==> sese iscube(-1) ==> moni iscube(64) ==> moni iscube(0) ==> moni iscube(180) ==> sese '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,smo_Latn,python,"
def hex_key(num):
    """"""Ua tofia oe e tusi se galuega tauave e maua ai se numera hexadecimal o se manoa ma faitauina le aofai o hexadecimal digits e muamua (numera muamua, po o se muamua, o se numera moni e sili atu nai lo le 1 e le o se oloa o le lua laiti numera moni). hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Numera muamua e 2, 3, 5, 7, 11, 13, 17,... O lea e tatau ona e fuafuaina se numera o le numera nei: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13). Faʻaaliga: e mafai ona e manatu o le sao o taimi uma saʻo pe leai se manoa, ma faailoga A, B, C, D, E, F, e masani lava uppercase. Faataitaiga: Mo num ""AB"" le galuega faatino e tatau ona num = 1. Mo num = 1077E ""o le galuega faatino e tatau ona 2. Mo num = ""AB33"" AED1 tatau ona num = 4. ""ABC"" tatau ona 6.0128945 ""A"" mo le galuega faatino e tatau ona 2.2020 ""EFD""""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,smo_Latn,python,"
def decimal_to_binary(decimal):
    """"""O le a tuuina atu se numera i decimal faiga ma o lau galuega o le liliu atu i faatulagaga binary. e tatau ona toe foi mai le galuega tauave a manoa, ma faailoga taitasi e fai ma sui o se numera binary. o le a '0' po o le '1' taitasi uiga i le manoa. o le a i ai se ulugalii faaopoopo o tagata 'db' i le amataga ma le faaiuga o le manoa. o loo i ai le tagata faaopoopo e fesoasoani i le faatulagaga. faataitaiga: decimal_to_binary ((15) # toe foi mai ""db1111db"" decimal_to_binary32) # toe foi mai ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,smo_Latn,python,"
def is_happy(s):
    """"""Ua tuuina atu ia te oe se manoa s. O lau galuega o le siaki pe o le manoa e fiafia pe leai. O se manoa e fiafia pe afai o lona umi e le itiiti ifo i le 3 ma o le 3 mataitusi sosoo eseese faataitaiga: is_happy(a) => sese is_happy(aa) => sese is_happy(abcd) => moni is_happy(aabb) => sese is_happy(adb) => moni is_happy(xyy) => sese """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,smo_Latn,python,"
def numerical_letter_grade(grades):
    """"""O le vaiaso mulimuli o le semesa ma e tatau ona tuuina atu e le faiaoga le togi i tamaiti aoga. ua faia e le faiaoga lona lava algorithm mo le faatulagaga. O le faafitauli na o le, ua leiloa le tulafono lea na ia faaaogaina mo le faatulagaga. ua ia tuuina atu ia te oe se lisi o GPA mo nisi tamaiti ma e tatau ona e tusia se galuega tauave e mafai ona galuega faatino se lisi o togi tusi faaaogaina le laulau lenei: GPA. tusi togi 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,smo_Latn,python,"
def prime_length(string):
    """"""Tusi se galuega tauave e ave se manoa ma toe foi moni pe afai o le umi manoa o se numera muamua po o sese i se isi tulaga faataitaiga prime_length (('Talofa') == moni prime_length (('abcdcba') == moni prime_length (('kittens') == moni prime_length (('orange') == sese """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,smo_Latn,python,"
def starts_one_ends(n):
    """"""Tuuina atu se integer lelei n, toe foi mai le faitauga o le numera o le integer lelei n-digit e amata pe faaiuina i le 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,smo_Latn,python,"
def solve(N):
    """"""Tuuina atu se integer lelei N, toe foi le aofaiga atoa o lona digits i binary. faataitaiga Mo N = 1000, o le aofaiga o digits o le a 1 le galuega faatino e tatau ona ""1"". Mo N = 150, o le aofaiga o digits o le a 6 le galuega faatino e tatau ona ""110"". Mo N = 147, o le aofaiga o digits o le a 12 le galuega faatino e tatau ona ""1100"". fesuiaʻi: @N integer constraints: 0 â‰¤ N â‰¤ 10000. galuega faatino: se manoa o numera binary """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,smo_Latn,python,"
def add(lst):
    """"""Tuuina atu se lisi e le o gaogao o integers lst. faaopoopo le elemene e oo lava i ai i indices ese .. faataitaiga: faaopoopo (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,smo_Latn,python,"
def anti_shuffle(s):
    """"""Tusi se galuega tauave e ave se manoa ma toe foi mai se faatulagaina lomiga o le. faatulagaina lomiga o manoa, o se manoa lea upu uma (vaevaeina i avanoa) ua suia i se upu fou lea ua faatulagaina i le faasologa o le alu aʻe o tagata uma e faavae i luga o le taua ascii. Manatua: E tatau ona e tausia le faatulagaga o upu ma avanoa avanoa i le fuaiupu. Mo se faataitaiga: anti_shuffle ((('Hi') toe foi mai 'Hi' anti_shuffle ((('alofa') toe foi mai 'ehllo' anti_shuffle (('Talofa Lalolagi!!!') toe foi mai 'Talofa !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,smo_Latn,python,"
def get_row(lst, x):
    """"""E tuuina atu ia te oe se 2 faamatalaga faatafa, e pei o se lisi nested, lea e tutusa ma le matrix, peitai, e le pei o matrix, e mafai ona aofia ai laina taitasi se aofai eseese o koluma. tuuina lst, ma integer x, saili integers x i le lisi, ma toe foi lisi o tuples, [(x1, y1), (x2, y2) ...] e pei o tuple taitasi o se faamaopoopoga - (laina, koluma), e amata i le 0. faatulaga faamaopoopoga muamua e ala i laina i le faasologa o le alu aʻe. foi, faatulaga faamaopoopoga o le laina e ala i koluma i le faasologa o le alu ifo. faataitaiga: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [0, 0, 0, 0, 1, 4], 0 (2, 5), (2, 0) get_(], 1) [] == == [0, 1, 2, 3, 2], [2, 3] == ==""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,smo_Latn,python,"
def sort_array(array):
    """"""Tuuina atu se faasologa o le lē-leaga integers, toe foi se kopi o le faasologa tuuina atu ina ua uma ona faavasegaina, o le a outou faavasega le faasologa tuuina i le faasologa o le alu aʻe pe afai o le aofaiga ((muamua taua faasino upu, taua faasino upu mulimuli) e le tutusa, po o le faavasega i le faasologa o le alu ifo pe afai o le aofaiga ((muamua taua faasino upu, taua faasino upu mulimuli) e oo lava. Faaaliga: * aua le suia le faasologa tuuina. Faataitaiga: * sort_array[(]) => [] * sort_array([5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,smo_Latn,python,"
def encrypt(s):
    """"""Fausia se galuega tauave encrypt e ave se manoa o se finauga ma toe foi mai se manoa encrypted ma le alafapeta ua feauauai. e tatau ona feauauai le alafapeta i se auala e faapea o le tusi siitia i lalo e lua faateleina i nofoaga e lua. Mo se faataitaiga: encrypt('hi') toe foi mai 'lm' encrypt('asdfghjkl') toe foi mai 'ewhjklnop' encrypt('gf') toe foi mai 'kj' encrypt('et') toe foi mai 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,smo_Latn,python,"
def next_smallest(lst):
    """"""Ua tuuina atu ia te oe se lisi o integers. Tusi se galuega tauave next_smallest (() e toe foi le elemene aupito itiiti 2 o le lisi. Toe foi leai pe afai e leai se elemene. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == leai next_smallest (([1, 1]) == leai """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,smo_Latn,python,"
def is_bored(S):
    """"""O le a tuuina atu ia te oe se faasologa o upu, ma o lau galuega o le faitau lea o le aofai o le le fiafia. O le le fiafia o se fuaiupu e amata i le upu ""I"". Fuaiupu ua delimited e '.', '?' po o le '!'. Mo se faataitaiga: >>> ua_le fiafia(""Talofa lalolagi"") 0 >>> ua_le fiafia(""O le lagi e lanumoana. ua susulu le la. ou te fiafia i lenei tau"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,smo_Latn,python,"
def any_int(x, y, z):
    '''Fausia se galuega tauave e ave 3 numera. Toe foi moni pe afai o se tasi o le numera e tutusa i le aofaiga o le isi lua, ma o numera uma o integers. Toe foi sese i so o se isi tulaga. Faataitaiga any_int{5, 2, 7) â -> Moni any_int{3, 2, 2) â -> Sese any_int{3, -2, 1) â -> Moni any_int{3.6, -2.2, 2) â -> Sese '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,smo_Latn,python,"
def encode(message):
    """"""Tusi se galuega tauave e ave se savali, ma encodes i se auala e fesuiaʻi ai tulaga o tusi uma, suia uma vowels i le savali i le tusi e foliga mai 2 nofoaga i luma o lena vowel i le alafapeta gagana Peretania. Manatu na o tusi. Faataitaiga: >>> encode('test') 'TGST' >>> encode('O se savali lenei') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,smo_Latn,python,"

def skjkasdkd(lst):
    """"""E tuuina atu ia te oe se lisi o integers. E tatau ona e maua le taua autu aupito tele ma toe foi mai le aofaiga o lona digits. faataitaiga: Mo lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] le galuega faatino e tatau ona 10 Mo lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] le galuega faatino e tatau ona 25 Mo lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] le galuega faatino e tatau ona 13 Mo lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] le galuega faatino e tatau ona 11 Mo lst = [0,81,12,31,21] le galuega faatino e tatau ona 3 Mo lst = [0,8,1,2,1,7] le galuega faatino e tatau ona  7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,smo_Latn,python,"
def check_dict_case(dict):
    """"""Tuuina atu se lomifefiloi, toe foi moni pe afai o ki uma o manoa i mataitusi laiti po o ki uma o manoa i mataitusi tetele, isi toe foi sese. e tatau ona toe foi mai le galuega tauave sese o le lomifefiloi ua tuuina atu e gaogao. faataitaiga: siaki_dict_case{""a"":"" apu"", ""b"":"" faʻi""}) e tatau ona toe foi moni. siaki_dict_case{""a"":"" apu"", ""A"":"" faʻi"", ""B"":"" faʻi""}) e tatau ona toe foi sese. siaki_dict_case{""a"":"" apu"", 8:"" faʻi"", ""a"":"" apu""}) e tatau ona toe foi sese. siaki_dict_case{""igoa"":"" Ioane"", ""tausaga"":"" 36"", ""City"":"" Houston""}) e tatau ona toe foi sese. siaki_dict_case{""NC"":"" STATE"", ""Z"":"" ZIP""45"") e tatau ona toe foi moni.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,smo_Latn,python,"
def count_up_to(n):
    """"""Faʻatino se gaioiga e ave ai se le-leaga integer ma toe faʻafoʻi mai se faʻasologa o le muamua n integers o numera muamua ma laʻititi atu nai lo n. mo se faʻataʻitaʻiga: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,smo_Latn,python,"
def multiply(a, b):
    """"""Faatumu le galuega tauave e lua integers ma toe foi mai le oloa o latou iunite digits. Manatu o le sao e aloaia i taimi uma. Faataitaiga: faateleina ((148, 412) e tatau ona toe foi 16. faateleina ((19, 28) e tatau ona toe foi 72. faateleina ((2020, 1851) e tatau ona toe foi 0. faateleina ((14,-15) e tatau ona toe foi 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,smo_Latn,python,"
def count_upper(s):
    """"""Tuuina atu se manoa s, faitau le aofai o uppercase vowels i faasino igoa e oo lava. Mo se faataitaiga: count_upper (('aBCdEf') toe foi 1 count_upper (('abcdefg') toe foi 0 count_upper (('dBBE') toe foi 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,smo_Latn,python,"
def closest_integer(value):
    '''Fausia se galuega tauave e ave se taua (string) e fai ma sui o se numera ma toe faafoi le integer latalata i ai. Afai o le numera e equidistant mai lua integers, faataamilo ese mai le zero. Faataitaiga >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Faʻaaliga: Faʻataʻamilo ese mai le zero o lona uiga afai o le numera ua tuuina atu e equidistant mai lua integers, o le tasi e tatau ona e toe foi mai o le tasi e sili ona mamao mai le zero. Mo faataitaiga closest_integer "" ((14.5"") e tatau ona toe foi mai 15 ma closest_integer "" ((-14.5"") e tatau ona toe foi -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,smo_Latn,python,"
def make_a_pile(n):
    """"""Tuuina atu se integer lelei n, e tatau ona e faia se faaputuga o n tulaga o maa. O le tulaga muamua ua n maa. O le aofai o maa i le tulaga e sosoo ai o le: - le numera sosoo le mautonu pe afai n e le mautonu. - le numera sosoo pea pe afai n e oo lava. Toe foi le aofai o maa i tulaga taitasi i se lisi, lea elemene i faasino upu ou faatusa i le aofai o maa i le tulaga (i + 1). faataitaiga: >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,smo_Latn,python,"
def words_string(s):
    """"""O le a tuuina atu ia te oe se manoa o upu tuueseeseina e commas po o avanoa. O lau galuega o le vaeluaina o le manoa i upu ma toe foi mai se faasologa o le upu. Mo se faataitaiga: words_string ((""Talofa, o loʻu igoa o John"") == [""Talofa"", ""loʻu"", ""igoa"", ""o"", ""John""] words_string ((""Tasi, lua, tolu, fa, lima, ono"") == [""Tasi"", ""lua"", ""tolu"", ""fa"", ""lima"", ""ono""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,smo_Latn,python,"
def choose_num(x, y):
    """"""O lenei galuega tauave e lua numera lelei x ma y ma toe foi mai le tele tele integer e oo lava i le tele [x, y] aofia ai. Afai e leai se numera, lea e tatau ona toe foi mai galuega tauave -1. Mo se faataitaiga: filifili_num(12, 15) = 14 filifili_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,smo_Latn,python,"
def rounded_avg(n, m):
    """"""E tuuina atu ia te oe lua integers lelei n ma m, ma o lau galuega o le fuafua le averesi o le integers mai n e ala i m (e aofia ai n ma m). Faataamilo le tali i le integer latalata ma liliu atu i binary. Afai n e sili atu nai lo m, toe foi -1. faataitaiga: rounded_avg(1, 5) => ""0b11"" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => ""0b1111"" rounded_avg(20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,smo_Latn,python,"
def unique_digits(x):
    """"""Tuuina atu se lisi o integers lelei x. toe foi se lisi faatulagaina o elemene uma e le o so o se digit lava. Faamatalaga: e tatau ona faatulaga lisi toe foi i faateleina ina. Mo se faataitaiga: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,smo_Latn,python,"
def by_length(arr):
    """"""Tuuina atu se faasologa o integers, faavasega le integers o loo i le va o le 1 ma le 9 e aofia ai, fesuiaʻi le faasologa o taunuuga, ma suia lea o le numera taitasi i lona igoa tutusa mai le ""tasi"", ""lua"", ""tolu"", ""fa"", ""lima"", ""ono"", ""fitu"", ""valu"", ""iva"". Mo se faataitaiga: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> faavasega arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> faafeagai arr -> [8, 5, 4, 3, 2, 2, 1, 1] toe foi [""Valu"", ""fa"", ""tolu"", ""lua"", ""lua"", ""tasi"", ""tasi""] Afai o le faasologa o le gaogao, toe foi se faasologa: arr = [] toe foi [] Afai o le faasologa ei ai so o se numera ese le amanaiaina: arr = [1, 1 , 55] -> arr -> [1, 1 , 55] -> faafeagai arr = [51] - 'tasi' ] toe foi [' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,smo_Latn,python,"
def f(n):
    """"""Faatino le galuega tauave f e ave n o se parameter, ma toe foi mai se lisi o le tele n, e faapea o le taua o le elemene i faasino upu i le factorial o i pe afai i e oo lava po o le aofaiga o numera mai le 1 e i isi. i amata mai le 1. le factorial o i o le faateleina o le numera mai le 1 e i (1 * 2 * ... * i). faataitaiga: f(5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,smo_Latn,python,"
def even_odd_palindrome(n):
    """"""Tuuina atu se integer lelei n, toe foi mai se tuple o loo i ai le aofai o palindromes integer pea ma le ese e pauu i totonu o le tele ((1, n), e aofia ai. faataitaiga1: sao: 3 Galuega Faatino: (1, 2) Faamatalaga: Palindromes integer e 1, 2, 3. o se tasi o latou e oo lava, ma e lua o latou e ese. faataitaiga2: sao: 12 Galuega Faatino: (4, 6) Faamatalaga: Palindromes integer e 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. fa o latou e oo lava, ma le 6 o latou e ese. Faʻaaliga: 1. 1 <= n <= 10 ^ 3 2. tuple ua toe foi mai le aofai o palindromes integer pea ma ese, faasologa. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,smo_Latn,python,"
def count_nums(arr):
    """"""Tusi se galuega tauave count_nums lea e ave se faasologa o integers ma toe foi mai le aofai o elemene lea ei ai se aofaiga o digits > 0. Afai o se numera o le lelei, lea o le a le lelei lona muamua sainia digit: eg -123 ua sainia digits -1, 2, ma 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,smo_Latn,python,"
def move_one_ball(arr):
    """"""O le a maua se 'arr' o N integers arr[1], arr[2], ..., arr[N].O le a faasologa faasolosolo le numera i le faasologa. O lau galuega o le fuafua pe mafai ona maua se faasologa faatulagaina i le lē faaitiitia e ala i le faatinoina o le taotoga lenei i luga o le faasologa tuuina: E faatagaina oe e faatino gaoioiga saʻo suiga i soo se numera o taimi. O se tasi gaoioiga saʻo suiga o lona uiga o le siitia elemene uma o le faasologa e ala i se tasi tulaga i le itu taumatau. O le elemene mulimuli o le faasologa o le a siitia i le tulaga amata i le faasologa o lona uiga 0th. Afai e mafai ona maua le faasologa faatulagaina e ala i le faatinoina o le faagaoioiga i luga ona toe foi moni isi toe foi sese. Afai o le faasologa tuuina ua gaogao ona toe foi moni. Faamatalaga: ua faamaonia le lisi tuuina atu i ai elemene tulaga ese. Mo se faataitaiga: move_one_(ball[3, 4, 5, 2]==Faamatalaga: Faʻamatalaga: E ala i le performin 2 gaoioiga saʻo, e mafai ona ausia non-faaitiitia le faatulagaga mo le faasologa faatulagaina e ala i le faasologa tuuina atu.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,smo_Latn,python,"
def exchange(lst1, lst2):
    """"""I lenei faafitauli, o le a outou faatinoina se galuega tauave e lua lisi o numera, ma fuafuaina pe e mafai ona faatino se fesuiaiga o elemene i le va i latou e faia lst1 se lisi o le na o numera taitoalua. E leai se tapulaa i luga o le aofai o elemene fesuiaiga i le va o lst1 ma lst2. Afai e mafai ona fesuiai elemene i le va o le lst1 ma lst2 e faia elemene uma o lst1 e taitoalua, toe foi ""Ioe"". ese, toe foi ""Leai"". Mo se faataitaiga: fesuiaiga [(1, 2, 3, 4], [1, 2, 3, 4]) => ""Ioe"" fesuiaiga [(1, 2, 3, 4], [1, 5, 3, 4]) => ""Leai"" Ua manatu o le a lē gaogao lisi sao. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,smo_Latn,python,"
def histogram(test):
    """"""Tuuina atu se manoa e fai ma sui o se avanoa tuueseeseina lowercase tusi, toe foi mai se lomifefiloi o le tusi ma le toe faia o le tele ma o loo i ai le numera e tutusa. Afai e tele mataitusi i ai le mea lava lea e tasi, toe foi mai i latou uma. Faataitaiga: histogram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram ((('a b b a') == {'a': 2, 'b': 2} histogram ((('a b c a b') == {'a': 2, 'b': 2} histogram ((('b b a') == {'b 4}: histogram ' (((') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,smo_Latn,python,"
def reverse_delete(s,c):
    """"""Galuega ua tuuina mai ia i tatou e lua manoa s ma c, e tatau ona e aveesea uma le tagata i s e tutusa i so o se tagata i c ona siaki pe afai o le manoa taunuuga o palindrome. ua taʻua o se manoa palindrome pe afai e faitau i le tutusa i tua i luma. E tatau ona e toe foi atu se tuple o loo i ai le manoa taunuuga ma Moni / sese mo le siaki. faataitaiga Mo s = ""abcde"", c = ""ae"", o le taunuuga e tatau ona ('bcd', Sese) Mo s = ""abcdef"", c = ""b"" o le taunuuga e tatau ona ('acdef', Sese) Mo s = ""abcdedcba"", c = ""ab"", o le taunuuga e tatau ona ('cdedc', Moni) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,smo_Latn,python,"
def odd_count(lst):
    """"""Tuuina atu se lisi o manoa, lea e aofia ai manoa taitasi na o le digits, toe foi se lisi. tatau ona elemene taitasi i o le galuega faatino ""o le aofai o elemene ese i le manoa i o le sao. "" lea e tatau ona suia i uma e le i e ala i le aofai o le manoa ese i le manoa i'th o le sao. >>> odd_count ['1234567']) [""o le aofai o elemene ese 4n le str4ng 4 o le 4nput.""] >>> odd_count ['3', ""111111""]) [""o le aofai o elemene ese 1n le str1ng 1 o le 1nput."", ""o le aofai o elemene ese 8n le str8ng 8 o le 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,smo_Latn,python,"
def minSubArraySum(nums):
    """"""Tuuina atu se faasologa o integers nums, saili le aofaiga aupito maualalo o so o se lē gaogao sub-array o nums. faataitaiga minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,smo_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Ua tuuina atu ia te oe se grid faatafafā lē tutusa o vaieli. O laina taitasi e fai ma sui o se vaieli e tasi, ma o le 1 i le laina e fai ma sui o se iunite e tasi o le vai. O vaieli taitasi ei ai se pakete e tutusa e mafai ona faaaogaina e aveesea ai le vai mai ai, ma pakete uma ei ai le tulaga lava e tasi. O lau galuega o le faaaogaina o le pakete e faʻavaivaia ai le vaieli. Galuega faatino le aofai o taimi e te manaomia e tuu i lalo le pakete. Faataitaiga 1: sao: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 galuega faatino: 62: sao: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 galuega faatino: 53: sao: [[:0,0,0], [0,0]] bucket_capacity: 5 galuega faatino: 0: 0 * constraints: 1 * * * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * * 1 * 2 * * * * * 2 * * * * * * * * 2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,smo_Latn,python,"
def sort_array(arr):
    """"""I lenei Kata, e tatau ona e faavasega se faasologa o le lē-leaga integers e tusa ai ma le aofai o le tasi i lo latou faatusa binary i faasologa faatupulaia. Mo le aofai tutusa o le tasi, faavasega faavae i luga o le taua decimal. E tatau ona faatinoina e pei o lenei: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,smo_Latn,python,"
def select_words(s, n):
    """"""Tuuina atu se manoa s ma se numera moni n, ua tofia oe e faatino se galuega tauave e toe foi mai se lisi o upu uma mai manoa s o loo i ai tonu n consonants, ina ia nei upu foliga mai i le manoa s. Afai o le manoa s o gaogao lea e tatau ona toe foi mai le galuega tauave se lisi gaogao. Faamatalaga: e mafai ona e manatu o le sao manoa o loo i ai na o tusi ma avanoa. Faataitaiga: select_words (((""Mary sa i ai se tamai mamoe"", 4) ==> [""tamai""] select_words (((""Mary sa i ai se tamai mamoe"", 3) ==> [""Mary"", ""tamai mamoe""] select_words"" (((puupuu papaʻe faigofie"", 2) ==> [] select_words (((""Talofa lalolagi"", 4) ==> [""lalolagi""] select_words (((""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,smo_Latn,python,"
def get_closest_vowel(word):
    """"""Ua tuuina atu ia te oe se upu. O lau galuega o le maua le vavalalata vowel e tu i le va o le lua consonants mai le itu taumatau o le upu (case sensitive). e le faitauina vowels i le amataga ma le faaiuga. toe foi manoa gaogao pe afai e te le maua so o se vowel feiloai le tulaga i luga. e mafai ona e manatu o le manoa tuuina atu o loo i ai na o le tusi le gagana Peretania. Faataitaiga: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""vave"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,smo_Latn,python,"
def match_parens(lst):
    '''Ua tuuina atu ia te oe se lisi o manoa e lua, e aofia uma manoa tatala puipui '(' po o le tapunia puipui ') ' na. O lau galuega o le siaki pe afai e mafai ona concatenate le manoa e lua i nisi o poloaiga, o le a lelei le manoa taunuuga. ua manatu se manoa S e lelei pe afai ma na o pe afai o paleni uma i S ua paleni. Mo se faataitaiga: o le manoa '((()) 'o le lelei, ao le manoa '()) 'e le. Toe foi 'Ioe' pe afai ei ai se auala e faia se manoa lelei, ma toe foi 'Leai' i se isi tulaga. Faataitaiga: match_parens[('() ', ') ']) == 'Ioe' match_parens[(') ', ') ']) == 'Leai' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,smo_Latn,python,"
def maximum(arr, k):
    """"""Tuuina atu se faasologa arr o integers ma se integer lelei k, toe foi se lisi faatulagaina o le umi k ma le tapulaa maualuga k numera i arr. faataitaiga1: sao: arr = [-3, -4, 5], k = 3 galuega faatino: [-4, -3, 5] faataitaiga2: sao: arr = [4, -4, 4], k = 2 galuega faatino: [4, 4] faataitaiga3: sao: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 galuega faatino: [2] Faʻaaliga: 1. o le umi o le faasologa o le a i le tele o [1, 1000]. 2. o le elemene i le faasologa o le a i le tele o [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,smo_Latn,python,"
def solution(lst):
    """"""Tuuina atu se lisi e le o gaogao o integers, toe foi le aofaiga o elemene uma o le ese o loo i tulaga e oo lava. faataitaiga fofo (([5, 8, 7, 1]) ==> 12 fofo (([3, 3, 3, 3, 3]) ==> 9 fofo (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,smo_Latn,python,"
def add_elements(arr, k):
    """"""Tuuina atu se lē gaogao faasologa o integers arr ma se integer k, toe foi le aofaiga o le elemene ma le sili atu i le lua digits mai le muamua k elemene o arr. faataitaiga: sao: arr = [111,21,3,4000,5,6,7,8,9], k = 4 galuega faatino: 24 # aofaiga o 21 + 3 constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,smo_Latn,python,"
def get_odd_collatz(n):
    """"""O le manatu o Collatz o se manatu i le matematika e faatatau i se faasologa ua faamatalaina e faapea: amata i so o se integer lelei n. Ona maua lea o le vaitaimi taitasi mai le vaitaimi muamua e faapea: pe afai o le vaitaimi muamua e tutusa, o le vaitaimi e sosoo ai o le afa o le vaitaimi muamua. Afai o le vaitaimi muamua e le tutusa, o le vaitaimi e sosoo ai o le 3 taimi le vaitaimi muamua faaopoopo 1. O le manatu e tusa lava po o le a le taua o le n, o le faasologa o le a taunuu i taimi uma 1. Faʻaaliga: 1. Collatz(1) o le [1] 2. toe foi lisi faatulagaina i le faateleina o le faasologa. Mo se faataitaiga: get_odd_collatz(5) toe foi [1, 5] # O le faasologa o collatz mo le 5 o le [5, 8, 16, 4, 2, 1], o lea o le numera ese e na o le 1, ma le 5. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,smo_Latn,python,"
def valid_date(date):
    """"""E tatau ona e tusia se galuega tauave e faamaonia ai se tuuina aso ma toe foi moni pe afai e aloaia le aso sese. e aloaia le aso pe afai ua faamalieina uma o tulafono nei: 1. e le o gaogao le aso maea. 2. e le itiiti ifo i le 1 po o le sili atu i le 31 aso mo masina 1,3,5,7,8,10,12. ma le aofai o aso e le itiiti ifo i le 1 po o le sili atu i le 30 aso mo masina 4,6,9,11. ma, o le aofai o aso e le itiiti ifo i le 1 po o le sili atu i le 29 mo le masina 2. 3. e le tatau ona itiiti ifo i le 1 po o le sili atu i le masina 12. e tatau ona i le aso i le faatulagaga: mm-dd-yyyy mo se faataitaiga: valid_date('03-11-2000') => valid_date('15-01-2012') => False valid_date('04-040') => False_date => valid_date => valid_date => valid_date => valid_date => valid_date""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,smo_Latn,python,"
def split_words(txt):
    '''Tuuina atu se manoa o upu, toe foi mai se lisi o upu vaeluaina i avanoa, pe afai e leai ni avanoa i le mau e tatau ona vaeluaina i commas ',' pe afai e leai ni commas e tatau ona toe foi mai le aofai o lowercase tusi ma faasologa ese i le alafapeta, ord (('a') = 0, ord ((('b') = 1, ... ord ((('z') = 25 Faataitaiga vaeluaina_upu ((""Talofa lalolagi!"") â -> [""Talofa"", ""lalolagi!""] vaeluaina_upu ((""Talofa, lalolagi!"") â -> [""Talofa"", ""lalolagi!"" vaeluaina_upu ((""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,smo_Latn,python,"
def is_sorted(lst):
    '''Tuuina atu se lisi o numera, toe foi pe o latou faatulagaina i le faasologa o le alu aʻe. Afai lisi e sili atu nai lo le 1 kopi o le numera lava lea e tasi, toe foi sese. Manatu leai ni numera le lelei ma na integers. faataitaiga is_sorted ((([5]) â -> Moni is_sorted (([1, 2, 3, 4, 5]) â -> Moni is_sorted (([1, 2, 3, 4, 5, 6]) â -> Sese is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> Moni is_sorted (([1, 3, 2, 3, 4, 5, 6, 7]) â -> Moni is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> Sese is_sorted (([1, 2, 2, 3, 3, 4]) â -> Moni is_sorted (([1, 2, 2, 3, 4 -> Sese ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,smo_Latn,python,"
def intersection(interval1, interval2):
    """"""E tuuina mai ia te oe ni vaeluaga e lua, lea vaeluaga taitasi o se paga o integers. Mo se faataitaiga, vaeluaga = (amata, iuga) = (1, 2). ua tapunia vaeluaga tuuina mai o lona uiga o le vaeluaga (amata, iuga) e aofia ai uma amataga ma le faaiuga. Mo vaeluaga taitasi tuuina atu, ua manatu o lona amataga e itiiti ifo po o le tutusa i lona iuga. o lau galuega o le iloa pe o le umi o le fetaulaiga o alalaupapa o nei vaeluaga e lua o se numera muamua. faataitaiga, o le fetaulaiga o alalaupapa (1, 3), (2, 4) o (2, 3) lea o lona umi o 1, lea e le o se numera muamua. Afai o le umi o le fetaulaiga o alalaupapa o se numera muamua, toe foi ""Ioe"", i se isi tulaga, toe foi ""leai"". Afai e le fetaulaiga o le vaeluaga e lua, toe foi ""leai"". [iuga / galuega faatinoga] faataitaiga: fetaulaiga o alalaupapa (((1, 2), (2, 3) ==> "">"" fetaulaiga o alalaupapa-1, ((1), 4) ==> "">"" (0, NO - 5> ==(1, - (((5,)) ""YES""""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,smo_Latn,python,"
def prod_signs(arr):
    """"""Ua tuuina atu ia te oe se faasologa arr o integers ma e tatau ona e toe foi aofaiga o le tele o integers faateleina i oloa o faailoga uma o numera taitasi i le faasologa, sui o le 1, -1 po o le 0. Faaaliga: toe foi leai se tasi mo arr gaogao. Faataitaiga: >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) == leai """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,smo_Latn,python,"
def minPath(grid, k):
    """"""O le auala e te alu ai i le grid e le o le auala e te alu ai i le grid. O se auala A (o le umi o le k) e manatu e laʻititi nai lo le auala B (o le umi o le k) pe a maeʻa ona faia le faʻasologa o lisi o tau i luga o sela e ui atu i le A ma le B (seʻi tatou valaʻau ia i latou o le l_st ma le l_stB), o le l_stA e itiiti ifo i le lexicographically nai lo le l_stB, i se isi faaupuga, o se integer i le grid. E mafai ona e amata mai soʻo se sela, ma i laʻasaga taʻitasi e mafai ona e alu i soʻo se sela tuaoi, i se isi faaupuga, e mafai ona e alu i sela e faʻasoa se pito ma oe i le taimi nei sela. Faʻamolemole ia matau o se auala o le umi o le k o lona uiga o le asiasi tonu k sela (e le o ese). E LE MAFAI alu ese mai le grid. O se auala A (o le umi o le k) e manatu e laʻititi nai lo se auala B (o le k) pe a maeʻo le faia o faʻasologa o lisi o tau i luga o sela e ui atu i le A ma le B (seʻia latou o le l_stA ma le l_stB), o le l_stB ma le l_stB), o le l_stA lexically itiiti ifo i le l_stB, o le l_stB, i le l_stB, i le l_stB_stB, i se isi faauputput i le auala laʻau, i le isi faaup i le k i le k i le_stB, i le_stB i le_stB, i le_st_st_st_st_st_ i le_st, i le_ i le_ i le_ i le_ i, i le_ i le_ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,smo_Latn,python,"
def tri(n):
    """"""O le faasologa o Fibonacci e iloa e tagata uma, sa suʻesuʻeina loloto e le au faʻatatau i le lua seneturi talu ai. Ae ui i lea, o le mea e le iloa e tagata o le faasologa o Tribonacci. O le faasologa o Tribonacci ua faʻamatalaina e le toe faia: tri(1) = 3 tri(n) = 1 + n / 2, pe afai o le n e tutusa. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), pe afai o le n e le tutusa. Mo se faʻataʻitaʻiga: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Ua tuʻuina atu ia te oe se numera le lelei o le numera n, e tatau ona e toe faafoi se lisi o numera muamua o le n + 1 o le faasologa o Tribonacci. Faataitaiga: tri(3) = [1, 3, 2, 8] """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,smo_Latn,python,"
def digits(n):
    """"""Tuuina atu se integer lelei n, toe foi le oloa o le digits ese. Toe foi 0 pe afai o le digit uma e oo lava. Mo se faataitaiga: digit{} 1) == 1 digit{} 4) == 0 digit{} 235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,smo_Latn,python,"
def is_nested(string):
    '''Fausia se galuega tauave e ave se manoa o le sao lea e na o le puipui faatafafa. e tatau ona toe foi mai le galuega tauave moni pe afai ma na o pe afai o loo i ai se suitaiga aloaia o puipui lea e le itiiti ifo i le tasi puipui i le suitaiga ua nested. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,smo_Latn,python,"

def sum_squares(lst):
    """"""E tuuina atu ia te oe se lisi o numera. E tatau ona e toe foi mai le aofaiga o le numera faatafafa i le lisi ua tuuina mai, faataamilo elemene taitasi i le lisi i le pito i luga int ((Luga) muamua. faataitaiga: Mo lst = [1,2,3] le galuega faatino e tatau ona 14 Mo lst = [1,4,9] le galuega faatino e tatau ona 98 Mo lst = [1,3,5,7] le galuega faatino e tatau ona 84 Mo lst = [1.4,4.2,0] le galuega faatino e tatau ona 29 Mo lst = [-2.4,1,1] le galuega faatino e tatau ona 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,smo_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Fausia se galuega tauave e toe foi moni pe afai o le uiga mulimuli o se manoa tuuina o se uiga alafapeta ma e le o se vaega o se upu, ma sese i se isi tulaga. Manatua: ""upu"" o se vaega o tagata tuueseeseina e avanoa. Faataitaiga: siaki_if_last_char_is_a_letter (((""apale pai"") â -> sese siaki_if_last_char_is_a_letter (((""apale pi e"") â -> moni siaki_if_last_char_is_a_letter (((""apale pi e "") â -> sese siaki_if_last_char_is_a_letter"" ((("") â -> sese '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,smo_Latn,python,"
def can_arrange(arr):
    """"""Fausia se galuega tauave e toe foi mai le faasino upu aupito tele o se elemene lea e le sili atu nai lo po o le tutusa i le elemene vave muamua atu i ai. Afai e leai se elemene o loo i ai lea toe foi -1. le a le aofia ai faatauaina faaluaina le faasologa tuuina. faataitaiga: can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,smo_Latn,python,"
def largest_smallest_integers(lst):
    '''Fausia se galuega tauave e toe foi mai se tuple (a, b), lea 'a' o le tele o integers le lelei, ma 'b' o le aupito itiiti o integers lelei i se lisi. Afai e leai se integers lelei po o le lelei, toe foi i latou e pei o leai. Faataitaiga: tele_le itiiti_integers [2, 4, 1, 3, 5, 7]) == (Leai, 1) tele_le itiiti_integers (([]) == (Leai, Leai) tele_le itiiti_integers (([0]) == (Leai, Leai) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,smo_Latn,python,"
def compare_one(a, b):
    """"""Fausia se galuega tauave e ave ai integers, floats, po o manoa e fai ma sui o numera moni, ma toe faafoi mai le fesuiaiga tele i lona ituaiga fesuiaiga tuuina. Toe foi leai se tasi pe afai e tutusa le tulaga faatauaina. Manatua: Afai o se numera moni o loo faatusaina o se manoa, o le manatu opeopea e mafai ona . po o , compare_one(1, 2.5) â -> 2.5 compare_one(1, ""2,3"") â -> ""2,3"" compare_one(""5,1"", ""6"") â -> ""6"" compare_one(""1"", 1) â -> leai """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,smo_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Iloilo pe mafai ona tusia le numera n ua tuuina mai e pei o le aofaiga o le tonu 4 numera lelei e oo lava i le lelei Faataitaiga is_equal_to_sum_even ((4) == sese is_equal_to_sum_even ((6) == sese is_equal_to_sum_even ((8) == moni """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,smo_Latn,python,"
def special_factorial(n):
    """"""O le Brazil factorial ua faamatalaina e pei: brazilian_factorial ((n) = n! * (n-1)! * (n-2)! * ... * 1! lea n > 0 Mo se faataitaiga: >>> special_factorial ((4) 288 O le galuega tauave o le a maua se integer o le sao ma e tatau ona toe foi atu i le factorial faapitoa o lenei integer. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,smo_Latn,python,"
def fix_spaces(text):
    """"""_Faataʻitaʻiga-3e mau manoa, suia avanoa uma i ai i lalo, ma afai o se manoa e sili atu i le 2 avanoa sosoo, ona suia avanoa sosoo uma i - fix_spaces (((""Faataitaiga"") == ""Faataitaiga"" fix_spaces (((""Faataitaiga1"") == ""Faataitaiga_1"" fix_spaces (((""Faataitaiga2"") == ""_Example_2"" fix_spaces (((""Faataitaiga 3"") == ""_Example-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,smo_Latn,python,"
def file_name_check(file_name):
    """"""Fausia se galuega tauave lea e ave se manoa e fai ma sui o se igoa o se faila, ma toe foi mai 'Ioe' pe afai e aoga le igoa o le faila, ma toe foi mai 'Leai' i se isi tulaga. O se igoa o le faila ua manatu e aoga pe afai ma na o pe afai ua ausia uma tulaga nei: - E le tatau ona sili atu nai lo le tolu digits ('0'-'9') i le igoa o le faila. - O le igoa o le faila o loo i ai tonu lava se tasi togi '.' - O le substring i luma o le togi e le tatau ona gaogao, ma e amata i se tusi mai le alafapeta Latina ('a'-'z' ma 'A'Z'-'). - O le substring ina ua mavae le togi e tatau ona avea o se tasi o nei: ['txt', 'exe', 'lld'] Faataitaiga: file_name_check""(example.txt"") # => 'Ioe' file_name_check""(example.dll1"") => 'Leai' (o le igoa e tatau ona amata i se tusi Latina)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,smo_Latn,python,"


def sum_squares(lst):
    """""""" O lenei galuega tauave o le a ave se lisi o integers. Mo le faamaumauga uma i le lisi, o le a le galuega tauave i le faatafafa le ulufale integer pe afai o lona faasino upu o se tele o le 3 ma o le a cube le ulufale integer pe afai o lona faasino upu o se tele o le 4 ma le o se tele o le 3. o le a le suia le galuega tauave o le faamaumauga i le lisi o lona faasino upu e le o se tele o le 3 po o le 4. o le a toe foi lea o le galuega tauave o le aofaiga o faamaumauga uma. faataitaiga: Mo lst = [1,2,3] le galuega faatino e tatau ona 6 Mo lst = [] le galuega faatino e tatau ona 0 Mo lst = [-1,-5,2,-1,-5] le galuega faatino e tatau ona -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,smo_Latn,python,"
def words_in_sentence(sentence):
    """"""Ua tuuina atu ia te oe se manoa e fai ma sui o se fuaiupu, o le fuaiupu o loo i ai nisi upu tuueseeseina e se avanoa, ma e tatau ona e toe foi se manoa o loo i ai le upu mai le fuaiupu uluai, o lona umi o numera muamua, o le poloaiga o le upu i le manoa fou e tatau ona tutusa ma le tasi uluai. faataitaiga1: sao: fuaiupu = ""o se suega lenei"" galuega faatino: ""o"" faataitaiga2: sao: fuaiupu = ""ia alu mo le aau"" galuega faatino: ""alu mo"" tapulaa: * 1 <= len(fuaiupu) <= 100 * fuaiupu o loo i ai na o tusi """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,smo_Latn,python,"
def simplify(x, n):
    """"""O lau galuega o le faatinoina o se galuega tauave o le a faafaigofie ai le faaupuga x * n. O le galuega tauave toe foi moni pe afai x * n iloiloina i se numera atoa ma sese i se isi tulaga. uma x ma n, o le sui manoa o se vaega, ma ua i ai le faatulagaga nei, <numerator> / <nomenina> lea uma numerator ma denominator e numera atoa lelei. E mafai ona e manatu o le x, ma n o vaega aoga, ma e le maua zero o se denominator. faafaigofie  ""1/5"", ""5/1"") = moni  ""1/6"", ""2/1"") = sese  ""7/10"", ""10/2"") = sese """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,smo_Latn,python,"
def order_by_points(nums):
    """"""Tusi se galuega tauave lea e faavasega ai le lisi o fuainumera e tusa ai ma le aofaiga o latou digits. Manatua: afai e tele aitema ma tutusa aofaiga o latou digits, faatulaga i latou e faavae i luga o latou faasino igoa i le lisi uluai. Mo se faataitaiga: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,smo_Latn,python,"
def specialFilter(nums):
    """"""Tusi se galuega tauave e ave se faasologa o numera e avea o se sao ma toe foi mai le aofai o elemene i le faasologa e sili atu i lo le 10 ma uma muamua ma le numera mulimuli o se numera e ese (1, 3, 5, 7, 9). Mo se faataitaiga: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,smo_Latn,python,"
def get_max_triples(n):
    """"""E tuuina atu ia te oe se integer lelei n. E tatau ona e fatuina se integer array a o le umi n. Mo i taitasi i (1 ‰¤ i ‰¤ n), o le taua o a[i] = i * i - i + 1. toe foi le aofai o triples (a[i], a[j], a[k]) o se lea i < j < k, ma a[i] + a[j] + a[k] o se tele o 3. faataitaiga: sao: n = 5 galuega faatino: 1 Faamatalaga: a = [1, 3, 7, 13, 21] O le na o le tolu aoga o (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,smo_Latn,python,"
def bf(planet1, planet2):
    '''E valu paneta i lo tatou faiga la: o le latalata i le la o Mercury, o le isi o Venus, ona Lalolagi, Mars, Jupiter, Saturn, Uranus, Neptune. Tusi se galuega tauave e lua paneta igoa o manoa paneta1 ma paneta2. e tatau ona toe foi mai le galuega tauave a tuple aofia ai paneta uma o le taamilosaga o loo tu i le va o le taamilosaga o paneta1 ma le taamilosaga o paneta2, faatulagaina e ala i le latalata i le la. e tatau ona toe foi mai le galuega tauave a tuple gaogao pe afai paneta1 po paneta2 e le o igoa paneta saʻo. faataitaiga bf ""(Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"") bf (((""Lalolagi"", ""Mercury"") ==> (""Venus"") bf (((""Mercury"", ""Uranus"") ==> (""Venus"", ""Lalolagi"", ""Mars"", ""Jupiter"", ""Sn"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,smo_Latn,python,"
def sorted_list_sum(lst):
    """"""Tusi se galuega tauave e talia se lisi o manoa o se parameter, aveesea le manoa o loo i ai umi ese mai ai, ma toe foi mai le lisi taunuuga ma se poloaiga faatulagaina, O le lisi o taimi uma o se lisi o manoa ma e le o se faasologa o numera, ma e mafai ona aofia ai duplicates. e tatau ona avea le faasologa o le lisi o le aʻe i le umi o upu taitasi, ma e tatau ona toe foi mai le lisi faatulagaina e ala i lena tulafono. Afai e lua upu ua i ai le umi lava lea e tasi, faatulaga le lisi i le alafapeta. e tatau ona toe foi mai le galuega tauave se lisi o manoa i le faatulagaina. e mafai ona e manatu o le a maua upu uma le umi lava lea e tasi. Mo se faataitaiga: tautino list_sort[""aa"", ""a"", ""aaa""]) => assert""] list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,smo_Latn,python,"
def x_or_y(n, x, y):
    """"""O se polokalama faigofie e tatau ona toe faafoi le taua o le x pe afai n o se numera muamua ma e tatau ona toe faafoi le taua o y ese. Faataitaiga: mo x_or_y(7, 34, 12) == 34 mo x_or_y(15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,smo_Latn,python,"
def double_the_difference(lst):
    '''Tuuina atu se lisi o numera, toe foi le aofaiga o le sikuea o le numera i le lisi e ese. le amanaiaina o le numera e le lelei po o le integer. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Afai o le lisi sao o gaogao, toe foi 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,smo_Latn,python,"
def compare(game,guess):
    """"""Ou te manatu tatou te manatua uma lena lagona pe a iloa mulimuli ane le iʻuga o se mea ua leva ona faʻatalitali i ai. O lagona ma mafaufauga o loʻo ia te oe i lena taimi e mautinoa lava e taua le tusia ma faʻatusatusa. O lau galuega o le fuafua pe na saʻo le faʻatusatusaina e se tagata o iʻuga o le tele o faʻatusatusaga. E tuʻuina atu ia te oe ni faʻasologa se lua o togi ma masalosaloga o le umi tutusa, lea e faʻaalia ai e taʻitasi faʻasino igoa se fetauiga. Toe foʻi mai se faʻasologa o le umi tutusa e faʻailoa mai ai le mamao ese o taʻitasi masalosaloga. Afai na latou mateina saʻo, o le tau e 0, ma afai e leai, o le tau o le eseesega moni i le va o le masalosaloga ma le togi. faʻataʻitaʻiga: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3],[0,0,0,0,1],0,0,0,1],""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,smo_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""O le a tuuina atu ia te oe le igoa o se vasega (o se manoa) ma se lisi o faaopoopoga. O le faaopoopoga e tatau ona faaaogaina e uta vasega faaopoopo i le vasega. O le malosi o le faaopoopoga e faapea: Ia CAP o le aofai o le uppercase tusi i le igoa o le faaopoopoga, ma ia SM o le aofai o lowercase tusi i le igoa o le faaopoopoga, o le malosi ua tuuina mai e le vaega CAP - SM. E tatau ona e maua le faaopoopoga sili ona malosi ma toe foi se manoa i lenei faatulagaga: ClassName.StrongestExtensionName. Afai ei ai le lua po o le sili faaopoopoga ma le malosi lava lea e tasi, e tatau ona e filifili le tasi e oo mai muamua i le lisi. Mo se faataitaiga, pe afai e tuuina atu ia te oe ""Slices"" e pei o le vasega ma se lisi o le faaopoopoga: ['SEviviRNGCliSes', 'Cheese', 'StuFfed'] lea e tatau ona e toe foi 'Slices.SEviRNGCliS' ona o le numera o mataitusi tetele i le igoa o le faaopoopoga, ma ia SM o le numera o mataitusi laiti i le igoa o le faaopoopoga, o le malosi ua tuuina mai e ala i le vaega CAP - SM. E tatau ona e te maua le faaopoopoga malosi o le faaopoopoga e ala i le malosiaga o le faaopoopoga e tatau ona e maua mai i le faaopoopoga sili ona e le faaopoopoga: ClassName.O le faaopoopoga o le malosi o le faaopoopoga e tatau ona maua.""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,smo_Latn,python,"
def cycpattern_check(a , b):
    """"""E tuuina atu ia te oe 2 upu. E tatau ona e toe foi moni pe afai o le upu lona lua po o so o se o lona feauauaʻii o se substring i le upu muamua cycpattern_check(""abcd"",""abd"") => sese cycpattern_check(""alofa"",""ell"") => moni cycpattern_check(""whassup"",""psus"") => sese cycpattern_check""abab"",""baa"") => moni cycpattern_check(""efef"",""eeff"") => sese cycpattern_check""(hims"",""simen"") => moni """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,smo_Latn,python,"
def even_odd_count(num):
    """"""Tuuina atu se integer. toe foi se tuple ei ai le aofai o le lava ma le numera digits faasologa. faataitaiga: lava_odd_count(-12) ==> (1, 1) lava_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,smo_Latn,python,"
def int_to_mini_roman(number):
    """"""Tuuina atu se integer lelei, maua lona tutusa numera Roma e pei o se manoa, ma toe foi i ai i lowercase. tapulaa: 1 <= num <= 1000 Faataitaiga: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,smo_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Tuuina atu le umi o le itu e tolu o se tafatolu. Toe foi moni pe afai o le itu e tolu faia se tafatolu taumatau, sese i se isi auala. O se tafatolu taumatau o se tafatolu lea o se tasi tulimanu o le tulimanu saʻo po o le 90 tikeri. Faataitaiga: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == sese '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,smo_Latn,python,"
def find_max(words):
    """"""Tusi se galuega tauave e talia se lisi o manoa. O le lisi o loo i ai upu eseese. Toe foi le upu ma le aofai aupito maualuga o mataitusi tulaga ese. Afai manoa tele maua le aofai aupito maualuga o mataitusi tulaga ese, toe foi le tasi lea e oo mai muamua i le faasologa lexicographical. find_max (([""igoa"", ""o"", ""manoa""]) == ""manoa"" find_max (([""igoa"", ""enam"", ""taaloga""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" , ""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,smo_Latn,python,"
def eat(number, need, remaining):
    """"""O oe o se lapiti fia aai, ma ua uma ona e 'ai se aofaiga faapitoa o kāloti, ae o lenei e tatau ona e' ai sili kāloti e faamaea ai le taumafataga o le aso. e tatau ona e toe foi mai se faasologa o [aofaiga atoa o kāloti 'ai ina ua uma au taumafataga, o le aofaiga o kāloti totoe ina ua uma au taumafataga ] pe afai e le lava kāloti totoe, o le a outou aai uma kāloti totoe, ae o le a avea pea fia aai. Faataitaiga: * aai(5, 6, 10) -> [11, 4] * aai(4, 8, 9) -> [12, 1] * aai(1, 10, 10) -> [11, 0] * aai(2, 11, 5) -> [7, 0] Fesuiaʻi: @number: integer le aofai o kāloti ua e 'aiina. @need: integer le aofai o kāloti e tatau ona e 'ai. @remaining:: integer le aofai o kāloti totoe o loo i ai i le faaunegatupe: *numera faʻi: 0 = <=0 * <= 1000 <= 0 * <= 1000 <= <= 1000 <= 0 = <= 1000 <= 0 = <= 1000 = <= <= 1000 = = = = = = 1000 = = = = = = = = = 1000 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,smo_Latn,python,"
def do_algebra(operator, operand):
    """"""Tuuina lua lisi faagaoioia, ma operand. O le lisi muamua ua gaoioiga algebra faavae, ma le lisi lona lua o se lisi o integers. Faaaoga le lisi e lua tuuina atu e fausia ai le faaupuga algebraic ma toe foi mai le iloiloga o lenei faaupuga. O le gaoioiga algebra faavae: Faaopoopoga ( + ) Faaitiitia ( - ) Faateleina ( * ) Fogafale vaevaega ( // ) Exponentiation ( ** Faataitaiga ): faagaoioia['+', '*', '-'] faasologa = [2, 3, 4, 5] taunuuga = 2 + 3 * 4 - 5 => taunuuga = 9 Faamatalaga: O le umi o le lisi o faagaoioia e tutusa i le umi o le operand lisi minus tasi. o se lisi o operand o integers lē lelei. e le itiiti ifo i le tasi le lisi faagaoioia, ma le lisi operand e le itiiti ifo i le lua operands. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,smo_Latn,python,"
def solve(s):
    """"""Ua tuuina atu ia te oe se manoa s. afai s[i] o se tusi, fesuiaʻi lona tulaga mai le pito i lalo i le pito i luga po o le sui sui, a leai tuu ai e pei ona i ai. Afai o le manoa e leai ni mataitusi, fesuiaʻi le manoa. e tatau ona toe foi mai le galuega tauave o le manoa taunuuga. faataitaiga foia ((""1234"") = ""4321"" foia ((""ab"") = ""AB"" foia ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,smo_Latn,python,"
def string_to_md5(text):
    """"""Tuuina atu se manoa 'tusitusiga', toe foi lona md5 hash tutusa manoa. Afai 'tusitusiga' o se manoa gaogao, toe foi leai. >>> string_to_md5('Talofa lalolagi') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,smo_Latn,python,"
def generate_integers(a, b):
    """"""Tuuina atu lua integers lelei a ma b, toe foi le numera e oo lava i le va o se ma b, i le faasologa o le alu aʻe. Mo se faataitaiga: faatupuina_integers(2, 8) => [2, 4, 6, 8] faatupuina_integers(8, 2) => [2, 4, 6, 8] faatupuina_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
