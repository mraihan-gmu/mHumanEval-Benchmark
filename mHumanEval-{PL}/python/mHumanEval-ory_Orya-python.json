[
    {
        "task_id": "HumanEval/0",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"ଦତ୍ତ ସଂଖ୍ୟା ତାଲିକାରେ, କୌଣସି ଦୁଇଟି ସଂଖ୍ୟା ଦିଆଯାଇଥିବା ସୀମା ଠାରୁ ପରସ୍ପରର ନିକଟତର କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ. ଉଦାହରଣଃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) ମିଥ୍ୟା >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) ସତ୍ୟ \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"ଏହି ଫଳନ ପାଇଁ ନିବେଶ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯେଉଁଥିରେ ନେଷ୍ଟ ହୋଇଥିବା ବ୍ରେନ୍ଥେସ ର ଏକାଧିକ ଗୋଷ୍ଠୀ ଅଛି. ଆପଣଙ୍କର ଲକ୍ଷ୍ୟ ହେଉଛି ସେହି ଗୋଷ୍ଠୀକୁ ପୃଥକ ଷ୍ଟ୍ରିଙ୍ଗରେ ଅଲଗା କରିବା ଏବଂ ସେହିମାନଙ୍କର ତାଲିକା ଫେରସ୍ତ କରିବା. ପୃଥକ ଗୋଷ୍ଠୀ ସନ୍ତୁଳିତ (ପ୍ରତ୍ୟେକ ଖୋଲା ବ୍ରେସ ସଠିକ ଭାବରେ ବନ୍ଦ ହୋଇଛି) ଏବଂ ପରସ୍ପର ମଧ୍ୟରେ ନେଷ୍ଟ ହୋଇନାହିଁ. ନିବେଶ ଷ୍ଟ୍ରିଙ୍ଗରେ କୌଣସି ସ୍ପେସକୁ ଅଣଦେଖା କରନ୍ତୁ. ଉଦାହରଣଃ >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) '['() ', '(()) ', '((()) ']\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"ଏକ ସକାରାତ୍ମକ ଫ୍ଲୋଟିଂ ପଏଣ୍ଟ ସଂଖ୍ୟା ଦିଆଯାଇଥିବା ବେଳେ, ଏହାକୁ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା (ଦତ୍ତ ସଂଖ୍ୟା ଠାରୁ ବଡ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା) ଏବଂ ଦଶମିକ ସଂଖ୍ୟା (ବାକି ଅଂଶ ସର୍ବଦା 1 ରୁ ଛୋଟ) ରେ ବିଭକ୍ତ କରାଯାଇପାରିବ । ସଂଖ୍ୟାର ଦଶମିକ ଅଂଶକୁ ଫେରାନ୍ତୁ । ଉଦାହରଣଃ >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ବ୍ୟାଙ୍କ ଖାତାରେ ଜମା ଏବଂ ପ୍ରତ୍ୟାହାର କାର୍ଯ୍ୟର ଏକ ତାଲିକା ଦିଆଯାଇଛି ଯାହା ଶୂନ ସନ୍ତୁଳନ ସହିତ ଆରମ୍ଭ ହୁଏ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଯେ କୌଣସି ସମୟରେ ଖାତାର ସନ୍ତୁଳନ ଶୂନ ତଳେ ପଡ଼େ ଏବଂ ସେହି ସମୟରେ ଫଳନଟି ସତ୍ୟ ଫେରାଇବ । ଅନ୍ୟଥା ଏହା ମିଥ୍ୟା ଫେରାଇବ । ଉଦାହରଣଃ >>> below_zero([1, 2, 3]) ମିଥ୍ୟା >>> below_zero([1, 2, -4, 5]) ସତ୍ୟ \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ଇନପୁଟ୍ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକା ପାଇଁ, ଏହି ଡାଟାସେଟର ମଧ୍ୟମ ଆଖପାଖରେ ମିଆନ୍ ଅବ୍ ସଲ୍ଟ ଡିଭିଆଏସନ୍ ଗଣନା କରନ୍ତୁ । ମିଆନ୍ ଅବ୍ ସଲ୍ଟ ଡିଭିଆଏସନ୍ ହେଉଛି ପ୍ରତ୍ୟେକ ଉପାଦାନ ଏବଂ ଏକ କେନ୍ଦ୍ର ବିନ୍ଦୁ ମଧ୍ୟରେ ହାରାହାରି ଅବ୍ ସଲ୍ଟ ଫରକ (ଏହି କ୍ଷେତ୍ରରେ ହାରାହାରି): MAD = ହାରାହାରି ∙ x - x_ ମିଆନ୍ ∙ ଉଦାହରଣଃ >>> mean_absolute_deviation ([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ପ୍ରତ୍ୟେକ ଦୁଇ କ୍ରମିକ ଉପାଦାନ ମଧ୍ୟରେ ଏକ ସଂଖ୍ୟା 'ବିଚ୍ଛିନ୍ନତା' ଭର୍ତ୍ତି କରନ୍ତୁ _\"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"ଏହି ଫଳନ ପାଇଁ ଇନପୁଟ୍ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯାହା ଅନ୍ତଃସ୍ଥ ବନ୍ଧନୀ ପାଇଁ ଏକାଧିକ ଗୋଷ୍ଠୀକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଯାହା ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ ହୋଇଥାଏ । ପ୍ରତ୍ୟେକ ଗୋଷ୍ଠୀ ପାଇଁ, ବନ୍ଧନୀଗୁଡ଼ିକର ଗଭୀରତମ ସ୍ତରର ନେଷ୍ଟିଂକୁ ଆଉଟପୁଟ୍ କରନ୍ତୁ _ ଉଦାହରଣ ସ୍ୱରୂପ (() (()) ରେ ସର୍ବାଧିକ ଦୁଇଟି ସ୍ତର ଅଛି ଯେତେବେଳେ ((())) ରେ ତିନୋଟି ଅଛି _ >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"କେବଳ ସେହିଗୁଡ଼ିକ ପାଇଁ ଇନପୁଟ୍ ସୂଚୀକୁ ଫିଲ୍ଟର୍ କରନ୍ତୁ ଯେଉଁଥିରେ ଦିଆଯାଇଥିବା ସବଷ୍ଟ୍ରିଙ୍ଗ >>> ଫିଲ୍ଟର୍_ବାୟ_ସବଷ୍ଟ୍ରିଙ୍ଗ (([], 'a') [] >>> ଫିଲ୍ଟର୍_ବାୟ_ସବଷ୍ଟ୍ରିଙ୍ଗ ((['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array']  ଅନ୍ତର୍ଭୁକ୍ତ\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକା ପାଇଁ, ଏକ ସମୁଦାୟ ଏବଂ ଏକ ତାଲିକାରେ ଥିବା ସମସ୍ତ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ଉତ୍ପାଦ ସହିତ ଏକ ଟାପଲ୍ ଫେରାନ୍ତୁ _ ଖାଲି ସମୁଦାୟ 0 ସହିତ ସମାନ ହେବା ଉଚିତ ଏବଂ ଖାଲି ଉତ୍ପାଦ 1 ସହିତ ସମାନ ହେବା ଉଚିତ _ >>> ସମୁଦାୟ_ ଉତ୍ପାଦn",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ସଂଖ୍ୟାର ତାଲିକାରୁ, କ୍ରମରେ ଦିଆଯାଇଥିବା ମୁହୂର୍ତ୍ତ ପର୍ଯ୍ୟନ୍ତ ମିଳିଥିବା ରୋଲିଂ ସର୍ବାଧିକ ଉପାଦାନର ଏକ ତାଲିକା ସୃଷ୍ଟି କରନ୍ତୁ. >>> ରୋଲିଂ_ମ୍ୟାକ୍ସ (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"ଏକ ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ହେଉଛିଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ - ସରଳ ଆଲଗୋରିଦମ ଧାରଣା ସହିତ ଆରମ୍ଭ ହେଉଥିବା ସର୍ବୋଚ୍ଚ ପାଲିଣ୍ଡ୍ରୋମକୁ ଖୋଜନ୍ତୁଃ >>> make_palindrome_cat_cat_cat_' ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') ') make_\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏକ ପାଲିଣ୍ଡ୍ରୋମ୍ କି ନୁହେଁ ପରୀକ୍ଷା କରନ୍ତୁ \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ଇନପୁଟ୍ ହେଉଛି ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ୍ a ଏବଂ b ଯେଉଁଥିରେ କେବଳ 1s ଏବଂ 0s ଥାଏ. ଏହି ଇନପୁଟ ଉପରେ ବାଇନାରୀ XOR କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ଫେରାନ୍ତୁ. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"ବାକ୍ୟଖଣ୍ଡ ତାଲିକା ମଧ୍ୟରୁ, ସବୁଠାରୁ ଲମ୍ବା ବାକ୍ୟଖଣ୍ଡକୁ ଫେରାଇବ. ସମାନ ଲମ୍ବର ଏକାଧିକ ବାକ୍ୟଖଣ୍ଡ ଥିଲେ ପ୍ରଥମ ବାକ୍ୟଖଣ୍ଡକୁ ଫେରାଇବ. ଯଦି ନିବେଶ ତାଲିକା ଖାଲି ଥାଏ ତେବେ None କୁ ଫେରାଇବ. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ସର୍ବ ବୃହତ ସାଧାରଣ ବିଭାଜକ a ଏବଂ b >>> ସର୍ବ ବୃହତ_ ସାଧାରଣ_ ବିଭାଜକ ((3, 5) 1 >>> ସର୍ବ ବୃହତ_ ସାଧାରଣ_ ବିଭାଜକ ((25, 15) 5 କୁ ଫେରାଇଥାଏ _\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ସମସ୍ତ ଉପସର୍ଗର ତାଲିକାକୁ ଫେରାଇଥାଏ, ସବୁଠାରୁ ଛୋଟ ଠାରୁ ଆରମ୍ଭ କରି ସବୁଠାରୁ ଲମ୍ବା ପର୍ଯ୍ୟନ୍ତ, ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗର >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 ରୁ ଆରମ୍ଭ କରି n ସମେତ ଅନ୍ତରୀଣ-ସୀମିତ ସଂଖ୍ୟା ବିଶିଷ୍ଟ ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇଥାଏ. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"ଗୋଟିଏ ଧାଡ଼ି ଦିଆଗଲା, କେତେ ଅଲଗା ଅକ୍ଷର (କ୍ୟାସେସକୁ ନେଇ) ଅଛି ତାହା ଖୋଜନ୍ତୁ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"ଏହି ଫଳନକୁ ଇନପୁଟ୍ କରିବା ପାଇଁ ଏକ ସ୍ୱତନ୍ତ୍ର ASCII ଫର୍ମାଟରେ ମ୍ୟୁଜିକାଲ୍ ନୋଟ୍ଗୁଡିକର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପ୍ରତିନିଧିତ୍ୱ କରିଥାଏ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଅନେକ ବିଟ୍ ସହିତ ସମାନ ସଂପୂର୍ଣ୍ଣ ଷ୍ଟ୍ରିଙ୍ଗ୍ ତାଲିକାକୁ ବିଶ୍ଳେଷଣ କରିବା _ ଏଠାରେ ଏକ କିମ୍ବଦନ୍ତୀ ଅଛିଃ 'o' ନୋଟ୍, ଶେଷ ଚାରି ବିଟ୍ 'o' ର ରାଇସ୍ - ଅଧା ନୋଟ୍, ଶେଷ ଦୁଇ ବିଟ୍ 'ରାଇସ୍ - ଚତୁର୍ଥ ନୋଟ୍, ଶେଷ ଏକ ବିଟ୍ >>> parse_music '_' o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ o '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_ '_\"\"\"\n",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"ମୂଳ ବାକ୍ୟଖଣ୍ଡରେ କେତେଥର ଗୋଟିଏ ଉପବାକ୍ୟଖଣ୍ଡ ମିଳିପାରିବ ତାହା ଖୋଜନ୍ତୁ. ପରସ୍ପର ଉପରେ ଅତିବାହିତ ହେଉଥିବା ଘଟଣା ଗୁଡିକୁ ଗଣନା କରନ୍ତୁ. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ନିବେଶ ହେଉଛି 'ଶୂନ'ରୁ 'ନଅ' ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାର ଏକ ସ୍ପେସ୍-ସୀମିତ ଷ୍ଟ୍ରିଙ୍ଗ୍. ବୈଧ ବିକଳ୍ପଗୁଡ଼ିକ ହେଉଛି 'ଶୂନ', 'ଏକ', 'ଦୁଇ', 'ତିନି', 'ଚାରି', 'ପାଞ୍ଚ', 'ଛଅ', 'ସାତ', 'ଆଠ' ଏବଂ 'ନଅ'। ସଂଖ୍ୟା ସହିତ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇଥାଏ ଯାହାକୁ ସର୍ବନିମ୍ନରୁ ସର୍ବବୃହତକୁ ସର୍ଟ କରାଯାଇଛି >>> sort_numbers (('ତିନି ଏକ ପାଞ୍ଚ') 'ଏକ ତିନି ପାଞ୍ଚ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"ଏକ ଯୋଗାଣ ତାଲିକାରୁ (ଅତିକମରେ ଦୁଇଟି ଲମ୍ବ) ଦୁଇଗୋଟିକୁ ବାଛନ୍ତୁ ଏବଂ ଫେରାନ୍ତୁ ଯାହା ପରସ୍ପରର ନିକଟତର ଏବଂ ସେଗୁଡିକୁ କ୍ରମରେ ଫେରାନ୍ତୁ (ଛୋଟ ସଂଖ୍ୟା, ବଡ ସଂଖ୍ୟା) । >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"ସଂଖ୍ୟାଗୁଡ଼ିକର ତାଲିକା (ଅତିକମରେ ଦୁଇଟି ଉପାଦାନର), ସେହି ତାଲିକାକୁ ଏକ ସରଳ ପରିବର୍ତ୍ତନ ପ୍ରୟୋଗ କରନ୍ତୁ, ଯେପରି ସର୍ବନିମ୍ନ ସଂଖ୍ୟା 0 ହେବ ଏବଂ ସର୍ବ ବୃହତ 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] ହେବ ।\"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"କେବଳ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପାଇଁ କୌଣସି ପାଇଥନ ମୂଲ୍ୟର ତାଲିକାକୁ ଫିଲ୍ଟର କରନ୍ତୁ >>> ଫିଲ୍ଟର_ଇଣ୍ଟେଜରସ ((['a', 3.14, 5]) [5] >>> ଫିଲ୍ଟର_ଇଣ୍ଟେଜରସ (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗର ଫେରିବା ଲମ୍ବ >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"n ପାଇଁ, ସବୁଠାରୁ ବଡ ସଂଖ୍ୟା ଖୋଜନ୍ତୁ ଯାହା n କୁ ସମାନ ଭାବରେ ବିଭକ୍ତ କରେ, n ଠାରୁ ଛୋଟ >>> ସବୁଠାରୁ ବଡ_ବିଭାଜକ (_BAR_) 15 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"ଦିଆଯାଇଥିବା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ପ୍ରାଥମିକ ଗୁଣକଗୁଡ଼ିକର ତାଲିକାକୁ ଛୋଟରୁ ବଡ଼ ପର୍ଯ୍ୟନ୍ତ କ୍ରମରେ ଫେରାଇଥାଏ । ପ୍ରତ୍ୟେକ ଗୁଣକକୁ ଗୁଣକକରଣରେ କେତେଥର ଦେଖାଯାଏ ତାହା ସହିତ ସମାନ ସଂଖ୍ୟା ତାଲିକାଭୁକ୍ତ କରାଯିବା ଉଚିତ । ଇନପୁଟ୍ ସଂଖ୍ୟା ସମସ୍ତ ଗୁଣକଗୁଡ଼ିକର ଉତ୍ପାଦ ସହିତ ସମାନ ହେବା ଉଚିତ >>> ଉପାଦାନ (କାର୍ଯ୍ୟକାରୀ) (୮) [୨, ୨, ୨] >>> ଉପାଦାନ (କାର୍ଯ୍ୟକାରୀ) (୨୫) [୫, ୫] >>> ଉପାଦାନ (କାର୍ଯ୍ୟକାରୀ) (୭୦) [୨, ୫, ୭] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ତାଲିକାରୁ, ସମସ୍ତ ଉପାଦାନଗୁଡ଼ିକୁ କାଢ଼ି ଦିଅନ୍ତୁ ଯାହା ଏକାଧିକ ଥର ଦେଖାଯାଏ। ଉପାଦାନଗୁଡ଼ିକର କ୍ରମରେ ସମାନ ଭାବରେ ରଖନ୍ତୁ। >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"ଗୋଟିଏ ଧାଡ଼ି ପାଇଁ, ଛୋଟ ଅକ୍ଷରକୁ ବଡ଼ ଅକ୍ଷର ଓ ବଡ଼ ଅକ୍ଷରକୁ ଛୋଟ ଅକ୍ଷର ଭାବରେ ଫ୍ଲପ୍ କରନ୍ତୁ. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"ଗୋଟିଏ ଗୋଟିଏ ଧାଡ଼ିରେ ଶୃଙ୍ଖଳାର ତାଲିକାକୁ ଯୋଡ଼ିବା >>> ଯୋଡ଼ିବା (a), (b), (c) \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"କେବଳ ସେହିଗୁଡ଼ିକ ପାଇଁ ଇନପୁଟ୍ ତାଲିକାକୁ ଫିଲ୍ଟର୍ କରନ୍ତୁ ଯାହା ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଉପସର୍ଗ ସହିତ ଆରମ୍ଭ ହୋଇଥାଏ. >>> ଉପସର୍ଗ ଦ୍ୱାରା ଫିଲ୍ଟର୍ କରନ୍ତୁ ({\\\\displaystyle {\\\\displaystyle {\\\\sqrt {{{{{}}}}}}}, 'a') [] >>> ଉପସର୍ଗ ଦ୍ୱାରା ଫିଲ୍ଟର୍ କରନ୍ତୁ ({\\\\sqrt {{{}}}}, 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"ତାଲିକାରେ କେବଳ ସକାରାତ୍ମକ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଫେରାଇଥାଏ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"ଯଦି କୌଣସି ସଂଖ୍ୟା ଅଶୂନ୍ୟ ହୋଇଥାଏ ତେବେ ଏହା ସତ୍ୟ ହୋଇଥାଏ ଏବଂ ଅନ୍ୟଥା ଏହା ମିଥ୍ୟା ହୋଇଥାଏ । >>> is_prime (୬) ମିଥ୍ୟା >>> is_prime (୧୦୧) ସତ୍ୟ >>> is_prime (୧୧) ସତ୍ୟ >>> is_prime (୧୩୪୪୧) ସତ୍ୟ >>> is_prime (୬୧) ସତ୍ୟ >>> is_prime (୪) ମିଥ୍ୟା >>> is_prime (୧) ମିଥ୍ୟା \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs ହେଉଛି ଏକ ବହୁପଦାର୍ଥର ଗୁଣକ. find_zero find x ଏପରି ଯେ poly(x) = 0. find_zero କେବଳ ଶୂନ ବିନ୍ଦୁ ଫେରାଇଥାଏ, ଯଦିଓ ଅନେକ ଅଛି । ଏହା ସହିତ, find_zero କେବଳ xs ତାଲିକା ନେଇଥାଏ ଯାହାର ସମକକ୍ଷ ସଂଖ୍ୟା ଏବଂ ସର୍ବ ବୃହତ ଅଣ-ଶୂନ ଗୁଣକ ଅଛି କାରଣ ଏହା ଏକ ସମାଧାନର ଗ୍ୟାରେଣ୍ଟି ଦେଇଥାଏ । >>> ରାଉଣ୍ଡ ((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> ରାଉଣ୍ଡ ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0 \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"ଏକ ବହୁପଦକୁ ସମୀକ୍ଷା କରେ ଯାହା ସମୀକରଣ xs ସହିତ ଏକ ବିନ୍ଦୁ x ରେ ଥାଏ. xs[0] + xs [1] * x + xs [1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"ଏହି ଫଳନ ଏକ ତାଲିକା l ନେଇଥାଏ ଏବଂ ଏକ ତାଲିକା l' ଫେରାଇଥାଏ ଯାହା ଦ୍ବାରା l' ସେହି ସୂଚକାଙ୍କରେ l ସହିତ ସମାନ ହୋଇଥାଏ ଯାହା ତିନି ଭାଗରେ ବିଭକ୍ତ ହୋଇନଥାଏ, ଯେତେବେଳେ କି ଏହାର ମୂଲ୍ୟ ସୂଚକାଙ୍କରେ ଯାହା ତିନି ଭାଗରେ ବିଭକ୍ତ ହୋଇଥାଏ ତାହା l ର ଅନୁରୂପ ସୂଚକାଙ୍କର ମୂଲ୍ୟ ସହିତ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ସର୍ଟ ହୋଇଥାଏ । >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"ଏକ ତାଲିକା ରେ ସର୍ଟ କରାଯାଇଥିବା ଅନନ୍ୟ ଉପାଦାନକୁ ଫେରାଇଥାଏ >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"ତାଲିକାରେ ସର୍ବାଧିକ ଉପାଦାନକୁ ଫେରାଇଥାଏ. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"7 ଅଙ୍କଟି 11 କିମ୍ବା 13 ଦ୍ବାରା ବିଭକ୍ତ ହେଉଥିବା n ରୁ କମ୍ ସଂଖ୍ଯା ରେ କେତେଥର ଦେଖାଯାଏ ତାହା ଫେରାଇଥାଏ. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"ଏହି ଫଳନ ଏକ ତାଲିକା l ନେଇଥାଏ ଏବଂ ଏକ ତାଲିକା l' ଫେରାଇଥାଏ ଯାହା ଦ୍ବାରା l' ଅଙ୍କରେ l ସହିତ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ଏହାର ମୂଲ୍ୟ l ର ଯୁଗ୍ମ ଅଙ୍କରେ ସମାନ ହୋଇଥାଏ, କିନ୍ତୁ ସର୍ଟ ହୋଇଥାଏ । >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"encode_cyclic ଫଳନ ସହିତ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ଏନକୋଡ୍ କରାଯାଇଛି. ଡିକୋଡ୍ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇଥାଏ. \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ତିନି ଅକ୍ଷରର ଚକ୍ରବ୍ୟୁହ ଦ୍ୱାରା ଏନକୋଡେଡ୍ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ ଫେରାଇଥାଏ ।\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib n-ତମ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ ଯାହାକି ଏକ ଫିବୋନାସୀ ସଂଖ୍ୟା ଅଟେ ଏବଂ ଏହା ମଧ୍ୟ ଅଶୂର ଅଟେ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triple_sum_to_zero ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ତାଲିକାକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ । ଏହା True ଫେରାଇଥାଏ ଯଦି ତାଲିକାରେ ତିନୋଟି ଭିନ୍ନ ଉପାଦାନ ଅଛି ଯାହା ଶୂନ୍ୟକୁ ଯୋଗ କରିଥାଏ, ଏବଂ ଅନ୍ୟଥା False । >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero ([1, 3, -2, 1]) False \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"ଏକ ସଡକ କୁ କଳ୍ପନା କର ଯାହା ଏକ ଅନନ୍ତ ରୂପରେ ସଠିକ ଅଟେ. n ଗାଡି ବାମ ରୁ ଡାହାଣ କୁ ଯାଉଛି; ଏକ ସମୟରେ, n ଗାଡି ର ଅଲଗା ସେଟ ଡାହାଣ ରୁ ବାମ କୁ ଯାଉଛି. ଗାଡି ର ଦୁଇ ସେଟ ପରସ୍ପର ଠାରୁ ବହୁତ ଦୂରରେ ଆରମ୍ଭ ହୁଏ. ସବୁ ଗାଡି ସମାନ ବେଗ ରେ ଗତି କରେ. ଦୁଇ ଗାଡି କୁ ଧକ୍କା ଲାଗେ ଯେବେ ବାମ ରୁ ଡାହାଣ କୁ ଯାଉଥିବା ଗାଡି ଡାହାଣ ରୁ ବାମ କୁ ଯାଉଥିବା ଗାଡି କୁ ଧକ୍କା ଦିଏ. କିନ୍ତୁ ଗାଡି ଗୁଡିକ ଅନନ୍ତ ରୂପରେ ଦୃଢ ଓ ମଜବୁତ; ଫଳ ସ୍ବରୂପ ସେମାନେ ନିଜ ଗତି ପଥ ରେ ଗତି ଜାରି ରଖନ୍ତି ଯେପରି ସେମାନେ ଧକ୍କା ଖାଇ ନାହାଁନ୍ତି. ଏହି ଫଙ୍କସନ ଏହିପରି ଧକ୍କା ର ସଂଖ୍ୟା କୁ output କରେ.\"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"[2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]) ସହିତ ଏକ ଉପାଦାନ ସହିତ ତାଲିକାକୁ ଫେରାଇଥାଏ ।\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ତାଲିକାକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ । ଏହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ତାଲିକାରେ ଦୁଇଟି ଭିନ୍ନ ଉପାଦାନ ଅଛି ଯାହା ଶୂନ୍ୟକୁ ଯୋଗ କରିଥାଏ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା । >>> pairs_sum_to_zero([1, 3, 5, 0]) ମିଥ୍ୟା >>> pairs_sum_to_zero[(1, 3, -2, 1]) ମିଥ୍ୟା >>> pairs_sum_to_zero([1, 2, 3, 7]) ମିଥ୍ୟା >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) ସତ୍ୟ >>> pairs_sum_to_zero[1]) ମିଥ୍ୟା \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ପ୍ରବେଶ ସଂଖ୍ଯା x ର ସଂଖ୍ଯା ଭିତ୍ତିକୁ ଭିତ୍ତିରେ ପରିବର୍ତ୍ତନ କରନ୍ତୁ. ରୂପାନ୍ତର ପରେ ଶୃଙ୍ଖଳ ପ୍ରତିନିଧିତ୍ବକୁ ଫେରାନ୍ତୁ. ଭିତ୍ତି ସଂଖ୍ୟା 10 ରୁ କମ୍. >>> ପରିବର୍ତ୍ତନ_ଆଧାର (8, 3) '22' >>> ପରିବର୍ତ୍ତନ_ଆଧାର (8, 2) '1000' >>> ପରିବର୍ତ୍ତନ_ଆଧାର (7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ଏକ ତ୍ରିଭୁଜ ପାଇଁ ଏକ ପାର୍ଶ୍ବ ଏବଂ ଉଚ୍ଚ ରିଟର୍ଣ୍ଣ କ୍ଷେତ୍ରର ଲମ୍ବ ଦିଆଯାଇଥାଏ । >>> ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ର (5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 ସଂଖ୍ୟା କ୍ରମ ହେଉଛି Fibbonacci କ୍ରମ ପରି ଏକ କ୍ରମ ଯାହାକି ନିମ୍ନଲିଖିତ ପରିଭାଷା ପ୍ରାପ୍ତ ହୋଇଥାଏ: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ଦୟାକରି fib4 ସଂଖ୍ୟା କ୍ରମର n-ତମ ଉପାଦାନକୁ ଦକ୍ଷତାର ସହିତ ଗଣନା କରିବା ପାଇଁ ଏକ ଫଳନ ଲେଖନ୍ତୁ । ପୁନଃସକ୍ରିୟତା ବ୍ୟବହାର କରନ୍ତୁ ନାହିଁ । >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"ତାଲିକା l ରେ ଥିବା ଉପାଦାନ ଗୁଡିକର ରିଟର୍ଣ୍ଣ ମିଡିୟାନ. >>> ମିଡିୟାନ (([3, 1, 2, 4, 5]) 3 >>> ମିଡିୟାନ (([-10, 4, 6, 1000, 10, 20]) 15.0 \"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"ଯାଞ୍ଚ କରେ କି ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏକ ପାଲିଣ୍ଡ୍ରୋମ୍ >>> is_palindrome (('') ସତ୍ୟ >>> is_palindrome (('aba') ସତ୍ୟ >>> is_palindrome (('aaaaa') ସତ୍ୟ >>> is_palindrome (('zbcd') ମିଥ୍ୟା \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n ମଡୁଲୋ p (ସଂଖ୍ୟାନକୁ ଧ୍ୟାନରେ ରଖନ୍ତୁ) କୁ ଫେରାଇଦିଅନ୍ତୁ. >>> ମଡୁଲୋ p (ସୂଚକ ସଂଖ୍ୟା) 3 >>> ମଡୁଲୋ p (ସୂଚକ ସଂଖ୍ୟା) 1101, 101) 2 >>> ମଡୁଲୋ p (ସୂଚକ ସଂଖ୍ୟା) 0, 101) 1 >>> ମଡୁଲୋ p (ସୂଚକ ସଂଖ୍ୟା) 3, 11) 8 >>> ମଡୁଲୋ p (ସୂଚକ ସଂଖ୍ୟା) 100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"encode_shift ଫଳନ ସହିତ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ଏନକୋଡ୍ କରାଯାଇଛି. ଡିକୋଡ୍ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇଥାଏ. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\" ଆଲଫାବେଟରେ ପ୍ରତ୍ୟେକ ଅକ୍ଷରକୁ 5 ଦ୍ୱାରା ଘୁଞ୍ଚାଇ ଏନକୋଡେଡ୍ ଷ୍ଟ୍ରିଙ୍ଗ ଫେରାଇଥାଏ.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels ହେଉଛି ଏକ ଫଙ୍କସନ୍ ଯାହା କ୍ରମକୁ ଗ୍ରହଣ କରେ ଏବଂ ସ୍ୱର ବିନା କ୍ରମକୁ ଫେରାଇଥାଏ. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True ଯଦି ତାଲିକା l ରେ ଥିବା ସମସ୍ତ ସଂଖ୍ୟା threshold t ତଳେ ଥାଏ. >>> below_threshold (([1, 2, 4, 10], 100) True >>> below_threshold (([1, 20, 4, 10], 5) False \"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"ଦୁଇଟା ସଂଖ୍ୟା x ଓ y କୁ ଯୋଡିବା >>> ଯୋଡିବା (୨,୩) ୫ >>> ଯୋଡିବା (୫,୭) ୧୨ \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"ଦୁଇଟି ଶବ୍ଦର ଅକ୍ଷର ସମାନ କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ. >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddeddabc') ସତ୍ୟ >>> same_chars (('abcd', 'dddddddabc') ସତ୍ୟ >>> same_chars (('dddddddabc', 'abcd') ସତ୍ୟ >>> same_chars (('eabcd', 'dddddddabc') ମିଥ୍ୟା >>> same_chars ((('abcd', 'dddddabddce') ମିଥ୍ୟା >>> same_chars (('eabcdzzzz', 'dddzzzzzzzddabc') ମିଥ୍ୟା \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-ତମ ଫାଇବୋନ୍ୟାଚି ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ. >>> ଫାଇବନ୍ୟାଚି (୧୦) ୫୫ >>> ଫାଇବନ୍ୟାଚି (୧) ୧ >>> ଫାଇବନ୍ୟାଚି (୮) ୨୧ \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ହେଉଛି \"<\" ଏବଂ \">\" ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ. ଯଦି ପ୍ରତ୍ୟେକ ଖୋଲିବା ବ୍ରାକେଟରେ ସମାନ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ ତେବେ ଏହା ସତ୍ୟ ଅଟେ. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<><>\") True >>> correct_bracketing(\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing. >>> ଏକକବଦ୍ଧତା (([1, 2, 4, 20]) ସତ୍ୟ >>> ଏକକବଦ୍ଧତା (([1, 20, 4, 10]) ମିଥ୍ୟା >>> ଏକକବଦ୍ଧତା (([4, 1, 0, -10]) ସତ୍ୟ \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"ଦୁଇଟି ତାଲିକା ପାଇଁ ସର୍ଟ ହୋଇଥିବା ଅନନ୍ୟ ସାଧାରଣ ଉପାଦାନକୁ ଫେରାଇଥାଏ. >>> ସାଧାରଣ (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> ସାଧାରଣ (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n ର ସବୁଠାରୁ ବଡ ଅକ୍ଷର ଫ୍ୟାକ୍ଟର ଫେରାଇ ଦିଅନ୍ତୁ. n > 1 କୁ ଧରି ନିଅନ୍ତୁ ଏବଂ ଏହା ଅକ୍ଷର ନୁହେଁ. >>> ସବୁଠାରୁ ବଡ_ଅକ୍ଷର_ଫ୍ୟାକ୍ଟର (୧୩୧୯୫) ୨୯ >>> ସବୁଠାରୁ ବଡ_ଅକ୍ଷର_ଫ୍ୟାକ୍ଟର (୨୦୪୮) ୨ \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ହେଉଛି ଏକ ଫଙ୍କସନ୍ ଯାହାକି 1 ରୁ n ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡିକୁ ଯୋଗ କରିଥାଏ । >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets ହେଉଛି \"(\" ଏବଂ \"\") ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ. ଯଦି ପ୍ରତ୍ୟେକ ଖୋଲିବା ବ୍ରାକେଟରେ ସମାନ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ ତେବେ ଏହା ସତ୍ୟ ଅଟେ. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() \") True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs ଏକ ବହୁବଚନ ର ସମୀକରଣ କୁ ଦର୍ଶାଏ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ଏହି ବହୁବଚନ ର ସମୀକରଣ କୁ ସମାନ ରୂପରେ ଫେରାଇ ଦିଅ. >>> ସମୀକରଣ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ସମୀକରଣ ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"ଫିବିବ ସଂଖ୍ୟା କ୍ରମ ହେଉଛି ଫିବୋନାସୀ କ୍ରମ ପରି ଏକ କ୍ରମ ଯାହାକି ନିମ୍ନଲିଖିତ ପରିଭାଷା ପ୍ରାପ୍ତ ହୋଇଥାଏ: ଫିବିବ (୦) == ୦ ଫିବିବ (୧) == ୦ ଫିବିବ (୨) == ୧ ଫିବିବ (ଏନ) == ଫିବିବ (ଏନ -୧) + ଫିବିବ (ଏନ -୨) + ଫିବିବ (ଏନ -୩) ଦୟାକରି ଫିବିବ ସଂଖ୍ୟା କ୍ରମର n-ତମ ଉପାଦାନକୁ ଦକ୍ଷତାର ସହ ଗଣନା କରିବା ପାଇଁ ଏକ ଫଳନ ଲେଖନ୍ତୁ । >>> ଫିବିବ (ଏନ -୧) ୦ >>> ଫିବ (ଏନ -୫) ୪ >>> ଫିବିବ (ଏନ -୮) ୨୪ \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"ଏକ ଫଙ୍କସନ vowels_count ଲେଖନ୍ତୁ ଯାହା ଏକ ଶବ୍ଦକୁ ସୂଚାଉଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଷ୍ଟ୍ରିଙ୍ଗରେ ଥିବା ସ୍ୱର ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ । ଏହି କ୍ଷେତ୍ରରେ ସ୍ୱରଗୁଡ଼ିକ ହେଉଛି 'a', 'e', 'i', 'o', 'u' । ଏଠାରେ, 'y' ମଧ୍ୟ ଏକ ସ୍ୱର ଅଟେ, କିନ୍ତୁ କେବଳ ଯେତେବେଳେ ଏହା ଦିଆଯାଇଥିବା ଶବ୍ଦର ଶେଷରେ ଥାଏ । ଉଦାହରଣଃ >>> vowels_count ({\"abcde\") 2 >>> vowels_count ({\"ACEDY\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"ଅଧିକ ପରୀକ୍ଷାମୂଳକ ମାମଲା ଯୋଡ଼ନ୍ତୁ ।\"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"ସର୍କୁଲାର ଭାବରେ x ର ଅଙ୍କକୁ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ, ସ୍ଥାନାନ୍ତର ଦ୍ୱାରା ଅଙ୍କକୁ ଡାହାଣକୁ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଫେରାନ୍ତୁ _ ଯଦି ସ୍ଥାନାନ୍ତର > ଅଙ୍କ ସଂଖ୍ୟା, ଅଙ୍କକୁ ବିପରୀତ ଭାବରେ ଫେରାନ୍ତୁ _ >>> ସର୍କୁଲାର_ସଞ୍ଚାଳିତ _ (୧୨) 1) \"୨୧\" >>> ସର୍କୁଲାର_ସଞ୍ଚାଳିତ _ (୧୨) 2) \"୧୨\" _\"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"କାର୍ଯ୍ୟ ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ କେବଳ ଉପର ଅକ୍ଷରର ସମୁଦାୟକୁ ଫେରାଇଥାଏ' ASCII କୋଡଗୁଡିକ _ ଉଦାହରଣଃ digitSum (((\"\") => 0 digitSum (((\"abAB\") => 131 digitSum (((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"ଏହି କାମରେ, ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯିବ ଯାହା ଫଳ ବାସ୍କେଟରେ ବଣ୍ଟିତ ହୋଇଥିବା ସେଓ ଏବଂ କମଳା ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଏହି ବାସ୍କେଟରେ ସେଓ, କମଳା ଏବଂ ଅଙ୍ଗୁର ଫଳ ଅଛି _ ଯେଉଁ ଷ୍ଟ୍ରିଙ୍ଗ ମୋଟ ସେଓ ଏବଂ କମଳା ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଏବଂ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଯାହା ବାସ୍କେଟରେ ଥିବା ଫଳ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ତାହା ବାସ୍କେଟରେ ଥିବା ଅଙ୍ଗୁର ଫଳ ସଂଖ୍ୟା ଫେରାଇଥାଏ _ ଉଦାହରଣ ସ୍ୱରୂପଃ ଫଳ_ବଣ୍ଟନ \"5\"ଆପଲ୍ ଏବଂ 6 ଟି କମଳା\", 19) -> 19 - 5 - 6 = 8 ଫଳ_ବଣ୍ଟନ\"0 ସେଓ ଏବଂ 1 ଟି କମଳା\",3) -> 3 - 0 - 1 = 2 ଫଳ_ବଣ୍ଟନ\"2 ସେଓ ଏବଂ 3 ଟି କମଳା\", 100) -> 100 - 2 - 3 = 95 ଫଳ_ବଣ୍ଟନ\"100 ସେଓ ଏବଂ 1 ଟି କମଳା\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"ଏକ ବୃକ୍ଷର ଶାଖା ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଆରେ ଦିଆଯାଇଥିବା ଅଣ-ନକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ନୋଡଗୁଡିକ ଆପଣଙ୍କ କାର୍ଯ୍ୟ ହେଉଛି ନୋଡଗୁଡିକ ମଧ୍ୟରୁ ଗୋଟିଏ ଟାଣିବା ଏବଂ ଏହାକୁ ଫେରସ୍ତ କରିବା _ ଟାଣାଯାଇଥିବା ନୋଡଟି ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ସହିତ ନୋଡ ହେବା ଉଚିତ _ ଯଦି ସମାନ ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ସହିତ ଏକାଧିକ ନୋଡ ମିଳିଥାଏ ତେବେ ସର୍ବନିମ୍ନ ସୂଚକାଙ୍କ ଥିବା ନୋଡକୁ ଫେରସ୍ତ କରନ୍ତୁ _ ଟାଣାଯାଇଥିବା ନୋଡକୁ ଏକ ତାଲିକାରେ ଫେରସ୍ତ କରାଯିବା ଉଚିତ, [smallest_value, ଏହାର ସୂଚକାଙ୍କ] _ ଯଦି କୌଣସି ଯୁଗ୍ମ ମୂଲ୍ୟ ନାହିଁ କିମ୍ବା ଦିଆଯାଇଥିବା ଆରେ ଖାଲି ଅଛି, ଫେରସ୍ତ କରନ୍ତୁ _ ଉଦାହରଣ 1: ଇନପୁଟ୍: [4,2,3] ଆଉଟପୁଟ୍: [2, 1] ବ୍ୟାଖ୍ୟାଃ 2 ର ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ଅଛି, ଏବଂ 2 ର ସର୍ବନିମ୍ନ ସୂଚକାଙ୍କ ଅଛି _ ଉଦାହରଣ 2: ଇନପୁଟ୍: [1,2,3] ଆଉଟପୁଟ୍: [2, 1] ବ୍ୟାଖ୍ୟାଃ 2 ର ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ମୂଲ୍ୟ ଅଛି, ଏବଂ 2 ର ସର୍ବନିମ୍ନ ଯୁଗ୍ମ ସୂଚକାଙ୍କ ଅଛି _ ଉଦାହରଣ 3: ଇନପୁଟ୍: []: [output] [output] [output] [4: [input] [input] [input] [input] [input: [input] [input] [input] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''ଆପଣଙ୍କୁ ଏକ ଅଣ-ଖାଲି ଧନାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ତାଲିକା ଦିଆ ଯାଇଛି. ଶୂନ ଠାରୁ ବଡ ଏବଂ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ମୂଲ୍ୟ ଠାରୁ ଅଧିକ କିମ୍ବା ସମାନ ଥିବା ସର୍ବ ବୃହତ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଫେରାନ୍ତୁ. ଏକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ବାରମ୍ବାରତା ହେଉଛି ଏହା ତାଲିକାରେ ଦେଖାଯାଉଥିବା ସମୟର ସଂଖ୍ୟା. ଯଦି ଏପରି କୌଣସି ମୂଲ୍ୟ ନାହିଁ, ତେବେ -୧ ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ ସନ୍ଧାନ _ ([4, 1, 2, 2, 3, 1]) == 2 ସନ୍ଧାନ _ ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 ସନ୍ଧାନ _ ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ତାଲିକା ଦିଆଯାଇଥିବା ବେଳେ, ଅଜବ କ୍ରମରେ ତାଲିକା ଫେରାଇବ । ଅଜବ ସର୍ଟ କରିବା, ଯେତେବେଳେ ଆପଣ ସର୍ବନିମ୍ନ ମୂଲ୍ୟ ସହିତ ଆରମ୍ଭ କରନ୍ତି, ତାପରେ ଅବଶିଷ୍ଟ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡିକର ସର୍ବାଧିକ, ତାପରେ ସର୍ବନିମ୍ନ ଏବଂ ଅନ୍ୟାନ୍ୟ _ ଉଦାହରଣଃ ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ (([1, 2, 3, 4]) == [1, 4, 2, 3] ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ (([5, 5, 5, 5]) == [5, 5, 5, 5] ଅଜବ_ସର୍ଟ_ଲିଷ୍ଟ (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ଏକ ତ୍ରିଭୁଜର ତିନି ପାର୍ଶ୍ବ ର ଲମ୍ବ ଦିଆଗଲା. ତ୍ରିଭୁଜର କ୍ଷେତ୍ରଫଳକୁ 2 ଦଶମିକ ବିନ୍ଦୁରେ ଗୋଲ କରନ୍ତୁ ଯଦି ତିନୋଟି ପାର୍ଶ୍ବ ଏକ ବୈଧ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି. ଅନ୍ୟଥା -1 ଫେରାନ୍ତୁ ତିନୋଟି ପାର୍ଶ୍ବ ଏକ ବୈଧ ତ୍ରିଭୁଜ ଗଠନ କରନ୍ତି ଯେତେବେଳେ କୌଣସି ଦୁଇଟି ପାର୍ଶ୍ବ ର ସମୁଦାୟ ତୃତୀୟ ପାର୍ଶ୍ବ ଠାରୁ ବଡ _ ଉଦାହରଣ: ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ରଫଳ ((3, 4, 5) == 6.00 ତ୍ରିଭୁଜ_ କ୍ଷେତ୍ରଫଳ ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ବସ୍ତୁ q ଉଡିଯିବ, ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା _ ବସ୍ତୁ q ଉଡିଯିବ ଯଦି ଏହା ସନ୍ତୁଳିତ (ଏହା ଏକ ପାଲିଣ୍ଡ୍ରୋମିକ ତାଲିକା) ଏବଂ ଏହାର ଉପାଦାନଗୁଡିକର ସମୁଦାୟ ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍ କିମ୍ବା ସମାନ _ ଉଦାହରଣ: will_it_fly (([1, 2], 5) â -> ମିଥ୍ୟା # 1+2 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନ ଠାରୁ କମ୍, କିନ୍ତୁ ଏହା ଅସନ୍ତୁଳିତ _ will_it_fly (([3, 2, 3], 1) â -> ମିଥ୍ୟା # ଏହା ସନ୍ତୁଳିତ, କିନ୍ତୁ 3+2+3 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନଠାରୁ ଅଧିକ _ will_it_fly (([3, 2, 3], 9) â -> ସତ୍ୟ # 3+23 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନଠାରୁ କମ୍, ଏବଂ ଏହା ସନ୍ତୁଳିତ _ will_it_fly ((([3], 5) â -> ସତ୍ୟ # 3 ସର୍ବାଧିକ ସମ୍ଭାବ୍ୟ ଓଜନଠାରୁ କମ୍, ଏବଂ ଏହା ସନ୍ତୁଳିତ _'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"ଏକ ସରଳ ସଂଖ୍ଯା ଧାରାକୁ ଧାରଣ କରି, ସରଳ ସଂଖ୍ଯା ଧାରାକୁ ପଲିଣ୍ଡ୍ରୋମିକ କରିବା ପାଇଁ ସର୍ବନିମ୍ନ ସଂଖ୍ଯକ ଉପାଦାନକୁ ଖୋଜନ୍ତୁ. ଏକ ପଲିଣ୍ଡ୍ରୋମିକ ସରଳତା ହେଉଛି ଏକ ସରଳତା ଯାହା ସମାନ ଭାବରେ ପଛୁଆ ଏବଂ ଆଗକୁ ପଢାଯାଏ. ଗୋଟିଏ ପରିବର୍ତ୍ତନ ରେ, ଆପଣ ଏକ ଉପାଦାନକୁ ଅନ୍ୟ କୌଣସି ଉପାଦାନକୁ ପରିବର୍ତ୍ତନ କରିପାରିବେ. ଉଦାହରଣ ସ୍ୱରୂପ: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଦୁଇଟି ସୂଚୀକୁ ଗ୍ରହଣ କରେ ଏବଂ ସେହି ସୂଚୀକୁ ଫେରାଇଥାଏ ଯାହାର ସମସ୍ତ ସୂଚୀ ଅନ୍ୟ ସୂଚୀଠାରୁ କମ୍ ସଂଖ୍ୟକ ଅକ୍ଷର ଥାଏ । ଯଦି ଦୁଇଟି ସୂଚୀ ସମାନ ସଂଖ୍ୟକ ଅକ୍ଷର ଥାଏ, ତେବେ ପ୍ରଥମ ସୂଚୀକୁ ଫେରାଇଥାଏ । ଉଦାହରଣ total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi]) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4' , '5' -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଦିଆଯାଇଥିବା ସଂଖ୍ୟାଟି 3 ଟି ଅଶୂର ସଂଖ୍ୟା ଗୁଡ଼ିକର ଗୁଣନ ଏବଂ ଅନ୍ୟଥା ମିଥ୍ୟା ଅଟେ । ଜାଣି ରଖନ୍ତୁ ଯେ (a) 100 ରୁ କମ୍ ଅଟେ । ଉଦାହରଣ: is_multiply_prime(30) == ସତ୍ୟ 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"ଆପଣଙ୍କ କାମ ହେଉଛି ଏକ ଫଙ୍କସନ ଲେଖିବା ଯାହା ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଏକ ସଂଖ୍ୟା x ହେଉଛି n ର ଏକ ସରଳ ଶକ୍ତି ଏବଂ ଅନ୍ୟାନ୍ୟ କ୍ଷେତ୍ରରେ ମିଥ୍ୟା ହୋଇଥାଏ । x ହେଉଛି n ର ଏକ ସରଳ ଶକ୍ତି ଯଦି n**int=x ଉଦାହରଣ ସ୍ୱରୂପ: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା a କୁ ନେଇଥାଏ ଏବଂ True କୁ ଫେରାଇଥାଏ ଯଦି ଏହି ଇନଗେଜର କିଛି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଘନ ହୋଇଥାଏ। ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ବୈଧ ଅଟେ। ଉଦାହରଣଃ iscube (୧) ==> True (୨) ==> False (୧) ==> True (୬୪) ==> True (୦) ==> True (୧୮୦) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ ଲେଖିବା ପାଇଁ କୁହାଯାଇଥିଲା ଯାହା ଏକ ହେକ୍ସାଡେସିମାଲ ସଂଖ୍ୟାକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ହେକ୍ସାଡେସିମାଲ ଅଙ୍କ ସଂଖ୍ୟା ଗଣନା କରେ ଯାହା ପ୍ରାଇମ ଅଟେ (ପ୍ରାଇମ ସଂଖ୍ୟା, କିମ୍ବା ଏକ ପ୍ରାଇମ, 1 ରୁ ବଡ ପ୍ରାକୃତିକ ସଂଖ୍ୟା ଯାହା ଦୁଇଟି ଛୋଟ ପ୍ରାକୃତିକ ସଂଖ୍ୟା ର ଉତ୍ପାଦ ନୁହେଁ) । ହେକ୍ସାଡେସିମାଲ ଅଙ୍କ ହେଉଛି 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. ପ୍ରାଇମ ସଂଖ୍ୟା ହେଉଛି 2, 3, 5, 7, 11, 13, 17,... ତେଣୁ ଆପଣଙ୍କୁ ନିମ୍ନଲିଖିତ ଅଙ୍କ ମଧ୍ୟରୁ ଏକ ସଂଖ୍ୟା ନିର୍ଣ୍ଣୟ କରିବାକୁ ପଡିବଃ 2, 3, 5, 7, B (= ଦଶମିକ 11), D (= ଦଶମିକ 13) ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ସଠିକ୍ କିମ୍ବା ଖାଲି ଷ୍ଟ୍ରିଙ୍ଗ, ଏବଂ ପ୍ରତୀକ A,B,C,D,E,F ସର୍ବଦା ବଡ଼ ଅକ୍ଷର ଅଟେ । ଉଦାହରଣ: \"num = AB\" ପାଇଁ ଆଉଟପୁଟ୍ ହେବା ଉଚିତ 1. \"num = AB\" ପାଇଁ ଆଉଟପୁଟ୍ ହେବା ଉଚିତ 1. \"num = 1077E\" ପାଇଁ ଆଉଟପୁଟ୍ ହେବା ଉଚିତ 2. \"num = AB33\" ପାଇଁ \"num = AED\" ହେବା ଉଚିତ 4. \"num = \"num = 4. \"BC\" ପାଇଁ \"num = 6.01234567\" ପାଇଁ \"A\" ହେବା ଉଚିତ  2020 \"\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"ଆପଣଙ୍କୁ ଦଶମିକ ରୂପରେ ଏକ ସଂଖ୍ୟା ଦିଆଯିବ ଏବଂ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏହାକୁ ବାଇନାରୀ ଫର୍ମାଟରେ ରୂପାନ୍ତର କରିବା. ଫଳନକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇବ, ଯେଉଁଥିରେ ପ୍ରତ୍ୟେକ ଅକ୍ଷର ଏକ ବାଇନାରୀ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରିଥାଏ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ପ୍ରତ୍ୟେକ ଅକ୍ଷର '0' କିମ୍ବା '1' ହେବ. ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ଆରମ୍ଭରେ ଏବଂ ଶେଷରେ ଏକ ଅତିରିକ୍ତ ଯୋଡି ଅକ୍ଷର 'db' ରହିବ. ଫର୍ମାଟରେ ସାହାଯ୍ୟ କରିବାକୁ ଅତିରିକ୍ତ ଅକ୍ଷରଗୁଡ଼ିକ ସେଠାରେ ଅଛି. ଉଦାହରଣଃ ଦଶମିକ_ବାୟିନାରୀକୁ_୧୫) # \"db1111db\" ଦଶମିକ_ବାୟିନାରୀକୁ_୩୨) # \"db100000db\" ଫେରାଇଥାଏ _\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆ ଯାଇଛି. ଆପଣଙ୍କର କାମ ହେଉଛି ଷ୍ଟ୍ରିଙ୍ଗଟି ଖୁସି ଅଛି କି ନାହିଁ ତାହା ଯାଞ୍ଚ କରିବା. ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଖୁସି ଅଛି ଯଦି ଏହାର ଲମ୍ବ ଅତି କମରେ 3 ଏବଂ ପ୍ରତ୍ୟେକ 3 କ୍ରମିକ ଅକ୍ଷର ଅଲଗା ଅଟେ ଉଦାହରଣ ସ୍ୱରୂପ: is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (a) => False is_happy (a) => False is_happy (b) => True is_happy (c) => False is_happy (d) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"ଏହା ସେମିଷ୍ଟରର ଶେଷ ସପ୍ତାହ ଏବଂ ଶିକ୍ଷକଙ୍କୁ ଛାତ୍ରଛାତ୍ରୀଙ୍କୁ ଗ୍ରେଡ୍ ଦେବାକୁ ପଡିବ _ ଶିକ୍ଷକ ଗ୍ରେଡ୍ ପାଇଁ ନିଜର ଆଲଗୋରିଦମ ତିଆରି କରିଛନ୍ତି _ କେବଳ ସମସ୍ୟା ହେଉଛି ସେ ଗ୍ରେଡ୍ ପାଇଁ ବ୍ୟବହାର କରିଥିବା କୋଡ୍ ହରାଇଛନ୍ତି _ ସେ ଆପଣଙ୍କୁ କିଛି ଛାତ୍ରଙ୍କ ପାଇଁ GPA ର ଏକ ତାଲିକା ଦେଇଛନ୍ତି ଏବଂ ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ପଡିବ ଯାହା ନିମ୍ନଲିଖିତ ଟେବୁଲ୍ ବ୍ୟବହାର କରି ଅକ୍ଷର ଗ୍ରେଡ୍ ର ଏକ ତାଲିକା ଦେଇପାରିବ _ GPA  ଅକ୍ଷର ଗ୍ରେଡ୍ 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"ଗୋଟିଏ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ ଏବଂ ସତ୍ୟ ଫେରାଇଥାଏ ଯଦି ଷ୍ଟ୍ରିଙ୍ଗର ଲମ୍ବ ଏକ ଅଶୂର ସଂଖ୍ୟା ହୋଇଥାଏ କିମ୍ବା ମିଥ୍ୟା ଅନ୍ୟଥା ଉଦାହରଣ prime_length ({'hello') == true prime_length ({'abcdcba') == true prime_length ({'kittens') == true prime_length ({'orange') == ମିଥ୍ୟା \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, n-ଅଙ୍କ ବିଶିଷ୍ଟ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗୁଡିକର ଗଣନା ଫେରାଇବ ଯାହା 1 ସହିତ ଆରମ୍ଭ କିମ୍ବା ଶେଷ ହୁଏ.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା N ଦିଆଗଲା, ଏହାର ଅଙ୍କଗୁଡ଼ିକର ସମୁଦାୟ ସମୁଦାୟକୁ ବାଇନାରୀରେ ଫେରାନ୍ତୁ. ଉଦାହରଣ N = 1000 ପାଇଁ, ଅଙ୍କଗୁଡ଼ିକର ସମୁଦାୟ 1 ହେବ ଆଉଟପୁଟ୍ \"1\" ହେବା ଉଚିତ _ N = 150 ପାଇଁ, ଅଙ୍କଗୁଡ଼ିକର ସମୁଦାୟ 6 ହେବ ଆଉଟପୁଟ୍ \"110\" ହେବା ଉଚିତ _ N = 147 ପାଇଁ, ଅଙ୍କଗୁଡ଼ିକର ସମୁଦାୟ 12 ହେବ ଆଉଟପୁଟ୍ \"1100\" ହେବା ଉଚିତ _ ବିବର୍ତକଗୁଡ଼ିକଃ @N ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପ୍ରତିବନ୍ଧକଃ 0 â‰¤ N â‰¤ 10000. ଆଉଟପୁଟ୍ଃ ବାଇନାରୀ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ _\"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"ଏକ ଅସଂଖ୍ୟ ସଂଖ୍ୟାର ଏକ ତାଲିକା ଦିଆଗଲା lst. ଅଙ୍କ ସଂଖ୍ୟାକୁ ଯୋଡନ୍ତୁ lst.\"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ ଏବଂ ଏହାର ଏକ ଅର୍ଡର ହୋଇଥିବା ସଂସ୍କରଣ ଫେରାଇଥାଏ। ଷ୍ଟ୍ରିଙ୍ଗର ଅର୍ଡର ହୋଇଥିବା ସଂସ୍କରଣ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଯେଉଁଠାରେ ସମସ୍ତ ଶବ୍ଦ (ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ) ଏକ ନୂତନ ଶବ୍ଦ ଦ୍ୱାରା ବଦଳାଯାଇଥାଏ ଯେଉଁଠାରେ ସମସ୍ତ ଅକ୍ଷର ASCII ମୂଲ୍ୟ ଉପରେ ଆଧାର କରି କ୍ରମାନୁସାରେ ସଜାଯାଇଛି। ଟିପ୍ପଣୀଃ ଆପଣ ବାକ୍ୟରେ ଶବ୍ଦ ଏବଂ ଖାଲି ସ୍ଥାନର କ୍ରମାନୁସାରେ ରଖିବା ଉଚିତ _ ଉଦାହରଣ ସ୍ୱରୂପଃ ଆଣ୍ଟି_ସଫଲ୍ ((('ହାଏଲ୍ଲୋ') ଫେରାଇଥାଏ 'ହାଏଲ୍' ଆଣ୍ଟି_ସଫଲ୍ ((('ହାଲୋ') ଫେରାଇଥାଏ 'ଏଲ୍ଲୋ' ଆଣ୍ଟି_ସଫଲ୍ (('ହାଲୋ ୱାର୍ଲ୍ଡ! ! ! ! ') ଫେରାଇଥାଏ 'ହାଲୋ !!! ୱ୍ ଡ୍ଲର୍ ' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ 2D ତଥ୍ୟ ଦିଆଯାଇଛି, ଯାହାକି ଏକ ନେଷ୍ଟେଡ୍ ତାଲିକା ଭାବରେ ଅଛି, ଯାହା ମାଟ୍ରିକ୍ସ ପରି ସମାନ, କିନ୍ତୁ ମାଟ୍ରିକ୍ସ ପରି ନୁହେଁ, ପ୍ରତ୍ୟେକ ଧାଡ଼ିରେ ଭିନ୍ନ ସଂଖ୍ୟକ ସ୍ତମ୍ଭ ରହିପାରେ _ lst, ଏବଂ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା x ଦିଆଯାଇଥାଏ, ତାଲିକାରେ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା x ଖୋଜନ୍ତୁ, ଏବଂ ଟାପଲ୍ସର ତାଲିକା ଫେରାନ୍ତୁ, [(x1, y1), (x2, y2) ...] ଯେପରି ପ୍ରତ୍ୟେକ ଟାପଲ୍ ଏକ କୋଅର୍ଡିନେଟ୍ - (ଶୃଙ୍ଖଳା, ସ୍ତମ୍ଭ) 0 ରୁ ଆରମ୍ଭ ହୁଏ _ କୋଅର୍ଡିନେଟ୍ ଆରମ୍ଭରେ ଧାଡିଗୁଡ଼ିକ ଦ୍ୱାରା କ୍ରମବର୍ଦ୍ଧକ ଭାବରେ ସର୍ଟ କରନ୍ତୁ _ ଏହା ସହିତ, ସ୍ତମ୍ଭଗୁଡ଼ିକ ଦ୍ୱାରା ଧାଡିର କୋଅର୍ଡିନେଟ୍ କ୍ରମବର୍ଦ୍ଧକ ଭାବରେ ସର୍ଟ କରନ୍ତୁ _ ଉଦାହରଣଃ get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] == [[ଶୃଙ୍ଖଳା 1, 1, 2, 3]], 2) [2, 3]]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"ଅଣ-ନକାରାତ୍ମକ ସଂଖ୍ୟାର ଏକ ଧାରା ଦିଆଯାଇ, ସର୍ଟ କରିବା ପରେ ଦିଆଯାଇଥିବା ଧାରା ର ଏକ କପି ଫେରାଇ ଦିଅନ୍ତୁ, ଆପଣ ଦିଆଯାଇଥିବା ଧାରା କୁ ଅକ୍ରମାନ୍ତରେ ସର୍ଟ କରିବେ ଯଦି ସମୁଦାୟ (ପ୍ରଥମ ସୂଚକାଙ୍କ ମୂଲ୍ୟ, ଶେଷ ସୂଚକାଙ୍କ ମୂଲ୍ୟ) ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କକ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅ\"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"ଏକ ଫଳନ encrypt ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଏକ ଆର୍ଗୁମେଣ୍ଟ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ ଆଲଫାବେଟକୁ ଘୂର୍ଣ୍ଣନ କରି ଏକ ଏନକ୍ରିପ୍ଟ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇଥାଏ। ଆଲଫାବେଟକୁ ଏପରି ଭାବରେ ଘୂର୍ଣ୍ଣନ କରାଯିବା ଉଚିତ ଯେ ଅକ୍ଷରଗୁଡିକ ଦୁଇଗୁଣିତ ଦୁଇ ସ୍ଥାନରେ ଘୁଞ୍ଚିଯାଏ _ ଉଦାହରଣ ସ୍ୱରୂପ: encrypt (('hi') ଫେରାଇଥାଏ 'lm' encrypt (('asdfghjkl') ଫେରାଇଥାଏ 'ewhjklnop' encrypt (('gf') ଫେରାଇଥାଏ 'kj' encrypt (('et') ଫେରାଇଥାଏ 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ତାଲିକା ଦିଆ ଯାଇଛି. ଏକ ଫଙ୍କସନ next_smallest ଲେଖନ୍ତୁ ଯାହା ତାଲିକା ର ଦ୍ବିତୀୟ କ୍ଷୁଦ୍ରତମ ଉପାଦାନ କୁ ଫେରାଇଥାଏ. ଯଦି ଏପରି କୌଣସି ଉପାଦାନ ନାହିଁ ତେବେ None କୁ ଫେରାଇଥାଏ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯିବ, ଏବଂ ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ବିରକ୍ତିକର ସଂଖ୍ୟା ଗଣନା କରିବା । ଏକ ବିରକ୍ତିକର ହେଉଛି ଏକ ବାକ୍ୟ ଯାହା \"I\" ଶବ୍ଦ ସହିତ ଆରମ୍ଭ ହୁଏ । ବାକ୍ୟଗୁଡ଼ିକ '.', '?' କିମ୍ବା '! ' ଦ୍ୱାରା ସୀମିତ । ଉଦାହରଣ ସ୍ୱରୂପଃ >>> is_bored ((\"ହେଲୋ ୱାର୍ଲ୍ଡ\") 0 >>> is_bored ((\"ଆକାଶ ନୀଳ । ସୂର୍ଯ୍ୟ ଉଜ୍ଜ୍ୱଳ । ମୁଁ ଏହି ପାଣିପାଗକୁ ଭଲ ପାଏ\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା 3 ଟି ସଂଖ୍ୟା ଗ୍ରହଣ କରେ. ଯଦି ଗୋଟିଏ ସଂଖ୍ୟା ଅନ୍ୟ ଦୁଇଟିର ସମୁଦାୟ ସହିତ ସମାନ ହୁଏ ଏବଂ ସମସ୍ତ ସଂଖ୍ୟା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଅଟେ ତେବେ ଏହା ସତ୍ୟ ଫେରାଇଥାଏ _ ଅନ୍ୟାନ୍ୟ କ୍ଷେତ୍ରରେ ଏହା ମିଥ୍ୟା ଫେରାଇଥାଏ _ ଉଦାହରଣ any_int{n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ବାର୍ତ୍ତା ଗ୍ରହଣ କରେ, ଏବଂ ଏପରି ଭାବରେ ଏନକୋଡ୍ କରେ ଯାହା ସମସ୍ତ ଅକ୍ଷରର କେସ୍ ବଦଳାଇଥାଏ, ବାର୍ତ୍ତାରେ ଥିବା ସମସ୍ତ ସ୍ୱରଗୁଡ଼ିକୁ ଇଂରାଜୀ ଅକ୍ଷରଗୁଡିକରେ ସେହି ସ୍ୱରଠାରୁ 2 ଟି ସ୍ଥାନ ଆଗରେ ଥିବା ଅକ୍ଷର ସହିତ ବଦଳାଇଥାଏ _ କେବଳ ଅକ୍ଷରଗୁଡିକ ଧରନ୍ତୁ _ ଉଦାହରଣଃ >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ତାଲିକା ଦିଆଯାଉଛି । ଆପଣଙ୍କୁ ସବୁଠାରୁ ବଡ ପ୍ରାଥମିକ ମୂଲ୍ୟ ଖୋଜିବାକୁ ପଡିବ ଏବଂ ଏହାର ଅଙ୍କଗୁଡିକର ସମୁଦାୟ ଫେରାଇବାକୁ ପଡିବ _ ଉଦାହରଣଃ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ପାଇଁ ଆଉଟପୁଟ୍ 10 ହେବା ଉଚିତ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ପାଇଁ ଆଉଟପୁଟ୍ 25 ହେବା ଉଚିତ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ପାଇଁ ଆଉଟପୁଟ୍ 13 ହେବା ଉଚିତ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ପାଇଁ ଆଉଟପୁଟ୍ 11 ହେବା ଉଚିତ lst = [0,81,12,31,21] ପାଇଁ ଆଉଟପୁଟ୍ 3 ହେବା ଉଚିତ lst = [0,1,8,1,2,7] ପାଇଁ ଆଉଟପୁଟ୍ 7 ହେବା ଉଚିତ \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"ଏକ ଶବ୍ଦକୋଷକୁ ଦେଖି, True ଫେରାଇଦିଅନ୍ତୁ ଯଦି ସମସ୍ତ ଚାବି ଛୋଟ ଅକ୍ଷରରେ ବା ସମସ୍ତ ଚାବି ବଡ଼ ଅକ୍ଷରରେ ହୋଇଥାଏ, ଅନ୍ୟଥା False ଫେରାଇଦିଅନ୍ତୁ. ଫଳନଟି False ଫେରାଇବ ଯଦି ଦିଆଯାଇଥିବା ଶବ୍ଦକୋଷଟି ଖାଲି ଥାଏ. ଉଦାହରଣ: check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) True ଫେରାଇବ. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) False ଫେରାଇବ. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) False ଫେରାଇବ. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) False ଫେରାଇବ. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"}) True ଫେରାଇବ.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"ଏକ ଫଳନକୁ କାର୍ଯ୍ୟକାରୀ କରନ୍ତୁ ଯାହା ଏକ ଅଣ-ନକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରହଣ କରେ ଏବଂ ପ୍ରଥମ n ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ଏକ ସରଳୀକୃତ ସୂଚକକୁ ଫେରାଇଥାଏ ଯାହା ପ୍ରାଥମିକ ସଂଖ୍ୟା ଏବଂ n ରୁ ଛୋଟ ଅଟେ । ଉଦାହରଣ ସ୍ୱରୂପ: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"ଫଳନଟି ପୂର୍ଣ୍ଣ କରନ୍ତୁ ଯାହା ଦୁଇଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରହଣ କରେ ଏବଂ ସେମାନଙ୍କର ଏକକ ଅଙ୍କଗୁଡ଼ିକର ଗୁଣନ ଫେରାଇଥାଏ। ଧରନ୍ତୁ ଯେ ଇନପୁଟ୍ ସର୍ବଦା ବୈଧ ଅଟେ। ଉଦାହରଣଃ ଗୁଣନ (୧୪୮, ୪୧୨) ୧୬ ଫେରାଇବ _ ଗୁଣନ (୧୯, ୨୮) ୭୨ ଫେରାଇବ _ ଗୁଣନ (୨୦୨୦, ୧୮୫୧) ୦ ଫେରାଇବ _ ଗୁଣନ (୧୪, ୧୫) ୨୦ ଫେରାଇବ _\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆଗଲା, ସମାନ ସୂଚକାଙ୍କରେ ଥିବା ବଡ଼ ଅକ୍ଷର ସ୍ୱରଗୁଡ଼ିକର ସଂଖ୍ୟା ଗଣନା କରନ୍ତୁ. ଉଦାହରଣ ସ୍ୱରୂପ: count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 ଫେରାଇଥାଏ \"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ଏକ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ମୂଲ୍ୟ (ଷ୍ଟ୍ରିଙ୍ଗ) ଗ୍ରହଣ କରେ ଏବଂ ଏହାର ନିକଟତମ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ _ ଯଦି ସଂଖ୍ୟାଟି ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ସମାନ ଦୂରତାରେ ଥାଏ, ତେବେ ଏହାକୁ ଶୂନରୁ ଦୂରେଇ ଘୁଞ୍ଚାଇ ଦିଅନ୍ତୁ _ ଉଦାହରଣ >>> ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ((\"10\") 10 >>> ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ((\"15.3\") 15 ଟିପ୍ପଣୀଃ ଶୂନରୁ ଦୂରେଇ ଘୁଞ୍ଚାଇବାର ଅର୍ଥ ହେଉଛି ଯଦି ଦିଆଯାଇଥିବା ସଂଖ୍ୟା ଦୁଇଟି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଠାରୁ ସମାନ ଦୂରତାରେ ଥାଏ, ତେବେ ଆପଣ ଫେରାଇଥିବା ସଂଖ୍ୟାଟି ଶୂନରୁ ଦୂରରେ ଥିବା ସଂଖ୍ୟା _ ଉଦାହରଣ ସ୍ୱରୂପ ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା \" ((14.5\") 15 ଫେରାଇବା ଉଚିତ ଏବଂ ନିକଟତମ_ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା \" ((-14.5\") -15. ଫେରାଇବା ଉଚିତ _'''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଆପଣଙ୍କୁ ପଥରର n ସ୍ତର ଏକ ପଥର ତିଆରି କରିବାକୁ ପଡିବ _ ପ୍ରଥମ ସ୍ତରରେ n ପଥର ଅଛି _ ପରବର୍ତ୍ତୀ ସ୍ତରରେ ପଥର ସଂଖ୍ୟା ହେଉଛି: - ପରବର୍ତ୍ତୀ ଅଙ୍କ ଯଦି n ଅଙ୍କ _ - ପରବର୍ତ୍ତୀ ଯୁଗ୍ମ ସଂଖ୍ୟା ଯଦି n ଯୁଗ୍ମ _ ଏକ ତାଲିକା ରେ ପ୍ରତ୍ୟେକ ସ୍ତରରେ ପଥର ସଂଖ୍ୟା ଫେରାନ୍ତୁ, ଯେଉଁଠାରେ ସୂଚକାଙ୍କ i ରେ ଥିବା ଉପାଦାନ ସ୍ତରରେ ପଥର ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ (i+1) _ ଉଦାହରଣଃ >>> make_a_pile(3) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯିବ ଯାହା କମା କିମ୍ବା ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ ହେବ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଶବ୍ଦକୁ ଶବ୍ଦ ରେ ବିଭକ୍ତ କରିବା ଏବଂ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ଆରେ ଫେରସ୍ତ କରିବା _ ଉଦାହରଣ ସ୍ୱରୂପ: ଶବ୍ଦ_ଶୃଙ୍ଖଳ (_string) \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] ଶବ୍ଦ_ଶୃଙ୍ଖଳ (_string) \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"ଏହି ଫଙ୍କସନ ଦୁଇଟି ସକାରାତ୍ମକ ସଂଖ୍ୟା x ଓ y ନେଇଥାଏ ଏବଂ [x, y] ଅନ୍ତର୍ଭୁକ୍ତ ରେ ଥିବା ସବୁଠାରୁ ବଡ ସମ ସଂଖ୍ଯା ସଂଖ୍ୟାକୁ ଫେରାଇଥାଏ । ଯଦି ଏପରି କୌଣସି ସଂଖ୍ୟା ନଥାଏ, ତେବେ ଫଙ୍କସନ -1 ଫେରାଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପ: choose_num ((12, 15) = 14 choose_num ((13, 12) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"ଆପଣଙ୍କୁ ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଏବଂ m ଦିଆ ଯାଇଛି, ଏବଂ ଆପଣଙ୍କର କାମ ହେଉଛି n ରୁ m ପର୍ଯ୍ୟନ୍ତ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗୁଡିକର ହାରାହାରି ଗଣନା କରିବା (n ଏବଂ m ଅନ୍ତର୍ଭୁକ୍ତ କରି) । ଉତ୍ତରକୁ ନିକଟତମ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଗୋଲ କରନ୍ତୁ ଏବଂ ଏହାକୁ ବାଇନାରୀକୁ ରୂପାନ୍ତର କରନ୍ତୁ । ଯଦି n m ରୁ ବଡ, ତେବେ -1 ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ ଗୋଲ_ଅବଗ_1, 5) => \"0b11\" ଗୋଲ_ଅବଗ_7, 5) => -1 ଗୋଲ_ଅବଗ_10, 20) => \"0b1111\" ଗୋଲ_ଅବଗ_20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା x ର ତାଲିକା ଦିଆଗଲା. ସମସ୍ତ ଉପାଦାନର ଏକ ସର୍ଟ ତାଲିକା ଫେରାଇଥାଏ ଯେଉଁଥିରେ କୌଣସି ଯୁଗ୍ମ ଅଙ୍କ ନାହିଁ. ଟିପ୍ପଣୀଃ ଫେରସ୍ତ ତାଲିକା ବୃଦ୍ଧି କ୍ରମରେ ସର୍ଟ କରାଯିବା ଉଚିତ. ଉଦାହରଣ ସ୍ୱରୂପଃ >>> ଅନନ୍ୟ_ଅଙ୍କଗୁଡ଼ିକ (([୧୫, ୩୩, ୧୪୨୨, ୧]) [୧, ୧୫, ୩୩] >>> ଅନନ୍ୟ_ଅଙ୍କଗୁଡ଼ିକ (([୧୫୨, ୩୨୩, ୧୪୨୨, ୧୦]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଧାରା ଦିଆଯାଇ, 1 ରୁ 9 ସମେତ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ସର୍ଟ କରନ୍ତୁ, ପରିଣାମ ଧାରାକୁ ଓଲଟାନ୍ତୁ, ଏବଂ ତାପରେ ପ୍ରତ୍ୟେକ ଅଙ୍କକୁ ଏହାର ଅନୁରୂପ ନାମ ସହିତ \"ଏକ\", \"ଦୁଇ\", \"ତିନି\", \"ଚାରି\", \"ପାଞ୍ଚ\", \"ଛଅ\", \"ସାତ\", \"ଆଠ\", \"ନଅ\" ରୁ ବଦଳାନ୍ତୁ _ ଉଦାହରଣ ସ୍ୱରୂପଃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ସର୍ଟ arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ରିଭର୍ସ arr -> [8, 5, 4, 3, 2, 2, 1, 1] ଫେରସ୍ତ କରନ୍ତୁ [Eight\", \"Five\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] ଯଦି ଧାରା ଖାଲି ଅଛି, ଏକ ରିଭର୍ସ ଫେରସ୍ତ କରନ୍ତୁଃ arr = [] return [] ଯଦି ଧାରାରେ କୌଣସି ଅଜଣା ସଂଖ୍ୟା ଅଛି, ଏହାକୁ ଅଣଦେଖା କରନ୍ତୁଃ arr = [1, -1 , 55] -> arr -> [1, 55] -> [5, 1] = [51] - 'One' return \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"ଫଳନ f କୁ କାର୍ଯ୍ୟକାରୀ କରନ୍ତୁ ଯାହା n କୁ ଏକ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରେ, ଏବଂ n ଆକାରର ଏକ ତାଲିକା ଫେରାଇଥାଏ, ଯେପରିକି ସୂଚକାଙ୍କ i ରେ ଥିବା ଉପାଦାନର ମୂଲ୍ୟ i ର କାରକ ଅଟେ ଯଦି i ସମାନ କିମ୍ବା 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡିକର ସମୁଦାୟ ଅନ୍ୟଥା _ i 1 ରୁ ଆରମ୍ଭ ହୁଏ _ i ର କାରକ ହେଉଛି 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡିକର ଗୁଣନ _ (1 * 2 * ... * i) ଉଦାହରଣଃ f ({}) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଏକ ଟାପଲ୍ ଫେରାଇଥାଏ ଯେଉଁଥିରେ ଅନ୍ତର୍ଭୁକ୍ତ ହୋଇଥାଏ {1, n} ପରିସର ମଧ୍ୟରେ ଥିବା ସମ ଏବଂ ଅଜଣା ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପାଲିଣ୍ଡ୍ରୋମ୍ ସଂଖ୍ୟା _ ଉଦାହରଣ 1: ଇନପୁଟ୍: 3 ଆଉଟପୁଟ୍: (1, 2) ବ୍ୟାଖ୍ୟାଃ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପାଲିଣ୍ଡ୍ରୋମ୍ ହେଉଛି 1, 2, 3. ସେଥିମଧ୍ୟରୁ ଗୋଟିଏ ସମ ଏବଂ ଦୁଇଟି ଅଜଣା _ ଉଦାହରଣ 2: ଇନପୁଟ୍: 12 ଆଉଟପୁଟ୍: (4, 6) ବ୍ୟାଖ୍ୟାଃ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ପାଲିଣ୍ଡ୍ରୋମ୍ ହେଉଛି 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ସେଥିମଧ୍ୟରୁ ଚାରିଟି ସମ ଏବଂ ସେଥିମଧ୍ୟରୁ 6 ଅଜଣା _ ଟିପ୍ପଣୀଃ 1. 1 <= n <= 10 ^ 3 _\"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"count_nums ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗୁଡିକୁ ନେଇଥାଏ ଏବଂ ସେହି ସଂଖ୍ୟା ଗୁଡିକୁ ଫେରାଇଥାଏ ଯାହାର ଅଙ୍କ ସମୁଦାୟ > 0 ଅଟେ । ଯଦି ଏକ ସଂଖ୍ୟା ନକାରାତ୍ମକ ହୋଇଥାଏ, ତେବେ ଏହାର ପ୍ରଥମ ସ୍ବାକ୍ଷରିତ ଅଙ୍କ ନକାରାତ୍ମକ ହେବ: ଉଦାହରଣ ସ୍ୱରୂପ -123 ଅଙ୍କ -1, 2, ଏବଂ 3 କୁ ସ୍ବାକ୍ଷରିତ କରିଛି: >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"ଆମେ N ସଂଖ୍ୟକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା arr[1], arr[2], ..., arr[N] ର ଏକ ସରଳୀକରଣ 'arr' ପାଇଛୁ. ସରଳୀକରଣରେ ଥିବା ସଂଖ୍ୟାଗୁଡିକ ଆକସ୍ମିକ ଭାବରେ ସଜାଡାଯିବ. ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ନିର୍ଣ୍ଣୟ କରିବା ଯେ ନିମ୍ନଲିଖିତ କାର୍ଯ୍ୟ ସମ୍ପାଦନ କରି ଏକ ସରଳୀକରଣକୁ ଅଣ-ହ୍ରାସ କ୍ରମରେ ସଜାଡିବା ସମ୍ଭବ କି ନାହିଁ: ଆପଣଙ୍କୁ ଦିଆଯାଇଥିବା ସରଳୀକରଣରେ ଯେକୌଣସି ସଂଖ୍ୟକ ଥର ଡାହାଣ ସ୍ଥାନାନ୍ତର କାର୍ଯ୍ୟ କରିବାକୁ ଅନୁମତି ଅଛି _ ଡାହାଣ ସ୍ଥାନାନ୍ତର କାର୍ଯ୍ୟ ଅର୍ଥାତ୍ ସରଳୀକରଣର ସମସ୍ତ ଉପାଦାନକୁ ଡାହାଣ ଦିଗରେ ଗୋଟିଏ ସ୍ଥାନ ସ୍ଥାନାନ୍ତର କରିବା _ ସରଳୀକରଣର ଶେଷ ଉପାଦାନକୁ ସରଳୀକରଣରେ ପ୍ରାରମ୍ଭିକ ସ୍ଥିତି ଅର୍ଥାତ୍ 0th ସୂଚକାଙ୍କକୁ ସ୍ଥାନାନ୍ତର କରାଯିବ _ ଯଦି ଉପରୋକ୍ତ କାର୍ଯ୍ୟ ସମ୍ପାଦନ କରି ସଜାଡିତ ସରଳୀକରଣ ପାଇବା ସମ୍ଭବ ତେବେ True ଫେରସ୍ତ କରନ୍ତୁ ଅନ୍ୟଥା False ଫେରସ୍ତ କରନ୍ତୁ _ ଯଦି ଦିଆଯାଇଥିବା ସରଳୀକରଣ ଖାଲି ଅଛି ତେବେ True ଫେରସ୍ତ କରନ୍ତୁ _ ଟିପ୍ପଣୀଃ ଦିଆଯାଇଥିବା ତାଲିକା ଅନନ୍ୟ ଉପାଦାନ ପାଇବା ପାଇଁ ଗ୍ୟାରେଣ୍ଟି ଦିଆଯାଇଛି _ ଉଦାହରଣ ସ୍ୱରୂପଃ move_one_(ball_[3, 4, 5, 1, 2] ==> ସତ୍ୟ ବ୍ୟାଖ୍ୟାଃ ଦୟୋଗ୍ୟ ବ୍ୟାଖ୍ୟାଃ 2 ଦ୍ୱାରା ଡାହାଣ କାର୍ଯ୍ୟ, ସରଳୀକରଣକୁ ଅଣ-ହ୍ରାସ କ୍ରମରେ ସଜାଡିବା ପାଇଁ ସରଳୀକରଣ ହାସଲ କରାଯାଇପାରିବ _[, ଡାହାଣ ସ୍ଥାନାନ୍ତର _one_ball_, 4, 3, ==== 4, 5, 2]] === ଏହା ଡାହାଣ ସ୍ଥାନାନ୍ତର କ୍ରମରେ କୌଣସି ସଜାଡିବା ପାଇଁ ସଜାଡ କରିବା ସମ୍ଭବ ନୁହେଁ _ ବ୍ୟାଖ୍ୟାଃ 1, === 5, === false === }\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"ଏହି ସମସ୍ୟା ରେ, ଆପଣ ଏକ ଫଙ୍କସନ କୁ କାର୍ଯ୍ୟକାରୀ କରିବେ ଯାହା ଦୁଇଟା ସଂଖ୍ୟା ତାଲିକା କୁ ନେଇଥାଏ, ଏବଂ ନିର୍ଣ୍ଣୟ କରେ କି କଣ ଏହା ସମ୍ଭବ ଅଟେ କି ସେଗୁଡିକ ମଧ୍ୟରେ ଉପାଦାନ ଗୁଡିକ ର ଏକ ଆଦାନ ପ୍ରଦାନ କରିବା lst1 କୁ କେବଳ ଯୁଗ୍ମ ସଂଖ୍ୟା ର ଏକ ତାଲିକା କରିବା ପାଇଁ. lst1 ଏବଂ lst2 ମଧ୍ୟରେ ଆଦାନ ପ୍ରଦାନ ଉପାଦାନ ଗୁଡିକ ର ସଂଖ୍ୟା ଉପରେ କୌଣସି ସୀମା ନାହିଁ. lst1 ଏବଂ lst2 ମଧ୍ୟରେ ଉପାଦାନ ଗୁଡିକ ର ଆଦାନ ପ୍ରଦାନ କରିବା ସମ୍ଭବ ଅଟେ lst1 ର ସମସ୍ତ ଉପାଦାନ କୁ ଯୁଗ୍ମ କରିବା ପାଇଁ, \"YES\" କୁ ଫେରାଇ ଦିଅନ୍ତୁ. ଅନ୍ୟଥା, \"NO\" କୁ ଫେରାଇ ଦିଅନ୍ତୁ. ଉଦାହରଣ ସ୍ବରୂପ: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" ଏହା ଧରାଯାଏ କି ଇନପୁଟ ତାଲିକା ଗୁଡିକ ଅଣ-ଖାଲି ହେବ. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"ଏକ ସ୍ପେସ୍ ପୃଥକ ଛୋଟ ଅକ୍ଷର ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯାଇଥିବା, ଅଧିକ ପୁନରାବୃତ୍ତି ସହିତ ଅକ୍ଷରର ଏକ ଅଭିଧାନ ଫେରାନ୍ତୁ ଏବଂ ସମାନ ଗଣନା ଧାରଣ କରନ୍ତୁ _ ଯଦି ଏକାଧିକ ଅକ୍ଷର ସମାନ ଘଟନା ଅଛି, ତେବେ ସେଗୁଡିକ ଫେରାନ୍ତୁ _ ଉଦାହରଣଃ ହିଷ୍ଟୋଗ୍ରାମ୍ _\"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"କାର୍ଯ୍ୟ ଆମକୁ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ s ଏବଂ c ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ s ରେ ଥିବା ସମସ୍ତ ଅକ୍ଷରକୁ ଅପସାରଣ କରିବାକୁ ପଡିବ ଯାହା c ରେ ଯେକୌଣସି ଅକ୍ଷର ସହିତ ସମାନ ଅଟେ ତାପରେ ଯାଞ୍ଚ କରନ୍ତୁ ଯେ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପାଲିଣ୍ଡ୍ରୋମ୍ ଅଟେ କି ନାହିଁ _ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ପାଲିଣ୍ଡ୍ରୋମ୍ କୁହାଯାଏ ଯଦି ଏହା ପଛକୁ ସମାନ ପଛୁଆ ଭାବରେ ପ read ାଯାଏ _ ଆପଣ ଯାଞ୍ଚ ପାଇଁ ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଏବଂ ସତ୍ୟ / ମିଥ୍ୟା ଥିବା ଏକ ଟାପଲ୍ ଫେରସ୍ତ କରିବା ଉଚିତ୍ _ ଉଦାହରଣ ପାଇଁ s = \"abcde\", c = \"ae\", ଫଳାଫଳ ହେବା ଉଚିତ ('bcd', ମିଥ୍ୟା) ପାଇଁ s = \"abcdef\", c = \"b\" ଫଳାଫଳ ହେବା ଉଚିତ ('acdef', ମିଥ୍ୟା) ପାଇଁ s = \"abcdedcba\", c = \"ab\", ଫଳାଫଳ ହେବା ଉଚିତ ('cdedc',True) _\"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"ଗୋଟିଏ ସୂଚୀକୁ ସୂଚୀକୁ ଫେରାଇ ଆଣିବା ପାଇଁ, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ସୂଚୀ କେବଳ ଅଙ୍କ ବିଶିଷ୍ଟ ହୋଇଥାଏ। ଆଉଟପୁଟର ପ୍ରତ୍ୟେକ ଉପାଦାନ i \"ଇନପୁଟର ସୂଚୀ i ରେ ଥିବା ଅଙ୍କ ସଂଖ୍ୟା\" ହେବା ଉଚିତ । ଯେଉଁଠାରେ ସମସ୍ତ i କୁ ଇନପୁଟର i'th ସୂଚୀରେ ଥିବା ଅଙ୍କ ସଂଖ୍ୟା ଦ୍ୱାରା ବଦଳାଯିବା ଉଚିତ । >>> ଅଙ୍କ_ସଂଖ୍ୟା ['1234567']) [\"ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ସଂଖ୍ୟା 4n ଅଙ୍କ_ନ 8n ଅଙ୍କ 8n ଅଙ୍କ_ନ 8n ଅଙ୍କ 8n ଅଙ୍କ_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 8_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 9_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10_ 10\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"ଏକ ସମୁଦାୟ ସଂଖ୍ୟା n ର ଏକ ସରଳୀକରଣ ଦିଆଯାଇ, କୌଣସି ସମୁଦାୟ ସଂଖ୍ୟା ର ସର୍ବନିମ୍ନ ସମୁଦାୟକୁ ଖୋଜନ୍ତୁ. ଉଦାହରଣ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"ଆପଣଙ୍କୁ କୂଅର ଏକ ଆୟତନ ବିଶିଷ୍ଟ ଗ୍ରୀଡ ଦିଆ ଯାଇଛି । ପ୍ରତ୍ୟେକ ଧାଡି ଗୋଟିଏ କୂଅକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ, ଏବଂ ପ୍ରତ୍ୟେକ ଧାଡିରେ 1 ଗୋଟିଏ ଜଳର ଏକକକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ । ପ୍ରତ୍ୟେକ କୂଅରେ ଏକ ଅନୁରୂପ ବାଡୀ ଅଛି ଯାହାକୁ ଏଥିରୁ ଜଳ ଉତ୍ତୋଳନ କରିବା ପାଇଁ ବ୍ୟବହାର କରାଯାଇପାରିବ, ଏବଂ ସମସ୍ତ ବାଡୀ ସମାନ କ୍ଷମତା ଅଛି । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ବାଡୀ ବ୍ୟବହାର କରି କୂଅକୁ ଖାଲି କରିବା । ଆପଣ ବାଡୀକୁ ତଳକୁ ଆଣିବା ପାଇଁ ଆବଶ୍ୟକ ସଂଖ୍ୟାକୁ ଆଉଟପୁଟ୍ କରନ୍ତୁ । ଉଦାହରଣ 1: ଇନପୁଟ୍: ଗ୍ରୀଡ୍: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ଆଉଟପୁଟ୍: 6 ଉଦାହରଣ 2: ଇନପୁଟ୍: ଗ୍ରୀଡ୍: [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 ଆଉଟପୁଟ୍: 5 ଉଦାହରଣ 3: [[ଇନପୁଟ୍: :0,0], [0,0,0]] bucket_capacity: 5 ଆଉଟପୁଟ୍: 0 * ବାଡୀ: 1 * * ସମସ୍ତ ବାଡୀଗୁଡ଼ିକର ଲମ୍ବ ସମାନ * 1 * 1 * 1 * 1 * 1 * 1 * 10 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * * * 1 * * 1 * 1 * * * * 1 * 2 * * * * * * 1 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"ଏହି କଟା ରେ, ଆପଣଙ୍କୁ ଏକ ନନ୍-ନଗେଟିଭ୍ ଇଣ୍ଟେଜର ଆରେ କୁ ସେମାନଙ୍କର ବାଇନାରୀ ରେପ୍ରେଜେଣ୍ଟେସନ ରେ ଥିବା ଏକର ସଂଖ୍ୟା ଅନୁସାରେ କ୍ରମାନୁସାରେ ସର୍ଟ କରିବାକୁ ହେବ । ସମାନ ସଂଖ୍ୟା ପାଇଁ, ଦଶମିକ ମୂଲ୍ୟ ଉପରେ ଆଧାର କରି ସର୍ଟ କରନ୍ତୁ । ଏହାକୁ ଏହିପରି କାର୍ଯ୍ୟକାରୀ କରିବାକୁ ହେବ: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଏବଂ ଏକ ପ୍ରାକୃତିକ ସଂଖ୍ୟା n ଦିଆଗଲା, ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ କାର୍ଯ୍ୟକାରୀ କରିବାକୁ କୁହାଯାଇଛି ଯାହା ଷ୍ଟ୍ରିଙ୍ଗ s ରୁ ସମସ୍ତ ଶବ୍ଦଗୁଡିକର ଏକ ତାଲିକା ଫେରାଇଥାଏ ଯେଉଁଥିରେ ସଠିକ୍ ଭାବରେ n ବର୍ଣ୍ଣମାଳା ଅଛି, ଏହି ଶବ୍ଦଗୁଡିକ ଷ୍ଟ୍ରିଙ୍ଗ s ରେ ଦେଖାଯିବା ପାଇଁ _ ଯଦି ଷ୍ଟ୍ରିଙ୍ଗ s ଖାଲି ଅଛି ତେବେ ଫଙ୍କସନ ଏକ ଖାଲି ତାଲିକା ଫେରାଇବ _ ଟିପ୍ପଣୀଃ ଆପଣ ଧରି ନେଇପାରିବେ ଯେ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଅକ୍ଷର ଏବଂ ସ୍ପେସ୍ ଅଛି _ ଉଦାହରଣଃ select_words \"ମେରୀଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା\", 4) ==> [\"little\"] select_words \"ମେରୀଙ୍କର ଏକ ଛୋଟ ମେଷ ଥିଲା\", 3) ==> [\"ମେରୀ\", \"ମେଷ\"] select_words \"simple white space\", 2) ==> [] select_words \"ହାଲୋ ୱାର୍ଲ୍ଡ\", 4) ==> [\"world\"] select_words \"ଅଙ୍କଲ ସାମ\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଶବ୍ଦ ଦିଆ ଯାଇଛି. ଆପଣଙ୍କର କାମ ହେଉଛି ଶବ୍ଦ ର ଡାହାଣ ପାର୍ଶ୍ବ ରୁ ଦୁଇଟା ସ୍ୱରବର୍ଣ୍ଣ ମଧ୍ୟରେ ଥିବା ନିକଟତମ ସ୍ୱରବର୍ଣ୍ଣ କୁ ଖୋଜିବା (ମୌଳିକ ରୁ ଛୋଟ ରୁ ବଡ) । ଆରମ୍ଭ ଓ ଶେଷ ରେ ଥିବା ସ୍ୱରବର୍ଣ୍ଣ ଗୁଡିକୁ ଗଣନା କରାଯାଏ ନାହିଁ. ଯଦି ଆପଣ ଉପରୋକ୍ତ ସର୍ତ୍ତ କୁ ପୁରା କରି କୌଣସି ସ୍ୱରବର୍ଣ୍ଣ ପାଇ ନାହାଁନ୍ତି ତେବେ ଖାଲି string କୁ ଫେରାଇ ଦିଅନ୍ତୁ. ଆପଣ ଧରି ନେଇ ପାରିବେ କି ଦିଆଯାଇଥିବା string ରେ କେବଳ ଇଂରାଜୀ ଅକ୍ଷର ଅଛି. ଉଦାହରଣ: get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" (((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''ଆପଣଙ୍କୁ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗର ଏକ ତାଲିକା ଦିଆଯାଉଛି, ଉଭୟ ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଖୋଲା ବନ୍ଧନୀ '(' କିମ୍ବା ବନ୍ଦ ବନ୍ଧନୀ ') ' ରହିଥାଏ । ଆପଣଙ୍କର କାମ ହେଉଛି ଯାଞ୍ଚ କରିବା ଯେ ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗକୁ କିଛି କ୍ରମରେ ସଂଯୋଗ କରିବା ସମ୍ଭବ କି ନାହିଁ, ଯେ ଫଳସ୍ୱରୂପ ଷ୍ଟ୍ରିଙ୍ଗ ଭଲ ହେବ । ଏକ ଷ୍ଟ୍ରିଙ୍ଗ S କୁ ଭଲ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି ଏବଂ କେବଳ ଯଦି S ରେ ଥିବା ସମସ୍ତ ବନ୍ଧନୀ ସନ୍ତୁଳିତ ହୋଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପଃ ଷ୍ଟ୍ରିଙ୍ଗ '((()) ' ଭଲ ଅଟେ, ଯେତେବେଳେ ଷ୍ଟ୍ରିଙ୍ଗ '()) ' ନୁହେଁ _ ଏକ ଭଲ ଷ୍ଟ୍ରିଙ୍ଗ ତିଆରି କରିବାର ଉପାୟ ଅଛି ଯଦି 'ହଁ' ଫେରାଇଦିଅନ୍ତୁ, ଏବଂ ଅନ୍ୟଥା 'ନା' ଫେରାଇଦିଅନ୍ତୁ _ ଉଦାହରଣଃ match_parens[('() ', ') ']) == 'ହଁ' match_parens[(') ', ') ']) == 'ନା' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"ଏକ ଧନାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ସହିତ ଏକ ଧାଡି arr ଦିଆଗଲା, ଏକ ସର୍ବାଧିକ k ସଂଖ୍ୟା ସହିତ k ଲମ୍ବର ଏକ ସର୍ଟ ତାଲିକା ଫେରାନ୍ତୁ _ ଉଦାହରଣ 1: ଇନପୁଟ୍: arr = [-3, -4, 5], k = 3 ଆଉଟପୁଟ୍: [-4, -3, 5] ଉଦାହରଣ 2: ଇନପୁଟ୍: arr = [4, -4, 4], k = 2 ଆଉଟପୁଟ୍: [4, 4] ଉଦାହରଣ 3: ଇନପୁଟ୍: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ଆଉଟପୁଟ୍: [2] ଟିପ୍ପଣୀଃ 1. ଧାଡିର ଲମ୍ବ [1, 1000] ପରିଧିରେ ରହିବ _ 2. ଧାଡିର ଉପାଦାନଗୁଡ଼ିକ [-1000, 1000] ପରିଧିରେ ରହିବ _ 3. 0 <= k <= len ((arr) _\"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"ଏକ ଅସଂଖ୍ୟ ସଂଖ୍ଯା ତାଲିକା ଦିଆୟାଇଥିବା ବେଳେ, ସମ ସମ ସମ ବିନ୍ଦୁ ଗୁଡିକର ସମୁଦାୟକୁ ଫେରାଇବ. ଉଦାହରଣ ସମାଧାନ (([5, 8, 7, 1]) ==> 12 ସମାଧାନ (([3, 3, 3, 3, 3]) ==> 9 ସମାଧାନ (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"ଏକ ଅସରନ୍ତି ସମୁଦାୟ ସଂଖ୍ୟା arr ଏବଂ ଏକ ସମୁଦାୟ ସଂଖ୍ୟା k ଦିଆଗଲା, arr ର ପ୍ରଥମ k ଉପାଦାନରୁ ସର୍ବାଧିକ ଦୁଇଟି ଅଙ୍କ ସହିତ ଉପାଦାନଗୁଡ଼ିକର ସମୁଦାୟ ଫେରାଇ ଦିଅନ୍ତୁ _ ଉଦାହରଣଃ ଇନପୁଟ୍ଃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 ଆଉଟପୁଟ୍ଃ 24 # 21 + 3 ର ସମୁଦାୟ _ ପ୍ରତିବନ୍ଧକଃ 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଏକ ସର୍ଟ ତାଲିକା ଫେରାଇ ଦିଅନ୍ତୁ ଯେଉଁଥିରେ କ୍ଲାଟଜ କ୍ରମରେ ଅଜଣା ସଂଖ୍ୟା ଅଛି । କ୍ଲାଟଜ ଅନୁମାନ ଗଣିତରେ ଏକ ଅନୁମାନ ଅଟେ ଯାହା ନିମ୍ନଲିଖିତ ଭାବରେ ବ୍ୟାଖ୍ୟା କରାଯାଇଥିବା ଏକ କ୍ରମକୁ ନେଇଥାଏ: ଯେକୌଣସି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ସହିତ ଆରମ୍ଭ କରନ୍ତୁ । ତାପରେ ପ୍ରତ୍ୟେକ ଅବଧି ପୂର୍ବବର୍ତ୍ତୀ ଅବଧିରୁ ନିମ୍ନଲିଖିତ ଭାବରେ ପ୍ରାପ୍ତ ହୁଏ: ଯଦି ପୂର୍ବବର୍ତ୍ତୀ ଅବଧି ଯୁଗ୍ମ, ପରବର୍ତ୍ତୀ ଅବଧି ପୂର୍ବବର୍ତ୍ତୀ ଅବଧିର ଅଧା ଅଟେ _ ଯଦି ପୂର୍ବବର୍ତ୍ତୀ ଅବଧି ଅଜଣା, ପରବର୍ତ୍ତୀ ଅବଧି ପୂର୍ବବର୍ତ୍ତୀ ଅବଧିର 3 ଗୁଣ ଅଧିକ 1 ଅଟେ _ ଅନୁମାନ ହେଉଛି ଯେ n ର ମୂଲ୍ୟ ଯାହା ହେଉନା କାହିଁକି, କ୍ରମ ସର୍ବଦା 1 କୁ ପହଞ୍ଚିବ _ ଟିପ୍ପଣୀଃ 1. କ୍ଲାଟଜ ((1) ହେଉଛି [1] _ 2. ଫେରସ୍ତ ତାଲିକା ବୃଦ୍ଧି କ୍ରମରେ ସର୍ଟ କରାଯାଇଛି _ ଉଦାହରଣ ସ୍ୱରୂପଃ get_odd_collatz ((5) ଫେରସ୍ତ କରେ [1, 5] 5 ପାଇଁ କ୍ଲାଟଜ କ୍ରମ ହେଉଛି [5, 8, 16, 4, 2, 1], ତେଣୁ ଅଜଣା ସଂଖ୍ୟାଗୁଡ଼ିକ କେବଳ 1 ଏବଂ 5 _\"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଫଳନ ଲେଖିବାକୁ ହେବ ଯାହାକି ଦିଆଯାଇଥିବା ତାରିଖକୁ ବୈଧ କରେ ଏବଂ ଯଦି ତାରିଖ ବୈଧ ତେବେ ସତ୍ୟ ଫେରାଇଥାଏ ଅନ୍ୟଥା ମିଥ୍ୟା। ତାରିଖ ବୈଧ ହୋଇଥାଏ ଯଦି ନିମ୍ନଲିଖିତ ସମସ୍ତ ନିୟମଗୁଡିକ ସନ୍ତୁଷ୍ଟ ହୋଇଥାଏ: 1. ତାରିଖ ଧାଡ଼ି ଖାଲି ନଥାଏ 2. ମାସ 1,3,5,7,8,10,12 ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ କିମ୍ବା 31 ଦିନରୁ ଅଧିକ ନୁହେଁ ଏବଂ ମାସ 4,6,9,11 ପାଇଁ ଦିନ ସଂଖ୍ୟା 1 ରୁ କମ କିମ୍ବା 30 ଦିନରୁ ଅଧିକ ନୁହେଁ ଏବଂ ମାସ 2. 3. ମାସ 1 ରୁ କମ କିମ୍ବା 12 ରୁ ଅଧିକ ହେବା ଉଚିତ ନୁହେଁ 4. ତାରିଖ ଫର୍ମାଟରେ ହେବା ଉଚିତଃ mm-dd-yyyy ଉଦାହରଣ ସ୍ୱରୂପ: valid_date ({'03-11-2000') => valid_date ({'15-01-2012') => false valid_date ({'04-01-2040') => false_date ({'06-04-2020') => true ({'06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''ଏକ ଶବ୍ଦ ଶୃଙ୍ଖଳ ଦିଆଯାଇ, ଶ୍ବେତସ୍ଥାନରେ ବିଭକ୍ତ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ତାଲିକା ଫେରାଇବ, ଯଦି ପାଠ୍ୟରେ କୌଣସି ଶ୍ବେତସ୍ଥାନ ନଥାଏ ତେବେ ଆପଣ କମାସ୍ ','ରେ ବିଭକ୍ତ କରିବା ଉଚିତ, ଯଦି କମାସ୍ ନଥାଏ ତେବେ ଆପଣ ଅକ୍ଷରଗୁଡିକର ସଂଖ୍ୟା ଫେରାଇବେ, ଅକ୍ଷରଗୁଡିକର ସଂଖ୍ୟା ଅଙ୍କ କ୍ରମ ସହିତ ଅକ୍ଷରଗୁଡିକରେ ଅଙ୍କ କ୍ରମ ସହିତ, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 ଉଦାହରଣଗୁଡିକ ବିଭକ୍ତ_ ଶବ୍ଦଗୁଡ଼ିକ (ହଲୋ ୱାର୍ଲ୍ଡ!) â -> [\"ହଲୋ\", \"ୱାର୍ଲ୍ଡ!] ବିଭକ୍ତ_ ଶବ୍ଦଗୁଡ଼ିକ (ହଲୋ, ୱାର୍ଲ୍ଡ!)) â -> [\"ହଲୋ\", \"ୱାର୍ଲ୍ଡ!] ବିଭକ୍ତ_ ଶବ୍ଦଗୁଡ଼ିକ (ହଲୋ, ୱାର୍ଲ୍ଡ!)) == 3 '''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''ଏକ ସଂଖ୍ୟା ତାଲିକା ଦିଆଯାଇ, ସେମାନେ କ୍ରମାନୁସାରେ ସର୍ଟ କରାଯାଇଛି କି ନାହିଁ ଫେରାଇ ଦିଅନ୍ତୁ। ଯଦି ତାଲିକା ସମାନ ସଂଖ୍ୟା ର 1 ରୁ ଅଧିକ ନକଲ ଅଛି, ଫେରାଇ ଦିଅନ୍ତୁ ମିଥ୍ୟା। କୌଣସି ନକାରାତ୍ମକ ସଂଖ୍ୟା ଏବଂ କେବଳ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଧରନ୍ତୁ। ଉଦାହରଣ is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 3, 2, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 3, 4 -> False ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"ଆପଣଙ୍କୁ ଦୁଇଟି ଅନ୍ତରାଳ ଦିଆଯାଏ, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ହେଉଛି ଏକ ଯୋଡି ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା. ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳ = (ଆରମ୍ଭ, ଶେଷ) = (1, 2) । ଦିଆଯାଇଥିବା ଅନ୍ତରାଳଗୁଡ଼ିକ ବନ୍ଦ ହୋଇଥାଏ, ଯାହାର ଅର୍ଥ ହେଉଛି ଅନ୍ତରାଳ (ଆରମ୍ଭ, ଶେଷ) ଉଭୟ ଆରମ୍ଭ ଏବଂ ଶେଷ ଅନ୍ତର୍ଭୁକ୍ତ କରିଥାଏ । ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ପାଇଁ, ଏହା ଧରାଯାଏ ଯେ ଏହାର ଆରମ୍ଭ ଏହାର ଶେଷ ଠାରୁ କମ୍ କିମ୍ବା ସମାନ ଅଟେ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଏହି ଦୁଇଟି ଅନ୍ତରାଳଗୁଡିକର ସଂଯୋଗର ଲମ୍ବ ଏକ ପ୍ରଧାନ ସଂଖ୍ୟା କି ନାହିଁ ନିର୍ଣ୍ଣୟ କରିବା । ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳଗୁଡ଼ିକର ସଂଯୋଗ (1, 3), (2, 4) ହେଉଛି (2, 3) ଯାହାର ଲମ୍ବ 1 ଅଟେ, ଯାହା ଏକ ପ୍ରଧାନ ସଂଖ୍ୟା ନୁହେଁ । ଯଦି ଅନ୍ତରାଳଗୁଡ଼ିକର ଲମ୍ବ ଏକ ପ୍ରଧାନ ସଂଖ୍ୟା, \"YES\" ଫେରାଇଦିଅନ୍ତୁ, ଅନ୍ୟଥା, \"NO\" ଫେରାଇଦିଅନ୍ତୁ । ଯଦି ଦୁଇଟି ଅନ୍ତରାଳ ପରସ୍ପର ସହିତ ସଂଯୋଗ ନ କରନ୍ତି, \"NO\" ଫେରାଇଦିଅନ୍ତୁ । [input/output] ନମୁନାଃ ଅନ୍ତରାଳ (((1, 2), (==, 3) \">\" ଅନ୍ତରାଳ-1, ((1), (==, 4) \">\" ଅନ୍ତରାଳ (==, (NO - 5), ((1, (==, (), (YES) \"\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ସଂଖ୍ୟାର ଏକ ସରଳୀକୃତ ସରଳୀକୃତ ପ୍ରଦାନ କରାଯାଇଛି ଏବଂ ଆପଣଙ୍କୁ ସଂଖ୍ୟାର ପରିମାଣର ସମୁଦାୟକୁ 1 , -1 କିମ୍ବା 0 ଦ୍ୱାରା ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ସରଳୀକୃତରେ ପ୍ରତ୍ୟେକ ସଂଖ୍ୟାର ସମସ୍ତ ଚିହ୍ନର ଉତ୍ପାଦ ଦ୍ୱାରା ଗୁଣିତ କରି ଫେରାଇବାକୁ ପଡିବ _ ଟିପ୍ପଣୀଃ ଖାଲି ସରଳୀକୃତ ପାଇଁ କିଛି ନାହିଁ _ ଉଦାହରଣଃ >>> ପ୍ରଡ_ସିଗ୍ନେସ୍ (([1, 2, 2, -4]) == -9 >>> ପ୍ରଡ_ସିଗ୍ନେସ୍ (([0, 1]) == 0 >>> ପ୍ରଡ_ସିଗ୍ନେସ୍ (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N ଧାଡି ଏବଂ N ସ୍ତମ୍ଭ (N >= 2) ଏବଂ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ସହିତ ଏକ ଗ୍ରୀଡକୁ ଦିଆଯାଇଥାଏ, ଗ୍ରୀଡର ପ୍ରତ୍ୟେକ କୋଷରେ ଏକ ମୂଲ୍ୟ ରହିଥାଏ _ [1, N * N] ଅନ୍ତର୍ଭୁକ୍ତ ରେ ଥିବା ପ୍ରତ୍ୟେକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଗ୍ରୀଡର କୋଷରେ ଠିକ୍ ଥରେ ଦେଖାଯାଏ _ ଆପଣଙ୍କୁ ଗ୍ରୀଡରେ k ଲମ୍ବର ସର୍ବନିମ୍ନ ପଥ ଖୋଜିବାକୁ ପଡିବ _ ଆପଣ ଯେକୌଣସି କୋଷରୁ ଆରମ୍ଭ କରିପାରିବେ, ଏବଂ ପ୍ରତ୍ୟେକ ପଦକ୍ଷେପରେ ଆପଣ ଯେକୌଣସି ପଡୋଶୀ କୋଷକୁ ଯାଇପାରିବେ, ଅନ୍ୟ ଶବ୍ଦରେ, ଆପଣ ଯେକୌଣସି କୋଷକୁ ଯାଇପାରିବେ ଯାହା ଆପଣଙ୍କ ସହିତ ଏକ କଡ଼କୁ ଅଂଶୀଦାର କରନ୍ତି _ ଦୟାକରି ଧ୍ୟାନ ଦିଅନ୍ତୁ ଯେ k ଲମ୍ବର ପଥ ଅର୍ଥାତ୍ k କୋଷ ପରିଦର୍ଶନ କରିବା (ଅବଶ୍ୟ ଭିନ୍ନ ନୁହେଁ) _ ଆପଣ ଗ୍ରୀଡରୁ ବାହାରକୁ ଯାଇପାରିବେ ନାହିଁ _ ଏକ ପଥ A (k ଲମ୍ବ) କୁ ପଥ B (k) ଠାରୁ କମ୍ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି A ଏବଂ B (ସେମାନଙ୍କୁ lA_st ଏବଂ lA_st ବୋଲି କହିବା) ରେ ଥିବା ମୂଲ୍ୟର ସଜ୍ଜିତ ତାଲିକା ପ୍ରସ୍ତୁତ କରିବା ପରେ, lA_st ଏବଂ lA_st), lA_st ଶବ୍ଦକୋଷରେ lA_st କମ୍ ହୋଇଥାଏ _ ଅନ୍ୟ ଶବ୍ଦରେ, lA_st ଲମ୍ବ k, lA_st, lA_st, lA_st, lA_st, lA_st, l_1, [4, l_1, l_2, l_[[[[[4, l_8, l_2, l_3, l_j] = l_[] = l_[] = l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[] l_[]\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"ସମସ୍ତେ ଫିବୋନାସୀ କ୍ରମାଙ୍କ ବିଷୟରେ ଜାଣିଛନ୍ତି, ଏହାକୁ ଗଭୀର ଭାବରେ ଗଣିତଜ୍ଞମାନେ ଗତ ଦୁଇ ଶତାବ୍ଦୀ ମଧ୍ୟରେ ଅଧ୍ୟୟନ କରିଥିଲେ । ତଥାପି, ଲୋକମାନେ ଯାହା ଜାଣନ୍ତି ନାହିଁ ତାହା ହେଉଛି ଟ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ । ଟ୍ରିବୋନାସୀ କ୍ରମାଙ୍କ ପୁନଃ ଘଟଣାର ପରିଭାଷା ହେଉଛି: ତ୍ରି (୧) = ୩ ତ୍ରି (୧) = ୧ + ଏନ / ୨, ଯଦି ଏନ ଯୁଗ୍ମ ଅଟେ । ତ୍ରି (୧) = ତ୍ରି (୨) = ୨ / ୨) + ତ୍ରି (୧) + ଏନ + ୧, ଯଦି ଏନ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ ଅଙ୍କ । ଉଦାହରଣ ସ୍ୱରୂପ: ତ୍ରି (୨) = ୧ + (୨ / ୨) = ୨ ତ୍ରି (୪) = ୩ ତ୍ରି (୩) = ତ୍ରି (୧) + ତ୍ରି (୪) = ୨ + ୩ + ୩ = ୮ ଆପଣଙ୍କୁ ଏକ ନ-ନକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଯାଇଛି, ଆପଣଙ୍କୁ ତ୍ରିବୋନାସୀ କ୍ରମାଙ୍କର ପ୍ରଥମ n + 1 ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକା ଫେରାଇବାକୁ ପଡିବ । ଉଦାହରଣ: ତ୍ରି (୩) = [୧, ୩, ୨, ୮]\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଗଲା, ଅଙ୍କଗୁଡ଼ିକର ଗୁଣନକୁ ଫେରାଇବ. 0 ଫେରାଇବ ଯଦି ସମସ୍ତ ଅଙ୍କ ଯୁଗ୍ମ ହୋଇଥାଏ. ଉଦାହରଣ ସ୍ୱରୂପ: ଅଙ୍କଗୁଡ଼ିକ (୧) == 1 ଅଙ୍କ (୪) == 0 ଅଙ୍କ (୨୩୫) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା କେବଳ ବର୍ଗୀକୃତ ବନ୍ଧନୀ ଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ _ ଫଳନଟି ସତ୍ୟ ଫେରାଇବ ଯଦି ଏବଂ କେବଳ ଯଦି ବନ୍ଧନୀଗୁଡ଼ିକର ଏକ ବୈଧ ଉପକ୍ରମ ଥାଏ ଯେଉଁଠାରେ ଉପକ୍ରମରେ ଅତି କମରେ ଗୋଟିଏ ବନ୍ଧନୀ ଗଣ୍ଠି ହୋଇଥାଏ _ is_nested '[[]]') â -> True is_nested '[[]]]]]]]]][[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]]') â -> True is_nested '[[]]]]]]') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ସଂଖ୍ୟାର ତାଲିକା ଦିଆ ଯାଇଛି. ଆପଣଙ୍କୁ ଦିଆଯାଇଥିବା ତାଲିକାରେ ଥିବା ବର୍ଗ ସଂଖ୍ୟାର ସମୁଦାୟ ଫେରାଇବାକୁ ପଡିବ, ତାଲିକାରେ ଥିବା ପ୍ରତ୍ୟେକ ଉପାଦାନକୁ ଉପର int ((ସୀମା) କୁ ପ୍ରଥମେ ଗୋଲ କରନ୍ତୁ. ଉଦାହରଣଃ lst = [1,2,3] ପାଇଁ ଆଉଟପୁଟ୍ 14 ହେବା ଉଚିତ lst = [1,4,9] ପାଇଁ ଆଉଟପୁଟ୍ 98 ହେବା ଉଚିତ lst = [1,3,5,7] ପାଇଁ ଆଉଟପୁଟ୍ 84 ହେବା ଉଚିତ lst = [1.4,4.2,0] ପାଇଁ ଆଉଟପୁଟ୍ 29 ହେବା ଉଚିତ lst = [-2.4,1,1] ପାଇଁ ଆଉଟପୁଟ୍ 6 ହେବା ଉଚିତ \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା True କୁ ଫେରାଇଥାଏ ଯଦି ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗର ଶେଷ ଅକ୍ଷର ଏକ ଅକ୍ଷରଚର ଅକ୍ଷର ଅଟେ ଏବଂ ଏକ ଶବ୍ଦର ଅଂଶ ନୁହେଁ, ଏବଂ ଅନ୍ୟଥା False. ଟିପ୍ପଣୀଃ \"ଶବ୍ଦ\" ହେଉଛି ଅକ୍ଷରଗୁଡିକର ଏକ ସମୂହ ଯାହା ସ୍ପେସ୍ ଦ୍ୱାରା ପୃଥକ ହୋଇଛି. ଉଦାହରଣଃ check_if_last_char_is_a_letter\" (ଆପଲ୍ ପିଟ୍) -> False check_if_last_char_is_a_letter\" (ଆପଲ୍ ପି ଇ) -> True check_if_last_char_is_a_letter\" (ଆପଲ୍ ପି ଇ) -> False check_if_last_char_is_a_letter\" (ଆପଲ୍ ପି ଇ) -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଉପାଦାନର ସର୍ବ ବୃହତ ସୂଚକାଙ୍କ ଫେରାଇଥାଏ ଯାହା ଏହାଠାରୁ ତୁରନ୍ତ ପୂର୍ବବର୍ତ୍ତୀ ଉପାଦାନ ସହିତ ସମାନ କିମ୍ବା ଅଧିକ ନୁହେଁ _ ଯଦି ଏପରି କୌଣସି ଉପାଦାନ ନାହିଁ ତେବେ -୧ ଫେରାନ୍ତୁ _ ଦିଆଯାଇଥିବା ଆରେରେ ଡୁପ୍ଲିକେଟ୍ ମୂଲ୍ୟ ରହିବ ନାହିଁ _ ଉଦାହରଣଃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହାକି ଏକ ଟାପଲ୍ (a, b) ଫେରାଇଥାଏ, ଯେଉଁଠାରେ 'a' ହେଉଛି ନକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ସବୁଠାରୁ ବଡ, ଏବଂ 'b' ହେଉଛି ଏକ ତାଲିକାରେ ଥିବା ସକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ସବୁଠାରୁ ଛୋଟ। ଯଦି କୌଣସି ନକାରାତ୍ମକ କିମ୍ବା ସକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ନଥାଏ, ତେବେ ସେଗୁଡ଼ିକୁ ନୋ ଭାବରେ ଫେରାନ୍ତୁ। ଉଦାହରଣଃ ସବୁଠାରୁ ବଡ଼_ସର୍ବନିମ୍ନ_ସମଗ୍ର ସଂଖ୍ୟା[2, 4, 1, 3, 5, 7]) == (କୌଣସି ନାହିଁ, 1) ସବୁଠାରୁ ବଡ଼_ସମଗ୍ର ସଂଖ୍ୟା[[0]) == (କୌଣସି ନାହିଁ, କୌଣସି ନାହିଁ) ସବୁଠାରୁ ବଡ଼_ସମଗ୍ର ସଂଖ୍ୟା[0]) == (କୌଣସି ନାହିଁ, କୌଣସି ନାହିଁ) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା, ଫ୍ଲୋଟ୍, କିମ୍ବା ପ୍ରକୃତ ସଂଖ୍ୟାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଗ୍ରହଣ କରେ ଏବଂ ଦିଆଯାଇଥିବା ଭେରିଏବଲ୍ ପ୍ରକାରରେ ବୃହତ୍ତମ ଭେରିଏବଲ୍ ଫେରାଇଥାଏ _ ଯଦି ମୂଲ୍ୟ ସମାନ ଥାଏ ତେବେ ନା ଫେରାଇଥାଏ _ ଟିପ୍ପଣୀଃ ଯଦି ପ୍ରକୃତ ସଂଖ୍ୟା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବରେ ପ୍ରତିନିଧିତ୍ୱ କରାଯାଏ, ଫ୍ଲୋଟିଂ ପଏଣ୍ଟ ହୋଇପାରେ _ କିମ୍ବା , compare_one{1,2,5}n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"n କୁ 4 ଟି ଯୁକ୍ତ ଯୁକ୍ତ ସଂଖ୍ୟାର ସମୁଦାୟ ଭାବରେ ଲେଖାଯାଇପାରିବ କି ନାହିଁ ତାହା ମୂଲ୍ୟାଙ୍କନ କରନ୍ତୁ _ ଉଦାହରଣ is_equal_to_sum_even (୪) == ମିଥ୍ୟା is_equal_to_sum_even (୬) == ମିଥ୍ୟା is_equal_to_sum_even (୮) == ସତ୍ୟ \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"ବ୍ରାଜିଲୀୟ ଫ୍ୟାକ୍ଟୋରିଆଲକୁ ନିମ୍ନଲିଖିତ ଭାବରେ ବ୍ୟାଖ୍ୟା କରାଯାଇଛି: ବ୍ରାଜିଲୀୟ_ଫ୍ୟାକ୍ଟୋରିଆଲ (n) = n! * (n-1)! * (n-2)! * ... * 1! ଯେଉଁଠାରେ n > 0 ଉଦାହରଣ ସ୍ୱରୂପ: >>> ବିଶେଷ_ଫ୍ୟାକ୍ଟୋରିଆଲ (n) 288 ଫଳନଟି ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ଇନପୁଟ ଭାବରେ ଗ୍ରହଣ କରିବ ଏବଂ ଏହି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାର ବିଶେଷ ଫ୍ୟାକ୍ଟୋରିଆଲକୁ ଫେରାଇବ ।\"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ଉଦାହରଣ-3ସଟ ଦିଆଗଲା, ସେଥିରେ ଥିବା ସମସ୍ତ ସ୍ପେସକୁ ଅଣ୍ଡରସ୍କୋର ସହିତ ବଦଳାନ୍ତୁ, ଏବଂ ଯଦି ଏକ ଷ୍ଟ୍ରିଙ୍ଗରେ 2 ରୁ ଅଧିକ କ୍ରମିକ ସ୍ପେସ ଅଛି, ତେବେ ସମସ୍ତ କ୍ରମିକ ସ୍ପେସକୁ - fix_spaces ସହିତ ବଦଳାନ୍ତୁ (ଉଦାହରଣ) == \"ଉଦାହରଣ\" fix_spaces (ଉଦାହରଣ1) == \"ଉଦାହରଣ1\" fix_spaces (ଉଦାହରଣ2) == \"_ଉଦାହରଣ_2\" fix_spaces (ଉଦାହରଣ 3) == \"_ଉଦାହରଣ-3\" \"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"ଏକ ଫଳନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ଏକ ଫାଇଲ ନାମକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ନେଇଥାଏ, ଏବଂ 'ହଁ' ଫେରାଇଥାଏ ଯଦି ଫାଇଲ ନାମ ବୈଧ ହୋଇଥାଏ, ଏବଂ ଅନ୍ୟଥା 'ନା' ଫେରାଇଥାଏ. ଏକ ଫାଇଲ ନାମ ବୈଧ ବୋଲି ବିବେଚନା କରାଯାଏ ଯଦି ଏବଂ କେବଳ ଯଦି ସମସ୍ତ ନିମ୍ନଲିଖିତ ସର୍ତ୍ତଗୁଡିକ ପୂରଣ ହୋଇଥାଏ: - ଫାଇଲ ନାମରେ ତିନୋଟି ଅଙ୍କରୁ ଅଧିକ ('0'-'9') ରହିବା ଉଚିତ ନୁହେଁ. - ଫାଇଲ ନାମରେ ସଠିକ୍ ଭାବରେ ଗୋଟିଏ ବିନ୍ଦୁ '.' ରହିବା ଉଚିତ ନୁହେଁ. - ବିନ୍ଦୁ ପୂର୍ବରୁ ଥିବା ସବଷ୍ଟ୍ରିଙ୍ଗ ଖାଲି ହେବା ଉଚିତ ନୁହେଁ, ଏବଂ ଏହା ଲାଟିନ ଅକ୍ଷରରୁ ଆରମ୍ଭ ହେବା ଉଚିତ ('a'-'z' ଏବଂ 'A'Z'-) । - ବିନ୍ଦୁ ପରେ ଥିବା ସବଷ୍ଟ୍ରିଙ୍ଗ ଏହିଗୁଡ଼ିକ ମଧ୍ୟରୁ ଗୋଟିଏ ହେବା ଉଚିତଃ ['txt', 'exe', 'lld'] ଉଦାହରଣଃ file_name_check\"{example.txt.txt\") # => 'ହଁ'_name_file_check\"{example.dll.dll\") => 'ନା' (ନାମ ଲାଟିନ ଅକ୍ଷରରୁ ଆରମ୍ଭ ହେବା ଉଚିତ)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" ଏହି ଫଳନଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକା ନେବ. ତାଲିକାରେ ଥିବା ସମସ୍ତ ଏଣ୍ଟ୍ରି ପାଇଁ, ଫଳନଟି ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏଣ୍ଟ୍ରିକୁ ବର୍ଗୀକରଣ କରିବ ଯଦି ଏହାର ସୂଚକାଙ୍କ 3 ର ଗୁଣକ ଅଟେ ଏବଂ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଏଣ୍ଟ୍ରିକୁ ଘନ କରିବ ଯଦି ଏହାର ସୂଚକାଙ୍କ 4 ର ଗୁଣକ ଅଟେ ଏବଂ 3 ର ଗୁଣକ ନୁହେଁ. ଫଳନଟି ତାଲିକାରେ ଥିବା ଏଣ୍ଟ୍ରିଗୁଡ଼ିକୁ ପରିବର୍ତ୍ତନ କରିବ ନାହିଁ ଯାହାର ସୂଚକାଙ୍କ 3 କିମ୍ବା 4 ର ଗୁଣକ ନୁହେଁ। ଫଳନଟି ସମସ୍ତ ଏଣ୍ଟ୍ରିଗୁଡିକର ସମୁଦାୟ ଫେରାଇବ । ଉଦାହରଣଃ lst = [1,2,3] ପାଇଁ ଆଉଟପୁଟ୍ 6 ହେବା ଉଚିତ lst = [] ପାଇଁ ଆଉଟପୁଟ୍ 0 ହେବା ଉଚିତ lst = [-1,-5,2,-1,-5] ପାଇଁ ଆଉଟପୁଟ୍ -126 ହେବା ଉଚିତ \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ବାକ୍ୟକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଯାଇଛି, ବାକ୍ୟରେ କିଛି ଶବ୍ଦ ଅନ୍ତର କରାଯାଇଛି, ଏବଂ ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇବାକୁ ପଡିବ ଯେଉଁଥିରେ ମୂଳ ବାକ୍ୟର ଶବ୍ଦ ଅଛି, ଯାହାର ଲମ୍ବ ଅଶୂର ସଂଖ୍ୟା ଅଟେ, ନୂତନ ଷ୍ଟ୍ରିଙ୍ଗରେ ଥିବା ଶବ୍ଦଗୁଡ଼ିକର କ୍ରମ ମୂଳ ସହିତ ସମାନ ହେବା ଉଚିତ _ ଉଦାହରଣ 1: ଇନପୁଟ୍ଃ ବାକ୍ୟ = \"ଏହା ଏକ ପରୀକ୍ଷା\" ଆଉଟପୁଟ୍ଃ \"is\" ଉଦାହରଣ 2: ଇନପୁଟ୍ଃ ବାକ୍ୟ = \"ସୁଇମିଂ ପାଇଁ ଯିବା\" ଆଉଟପୁଟ୍ଃ \"go for\" ପ୍ରତିବନ୍ଧକଃ * 1 <= len(ବାକ୍ୟ) <= 100 * ବାକ୍ୟରେ କେବଳ ଅକ୍ଷର ଅଛି _\"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"ଆପଣଙ୍କ କାମ ହେଉଛି ଏକ ଫଙ୍କସନକୁ କାର୍ଯ୍ୟକାରୀ କରିବା ଯାହା x * n କୁ ସରଳୀକୃତ କରିବ। ଫଙ୍କସନଟି True କୁ ଫେରାଇଥାଏ ଯଦି x * n ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ମୂଲ୍ୟାଙ୍କନ କରେ ଏବଂ ଅନ୍ୟଥା False କୁ ଫେରାଇଥାଏ। ଉଭୟ x ଏବଂ n, ଏକ ভগ্নাଂଶର ଷ୍ଟ୍ରିଙ୍ଗ୍ ପ୍ରତିନିଧିତ୍ୱ ଅଟେ, ଏବଂ ନିମ୍ନଲିଖିତ ଫର୍ମାଟ୍ ଅଛି, <numerator>/<denominator> ଯେଉଁଠାରେ ଉଭୟ ସଂଖ୍ୟା ଏବଂ ନାମକର୍ତ୍ତା ସକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଅଟେ। ଆପଣ ଧରି ନେଇପାରିବେ ଯେ x, ଏବଂ n ବୈଧ ভগ্নাଂଶ ଅଟେ, ଏବଂ ନାମକର୍ତ୍ତା ଭାବରେ ଶୂନ୍ୟ ନାହିଁ _ ସରଳୀକରଣ \" 1/5\", \"5/1\") = ସତ୍ୟ ସରଳୀକରଣ \" 1/6\", \"2/1\") = ମିଥ୍ୟା ସରଳୀକରଣ \" 7/10\", \"10/2\") = ମିଥ୍ୟା \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଦିଆଯାଇଥିବା ସଂଖ୍ଯା ଗୁଡିକର ତାଲିକାକୁ ସେମାନଙ୍କର ଅଙ୍କ ସମୂହ ଅନୁସାରେ କ୍ରମାନୁସାରେ ସର୍ଟ କରିଥାଏ. ନୋଟ: ଯଦି ଏକାଧିକ ଆଇଟମ ଅଛି ଯାହାର ଅଙ୍କ ସମୂହ ସମାନ, ତେବେ ମୂଳ ତାଲିକା ରେ ଥିବା ସେମାନଙ୍କର ସୂଚକାଙ୍କ ଉପରେ ଆଧାର କରି ସେମାନଙ୍କୁ ସର୍ଟ କରନ୍ତୁ. ଉଦାହରଣ: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସଂଖ୍ୟାର ଆରେକୁ ଇନପୁଟ୍ ଭାବରେ ଗ୍ରହଣ କରେ ଏବଂ 10 ରୁ ଅଧିକ ଥିବା ଆରେରେ ଥିବା ଉପାଦାନର ସଂଖ୍ୟା ଫେରାଇଥାଏ ଏବଂ ଏକ ସଂଖ୍ୟାର ଉଭୟ ପ୍ରଥମ ଏବଂ ଶେଷ ଅଙ୍କ ଅଙ୍କ (1, 3, 5, 7, 9) ଅଟେ _ ଉଦାହରଣ ସ୍ୱରୂପଃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆ ଯାଇଛି. ଆପଣଙ୍କୁ ଏକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ସରଳୀକୃତ କରିବା ପାଇଁ ହେବ ଯାହାର ଲମ୍ବ n. ପ୍ରତ୍ୟେକ i (1 ‰¤ i ‰¤ n) ପାଇଁ, a[i] = i * i - i + 1 ର ମୂଲ୍ୟ. a ର ଟ୍ରିପଲ୍ସ (a[i], a[j], a[k]) ର ସଂଖ୍ୟା ଫେରାଇ ଦିଅନ୍ତୁ ଯେଉଁଠାରେ i < j < k, ଏବଂ a[i] + a[j] + a[k] ହେଉଛି 3 ର ଗୁଣକ. ଉଦାହରଣ: ଇନପୁଟ୍: n = 5 ଆଉଟପୁଟ୍: 1 ବ୍ୟାଖ୍ୟାଃ a = [1, 3, 7, 13, 21] ଏକମାତ୍ର ବୈଧ ଟ୍ରିପଲ୍ ହେଉଛି (1, 7, 13) \"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''ଆମ ସୌରମଣ୍ଡଳରେ ଆଠଟି ଗ୍ରହ ଅଛି: ସୂର୍ଯ୍ୟଙ୍କ ନିକଟତମ ମଙ୍ଗଳ ଗ୍ରହ, ପରବର୍ତ୍ତୀ ଗ୍ରହ ଶୁକ୍ର, ତାପରେ ପୃଥିବୀ, ମଙ୍ଗଳ, ବୃହସ୍ପତି, ଶନି, ୟୁରେନସ୍, ନେପଚୁନ୍ । ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଦୁଇଟି ଗ୍ରହ ନାମକୁ ଗ୍ରହ 1 ଏବଂ ଗ୍ରହ 2 ଭାବରେ ଗ୍ରହଣ କରେ । ଫଳନଟି ସୂର୍ଯ୍ୟଙ୍କ ନିକଟତା ଅନୁଯାୟୀ ସର୍ଟ ହୋଇଥିବା ଗ୍ରହ 1 ଏବଂ ଗ୍ରହ 2 ର କକ୍ଷ ମଧ୍ୟରେ ଅବସ୍ଥିତ ସମସ୍ତ ଗ୍ରହକୁ ନେଇ ଏକ ଟାପଲ୍ ଫେରସ୍ତ କରିବା ଉଚିତ । ଯଦି ଗ୍ରହ 1 କିମ୍ବା ଗ୍ରହ 2 ସଠିକ୍ ଗ୍ରହ ନାମ ନୁହେଁ ତେବେ ଫଳନଟି ଏକ ଖାଲି ଟାପଲ୍ ଫେରସ୍ତ କରିବା ଉଚିତ । ଉଦାହରଣ bf \"(ଜୁବ\", \"ନପ୍ତୁନ୍\") ==> (\"ଶନି\", \"ୟୁରେନସ୍\") bf ((\"ପୃଥିବୀ\", \"ମୃରୂ\") ==> (\"ଶୁକ୍ର\") bf (\"ମୃରୂ\", \"ୟୁରେନସ୍\") ==> (\"ଶୁକ୍ର\", \"ପୃଥିବୀ\", \"ମଙ୍ଗଳ\", \"ଯୁବ\", \"ଶନି\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ତାଲିକାକୁ ଏକ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରେ, ସେହି ଷ୍ଟ୍ରିଙ୍ଗଗୁଡ଼ିକୁ ଡ଼ିଲିଟ୍ କରେ ଯାହାର ଅଜଣା ଲମ୍ବ ଅଛି, ଏବଂ ଫଳାଫଳ ତାଲିକାକୁ ଏକ ସର୍ଟ କରାଯାଇଥିବା କ୍ରମରେ ଫେରାଇଥାଏ, ତାଲିକା ସର୍ବଦା ଷ୍ଟ୍ରିଙ୍ଗଗୁଡ଼ିକର ଏକ ତାଲିକା ଏବଂ କେବେ ବି ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ଆରେ ନୁହେଁ, ଏବଂ ଏଥିରେ ଡୁପ୍ଲିକେଟ୍ ରହିପାରେ _ ତାଲିକା କ୍ରମରେ ପ୍ରତ୍ୟେକ ଶବ୍ଦର ଲମ୍ବ ଅନୁଯାୟୀ ବୃଦ୍ଧି ହେବା ଉଚିତ, ଏବଂ ଆପଣ ସେହି ନିୟମ ଅନୁଯାୟୀ ସର୍ଟ ହୋଇଥିବା ତାଲିକା ଫେରାଇବେ _ ଯଦି ଦୁଇଟି ଶବ୍ଦର ସମାନ ଲମ୍ବ ଅଛି, ତେବେ ତାଲିକାକୁ ଆଲଫାବେଟିକ୍ ଭାବରେ ସର୍ଟ କରନ୍ତୁ _ ଫଳନଟି ସର୍ଟ ହୋଇଥିବା କ୍ରମରେ ଷ୍ଟ୍ରିଙ୍ଗଗୁଡ଼ିକର ଏକ ତାଲିକା ଫେରାଇବ _ ଆପଣ ଧରି ନେଇପାରନ୍ତି ଯେ ସମସ୍ତ ଶବ୍ଦର ସମାନ ଲମ୍ବ ହେବ _ ଉଦାହରଣ ସ୍ୱରୂପଃ assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd \"]\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"ଏକ ସରଳ ପ୍ରୋଗ୍ରାମ ଯାହା x ର ମୂଲ୍ୟ ଫେରାଇଥାଏ ଯଦି n ଏକ ପ୍ରଧାନ ସଂଖ୍ୟା ହୋଇଥାଏ ଏବଂ y ର ମୂଲ୍ୟ ଫେରାଇଥାଏ ଅନ୍ୟଥା _ ଉଦାହରଣ: x_or_y ପାଇଁ _ (7, 34, 12) == 34 x_or_y ପାଇଁ _ (15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''ଏକ ସଂଖ୍ୟା ତାଲିକା ଦିଆଯାଇ, ତାଲିକାରେ ଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକର ବର୍ଗର ସମୁଦାୟକୁ ଫେରାନ୍ତୁ ଯାହା ଅଜଣା ଅଟେ। ନକାରାତ୍ମକ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଅଣଦେଖା କରନ୍ତୁ କିମ୍ବା ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ନୁହେଁ। double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 ଯଦି ଇନପୁଟ୍ ତାଲିକା ଖାଲି ଅଛି, ତେବେ 0 ଫେରାନ୍ତୁ '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"ମୁଁ ଭାବୁଛି ଆମେ ସମସ୍ତେ ସେହି ଅନୁଭବକୁ ମନେ ରଖିଛୁ ଯେତେବେଳେ କିଛି ଦୀର୍ଘ ପ୍ରତୀକ୍ଷିତ ଘଟଣାର ଫଳାଫଳ ଶେଷରେ ଜଣା ପଡିଥାଏ । ସେହି ମୁହୂର୍ତ୍ତରେ ଆପଣଙ୍କ ପାଖରେ ଥିବା ଭାବନା ଏବଂ ଚିନ୍ତାଧାରା ନିଶ୍ଚିତ ଭାବରେ ନୋଟ୍ କରିବା ଏବଂ ତୁଳନା କରିବା ପାଇଁ ଉପଯୁକ୍ତ ଅଟେ । ଆପଣଙ୍କର କାର୍ଯ୍ୟ ହେଉଛି ଜଣେ ବ୍ୟକ୍ତି ଅନେକ ମ୍ୟାଚ୍ ର ଫଳାଫଳକୁ ସଠିକ୍ ଭାବରେ ଅନୁମାନ କରିଛନ୍ତି କି ନାହିଁ ତାହା ନିର୍ଣ୍ଣୟ କରିବା । ଆପଣଙ୍କୁ ସମାନ ଲମ୍ବର ସ୍କୋର ଏବଂ ଅନୁମାନର ଦୁଇଟି ଏରେ ଦିଆଯାଇଛି, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ସୂଚକ ଏକ ମ୍ୟାଚ୍ ଦେଖାଏ । ସମାନ ଲମ୍ବର ଏକ ଏରେ ଫେରାନ୍ତୁ ଯାହା ପ୍ରତ୍ୟେକ ଅନୁମାନ କେତେ ଦୂରରେ ଅଛି ତାହା ଦର୍ଶାଏ । ଯଦି ସେମାନେ ସଠିକ୍ ଭାବରେ ଅନୁମାନ କରିଛନ୍ତି, ମୂଲ୍ୟ 0 ଅଟେ, ଏବଂ ଯଦି ନୁହେଁ, ମୂଲ୍ୟ ହେଉଛି ଅନୁମାନ ଏବଂ ସ୍କୋର ମଧ୍ୟରେ ସମ୍ପୂର୍ଣ୍ଣ ପାର୍ଥକ୍ୟ _ ଉଦାହରଣଃ (([1,2,3,4,5,1], [1,2,3,4,2,]) -> [0,0,0,0,3,3] ତୁଳନା କରନ୍ତୁ ([0,0,5,0,4], [0,4,1,0,1], -0,]) -> [4,4,0,1,6]\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଶ୍ରେଣୀ ର ନାମ (ଏକ ବାକ୍ୟଖଣ୍ଡ) ଏବଂ ସଂପ୍ରସାରଣ ର ତାଲିକା ଦିଆଯିବ. ସଂପ୍ରସାରଣ ର ଶକ୍ତି ନିମ୍ନଲିଖିତ ଅଟେ: CAP କୁ ସଂପ୍ରସାରଣ ର ନାମ ରେ ଥିବା ବଡ଼ ଅକ୍ଷର ର ସଂଖ୍ୟା କୁହନ୍ତୁ, ଏବଂ SM କୁ ସଂପ୍ରସାରଣ ର ନାମ ରେ ଥିବା ଛୋଟ ଅକ୍ଷର ର ସଂଖ୍ୟା କୁହନ୍ତୁ, ଶକ୍ତି CAP - SM ଅଂଶ ଦ୍ବାରା ଦିଆ ଯାଏ. ଆପଣଙ୍କୁ ସବୁଠାରୁ ବଡ ସଂପ୍ରସାରଣ କୁ ଖୋଜିବା ଉଚିତ ଏବଂ ଏହି ଫର୍ମାଟ ରେ ଏକ ବାକ୍ୟଖଣ୍ଡ ଫେରାଇବେ: ClassName.StrongestExtensionName. ଯଦି ସମାନ ଶକ୍ତି ସହିତ ଦୁଇ କିମ୍ବା ଅଧିକ ସଂପ୍ରସାରଣ ଅଛି, ତେବେ ଆପଣଙ୍କୁ ତାଲିକା ରେ ପ୍ରଥମେ ଆସୁଥିବା ଗୋଟିଏ କୁ ବାଛିବା ଉଚିତ. ଉଦାହରଣ ସ୍ୱରୂପ, ଯଦି ଆପଣଙ୍କୁ \"Slices\" ଶ୍ରେଣୀ ରୂପରେ ଏବଂ ସଂପ୍ରସାରଣ ର ତାଲିକା ଦିଆଯାଏ: ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] ତେବେ ଆପଣ 'Slices.SEviRNGSliCes' କୁ ଫେରାଇବେ କାରଣ 'SviRNGSliCes' ହେଉଛି 'mySviRNGSliCes'ର ଶକ୍ତି (ଆଦି ସଂପ୍ରସାରଣ: Strongest_Class_AA', ଉଦାହରଣ ସ୍ୱରୂପ 'AA'_Class_Strongest_') ।\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"ଆପଣଙ୍କୁ 2 ଟି ଶବ୍ଦ ଦିଆଯାଇଛି. ଆପଣଙ୍କୁ True ଫେରାଇବାକୁ ହେବ ଯଦି ଦ୍ବିତୀୟ ଶବ୍ଦ କିମ୍ବା ଏହାର କୌଣସି ଘୂର୍ଣ୍ଣନ ପ୍ରଥମ ଶବ୍ଦର ଏକ ସବଷ୍ଟ୍ରିଙ୍ଗ cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check\"abab\",\"baa\") => True cycpattern_check\"(\"efef\",\"eeff\") => False cycpattern_check\"(hims\",\"simen\") => True \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"ଏକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଦିଆଗଲା. ଏକ ଟାପଲ୍ ଫେରାଇଥାଏ ଯେଉଁଥିରେ ଯଥାକ୍ରମେ ଯୁଗ୍ମ ଏବଂ ଅଙ୍କ ସଂଖ୍ୟା ଥାଏ. ଉଦାହରଣ: ଯୁଗ୍ମ_ଅଙ୍କ_ଗଣନା ((-12) ==> (1, 1) ଯୁଗ୍ମ_ଅଙ୍କ_ଗଣନା ((123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା ଦିଆଗଲା, ଏହାର ରୋମାନ୍ ସଂଖ୍ୟା ସମକକ୍ଷକୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ପ୍ରାପ୍ତ କରନ୍ତୁ, ଏବଂ ଏହାକୁ ଛୋଟ ଅକ୍ଷରରେ ଫେରାନ୍ତୁ _ ପ୍ରତିବନ୍ଧକଃ 1 <= num <= 1000 ଉଦାହରଣଃ >>> int_to_mini_roman{19} == 'xix' >>> int_to_mini_roman{152} == 'clii' >>> int_to_mini_roman{426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ଏକ ତ୍ରିଭୁଜର ତିନି ପାର୍ଶ୍ବ ର ଲମ୍ବ ଦିଆଗଲା. ଯଦି ତିନି ପାର୍ଶ୍ବ ଏକ ସଠିକ କୋଣ ବିଶିଷ୍ଟ ତ୍ରିଭୁଜ ରଚନା କରନ୍ତି ତେବେ TRUE ଫେରାନ୍ତୁ, ଅନ୍ୟଥା FALSE ଫେରାନ୍ତୁ. ଏକ ସଠିକ କୋଣ ବିଶିଷ୍ଟ ତ୍ରିଭୁଜ ହେଉଛି ଏକ ତ୍ରିଭୁଜ ଯେଉଁଥିରେ ଏକ କୋଣ ସଠିକ କୋଣ କିମ୍ବା 90 ଡିଗ୍ରୀ ଅଟେ. ଉଦାହରଣ: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"ଏକ ଫଳନ ଲେଖନ୍ତୁ ଯାହା ଏକ ତାଲିକାକୁ ଗ୍ରହଣ କରେ। ଏହି ତାଲିକାରେ ବିଭିନ୍ନ ଶବ୍ଦ ଅଛି। ସର୍ବାଧିକ ଅନନ୍ୟ ଅକ୍ଷର ସହିତ ଶବ୍ଦକୁ ଫେରାନ୍ତୁ। ଯଦି ଏକାଧିକ ଷ୍ଟ୍ରିଙ୍ଗରେ ସର୍ବାଧିକ ଅନନ୍ୟ ଅକ୍ଷର ଅଛି, ତେବେ ଶବ୍ଦକୋଷୀୟ କ୍ରମରେ ପ୍ରଥମେ ଆସୁଥିବା ଏକକୁ ଫେରାନ୍ତୁ _ find_max (([\"ନାମ\", \"ଅଫ୍\", \"ଷ୍ଟ୍ରିଙ୍ଗ୍\"]) == \"ଷ୍ଟ୍ରିଙ୍ଗ୍\" find_max (([\"ନାମ\", \"ଇନାମ\", \"ଗେମ୍\"]) == \"ଇନାମ\" find_max (([\"ଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆଆ\"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"ଆପଣ ଭୋକିଲା ବିଲେଇ, ଏବଂ ଆପଣ ପୂର୍ବରୁ ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ସଂଖ୍ୟକ ଗାଜର ଖାଇଛନ୍ତି, କିନ୍ତୁ ବର୍ତ୍ତମାନ ଆପଣଙ୍କୁ ଦିନର ଭୋଜନ ସଂପୂର୍ଣ୍ଣ କରିବା ପାଇଁ ଅଧିକ ଗାଜର ଖାଇବା ଆବଶ୍ୟକ _ ଆପଣ ଏକ ଆରେ ଫେରାଇବେ [ ଆପଣଙ୍କ ଭୋଜନ ପରେ ଖାଇଥିବା ଗାଜରର ସମୁଦାୟ ସଂଖ୍ୟା, ଆପଣଙ୍କ ଭୋଜନ ପରେ ବାକି ଗାଜରର ସଂଖ୍ୟା ] ଯଦି ସେଠାରେ ପର୍ଯ୍ୟାପ୍ତ ବାକି ଗାଜର ନଥାଏ, ତେବେ ଆପଣ ସମସ୍ତ ବାକି ଗାଜର ଖାଇବେ, କିନ୍ତୁ ତଥାପି ଭୋକିଲା ରହିବେ _ ଉଦାହରଣଃ * ଖାଆନ୍ତୁ (୫, ୬, ୧୦) -> [11, 4] * ଖାଆନ୍ତୁ (୪, ୮, ୯) -> [12, 1] * ଖାଆନ୍ତୁ (୧, ୧୦, ୧୦) -> [11, 0] * ଖାଆନ୍ତୁ (୨, ୧୧, ୫) -> [୭, ୦] ଭେରିଏବଲ୍: @ ସଂଖ୍ୟା: ଆପଣ ଖାଇଥିବା ଗାଜରର ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା _ @ ଆବଶ୍ୟକଃ ଆପଣଙ୍କୁ ଖାଇବାକୁ ଥିବା ଗାଜରର ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା _ @ ବାକିଥିବା ଗାଜରର ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା _\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"ଦୁଇ ତାଲିକା ଅପରେଟର, ଏବଂ ଅପରେଣ୍ଡ ଦିଆଗଲା. ପ୍ରଥମ ତାଲିକାରେ ମୌଳିକ ବୀଜାଣୁ କାର୍ଯ୍ୟ ଅଛି, ଏବଂ ଦ୍ୱିତୀୟ ତାଲିକାରେ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକା ଅଛି. ବୀଜାଣୁ ଅଭିବ୍ୟକ୍ତି ନିର୍ମାଣ କରିବା ପାଇଁ ଦିଆଯାଇଥିବା ଦୁଇଟି ତାଲିକା ବ୍ୟବହାର କରନ୍ତୁ ଏବଂ ଏହି ଅଭିବ୍ୟକ୍ତିର ମୂଲ୍ୟାଙ୍କନ ଫେରାନ୍ତୁ. ମୌଳିକ ବୀଜାଣୁ କାର୍ଯ୍ୟଃ ଯୋଗ (+) ହ୍ରାସ (-)) ଗୁଣନ (*) ତଳ ବିଭାଜନ ( //) ବିସ୍ତାର ( ** ଉଦାହରଣ): ଅପରେଟର['+', '*', '-'] ଆରେ = [2, 3, 4, 5] ଫଳାଫଳ = 2 + 3 * 4 - 5 => ଫଳାଫଳ = 9 ଟିପ୍ପଣୀଃ ଅପରେଟର ତାଲିକାର ଲମ୍ବ ଅପରେଣ୍ଡ ତାଲିକା ମାଇନସ ଏକର ଲମ୍ବ ସହିତ ସମାନ _ ଅପରେଣ୍ଡ ହେଉଛି ଅଣ-ନକାରାତ୍ମକ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକା _ ଅପରେଟର ତାଲିକାରେ ଅତି କମରେ ଜଣେ ଅପରେଟର ଅଛି, ଏବଂ ଅପରେଣ୍ଡ ତାଲିକାରେ ଅତି କମରେ ଦୁଇଟି ଅପରେଣ୍ଡ ଅଛି _\"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"ଆପଣଙ୍କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ s ଦିଆ ଯାଇଛି. ଯଦି s[i] ଏକ ଅକ୍ଷର, ତେବେ ଏହାର କେସକୁ ନିମ୍ନରୁ ଉପର କିମ୍ବା ବାମପଟେ ପରିବର୍ତ୍ତନ କରନ୍ତୁ, ଅନ୍ୟଥା ଏହାକୁ ସେମିତି ରଖନ୍ତୁ. ଯଦି ଷ୍ଟ୍ରିଙ୍ଗରେ କୌଣସି ଅକ୍ଷର ନାହିଁ, ତେବେ ଷ୍ଟ୍ରିଙ୍ଗକୁ ପରିବର୍ତ୍ତନ କରନ୍ତୁ. ଫଳନଟି ଫଳାଫଳ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇବ. ଉଦାହରଣ solve(\"1234\") = \"4321\" solve(\"ab\") = \"AB\" solve(\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"'text' ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଗଲା, ଏହାର md5 ହ୍ୟାଶ୍ ସମକକ୍ଷ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରାଇଦେବେ. ଯଦି 'text' ଏକ ଖାଲି ଷ୍ଟ୍ରିଙ୍ଗ୍, ଫେରାଇଦେବେ None. >>> string_to_md5('ହାଲୋ ୱାର୍ଲ୍ଡ') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "ory_Orya",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା a ଏବଂ b ଦିଆଗଲା, a ଏବଂ b ମଧ୍ୟରେ ଥିବା ଯୁଗ୍ମ ଅଙ୍କଗୁଡ଼ିକୁ ଉଦୟ କ୍ରମରେ ଫେରାଇଦେବେ. ଉଦାହରଣ ସ୍ୱରୂପ: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]