task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,ell_Grek,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Ελέγξτε αν σε δεδομένη λίστα αριθμών, υπάρχουν δύο αριθμοί πιο κοντά ο ένας στον άλλο από το δεδομένο όριο.""""""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,ell_Grek,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Η εισαγωγή σε αυτή τη συνάρτηση είναι μια σειρά γραμμών που περιέχει πολλαπλές ομάδες ενσωματωμένων παρενθέσεων. Στόχος σας είναι να χωρίσετε αυτές τις ομάδες σε ξεχωριστές σειρές γραμμών και να επιστρέψετε τον κατάλογο αυτών. Οι ξεχωριστές ομάδες είναι ισορροπημένες (κάθε ανοιχτή παρενθέση είναι σωστά κλειστή) και δεν ενσωματωμένες η μία μέσα στην άλλη Αγνοήστε τυχόν κενά στην σειρά εισόδου. Παράδειγμα: >>> separate_paren_groups' ((( ) (() ((( ) ) ) ' [' ((() ', '(()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,ell_Grek,python,"

def truncate_number(number: float) -> float:
    """"""Με δεδομένο θετικό αριθμό πλωτής κλίμακας, μπορεί να διασπαστεί σε ακεραίο μέρος (μεγαλύτερο ακέραιο μικρότερο από τον δεδομένο αριθμό) και δεκαδικά (απομεινόμενο μέρος πάντα μικρότερο από 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,ell_Grek,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Σας δίνεται μια λίστα με τις πράξεις κατάθεσης και ανάληψης σε έναν τραπεζικό λογαριασμό που ξεκινά με μηδενικό υπόλοιπο. Το καθήκον σας είναι να ανιχνεύσετε αν σε οποιοδήποτε σημείο το υπόλοιπο του λογαριασμού πέσει κάτω από το μηδέν, και σε αυτό το σημείο η συνάρτηση θα πρέπει να επιστρέψει True. Διαφορετικά θα πρέπει να επιστρέψει False.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,ell_Grek,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Για μια δεδομένη λίστα αριθμών εισόδου, υπολογίστε τη Μέση Απόλυτη Απόκλιση γύρω από τη μέση τιμή αυτού του συνόλου δεδομένων. Η Μέση Απόλυτη Απόκλιση είναι η μέση απόλυτη διαφορά μεταξύ κάθε στοιχείου και ενός κεντρικού σημείου (μέση τιμή σε αυτή την περίπτωση): MAD = μέση τιμή. x - x_μέση τιμή. Παράδειγμα: >>> μέση_απόκλιση_απόλυτης_απόκλισης ([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,ell_Grek,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Εισάγετε έναν αριθμό ""διαχωρισμού"" μεταξύ κάθε δύο διαδοχικών στοιχείων του καταλόγου εισόδου `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,ell_Grek,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Η είσοδος σε αυτή τη συνάρτηση είναι μια σειρά που αντιπροσωπεύει πολλαπλές ομάδες για ενσωματωμένες παρενθέσεις χωρισμένες με κενά. Για κάθε ομάδα, εκπέμπει το βαθύτερο επίπεδο ενσωμάτωσης παρενθέσεων.""""""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,ell_Grek,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Φιλτράρισμα μιας λίστας εισερχόμενων συμβολοσειρών μόνο για εκείνες που περιέχουν δεδομένη υποσύνδεση >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,ell_Grek,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Για έναν δεδομένο κατάλογο ακέραιων αριθμών, επιστρέφει ένα tuple που αποτελείται από ένα άθροισμα και ένα γινόμενο όλων των ακέραιων αριθμών σε μια λίστα. Το κενό άθροισμα θα πρέπει να είναι ίσο με το 0 και το κενό γινόμενο θα πρέπει να είναι ίσο με το 1. >>> sum_product (([]) (0, 1) >>> sum_product (([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,ell_Grek,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Από έναν δεδομένο κατάλογο ακέραιων αριθμών, δημιουργεί έναν κατάλογο των κυλιόμενων μέγιστων στοιχείων που βρέθηκαν μέχρι δεδομένη στιγμή στη σειρά. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,ell_Grek,python,"

def is_palindrome(string: str) -> bool:
    """"""Βρείτε το μικρότερο παλινδρόμιο που αρχίζει με μια προμηθευμένη αλυσίδα. Η ιδέα του αλγόριθμου είναι απλή: - Βρείτε το μεγαλύτερο postfix της προμηθευμένης αλυσίδας που είναι παλινδρόμιο. - Προσθέστε στο τέλος της αλυσίδας αντίστροφο προθέματος αλυσίδας που έρχεται πριν από το παλινδρομικό επίθετο. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Δοκιμή εάν η δοθείσα αλυσίδα είναι παλινδρόμιο""""""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,ell_Grek,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Η είσοδος είναι δύο σειρές α και β που αποτελούνται μόνο από 1 και 0. Εκτελέστε δυαδικό XOR σε αυτές τις εισόδους και επιστρέψτε το αποτέλεσμα επίσης ως μια σειρά.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,ell_Grek,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Από τη λίστα των συμβολοσειρών, επιστρέφει το μακρύτερο. Επιστρέφει το πρώτο σε περίπτωση πολλαπλών συμβολοσειρών του ίδιου μήκους. Επιστρέφει το None σε περίπτωση που η λίστα εισόδου είναι κενή. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,ell_Grek,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Επιστρέφει τον μέγιστο κοινό διαιρέτη δύο ακέραιων α και β >>> μέγιστος_κοινός_διαιρέτης ((3, 5) 1 >>> μέγιστος_κοινός_διαιρέτης ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,ell_Grek,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Επιστρέφει λίστα όλων των προθεσμιών από το συντομότερο στο μακρύτερο της συμβολοσειράς εισόδου >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,ell_Grek,python,"

def string_sequence(n: int) -> str:
    """"""Επιστρέφει μια σειρά που περιέχει αριθμούς με οριοθετημένο χώρο που αρχίζουν από το 0 μέχρι και το n. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,ell_Grek,python,"

def count_distinct_characters(string: str) -> int:
    """"""Με δεδομένη μια συμβολοσειρά, βρείτε πόσους διακριτούς χαρακτήρες (ανεξάρτητα από την περίπτωση) αποτελείται από >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,ell_Grek,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Η εισαγωγή σε αυτή τη συνάρτηση είναι μια χορδή που αντιπροσωπεύει μουσικές νότες σε μια ειδική μορφή ASCII. Το έργο σας είναι να αναλύσετε λίστα χορδών ακεραίων που αντιστοιχούν σε πολλούς ρυθμούς. Εδώ είναι ένας υπόμνημα: 'o' - σημείωση, τελευταίες τέσσερις παλμοί 'o' - μισή σημείωση, τελευταίες δύο παλμοί 'o' - τετραγωνική σημείωση, τελευταίο ένα παλμό >>> parse_music. 'o' . o' . o' . o' . o
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,ell_Grek,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Βρείτε πόσες φορές μπορεί να βρεθεί μια δεδομένη υποσύνδεση στην αρχική αλυσίδα. Μετρήστε τις αλληλεπικαλυπτόμενες περιπτώσεις. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,ell_Grek,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Η είσοδος είναι μια αλυσίδα αριθμητικών στοιχείων με οριοθετημένο χώρο από το ""μηδέν"" έως το ""νέα"". Οι έγκυρες επιλογές είναι το ""μηδέν"", το ""ένα"", το ""δύο"", το ""τρεις"", το ""τέσσερα"", το ""πέντε"", το ""έξι"", το ""επτά"", το ""οκτώ"" και το ""νέα"". Επιστρέφει την αλυσίδα με αριθμούς ταξινομημένους από τον μικρότερο στον μεγαλύτερο >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,ell_Grek,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Από μια προμηθευμένη λίστα αριθμών (μήκους τουλάχιστον δύο) επιλέξτε και επιστρέψτε δύο που είναι τα πλησιέστερα μεταξύ τους και επιστρέψτε τα με τη σειρά (μικρότερος αριθμός, μεγαλύτερος αριθμός). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,ell_Grek,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Με δεδομένο κατάλογο αριθμών (τουλάχιστον δύο στοιχείων), εφαρμόστε έναν γραμμικό μετασχηματισμό σε αυτόν τον κατάλογο, έτσι ώστε ο μικρότερος αριθμός να γίνει 0 και ο μεγαλύτερος να γίνει 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,ell_Grek,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Φίλτρος δεδομένης λίστας οποιωνδήποτε τιμών Python μόνο για ακέραιους αριθμούς >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,ell_Grek,python,"

def strlen(string: str) -> int:
    """"""Διάρκεια επιστροφής της δοθείσας αλυσίδας >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,ell_Grek,python,"

def largest_divisor(n: int) -> int:
    """"""Για έναν δεδομένο αριθμό n, βρείτε τον μεγαλύτερο αριθμό που διαιρεί n ομοιόμορφα, μικρότερο από n >>> μεγαλύτερος_διαμεριστής ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,ell_Grek,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Επιστρέφει λίστα με τους πρώτους συντελεστές ενός δεδομένου ακέραιου αριθμού από τη μικρότερη μέχρι τη μεγαλύτερη. Κάθε ένας από τους συντελεστές πρέπει να αναγράφεται αριθμός φορές που αντιστοιχεί σε πόσες φορές εμφανίζεται στη διχοτόμηση. Ο αριθμός εισόδου πρέπει να είναι ίσος με το γινόμενο όλων των συντελεστών >>> παραγοντοποίηση(8) [2, 2, 2] >>> παραγοντοποίηση(25) [5, 5] >>> παραγοντοποίηση(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,ell_Grek,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Από μια λίστα ακέραιων αριθμών, αφαιρέστε όλα τα στοιχεία που εμφανίζονται περισσότερες από μία φορές. Διατηρήστε την σειρά των στοιχείων που έχουν μείνει ίδια με την εισερχόμενη. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,ell_Grek,python,"

def flip_case(string: str) -> str:
    """"""Για μια δεδομένη αλυσίδα, αναστρέψτε μικρογραφικούς χαρακτήρες σε κεφαλαία και κεφαλαία σε μικρογραφικούς. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,ell_Grek,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Συγκεντρώστε λίστα συμβόλων σε μία μόνο συμβόλαιο >>> συγκεντρώστε (([]) '' >>> συγκεντρώστε ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,ell_Grek,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Φιλτράρει μια λίστα εισερχόμενων συμβολοσειρών μόνο για εκείνες που ξεκινούν με ένα δεδομένο πρόθεμα. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,ell_Grek,python,"

def get_positive(l: list):
    """"""Επιστρέφει μόνο θετικούς αριθμούς στον κατάλογο. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,ell_Grek,python,"

def is_prime(n):
    """"""Επιστρέφει true αν ένας δεδομένος αριθμός είναι πρώτος και false διαφορετικά. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,ell_Grek,python,"import math


def poly(xs: list, x: float):
    """"""Οι συντελεστές x είναι συντελεστές πολυωνύμου. βρείτε_μηδέν βρείτε x έτσι ώστε το πολυ (x) = 0. βρείτε_μηδέν επιστρέφει μόνο μόνο μηδενικό σημείο, ακόμη και αν υπάρχουν πολλά. Επιπλέον, το βρείτε_μηδέν παίρνει μόνο λίστα xs που έχουν ζυγο αριθμό συντελεστών και μεγαλύτερο μη μηδενικό συντελεστή, καθώς εγγυάται μια λύση. >>> γύρος (x) [1, 2]), 2) # f (x) = 1 + 2x -0,5 >>> γύρος (x) [-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1,0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Αξιολογεί πολυώνυμο με συντελεστές xs στο σημείο x. επιστρέφει xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,ell_Grek,python,"

def sort_third(l: list):
    """"""Αυτή η συνάρτηση παίρνει μια λίστα l και επιστρέφει μια λίστα l' έτσι ώστε η l' να είναι πανομοιότυπη με την l στους δείκτες που δεν διαιρούνται με το τρία, ενώ οι τιμές της στους δείκτες που διαιρούνται με το τρία είναι ίσες με τις τιμές των αντίστοιχων δείκτων της l, αλλά ταξινομημένες. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,ell_Grek,python,"

def unique(l: list):
    """"""Επιστρέφει ταξινομημένα μοναδικά στοιχεία σε μια λίστα >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,ell_Grek,python,"

def max_element(l: list):
    """"""Επιστρέφει το μέγιστο στοιχείο στον κατάλογο. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,ell_Grek,python,"

def fizz_buzz(n: int):
    """"""Επιστρέφει τον αριθμό των εμφανίσεων του ψηφίου 7 σε ακέραιους αριθμούς μικρότερους από n οι οποίοι διαιρούνται με 11 ή 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,ell_Grek,python,"

def sort_even(l: list):
    """"""Αυτή η συνάρτηση παίρνει μια λίστα l και επιστρέφει μια λίστα l' έτσι ώστε η l' να είναι πανομοιότυπη με την l στα αρίθμητα δείγματα, ενώ οι τιμές της στα ζυγαρά δείγματα είναι ίσες με τις τιμές των ζυγαρά δείκτων του l, αλλά ταξινομημένες. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,ell_Grek,python,"

def encode_cyclic(s: str):
    """"""λαμβάνει ως εισερχόμενη σειρά κωδικοποιημένη με τη συνάρτηση encode_cyclic. Επιστρέφει κωδικοποιημένη σειρά. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""επιστρέφει κωδικοποιημένη συμβολοσειρά με κύκλους τριών χαρακτήρων. """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,ell_Grek,python,"

def prime_fib(n: int):
    """"""Ο αριθμός prime_fib επιστρέφει τον n-ο αριθμό που είναι ένας αριθμός Φιμπονάτσι και είναι επίσης πρώτος. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,ell_Grek,python,"

def triples_sum_to_zero(l: list):
    """"""Το triple_sum_to_zero παίρνει μια λίστα ακέραιων αριθμών ως είσοδο. Επιστρέφει True αν υπάρχουν τρία ξεχωριστά στοιχεία στη λίστα που αθροίζονται στο μηδέν, και False διαφορετικά. >>> triple_sum_to_zero (([1, 3, 5, 0]) False >>> triple_sum_to_zero (([1, 3, -2, 1]) True >>> triple_sum_to_zero (([1, 2, 3, 7]) False >>> triple_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero [1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,ell_Grek,python,"

def car_race_collision(n: int):
    """"""Φανταστείτε μια οδό που είναι μια τέλεια ευθεία άπειρα μεγάλη γραμμή. n αυτοκίνητα οδηγούν αριστερά προς τα δεξιά, ταυτόχρονα, ένα διαφορετικό σύνολο από n αυτοκίνητα οδηγούν δεξιά προς τα αριστερά. Τα δύο σύνολα αυτοκινήτων ξεκινούν πολύ μακριά το ένα από το άλλο. Όλα τα αυτοκίνητα κινούνται με την ίδια ταχύτητα. Δύο αυτοκίνητα λέγεται ότι συγκρούονται όταν ένα αυτοκίνητο που κινείται αριστερά προς τα δεξιά χτυπά ένα αυτοκίνητο που κινείται δεξιά προς τα αριστερά. Ωστόσο, τα αυτοκίνητα είναι άπειρα γερά και ισχυρά. Ως αποτέλεσμα, συνεχίζουν να κινούνται στην τροχιά τους σαν να μην συγκρούστηκαν. Αυτή η συνάρτηση εκπέμπει τον αριθμό τέτοιων συγκρούσεων.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,ell_Grek,python,"

def incr_list(l: list):
    """"""Επιστρέφει κατάλογο με στοιχεία αυξημένα κατά 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,ell_Grek,python,"

def pairs_sum_to_zero(l):
    """"""Το pairs_sum_to_zero παίρνει μια λίστα από ακέραιους αριθμούς ως είσοδο. Επιστρέφει True αν υπάρχουν δύο ξεχωριστά στοιχεία στη λίστα που αθροίζονται στο μηδέν, και False διαφορετικά. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,ell_Grek,python,"

def change_base(x: int, base: int):
    """"""Αλλαγή αριθμητικής βάσης του αριθμού εισόδου x σε βάση. επιστροφή παράστασης χορδής μετά τη μετατροπή. αριθμοί βάσης είναι μικρότεροι από 10. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,ell_Grek,python,"

def triangle_area(a, h):
    """"""Δίνεται το μήκος μιας πλευράς και η υψηλή περιοχή επιστροφής για ένα τρίγωνο. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,ell_Grek,python,"

def fib4(n: int):
    """"""Η αλληλουχία αριθμών Fib4 είναι μια αλληλουχία παρόμοια με τη σειρά Fibbonacci που ορίζεται ως εξής: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Παρακαλούμε γράψτε μια συνάρτηση για να υπολογίσετε αποτελεσματικά το n-το στοιχείο της αλληλουχίας αριθμών fib4. Μην χρησιμοποιείτε την επανάληψη. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,ell_Grek,python,"

def median(l: list):
    """"""Μεσαία τιμή επιστροφής των στοιχείων του καταλόγου l. >>> μεσαία τιμή (([3, 1, 2, 4, 5]) 3 >>> μεσαία τιμή (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,ell_Grek,python,"

def is_palindrome(text: str):
    """"""Ελέγχει αν η δοσμένη αλυσίδα είναι ένα παλινδρόμιο >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,ell_Grek,python,"

def modp(n: int, p: int):
    """"""Επιστρέφει 2^n modulo p (να γνωρίζετε τους αριθμούς). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,ell_Grek,python,"

def encode_shift(s: str):
    """"""λαμβάνει ως εισερχόμενη αλυσίδα κωδικοποιημένη με τη συνάρτηση encode_shift. Επιστρέφει αποκωδικοποιημένη αλυσίδα. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""επιστρέφει κωδικοποιημένη συμβολοσειρά μετατοπίζοντας κάθε χαρακτήρα κατά 5 στο αλφάβητο.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,ell_Grek,python,"

def remove_vowels(text):
    """"""remove_vowels είναι μια συνάρτηση που παίρνει string και επιστρέφει string χωρίς φωνήεντα. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,ell_Grek,python,"

def below_threshold(l: list, t: int):
    """"""Επιστρέφει Αληθινό αν όλοι οι αριθμοί στον κατάλογο l είναι κάτω από το όριο t. >>> below_threshold([1, 2, 4, 10], 100) Αληθινό >>> below_threshold([1, 20, 4, 10], 5) Λευκό """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,ell_Grek,python,"

def add(x: int, y: int):
    """"""Προσθέστε δύο αριθμούς x και y >>> προσθέστε ((2, 3) 5 >>> προσθέστε ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,ell_Grek,python,"

def same_chars(s0: str, s1: str):
    """"""Ελέγξτε αν δύο λέξεις έχουν τους ίδιους χαρακτήρες. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') Αληθινό >>> same_chars (('abcd', 'dddddddabc') Αληθινό >>> same_chars (('dddddddabc', 'abcd') Αληθινό >>> same_chars (('eabcd', 'dddddddddabc') Αληθινό >>> same_chars ((('abcd', 'dddddabddce') Αληθινό >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') Αληθινό """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,ell_Grek,python,"

def fib(n: int):
    """"""Επιστρέφει τον n-το αριθμό Φιμπονάτσι. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,ell_Grek,python,"

def correct_bracketing(brackets: str):
    """"""Οι αλυσίδες ""<"" και "">"" είναι μια σειρά από ""<"" και "">"". επιστρέφει Αληθινό αν κάθε αλυσίδα ανοίγματος έχει μια αντίστοιχη αλυσίδα κλείσιμου. >>> correct_bracketing(""<"") Αληθινό >>> correct_bracketing(""<>"") Αληθινό >>> correct_bracketing(""<><>>"") Αληθινό >>> correct_bracketing(""><<>"") Αληθινό """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,ell_Grek,python,"

def monotonic(l: list):
    """"""Επιστρέφει Αληθινό αν τα στοιχεία της λίστας αυξάνονται ή μειώνονται μονοτονικά. >>> μονοτονικό (([1, 2, 4, 20]) Αληθινό >>> μονοτονικό (([1, 20, 4, 10]) Ψευδές >>> μονοτονικό (([4, 1, 0, -10]) Αληθινό """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,ell_Grek,python,"

def common(l1: list, l2: list):
    """"""Επιστρέφει ταξινομημένα μοναδικά κοινά στοιχεία για δύο λίστες. >>> κοινά (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> κοινά (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,ell_Grek,python,"

def largest_prime_factor(n: int):
    """"""Επιστρέφει τον μεγαλύτερο πρώτον παράγοντα του αριθμού n. Υποθέστε ότι ο αριθμός n > 1 δεν είναι πρώτος. >>> μεγαλύτερος_πρώτος_παράγοντας (συνδυασμός) 13195) 29 >>> μεγαλύτερος_πρώτος_παράγοντας (συνδυασμός) 2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,ell_Grek,python,"

def sum_to_n(n: int):
    """"""η sum_to_n είναι μια συνάρτηση που αθροίζει αριθμούς από το 1 έως το n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,ell_Grek,python,"

def correct_bracketing(brackets: str):
    """"""Οι αριστερές αριστερές γραμμές είναι μια σειρά από ""("" και "")"". επιστρέφει Αλήθεια αν κάθε αριστερή αριστερή γραμμή ανοίγματος έχει μια αντίστοιχη αριστερή αριστερή γραμμή κλείσιμου. >>> correct_bracketing(""("") Λευκή >>> correct_bracketing(""() Αλήθεια >>> correct_bracketing(""(()) Αλήθεια >>> correct_bracketing("")""""""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,ell_Grek,python,"

def derivative(xs: list):
    """"""Τα xs αντιπροσωπεύουν συντελεστές ενός πολυωνύμου. xs[0] + xs[1] * x + xs[2] * x^2 + .... Επιστρέφει την παράγωγο αυτού του πολυωνύμου με την ίδια μορφή. >>> παράγωγο (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> παράγωγο [(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,ell_Grek,python,"

def fibfib(n: int):
    """"""Η αλληλουχία αριθμών FibFib είναι μια αλληλουχία παρόμοια με τη σειρά Fibbonacci που ορίζεται ως εξής: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Παρακαλούμε γράψτε μια συνάρτηση για να υπολογίσετε αποτελεσματικά το n-το στοιχείο της αλληλουχίας αριθμών fibfib. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,ell_Grek,python,"
FIX = """"""Γράψε μια συνάρτηση vowels_count η οποία παίρνει μια σειρά λέξεων ως εισερχόμενη και επιστρέφει τον αριθμό των φωνητικών στην σειρά.""""""

def vowels_count(s):
    """"""Προσθέστε περισσότερες περιπτώσεις δοκιμών.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,ell_Grek,python,"
def circular_shift(x, shift):
    """"""Κύκλος μετατόπιση των ψηφίων του ακέραιου αριθμού x, μετατόπιση των ψηφίων δεξιά με μετατόπιση και επιστρέφει το αποτέλεσμα ως μια σειρά. Εάν μετατόπιση > αριθμός ψηφίων, επιστρέφει ψηφία ανάποδα. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,ell_Grek,python,"
def digitSum(s):
    """"""Δουλειά Γράψτε μια συνάρτηση που παίρνει μια σειρά ως εισροή και επιστρέφει το άθροισμα των ανώτερων χαρακτήρων μόνο' κωδικοί ASCII. Παραδείγματα: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,ell_Grek,python,"
def fruit_distribution(s,n):
    """"""Σε αυτή την εργασία, θα σας δοθεί μια σειρά που αντιπροσωπεύει έναν αριθμό μήλων και πορτοκαλιών που διανέμονται σε ένα καλάθι με φρούτα αυτό το καλάθι περιέχει μήλα, πορτοκάλια και μάνγκο φρούτα. Δεδομένης της σειράς που αντιπροσωπεύει τον συνολικό αριθμό των πορτοκαλιών και μήλων και ένα ακέραιο που αντιπροσωπεύει τον συνολικό αριθμό των φρούτων στο καλάθι επιστρέψτε τον αριθμό των φρούτων μάνγκο στο καλάθι. για παράδειγμα: fruit_distribution""5(μήλα και 6 πορτοκάλια"", 19) ->19 - 5 - 6 = 8 fruit_distribution""0 μήλα και 1 πορτοκάλι"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 μήλα και 3 πορτοκάλια"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 μήλα και 1 πορτοκάλι"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,ell_Grek,python,"
def pluck(arr):
    """"""""Δεδομένου ενός πίνακα που αντιπροσωπεύει ένα κλάδο ενός δέντρου που έχει μη αρνητικούς ακέραιους κόμβους, το έργο σας είναι να αρπάξετε έναν από τους κόμβους και να τον επιστρέψετε. Ο αρπαγμένος κόμβος θα πρέπει να είναι ο κόμβος με τη μικρότερη ζυγαριά τιμή. Εάν βρεθούν πολλοί κόμβοι με την ίδια μικρότερη ζυγαριά τιμή, επιστρέψτε τον κόμβο που έχει το μικρότερο δείκτη. Ο αρπαγμένος κόμβος θα πρέπει να επιστρέφεται σε μια λίστα, [smallest_value, το δείκτη του ], Εάν δεν υπάρχουν ζυγαριά τιμές ή ο δεδομένος πίνακας είναι κενός, επιστρέψτε []. Παράδειγμα 1: Ειστροφή: [4,2,3] Αποβολή: [2, 1] Εξηγή: 2 έχει τη μικρότερη ζυγαριά τιμή και 2 έχει το μικρότερο δείκτη. Παράδειγμα 2: Ειστροφή: [1,2,3] Αποβολή: [2, 1] Εξηγή: 2 έχει τη μικρότερη ζυγαριά τιμή και 2 έχει το μικρότερο ζυγαριά δείκτη. Παράδειγμα 3: Εισαγωγή: [1,2,3] [1,2,3] Εξηγή: [1,2,3] Εξηγή: [2,3] Εξηγή: [2,3] Εξηγή: [2,3, [2,3] Εξηγή: [2, 3] Εξηγή: [2, [2, 3] Εξηγή: [2, 4] Εξηγή: [2, [2, 3] Εξηγή] Εξηγή: [2, [2, [2, 3] [2, [2, 3] [2, 4] [2, [2, [2, 3] [2, 4] [2, [2, 3] [2, [2, 3] [2, 4] [2, [2, 3] [2, [2, 4]""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,ell_Grek,python,"
def search(lst):
    '''Σας δίνεται μια μη κενή λίστα θετικών ακέραιων. Επιστρέφει το μεγαλύτερο ακέραιο που είναι μεγαλύτερο από το μηδέν και έχει συχνότητα μεγαλύτερη ή ίση με την τιμή του ίδιου του ακέραιου. Η συχνότητα ενός ακέραιου είναι ο αριθμός των φορές που εμφανίζεται στη λίστα. Αν δεν υπάρχει τέτοια τιμή, επιστρέφει -1. Παραδείγματα: αναζήτηση ([4, 1, 2, 2, 3, 1]) == 2 αναζήτηση ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 αναζήτηση ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,ell_Grek,python,"
def strange_sort_list(lst):
    '''Δίνοντας μια λίστα από ακέραιους αριθμούς, επιστρέφουμε τη λίστα με παράξενη σειρά. Η παράξενη ταξινόμηση, είναι όταν ξεκινάμε με την ελάχιστη τιμή, στη συνέχεια με το μέγιστο των υπόλοιπων ακέραιων αριθμών, στη συνέχεια με το ελάχιστο και ούτω καθεξής. Παραδείγματα: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,ell_Grek,python,"
def triangle_area(a, b, c):
    '''Δίνοντας τα μήκη των τριών πλευρών ενός τριγώνου. Επιστρέφει την έκταση του τριγώνου στρογγυλοποιημένη σε 2 δεκαδικά ψηφία αν οι τρεις πλευρές σχηματίζουν ένα έγκυρο τρίγωνο. Διαφορετικά επιστρέφει -1 Τρεις πλευρές κάνουν ένα έγκυρο τρίγωνο όταν το άθροισμα των δύο πλευρών είναι μεγαλύτερο από την τρίτη πλευρά. Παράδειγμα: triangle_area (αριθμός τριών πλευρών)'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,ell_Grek,python,"
def will_it_fly(q,w):
    '''Γράψε μια συνάρτηση που επιστρέφει True αν το αντικείμενο q πετάξει, και False διαφορετικά. Το αντικείμενο q θα πετάξει αν είναι ισορροπημένο (είναι μια παλινδρομική λίστα) και το άθροισμα των στοιχείων του είναι μικρότερο ή ίσο με το μέγιστο δυνατό βάρος w. Παράδειγμα: will_it_fly (([1, 2], 5) â -> False # 1+2 είναι μικρότερο από το μέγιστο δυνατό βάρος, αλλά είναι ανισορροπημένο. will_it_fly (([3, 2, 3], 1) â -> False # είναι ισορροπημένο, αλλά 3+2+3 είναι περισσότερο από το μέγιστο δυνατό βάρος. will_it_fly (([3, 2, 3], 9) â -> True # 3+23 είναι μικρότερο από το μέγιστο δυνατό βάρος, και είναι ισορροπημένο. will_it_fly ((([3], â 5) -> True # 3 είναι μικρότερο από το μέγιστο δυνατό βάρος, και είναι ισορροπημένο. '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,ell_Grek,python,"
def smallest_change(arr):
    """"""Βρείτε τον ελάχιστο αριθμό στοιχείων που πρέπει να αλλάξουν για να γίνει ο πίνακας παλινδρόμικος. Ένας παλινδρόμικος πίνακας είναι ένας πίνακας που διαβάζεται ο ίδιος προς τα πίσω και προς τα εμπρός. Σε μια αλλαγή, μπορείτε να αλλάξετε ένα στοιχείο σε οποιοδήποτε άλλο στοιχείο.""""""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,ell_Grek,python,"
def total_match(lst1, lst2):
    '''Γράψε μια συνάρτηση που δέχεται δύο λίστες συμβόλων και επιστρέφει τη λίστα που έχει συνολικό αριθμό συμβόλων σε όλες τις συμβόλους της λίστας λιγότερο από την άλλη λίστα. αν οι δύο λίστες έχουν τον ίδιο αριθμό συμβόλων, επιστρέφει την πρώτη λίστα. Παραδείγματα total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'])'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,ell_Grek,python,"
def is_multiply_prime(a):
    """"""Γράψε μια συνάρτηση που επιστρέφει true αν ο αριθμός που δίδεται είναι ο πολλαπλασιασμός 3 πρώτων αριθμών και false διαφορετικά. Γνωρίζοντας ότι (α) είναι μικρότερο από 100.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,ell_Grek,python,"
def is_simple_power(x, n):
    """"""Το καθήκον σας είναι να γράψετε μια συνάρτηση που επιστρέφει true αν ένας αριθμός x είναι μια απλή δύναμη του n και false σε άλλες περιπτώσεις. x είναι μια απλή δύναμη του n αν n**int=x Για παράδειγμα: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,ell_Grek,python,"
def iscube(a):
    '''Γράψε μια συνάρτηση που παίρνει έναν ακέραιο αριθμό a και επιστρέφει True αν αυτός ο αριθμός είναι ένας κύβος κάποιου ακέραιου αριθμού. Σημείωση: μπορείτε να υποθέσετε ότι η είσοδος είναι πάντα έγκυρη. Παραδείγματα: iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,ell_Grek,python,"
def hex_key(num):
    """"""Σας έχει ανατεθεί να γράψετε μια συνάρτηση που λαμβάνει έναν εξαδεκαδικό αριθμό ως μια σειρά και μετρά τον αριθμό των εξαδεκαδικών ψηφίων που είναι πρώτοι (πρώτος αριθμός, ή ένας πρώτος, είναι ένας φυσικός αριθμός μεγαλύτερος από 1 που δεν είναι ένα προϊόν δύο μικρότερων φυσικών αριθμών). Τα εξαδεκαδικά ψηφία είναι 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, Α, Β, Γ, Δ, Ε, F. Οι πρώτοι αριθμοί είναι 2, 3, 5, 7, 11, 13, 17,... Έτσι, πρέπει να καθορίσετε έναν αριθμό από τους ακόλουθους ψηφία: 2, 3, 5, 7, B (= δεκαδική 11), D (= δεκαδική 13). Σημείωση: μπορείτε να υποθέσετε ότι η είσοδος είναι πάντα σωστή ή κενή σειρά, και τα σύμβολα A,B,C,D,E,F είναι πάντα με κεφαλαία γράμματα. Παραδείγματα: Για num ""AB"" η έξοδος πρέπει να είναι num = 1. Για num = 1077E η έξοδος πρέπει να είναι 2. Για num = ""AB33"" η έξοδος πρέπει να είναι num = 1.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,ell_Grek,python,"
def decimal_to_binary(decimal):
    """"""Θα σας δοθεί ένας αριθμός σε δεκαδική μορφή και η εργασία σας είναι να τον μετατρέψετε σε δυαδική μορφή. Η συνάρτηση θα πρέπει να επιστρέψει μια σειρά, με κάθε χαρακτήρα να αντιπροσωπεύει έναν δυαδικό αριθμό. Κάθε χαρακτήρα στη σειρά θα είναι '0' ή '1'. Θα υπάρχει ένα επιπλέον ζευγάρι χαρακτήρων 'db' στην αρχή και στο τέλος της σειράς. Οι επιπλέον χαρακτήρες είναι εκεί για να βοηθήσουν με τη μορφή. Παραδείγματα: decimal_to_binary ((15) # επιστρέφει ""db1111db"" decimal_to_binary32) # επιστρέφει ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,ell_Grek,python,"
def is_happy(s):
    """"""Σας δίνεται μια αλυσίδα s. Η αποστολή σας είναι να ελέγξετε αν η αλυσίδα είναι ευτυχισμένη ή όχι. Μια αλυσίδα είναι ευτυχισμένη αν το μήκος της είναι τουλάχιστον 3 και κάθε 3 συνεχόμενα γράμματα είναι ξεχωριστά Για παράδειγμα: is_happy (a) => False is_happy (aa) => False is_happy (abcd) => True is_happy (aabb) => False is_happy (adb) => True is_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,ell_Grek,python,"
def numerical_letter_grade(grades):
    """"""Είναι η τελευταία εβδομάδα του εξαμήνου και η δασκάλα πρέπει να δώσει τους βαθμούς στους μαθητές. Η δασκάλα έχει κάνει τον δικό της αλγόριθμο για βαθμολόγηση. Το μόνο πρόβλημα είναι ότι έχει χάσει τον κώδικα που χρησιμοποιούσε για βαθμολόγηση. Σας έχει δώσει μια λίστα με τους βαθμούς GPA για μερικούς μαθητές και πρέπει να γράψετε μια συνάρτηση που μπορεί να εκδώσει μια λίστα με τους βαθμούς γράμματος χρησιμοποιώντας τον ακόλουθο πίνακα: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,ell_Grek,python,"
def prime_length(string):
    """"""Γράψε μια συνάρτηση που παίρνει μια σειρά και επιστρέφει Αληθινό αν το μήκος της σειράς είναι ένας πρώτος αριθμός ή Αληθινό διαφορετικά Παραδείγματα prime_length('Hello') == Αληθινό prime_length('abcdcba') == Αληθινό prime_length('kittens') == Αληθινό prime_length('orange') == Αληθινό """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,ell_Grek,python,"
def starts_one_ends(n):
    """"""Με δεδομένο θετικό ακέραιο n, επιστρέφουμε τον αριθμό των αριθμών των n-ψήφων θετικών ακέραιων που αρχίζουν ή τελειώνουν με 1. """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,ell_Grek,python,"
def solve(N):
    """"""Δίνοντας ένα θετικό ακέραιο αριθμό N, επιστρέφει το συνολικό άθροισμα των ψηφίων του σε δυαδικό. Παράδειγμα Για N = 1000, το άθροισμα των ψηφίων θα είναι 1 η έξοδος θα πρέπει να είναι ""1"". Για N = 150, το άθροισμα των ψηφίων θα είναι 6 η έξοδος θα πρέπει να είναι ""110"". Για N = 147, το άθροισμα των ψηφίων θα είναι 12 η έξοδος θα πρέπει να είναι ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,ell_Grek,python,"
def add(lst):
    """"""Με δεδομένο έναν μη κενό κατάλογο ακέραιων αριθμών, αρχικά προσθέστε τα ζυγαρά στοιχεία που βρίσκονται σε περιττούς δείκτες. Παραδείγματα: προσθέστε ([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,ell_Grek,python,"
def anti_shuffle(s):
    """"""Γράψτε μια συνάρτηση που παίρνει μια σειρά και επιστρέφει μια τακτοποιημένη έκδοση της. Η τακτοποιημένη έκδοση της σειράς, είναι μια σειρά όπου όλες οι λέξεις (διαχωρισμένες με κενό) αντικαθίστανται από μια νέα λέξη όπου όλοι οι χαρακτήρες είναι τακτοποιημένοι σε ανοδική σειρά με βάση την τιμή ascii. Σημείωση: Θα πρέπει να διατηρήσετε την σειρά των λέξεων και των κενών κενών θέσεων στη φράση. Για παράδειγμα: anti_shuffle ((('Hi') επιστρέφει 'Hi' anti_shuffle ((('hello') επιστρέφει 'ehllo' anti_shuffle (('Hello World!!!') επιστρέφει 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,ell_Grek,python,"
def get_row(lst, x):
    """"""Σας δίνεται ένα 2διαστατικό δεδομένο, ως μια ένθετη λίστα, η οποία είναι παρόμοια με το μήτρα, ωστόσο, σε αντίθεση με τους πίνακες, κάθε γραμμή μπορεί να περιέχει διαφορετικό αριθμό στήλων. Δεδομένου lst, και ακέραιο x, βρείτε ακέραιους x στη λίστα, και επιστρέψτε λίστα των tuples, [(x1, y1), (x2, y2) ...] έτσι ώστε κάθε tuple είναι μια συντεταγμένη - (γραμμή, στήλες), ξεκινώντας με 0.""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,ell_Grek,python,"
def sort_array(array):
    """"""Με δεδομένο ένα πλέγμα μη αρνητικών ακέραιων αριθμών, επιστρέψτε ένα αντίγραφο του δεδομένου πλέγματος μετά την ταξινόμηση, θα ταξινομήσετε το δεδομένο πλέγμα με ανοδική σειρά αν το άθροισμα ((πρώτη τιμή δείκτη, τελευταία τιμή δείκτη) είναι αμόρφωτο, ή θα το ταξινομήσετε με φθίνουσα σειρά αν το άθροισμα ((πρώτη τιμή δείκτη, τελευταία τιμή δείκτη) είναι ζυγικό. Σημείωση: * μην αλλάζετε το δεδομένο πλέγμα. Παραδείγματα: * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,ell_Grek,python,"
def encrypt(s):
    """"""Δημιουργήστε μια συνάρτηση encrypt που παίρνει ένα string ως επιχείρημα και επιστρέφει ένα string κρυπτογραφημένο με το αλφάβητο να περιστρέφεται. Το αλφάβητο θα πρέπει να περιστρέφεται με τέτοιο τρόπο ώστε τα γράμματα να μετακινούνται προς τα κάτω με δύο πολλαπλασιασμένα σε δύο θέσεις. Για παράδειγμα: encrypt('hi') επιστρέφει 'lm' encrypt('asdfghjkl') επιστρέφει 'ewhjklnop' encrypt('gf') επιστρέφει 'kj' encrypt('et') επιστρέφει 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,ell_Grek,python,"
def next_smallest(lst):
    """"""Σας δίνεται μια λίστα από ακέραιους αριθμούς. Γράψτε μια συνάρτηση next_smallest (() που επιστρέφει το 2ο μικρότερο στοιχείο της λίστας. Επιστρέφει None αν δεν υπάρχει τέτοιο στοιχείο. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,ell_Grek,python,"
def is_bored(S):
    """"""Θα σας δοθεί μια σειρά λέξεων και η αποστολή σας είναι να μετρήσετε τον αριθμό των βαρεμάτων. Μια βαρεμάρα είναι μια πρόταση που αρχίζει με τη λέξη ""I"". Οι προτάσεις οριοθετούνται από """"., ""?' ή ""!"". Για παράδειγμα: >>> είναι_βαρεμένος (is_bored) ""Γεια σας κόσμο"") 0 >>> είναι_βαρεμένος (is_bored) ""Ο ουρανός είναι μπλε. Ο ήλιος λάμπει. Λατρεύω αυτό τον καιρό"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,ell_Grek,python,"
def any_int(x, y, z):
    '''Δημιουργήστε μια συνάρτηση που παίρνει 3 αριθμούς. Επιστρέφει true αν ένας από τους αριθμούς είναι ίσος με το άθροισμα των άλλων δύο, και όλοι οι αριθμοί είναι ακέραιοι. Επιστρέφει false σε οποιαδήποτε άλλη περίπτωση. Παραδείγματα any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,ell_Grek,python,"
def encode(message):
    """"""Γράψτε μια συνάρτηση που παίρνει ένα μήνυμα και κωδικοποιεί με τέτοιο τρόπο ώστε να ανταλλάσσει τα κεντρικά και τα δευτερεύοντα γράμματα όλων των γραμμάτων, να αντικαθιστά όλα τα φωνήεντα στο μήνυμα με το γράμμα που εμφανίζεται 2 θέσεις μπροστά από αυτό το φωνήεντα στο αγγλικό αλφάβητο. Υποθέστε μόνο γράμματα. Παραδείγματα: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,ell_Grek,python,"

def skjkasdkd(lst):
    """"""Σας δίνεται μια λίστα από ακέραιους αριθμούς. Πρέπει να βρείτε τη μεγαλύτερη πρώτη τιμή και να επιστρέψετε το άθροισμα των ψηφίων της. Παραδείγματα: Για lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] η έξοδος θα πρέπει να είναι 10 Για lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] η έξοδος θα πρέπει να είναι 25 Για lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] η έξοδος θα πρέπει να είναι 13 Για lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] η έξοδος θα πρέπει να είναι 11 Για lst = [0,81,12,31,21] η έξοδος θα πρέπει να είναι 3 Για lst = [0,1,8,1,2,1,7] η έξοδος θα πρέπει να είναι  7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,ell_Grek,python,"
def check_dict_case(dict):
    """"""Δίνοντας ένα λεξικό, επιστρέφει True αν όλα τα πλήκτρα είναι σειρές με μικρά γράμματα ή όλα τα πλήκτρα είναι σειρές με μεγάλα γράμματα, αλλιώς επιστρέφει False. Η συνάρτηση θα πρέπει να επιστρέψει False αν το δεδομένο λεξικό είναι κενό. Παραδείγματα: check_dict_case{""a"":""apple"", ""b"":""banana""}) θα πρέπει να επιστρέψει True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) θα πρέπει να επιστρέψει False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) θα πρέπει να επιστρέψει False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) False θα πρέπει να επιστρέψει check.dict_case{""NC"":""STATE"", ""Z"":""IP""12345}) θα πρέπει να επιστρέψει True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,ell_Grek,python,"
def count_up_to(n):
    """"""Εφαρμόστε μια συνάρτηση που παίρνει έναν μη αρνητικό ακέραιο αριθμό και επιστρέφει μια σειρά από τους πρώτους n ακέραιους αριθμούς που είναι πρώτοι αριθμοί και μικρότεροι από n. για παράδειγμα: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,ell_Grek,python,"
def multiply(a, b):
    """"""Συμπληρώστε τη συνάρτηση που παίρνει δύο ακέραιους αριθμούς και επιστρέφει το γινόμενο των μονάδων τους. Υποθέστε ότι η είσοδος είναι πάντα έγκυρη. Παραδείγματα: πολλαπλασιάστε 148, 412) θα πρέπει να επιστρέψει 16. πολλαπλασιάστε 19 28, 72. πολλαπλασιάστε 2020, 1851) θα πρέπει να επιστρέψει 0. πολλαπλασιάστε 14, 15) θα πρέπει να επιστρέψει 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,ell_Grek,python,"
def count_upper(s):
    """"""Για παράδειγμα: count_upper{\displaystyle \mathbb {a} } επιστρέφει 1 count_upper{\displaystyle \mathbb {a} } επιστρέφει 0 count_upper{\displaystyle \mathbb {a} } επιστρέφει 0 count_upper{\displaystyle \mathbb {a} } } επιστρέφει 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,ell_Grek,python,"
def closest_integer(value):
    '''Δημιουργήστε μια συνάρτηση που παίρνει μια τιμή (σύνδεση) που αντιπροσωπεύει έναν αριθμό και επιστρέφει τον πλησιέστερο ακέραιο αριθμό σε αυτόν. Εάν ο αριθμός είναι εξίσου απόμακρος από δύο ακέραιους, στρογγυλοποιήστε τον μακριά από το μηδέν. Παραδείγματα >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 Σημείωση: Η στρογγυλοποίηση μακριά από το μηδέν σημαίνει ότι αν ο δεδομένος αριθμός είναι εξίσου απόμακρος από δύο ακέραιους, αυτός που θα πρέπει να επιστρέψετε είναι αυτός που είναι ο πιο μακρινός από το μηδέν. Για παράδειγμα, ο closest_integer "" ((14.5"") θα πρέπει να επιστρέψει 15 και ο closest_integer "" ((-14.5"") θα πρέπει να επιστρέψει -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,ell_Grek,python,"
def make_a_pile(n):
    """"""Ο αριθμός των πέτρες στο επόμενο επίπεδο είναι: - ο επόμενος αμόρφωτος αριθμός αν το n είναι αμόρφωτος. - ο επόμενος ζυγικός αριθμός αν το n είναι ζυγικός. Επιστρέφει τον αριθμό των πέτρες σε κάθε επίπεδο σε μια λίστα, όπου το στοιχείο στο δείκτη i αντιπροσωπεύει τον αριθμό των πέτρες στο επίπεδο (i+1).""""""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,ell_Grek,python,"
def words_string(s):
    """"""Θα σας δοθεί μια σειρά λέξεων χωρισμένες με κόμματα ή κενά. Η αποστολή σας είναι να χωρίσετε τη σειρά σε λέξεις και να επιστρέψετε μια σειρά από λέξεις. Για παράδειγμα: words_string ((""Γεια, το όνομά μου είναι John"") == [""Γεια"", ""μου"", ""ονοματεπώνυμο"", ""είναι"", ""John""] words_string ((""Ένα, δύο, τρία, τέσσερα, πέντε, έξι"") == [""Ένα"", ""δύο"", ""τρεις"", ""τέσσερα"", ""πέντε"", ""έξι""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,ell_Grek,python,"
def choose_num(x, y):
    """"""Αυτή η συνάρτηση παίρνει δύο θετικούς αριθμούς x και y και επιστρέφει τον μεγαλύτερο ζυγο αριθμό που είναι στην περιοχή [x, y] συμπεριλαμβανομένου.""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,ell_Grek,python,"
def rounded_avg(n, m):
    """"""Σας δίνονται δύο θετικοί ακέραιοι αριθμοί n και m, και η εργασία σας είναι να υπολογίσετε τον μέσο όρο των ακέραιων αριθμών από n έως m (συμπεριλαμβανομένων των n και m). Γυρίστε την απάντηση στον πλησιέστερο ακέραιο αριθμό και μετατρέψτε το σε δυαδικό. Αν το n είναι μεγαλύτερο από m, επιστρέψτε -1.""""""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,ell_Grek,python,"
def unique_digits(x):
    """"""Σημείωση: Η λίστα που επιστρέφεται πρέπει να ταξινομείται με αυξανόμενη σειρά. Για παράδειγμα: >>> unique_digits (([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,ell_Grek,python,"
def by_length(arr):
    """"""Με δεδομένο ένα πίνακα ακέραιων αριθμών, ταξινομήστε τους ακέραιους αριθμούς που είναι μεταξύ 1 και 9 συμπεριλαμβανομένων, αντιστρέψτε το αποτέλεσμα του πίνακα, και στη συνέχεια αντικαταστήστε κάθε ψηφίο με το αντίστοιχο όνομα από ""Ένα"", ""Δύο"", ""Τρία"", ""Τέσσερα"", ""Πέντε"", ""Έξι"", ""Επτά"", ""Εκτώ"", ""Εννέα"". Για παράδειγμα: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ταξινομήστε arr -> [1, 1, 2, 3, 4, 5, 8] -> αντιστρέψτε arr -> [8, 5, 4, 3, 2, 1, 1] επιστροφή [""Οκτώ"", ""Τέσσερα"", ""Τρία"", ""Δύο"", ""Δύο"", ""Ένα"", ""Ένα""] Εάν ο πίνακας είναι κενός, επιστρέψτε ένα άδειο: arr = [] επιστροφή [] Εάν ο πίνακας έχει οποιοδήποτε παράξενο αριθμό, αγνοήστε το: arr = [1, -1 , 55] -> arr -> [1, 55] -> reverse arr = [51] - return ['One' 1] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,ell_Grek,python,"
def f(n):
    """"""Εφαρμόστε τη συνάρτηση f που παίρνει n ως παράμετρο και επιστρέφει έναν κατάλογο μεγέθους n, έτσι ώστε η τιμή του στοιχείου στο δείκτη i να είναι το παραγοντικό του i αν i είναι ζυγικό ή το άθροισμα των αριθμών από 1 έως i διαφορετικά. i ξεκινά από 1. το παραγοντικό του i είναι ο πολλαπλασιασμός των αριθμών από 1 έως i (1 * 2 * ... * i).""""""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,ell_Grek,python,"
def even_odd_palindrome(n):
    """"""Δίνοντας ένα θετικό ακέραιο n, επιστρέφει ένα tuple που έχει τον αριθμό των ζυγών και των ατόμων ακέραιων παλινδρόμων που εμπίπτουν στην περιοχή ((1, n), συμπεριλαμβανομένων. Παράδειγμα1: Εισροή: 3 Εξόδου: (1, 2) Εξηγήσεις: Τα ακέραια παλινδρόμια είναι 1, 2, 3. ένα από αυτά είναι ζυγών και δύο από αυτά είναι ατόμων. Παράδειγμα2: Εισροή: 12 Εξόδου: (4, 6) Εξηγήσεις: Τα ακέραια παλινδρόμια είναι 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. τέσσερα από αυτά είναι ζυγών και 6 από αυτά είναι ατόμων. Σημείωση: 1. 1 <= n <= 10^3 2. το tuple έχει επιστρέψει τον αριθμό των ζυγών και των ατόμων ακέραιων παλινδρόμων αντίστοιχα. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,ell_Grek,python,"
def count_nums(arr):
    """"""Γράψε μια συνάρτηση count_nums η οποία παίρνει ένα πίνακα ακέραιων αριθμών και επιστρέφει τον αριθμό των στοιχείων που έχει άθροισμα ψηφίων > 0. Εάν ένας αριθμός είναι αρνητικός, τότε ο πρώτος υπογεγραμμένος ψηφός του θα είναι αρνητικός: π.χ. -123 έχει υπογεγραμμένα ψηφία -1, 2 και 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,ell_Grek,python,"
def move_one_ball(arr):
    """"""Η εργασία σας είναι να καθορίσετε αν είναι δυνατό να επιτευχθεί μια σειρά που δεν μειώνεται με την εκτέλεση της ακόλουθης λειτουργίας στο δεδομένο σύστημα: Επιτρέπεται να εκτελέσετε μια λειτουργία μετατόπισης δεξιάς οποιοδήποτε αριθμό φορές. Μια λειτουργία μετατόπισης δεξιάς σημαίνει μετατόπιση όλων των στοιχείων του συστήματος από μια θέση προς τη σωστή κατεύθυνση. Το τελευταίο στοιχείο του συστήματος θα μετακινηθεί στην αρχική θέση του συστήματος, δηλαδή 0ο δείκτη. Εάν είναι δυνατό να επιτευχθεί η ταξινομημένη σειρά με την εκτέλεση της παραπάνω λειτουργίας, τότε η επιστροφή είναι Αληθής, αλλιώς η επιστροφή είναι Λευκή. Εάν το δεδομένο σύστημα είναι άδειο, τότε η επιστροφή είναι Αληθής. Σημείωση: Η δεδομένη λίστα εγγυάται ότι θα έχει μοναδικά στοιχεία. Για παράδειγμα: move_one_{} ball[3, 4, 5, 2] Αληθής εξήγηση: Με το performin 2 δεξιάς, οι μη μειούμενες λειτουργίες μπορούν να επιτευχθούν για το σύστημα.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,ell_Grek,python,"
def exchange(lst1, lst2):
    """"""Σε αυτό το πρόβλημα, θα εφαρμόσετε μια συνάρτηση που παίρνει δύο λίστες αριθμών και καθορίζει αν είναι δυνατό να γίνει μια ανταλλαγή στοιχείων μεταξύ τους για να γίνει η λίστα lst1 μια λίστα μόνο ζυγικών αριθμών. Δεν υπάρχει όριο στον αριθμό των ανταλλαγμένων στοιχείων μεταξύ lst1 και lst2. Εάν είναι δυνατό να ανταλλαχθούν στοιχεία μεταξύ της lst1 και lst2 για να γίνουν όλα τα στοιχεία της lst1 ζυγικά, επιστρέψτε ""ΝΑΙ"". Διαφορετικά, επιστρέψτε ""ΟΧΙ"". Για παράδειγμα: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""ΝΑΙ"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""ΟΧΙ"" Υποτίθεται ότι οι καταχωρήσεις εισόδου δεν θα είναι κενές. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,ell_Grek,python,"
def histogram(test):
    """"""Δίνοντας μια σειρά που αντιπροσωπεύει ένα διάστημα χωρισμένα μικρά γράμματα, επιστρέφει ένα λεξικό του γράμματος με την περισσότερη επανάληψη και που περιέχει τον αντίστοιχο αριθμό. Αν πολλά γράμματα έχουν την ίδια εμφάνιση, επιστρέφουν όλα τους.""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,ell_Grek,python,"
def reverse_delete(s,c):
    """"""Δίνεται σε μας δύο συμβολοσειρές s και c, πρέπει να διαγράψουμε όλους τους χαρακτήρες στο s που είναι ίσοι με οποιονδήποτε χαρακτήρα στο c και να ελέγξουμε αν το αποτέλεσμα είναι παλινδρόμιο. Μια συμβολοσειρά ονομάζεται παλινδρόμιο αν διαβάζεται το ίδιο προς τα πίσω και προς τα εμπρός. Θα πρέπει να επιστρέψετε ένα tuple που περιέχει το αποτέλεσμα και το True/False για τον έλεγχο.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,ell_Grek,python,"
def odd_count(lst):
    """"""Κάθε στοιχείο i της εξόδου θα πρέπει να είναι ""ο αριθμός των περιττών στοιχείων στην αλυσίδα i της εισόδου"". όπου όλα τα i θα πρέπει να αντικαθίστανται από τον αριθμό των περιττών ψηφίων στην i' αλυσίδα της εισόδου. >>> odd_count['1234567']) [""ο αριθμός των περιττών στοιχείων 4n το str4ng 4 της 4nput.""] >>> odd_count['3',""111111""]) [""ο αριθμός των περιττών στοιχείων 1n το str1ng 1 της 1nput."", ""ο αριθμός των περιττών στοιχείων 8n το str8ng 8 της 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,ell_Grek,python,"
def minSubArraySum(nums):
    """"""Δίνοντας ένα πίνακα ακεραίων n, βρείτε το ελάχιστο άθροισμα οποιουδήποτε μη κενού υπο-στοιχειώματος των n. Παράδειγμα minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,ell_Grek,python,"
def max_fill(grid, capacity):
    import math
    """"""Κάθε γραμμή αντιπροσωπεύει ένα μοναδικό πηγάδι και κάθε 1 σε μια γραμμή αντιπροσωπεύει μια μοναδική μονάδα νερού. Κάθε πηγάδι έχει έναν αντίστοιχο κουβά που μπορεί να χρησιμοποιηθεί για να εξαγάγει νερό από αυτό και όλοι οι κουβάδες έχουν την ίδια χωρητικότητα. Το καθήκον σας είναι να χρησιμοποιήσετε τους κουβάδες για να αδειάσετε τους πηγάδες. Εκτός ο αριθμός των φορές που πρέπει να κατεβάσετε τους κουβάδες. Παράδειγμα 1: Εισροχή: grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Εκτός: 62: Εισροχή: grid: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 Εκτός: 53: Εισροχή: [[0,0,0], [0,0,0]] bucket_capacity: 5 Εκτός
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,ell_Grek,python,"
def sort_array(arr):
    """"""Σε αυτό το Kata, πρέπει να ταξινομήσετε μια σειρά από μη αρνητικούς ακέραιους αριθμούς σύμφωνα με τον αριθμό των ατόμων στη δυαδική τους αναπαράσταση σε ανοδική σειρά. Για παρόμοιο αριθμό ατόμων, ταξινομήστε με βάση την δεκαδική τιμή. Πρέπει να εφαρμοστεί ως εξής: >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,ell_Grek,python,"
def select_words(s, n):
    """"""Σημείωση: Μπορείτε να υποθέσετε ότι η εισερχόμενη συμβολοσειρά περιέχει μόνο γράμματα και κενά. Παραδείγματα: select_words (η Μαρία είχε ένα μικρό αρνί), 4) ==> [""μικρό""] select_words (η Μαρία είχε ένα μικρό αρνί), 3) ==> [""Μαρία"", ""αρνί""] select_words (απλό λευκό χώρο), 2) ==> [] select_words (γεια σου, κόσμο), 4) ==> [""κόσμος""] select_words (ο θείος Σαμ), 3) ==> [""ο θείος""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,ell_Grek,python,"
def get_closest_vowel(word):
    """"""Σας δίνεται μια λέξη. Η αποστολή σας είναι να βρείτε το πλησιέστερο φωνητικό που βρίσκεται μεταξύ δύο συλλαβών από τη δεξιά πλευρά της λέξης (επισήμως). Οι φωνητικοί στην αρχή και το τέλος δεν μετράνε. Επιστρέψτε κενή σειρά αν δεν βρείτε κανένα φωνητικό που πληροί την ανωτέρω προϋπόθεση. Μπορείτε να υποθέσετε ότι η δεδομένη σειρά περιέχει μόνο αγγλικά γράμματα.""""""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,ell_Grek,python,"
def match_parens(lst):
    '''Σας δίνεται μια λίστα με δύο συμβολοσειρές, και οι δύο συμβολοσειρές αποτελούνται μόνο από ανοιχτές παρενθέσεις '(' ή κλειστές παρενθέσεις ') '. Η δουλειά σας είναι να ελέγξετε αν είναι δυνατό να συσσωρεύσετε τις δύο συμβολοσειρές με κάποια σειρά, ώστε το προκύπτον συμβολοσειρά να είναι καλό. Μια συμβολοσειρά S θεωρείται καλή μόνο και μόνο αν όλες οι παρενθέσεις στο S είναι ισορροπημένες. Για παράδειγμα: η συμβολοσειρά '((()) ' είναι καλή, ενώ η συμβολοσειρά '()) ' δεν είναι. Επιστρέψτε 'Ναι' αν υπάρχει τρόπος να κάνετε μια καλή συμβολοσειρά, και επιστρέψτε 'Όχι' διαφορετικά. Παραδείγματα: match_parens[('() ', ') ']) == 'Ναι' match_parens[(') ', ') ']) == 'Όχι' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,ell_Grek,python,"
def maximum(arr, k):
    """"""Δίνοντας ένα πίνακα arr ακέραιων αριθμών και ένα θετικό ακέραιο αριθμό k, επιστρέφει έναν ταξινομημένο κατάλογο μήκους k με τους μέγιστους αριθμούς k στο arr. Παράδειγμα1: Εισόδου: arr = [-3, -4, 5], k = 3 Εξόδου: [-4, -3, 5] Παράδειγμα2: Εισόδου: arr = [4, -4, 4], k = 2 Εξόδου: [4, 4] Παράδειγμα3: Εισόδου: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Εξόδου: [2] Σημείωση: 1. Το μήκος του πίνακα θα είναι στην περιοχή [1, 1000]. 2. Τα στοιχεία του πίνακα θα είναι στην περιοχή [-1000, 1000]. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,ell_Grek,python,"
def solution(lst):
    """"""Με δεδομένη μια μη κενή λίστα ακέραιων αριθμών, επιστρέφει το άθροισμα όλων των αμόριων στοιχείων που βρίσκονται σε ζυγικές θέσεις.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,ell_Grek,python,"
def add_elements(arr, k):
    """"""Με δεδομένο έναν μη κενό πίνακα ακέραιων αριθμών arr και έναν ακέραιο αριθμό k, επιστρέφει το άθροισμα των στοιχείων με το πολύ δύο ψηφία από τα πρώτα k στοιχεία του arr. Παράδειγμα: Εισόδου: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Αποδέσμευση: 24 # άθροισμα 21 + 3 Περιορισμοί: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,ell_Grek,python,"
def get_odd_collatz(n):
    """"""Η υπόθεση του Collatz είναι μια υπόθεση στα μαθηματικά που αφορά μια ακολουθία που ορίζεται ως εξής: ξεκινήστε με οποιοδήποτε θετικό ακέραιο n. Στη συνέχεια, κάθε όρος λαμβάνεται από τον προηγούμενο όρο ως εξής: αν ο προηγούμενος όρος είναι ζυγός, ο επόμενος όρος είναι το μισό του προηγούμενου όρου. Αν ο προηγούμενος όρος είναι αμόρφωτος, ο επόμενος όρος είναι 3 φορές ο προηγούμενος όρος συν 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,ell_Grek,python,"
def valid_date(date):
    """"""Πρέπει να γράψετε μια συνάρτηση που επικυρώνει μια δεδομένη σειρά ημερομηνιών και επιστρέφει Αληθινό αν η ημερομηνία είναι έγκυρη διαφορετικά Αληθινό. Η ημερομηνία είναι έγκυρη αν πληρούνται όλοι οι ακόλουθοι κανόνες: 1. Η σειρά ημερομηνιών δεν είναι κενή. 2. Ο αριθμός των ημερών δεν είναι μικρότερος από 1 ή μεγαλύτερος από 31 ημέρες για τους μήνες 1,3,5,7,8,10,12. Και ο αριθμός των ημερών δεν είναι μικρότερος από 1 ή μεγαλύτερος από 30 ημέρες για τους μήνες 4,6,9,11. Και ο αριθμός των ημερών δεν είναι μικρότερος από 1 ή μεγαλύτερος από 29 για τον μήνα 2. 3. Οι μήνες δεν πρέπει να είναι μικρότεροι από 1 ή μεγαλύτεροι από 12. 4. Η ημερομηνία πρέπει να είναι στη μορφή: mm-dd-yyyy για παράδειγμα: valid_date (('03-11-2000') => Αληθινό_date (('15-01-2012') => Αληθινό_date (('04-040') => Αληθινό_date (('06-04-2020') => Αληθινό_date (('06/04/2020') => Αληθινό""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,ell_Grek,python,"
def split_words(txt):
    '''Με δεδομένη μια σειρά λέξεων, επιστρέφει μια λίστα λέξεων χωρισμένες σε κενά, αν δεν υπάρχουν κενά στο κείμενο θα πρέπει να χωριστεί σε κόμματα ',' αν δεν υπάρχουν κόμματα θα πρέπει να επιστρέψει τον αριθμό των μικρών γραμμάτων με αμόρφωτη σειρά στο αλφάβητο, ord (('a') = 0, ord (('b') = 1, ... ord (('z') = 25 Παραδείγματα split_words ((""Hello world!"") â -> [""Hello"", ""world!""] split_words ((""Hello,world!"") â -> [""Hello"", ""world!"" split_words"")'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,ell_Grek,python,"
def is_sorted(lst):
    '''Δίνοντας μια λίστα αριθμών, επιστρέφει αν είναι ταξινομημένα ή όχι σε ανοδική σειρά. Αν η λίστα έχει περισσότερους από 1 αντιγράφους του ίδιου αριθμού, επιστρέφει False. Υποθέστε ότι δεν υπάρχουν αρνητικοί αριθμοί και μόνο ακέραιοι. Παραδείγματα is_sorted ((([5]) â -> True is_sorted (([1, 2, 3, 4, 5]) â -> True is_sorted (([1, 2, 3, 4, 5, 6]) â -> False is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> True is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> False is_sorted (([1, 2, 2, 3, 3, 4]) â -> True is_sorted (([1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,ell_Grek,python,"
def intersection(interval1, interval2):
    """"""Για παράδειγμα, η διασταύρωση των διαστημάτων (1, 3), (2, 4) είναι (2, 3) η οποία έχει μήκος 1, που δεν είναι πρώτος αριθμός. Εάν το μήκος της διασταύρωσης είναι πρώτος αριθμός, επιστρέφει ""ΝΑΙ"", διαφορετικά επιστρέφει ""ΟΧΙ"". Αν τα δύο διαστήματα δεν διασταυρώνονται, επιστρέφει ""ΟΧΙ"". [input/output] δείγματα: διασταύρωση (((1, 2), (2, 3) ==> ""διασταύρωση
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,ell_Grek,python,"
def prod_signs(arr):
    """"""Σας δίνεται μια σειρά από ακέραιους αριθμούς και πρέπει να επιστρέψετε το άθροισμα των μεγεθών των ακέραιων αριθμών πολλαπλασιασμένο με το γινόμενο όλων των σημάτων κάθε αριθμού στη σειρά, που αντιπροσωπεύεται από 1, -1 ή 0. Σημείωση: επιστρέφει None για κενή σειρά.""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,ell_Grek,python,"
def minPath(grid, k):
    """"""Μπορείτε να ξεκινήσετε από οποιοδήποτε κελί και σε κάθε βήμα μπορείτε να μετακινηθείτε σε οποιοδήποτε από τα γειτονικά κελιά, με άλλα λόγια, μπορείτε να πάτε σε κελιά που μοιράζονται μια άκρη με το τρέχον κελί σας. Παρακαλούμε σημειώστε ότι μια διαδρομή μήκους k σημαίνει επίσκεψη ακριβώς k κελίων (όχι απαραίτητα διακριτά). Δεν μπορείτε να βγείτε από το πλέγμα. Μια διαδρομή A (μήκους k) θεωρείται μικρότερη από μια διαδρομή B (μήκους k) εάν μετά την παραγωγή των ταξινομημένων λίστας των τιμών στα κελιά που περνούν από το A και το B (ας τις ονομάσουμε l_stA και l_stB), η λεξικογραφική διαδρομή είναι μικρότερη από την l_stA, με άλλα λόγια, υπάρχει ένας ακεραμικός δείκτης με το τρέχον κελί σας. [A=1, j_stA=4, j_stB=5, j_stA=8, j_stB=1, j_stA=1, j_i=j=1, j_j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=j=""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,ell_Grek,python,"
def tri(n):
    """"""Όλοι γνωρίζουν τη σειρά Φιμπονατσι, μελετήθηκε βαθιά από τους μαθηματικούς τους τελευταίους δύο αιώνες. Ωστόσο, αυτό που οι άνθρωποι δεν γνωρίζουν είναι η σειρά Τριμπονατσι. Η σειρά Τριμπονατσι ορίζεται από την επανάληψη: tri(1) = 3 tri(n) = 1 + n / 2, αν n είναι ζυγική. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), αν n είναι αρίθμητη. Για παράδειγμα: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Σας δίνεται ένας μη αρνητικός ακέραιος αριθμός n, πρέπει να επιστρέψετε έναν κατάλογο των πρώτων n + 1 αριθμών της σειράς Τριμπονατσι. Παραδείγματα: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,ell_Grek,python,"
def digits(n):
    """"""Δίνοντας ένα θετικό ακέραιο αριθμό n, επιστρέφει το γινόμενο των περιττών ψηφίων.""""""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,ell_Grek,python,"
def is_nested(string):
    '''Δημιουργήστε μια συνάρτηση που παίρνει μια σειρά ως εισροή η οποία περιέχει μόνο τετράγωνες αγκύλες. Η συνάρτηση θα πρέπει να επιστρέψει Αληθινή αν και μόνο αν υπάρχει μια έγκυρη υποδοχή αγκυλών όπου τουλάχιστον μία αγκύλα στην υποδοχή είναι ενσωματωμένη. είναι_ενσωματωμένη (ε) '[[]]') â -> Αληθινή είναι_ενσωματωμένη (ε) '[[]]]]]]]]][[[[[[]') â -> Αληθινή είναι_ενσωματωμένη (ε) '[][]') â -> Αληθινή είναι_ενσωματωμένη (ε) '[]') â -> Αληθινή είναι_ενσωματωμένη (ε) '[[]]]]') â -> Αληθινή'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,ell_Grek,python,"

def sum_squares(lst):
    """"""Σας δίνεται μια λίστα αριθμών. Πρέπει να επιστρέψετε το άθροισμα των τετραγωνισμένων αριθμών στη λίστα, στρογγυλοποιώντας κάθε στοιχείο στη λίστα στο ανώτερο int ((Ceiling) πρώτα. Παραδείγματα: Για lst = [1,2,3] η έξοδος θα πρέπει να είναι 14 Για lst = [1,4,9] η έξοδος θα πρέπει να είναι 98 Για lst = [1,3,5,7] η έξοδος θα πρέπει να είναι 84 Για lst = [1.4,4.2,0] η έξοδος θα πρέπει να είναι 29 Για lst = [-2.4,1,1] η έξοδος θα πρέπει να είναι 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,ell_Grek,python,"
def check_if_last_char_is_a_letter(txt):
    '''Δημιουργήστε μια συνάρτηση που επιστρέφει Αληθινό αν ο τελευταίος χαρακτήρας μιας δεδομένης αλφαβητικής αλυσίδας είναι αλφαβητικός χαρακτήρας και δεν αποτελεί μέρος μιας λέξης, και Αληθινό σε διαφορετική περίπτωση. Σημείωση: ""λόγος"" είναι μια ομάδα χαρακτήρων χωρισμένων με κενό. Παραδείγματα: check_if_last_char_is_a_letter"" (επιλέξτε ""επιλέξτε"" αν είναι αλφαβητικό ή όχι) -> Αληθινό check_if_last_char_is_a_letter"" (επιλέξτε ""επιλέξτε"" αν είναι αλφαβητικό ή όχι) -> Αληθινό check_if_last_char_is_a_letter"" (επιλέξτε ""επιλέξτε"" αν είναι αλφαβητικό ή όχι)'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,ell_Grek,python,"
def can_arrange(arr):
    """"""Δημιουργήστε μια συνάρτηση που επιστρέφει τον μεγαλύτερο δείκτη ενός στοιχείου που δεν είναι μεγαλύτερο ή ίσο με το στοιχείο που το προηγείται αμέσως. Αν δεν υπάρχει τέτοιο στοιχείο, επιστρέφει -1.""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,ell_Grek,python,"
def largest_smallest_integers(lst):
    '''Δημιουργήστε μια συνάρτηση που επιστρέφει ένα tuple (a, b), όπου 'a' είναι το μεγαλύτερο από τα αρνητικά ακέραια, και 'b' είναι το μικρότερο από τα θετικά ακέραια σε μια λίστα. Αν δεν υπάρχουν αρνητικά ή θετικά ακέραια, επιστρέφει ως None. Παραδείγματα: μεγαλύτερο_μικρότερο_ολόκληρο[2, 4, 1, 3, 5, 7]) == (Κανένας, 1) μεγαλύτερο_μικρότερο_ολόκληρο (([]) == (Κανένας, Κανένας) μεγαλύτερο_μικρότερο_ολόκληρο (([0]) == (Κανένας, Κανένας) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,ell_Grek,python,"
def compare_one(a, b):
    """"""Δημιουργήστε μια συνάρτηση που παίρνει ακέραιους αριθμούς, πλωτές μονάδες ή σειρές που αντιπροσωπεύουν πραγματικούς αριθμούς και επιστρέφει τη μεγαλύτερη μεταβλητή στον δεδομένο τύπο μεταβλητής. Επιστρέφει None αν οι τιμές είναι ίσες. Σημείωση: Εάν ένας πραγματικός αριθμός αντιπροσωπεύεται ως μια σειρά, το πλωτό σημείο μπορεί να είναι . ή , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,ell_Grek,python,"
def is_equal_to_sum_even(n):
    """"""Αξιολογήστε αν ο δοθέντος αριθμός n μπορεί να γραφτεί ως το άθροισμα ακριβώς 4 θετικών ζυγικών αριθμών Παράδειγμα is_equal_to_sum_even (αθροιστικό) 4) == Λάθος is_equal_to_sum_even (αθροιστικό) 6) == Λάθος is_equal_to_sum_even (αθροιστικό) 8) == Αλήθεια """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,ell_Grek,python,"
def special_factorial(n):
    """"""Το βραζιλιάνικο παραγοντικό ορίζεται ως: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! όπου n > 0 Για παράδειγμα: >>> special_factorial(4) 288 Η συνάρτηση θα λάβει έναν ακέραιο αριθμό ως είσοδο και θα πρέπει να επιστρέψει το ειδικό παραγοντικό αυτού του ακέραιου αριθμού. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,ell_Grek,python,"
def fix_spaces(text):
    """"""_Παράδειγμα-3να κείμενο στη σειρά κειμένων, αντικαταστήστε όλα τα κενά με υπογράμματα, και αν μια σειρά έχει περισσότερα από 2 διαδοχικά κενά, τότε αντικαταστήστε όλα τα διαδοχικά κενά με - fix_spaces ((""παράδειγμα"") == ""παράδειγμα"" fix_spaces ((""παράδειγμα1"") == ""παράδειγμα1"" fix_spaces ((""παράδειγμα2"") == ""_παράδειγμα_2"" fix_spaces ((""παράδειγμα 3"") == ""_παράδειγμα-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,ell_Grek,python,"
def file_name_check(file_name):
    """"""Δημιουργήστε μια συνάρτηση που παίρνει μια σειρά που αντιπροσωπεύει το όνομα ενός αρχείου, και επιστρέφει ""Ναι"" αν το όνομα του αρχείου είναι έγκυρο, και επιστρέφει ""Όχι"" διαφορετικά. Ένα όνομα αρχείου θεωρείται έγκυρο αν και μόνο αν πληρούνται όλες οι ακόλουθες προϋποθέσεις: - Δεν πρέπει να υπάρχουν περισσότερα από τρία ψηφία ('0'-'9') στο όνομα του αρχείου. - Το όνομα του αρχείου περιέχει ακριβώς ένα σημείο '.' - Η υποσύνοδος πριν από το σημείο δεν πρέπει να είναι κενή, και αρχίζει με ένα γράμμα από το λατινικό αλφάβητο ('a'-'z' και 'A'Z'). - Η υποσύνοδος μετά από το σημείο πρέπει να είναι ένα από αυτά: ['txt', 'exe', 'lld'] Παραδείγματα: file_name_check""(παράδειγμα.txt"") # => 'Ναι' file_name_check""{example.txt1} => 'Όχι' (το όνομα πρέπει να αρχίζει με ένα λατινικό αλφάβητο) # => 'Όχι' (το όνομα πρέπει να αρχίζει με ένα λατινικό αλφάβητο)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,ell_Grek,python,"


def sum_squares(lst):
    """""""" Αυτή η συνάρτηση θα λάβει μια λίστα από ακέραιους αριθμούς. Για όλες τις καταχωρήσεις στη λίστα, η συνάρτηση θα τετραγωνίσει την ακέραιη καταχώρηση αν ο δείκτης της είναι πολλαπλάσιος του 3 και θα τοποθετήσει στο τρίγωνο την ακέραιη καταχώρηση αν ο δείκτης της είναι πολλαπλάσιος του 4 και όχι πολλαπλάσιος του 3. Η συνάρτηση δεν θα αλλάξει τις καταχωρήσεις στη λίστα των οποίων οι δείκτες δεν είναι πολλαπλάσιος του 3 ή 4. Η συνάρτηση θα επιστρέψει το άθροισμα όλων των καταχωρήσεων. Παραδείγματα: Για lst = [1,2,3] η έξοδος θα πρέπει να είναι 6 Για lst = [] η έξοδος θα πρέπει να είναι 0 Για lst = [-1,-5,2,-1,-5] η έξοδος θα πρέπει να είναι -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,ell_Grek,python,"
def words_in_sentence(sentence):
    """"""Σας δίνεται μια σειρά που αντιπροσωπεύει μια πρόταση, η πρόταση περιέχει μερικές λέξεις χωρισμένες με ένα κενό, και πρέπει να επιστρέψετε μια σειρά που περιέχει τις λέξεις από την αρχική πρόταση, των οποίων τα μήκη είναι πρώτοι αριθμοί, η σειρά των λέξεων στη νέα σειρά θα πρέπει να είναι η ίδια με την αρχική. Παράδειγμα1: Εισροχή: πρόταση = ""Αυτή είναι μια δοκιμή"" Έξοδος: ""είναι"" Παράδειγμα2: Εισροχή: πρόταση = ""αφήστε να πάμε για κολύμπι"" Έξοδος: ""πάμε για"" Περιορισμοί: * 1 <= len(sentence) <= 100 * Η πρόταση περιέχει μόνο γράμματα """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,ell_Grek,python,"
def simplify(x, n):
    """"""Το έργο σας είναι να εφαρμόσετε μια συνάρτηση που θα απλοποιήσει την έκφραση x * n. Η συνάρτηση επιστρέφει Αληθινό αν x * n αξιολογείται σε έναν ακέραιο αριθμό και Αληθινό διαφορετικά. Και τα δύο x και n, είναι συμβολισμός γραμμής ενός κλάσματος, και έχουν την ακόλουθη μορφή, < αριθμητής>/< παρονομαστής> όπου και ο αριθμητής και ο παρονομαστής είναι θετικοί ακέραιοι αριθμοί. Μπορείτε να υποθέσετε ότι x και n είναι έγκυρα κλάσματα και δεν έχουν μηδέν ως παρονομαστή. απλοποιήστε.""""""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,ell_Grek,python,"
def order_by_points(nums):
    """"""Γράψτε μια συνάρτηση που ταξινομεί την παραχωρημένη λίστα των ακέραιων αριθμών σε ανοδική σειρά σύμφωνα με το άθροισμα των ψηφίων τους. Σημείωση: αν υπάρχουν πολλά στοιχεία με παρόμοιο άθροισμα των ψηφίων τους, ταξινομήστε τα με βάση τον δείκτη τους στην αρχική λίστα. Για παράδειγμα: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,ell_Grek,python,"
def specialFilter(nums):
    """"""Γράψτε μια συνάρτηση που παίρνει ένα πίνακα αριθμών ως εισροή και επιστρέφει τον αριθμό των στοιχείων στο πίνακα που είναι μεγαλύτερο από 10 και τα δύο πρώτα και τελευταία ψηφία ενός αριθμού είναι αμόρφωτα (1, 3, 5, 7, 9). Για παράδειγμα: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,ell_Grek,python,"
def get_max_triples(n):
    """"""Σας δίνεται ένας θετικός ακέραιος αριθμός n. Πρέπει να δημιουργήσετε έναν πίνακα ακέραιων αριθμών α μήκους n. Για κάθε i (1 ‰¤ i ‰¤ n), η τιμή του a[i] = i * i - i + 1. Επιστρέφει τον αριθμό των τριπλών (a[i], a[j], a[k]) του α όπου i < j < k, και a[i] + a[j] + a[k] είναι πολλαπλάσιο του 3. Παράδειγμα: Εισροχή: n = 5 Έξοδος: 1 Εξηγή: a = [1, 3, 7, 13, 21] Το μόνο έγκυρο τριπλό είναι (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,ell_Grek,python,"
def bf(planet1, planet2):
    '''Υπάρχουν οκτώ πλανήτες στο ηλιακό μας σύστημα: ο πλησιέστερος στον Ήλιο είναι ο Ερμής, ο επόμενος είναι η Αφροδίτης, στη συνέχεια η Γη, ο Άρης, ο Δίας, ο Κρόνος, ο Ουρανός, ο Ποσειδώνας. Γράψε μια συνάρτηση που παίρνει δύο ονόματα πλανητών ως χορδές πλανήτης1 και πλανήτης2. Η συνάρτηση θα πρέπει να επιστρέψει μια συστοιχία που περιέχει όλους τους πλανήτες των οποίων οι τροχιές βρίσκονται μεταξύ της τροχιάς του πλανήτη1 και της τροχιάς του πλανήτη2, ταξινομημένες από την εγγύτητα προς τον ήλιο. Η συνάρτηση θα πρέπει να επιστρέψει μια κενή συστοιχία αν ο πλανήτης1 ή ο πλανήτης2 δεν είναι σωστοί ονόματα πλανητών. Παραδείγματα bf""(Δία"", ""Νέπτωνας"") ==> (""Σαμήνας""), bf""(Δία"", ""Ασφαίρης"") ==>'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,ell_Grek,python,"
def sorted_list_sum(lst):
    """"""Γράψτε μια συνάρτηση που δέχεται μια λίστα με συμβολοσειρές ως παράμετρο, διαγράφει τις συμβολοσειρές που έχουν ακανόνιστο μήκος από αυτήν, και επιστρέφει την προκύπτουσα λίστα με μια ταξινομημένη σειρά. Η λίστα είναι πάντα μια λίστα με συμβολοσειρές και ποτέ μια σειρά αριθμών, και μπορεί να περιέχει διπλότυπα. Η σειρά της λίστας θα πρέπει να είναι ανοδική κατά μήκος κάθε λέξης, και θα πρέπει να επιστρέψετε τη λίστα ταξινομημένη με αυτόν τον κανόνα. Αν δύο λέξεις έχουν το ίδιο μήκος, ταξινομήστε τη λίστα αλφαβητικά. Η συνάρτηση θα πρέπει να επιστρέψει μια λίστα με συμβολοσειρές σε ταξινομημένη σειρά. Μπορείτε να υποθέσετε ότι όλες οι λέξεις θα έχουν το ίδιο μήκος. Για παράδειγμα: assert list_sort[""aa"", ""a"", ""aaa""])""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,ell_Grek,python,"
def x_or_y(n, x, y):
    """"""Ένα απλό πρόγραμμα που θα πρέπει να επιστρέφει την τιμή του x αν n είναι ένας πρώτος αριθμός και θα πρέπει να επιστρέφει την τιμή του y διαφορετικά.""""""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,ell_Grek,python,"
def double_the_difference(lst):
    '''Δίνοντας μια λίστα αριθμών, επιστρέφει το άθροισμα των τετραγώνων των αριθμών της λίστας που είναι αμόριοι. Αγνοήστε αριθμούς που είναι αρνητικοί ή όχι ακέραιοι. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Εάν η λίστα εισόδου είναι κενή, επιστρέφει 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,ell_Grek,python,"
def compare(game,guess):
    """"""Νομίζω ότι όλοι μας θυμόμαστε αυτό το συναίσθημα όταν το αποτέλεσμα κάποιου πολυαναμενόμενου γεγονότος είναι επιτέλους γνωστό. Τα συναισθήματα και οι σκέψεις που έχετε εκείνη τη στιγμή αξίζουν σίγουρα να σημειωθούν και να συγκριθούν. Το καθήκον σας είναι να καθορίσετε αν ένα άτομο μάντεψε σωστά τα αποτελέσματα ενός αριθμού αγώνων. Σας δίνονται δύο συστοιχίες βαθμολογιών και μαντεψιών ίσης διάρκειας, όπου κάθε δείκτης δείχνει μια αντιστοιχία. Επιστρέψτε μια συστοιχία του ίδιου μήκους που υποδηλώνει πόσο μακριά ήταν κάθε μαντεψία. Αν μαντέψατε σωστά, η τιμή είναι 0, και αν όχι, η τιμή είναι η απόλυτη διαφορά μεταξύ της μαντεψίας και του σκορ.""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,ell_Grek,python,"
def Strongest_Extension(class_name, extensions):
    """"""Θα σας δοθεί το όνομα μιας τάξης (μια σειρά) και μια λίστα με επεκτάσεις. Οι επεκτάσεις θα χρησιμοποιηθούν για να φορτώσετε πρόσθετες τάξεις στην τάξη. Η ισχύς της επεκτάσεως είναι η εξής: Ας είναι η CAP ο αριθμός των κεφαλαίων γραμμάτων στο όνομα της επεκτάσεως, και ας είναι η SM ο αριθμός των μικρών γραμμάτων στο όνομα της επεκτάσεως, η ισχύς δίνεται από το κλάσμα CAP - SM. Θα πρέπει να βρείτε την ισχυρότερη επεκτάση και να επιστρέψετε μια σειρά με αυτή τη μορφή: ClassName.StrongestExtensionName. Εάν υπάρχουν δύο ή περισσότερες επεκτάσεις με την ίδια ισχύ, θα πρέπει να επιλέξετε την πρώτη που εμφανίζεται στη λίστα. Για παράδειγμα, αν σας δοθεί ""Slices"" ως τάξη και μια λίστα με τις επεκτάσεις: ['SEviviRNGSliCes', 'Cheese', 'StuFfed'] τότε θα πρέπει να επιστρέψετε 'Slices.SEviRNGSliCes' επειδή η επεκτάση είναι η ισχυρότερη (πτωση: 'AA_Beats'), για παράδειγμα: 'AA_class' είναι η ισχυρότερη', για την επεκτάση 'AA_Class' (ε ισχυρότερη_).""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,ell_Grek,python,"
def cycpattern_check(a , b):
    """"""Σας δίνονται 2 λέξεις. Πρέπει να επιστρέψετε True αν η δεύτερη λέξη ή οποιαδήποτε από τις περιστροφές της είναι υποσύνδεση στην πρώτη λέξη cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,ell_Grek,python,"
def even_odd_count(num):
    """"""Δίνοντας έναν ακέραιο αριθμό, επιστρέφει ένα tuple που έχει τον αριθμό των ζυγών και των αμόριων ψηφίων αντίστοιχα.""""""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,ell_Grek,python,"
def int_to_mini_roman(number):
    """"""Δίνοντας ένα θετικό ακέραιο, πάρτε το ισοδύναμο του ρωμαϊκού αριθμού ως μια σειρά, και επιστρέψτε το σε μικρογράφημα.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,ell_Grek,python,"
def right_angle_triangle(a, b, c):
    '''Δίνοντας τα μήκη των τριών πλευρών ενός τριγώνου. Επιστρέφει True αν οι τρεις πλευρές σχηματίζουν ένα ορθογώνιο τρίγωνο, False διαφορετικά. Ένα ορθογώνιο τρίγωνο είναι ένα τρίγωνο στο οποίο μια γωνία είναι ορθογώνιο ή 90 μοίρες. Παράδειγμα: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,ell_Grek,python,"
def find_max(words):
    """"""Γράψτε μια συνάρτηση που δέχεται μια λίστα με συμβολοσειρές. Η λίστα περιέχει διαφορετικές λέξεις. Επιστρέφει τη λέξη με τον μέγιστο αριθμό μοναδικών χαρακτήρων. Αν οι πολλαπλές συμβολοσειρές έχουν τον μέγιστο αριθμό μοναδικών χαρακτήρων, επιστρέφει αυτόν που έρχεται πρώτος στη λεξικογραφική σειρά.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,ell_Grek,python,"
def eat(number, need, remaining):
    """"""Είσαι ένα πεινασμένο κουνέλι, και έχεις ήδη φάει ένα ορισμένο αριθμό καρότων, αλλά τώρα πρέπει να φας περισσότερα καρότα για να ολοκληρώσεις τα γεύματα της ημέρας. θα πρέπει να επιστρέψεις μια σειρά από [συνολικός αριθμός των καρότων που έχουν καταναλωθεί μετά τα γεύματα, ο αριθμός των καρότων που απομένουν μετά τα γεύματα ] αν δεν υπάρχουν αρκετά εναπομείναντα καρότα, θα φας όλα τα εναπομείναντα καρότα, αλλά θα είσαι ακόμα πεινασμένος. Παράδειγμα: * τρώω ((5, 6, 10) -> [11, 4] * τρώω ((4, 8, 9) -> [12, 1] * τρώω ((1, 10, 10) -> [11, 0] * τρώω ((2, 11, 5) -> [7, 0] Κλίμακες: @number: ακέραιο αριθμό των καρότων που έχετε φάει. @need: ακέραιο αριθμό των καρότων που πρέπει να φάτε. @remaining: ακέραιο αριθμό των εναπομείναντων καρότων που υπάρχουν στο απόθεμα: *constrain: 0 = <= 0 * <= 1000 * <= 0 = <= 1000 * resting:>""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,ell_Grek,python,"
def do_algebra(operator, operand):
    """"""Οι βασικές αλγεβρικές πράξεις: Προσθήκη (+) Υποβολή (-)) Πολλαπλασιασμός (-)) Χωρισμός (-)) Χειρισμός (-)) Διάσπαση (-)) Εκθέτηση (**) Παράδειγμα: Λειτουργός['+', '*', '-'] πίνακας = [2, 3, 4, 5] αποτέλεσμα = 2 + 3 * 4 - 5 => αποτέλεσμα = 9 Σημείωση: Το μήκος της λίστας των χειριστών είναι ίσο με το μήκος της λίστας των χειριστών μείον ένα. Η λίστα των χειριστών είναι μια λίστα μη αρνητικών ακέραιων. Η λίστα των χειριστών έχει τουλάχιστον έναν χειριστές και η λίστα των χειριστών έχει τουλάχιστον δύο χειριστές. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,ell_Grek,python,"
def solve(s):
    """"""Σας δίνεται μια αλυσίδα s. αν s[i] είναι ένα γράμμα, αντιστρέψτε την κεντρική της από κάτω προς πάνω ή αντίστροφα, αλλιώς κρατήστε την όπως είναι. Αν η αλυσίδα δεν περιέχει γράμματα, αντιστρέψτε την αλυσίδα. Η συνάρτηση θα πρέπει να επιστρέψει την προκύπτουσα αλυσίδα. Παραδείγματα λύση ((""1234"") = ""4321"" λύση ((""ab"") = ""AB"" λύση ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,ell_Grek,python,"
def string_to_md5(text):
    """"""Εάν η string είναι κενή, επιστρέφει None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,ell_Grek,python,"
def generate_integers(a, b):
    """"""Με δεδομένους δύο θετικούς ακέραιους αριθμούς α και β, επιστρέφουμε τους ζυγούς αριθμούς μεταξύ α και β, με ανοδική σειρά.""""""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
