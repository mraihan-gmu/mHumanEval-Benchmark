task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,pan_Guru,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਦਿੱਤੇ ਗਏ ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਵਿੱਚ, ਕੋਈ ਦੋ ਨੰਬਰ ਦਿੱਤੇ ਗਏ ਥ੍ਰੈਸ਼ਹੋਲਡ ਤੋਂ ਇਕ ਦੂਜੇ ਦੇ ਨੇੜੇ ਹਨ. ਉਦਾਹਰਣਃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) ਗਲਤ >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) ਸਹੀ """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,pan_Guru,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""ਇਸ ਫੰਕਸ਼ਨ ਲਈ ਇਨਪੁਟ ਇੱਕ ਸਤਰ ਹੈ ਜਿਸ ਵਿੱਚ ਨੇਸਟਡ ਬਰੈਂਚਜ਼ ਦੇ ਕਈ ਸਮੂਹ ਹਨ. ਤੁਹਾਡਾ ਟੀਚਾ ਉਹਨਾਂ ਸਮੂਹ ਨੂੰ ਵੱਖਰੇ ਸਤਰਾਂ ਵਿੱਚ ਵੱਖ ਕਰਨਾ ਹੈ ਅਤੇ ਉਹਨਾਂ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨਾ ਹੈ. ਵੱਖਰੇ ਸਮੂਹ ਸੰਤੁਲਿਤ ਹਨ (ਹਰੇਕ ਖੁੱਲ੍ਹੇ ਬਰੈਕਟ ਸਹੀ ਤਰ੍ਹਾਂ ਬੰਦ ਹੈ) ਅਤੇ ਇਕ ਦੂਜੇ ਦੇ ਅੰਦਰ ਨਹੀਂ ਹਨ ਇਨਪੁਟ ਸਤਰ ਵਿੱਚ ਕਿਸੇ ਵੀ ਸਪੇਸ ਨੂੰ ਨਜ਼ਰਅੰਦਾਜ਼ ਕਰੋ. ਉਦਾਹਰਨਃ >>> separate_paren_groups'(( ) (() (( ) ) ) ) ) ) '['() ', '(()) ', '(() ')) ]""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,pan_Guru,python,"

def truncate_number(number: float) -> float:
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਫਲੋਟਿੰਗ ਪੁਆਇੰਟ ਨੰਬਰ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਨੂੰ ਪੂਰਨ ਅੰਕ ਦੇ ਹਿੱਸੇ (ਦਿੱਤੇ ਗਏ ਨੰਬਰ ਤੋਂ ਛੋਟਾ ਵੱਡਾ ਪੂਰਨ ਅੰਕ) ਅਤੇ ਦਸ਼ਮਲਵ (ਬਾਕੀ ਹਿੱਸਾ ਹਮੇਸ਼ਾ 1 ਤੋਂ ਛੋਟਾ ਹੁੰਦਾ ਹੈ) ਵਿੱਚ ਵੰਡਿਆ ਜਾ ਸਕਦਾ ਹੈ. ਨੰਬਰ ਦੇ ਦਸ਼ਮਲਵ ਹਿੱਸੇ ਨੂੰ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਨਃ >>> truncate_number(3.5) 0.5 """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,pan_Guru,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਬੈਂਕ ਖਾਤੇ ਤੇ ਜਮ੍ਹਾਂ ਅਤੇ ਕਢਵਾਉਣ ਦੇ ਕਾਰਜਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ ਜੋ ਜ਼ੀਰੋ ਸੰਤੁਲਨ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦੀ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਪਤਾ ਲਗਾਉਣਾ ਹੈ ਕਿ ਕਿਸੇ ਵੀ ਸਮੇਂ ਖਾਤੇ ਦਾ ਸੰਤੁਲਨ ਜ਼ੀਰੋ ਤੋਂ ਹੇਠਾਂ ਆ ਜਾਂਦਾ ਹੈ, ਅਤੇ ਉਸ ਸਮੇਂ ਫੰਕਸ਼ਨ ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਨਹੀਂ ਤਾਂ ਇਸ ਨੂੰ ਗਲਤ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਨਃ >>> below_zero([1, 2, 3]) ਗਲਤ >>> below_zero([1, 2, -4, 5]) ਸੱਚ """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,pan_Guru,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""ਇਨਪੁਟ ਨੰਬਰਾਂ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਲਈ, ਇਸ ਡੇਟਾ ਸੈੱਟ ਦੇ ਮੱਧ ਦੇ ਆਲੇ ਦੁਆਲੇ ਮੱਧਮ ਅਸਥਾਈ ਭਟਕਣ ਦੀ ਗਣਨਾ ਕਰੋ. ਮੱਧਮ ਅਸਥਾਈ ਭਟਕਣ ਹਰ ਤੱਤ ਅਤੇ ਇੱਕ ਕੇਂਦਰ ਬਿੰਦੂ (ਇਸ ਕੇਸ ਵਿੱਚ ਮੱਧਮ) ਦੇ ਵਿਚਕਾਰ ਔਸਤ ਅਸਥਾਈ ਅੰਤਰ ਹੈਃ MAD = ਔਸਤ । x - x_mean । ਉਦਾਹਰਨਃ >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,pan_Guru,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""ਇਨਪੁਟ ਸੂਚੀ ਦੇ ਹਰ ਦੋ ਲਗਾਤਾਰ ਤੱਤਾਂ ਦੇ ਵਿਚਕਾਰ ਇੱਕ ਨੰਬਰ 'ਡਿਲਿਮੀਟਰ' ਪਾਓ `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,pan_Guru,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""ਇਸ ਫੰਕਸ਼ਨ ਲਈ ਇਨਪੁਟ ਇੱਕ ਸਤਰ ਹੈ ਜੋ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਬਰਾਂਟੇਜ ਲਈ ਮਲਟੀਪਲ ਗਰੁੱਪਾਂ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ। ਹਰੇਕ ਸਮੂਹ ਲਈ, ਬਰਾਂਟੇਜ ਦੇ ਸਭ ਤੋਂ ਡੂੰਘੇ ਪੱਧਰ ਦੇ ਆਉਟਪੁੱਟ. ਉਦਾਹਰਨ ਲਈ (() (()) ਦੇ ਵੱਧ ਤੋਂ ਵੱਧ ਦੋ ਪੱਧਰ ਹਨ ਜਦੋਂ ਕਿ ((())) ਦੇ ਤਿੰਨ ਹਨ. >>> parse_nested_parens('((()) ((())) () ((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,pan_Guru,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""ਸਤਰਾਂ ਦੀ ਇੱਕ ਇਨਪੁਟ ਸੂਚੀ ਨੂੰ ਸਿਰਫ ਉਹਨਾਂ ਲਈ ਫਿਲਟਰ ਕਰੋ ਜਿਸ ਵਿੱਚ ਦਿੱਤੀ ਗਈ ਸਬਸਟ੍ਰਿੰਗ >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,pan_Guru,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""ਪੂਰਨ ਅੰਕ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਲਈ, ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਸਾਰੇ ਪੂਰਨ ਅੰਕ ਦੇ ਜੋੜ ਅਤੇ ਉਤਪਾਦ ਤੋਂ ਬਣਿਆ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰੋ. ਖਾਲੀ ਜੋੜ 0 ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ ਖਾਲੀ ਉਤਪਾਦ 1 ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,pan_Guru,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""ਪੂਰਨ ਅੰਕ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਤੋਂ, ਕ੍ਰਮ ਵਿੱਚ ਦਿੱਤੇ ਗਏ ਪਲ ਤੱਕ ਪਾਇਆ ਗਿਆ ਰੋਲਿੰਗ ਅਧਿਕਤਮ ਤੱਤ ਦੀ ਇੱਕ ਸੂਚੀ ਤਿਆਰ ਕਰੋ. >>> ਰੋਲਿੰਗ_ਮੈਕਸ (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,pan_Guru,python,"

def is_palindrome(string: str) -> bool:
    """"""ਸਭ ਤੋਂ ਛੋਟਾ ਪਾਲੀਂਡਰੋਮ ਲੱਭੋ ਜੋ ਸਪਲਾਈ ਕੀਤੀ ਸਤਰ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ. ਐਲਗੋਰਿਦਮ ਵਿਚਾਰ ਸਧਾਰਨ ਹੈਃ - ਸਪਲਾਈ ਕੀਤੀ ਸਤਰ ਦਾ ਸਭ ਤੋਂ ਲੰਬਾ ਪੋਸਟਫਿਕਸ ਲੱਭੋ ਜੋ ਇਕ ਪਾਲੀਂਡਰੋਮ ਹੈ. - ਸਤਰ ਦੇ ਅੰਤ ਵਿਚ ਇਕ ਸਤਰ ਪ੍ਰੀਫਿਕਸ ਦੇ ਉਲਟ ਜੋੜੋ ਜੋ ਪਾਲੀਂਡਰੋਮਿਕ ਪਿਛੇਤਰ ਤੋਂ ਪਹਿਲਾਂ ਆਉਂਦਾ ਹੈ. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') ' 'catac' >>> make_palindrome ((('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸਤਰ ਇੱਕ ਪਾਲੀਂਡਰੋਮ ਹੈ """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,pan_Guru,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""ਇੰਪੁੱਟ ਦੋ ਸਤਰਾਂ ਹਨ a ਅਤੇ b ਸਿਰਫ 1 ਅਤੇ 0 ਤੋਂ ਬਣੀਆਂ ਹਨ. ਇਹਨਾਂ ਇੰਪੁੱਟਾਂ ਤੇ ਬਾਈਨਰੀ XOR ਕਰੋ ਅਤੇ ਨਤੀਜਾ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਵੀ ਵਾਪਸ ਕਰੋ. >>> string_xor('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,pan_Guru,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਵਿੱਚੋਂ, ਸਭ ਤੋਂ ਲੰਬਾ ਵਾਪਸ ਕਰੋ. ਇੱਕੋ ਲੰਬਾਈ ਦੇ ਕਈ ਸਤਰਾਂ ਦੇ ਮਾਮਲੇ ਵਿੱਚ ਪਹਿਲਾ ਵਾਪਸ ਕਰੋ. ਇਨਪੁਟ ਸੂਚੀ ਖਾਲੀ ਹੋਣ ਦੀ ਸਥਿਤੀ ਵਿੱਚ ਕੋਈ ਨਹੀਂ ਵਾਪਿਸ ਕਰੋ. >>> ਲੰਬਾ ((([]) >>> ਲੰਬਾ ((['a', 'b', 'c']) 'a' >>> ਲੰਬਾ ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,pan_Guru,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""ਦੋ ਪੂਰਨ ਅੰਕ a ਅਤੇ b ਦੇ ਸਭ ਤੋਂ ਵੱਡੇ ਸਾਂਝੇ ਵਿਭਾਜਕ ਨੂੰ ਵਾਪਸ ਕਰੋ >>> ਸਭ ਤੋਂ ਵੱਡਾ_ਆਮ_ਭਾਜਕ ((3, 5) 1 >>> ਸਭ ਤੋਂ ਵੱਡਾ_ਆਮ_ਭਾਜਕ ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,pan_Guru,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""ਇਨਪੁਟ ਸਤਰ ਦੇ ਸਭ ਤੋਂ ਛੋਟੇ ਤੋਂ ਲੰਬੇ ਤੱਕ ਸਾਰੇ ਪ੍ਰੀਫਿਕਸ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,pan_Guru,python,"

def string_sequence(n: int) -> str:
    """"""ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ 0 ਤੋਂ ਲੈ ਕੇ n ਤੱਕ ਦੇ ਸਪੇਸ-ਸੀਮਿਤ ਨੰਬਰ ਸ਼ਾਮਲ ਹਨ. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,pan_Guru,python,"

def count_distinct_characters(string: str) -> int:
    """"""ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ, ਪਤਾ ਕਰੋ ਕਿ ਕਿੰਨੇ ਵੱਖਰੇ ਅੱਖਰ (ਕਿਸੇ ਵੀ ਕੇਸ ਦੇ) ਇਸ ਵਿੱਚ ਸ਼ਾਮਲ ਹਨ >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,pan_Guru,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""ਇਸ ਫੰਕਸ਼ਨ ਨੂੰ ਇੰਪੁੱਟ ਇੱਕ ਖਾਸ ASCII ਫਾਰਮੈਟ ਵਿੱਚ ਸੰਗੀਤ ਨੋਟਸ ਦੀ ਨੁਮਾਇੰਦਗੀ ਸਤਰ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਹੈ, ਕਈ ਬੀਟ ਕਰਨ ਲਈ ਅਨੁਸਾਰੀ ਪੂਰਨ ਸਤਰ ਸੂਚੀ ਪਾਰਸ ਕਰਨ ਲਈ ਕਰਦਾ ਹੈ. ਇੱਥੇ ਇੱਕ ਦਲੀਲ ਹੈਃ 'o' ਨੋਟ, ਪਿਛਲੇ ਬੀਟ ਚਾਰ 'o' - ਅੱਧੇ ਨੋਟ, ਪਿਛਲੇ ਦੋ ਬੀਟ 'o' - quater ਨੋਟ, ਪਿਛਲੇ ਇੱਕ ਬੀਟ >>> parse_music '. 'o' . o' . o' . o
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,pan_Guru,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""ਪਤਾ ਕਰੋ ਕਿ ਅਸਲ ਸਤਰ ਵਿੱਚ ਇੱਕ ਦਿੱਤੀ ਗਈ ਸਬਸਟ੍ਰਿੰਗ ਕਿੰਨੀ ਵਾਰ ਮਿਲ ਸਕਦੀ ਹੈ। ਓਵਰਲੈਪਿੰਗ ਕੇਸਾਂ ਦੀ ਗਿਣਤੀ ਕਰੋ। >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,pan_Guru,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""ਇਨਪੁਟ 'ਜ਼ੀਰੋ' ਤੋਂ 'ਨੌ' ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦੀ ਇੱਕ ਸਪੇਸ-ਸੀਮਿਤ ਸਤਰ ਹੈ। ਵੈਧ ਚੋਣਾਂ ਹਨ 'ਜ਼ੀਰੋ', 'ਇੱਕ', 'ਦੋ', 'ਤਿੰਨ', 'ਚਾਰ', 'ਪੰਜ', 'ਛੇ', 'ਸੱਤ', 'ਅੱਠ' ਅਤੇ 'ਨੌ'। ਸਤਰ ਨੂੰ ਛੋਟੇ ਤੋਂ ਵੱਡੇ ਤੱਕ ਕ੍ਰਮਬੱਧ ਨੰਬਰਾਂ ਨਾਲ ਵਾਪਸ ਕਰੋ >>> sort_numbers (('ਤਿੰਨ ਇਕ ਪੰਜ') 'ਇਕ ਤਿੰਨ ਪੰਜ' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,pan_Guru,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""ਨੰਬਰਾਂ ਦੀ ਇੱਕ ਸਪਲਾਈ ਕੀਤੀ ਸੂਚੀ (ਲੰਬਾਈ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਦੋ) ਵਿੱਚੋਂ ਦੋ ਦੀ ਚੋਣ ਕਰੋ ਅਤੇ ਵਾਪਸ ਕਰੋ ਜੋ ਇੱਕ ਦੂਜੇ ਦੇ ਸਭ ਤੋਂ ਨੇੜੇ ਹਨ ਅਤੇ ਉਹਨਾਂ ਨੂੰ ਕ੍ਰਮ ਵਿੱਚ ਵਾਪਸ ਕਰੋ (ਛੋਟੀ ਗਿਣਤੀ, ਵੱਡੀ ਗਿਣਤੀ). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,pan_Guru,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""ਸੰਖਿਆਵਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ (ਘੱਟੋ ਘੱਟ ਦੋ ਤੱਤਾਂ ਦੀ), ਉਸ ਸੂਚੀ ਨੂੰ ਇੱਕ ਲੀਨੀਅਰ ਪਰਿਵਰਤਨ ਲਾਗੂ ਕਰੋ, ਤਾਂ ਜੋ ਸਭ ਤੋਂ ਛੋਟੀ ਸੰਖਿਆ 0 ਬਣ ਜਾਵੇ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡੀ 1 ਬਣ ਜਾਵੇ >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,pan_Guru,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""ਫਿਲਟਰ ਦਿੱਤੇ ਗਏ ਸੂਚੀ ਵਿੱਚ ਕਿਸੇ ਵੀ ਪਾਇਥਨ ਮੁੱਲਾਂ ਨੂੰ ਸਿਰਫ ਪੂਰਨ ਅੰਕ ਲਈ ਦਿੱਤਾ ਗਿਆ ਹੈ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,pan_Guru,python,"

def strlen(string: str) -> int:
    """"""ਦਿੱਤੀ ਗਈ ਸਤਰ ਦੀ ਵਾਪਸੀ ਦੀ ਲੰਬਾਈ >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,pan_Guru,python,"

def largest_divisor(n: int) -> int:
    """"""ਇੱਕ ਦਿੱਤੇ ਗਏ ਨੰਬਰ n ਲਈ, ਸਭ ਤੋਂ ਵੱਡੀ ਸੰਖਿਆ ਲੱਭੋ ਜੋ n ਨੂੰ ਬਰਾਬਰ ਵੰਡਦੀ ਹੈ, n >>> ਸਭ ਤੋਂ ਵੱਡਾ_ਡਿਵਾਈਜ਼ਰ ਤੋਂ ਛੋਟਾ ਹੈ ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,pan_Guru,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""ਦਿੱਤੇ ਗਏ ਪੂਰਨ ਅੰਕ ਦੇ ਪ੍ਰਾਇਮ ਫੈਕਟਰਾਂ ਦੀ ਸੂਚੀ ਸਭ ਤੋਂ ਛੋਟੇ ਤੋਂ ਲੈ ਕੇ ਸਭ ਤੋਂ ਵੱਡੇ ਤੱਕ ਦੇ ਕ੍ਰਮ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। ਹਰੇਕ ਕਾਰਕ ਨੂੰ ਕਈ ਵਾਰ ਸੂਚੀਬੱਧ ਕੀਤਾ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ ਜੋ ਕਿ ਕਾਰਕਣ ਵਿੱਚ ਕਿੰਨੀ ਵਾਰ ਪ੍ਰਗਟ ਹੁੰਦਾ ਹੈ. ਇੰਪੁੱਟ ਨੰਬਰ ਸਾਰੇ ਕਾਰਕਾਂ ਦੇ ਉਤਪਾਦ ਦੇ ਬਰਾਬਰ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ >>> ਫੈਕਟਰੋਇਜ਼ੇਟ ((8) [2, 2, 2] >>> ਫੈਕਟਰੋਇਜ਼ੇਟ ((25) [5, 5] >>> ਫੈਕਟਰੋਇਜ਼ੇਟ ((70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,pan_Guru,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਵਿੱਚੋਂ, ਸਾਰੇ ਤੱਤ ਹਟਾਓ ਜੋ ਇੱਕ ਤੋਂ ਵੱਧ ਵਾਰ ਵਾਪਰਦੇ ਹਨ. ਇੰਪੁੱਟ ਵਿੱਚ ਦਿੱਤੇ ਅਨੁਸਾਰ ਤੱਤਾਂ ਦਾ ਕ੍ਰਮ ਉਹੀ ਰੱਖੋ. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,pan_Guru,python,"

def flip_case(string: str) -> str:
    """"""ਇੱਕ ਦਿੱਤੀ ਗਈ ਸਤਰ ਲਈ, ਛੋਟੇ ਅੱਖਰਾਂ ਨੂੰ ਵੱਡੇ ਅੱਖਰਾਂ ਵਿੱਚ ਅਤੇ ਵੱਡੇ ਅੱਖਰਾਂ ਨੂੰ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਬਦਲ ਦਿਓ. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,pan_Guru,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਨੂੰ ਇੱਕ ਸਤਰ ਵਿੱਚ ਜੋੜੋ >>> concatenate (([]) ' ' >>> concatenate ((['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,pan_Guru,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""ਸਤਰਾਂ ਦੀ ਇੱਕ ਇਨਪੁਟ ਸੂਚੀ ਨੂੰ ਸਿਰਫ ਉਹਨਾਂ ਲਈ ਫਿਲਟਰ ਕਰੋ ਜੋ ਇੱਕ ਦਿੱਤੇ ਗਏ ਪ੍ਰੀਫਿਕਸ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦੇ ਹਨ. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,pan_Guru,python,"

def get_positive(l: list):
    """"""ਸੂਚੀ ਵਿੱਚ ਸਿਰਫ ਸਕਾਰਾਤਮਕ ਨੰਬਰ ਵਾਪਸ ਕਰੋ. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,pan_Guru,python,"

def is_prime(n):
    """"""ਜੇਕਰ ਦਿੱਤਾ ਗਿਆ ਨੰਬਰ ਪ੍ਰਾਇਮ ਹੈ ਤਾਂ ਸਹੀ ਵਾਪਿਸ ਕਰੋ, ਅਤੇ ਹੋਰ ਗਲਤ ਹੈ। >>> is_prime(6) ਗਲਤ >>> is_prime(101) ਸੱਚਾ >>> is_prime(11) ਸੱਚਾ >>> is_prime(13441) ਸੱਚਾ >>> is_prime(61) ਸੱਚਾ >>> is_prime(4) ਗਲਤ >>> is_prime(1) ਗਲਤ """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,pan_Guru,python,"import math


def poly(xs: list, x: float):
    """"""xs ਇੱਕ ਬਹੁਪੱਖੀ ਦੇ ਗੁਣਾਂਕ ਹਨ. find_zero find x such that poly(x) = 0. find_zero ਸਿਰਫ ਸਿਰਫ ਜ਼ੀਰੋ ਪੁਆਇੰਟ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਭਾਵੇਂ ਕਿ ਬਹੁਤ ਸਾਰੇ ਹਨ. ਇਸ ਤੋਂ ਇਲਾਵਾ, find_zero ਸਿਰਫ ਸੂਚੀ xs ਲੈਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਗੁਣਾਂਕ ਦੀ ਗਿਣਤੀ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡਾ ਗੈਰ-ਜ਼ੀਰੋ ਗੁਣਾਂਕ ਹੁੰਦਾ ਹੈ ਕਿਉਂਕਿ ਇਹ ਇੱਕ ਹੱਲ ਦੀ ਗਰੰਟੀ ਦਿੰਦਾ ਹੈ. >>> ਗੋਲ ((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> ਗੋਲ ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""ਪੁਆਇੰਟ x ਤੇ ਗੁਣਾਂਕ xs ਦੇ ਨਾਲ ਬਹੁਪੱਖੀ ਦਾ ਮੁਲਾਂਕਣ ਕਰਦਾ ਹੈ. xs[0] + xs[1] * x + xs[1] * x ^ 2 + .... xs[n] * x ^ n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,pan_Guru,python,"

def sort_third(l: list):
    """"""ਇਹ ਫੰਕਸ਼ਨ ਇੱਕ ਸੂਚੀ l ਲੈਂਦਾ ਹੈ ਅਤੇ ਇੱਕ ਸੂਚੀ l' ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ l' ਸੂਚਕਾਂਕ ਵਿੱਚ l ਦੇ ਸਮਾਨ ਹੈ ਜੋ ਤਿੰਨ ਨਾਲ ਵੰਡਿਆ ਨਹੀਂ ਜਾ ਸਕਦਾ, ਜਦੋਂ ਕਿ ਸੂਚਕਾਂਕ ਦੇ ਮੁੱਲ ਜੋ ਤਿੰਨ ਨਾਲ ਵੰਡਿਆ ਜਾ ਸਕਦਾ ਹੈ, ਉਹ l ਦੇ ਅਨੁਸਾਰੀ ਸੂਚਕਾਂਕ ਦੇ ਮੁੱਲ ਦੇ ਬਰਾਬਰ ਹਨ, ਪਰ ਕ੍ਰਮਬੱਧ ਹਨ. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,pan_Guru,python,"

def unique(l: list):
    """"""ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਲੜੀਬੱਧ ਵਿਲੱਖਣ ਤੱਤ ਵਾਪਸ ਕਰੋ >>> ਵਿਲੱਖਣ (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,pan_Guru,python,"

def max_element(l: list):
    """"""ਸੂਚੀ ਵਿੱਚ ਅਧਿਕਤਮ ਤੱਤ ਵਾਪਸ ਕਰੋ. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,pan_Guru,python,"

def fizz_buzz(n: int):
    """"""ਅੰਕ 7 ਦੀ ਗਿਣਤੀ ਨੂੰ ਵਾਪਸ ਕਰੋ ਜੋ ਕਿ 11 ਜਾਂ 13 ਦੁਆਰਾ ਵੰਡਣ ਵਾਲੇ n ਤੋਂ ਘੱਟ ਪੂਰਨ ਅੰਕ ਵਿੱਚ ਪ੍ਰਗਟ ਹੁੰਦਾ ਹੈ. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,pan_Guru,python,"

def sort_even(l: list):
    """"""ਇਹ ਫੰਕਸ਼ਨ ਇੱਕ ਸੂਚੀ l ਲੈਂਦਾ ਹੈ ਅਤੇ ਇੱਕ ਸੂਚੀ l' ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ l' ਅਨਿਯਮਿਤ ਸੂਚਕਾਂਕ ਵਿੱਚ l ਦੇ ਸਮਾਨ ਹੈ, ਜਦੋਂ ਕਿ ਇਸ ਦੇ ਮੁੱਲ ਵੀ ਸੰਕੇਤ ਦੇ ਮੁੱਲਾਂ ਦੇ ਬਰਾਬਰ ਹਨ l ਦੇ ਵੀ ਸੰਕੇਤ ਦੇ ਮੁੱਲ, ਪਰ ਕ੍ਰਮਬੱਧ. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,pan_Guru,python,"

def encode_cyclic(s: str):
    """"""ਇੰਕੋਡ_ਸਾਈਕਲਿਕ ਫੰਕਸ਼ਨ ਨਾਲ ਇਨਪੁਟ ਸਤਰ ਵਜੋਂ ਏਨਕੋਡ ਕੀਤੀ ਗਈ ਹੈ. ਡੀਕੋਡ ਕੀਤੀ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ. """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""ਤਿੰਨ ਅੱਖਰਾਂ ਦੇ ਸਾਈਕਲਿੰਗ ਗਰੁੱਪਾਂ ਦੁਆਰਾ ਏਨਕੋਡ ਕੀਤੀ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ।""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,pan_Guru,python,"

def prime_fib(n: int):
    """"""prime_fib n-ਵੀਂ ਨੰਬਰ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ ਕਿ ਇੱਕ ਫਿਬੋਨੈਚੀ ਨੰਬਰ ਹੈ ਅਤੇ ਇਹ ਵੀ ਪ੍ਰਾਇਮਰੀ ਹੈ. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,pan_Guru,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਸੂਚੀ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ. ਇਹ ਸੱਚ ਹੈ, ਜੇ ਸੂਚੀ ਵਿੱਚ ਤਿੰਨ ਵੱਖਰੇ ਤੱਤ ਹਨ ਜੋ ਜ਼ੀਰੋ ਨੂੰ ਜੋੜਦੇ ਹਨ, ਅਤੇ ਝੂਠੇ ਹੋਰ. >>> triples_sum_to_zero([1, 3, 5, 0]) ਝੂਠੇ >>> triples_sum_to_zero[(1, 3, -2, 1]) ਸੱਚ >>> triples_sum_to_zero([1, 2, 3, 7]) ਝੂਠ >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) ਸੱਚ >>> triples_sum_to_zero[1]) ਝੂਠੇ """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,pan_Guru,python,"

def car_race_collision(n: int):
    """"""ਇੱਕ ਸੜਕ ਦੀ ਕਲਪਨਾ ਕਰੋ ਜੋ ਇੱਕ ਅਨੰਤ ਲੰਬੀ ਲਾਈਨ ਹੈ. n ਕਾਰਾਂ ਖੱਬੇ ਤੋਂ ਸੱਜੇ ਵੱਲ ਜਾ ਰਹੀਆਂ ਹਨ; ਇੱਕੋ ਸਮੇਂ, n ਕਾਰਾਂ ਦਾ ਇੱਕ ਵੱਖਰਾ ਸਮੂਹ ਸੱਜੇ ਤੋਂ ਖੱਬੇ ਵੱਲ ਜਾ ਰਿਹਾ ਹੈ. ਕਾਰਾਂ ਦੇ ਦੋ ਸੈੱਟ ਇੱਕ ਦੂਜੇ ਤੋਂ ਬਹੁਤ ਦੂਰ ਹੋਣ ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦੇ ਹਨ. ਸਾਰੀਆਂ ਕਾਰਾਂ ਇੱਕੋ ਗਤੀ ਤੇ ਚਲਦੀਆਂ ਹਨ. ਦੋ ਕਾਰਾਂ ਨੂੰ ਟਕਰਾਉਣ ਲਈ ਕਿਹਾ ਜਾਂਦਾ ਹੈ ਜਦੋਂ ਇੱਕ ਕਾਰ ਜੋ ਖੱਬੇ ਤੋਂ ਸੱਜੇ ਵੱਲ ਜਾ ਰਹੀ ਹੈ ਇੱਕ ਕਾਰ ਨੂੰ ਟਕਰਾਉਂਦੀ ਹੈ ਜੋ ਸੱਜੇ ਤੋਂ ਖੱਬੇ ਵੱਲ ਜਾ ਰਹੀ ਹੈ. ਹਾਲਾਂਕਿ, ਕਾਰਾਂ ਬੇਅੰਤ ਮਜ਼ਬੂਤ ਅਤੇ ਮਜ਼ਬੂਤ ਹਨ; ਨਤੀਜੇ ਵਜੋਂ, ਉਹ ਆਪਣੇ ਰਸਤੇ ਵਿੱਚ ਚਲਦੇ ਰਹਿੰਦੇ ਹਨ ਜਿਵੇਂ ਕਿ ਉਹ ਟਕਰਾ ਨਹੀਂ ਰਹੇ ਸਨ. ਇਹ ਫੰਕਸ਼ਨ ਅਜਿਹੇ ਟੱਕਰਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਬਾਹਰ ਕੱਢਦਾ ਹੈ.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,pan_Guru,python,"

def incr_list(l: list):
    """"""1. ਨਾਲ ਵਧੇ ਹੋਏ ਤੱਤਾਂ ਦੀ ਵਾਪਸੀ ਸੂਚੀ >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,pan_Guru,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਨੂੰ ਇਨਪੁਟ ਵਜੋਂ ਲੈਂਦਾ ਹੈ. ਇਹ ਸੱਚੇ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇ ਸੂਚੀ ਵਿੱਚ ਦੋ ਵੱਖਰੇ ਤੱਤ ਹਨ ਜੋ ਜ਼ੀਰੋ ਨੂੰ ਜੋੜਦੇ ਹਨ, ਅਤੇ ਹੋਰ ਗਲਤ. >>> pairs_sum_to_zero([1, 3, 5, 0]) ਗਲਤ >>> pairs_sum_to_zero[(1, 3, -2, 1]) ਗਲਤ >>> pairs_sum_to_zero([1, 2, 3, 7]) ਗਲਤ >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) ਸੱਚਾ >>> pairs_sum_to_zero[1]) ਗਲਤ """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,pan_Guru,python,"

def change_base(x: int, base: int):
    """"""ਇਨਪੁਟ ਨੰਬਰ x ਦਾ ਅੰਕੀ ਅਧਾਰ ਅਧਾਰ ਵਿੱਚ ਬਦਲੋ. ਪਰਿਵਰਤਨ ਤੋਂ ਬਾਅਦ ਸਤਰ ਪ੍ਰਤੀਨਿਧਤਾ ਵਾਪਸ ਕਰੋ. ਅਧਾਰ ਨੰਬਰ 10 ਤੋਂ ਘੱਟ ਹਨ. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,pan_Guru,python,"

def triangle_area(a, h):
    """"""ਇੱਕ ਤਿਕੋਣ ਲਈ ਇੱਕ ਪਾਸੇ ਦੀ ਲੰਬਾਈ ਅਤੇ ਉੱਚ ਵਾਪਸੀ ਖੇਤਰ ਦਿੱਤਾ ਗਿਆ ਹੈ. >>> triangle_area(5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,pan_Guru,python,"

def fib4(n: int):
    """"""Fib4 ਨੰਬਰ ਸੀਕਵੈਂਸ ਫਿਬੋਨੈਕਸੀ ਸੀਕਵੈਂਸ ਵਰਗੀ ਇਕ ਸੀਕਵੈਂਸ ਹੈ ਜੋ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤੀ ਗਈ ਹੈਃ fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). ਕਿਰਪਾ ਕਰਕੇ fib4 ਨੰਬਰ ਸੀਕਵੈਂਸ ਦੇ n-th ਐਲੀਮੈਂਟ ਦੀ ਕੁਸ਼ਲਤਾ ਨਾਲ ਗਣਨਾ ਕਰਨ ਲਈ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ. ਰੀਕ੍ਰਿਸ਼ਨ ਦੀ ਵਰਤੋਂ ਨਾ ਕਰੋ. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,pan_Guru,python,"

def median(l: list):
    """"""ਸੂਚੀ ਵਿੱਚ ਤੱਤਾਂ ਦਾ ਵਾਪਸੀ ਦਾ ਮੱਧਮ l. >>> ਮੱਧਮ (([3, 1, 2, 4, 5]) 3 >>> ਮੱਧਮ (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,pan_Guru,python,"

def is_palindrome(text: str):
    """"""ਜਾਂਚ ਕਰਦਾ ਹੈ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸਤਰ ਇੱਕ ਪਾਲੀਂਡਰੋਮ ਹੈ >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,pan_Guru,python,"

def modp(n: int, p: int):
    """"""2 ^ n ਮਾਡੂਲੋ ਪੀ (ਅੰਕਾਂ ਤੋਂ ਜਾਣੂ ਹੋਣਾ) ਵਾਪਿਸ ਕਰੋ. >>> ਮਾਡੂਲੋ 3 , 5) 3 >>> ਮਾਡੂਲੋ 1101, 101) 2 >>> ਮਾਡੂਲੋ 0, 101) 1 >>> ਮਾਡੂਲੋ 3, 11) 8 >>> ਮਾਡੂਲੋ 100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,pan_Guru,python,"

def encode_shift(s: str):
    """"""ਇੰਕੋਡ_ਸ਼ਿਫਟ ਫੰਕਸ਼ਨ ਨਾਲ ਇਨਪੁਟ ਸਤਰ ਵਜੋਂ ਇੰਕੋਡ ਕੀਤੀ ਜਾਂਦੀ ਹੈ. ਡੀਕੋਡ ਕੀਤੀ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""ਅੱਖਰ ਵਿੱਚ ਹਰ ਅੱਖਰ ਨੂੰ 5 ਨਾਲ ਬਦਲ ਕੇ ਏਨਕੋਡਡ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ।""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,pan_Guru,python,"

def remove_vowels(text):
    """"""remove_vowels ਇੱਕ ਫੰਕਸ਼ਨ ਹੈ ਜੋ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਬਿਨਾਂ ਵੋਕਲ ਦੇ ਸਤਰ ਵਾਪਸ ਕਰਦਾ ਹੈ. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') ' ' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,pan_Guru,python,"

def below_threshold(l: list, t: int):
    """"""TRUE ਵਾਪਸ ਕਰੋ ਜੇਕਰ ਸੂਚੀ ਵਿੱਚ ਸਾਰੇ ਨੰਬਰ ਥ੍ਰੈਸ਼ਹੋਲਡ ਤੋਂ ਹੇਠਾਂ ਹਨ. >>> below_threshold([1, 2, 4, 10], 100) TRUE >>> below_threshold([1, 20, 4, 10], 5) FALSE """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,pan_Guru,python,"

def add(x: int, y: int):
    """"""ਦੋ ਨੰਬਰ x ਅਤੇ y ਜੋੜੋ >>> ਜੋੜੋ ((2, 3) 5 >>> ਜੋੜੋ ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,pan_Guru,python,"

def same_chars(s0: str, s1: str):
    """"""ਚੈੱਕ ਕਰੋ ਕਿ ਕੀ ਦੋ ਸ਼ਬਦਾਂ ਦੇ ਅੱਖਰ ਇੱਕੋ ਜਿਹੇ ਹਨ। >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddabc') False >>> same_chars (('abcd', 'dddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,pan_Guru,python,"

def fib(n: int):
    """"""n-ਵੀਂ ਫਿਬੋਨੈਕਸੀ ਸੰਖਿਆ ਵਾਪਸ ਕਰੋ. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,pan_Guru,python,"

def correct_bracketing(brackets: str):
    """"""brackets ""<"" ਅਤੇ "">"" ਦੀ ਇੱਕ ਸਤਰ ਹੈ. ਵਾਪਸੀ ਸਹੀ ਹੈ ਜੇ ਹਰੇਕ ਖੁੱਲਣ ਵਾਲੀ ਬਰੈਕਟ ਵਿੱਚ ਇੱਕ ਅਨੁਸਾਰੀ ਬੰਦ ਕਰਨ ਵਾਲੀ ਬਰੈਕਟ ਹੁੰਦੀ ਹੈ. >>> correct_bracketing(""<"") ਗਲਤ >>> correct_bracketing(""<>"") ਸੱਚ >>> correct_bracketing(""<><>>"") ਸੱਚ >>> correct_bracketing(""><<>"") ਗਲਤ """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,pan_Guru,python,"

def monotonic(l: list):
    """"""ਵਾਪਸੀ ਸਹੀ ਹੈ ਸੂਚੀ ਤੱਤ ਇਕਸਾਰਤਾ ਨਾਲ ਵੱਧ ਰਹੇ ਹਨ ਜਾਂ ਘਟ ਰਹੇ ਹਨ. >>> ਇਕਸਾਰਤਾ ਨਾਲ (([1, 2, 4, 20]) ਸੱਚ >>> ਇਕਸਾਰਤਾ ਨਾਲ (([1, 20, 4, 10]) ਗਲਤ >>> ਇਕਸਾਰਤਾ ਨਾਲ (([4, 1, 0, -10]) ਸੱਚ """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,pan_Guru,python,"

def common(l1: list, l2: list):
    """"""ਦੋ ਸੂਚੀਆਂ ਲਈ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਗਏ ਵਿਲੱਖਣ ਸਾਂਝੇ ਤੱਤ ਵਾਪਸ ਕਰੋ. >>> ਆਮ (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> ਆਮ (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,pan_Guru,python,"

def largest_prime_factor(n: int):
    """"""n ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਪ੍ਰਾਇਮ ਫੈਕਟਰ ਵਾਪਸ ਕਰੋ. ਮੰਨ ਲਓ ਕਿ n > 1 ਹੈ ਅਤੇ ਪ੍ਰਾਇਮ ਨਹੀਂ ਹੈ. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,pan_Guru,python,"

def sum_to_n(n: int):
    """"""sum_to_n ਇੱਕ ਫੰਕਸ਼ਨ ਹੈ ਜੋ 1 ਤੋਂ n ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦਾ ਜੋੜ ਕਰਦਾ ਹੈ। >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,pan_Guru,python,"

def correct_bracketing(brackets: str):
    """"""brackets ""("" ਅਤੇ """") ਦੀ ਇੱਕ ਸਤਰ ਹੈ. ਵਾਪਸੀ ਸਹੀ ਹੈ ਜੇ ਹਰੇਕ ਖੁੱਲਣ ਵਾਲੀ ਬਰੈਕਟ ਵਿੱਚ ਇੱਕ ਅਨੁਸਾਰੀ ਬੰਦ ਕਰਨ ਵਾਲੀ ਬਰੈਕਟ ਹੁੰਦੀ ਹੈ. >>> correct_bracketing(""("") ਗਲਤ >>> correct_bracketing(""() ਸੱਚ >>> correct_bracketing(""() "") ਸੱਚ >>> correct_bracketing("") ਗਲਤ """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,pan_Guru,python,"

def derivative(xs: list):
    """"""xs ਇੱਕ ਬਹੁਭਾਸ਼ਿਕ ਦੇ ਗੁਣਾਂਕ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ. xs[0] + xs[1] * x + xs[2] * x^2 + .... ਇਸ ਬਹੁਭਾਸ਼ਿਕ ਦਾ ਉਸੇ ਰੂਪ ਵਿੱਚ ਡੈਰੀਵੇਟਿਵ ਵਾਪਸ ਕਰੋ. >>> ਡੈਰੀਵੇਟਿਵ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ਡੈਰੀਵੇਟਿਵ [(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,pan_Guru,python,"

def fibfib(n: int):
    """"""ਫਿਬਫਿਬ ਨੰਬਰ ਸੀਕਵੈਂਸ ਫਿਬਬੋਨੈਕਸੀ ਸੀਕਵੈਂਸ ਵਰਗੀ ਇਕ ਲੜੀ ਹੈ ਜੋ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤੀ ਗਈ ਹੈਃ ਫਿਬਫਿਬ ((0) == 0 ਫਿਬਫਿਬ ((1) == 0 ਫਿਬਫਿਬ ((2) == 1 ਫਿਬਫਿਬ ((n) == ਫਿਬਫਿਬ ((n-1) + ਫਿਬਫਿਬ ((n-2) + ਫਿਬਫਿਬ ((n-3). ਕਿਰਪਾ ਕਰਕੇ ਫਿਬਫਿਬ ਨੰਬਰ ਸੀਕਵੈਂਸ ਦੇ n-th ਐਲੀਮੈਂਟ ਦੀ ਕੁਸ਼ਲਤਾ ਨਾਲ ਗਣਨਾ ਕਰਨ ਲਈ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ. >>> ਫਿਬਫਿਬ ((1) 0 >>> ਫਿਬਫਿਬ ((5) 4 >>> ਫਿਬਫਿਬ ((8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,pan_Guru,python,"
FIX = """"""ਇੱਕ ਫੰਕਸ਼ਨ ਵੋਕਲਸ_ਕਾਉਂਟ ਲਿਖੋ ਜੋ ਇੱਕ ਸ਼ਬਦ ਨੂੰ ਪ੍ਰਤੀਨਿਧਤਾ ਕਰਨ ਵਾਲੀ ਸਤਰ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਤਰ ਵਿੱਚ ਵੋਕਲਸ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰਦਾ ਹੈ। ਇਸ ਕੇਸ ਵਿੱਚ ਵੋਕਲਸ 'ਏ', 'ਈ', 'ਆਈ', 'ਓ', 'ਯੂ' ਹਨ। ਇੱਥੇ, 'ਵਾਈ' ਵੀ ਇੱਕ ਵੋਕਲ ਹੈ, ਪਰ ਸਿਰਫ ਜਦੋਂ ਇਹ ਦਿੱਤੇ ਗਏ ਸ਼ਬਦ ਦੇ ਅੰਤ ਵਿੱਚ ਹੁੰਦਾ ਹੈ। ਉਦਾਹਰਨਃ >>> ਵੋਕਲਸ_ਕਾਉਂਟ (ਅਤੇ) ""ਅਬਕਡੇ"") 2 >>> ਵੋਕਲਸ_ਕਾਉਂਟ (ਅਤੇ) ""ਅਸੀਡੀ"") 3 """"""

def vowels_count(s):
    """"""ਹੋਰ ਟੈਸਟ ਕੇਸ ਜੋੜੋ।""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,pan_Guru,python,"
def circular_shift(x, shift):
    """"""ਸਰਕੂਲਰ ਪੂਰਨ ਅੰਕ x ਦੇ ਅੰਕ ਨੂੰ ਹਿਲਾਓ, ਹਿਲਾ ਕੇ ਅੰਕ ਨੂੰ ਸੱਜੇ ਪਾਸੇ ਹਿਲਾਓ ਅਤੇ ਨਤੀਜਾ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। ਜੇ ਸ਼ਿਫਟ > ਅੰਕ ਦੀ ਗਿਣਤੀ, ਅੰਕ ਨੂੰ ਉਲਟਾ ਦਿੱਤਾ ਜਾਂਦਾ ਹੈ. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,pan_Guru,python,"
def digitSum(s):
    """"""ਟਾਸਕ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਿਰਫ ਉਪਰਲੇ ਅੱਖਰਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰਦਾ ਹੈ' ASCII ਕੋਡ. ਉਦਾਹਰਣਃ digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,pan_Guru,python,"
def fruit_distribution(s,n):
    """"""ਇਸ ਕੰਮ ਵਿੱਚ, ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ ਜੋ ਇੱਕ ਫਲਾਂ ਦੀ ਟੋਕਰੀ ਵਿੱਚ ਵੰਡੀਆਂ ਗਈਆਂ ਸੇਬਾਂ ਅਤੇ ਸੰਤਰੇ ਦੀ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ ਇਸ ਟੋਕਰੀ ਵਿੱਚ ਸੇਬ, ਸੰਤਰੇ ਅਤੇ ਅੰਬ ਦੇ ਫਲ ਹਨ. ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ ਜੋ ਸੰਤਰੇ ਅਤੇ ਸੇਬਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ ਅਤੇ ਇੱਕ ਪੂਰਨ ਅੰਕ ਜੋ ਟੋਕਰੀ ਵਿੱਚ ਫਲਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ ਟੋਕਰੀ ਵਿੱਚ ਅੰਬ ਦੇ ਫਲਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣ ਲਈਃ fruit_distribution""5(ਸੇਬ ਅਤੇ 6 ਸੰਤਰੇ"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 ਸੇਬ ਅਤੇ 1 ਸੰਤਰੇ"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 ਸੇਬ ਅਤੇ 3 ਸੰਤਰੇ"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 ਸੇਬ ਅਤੇ 1 ਸੰਤਰੇ"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,pan_Guru,python,"
def pluck(arr):
    """"""""ਇੱਕ ਐਰੇ ਨੂੰ ਇੱਕ ਰੁੱਖ ਦੀ ਇੱਕ ਸ਼ਾਖਾ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਨੋਡ ਹਨ ਤੁਹਾਡਾ ਕੰਮ ਨੋਡਾਂ ਵਿੱਚੋਂ ਇੱਕ ਨੂੰ ਚੁੱਕਣਾ ਅਤੇ ਵਾਪਸ ਕਰਨਾ ਹੈ। ਚੁੱਕਿਆ ਨੋਡ ਸਭ ਤੋਂ ਛੋਟਾ ਬਰਾਬਰ ਮੁੱਲ ਵਾਲਾ ਨੋਡ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ। ਜੇ ਇੱਕੋ ਸਭ ਤੋਂ ਛੋਟਾ ਬਰਾਬਰ ਮੁੱਲ ਵਾਲੇ ਕਈ ਨੋਡ ਮਿਲਦੇ ਹਨ ਤਾਂ ਨੋਡ ਨੂੰ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਵਾਲਾ ਵਾਪਸ ਕਰੋ. ਚੁੱਕਿਆ ਨੋਡ ਨੂੰ ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ, [smallest_value, ਇਸ ਦਾ ਇੰਡੈਕਸ ], ਜੇ ਕੋਈ ਵੀ ਮੁੱਲ ਨਹੀਂ ਹਨ ਜਾਂ ਦਿੱਤੀ ਗਈ ਐਰੇ ਖਾਲੀ ਹੈ, ਵਾਪਸ ਕਰੋ []. ਉਦਾਹਰਨ 1: ਇਨਪੁਟਃ [4,2,3] ਆਉਟਪੁੱਟਃ [2, 1] ਵਿਆਖਿਆਃ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਬਰਾਬਰ ਮੁੱਲ ਹੈ, ਅਤੇ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਹੈ. ਉਦਾਹਰਨ 2: ਇਨਪੁਟਃ [1,2,3] ਆਉਟਪੁੱਟਃ [2, 1] ਵਿਆਖਿਆਃ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਮੁੱਲ ਹੈ, ਅਤੇ 2 ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਹੈ. ਉਦਾਹਰਨ 3: ਇਨਪੁਟਃ [] [output] [] [output: [4: [5, 3, 4] [output: 0, 2] [output: 0] ਆਉਟਪੁੱਟਃ 1 ਨੋਡਃ 1 ਸਭ ਤੋਂ ਛੋਟਾ ਨੋਡ, [output] ਜੇ ਕੋਈ ਬਰਾਇੰਟ ਹੈ, ਤਾਂ ਸਭ ਤੋਂ ਛੋਟਾ ਇੰਡੈਕਸ ਹੈ, ਤਾਂ ਸੂਚੀ ਵਿੱਚ, [smallest] ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ ਮੁੱਲ ਹੈ, [smallest index = 0 ਹੈ, ਪਰ ਪਹਿਲੇ ਨੋ, [smallest value] ਉਦਾਹਰਨੋਟ = 1 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ = 0 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ = 1 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ ਨੋ ਨੋ ਨੋ = 1 ਹੈ, ਸਭ ਤੋਂ ਛੋਟਾ ਨੋ = 0]""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,pan_Guru,python,"
def search(lst):
    '''ਤੁਹਾਨੂੰ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਸਭ ਤੋਂ ਵੱਡਾ ਪੂਰਨ ਅੰਕ ਵਾਪਸ ਕਰੋ ਜੋ ਜ਼ੀਰੋ ਤੋਂ ਵੱਡਾ ਹੈ, ਅਤੇ ਪੂਰਨ ਅੰਕ ਦੇ ਮੁੱਲ ਦੇ ਬਰਾਬਰ ਜਾਂ ਇਸ ਤੋਂ ਵੱਧ ਬਾਰੰਬਾਰਤਾ ਹੈ. ਇੱਕ ਪੂਰਨ ਅੰਕ ਦੀ ਬਾਰੰਬਾਰਤਾ ਉਹ ਵਾਰ ਹੈ ਜਦੋਂ ਇਹ ਸੂਚੀ ਵਿੱਚ ਦਿਖਾਈ ਦਿੰਦੀ ਹੈ. ਜੇ ਅਜਿਹਾ ਕੋਈ ਮੁੱਲ ਮੌਜੂਦ ਨਹੀਂ ਹੈ, ਤਾਂ ਵਾਪਸ ਕਰੋ -1. ਉਦਾਹਰਣਃ ਖੋਜ ਕਰੋ (([4, 1, 2, 2, 3, 1]) == 2 ਖੋਜ ਕਰੋ ([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 ਖੋਜ ਕਰੋ ([5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,pan_Guru,python,"
def strange_sort_list(lst):
    '''ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਅਜੀਬ ਕ੍ਰਮ ਵਿੱਚ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਅਜੀਬ ਲੜੀਬੱਧਤਾ, ਉਹ ਹੈ ਜਦੋਂ ਤੁਸੀਂ ਘੱਟੋ ਘੱਟ ਮੁੱਲ ਨਾਲ ਸ਼ੁਰੂ ਕਰਦੇ ਹੋ, ਫਿਰ ਬਾਕੀ ਪੂਰਨ ਅੰਕ ਦੀ ਵੱਧ ਤੋਂ ਵੱਧ, ਫਿਰ ਘੱਟੋ ਘੱਟ ਅਤੇ ਇਸ ਤਰ੍ਹਾਂ ਜਾਰੀ ਰੱਖੋ. ਉਦਾਹਰਣਃ strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,pan_Guru,python,"
def triangle_area(a, b, c):
    '''ਤਿਕੋਣ ਦੇ ਤਿੰਨ ਪਾਸਿਆਂ ਦੀ ਲੰਬਾਈ ਦਿੱਤੀ ਗਈ ਹੈ. ਤਿਕੋਣ ਦਾ ਖੇਤਰ 2 ਦਸ਼ਮਲਵ ਬਿੰਦੂਆਂ ਤੱਕ ਗੋਲ ਕਰੋ ਜੇ ਤਿੰਨ ਪਾਸੇ ਇੱਕ ਜਾਇਜ਼ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ. ਨਹੀਂ ਤਾਂ -1 ਵਾਪਸ ਕਰੋ ਤਿੰਨ ਪਾਸੇ ਇੱਕ ਜਾਇਜ਼ ਤਿਕੋਣ ਬਣਾਉਂਦੇ ਹਨ ਜਦੋਂ ਕਿਸੇ ਵੀ ਦੋ ਪਾਸਿਆਂ ਦਾ ਜੋੜ ਤੀਜੀ ਪਾਸਿਆਂ ਤੋਂ ਵੱਡਾ ਹੁੰਦਾ ਹੈ. ਉਦਾਹਰਣਃ ਤਿਕੋਣ_ ਖੇਤਰ ((3, 4, 5) == 6.00 ਤਿਕੋਣ_ ਖੇਤਰ ((1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,pan_Guru,python,"
def will_it_fly(q,w):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਹੀ ਵਾਪਿਸ ਆਉਂਦੀ ਹੈ ਜੇ ਵਸਤੂ q ਉਡਦੀ ਹੈ, ਅਤੇ ਗਲਤ ਨਹੀਂ. ਵਸਤੂ q ਉਡਦੀ ਹੈ ਜੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ (ਇਹ ਇੱਕ ਪਾਲੀਂਡਰੋਮਿਕ ਸੂਚੀ ਹੈ) ਅਤੇ ਇਸਦੇ ਤੱਤਾਂ ਦਾ ਜੋੜ ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ w ਤੋਂ ਘੱਟ ਜਾਂ ਬਰਾਬਰ ਹੈ. ਉਦਾਹਰਣਃ will_it_fly (([1, 2], 5) â -> ਗਲਤ # 1+2 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਪਰ ਇਹ ਅਸੰਤੁਲਿਤ ਹੈ. will_it_fly (([3, 2, 3], 1) â -> ਗਲਤ # ਇਹ ਸੰਤੁਲਿਤ ਹੈ, ਪਰ 3+2+3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਹੈ. will_it_fly (([3, 2, 3], 9) â -> ਸੱਚਾ # 3+23 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਅਤੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ. will_it_fly ((([3], â 5) -> ਸੱਚਾ # 3 ਵੱਧ ਤੋਂ ਵੱਧ ਸੰਭਵ ਭਾਰ ਤੋਂ ਘੱਟ ਹੈ, ਅਤੇ ਇਹ ਸੰਤੁਲਿਤ ਹੈ.'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,pan_Guru,python,"
def smallest_change(arr):
    """"""ਪੂਰਨ ਅੰਕ ਦੇ ਇੱਕ ਐਰੇ ਨੂੰ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਐਰੇ ਨੂੰ ਪਾਲੀਂਡਰੋਮਿਕ ਬਣਾਉਣ ਲਈ ਘੱਟੋ ਘੱਟ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਲੱਭੋ। ਇੱਕ ਪਾਲੀਂਡਰੋਮਿਕ ਐਰੇ ਇੱਕ ਐਰੇ ਹੈ ਜੋ ਪਿੱਛੇ ਅਤੇ ਅੱਗੇ ਇਕੋ ਜਿਹਾ ਪੜ੍ਹਿਆ ਜਾਂਦਾ ਹੈ। ਇੱਕ ਤਬਦੀਲੀ ਵਿੱਚ, ਤੁਸੀਂ ਇੱਕ ਤੱਤ ਨੂੰ ਕਿਸੇ ਵੀ ਹੋਰ ਤੱਤ ਵਿੱਚ ਬਦਲ ਸਕਦੇ ਹੋ। ਉਦਾਹਰਣ ਲਈਃ smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,pan_Guru,python,"
def total_match(lst1, lst2):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਤਰਾਂ ਦੀਆਂ ਦੋ ਸੂਚੀਆਂ ਨੂੰ ਸਵੀਕਾਰ ਕਰਦਾ ਹੈ ਅਤੇ ਉਹ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਸੂਚੀ ਦੇ ਸਾਰੇ ਸਤਰਾਂ ਵਿੱਚ ਦੂਜੇ ਸੂਚੀ ਨਾਲੋਂ ਘੱਟ ਅੱਖਰਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ ਹੈ. ਜੇ ਦੋ ਸੂਚੀਆਂ ਵਿੱਚ ਅੱਖਰਾਂ ਦੀ ਇੱਕੋ ਜਿਹੀ ਗਿਣਤੀ ਹੈ, ਤਾਂ ਪਹਿਲੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣ total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['4']'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,pan_Guru,python,"
def is_multiply_prime(a):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਹੀ ਵਾਪਿਸ ਆਉਂਦੀ ਹੈ ਜੇ ਦਿੱਤੀ ਗਈ ਸੰਖਿਆ 3 ਪ੍ਰਾਇਮ ਨੰਬਰਾਂ ਦਾ ਗੁਣਾ ਹੈ ਅਤੇ ਹੋਰ ਗਲਤ ਹੈ. ਇਹ ਜਾਣਨਾ ਕਿ (ਏ) 100 ਤੋਂ ਘੱਟ ਹੈ. ਉਦਾਹਰਨਃ is_multiply_prime(30) == True 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,pan_Guru,python,"
def is_simple_power(x, n):
    """"""ਤੁਹਾਡਾ ਕੰਮ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣਾ ਹੈ ਜੋ ਸੱਚੇ ਵਾਪਸ ਆਉਂਦੀ ਹੈ ਜੇ ਇੱਕ ਨੰਬਰ x n ਦੀ ਇੱਕ ਸਧਾਰਨ ਸ਼ਕਤੀ ਹੈ ਅਤੇ ਹੋਰ ਮਾਮਲਿਆਂ ਵਿੱਚ ਗਲਤ ਹੈ. x n ਦੀ ਇੱਕ ਸਧਾਰਨ ਸ਼ਕਤੀ ਹੈ ਜੇ n**int=x ਉਦਾਹਰਣ ਲਈਃ is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,pan_Guru,python,"
def iscube(a):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਪੂਰਨ ਅੰਕ a ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਹੀ ਵਾਪਿਸ ਕਰਦਾ ਹੈ ਜੇ ਇਹ ਇੰਗੇਜਰ ਕਿਸੇ ਪੂਰਨ ਅੰਕ ਦਾ ਘਣ ਹੈ। ਨੋਟਃ ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇੰਪੁੱਟ ਹਮੇਸ਼ਾਂ ਯੋਗ ਹੁੰਦਾ ਹੈ। ਉਦਾਹਰਣਃ iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,pan_Guru,python,"
def hex_key(num):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣ ਦਾ ਕੰਮ ਦਿੱਤਾ ਗਿਆ ਹੈ ਜੋ ਇੱਕ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਹੈਕਸਾਡੇਸਿਮਲ ਨੰਬਰ ਪ੍ਰਾਪਤ ਕਰਦਾ ਹੈ ਅਤੇ ਹੈਕਸਾਡੇਸਿਮਲ ਅੰਕਾਂ ਦੀ ਗਿਣਤੀ ਗਿਣਦਾ ਹੈ ਜੋ ਪ੍ਰਾਇਮਰੀ ਹਨ (ਪ੍ਰਾਈਮ ਨੰਬਰ, ਜਾਂ ਪ੍ਰਾਈਮ, ਇੱਕ ਕੁਦਰਤੀ ਨੰਬਰ ਹੈ ਜੋ 1 ਤੋਂ ਵੱਡਾ ਹੈ ਜੋ ਦੋ ਛੋਟੇ ਕੁਦਰਤੀ ਸੰਖਿਆਵਾਂ ਦਾ ਉਤਪਾਦ ਨਹੀਂ ਹੈ) ਹੈਕਸਾਡੇਸਿਮਲ ਅੰਕ ਹਨ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ਏ, ਬੀ, ਸੀ, ਡੀ, ਈ, ਐਫ. ਪ੍ਰਾਈਮ ਨੰਬਰ ਹਨ 2, 3, 5, 7, 11, 13, 17,... ਇਸ ਲਈ ਤੁਹਾਨੂੰ ਹੇਠ ਲਿਖੇ ਅੰਕ ਦੀ ਗਿਣਤੀ ਨਿਰਧਾਰਤ ਕਰਨੀ ਪਵੇਗੀਃ 2, 3, 5, 7, ਬੀ (= ਦਸਮਲ 11), ਡੀ (= ਦਸਮਲ 13) ਨੋਟਃ ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇਨਪੁਟ ਹਮੇਸ਼ਾਂ ਸਹੀ ਜਾਂ ਖਾਲੀ ਹੈ, ਅਤੇ ਪ੍ਰਤੀਕ ਏ, ਬੀ, ਸੀ, ਡੀ, ਈ, ਐਫ ਹਮੇਸ਼ਾਂ ਵੱਡੇ ਅੱਖਰਾਂ ਦੀ ਸਤਰ ਹੈ. ਉਦਾਹਰਣਃ ""ਨਮ = ਏਬੀ"" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 1. ""ਨਮ = ਏਬੀ"", ""ਨਮ = ਏਬੀ"" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 1. ""ਨਮ = ਏਬੀ"" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 2. ""ਮ = ਏਬੀ = 1. ""ਮ = ਏਬੀ = 1. ""ਮ = ਏਬੀ = 6.06767"" ਲਈ ਆਉਟਪੁੱਟ ਨਮ = 2. ""ਮ = 6.04520202020""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,pan_Guru,python,"
def decimal_to_binary(decimal):
    """"""ਤੁਹਾਨੂੰ ਦਸ਼ਮਲਵ ਰੂਪ ਵਿੱਚ ਇੱਕ ਨੰਬਰ ਦਿੱਤਾ ਜਾਵੇਗਾ ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਇਸ ਨੂੰ ਬਾਈਨਰੀ ਫਾਰਮੈਟ ਵਿੱਚ ਬਦਲਣਾ ਹੈ. ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ, ਜਿਸ ਵਿੱਚ ਹਰੇਕ ਅੱਖਰ ਇੱਕ ਬਾਈਨਰੀ ਨੰਬਰ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ. ਸਤਰ ਵਿੱਚ ਹਰੇਕ ਅੱਖਰ '0' ਜਾਂ '1' ਹੋਵੇਗਾ. ਸਤਰ ਦੇ ਸ਼ੁਰੂ ਅਤੇ ਅੰਤ ਵਿੱਚ ਇੱਕ ਵਾਧੂ ਜੋੜਾ ਅੱਖਰ 'db' ਹੋਣਗੇ. ਵਾਧੂ ਅੱਖਰ ਫਾਰਮੈਟ ਵਿੱਚ ਮਦਦ ਕਰਨ ਲਈ ਹਨ. ਉਦਾਹਰਣਃ decimal_to_binary(15) # ਵਾਪਿਸ ""db1111db"" decimal_to_binary32) # ਵਾਪਿਸ ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,pan_Guru,python,"
def is_happy(s):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਗਈ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਜਾਂਚ ਕਰਨਾ ਹੈ ਕਿ ਸਤਰ ਖੁਸ਼ ਹੈ ਜਾਂ ਨਹੀਂ. ਇੱਕ ਸਤਰ ਖੁਸ਼ ਹੈ ਜੇ ਇਸ ਦੀ ਲੰਬਾਈ ਘੱਟੋ ਘੱਟ 3 ਹੈ ਅਤੇ ਹਰ 3 ਲਗਾਤਾਰ ਅੱਖਰ ਵੱਖਰੇ ਹਨ ਉਦਾਹਰਣ ਲਈਃ is_happy (a) => False is_happy (a) => False is_happy (a) => True is_happy (a) => False is_happy (a) => False is_happy (a) => False is_happy (adb) => True is_happy (x) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,pan_Guru,python,"
def numerical_letter_grade(grades):
    """"""ਇਹ ਸੈਮੇਸਟਰ ਦਾ ਆਖਰੀ ਹਫ਼ਤਾ ਹੈ ਅਤੇ ਅਧਿਆਪਕ ਨੂੰ ਵਿਦਿਆਰਥੀਆਂ ਨੂੰ ਗ੍ਰੇਡ ਦੇਣਾ ਹੈ. ਅਧਿਆਪਕ ਗਰੇਡਿੰਗ ਲਈ ਆਪਣਾ ਐਲਗੋਰਿਥਮ ਬਣਾ ਰਹੀ ਹੈ. ਸਿਰਫ ਸਮੱਸਿਆ ਇਹ ਹੈ ਕਿ ਉਸਨੇ ਗਰੇਡਿੰਗ ਲਈ ਵਰਤਿਆ ਕੋਡ ਗੁਆ ਦਿੱਤਾ ਹੈ. ਉਸਨੇ ਤੁਹਾਨੂੰ ਕੁਝ ਵਿਦਿਆਰਥੀਆਂ ਲਈ ਗਰੇਡਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਹੈ ਅਤੇ ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣਾ ਹੈ ਜੋ ਹੇਠਲੀ ਸਾਰਣੀ ਦੀ ਵਰਤੋਂ ਕਰਕੇ ਪੱਤਰ ਗ੍ਰੇਡਾਂ ਦੀ ਸੂਚੀ ਬਣਾ ਸਕਦਾ ਹੈਃ ਗਰੇਡ ਗ੍ਰੇਡ 4.0 A + > 3.7 A > 3.3 A- > 3.0 B + > 2.7 B- > 2.3 B- > 2.0 C + > 1.7 C > 1.3 C- > 1.0 D + > 0.7 D > 0.0 D- 0.0 ਉਦਾਹਰਣਃ grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,pan_Guru,python,"
def prime_length(string):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਵਾਪਸ ਕਰਦਾ ਹੈ ਸੱਚ ਹੈ ਜੇ ਸਤਰ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਇਮਰੀ ਨੰਬਰ ਹੈ ਜਾਂ ਗਲਤ ਹੈ ਨਹੀਂ ਤਾਂ ਉਦਾਹਰਣ prime_length (('ਹੈਲੋ') == ਸੱਚਾ ਪ੍ਰਾਇਮਰੀ_ਲੰਬਾਈ (('ਅਬਕਡਕਬਾ') == ਸੱਚਾ ਪ੍ਰਾਇਮਰੀ_ਲੰਬਾਈ (('ਕਿੱਟੀਆਂ') == ਸੱਚਾ ਪ੍ਰਾਇਮਰੀ_ਲੰਬਾਈ (('ਸੰਤਰੀ') == ਗਲਤ """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,pan_Guru,python,"
def starts_one_ends(n):
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, n-ਅੰਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਗਿਣਤੀ ਨੂੰ ਵਾਪਸ ਕਰੋ ਜੋ 1 ਨਾਲ ਸ਼ੁਰੂ ਜਾਂ ਖ਼ਤਮ ਹੁੰਦਾ ਹੈ।""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,pan_Guru,python,"
def solve(N):
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ N ਦਿੱਤਾ ਗਿਆ ਹੈ, ਬਾਈਨਰੀ ਵਿੱਚ ਇਸਦੇ ਅੰਕ ਦੇ ਕੁੱਲ ਜੋੜ ਨੂੰ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਨ ਲਈ N = 1000 ਲਈ, ਅੰਕ ਦਾ ਜੋੜ 1 ਹੋਵੇਗਾ ਆਉਟਪੁੱਟ ""1"" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. N = 150 ਲਈ, ਅੰਕ ਦਾ ਜੋੜ 6 ਹੋਵੇਗਾ ਆਉਟਪੁੱਟ ""110"" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. N = 147 ਲਈ, ਅੰਕ ਦਾ ਜੋੜ 12 ਹੋਵੇਗਾ ਆਉਟਪੁੱਟ ""1100"" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. ਵੇਰੀਏਬਲਃ @N ਪੂਰਨ ਅੰਕ ਕੰਟਰੈਕਟਸਃ 0 â‰¤ N â‰¤ 10000. ਆਉਟਪੁੱਟਃ ਬਾਈਨਰੀ ਨੰਬਰ ਦੀ ਇੱਕ ਸਤਰ """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,pan_Guru,python,"
def add(lst):
    """"""ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ lst. ਜੋੜੇ ਤੱਤ ਜੋੜੋ ਜੋ ਅਜੀਬ ਸੂਚਕਾਂਕ ਤੇ ਹਨ. ਉਦਾਹਰਣਃ ਜੋੜੋ (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,pan_Guru,python,"
def anti_shuffle(s):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ ਅਤੇ ਇਸਦਾ ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੰਸਕਰਣ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਸਤਰ ਦਾ ਕ੍ਰਮਬੱਧ ਸੰਸਕਰਣ, ਇੱਕ ਸਤਰ ਹੈ ਜਿੱਥੇ ਸਾਰੇ ਸ਼ਬਦ (ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਗਏ) ਨੂੰ ਇੱਕ ਨਵੇਂ ਸ਼ਬਦ ਦੁਆਰਾ ਬਦਲਿਆ ਜਾਂਦਾ ਹੈ ਜਿੱਥੇ ਸਾਰੇ ਅੱਖਰ ASCII ਮੁੱਲ ਦੇ ਅਧਾਰ ਤੇ ਵੱਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਵਿਵਸਥਿਤ ਹੁੰਦੇ ਹਨ. ਨੋਟਃ ਤੁਹਾਨੂੰ ਵਾਕ ਵਿੱਚ ਸ਼ਬਦਾਂ ਅਤੇ ਖਾਲੀ ਥਾਂਵਾਂ ਦਾ ਕ੍ਰਮ ਰੱਖਣਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ anti_shuffle ((('Hi') ਵਾਪਸ ਕਰਦਾ ਹੈ 'Hi' anti_shuffle (('hello') ਵਾਪਸ ਕਰਦਾ ਹੈ 'ehllo' anti_shuffle (('Hello World!!!') ਵਾਪਸ ਕਰਦਾ ਹੈ 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,pan_Guru,python,"
def get_row(lst, x):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ 2 ਅਯਾਮੀ ਡਾਟਾ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਨੇਸਟਡ ਲਿਸਟ ਦੇ ਰੂਪ ਵਿੱਚ, ਜੋ ਕਿ ਮੈਟ੍ਰਿਕਸ ਦੇ ਸਮਾਨ ਹੈ, ਹਾਲਾਂਕਿ, ਮੈਟ੍ਰਿਕਸ ਦੇ ਉਲਟ, ਹਰੇਕ ਕਤਾਰ ਵਿੱਚ ਵੱਖ ਵੱਖ ਕਾਲਮਾਂ ਦੀ ਸੰਖਿਆ ਹੋ ਸਕਦੀ ਹੈ. lst, ਅਤੇ ਪੂਰਨ ਅੰਕ x ਦਿੱਤੇ ਗਏ ਹਨ, ਸੂਚੀ ਵਿੱਚ ਪੂਰਨ ਅੰਕ x ਲੱਭੋ, ਅਤੇ ਟੁਪਲਸ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰੋ, [(x1, y1), (x2, y2) ...] ਜਿਵੇਂ ਕਿ ਹਰੇਕ ਟੁਪਲ ਇੱਕ ਤਾਲਮੇਲ ਹੈ - (ਕਤਾਰ, ਕਾਲਮ), 0 ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ. ਸ਼ੁਰੂ ਵਿੱਚ ਕਤਾਰਾਂ ਦੁਆਰਾ ਤਾਲਮੇਲ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਨਾਲ ਹੀ, ਕਤਾਰ ਦੇ ਤਾਲਮੇਲ ਨੂੰ ਕਾਲਮਾਂ ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਉਦਾਹਰਣਃ get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_(], 1) [] == == [[ਰੋਅੰਤਲਾ, 1, 2, 3]], == 2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,pan_Guru,python,"
def sort_array(array):
    """"""ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਕ੍ਰਮਬੱਧ ਕਰਨ ਤੋਂ ਬਾਅਦ ਦਿੱਤੀ ਗਈ ਐਰੇ ਦੀ ਇੱਕ ਕਾਪੀ ਵਾਪਸ ਕਰੋ, ਤੁਸੀਂ ਦਿੱਤੀ ਗਈ ਐਰੇ ਨੂੰ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋਗੇ ਜੇ ਜੋੜ ((ਪਹਿਲਾ ਇੰਡੈਕਸ ਮੁੱਲ, ਆਖਰੀ ਇੰਡੈਕਸ ਮੁੱਲ) ਅਜੀਬ ਹੈ, ਜਾਂ ਜੇ ਜੋੜ ((ਪਹਿਲਾ ਇੰਡੈਕਸ ਮੁੱਲ, ਆਖਰੀ ਇੰਡੈਕਸ ਮੁੱਲ) ਬਰਾਬਰ ਹੈ ਤਾਂ ਇਸਨੂੰ ਘਟਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਨੋਟਃ * ਦਿੱਤੀ ਗਈ ਐਰੇ ਨੂੰ ਨਾ ਬਦਲੋ. ਉਦਾਹਰਣਃ * sort_array[(]) => [] * sort_array[5]) => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 6] """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,pan_Guru,python,"
def encrypt(s):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਐਨਕ੍ਰਿਪਟ ਬਣਾਓ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇੱਕ ਆਰਗੂਮੈਂਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਇੱਕ ਸਤਰ ਨੂੰ ਏਨਕ੍ਰਿਪਟ ਕੀਤਾ ਗਿਆ ਹੈ ਜਿਸ ਨਾਲ ਵਰਣਮਾਲਾ ਘੁੰਮਿਆ ਜਾ ਰਿਹਾ ਹੈ। ਵਰਣਮਾਲਾ ਨੂੰ ਇਸ ਤਰੀਕੇ ਨਾਲ ਘੁੰਮਾਇਆ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ ਕਿ ਅੱਖਰ ਦੋ ਵਾਰ ਦੋ ਸਥਾਨਾਂ ਤੇ ਹੇਠਾਂ ਆਉਂਦੇ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ ਐਨਕ੍ਰਿਪਟ (('hi') ਵਾਪਸ 'lm' ਐਨਕ੍ਰਿਪਟ (('asdfghjkl') ਵਾਪਸ 'ewhjklnop' ਐਨਕ੍ਰਿਪਟ (('gf') ਵਾਪਸ 'kj' ਐਨਕ੍ਰਿਪਟ (('et') ਵਾਪਸ 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,pan_Guru,python,"
def next_smallest(lst):
    """"""ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਇੱਕ ਫੰਕਸ਼ਨ next_smallest ਲਿਖੋ ਜੋ ਸੂਚੀ ਦੇ ਦੂਜੇ ਸਭ ਤੋਂ ਛੋਟੇ ਤੱਤ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਜੇ ਅਜਿਹਾ ਕੋਈ ਤੱਤ ਨਹੀਂ ਹੈ ਤਾਂ ਕੋਈ ਨਹੀਂ ਵਾਪਸ ਕਰੋ. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == ਕੋਈ ਨਹੀਂ next_smallest (([1, 1]) == ਕੋਈ ਨਹੀਂ """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,pan_Guru,python,"
def is_bored(S):
    """"""ਤੁਹਾਨੂੰ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ, ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ ਬੋਰਡਮ ਦੀ ਗਿਣਤੀ ਕਰਨਾ ਹੈ. ਇੱਕ ਬੋਰਡਮ ਇੱਕ ਵਾਕ ਹੈ ਜੋ ""I"" ਸ਼ਬਦ ਨਾਲ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ। ਵਾਕਾਂ ਨੂੰ '.', '?' ਜਾਂ '! ' ਨਾਲ ਸੀਮਿਤ ਕੀਤਾ ਜਾਂਦਾ ਹੈ। ਉਦਾਹਰਣ ਲਈਃ >>> is_bored(""ਹੈਲੋ ਵਰਲਡ"") 0 >>> is_bored(""ਅਕਾਸ਼ ਨੀਲਾ ਹੈ. ਸੂਰਜ ਚਮਕ ਰਿਹਾ ਹੈ. ਮੈਨੂੰ ਇਹ ਮੌਸਮ ਪਸੰਦ ਹੈ"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,pan_Guru,python,"
def any_int(x, y, z):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ 3 ਨੰਬਰ ਲੈਂਦਾ ਹੈ. ਇਹ ਸਹੀ ਵਾਪਿਸ ਆਉਂਦਾ ਹੈ ਜੇ ਇੱਕ ਨੰਬਰ ਦੂਜਿਆਂ ਦੋ ਦੇ ਜੋੜ ਦੇ ਬਰਾਬਰ ਹੁੰਦਾ ਹੈ, ਅਤੇ ਸਾਰੇ ਨੰਬਰ ਪੂਰਨ ਅੰਕ ਹੁੰਦੇ ਹਨ. ਕਿਸੇ ਵੀ ਹੋਰ ਮਾਮਲਿਆਂ ਵਿੱਚ ਗਲਤ ਵਾਪਿਸ ਆਉਂਦਾ ਹੈ. ਉਦਾਹਰਣ any_int{5, 2, 7} â -> True any_int{3, 2, 2} â -> False any_int{3, -2, 1) â -> True any_int{3.6, -2.2, 2) â -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,pan_Guru,python,"
def encode(message):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਇੱਕ ਸੁਨੇਹਾ ਲੈਂਦਾ ਹੈ, ਅਤੇ ਇਸ ਤਰ੍ਹਾਂ ਇੰਕੋਡ ਕਰਦਾ ਹੈ ਕਿ ਇਹ ਸਾਰੇ ਅੱਖਰਾਂ ਦੇ ਕੇਸ ਨੂੰ ਬਦਲਦਾ ਹੈ, ਸੰਦੇਸ਼ ਵਿੱਚ ਸਾਰੇ ਵੋਕਲ ਨੂੰ ਉਸ ਅੱਖਰ ਨਾਲ ਬਦਲਦਾ ਹੈ ਜੋ ਅੰਗਰੇਜ਼ੀ ਵਰਣਮਾਲਾ ਵਿੱਚ ਉਸ ਵੋਕਲ ਤੋਂ 2 ਸਥਾਨਾਂ ਦੇ ਅੱਗੇ ਪ੍ਰਗਟ ਹੁੰਦਾ ਹੈ. ਸਿਰਫ ਅੱਖਰਾਂ ਨੂੰ ਮੰਨੋ. ਉਦਾਹਰਣਃ >>> ਇੰਕੋਡ 'ਤੇ 'ਟੈਸਟ') 'TGST' >>> ਇੰਕੋਡ 'ਇਹ ਇੱਕ ਸੰਦੇਸ਼ ਹੈ') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,pan_Guru,python,"

def skjkasdkd(lst):
    """"""ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਵੱਡਾ ਪ੍ਰਾਇਮਰੀ ਮੁੱਲ ਲੱਭਣ ਅਤੇ ਇਸਦੇ ਅੰਕ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰਨ ਦੀ ਲੋੜ ਹੈ. ਉਦਾਹਰਣਃ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ਲਈ ਆਉਟਪੁੱਟ 10 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ਲਈ ਆਉਟਪੁੱਟ 25 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ਲਈ ਆਉਟਪੁੱਟ 13 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ਲਈ ਆਉਟਪੁੱਟ 11 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [0,81,12,31,21] ਲਈ ਆਉਟਪੁੱਟ 3 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ lst = [0,1,8,1,2,1,7] ਲਈ ਆਉਟਪੁੱਟ 7 ਹੋਣੀ ਚਾਹੀਦੀ ਹੈ""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,pan_Guru,python,"
def check_dict_case(dict):
    """"""ਇੱਕ ਸ਼ਬਦਕੋਸ਼ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਵਾਪਸ ਕਰੋ True ਜੇ ਸਾਰੀਆਂ ਕੁੰਜੀਆਂ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਸਤਰਾਂ ਹਨ ਜਾਂ ਸਾਰੀਆਂ ਕੁੰਜੀਆਂ ਵੱਡੇ ਅੱਖਰਾਂ ਵਿੱਚ ਸਤਰਾਂ ਹਨ, ਨਹੀਂ ਤਾਂ ਵਾਪਸ ਕਰੋ False. ਫੰਕਸ਼ਨ ਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False ਦਿੱਤਾ ਗਿਆ ਸ਼ਬਦਕੋਸ਼ ਖਾਲੀ ਹੈ. ਉਦਾਹਰਣਃ check_dict_case{""a"":""apple"", ""b"":""banana""}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ False. check_dict_case{""NC"":""STATE"", ""Z"":""IP""12345}) ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,pan_Guru,python,"
def count_up_to(n):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰੋ ਜੋ ਇੱਕ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਲੈਂਦਾ ਹੈ ਅਤੇ ਪਹਿਲੇ n ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ ਪ੍ਰਾਇਮਰੀ ਨੰਬਰ ਹੁੰਦੇ ਹਨ ਅਤੇ n ਤੋਂ ਘੱਟ ਹੁੰਦੇ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,pan_Guru,python,"
def multiply(a, b):
    """"""ਫੰਕਸ਼ਨ ਨੂੰ ਪੂਰਾ ਕਰੋ ਜੋ ਦੋ ਪੂਰਨ ਅੰਕ ਲੈਂਦਾ ਹੈ ਅਤੇ ਉਹਨਾਂ ਦੇ ਯੂਨਿਟ ਅੰਕ ਦੇ ਉਤਪਾਦ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਮੰਨ ਲਓ ਕਿ ਇੰਪੁੱਟ ਹਮੇਸ਼ਾਂ ਯੋਗ ਹੁੰਦਾ ਹੈ. ਉਦਾਹਰਣਃ ਗੁਣਾ ਕਰਨਾ ((148, 412) ਨੂੰ 16. ਗੁਣਾ ਕਰਨਾ ((19, 28) ਨੂੰ 72. ਗੁਣਾ ਕਰਨਾ ((2020, 1851) ਨੂੰ 0. ਗੁਣਾ ਕਰਨਾ ((14,-15) ਨੂੰ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ 20. """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,pan_Guru,python,"
def count_upper(s):
    """"""ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਗਈ ਹੈ, ਜੋ ਕਿ ਵੀ ਸੂਚਕਾਂਕ ਵਿੱਚ ਵੱਡੇ ਅੱਖਰਾਂ ਦੇ ਵੋਕਲ ਦੀ ਗਿਣਤੀ ਕਰੋ. ਉਦਾਹਰਨ ਲਈਃ count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 ਵਾਪਸ ਕਰਦਾ ਹੈ """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,pan_Guru,python,"
def closest_integer(value):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਨੰਬਰ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ ਅਤੇ ਇਸ ਦੇ ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ. ਜੇ ਨੰਬਰ ਦੋ ਪੂਰਨ ਅੰਕ ਤੋਂ ਬਰਾਬਰ ਹੈ, ਤਾਂ ਇਸ ਨੂੰ ਜ਼ੀਰੋ ਤੋਂ ਦੂਰ ਕਰ ਦਿਓ. ਉਦਾਹਰਣ >>> closest_integer ((""10"") 10 >>> closest_integer ((""15.3"") 15 ਨੋਟਃ ਜ਼ੀਰੋ ਤੋਂ ਦੂਰ ਕਰਨ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਜੇ ਦਿੱਤਾ ਗਿਆ ਨੰਬਰ ਦੋ ਪੂਰਨ ਅੰਕ ਤੋਂ ਬਰਾਬਰ ਹੈ, ਤਾਂ ਤੁਹਾਨੂੰ ਉਹ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੋ ਜ਼ੀਰੋ ਤੋਂ ਸਭ ਤੋਂ ਦੂਰ ਹੈ. ਉਦਾਹਰਣ ਲਈ closest_integer "" ((14.5"") ਨੂੰ 15 ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ closest_integer "" ((-14.5"") ਨੂੰ -15. ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,pan_Guru,python,"
def make_a_pile(n):
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤੁਹਾਨੂੰ ਪੱਥਰਾਂ ਦੇ n ਪੱਧਰਾਂ ਦਾ ਇੱਕ ਢੇਰ ਬਣਾਉਣਾ ਹੈ. ਪਹਿਲੇ ਪੱਧਰ ਵਿੱਚ n ਪੱਥਰ ਹਨ. ਅਗਲੇ ਪੱਧਰ ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈਃ - ਅਗਲਾ ਅਜੀਬ ਨੰਬਰ ਜੇ n ਅਜੀਬ ਹੈ. - ਅਗਲਾ ਜੋੜ ਨੰਬਰ ਜੇ n ਜੋੜ ਹੈ. ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਹਰੇਕ ਪੱਧਰ ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ, ਜਿੱਥੇ ਸੂਚਕ i ਤੇ ਤੱਤ ਪੱਧਰ (i+1) ਵਿੱਚ ਪੱਥਰਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਦਰਸਾਉਂਦਾ ਹੈ. ਉਦਾਹਰਣਃ >>> make_a_pile(3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,pan_Guru,python,"
def words_string(s):
    """"""ਤੁਹਾਨੂੰ ਕਾਮੇ ਜਾਂ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਜਾਵੇਗੀ. ਤੁਹਾਡਾ ਕੰਮ ਸਤਰ ਨੂੰ ਸ਼ਬਦਾਂ ਵਿੱਚ ਵੰਡਣਾ ਅਤੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰਨਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ words_string ((""ਹਾਇ, ਮੇਰਾ ਨਾਮ ਜੌਨ ਹੈ"") == [""ਹਾਇ"", ""ਮੇਰਾ"", ""ਨਾਮ"", ""ਹੈ"", ""ਜੌਨ""] words_string ((""ਇੱਕ, ਦੋ, ਤਿੰਨ, ਚਾਰ, ਪੰਜ, ਛੇ"") == [""ਇੱਕ"", ""ਦੋ"", ""ਤਿੰਨ"", ""ਚਾਰ"", ""ਪੰਜ"", ""ਛੇ""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,pan_Guru,python,"
def choose_num(x, y):
    """"""ਇਹ ਫੰਕਸ਼ਨ ਦੋ ਸਕਾਰਾਤਮਕ ਨੰਬਰ x ਅਤੇ y ਲੈਂਦਾ ਹੈ ਅਤੇ ਸਭ ਤੋਂ ਵੱਡਾ ਜੋੜ ਪੂਰਨ ਅੰਕ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ [x, y] ਦੀ ਰੇਂਜ ਵਿੱਚ ਹੈ। ਜੇ ਅਜਿਹੀ ਕੋਈ ਸੰਖਿਆ ਨਹੀਂ ਹੈ, ਤਾਂ ਫੰਕਸ਼ਨ ਨੂੰ -1 ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,pan_Guru,python,"
def rounded_avg(n, m):
    """"""ਤੁਹਾਨੂੰ ਦੋ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਅਤੇ m ਦਿੱਤੇ ਗਏ ਹਨ, ਅਤੇ ਤੁਹਾਡਾ ਕੰਮ n ਤੋਂ m ਤੱਕ ਪੂਰਨ ਅੰਕ ਦੀ ਔਸਤ ਗਣਨਾ ਕਰਨਾ ਹੈ (n ਅਤੇ m ਸਮੇਤ) । ਜਵਾਬ ਨੂੰ ਨਜ਼ਦੀਕੀ ਪੂਰਨ ਅੰਕ ਤੱਕ ਗੋਲ ਕਰੋ ਅਤੇ ਇਸਨੂੰ ਬਾਈਨਰੀ ਵਿੱਚ ਤਬਦੀਲ ਕਰੋ। ਜੇ n m ਤੋਂ ਵੱਡਾ ਹੈ, ਤਾਂ ਵਾਪਸ ਕਰੋ -1. ਉਦਾਹਰਨਃ ਗੋਲ_ਆਵਗ ((1, 5) => ""0b11"" ਗੋਲ_ਆਵਗ ((7, 5) => -1 ਗੋਲ_ਆਵਗ ((10, 20) => ""0b1111"" ਗੋਲ_ਆਵਗ ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,pan_Guru,python,"
def unique_digits(x):
    """"""ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ x. ਸਾਰੇ ਤੱਤਾਂ ਦੀ ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਕੋਈ ਵੀ ਅੰਕ ਨਹੀਂ ਹੈ. ਨੋਟਃ ਵਾਪਸ ਕੀਤੀ ਸੂਚੀ ਨੂੰ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕੀਤਾ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ >>> ਵਿਲੱਖਣ_ਅੰਕ (([15, 33, 1422, 1]) [1, 15, 33] >>> ਵਿਲੱਖਣ_ਅੰਕ (([152, 323, 1422, 10]) [] """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,pan_Guru,python,"
def by_length(arr):
    """"""ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਪੂਰਨ ਅੰਕ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕਰੋ ਜੋ 1 ਅਤੇ 9 ਦੇ ਵਿਚਕਾਰ ਹਨ, ਨਤੀਜੇ ਵਾਲੀ ਐਰੇ ਨੂੰ ਉਲਟਾਓ, ਅਤੇ ਫਿਰ ਹਰੇਕ ਅੰਕ ਨੂੰ ਇਸਦੇ ਅਨੁਸਾਰੀ ਨਾਮ ਨਾਲ ""ਇੱਕ"", ""ਦੋ"", ""ਤਿੰਨ"", ""ਚਾਰ"", ""ਪੰਜ"", ""ਛੇ"", ""ਸੱਤ"", ""ਅੱਠ"", ""ਨੌ"" ਤੋਂ ਬਦਲੋ। ਉਦਾਹਰਣ ਲਈਃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> ਤਰਤੀਬ arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> ਉਲਟਾ arr -> [8, 5, 4, 3, 2, 2, 1, 1] ਵਾਪਸੀ [""ਅੱਠ"", ""ਚਾਰ"", ""ਤਿੰਨ"", ""ਦੋ"", ""ਦੋ"", ""ਇੱਕ"", ""ਇੱਕ""] ਜੇ ਐਰੇ ਖਾਲੀ ਹੈ, ਤਾਂ ਇੱਕ ਵਾਪਸੀ ਵਾਪਸੀਃ arr = [] ਵਾਪਸੀ ਐਰੇ [] ਜੇ ਐਰੇ ਵਿੱਚ ਕੋਈ ਅਜੀਬ ਨੰਬਰ ਹੈ ਤਾਂ ਇਸ ਨੂੰ ਨਜ਼ਰ ਅੰਦਾਜ਼ ਕਰੋਃ arr = [1, 1 , 55 -> arr -1, 55 -> arr -1, 55 -> reverse -5, arr = [51] ਵਾਪਸੀ -1, 'ਇੱਕ' ]""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,pan_Guru,python,"
def f(n):
    """"""ਫੰਕਸ਼ਨ f ਨੂੰ ਲਾਗੂ ਕਰੋ ਜੋ n ਨੂੰ ਇੱਕ ਪੈਰਾਮੀਟਰ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ, ਅਤੇ ਆਕਾਰ n ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿਵੇਂ ਕਿ ਇੰਡੈਕਸ i ਤੇ ਤੱਤ ਦਾ ਮੁੱਲ i ਦਾ ਫੈਕਟਰਿਅਲ ਹੁੰਦਾ ਹੈ ਜੇ i ਵੀ ਹੋਵੇ ਜਾਂ 1 ਤੋਂ i ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦਾ ਜੋੜ ਨਹੀਂ. i 1 ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦਾ ਹੈ. i ਦਾ ਫੈਕਟਰਿਅਲ 1 ਤੋਂ i ਤੱਕ ਦੇ ਨੰਬਰਾਂ ਦਾ ਗੁਣਾ ਹੈ (1 * 2 * . . . * i). ਉਦਾਹਰਨਃ f ((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,pan_Guru,python,"
def even_odd_palindrome(n):
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਟੂਪਲ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਜੋੜ ਅਤੇ ਅਜੀਬ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ ਦੀ ਗਿਣਤੀ ਹੈ ਜੋ ਰੇਂਜ ਦੇ ਅੰਦਰ ਆਉਂਦੀ ਹੈ ((1, n), ਸਮੇਤ. ਉਦਾਹਰਣ 1: ਇਨਪੁਟਃ 3 ਆਉਟਪੁੱਟਃ (1, 2) ਵਿਆਖਿਆਃ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ 1, 2, 3 ਹਨ, ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ ਇੱਕ ਜੋੜਾ ਹੈ, ਅਤੇ ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ ਦੋ ਅਜੀਬ ਹਨ. ਉਦਾਹਰਣ 2: ਇਨਪੁਟਃ 12 ਆਉਟਪੁੱਟਃ (4, 6) ਵਿਆਖਿਆਃ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 ਹਨ. ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ ਚਾਰ ਜੋੜੇ ਹਨ, ਅਤੇ ਉਨ੍ਹਾਂ ਵਿੱਚੋਂ 6 ਅਜੀਬ ਹਨ. ਨੋਟਃ 1. 1 <= n <= 10 ^ 3 2. ਟੂਪਲ ਨੇ ਕ੍ਰਮਵਾਰ ਜੋੜ ਅਤੇ ਅਜੀਬ ਪੂਰਨ ਅੰਕ ਪੈਲਿੰਡਰੋਮ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕੀਤੀ ਹੈ. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,pan_Guru,python,"
def count_nums(arr):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ count_nums ਲਿਖੋ ਜੋ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਤੱਤਾਂ ਦੀ ਸੰਖਿਆ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਅੰਕ ਦਾ ਜੋੜ ਹੈ > 0. ਜੇ ਕੋਈ ਨੰਬਰ ਨਕਾਰਾਤਮਕ ਹੈ, ਤਾਂ ਇਸਦਾ ਪਹਿਲਾ ਦਸਤਖਤ ਕੀਤਾ ਅੰਕ ਨਕਾਰਾਤਮਕ ਹੋਵੇਗਾਃ ਉਦਾਹਰਣ ਵਜੋਂ -123 ਦੇ ਦਸਤਖਤ ਕੀਤੇ ਅੰਕ ਹਨ -1, 2, ਅਤੇ 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,pan_Guru,python,"
def move_one_ball(arr):
    """"""ਸਾਡੇ ਕੋਲ N ਪੂਰਨ ਅੰਕ arr[1], arr[2], ..., arr[N] ਦੀ ਇੱਕ ਐਰੇ 'arr' ਹੈ। ਐਰੇ ਵਿੱਚ ਨੰਬਰ ਬੇਤਰਤੀਬੇ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਜਾਣਗੇ। ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਦਿੱਤੇ ਗਏ ਐਰੇ ਤੇ ਹੇਠ ਲਿਖੀ ਕਾਰਵਾਈ ਕਰਕੇ ਗੈਰ-ਘਟਾਉਣ ਵਾਲੇ ਕ੍ਰਮ ਵਿੱਚ ਐਰੇ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕਰਨਾ ਸੰਭਵ ਹੈ: ਤੁਹਾਨੂੰ ਦਿੱਤੀ ਗਈ ਐਰੇ ਤੇ ਕਈ ਵਾਰ ਸੱਜੇ ਪਾਸੇ ਜਾਣ ਦੀ ਕਾਰਵਾਈ ਕਰਨ ਦੀ ਆਗਿਆ ਹੈ। ਇੱਕ ਸੱਜੇ ਪਾਸੇ ਜਾਣ ਦੀ ਕਾਰਵਾਈ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਐਰੇ ਦੇ ਸਾਰੇ ਤੱਤਾਂ ਨੂੰ ਇੱਕ ਸਥਿਤੀ ਵਿੱਚ ਸੱਜੇ ਦਿਸ਼ਾ ਵਿੱਚ ਬਦਲਣਾ। ਐਰੇ ਦਾ ਆਖਰੀ ਤੱਤ ਐਰੇ ਵਿੱਚ ਸ਼ੁਰੂਆਤੀ ਸਥਿਤੀ ਵਿੱਚ ਚਲੇ ਜਾਵੇਗਾ ਭਾਵ 0 ਵਾਂ ਇੰਡੈਕਸ. ਜੇ ਉਪਰੋਕਤ ਕਾਰਵਾਈ ਕਰਕੇ ਕ੍ਰਮਬੱਧ ਐਰੇ ਪ੍ਰਾਪਤ ਕਰਨਾ ਸੰਭਵ ਹੈ ਤਾਂ ਵਾਪਸੀ ਸਹੀ ਹੈ ਤਾਂ ਵਾਪਸੀ ਗਲਤ ਹੈ. ਜੇ ਦਿੱਤੀ ਗਈ ਐਰੇ ਖਾਲੀ ਹੈ ਤਾਂ ਵਾਪਸੀ ਸਹੀ ਹੈ। ਨੋਟਃ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਵਿੱਚ ਵਿਲੱਖਣ ਤੱਤ ਹੋਣ ਦੀ ਗਰੰਟੀ ਹੈ। ਉਦਾਹਰਣ ਲਈਃ move_one_(ball[3, 4, 5, 2===>True ਵਿਆਖਿਆਃ ਸਹੀ ਵਿਆਖਿਆਃ 2 ਦੁਆਰਾ ਸਹੀ ਕਾਰਵਾਈਆਂ, ਗੈਰ-ਘਟਾਉਣ ਵਾਲੇ ਕ੍ਰਮ ਨੂੰ ਪ੍ਰਾਪਤ ਕੀਤਾ ਜਾ ਸਕਦਾ ਹੈ. ਐਰੇ ਲਈ ਦਿੱਤੇ ਗਏ ਐਰੇ ਨੂੰ ਇੱਕ ਵਾਰ ਸੱਜੇ ਪਾਸੇ ਜਾਣ ਦੀ ਕਾਰਵਾਈ ਕਰਨ ਦੀ ਆਗਿਆ ਹੈ।[,===4, 3, 4, 5,=== ਗਲਤ===> ਇਹ ਕਿਸੇ ਵੀ ਨੰਬਰ ਦੇ ਨਾਲ ਸਹੀ ਕ੍ਰਮਬੱਧਰੀ ਕਾਰਵਾਈਆਂ ਕਰਨ ਲਈ ਸੰਭਵ ਨਹੀਂ ਹੈ।""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,pan_Guru,python,"
def exchange(lst1, lst2):
    """"""ਇਸ ਸਮੱਸਿਆ ਵਿੱਚ, ਤੁਸੀਂ ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰੋਗੇ ਜੋ ਸੰਖਿਆਵਾਂ ਦੀਆਂ ਦੋ ਸੂਚੀਆਂ ਲੈਂਦਾ ਹੈ, ਅਤੇ ਇਹ ਨਿਰਧਾਰਤ ਕਰਦਾ ਹੈ ਕਿ ਕੀ ਉਹਨਾਂ ਦੇ ਵਿਚਕਾਰ ਤੱਤਾਂ ਦਾ ਆਦਾਨ-ਪ੍ਰਦਾਨ ਕਰਨਾ ਸੰਭਵ ਹੈ ਤਾਂ ਜੋ lst1 ਨੂੰ ਸਿਰਫ ਜੋੜਿਆਂ ਦੀ ਸੂਚੀ ਬਣਾਇਆ ਜਾ ਸਕੇ। lst1 ਅਤੇ lst2 ਦੇ ਵਿਚਕਾਰ ਵਟਾਂਦਰੇ ਵਾਲੇ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਦੀ ਕੋਈ ਸੀਮਾ ਨਹੀਂ ਹੈ। ਜੇ lst1 ਅਤੇ lst2 ਦੇ ਵਿਚਕਾਰ ਤੱਤਾਂ ਦਾ ਆਦਾਨ-ਪ੍ਰਦਾਨ ਕਰਨਾ ਸੰਭਵ ਹੈ ਤਾਂ ਜੋ lst1 ਦੇ ਸਾਰੇ ਤੱਤ ਜੋੜਿਆਂ ਦੇ ਹੋਣ, ""YES"" ਵਾਪਸ ਕਰੋ। ਨਹੀਂ ਤਾਂ, ""NO"" ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣ ਲਈਃ exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""YES"" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" ਇਹ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਕਿ ਇੰਪੁੱਟ ਸੂਚੀਆਂ ਗੈਰ-ਖਾਲੀ ਹੋਣਗੀਆਂ। """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,pan_Guru,python,"
def histogram(test):
    """"""ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ ਜੋ ਸਪੇਸ ਵੱਖ ਕੀਤੇ ਛੋਟੇ ਅੱਖਰਾਂ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ, ਸਭ ਤੋਂ ਵੱਧ ਦੁਹਰਾਉਣ ਵਾਲੇ ਅੱਖਰ ਦਾ ਸ਼ਬਦਕੋਸ਼ ਵਾਪਸ ਕਰੋ ਅਤੇ ਇਸਦੀ ਅਨੁਸਾਰੀ ਗਿਣਤੀ ਸ਼ਾਮਲ ਕਰੋ. ਜੇ ਕਈ ਅੱਖਰਾਂ ਦੀ ਇੱਕੋ ਜਿਹੀ ਘਟਨਾ ਹੈ, ਤਾਂ ਉਨ੍ਹਾਂ ਸਾਰਿਆਂ ਨੂੰ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ ਹਿਸਟੋਗ੍ਰਾਮ (('a b c') == {'a': 1, 'b': 1, 'c': 1} ਹਿਸਟੋਗ੍ਰਾਮ (('a b b a') == {'a': 2, 'b': 2} ਹਿਸਟੋਗ੍ਰਾਮ (('a b c a b') == {'a': 2, 'b': 2} ਹਿਸਟੋਗ੍ਰਾਮ (('b b a b') == {'b 4}': ਹਿਸਟੋਗ੍ਰਾਮ (('a') == {'b 4}'}) == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,pan_Guru,python,"
def reverse_delete(s,c):
    """"""ਟਾਸਕ ਸਾਨੂੰ ਦੋ ਸਤਰਾਂ s ਅਤੇ c ਦਿੱਤੀਆਂ ਗਈਆਂ ਹਨ, ਤੁਹਾਨੂੰ s ਵਿੱਚ ਸਾਰੇ ਅੱਖਰਾਂ ਨੂੰ ਮਿਟਾਉਣਾ ਪਵੇਗਾ ਜੋ c ਵਿੱਚ ਕਿਸੇ ਵੀ ਅੱਖਰ ਦੇ ਬਰਾਬਰ ਹਨ ਫਿਰ ਜਾਂਚ ਕਰੋ ਕਿ ਕੀ ਨਤੀਜਾ ਸਤਰ ਪਾਲੀਂਡਰੋਮ ਹੈ. ਇੱਕ ਸਤਰ ਨੂੰ ਪਾਲੀਂਡਰੋਮ ਕਿਹਾ ਜਾਂਦਾ ਹੈ ਜੇ ਇਹ ਅੱਗੇ ਦੇ ਨਾਲ ਉਸੇ ਤਰ੍ਹਾਂ ਪਿੱਛੇ ਪੜ੍ਹਦਾ ਹੈ. ਤੁਹਾਨੂੰ ਜਾਂਚ ਲਈ ਨਤੀਜਾ ਸਤਰ ਅਤੇ True/False ਵਾਲੀ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਉਦਾਹਰਨ ਲਈ s = ""abcde"", c = ""ae"", ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('bcd',False) ਲਈ s = ""abcdef"", c = ""b"" ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('acdef',False) ਲਈ s = ""abcdedcba"", c = ""ab"", ਨਤੀਜਾ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ('cdedc',True) """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,pan_Guru,python,"
def odd_count(lst):
    """"""ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਜਿੱਥੇ ਹਰ ਸਤਰ ਸਿਰਫ ਅੰਕ ਹਨ, ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਆਉਟਪੁੱਟ ਦੇ ਹਰੇਕ ਤੱਤ i ਨੂੰ ""ਇਨਪੁਟ ਦੇ ਸਤਰ i ਵਿੱਚ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ"" ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ ਜਿੱਥੇ ਸਾਰੇ i ਨੂੰ ਇੰਪੁੱਟ ਦੇ i'th ਸਤਰ ਵਿੱਚ ਅਜੀਬ ਅੰਕ ਦੀ ਗਿਣਤੀ ਨਾਲ ਬਦਲਿਆ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈ. >>> odd_count['1234567']) [""4n str4ng 4 ਦੇ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ 4nput.""] >>> odd_count['3',""111111""]) [""1n str1ng 1 ਦੇ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ 1nput. "","" 8n str8ng 8 ਦੇ ਅਜੀਬ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ 8nput. ""]""""""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,pan_Guru,python,"
def minSubArraySum(nums):
    """"""ਪੂਰਨ ਅੰਕ n ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, n ਦੇ ਕਿਸੇ ਵੀ ਗੈਰ-ਖਾਲੀ ਸਬ-ਐਰੇ ਦਾ ਘੱਟੋ ਘੱਟ ਜੋੜ ਲੱਭੋ. ਉਦਾਹਰਨ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,pan_Guru,python,"
def max_fill(grid, capacity):
    import math
    """"""ਤੁਹਾਨੂੰ ਖੂਹਾਂ ਦੀ ਇੱਕ ਆਇਤਾਕਾਰ ਗਰਿੱਡ ਦਿੱਤੀ ਗਈ ਹੈ. ਹਰ ਕਤਾਰ ਇੱਕ ਸਿੰਗਲ ਖੂਹ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ, ਅਤੇ ਹਰ ਇੱਕ ਕਤਾਰ ਵਿੱਚ 1 ਪਾਣੀ ਦੀ ਇੱਕ ਇਕਾਈ ਨੂੰ ਦਰਸਾਉਂਦੀ ਹੈ. ਹਰੇਕ ਖੂਹ ਵਿੱਚ ਇੱਕ ਸੰਬੰਧਿਤ ਬਾਲਟੀ ਹੁੰਦੀ ਹੈ ਜਿਸਦੀ ਵਰਤੋਂ ਇਸ ਤੋਂ ਪਾਣੀ ਕੱractਣ ਲਈ ਕੀਤੀ ਜਾ ਸਕਦੀ ਹੈ, ਅਤੇ ਸਾਰੀਆਂ ਬਾਲਟੀਆਂ ਦੀ ਇਕੋ ਸਮਰੱਥਾ ਹੁੰਦੀ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਖੂਹਾਂ ਨੂੰ ਖਾਲੀ ਕਰਨ ਲਈ ਬਾਲਟੀਆਂ ਦੀ ਵਰਤੋਂ ਕਰਨਾ ਹੈ. ਬਾਲਟੀਆਂ ਨੂੰ ਘੱਟ ਕਰਨ ਲਈ ਤੁਹਾਨੂੰ ਕਿੰਨੀ ਵਾਰ ਲੋੜੀਂਦੀ ਹੈ ਦੀ ਗਿਣਤੀ ਕਰੋ. ਉਦਾਹਰਣ 1: ਇਨਪੁਟਃ ਗਰਿੱਡਃ [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 ਆਉਟਪੁੱਟਃ 6 ਉਦਾਹਰਣ 2: ਇਨਪੁਟਃ ਗਰਿੱਡਃ [[0,0,1,1], [0,0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 ਆਉਟਪੁੱਟਃ 5 ਉਦਾਹਰਣਃ [[ਇਨਪੁਟ: :0,0], [0,0,0]] bucket_capacity: 5 ਆਉਟਪੁੱਟਃ 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * * 1 * 1 * * * * * 1 * 2 * * * * * * * * * * * 2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,pan_Guru,python,"
def sort_array(arr):
    """"""ਇਸ ਕਾਟਾ ਵਿੱਚ, ਤੁਹਾਨੂੰ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਨੂੰ ਉਨ੍ਹਾਂ ਦੀ ਬਾਈਨਰੀ ਪ੍ਰਤੀਨਿਧਤਾ ਵਿੱਚ ਉਭਰਦੇ ਕ੍ਰਮ ਵਿੱਚ ਇੱਕ ਦੀ ਗਿਣਤੀ ਦੇ ਅਨੁਸਾਰ ਕ੍ਰਮਬੱਧ ਕਰਨਾ ਹੈ। ਇੱਕ ਦੀ ਸਮਾਨ ਗਿਣਤੀ ਲਈ, ਦਸ਼ਮਲਵ ਮੁੱਲ ਦੇ ਅਧਾਰ ਤੇ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਇਸ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਲਾਗੂ ਕੀਤਾ ਜਾਣਾ ਚਾਹੀਦਾ ਹੈਃ >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,pan_Guru,python,"
def select_words(s, n):
    """"""ਇੱਕ ਸਤਰ s ਅਤੇ ਇੱਕ ਕੁਦਰਤੀ ਸੰਖਿਆ n ਦਿੱਤੀ ਗਈ ਹੈ, ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਾਗੂ ਕਰਨ ਦਾ ਕੰਮ ਦਿੱਤਾ ਗਿਆ ਹੈ ਜੋ ਸਤਰ s ਤੋਂ ਸਾਰੇ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਬਿਲਕੁਲ n ਵਿਅੰਗਾਤਮਕ ਹੁੰਦੇ ਹਨ, ਤਾਂ ਜੋ ਇਹ ਸ਼ਬਦ ਸਤਰ s ਵਿੱਚ ਦਿਖਾਈ ਦੇਣ। ਜੇ ਸਤਰ s ਖਾਲੀ ਹੈ ਤਾਂ ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਖਾਲੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। ਨੋਟਃ ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਇਨਪੁਟ ਸਤਰ ਵਿੱਚ ਸਿਰਫ ਅੱਖਰ ਅਤੇ ਸਪੇਸ ਹਨ। ਉਦਾਹਰਣਃ select_words ""ਮੈਰੀ ਕੋਲ ਇੱਕ ਛੋਟਾ ਲੇਲਾ ਸੀ"", 4) ==> [""little""] select_words ""ਮੈਰੀ ਕੋਲ ਇੱਕ ਛੋਟਾ ਲੇਲਾ ਸੀ"", 3) ==> [""ਮੈਰੀ"", ""ਲੇਲਾ""] select_words ""ਸਧਾਰਨ ਚਿੱਟਾ ਸਪੇਸ"", 2) ==> [] select_words ""ਹੈਲੋ ਵਰਲਡ"", 4) ==> [""world""] select_words ""ਅੰਕਲ ਸੈਮ"", 3) ==> [""ਅੰਕਲ""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,pan_Guru,python,"
def get_closest_vowel(word):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਸ਼ਬਦ ਦਿੱਤਾ ਗਿਆ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਸੱਜੇ ਪਾਸੇ ਤੋਂ ਦੋ ਧੁਨੀ ਦੇ ਵਿਚਕਾਰ ਖੜ੍ਹੇ ਸਭ ਤੋਂ ਨਜ਼ਦੀਕੀ ਸਵਰ ਨੂੰ ਲੱਭਣਾ ਹੈ (ਕੇਸ ਸੰਵੇਦਨਸ਼ੀਲ). ਸ਼ੁਰੂ ਅਤੇ ਅੰਤ ਵਿੱਚ ਸਵਰਾਂ ਦੀ ਗਿਣਤੀ ਨਹੀਂ ਕੀਤੀ ਜਾਂਦੀ. ਜੇ ਤੁਸੀਂ ਉਪਰੋਕਤ ਸ਼ਰਤ ਨੂੰ ਪੂਰਾ ਕਰਨ ਵਾਲੇ ਕੋਈ ਵੀ ਸਵਰ ਨਹੀਂ ਲੱਭਦੇ ਤਾਂ ਖਾਲੀ ਸਤਰ ਵਾਪਸ ਕਰੋ. ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਦਿੱਤੀ ਗਈ ਸਤਰ ਵਿੱਚ ਕੇਵਲ ਅੰਗਰੇਜ਼ੀ ਅੱਖਰ ਹਨ. ਉਦਾਹਰਨਃ get_closest_vowel ((""yogurt"") ==> ""u"" get_closest_vowel ((""F"") ==> ""U"" get_closest_vowel ((""quick"") ==> """" get_closest_vowel"" ((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,pan_Guru,python,"
def match_parens(lst):
    '''ਤੁਹਾਨੂੰ ਦੋ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਦੋਵੇਂ ਸਤਰਾਂ ਵਿੱਚ ਸਿਰਫ ਖੁੱਲੇ ਪੈਰਾੰਟੈਸੇਜ਼ '(' ਜਾਂ ਬੰਦ ਪੈਰਾੰਟੈਸੇਜ਼ ') ' ਸ਼ਾਮਲ ਹਨ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਜਾਂਚਣਾ ਹੈ ਕਿ ਕੀ ਦੋ ਸਤਰਾਂ ਨੂੰ ਕਿਸੇ ਕ੍ਰਮ ਵਿੱਚ ਜੋੜਨਾ ਸੰਭਵ ਹੈ, ਕਿ ਨਤੀਜਾ ਸਤਰ ਚੰਗੀ ਹੋਵੇਗੀ. ਇੱਕ ਸਤਰ S ਨੂੰ ਚੰਗੀ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਜੇ S ਵਿੱਚ ਸਾਰੇ ਪੈਰਾੰਟੈਸੇ ਸੰਤੁਲਿਤ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ ਸਤਰ '((())' ਚੰਗੀ ਹੈ, ਜਦੋਂ ਕਿ ਸਤਰ '()) 'ਨਹੀਂ ਹੈ. ਜੇ ਇੱਕ ਚੰਗੀ ਸਤਰ ਬਣਾਉਣ ਦਾ ਕੋਈ ਤਰੀਕਾ ਹੈ, ਤਾਂ 'ਹਾਂ' ਵਾਪਸ ਕਰੋ, ਅਤੇ ਨਹੀਂ ਤਾਂ 'ਨਹੀਂ' ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ match_parens[('() ', ') ']) == 'ਹਾਂ' match_parens[(') ', ') ']) == 'ਨਹੀਂ' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,pan_Guru,python,"
def maximum(arr, k):
    """"""ਪੂਰਨ ਅੰਕ ਅਤੇ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ k ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਐਰੇ ਵਿੱਚ ਵੱਧ ਤੋਂ ਵੱਧ k ਨੰਬਰਾਂ ਦੇ ਨਾਲ ਲੰਬਾਈ k ਦੀ ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਨ 1: ਇਨਪੁਟਃ arr = [-3, -4, 5], k = 3 ਆਉਟਪੁੱਟਃ [-4, -3, 5] ਉਦਾਹਰਨ 2: ਇਨਪੁਟਃ arr = [4, -4, 4], k = 2 ਆਉਟਪੁੱਟਃ [4, 4] ਉਦਾਹਰਨ 3: ਇਨਪੁਟਃ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 ਆਉਟਪੁੱਟਃ [2] ਨੋਟਃ 1. ਐਰੇ ਦੀ ਲੰਬਾਈ [1, 1000] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹੋਵੇਗੀ. 2. ਐਰੇ ਦੇ ਤੱਤ [-1000, 1000] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹੋਣਗੇ. 3. 0 <= k <= len ((arr) """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,pan_Guru,python,"
def solution(lst):
    """"""ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਸਾਰੇ ਅਜੀਬ ਤੱਤਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰੋ ਜੋ ਕਿ ਵੀ ਅਹੁਦਿਆਂ 'ਤੇ ਹਨ. ਉਦਾਹਰਣ ਹੱਲ (([5, 8, 7, 1]) ==> 12 ਹੱਲ (([3, 3, 3, 3, 3]) ==> 9 ਹੱਲ (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,pan_Guru,python,"
def add_elements(arr, k):
    """"""ਪੂਰਨ ਅੰਕ arr ਅਤੇ ਪੂਰਨ ਅੰਕ k ਦੀ ਇੱਕ ਗੈਰ-ਖਾਲੀ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ, ਐਰ ਦੇ ਪਹਿਲੇ k ਤੱਤਾਂ ਦੇ ਵੱਧ ਤੋਂ ਵੱਧ ਦੋ ਅੰਕਾਂ ਵਾਲੇ ਤੱਤਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ ਇਨਪੁਟਃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 ਆਉਟਪੁੱਟਃ 24 # 21 + 3 ਦੇ ਜੋੜ ਸੰਜਮਃ 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)""""""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,pan_Guru,python,"
def get_odd_collatz(n):
    """"""ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇੱਕ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਕਾਲੈਟਜ਼ ਕ੍ਰਮ ਵਿੱਚ ਅਜੀਬ ਨੰਬਰ ਹਨ. ਕੋਲੈਟਜ਼ ਅਨੁਮਾਨ ਗਣਿਤ ਵਿੱਚ ਇੱਕ ਅਨੁਮਾਨ ਹੈ ਜੋ ਹੇਠ ਲਿਖੇ ਅਨੁਸਾਰ ਪਰਿਭਾਸ਼ਿਤ ਕ੍ਰਮ ਨਾਲ ਸਬੰਧਤ ਹੈਃ ਕਿਸੇ ਵੀ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਨਾਲ ਸ਼ੁਰੂ ਕਰੋ. ਫਿਰ ਹਰੇਕ ਅਵਧੀ ਨੂੰ ਪਿਛਲੇ ਅਵਧੀ ਤੋਂ ਪ੍ਰਾਪਤ ਕੀਤਾ ਜਾਂਦਾ ਹੈ ਜਿਵੇਂ ਕਿਃ ਜੇ ਪਿਛਲੀ ਅਵਧੀ ਜਮ੍ਹਾ ਹੈ, ਤਾਂ ਅਗਲੀ ਅਵਧੀ ਪਿਛਲੀ ਅਵਧੀ ਦਾ ਅੱਧਾ ਹੈ. ਜੇ ਪਿਛਲੀ ਅਵਧੀ ਅਜੀਬ ਹੈ, ਤਾਂ ਅਗਲੀ ਅਵਧੀ ਪਿਛਲੀ ਅਵਧੀ ਦੇ 3 ਗੁਣਾ ਹੈ ਅਤੇ 1. ਅਨੁਮਾਨ ਇਹ ਹੈ ਕਿ n ਦਾ ਕੋਈ ਵੀ ਮੁੱਲ ਹੋਵੇ, ਕ੍ਰਮ ਹਮੇਸ਼ਾਂ 1 ਤੇ ਪਹੁੰਚੇਗਾ. ਨੋਟਃ 1. ਕੋਲੈਟਜ਼ (((1) [1] ਹੈ. 2. ਵਾਪਸ ਕੀਤੀ ਸੂਚੀ ਨੂੰ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕੀਤਾ ਗਿਆ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ get_odd_collatz ((5) ਵਾਪਸ ਕਰਦਾ ਹੈ [1, 5] 5 ਲਈ ਕੋਲੈਟਜ਼ ਕ੍ਰਮ [5, 8, 16, 4, 2, 1], ਇਸ ਲਈ ਅਜੀਬ ਨੰਬਰ ਸਿਰਫ 1 ਅਤੇ 5 ਹਨ. """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,pan_Guru,python,"
def valid_date(date):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖਣਾ ਹੈ ਜੋ ਇੱਕ ਦਿੱਤੀ ਗਈ ਤਾਰੀਖ ਸਤਰ ਨੂੰ ਪ੍ਰਮਾਣਿਤ ਕਰਦਾ ਹੈ ਅਤੇ ਸਹੀ ਵਾਪਿਸ ਕਰਦਾ ਹੈ ਜੇ ਤਾਰੀਖ ਪ੍ਰਮਾਣਿਤ ਹੈ ਨਹੀਂ ਤਾਂ ਗਲਤ ਹੈ. ਤਾਰੀਖ ਪ੍ਰਮਾਣਿਤ ਹੈ ਜੇ ਹੇਠ ਲਿਖੇ ਸਾਰੇ ਨਿਯਮ ਸੰਤੁਸ਼ਟ ਹਨਃ 1. ਤਾਰੀਖ ਸਤਰ ਖਾਲੀ ਨਹੀਂ ਹੈ. 2. ਮਹੀਨਿਆਂ ਲਈ ਦਿਨ ਦੀ ਗਿਣਤੀ 1 ਤੋਂ ਘੱਟ ਜਾਂ 31 ਦਿਨਾਂ ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੈ 1,3,5,7,8,10,12. ਅਤੇ ਮਹੀਨਿਆਂ ਲਈ ਦਿਨ ਦੀ ਗਿਣਤੀ 1 ਤੋਂ ਘੱਟ ਜਾਂ 30 ਦਿਨਾਂ ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੈ 4,6,9,11. ਅਤੇ, ਮਹੀਨੇ ਲਈ ਦਿਨ ਦੀ ਗਿਣਤੀ 1 ਤੋਂ ਘੱਟ ਜਾਂ 29 ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੈ 2. 3. ਮਹੀਨੇ 1 ਤੋਂ ਘੱਟ ਜਾਂ 12 ਤੋਂ ਵੱਧ ਨਹੀਂ ਹੋਣੇ ਚਾਹੀਦੇ 4. ਤਾਰੀਖ ਫਾਰਮੈਟ ਵਿੱਚ ਹੋਣੀ ਚਾਹੀਦੀ ਹੈਃ mm-dd-yyyy ਉਦਾਹਰਣ ਲਈਃ valid_date (('03-11-2000') => True_valid_date (('15-01-2012') => False valid_date (('04-01-2040') => False_valid_date (('06-04-2020') => True_valid_date (('06/04/2020') => False""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,pan_Guru,python,"
def split_words(txt):
    '''ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ, ਚਿੱਟੇ ਸਥਾਨ ਤੇ ਵੰਡਿਆ ਸ਼ਬਦਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰੋ, ਜੇ ਪਾਠ ਵਿੱਚ ਕੋਈ ਚਿੱਟੇ ਸਥਾਨ ਮੌਜੂਦ ਨਹੀਂ ਹਨ ਤਾਂ ਤੁਹਾਨੂੰ ਕਾਮਿਆਂ 'ਤੇ ਵੰਡਣਾ ਚਾਹੀਦਾ ਹੈ,' ਜੇ ਕੋਈ ਕਾਮੇ ਮੌਜੂਦ ਨਹੀਂ ਹਨ ਤਾਂ ਤੁਹਾਨੂੰ ਅਲਫ਼ਾਬੈੱਟ ਵਿੱਚ ਅਜੀਬ ਕ੍ਰਮ ਦੇ ਨਾਲ ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ, ਆਰਡਰ (a) = 0, ਆਰਡਰ (b) = 1, . . . ਆਰਡਰ (z) = 25 ਉਦਾਹਰਣ ਵੰਡ_ ਸ਼ਬਦ (ਹੈਲੋ ਵਿਸ਼ਵ!'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,pan_Guru,python,"
def is_sorted(lst):
    '''ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਵਾਪਸ ਕਰੋ ਕਿ ਕੀ ਉਹ ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕੀਤੇ ਗਏ ਹਨ ਜਾਂ ਨਹੀਂ. ਜੇ ਸੂਚੀ ਵਿੱਚ ਇੱਕੋ ਨੰਬਰ ਦੀ 1 ਤੋਂ ਵੱਧ ਡੁਪਲੀਕੇਟ ਹੈ, ਤਾਂ ਗਲਤ ਵਾਪਸ ਕਰੋ. ਕੋਈ ਨਕਾਰਾਤਮਕ ਨੰਬਰ ਅਤੇ ਸਿਰਫ ਪੂਰਨ ਅੰਕ ਨਾ ਮੰਨੋ. ਉਦਾਹਰਣ is_sorted ((([5]) â -> ਸੱਚ ਹੈ is_sorted (([1, 2, 3, 4, 5]) â -> ਸੱਚ ਹੈ is_sorted (([1, 2, 3, 4, 5, 6]) â -> ਝੂਠ ਹੈ is_sorted (([1, 2, 3, 4, 5, 6, 7]) â -> ਸੱਚ ਹੈ is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> ਸੱਚ ਹੈ is_sorted (([1, 3, 2, 4, 5, 6, 7]) â -> ਝੂਠ ਹੈ is_sorted (([1, 2, 2, 3, 3, 4]) â -> ਸੱਚ ਹੈ is_sorted (([1, 2, 2, 2, 3, 4 -> ਝੂਠ ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,pan_Guru,python,"
def intersection(interval1, interval2):
    """"""ਤੁਹਾਨੂੰ ਦੋ ਅੰਤਰਾਲ ਦਿੱਤੇ ਗਏ ਹਨ, ਜਿੱਥੇ ਹਰ ਅੰਤਰਾਲ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਜੋੜੀ ਹੈ। ਉਦਾਹਰਣ ਲਈ, ਅੰਤਰਾਲ = (ਸ਼ੁਰੂਆਤ, ਅੰਤ) = (1, 2). ਦਿੱਤੇ ਗਏ ਅੰਤਰਾਲ ਬੰਦ ਹਨ ਜਿਸਦਾ ਮਤਲਬ ਹੈ ਕਿ ਅੰਤਰਾਲ (ਸ਼ੁਰੂਆਤ, ਅੰਤ) ਵਿੱਚ ਸ਼ੁਰੂਆਤ ਅਤੇ ਅੰਤ ਦੋਵੇਂ ਸ਼ਾਮਲ ਹਨ। ਹਰੇਕ ਦਿੱਤੇ ਗਏ ਅੰਤਰਾਲ ਲਈ, ਇਹ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਕਿ ਇਸਦੀ ਸ਼ੁਰੂਆਤ ਇਸ ਦੇ ਅੰਤ ਦੇ ਬਰਾਬਰ ਜਾਂ ਘੱਟ ਹੈ। ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਇਨ੍ਹਾਂ ਦੋਵਾਂ ਅੰਤਰਾਲਾਂ ਦੀ ਲੜੀ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਇਮ ਨੰਬਰ ਹੈ। ਉਦਾਹਰਣ ਵਜੋਂ, ਅੰਤਰਾਲਾਂ (1, 3), (2, 4) ਦਾ ਅੰਤਰਾਲ (2, 3) ਹੈ, ਜਿਸਦੀ ਲੰਬਾਈ 1 ਹੈ, ਜੋ ਕਿ ਇੱਕ ਪ੍ਰਾਇਮ ਨੰਬਰ ਨਹੀਂ ਹੈ। ਜੇ ਅੰਤਰਾਲ ਦੀ ਲੰਬਾਈ ਇੱਕ ਪ੍ਰਾਇਮ ਨੰਬਰ ਹੈ, ਤਾਂ ""ਹਾਂ"" ਵਾਪਸ ਕਰੋ, ਨਹੀਂ ਤਾਂ ""ਨਹੀਂ"" ਵਾਪਸ ਕਰੋ। ਜੇ ਦੋ ਅੰਤਰਾਲ ਨਹੀਂ ਕੱਟਦੇ, ਤਾਂ ""ਨਹੀਂ"" ਵਾਪਸ ਕਰੋ। [input/output] ਨਮੂਨੇਃ ਅੰਤਰਾਲ (((1, 2), (2, 3) ==> ""ਇੰਟਰਸੈਕਸ਼ਨ-1, ((1), 4) ==> ""ਇੰਟਰਸੈਕਸ਼ਨ (0,"" - 5), ((1, (((5, ""ਈਐਸ"",))""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,pan_Guru,python,"
def prod_signs(arr):
    """"""ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੀ ਇੱਕ ਐਰੇ ਦਿੱਤੀ ਗਈ ਹੈ ਅਤੇ ਤੁਹਾਨੂੰ ਪੂਰਨ ਅੰਕ ਦੇ ਅਕਾਰ ਦੇ ਜੋੜ ਨੂੰ ਐਰੇ ਵਿੱਚ ਹਰੇਕ ਨੰਬਰ ਦੇ ਸਾਰੇ ਸੰਕੇਤਾਂ ਦੇ ਉਤਪਾਦ ਦੁਆਰਾ ਗੁਣਾ ਕਰਨ ਦੀ ਲੋੜ ਹੈ, ਜਿਸਦਾ ਪ੍ਰਤੀਨਿਧਤਾ 1, -1 ਜਾਂ 0 ਦੁਆਰਾ ਕੀਤੀ ਜਾਂਦੀ ਹੈ. ਨੋਟਃ ਖਾਲੀ ਐਰੇ ਲਈ ਕੋਈ ਨਹੀਂ ਵਾਪਿਸ ਨਹੀਂ ਆਉਂਦਾ. ਉਦਾਹਰਣਃ >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == ਕੋਈ ਨਹੀਂ""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,pan_Guru,python,"
def minPath(grid, k):
    """"""N ਕਤਾਰਾਂ ਅਤੇ N ਕਾਲਮਾਂ (N >= 2) ਅਤੇ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ k ਦੇ ਨਾਲ ਇੱਕ ਗਰਿੱਡ ਦਿੱਤੀ ਗਈ ਹੈ, ਗਰਿੱਡ ਦੇ ਹਰੇਕ ਸੈੱਲ ਵਿੱਚ ਇੱਕ ਮੁੱਲ ਹੁੰਦਾ ਹੈ. [1, N * N] ਦੀ ਸੀਮਾ ਵਿੱਚ ਹਰ ਪੂਰਨ ਅੰਕ ਗਰਿੱਡ ਦੇ ਸੈੱਲਾਂ ਤੇ ਬਿਲਕੁਲ ਇੱਕ ਵਾਰ ਦਿਖਾਈ ਦਿੰਦਾ ਹੈ. ਤੁਹਾਨੂੰ ਗਰਿੱਡ ਵਿੱਚ ਲੰਬਾਈ k ਦਾ ਘੱਟੋ ਘੱਟ ਮਾਰਗ ਲੱਭਣਾ ਪਵੇਗਾ. ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਸੈੱਲ ਤੋਂ ਸ਼ੁਰੂ ਕਰ ਸਕਦੇ ਹੋ, ਅਤੇ ਹਰ ਕਦਮ ਵਿੱਚ ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਗੁਆਂਢੀ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ ਜੋ ਤੁਹਾਡੇ ਨਾਲ ਇੱਕ ਕਿਨਾਰੇ ਨੂੰ ਸਾਂਝਾ ਕਰਦੇ ਹਨ ਮੌਜੂਦਾ ਸੈੱਲ. ਕਿਰਪਾ ਕਰਕੇ ਨੋਟ ਕਰੋ ਕਿ k ਦੀ ਲੰਬਾਈ ਦਾ ਮਾਰਗ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਬਿਲਕੁਲ k ਸੈੱਲਾਂ (ਜ਼ਰੂਰੀ ਤੌਰ ਤੇ ਵੱਖਰੇ ਨਹੀਂ) ਦਾ ਦੌਰਾ ਕਰਨਾ. ਤੁਸੀਂ ਗਰਿੱਡ ਤੋਂ ਬਾਹਰ ਨਹੀਂ ਜਾ ਸਕਦੇ. ਇੱਕ ਮਾਰਗ A (ਲੰਬਾਈ k) ਨੂੰ ਇੱਕ ਮਾਰਗ B (ਲੰਬਾਈ k) ਤੋਂ ਘੱਟ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਜੇ A ਅਤੇ B (ਉਨ੍ਹਾਂ ਨੂੰ lA_st ਅਤੇ l_stB) ਕਹਿੰਦੇ ਹਨ) ਦੇ ਕ੍ਰਮਬੱਧ ਸੂਚੀਬੱਧ ਸੂਚੀਬੱਧ ਕਰਨ ਤੋਂ ਬਾਅਦ, l_stA_st ਲੈਕਸੀਵਿਕ ਤੌਰ ਤੇ l_stB_st ਤੋਂ ਘੱਟ ਹੈ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਗੁਆਂਢੇ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਗੁਆਂਢੇ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਦੂਜੇ ਸ਼ਬਦਾਂ ਵਿੱਚ, ਤੁਸੀਂ ਕਿਸੇ ਵੀ ਸੈੱਲਾਂ ਵਿੱਚ ਜਾ ਸਕਦੇ ਹੋ, ਕਿਰਪਾ ਕਰਕੇ ਨੋਟ ਕਰੋ ਕਿ k_ ਕਿਰਪਾ ਕਰਕੇ ਨੋਟ ਕਰੋ ਕਿ k ਦੀ ਲੰਬੱਧਕ ਲੰਬੱਧਕ ਲੰਬਾਈ ਦਾ ਮਤਲਬ ਹੈ ਕਿ ਤੁਸੀਂ ਬਿਲਕੁਲ k ਸੈੱਲਾਂ (ਨ) ਦੇ ਨਾਲ ਇੱਕ ਕਿਨ ਦਾ ਦੌਰਾ ਕੀਤਾ ਹੈ (ਲੋਡ ਤੋਂ ਬਿਲਕੁਲ k ਸੈੱਲਾਂ ਦੇ ਨਾਲ) (ਨ ਤੋਂ ਵੱਖਰੇ ਦਾ ਮਤਲਬ ਹੈ) (ਨ ਨਹੀਂ ਹੈ) (ਤੁਹਾਈ = k, k, k = k, k, k, k, k, k, k, k, k, k, k, k, k, j, j, j, j, j, j, j, j, j, j, j, j, j, k, k, k, k, k, k, [1, [1, [4, [1, [1, j, l""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,pan_Guru,python,"
def tri(n):
    """"""ਹਰ ਕੋਈ ਫਿਬੋਨਾਚੀ ਕ੍ਰਮ ਨੂੰ ਜਾਣਦਾ ਹੈ, ਇਸ ਨੂੰ ਪਿਛਲੇ ਦੋ ਸਦੀਆਂ ਵਿੱਚ ਗਣਿਤ ਵਿਗਿਆਨੀਆਂ ਦੁਆਰਾ ਡੂੰਘਾਈ ਨਾਲ ਅਧਿਐਨ ਕੀਤਾ ਗਿਆ ਸੀ. ਹਾਲਾਂਕਿ, ਜੋ ਲੋਕ ਨਹੀਂ ਜਾਣਦੇ ਉਹ ਟ੍ਰਿਬੋਨੈਚੀ ਕ੍ਰਮ ਹੈ. ਟ੍ਰਿਬੋਨੈਚੀ ਕ੍ਰਮ ਦੀ ਪਰਿਭਾਸ਼ਾ ਦੁਹਰਾਓ ਦੁਆਰਾ ਕੀਤੀ ਗਈ ਹੈਃ tri(1) = 3 tri(n) = 1 + n / 2, ਜੇ n ਜੂੜ ਹੈ. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), ਜੇ n ਅਜੀਬ ਹੈ. ਉਦਾਹਰਣ ਲਈਃ tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 ਤੁਹਾਨੂੰ ਇੱਕ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤੁਹਾਨੂੰ ਟ੍ਰਿਬੋਨੈਚੀ ਕ੍ਰਮ ਦੇ ਪਹਿਲੇ n + 1 ਨੰਬਰ ਦੀ ਇੱਕ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਪਵੇਗੀ. ਉਦਾਹਰਣਃ tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,pan_Guru,python,"
def digits(n):
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ, ਅਜੀਬ ਅੰਕ ਦੇ ਉਤਪਾਦ ਨੂੰ ਵਾਪਸ ਕਰੋ. 0 ਵਾਪਸ ਕਰੋ ਜੇ ਸਾਰੇ ਅੰਕ ਵੀ ਹਨ. ਉਦਾਹਰਣ ਲਈਃ ਅੰਕ                                                                                                                                                                                                                                             """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,pan_Guru,python,"
def is_nested(string):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਸਤਰ ਨੂੰ ਇੰਪੁੱਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਸਿਰਫ ਵਰਗ ਬਰੈਕਟ ਹੁੰਦੇ ਹਨ. ਫੰਕਸ਼ਨ ਨੂੰ ਸਹੀ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਜੇ ਬਰੈਕਟਾਂ ਦਾ ਇੱਕ ਵੈਧ ਉਪ-ਕ੍ਰਮ ਹੈ ਜਿੱਥੇ ਘੱਟੋ ਘੱਟ ਇੱਕ ਬਰੈਕਟ ਉਪ-ਕ੍ਰਮ ਵਿੱਚ ਘੁੰਮਿਆ ਹੋਇਆ ਹੈ. is_nested '[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[]]') â -> True is_nested'[[]]]]]]]]]]'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,pan_Guru,python,"

def sum_squares(lst):
    """"""ਤੁਹਾਨੂੰ ਨੰਬਰ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ. ਤੁਹਾਨੂੰ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਵਿੱਚ ਵਰਗ ਨੰਬਰ ਦੇ ਜੋੜ ਨੂੰ ਵਾਪਸ ਕਰਨ ਦੀ ਲੋੜ ਹੈ, ਸੂਚੀ ਵਿੱਚ ਹਰੇਕ ਤੱਤ ਨੂੰ ਉਪਰਲੇ int ((Ceiling) ਤੇ ਪਹਿਲਾਂ ਗੋਲ ਕਰੋ. ਉਦਾਹਰਣਃ lst = [1,2,3] ਲਈ ਆਉਟਪੁੱਟ 14 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [1,4,9] ਲਈ ਆਉਟਪੁੱਟ 98 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [1,3,5,7] ਲਈ ਆਉਟਪੁੱਟ 84 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [1.4,4.2,0] ਲਈ ਆਉਟਪੁੱਟ 29 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [-2.4,1,1] ਲਈ ਆਉਟਪੁੱਟ 6 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,pan_Guru,python,"
def check_if_last_char_is_a_letter(txt):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਸਹੀ ਵਾਪਿਸ ਕਰਦਾ ਹੈ ਜੇਕਰ ਇੱਕ ਦਿੱਤੀ ਗਈ ਸਤਰ ਦਾ ਆਖਰੀ ਅੱਖਰ ਇੱਕ ਵਰਣਮਾਲਾ ਅੱਖਰ ਹੈ ਅਤੇ ਇੱਕ ਸ਼ਬਦ ਦਾ ਹਿੱਸਾ ਨਹੀਂ ਹੈ, ਅਤੇ ਹੋਰ ਗਲਤ ਹੈ। ਨੋਟਃ ""ਸ਼ਬਦ"" ਅੱਖਰਾਂ ਦਾ ਇੱਕ ਸਮੂਹ ਹੈ ਜੋ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤਾ ਗਿਆ ਹੈ। ਉਦਾਹਰਣਃ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ ((""ਐਪਲ ਪਾਈ"") â -> ਗਲਤ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ ((""ਐਪਲ ਪਾਈ ਈ"") â -> ਸੱਚਾ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ ((""ਐਪਲ ਪਾਈ ਈ"") â -> ਗਲਤ ਚੈੱਕ_ਇਫ_ਲਾਸਟ_ਚਾਰ_ਇਸ_ਏ_ਲੈਟਰ"" (("") â -> ਗਲਤ '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,pan_Guru,python,"
def can_arrange(arr):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਕਿਸੇ ਐਲੀਮੈਂਟ ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਇੰਡੈਕਸ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ ਇਸ ਤੋਂ ਪਹਿਲਾਂ ਦੇ ਐਲੀਮੈਂਟ ਦੇ ਬਰਾਬਰ ਜਾਂ ਬਰਾਬਰ ਨਹੀਂ ਹੁੰਦਾ। ਜੇ ਅਜਿਹਾ ਕੋਈ ਐਲੀਮੈਂਟ ਮੌਜੂਦ ਨਹੀਂ ਹੈ ਤਾਂ ਵਾਪਸ ਕਰੋ -1. ਦਿੱਤੀ ਗਈ ਐਰੇ ਵਿੱਚ ਡੁਪਲਿਕੇਟ ਮੁੱਲ ਨਹੀਂ ਹੋਣਗੇ। ਉਦਾਹਰਣਃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,pan_Guru,python,"
def largest_smallest_integers(lst):
    '''ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਟੁਪਲ (ਏ, ਬੀ) ਵਾਪਸ ਕਰਦਾ ਹੈ, ਜਿੱਥੇ 'ਏ' ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਾ ਸਭ ਤੋਂ ਵੱਡਾ ਹੈ, ਅਤੇ 'ਬੀ' ਇੱਕ ਸੂਚੀ ਵਿੱਚ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਾ ਸਭ ਤੋਂ ਛੋਟਾ ਹੈ। ਜੇ ਕੋਈ ਨਕਾਰਾਤਮਕ ਜਾਂ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਨਹੀਂ ਹਨ, ਤਾਂ ਉਹਨਾਂ ਨੂੰ ਨਾਨ ਦੇ ਤੌਰ ਤੇ ਵਾਪਸ ਕਰੋ. ਉਦਾਹਰਣਃ ਸਭ ਤੋਂ ਵੱਡਾ_ਸਭ ਤੋਂ ਛੋਟਾ_ਇੰਟੇਜਰ[2, 4, 1, 3, 5, 7]) == (ਕੋਈ ਨਹੀਂ, 1) ਸਭ ਤੋਂ ਵੱਡਾ_ਸਭ ਤੋਂ ਛੋਟਾ_ਇੰਟੇਜਰ[]) == (ਕੋਈ ਨਹੀਂ, ਕੋਈ ਨਹੀਂ) ਸਭ ਤੋਂ ਵੱਡਾ_ਸਭ ਤੋਂ ਛੋਟਾ_ਇੰਟੇਜਰ[0]) == (ਕੋਈ ਨਹੀਂ, ਕੋਈ ਨਹੀਂ) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,pan_Guru,python,"
def compare_one(a, b):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਪੂਰਨ ਅੰਕ, ਫਲੋਟਸ, ਜਾਂ ਸਤਰਾਂ ਨੂੰ ਅਸਲ ਨੰਬਰਾਂ ਦੀ ਨੁਮਾਇੰਦਗੀ ਕਰਦਾ ਹੈ, ਅਤੇ ਇਸ ਦੇ ਦਿੱਤੇ ਗਏ ਪਰਿਵਰਤਨਸ਼ੀਲ ਕਿਸਮ ਵਿੱਚ ਵੱਡਾ ਪਰਿਵਰਤਨਸ਼ੀਲ ਵਾਪਸ ਕਰਦਾ ਹੈ। ਜੇ ਮੁੱਲ ਬਰਾਬਰ ਹੁੰਦੇ ਹਨ ਤਾਂ ਕੋਈ ਨਹੀਂ ਵਾਪਸ ਕਰਦਾ ਹੈ। ਨੋਟਃ ਜੇ ਇੱਕ ਅਸਲੀ ਨੰਬਰ ਨੂੰ ਸਤਰ ਦੇ ਤੌਰ ਤੇ ਦਰਸਾਇਆ ਜਾਂਦਾ ਹੈ, ਤਾਂ ਫਲੋਟਿੰਗ ਪੁਆਇੰਟ ਹੋ ਸਕਦਾ ਹੈ . ਜਾਂ , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> ਕੋਈ ਨਹੀਂ """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,pan_Guru,python,"
def is_equal_to_sum_even(n):
    """"""ਮੁਲਾਂਕਣ ਕਰੋ ਕਿ ਕੀ ਦਿੱਤੀ ਗਈ ਸੰਖਿਆ n ਨੂੰ ਬਿਲਕੁਲ 4 ਸਕਾਰਾਤਮਕ ਜੋੜ ਸੰਖਿਆਵਾਂ ਦੇ ਜੋੜ ਦੇ ਰੂਪ ਵਿੱਚ ਲਿਖਿਆ ਜਾ ਸਕਦਾ ਹੈ ਉਦਾਹਰਣ is_equal_to_sum_even ((4) == False is_equal_to_sum_even ((6) == False is_equal_to_sum_even ((8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,pan_Guru,python,"
def special_factorial(n):
    """"""ਬ੍ਰਾਜ਼ੀਲੀਅਨ ਫੈਕਟੋਰੀਅਲ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਪਰਿਭਾਸ਼ਿਤ ਕੀਤਾ ਗਿਆ ਹੈਃ ਬ੍ਰਾਜ਼ੀਲੀਅਨ_ਫੈਕਟੋਰੀਅਲ ((n) = n! * (n-1)! * (n-2)! * ... * 1! ਜਿੱਥੇ n > 0 ਉਦਾਹਰਣ ਲਈਃ >>> ਵਿਸ਼ੇਸ਼_ਫੈਕਟੋਰੀਅਲ ((4) 288 ਫੰਕਸ਼ਨ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਇੱਕ ਪੂਰਨ ਅੰਕ ਪ੍ਰਾਪਤ ਹੋਵੇਗਾ ਅਤੇ ਇਸ ਪੂਰਨ ਅੰਕ ਦਾ ਵਿਸ਼ੇਸ਼ ਫੈਕਟੋਰੀਅਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,pan_Guru,python,"
def fix_spaces(text):
    """"""_ਉਦਾਹਰਨ-3ਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਵਿੱਚ ਸਾਰੇ ਸਪੇਸ ਨੂੰ ਅੰਡਰਸਕੋਰ ਨਾਲ ਬਦਲੋ, ਅਤੇ ਜੇ ਇੱਕ ਸਤਰ ਵਿੱਚ 2 ਤੋਂ ਵੱਧ ਲਗਾਤਾਰ ਸਪੇਸ ਹਨ, ਤਾਂ ਸਾਰੇ ਲਗਾਤਾਰ ਸਪੇਸ ਨੂੰ - ਫਿਕਸ_ਸਪੇਸ ਨਾਲ ਬਦਲੋ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ਸਪੇਸ (_ ਉਦਾਹਰਣ) == ""ਉਦਾਹਰਣ"" ਫਿਕਸ_ ਉਦਾਹਰਣ""""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,pan_Guru,python,"
def file_name_check(file_name):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਬਣਾਓ ਜੋ ਇੱਕ ਫਾਈਲ ਦੇ ਨਾਮ ਨੂੰ ਦਰਸਾਉਂਦੀ ਇੱਕ ਸਤਰ ਲੈਂਦਾ ਹੈ, ਅਤੇ 'ਹਾਂ' ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੇ ਫਾਈਲ ਦਾ ਨਾਮ ਵੈਧ ਹੈ, ਅਤੇ 'ਨਹੀਂ' ਵਾਪਸ ਕਰਦਾ ਹੈ. ਇੱਕ ਫਾਈਲ ਦਾ ਨਾਮ ਵੈਧ ਮੰਨਿਆ ਜਾਂਦਾ ਹੈ ਜੇ ਅਤੇ ਸਿਰਫ ਤਾਂ ਹੀ ਜੇ ਫਾਈਲ ਦੇ ਨਾਮ ਵਿੱਚ ਹੇਠ ਲਿਖੀਆਂ ਸਾਰੀਆਂ ਸ਼ਰਤਾਂ ਪੂਰੀਆਂ ਹੁੰਦੀਆਂ ਹਨਃ - ਫਾਈਲ ਦੇ ਨਾਮ ਵਿੱਚ ਤਿੰਨ ਤੋਂ ਵੱਧ ਅੰਕ ('0'-'9') ਨਹੀਂ ਹੋਣੇ ਚਾਹੀਦੇ. - ਫਾਈਲ ਦੇ ਨਾਮ ਵਿੱਚ ਬਿਲਕੁਲ ਇੱਕ ਬਿੰਦੀ '.' ਸ਼ਾਮਲ ਹੈ. - ਬਿੰਦੀ ਤੋਂ ਪਹਿਲਾਂ ਸਬਸਟ੍ਰਿੰਗ ਖਾਲੀ ਨਹੀਂ ਹੋਣੀ ਚਾਹੀਦੀ, ਅਤੇ ਇਹ ਲਾਤੀਨੀ ਅੱਖਰ ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦੀ ਹੈ ('a'-'z' ਅਤੇ 'A'Z'). - ਬਿੰਦੀ ਤੋਂ ਬਾਅਦ ਸਬਸਟ੍ਰਿੰਗ ਇਹਨਾਂ ਵਿੱਚੋਂ ਇੱਕ ਹੋਣੀ ਚਾਹੀਦੀ ਹੈਃ ['txt', 'exe', 'll'] ਉਦਾਹਰਣਃ file_name_check""(example.txt"") # => 'ਹਾਂ' file_name_check""(example.dll1"") => 'ਨਹੀਂ' # (ਲਾਤੀਨੀ ਅੱਖਰ ਨਾਲ ਨਾਮ ਸ਼ੁਰੂ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,pan_Guru,python,"


def sum_squares(lst):
    """""""" ਇਹ ਫੰਕਸ਼ਨ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਲਵੇਗਾ। ਸੂਚੀ ਵਿਚਲੇ ਸਾਰੇ ਇੰਦਰਾਜ਼ਾਂ ਲਈ, ਫੰਕਸ਼ਨ ਪੂਰਨ ਅੰਕ ਇੰਦਰਾਜ਼ ਨੂੰ ਵਰਗ ਬਣਾਏਗਾ ਜੇ ਇਸ ਦਾ ਇੰਡੈਕਸ 3 ਦਾ ਗੁਣਾ ਹੈ ਅਤੇ ਪੂਰਨ ਅੰਕ ਇੰਦਰਾਜ਼ ਨੂੰ ਘਣ ਕਰੇਗਾ ਜੇ ਇਸ ਦਾ ਇੰਡੈਕਸ 4 ਦਾ ਗੁਣਾ ਹੈ ਅਤੇ 3 ਦਾ ਗੁਣਾ ਨਹੀਂ ਹੈ। ਫੰਕਸ਼ਨ ਸੂਚੀ ਵਿਚਲੀਆਂ ਇੰਦਰਾਜ਼ਾਂ ਨੂੰ ਨਹੀਂ ਬਦਲਦਾ ਜਿਸਦਾ ਇੰਡੈਕਸ 3 ਜਾਂ 4 ਦਾ ਗੁਣਾ ਨਹੀਂ ਹੈ। ਫੰਕਸ਼ਨ ਫਿਰ ਸਾਰੇ ਇੰਦਰਾਜ਼ਾਂ ਦਾ ਜੋੜ ਵਾਪਸ ਕਰੇਗਾ। ਉਦਾਹਰਣਃ lst = [1,2,3] ਲਈ ਆਉਟਪੁੱਟ 6 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [] ਲਈ ਆਉਟਪੁੱਟ 0 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ lst = [-1,-5,2,-1,-5] ਲਈ ਆਉਟਪੁੱਟ -126 ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,pan_Guru,python,"
def words_in_sentence(sentence):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਵਾਕ ਨੂੰ ਦਰਸਾਉਣ ਵਾਲੀ ਸਤਰ ਦਿੱਤੀ ਗਈ ਹੈ, ਵਾਕ ਵਿੱਚ ਕੁਝ ਸ਼ਬਦ ਹਨ ਜੋ ਇੱਕ ਸਪੇਸ ਦੁਆਰਾ ਵੱਖ ਕੀਤੇ ਗਏ ਹਨ, ਅਤੇ ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਪਵੇਗੀ ਜਿਸ ਵਿੱਚ ਮੂਲ ਵਾਕ ਦੇ ਸ਼ਬਦ ਹਨ, ਜਿਸ ਦੀ ਲੰਬਾਈ ਪ੍ਰਾਇਮ ਨੰਬਰ ਹਨ, ਨਵੀਂ ਸਤਰ ਵਿੱਚ ਸ਼ਬਦਾਂ ਦਾ ਕ੍ਰਮ ਮੂਲ ਦੇ ਸਮਾਨ ਹੋਣਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਨ 1: ਇਨਪੁਟਃ ਵਾਕ = ""ਇਹ ਇੱਕ ਟੈਸਟ ਹੈ"" ਆਉਟਪੁੱਟਃ ""ਹੈ"" ਉਦਾਹਰਨ 2: ਇਨਪੁਟਃ ਵਾਕ = ""ਸੁਆਇੰਗ ਲਈ ਜਾਣ ਦਿਓ"" ਆਉਟਪੁੱਟਃ ""ਜਾਓ"" ਪਾਬੰਦੀਆਂਃ * 1 <= len(sentence) <= 100 * ਵਾਕ ਵਿੱਚ ਸਿਰਫ ਅੱਖਰ ਹਨ """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,pan_Guru,python,"
def simplify(x, n):
    """"""ਤੁਹਾਡਾ ਕੰਮ ਇੱਕ ਫੰਕਸ਼ਨ ਨੂੰ ਲਾਗੂ ਕਰਨਾ ਹੈ ਜੋ ਐਕਸਪ੍ਰੈਸ x * n ਨੂੰ ਸਰਲ ਬਣਾਏਗਾ. ਫੰਕਸ਼ਨ ਵਾਪਸ ਆਉਂਦੀ ਹੈ ਜੇ x * n ਇੱਕ ਪੂਰਨ ਸੰਖਿਆ ਅਤੇ ਝੂਠੀ ਮੁਲਾਂਕਣ ਕਰਦਾ ਹੈ. x ਅਤੇ n, ਇੱਕ ਭੰਡਾਰ ਦੀ ਸਤਰ ਪ੍ਰਤੀਨਿਧਤਾ ਹਨ, ਅਤੇ ਹੇਠ ਲਿਖੇ ਫਾਰਮੈਟ ਹਨ, <numerator>/<denominator> ਜਿੱਥੇ ਦੋਵੇਂ ਨੰਬਰ ਅਤੇ ਡੋਮੇਨਟਰ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਸੰਖਿਆਵਾਂ ਹਨ. ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ x, ਅਤੇ n ਵੈਧ ਭੰਡਾਰ ਹਨ, ਅਤੇ ਡੋਮੇਨਟਰ ਦੇ ਤੌਰ ਤੇ ਜ਼ੀਰੋ ਨਹੀਂ ਹੈ. ਸਰਲ ਬਣਾਓ (((""1/5"", ""5/1"") = ਸੱਚ ਹੈ (ਸਧਾਰਨ ਬਣਾਓ""1/6"", ""2/1"") = ਝੂਠੀ (ਸਧਾਰਨ ਬਣਾਓ) (((""7/10"", ""10/2"") = ਝੂਠੀ """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,pan_Guru,python,"
def order_by_points(nums):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਪੂਰਨ ਅੰਕ ਦੀ ਦਿੱਤੀ ਗਈ ਸੂਚੀ ਨੂੰ ਉਨ੍ਹਾਂ ਦੇ ਅੰਕ ਦੇ ਜੋੜ ਦੇ ਅਨੁਸਾਰ ਵੱਧਦੇ ਕ੍ਰਮ ਵਿੱਚ ਕ੍ਰਮਬੱਧ ਕਰਦਾ ਹੈ। ਨੋਟਃ ਜੇ ਉਨ੍ਹਾਂ ਦੇ ਅੰਕ ਦੇ ਸਮਾਨ ਜੋੜ ਦੇ ਨਾਲ ਕਈ ਆਈਟਮਾਂ ਹਨ, ਤਾਂ ਉਹਨਾਂ ਨੂੰ ਅਸਲ ਸੂਚੀ ਵਿੱਚ ਉਹਨਾਂ ਦੇ ਇੰਡੈਕਸ ਦੇ ਅਧਾਰ ਤੇ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਉਦਾਹਰਣ ਲਈਃ >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,pan_Guru,python,"
def specialFilter(nums):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਨੰਬਰਾਂ ਦੀ ਇੱਕ ਐਰੇ ਨੂੰ ਇਨਪੁਟ ਦੇ ਤੌਰ ਤੇ ਲੈਂਦਾ ਹੈ ਅਤੇ ਐਰੇ ਵਿੱਚ ਤੱਤਾਂ ਦੀ ਗਿਣਤੀ ਨੂੰ ਵਾਪਸ ਕਰਦਾ ਹੈ ਜੋ 10 ਤੋਂ ਵੱਧ ਹੈ ਅਤੇ ਇੱਕ ਨੰਬਰ ਦੇ ਪਹਿਲੇ ਅਤੇ ਆਖਰੀ ਅੰਕ ਦੋਵੇਂ ਅਜੀਬ ਹਨ (1, 3, 5, 7, 9). ਉਦਾਹਰਣ ਲਈਃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,pan_Guru,python,"
def get_max_triples(n):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ n ਦਿੱਤਾ ਗਿਆ ਹੈ. ਤੁਹਾਨੂੰ ਲੰਬਾਈ n ਦੀ ਇੱਕ ਪੂਰਨ ਅੰਕ ਐਰੇ ਬਣਾਉਣਾ ਹੈ. ਹਰ i (1 â ‰¤ i â ‰¤ n) ਲਈ, a[i] = i * i - i + 1 ਦਾ ਮੁੱਲ. a ਦੇ ਟ੍ਰਿਪਲਜ਼ (a[i], a[j], a[k]) ਦੀ ਗਿਣਤੀ ਵਾਪਸ ਕਰੋ ਜਿੱਥੇ i < j < k, ਅਤੇ a[i] + a[j] + a[k] 3 ਦਾ ਗੁਣਾ ਹੈ. ਉਦਾਹਰਨਃ ਇਨਪੁਟਃ n = 5 ਆਉਟਪੁੱਟਃ 1 ਵਿਆਖਿਆਃ a = [1, 3, 7, 13, 21] ਸਿਰਫ ਯੋਗ ਟ੍ਰਿਪਲ (1, 7, 13) ਹੈ.""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,pan_Guru,python,"
def bf(planet1, planet2):
    '''ਸਾਡੇ ਸੂਰਜੀ ਪ੍ਰਣਾਲੀ ਵਿੱਚ ਅੱਠ ਗ੍ਰਹਿ ਹਨਃ ਸੂਰਜ ਦੇ ਸਭ ਤੋਂ ਨੇੜੇ ਮਰਕੁਰੀ ਹੈ, ਅਗਲਾ ਸ਼ੁੱਕਰ ਹੈ, ਫਿਰ ਧਰਤੀ, ਮੰਗਲ, ਜੁਪੀਟਰ, ਸ਼ਨੀ, ਯੂਰੇਨਸ, ਨੈਪਚੂਨ ਹੈ। ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਦੋ ਗ੍ਰਹਿ ਨਾਮਾਂ ਨੂੰ ਸਤਰਾਂ ਦੇ ਰੂਪ ਵਿੱਚ ਲੈਂਦਾ ਹੈ ਗ੍ਰਹਿ1 ਅਤੇ ਗ੍ਰਹਿ2. ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜਿਸ ਵਿੱਚ ਉਹ ਸਾਰੇ ਗ੍ਰਹਿ ਹੁੰਦੇ ਹਨ ਜਿਨ੍ਹਾਂ ਦੀਆਂ ਗੋਲੀਆਂ ਗ੍ਰਹਿ1 ਦੇ ਚੱਕਰ ਅਤੇ ਗ੍ਰਹਿ2 ਦੇ ਚੱਕਰ ਦੇ ਵਿਚਕਾਰ ਸਥਿਤ ਹੁੰਦੀਆਂ ਹਨ, ਸੂਰਜ ਦੀ ਨੇੜਤਾ ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ ਕੀਤੀਆਂ ਜਾਂਦੀਆਂ ਹਨ। ਫੰਕਸ਼ਨ ਨੂੰ ਇੱਕ ਖਾਲੀ ਟੁਪਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇ ਗ੍ਰਹਿ1 ਜਾਂ ਗ੍ਰਹਿ2 ਸਹੀ ਗ੍ਰਹਿ ਨਾਮ ਨਹੀਂ ਹਨ. ਉਦਾਹਰਣ bf ""(ਜੁਪੀਟਰ"", ""ਨੈਪਚੂਨ"") ==> (""ਸ਼ਨੀ"", ""ਯੂਰਨਸ"") bf ""("" ਧਰਤੀ"", ""ਮਰਕੁਰੀ"") ==> (""ਸ਼ੁੱਕਰ"", ""ਧਰਤੀ"", ""ਮਾਰਕ"", ""ਸ਼ਨੀ"", ""ਸ਼ਨੀ"", ""ਸ਼ਨੀ"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,pan_Guru,python,"
def sorted_list_sum(lst):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਨੂੰ ਇੱਕ ਪੈਰਾਮੀਟਰ ਦੇ ਤੌਰ ਤੇ ਸਵੀਕਾਰ ਕਰਦਾ ਹੈ, ਸਤਰਾਂ ਨੂੰ ਹਟਾ ਦਿੰਦਾ ਹੈ ਜਿਸਦੀ ਅਣਗਿਣਤ ਲੰਬਾਈ ਹੈ, ਅਤੇ ਨਤੀਜਾ ਸੂਚੀ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕ੍ਰਮ ਨਾਲ ਵਾਪਸ ਕਰਦਾ ਹੈ, ਸੂਚੀ ਹਮੇਸ਼ਾਂ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਹੁੰਦੀ ਹੈ ਅਤੇ ਕਦੇ ਵੀ ਸੰਖਿਆਵਾਂ ਦੀ ਐਰੇ ਨਹੀਂ ਹੁੰਦੀ, ਅਤੇ ਇਸ ਵਿੱਚ ਡੁਪਲਿਕੇਟ ਸ਼ਾਮਲ ਹੋ ਸਕਦੇ ਹਨ. ਸੂਚੀ ਦਾ ਕ੍ਰਮ ਹਰੇਕ ਸ਼ਬਦ ਦੀ ਲੰਬਾਈ ਦੁਆਰਾ ਵਧਣਾ ਚਾਹੀਦਾ ਹੈ, ਅਤੇ ਤੁਹਾਨੂੰ ਉਸ ਨਿਯਮ ਦੁਆਰਾ ਕ੍ਰਮਬੱਧ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਜੇ ਦੋ ਸ਼ਬਦਾਂ ਦੀ ਲੰਬਾਈ ਇਕੋ ਜਿਹੀ ਹੈ, ਤਾਂ ਸੂਚੀ ਨੂੰ ਵਰਣਮਾਲਾ ਅਨੁਸਾਰ ਕ੍ਰਮਬੱਧ ਕਰੋ. ਫੰਕਸ਼ਨ ਨੂੰ ਕ੍ਰਮਬੱਧ ਕ੍ਰਮ ਵਿੱਚ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਤੁਸੀਂ ਇਹ ਮੰਨ ਸਕਦੇ ਹੋ ਕਿ ਸਾਰੇ ਸ਼ਬਦਾਂ ਦੀ ਲੰਬਾਈ ਇਕੋ ਜਿਹੀ ਹੋਵੇਗੀ. ਉਦਾਹਰਣ ਲਈਃ assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd"")""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,pan_Guru,python,"
def x_or_y(n, x, y):
    """"""ਇੱਕ ਸਧਾਰਨ ਪ੍ਰੋਗਰਾਮ ਜਿਸ ਨੂੰ x ਦਾ ਮੁੱਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਜੇਕਰ n ਇੱਕ ਪ੍ਰਾਇਮਰੀ ਨੰਬਰ ਹੈ ਅਤੇ y ਦਾ ਮੁੱਲ ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ. ਉਦਾਹਰਣਃ x_or_y ਲਈ {7, 34, 12) == 34 x_or_y ਲਈ {15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,pan_Guru,python,"
def double_the_difference(lst):
    '''ਨੰਬਰਾਂ ਦੀ ਸੂਚੀ ਦਿੱਤੀ ਗਈ ਹੈ, ਸੂਚੀ ਵਿੱਚ ਨੰਬਰਾਂ ਦੇ ਵਰਗ ਦੇ ਜੋੜ ਨੂੰ ਵਾਪਸ ਕਰੋ ਜੋ ਅਜੀਬ ਹਨ. ਨਕਾਰਾਤਮਕ ਨੰਬਰਾਂ ਨੂੰ ਨਜ਼ਰਅੰਦਾਜ਼ ਕਰੋ ਜਾਂ ਪੂਰਨ ਅੰਕ ਨਹੀਂ ਹਨ. ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([-1, -2, 0]) == 0 ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([9, -2]) == 81 ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ_ਦੁਗਣਾ (([0]) == 0 ਜੇ ਇੰਪੁੱਟ ਸੂਚੀ ਖਾਲੀ ਹੈ, 0 ਵਾਪਸ ਕਰੋ '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,pan_Guru,python,"
def compare(game,guess):
    """"""ਮੈਨੂੰ ਲਗਦਾ ਹੈ ਕਿ ਅਸੀਂ ਸਾਰੇ ਉਸ ਭਾਵਨਾ ਨੂੰ ਯਾਦ ਕਰਦੇ ਹਾਂ ਜਦੋਂ ਕਿਸੇ ਲੰਬੇ ਸਮੇਂ ਤੋਂ ਉਡੀਕ ਕੀਤੀ ਗਈ ਘਟਨਾ ਦਾ ਨਤੀਜਾ ਅੰਤ ਵਿੱਚ ਜਾਣਿਆ ਜਾਂਦਾ ਹੈ. ਉਸ ਪਲ ਦੀਆਂ ਭਾਵਨਾਵਾਂ ਅਤੇ ਵਿਚਾਰਾਂ ਨੂੰ ਨਿਸ਼ਚਤ ਤੌਰ ਤੇ ਨੋਟ ਕਰਨਾ ਅਤੇ ਤੁਲਨਾ ਕਰਨਾ ਮਹੱਤਵਪੂਰਣ ਹੈ. ਤੁਹਾਡਾ ਕੰਮ ਇਹ ਨਿਰਧਾਰਤ ਕਰਨਾ ਹੈ ਕਿ ਕੀ ਕਿਸੇ ਵਿਅਕਤੀ ਨੇ ਕਈ ਮੈਚਾਂ ਦੇ ਨਤੀਜਿਆਂ ਦਾ ਸਹੀ ਅੰਦਾਜ਼ਾ ਲਗਾਇਆ ਹੈ. ਤੁਹਾਨੂੰ ਸਕੋਰਾਂ ਅਤੇ ਅੰਦਾਜ਼ਿਆਂ ਦੀਆਂ ਦੋ ਐਰੇ ਦਿੱਤੀਆਂ ਜਾਂਦੀਆਂ ਹਨ, ਜਿੱਥੇ ਹਰ ਇੰਡੈਕਸ ਇਕ ਮੈਚ ਦਰਸਾਉਂਦਾ ਹੈ. ਉਸੇ ਲੰਬਾਈ ਦੀ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰੋ ਜੋ ਦਰਸਾਉਂਦੀ ਹੈ ਕਿ ਹਰੇਕ ਅੰਦਾਜ਼ਾ ਕਿੰਨਾ ਦੂਰ ਸੀ. ਜੇ ਉਨ੍ਹਾਂ ਨੇ ਸਹੀ ਅੰਦਾਜ਼ਾ ਲਗਾਇਆ ਹੈ, ਤਾਂ ਮੁੱਲ 0 ਹੈ, ਅਤੇ ਜੇ ਨਹੀਂ, ਤਾਂ ਮੁੱਲ ਅੰਦਾਜ਼ਾ ਅਤੇ ਸਕੋਰ ਦੇ ਵਿਚਕਾਰ ਪੂਰਨ ਅੰਤਰ ਹੈ. ਉਦਾਹਰਣਃ (([1,2,3,4,5,1], [1,2,3,4,2,]) -> [0,0,0,0,3,3] ਤੁਲਨਾ ਕਰੋ (([0,5,0,0,4], [4,1,0,1,0,6]) -> [4,0,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,pan_Guru,python,"
def Strongest_Extension(class_name, extensions):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਕਲਾਸ ਦਾ ਨਾਮ (ਇੱਕ ਸਤਰ) ਅਤੇ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਇੱਕ ਸੂਚੀ ਦਿੱਤੀ ਜਾਵੇਗੀ। ਐਕਸਟੈਂਸ਼ਨਾਂ ਨੂੰ ਕਲਾਸ ਵਿੱਚ ਵਾਧੂ ਕਲਾਸਾਂ ਲੋਡ ਕਰਨ ਲਈ ਵਰਤਿਆ ਜਾਣਾ ਹੈ। ਐਕਸਟੈਂਸ਼ਨ ਦੀ ਤਾਕਤ ਇਸ ਪ੍ਰਕਾਰ ਹੈਃ CAP ਨੂੰ ਐਕਸਟੈਂਸ਼ਨ ਦੇ ਨਾਮ ਵਿੱਚ ਵੱਡੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੋਣ ਦਿਓ, ਅਤੇ SM ਨੂੰ ਐਕਸਟੈਂਸ਼ਨ ਦੇ ਨਾਮ ਵਿੱਚ ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੋਣ ਦਿਓ, ਤਾਕਤ CAP - SM ਦ੍ਰਿੜ੍ਹਤਾ ਦੁਆਰਾ ਦਿੱਤੀ ਗਈ ਹੈ। ਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਮਜ਼ਬੂਤ ਐਕਸਟੈਂਸ਼ਨ ਲੱਭਣੀ ਚਾਹੀਦੀ ਹੈ ਅਤੇ ਇਸ ਫਾਰਮੈਟ ਵਿੱਚ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈਃ ClassName.StrongestExtensionName. ਜੇ ਦੋ ਜਾਂ ਵੱਧ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਤਾਕਤ ਇਕੋ ਜਿਹੀ ਹੈ, ਤਾਂ ਤੁਹਾਨੂੰ ਸੂਚੀ ਵਿੱਚ ਪਹਿਲਾਂ ਆਉਣ ਵਾਲੀ ਇੱਕ ਦੀ ਚੋਣ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ। ਉਦਾਹਰਣ ਲਈ, ਜੇ ਤੁਹਾਨੂੰ ਕਲਾਸ ਅਤੇ ਐਕਸਟੈਂਸ਼ਨਾਂ ਦੀ ਸੂਚੀ ਦੇ ਤੌਰ ਤੇ ""ਸਲਾਇਸ"" ਦਿੱਤਾ ਗਿਆ ਹੈਃ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] ਤਾਂ ਤੁਹਾਨੂੰ 'Slices.SEviSliNGCes' ਵਾਪਸ ਕਰਨਾ ਚਾਹੀਦਾ ਹੈ ਕਿਉਂਕਿ 'SviSliNGCes' ਵਿੱਚ ਛੋਟੇ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈ, ਤਾਂ ਤਾਕਤ CAP - SM ਦੇ ਦ੍ਰਿਅੰਕਸ਼ਨ ਦੁਆਰਾ ਦਿੱਤੀ ਜਾਂਦੀ ਹੈ। ਤੁਹਾਨੂੰ ਸਭ ਤੋਂ ਮਜ਼ਬੂਤ ਐਕਸਟੈਂਸ਼ਨ ਲੱਭਣਾ ਚਾਹੀਦਾ ਹੈ ਅਤੇ ਇਸ ਫਾਰਮੈਟ ਵਿੱਚ ਇੱਕ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈਃ ClassName.StrongestExtensionName.StrongestExtensionName = 'StrongestExtensionName' (ਮਾਤਰ) । ਉਦਾਹਰਣ ਲਈ, ਜੇ ਤੁਹਾਨੂੰ ਦੋ ਜਾਂ ਵੱਧ ਐਕਸਟੈਂਸ਼ਨ ਦੇ ਤੌਰ ਤੇ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਤਾਂ ਤੁਹਾਨੂੰ ""Slices"" ਦੇ ਤੌਰ ਤੇ ""Slices"" ਦੀ ਸੂਚੀ ਦੇ ਰੂਪ ਵਿੱਚ ਪਹਿਲਾ ਨੰਬਰ ਦਿੱਤਾ ਜਾਵੇਗਾ।""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,pan_Guru,python,"
def cycpattern_check(a , b):
    """"""ਤੁਹਾਨੂੰ 2 ਸ਼ਬਦ ਦਿੱਤੇ ਗਏ ਹਨ. ਤੁਹਾਨੂੰ True ਵਾਪਸ ਕਰਨ ਦੀ ਲੋੜ ਹੈ ਜੇ ਦੂਜਾ ਸ਼ਬਦ ਜਾਂ ਇਸਦੇ ਕਿਸੇ ਵੀ ਘੁੰਮਣ ਪਹਿਲੇ ਸ਼ਬਦ ਵਿੱਚ ਇੱਕ ਸਬਸਟ੍ਰਿੰਗ ਹੈ cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,pan_Guru,python,"
def even_odd_count(num):
    """"""ਇੱਕ ਪੂਰਨ ਅੰਕ ਦਿੱਤਾ ਗਿਆ ਹੈ. ਇੱਕ ਟੁਪਲ ਵਾਪਸ ਕਰੋ ਜਿਸ ਵਿੱਚ ਕ੍ਰਮਵਾਰ ਵੀ ਅਤੇ ਅਜੀਬ ਅੰਕ ਦੀ ਗਿਣਤੀ ਹੈ. ਉਦਾਹਰਨਃ ਵੀ_ਓਡ_ਕਾਉਂਟ ((-12) ==> (1, 1) ਵੀ_ਓਡ_ਕਾਉਂਟ ((123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,pan_Guru,python,"
def int_to_mini_roman(number):
    """"""ਇੱਕ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦਿੱਤਾ ਗਿਆ ਹੈ, ਇਸ ਦੇ ਰੋਮਨ ਅੰਕਾਂ ਦੇ ਬਰਾਬਰ ਨੂੰ ਇੱਕ ਸਤਰ ਦੇ ਰੂਪ ਵਿੱਚ ਪ੍ਰਾਪਤ ਕਰੋ, ਅਤੇ ਇਸਨੂੰ ਛੋਟੇ ਅੱਖਰਾਂ ਵਿੱਚ ਵਾਪਸ ਕਰੋ। ਪਾਬੰਦੀਆਂਃ 1 <= num <= 1000 ਉਦਾਹਰਣਃ >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,pan_Guru,python,"
def right_angle_triangle(a, b, c):
    '''ਇੱਕ ਤਿਕੋਣ ਦੇ ਤਿੰਨ ਪਾਸਿਆਂ ਦੀ ਲੰਬਾਈ ਦਿੱਤੀ ਗਈ ਹੈ. ਵਾਪਸੀ ਸਹੀ ਹੈ ਜੇ ਤਿੰਨ ਪਾਸਿਆਂ ਨੂੰ ਇੱਕ ਸਹੀ ਕੋਣ ਵਾਲਾ ਤਿਕੋਣ ਬਣਾਉਂਦਾ ਹੈ, ਨਹੀਂ ਤਾਂ ਗਲਤ ਹੈ. ਇੱਕ ਸਹੀ ਕੋਣ ਵਾਲਾ ਤਿਕੋਣ ਇੱਕ ਤਿਕੋਣ ਹੈ ਜਿਸ ਵਿੱਚ ਇੱਕ ਕੋਣ ਸਹੀ ਕੋਣ ਜਾਂ 90 ਡਿਗਰੀ ਹੈ. ਉਦਾਹਰਨਃ right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == ਗਲਤ '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,pan_Guru,python,"
def find_max(words):
    """"""ਇੱਕ ਫੰਕਸ਼ਨ ਲਿਖੋ ਜੋ ਸਤਰਾਂ ਦੀ ਸੂਚੀ ਨੂੰ ਸਵੀਕਾਰ ਕਰਦਾ ਹੈ। ਸੂਚੀ ਵਿੱਚ ਵੱਖਰੇ ਸ਼ਬਦ ਹਨ। ਵੱਧ ਤੋਂ ਵੱਧ ਵਿਲੱਖਣ ਅੱਖਰਾਂ ਦੇ ਨਾਲ ਸ਼ਬਦ ਵਾਪਸ ਕਰੋ। ਜੇ ਮਲਟੀਪਲ ਸਤਰਾਂ ਵਿੱਚ ਵੱਧ ਤੋਂ ਵੱਧ ਵਿਲੱਖਣ ਅੱਖਰਾਂ ਦੀ ਗਿਣਤੀ ਹੈ, ਤਾਂ ਉਹ ਸ਼ਬਦ ਵਾਪਸ ਕਰੋ ਜੋ ਸ਼ਬਦਕੋਸ਼ਿਕ ਕ੍ਰਮ ਵਿੱਚ ਪਹਿਲਾਂ ਆਉਂਦਾ ਹੈ. find_max (([""ਨਾਮ"", ""ਦੇ"", ""ਸਤਰ""]) == ""ਸਤਰ"" find_max (([""ਨਾਮ"", ""enam"", ""ਖੇਡ""]) == ""enam"" find_max (([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa"" """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,pan_Guru,python,"
def eat(number, need, remaining):
    """"""ਤੁਸੀਂ ਭੁੱਖੇ ਖਰਗੋਸ਼ ਹੋ, ਅਤੇ ਤੁਸੀਂ ਪਹਿਲਾਂ ਹੀ ਕੁਝ ਗਾਜਰ ਖਾ ਚੁੱਕੇ ਹੋ, ਪਰ ਹੁਣ ਤੁਹਾਨੂੰ ਦਿਨ ਦੇ ਖਾਣੇ ਨੂੰ ਪੂਰਾ ਕਰਨ ਲਈ ਹੋਰ ਗਾਜਰ ਖਾਣ ਦੀ ਜ਼ਰੂਰਤ ਹੈ. ਤੁਹਾਨੂੰ ਇੱਕ ਐਰੇ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ [ਤੁਹਾਡੇ ਖਾਣੇ ਤੋਂ ਬਾਅਦ ਖਾਧੇ ਗਏ ਗਾਜਰਾਂ ਦੀ ਕੁੱਲ ਗਿਣਤੀ, ਤੁਹਾਡੇ ਖਾਣੇ ਤੋਂ ਬਾਅਦ ਗਾਜਰ ਦੀ ਗਿਣਤੀ ] ਜੇ ਤੁਹਾਡੇ ਕੋਲ ਕਾਫ਼ੀ ਬਾਕੀ ਗਾਜਰ ਨਹੀਂ ਹਨ, ਤਾਂ ਤੁਸੀਂ ਬਾਕੀ ਸਾਰੇ ਗਾਜਰ ਖਾਓਗੇ, ਪਰ ਫਿਰ ਵੀ ਭੁੱਖੇ ਹੋਵੋਗੇ. ਉਦਾਹਰਣਃ * ਖਾਓ ((5, 6, 10) -> [11, 4] * ਖਾਓ ((4, 8, 9) -> [12, 1] * ਖਾਓ ((1, 10, 10) -> [11, 0] * ਖਾਓ ((2, 11, 5) -> [7, 0] ਵੇਰੀਏਬਲਃ @ ਨੰਬਰਃ ਤੁਹਾਡੇ ਦੁਆਰਾ ਖਾਧੇ ਗਏ ਗਾਜਰਾਂ ਦੀ ਪੂਰਨ ਗਿਣਤੀ. @ ਲੋੜਃ ਗਾਜਰਾਂ ਦੀ ਪੂਰਨ ਗਿਣਤੀ ਜੋ ਤੁਹਾਨੂੰ ਖਾਣ ਦੀ ਜ਼ਰੂਰਤ ਹੈ. @ ਬਾਕੀਃ ਸਟਾਕ ਵਿਚ ਬਾਕੀ ਗਾਜਰਾਂ ਦੀ ਪੂਰਨ ਗਿਣਤੀ. ਕੰਟਰੈਕਟਃ * 0 = <= 0 * 1000 = <= 1000 * 0 = <= 1000 ਬਾਕੀ ਰਹਿਣਾ = <= 1000 = ਮਜ਼ੇਦਾਰ ਹੈ = 1000:""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,pan_Guru,python,"
def do_algebra(operator, operand):
    """"""ਦੋ ਸੂਚੀਆਂ ਆਪਰੇਟਰ ਅਤੇ ਓਪਰੇਂਡ. ਪਹਿਲੀ ਸੂਚੀ ਵਿੱਚ ਬੁਨਿਆਦੀ ਅਲਜਬਰਾ ਓਪਰੇਸ਼ਨ ਹਨ, ਅਤੇ ਦੂਜੀ ਸੂਚੀ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਹੈ. ਅਲਜਬਰਾ ਸਮੀਕਰਨ ਬਣਾਉਣ ਲਈ ਦੋ ਦਿੱਤੀਆਂ ਸੂਚੀਆਂ ਦੀ ਵਰਤੋਂ ਕਰੋ ਅਤੇ ਇਸ ਸਮੀਕਰਨ ਦਾ ਮੁਲਾਂਕਣ ਵਾਪਸ ਕਰੋ. ਬੁਨਿਆਦੀ ਅਲਜਬਰਾ ਓਪਰੇਸ਼ਨਃ ਜੋੜ (+) ਘਟਾਓ ( - ) ਗੁਣਾ ( *) ਫਲੋਰ ਡਿਵੀਜ਼ਨ ( //) ਐਕਸਪੋਨੈਂਸ਼ਨ ( ** ਉਦਾਹਰਨ): ਆਪਰੇਟਰ['+', '*', '-'] ਐਰੇ = [2, 3, 4, 5] ਨਤੀਜਾ = 2 + 3 * 4 - 5 => ਨਤੀਜਾ = 9 ਨੋਟਃ ਆਪਰੇਟਰ ਦੀ ਸੂਚੀ ਦੀ ਲੰਬਾਈ ਓਪਰੇਂਡ ਸੂਚੀ ਦੀ ਲੰਬਾਈ ਦੇ ਬਰਾਬਰ ਹੈ ਘਟਾਓ ਇੱਕ. ਓਪਰੇਂਡ ਗੈਰ-ਨਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ ਦੀ ਸੂਚੀ ਹੈ. ਆਪਰੇਟਰ ਦੀ ਸੂਚੀ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਇੱਕ ਆਪਰੇਟਰ ਹੈ, ਅਤੇ ਓਪਰੇਂਡ ਸੂਚੀ ਵਿੱਚ ਘੱਟੋ ਘੱਟ ਦੋ ਓਪਰੇਂਡ ਹਨ. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,pan_Guru,python,"
def solve(s):
    """"""ਤੁਹਾਨੂੰ ਇੱਕ ਸਤਰ s ਦਿੱਤੀ ਗਈ ਹੈ. ਜੇ s[i] ਇੱਕ ਅੱਖਰ ਹੈ, ਤਾਂ ਇਸਦੇ ਕੇਸ ਨੂੰ ਹੇਠਲੇ ਤੋਂ ਉੱਪਰ ਜਾਂ ਉਪਰ ਵੱਲ ਉਲਟਾ ਕਰੋ, ਨਹੀਂ ਤਾਂ ਇਸ ਨੂੰ ਇਸ ਤਰ੍ਹਾਂ ਹੀ ਰੱਖੋ. ਜੇ ਸਤਰ ਵਿੱਚ ਕੋਈ ਅੱਖਰ ਨਹੀਂ ਹਨ, ਤਾਂ ਸਤਰ ਨੂੰ ਉਲਟਾ ਦਿਓ. ਫੰਕਸ਼ਨ ਨੂੰ ਨਤੀਜੇ ਵਾਲੀ ਸਤਰ ਵਾਪਸ ਕਰਨੀ ਚਾਹੀਦੀ ਹੈ. ਉਦਾਹਰਣ ਹੱਲ ਕਰੋ ((""1234"") = ""4321"" ਹੱਲ ਕਰੋ ((""ab"") = ""AB"" ਹੱਲ ਕਰੋ ((""#a@C"") = ""#A@c"" """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,pan_Guru,python,"
def string_to_md5(text):
    """"""ਇੱਕ ਸਤਰ 'text' ਦਿੱਤੀ ਗਈ ਹੈ, ਤਾਂ ਇਸਦੀ md5 ਹੈਸ਼ ਸਮਾਨ ਸਤਰ ਵਾਪਸ ਕਰੋ। ਜੇਕਰ 'text' ਇੱਕ ਖਾਲੀ ਸਤਰ ਹੈ, ਤਾਂ None ਵਾਪਸ ਕਰੋ। >>> string_to_md5('ਹੈਲੋ ਵਰਲਡ') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,pan_Guru,python,"
def generate_integers(a, b):
    """"""ਦੋ ਸਕਾਰਾਤਮਕ ਪੂਰਨ ਅੰਕ a ਅਤੇ b ਦਿੱਤੇ ਗਏ ਹਨ, a ਅਤੇ b ਦੇ ਵਿਚਕਾਰ ਵੀ ਅੰਕ ਵਾਪਸ ਕਰੋ, ਵਧਦੇ ਕ੍ਰਮ ਵਿੱਚ. ਉਦਾਹਰਣ ਲਈਃ generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
