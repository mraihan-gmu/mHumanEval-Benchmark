task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,grn_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Ehechajey oĩpa mokõi papapy ojoykére oĩva papapy ra'ãnga oje'éva rehe. Techapyrã: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,grn_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ko función ñeguenohẽ peteĩ cadena oguerekóva heta aty paréntesis anidada-va. Ne rembiapo ha'e emboyke umi aty umi cadena-pe ha embohasa umi lista. Umi grupo separado oĩ balanceado (opaite paréntesis ojepe'áva oĩ porã) ha noñeguenohẽi ojuehe. Emboyke oimeraẽ espacio string ñeguenohẽrãme. Techapyrã: >>> separate_paren_groups' ((( ) (() (()))))) ' ['() ', '(()) ', '(() ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,grn_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Ojehecháramo peteĩ papapy oguerekóva punto flotante positivo, ikatu oñembyai ha papapy entero-pe (papapy entero tuichavéva michĩvéva papapy oñeme'ẽva-gui) ha decimal-pe (papapy hembýva michĩvéva 1 guive).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,grn_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Oñeme'ẽta ndéve peteĩ lista de depósito ha retirada operación orekóva cuenta bancaria oñepyrûva saldo cero ndive. Ne rembiapo hína ehecha oiméramo oimeraẽ punto saldo de cuenta oguejy cero guýre, ha upe punto función oguahëva True.""""""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,grn_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Peteĩ lista de números de entrada, eiporavo desviación absoluta media ko dato aty media jerére. Desviación absoluta media ha'e diferencia absoluta media oĩva peteĩ elemento ha peteĩ punto central (media ko kásope): MAD = promedio █ x - x_media █ Ejemplo: >>> desviación absoluta media █ [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,grn_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Emoinge papapy ""delimitador"" opaite mokõi elemento ojoapykuéri lista de entrada `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,grn_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ko función ñeguenohẽ peteĩ cadena ha'e hína heta aty ojehechaukáva paréntesis anidada-pe, ojoavýva espacios rupive. Opaite atyguápe g̃uarã, ñeguenohẽ nivel iñypytuvéva anidada-pe. Techapyrã, (() (()) oguereko mokõi nivel anidada-pe, ha ((())) oguereko mbohapy. >>> parse_nested_parens (('((()) ((())) () ((()) (((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,grn_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filtrar una lista de entrada de cadenas sólo para las que contienen una subcadena determinada >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,grn_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Peteĩ lista de enteros-pe g̃uarã, emyengovia peteĩ tupulo oguerekóva peteĩ suma ha peteĩ producto opaite entero-kuéra lista-pe. Suma henyhẽ'ỹva ha'eva'erã 0 ha producto henyhẽ'ỹva ha'eva'erã 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,grn_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Peteĩ lista de enteros-gui, emohenda peteĩ lista de elemento máximo rotación-pegua ojejuhúva momento-pe secuencia-pe. >>> rolling_max (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,grn_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""Ejuhu palíndromo ipukuvéva oñepyrũva peteĩ cadena ome'ẽva rehe. Algoritmo he'ise ndahasyiha: - Ejuhu postfijo ipukuvéva cadena ome'ẽva ha'éva palíndromo. - Eipyso pe cadena paha gotyo peteĩ prefijo cadena-pegua oúva sufijo palíndromo mboyve. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Ehechajey pe cadena ha'e peteĩ palíndromo """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,grn_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Umi entrada ha'e mokõi cadena a ha b oguerekóva 1 ha 0 añónte. Ejapo XOR binario ko'ã entrada-pe ha embohovái resultado avei cadena-ramo.""""""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,grn_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Umi cadena lista-gui, emyengovia pe ipukuvéva. Emyengovia pe tenondegua oĩramo heta cadena ipukukue peteĩcha. Emyengovia ndaipóri ramo lista de entrada noĩriramo. >>> ipukuvéva (([]) >>> ipukuvéva ((['a', 'b', 'c']) 'a' >>> ipukuvéva ((['a', 'bb', 'ccc']) 'ccc' """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,grn_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Emoneĩ peteĩ mayor común divisor mokõi papapy entero a ha b >>> mayor_común_dividor ((3, 5) 1 >>> mayor_común_dividor ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,grn_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Oguerúta lista opaite prefijo ipukuvéva guive ipukuvéva peve pe cadena de entrada-pe >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,grn_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Embohasa peteĩ cadena oguerekóva papapy ojeipysóva espacio-pe oñepyrũva 0 guive n peve. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,grn_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Ojehecháramo peteĩ cadena, ehecha mboy caracter ojoavýva (ndaha'éiva caso) oguereko >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,grn_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Ko función-pe oñemoinge peteĩ cuerda ohechaukáva nota musical peteĩ formato especial ASCII-pe. Ne rembiapo hína emoñe'ẽmba umi cuerda lista de cuerda de enteros correspondiente a muchos latidos. Ko'ápe oĩ peteĩ leyenda: 'o' nota, último cuatro latidos 'o'""""""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,grn_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Ejuhu mboy jeypa ikatu ojejuhu peteĩ substring oñeme'ẽva pe cadena ypype. Emboja'o umi caso oñombohovakéva. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,grn_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Oikéva ha'e peteĩ cadena delimitada espacio-pe oguerekóva papapy 'cero' guive 'nueve' peve. Umi opción válida ha'e 'cero', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho' ha 'nueve'. Emondo pe cadena oguerekóva papapy oñemohendava'ekue michĩvéva guive tuichavévape peve >>> sort_numbers (('tres uno cinco') 'uno tres cinco' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,grn_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Peteĩ lista de números (de longitud mokõive) ojeiporavo ha ojevy mokõive oĩvéva ojoykére ha ojevy orden (número michĩvéva, número tuichavéva). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,grn_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Ojehecháramo peteĩ papapy aty (ha'éva mokõi elemento-gui), ojeporu peteĩ transformación lineal upe papapy aty, ikatu hag̃uáicha papapy michĩvéva oiko 0 ha tuichavéva oiko 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,grn_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter oñeme'ẽva lista oimeraẽ valor python-pegua umi entero-pe g̃uarã añónte >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,grn_Latn,python,"

def strlen(string: str) -> int:
    """"""Jevy ipukukue oje'éva >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,grn_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Peteĩ papapy n-pe g̃uarã, ejuhu papapy tuichavéva omboja'óva n-pe, michĩvéva n-gui >>> mayor_dividor ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,grn_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Eguerúta peteĩ lista de factores primos peteĩ papapy entero rehegua, michĩvéva guive tuichavéva peve. Opaite factor ojehaiva'erã heta jey, ha'e va'erã umi ojehechaukáva factorizado-pe. Input número ha'eva'erã producto de todos los factores >>> factorizar(8) [2, 2, 2] >>> factorizar(25) [5, 5] >>> factorizar(70) [2, 5, 7] """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,grn_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Peteĩ lista de enteros-gui, emboyke opaite elemento ojejuhúva hetave jey. Emboyke umi elemento-kuéra orden oĩva'ekue upe entrada-pe. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,grn_Latn,python,"

def flip_case(string: str) -> str:
    """"""Peteĩ cadena-pe g̃uarã, embojuehe umi caracter minúsculo-gui maymáva ha minúsculo-gui maymáva. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,grn_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Concatenate list of strings into a single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc' """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,grn_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filtrar una lista de entrada de cadenas sólo para las que empiezan con un prefijo determinado. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,grn_Latn,python,"

def get_positive(l: list):
    """"""Embohasa papapy positivo-kuéra añoite oĩva lista-pe. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,grn_Latn,python,"

def is_prime(n):
    """"""Eguerúta añete peteĩ papapy ha'e ramo peteĩ número primo, ha añete'ỹramo. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,grn_Latn,python,"import math


def poly(xs: list, x: float):
    """"""xs ha'e peteĩ polinomio rehegua coeficiente. find_zero ojuhu x ha'e peteĩ polinomio. find_zero ome'ẽ peteĩ punto cero añónte, oĩramo jepe heta. Avei, find_zero oipuru peteĩ lista xs oguerekóva papapy par coeficiente ha coeficiente ndaha'éiva cero tuichavéva, ha'e rupi peteĩ solución. >>> round (((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Omohesa'ỹijo polinomio oguerekóva coeficiente xs punto x-pe. omyengovia xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,grn_Latn,python,"

def sort_third(l: list):
    """"""Ko función oipyhy peteĩ lista l ha ome'ẽ peteĩ lista l' ha'e háicha umi índice-pe ha'e peteĩcha l ndojokupytýiva mbohapy rehe, ha umi valor oguerekóva umi índice-pe ha'e peteĩcha umi valor oguerekóva umi índice ojojoguáva l rehe, katu oñemohenda. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,grn_Latn,python,"

def unique(l: list):
    """"""Ome'ẽjey umi elemento único oñemohendava peteĩ lista-pe >>> único (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,grn_Latn,python,"

def max_element(l: list):
    """"""Embohasa elemento máximo oĩva lista-pe. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,grn_Latn,python,"

def fizz_buzz(n: int):
    """"""Emyengovia papapy 7 ojehechaha umi papapy entero michĩvéva n-gui ha oñemboja'óva 11 térã 13-pe. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,grn_Latn,python,"

def sort_even(l: list):
    """"""Ko función oipyhy peteĩ lista l ha ome'ẽ peteĩ lista l' ha'e háicha l' ha'e háicha l umi índice impar, ha umi valor oguerekóva umi índice par ha'e umi valor oguerekóva umi índice par de l, katu oñemohenda. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,grn_Latn,python,"

def encode_cyclic(s: str):
    """"""Oguereko peteĩ cadena de entrada codificada función encode_cyclic ndive. Oguereko peteĩ cadena decodificada.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""Ome'ẽjey cadena codificada grupo ciclicado mbohapy carácter-gui.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,grn_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib ome'ẽ peteĩ papapy n-ha ha'éva peteĩ papapy Fibonacci ha ha'e avei papapy primo. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,grn_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triple_sum_to_zero oipuru peteĩ papapy entero-kuéra lista peteĩ entrada-ramo. Omoneĩ True oĩramo mbohapy elemento ojoavýva papapy entero-kuéra lista-pe ha upeicha'ỹrõ False. >>> triple_sum_to_zero([1, 3, 5, 0]) False >>> triple_sum_to_zero[(1, 3, -2, 1]) True >>> triple_sum_to_zero([1, 2, 3, 7]) False >>> triple_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triple_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,grn_Latn,python,"

def car_race_collision(n: int):
    """"""Eñeimahinamína peteĩ tape ipukúva ha hekopete. n mba'yruguata ohóva akatúa gotyo ha avei ambue n mba'yruguata ohóva akatúa gotyo. Mokõi mba'yruguata oñepyrũ mombyry ojuehegui. Opaite mba'yruguata oguata pya'e. Mokõi mba'yruguata oñombohovái peteĩ mba'yruguata ohóva akatúa gotyo ha peteĩ oúva akatúa gotyo. Ha katu, umi mba'yruguata imbarete ha imbarete'ỹre; upévare, oguata ohóvo tape rehe ha'ete ku noñembohováiva. Ko función ohechauka mba'e mboy jeypa oiko ko'ã mba'yruguata.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,grn_Latn,python,"

def incr_list(l: list):
    """"""Embohasa lista oguerekóva elemento-kuéra ojupíva 1. >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,grn_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero oipuru peteĩ papapy entero-kuéra rehegua lista peteĩ entrada-ramo. Omoneĩ True oĩramo mokõi elemento ojoavýva papapy entero-kuéra rehegua lista-pe ha ha'éva suma cero-pe, ha False ambue hendáicha. >>> pairs_sum_to_zero([1, 3, -2, 1]) False >>> pairs_sum_to_zero[(1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,grn_Latn,python,"

def change_base(x: int, base: int):
    """"""Emoambue base numérica papapy jeikeha x base-pe. embohovái cadena representación ñemoambue rire. umi número base michĩve 10gui. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,grn_Latn,python,"

def triangle_area(a, h):
    """"""Ojehecháramo longitud peteĩ lado ha área de retorno tuichavéva peteĩ triángulo-pe g̃uarã. >>> triángulo_area{5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,grn_Latn,python,"

def fib4(n: int):
    """"""Fib4 papapy ñemohenda ha'e peteĩ ñemohenda ojoguáva Fibbonacci ñemohendape ojeheróva kóicha: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Ehai peteĩ tembiapoite embojuehe hag̃ua mba'éichapa embojuehe papapy ñemohenda n-ha. Ani eipuru jejevy. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,grn_Latn,python,"

def median(l: list):
    """"""Ñembojevyva'erã umi elemento lista-pe mediana.""""""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,grn_Latn,python,"

def is_palindrome(text: str):
    """"""Ohechajey pe cadena oñeme'ẽva ha'e peteĩ palíndromo >>> is_palíndromo (('a'a') Añete >>> is_palíndromo (('aaaaa') Añete >>> is_palíndromo (('zbcd') Falso """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,grn_Latn,python,"

def modp(n: int, p: int):
    """"""Embohasa 2^n módulo p (eikuaa papapykuéra). >>> módulo p{3, 5) 3 >>> módulo p{1101, 101) 2 >>> módulo p{0, 101) 1 >>> módulo p{3, 11) 8 >>> módulo p{100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,grn_Latn,python,"

def encode_shift(s: str):
    """"""Oguereko peteĩ cadena de entrada codificada función encode_shift ndive. Oguereko peteĩ cadena decodificada. """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""Ome'ẽ jey cadena codificada omomýiva 5 caracter alfabeto-pe.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,grn_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ha'e peteĩ función oipyhýva cadena ha ombohasa cadena ndoguerekóiva vocal. >>> remove_vowels('') '' >>> remove_vowels(""abcdef\nghijklm"") 'bcdf\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,grn_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Ovy'a añete opaite papapy oĩva lista l-pe oĩramo umbral t guýpe. >>> umbral-pe guýpe{{[1, 2, 4, 10], 100) Añete >>> umbral-pe guýpe{{[1, 20, 4, 10], 5) Falso """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,grn_Latn,python,"

def add(x: int, y: int):
    """"""Omoĩ mokõi papapy x ha y >>> ombojoapy ((2, 3) 5 >>> ombojoapy ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,grn_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Ehecha mokõi ñe'ẽ oguerekópa peteĩchagua ñe'ẽtéva. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddabc') False >>> same_chars ((('abcd', 'dddddabddce') False >>> same_chars (((abcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,grn_Latn,python,"

def fib(n: int):
    """"""Embohasa papapy n-ha Fibonacci-pegua. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,grn_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket ha'e peteĩ cadena ""<"" ha "">"". return True if each opening bracket has a corresponding closing bracket. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,grn_Latn,python,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing. >>> monotonically (([1, 2, 4, 20]) True >>> monotonically (([1, 20, 4, 10]) False >>> monotonically (([4, 1, 0, -10]) True """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,grn_Latn,python,"

def common(l1: list, l2: list):
    """"""Ome'ẽjey umi elemento común único oñemohendava'ekue mokõi lista-pe g̃uarã. >>> común (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> común (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,grn_Latn,python,"

def largest_prime_factor(n: int):
    """"""Embohasa factor primo tuichavéva n-gui. Eimo'ã n > 1 ha ndaha'éi peteĩ primo. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,grn_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ha'e peteĩ función ombojoajúva papapy 1 guive n peve. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,grn_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket ha'e peteĩ cadena ""("" ha "")"". return True if each opening bracket has a corresponding closing bracket. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,grn_Latn,python,"

def derivative(xs: list):
    """"""xs ohechauka umi coeficiente peteĩ polinomio rehegua. xs[0] + xs[1] * x + xs[2] * x^2 + .... Eguereko ko polinomio derivada peteĩchaite. >>> derivada (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivada[(1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,grn_Latn,python,"

def fibfib(n: int):
    """"""FibFib papapy ñemohenda ha'e peteĩ ñemohenda ojoguáva Fibbonacci ñemohendape ojeheróva kóicha: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Ehai peteĩ tembiapoite eiporavo hag̃ua n-ha elemento papapy ñemohenda. >>> fibfib(1) 0 >>> fib(5) 4 >>> fibfib(8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,grn_Latn,python,"
FIX = """"""Ehai peteĩ función vowels_count oipurúva peteĩ ñe'ẽpehẽtai upeigua ha ombohasa upe ñe'ẽpehẽtai upeigua papapy. Ko'ã ñe'ẽpehẽtai upeigua ha'e 'a', 'e', 'i', 'o', 'u'. Ko'ápe, 'y' ha'e avei peteĩ ñe'ẽpehẽtai upeigua, ha'e oĩramo ñe'ẽ pahaitépe añónte. Techapyrã: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Emoingeve prueba rehegua caso. """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,grn_Latn,python,"
def circular_shift(x, shift):
    """"""Ñembojere umi dígito entero x rehegua, ñembojere umi dígito akatúa gotyo ha emyengovia resultado peteĩ cadena-ramo. Ñembojere > dígito papapy, emyengovia dígito iñambuéva. >>> circular_shift(12, 1) ""21"" >>> circular_shift(12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,grn_Latn,python,"
def digitSum(s):
    """"""Tembiaporã Ehai peteĩ función oiporúva peteĩ cadena jeikeha ha ombohasa suma umi carácter yvatevéva ASCII-pegua código-pe añónte. Techapyrã: digitSum("""") => 0 digitSum(""abAB"") => 131 digitSum(""abcCd"") => 67 digitSum(""helloE"") => 69 digitSum(""woArBld"") => 131 digitSum(""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,grn_Latn,python,"
def fruit_distribution(s,n):
    """"""Ko tembiapópe, oñeme'ẽta ndéve peteĩ cadena ohechaukáva heta manzana ha naranja oñemboja'óva peteĩ cesta de frutas-pe ko cesta oguereko manzana, naranja ha mango. Oñeme'ẽvo cadena ohechaukáva papapy total naranja ha manzana ha peteĩ papapy entero ohechaukáva papapy total frutas-kuéra oĩva cesta-pe, embohasa pe papapy mango-kuéra oĩva cesta-pe. techapyrã: fruit_distribution""5(manzana ha 6 naranja"", 19) -> 19 - 5 - 6 = 8 fruit_distribution""0 manzana ha 1 naranja"",3) -> 3 - 0 - 1 = 2 fruit_distribution""2 manzana ha 3 naranja"", 100) -> 100 - 2 - 3 = 95 fruit_distribution""100 manzana ha 1 naranja"",1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,grn_Latn,python,"
def pluck(arr):
    """"""""Oñeme'ẽvo peteĩ matriz ohechaukáva peteĩ yvyra'anga oguerekóva nódulo entero ndaha'éiva negativo ne rembiapo hína eiporavo peteĩva umi nódulo ha eguerúma. Pe nódulo ojeiporavóva ha'eva'erã nódulo oguerekóva valor par michĩvéva. Ojejoguáramo heta nódulo oguerekóva valor par michĩvéva, eguerúma nódulo oguerekóva índice michĩvéva. Pe nódulo ojeiporavóva ojejuhu va'erã peteĩ lista-pe, [smallest_value, its index] , Ndaipóri ramo valor par térã matriz oñeme'ẽva nandi, eguerúma []. Techapyrã 1: Eike: [4,2,3] Jehepyme'ẽ: [2, 1] Tape he'iséva: 2 oguereko valor par michĩvéva ha 2 oguereko índice michĩvéva. Techapyrã 2: Eike: [1,2,3] Jehepyme'ẽ: [2, 1] Tape he'iséva: 2 oguereko valor michĩvéva ha 2 oguereko índice michĩvéva. Techapyrã 3: Eike: [] Eike: [] [4: [5, 3] Eike: [0, 4] Tape'iséva: 1 [0, 2] Jehe'i: 0 jehe'i: 1 oreko valor par michĩvéva, katu índice michĩvéva, upéicha jaiporavóta: 0= 0== 0 * Techapyrã: 1o michĩvéva, ha'i oĩ mokõi mbojojaha.""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,grn_Latn,python,"
def search(lst):
    '''Ojehechakuaa peteĩ papapy entero ha'evéva tuichavéva cero-gui ha oguerekóva frecuencia tuichavéva térã peteĩcha papapy entero-pe. Peteĩ papapy entero jepyso ha'e umi jey ojehechaukáva papapýpe. Ndaipóri ramo upeichagua valor, ojehechaukáta -1. Techapyrã: jeheka[4, 1, 2, 2, 3, 1]) == 2 jeheka[1, 2, 2, 3, 3, 3, 4, 4]) == 3 jeheka[5, 5, 4, 4, 4]) == -1 '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,grn_Latn,python,"
def strange_sort_list(lst):
    '''Ojehecháramo peteĩ papapy entero rehegua, ojevy peteĩ lista orden extraño-pe. Ñemboja'o extraño, oñepyrũ valor mínimo-gui, upéi máximo umi papapy entero hembýva-gui, upéi mínimo ha péicha. Techapyrã: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,grn_Latn,python,"
def triangle_area(a, b, c):
    '''Ojehecháramo umi triángulo mbohapy ykére ipukukue, ojevy'a triángulo área, oñemohenda mokõi decimal-pe, umi mbohapy ykére oĩramo triángulo válido.'''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,grn_Latn,python,"
def will_it_fly(q,w):
    '''Ehai peteĩ función omyengoviáva True, upe objeto q ovevévo, ha False ambue hendáicha. Objeto q ovevéta ha'e oĩramo equilibrio-pe (ha'e peteĩ lista palindroma) ha umi elemento suma michĩve térã peteĩcha pe peso máximo ikatúva w ndive. Techapyrã: will_it_fly([1, 2], 5) â -> False # 1+2 michĩve pe peso máximo ikatúva guive, ha katu imbalance. will_it_fly([3, 2, 3], 1) â -> False # oĩmbalance, ha katu 3+2+3 tuichave pe peso máximo ikatúva guive. will_it_fly[3, 2, 3], 9) â -> True # 3+23 michĩve pe peso máximo ikatúva guive, ha ha'e imbalance. will_it_fly([3], â 5) -> True # 3 michĩve pe peso máximo ikatúva guive, ha ha'e imbalance '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,grn_Latn,python,"
def smallest_change(arr):
    """"""Peteĩ array entero rehegua, ejuhu papapy michĩvéva umi elemento oñemoambue va'erã ojapo hag̃ua upe array palindromo. Peteĩ array palindromo ha'e peteĩ array ojehechava'erã tenonde gotyo ha tapykue gotyo. Peteĩ ñemoambue, ikatu emoambue peteĩ elemento oimeraẽ ambue elemento-pe. Techapyrã: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,grn_Latn,python,"
def total_match(lst1, lst2):
    '''Ehai peteĩ función omoneĩva mokõi lista de cadenas ha ome'ẽva lista oguerekóva papapy total de caracteres opaite cadena-pe ambue lista-gui sa'ive. mokõi lista oguerekóramo papapy total de caracteres, ome'ẽta lista peteĩha. Techapyrã total_match([], []) â -> [] total_match['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match['hi', 'admin'], ['I', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match['4', ['1', '2', '3', '4', '5', ['4]) -> ['4'] ].'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,grn_Latn,python,"
def is_multiply_prime(a):
    """"""Ehai peteĩ función omoneĩva añeteha pe papapy oñeme'ẽva ha'e ramo 3 papapy primo multiplicación ha añeteha ambue hendáicha.""""""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,grn_Latn,python,"
def is_simple_power(x, n):
    """"""Nde rembiapo hína ehai peteĩ función oguahëva true peteĩ papapy x ha'e ramo simple potencia n ha false ambue caso-pe. x ha'e peteĩ simple potencia n ramo n**int=x Techapyrã: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,grn_Latn,python,"
def iscube(a):
    '''Ehai peteĩ función oiporúva peteĩ papapy entero a ha ombohovái True, kóva ingeger ha'e peteĩ cubo papapy entero rehegua. Ehecha: ikatu eimo'ã pe mba'e oikéva katuete oĩ porãha. Techapyrã: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,grn_Latn,python,"
def hex_key(num):
    """"""Oñeha'ãta ehai peteĩ función oipurúva peteĩ papapy hexadecimal peteĩ cadena-ramo ha oipapáva papapy hexadecimal ha'éva número primo (número primo, térã peteĩ primo, ha'e peteĩ papapy natural tuichavéva 1 ha ndaha'éiva producto mokõi papapy natural michĩvéva). Papapy hexadecimal ha'e 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Papapy primo ha'e 2, 3, 5, 7, 11, 13, 17,... Upévare ejuhúta papapy he'íva: 2, 3, 5, 7, B (= papapy decimal 11), D (= papapy decimal 13). Ehecha: ikatu eimo'ã pe entrada akóinte oĩ porã térã nda'ipóri, ha umi símbolo A,B,C,D,E,F katuete ojehai letra mayor-pe. Techapyrã: num ""AB"" pe osẽ va'erã num = 1. num ""1077E"" pe osẽ va'erã 2. num ""AB"" = num331EDA pe osẽ va'erã num = 4. ""ABC"" pe osẽ va'erã num = 6.01234567D. ""ABC"" pe osẽ va'erã num = 2.""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,grn_Latn,python,"
def decimal_to_binary(decimal):
    """"""Oñeme'ẽta ndéve peteĩ papapy decimal-pe ha ne rembiapo hína emoambue binario-pe. Ko función omyengoviáta peteĩ cadena, ha opaite carácter omohendáta peteĩ número binario. Opaite carácter oĩva cadena-pe ha'éta '0' térã '1'. Oimeta mokõive carácter extra 'db' ñepyrũmby ha ipahaitépe. Umi carácter extra oĩ oipytyvõ hag̃ua formato-pe. Techapyrã: decimal_to_binary(15) # omyengoviáta ""db1111db"" decimal_to_binary32) # omyengoviáta ""db100000db"" """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,grn_Latn,python,"
def is_happy(s):
    """"""Oñeme'ẽ ndéve peteĩ string s. Ne rembiapo hína ehecha hag̃ua pe string ha'e porãpa térã nahániri. Peteĩ string ha'e porãramo ipukukue 3 ha opaite 3 tai ojoavýva ha'e ojuehegui Techapyrã: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,grn_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ha'e peteî arapokôindy paha mbo'esyry ha mbo'ehára ome'êva'erâ mbo'eharakuérape mbo'epy. Mbo'ehára ojapómava'ekue ijeheguiete mbo'epy mbo'esyry rehegua. Pe apañuãi ha'e oguerekóva ha'e okañy pe código oipurúva mbo'epy mbo'esyrýpe g̃uarã. Ombo'e ndéve mbo'ehára mbo'epy mbo'esyry rehegua ha rehaiva'erâ peteî función ikatúva omoguahê mbo'epy mbo'esyry rehegua mbo'epy mbo'esyry rupive ko'â ta'angápe: GPA.""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,grn_Latn,python,"
def prime_length(string):
    """"""Ehai peteĩ función oipyhýva peteĩ cadena ha ombohovái True, pe cadena ipukukue ha'éramo peteĩ papapy primo térã False ambue hendáicha Ejemplo prime_length{'Hello') == True prime_length{'abcdcba') == True prime_length{'kittens') == True prime_length{'orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,grn_Latn,python,"
def starts_one_ends(n):
    """"""Ojehecháramo peteĩ entero positivo n, emyengovia papapy entero positivo n dígito rehegua oñepyrũva térã opáva 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,grn_Latn,python,"
def solve(N):
    """"""Ome'ẽvo peteĩ papapy entero positivo N, emyengovia suma total de sus dígitos en binario. Techapyrã N = 1000, umi dígito suma ha'e 1 ha oguenohẽ ""1"". N = 150-pe, umi dígito suma ha'e 6 ha oguenohẽ ""110"". N = 147-pe, umi dígito suma ha'e 12 ha oguenohẽ ""1100"". Variables: @N número entero Constraints: 0 â‰¤ N â‰¤ 10000.""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,grn_Latn,python,"
def add(lst):
    """"""Ojehecháramo peteĩ lista ndaha'éiva henyhẽva papapy entero-gui, ñambojoapy umi elemento par oĩva umi índice impar-pe. Techapyrã: ñambojoapy ([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,grn_Latn,python,"
def anti_shuffle(s):
    """"""Ehai peteĩ función oipyhýva peteĩ cadena ha ombohasa peteĩ versión ordenada. Ñe'ẽnguéra rehegua versión ordenada, ha'e peteĩ cadena opaite ñe'ẽ (oñemboja'óva espacio rupive) oñemoambuehápe peteĩ ñe'ẽ pyahu opaite caracteres oñemohendahápe orden ascendente-pe ojejesarekóvo valor ascii rehe. Ehecha: Eñongatuva'erã ñe'ẽ ha espacios en blanco ñe'ẽjoajuhápe. Techapyrã: anti_shuffle ((('Hi') ombohasa 'Hi' anti_shuffle ((('hijo') ombohasa 'ehllo' anti_shuffle (('Hello World!!!') ombohasa 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,grn_Latn,python,"
def get_row(lst, x):
    """"""Oñeme'ẽ ndéve peteĩ dato 2D, peteĩ lista anidada-ramo, ojoguáva matriz-pe, katu, ojoavývo matriz-gui, peteĩteĩva umi fila ikatu oguereko heta columna. Oñeme'ẽramo lst ha entero x, ejuhu entero x lista-pe, ha emondo lista de tuples, [(x1, y1), (x2, y2) ...] ikatu hag̃uáicha peteĩteĩva umi tuple ha'e peteĩ coordenada - (fila, columna), oñepyrũva 0. Eha'ã umi coordenada raẽve umi fila orden ascendente-pe. Avei, eha'ã umi coordenada fila-pegua umi columna orden descendente-pe. Techaukarã: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0), get_(], 1) [] == [[fila 1, 2, 3, 2]], 3 == 2, 2]] ]]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,grn_Latn,python,"
def sort_array(array):
    """"""Ome'ẽvo peteĩ matriz entero ndaha'éiva negativo, emondojey peteĩ copia matriz oñeme'ẽva ñemboja'o rire, emohenda matriz oñeme'ẽva orden ascendente-pe suma (ñepyrũha valor índice, ipaha valor índice) ha'e par, térã emohenda orden descendente-pe suma (ñepyrũha valor índice, ipaha valor índice) ha'e par.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,grn_Latn,python,"
def encrypt(s):
    """"""Ejapo peteĩ función encript oipurúva peteĩ cadena argumentoramo ha omog̃uahẽ peteĩ cadena encriptada alfabeto oñemoambue jave. El alfabeto oñemoambue va'erã ikatu hag̃uáicha umi letra oguejy mokõi jey mokõi henda peve. Techapyrã: encrypt('hi') omog̃uahẽ 'lm' encrypt('asdfghjkl') omog̃uahẽ 'ewhjklnop' encrypt('gf') omog̃uahẽ 'kj' encrypt('et') omog̃uahẽ 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,grn_Latn,python,"
def next_smallest(lst):
    """"""Oñeme'ẽ ndéve peteĩ papapy entero rehegua. Ehai peteĩ función next_smallest() omyengoviáva elemento 2o michĩvéva upe lista-pe. Omyengoviáva None ndaipóriramo upe elemento. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,grn_Latn,python,"
def is_bored(S):
    """"""Oñeme'ẽta ndéve peteĩ ñe'ẽpehẽtai ha ne rembiapo hína emoĩmba hag̃ua mboýpa ñe'ẽpehẽtai ""I"" oñepyrũva. Ñe'ẽpehẽtai ""I"" ndive. Ñe'ẽpehẽtai omoha'ãnga ""I"", ""?"" térã ""!"". Techapyrã: >>> is_bored (oñembohéra ""Hello world"") 0 >>> is_bored (oñembohéra ""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,grn_Latn,python,"
def any_int(x, y, z):
    '''Ejapo peteĩ función oipyhýva 3 papapy. Oheja añetete peteĩ papapy ha'e ramo mokõi papapy ambuéva suma, ha opaite papapy ha'e papapy entero. Oheja añetete ambue mba'épe. Techaukarã any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,grn_Latn,python,"
def encode(message):
    """"""Ehai peteĩ función oipyhýva marandu ha ombojuajuva'erã opaite tai ha tai'aty, omyengoviáva opaite tai'aty ñe'ẽpehẽtai upe tai'aty ojehechava'ekue 2 tenda tenondeve upe tai'aty inglés-pe. Techapyrã: >>> encode('test') 'TGST' >>> encode('Kóva ha'e marandu') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,grn_Latn,python,"

def skjkasdkd(lst):
    """"""Ojehechakuaa umi papapy entero rehegua. Ojuhúne pe papapy primo tuichavéva ha ombohasa umi papapy entero rehegua suma. Techapyrã: LST = 0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3,, pe resultado ha'eva'erã 10 LST = 1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1, pe resultado ha'eva'erã 25 LST = 1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3, pe resultado ha'eva'erã 13 LST = 0,724,32,71,99,32,6,0,5,91,83,0,5,6, pe resultado ha'eva'erã 11 LST = [0,81,12,31,21], pe resultado ha'eva'erã 3 LST = [0,1,8,1,2,1,7] pe resultado ha'eva'erã 7""""""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,grn_Latn,python,"
def check_dict_case(dict):
    """"""Ome'ẽramo peteĩ ñe'ẽryru, omyengovia True oiméramo opaite tekome'ẽ ha'e tai michĩ térã opaite tekome'ẽ ha'e tai tuicháva, ambue hendápe omyengovia False. Función omyengoviava'erã False ha'e pe ñe'ẽryru oñeme'ẽva nandi. Techaukarã: check_dict_case{""a"":""apple"", ""b"":""banana""}) omyengoviava'erã True. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) omyengoviava'erã False. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) omyengoviava'erã False. check_dict_case{""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) omyengoviava'erã False. check_dict_case{""NC""STATE:""STATE"", ""Z"":""IP"":""45"") omyengoviava'erã True.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,grn_Latn,python,"
def count_up_to(n):
    """"""Ejapo peteĩ función oipyhýva peteĩ papapy entero ndaha'éiva negativo ha ome'ẽva peteĩ matriz umi n papapy entero ypy ha'éva papapy primo ha michĩvéva n-gui. Techapyrã: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,grn_Latn,python,"
def multiply(a, b):
    """"""Eipyvu pe función oipyhýva mokõi papapy entero ha ome'ẽva producto umi dígito unidad-pegua. Eimo'ã pe entrada katuínte oĩ porãha. Techapyrã: multiplicar 148, 412) ome'ẽ va'erã 16. multiplicar 19 28 ome'ẽ va'erã 72. multiplicar 2020 1851 ome'ẽ va'erã 0. multiplicar 14-15 ome'ẽ va'erã 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,grn_Latn,python,"
def count_upper(s):
    """"""Ojehecháramo peteĩ cadena s, emboja'o umi vocálica guasu papapy umi índice parape. Techapyrã: count_upper{""aBCdEf"") ome'ẽ 1 count_upper{""abcdefg"") ome'ẽ 0 count_upper{""dBBE"") ome'ẽ 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,grn_Latn,python,"
def closest_integer(value):
    '''Ejapo peteĩ función oipyhýva peteĩ valor (cadena) omohendáva peteĩ papapy ha ome'ẽva papapy entero hi'aguĩvéva. Pe papapy oĩramo mokõi papapy entero-gui, embojere cero-gui. Techaukarã >>> closest_integer (((""10"") 10 >>> closest_integer ((""15.3"") 15 Tenda: Embojere cero-gui he'ise, upe papapy oĩramo mokõi papapy entero-gui, embojere va'erã papapy oĩvéva cero-gui. Techaukarã nearest_integer "" ((14.5"") ome'ẽ va'erã 15 ha closest_integer "" ((-14.5"") ome'ẽ va'erã -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,grn_Latn,python,"
def make_a_pile(n):
    """"""Ome'ẽvo peteĩ papapy entero positivo n, rejapo va'erã peteĩ pila oguerekóva n ita renda. Peteĩha nivel oguerekóva n ita. Ita papapy oĩva nivel oúvape ha'e: - papapy impar oúvape, n ha'e ramo impar. - papapy par oúvape, n ha'éramo par. Eguereko papapy ita oĩva cada nivel-pe peteĩ lista-pe, ha upépe elemento oĩva índice i-pe ohechauka papapy ita oĩva nivel (i+1) -pe. Techapyrã: >>> make_a_pile ((3) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,grn_Latn,python,"
def words_string(s):
    """"""Oñeme'ẽta ndéve ñe'ẽpehẽtai upeigua oñemboja'óva pumbyry térã ñe'ẽpehẽtai upeigua rupive. Nde rembiaporã ha'e emboja'o ñe'ẽpehẽtai upeigua ha embohovái peteĩ ñe'ẽpehẽtai upeigua. Techapyrã: words_string ((""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""] words_string ((""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""] """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,grn_Latn,python,"
def choose_num(x, y):
    """"""Ko función oipyhy mokõi papapy positivo x ha y ha ome'ẽ papapy entero par tuichavéva oĩva gama [x, y] ryepýpe. Ndaipóri ramo upe papapy, upe rire función ome'ẽ va'erã -1. Techapyrã: choose_num(12, 15) = 14 choose_num(13, 12) = -1 """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,grn_Latn,python,"
def rounded_avg(n, m):
    """"""Oñeme'ẽ ndéve mokõi papapy entero positivo n ha m, ha ne rembiapo hína eiporavo papapy entero promedio n guive m peve (n ha m ndive). Embojuaju ne ñembohovái papapy entero hi'aguĩvéva peve ha embohasa binario-pe. N tuichavévo m, embojuaju -1. Techaukaha: rounded_avg{1, 5} => ""0b11"" rounded_avg{7, 5} => -1 rounded_avg{10, 20} => ""0b1111"" rounded_avg{20, 33} => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,grn_Latn,python,"
def unique_digits(x):
    """"""Ojehecháramo peteĩ lista de enteros positivos x. omyengoviáta peteĩ lista ordenada opaite elemento ndoguerekóiva dígito par.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,grn_Latn,python,"
def by_length(arr):
    """"""Peteĩ array entero rehegua, emohenda umi entero oĩva 1 ha 9 ndive, embojuehe array resultante, ha upéi emyengovia peteĩteĩ dígito téra ojoajúva rehe ""Uno"", ""Mokõi"", ""Mokõi"", ""Irundy"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"", ""Peteĩ"". Techapyrã: arr = [2, 1, 1, 1, 4, 5, 8, 2, 3] -> emohenda arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> emohenda arr -> [8, 5, 4, 3, 2, 2, 1, 1] eju jey [""Peteĩ"", ""Peteĩ"", ""Mokõi"", ""Mokõi"", ""Mokõi"", ""Mokõi"", ""Peteĩ"", ""Peteĩ""] Oiméramo array oĩ'ỹ, embojuehe array: arr = [] eju jey [] Oiméramo array oguereko papapy hasýva, eheja'ỹi: arr = [1, -1 , 55] -> arr -> [1, 1], [1, 55 -> reverse arr -> [55, arr =1] eju jey ['] - 'One' ].""""""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,grn_Latn,python,"
def f(n):
    """"""Embohape función f oiporúva n peteĩ parámetro ramo, ha ome'ẽ peteĩ lista tuichakue n, ikatu hag̃uáicha elemento valor índice i-pe ha'e factor de i, ha'e ramo i par térã suma de números 1 a i, ha'e ramo i ndaha'éi par. i oñepyrũ 1. factor de i ha'e multiplicación de los números de 1 a i (1 * 2 * ... * i). Techapyrã: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,grn_Latn,python,"
def even_odd_palindrome(n):
    """"""Ome'ẽ peteĩ papapy entero positivo n, emyengovia peteĩ tupulo oguerekóva papapy entero par ha impar oĩva upe jerére, ha'éva ((1, n), ha'éva avei. Techapyrã1: Ñeguenohẽ: 3 Ñeguenohẽ: (1, 2) Ñemyesakã: Umi papapy entero ha'e 1, 2, 3. peteĩva ha'e par ha mokõi ha'e impar. Techapyrã2: Ñeguenohẽ: 12 Ñeguenohẽ: (4, 6) Ñemyesakã: Umi papapy entero ha'e 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. irundy ha'e par ha 6 ha'e impar. Ñemombe'u: 1. 1 <= n <= 10^3 2. tupulo ome'ẽ papapy entero ha'e par ha papapy entero ha'e impar. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,grn_Latn,python,"
def count_nums(arr):
    """"""Ehai peteĩ función count_nums oiporúva peteĩ matriz entero-va ha ome'ẽva papapy elemento oguerekóva peteĩ suma dígito-va > 0. Peteĩ papapy ha'e negativo, upe rire ipiru dígito-va ha'éta negativo: techapyrã -123 oguereko dígito-va -1, 2, ha 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,grn_Latn,python,"
def move_one_ball(arr):
    """"""Ja'e hag̃ua ikatuha ñamboja'o peteĩ array mba'e'okápe sa'ive, jajapova'erã ko'ã mba'e: Ikatu ñamboja'o umi elemento array-pe peteĩ posición-pe tape porãre. Pe elemento array paha oñemohenda va'erã posición ñepyrũha gotyo, ha'éva 0°. Oiméramo ikatu ñamboja'o pe array ñamboja'o hag̃ua, upe rire ñamboja'o True, upe rire ñamboja'o False. Pe array oĩramo sa'ive, upe rire ñamboja'o True.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,grn_Latn,python,"
def exchange(lst1, lst2):
    """"""Ko apañuãi, eipurúta peteĩ función oipyhýva mokõi lista papapy rehegua, ha ohechaukáta ikatúpa ojejapo peteĩ intercambio de elementos ijapytepekuéra ojapo hag̃ua lst1 peteĩ lista papapy par rehegua añónte. Ndaipóri límite umi elemento intercambio-pe g̃uarã lst1 ha lst2 apytépe. Oikóramo ikatu oñemyengovia umi elemento lst1 ha lst2 apytépe ojapo hag̃ua opa umi elemento lst1 rehegua papapy par, emombe'u ""SI"". Ambue hendáicha, emombe'u ""NO"". Techapyrã: intercambio [1, 2, 3, 4], [1, 2, 3, 4]) => ""SI"" intercambio [1, 2, 3, 4], [1, 5, 3, 4]) => ""NO"" Oñeimo'ã umi lista de entrada ndaha'evéima imarãva. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,grn_Latn,python,"
def histogram(test):
    """"""Ome'ẽvo peteĩ cadena omoha'ãngava umi letra minúscula ha separada espacios-gui, emondo ñe'ẽryru upe letra oje'e hetave jey ha oguerekóva conteo correspondiente. Oiméramo heta letra oje'e peteĩcha, emondo opaite. Techapyrã: histograma (a) == {'a': 1, 'b': 1, 'c': 1} histograma (a) == {'a': 2, 'b': 2} histograma (a) == {'a': 2, 'b': 2} histograma (a) == {'a': 2, 'b': 2} histograma (b) == {'b 4}: histograma (a) == {'b'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} {'} } } } } }""""""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,grn_Latn,python,"
def reverse_delete(s,c):
    """"""Tembiaporã Ja'e mokõi ñe'ẽpehẽtai s ha c, ñamboguejyva'erã opaite ñe'ẽpehẽtai s-pe ha'éva oimeraẽ ñe'ẽpehẽtai c-pe ha upéi jahecha pe ñe'ẽpehẽtai upeigua ha'epa palíndromo. Peteĩ ñe'ẽpehẽtai upeigua ojehero palíndromo omoñe'ẽramo tenonde gotyo ha tapykue gotyo. Ñamoĩva'erã peteĩ tupulo oguerekóva ñe'ẽpehẽtai upeigua ha True/False jahecha hag̃ua. Techapyrã s = ""abcde"", c = ""ae"", pe ñe'ẽpehẽtai upeigua ha'eva'erã ('bcd', False) s = ""abcdef"", c = ""b"" pe ñe'ẽpehẽtai upeigua ha'eva'erã ('acdef', False) s = ""abcdedcba"", c = ""abc"", pe ñe'ẽpehẽtai upeigua ha'eva'erã ('cdedc', True)""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,grn_Latn,python,"
def odd_count(lst):
    """"""Ojehecháramo peteĩ lista de cadenas, ha upépe cada cadena oguereko dígito añónte, emyengovia peteĩ lista. Cada elemento i de la salida ha'eva'erã ""el número de elementos impares en la cadena i de la entrada"". upépe opaite i oñemoambue va'erã dígito impares número i de la cadena i de la entrada. >>> odd_count['1234567']) [""el número de elementos impares 4n la str4ng 4 de la 4nput.""] >>> odd_count['3',""111111""]) [""el número de elementos impares 1n la str1ng 1 de la 1nput."", ""el número de elementos impares 8n la str8ng 8 de la 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,grn_Latn,python,"
def minSubArraySum(nums):
    """"""Ojehecháramo peteĩ matriz entero-kuéra rehegua, ejuhu suma michĩvéva oimeraẽ sub-matriz de números ndaha'éiva okañýva. Techapyrã minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,grn_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Ome'ẽ ndéve peteĩ red rectangular umi ykua. Peteĩ teĩ umi fila ha'e peteĩ ykua ha peteĩ teĩ umi 1 peteĩ fila-pe ha'e peteĩ ykua. Peteĩ teĩ umi po'i oreko peteĩ mba'yru ikatu ojeipuru ojehupyty hag̃ua y ha opaite mba'yru oguereko peteĩ capacidad. Nde rembiaporã ha'e reipuru umi mba'yru emboyke hag̃ua umi po'i. Eipuru mboy jey reikotevẽ emboyke hag̃ua umi mba'yru. Techapyrã 1: Eike: red: [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 Eipuru: 6 Techapyrã 2: Eike: red: [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1]] bucket_capacity: 2 Eipuru: 5 Techapyrã 3: Eipuru: [[0,0,0], [0,0,0]] bucket_capacity: 5 Eipuru: 0 * Constraints: 1 * * * * * Constraints: 1 * * * Constraints: 1 * * * Constraints: 1 * * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints: 1 * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constraints * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Constrain * Con * Con""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,grn_Latn,python,"
def sort_array(arr):
    """"""Ko Kata-pe, eiporavo va'erã peteĩ serie de enteros no-negativos, peteĩ papapy ha'éva peteĩ papapy binario-pe, orden ascendente-pe.""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,grn_Latn,python,"
def select_words(s, n):
    """"""Ome'ẽvo peteĩ string s ha peteĩ papapy natural n, ojejerure ndéve emohenda hag̃ua peteĩ función ome'ẽva peteĩ lista opaite ñe'ẽgui string s-gui oguerekóva n consonante añete, ikatu hag̃uáicha ko'ã ñe'ẽ ojehecha string s-pe. string s oĩramo nandi, upéicharõ función ome'ẽ va'erã peteĩ lista nandi. Ehecha: ikatu reimo'ã pe string oikéva oguerekoha ñe'ẽtéva ha espacio añónte. Techapyrã: select_words ""Mary had a little lamb"", 4) ==> [""little""] select_words ""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""] select_words ""simple white space"", 2) ==> [] select_words ""Hello world"", 4) ==> [""world""] select_words ""Uncle sam"", 3) ==> [""Uncle""] """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,grn_Latn,python,"
def get_closest_vowel(word):
    """"""Oñeme'ẽ ndéve peteĩ ñe'ẽ. Ne rembiapo hína ejuhu ñe'ẽpehẽtai ypýpe oĩva mokõi ñe'ẽpehẽtai ykéregua apytépe (ñe'ẽpehẽtai ykére). Ñe'ẽpehẽtai ñepyrũ ha ipahague ndojeipapái. Eguerure peteĩ ñe'ẽpehẽtai hekopeguáva ejuhu'ỹre ñe'ẽpehẽtai ykéregua. Ikatu eimo'ã pe ñe'ẽpehẽtai hekopeguáva oguerekoha ñe'ẽpehẽtai ingleñe'ẽme añónte. Techapyrã: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""U"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,grn_Latn,python,"
def match_parens(lst):
    '''Ome'ẽ ndéve mokõi ñe'ẽpehẽtai upeigua, mokõive ñe'ẽpehẽtai upeigua oguereko peteĩ ñe'ẽpehẽtai upeigua '(' térã ñe'ẽpehẽtai upeigua ') '. Nde rembiapo hína ehecha hag̃ua ikatúpa embojoaju mokõi ñe'ẽpehẽtai upeigua peteĩ hendáicha, ha upe ñe'ẽpehẽtai upeigua iporãta. Peteĩ ñe'ẽpehẽtai upeigua S ojehecha iporãramo ha opaite ñe'ẽpehẽtai upeigua S-pe oĩramo hekopete. Techapyrã: ñe'ẽpehẽtai upeigua '((()) ' iporã, ha ñe'ẽpehẽtai upeigua '()) ' nahániri. Eguerúta 'Sí' ikatu hag̃uáicha embojoaju porã, ha eguerúta 'No' ambue hendáicha. Techapyrã: match_parens[('() ', ') ']) == 'Sí' match_parens[(') ', ') ']) == 'No' '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,grn_Latn,python,"
def maximum(arr, k):
    """"""Ojehecháramo peteĩ matriz arr entero ha peteĩ entero positivo k, emyengoviákena peteĩ lista ordenada ipukukue k ha umi papapy k máximo arr-pe. Techapyrã1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Techapyrã2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Techapyrã3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Nota: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,grn_Latn,python,"
def solution(lst):
    """"""Ojehecháramo peteĩ papapy entero-kuéra lista ndaha'éiva henyhẽva, emyengovia opaite umi elemento impar oĩva umi posición par-pe. Techaukaha solución (([5, 8, 7, 1]) ==> 12 solución (([3, 3, 3, 3, 3]) ==> 9 solución (([30, 13, 24, 321]) ==> 0 """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,grn_Latn,python,"
def add_elements(arr, k):
    """"""Ojehecháramo peteĩ matriz ndaha'éiva nandi papapy entero arr ha papapy entero k, emyengovia umi elemento suma oguerekóva mokõi dígito k primer elemento arr-gui. Techapyrã: Entrada: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Salida: 24 # suma de 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,grn_Latn,python,"
def get_odd_collatz(n):
    """"""Peteĩ papapy entero positivo n, emondo peteĩ lista ordenada oguerekóva papapy impar collatz secuencia-pe. Collatz conjetura ha'e peteĩ conjetura matemática-pe, oñe'ẽva peteĩ secuencia ojehechaukáva kóicha: emotenonde oimeraẽ papapy entero positivo n ndive. Upéi, opaite termino ojehupyty umi anterior-gui kóicha: upe anterior ha'e par, upe siguiente ha'e peteĩ mbyte upe anterior-gui. Pe anterior ha'e impar, upe siguiente ha'e 3 jey upe anterior ha ombojoapy 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,grn_Latn,python,"
def valid_date(date):
    """"""Ehaiva'erã peteĩ función omoneĩva peteĩ data rehegua cadena ha omog̃uahẽva True, upe ára oĩ porãramo, ambue hendáicha False. Pe fecha oĩ porãramo oĩ porãramo opaite umi regla oĩva: 1. Upe data rehegua cadena ndaha'éiva'erã okañy'ỹva. 2. Ára papapy ndaha'éi sa'ive 1 térã hetave 31 ára arýgui umi jasy 1,3,5,7,8,10,12-pe g̃uarã ha ára papapy ndaha'éi sa'ive 1 térã hetave 30 ára arýgui umi jasy 4,6,9,11-pe g̃uarã. Ha, ára papapy ndaha'éi sa'ive 1 térã hetave 29 ára arýgui upe jasy 2. 3. Umi jasy ndaha'éi sa'ive 1 térã hetave 12. 4. Ára papapy oĩ va'erã formato: mm-dd-yyyy, techapyrã: valid_date ({'03-11-2000') => true_date ({'15-01-2012') => false_date ({'04-01-2010) } => false_date ({'06-04-2020') => true ({'06/04/2020')""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,grn_Latn,python,"
def split_words(txt):
    '''Ome'ẽvo peteĩ ñe'ẽnguéra, embohasa peteĩ ñe'ẽnguéra rysýi oñemboja'óva papapy'ỹre, ndaipóriramo papapy'ỹre ojeja'ova'erã umi coma rehe, ndaipóriramo coma ojeja'ova'erã papapy'ỹre, ojeja'ova'erã umi letra michĩvéva papapy'ỹre, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 Techaukarã oñemboja'o_ñe'ẽnguéra (¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡'''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,grn_Latn,python,"
def is_sorted(lst):
    '''Ojehecháramo peteĩ papapy aty, emyengovia oñemohendapaite térã nahániri. Oiméramo peteĩ papapy aty oguereko hetave peteĩ papapy, emyengovia False. Eimo'ã papapy negativo ha papapy entero añónte. Techaukaha is_sorted ({1, 2, 3, 4, 5]) -> True is_sorted ({1, 3, 2, 3, 4, 5, 6]) -> True is_sorted ({1, 2, 3, 4, 5, 6]) -> True is_sorted ({1, 2, 3, 4, 5, 6, 7]) -> True is_sorted ({1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ({1, 3, 2, 4, 5, 6, 7]) -> False is_sorted ({1, 2, 2, 2, 3, 3, 4]) -> True is_sorted ({1, 2, 2, 2, 3, 4 -> False ])'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,grn_Latn,python,"
def intersection(interval1, interval2):
    """"""Ojehechakuaa mokõi intervalo, ha'éva peteĩ par de enteros. Techapyrã, intervalo = (ñepyrũ, paha) = (1, 2). Ko'ã intervalo oñemboty, he'iséva intervalo (ñepyrũ, paha) oikeha ñepyrũ ha paha. Opaite intervalo, oje'e iñepyrũha michĩve térã ha'eño ipaha. Ne rembiapo hína eikuaa hag̃ua umi mokõi intervalo intersección ipukukue ha'e peteĩ papapy primo. Techapyrã, intervalo intersección (1, 3), (2, 4) ha'e (2, 3) ipukukue ha'e 1, ndaha'éiva papapy primo.""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,grn_Latn,python,"
def prod_signs(arr):
    """"""Ojehechakuaa ndéve peteĩ array entero rehegua ha eguereko va'erã suma entero tuichakue mbohetavéva umi signo oĩva upe array-pe, ojehechaukava 1, -1 térã 0. Ejesareko: eguereko mba'eve umi arr henyhẽva mba'e'ỹgui. Techapyrã: >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) ==  None""""""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,grn_Latn,python,"
def minPath(grid, k):
    """"""Ehechajey peteĩ ta'ãnga'i oguerekóva N rysýi ha N columna (N >= 2) ha peteĩ papapy entero k, opaite ta'ãnga'i oguerekóva peteĩ valor. Opaite papapy entero oĩva range [1, N * N] ryepýpe, ojehecha peteĩ jey añónte umi ta'ãnga'i ta'ãnga'i ryepýpe. Ejuhu va'erã tape michĩvéva ipukukue k ta'ãnga'i ryepýpe. Ikatu reñepyrũ oimeraẽ ta'ãnga'i guive, ha opaite tapépe ikatu reho oimeraẽ ta'ãnga'i ijykeregua ndive, he'ise, ikatu reho umi ta'ãnga'i oguerekóva peteĩ yke ne ta'ãnga'i ndive. Ehechajey peteĩ tape ipukukue k he'ise eike k ta'ãnga'i (ndaha'éi katuete ojoavýva). NDOIKATU'AI reho pe ta'ãnga'i ryepýpe. Peteĩ tape A (ipukukue k) ojehecha michĩve tapégui B (ipukukue k) rehe, jajapóramo umi lista ordenada umi valor oĩva ta'ãnga'ãnga'i A ha B rupi (ñehenóiva ichupyrusu ha'ã lA ha lA_j_j_j_j_j_j_j_j_j_j), ha'eñete l_j_j_j_j_j_j_j_j_j_j_j=[j_j_j_j_j_j_j=j=j, l_j=[1, l_j=[4, l_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j], l_j=[[1, l_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_[[[[[[[[], l_j_j_j_j_j_j_j_j_j_j_j_j], l_j=[[[[[[[[1, l_j_j_j_j_j_j""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,grn_Latn,python,"
def tri(n):
    """"""Opavave oikuaa Fibonacci secuencia, heta matemático ohesa'ỹijo ko'ã siglo pahápe. Ha katu, heta tapicha ndoikuaái Tribonacci secuencia. Tribonacci secuencia ojehecha recurrencia rupive: tri(1) = 3 tri(n) = 1 + n / 2, si n es par. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), si n es impar. Techapyrã: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Oñeme'ẽ ndéve peteĩ papapy entero ndaha'éiva negativo, eguereko peteĩ lista n + 1 papapy Tribonacci secuencia rehegua. Techapyrã: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,grn_Latn,python,"
def digits(n):
    """"""Ojehecháramo peteĩ papapy entero positivo n, emyengovia umi dígito impar rehegua producto. Emyengovia 0 opaite dígito ha'éramo par. Techapyrã: dígito{}1) == 1 dígito{}4) == 0 dígito{}235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,grn_Latn,python,"
def is_nested(string):
    '''Emoheñói peteĩ función oipyhýva peteĩ cadena entrada ramo oguerekóva paréntesis cuadrada añónte. Ko función omyengoviáva True ha'e ha'eño peteĩ subsecuencia válida oguerekóva paréntesis ha peteĩva jepe umi subsecuencia-pe oĩ imbytépe. is_nested'[[]]') â -> True is_nested'[[]]]]]]]]][[[[[]') â -> False is_nested'[][]') â -> False is_nested'[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]][[') â -> True'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,grn_Latn,python,"

def sum_squares(lst):
    """"""Ojehechakuaa umi papapy ha'eha peteĩ lista. Ojejapo va'erã suma cuadrado papapy oĩva lista-pe, oñembotývo peteĩteĩva umi elemento oĩva lista-pe, yvateve gotyo. Techapyrã: For lst = [1,2,3], osẽ va'erã 14 For lst = [1,4,9], osẽ va'erã 98 For lst = [1,3,5,7], osẽ va'erã 84 For lst = [1.4,4.2,0], osẽ va'erã 29 For lst = [-2.4,1,1], osẽ va'erã 6 """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,grn_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Ejapo peteĩ función omyengoviáva True oiméramo ipahaite peteĩ cadena ha'e peteĩ caracter alfabético ha ndaha'éi peteĩ ñe'ẽ pehẽngue, ha False ambue hendáicha. Ehecha: ""ñe'ẽ"" ha'e peteĩ caracteres aty oñemboja'óva espacio rupive. Techapyrã: check_if_last_char_is_a_letter
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,grn_Latn,python,"
def can_arrange(arr):
    """"""Ejapo peteĩ función omyengoviáva peteĩ elemento tuichavéva peteĩ elemento ndohasáiva upe tenondeguágui. Ndaipóri ramo upe elemento, emyengoviákena -1. Pe matriz oñeme'ẽva ndoguerekomo'ãi valor duplicado. Techapyrã: can_arrange{\displaystyle {\displaystyle {\displaystyle {\displaystyle {\mathbf {{{1}}{\displaystyle {\mathbf {1}}{\displaystyle {\mathbf {1}}}{\displaystyle {\mathbf {1}}}{\displaystyle {\mathbf {1}}}{\displaystyle {\mathbf {1}}}{\mathbf {1}}}{\mathbf {1}}}{\mathbf {1}}}{\mathbf {1}}}{\mathbf {1}}}{\mathbf {1}}}{1}}}{1}}}{1}}}{1}}}{1}}}{1}}}{1}}}{1}}}{1}}}{1}}}{2}}}{3}}}{3}}}{3}}}{4}}}{4}}}{5}}}{4}}}{5}}}{6}}}""""""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,grn_Latn,python,"
def largest_smallest_integers(lst):
    '''Ejapo peteĩ función omoneĩva peteĩ tuple (a, b), ha'e 'a' ha'evéva umi papapy entero negativo-gui, ha 'b' ha'evéva umi papapy entero positivo-gui peteĩ lista-pe. Ndaipóri ramo papapy entero negativo térã positivo, emoneĩ None. Techapyrã: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers[0]) == (None, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,grn_Latn,python,"
def compare_one(a, b):
    """"""Ejapo peteĩ función oipyhýva entero, float térã cadena omotenondéva papapy teéva ha ome'ẽva variable tuichavéva ha'e he'íva. Emondo None umi valor ha'evéva. Ehecha: Peteĩ papapy teéva ojehechauka ramo cadena-ramo, punto flotante ikatu ha'e . térã , compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> None """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,grn_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Evalúa ikatupa pe papapy oñeme'ẽva n ojehai suma-ramo 4 papapy par positivo-gui Ejemplo is_equal_to_sum_even ({4) == Falso is_equal_to_sum_even ({6) == Falso is_equal_to_sum_even ({8) == True """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,grn_Latn,python,"
def special_factorial(n):
    """"""Pe factorial brasileño oje'e kóicha: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! upépe n > 0 Techapyrã: >>> special_factorial(4) 288 Ko función ohupytýta peteĩ papapy entero ha omyengoviáta pe factorial especial ko papapy entero-pegua. """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,grn_Latn,python,"
def fix_spaces(text):
    """"""_Techapyrã-3ñe'ẽpehẽtai upeigua, emoĩve opaite hendápe umi ñe'ẽpehẽtai upeigua, ha peteĩ ñe'ẽpehẽtai upeigua oguereko 2 hendápe, emoĩve opaite hendápe - fix_spaces(""Tembiecharã"") == ""Tembiecharã"" fix_spaces(""Tembiecharã1"") == ""Tembiecharã1"" fix_spaces(""Tembiecharã2"") == ""_Tembiecharã_2"" fix_spaces"" (Tembiecharã 3"") == ""_Tembiecharã-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,grn_Latn,python,"
def file_name_check(file_name):
    """"""Ejapo peteĩ función oipyhýva peteĩ cadena omoha'ãngava peteĩ kuatiarogue réra, ha ombohovái ""Sí"" pe kuatiarogue réra oĩ porãramo, ha ombohovái ""No"" ambue hendápe. Peteĩ kuatiarogue réra ojehecha va'erã oĩ porãramo ha'eño opaite umi mba'e oĩva ko'ã mba'épe: - Ndaikatúi oĩ mbohapy dígito ári ('0'-'9') pe kuatiarogue réra-pe. - Pe kuatiarogue réra oguereko peteĩ punto añónte '.' - Pe subcadena oĩva upe punto mboyve ndikatúi oĩ rei, ha oñepyrũva'erã peteĩ letra latina-gui ('a'-'z' ha 'A'Z'). - Pe subcadena oĩva upe punto rire oiko va'erã peteĩva ko'ã mba'e apytépe: ['txt', 'exe', 'lld'] Techaukarã: file_name_check""{example.txt. #"") => 'Sí' file_name_check""{example.dll1"") => 'No' (pe téra oñepyrũva'erã peteĩ letra latina-gui)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,grn_Latn,python,"


def sum_squares(lst):
    """"""Ko función oiporúta peteĩ lista de enteros. Opaite umi entrada oĩva lista-pe, función omohenda cuadrado-pe entero-kuéra rehegua, ha'e ramo índice multiplo de 3, ha omohenda cubo-pe entero-kuéra rehegua, ha'e ramo índice multiplo de 4 ha ndaha'éi multiplo de 3. Ko función nombohasái umi entrada oĩva lista-pe, umi índice ndaha'éi multiplo de 3 térã 4. Ko función omohendava'erã suma entero-kuéra rehegua. Techapyrã: Lst = [1,2,3], osẽta 6 Lst = [] osẽta 0 Lst = [-1,-5,2,-1,-5] osẽta -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,grn_Latn,python,"
def words_in_sentence(sentence):
    """"""Ojehechakuaa ñe'ẽpehẽtai upeigua ha'eha peteĩ ñe'ẽpehẽtai upeigua, ha upe ñe'ẽpehẽtai upeigua oguereko ñe'ẽpehẽtai upeigua, ha upe ñe'ẽpehẽtai upeigua oguereko papapy ypy, ha upe ñe'ẽpehẽtai upeigua oguereko papapy ypy. Techapyrã1: Ñemohenda: ñe'ẽpehẽtai upeigua = ""This is a test"" Ñemohenda: ""is"" Techapyrã2: Ñemohenda: ñe'ẽpehẽtai upeigua = ""let go for swimming"" Ñemohenda: ""go for"" Ñemohenda: * 1 <= len(sentence) <= 100 * Ñe'ẽpehẽtai upeigua oguereko tai """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,grn_Latn,python,"
def simplify(x, n):
    """"""Nde rembiapo hína emohenda peteĩ función ombopya'éva expresión x * n. Ko función ombohasa True, x * n ojeipapa ramo peteĩ papapy entero ha False ambue hendáicha. Mokõivéva, x ha n, ha'e hína peteĩ representación cadena rehegua peteĩ fracción, ha oguereko ko formato, <numerador>/<denominador>, upépe numerador ha denominador ha'e papapy entero positivo. Ikatu ere x ha n ha'eha fracción válida, ha ndoguerekói cero denominador ramo. simplify{""1/5"", ""5/1"") = True simplify{""1/6"", ""2/1"") = False simplify{""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,grn_Latn,python,"
def order_by_points(nums):
    """"""Ehai peteĩ función omohendava umi papapy entero rehegua lista oĩva orden ascendente-pe, suma de sus dígitos reheve. Ehecha: oĩramo heta mba'e orekóva suma de sus dígitos, emohenda chupekuéra umi índice oĩva lista original-pe reheve. Techapyrã: >>> orden_por_puntos{[1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> orden_por_puntos{[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,grn_Latn,python,"
def specialFilter(nums):
    """"""Ehai peteĩ función oiporúva peteĩ matriz de números ha'e hag̃ua entrada ha ome'ẽva papapy umi elemento matriz-pe tuichavéva 10 ha mokõive peteĩha ha ipaha dígito peteĩ papapy rehegua ha'e impar (1, 3, 5, 7, 9). Techapyrã: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,grn_Latn,python,"
def get_max_triples(n):
    """"""Oñeme'ẽ ndéve peteĩ papapy entero positivo n. Ejapo va'erã peteĩ matriz entero a ipukukue n. Opaite i (1 ‰¤ i ‰¤ n) -pe g̃uarã, a[i] = i * i - i + 1. Eguereko papapy triple (a[i], a[j], a[k]) a rehegua, upépe i < j < k, ha a[i] + a[j] + a[k] ha'e peteĩ múltiplo 3. Techapyrã: Ñemoinge: n = 5 Ñemoambue: 1 Ñemyesakã: a = [1, 3, 7, 13, 21] Pe triple añónte ha'e (1, 7, 13). """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,grn_Latn,python,"
def bf(planet1, planet2):
    '''Oĩ poapy yvóra ñande Kuarahy Ypykatúpe: oĩ ypýva Kuarahy ypýgui ha'e Mercurio, oĩ ypýva ha'e Venus, ha oĩ ypýva ha'e Yvy, Marte, Júpiter, Saturno, Urano, Neptuno. Ehai peteĩ tembiapoite oipurúva mokõi yvóra réra ha'e hag̃ua umi mbyja'e ha yvóra2. Ko tembiapoite ome'ẽta peteĩ papapy oguerekóva opaite yvóra oguerekóva ijere oĩva ypygua1 ha ypygua2 mbyja'ekuéra mbytépe, oñemohenda kuarahy ypýgui. Ko tembiapoite ome'ẽta peteĩ papapy henyhẽ'ỹva, ha'e ramo yvóra1 térã ypygua2 ndaha'éi yvóra réra. Techapyrã: bf ""(Júpiter"", ""Neptuno"") ==> (""Saturno"", ""Urano"") bf ""(Yvy"", ""Mercurio"") ==> (""Venus"", ""Yvy"", ""Marte"", ""Júpiter"", ""Saturno"") '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,grn_Latn,python,"
def sorted_list_sum(lst):
    """"""Ehai peteĩ función omoneĩva peteĩ lista de cadenas peteĩ parámetro ramo, omboyke umi cadena ipukúva ha ome'ẽ lista osẽ va'ekue peteĩ orden ordenado-pe. Ko lista katuínte ha'e hína lista de cadenas ha araka'eve peteĩ matriz de números, ha ikatu oguereko duplicado. Pe orden de la lista ojupiva'erã umi ñe'ẽ ipukukue rehe, ha emondo va'erã lista oñemohenda va'ekue upe regla rupive. Mokõi ñe'ẽ ipukukue peteĩcha ramo, emohenda lista alfabéticamente. Ko función ome'ẽ va'erã lista de cadenas ordenada-pe. Ikatu reimo'ã opaite ñe'ẽ oguerekoha ipukukue peteĩcha. Techapyrã: assert list_sort[""aa"", ""a"", ""aaa""]) => assert list_sort[""ab"", ""a"", ""aaa"", ""cd"" => ""cd ""]""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,grn_Latn,python,"
def x_or_y(n, x, y):
    """"""Peteĩ programa ndahasýiva, ome'ẽva valor x ha'e ramo n peteĩ papapy primo ha ome'ẽva valor y ambue hendáicha. Techapyrã: x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,grn_Latn,python,"
def double_the_difference(lst):
    '''Ojehecháramo peteĩ papapy aty, emyengovia umi papapy aty'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy'i papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy' papapy'''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,grn_Latn,python,"
def compare(game,guess):
    """"""Aimo'ã opavave ñanemandu'a upe temiandu ojeikuaávo heta ára oñeha'arõva mba'e ojehúva. Umi temiandu ha ñeimo'ã oguerekóva upe jave iporã jaikuaa ha ñambojoja. Ne rembiapo hína ehecha mávapa omoneĩ porã heta ñe'ẽjoaju. Oñeme'ẽ ndéve mokõi ta'angamýi papapy ha ñeimo'ã peteĩcha puku reheguáva, ha opaite ta'angamýi ohechauka peteĩ ñeimo'ã. Eguerúta peteĩ ta'angamýi ipukúva, he'íva mba'e mombyrypa oĩ peteĩ ñeimo'ã. Oiméramo omoneĩ porã, pe valor ha'e 0, ha ndaipóriramo, pe valor ha'e pe diferencia absoluta oĩva ñeimo'ã ha papapy apytépe. Techapyrã: (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,2,4]) -> [4,0,4,1,0,6]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,grn_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Oñeme'ẽta ndéve peteĩ mbo'esyry réra (peteĩ ñe'ẽpehẽtai) ha peteĩ ñe'ẽpehẽtai mbojoapy. Ñe'ẽpehẽtai mbojoapy ojeipuru oñemoĩ hag̃ua mbo'esyry mbojoapy mbo'esyrýpe. Ñe'ẽpehẽtai mbojoapy mbarete ha'e kóicha: CAP ha'e umi ñe'ẽpehẽtai guasu réra, ha SM ha'e umi ñe'ẽpehẽtai michĩvéva réra, ñe'ẽpehẽtai mbojoapy mbarete ha'e CAP - SM. Ejuhu ñe'ẽpehẽtai mbojoapy mbarete ha embohasa peteĩ ñe'ẽpehẽtai mbojoapy ko'ãichagua: ClassName.StrongestExtensionName. Oĩramo mokõi térã hetave ñe'ẽpehẽtai mbojoapy mbarete, eiporavo peteĩva tenondeve oĩva ñe'ẽpehẽtai mbojoapýpe. Techapyrã, oñeme'ẽramo ndéve ""Slices"" mbo'esyry ha ñe'ẽpehẽtai mbojoapy mbarete: ['e'ỹi'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'ỹ'""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,grn_Latn,python,"
def cycpattern_check(a , b):
    """"""Oñeme'ẽ ndéve 2 ñe'ẽ. Reheja va'erã True ñe'ẽ mokõiha térã oimeraẽ iñembojere ha'e ramo peteĩ substring ñe'ẽ peteĩha ryepýpe cycpattern_check(""abcd"",""abd"") => False cycpattern_check(""hello"",""ell"") => True cycpattern_check(""whassup"",""psus"") => False cycpattern_check""abab"",""baa"") => True cycpattern_check(""efef"",""eeff"") => False cycpattern_check""(hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,grn_Latn,python,"
def even_odd_count(num):
    """"""Ojehecháramo peteĩ papapy entero, omyengovia peteĩ tupulo oguerekóva papapy par ha párda. Techapyrã: papapy par_par_count(-12) ==> (1, 1) papapy par_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,grn_Latn,python,"
def int_to_mini_roman(number):
    """"""Ojehecháramo peteĩ papapy entero positivo, ojehupyty peteĩ papapy romano equivalente peteĩ cadena-ramo, ha ojevyva'erã minúscula-pe.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,grn_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Ojehecháramo umi triángulo mbohapy ykére, oje'e True (añete) umi mbohapy ykére ha'e triángulo rectángulo, False (añete'ỹ) ambue hendápe. Peteĩ triángulo rectángulo ha'e peteĩ triángulo peteĩ ángulo ha'e 90 grado. Techapyrã: right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,grn_Latn,python,"
def find_max(words):
    """"""Ehai peteĩ función omoneĩva peteĩ lista de cadenas. Ko lista oguereko ñe'ẽ iñambuéva. Emyanyhẽ ñe'ẽ oguerekóva papapy máximo caracteres únicos. Oiméramo heta cadena oguereko papapy máximo caracteres únicos, emyanyhẽ peteĩva oúva tenondeve orden lexicográfico-pe.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,grn_Latn,python,"
def eat(number, need, remaining):
    """"""Nde ha'e peteî kure iñembyahýi ha re'u hetave karamellokuéra, ha ko'ágã re'uve va'erã hetave karamellokuéra remyenyhê hag̃ua tembi'u ára pukukue. Nde re'u va'erã peteĩ array [ papapy total de zanahorias comidas después de las comidas, el número de zanahorias que quedan después de las comidas ] ndaipóri ramo heta karamellokuéra opytáva, re'úta umi karamellokuéra opytáva, ha katu reñembyahýita gueteri. Techapyrã: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number: entero el número de zanahorias que has comido. @need: el número entero de zanahorias que necesitas comer. @remaining: entero el número de zanahorias restantes en stock Constrain: * 0= <= 0 * <= 1000 * 0 = <= 1000 * remaining: <= 1000 remaining = <= 1000 = have fun = 1000 = have fun:)""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,grn_Latn,python,"
def do_algebra(operator, operand):
    """"""Ome'ẽ mokõi lista operador ha operando. Peteĩha lista oguereko algebra básica operación, ha mokõiha lista ha'e umi entero. Eipuru umi mokõi lista oñeme'ẽva emoheñói hag̃ua expresión algebraica ha embohovái ko expresión. Umi operación básica de álgebra: suma (+) resta (-)) multiplicación (*) división de piso (//) exponenciación (**) Ejemplo: operador['+', '*', '-'] matriz = [2, 3, 4, 5] resultado = 2 + 3 * 4 - 5 => resultado = 9 Tape: umi lista de operador ipukukue ha'e umi operando lista menos uno. Operando ha'e umi entero ndaha'éiva negativo. Operador oguereko peteĩ listado operador, ha lista de operando oguereko mokõi operando. """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,grn_Latn,python,"
def solve(s):
    """"""Oñeme'ẽ ndéve peteĩ string s. S[i] ha'e ramo peteĩ tai, embojuehe i-case-pe yvate guive yvate peve, térã vice versa, ambue hendáicha emboyke.""""""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,grn_Latn,python,"
def string_to_md5(text):
    """"""Ome'ẽvo peteĩ cadena 'text', embohasa md5 hash equivalente. 'Text' ha'e ramo peteĩ cadena henyhẽva, embohasa None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,grn_Latn,python,"
def generate_integers(a, b):
    """"""Ojehecháramo mokõi papapy entero positivo a ha b, emyengoviákena umi dígito par oĩva a ha b mbytépe, orden ascendente-pe. Techapyrã: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
