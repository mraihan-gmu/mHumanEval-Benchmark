[
    {
        "task_id": "HumanEval/0",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"તપાસો કે આપેલ સંખ્યાઓની સૂચિમાં, આપેલ થ્રેશોલ્ડ કરતાં એકબીજાની નજીક કોઈ બે સંખ્યાઓ છે. ઉદાહરણઃ >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) ખોટા >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) સાચું \"\"\"\n",
        "canonical_solution": "for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/1",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"આ ફંક્શનમાં ઇનપુટ એ વાંકડીયા કૌંસના બહુવિધ જૂથો ધરાવતી શબ્દમાળા છે. તમારો ધ્યેય તે જૂથને અલગ વાંકડીયાઓમાં અલગ પાડવાનો છે અને તે યાદીને પરત કરે છે. અલગ જૂથો સંતુલિત છે (દરેક ખુલ્લા કૌંસ યોગ્ય રીતે બંધ છે) અને એકબીજાની અંદર વાંકડીયા નથી ઇનપુટ શબ્દમાળામાં કોઈપણ જગ્યાઓને અવગણો. ઉદાહરણઃ >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) '[' (()) ', '(()) ', '(() ')) ]\"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/2",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"હકારાત્મક ફ્લોટિંગ પોઇન્ટ નંબર આપવામાં આવે છે, તે પૂર્ણાંક ભાગ (આપેલ નંબર કરતાં મોટી પૂર્ણાંક નાની) અને દશાંશ (બાકી ભાગ હંમેશા 1 કરતા નાની) માં વિભાજિત કરી શકાય છે. સંખ્યાના દશાંશ ભાગને પરત કરો. ઉદાહરણઃ >>> truncate_number ((3.5) 0.5 \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/3",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"તમને બેંક ખાતા પર ડિપોઝિટ અને ઉપાડ કામગીરીની સૂચિ આપવામાં આવે છે જે શૂન્ય સંતુલનથી શરૂ થાય છે. તમારું કાર્ય એ શોધવાનું છે કે કોઈ પણ સમયે ખાતાની સંતુલન શૂન્યથી નીચે આવે છે, અને તે સમયે ફંક્શન સાચું પરત કરવું જોઈએ. અન્યથા તે ખોટું પરત કરવું જોઈએ. ઉદાહરણઃ >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/4",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"ઇનપુટ નંબરોની આપેલ સૂચિ માટે, આ ડેટાસેટના સરેરાશની આસપાસ સરેરાશ નિરપેક્ષ વિચલનની ગણતરી કરો. સરેરાશ નિરપેક્ષ વિચલન એ દરેક તત્વ અને કેન્દ્ર બિંદુ (આ કિસ્સામાં સરેરાશ) વચ્ચેનો સરેરાશ નિરપેક્ષ તફાવત છેઃ એમએડી = સરેરાશ │ x - x_mean │ ઉદાહરણઃ >>> mean_absolute_deviation (([1.0, 2.0, 3.0, 4.0]) 1.0 \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/5",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"ઇનપુટ સૂચિના દરેક બે અનુક્રમિક તત્વો વચ્ચે એક નંબર 'ડિલિમીટર' દાખલ કરો `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] \"\"\"\n",
        "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/6",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"આ ફંક્શનમાં ઇનપુટ એ જગ્યાઓ દ્વારા અલગ પાડવામાં આવેલા કૌંસ માટે બહુવિધ જૂથોનું પ્રતિનિધિત્વ કરતી શબ્દમાળા છે. દરેક જૂથ માટે, કૌંસના સૌથી ઊંડા સ્તરે આઉટપુટ કરો. ઉદાહરણ તરીકે (() (()) માં મહત્તમ બે સ્તરો છે જ્યારે ((())) માં ત્રણ છે. >>> parse_nested_parens (('((()) ((())) (((()) (((()) [2, 3, 1, 3] \"\"\"\n",
        "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/7",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"આપેલ સબસ્ટ્રિંગ >>> filter_by_substring (([], 'a') [] >>> filter_by_substring ((['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] સમાવતી સબસ્ટ્રિંગ્સની ઇનપુટ સૂચિને ફિલ્ટર કરો\"\"\"\n",
        "canonical_solution": "    return [x for x in strings if substring in x]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/8",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"પૂર્ણાંકોની આપેલ સૂચિ માટે, એક સૂચિમાં તમામ પૂર્ણાંકોના સરવાળો અને ઉત્પાદનનો સમાવેશ કરતી એક ટુપલ પરત કરો. ખાલી રકમ 0 ની બરાબર હોવી જોઈએ અને ખાલી ઉત્પાદન 1 ની બરાબર હોવું જોઈએ. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) \"\"\"\n",
        "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test": "def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/9",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"પૂર્ણાંકની આપેલ સૂચિમાંથી, ક્રમમાં આપેલ ક્ષણ સુધી મળેલા રોલિંગ મહત્તમ તત્વની સૂચિ બનાવો. >>> રોલિંગ_મેક્સ (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] \"\"\"\n",
        "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/10",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"સૌથી ટૂંકો પાલિન્ડ્રોમ શોધો જે પૂરી પાડવામાં આવેલ શબ્દમાળાથી શરૂ થાય છે. અલ્ગોરિધમનો વિચાર સરળ છેઃ - પૂરી પાડવામાં આવેલ શબ્દમાળાના સૌથી લાંબી પોસ્ટફિક્સ શોધો જે પાલિન્ડ્રોમ છે. - શબ્દમાળાના અંતમાં એક શબ્દમાળાના પૂર્વવત્નોના રિવર્સને જોડો જે પાલિન્ડ્રોમિક પ્રત્યય પહેલાં આવે છે. >>> make_palindrome ((('') ' ' >>> make_palindrome ((('cat') 'catac' >>> make_palindrome ((('cata') 'catac' \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"આપેલ શબ્દમાળા પેલિન્ડ્રોમ છે કે નહીં તે ચકાસો \"\"\"\n",
        "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/11",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"ઇનપુટ એ બે શબ્દમાળાઓ છે a અને b જેમાં ફક્ત 1 અને 0 નો સમાવેશ થાય છે. આ ઇનપુટ્સ પર દ્વિસંગી XOR કરો અને પરિણામ પણ શબ્દમાળા તરીકે પરત કરો. >>> string_xor('010', '110') '100' \"\"\"\n",
        "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test": "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/12",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"શબ્દમાળાઓની યાદીમાંથી, સૌથી લાંબી એક પરત કરો. સમાન લંબાઈના બહુવિધ શબ્દમાળાઓના કિસ્સામાં પ્રથમ એક પરત કરો. ઇનપુટ સૂચિ ખાલી હોય તો કોઈ પરત કરશો નહીં. >>> સૌથી લાંબી (([]) >>> સૌથી લાંબી ((['a', 'b', 'c']) 'a' >>> સૌથી લાંબી ((['a', 'bb', 'ccc']) 'ccc' \"\"\"\n",
        "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/13",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"બે પૂર્ણાંકો a અને b >>> સૌથી મોટી_સામાન્ય_વિભાજક ({3, 5) 1 >>> સૌથી મોટી_સામાન્ય_વિભાજક ({25, 15) 5) નો સૌથી મોટો સામાન્ય વિભાજક પરત કરો.\"\"\"\n",
        "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/14",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"ઇનપુટ શબ્દમાળાના ટૂંકાથી લાંબા સુધીના બધા ઉપસર્ગોની સૂચિ પરત કરો >>> all_prefixes (('abc') ['a', 'ab', 'abc'] \"\"\"\n",
        "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/15",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"0 થી n સુધીના અંતર-મર્યાદિત સંખ્યાઓ ધરાવતી સ્ટ્રિંગ પરત કરો. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' \"\"\"\n",
        "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/16",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"આપેલ શબ્દમાળા, કેટલા અલગ અક્ષરો (કેસને ધ્યાનમાં લીધા વગર) તે સમાવે છે તે શોધો >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 \"\"\"\n",
        "canonical_solution": "    return len(set(string.lower()))\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/17",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"આ ફંક્શનમાં ઇનપુટ એ વિશિષ્ટ ASCII ફોર્મેટમાં સંગીતની નોંધોનું પ્રતિનિધિત્વ કરતી શબ્દમાળા છે. તમારું કાર્ય એ છે કે ઘણા બીટ્સને અનુરૂપ પૂર્ણાંકની શબ્દમાળા સૂચિને પાર્સ કરવું. અહીં એક દંતકથા છેઃ 'ઓ' નોટ, છેલ્લા ચાર બીટ્સ 'ઓ'સ' - અડધા નોંધ, છેલ્લા બે બીટ્સ 'ઓ' - ક્વાટર નોટ, છેલ્લી એક બીટ >>> પાર્સ_મ્યુઝિક. 'ઓ'સ . ઓ'સ . ઓ'સ . ઓ'સn",
        "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/18",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"મૂળ શબ્દમાળામાં આપેલ સબસ્ટ્રિંગ કેટલી વાર મળી શકે છે તે શોધો. ઓવરલેપિંગ કેસોની ગણતરી કરો. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 \"\"\"\n",
        "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/19",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"ઇનપુટ એ 'શૂન્ય' થી 'નવ' સુધીની સંખ્યાઓની જગ્યા-મર્યાદિત શબ્દમાળા છે. માન્ય પસંદગીઓ 'શૂન્ય', 'એક', 'બે', 'ત્રણ', 'ચાર', 'પાંચ', 'છ', 'સાત', 'આઠ' અને 'નવ' છે. નાનાથી મોટા સુધી સૉર્ટ કરેલા નંબરો સાથે શબ્દમાળા પરત કરો >>> sort_numbers (('ત્રણ એક પાંચ') 'એક ત્રણ પાંચ' \"\"\"\n",
        "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/20",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"સંખ્યાઓની પૂરી પાડવામાં આવેલ સૂચિમાંથી (લંબાઈ ઓછામાં ઓછા બે) પસંદ કરો અને બેને પરત કરો જે એકબીજાની નજીક છે અને તેમને ક્રમમાં પરત કરો (નાની સંખ્યા, મોટી સંખ્યા). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) \"\"\"\n",
        "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/21",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"સંખ્યાઓની યાદી આપવામાં આવે છે (ઓછામાં ઓછા બે તત્વોની), તે સૂચિમાં રેખીય પરિવર્તન લાગુ કરો, જેમ કે સૌથી નાની સંખ્યા 0 બની જશે અને સૌથી મોટી 1 બની જશે >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] \"\"\"\n",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/22",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"માત્ર પૂર્ણાંકો માટે કોઈપણ પાયથોન મૂલ્યોની ફિલ્ટર આપેલ સૂચિ >>> filter_integers ((['a', 3.14, 5]) [5] >>> filter_integers (([1, 2, 3, 'abc', {}, []]) [1, 2, 3] \"\"\"\n",
        "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/23",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"આપેલ શબ્દમાળાની લંબાઈ પરત કરો >>> strlen('') 0 >>> strlen('abc') 3 \"\"\"\n",
        "canonical_solution": "    return len(string)\n",
        "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/24",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"આપેલ સંખ્યા n માટે, સૌથી મોટી સંખ્યા શોધો જે n ને સમાનરૂપે વહેંચે છે, n કરતા નાની >>> સૌથી મોટી_વિભાજક ((15) 5 \"\"\"\n",
        "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test": "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/25",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"આપેલ પૂર્ણાંકના અગ્ર પરિબળોની યાદી સૌથી નાનાથી સૌથી મોટા ક્રમમાં આપે છે. દરેક પરિબળને તે પરિબળોમાં કેટલી વખત દેખાય છે તે અનુરૂપ સંખ્યાની યાદી આપવી જોઈએ. ઇનપુટ નંબર બધા પરિબળોના ઉત્પાદન સમાન હોવું જોઈએ >>> પરિબળ (ઓ) [2, 2, 2] >>> પરિબળ (ઓ) [25], [5, 5] >>> પરિબળ (ઓ) [2, 5, 7] \"\"\"\n",
        "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/26",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"પૂર્ણાંકની સૂચિમાંથી, એક કરતા વધુ વખત થતા તમામ તત્વોને દૂર કરો. ઇનપુટમાં સમાન તત્વોનો ક્રમ રાખો. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] \"\"\"\n",
        "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/27",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"આપેલ શબ્દમાળા માટે, નાના અક્ષરોને મોટા અને મોટા અક્ષરોને નાનામાં ફેરવો. >>> flip_case ((('Hello') 'hELLO' \"\"\"\n",
        "canonical_solution": "    return string.swapcase()\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/28",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"એક શબ્દમાળામાં શબ્દમાળાઓની યાદીને સંયોજિત કરો >>> સંયોજિત કરો (([]) ' ' >>> સંયોજિત કરો ((['a', 'b', 'c']) 'abc' \"\"\"\n",
        "canonical_solution": "    return ''.join(strings)\n",
        "test": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/29",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"આપેલ ઉપસર્ગથી શરૂ થતી શબ્દમાળાઓની માત્ર એક ઇનપુટ સૂચિને ફિલ્ટર કરો. >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] \"\"\"\n",
        "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n",
        "test": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/30",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"સૂચિમાં માત્ર હકારાત્મક સંખ્યાઓ પરત કરો. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] \"\"\"\n",
        "canonical_solution": "    return [e for e in l if e > 0]\n",
        "test": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/31",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"જો આપેલ સંખ્યા અંક હોય તો સાચું અને અન્યથા ખોટું પરત કરો. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False \"\"\"\n",
        "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/32",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"xs એ બહુવચનનાં સહગુણાંકો છે. find_zero x ને એવી રીતે શોધે છે કે poly(x) = 0. find_zero માત્ર શૂન્ય બિંદુ આપે છે, ભલે તે ઘણા હોય. વધુમાં, find_zero માત્ર xs ની યાદી લે છે જે સહગુણાંકોની સંખ્યા અને સૌથી મોટી બિન-શૂન્ય સહગુણાંકો ધરાવે છે કારણ કે તે ઉકેલની બાંયધરી આપે છે. >>> રાઉન્ડ ((find_zero[1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> રાઉન્ડ ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x ^ 2 + x ^ 3  1.0\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs બિંદુ પર સહગુણાંકો xs સાથે બહુવચનનું મૂલ્યાંકન કરે છે. xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \"\"\"\n",
        "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/33",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"આ ફંક્શન એક યાદી l લે છે અને એક યાદી l' આપે છે, જેમ કે l' એ l સાથે ત્રણ દ્વારા વિભાજીત ન હોય તેવા ઇન્ડેક્સમાં સમાન છે, જ્યારે ત્રણ દ્વારા વિભાજીત થયેલા ઇન્ડેક્સમાં તેના મૂલ્યો l ના અનુરૂપ ઇન્ડેક્સના મૂલ્યો જેટલા જ છે, પરંતુ સૉર્ટ કરેલા છે. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] \"\"\"\n",
        "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/34",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"સૂચિમાં સૉર્ટ કરેલ અનન્ય તત્વોને પરત કરો >>> અનન્ય (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] \"\"\"\n",
        "canonical_solution": "    return sorted(list(set(l)))\n",
        "test": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/35",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"યાદીમાં મહત્તમ તત્વ પરત કરો. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 \"\"\"\n",
        "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/36",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"સંખ્યા 7 ની સંખ્યાને પૂર્ણાંકમાં દેખાય છે જે n કરતા ઓછા છે જે 11 અથવા 13 દ્વારા વિભાજીત છે. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 \"\"\"\n",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/37",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"આ ફંક્શન એક યાદી l લે છે અને એક યાદી l' આપે છે, જેમ કે l' વિચિત્ર સૂચકાંકોમાં l સાથે સમાન છે, જ્યારે તેની મૂલ્યો પણ સૂચકાંકોમાં સમાન છે, પરંતુ સૉર્ટ કરેલ છે. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] \"\"\"\n",
        "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/38",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"encode_cyclic ફંક્શન સાથે ઇનપુટ સ્ટ્રિંગ એન્કોડ કરે છે. ડીકોડેડ સ્ટ્રિંગ આપે છે.\"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"ત્રણ અક્ષરોના ચક્ર જૂથો દ્વારા એન્કોડેડ શબ્દમાળા આપે છે.\"\"\"\n",
        "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/39",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"prime_fib એ n-th નંબર આપે છે જે ફિબોનાકી નંબર છે અને તે પણ અગ્ર છે. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 \"\"\"\n",
        "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/40",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"triples_sum_to_zero એ પૂર્ણાંકની યાદીને ઇનપુટ તરીકે લે છે. તે સાચું આપે છે જો સૂચિમાં ત્રણ અલગ અલગ તત્વો હોય કે જે શૂન્ય સુધીનો સરવાળો હોય, અને ખોટા અન્યથા. >>> triples_sum_to_zero (([1, 3, 5, 0]) ખોટા >>> triples_sum_to_zero (([1, 3, -2, 1]) સાચું >>> triples_sum_to_zero (([1, 2, 3, 7]) ખોટા >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) સાચું >>> triples_sum_to_zero ([1, 3, -2, 1]) ખોટા \"\"\"\n",
        "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/41",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"એક રસ્તાની કલ્પના કરો જે એક સંપૂર્ણ સીધી અનંત લાંબી રેખા છે. n કાર ડાબેથી જમણે ડ્રાઇવિંગ કરી રહી છે; એક સાથે, n કારનો એક અલગ સમૂહ જમણેથી ડાબે ડ્રાઇવિંગ કરી રહ્યો છે. કારના બે સમૂહો એકબીજાથી ખૂબ દૂર છે. બધી કાર એક જ ઝડપે આગળ વધી રહી છે. બે કારને ટકરાતા કહેવામાં આવે છે જ્યારે ડાબેથી જમણે ખસેડતી કાર જમણેથી ડાબે ખસેડતી કારને ટકરાય છે. જો કે, કાર અનંત મજબૂત અને મજબૂત છે; પરિણામે, તેઓ તેમના ટ્રેકટરીમાં આગળ વધતા રહે છે જેમ કે તેઓ ટકરાતા નથી. આ કાર્ય આવા અથડામણની સંખ્યાને આઉટપુટ કરે છે. \"\"\"\n",
        "canonical_solution": "    return n**2\n",
        "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/42",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] દ્વારા વધેલા તત્વો સાથેની સૂચિ પરત કરો.\"\"\"\n",
        "canonical_solution": "    return [(e + 1) for e in l]\n",
        "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/43",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero એ પૂર્ણાંકની યાદીને ઇનપુટ તરીકે લે છે. જો યાદીમાં બે અલગ અલગ તત્વો હોય તો તે સાચું છે અને અન્યથા ખોટું છે. >>> pairs_sum_to_zero (([1, 3, 5, 0]) ખોટું >>> pairs_sum_to_zero (([1, 3, -2, 1]) ખોટું >>> pairs_sum_to_zero (([1, 2, 3, 7]) ખોટું >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) સાચું >>> pairs_sum_to_zero (([1]) ખોટું \"\"\"\n",
        "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/44",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"ઇનપુટ નંબર x ના આંકડાકીય આધારને આધારમાં બદલો. રૂપાંતર પછી શબ્દમાળા પ્રતિનિધિત્વ પરત કરો. આધાર સંખ્યાઓ 10 કરતા ઓછી છે. >>> change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111' \"\"\"\n",
        "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/45",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"ત્રિકોણ માટે બાજુની લંબાઈ અને ઉચ્ચ વળતર વિસ્તાર આપવામાં આવે છે. >>> ત્રિકોણ_એરિયા (5, 3) 7.5 \"\"\"\n",
        "canonical_solution": "    return a * h / 2.0\n",
        "test": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/46",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"Fib4 નંબર સિક્વન્સ એ ફિબોનાકી સિક્વન્સ જેવું જ સિક્વન્સ છે જે નીચે પ્રમાણે વ્યાખ્યાયિત થયેલ છેઃ fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). કૃપા કરીને fib4 નંબર સિક્વન્સના n-th એલિમેન્ટની કાર્યક્ષમ રીતે ગણતરી કરવા માટે એક કાર્ય લખો. પુનરાવર્તનનો ઉપયોગ કરશો નહીં. >>> fib4(5) 4 >>> fib4(6) >>> 8 fib4(7) 14 \"\"\"\n",
        "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/47",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"સૂચિમાં તત્વોની મધ્યમ પરત કરો.\"\"\"\n",
        "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/48",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"આપેલ શબ્દમાળા પેલિન્ડ્રોમ છે કે નહીં તે તપાસે છે >>> is_palindrome (('') True >>> is_palindrome (('aba') True >>> is_palindrome (('aaaaa') True >>> is_palindrome (('zbcd') False \"\"\"\n",
        "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/49",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"2^n મોડ્યુલો પી (આંકડાકીય પરિચિત રહો) પરત કરો. >>> મોડપી ({3, 5) 3 >>> મોડપી ({1101, 101) 2 >>> મોડપી ({0, 101) 1 >>> મોડપી ({3, 11) 8 >>> મોડપી ({100, 101) 1 \"\"\"\n",
        "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/50",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"encode_shift ફંક્શન સાથે ઇનપુટ સ્ટ્રિંગ એન્કોડ કરે છે. ડીકોડેડ સ્ટ્રિંગ આપે છે. \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"મૂળાક્ષરમાં દરેક અક્ષરને 5 દ્વારા ખસેડીને એન્કોડેડ શબ્દમાળા આપે છે.\"\"\"\n",
        "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/51",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"remove_vowels એ એક ફંક્શન છે જે શબ્દમાળા લે છે અને સ્વરો વિના શબ્દમાળા આપે છે. >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd' \"\"\"\n",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/52",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"જો યાદીમાં બધા નંબરો થ્રેશોલ્ડ ટી. >>> નીચે_થ્રેશોલ્ડની નીચે હોય તો સાચું પરત કરો.\"\"\"\n",
        "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/53",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"બે નંબરો x અને y ઉમેરો >>> ઉમેરો ((2, 3) 5 >>> ઉમેરો ((5, 7) 12 \"\"\"\n",
        "canonical_solution": "    return x + y\n",
        "test": "def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/54",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"તપાસો કે બે શબ્દોમાં સમાન અક્ષરો છે કે નહીં. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') સાચું >>> same_chars (('abcd', 'dddddddabc') સાચું >>> same_chars (('dddddddabc', 'abcd') સાચું >>> same_chars (('eabcd', 'dddddddabc') ખોટું >>> same_chars (('abcd', 'dddddddabc') ખોટું >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') ખોટું \"\"\"\n",
        "canonical_solution": "    return set(s0) == set(s1)\n",
        "test": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/55",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"n-મી ફિબોનાકી સંખ્યા પરત કરો. >>> ફિબોનાકી ૧૦ (૧૦) ૫૫ (૧) ૫૫ (૧) ૫૮ (૮) ૨૧\"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/56",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets એ \"<\" અને \">\" ની સ્ટ્રિંગ છે. જો દરેક ખુલતા કૌંસમાં અનુરૂપ બંધ કૌંસ હોય તો સાચું પરત કરો. >>> correct_bracketing ((\"<\") False >>> correct_bracketing ((\"<>\") True >>> correct_bracketing ((\"<><>>\") True >>> correct_bracketing ((\"><<>\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/57",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"સાચું પરત કરો એ છે કે સૂચિ તત્વો એકવિધ રીતે વધતા અથવા ઘટતા હોય છે. >>> એકવિધ (([1, 2, 4, 20]) સાચું >>> એકવિધ (([1, 20, 4, 10]) ખોટું >>> એકવિધ (([4, 1, 0, -10]) સાચું \"\"\"\n",
        "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test": "def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/58",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"બે યાદીઓ માટે સૉર્ટ કરેલ અનન્ય સામાન્ય તત્વો પરત કરો. >>> સામાન્ય (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> સામાન્ય (([5, 3, 2, 8], [3, 2]) [2, 3] \"\"\"\n",
        "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/59",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n નો સૌથી મોટો પ્રાઇમ ફેક્ટર પરત કરો. ધારો કે n > 1 અને તે પ્રાઇમ નથી. >>> સૌથી મોટો_પ્રાઇમ_ફેક્ટર ((13195) 29 >>> સૌથી મોટો_પ્રાઇમ_ફેક્ટર ((2048) 2 \"\"\"\n",
        "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/60",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n એ એક ફંક્શન છે જે 1 થી n સુધીના નંબરોને સર કરે છે. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 \"\"\"\n",
        "canonical_solution": "    return sum(range(n + 1))\n",
        "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/61",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets એ \"(\" અને \"\") ની સ્ટ્રિંગ છે. જો દરેક ખુલતા કૌંસમાં અનુરૂપ બંધ કૌંસ હોય તો સાચું પરત કરો. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"() True >>> correct_bracketing(\"() True >>> correct_bracketing(\"(()) True >>> correct_bracketing(\") False \"\"\"\n",
        "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/62",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"xs એ બહુવચનનાં સહગુણાંકોનું પ્રતિનિધિત્વ કરે છે. xs[0] + xs[1] * x + xs[2] * x^2 + .... આ બહુવચનનું ડેરિવેટિવ એ જ સ્વરૂપમાં આપે છે. >>> ડેરિવેટિવ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> ડેરિવેટિવ ([1, 2, 3]) [2, 6] \"\"\"\n",
        "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/63",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"ફિબફિબ નંબર સિક્વન્સ એ ફિબોનાકી સિક્વન્સ જેવું જ એક સિક્વન્સ છે જે નીચે પ્રમાણે વ્યાખ્યાયિત થયેલ છેઃ ફિબફિબ (૦) == ૦ ફિબફિબ (૧) == ૦ ફિબફિબ (૨) == ૧ ફિબફિબ (એન) == ફિબફિબ (એન -૧) + ફિબફિબ (એન -૨) + ફિબફિબ (એન -૩). કૃપા કરીને ફિબફિબ નંબર સિક્વન્સના એન-મી તત્વની અસરકારક રીતે ગણતરી કરવા માટે એક કાર્ય લખો. >>> ફિબફિબ (એન -૧) ૦ >>> ફિબફ (એન -૫) ૪ >>> ફિબફ (એન -૮) ૨૪ \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/64",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\nFIX = \"\"\"એક ફંક્શન વૉકલ્સ_કાઉન્ટ લખો જે શબ્દને રજૂ કરતી શબ્દમાળાને ઇનપુટ તરીકે લે છે અને શબ્દમાળામાં સ્વરોની સંખ્યા આપે છે. આ કિસ્સામાં સ્વરો 'એ', 'ઇ', 'આઇ', 'ઓ', 'યુ' છે. અહીં, 'વાય' પણ સ્વર છે, પરંતુ તે ફક્ત ત્યારે જ આપેલ શબ્દના અંતમાં છે. ઉદાહરણઃ >>> વૉકલ્સ_કાઉન્ટ (અને) \"એબીસીડી\") 2 >>> વૉકલ્સ_કાઉન્ટ (અને) \"એસીડી\") 3 \"\"\"\n\ndef vowels_count(s):\n    \"\"\"વધુ પરીક્ષણ કેસ ઉમેરો. \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/65",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"પરિપત્ર પૂર્ણાંક x ના અંકો ખસેડો, ડિજિટને જમણે ખસેડો અને પરિણામ તરીકે સળંગ તરીકે વળતર આપો. જો શિફ્ટ > અંકોની સંખ્યા, અંકો વિપરીત પરત કરો. >>> પરિપત્ર_શિફ્ટ ((12, 1) \"21\" >>> પરિપત્ર_શિફ્ટ ((12, 2) \"12\" \"\"\"\n",
        "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/66",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef digitSum(s):\n    \"\"\"કાર્ય એક ફંક્શન લખો જે ઇનપુટ તરીકે શબ્દમાળા લે છે અને માત્ર ઉપલા અક્ષરોના સરવાળો આપે છે. ઉદાહરણોઃ digitSum (((\"\") => 0 digitSum ((\"abAB\") => 131 digitSum ((\"abcCd\") => 67 digitSum (((\"helloE\") => 69 digitSum (((\"woArBld\") => 131 digitSum (((\"aAaaaXa\") => 153 \"\"\"\n",
        "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/67",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"આ કાર્યમાં, તમને એક શબ્દમાળા આપવામાં આવશે જે સફરજન અને નારંગીની સંખ્યાને રજૂ કરે છે જે ફળોની ટોપલીમાં વહેંચવામાં આવે છે આ બાસ્કેટમાં સફરજન, નારંગી અને કેરીના ફળોનો સમાવેશ થાય છે. શબ્દમાળા આપવામાં આવે છે જે નારંગી અને સફરજનની કુલ સંખ્યાને રજૂ કરે છે અને એક પૂર્ણાંક જે બાસ્કેટમાં ફળોની કુલ સંખ્યાને રજૂ કરે છે તે બાસ્કેટમાં કેરીના ફળોની સંખ્યા પરત કરે છે. ઉદાહરણ તરીકેઃ fruit_distribution\"5(apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8 fruit_distribution\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution\"100 apples and 1 oranges\",1 -> 120 - 100 - 1 = 19 \"\"\"\n",
        "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/68",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\"એક ઝાડની શાખાનું પ્રતિનિધિત્વ કરતી એરે આપવામાં આવે છે જેમાં બિન-નકારાત્મક પૂર્ણાંક ગાંઠો હોય છે તમારું કાર્ય એ છે કે ગાંઠોમાંથી એકને પસંદ કરો અને તેને પરત કરો. પસંદ કરેલ ગાંઠ સૌથી નાના પણ મૂલ્ય સાથેનો ગાંઠ હોવો જોઈએ. જો સમાન સૌથી નાના પણ મૂલ્યવાળા બહુવિધ ગાંઠો મળે તો સૌથી નાનો અનુક્રમણિકા ધરાવતો ગાંઠ પરત કરો. પસંદ કરેલ ગાંઠને સૂચિમાં પરત કરવો જોઈએ, [smallest_value, તેના અનુક્રમણિકા ], જો ત્યાં કોઈ પણ મૂલ્યો નથી અથવા આપેલ એરે ખાલી છે, તો પાછા આવો []. ઉદાહરણ 1: ઇનપુટઃ [4,2,3] આઉટપુટઃ [2, 1] સમજૂતીઃ 2 સૌથી નાનું પણ મૂલ્ય ધરાવે છે, અને 2 સૌથી નાનું અનુક્રમણિકા ધરાવે છે. ઉદાહરણ 2: ઇનપુટઃ [1,2,3] આઉટપુટઃ [2, 1] સમજૂતીઃ 2 સૌથી નાનું મૂલ્ય ધરાવે છે, અને 2 સૌથી નાનું અનુક્રમણિકા ધરાવે છે. ઉદાહરણ 3: ઇનપુટઃ [] આઉટપુટઃ [4:] ઇનપુટઃ [5, 3, 4,] આઉટપુટઃ 0, 1 આઉટપુટઃ 0 આઉટપુટઃ 1 સૌથી નાનું ગાંઠું ગાંઠું ગાંઠ છે, જે સૌથી નાનું અનુક્રમણિકા છે, પરંતુ સૌથી નાનું મૂલ્ય શૂંક છે. ઉદાહરણઃ 1 છે, તેથી પ્રથમ ગાંઠનું ગાંઠુંઃ સૌથી નાનું ગાંઠું મૂલ્ય શૂન્ય છે, પરંતુ સૌથી નાનું છે.\"\"\"\n",
        "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/69",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef search(lst):\n    '''તમને હકારાત્મક પૂર્ણાંકોની બિન-ખાલી સૂચિ આપવામાં આવે છે. સૌથી મોટી પૂર્ણાંક પરત કરો જે શૂન્યથી વધારે છે, અને તેની આવર્તન પૂર્ણાંકના મૂલ્ય કરતા વધારે અથવા બરાબર છે. પૂર્ણાંકની આવર્તન તે સૂચિમાં દેખાય છે તે સંખ્યા છે. જો આવા કોઈ મૂલ્ય અસ્તિત્વમાં નથી, તો -1. ઉદાહરણોઃ શોધ કરો ([4, 1, 2, 2, 3, 1]) == 2 શોધ કરો ([1, 2, 2, 3, 3, 3, 4, 4]) == 3 શોધ કરો ([5, 5, 4, 4, 4]) == -1 '''\n",
        "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/70",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef strange_sort_list(lst):\n    '''પૂર્ણાંકોની સૂચિ આપવામાં આવે છે, વિચિત્ર ક્રમમાં સૂચિ પરત કરો. વિચિત્ર સૉર્ટિંગ, જ્યારે તમે ન્યૂનતમ મૂલ્યથી શરૂ કરો છો, પછી બાકીના પૂર્ણાંકોની મહત્તમ, પછી ન્યૂનતમ અને તેથી આગળ. ઉદાહરણોઃ strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''\n",
        "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/71",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''ત્રિકોણની ત્રણ બાજુઓની લંબાઈ આપવામાં આવે છે. ત્રિકોણના વિસ્તારને 2 દશાંશ બિંદુઓ પર ગોળાકાર કરો જો ત્રણ બાજુઓ માન્ય ત્રિકોણ બનાવે છે. અન્યથા -1 પરત કરો ત્રણ બાજુઓ માન્ય ત્રિકોણ બનાવે છે જ્યારે કોઈપણ બે બાજુઓનો સરવાળો ત્રીજી બાજુ કરતા મોટો હોય. ઉદાહરણઃ ત્રિકોણ_એરિયા ((3, 4, 5) == 6.00 ત્રિકોણ_એરિયા ((1, 2, 10) == -1 '''\n",
        "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/72",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef will_it_fly(q,w):\n    '''એક ફંક્શન લખો જે સાચું આપે છે જો ઓબ્જેક્ટ q ઉડશે, અને ખોટા અન્યથા. ઓબ્જેક્ટ q ઉડશે જો તે સંતુલિત છે (તે એક પાલિન્ડ્રોમિક સૂચિ છે) અને તેના તત્વોનો સરવાળો મહત્તમ શક્ય વજન w કરતા ઓછો અથવા સમાન છે. ઉદાહરણઃ will_it_fly (([1, 2], 5) â -> ખોટા # 1+2 મહત્તમ શક્ય વજન કરતા ઓછું છે, પરંતુ તે અસંતુલિત છે. will_it_fly (([3, 2, 3], 1) â -> ખોટા # તે સંતુલિત છે, પરંતુ 3+2+3 મહત્તમ શક્ય વજન કરતા વધારે છે. will_it_fly (([3, 2, 3], 9) â -> સાચું # 3+23 મહત્તમ શક્ય વજન કરતા ઓછું છે, અને તે સંતુલિત છે. will_it_fly ((([3], â 5) -> સાચું # 3 મહત્તમ શક્ય વજન કરતા ઓછું છે, અને તે સંતુલિત છે.'''\n",
        "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/73",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"પૂર્ણાંકની એરે આપવામાં આવે છે, એરેને પાલિન્ડ્રોમિક બનાવવા માટે બદલવાની જરૂર છે તે તત્વોની લઘુત્તમ સંખ્યા શોધો. પાલિન્ડ્રોમિક એરે એ એરે છે જે પાછળ અને આગળ સમાન વાંચે છે. એક ફેરફારમાં, તમે એક તત્વને કોઈપણ અન્ય તત્વમાં બદલી શકો છો. ઉદાહરણ તરીકેઃ smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 \"\"\"\n",
        "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/74",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''એક ફંક્શન લખો જે શબ્દમાળાઓની બે યાદીઓ સ્વીકારે છે અને તે યાદીને આપે છે જેમાં યાદીના તમામ શબ્દમાળાઓમાં અન્ય સૂચિ કરતાં ઓછા અક્ષરોની કુલ સંખ્યા છે. જો બે સૂચિઓમાં સમાન સંખ્યામાં અક્ષરો હોય, તો પ્રથમ સૂચિ પરત કરો. ઉદાહરણો total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi'] total_match ((['4'], ['1'', '2'', '3'', '4'], ['5']) -> ['4'])'''\n",
        "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/75",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"એક ફંક્શન લખો જે સાચું છે જો આપેલ સંખ્યા 3 અગ્ર સંખ્યાઓનો ગુણાકાર છે અને અન્યથા ખોટા છે. એ જાણીને કે (એ) 100 કરતાં ઓછું છે. ઉદાહરણઃ is_multiply_prime(30) == સાચું 30 = 2 * 3 * 5 \"\"\"\n",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/76",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"તમારું કાર્ય એ છે કે એક ફંક્શન લખવું કે જે સાચું છે જો સંખ્યા x એ n ની સરળ શક્તિ છે અને અન્ય કિસ્સાઓમાં ખોટી છે. x એ n ની સરળ શક્તિ છે જો n**int=x ઉદાહરણ તરીકેઃ is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) false => is_simple_power(5, 3) => false \"\"\"\n",
        "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/77",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef iscube(a):\n    '''એક ફંક્શન લખો જે પૂર્ણાંક a લે છે અને સાચું આપે છે જો આ ingeger કોઈ પૂર્ણાંક સંખ્યાનો સમઘન છે. નોંધઃ તમે ધારી શકો છો કે ઇનપુટ હંમેશા માન્ય છે. ઉદાહરણોઃ iscube ((1) ==> True iscube ((2) ==> False iscube ((-1) ==> True iscube ((64) ==> True iscube ((0) ==> True iscube ((180) ==> False '''\n",
        "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/78",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef hex_key(num):\n    \"\"\"તમને એક ફંક્શન લખવાનું કામ સોંપવામાં આવ્યું છે જે હેક્ઝાડેસિમલ નંબરને સ્ટ્રિંગ તરીકે મેળવે છે અને હેક્ઝાડેસિમલ અંકોની સંખ્યાની ગણતરી કરે છે જે પ્રાઇમ છે (પ્રાઇમ નંબર, અથવા પ્રાઇમ, 1 કરતા મોટી કુદરતી સંખ્યા છે જે બે નાના કુદરતી સંખ્યાઓનો ઉત્પાદન નથી). હેક્ઝાડેસિમલ અંકો 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F છે. પ્રાઇમ નંબરો 2, 3, 5, 7, 11, 13, 17 છે, . . . તેથી તમારે નીચેના અંકોની સંખ્યા નક્કી કરવી પડશેઃ 2, 3, 5, 7, B (= ડેસિમલ 11), D (= ડેસિમલ 13). નોંધઃ તમે ધારી શકો છો કે ઇનપુટ હંમેશાં સાચું અથવા ખાલી છે સ્ટ્રિંગ, અને પ્રતીકો A, B, C, D, E, F હંમેશા મોટા છે. ઉદાહરણોઃ \"એબ\" માટે આઉટપુટ num = 1. \"એબ\" માટે આઉટપુટ num = 1. \"એબ\" માટે આઉટપુટ num = 1. \"એબ\" માટે આઉટપુટ num = 2. \"એબ\" માટે આઉટપુટ num = 1. \"એબી\" માટે આઉટપુટ num = 2. \"એબી\" માટે આઉટપુટ num = 2.02396. \"એબીડીએફ\" માટે આઉટપુટ માટે આઉટપુટ num = 2.0 \"2020\" હોવું જોઈએ.\"\"\"\n",
        "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/79",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"તમને દશાંશ સ્વરૂપમાં સંખ્યા આપવામાં આવશે અને તમારું કાર્ય તેને દ્વિસંગી બંધારણમાં રૂપાંતરિત કરવાનું છે. ફંક્શનને એક શબ્દમાળા પરત કરવી જોઈએ, જેમાં દરેક અક્ષર દ્વિસંગી સંખ્યાનું પ્રતિનિધિત્વ કરે છે. શબ્દમાળામાં દરેક અક્ષર '0' અથવા '1' હશે. શબ્દમાળાની શરૂઆતમાં અને અંતે વધારાના અક્ષરો 'db' હશે. વધારાના અક્ષરો ફોર્મેટમાં મદદ કરવા માટે છે. ઉદાહરણોઃ decimal_to_binary ((15) # \"db1111db\" દશાંશ_to_binary32) # \"db100000db\" આપે છે\"\"\"\n",
        "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/80",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_happy(s):\n    \"\"\"તમને એક શબ્દમાળા s આપવામાં આવે છે. તમારું કાર્ય એ તપાસવાનું છે કે શબ્દમાળા ખુશ છે કે નહીં. એક શબ્દમાળા ખુશ છે જો તેની લંબાઈ ઓછામાં ઓછી 3 છે અને દરેક 3 સળંગ અક્ષરો અલગ છે ઉદાહરણ તરીકેઃ is_happy ((a) => False is_happy ((aa) => False is_happy ((abcd) => True is_happy ((aabb) => False is_happy ((adb) => True is_happy ((xyy) => False \"\"\"\n",
        "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/81",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"તે સેમેસ્ટરના છેલ્લા સપ્તાહમાં છે અને શિક્ષક વિદ્યાર્થીઓને ગ્રેડ આપવાનું છે. શિક્ષક ગ્રેડિંગ માટે પોતાનો અલ્ગોરિધમ બનાવી રહ્યા છે. એકમાત્ર સમસ્યા એ છે કે, તેણીએ ગ્રેડિંગ માટે વપરાયેલ કોડ ગુમાવ્યો છે. તેણીએ તમને કેટલાક વિદ્યાર્થીઓ માટે જીપીએની સૂચિ આપી છે અને તમારે એક કાર્ય લખવું પડશે જે નીચેના કોષ્ટકનો ઉપયોગ કરીને અક્ષર ગ્રેડની સૂચિને આઉટપુટ કરી શકે છેઃ જીપીએ. અક્ષર ગ્રેડ 4.0 એ + > 3.7 એ > 3.3 એ- > 3.0 બી + > 2.7 બી > 2.3 બી- > 2.3 બી + > 2.0 સી + > 1.7 સી > 1.3 સી- > 1.0 ડી + > 0.7 ડી > 0.0 ડી- 0.0 ઇ ઉદાહરણઃ grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\"\"\"\n",
        "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/82",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef prime_length(string):\n    \"\"\"એક ફંક્શન લખો જે સ્ટ્રિંગ લે છે અને સાચું આપે છે જો સ્ટ્રિંગની લંબાઈ અપૂર્ણાંક હોય અથવા ખોટી હોય અન્યથા ઉદાહરણો prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False \"\"\"\n",
        "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/83",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"હકારાત્મક પૂર્ણાંક n આપવામાં આવે છે, તે n-અંકની હકારાત્મક પૂર્ણાંકની સંખ્યાની ગણતરી આપે છે જે 1 થી શરૂ થાય છે અથવા સમાપ્ત થાય છે.\"\"\"\n",
        "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/84",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef solve(N):\n    \"\"\"હકારાત્મક પૂર્ણાંક N આપવામાં આવે છે, તેના અંકોનો કુલ સરવાળો દ્વિસંગીમાં આપે છે. ઉદાહરણ N = 1000 માટે, અંકોનો સરવાળો 1 હશે આઉટપુટ \"1\" હોવું જોઈએ. N = 150 માટે, અંકોનો સરવાળો 6 હશે આઉટપુટ \"110\" હોવું જોઈએ. N = 147 માટે, અંકોનો સરવાળો 12 હશે આઉટપુટ \"1100\" હોવું જોઈએ. ચલોઃ @N પૂર્ણાંક પ્રતિબંધોઃ 0 â‰¤ N â‰¤ 10000. આઉટપુટઃ દ્વિસંગી સંખ્યાની શબ્દમાળા \"\"\"\n",
        "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/85",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef add(lst):\n    \"\"\"પૂર્ણાંકોની બિન-ખાલી સૂચિ આપવામાં આવે છે. પ્રથમ, વિચિત્ર અનુક્રમણિકાઓ પર હોય તેવા પણ તત્વો ઉમેરો. ઉદાહરણોઃ add (([4, 2, 6, 7]) ==> 2 \"\"\"\n",
        "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/86",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"એક શબ્દમાળા લે છે અને તેનું ક્રમબદ્ધ સંસ્કરણ આપે છે. શબ્દમાળાનું ક્રમબદ્ધ સંસ્કરણ, એક શબ્દમાળા છે જ્યાં બધા શબ્દો (અવકાશ દ્વારા અલગ) ને નવા શબ્દ દ્વારા બદલવામાં આવે છે જ્યાં બધા અક્ષરો ASCII મૂલ્યના આધારે વધતા ક્રમમાં ગોઠવવામાં આવે છે. નોંધઃ તમારે વાક્યમાં શબ્દો અને ખાલી જગ્યાઓનો ક્રમ રાખવો જોઈએ. ઉદાહરણ તરીકેઃ anti_shuffle ((('Hi') 'Hi' anti_shuffle ((('hello') આપે છે 'ehllo' anti_shuffle (('Hello World!!!') આપે છે 'Hello !!!Wdlor' \"\"\"\n",
        "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/87",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"તમને 2 પરિમાણીય ડેટા આપવામાં આવે છે, જેમ કે નેસ્ટેડ સૂચિઓ, જે મેટ્રિક્સની જેમ જ છે, જો કે, મેટ્રિક્સથી વિપરીત, દરેક પંક્તિમાં વિવિધ સંખ્યામાં કૉલમ હોઈ શકે છે. lst અને પૂર્ણાંક x આપવામાં આવે છે, સૂચિમાં પૂર્ણાંક x શોધો, અને ટુપલ્સની સૂચિ પરત કરો, [(x1, y1), (x2, y2) ...] જેમ કે દરેક ટુપલ એક કોઓર્ડિનેટ છે - (પંક્તિ, કૉલમ), 0 થી શરૂ થાય છે. કોઓર્ડને શરૂઆતમાં ascending ક્રમમાં પંક્તિઓ દ્વારા સૉર્ટ કરો. પણ, નીચે આવતા ક્રમમાં કૉલમ દ્વારા પંક્તિના કોઓર્ડિનેટ્સને સૉર્ટ કરો. ઉદાહરણોઃ get_row[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0, 0, 0, 0, 1, 4], 0 (1, 0), (2, 5), (2, 0) get_((1), 1) [] ==[_[, પંક્તિ 1, 2, 3, 2], == 2, 2]\"\"\"\n",
        "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/88",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef sort_array(array):\n    \"\"\"બિન-નકારાત્મક પૂર્ણાંકોની એરે આપવામાં આવે છે, સોર્ટિંગ પછી આપેલ એરેની નકલ પરત કરો, જો સરવાળો ((પ્રથમ ઇન્ડેક્સ મૂલ્ય, છેલ્લું ઇન્ડેક્સ મૂલ્ય) વિચિત્ર હોય તો તમે આપેલ એરેને ચડતા ક્રમમાં સૉર્ટ કરશો, અથવા જો સરવાળો ((પ્રથમ ઇન્ડેક્સ મૂલ્ય, છેલ્લું ઇન્ડેક્સ મૂલ્ય) પણ હોય તો તેને નીચેના ક્રમમાં સૉર્ટ કરો. નોંધઃ * આપેલ એરેને બદલશો નહીં. ઉદાહરણોઃ * sort_array[(]) => [] * sort_array[]] => [5] * sort_array[2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array[2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 5, 0] \"\"\"\n",
        "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/89",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef encrypt(s):\n    \"\"\"એક ફંક્શન એન્ક્રિપ્ટ બનાવો જે શબ્દમાળાને દલીલ તરીકે લે છે અને મૂળાક્ષર ફેરવવામાં આવે છે તે સાથે એન્ક્રિપ્ટેડ શબ્દમાળા આપે છે. મૂળાક્ષરને એવી રીતે ફેરવવું જોઈએ કે અક્ષરો બે દ્વારા બે સ્થાનો પર ખસેડવામાં આવે. ઉદાહરણ તરીકેઃ એન્ક્રિપ્ટ (('hi') 'lm' એન્ક્રિપ્ટ (('asdfghjkl') આપે છે 'ewhjklnop' એન્ક્રિપ્ટ (('gf') આપે છે 'kj' એન્ક્રિપ્ટ (('et') આપે છે 'ix' \"\"\"\n",
        "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/90",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"તમને પૂર્ણાંકની યાદી આપવામાં આવે છે. એક કાર્ય next_smallest લખો જે યાદીના બીજા સૌથી નાના તત્વને આપે છે. જો આવા તત્વ ન હોય તો કોઈ પણ પરત કરો. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == None next_smallest (([1, 1]) == None \"\"\"\n",
        "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/91",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_bored(S):\n    \"\"\"તમને શબ્દોની એક શબ્દમાળા આપવામાં આવશે, અને તમારું કાર્ય કંટાળાની સંખ્યા ગણવાનું છે. કંટાળા એ એક વાક્ય છે જે \"હું\" શબ્દથી શરૂ થાય છે. વાક્યો '.', '?' અથવા '! ' દ્વારા અલગ કરવામાં આવે છે. ઉદાહરણ તરીકેઃ >>> is_bored ((\"હેલો વર્લ્ડ\") 0 >>> is_bored ((\"આકાશ વાદળી છે. સૂર્ય ચમકતો છે. મને આ હવામાન ગમે છે\") 1 \"\"\"\n",
        "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/92",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef any_int(x, y, z):\n    '''એક કાર્ય બનાવો જે 3 નંબરો લે છે. જો એક સંખ્યા અન્ય બેના સરવાળો હોય તો તે સાચું છે, અને બધી સંખ્યાઓ પૂર્ણાંક છે. અન્ય કોઈ પણ કિસ્સામાં ખોટા છે. ઉદાહરણો any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''\n",
        "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/93",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef encode(message):\n    \"\"\"એક કાર્ય લખો જે સંદેશ લે છે, અને તે એવી રીતે એન્કોડ કરે છે કે તે તમામ અક્ષરોના કેસને સ્વેપ કરે છે, સંદેશમાં તમામ સ્વરોને અંગ્રેજી મૂળાક્ષરમાં તે સ્વરથી 2 સ્થાનો આગળ દેખાય છે તે અક્ષર સાથે બદલે છે. ફક્ત અક્ષરો ધારો. ઉદાહરણોઃ >>> એન્કોડ કરો (_'test') 'TGST' >>> એન્કોડ કરો (_'આ એક સંદેશ છે') 'tHKS KS C MGSSCGG' \"\"\"\n",
        "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/94",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"તમને પૂર્ણાંકની સૂચિ આપવામાં આવે છે. તમારે સૌથી મોટું પ્રાઇમ મૂલ્ય શોધવાની જરૂર છે અને તેના અંકોનો સરવાળો પાછો આપવો પડશે. ઉદાહરણોઃ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] માટે આઉટપુટ 10 હોવું જોઈએ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] માટે આઉટપુટ 25 હોવું જોઈએ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] માટે આઉટપુટ 13 હોવું જોઈએ lst = [0,724,32,71,99,32,6,0,91,83,0,5,6] માટે આઉટપુટ 11 હોવું જોઈએ lst = [0,81,12,31,21] માટે આઉટપુટ 3 હોવું જોઈએ lst = [0,8,1,2,1,7] માટે આઉટપુટ 7 હોવું જોઈએ \"\"\"\n",
        "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/95",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"જો કોઈ શબ્દકોશ આપવામાં આવે તો, જો બધી કીઓ નાના કેસમાં શબ્દમાળાઓ હોય અથવા બધી કીઓ મોટા કેસમાં શબ્દમાળાઓ હોય તો સાચું પરત કરો, અન્યથા ખોટું પરત કરો. આપેલ શબ્દકોશ ખાલી હોય તો ફંક્શન ખોટું પરત કરવું જોઈએ. ઉદાહરણોઃ check_dict_case{\"a\":\"apple\", \"b\":\"banana\"}) સાચું પરત કરવું જોઈએ. check_dict_case{\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) ખોટું પરત કરવું જોઈએ. check_dict_case{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) ખોટું પરત કરવું જોઈએ. check_dict_case{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) ખોટું પરત કરવું જોઈએ. check_dict_case{\"NC\":\"STATE\", \"Z\":\"IP\"45\") સાચું પરત કરવું જોઈએ.\"\"\"\n",
        "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/96",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"એક ફંક્શન અમલમાં મૂકો જે બિન-નકારાત્મક પૂર્ણાંક લે છે અને પ્રથમ n પૂર્ણાંકની એરે આપે છે જે અગ્ર સંખ્યાઓ છે અને n કરતા ઓછી છે. ઉદાહરણ તરીકેઃ count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] \"\"\"\n",
        "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/97",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"બે પૂર્ણાંકો લે છે અને તેમના એકમ અંકોના ઉત્પાદનને આપે છે તે કાર્ય પૂર્ણ કરો. ધારો કે ઇનપુટ હંમેશા માન્ય છે. ઉદાહરણોઃ ગુણાકાર 148, 412) 16 પરત કરવો જોઈએ ગુણાકાર 19 28 72 પરત કરવો જોઈએ ગુણાકાર 2020 1851 0 પરત કરવું જોઈએ ગુણાકાર 14 15 20 પરત કરવું જોઈએ.\"\"\"\n",
        "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/98",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef count_upper(s):\n    \"\"\"આપેલ શબ્દમાળા s, સમ સંખ્યામાં મોટા અક્ષરોની સંખ્યા ગણાય છે. ઉદાહરણ તરીકેઃ count_upper (('aBCdEf') 1 count_upper (('abcdefg') 0 count_upper (('dBBE') 0 આપે છે.\"\"\"\n",
        "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/99",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef closest_integer(value):\n    '''એક ફંક્શન બનાવો જે સંખ્યાને રજૂ કરતી મૂલ્ય (સ્ટ્રિંગ) લે છે અને તેની નજીકની પૂર્ણાંક આપે છે. જો સંખ્યા બે પૂર્ણાંકથી સમાન અંતર છે, તો તેને શૂન્યથી દૂર કરો. ઉદાહરણો >>> closest_integer ((\"10\") 10 >>> closest_integer ((\"15.3\") 15 નોંધઃ શૂન્યથી દૂર ગોળાકાર એટલે કે જો આપેલ સંખ્યા બે પૂર્ણાંકથી સમાન અંતર છે, તો તમારે તે જ પરત કરવું જોઈએ જે શૂન્યથી સૌથી દૂર છે. ઉદાહરણ માટે closest_integer \" ((14.5\") 15 અને closest_integer \" ((-14.5\") -15. '''\n",
        "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/100",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"હકારાત્મક પૂર્ણાંક n આપવામાં આવે છે, તમારે પથ્થરોના n સ્તરોનો ઢગલો બનાવવો પડશે. પ્રથમ સ્તરમાં n પથ્થરો છે. આગલા સ્તરમાં પથ્થરોની સંખ્યા છેઃ - જો n વિચિત્ર હોય તો આગામી વિચિત્ર સંખ્યા. - જો n પણ હોય તો આગામી સંખ્યા. દરેક સ્તરમાં પથ્થરોની સંખ્યાને સૂચિમાં પરત કરો, જ્યાં ઇન્ડેક્સ i પર તત્વ સ્તર (i+1) માં પથ્થરોની સંખ્યાનું પ્રતિનિધિત્વ કરે છે. ઉદાહરણોઃ >>> make_a_pile (n) [3, 5, 7] \"\"\"\n",
        "canonical_solution": "    return [n + 2*i for i in range(n)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/101",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef words_string(s):\n    \"\"\"તમને અલ્પવિરામ અથવા જગ્યાઓ દ્વારા અલગ શબ્દોની શબ્દમાળા આપવામાં આવશે. તમારું કાર્ય શબ્દમાળાને શબ્દોમાં વિભાજીત કરવું અને શબ્દોની એરે પરત કરવું છે. ઉદાહરણ તરીકેઃ words_string ((\"હાય, મારું નામ જ્હોન છે\") == [\"હાય\", \"મારું\", \"નામ\", \"છે\", \"જહોન\"] words_string ((\"એક, બે, ત્રણ, ચાર, પાંચ, છ\") == [\"એક\", \"બે\", \"ત્રણ\", \"ચાર\", \"પાંચ\", \"છ\"] \"\"\"\n",
        "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/102",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"આ ફંક્શન બે હકારાત્મક સંખ્યા x અને y લે છે અને સૌથી મોટી પૂર્ણાંક સંખ્યા આપે છે જે શ્રેણી [x, y] માં છે. જો આવી કોઈ સંખ્યા ન હોય તો, ફંક્શનને -1 પરત કરવી જોઈએ. ઉદાહરણ તરીકેઃ પસંદ કરો_ નંબર (૧૨, ૧૫) = 14 પસંદ કરો_ નંબર (૧૩, ૧૨) = -1 \"\"\"\n",
        "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/103",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"તમને બે હકારાત્મક પૂર્ણાંકો n અને m આપવામાં આવે છે, અને તમારું કાર્ય n થી m સુધીના પૂર્ણાંકોની સરેરાશ ગણતરી કરવાનું છે (n અને m સહિત). જવાબને નજીકના પૂર્ણાંકમાં ગોળાકાર કરો અને તેને દ્વિસંગીમાં રૂપાંતરિત કરો. જો n m કરતા વધારે હોય, તો -1. ઉદાહરણઃ ગોળાકાર_avg ((1, 5) => \"0b11\" ગોળાકાર_avg ((7, 5) => -1 ગોળાકાર_avg ((10, 20) => \"0b1111\" ગોળાકાર_avg ((20, 33) => \"0b11010\" \"\"\"\n",
        "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/104",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"સકારાત્મક પૂર્ણાંક x ની સૂચિ આપવામાં આવે છે. બધા તત્વોની સૉર્ટ કરેલી સૂચિ પરત કરો જેમાં કોઈ પણ અંક નથી. નોંધઃ પરત કરેલી સૂચિ વધતા ક્રમમાં સૉર્ટ કરવી જોઈએ. ઉદાહરણ તરીકેઃ >>> અનન્ય_અંક (([15, 33, 1422, 1]) [1, 15, 33] >>> અનન્ય_અંક (([152, 323, 1422, 10]) [] \"\"\"\n",
        "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/105",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef by_length(arr):\n    \"\"\"પૂર્ણાંકની એરે આપવામાં આવે છે, તે પૂર્ણાંકને 1 અને 9 ની વચ્ચે સૉર્ટ કરો, પરિણામી એરેને ઉલટાવી દો, અને પછી દરેક અંકને તેના અનુરૂપ નામથી \"એક\", \"બે\", \"ત્રણ\", \"ચાર\", \"પાંચ\", \"છ\", \"સાત\", \"આઠ\", \"નવ\" માંથી બદલો. ઉદાહરણ તરીકેઃ arr = [2, 1, 1, 4, 5, 8, 2, 3] -> સૉર્ટ કરો arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> રિવર્સ arr -> [8, 5, 4, 3, 2, 2, 1, 1] પાછા ફરો [\"આઠ\", \"પાંચ\", \"ત્રણ\", \"બે\", \"બે\", \"એક\", \"એક\"] જો એરે ખાલી હોય, તો એક ખાલી વળતર આપે છેઃ arr = [] return [] જો એરેમાં કોઈ વિચિત્ર નંબર હોય તો તેને અવગણોઃ arr = [1, -1 , 55] -> arr -> [-1, 1, 55] -> reverse arr = [55,1] return - ['one' 1] \"\"\"\n",
        "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/106",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef f(n):\n    \"\"\"ફંક્શન f ને અમલમાં મૂકો જે n ને પરિમાણ તરીકે લે છે, અને કદ n ની સૂચિ આપે છે, જેમ કે ઇન્ડેક્સ i પર તત્વનું મૂલ્ય i નું ફેક્ટોરિયલ છે જો i પણ હોય અથવા 1 થી i સુધીની સંખ્યાઓનો સરવાળો હોય. i 1 થી શરૂ થાય છે. i નું ફેક્ટોરિયલ 1 થી i સુધીની સંખ્યાઓનો ગુણાકાર છે (1 * 2 * . . . * i). ઉદાહરણઃ f ((5) == [1, 2, 6, 24, 15] \"\"\"\n",
        "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/107",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"સકારાત્મક પૂર્ણાંક n આપવામાં આવે છે, એક ટુપલ પરત કરો જેમાં શ્રેણીમાં આવતા સમ અને વિચિત્ર પૂર્ણાંક પાલિન્ડ્રોમની સંખ્યા હોય છે. ઉદાહરણ 1: ઇનપુટઃ 3 આઉટપુટઃ (1, 2) સમજૂતીઃ પૂર્ણાંક પાલિન્ડ્રોમ 1, 2, 3. તેમાંના એક પણ છે, અને તેમાંના બે વિચિત્ર છે. ઉદાહરણ 2: ઇનપુટઃ 12 આઉટપુટઃ (4, 6) સમજૂતીઃ પૂર્ણાંક પાલિન્ડ્રોમ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. તેમાંના ચાર પણ છે, અને તેમાંના 6 વિચિત્ર છે. નોંધઃ 1. 1 <= n <= 10^3 2. ટુપલ પરત અનુક્રમે સમ અને વિચિત્ર પૂર્ણાંક પાલિન્ડ્રોમની સંખ્યા છે. \"\"\"\n",
        "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/108",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"એક ફંક્શન count_nums લખો જે પૂર્ણાંકની એરે લે છે અને તત્વોની સંખ્યા આપે છે જેમાં અંકોનો સરવાળો છે > 0. જો કોઈ સંખ્યા નકારાત્મક છે, તો તેનો પ્રથમ સહી કરેલ અંક નકારાત્મક હશે: ઉદાહરણ તરીકે -123 એ અંકો -1, 2, અને 3. >>> count_nums (([]) == 0 >>> count_nums (([-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/109",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"આપણી પાસે N પૂર્ણાંકોની એરે 'arr' છે arr[1], arr[2], ..., arr[N]. એરેમાંની સંખ્યાઓ રેન્ડમલી ક્રમમાં ક્રમમાં આવશે. આપનું કાર્ય એ નક્કી કરવાનું છે કે આપેલ એરે પર નીચેની કામગીરી કરીને એરેને બિન-ઘટાઉ ક્રમમાં સૉર્ટ કરવું શક્ય છે કે નહીં: આપને આપેલ એરે પર કોઈપણ સંખ્યામાં જમણે પાળી કામગીરી કરવાની મંજૂરી છે. એક જમણે પાળી કામગીરીનો અર્થ એ છે કે એરેના બધા તત્વોને જમણી દિશામાં એક સ્થાન દ્વારા ખસેડવું. એરેનો છેલ્લો તત્વ એરેમાં પ્રારંભિક સ્થિતિ એટલે કે 0 મી અનુક્રમમાં ખસેડવામાં આવશે. જો ઉપર આપેલ ઓપરેશન કરીને સૉર્ટ કરેલ એરે મેળવવી શક્ય છે તો સાચું પરત કરો અન્યથા ખોટું પરત કરો. જો આપેલ એરે ખાલી હોય તો સાચું પરત કરો. નોંધઃ આપેલ સૂચિમાં અનન્ય તત્વો હોવાની ખાતરી છે. ઉદાહરણ તરીકેઃ move_one{} ball_[3, 4, 5, 2] સાચું સમજૂતીઃ 2 દ્વારા જમણે પાળી કામગીરી, એરે માટે બિન-ઘટાઉ ક્રમમાં સૉર્ટિંગ પ્રાપ્ત કરી શકાય છે. [1, 3, 4, 5, 2] ખોટી સમજૂતીઃ એરેની સંખ્યાને બદલે, એરેના કોઈપણ ક્રમમાં, shift_one_{}ની કામગીરી કરવા માટે યોગ્ય ક્રમમાં, ન મેળવી શકાય છે.\"\"\"\n",
        "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/110",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"આ સમસ્યામાં, તમે એક ફંક્શન અમલમાં મૂકશો જે સંખ્યાઓની બે સૂચિ લે છે, અને તે નક્કી કરે છે કે શું તે તેમની વચ્ચે તત્વોની આપ-લે કરવા માટે શક્ય છે કે જેથી lst1 માત્ર સંખ્યાઓની સૂચિ બનાવે. lst1 અને lst2 વચ્ચે વિનિમયિત તત્વોની સંખ્યા પર કોઈ મર્યાદા નથી. જો lst1 અને lst2 વચ્ચે તત્વોની આપ-લે કરવી શક્ય છે જેથી lst1 ના બધા તત્વો પણ હોય, તો \"હા\" પરત કરો. અન્યથા, \"ના\" પરત કરો. ઉદાહરણ તરીકેઃ exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => \"હા\" exchange[(1, 2, 3, 4], [1, 5, 3, 4]) => \"ના\" એવું માનવામાં આવે છે કે ઇનપુટ સૂચિઓ બિન-ખાલી હશે. \"\"\"\n",
        "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/111",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef histogram(test):\n    \"\"\"જો કોઈ શબ્દમાળા આપવામાં આવે છે જે જગ્યાથી અલગ નાના અક્ષરોનું પ્રતિનિધિત્વ કરે છે, તો સૌથી વધુ પુનરાવર્તન સાથે અક્ષરનું શબ્દકોશ પરત કરો અને અનુરૂપ ગણતરી શામેલ કરો. જો કેટલાક અક્ષરો સમાન ઘટના ધરાવે છે, તો તે બધાને પરત કરો. ઉદાહરણઃ હિસ્ટોગ્રામ (('a b c') == {'a': 1, 'b': 1, 'c': 1} હિસ્ટોગ્રામ (('a b b a') == {'a': 2, 'b': 2} હિસ્ટોગ્રામ (('a b c a b') == {'a': 2, 'b': 2} હિસ્ટોગ્રામ (('b b a') == {'b 4}': હિસ્ટોગ્રામ '(') == {} \"\"\"\n",
        "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/112",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"કાર્ય આપણને બે શબ્દમાળાઓ s અને c આપવામાં આવે છે, તમારે s માંના બધા અક્ષરોને કાઢી નાખવા પડશે જે c માંના કોઈપણ અક્ષર સાથે સમાન છે પછી તપાસો કે પરિણામ શબ્દમાળા પાલિન્ડ્રોમ છે. જો તે આગળની જેમ જ પાછળની તરફ વાંચે છે તો શબ્દમાળાને પાલિન્ડ્રોમ કહેવામાં આવે છે. તમારે પરિણામ શબ્દમાળા અને સાચું / ખોટું તપાસ માટે એક ટુપલ પરત કરવું જોઈએ. ઉદાહરણ માટે s = \"abcde\", c = \"ae\", પરિણામ હોવું જોઈએ ('bcd', ખોટું) માટે s = \"abcdef\", c = \"b\" પરિણામ હોવું જોઈએ ('acdef', ખોટું) માટે s = \"abcdedcba\", c = \"ab\", પરિણામ હોવું જોઈએ ('cdedc', સાચું) \"\"\"\n",
        "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/113",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"શબ્દમાળાઓની યાદી આપવામાં આવે છે, જ્યાં દરેક શબ્દમાળામાં માત્ર અંકો હોય છે, એક સૂચિ પરત કરો. આઉટપુટના દરેક તત્વ i એ \"ઇનપુટની શબ્દમાળા i માં વિચિત્ર તત્વોની સંખ્યા\" હોવી જોઈએ. જ્યાં બધા i ને ઇનપુટની i'th શબ્દમાળામાં વિચિત્ર અંકોની સંખ્યા દ્વારા બદલવામાં આવવી જોઈએ. >>> odd_count['1234567']) [\"4n ની str4ng 4 ની વિચિત્ર તત્વોની સંખ્યા 4nput.\"] >>> odd_count['3',\"111111\"]) [\"1n ની str1ng 1 ની 1nput. \", \"8n ની str8ng 8 ની વિચિત્ર તત્વોની સંખ્યા 8n. \"]\"\"\"\n",
        "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/114",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"પૂર્ણાંક n ની એરે આપવામાં આવે છે, n ની કોઈપણ બિન-ખાલી સબ-એરેનો ન્યૂનતમ સરવાળો શોધો. ઉદાહરણ minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 \"\"\"\n",
        "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/115",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"તમને કૂવાઓની લંબચોરસ ગ્રીડ આપવામાં આવે છે. દરેક પંક્તિ એક કૂવાને રજૂ કરે છે, અને દરેક પંક્તિમાં 1 પાણીના એક એકમનું પ્રતિનિધિત્વ કરે છે. દરેક કૂવામાં અનુરૂપ ડોલ છે જેનો ઉપયોગ તેનાથી પાણી કાઢવા માટે થઈ શકે છે, અને તમામ ડોલ સમાન ક્ષમતા ધરાવે છે. તમારું કાર્ય કૂવાઓને ખાલી કરવા માટે ડોલનો ઉપયોગ કરવાનું છે. તમે કૂવાઓને નીચે મૂકવાની જરૂર છે તે સંખ્યાને આઉટપુટ કરો. ઉદાહરણ 1: ઇનપુટઃ ગ્રીડઃ [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity: 1 આઉટપુટઃ 6 ઉદાહરણ 2: ઇનપુટઃ ગ્રીડઃ [[0,0,1,1], [0,0,0,0], [1,1,1], [0,1,1,1]] bucket_capacity: 2 આઉટપુટઃ 5 ઉદાહરણ 3: ઇનપુટઃ [[:0,0,0], [0,0,0]] bucket_capacity: 5 આઉટપુટઃ 0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 1 * 2 * 1 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 1 * 1 * 2 * 1 * 2 * 2 * 1 * 2 * 2 * 2 * 2 * 3 * 2 * 2 * 2 * 3 * 2 * 3 * 2 * 2 * 3 * 2 * 4 * * 2 * 2 * 3 * 4 * 4 * 6 * * * * 6 * * * * * * * * * * * 6 * * * * * * * * * * * * * * * * * * * 6 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\"\"\"\n",
        "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/116",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"આ કાટામાં, તમારે બિન-નકારાત્મક પૂર્ણાંકોની એરેને તેમની દ્વિસંગી પ્રતિનિધિત્વમાં વધતા ક્રમમાં સંખ્યાના આધારે સૉર્ટ કરવી પડશે. સમાન સંખ્યાના એક માટે, દશાંશ મૂલ્ય પર આધારિત સૉર્ટ કરો. તે આ રીતે અમલમાં હોવું જોઈએઃ >>> sort_array (([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array (([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array (([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] \"\"\"\n",
        "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/117",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"જો string s અને કુદરતી સંખ્યા n આપવામાં આવે, તો તમને એક કાર્ય અમલમાં મૂકવાનું કામ સોંપવામાં આવ્યું છે જે string s માંથી બધા શબ્દોની સૂચિ આપે છે જેમાં બરાબર n વ્યંજનો હોય છે, જેથી આ શબ્દો string s માં દેખાય છે. જો string s ખાલી હોય તો ફંક્શનને ખાલી સૂચિ પરત કરવી જોઈએ. નોંધઃ તમે ધારી શકો છો કે ઇનપુટ શબ્દમાળામાં ફક્ત અક્ષરો અને જગ્યાઓ છે. ઉદાહરણોઃ select_words \"મેરી પાસે થોડું ઘેટું હતું\", 4) ==> [\"little\"] select_words \"મેરી પાસે થોડું ઘેટું હતું\", 3) ==> [\"મેરી\", \"લેમ્બ\"] select_words \"સાદા સફેદ જગ્યા\", 2) ==> [] select_words \"હેલો વર્લ્ડ\", 4) ==> [\"world\"] select_words \"અંકલ સેમ\", 3) ==> [\"Uncle\"] \"\"\"\n",
        "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/118",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"તમને એક શબ્દ આપવામાં આવે છે. તમારું કાર્ય એ છે કે શબ્દની જમણી બાજુથી બે વ્યંજનો વચ્ચે સૌથી નજીકનો સ્વર શોધો (કેસ સેન્સિટિવ). શરૂઆત અને અંતમાં સ્વરોની ગણતરી થતી નથી. જો તમને ઉપરોક્ત શરત પૂરી ન થાય તો ખાલી શબ્દમાળા પરત કરો. તમે ધારણ કરી શકો છો કે આપેલ શબ્દમાળામાં ફક્ત અંગ્રેજી અક્ષર છે. ઉદાહરણઃ get_closest_vowel (((\"yogurt\") ==> \"u\" get_closest_vowel (((\"F\") ==> \"U\" get_closest_vowel (((\"quick\") ==> \"\" get_closest_vowel\" ((ab\") ==> \"\" \"\"\"\n",
        "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/119",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef match_parens(lst):\n    '''તમને બે શબ્દમાળાઓની યાદી આપવામાં આવે છે, બંને શબ્દમાળાઓ ફક્ત ખુલ્લા કૌંસ '(' અથવા બંધ કૌંસ ') 'થી બનેલા છે. તમારું કાર્ય એ તપાસવાનું છે કે શું બે શબ્દમાળાઓને કોઈ ક્રમમાં જોડવું શક્ય છે, કે પરિણામી શબ્દમાળા સારી હશે. શબ્દમાળા S ને સારી માનવામાં આવે છે જો અને માત્ર જો એસમાં બધા કૌંસ સંતુલિત હોય. ઉદાહરણ તરીકેઃ શબ્દમાળા '((()) ' સારી છે, જ્યારે શબ્દમાળા '()) ' નથી. જો સારી શબ્દમાળા બનાવવાનો કોઈ રસ્તો હોય તો 'હા' પરત કરો, અને અન્યથા 'ના' પરત કરો. ઉદાહરણોઃ મેચ_પેરન્સ [('() ', ') ']) == 'હા' મેચ_પેરન્સ [(') ', ') ']) == 'ના' '''\n",
        "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/120",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"પૂર્ણાંક arr અને હકારાત્મક પૂર્ણાંક k આપેલ છે, એરેમાં મહત્તમ k સંખ્યાઓ સાથે લંબાઈ k ની સૉર્ટ કરેલી સૂચિ પરત કરો. ઉદાહરણ 1: ઇનપુટઃ arr = [-3, -4, 5], k = 3 આઉટપુટઃ [-4, -3, 5] ઉદાહરણ 2: ઇનપુટઃ arr = [4, -4, 4], k = 2 આઉટપુટઃ [4, 4] ઉદાહરણ 3: ઇનપુટઃ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 આઉટપુટઃ [2] નોંધઃ 1. એરેની લંબાઈ [1, 1000] ની રેન્જમાં હશે. 2. એરેમાં તત્વો [-1000, 1000] ની રેન્જમાં હશે. 3. 0 <= k <= len ((arr) \"\"\"\n",
        "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/121",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef solution(lst):\n    \"\"\"પૂર્ણાંકોની બિન-ખાલી સૂચિ આપવામાં આવે છે, તે બધા વિચિત્ર તત્વોનો સરવાળો આપે છે જે પણ સ્થિતિમાં છે. ઉદાહરણો ઉકેલ (([5, 8, 7, 1]) ==> 12 ઉકેલ (([3, 3, 3, 3, 3]) ==> 9 ઉકેલ (([30, 13, 24, 321]) ==> 0 \"\"\"\n",
        "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/122",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"પૂર્ણાંક arr અને પૂર્ણાંક k ની બિન-ખાલી એરે આપવામાં આવે છે, એરના પ્રથમ k તત્વોમાંથી વધુમાં વધુ બે અંકો સાથેના તત્વોનો સરવાળો પાછો આપે છે. ઉદાહરણઃ ઇનપુટઃ arr = [111,21,3,4000,5,6,7,8,9], k = 4 આઉટપુટઃ 24 # 21 + 3 ની રકમ પ્રતિબંધોઃ 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr)\"\"\"\n",
        "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/123",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"સકારાત્મક પૂર્ણાંક n આપવામાં આવે છે, એક સૉર્ટ કરેલ સૂચિ પરત કરો જેમાં કોલાત્ઝ ક્રમમાં વિચિત્ર સંખ્યાઓ છે. કોલાત્ઝ અનુમાન એ ગણિતમાં એક અનુમાન છે જે નીચે પ્રમાણે વ્યાખ્યાયિત ક્રમથી સંબંધિત છેઃ કોઈપણ સકારાત્મક પૂર્ણાંક n થી પ્રારંભ કરો. પછી દરેક શબ્દ અગાઉના શબ્દમાંથી નીચે પ્રમાણે મેળવવામાં આવે છેઃ જો અગાઉનો શબ્દ પણ હોય, તો પછીનો શબ્દ પાછલા શબ્દનો અડધો ભાગ છે. જો અગાઉનો શબ્દ વિચિત્ર હોય, તો પછીનો શબ્દ અગાઉના શબ્દનો 3 ગણો છે વત્તા 1. અનુમાન એ છે કે n ની કિંમત ગમે તે હોય, ક્રમ હંમેશા 1 સુધી પહોંચશે. નોંધઃ 1. કોલાત્ઝ (((1) એ [1] છે. 2. પરત કરેલી સૂચિ ક્રમમાં વધતી ક્રમમાં સૉર્ટ કરેલી છે. ઉદાહરણ તરીકેઃ get_odd_collatz ((5) વળતર આપે છે [1, 5] 5 માટે કોલાત્ઝ ક્રમ [5, 8, 16, 4, 2, 1], તેથી વિચિત્ર સંખ્યાઓ માત્ર 1, અને 5 છે. \"\"\"\n",
        "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/124",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef valid_date(date):\n    \"\"\"તમારે એક ફંક્શન લખવું પડશે જે આપેલ તારીખ શબ્દમાળાને માન્ય કરે છે અને જો તારીખ માન્ય હોય તો સાચું આપે છે અન્યથા ખોટા. તારીખ માન્ય છે જો નીચેના તમામ નિયમો સંતોષાય છેઃ 1. તારીખ શબ્દમાળા ખાલી નથી. 2. મહિના 1,3,5,7,8,10,12 માટે દિવસોની સંખ્યા 1 કરતા ઓછી અથવા 31 દિવસથી વધુ નથી. અને મહિના 4,6,9,11 માટે દિવસોની સંખ્યા 1 કરતા ઓછી અથવા 30 દિવસથી વધુ નથી. અને, મહિના માટે દિવસની સંખ્યા 1 કરતા ઓછી અથવા 29 કરતા વધુ નથી. 2. 3. મહિના 1 કરતા ઓછા અથવા 12 કરતા વધુ ન હોવા જોઈએ. 4. તારીખ આ ફોર્મેટમાં હોવી જોઈએઃ mm-dd-yyyy ઉદાહરણ તરીકેઃ valid_date (('03-11-2000') => true_date (('15-01-2012') => false_date (('04-01-2040') => false_date (('06-04-2020') => true_date (('06/04/2020') => false\"\"\"\n",
        "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/125",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef split_words(txt):\n    '''શબ્દમાળા આપવામાં આવે છે, શબ્દોની યાદીને સફેદ જગ્યા પર વિભાજિત કરો, જો કોઈ સફેદ જગ્યાઓ ટેક્સ્ટમાં અસ્તિત્વમાં ન હોય તો તમારે કોમા પર વિભાજિત કરવું જોઈએ ',' જો કોઈ કોમા અસ્તિત્વમાં ન હોય તો તમારે મૂળાક્ષરમાં વિચિત્ર ક્રમમાં નાના અક્ષરોની સંખ્યા પરત કરવી જોઈએ, ઓર્ડર (a) = 0, ઓર્ડર (b) = 1, . . . ઓર્ડર (z) = 25 ઉદાહરણો વિભાજીત_ શબ્દો (Hello world!'''\n",
        "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/126",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_sorted(lst):\n    '''સંખ્યાઓની સૂચિ આપવામાં આવે છે, તે ક્રમશઃ ક્રમમાં સૉર્ટ કરવામાં આવે છે કે નહીં તે પરત કરે છે. જો સૂચિમાં સમાન સંખ્યાના 1 થી વધુ ડુપ્લિકેટ હોય, તો ખોટા પરત કરો. કોઈ નકારાત્મક સંખ્યાઓ અને માત્ર પૂર્ણાંકો ધારો. ઉદાહરણો is_sorted છે) []]) â -> સાચું is_sorted છે ([1, 2, 3, 4, 5, 6]) â -> સાચું is_sorted છે ([1, 2, 3, 4, 5, 6]) â -> સાચું is_sorted છે ([1, 2, 3, 4, 5, 6, 7]) â -> સાચું is_sorted છે ([1, 3, 4, 5, 6, 7]) â -> સાચું is_sorted છે ([1, 3, 2, 4, 5, 6, 7]) â -> ખોટા is_sorted છે ([1, 2, 2, 3, 3, 4]) â -> સાચું is_sorted છે ([1, 2, 2, 3, 4 -> ખોટા ])'''\n",
        "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/127",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"તમને બે અંતરાલો આપવામાં આવે છે, જ્યાં દરેક અંતરાલ પૂર્ણાંકની જોડી છે. ઉદાહરણ તરીકે, અંતરાલ = (પ્રારંભ, અંત) = (1, 2). આપેલ અંતરાલો બંધ છે જેનો અર્થ છે કે અંતરાલ (પ્રારંભ, અંત) માં શરૂઆત અને અંત બંનેનો સમાવેશ થાય છે. દરેક અંતરાલ માટે, એવું માનવામાં આવે છે કે તેની શરૂઆત તેના અંતથી ઓછી અથવા બરાબર છે. તમારું કાર્ય એ નક્કી કરવાનું છે કે આ બે અંતરાલોની આંતરછેદની લંબાઈ એક અગ્ર સંખ્યા છે કે નહીં. ઉદાહરણ તરીકે, અંતરાલો (1, 3), (2, 4) નું આંતરછેદ (2, 3) છે, જે તેની લંબાઈ 1 છે, જે અગ્ર સંખ્યા નથી. જો આંતરછેદની લંબાઈ અગ્ર સંખ્યા છે, તો \"હા\" પરત કરો, અન્યથા, \"ના\" પરત કરો. જો બે અંતરાલો એકબીજા સાથે જોડાયેલા નથી, તો \"ના\" પરત કરો. [input/output] નમૂનાઓઃ આંતરછેદ (((1, 2), (2, 3) ==> \"અંતરછેદ-1, ((1), 4) ==> \"અંતરછેદ\", (<0, - 5), ((1, (<-)) \"હા\" પરતરાલં))\"\"\"\n",
        "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/128",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"તમને પૂર્ણાંકની એરે આપવામાં આવે છે અને તમારે એરેમાં દરેક સંખ્યાના તમામ ચિહ્નોના ઉત્પાદન દ્વારા ગુણાકાર કરેલા પૂર્ણાંકની માત્રાનો સરવાળો પાછો આપવો પડશે, જે 1, -1 અથવા 0 દ્વારા રજૂ થાય છે. નોંધઃ ખાલી એરે માટે કોઈ નહીં. ઉદાહરણઃ >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None \"\"\"\n",
        "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/129",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"N પંક્તિઓ અને N સ્તંભો (N >= 2) અને હકારાત્મક પૂર્ણાંક k સાથેની ગ્રીડ આપવામાં આવે છે, ગ્રીડના દરેક કોષમાં મૂલ્ય હોય છે. [1, N * N] સહિતના દરેક પૂર્ણાંક ગ્રીડના કોશિકાઓ પર બરાબર એક વાર દેખાય છે. તમારે ગ્રીડમાં લંબાઈ k ની લઘુત્તમ પાથ શોધવી પડશે. તમે કોઈપણ કોષથી શરૂ કરી શકો છો, અને દરેક પગલામાં તમે કોઈ પણ પડોશી કોશિકાઓ પર જઈ શકો છો, બીજા શબ્દોમાં કહીએ તો, તમે કોઈપણ પડોશી કોશિકાઓ પર જઈ શકો છો જે તમારી સાથે એક ધાર શેર કરે છે વર્તમાન કોષ. કૃપા કરીને નોંધો કે k ની લંબાઈનો માર્ગ બરાબર k કોશિકાઓ (જરૂરી નથી તે અલગ) ની મુલાકાત લેવાનો અર્થ છે. તમે ગ્રીડમાંથી બહાર ન જઇ શકો. પાથ A (લંબાઈ k) ને પાથ B (લંબાઈ k) કરતા ઓછું ગણવામાં આવે છે જો A અને B (તેમને lA_st અને l_stB) પરના મૂલ્યોની ક્રમબદ્ધ સૂચિ બનાવ્યા પછી, l_stB અને l_st l_st), l_stA lexically l_stA કરતાં ઓછું છે, અન્ય શબ્દોમાં, તમે ગ્રીડમાં લંબાઈ k ની લંબાઈ k ની લંબાઈના કોઈપણ કોશને ખસેડી શકો છો, અન્ય શબ્દોમાં, તમે કોઈપણ પડોડાના કોશિકામાં કોઈપણ પડોડા સાથે કિન કોશિકાઓ પર જઈ શકો છો, અન્ય શબ્દોમાં, તમે કોઈપણ કોશિકામાં જઈ શકો છો, તમે કોઈપણ કોશિકામાં, અને તમે આ રીતે, ઉદાહરણ તરીકે, k_1, [4, k_1, [1, k_1, k_1, k_1, k_1, j_[1, j_[1, j_[1, j_[,_[,_[_[,_[,_[,_[,_[,_[,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_\"\"\"\n",
        "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/130",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef tri(n):\n    \"\"\"દરેક વ્યક્તિ ફિબોનાકી ક્રમ જાણે છે, છેલ્લા બે સદીઓમાં ગણિતશાસ્ત્રીઓ દ્વારા તેનો ઊંડાણપૂર્વક અભ્યાસ કરવામાં આવ્યો હતો. જો કે, લોકો જે જાણતા નથી તે ટ્રિબોનાકી ક્રમ છે. ટ્રિબોનાકી ક્રમ પુનરાવર્તન દ્વારા વ્યાખ્યાયિત કરવામાં આવે છેઃ ત્રિ (૧) = 3 ત્રિ (૧) = 1 + એન / 2, જો એન પણ છે. ત્રિ (૧) = ત્રિ (૧) + ત્રિ (૧) - 2) + ત્રિ (૧) + એન + 1, જો એન વિચિત્ર છે. ઉદાહરણ તરીકેઃ ત્રિ (૨) = 1 + (2 / 2) = 2 ત્રિ (૧) = 3 ત્રિ (૩) = ત્રિ (૧) + ત્રિ (૪) = 2 + 3 + 3 = 8 તમને બિન-નકારાત્મક પૂર્ણાંક નંબર એન આપવામાં આવે છે, તમારે ટ્રિબોનાકી ક્રમની પ્રથમ એન + 1 સંખ્યાઓની સૂચિ પરત કરવી પડશે. ઉદાહરણોઃ ત્રિ (૧) = [1, 3, 2, 8] \"\"\"\n",
        "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/131",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef digits(n):\n    \"\"\"સકારાત્મક પૂર્ણાંક n આપવામાં આવે છે, વિચિત્ર અંકોનું ઉત્પાદન પરત કરો. જો બધા અંકો પણ હોય તો 0 પરત કરો. ઉદાહરણ તરીકેઃ અંકો ((1) == 1 અંકો ((4) == 0 અંકો ((235) == 15 \"\"\"\n",
        "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/132",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_nested(string):\n    '''એક ફંક્શન બનાવો જે ઇનપુટ તરીકે સ્ટ્રિંગ લે છે જેમાં ફક્ત ચોરસ કૌંસ હોય છે. ફંક્શન સાચું પરત કરવું જોઈએ જો અને માત્ર જો કૌંસનો માન્ય સબક્વન્સી હોય જ્યાં ઓછામાં ઓછા એક કૌંસને અનુક્રમમાં નેસ્ટ કરવામાં આવે છે. is_nested '[[]]') â -> True is_nested '[[]]]]]]]]]]][[[[[[[]') â -> False is_nested '[][]') â -> False is_nested '[]') â -> False is_nested '[[]') â -> False is_nested'[[][]]') â -> True is_nested'[[]]]][[') â -> True'''\n",
        "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/133",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"તમને સંખ્યાઓની યાદી આપવામાં આવે છે. તમારે આપેલ સૂચિમાં ચોરસ સંખ્યાઓનો સરવાળો પાછો આપવો પડશે, પ્રથમ સૂચિમાં દરેક તત્વને ઉપલા int ((Ceiling) પર ગોળાકાર કરો. ઉદાહરણોઃ For lst = [1,2,3] આઉટપુટ 14 હોવું જોઈએ For lst = [1,4,9] આઉટપુટ 98 હોવું જોઈએ For lst = [1,3,5,7] આઉટપુટ 84 હોવું જોઈએ For lst = [1.4,4.2,0] આઉટપુટ 29 હોવું જોઈએ For lst = [-2.4,1,1] આઉટપુટ 6 હોવું જોઈએ \"\"\"\n",
        "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/134",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''એક ફંક્શન બનાવો જે સાચું આપે છે જો આપેલ શબ્દમાળાના છેલ્લા અક્ષર મૂળાક્ષરનું અક્ષર છે અને શબ્દનો ભાગ નથી, અને અન્યથા ખોટા. નોંધઃ \"વર્ડ\" એ જગ્યા દ્વારા અલગ પાડવામાં આવેલા અક્ષરોનું જૂથ છે. ઉદાહરણોઃ check_if_last_char_is_a_letter ((\"apple pie\") â -> False check_if_last_char_is_a_letter ((\"apple pi e\") â -> True check_if_last_char_is_a_letter ((\"apple pi e \") â -> False check_if_last_char_is_a_letter\" (((\") â -> False '''\n",
        "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/135",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"એક ફંક્શન બનાવો જે તત્વના સૌથી મોટા અનુક્રમણિકાને આપે છે જે તત્વની તુલનામાં વધારે અથવા બરાબર નથી. જો આવા કોઈ તત્વ અસ્તિત્વમાં નથી તો પછી -1. આપેલ એરેમાં ડુપ્લિકેટ મૂલ્યો શામેલ નહીં હોય. ઉદાહરણોઃ can_arrange (([1,2,4,3,5]) = 3 can_arrange[(1,2,3]) = -1 \"\"\"\n",
        "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/136",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''એક કાર્ય બનાવો જે ટુપલ (એ, બી) આપે છે, જ્યાં 'એ' નકારાત્મક પૂર્ણાંકોમાં સૌથી મોટું છે, અને 'બી' સૂચિમાં હકારાત્મક પૂર્ણાંકોમાં સૌથી નાનું છે. જો કોઈ નકારાત્મક અથવા હકારાત્મક પૂર્ણાંકો ન હોય તો, તેમને કોઈ તરીકે પરત કરો. ઉદાહરણોઃ સૌથી મોટી_સૌથી નાની_પૂર્ણાંકો[2, 4, 1, 3, 5, 7]) == (કોઈ નહીં, 1) સૌથી મોટી_સૌથી નાની_પૂર્ણાંકો (([]) == (કોઈ નહીં, કોઈ નહીં) સૌથી મોટી_સૌથી નાની_પૂર્ણાંકો (([0]) == (કોઈ નહીં, કોઈ નહીં) '''\n",
        "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/137",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"એક ફંક્શન બનાવો જે પૂર્ણાંક, ફ્લોટ્સ અથવા વાસ્તવિક સંખ્યાઓનું પ્રતિનિધિત્વ કરતી શબ્દમાળાઓ લે છે અને તેના આપેલ ચલ પ્રકારમાં મોટા ચલને પરત કરે છે. જો મૂલ્યો સમાન હોય તો કોઈ નહીં પરત કરો. નોંધઃ જો વાસ્તવિક સંખ્યાને શબ્દમાળા તરીકે રજૂ કરવામાં આવે તો ફ્લોટિંગ પોઇન્ટ હોઈ શકે છે . અથવા , compare_one{1, 2.5) â -> 2.5 compare_one{1, \"2,3\") â -> \"2,3\" compare_one{5,1\", \"6\") â -> \"6\" compare_one{1\", 1) â -> None \"\"\"\n",
        "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/138",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"મૂલ્યાંકન કરો કે આપેલ સંખ્યા n બરાબર 4 હકારાત્મક સંખ્યાઓની રકમ તરીકે લખી શકાય છે ઉદાહરણ is_equal_to_sum_even ()) == ખોટી is_equal_to_sum_even ()) == ખોટી is_equal_to_sum_even ()) == સાચું \"\"\"\n",
        "canonical_solution": "    return n%2 == 0 and n >= 8\n",
        "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/139",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"બ્રાઝિલિયન ફેક્ટરીયલ આ પ્રમાણે વ્યાખ્યાયિત થયેલ છેઃ બ્રાઝિલિયન ફેક્ટરીયલ (n) = n! * (n-1)! * (n-2)! * . . . * 1! જ્યાં n > 0 ઉદાહરણ તરીકેઃ >>> સ્પેશિયલ ફેક્ટરીયલ (n) 288 ફંક્શનને ઇનપુટ તરીકે પૂર્ણાંક પ્રાપ્ત થશે અને આ પૂર્ણાંકનો સ્પેશિયલ ફેક્ટરીયલ પાછો આપવો જોઈએ. \"\"\"\n",
        "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/140",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"_ઉદાહરણ-3આપવામાં આવે છે, તેમાં તમામ જગ્યાઓ અંડરકોર્સ સાથે બદલો, અને જો શબ્દમાળામાં 2 થી વધુ સળંગ જગ્યાઓ હોય, તો પછી તમામ સળંગ જગ્યાઓને - fix_spaces સાથે બદલો.\"\n    \"\"\"\n",
        "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/141",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"એક ફંક્શન બનાવો જે ફાઇલનું નામ રજૂ કરતી શબ્દમાળા લે છે, અને જો ફાઇલનું નામ માન્ય હોય તો 'હા' આપે છે, અને અન્યથા 'ના' આપે છે. ફાઇલનું નામ માન્ય માનવામાં આવે છે જો અને માત્ર જો નીચેની બધી શરતો પૂરી થાય તોઃ - ફાઇલના નામમાં ત્રણ અંકો ('0'-'9') કરતાં વધુ ન હોવા જોઈએ. - ફાઇલનું નામ બરાબર એક બિંદુ '.' ધરાવે છે. - બિંદુ પહેલાં સબસ્ટ્રિંગ ખાલી ન હોવું જોઈએ, અને તે લેટિન આલ્ફાપેટ ('a'-'z' અને 'A'Z'-) ના અક્ષરથી શરૂ થાય છે. - બિંદુ પછી સબસ્ટ્રિંગ આમાંથી એક હોવું જોઈએઃ ['txt', 'exe', 'lld'] ઉદાહરણોઃ file_name_check\"(example. txt. #\") => 'હા' file_name_check\"{example. txt. #\") => 'ના' (નામ લેટિન આલ્ફાપેટ અક્ષરથી શરૂ થવું જોઈએ)\"\"\"\n",
        "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/142",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\" આ ફંક્શન પૂર્ણાંકની યાદી લેશે. યાદીમાંની તમામ એન્ટ્રીઓ માટે, ફંક્શન પૂર્ણાંક એન્ટ્રીને ચોરસ બનાવશે જો તેની ઇન્ડેક્સ 3 ની ગુણાંક છે અને પૂર્ણાંક એન્ટ્રીને સમઘન બનાવશે જો તેની ઇન્ડેક્સ 4 ની ગુણાંક છે અને 3 ની ગુણાંક નથી. ફંક્શન સૂચિમાં એન્ટ્રીઝને બદલશે નહીં જેની અનુક્રમણિકા 3 અથવા 4 ની ગુણાંક નથી. ફંક્શન પછી તમામ એન્ટ્રીઝનો સરવાળો આપશે. ઉદાહરણોઃ lst = [1,2,3] માટે આઉટપુટ 6 હોવું જોઈએ lst = [] માટે આઉટપુટ 0 હોવું જોઈએ lst = [-1,-5,2,-1,-5] માટે આઉટપુટ -126 હોવું જોઈએ \"\"\"\n",
        "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/143",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"તમને એક વાક્યનું પ્રતિનિધિત્વ કરતી શબ્દમાળા આપવામાં આવે છે, વાક્યમાં કેટલાક શબ્દો હોય છે જે જગ્યા દ્વારા અલગ પડે છે, અને તમારે એક શબ્દમાળા પરત કરવી પડશે જેમાં મૂળ વાક્યના શબ્દો હોય છે, જેની લંબાઈ અંક સંખ્યાઓ છે, નવી શબ્દમાળામાં શબ્દોનો ક્રમ મૂળની જેમ જ હોવો જોઈએ. ઉદાહરણ 1: ઇનપુટઃ વાક્ય = \"આ એક પરીક્ષણ છે\" આઉટપુટઃ \"છે\" ઉદાહરણ 2: ઇનપુટઃ વાક્ય = \"સ્વિમિંગ માટે જવા દો\" આઉટપુટઃ \"જાઓ\" પ્રતિબંધોઃ * 1 <= len(sentence) <= 100 * વાક્યમાં ફક્ત અક્ષરો છે \"\"\"\n",
        "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/144",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"તમારું કાર્ય એક કાર્ય અમલમાં મૂકવાનું છે જે એક્સપ્રેશનને સરળ બનાવશે x * n. કાર્ય સાચું વળતર આપે છે જો x * n એક સંપૂર્ણ સંખ્યાને મૂલ્યાંકન કરે છે અને અન્યથા ખોટા છે. બંને x અને n, અપૂર્ણાંકના શબ્દમાળા પ્રતિનિધિત્વ છે, અને નીચેના ફોર્મેટ ધરાવે છે, <numerator>/<denominator> જ્યાં બંને ન્યુમેરેટર અને નામાંકકકક હકારાત્મક સંપૂર્ણ સંખ્યાઓ છે. તમે ધારી શકો છો કે x, અને n માન્ય અપૂર્ણાંક છે, અને નામાંક તરીકે શૂન્ય નથી. સરળ \" 1/5 \", \"5/1\") = સાચું સરળ \" 1/6 \", \"2/1\") = ખોટા સરળ \" 7/10 \", \"10/2\") = ખોટા \"\"\"\n",
        "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/145",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"એક કાર્ય લખો જે પૂર્ણાંકોની આપેલ સૂચિને તેમના અંકોના સરવાળો અનુસાર વધતા ક્રમમાં સૉર્ટ કરે છે. નોંધઃ જો તેમના અંકોના સમાન સરવાળો સાથે ઘણી વસ્તુઓ હોય, તો તેમને મૂળ સૂચિમાં તેમના અનુક્રમણિકાના આધારે ક્રમ આપો. ઉદાહરણ તરીકેઃ >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] \"\"\"\n",
        "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/146",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"એક ફંક્શન લખો જે સંખ્યાઓના એરેને ઇનપુટ તરીકે લે છે અને એરેમાં તત્વોની સંખ્યા આપે છે જે 10 કરતા વધારે છે અને સંખ્યાના પ્રથમ અને છેલ્લા અંકો બંને વિચિત્ર છે (1, 3, 5, 7, 9). ઉદાહરણ તરીકેઃ specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 \"\"\"\n",
        "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/147",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"તમને હકારાત્મક પૂર્ણાંક n આપવામાં આવે છે. તમારે લંબાઈ n ની પૂર્ણાંક એરે બનાવવી પડશે. દરેક i (1 â ‰¤ i â ‰¤ n) માટે, a[i] = i * i - i + 1 ની કિંમત. a ની ટ્રિપલ્સ (a[i], a[j], a[k]) ની સંખ્યા પરત કરો જ્યાં i < j < k, અને a[i] + a[j] + a[k] એ 3 નું ગુણાંક છે. ઉદાહરણઃ ઇનપુટઃ n = 5 આઉટપુટઃ 1 સમજૂતીઃ a = [1, 3, 7, 13, 21] એકમાત્ર માન્ય ટ્રિપલ (1, 7, 13) છે. \"\"\"\n",
        "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/148",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef bf(planet1, planet2):\n    '''આપણા સૌરમંડળમાં આઠ ગ્રહો છેઃ સૂર્યની સૌથી નજીકનો ગ્રહ બુધ છે, પછીનો એક શુક્ર છે, પછી પૃથ્વી, મંગળ, ગુરુ, શનિ, યુરેનસ, નેપ્ચ્યુન. એક ફંક્શન લખો જે બે ગ્રહના નામોને સ્ટ્રિંગ્સ ગ્રહ 1 અને ગ્રહ 2 તરીકે લે છે. ફંક્શનને સૂર્યની નિકટતા દ્વારા સૉર્ટ કરેલા ગ્રહ 1 અને ગ્રહ 2 ની ભ્રમણકક્ષા વચ્ચે સ્થિત તમામ ગ્રહો ધરાવતી ટુપલ પરત કરવી જોઈએ. જો ગ્રહ 1 અથવા ગ્રહ 2 યોગ્ય ગ્રહ નામો નથી તો ફંક્શનને ખાલી ટુપલ પરત કરવી જોઈએ. ઉદાહરણો bf \"(જુપીટર\", \"નેપ્ચ્યુન\") ==> (\"શનિ\", \"યુરેનસ\") bf (((\"પૃથ્વી\", \"બુધ\") ==> (\"શુક્ર\") bf (((\"બુધ\", \"યુરેનસ\") ==> (\"શુક્ર\", \"પૃથ્વી\", \"મંગળ\", \"જુપીટર\", \"શનિ\") '''\n",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/149",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"એક ફંક્શન લખો જે શબ્દમાળાઓની યાદીને પરિમાણ તરીકે સ્વીકારે છે, તેમાંથી વિચિત્ર લંબાઈ ધરાવતા શબ્દમાળાઓને કાઢી નાખે છે, અને પરિણામી સૂચિને સૉર્ટ કરેલ ક્રમમાં આપે છે. સૂચિ હંમેશા શબ્દમાળાઓની સૂચિ છે અને ક્યારેય સંખ્યાઓની એરે નથી, અને તેમાં ડુપ્લિકેટ્સ હોઈ શકે છે. સૂચિનો ક્રમ દરેક શબ્દની લંબાઈ દ્વારા વધતો હોવો જોઈએ, અને તમારે તે નિયમ દ્વારા સૉર્ટ કરેલ સૂચિ પરત કરવી જોઈએ. જો બે શબ્દો સમાન લંબાઈ ધરાવે છે, તો સૂચિને મૂળાક્ષર પ્રમાણે સૉર્ટ કરો. ફંક્શનને સૉર્ટ કરેલ ક્રમમાં શબ્દમાળાઓની સૂચિ પરત કરવી જોઈએ. તમે ધારણ કરી શકો છો કે બધા શબ્દોની સમાન લંબાઈ હશે. ઉદાહરણ તરીકેઃ assert list_sort[\"aa\", \"a\", \"aaa\"]) => assert list_sort[\"ab\", \"a\", \"aaa\", \"cd\" => \"cd\")\"\"\"\n",
        "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/150",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"એક સરળ પ્રોગ્રામ જે x નું મૂલ્ય પાછું આપવું જોઈએ જો n એ અપૂર્ણાંક હોય અને y નું મૂલ્ય પાછું આપવું જોઈએ. ઉદાહરણોઃ x_or_y{7, 34, 12) == 34 x_or_y{15, 8, 5) == 5 \"\"\"\n",
        "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/151",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef double_the_difference(lst):\n    '''સંખ્યાઓની સૂચિ આપવામાં આવે છે, તે સૂચિમાં સંખ્યાઓના ચોરસનો સરવાળો આપે છે જે વિચિત્ર છે. નકારાત્મક અથવા પૂર્ણાંક ન હોય તેવા નંબરોને અવગણો. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 જો ઇનપુટ સૂચિ ખાલી હોય, તો 0 પરત કરો '''\n",
        "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/152",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"મને લાગે છે કે આપણે બધા તે લાગણીને યાદ કરીએ છીએ જ્યારે કોઈ લાંબા સમયથી રાહ જોવાતી ઘટનાનું પરિણામ આખરે જાણી શકાય છે. તે ક્ષણે તમારી પાસેની લાગણીઓ અને વિચારો ચોક્કસપણે નોંધવા અને તુલના કરવા યોગ્ય છે. તમારું કાર્ય એ નક્કી કરવાનું છે કે કોઈ વ્યક્તિએ સંખ્યાબંધ મેચના પરિણામોને યોગ્ય રીતે અનુમાન લગાવ્યું છે કે નહીં. તમને સમાન લંબાઈના સ્કોર્સ અને અનુમાનની બે એરે આપવામાં આવે છે, જ્યાં દરેક અનુક્રમણિકા મેચ બતાવે છે. દરેક અનુમાન કેટલું દૂર હતું તે દર્શાવતી સમાન લંબાઈની એરે પરત કરો. જો તેઓએ યોગ્ય રીતે અનુમાન લગાવ્યું હોય, તો મૂલ્ય 0 છે, અને જો નહીં, તો મૂલ્ય અનુમાન અને સ્કોર વચ્ચેનો સંપૂર્ણ તફાવત છે. ઉદાહરણઃ (([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,3,3] compare (([0,5,0,4,0,1,0,2,4] compare ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"\"\"\n",
        "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/153",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"તમને એક વર્ગનું નામ (એક શબ્દમાળા) અને એક્સ્ટેન્શન્સની યાદી આપવામાં આવશે. એક્સ્ટેન્શન્સનો ઉપયોગ વર્ગમાં વધારાના વર્ગોને લોડ કરવા માટે કરવામાં આવશે. એક્સ્ટેન્શનની મજબૂતાઈ નીચે મુજબ છેઃ CAP એ એક્સ્ટેન્શનના નામમાં મોટા અક્ષરોની સંખ્યા હોય, અને SM એ એક્સ્ટેન્શનના નામમાં નાના અક્ષરોની સંખ્યા હોય, તો મજબૂતાઈ CAP - SM અપૂર્ણાંક દ્વારા આપવામાં આવે છે. તમારે સૌથી મજબૂત એક્સ્ટેન્શન શોધવું જોઈએ અને આ ફોર્મેટમાં એક શબ્દમાળા પરત કરવી જોઈએઃ ClassName.StrongestExtensionName. જો સમાન મજબૂતાઈ સાથે બે અથવા વધુ એક્સ્ટેન્શન્સ હોય, તો તમારે સૂચિમાં પ્રથમ આવે છે તે પસંદ કરવું જોઈએ. ઉદાહરણ તરીકે, જો તમને વર્ગ તરીકે \"સ્લાઇસેસ\" અને એક્સ્ટેન્શન્સની સૂચિ આપવામાં આવે છેઃ ['SEviviSliNGCes', 'Cheese', 'StuFfed'] તો તમારે 'Slices.SEviSliNGCes' પરત કરવી જોઈએ કારણ કે 'SEviSliNGCes' (મારાં નાના અક્ષરોની સંખ્યા) એક્સ્ટેન્શનનું નામ છે, ઉદાહરણ તરીકેઃ 'AA_' (ક્લાઇસ્ટ એક્સ્ટેન્શન = 'Class_Strongest_Be'), 'Class_AA' (ક્લાઇસ્ટ એક્સ્ટેન્શન = 'Class_Strongest' = 'Class_'), 'Class_'\"\"\"\n",
        "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/154",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"તમને 2 શબ્દો આપવામાં આવે છે. તમારે સાચું પરત કરવાની જરૂર છે જો બીજો શબ્દ અથવા તેના કોઈપણ પરિભ્રમણ પ્રથમ શબ્દમાં સબસ્ટ્રિંગ છે cycpattern_check(\"abcd\",\"abd\") => ખોટો cycpattern_check(\"hello\",\"ell\") => સાચું cycpattern_check(\"whassup\",\"psus\") => ખોટો cycpattern_check\"abab\",\"baa\") => સાચું cycpattern_check\"(\"efef\",\"eeff\") => ખોટો cycpattern_check\"(hims\",\"simen\") => સાચું \"\"\"\n",
        "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/155",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"પૂર્ણાંક આપવામાં આવે છે. એક ટુપલ પરત કરે છે જેમાં અનુક્રમે સમાન અને વિચિત્ર અંકોની સંખ્યા હોય છે. ઉદાહરણઃ પણ_અણુ_ગણતરી(-12) ==> (1, 1) પણ_અણુ_ગણતરી(123) ==> (1, 2) \"\"\"\n",
        "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/156",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"હકારાત્મક પૂર્ણાંક આપવામાં આવે છે, તેના રોમન આંકડાકીય સમકક્ષને શબ્દમાળા તરીકે મેળવો, અને તેને નાનામાં પરત કરો. પ્રતિબંધોઃ 1 <= num <= 1000 ઉદાહરણોઃ >>> int_to_mini_roman ((19) == 'xix' >>> int_to_mini_roman ((152) == 'clii' >>> int_to_mini_roman ((426) == 'cdxxvi' \"\"\"\n",
        "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/157",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''ત્રિકોણની ત્રણ બાજુઓની લંબાઈને જોતાં. જો ત્રણ બાજુઓ એક લંબચોરસ ત્રિકોણ બનાવે છે, તો સાચું પરત કરો, અન્યથા ખોટું. લંબચોરસ ત્રિકોણ એ ત્રિકોણ છે જેમાં એક ખૂણો યોગ્ય ખૂણો અથવા 90 ડિગ્રી છે. ઉદાહરણઃ right_angle_triangle ((3, 4, 5) == True right_angle_triangle ((1, 2, 3) == False '''\n",
        "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/158",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef find_max(words):\n    \"\"\"એક કાર્ય લખો જે શબ્દમાળાઓની સૂચિ સ્વીકારે છે. સૂચિમાં જુદા જુદા શબ્દો છે. મહત્તમ સંખ્યાના અનન્ય અક્ષરો સાથે શબ્દ પરત કરો. જો બહુવિધ શબ્દમાળાઓમાં મહત્તમ સંખ્યાના અનન્ય અક્ષરો હોય, તો તે એક પરત કરો જે લેક્સિકોગ્રાફિકલ ક્રમમાં પ્રથમ આવે છે. શોધ_મહત્તમ (([\"નામ\", \"ની\", \"શબ્દમાળા\"]) == \"શબ્દમાળા\" શોધ_મહત્તમ (([\"નામ\", \"ઇનામ\", \"રમત\"]) == \"ઇનામ\" શોધ_મહત્તમ (([\"aaaaaaa\", \"bb\" , \"cc\"]) == \"\"aaaaaaa\" \"\"\"\n",
        "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/159",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"તમે ભૂખ્યા સસલું છો, અને તમે પહેલાથી જ ચોક્કસ સંખ્યામાં ગાજર ખાઈ લીધા છે, પરંતુ હવે તમારે દિવસના ભોજનને પૂર્ણ કરવા માટે વધુ ગાજર ખાવાની જરૂર છે. તમારે [ખાધા પછી ખાવામાં આવેલા ગાજરની કુલ સંખ્યા, તમારા ભોજન પછી બાકી રહેલા ગાજરની સંખ્યા ] ની એરે પરત કરવી જોઈએ જો ત્યાં પૂરતા બાકીના ગાજર ન હોય, તો તમે બાકીના બધા ગાજર ખાશો, પરંતુ હજી પણ ભૂખ્યા હશો. ઉદાહરણઃ * ખાવું ((5, 6, 10) -> [11, 4] * ખાવું ((4, 8, 9) -> [12, 1] * ખાવું ((1, 10, 10) -> [11, 0] * ખાવું ((2, 11, 5) -> [7, 0] વેરિયેબલ્સઃ @ સંખ્યાઃ તમે ખાઈ લીધેલા ગાજરની સંખ્યા. @ જરૂર છેઃ તમને ખાવાની જરૂર છે તે ગાજરની સંખ્યા. @ બાકીનાઃ શેરોમાં રહેલા ગાજરની સંખ્યા. પ્રતિબંધિતઃ * 0 = <= 0 * 1000 * <= 1000 બાકી રહેલા ગાજરનો નંબર <= 1000 = મજા કરો = 1000:\"\"\"\n",
        "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/160",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"બે યાદીઓ ઓપરેટર અને ઓપરેન્ડ. પ્રથમ યાદીમાં મૂળભૂત બીજગણિત કામગીરી છે, અને બીજી યાદી પૂર્ણાંકની યાદી છે. આ સમીકરણનું મૂલ્યાંકન કરવા માટે બે આપેલ યાદીઓનો ઉપયોગ કરો. મૂળભૂત બીજગણિત કામગીરીઃ ઉમેરો (+) બાદબાકી (-)) ગુણાકાર (*) ફ્લોર ડિવિઝન (//) એક્સપોનન્ટિએશન (**) ઉદાહરણઃ ઓપરેટર['+', '*', '-'] એરે = [2, 3, 4, 5] પરિણામ = 2 + 3 * 4 - 5 => પરિણામ = 9 નોંધઃ ઓપરેટરની સૂચિની લંબાઈ ઓપરેન્ડની સૂચિની લંબાઈ બરાબર છે. ઓપરેન્ડ બિન-નકારાત્મક પૂર્ણાંકની સૂચિ છે. ઓપરેટરની ઓછામાં ઓછી એક ઓપરેટરની સૂચિ છે, અને ઓપરેન્ડની સૂચિમાં ઓછામાં ઓછા બે ઓપરેન્ડ છે. \"\"\"\n",
        "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/161",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef solve(s):\n    \"\"\"તમને એક શબ્દમાળા s આપવામાં આવે છે. જો s[i] એક અક્ષર છે, તો તેના કેસને નીચલાથી ઉપરના અથવા વિપરીતથી ઉલટાવી દો, અન્યથા તેને તે જ રાખો. જો શબ્દમાળામાં કોઈ અક્ષરો ન હોય તો, શબ્દમાળાને ઉલટાવી દો. ફંક્શનને પરિણામી શબ્દમાળા પરત કરવી જોઈએ. ઉદાહરણો solve ((\"1234\") = \"4321\" solve ((\"ab\") = \"AB\" solve ((\"#a@C\") = \"#A@c\" \"\"\"\n",
        "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/162",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"જો 'text' શબ્દમાળા આપવામાં આવે તો, તેની md5 હેશ સમકક્ષ શબ્દમાળા પરત કરો. જો 'text' ખાલી શબ્દમાળા હોય તો, None પરત કરો. >>> string_to_md5('હેલો વર્લ્ડ') == '3e25960a79dbc69b674cd4ec67a72c62' \"\"\"\n",
        "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    },
    {
        "task_id": "HumanEval/163",
        "nl": "guj_Gujr",
        "pl": "python",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"બે હકારાત્મક પૂર્ણાંકો a અને b આપવામાં આવે છે, a અને b વચ્ચેના પણ અંકો, વધતા ક્રમમાં પરત કરો. ઉદાહરણ તરીકેઃ generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] \"\"\"\n",
        "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
        "Unnamed: 6": "",
        "Unnamed: 7": "",
        "Unnamed: 8": ""
    }
]