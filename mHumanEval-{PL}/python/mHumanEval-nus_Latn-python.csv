task_id,nl,pl,prompt,canonical_solution,test,Unnamed: 6,Unnamed: 7,Unnamed: 8
HumanEval/0,nus_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Guic mi̱ rɛy li̱thä nämbäri̱, ɛni̱ nämbäri̱ rɛw tin thia̱k kä rɔ̱ ɛ länykɛ pek in ca ŋun. Cäät: >>> has_close_elements (([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements (([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",,,
HumanEval/1,nus_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """"""Ɛn min la̱tkɛ kä pa̱ŋciin ɛmɛ ɛ min la thärk mi̱ tekɛ gurupni̱ ti̱ ŋuan ti̱ ca rɔ̱ mat gua̱a̱th kɛl. Min görkɛ ɛ ɣöö ba gurupni̱ ti̱ti̱ da̱a̱k kä bi̱ kɛn cu liny. Gurupni̱ tin ca rɔ̱ mat gua̱a̱th kɛl bi̱ kɛ tä kɛ dääk (kä bi̱kɛ rɔ̱ mat gua̱a̱th kɛl) kä /ci̱kɛ bi̱ tä kɛ kam kɛl. /Cu gua̱th mi̱ te thi̱n rɛy thärk in ca thärk läth thi̱n car. Cäät: >>> separate_paren_groups' ((( ) (() (( ) ) ) ) ) ) ' (', '()) ', '(()) ']""""""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",,,
HumanEval/2,nus_Latn,python,"

def truncate_number(number: float) -> float:
    """"""Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔ̱thitib puɔɔmpööni̱, jɛn ba däk piny ɛ la intejer (in intejer in di̱tni̱ jɛn kä kuiy ni̱ jɛn kä nämbär in ca ŋun) kɛnɛ deci̱mal (in te piny kä min ci̱ duɔth ɛ mi̱ kuiy ni̱ jɛn kä 1).""""""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",,,
HumanEval/3,nus_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""Ji̱n ca ji̱ moc kɛ li̱th duŋ depödhi̱öt kɛnɛ min naŋkɛ kä ba̱nk account min bi̱ tok kɛ dhɛrö ba̱li̱dɔ. La̱tdu ɛ ɣöö bi̱ ji̱ ŋa̱c mi̱ te pek in te kä ba̱li̱dɔ kä account piny dhɛrö, kä ɛn guäth ɛmɔ bi̱ pa̱ŋcin dhil loc ni̱ True. Mi̱ /ci̱ ɛ jɛn bɛ loc ni̱ False. Cäät: >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",,,
HumanEval/4,nus_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""Kɛ kui̱ kä min ca ŋun kä min ca la̱th rɛy li̱thä nämbäri̱, kuɛ̈nkɛ Mean Absolute Deviation (mi̱ cɛ thi̱ääk) kä min te kam dataɛtni̱. Mean Absolute Deviation (mi̱ cɛ thi̱ääk) ɛ jɛn in te kam kä tin te kä ɛlɛmɛni̱ kɛnɛ däär (mi̱ cɛ thi̱ääk): MAD = average  x - x_mean  cäät: >>> mean_absolute_deviation () [1.0, 2.0, 3.0, 4.0]) 1.0 """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",,,
HumanEval/5,nus_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """"""Kuɛ la ɣöö ba nämbär mi̱ 'delimɛtɛr' kam kä tin guɔ̱rkɛ rɔ̱ kä ɛlɛmɛni̱ tin te rɛy läätdä in ca la̱th rɛy läätdä `numbers' >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3] """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",,,
HumanEval/6,nus_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """"""Ɛn la̱t ɛmɛ bɛ la̱t kɛ ɣöö bɛ la̱t mi̱ de nyooth ɛ la mi̱ de rɔ lot kɛ buɔ̱n ti̱ ŋuan ti̱ caa da̱a̱k kɛ kam kamni̱kiɛn. Kɛ kui̱ bunä kɛl, bi̱kɛ lɛp ni̱ ciaaŋ kɛ ɣöö bi̱kɛ rɔ̱ mat gua̱a̱th kɛl. C.d. (() (()) bi̱kɛ tekɛ pek mi̱ bäär mi̱ de rɔ mat gua̱a̱th kɛl, kä ((())) bi̱kɛ tekɛ diɔ̱k. >>> parse_nested_parens (('((()) ((())) () ((()) ((()) [2, 3, 1, 3] """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",,,
HumanEval/7,nus_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""Filter ɛ inpuut list duŋ thärkithni̱ kärɔa kɛ kui̱ thärki̱ni̱ tin te thöbthärkith mi̱ ca ŋun >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",,,
HumanEval/8,nus_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""Kɛ kui̱ li̱thä mi̱ ca ŋun kä intejeri̱, locni̱ tuple mi̱ tekɛ mat kɛnɛ min ca nööŋ ɛ intejeri̱ diaal rɛy li̱thä. Kä mat baaŋ bɛ pa̱a̱r kɛ 0 kɛnɛ ɣöö bɛ pa̱a̱r kɛ min ca nööŋ bɛ pa̱a̱r kɛ 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24) """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",,,
HumanEval/9,nus_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """"""Ɛni̱ mi̱ ca ŋun kä li̱th intejeri̱, ba jiek ɛ la li̱th duŋ ro̱liŋ maci̱ma̱k elemɛni̱ tin ca jiek ɛ wä ni̱ kä thaak mi̱ ca ŋun rɛy thi̱kuɛnthi̱. >>> ro̱li̱ŋ_mac (([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",,,
HumanEval/10,nus_Latn,python,"

def is_palindrome(string: str) -> bool:
    """"""jekni palindrɔm min tɔt min tuokɛ rɔ kɛ thärkäl mi ca ŋun. ca̱r algöri̱thi̱m ɛ mi̱ thi̱a̱k: - jekni̱ postfix in bär ni̱ jɛn kä thärkäl mi̱ ca ŋun min ɛ palindrɔm. - matni̱ kä guut thärkäl min te jɔk thärkäl min bi̱ ben ɛ ŋot palindrɔmik thärkäl. >>> make_palindrɔm ((('') ' ' >>> make_palindrɔm ((('cat') 'catac' >>> make_palindrɔm ((('catac') 'catac' """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Thëm mi̱ ca ŋun i̱ ɛ pa̱li̱ndrɔm """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",,,
HumanEval/11,nus_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """"""Input ɛ rɛw ti̱ la̱tkɛ ɛ la 1 kɛnɛ 0 kärɔ̱. La̱t binary XOR kä tin la̱tkɛ ɛ ti̱ti̱ kä bi̱ loc ni̱ min ci̱ ben ɛ la string. >>> string_xor (('010', '110') '100' """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",,,
HumanEval/12,nus_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """"""Mi̱ ci̱ la̱t ɛ wä kä mi̱ bäär, locni̱ mi̱ bäär. Lätni̱ min nhiam mi̱ ci̱ la̱t ɛ wä kä ti̱ ŋuan ti̱ päär bäär. Lätni̱ mi̱ thiɛlɛ mi̱ te thi̱n mi̱ ci̱ la̱t ɛ wä kä mi̱ te thi̱n ɛ /thiɛl mi̱ te thi̱n. >>> mi̱ bäär (longest) (b) (c) (a) (longest) (a) (longest) (a) (longest) (a) (a) (longest) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (a) (b) (b) (b) (b) (b) (b) (b) (b) (b) (b) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c) (c)""""""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",,,
HumanEval/13,nus_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """"""Lɔ̱a̱rkɛ min di̱tni̱ jɛn kä dääkdiɛn kä nämbäri̱ da̱ŋ rɛw a kɛnɛ b >>> min di̱tni̱ jɛn kä dääkdiɛn ((3, 5) 1 >>> min di̱tni̱ jɛn kä dääkdiɛn ((25, 15) 5 """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",,,
HumanEval/14,nus_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """"""Läthni̱ li̱th duŋ prepi̱kdhni̱ diaal kä in tɔt ɛlɔ̱ŋ ɛ wä kä min bäär ɛlɔ̱ŋ kä inpuut string >>> all_prefixes (('abc') ['a', 'ab', 'abc'] """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",,,
HumanEval/15,nus_Latn,python,"

def string_sequence(n: int) -> str:
    """"""Lɔ̱a̱ dɛ ɛ la mi̱ tekɛ nämbäri̱ ti̱ ca lɛy kɛ gua̱a̱thdiɛn ɛ tokɛ kä 0 ɛ wä kä n amääni̱ jɛ. >>> string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5' """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",,,
HumanEval/16,nus_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """"""Mi̱ ca thärkdɛ ŋun, görɛ jɛ i̱ ɛ pek in di̱tni̱jɛn kä bi̱kɛ te thi̱n (/ci̱kɛ bi̱ te gua̱a̱th kɛl) kä bi̱kɛ te thi̱n >>> count_distinct_characters (('xyzXYZ') 3 >>> count_distinct_characters (('Jerry') 4 """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",,,
HumanEval/17,nus_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """"""Input to this function is a string representing musical notes in a special ASCII format. Your is to parse string list of integers corresponding to many beats does. Here is a legend: 'o' note, lasts four beats 'o' dakɛ - half note, lasts two beats dakɛ - quater note, lasts one beat >>> parse_music. 'o' dakɛ . o' dakɛ
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",,,
HumanEval/18,nus_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """"""Jiek pek in derɛ jek ni̱ käth tin te kä thubthtiring rɛy thi̱thtiring in nhiamdiɛn. Kuɛn tin ci̱ rɔ̱ mat gua̱th kɛl. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3 """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",,,
HumanEval/19,nus_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """"""Input ɛ nämbäral-in-thɛrp mi̱ ca gɛɛr ɛ la thi̱thpëth min tokɛ kä 'dhɛrö' ɛ wä kä 'nämbär'. Ca̱a̱p ti̱ gɔw ɛ 'dhɛrö', 'kɛl', 'rɛw', 'rɛw', 'ŋuaan', 'rɛw', 'dath', 'dath bäkɛl', 'bɛk', 'duec' kɛnɛ 'rɛw'. Lɔ̱a̱ thi̱thpëth ɛ mi̱ ca nämbäri̱ da̱a̱k ɛ wä kä tin tɔatni̱kɛn ɛ wä kä tin di̱tdiɛn >>> sort_numbers (('three one five') 'one three five' """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",,,
HumanEval/20,nus_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""Kä li̱ɛt nämbäri̱ tin ca ŋun (ti̱ ci̱ pekdiɛn cop rɛw) kuany kɛnɛ locni̱ rɛw tin thia̱k ɛlɔ̱ŋ kɛ rɔ̱ kä locni̱kɛ kɛ duɔ̱ɔ̱p mi̱ (mi̱ tɔt, mi̱ di̱i̱t). >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements (([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",,,
HumanEval/21,nus_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """"""Mi̱ ca ŋun ɛ la li̱th nämbäri̱ (kɛ ɛlɛmɛni̱ rɛw), la̱thkɛ li̱ni̱e̱e̱r tra̱ni̱thpɔrmɛn kä li̱th ɛmɔ, ce̱tkɛ min bi̱ nämbär in kuiy ni̱ jɛn cua jɛn 0 kɛnɛ min di̱t ni̱ jɛn cua jɛn 1 >>> rescale_to_unit (([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",,,
HumanEval/22,nus_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """"""Filter mi̱ ca ŋun ɛ la mi̱ ca ŋun ɛ la mi̱ tekɛ luɔt kä Python mi̱ tekɛ intejeri̱ kärɔ̱ >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",,,
HumanEval/23,nus_Latn,python,"

def strlen(string: str) -> int:
    """"""Läthdɛ jɔk kä thärkɛn mi̱ ca ŋun >>> strlen('') 0 >>> strlen('abc') 3 """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",,,
HumanEval/24,nus_Latn,python,"

def largest_divisor(n: int) -> int:
    """"""Kɛ nämbär n, jiekɛ nämbär in di̱tni̱jɛn min dääk n ɛ päär, mi̱ kuiy ni̱ jɛn kä n >>> di̱t ni̱ jɛn kä di̱bi̱ciɔn ((15) 5 """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",,,
HumanEval/25,nus_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """"""Mi̱ ci̱ kɔnɛ la̱t kɛ ɣöö ba prɔmithin in di̱tni̱ jɛn kä min kuiy ni̱ jɛn kä min di̱tni̱ jɛn nööŋ, bi̱ prɔmithin in di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn kä min di̱tni̱ jɛn.""""""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",,,
HumanEval/26,nus_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""Ɛni̱ li̱th duŋ intejeri̱, wuɔ̱c ɛlɛmɛni̱ diaal tin ci̱ tuɔɔk kä ti̱ ŋuan kä wɔ̱ ni̱ kä kɛɛl. Kiɛ ba yi̱k ɛlɛmɛni̱ tin ca ba̱ny piny pa̱a̱r kɛ tin ca la̱th thi̱n. >>> remove_duplicates (([1, 2, 3, 2, 4]) [1, 3, 4] """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",,,
HumanEval/27,nus_Latn,python,"

def flip_case(string: str) -> str:
    """"""Kɛ ɣöö ba thärk mi̱ ca ŋun, bi̱ min ca gɔ̱r piny ɛ mi̱ tɔt ɛ nyɔk kɛ luɔc ɛ la min di̱i̱t kɛnɛ min di̱i̱t ɛ la min tɔt. >>> flip_case ((('Hello') 'hELLO' """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",,,
HumanEval/28,nus_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """"""Cäätni̱ tin caa la̱t kä ci̱ kɛn rɔ̱ mat rɛy thi̱ŋdärä kɛl >>> cäätni̱ tin caa la̱t kä ci̱ kɛn rɔ̱ mat rɛy thi̱ŋdärä kɛl (concatenate) ' ' ' >>> cäätni̱ tin caa la̱t kä ci̱ kɛn rɔ̱ mat rɛy thi̱ŋdärä kɛl (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (concatenate) ' (catenate) ' (catenate) ' (catenate) ' (catenate) ' (catenate) ' (catenate) ' (catenate) ') ' (catenate' (catenate) ') ') ') ') 'c'""""""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",,,
HumanEval/29,nus_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""Filter ɛ inpuut list duŋ thärkädni̱ kärɔa kɛ kui̱ tin ci̱ rɔ̱ tok kɛ ɛni̱ prepi̱dh (prefix) mi̱ ca ŋun. >>> filter_by_prefix ((['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",,,
HumanEval/30,nus_Latn,python,"

def get_positive(l: list):
    """"""Lɔ̱a̱ni̱ nämbäri̱ tin te kä puci̱tib rɛy li̱thä kärɔa. >>> get_positive (([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",,,
HumanEval/31,nus_Latn,python,"

def is_prime(n):
    """"""Lɔ̱a̱rkɛ thuɔ̱k mi̱ ca ŋun ɛ nämbär präm, kɛnɛ mi̱ ɛ kac mi̱ dɔ̱ŋ. >>> ɛ präm (prime) (6) kac (false) >>> ɛ präm (prime) (101) thuɔ̱k (true) >>> ɛ präm (prime) (11) thuɔ̱k (true) >>> ɛ präm (prime) (13441) thuɔ̱k (true) >>> ɛ präm (prime) (61) thuɔ̱k (true) >>> ɛ präm (prime) (4) kac (false) >>> ɛ präm (prime) (1) kac (false)""""""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",,,
HumanEval/32,nus_Latn,python,"import math


def poly(xs: list, x: float):
    """"""find_zero find_zero locni̱kɛ ni̱ 0 ɛ la 0 ɛ ni̱ jɛn kärɔa, ɛ cäŋ ni̱ mi̱ tekɛ ti̱ ŋuan. Kä min di̱tni̱ jɛn ɛlɔ̱ŋ, find_zero naŋɛ ni̱ li̱th xs mi̱ tekɛ nämbär mi̱ päär kä köëpi̱ciɛnni̱ kɛnɛ min di̱tni̱ jɛn kä nɔ̱n-zero köëpi̱ciɛn cie min bi̱ jɛ ŋun kɛ riali̱kä. >>> round ((find_zero[1, 2]), 2) # f (((x) = 1 + 2x -0.5 >>> round ((find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6^2 + x^3  1.0""""""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """"""Lätdɛ ɛ la mi̱ tekɛ pöli̱nömial mi̱ tekɛ köëpi̱ciɛni̱ xs kä pɔnt x. läätdɛ ɛ xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",,,
HumanEval/33,nus_Latn,python,"

def sort_third(l: list):
    """"""La̱t ɛmɛ bɛ l a kä bɛ l a loc ɛ la mi̱ ce̱tkɛ l' ɛ päär kɛ l kä indici̱ tin /ca de da̱a̱k ɛ diɔ̱k, kä bi̱ tin te kä indici̱ tin de da̱a̱k ɛ diɔ̱k pa̱a̱r kɛ tin te kä indici̱ tin päär kɛ l, duŋni̱ ɣöö ba kɛ riali̱kä. >>> sort_third (([1, 2, 3]) [1, 2, 3] >>> sort_third (([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",,,
HumanEval/34,nus_Latn,python,"

def unique(l: list):
    """"""Lɔ̱a̱rkɛ ɛlɛmɛni̱ tin ca da̱a̱k rɛy li̱thä >>> unique (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123] """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",,,
HumanEval/35,nus_Latn,python,"

def max_element(l: list):
    """"""Lɔ̱a̱r ɛlɛmɛni̱ tin di̱t rɛy li̱thä. >>> max_element (([1, 2, 3]) 3 >>> max_element (([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) 123 """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",,,
HumanEval/36,nus_Latn,python,"

def fizz_buzz(n: int):
    """"""Lɔ̱a̱ nämbär kä gua̱th in ci̱ di̱jit 7 jɔɔc thi̱n rɛy intejeri̱ tin kuiyni̱kɛn kä n tin de da̱a̱k ɛ 11 kiɛ 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3 """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",,,
HumanEval/37,nus_Latn,python,"

def sort_even(l: list):
    """"""Ɛn pa̱ŋciin ɛmɛ naŋɛ li̱th l kä locni̱ li̱th l' mi̱ ce̱tkɛ i̱l' päärɛ kɛ l kä indi̱ci̱ni̱ tin /ci̱ tɔ̱ a kɛl, kä bi̱ tin te kä indi̱ci̱ni̱ tɔ̱tɔ̱ päär kɛ tin te kä indi̱ci̱ni̱ tɔ̱tɔ̱, duŋni̱ ɣöö ba kɛ da̱a̱k. >>> sort_even (([1, 2, 3]) [1, 2, 3] >>> sort_even (([5, 6, 3, 4]) [3, 6, 5, 4] """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",,,
HumanEval/38,nus_Latn,python,"

def encode_cyclic(s: str):
    """"""la̱thkɛ ɛ la inpuot thärkɛn mi̱ ca kɔnkɔd kɛ encode_cyclic. La lockɛ thärkɛn mi̱ ca kɔnkɔd.""""""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""la lockɛ ni̱ kä tin ca gɔ̱a̱r piny ɛ la bun ti̱ ŋuan ti̱ tä kɛ kɛ̈kɛrpɛ̈ɛ̈k.""""""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",,,
HumanEval/39,nus_Latn,python,"

def prime_fib(n: int):
    """"""prime_fib locni̱ nämbär n-th min la nämbär Pi̱i̱bɔnacci̱ kä jɛn bä ɛ praam. >>> prime_fib ((1) 2 >>> prime_fib ((2) 3 >>> prime_fib ((3) 5 >>> prime_fib ((4) 13 >>> prime_fib ((5) 89 """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",,,
HumanEval/40,nus_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""triples_sum_to_zero la̱thɛ ni̱ li̱th intejeri̱ ɛ la mi̱ ca mat thi̱n. jɛn bɛ loc ni̱ thuɔ̱k mi̱ tëë kɛ ɛlɛmɛni̱ da̱ŋ diɔ̱k ti̱ gööl rɛy li̱thä min bi̱ pekdiɛn kulɛ la dhɛrö, kɛnɛ ɣöö bɛ loc ni̱ mi̱ /ci̱ mɔ a thuɔ̱k. >>> triples_sum_to_zero (([1, 3, -2, 1]) False >>> triples_sum_to_zero (([1, 3, -2, 1]) True >>> triples_sum_to_zero (([1, 2, 3, 7]) False >>> triples_sum_to_zero (([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero[1]) False """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",,,
HumanEval/41,nus_Latn,python,"

def car_race_collision(n: int):
    """"""Ɛn duɔ̱ɔ̱p in laa jälɛ ɛ mi̱ tä kɛ dup ti̱ cuŋ ɛ /thiɛl pek. Ɛn duɔ̱ɔ̱p in jäl kɛ naath ɛ mi̱ tä kɛ thurbiɛli̱ ti̱ ŋuan ti̱ jäl kɛ kui̱c caam kɛnɛ kui̱c cuëëc. Kä ɛn duɔ̱ɔ̱p in jäl kɛ naath ɛ mi̱ tä kɛ thurbiɛli̱ ti̱ ŋuan ti̱ jäl kɛ kui̱c cuëëc. Kɛn thurbiɛli̱ da̱ŋ rɛw ti̱ tä kamdiɛn gua̱ckɛ ɛlɔ̱ŋ. Kɛn thurbiɛli̱ diaal jälkɛ kɛ pɛ̈th mi̱ päär. Kɛn thurbiɛli̱ da̱ŋ rɛw tɔ̱tɔ̱ la̱tkɛ kɛ ɣöö bi̱kɛ wɔ̱ kɛ tɛ̈th piny mi̱ jälɛ ni̱ kui̱c caam kä bɛ ku lɛ wɔ̱ kɛ thurbiɛli̱ mi̱ jälɛ kui̱c cuëëc kä bɛ wä ni̱ kui̱c caam. Kä min la no̱o̱ŋɛ, ɛ ɣöö bi̱kɛ wɔ̱ ni̱ kɛ tɛ̈th piny kä bi̱kɛ wɔ̱ ni̱ ni̱ kɛ tɛ̈th piny.""""""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",,,
HumanEval/42,nus_Latn,python,"

def incr_list(l: list):
    """"""Lëëd mi̱ loc rɔ kɛ ɛlɛmɛni̱ tin ca rëp ɛ 1. >>> incr_list (([1, 2, 3]) [2, 3, 4] >>> incr_list (([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",,,
HumanEval/43,nus_Latn,python,"

def pairs_sum_to_zero(l):
    """"""pairs_sum_to_zero la̱thɛ ni̱ li̱th intejeri̱ ɛ la mi̱ ca mat thi̱n. jɛn bɛ loc ni̱ thuɔ̱k mi̱ tëë kɛ rɛw ti̱ gööl rɛy li̱thä min bi̱ kulɛ mat ɛ la dhɛrö, kɛnɛ False mi̱ dɔ̱ŋ. >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 3, -2, 1]) False >>> pairs_sum_to_zero (([1, 2, 3, 7]) False >>> pairs_sum_to_zero (([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero[1]) False """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",,,
HumanEval/44,nus_Latn,python,"

def change_base(x: int, base: int):
    """"""Gɛɛr nämerikal baath duŋ inpuɔɔ nämbär x kä baath. locni̱ kä min ca nyoth ɛ la thärkäl kɛ kɔr kä mi̱ ca loc. baath nämbäri̱ ɛ kuiy ni̱ kä 10. >>> gɛr_baath (), 3) '22' >>> gɛr_baath (), 2) '1000' >>> gɛr_baath (), 2) '111' """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",,,
HumanEval/45,nus_Latn,python,"

def triangle_area(a, h):
    """"""Mi̱ ca ŋun ɛ la bäär gua̱a̱th in bi̱ ben kɛ jɔk kɛnɛ gua̱a̱th in bi̱ locni̱kɛ rɔ̱ thi̱n kɛ kui̱ kä triangle. >>> triangle_area ((5, 3) 7.5 """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",,,
HumanEval/46,nus_Latn,python,"

def fib4(n: int):
    """"""Ɛn Fib4 ɛ mi̱ cäät kɛ min caa la̱t ɛ Fibbonacci, mi̱ caa ŋa̱c ɛ la: fib4 ((0) -> 0 ((1) -> 0 ((2) -> 2 ((3) -> 0 ((n) -> fib4 ((1)) + fib4 ((2) + fib4 ((3) + fib4 ((4). Gɔ̱r ni̱ pa̱ŋciin mi̱ bi̱ pek in ca ŋun kä nämbär in la̱tkɛ ɛ fib4 kulɛ ŋa̱c. /Cu lät kɛ mi̱ loc rɔ. >>> fib4 ((5) 4 >>> fib4 ((6) >>> 8 fib4 ((7) 14 """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",,,
HumanEval/47,nus_Latn,python,"

def median(l: list):
    """"""Lätni̱ tin la̱tkɛ rɛy läätdä ɛlɛmɛni̱ rɛy li̱thä l. >>> mediaan (([3, 1, 2, 4, 5]) 3 >>> mediaan (([-10, 4, 6, 1000, 10, 20]) 15.0 """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",,,
HumanEval/48,nus_Latn,python,"

def is_palindrome(text: str):
    """"""Guic mi ca ŋun ɛ pa̱lindrɔmi̱ >>> ɛ_pa̱lindrɔmi̱ (('') Truɔ >>> ɛ_pa̱lindrɔmi̱ (('aba') Truɔ >>> ɛ_pa̱lindrɔmi̱ (('aaaaa') Truɔ >>> ɛ_pa̱lindrɔmi̱ (('zbcd') Ji̱ääk """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",,,
HumanEval/49,nus_Latn,python,"

def modp(n: int, p: int):
    """"""Lɔ̱a̱ 2^n modulo p (ŋi̱i̱c kɛ nämerikni̱). >>> modp(3, 5) 3 >>> modp(1101, 101) 2 >>> modp(0, 101) 1 >>> modp(3, 11) 8 >>> modp(100, 101) 1 """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",,,
HumanEval/50,nus_Latn,python,"

def encode_shift(s: str):
    """"""la̱thkɛ ɛ la inpuot thärkɛn mi̱ ca kɔnkɔd kɛ ɛncode_shift pa̱ŋciin. La lockɛ thärkɛn mi̱ ca kɔnkɔddɛ kɔn kɔd.""""""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""la lockɛ ni̱ kä tin ca gɔ̱r ɛ la nyin i̱thkuɛrɛn ɛ la tin ca gɛr ɛ 5 rɛy ali̱pëthɛ.""""""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",,,
HumanEval/51,nus_Latn,python,"

def remove_vowels(text):
    """"""remove_vowels ɛ la̱t mi naŋkɛ thärk kä loc thärk mi thiɛl wäl. >>> remove_vowels ((') ' ' >>> remove_vowels ((') 'abcdef\nghijklm') 'bcdf\nghjklm' >>> remove_vowels ((') 'abcdef') 'bcdf' >>> remove_vowels ((') 'aaaaa') ' ' >>> remove_vowels ((') 'aaBAA') 'B' >>> remove_vowels ((') 'zbcd') 'zbcd' """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",,,
HumanEval/52,nus_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Lɔ̱a̱rkɛ thuɔ̱k mi̱ ci̱ nämbäri̱ diaal rɛy li̱thä l te piny kä thärkäl t. >>> piny_thärkäl (([1, 2, 4, 10], 100) thuɔ̱k >>> piny_thärkäl (([1, 20, 4, 10], 5) kac """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",,,
HumanEval/53,nus_Latn,python,"

def add(x: int, y: int):
    """"""Mat nämbäri̱ rɛw x kɛnɛ y >>> matkɛ ((2, 3) 5 >>> matkɛ ((5, 7) 12 """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",,,
HumanEval/54,nus_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""Guic mi̱ kɛn rie̱e̱t da̱ŋ rɛw tekɛ kɛ karkɛtɛri̱ ti̱ cäät. >>> same_chars (('eabcdzzzz', 'dddzzzzzzdeddabc') True >>> same_chars (('abcd', 'dddddddabc') True >>> same_chars (('dddddddabc', 'abcd') True >>> same_chars (('eabcd', 'dddddddddabc') False >>> same_chars (('abcd', 'dddddddabddce') False >>> same_chars (('eabcdzzzz', 'dddzzzzzzdddabc') False """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",,,
HumanEval/55,nus_Latn,python,"

def fib(n: int):
    """"""Lɔ̱a̱ tɛ nämbärä Fibönatci in n-diɛn. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",,,
HumanEval/56,nus_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket ɛ mi̱ la ""<"" kɛnɛ "">"". return True mi̱ ci̱kɛl kɛpiny ɛ la bracket mi̱ lot rɔ kɛ jɛ. >>> correct_bracketing(""<"") False >>> correct_bracketing(""<>"") True >>> correct_bracketing(""<><>"") True >>> correct_bracketing(""><<>"") False """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",,,
HumanEval/57,nus_Latn,python,"

def monotonic(l: list):
    """"""Lɔ̱a̱rkɛ thuɔ̱k ɛni̱ mi̱ ɛlɛmɛni̱ li̱thä kɛn bi̱kɛ rɔ̱ rep kiɛ bi̱kɛ rɔ̱ rep kɛ duɔ̱ɔ̱p mi̱ cäät. >>> cäät (([1, 2, 4, 20]) thuɔ̱k >>> cäät (([1, 20, 4, 10]) kac >>> cäät (([4, 1, 0, -10]) thuɔ̱k """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",,,
HumanEval/58,nus_Latn,python,"

def common(l1: list, l2: list):
    """"""Lɔ̱a̱rkɛ ti̱ ca da̱a̱k ti̱ cäät kä ti̱ ca da̱a̱k kä li̱thti̱ni̱ rɛw. >>> cäät (([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] >>> cäät (([5, 3, 2, 8], [3, 2]) [2, 3] """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",,,
HumanEval/59,nus_Latn,python,"

def largest_prime_factor(n: int):
    """"""Lɔ̱a̱rkɛ min di̱tni̱ jɛn kä prɔmith in la pi̱raam kä n. Ɣɔɔrɛ n > 1 kä /ci̱kɛ prɔmith. >>> largest_prime_factor ((13195) 29 >>> largest_prime_factor ((2048) 2 """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",,,
HumanEval/60,nus_Latn,python,"

def sum_to_n(n: int):
    """"""sum_to_n ɛ pa̱ŋcin mi̱ la mat nämbäri̱ 1 ɛ wä kä n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",,,
HumanEval/61,nus_Latn,python,"

def correct_bracketing(brackets: str):
    """"""bracket ɛ mi̱ la ""("" kɛnɛ "")"". return True mi̱ ci̱kɛl bracket in la̱tkɛ kɛ thok te kɛ bracket in la̱tkɛ kɛ thok. >>> correct_bracketing(""("") False >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing(""() True >>> correct_bracketing("") False """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",,,
HumanEval/62,nus_Latn,python,"

def derivative(xs: list):
    """"""xs ɛ mi̱ nyooth pörɛciɔn duŋ pöli̱nömial. xs[0] + xs[1] * x + xs[2] * x^2 + .... locni̱ deri̱ba̱ti̱ duŋ pöli̱nömial ɛmɛ rɛy puɔ̱p mi̱ päär. >>> deri̱ba̱ti̱ (([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> deri̱ba̱ti̱ ([1, 2, 3]) [2, 6] """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",,,
HumanEval/63,nus_Latn,python,"

def fibfib(n: int):
    """"""Kä FibFib nämbär thekuɛnthi̱ ɛ thekuɛnthi̱ mi̱ cäät kɛ Fibbonacci thekuɛnthi̱ min ca lat i̱: fibfib ((0) == 0 fibfib ((1) == 0 fibfib ((2) == 1 fibfib ((n) == fib ((n-1) + fibfib ((n-2) + fibfib ((n-3). Gɔ̱r pa̱ŋciin kɛ ɣöö ba pek in ca ŋun kä n-th ɛlɛmɛɛn duŋ fibfib nämbär thekuɛnthi̱. >>> fibfib ((1) 0 >>> fib ((5) 4 >>> fib ((8) 24 """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",,,
HumanEval/64,nus_Latn,python,"
FIX = """"""Gɔ̱r la̱t mi̱ cɔali̱ vowels_count min naŋkɛ rieet ti̱ ŋuan kä bi̱kɛ lɛ loc ɛ la nämbär mi̱ nyooth rieet ti̱ ŋuan. Rieet ti̱ te rɛy rieetni̱ ti̱ti̱ kɛ 'a', 'e', 'i', 'o', 'u'. Ɛn 'y' ɛ jɛn rieet in jɔc, duŋdɛ ɣöö jɛn la jɔcɛ ni̱ riet in ca ŋun. Cäät: >>> vowels_count ((""abcde"") 2 >>> vowels_count ((""ACEDY"") 3 """"""

def vowels_count(s):
    """"""Matni̱ ti̱ ŋuan ti̱ ca ɣɔ̱n.""""""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/65,nus_Latn,python,"
def circular_shift(x, shift):
    """"""Ciɛrkäli̱ cɛ di̱jitni̱ intejeri̱ x gɛr, cɛ di̱jitni̱ gɛr kui̱c ɛ la gɛr kä cuɛ luɔc ɛ la thärk. Mi̱ ci̱ gɛr > nämbär di̱jitni̱, cuɛ di̱jitni̱ loc ɛ la gɛrkɛ. >>> circular_shift ((12, 1) ""21"" >>> circular_shift ((12, 2) ""12"" """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/66,nus_Latn,python,"
def digitSum(s):
    """"""Lät gɔ̱rä pa̱ŋciin min naŋkɛ thärk ɛ la mi̱ ca la̱th kä bɛ loc ni̱ min ca mat kä ta̱a̱ in ca gɔ̱r thi̱n ɛ la ASCII kɔdni̱. Cäätni̱: digitSum ((("""") => 0 digitSum ((""abAB"") => 131 digitSum ((""abcCd"") => 67 digitSum (((""helloE"") => 69 digitSum (((""woArBld"") => 131 digitSum (((""aAaaaXa"") => 153 """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",,,
HumanEval/67,nus_Latn,python,"
def fruit_distribution(s,n):
    """"""Rɛy la̱t ɛmɛ, ba ji̱ ka̱m bi̱lɛ̈n mi̱ nyooth nämbär duŋ tuɔmni̱ kɛnɛ thärkithni̱ tin caa da̱a̱k rɛy thärkä dɛw kä thärkith ɛmɛ tëkɛ tuɔmni̱, thärkithni̱, kɛnɛ dɛw mango. Mi̱ ca thärkith ŋun min nyooth nämbär kɛɛliw duŋ tuɔmni̱ kɛnɛ thärkithni̱ kɛnɛ intejer min nyooth nämbär kɛɛliw duŋ dɛw rɛy thärkithä locni̱ nämbär duŋ dɛw mango rɛy thärkithä. cäät: dɛw_da̱a̱k ""5(tuɔmni̱ kɛnɛ 6 thärkithni̱"", 19) -> 19 - 5 - 6 = 8 dɛw_da̱a̱k""0 tuɔmni̱ kɛnɛ 1 thärkith"", 3) -> 3 - 0 - 1 = 2 dɛw_da̱a̱k""2 thärkithni̱ kɛnɛ 3 thärkithni̱"", 100) -> 100 - 2 - 3 = 95 dɛw_da̱a̱k""100 tuɔmni̱ kɛnɛ 1 thärkithni̱"", 1 -> 120 - 100 - 1 = 19 """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",,,
HumanEval/68,nus_Latn,python,"
def pluck(arr):
    """"""Mi̱ ca mat kä arrɛy mi̱ cuŋ kɛ kui̱ karä mi̱ tekɛ nämbäri̱ ti̱ /ci̱ tɔ̱ a nämbäri̱, bi̱ la̱tdu ɛ ɣöö bi̱ kɛ wɔ̱ kä kɛl kä nämbäri̱ kä bi̱ kɛ wɔ̱ liny. Kä nämbäri̱ tin ca mat bi̱ kɛ wɔ̱ kä nämbäri̱ tin tɔ̱tɔ̱. Mi̱ ca nämbäri̱ ti̱ ŋuan ti̱ tɔ̱tɔ̱ jek bi̱ kɛ wɔ̱ kä nämbäri̱ tin tɔ̱tɔ̱. Kä nämbäri̱ tin ca mat bi̱ kɛ wɔ̱ liny rɛy li̱thä, [thmalest_value, its index] Mi̱ thiɛlɛ nämbäri̱ ti̱ tɔ̱tɔ̱ kiɛ arrɛy mi̱ ca ŋun, bi̱ wɔ̱ kä []. Cäät: 1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Cäät 2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest even index. Cäät 3: Input: [1,2,3] Input: [2, 3] Input: [2, 1], Output: [2, 3] Explanation: 2 has the smallest even, and 0""""""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",,,
HumanEval/69,nus_Latn,python,"
def search(lst):
    '''Mi̱ ca ji̱ ka̱m li̱th mi̱ /ci̱ mɔ a puɔthtip intejeri̱, bi̱ yi̱k ni̱ intejeri̱ tin di̱t ni̱ kɛn kä dhɛrö, kä bi̱ kɛn tekɛ pi̱rɛkcin mi̱ di̱t ni̱ jɛn kiɛ päär kɛ pek intejeri̱ kärɔ̱. Pi̱rɛkcin intejeri̱ ɛ nämbär in ci̱ jɔɔc rɛy li̱thä. Mi̱ thiɛlɛ mi̱ ce̱tkɛ mi̱ te thi̱n, bi̱ yi̱k -1.'''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",,,
HumanEval/70,nus_Latn,python,"
def strange_sort_list(lst):
    '''Mi̱ ca ji̱ ka̱m li̱th intejeri̱, bi̱ kɛnɛ loc ɛ la li̱th rɛy thi̱rkuɛr mi̱ /ci̱ mɔ a duŋdɛ. Thɔ̱rki̱ni̱ min /ci̱ mɔ a duŋdɛ, ɛ mi̱ bi̱ ji̱ tok kɛ mi̱ ci̱ pek in tɔt kä intjeri̱, kä min di̱tni̱ jɛn kä min ci̱ duɔth, kä min tɔt kä min tɔt. Cäätni̱: strange_sort_list (([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list (([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list (([]) == [] '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/71,nus_Latn,python,"
def triangle_area(a, b, c):
    '''Mi̱ ca pekni̱ gua̱th da̱ŋ diɔ̱k tin te kui̱c kä diɔ̱k ŋun kä diɔ̱k. Luɔ̱c gua̱th diɔ̱k ŋun ɛ la 2 decimal points mi̱ ci̱ gua̱th da̱ŋ diɔ̱k ŋun ɛ la diɔ̱k ŋun. Mi̱ /ci̱ mɔ a jɛn, luɔ̱c -1 Diɔ̱k ti̱n te kui̱c kä diɔ̱k ŋun ɛ la diɔ̱k ŋun mi̱ ci̱ pekdiɛn di̱t ni̱ jɛn kä diɔ̱kdiɛn. Cäät: diɔ̱k ŋun_area (cäät: 3, 4, 5) == 6.00 diɔ̱k ŋun_area (cäät: 1, 2, 10) == -1 '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",,,
HumanEval/72,nus_Latn,python,"
def will_it_fly(q,w):
    '''Cäätdɛ: bi_ɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_lɛ_'''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",,,
HumanEval/73,nus_Latn,python,"
def smallest_change(arr):
    """"""Mi ca ji̱ moc array mi̱ tä kɛ intejeri̱, görɛ ɣöö bi̱ pek elɛmɛni̱ tin go̱o̱r ɣöö ba gɛr kɛ ɣöö bi̱ array ɛmɔ kulɛ la palindrɔmik. Palindrɔmik array ɛ array mi̱ la kuɛnkɛ ni̱ duɔ̱ɔ̱r mi̱ päär jɔk kɛnɛ nhiam. Kä kɛ duɔ̱ɔ̱p kɛl, deri̱ elɛmɛni̱ diaal gɛr kɛ ɣöö bi̱ kɛ kuɛn ɛ la ti̱ gööl. Cäät: smallest_change (([1,2,3,5,4,7,9,6]) == 4 smallest_change (([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change (([1, 2, 3, 2, 1]) == 0 """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",,,
HumanEval/74,nus_Latn,python,"
def total_match(lst1, lst2):
    '''Lätni̱ mi̱ la̱tkɛ kä li̱th rɛw kä bi̱ li̱th in tekɛ kuën ti̱ ŋuan ti̱ kuiy kä li̱th in dɔ̱ŋ loc. mi̱ ci̱ li̱th da̱ŋ rɛw tekɛ kɛ kuën ti̱ päär, bi̱ li̱th in nhiam loc. Cäätni̱ total_match (([], []) â -> [] total_match ((['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi'] total_match ((['hi', 'admin'], ['hi', 'admin', 'project']) â -> ['hi', 'admin'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi', 'hi'] total_match ((['hi', 'admin'], ['hi', 'hi', 'hi']) â -> ['hi', 'hi', 'hi'] total_match ((['4', ['1', '2', '3', '4', '5', [' 4]) -> '4' ]]'''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",,,
HumanEval/75,nus_Latn,python,"
def is_multiply_prime(a):
    """"""Gɔ̱r ni̱ pa̱ŋciin mi̱ loc ni̱ thuɔ̱k mi̱ ca ŋun kä nämbär in ca ŋun ɛ la mälti̱pli̱kaciɔn duŋ nämbäri̱ pri̱i̱m 3 kä mi̱ /ci̱ mɔ ɛ thuɔ̱k. Ŋäc ni̱ ɣöö (a) ɛ kuiy ni̱ jɛn kä 100. Cäät: ɛ_mälti̱pli̱_pri̱i̱m ((30) == thuɔ̱k 30 = 2 * 3 * 5 """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",,,
HumanEval/76,nus_Latn,python,"
def is_simple_power(x, n):
    """"""La̱tdu ɛ ɣöö bi̱ la̱t mi̱ locrɔ ɛ thuɔ̱k mi̱ ca nämbär x ɛ mi̱ thi̱a̱k kä buɔ̱m duŋ n kɛnɛ kac rɛy kä tin kɔ̱kiɛn. x ɛ mi̱ thi̱a̱k kä buɔ̱m duŋ n mi̱ n**int=x Cäät: ɛ_thimpɛl_puɔ̱r (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n) (n)""""""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/77,nus_Latn,python,"
def iscube(a):
    '''Gɔ̱r ni̱ pa̱ŋciin mi̱ naŋ intejer a kä loc ni̱ thuɔ̱k mi̱ jɛn intejer ɛ kuub duŋ intejer nämbäri̱. Nöth: deri̱ jɛ naŋ i̱ min ca la̱th thi̱n ɛ la mi̱ cuŋ ni̱ ciaaŋ. Cäätni̱: i̱thkube ((1) ==> I̱thkube ((2) ==> I̱thkube mi̱ kac ((-1) ==> I̱thkube min thuɔ̱k ((64) ==> I̱thkube min thuɔ̱k ((0) ==> I̱thkube min thuɔ̱k ((180) ==> I̱thkube min kac '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",,,
HumanEval/78,nus_Latn,python,"
def hex_key(num):
    """"""Mi̱ ci̱i̱ mi̱ bi̱ lätdɛ la̱t, bi̱ kɛ kuɛn ɛ la mi̱ bi̱ nämbäri̱ ɛ la he̱kdha̱cimal nämbäri̱ ti̱ ŋuan ti̱ bi̱ kɛ kuɛn ɛ la praam nämbäri̱. Kä nämbäri̱ ɛ la praam nämbäri̱ tin di̱t ni̱ jɛn kä 1 tin /ci̱ la̱tdiɛn la̱t ɛ nämbäri̱ tin tɔatni̱ da̱ŋ rɛw. Kä nämbäri̱ ɛ la 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Kä nämbäri̱ praam ɛ 2, 3, 5, 7, 11, 13, 17,... Kä bi̱ kɛ kuɛn ɛ la nämbäri̱ ti̱ ti̱: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13).""""""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",,,
HumanEval/79,nus_Latn,python,"
def decimal_to_binary(decimal):
    """"""Ba ji̱ ka̱m nämbär rɛy de̱ci̱mal puɔrmat kä ba̱ldu ɛ ɣöö bi̱ jɛ loc kä bainäri̱ puɔrmat. Ba pa̱ŋciin locni̱ kä thi̱rɛnd, kɛ ta̱a̱ in nyothkɛ ni̱ nämbär bainäri̱. Bi̱ ta̱a̱ in te thi̱rɛnd ɛ '0' kiɛ '1'. Bi̱ tekɛ ti̱ ŋuan ti̱ ba̱lkɛ kä thi̱rɛnd 'db' kä tukdɛ kɛnɛ guutdɛ. Bi̱ ta̱a̱ in ba̱lkɛ thi̱n tekɛ kɛ ɣöö ba ji̱ luäk kɛ puɔrmat. Cäätni̱: de̱ci̱mal_to_binary ((15) # luɔ̱c ""db1111db"" de̱ci̱mal_to_binary32) # luɔ̱c ""db100000db""""""""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/80,nus_Latn,python,"
def is_happy(s):
    """"""Ji̱n ca ji̱ moc string s. La̱tdu ɛ ɣöö bi̱ ji̱n ɛ kuɛn i̱ string ɛ mi̱ tekɛ tɛ̈th lɔaac kiɛ /ci̱ɛ jɛn. string ɛ mi̱ tekɛ tɛ̈th lɔaac mi̱ bäärɛ ni̱ kä 3 kä kɛn warɛgakni̱ diaal tin guɔ̱rkɛ rɔ̱ tekɛ dääk cäät: ɛ_happy (a) => False ɛ_happy (aa) => False ɛ_happy (abcd) => True ɛ_happy (aabb) => False ɛ_happy (adb) => True ɛ_happy (xyy) => False """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",,,
HumanEval/81,nus_Latn,python,"
def numerical_letter_grade(grades):
    """"""Ɛ jɛn juɔk in jɔak kä thɛmthɛdär kä ŋi̱i̱c bɛ ji̱ duëël gɔ̱rä ka̱m pek in bi̱ kɛn ɛ kulɛ ka̱m ji̱ duëël gɔ̱rä. Ŋi̱i̱cdɛ min la̱tkɛ ɛ ŋi̱i̱c ɛ ɣöö cɛ duɔ̱ɔ̱r mi̱ caa lɛl kɛ kui̱i̱dɛ kulɛ bath. Jɛn cɛ ji̱ ka̱m li̱th mi̱ nyooth pek in bi̱ ji̱ duëël gɔ̱rä ɛ naŋ kɛ kä bi̱ ji̱n ɛ gɔ̱r kɛ ɣöö bi̱ pek in bi̱ ji̱ duëël gɔ̱rä ɛ naŋ kɛ jɛ kulɛ ji̱n ɛ naŋ kɛ kä bi̱ ji̱n ɛ gɔ̱r kɛ ta̱a̱ in guur kɛ ji̱: GPA. Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B- > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E: grade_equation (([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']""""""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/82,nus_Latn,python,"
def prime_length(string):
    """"""Gɔ̱r ni̱ pa̱ŋciin mi̱ naŋkɛ thärkdɛ kä bɛ loc ni̱ thuɔ̱k mi̱ ci̱ thärkdɛ ɛ mi̱ la praam nämbär kiɛ mi̱ /ci̱ mɔ a thuɔ̱k mi̱ dɔ̱ŋ cäätni̱ prime_length (('Hello') == True prime_length (('abcdcba') == True prime_length (('kittens') == True prime_length (('orange') == False """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",,,
HumanEval/83,nus_Latn,python,"
def starts_one_ends(n):
    """"""Mi̱ ca ŋun ɛ la mi̱ tekɛ puɔthitib intejiɛr n, locni̱ nämbäri̱ nyin n-dhi̱jit puɔthitib intejiɛri̱ tin bi̱ tuɔk kiɛ bi̱ thuɔ̱k kɛ 1.""""""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/84,nus_Latn,python,"
def solve(N):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ puɔ̱thitib intejer N, locni̱ dääkɛ di̱ji̱tni̱kɛ rɛy bainäri̱. Cäät kɛ kui̱ N = 1000, dääkɛ di̱ji̱tni̱ bɛ a 1 kä min ba naŋ raar bɛ a ""1"". kɛ kui̱ N = 150, dääkɛ di̱ji̱tni̱ bɛ a 6 kä min ba naŋ raar bɛ a ""110"". kɛ kui̱ N = 147, dääkɛ di̱ji̱tni̱ bɛ a 12 kä min ba naŋ raar bɛ a ""1100"".""""""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",,,
HumanEval/85,nus_Latn,python,"
def add(lst):
    """"""Mi̱ ca ŋun ɛ la mi̱ /ci̱ te baaŋ kä intɛrjɛr lst, matni̱ ɛlɛmɛni̱ tin te pa̱r kä tekɛ ɛni̱ indi̱dhi̱thni̱ ti̱ /ci̱ tɔt. cäätni̱: mat (([4, 2, 6, 7]) ==> 2 """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",,,
HumanEval/86,nus_Latn,python,"
def anti_shuffle(s):
    """"""Gɔ̱r ni̱ pa̱ŋciin mi̱ naŋkɛ thärkdɛ kä bɛ locni̱ min ca riali̱kä. Thärkdɛ min ca riali̱kä, ɛ thärk mi̱ te rieet diaal thi̱n (mi̱ ca da̱a̱k ɛ kam) kɛ ɣöö ba kɛ ri̱i̱t ɛ rieet mi̱ pay tuɔɔk mi̱ te kɛn diaal kɛ gua̱a̱th mi̱ ci̱ rɔ räth thi̱n kɛ ɣöö ba luɔtdiɛn kulɛ jiek. Noth: Ji̱n bi̱ yi̱k riali̱kä rieetni̱ kɛnɛ kamni̱ tin te jɔ̱ɔ̱r rɛy thäntɛ̈ɛ̈l. Cäät: anti_shuffle ((('Hi') locni̱ 'Hi' anti_shuffle (('hello') locni̱ 'ehllo' anti_shuffle (('Hello World!!!') locni̱ 'Hello !!!Wdlor' """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/87,nus_Latn,python,"
def get_row(lst, x):
    """"""Mi̱ ca ji̱ ka̱m data mi̱ tekɛ dääkni̱ rɛw, cetkɛ lista̱ tin ca mat, min cäät kɛ matrik, duŋdɛ ɣöö, /ci̱ ta̱a̱ matrikni̱, bi̱kɛ tekɛ nämbär mi̱ göl kä kɔlömni̱. Mi̱ ca lst, kɛnɛ intejer x, go̱ri̱ intejeri̱ x rɛy li̱thä, kɛnɛ locni̱ li̱th duŋ tupul, [(x1, y1), (x2, y2) ...] ɛ la ɣöö bi̱ tupul ɛ kɔndi̱rët - (row, columns), tokɛ kɛ 0. Cɔali̱ kɔrdi̱nɛti̱ kɛ nhiam ɛ la rɔɔmni̱ kɛ rɔɔmni̱ kɛ rɔɔmni̱ kɛ rɔɔmni̱ kɛ rɔɔmni̱ kɛ rɔɔmni̱ kɛ rɔɔmni̱. Cäätni̱: get_row [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1], 1) == [0,0, 0], (1, 4), 0 (2, 5), (2, 0] get_(1), 1) [] ==_row [1, 2], [2, 3], [2, 2]""""""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/88,nus_Latn,python,"
def sort_array(array):
    """"""Mi ca ji̱ moc nämbäri ti /ci̱ kɛn negative, loc ni̱ nämbäri tin ca ŋun kä nämbäri tin ca ŋun kɛ kɔr kä mi ci̱ kɛ da̱a̱k, bi̱ kɛ da̱a̱k kɛ duɔ̱ɔ̱p mi̱ wä nhial mi̱ ci̱ matdiɛn (kä index in nhiam, kä index in jɔak) ɛ mi̱ /ci̱ mɔ a kɛl, kiɛ bi̱ kɛ da̱a̱k kɛ duɔ̱ɔ̱p mi̱ wä piny mi̱ ci̱ matdiɛn (kä index in nhiam, kä index in jɔak) ɛ mat.""""""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",,,
HumanEval/89,nus_Latn,python,"
def encrypt(s):
    """"""Lätdɛ kɛ encrypt mi̱ naŋɛ string ɛ la argumɛn kä bɛ cu loc ni̱ string mi̱ ca enkript kä ba alphabeth loc. Alphabeth ba loc kɛ duɔ̱ɔ̱p mi̱ bi̱ lɛ̈ɛ̈tni̱ cu loc piny ɛ rɛw ti̱ ca rëp kä gua̱th rɛw. Cäät: encrypt (('hi') locni̱ 'lm' encrypt (('asdfghjkl') locni̱ 'ewhjklnop' encrypt (('gf') locni̱ 'kj' encrypt (('et') locni̱ 'ix' """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/90,nus_Latn,python,"
def next_smallest(lst):
    """"""Ji̱n ca ji̱ ka̱m li̱th nämbäri̱ ti̱ räth kä di̱t. Gɔ̱r ni̱ pa̱ŋciin in dɔ̱ŋ_mi̱ tɔt (() min bi̱ loc ni̱ ɛlɛmɛni̱ tin tɔt tin 2nd rɛy li̱thä. Lätni̱ Noth mi̱ thiɛlɛ ɛlɛmɛni̱ ti̱ tɔt. next_smallest (([1, 2, 3, 4, 5]) == 2 next_smallest (([5, 1, 4, 3, 2]) == 2 next_smallest (([]) == Noth next_smallest (([1, 1]) == Noth """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/91,nus_Latn,python,"
def is_bored(S):
    """"""Bi̱i̱ kɛ moc kɛ rieet ti̱ ŋuan, kä bi̱ la̱tdu ɛ ɣöö bi̱ pek rieetni̱ tin ci̱ riɛk kä ji̱ kuɛn. Riɛk ɛ mi̱ tokɛ kɛ riet i̱ ""Ɣän"". Ri̱e̱t tin caa kuɛn ɛ '.', '?' kiɛ '!'. Cäät: >>> ɛ_riɛk ((""Hello world"") 0 >>> ɛ_riɛk ((""The sky is blue. The sun is shining. I love this weather"") 1 """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/92,nus_Latn,python,"
def any_int(x, y, z):
    '''Lätdɛ kɛ pa̱ŋciin mi̱ naŋɛ nämbäri̱ 3. Mi̱ ci̱ kɛl kä nämbäri̱ ɛ mi̱ päär kɛ mat nämbäri̱ da̱ŋ rɛw kɔ̱kiɛn, kä nämbäri̱ diaal kɛ intejeri̱. Lätdɛ kɛ pa̱ŋciin mi̱ kac rɛy kä ti̱ kɔ̱kiɛn. Cäätni̱ any_int{5, 2, 7} -> True any_int{3, 2, 2} -> False any_int{3, -2, 1) -> True any_int{3.6, -2.2, 2) -> False '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",,,
HumanEval/93,nus_Latn,python,"
def encode(message):
    """"""Gɔ̱r ni̱ pa̱ŋciin mi̱ naŋɛ thok, kä bɛ jɛ kuɛn kɛ duɔ̱ɔ̱p mi̱ bi̱ jɛ ku lɛ gɛr kä warɛgakni̱ diaal, bɛ kamni̱ rieet diaal tin la jɔc rɛy thok ku lɛ naŋ ɛ la rieet tin la jɔc gua̱th da̱ŋ rɛw nhiamdiɛn rɛy ali̱pëth. Cäätni̱: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG' """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/94,nus_Latn,python,"

def skjkasdkd(lst):
    """"""Mi̱ ci̱ kɔnɛ ka̱m raar ɛ la mi̱ caa la̱t ɛ la mi̱ di̱i̱t kä di̱t, bi̱ kɔnɛ lɛ loc ɛ la mi̱ caa mat ɛ la mi̱ di̱i̱t kä di̱t kä di̱t. Cäätni̱: Mi̱ ci̱ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] bi̱ min ca la̱t ɛ la 10 Mi̱ ci̱ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,1,2,4,2,5,1] bi̱ min ca la̱t ɛ la 25 Mi̱ ci̱ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] bi̱ min ca la̱t ɛ la 13 Mi̱ ci̱ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] bi̱ min ca la̱t ɛ la 11 Mi̱ ci̱ lst = [0,81,12,31,21,21] bi̱ min ca la̱t ɛ la 3 Mi̱ ci̱ lst = [0,1,8,1,2,1,7] bi̱ min ca la̱t ɛ la 7 """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",,,
HumanEval/95,nus_Latn,python,"
def check_dict_case(dict):
    """"""Mi ca di̱kcineri̱ ka̱m ji, luɔ̱ckɛ thuɔ̱k mi̱ ci̱ ki̱i̱ni̱ diaal ɛ thärkcini̱ ti̱ te piny kiɛ thärkcini̱ diaal ɛ thärkcini̱ ti̱ te nhial, mi̱ ci̱ mɔ luɔ̱c kɛ kac. La̱t bi̱ dhil luɔ̱c kac mi̱ ci̱ di̱kcineri̱ min ca ŋun te baaŋ. Cäätni̱: check_dict_case{""a"":""apple"", ""b"":""banana""}) bi̱ dhil luɔ̱c kɛ thuɔ̱k. check_dict_case{""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) bi̱ dhil luɔ̱c kɛ kac. check_dict_case{""a"":""apple"", 8:""banana"", ""a"":""apple""}) bi̱ dhil luɔ̱c kɛ kac. check_dict_case{""NAME"":""John"", ""Age"":""36"", ""City"":""Houston""}) bi̱ dhil luɔ̱c kɛ kac. check_dict_case{""NC""STATE:""STATE"", ""Z""IP:""45""}) bi̱ dhil luɔ̱c kɛ thuɔ̱k.""""""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",,,
HumanEval/96,nus_Latn,python,"
def count_up_to(n):
    """"""Lätdɛ kɛ pa̱ŋciin mi̱ naŋkɛ nämbäri̱ ti̱ /ci̱kɛ negɛtib kä locni̱ nämbäri̱ tin nhiam kä n tin la praam nämbäri̱ kɛnɛ tin kuiyni̱kɛn kä n. cäät: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17] """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",,,
HumanEval/97,nus_Latn,python,"
def multiply(a, b):
    """"""Mi̱ ci̱ kɔnɛ mat kä nämbäri̱ da̱ŋ rɛw kä bi̱ kɛ loc ɛ la mi̱ ca loc ɛ nämbäri̱ tin la nyin yunitni̱kiɛn. Cuaa jɛ naŋ i̱ ɛn min ca mat bi̱ te thi̱n ni̱ ciaaŋ. Cäätni̱: gua̱th in ca loc ɛ 148, 412) bi̱ loc ɛ 16. gua̱th in ca loc ɛ 19,19, 28 bi̱ loc ni̱ 72. gua̱th in ca loc ɛ 2020, 1851) bi̱ loc ni̱ 0. gua̱th in ca loc ɛ 14-15 bi̱ loc ni̱ 20.""""""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",,,
HumanEval/98,nus_Latn,python,"
def count_upper(s):
    """"""Mi ca thärkdɛ ŋun, kuɛn pek in ca gɔ̱r kɛ ciööt tin di̱t tin te rɛy indi̱i̱tni̱ ti̱ päär. Cäät: count_upper (('aBCdEf') bɛ loc ni̱ 1 count_upper (('abcdefg') bɛ loc ni̱ 0 count_upper (('dBBE') bɛ loc ni̱ 0 """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/99,nus_Latn,python,"
def closest_integer(value):
    '''Lätdɛ mi̱ la naŋɛ nämbär kä bɛ loc ni̱ intejeri̱ tin thi̱ääk kɛ jɛ. Mi̱ ci̱ nämbär te kam nämbäri̱ ti̱ ŋuan, bɛ loc ni̱ 0 ɛ wä nhiam. Cäätni̱ >>> nearest_integer ((""10"") 10 >>> nearest_integer ((""15.3"") 15 Kuɛ la ɣöö: mi̱ ci̱kɛ loc ɛ wä nhiam kä 0 lotdɛ ni̱ ɣöö mi̱ ci̱ nämbär in ca ŋun ɛ na̱n kä intejeri̱ rɛw, bi̱ min bi̱ loc ɛ jɛn in na̱n kä 0 ɛ jɛn min bi̱ loc ɛ la jɛn in na̱n kä 0 ɛ wä nhiam. Cäät kɛ kui̱ kä nämbär in thi̱a̱k in_intejer "" ((14.5"") bɛ loc ni̱ 15 kä bi̱ nämbär in thi̱a̱k in_intejer "" ((-14.5"") bɛ loc ni̱ -15. '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",,,
HumanEval/100,nus_Latn,python,"
def make_a_pile(n):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ puɔ̱r, ba ji̱ jakä bi̱ pääm ti̱ ŋuan ti̱ ŋuan ti̱ ŋuan la̱t. Kä päm in nhiam tekɛ pääm ti̱ n. Kä pek päämni̱ tin te rɛy päm in dɔ̱ŋ bɛ te: - ɛ nämbär mi̱ dɔ̱ŋ mi̱ /ci̱ mɔ a pa̱r mi̱ n ɛ pa̱r. - ɛ nämbär mi̱ dɔ̱ŋ mi̱ päär mi̱ n ɛ pa̱r. Lɔ̱ŋni̱ pek päämni̱ rɛy pämni̱ diaal rɛy li̱thä, gua̱th in bi̱ ɛlɛmɛni̱ kä indi̱dhɛth i ɛ nyoth pek päämni̱ rɛy päm (i+1). Cäät: >>> make_a_pile (n) [3, 5, 7] """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/101,nus_Latn,python,"
def words_string(s):
    """"""Mi̱ ci̱i̱ mi̱ ci̱ rɔ lot kɛ duɔ̱ɔ̱r mi̱ ci̱ rɔ lot kɛ duɔ̱ɔ̱r mi̱ dɔ̱ŋ, bi̱ kɛ jɛ la̱t kɛ ɣöö bi̱ kɛ rɔ̱ cu loc ɛ la rie̱t ti̱ caa da̱a̱k ɛ la kamni̱ kiɛ kamni̱.""""""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",,,
HumanEval/102,nus_Latn,python,"
def choose_num(x, y):
    """"""Ɛn pa̱ŋciin ɛmɛ naŋɛ nämbäri̱ rɛw ti̱ puci̱tib (positive) x kɛnɛ y kä bɛ nämbäri̱ diaal ti̱ di̱t ti̱ matkɛ kɛɛl ti̱ te rɛy gua̱th in te (x, y) thi̱n loc. Mi̱ thiɛlɛ nämbär mi̱ ce̱tkɛ nɔ, kä bi̱ pa̱ŋciin ɛmɔ cu loc ɛ la -1. Cäät:""""""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",,,
HumanEval/103,nus_Latn,python,"
def rounded_avg(n, m):
    """"""Ji̱n ca ji̱ ka̱m intejeri̱ rɛw ti̱ puci̱tibni̱ n kɛnɛ m, kä la̱tdu ɛ ɣöö bi̱ pek intejeri̱ tin te kam n kɛnɛ m ŋa̱c (amäni̱ n kɛnɛ m). Ji̱n bi̱ jäkdɛ kulɛ naŋ ɛ la intejeri̱ tin thi̱a̱k kä bi̱ kɛ loc ɛ la bayinɛri̱. Mi̱ n di̱tni̱ jɛn kä m, loc ni̱ -1. Cäät: rounded_avg ((1, 5) => ""0b11"" rounded_avg ((7, 5) => -1 rounded_avg ((10, 20) => ""0b11"" rounded_avg ((20, 33) => ""0b11010"" """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",,,
HumanEval/104,nus_Latn,python,"
def unique_digits(x):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ li̱th nämbäri̱ ti̱ ŋuan ti̱ thuɔ̱ɔ̱k ti̱ caa mat kä x, bi̱ li̱th ni̱ ti̱ caa riali̱kä kä ti̱ diaal tin thiɛl nämbär mi̱ tɔt mi̱ caa mat thi̱n.""""""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/105,nus_Latn,python,"
def by_length(arr):
    """"""Mi ca ji̱ moc nämbäri̱ ti̱ ŋuan, bi̱ kɛ kuëŋ kä 1 kɛnɛ 9, bi̱ kɛ kuëŋ kä mi̱ dɔ̱ŋ, kä bi̱ kɛ kuëŋ kä mi̱ dɔ̱ŋ. Cäätdɛ: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [""Eight"", ""Five"", ""Four"", ""Two"", ""Two"", ""One"", ""One""] Mi̱ ci̱ nämbäri̱ te jɔ̱ɔ̱r, bi̱ kɛ kuëŋ kä mi̱ dɔ̱ŋ: arr = [] return [] Mi̱ ci̱ nämbäri̱ te jɔ̱ɔ̱r, bi̱ kɛ kuëŋ kä mi̱ dɔ̱ŋ: arr = [1, 1 , 55] -> arr -> [1, 1], 55 -> reverse arr = [55, return 1,1] - ['One'] """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",,,
HumanEval/106,nus_Latn,python,"
def f(n):
    """"""Lätdɛ kɛ f mi̱ naŋkɛ n ɛ la parɛmatɛr, kä locni̱ li̱th mi̱ di̱i̱t n, mi̱ ce̱tkɛ ɣöö ba pek ɛlɛmɛni̱ kä indi̱th i ɛ paktɔriɔl duŋ i mi̱ i ɛ pa̱r kiɛ mat nämbäri̱ kä 1 ɛ wä i mi̱ /ci̱ mɔmɔ ɛ jɛn. i tokɛ kä 1. paktɔriɔl i ɛ mi̱ la mälti̱pli̱kaciɔn nämbäri̱ kä 1 ɛ wä i (1 * 2 * ... * i). Cäät: f (((5) == [1, 2, 6, 24, 15] """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",,,
HumanEval/107,nus_Latn,python,"
def even_odd_palindrome(n):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ puɔ̱thitib intejer n, locni̱ tuple mi̱ tekɛ nämbär pa̱r kɛnɛ pa̱r intejer palindrometh tin te rɛy gua̱th in tekɛ kɛ (n), cu määni̱ (n). Cäät1: Input: 3 Output: (1, 2) Explanation: Integer palindrometh kɛn 1, 2, 3. kɛl kä kɛ ɛ pa̱r, kä rɛw kä kɛ ɛ pa̱r. Cäät2: Input: 12 Output: (4, 6) Explanation: Integer palindrometh kɛn 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ŋuaan kä kɛ ɛ pa̱r, kä 6 kä kɛ ɛ pa̱r. Note: 1. 1 <= n <= 10^3 2. tuple cɛ nämbär pa̱r kɛnɛ pa̱r intejer palindromethni̱ locni̱. """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/108,nus_Latn,python,"
def count_nums(arr):
    """"""Gɔ̱r la̱t mi̱ cɔali̱ count_nums min naŋɛ mat nämbäri̱ ti̱ ŋuan kä locni̱ nämbäri̱ tin te dääkɛ di̱jitni̱ > 0. Mi̱ ci̱ nämbär ɛ negɛtib, kä ɛn di̱jit in nhiam in ca gɔ̱a̱r bɛ cu tekɛ negɛtib: c.d. -123 bɛ tekɛ dääkɛ di̱jitni̱ -1, 2, kɛnɛ 3. >>> count_nums[]) == 0 >>> count_nums[-1, 11, -11]) == 1 >>> count_nums[(1, 1, 2]) == 3 """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/109,nus_Latn,python,"
def move_one_ball(arr):
    """"""Mi̱ ci̱ nämbäri̱ rɛy arrɛy' arr' kä N intejeri̱ arr[1], arr[2], ..., arr[N] käp, bi̱ nämbäri̱ rɛy arrɛy'ä cu riali̱kä kɛ duɔ̱ɔ̱p mi̱ /ci̱ rɔ lot. La̱tdu ɛ ɣöö bi̱ ji̱n ɛ ŋa̱c i̱ de rɔ lot kɛ riali̱kä arrɛy'ä kɛ duɔ̱ɔ̱p mi̱ /ci̱ rɔ lot kɛ ɣöö bɛ wä piny kɛ la̱t in ba la̱t kä arrɛy'ä min ca ŋun: Ji̱n deri̱ lät mi̱ cuŋ ɛ la ɣöö bi̱ la̱t ɛ gɛɛr ɛ wä kui̱c ɛ wä kä pek mi̱ go̱o̱r. La̱t mi̱ cuŋ ɛ la ɣöö bi̱ la̱t in jɔakdiɛn ɛ gɛɛr ɛ wä kä pek in tokɛ rɔ rɛy arrɛy'ä i̱ ɛ 0th. Mi̱ ca rɔ lot kɛ riali̱kä arrɛy'ä min ca ŋun kɛ la̱t kä min te nhial, bi̱ loc ɛ thuɔ̱k, dɔ̱ŋ bi̱ŋ bi̱ loc ɛ kac.""""""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",,,
HumanEval/110,nus_Latn,python,"
def exchange(lst1, lst2):
    """"""Rɛy ri̱e̱e̱tni̱ ti̱ti̱, bi̱ la̱t mi̱ naŋkɛ li̱thni̱ rɛw kä bi̱ jɛ ŋa̱c i̱ de rɔ lot kɛ ɣöö ba ɛlɛmɛni̱ gɛɛr kamni̱kiɛn kɛ ɣöö bi̱ lst1 a li̱th duŋ nämbäri̱ pa̱a̱r kärɔ̱. /thiɛlɛ mi̱ ca thɛm kä nämbäri̱ tin ba gɛr kam lst1 kɛnɛ lst2. Mi̱ de rɔ lot kɛ gɛr ɛlɛmɛni̱ kam lst1 kɛnɛ lst2 kɛ ɣöö bi̱ kɛn ɛlɛmɛni̱ lst1 diaal a pa̱a̱r, locni̱ ""ƔƐƐ"". Mi̱ /ci̱ ɛ jɛn, locni̱ ""ƔƐN"". Cäät: exchange[(1, 2, 3, 4], [1, 2, 3, 4]) => ""ƔƐN"" Ca lar i̱ min ca la̱th rɛy li̱thä bi̱ a mi̱ /ci̱ɛɛ baaŋ. """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",,,
HumanEval/111,nus_Latn,python,"
def histogram(test):
    """"""Mi ca ji̱ ka̱m string mi nyothni̱ litɛrni̱ tin te kamdiɛn kɛ kam, locni̱ di̱jikcinär mi̱ te kɛ li̱ter mi̱ ca loc ni̱ ciaaŋ kä tekɛ kɛ nämbär mi̱ päär. Mi̱ ci̱ litɛrni̱ ti̱ ŋuan tekɛ kɛɛl, locni̱ kɛn diaal. Cäät: Ɣithtögram ((('a b c') == {'a': 1, 'b': 1, 'c': 1} Ɣithtögram ((('a b b a') == {'a': 2, 'b': 2} Ɣithtögram ((('a b c a b') == {'a': 2, 'b': 2} Ɣithtögram ((('b b a') == {'b 4}: Ɣithtögram ((('') == {} """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",,,
HumanEval/112,nus_Latn,python,"
def reverse_delete(s,c):
    """"""Ta̱a̱ la̱t ca̱a̱t kɛ kɔrɛ, ca kɔrɛ ka̱m i̱thti̱rɛktni̱ rɛw ti̱ päärkɛ kɛ tin te rɛy c, bi̱ kɛ dhil woc kä bi̱ kɛ kulɛ pa̱lindrɔmi̱. Kä bi̱ kɛn pa̱lindrɔmi̱ tin te rɛy thithtɛmä cu pa̱lindrɔmi̱ mi̱ ca kɛ loc jɔk ɛ päär kɛ wä nhiam.""""""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",,,
HumanEval/113,nus_Latn,python,"
def odd_count(lst):
    """"""Mi ca ji̱ ka̱m li̱th ti̱ ŋuan, kä bi̱ kɛ̈l kɛ̈ɛ̈li̱ tekɛ di̱jitni̱ kärɔ̱, bi̱ kɛ lɛ loc ni̱ li̱th. Ɛlɛmɛni̱ i̱ kä min ba naŋ ba ""nhial ɛlɛmɛni̱ tin /ci̱ mɔ a kɛl rɛy thi̱thtriŋ i̱ kä min ca naŋ"". gua̱th in bi̱ i̱ diaal ba loc ɛ nämbär duŋ thi̱thtriŋ i̱th kä min ca naŋ. >>> odd_count['1234567']) [""nhial ɛlɛmɛni̱ tin /ci̱ mɔ a kɛl 4n str4ng 4 kä 4nput.""] >>> odd_count['3',""111111""]) [""nhial ɛlɛmɛni̱ tin /ci̱ mɔ a kɛl 1n str1ng 1 kä 1nput."", ""nhial ɛlɛmɛni̱ tin /ci̱ mɔ a kɛl 8n str8ng 8 kä 8nput.""] """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/114,nus_Latn,python,"
def minSubArraySum(nums):
    """"""Mi̱ ca ŋun ɛ la mi̱thɛ̈r duŋ intejeri̱ nämbäri̱, jiekɛ min tɔt kä min /ci̱ pual kä tha̱b-array duŋ nämbäri̱. cäät minSubArraySum (([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum (([-1, -2, -3]) == -6 """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",,,
HumanEval/115,nus_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""Ɛ la̱t mi̱ la̱tkɛ kɛ duɔ̱ɔ̱p mi̱ ca riali̱kä kä ca la̱th piny. Kä bi̱ ramɔ tekɛ gua̱th mi̱ ro̱ŋ kɛ ɣöö bɛ pi̱w kulɛ ka̱m raar, kä bi̱kɛ tekɛ pek mi̱ päär. La̱tdu ɛ ɣöö bi̱kɛ tekɛ pek mi̱ ro̱ŋ kɛ ɣöö bi̱kɛ pi̱w kulɛ ka̱m raar.""""""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",,,
HumanEval/116,nus_Latn,python,"
def sort_array(arr):
    """"""Rɛy Kata ɛmɛ, bi̱ ji̱n ɛ go̱r i̱ bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛ kuëŋ gua̱thdiɛn kɛ nämbäri̱ tin /ci̱ negative (tin ci̱ rɔ̱ mat kɛɛl) kɛ ɣöö bi̱ kɛn kuëŋdiɛn rɔ̱ mat kɛɛl.""""""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/117,nus_Latn,python,"
def select_words(s, n):
    """"""Mi ca thärkɛn thöp kä ca kɛ moc nämbär n, ca ji̱ la̱t la̱t mi bi riet mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi te kɛ thok mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth riet mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi nyoth mi mi mi mi mi mi mi mi""""""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",,,
HumanEval/118,nus_Latn,python,"
def get_closest_vowel(word):
    """"""Ji̱n ca ji̱ moc riet. La̱tdu ɛ ɣöö bi jɔw in thia̱k in te kam rieetni̱ da̱ŋ rɛw tin jɔc kui̱c cuëëc rietä (luɔ̱cdɛ kɛ gua̱a̱th in gɔ̱rkɛ ni̱ jɛ). Ji̱n /ci jɔw in te nhiamdɛ kɛnɛ jɔw in jɔc lɛ kuɛ̈ɛ̈n. Ji̱n de ji̱ moc rieet ti thiɛl luɔt mi̱ /ci̱ jɔw in ca gɔ̱r thi̱n jek mi̱ ci̱ min ca lat nhial lɛ cop. Ji̱n de̱i̱ jɛ car ɛn ɣöö ɛn rieet in ca ŋun te ni̱ riet English kärɔa. Cäät: get_closest_vowel (((""yogurt"") ==> ""u"" get_closest_vowel (((""F"") ==> ""ULL"" get_closest_vowel (((""quick"") ==> """" get_closest_vowel"" (((ab"") ==> """" """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/119,nus_Latn,python,"
def match_parens(lst):
    '''Ji̱n ca ji̱ moc li̱th ti̱ rɛw, kɛn rɛw ti̱ti̱ tekɛ kɛ parentheses '(' kiɛ parentheses ') ' kärɔ̱. La̱tdu ɛ ɣöö bi̱ ji̱ ŋa̱c mi̱ de rɔ lot ɛn ɣöö bi̱ kɛn rɛw ti̱ti̱ mat kɛ duɔ̱ɔ̱p mi̱ ro̱ŋ, ɛn ɣöö bi̱ kɛn rɛw tin bi̱ ben raar cu gɔw. ɛn string S ba cu car i̱ de gɔaa mi̱ kɛn parentheses diaal rɛy S bi̱ kɛn cu pa̱a̱r. cäät: ɛn string '((()) ' ɛ mi̱ gɔaa, kä ɛn string '()) ' /ciɛ jɛn. Lɔ̱a̱ 'Ɣɔ̱ɔ̱n' mi̱ tëë kɛ duɔ̱ɔ̱p mi̱ gɔaa kɛ la̱t string, kä lɔ̱a̱ '/ci̱ɛ jɛn'. cäät: match_parens[('() ', ') ']) == 'Ɣɔ̱ɔ̱ɔ̱n' match_parens[(') ', ') ']) == '/ci̱ɛ jɛn''''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",,,
HumanEval/120,nus_Latn,python,"
def maximum(arr, k):
    """"""Mi ca ŋun ɛ la mi̱ te intejeri̱ arr kɛnɛ mi̱ tekɛ positive intejeri̱ k, locni̱ li̱th mi̱ ca riali̱kä kä bärɛ k kɛ nämbäri̱ ti̱ ŋuan kä arr. Cäät1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Cäät2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Cäät3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1.""""""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",,,
HumanEval/121,nus_Latn,python,"
def solution(lst):
    """"""Mi ca ŋun ɛ la mi̱ /ci̱ te baaŋ, locni̱ nämbäri̱ diaal tin te baaŋ kä tekɛ gua̱th ti̱ päär.""""""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",,,
HumanEval/122,nus_Latn,python,"
def add_elements(arr, k):
    """"""Mi ca ŋun ɛ la mi̱ /ci̱ la pual kä ɛ intejeri̱ arr kɛnɛ intejeri̱ k, locni̱ nämbäri̱ tin te kä di̱jitni̱ rɛw kä ɛlɛmɛni̱ tin nhiam kä arr. Cäät: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= lenarr) <= 100 2. 1 <= k <= lenarr) """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/123,nus_Latn,python,"
def get_odd_collatz(n):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ puɔ̱thitib intejer n, locni̱ li̱th mi̱ ca riali̱kä min tekɛ nämbäri̱ ti̱ ji̱di̱ni̱ rɛy kɔla̱tdh thekuɛnthi̱. Kɔla̱tdh kɔnjeciɛr ɛ kɔnjeciɛr rɛy mɛthematikni̱ min ruac kɛ kui̱ thekuɛnthi̱ mi̱ ca lat i̱ ɛ jɛn i̱nɔ: tokɛ kɛ mi̱ tekɛ puɔ̱thitib intejer n. Kä kɛ kɔrɛ ɛn kɛl ɛ mi̱ ca jiek kä min te nhiam: mi̱ ci̱ min te nhiam ɛ pa̱r, min bi̱ ben kɔɔr ɛ jɛn nuth kä min te nhiam. Mi̱ ci̱ min te nhiam ɛ pa̱r, min bi̱ ben kɔɔr ɛ jɛn 3 gua̱thni̱ tin ci̱ ben kɔɔr ɛ matkɛ 1. Kä min ca ŋun ɛ jɛn i̱nɔ, ɛni̱ mi̱ ɛ ŋuani̱ n, bi̱ thekuɛnthi̱ bɛ ni̱ ciaaŋ cop 1.""""""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/124,nus_Latn,python,"
def valid_date(date):
    """"""Mi ca cäŋ luɔ̱c jɔk, ba mi thuɔ̱k luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca cäŋ luɔ̱c jɔk mi ca ca cäŋ luɔ̱c jɔk mi ca ca cäŋ luɔ̱c jɔk mi ca ca ŋut ti̱ti̱ diaal luɔ̱c jɔk: 1.""""""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",,,
HumanEval/125,nus_Latn,python,"
def split_words(txt):
    '''Mi ca riet mi̱ caa ŋun ŋun, luɔ̱c ciöt mi̱ caa da̱a̱k kä biɛl, mi̱ /thiɛlɛ biɛl mi̱ caa kuëŋ rɛy ruac, bi̱ kɛ kuëŋ kam kɔma̱ni̱, mi̱ /thiɛlɛ kɔma̱ni̱ bi̱ kɛ kuëŋ kam kɔma̱ni̱, ord (a) = 0, ord (b) = 1, ... ord (z) = 25 Cäätni̱ split_words (cäät: ""Hello world!"") â -> [""Hello"", ""world!""] split_words (cäät: ""Hello,world!"") â -> [""Hello"", ""world!"" split_words (cäät: ""abcdef"") == 3 '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",,,
HumanEval/126,nus_Latn,python,"
def is_sorted(lst):
    '''Mi ca ji̱ moc li̱th nämbäri̱, locni̱kɛ mi̱ ca kɛ da̱a̱k kɛ rɔ̱ kiɛ /ci̱kɛ rɔ̱ lɛ wɔ̱ nhial. Mi̱ tëë kɛ nämbäri̱ ti̱ ŋuan ti̱ päär, locni̱ mi̱ ji̱ääk. /Cu tekɛ nämbäri̱ ti̱ negative kɛnɛ intejeri̱ kärɔ̱. Cäätni̱kɛ ɛ_thɔ̱rti̱d (), ɛ -> True ɛ_thɔ̱rti̱d (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (), ɛ (, ɛ (), ɛ (, ɛ (, ɛ (), ɛ (, ɛ (, ɛ (), ɛ (, ɛ (, ɛ) (, ɛ (, ɛ) (, ɛ (, ɛ) (, ɛ (, ɛ) (, ɛ (, ɛ) (, ɛ (, ɛ) (, ɛ (, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ, ɛ,'''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",,,
HumanEval/127,nus_Latn,python,"
def intersection(interval1, interval2):
    """"""Mi̱ ca ji̱ ka̱m kamni̱ da̱ŋ rɛw, bi̱ kamni̱ diaal ɛ pa̱r in ca mat ɛ nämbäri̱ tin te kɛɛl. Cäät, kamni̱ da̱ŋ rɛw = (cuɔ̱p, guut) = (1, 2). Kä kamni̱ da̱ŋ rɛw tëkɛ mi̱ ca gäk min lot ni̱ ɣöö kamni̱ (cuɔ̱p, guut) te kɛ tuk kɛnɛ guut. Kɛ kui̱ kamni̱ da̱ŋ rɛw, jɛn ba naŋ i̱ jɛn tukdɛ ɛ kuiy kiɛ päär kɛ guutdɛ. La̱tdu ɛ ɣöö bi̱ jɛ ŋa̱c i̱ mi̱ ci̱ pek in ci̱ röm kamni̱ da̱ŋ rɛw ɛ nämbär mi̱ nhiam. Cäät, kamni̱ da̱ŋ rɛw (1, 3), (2, 4) ɛ (2, 3) min ci̱ pekdɛ ɛ 1, min /ci̱ mɔ a nämbär mi̱ nhiam. Mi̱ ci̱ pek in ci̱ röm ɛ nämbär mi̱ nhiam, locni̱ ""ƔƐƔƐƔ"", mi̱ /ci̱ mɔ, locni̱ ""ƔƐƔƐƔƐ"". Mi̱ ci̱ kamni̱ da̱ rɛw /ci̱ bi̱ röm, locni̱ ""ƔƐƔƐƔ"".""""""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",,,
HumanEval/128,nus_Latn,python,"
def prod_signs(arr):
    """"""Mi̱ ca ji̱ ka̱m ɛri̱i̱n mi̱ te intejeri̱ kä bi̱ ji̱ yi̱k loc ni̱ mat intejeri̱ tin di̱t kä ca rëp ɛ la mi̱ ca pith ɛ nämbäri̱ diaal tin te rɛy ari̱i̱n, min ca cuŋ ɛ la 1, -1 kiɛ 0. Note: return None for empty arr. Cäät: >>> prod_signs (([1, 2, 2, -4]) == -9 >>> prod_signs (([0, 1]) == 0 >>> prod_signs (([]) == None """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/129,nus_Latn,python,"
def minPath(grid, k):
    """"""Mi ca ji̱ ka̱m thurbil mi te kɛ ri̱i̱wni̱ N kɛnɛ ko̱lömni̱ N (N >= 2) kɛnɛ nämbär mi̱ thuɔ̱k mi̱ la k, bi̱ thurbil ɛ mɔ tekɛ mi̱ ca mat ɛ la mi̱ tɔt. Kä thurbil ɛ mɔ bɛ te thi̱n kä kɛl kärɔa kä thurbil in te thi̱n. Ji̱n deri̱ thurbil ɛ mɔ jiek kä bi̱ jɔɔc kä thurbil in dɔ̱ŋ, kɛ rieet ti̱ kɔ̱ŋ, deri̱ wä kä thurbil mi̱ tɔt mi̱ te thi̱n kä bi̱ jɔɔc kä thurbil in thi̱n. Kä thurbil mi̱ tɔt lotdɛ ni̱ ɣöö bi̱ jɔɔc kä thurbil mi̱ tɔt (/ci̱kɛ ti̱ gööl). Ji̱n /ci̱ bi̱ jɔɔc kä thurbil. thurbil A (mi̱ te kɛ bär mi̱ na̱n) ba car i̱ kuiy ni̱ jɛn kä thurbil B (mi̱ te kɛ bär mi̱ na̱n) mi̱n bi̱n jɔɔc kä thurbil in ca mat ɛ la B (nɛ kɛ cɔl i̱ thurbil kä 1 kɛnɛ thurbil in nhiam), thurbil in tɔt bi̱ a mi̱ kuiy ni̱ kä thurbil in dɔ̱diɛn, kɛ rieet in dɔ̱ŋ, kɛ rieet in dɔ̱ŋ, bi̱ jɔɔc kä thurbil in dɔ̱ŋ, bi̱ jɔɔcdɛ te thi̱, kä thurbil in dɔ̱ŋ, bi̱ jɔɔcdɛ dɔ̱ mi̱ mi̱ bɛ te thi̱, bi̱ jɔɔc kä thurbil in dɔ̱ŋ, bi̱ bä jɔɔc kä thurbil in dɔ̱ŋ, bi̱ŋ bi̱ jɔɔc kä thurbil in dɔ̱ŋ bɛ te thi̱ bä kä thurbil in dɔ̱ŋ, bi̱ŋ bɛ te thi̱n kä thurbil in dɔ̱ŋ bɛ wä kä thurbil in dɔ̱ŋ bɛ wä kä thurbil i̱nɔ, bi̱n, bi̱n ɛ mi̱ bɛ wä kä thurbil mi̱n, bi̱ bɛ te thi̱n, bi̱n, kä bi̱n, kä bi̱ bɛ te kɛ thurbil mi̱n, kä bi̱ bɛ te kɛ thurbil mi̱n, kä bi̱ bɛ te thi̱n, kä bi̱ bi̱""""""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",,,
HumanEval/130,nus_Latn,python,"
def tri(n):
    """"""Kɛn diaal ŋa̱ckɛ pe̱k pi̱i̱bɔnacci̱, jɛn cua ŋi̱e̱e̱c ɛ gɔa ɛ mɛthemati̱ciani̱ rɛy runti̱ kur rɛw tëë ci̱ wɔ̱. Duŋdɛ ɣöö, min kui̱c naath ɛ pe̱k Tribɔnacci̱. Pe̱k Tribɔnacci̱ cua lat ɛ la mi̱ loc rɔ: tri(1) = 3 tri(n) = 1 + n / 2, mi̱ n ɛ pa̱r. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), mi̱ n ɛ pa̱r. Cäät: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Ca ji̱ ka̱m nämbär mi̱ /ci̱ɛɛ negative intejer, bi̱ ji̱ dhil locni̱ nämbäri̱ tin nhiam kä n + 1 kä pe̱k Tribɔnacci̱. Cäät: tri(3) = [1, 3, 2, 8]""""""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",,,
HumanEval/131,nus_Latn,python,"
def digits(n):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ puɔ̱thitib intejiɛr n, locni̱ prɔdu̱kciɔn duŋ di̱jitni̱ tin /ci̱ tɔt. Lätni̱ 0 mi̱ kɛn di̱jitni̱ diaal ɛ pa̱r. Cäät: di̱jitni̱ ((1) == 1 di̱jitni̱ ((4) == 0 di̱jitni̱ ((235) == 15 """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",,,
HumanEval/132,nus_Latn,python,"
def is_nested(string):
    '''Lätdɛ mi̱ naŋɛ thärk ɛ la mi̱ te rɛy gua̱th in ca mat thi̱n ɛ la i̱thkuɛr bɛ cu loc ɛ la Truɛ mi̱ kɛnɛ i̱ bɛ tekɛ mi̱ ca mat thi̱n ɛ la i̱thkuɛr mi̱ tekɛ gua̱th mi̱ ci̱ rɔ mat thi̱n.'''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",,,
HumanEval/133,nus_Latn,python,"

def sum_squares(lst):
    """"""Mi̱ ci̱ kɔnɛ ka̱m raar ɛ la mi̱ caa kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn kä bi̱ kɛ kuɛn""""""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/134,nus_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''Lätdɛ mi̱ la̱tkɛ kɛ thuɔ̱k mi̱ ca kɛ gɔ̱r ɛ la bi̱ɛl in jɔak kä ci̱kɛ gɔ̱r ɛ la bi̱ɛl in jɔak kä /ci̱kɛ bi̱ɛl mi̱ la tha̱a̱ŋ rieetni̱, kɛnɛ mi̱ /ci̱kɛ thuɔ̱k mi̱ dɔ̱ŋ. Nɔŋ: ""ri̱e̱t"" ɛ buɔ̱n ji̱o̱tni̱ ti̱ caa da̱a̱k kɛ kam. Cäätni̱: check_if_last_char_is_a_letter "" "" apple pie "") â -> False check_if_last_char_is_a_letter "" "" apple pi e "") â -> True check_if_last_char_is_a_letter "" "" apple pi e "") â -> False check_if_last_char_is_a_letter "" "" ""'''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/135,nus_Latn,python,"
def can_arrange(arr):
    """"""Mi̱ ci̱i̱kɛ /thiɛl ɛlɛmɛni̱ ti̱ te thi̱n, bi̱ kɛn luɔ̱c ɛ la -1. /Ci̱ kɛn bi̱ tekɛ ti̱ ŋuan ti̱ cäät. Cäätni̱: can_arrange ({1,2,4,3,5)) = 3 can_arrange ({1,2,3)) = -1 """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",,,
HumanEval/136,nus_Latn,python,"
def largest_smallest_integers(lst):
    '''Mi̱ ci̱ la̱t ɛ ci̱e̱ mi̱ ci̱ tuɔplɛ (a, b) luɔ̱c, gua̱th in bi̱ 'a' ɛ jɛn min di̱tni̱jɛn kä negɛtib intejeri̱, kä 'b' ɛ jɛn min kuiyni̱jɛn kä puci̱tib intejeri̱ rɛy li̱thä. Mi̱ thiɛlɛ negɛtib kiɛ puci̱tib intejeri̱, locni̱kɛ ɛ la Noth. Cäätni̱: largest_smallest_integers[2, 4, 1, 3, 5, 7]) == (Noth, 1) largest_smallest_integers([]) == (Noth, None) largest_smallest_integers[0]) == (Noth, None) '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",,,
HumanEval/137,nus_Latn,python,"
def compare_one(a, b):
    """"""Lätdɛ kɛ mi̱ naŋɛ intejeri̱, floateth, kiɛ thärkith tin cuŋ kɛ nämbäri̱ tin thuɔ̱k, kä locni̱ mi̱ di̱i̱t kä bi̱ ben raar rɛy ba̱riabɔl tin ca ŋun. Mi̱ ci̱ na̱ŋdiɛn päär, bi̱ loc ɛ la Noth. Noth: Mi̱ ca nämbär mi̱ thuɔ̱k nyoth ɛ la thärkith, bi̱ pek in jäl kɛ jɛ dɔ̱ŋ de tekɛ . kiɛ, compare_one{1, 2.5) â -> 2.5 compare_one{1, ""2,3"") â -> ""2,3"" compare_one{5,1"", ""6"") â -> ""6"" compare_one{1"", 1) â -> Noth """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/138,nus_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Lätdɛ jɛ mi̱ ca ŋun kä nämbär n de gɔ̱r ɛ la mat nämbäri̱ ti̱ ŋuan ti̱ pa̱a̱r ti̱ thuɔ̱k Cäätdɛ ɛ_mi̱ päär_kɛ_la̱tdiɛn_ɛ_thɔ̱k (a) ()) == Ji̱ääk ɛ_mi̱ päär_kɛ_la̱tdiɛn (a) ()) == Ji̱ääk ɛ_mi̱ päär_kɛ_thɔ̱k (a) (8) == thuɔ̱k (thɔ̱k)""""""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",,,
HumanEval/139,nus_Latn,python,"
def special_factorial(n):
    """"""Kä bra̱thi̱lian paktöri̱al cua lat i̱: bra̱thi̱lian_paktöri̱al ((n) = n! * (n-1)! * (n-2)! * ... * 1! gua̱th in n > 0 Cäätdɛ: >>> special_paktöri̱al ((4) 288 La̱t ba naŋ ɛ la intejer mi̱ ca la̱th rɛy kä ba yi̱k loc ɛ la spe̱cial paktöri̱al duŋ intejerä nɛmɛ.""""""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",,,
HumanEval/140,nus_Latn,python,"
def fix_spaces(text):
    """"""Cäät kä-3 gɔ̱r ka̱m ji̱, loc kamni̱ diaal kɛ jɛ kɛ biɛl piny, kä mi̱ ci̱ thärkä tekɛ kɛ kamni̱ ti̱ läny 2 ti̱ guɔ̱rkɛ rɔ̱, kɛ kɔrɛ loc kamni̱ diaal ti̱ guɔ̱rkɛ rɔ̱ kɛ - fix_spaces (((""Cäät"") == ""Cäät"" fix_spaces (((""Cäät1"") == ""Cäät_1"" fix_spaces (((""Cäät2"") == ""_Cäät_2"" fix_spaces (((""Cäät 3"") == ""_Cäät-3"" ""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",,,
HumanEval/141,nus_Latn,python,"
def file_name_check(file_name):
    """"""Lätdɛ mi̱ naŋɛ ciöt mi̱ nyooth ciöt kɛ̈ɛ̈l, kä bɛ loc ni̱ 'Ɣɔ̱ɔ̱n' mi̱ ci̱ ciöt kɛ̈ɛ̈l rɔ lot, kä bɛ loc ni̱ '/ci̱ɛ̱ jɛn' mi̱ ci̱ dɔ̱ŋ. ciöt kɛ̈ɛ̈l ba cu car i̱ lotdɛ rɔ mi̱ kɛnɛ gua̱th tin ca mat thi̱n kärɔ̱: - /ci̱kɛ bi̱ tekɛ di̱jitni̱ di̱t kä diɔ̱k ('0'-'9') rɛy ci̱ötdɛ. - Ci̱öt kɛ̈ɛ̈l tëkɛ dot kɛl kärɔa '.' - Ci̱öt in te nhiam dot /cɛ bi̱ dhil te baaŋ, kä bɛ tok kɛ wargak kä laatin alphapet ('a'-'z' kɛnɛ 'A'Z'). - Ci̱öt in te jɔk dot bɛ dhil te kɛl kä ti̱ti̱: ['txt', 'exe', 'lld'] cäätni̱: file_name_check""{example.txt. #"") => 'Ɣɔ̱ɔ̱n' file_name_check""{example.dll1} => '/ci̱öt' (ci̱öt in bi̱ tok kä latin alphapet)""""""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",,,
HumanEval/142,nus_Latn,python,"


def sum_squares(lst):
    """""""" La̱t ɛmɛ bɛ naŋni̱ li̱th nämbäri̱ ti̱ räth kä di̱t. Kɛ kui̱ kä tin ca gɔ̱r rɛy li̱thä, la̱t bɛ räth kä i̱thkuɛr ɛ la i̱thkuɛr intejer in ci̱ indi̱dhɛthdɛ ɛ mi̱ ŋuan kä 3 kɛnɛ ɣöö bɛ räth kä i̱thkuɛr in ci̱ wä rɛy i̱thkuɛr mi̱ tekɛ indi̱dhɛth mi̱ ŋuan kä 4 kä /ci̱ mɔ a di̱t kä 3. La̱t /cɛ bi̱ räthni̱ kä i̱thkuɛr rɛy li̱thä min la indi̱dhɛthdɛ ɛ mi̱ ŋuan kä 3 kiɛ 4. La̱t bɛ cu locni̱ matdiɛn diaal. Cäätni̱: kɛ kui̱ lst = [1,2,3] bi̱ min ca nööŋ ba 6 kɛ kui̱ lst = [] min ca nööŋ ba 0 kɛ kui̱ lst = [-1,-5,2,-1,-5] min ca nööŋ ba -126 """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",,,
HumanEval/143,nus_Latn,python,"
def words_in_sentence(sentence):
    """"""Mi ca ji moc ri̱i̱t mi nyoth thëm, ri̱i̱t ɛmɔ te rieet ti̱ gööl thi̱n ti̱ caa da̱a̱k kɛ kam, kä bi̱ ji̱n ri̱i̱t mi̱ te rieet tin te rɛy ri̱i̱tni̱ min nhiam, mi̱ ci̱ pekdiɛn ɛ nämbäri̱ tin te piny, bi̱ ri̱i̱t rieetni̱ rɛy ri̱i̱tni̱ min pay ben ɛ mi̱ cäät kɛ min nhiam. Cäät1: Input: sentence = ""This is a test"" Output: ""is"" Cäät2: Input: sentence = ""let go for swimming"" Output: ""go for"" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",,,
HumanEval/144,nus_Latn,python,"
def simplify(x, n):
    """"""La̱tdu ɛ ɣöö bi̱ la̱t mi̱ bi̱ duɔ̱ɔ̱r jakä kuiy kä ba cu loc ɛ la thuɔ̱k mi̱ ɛ x * n ɛ mi̱ ca pekdɛ ŋa̱c kä ɛ mi̱ /ci̱ mɔ a thuɔ̱k. Kɛn x kɛnɛ n, kɛ kɛn nyin thärkcin duŋ pi̱rɛkcin, kä tekɛ kɛɛ ta̱a̱ in ba lat ɛ la, <numerɛtɔr>/<denominɛtɔr> gua̱th in bi̱ nämerɛtɔr kɛnɛ denominɛtɔr kɛn tekɛ puɔ̱thi̱jtib intejeri̱. Ji̱n deri̱ jɛ ŋak i̱ x, kɛnɛ n kɛ pi̱rɛkcin ti̱ la thuɔ̱ɔ̱k, kɛnɛ ɣöö /ci̱kɛ dhɛrö bi̱ pa̱a̱r ɛ la denominɛtɔr. thi̱pli̱pi̱la̱th (((""1/5"", ""5/1"") = Trueth (thɛɛr) thi̱pli̱pa̱la̱th ((1/6"", ""2/1"") = False (thɛɛr) thi̱pli̱pa̱la̱th ((""7/10"", ""10/2"") = False """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",,,
HumanEval/145,nus_Latn,python,"
def order_by_points(nums):
    """"""Gɔ̱r ni̱ pa̱ŋciin mi̱ bi̱ ku lɛ wɔ̱ kɛ kuën in ca ŋun kä intɛrjɛr kɛ duɔ̱ɔ̱p in wä nhial kɛ duɔ̱ɔ̱p in ci̱ di̱jitkiɛn kulɛ mat thi̱n. Nɔŋ: mi̱ tëë kɛ ti̱ ŋuan ti̱ te kɛɛl kɛ mat di̱jitni̱kiɛn, bi̱ kɛ kuëŋ kɛ duɔ̱ɔ̱p in ci̱ indi̱dhɛthdiɛn ɛ wɔ̱ kɛ jɛ rɛy li̱thä min nhiam. Cäät: >>> order_by_points (([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points[]) == [] """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/146,nus_Latn,python,"
def specialFilter(nums):
    """"""Gɔ̱r la̱t mi̱ naŋkɛ nämbäri̱ ti̱ ŋuan kä ba loc ni̱ nämbäri̱ tin te rɛy nämbäri̱ tin di̱t ni̱ kä 10 kɛnɛ ɣöö ɛn di̱jit in nhiam kɛnɛ min jɔak kä nämbär ɛ mi̱ /ci̱ mɔ a kɛl (1, 3, 5, 7, 9). Cäätdɛ: specialFilter (([15, -73, 14, -15]) => 1 specialFilter (([33, -2, -3, 45, 21, 109]) => 2 """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",,,
HumanEval/147,nus_Latn,python,"
def get_max_triples(n):
    """"""Mi̱ ca ji̱ ka̱m nämbär mi̱ lot rɔ kä n, bi̱ ji̱n ɛ go̱r ɛn ɣöö bi̱ nämbär in ca mat kä bär kä n. Kä i̱thpeththi̱n i̱thpeththi̱n ɛ mi̱ bäär kä n. Kä i̱thpeththi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱n i̱thpethi̱thpethi̱n i̱thpethi̱n i̱thpethi̱thpethi̱n i̱thpethi̱th i̱thpethi̱th i̱thpethi̱th i̱thpethi̱th i̱thpethi̱th i̱thpethi̱th i̱th i̱thpethi̱th i̱thpethi̱th i̱th i̱thpethi̱th i̱th i̱thpethi̱th i̱th i̱thpethi̱th i̱th i̱th i̱thpethi̱th i̱th i̱th i̱th""""""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",,,
HumanEval/148,nus_Latn,python,"
def bf(planet1, planet2):
    '''Te ɣɔw kɛ pay da̱ŋ bädäk rɛy thölar thi̱thtɛmädan: min thia̱k kɛ Cäŋ ɛ Merkury, min guur ɛ Kuɛ̈ɛ̈r, kɛ kɔrɛ Ɛŋɔa̱n, Ma̱ri̱, Ju-pi̱tɛr, Tha̱turn, Urɛnth, Neptuni̱. Gɔ̱r ni̱ pa̱ŋciin mi̱ naŋ ci̱ööt ɣɔw da̱ŋ rɛw ɛ la ki̱ri̱ni̱ planet1 kɛnɛ planet2. Bi̱ pa̱ŋciin ɛmɔ dhil locni̱ tuple mi̱ tekɛ planɛtni̱ diaal tin te orbitni̱kiɛn kam orbitni̱ planet1 kɛnɛ orbitni̱ planet2, ti̱ ca da̱a̱k kɛ thi̱ëëkdiɛn kɛ Cäŋ. Bi̱ pa̱ŋciin ɛmɔ dhil locni̱ tuple mi̱ thiɛl mi̱n mi̱ ci̱ planet1 kiɛ planet2 ɛ /ci̱ mɔ a ci̱ööt planɛtni̱ tin cuŋ. Cäätni̱ bf ""(Jupiter"", ""Neptuni̱"") ==> (""Tha̱turn"", ""Uran"") bf (((""Yɔ̱ɔ̱ɔ̱r"", ""Merkury"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Sn"") }}'''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",,,
HumanEval/149,nus_Latn,python,"
def sorted_list_sum(lst):
    """"""Gɔ̱r la̱t mi̱ bi̱ rɔ lot kɛ li̱th ti̱ ŋuan ti̱ ci̱ rɔ̱ mat kɛ ɣöö bi̱ kɛ jɔɔc, bi̱ kɛ jäk kä tin ci̱ rɔ̱ mat kɛ jäkdiɛn, kä bi̱ jäkdiɛn jɔɔc kɛ duɔ̱ɔ̱p mi̱ ca riali̱kä. Kä jäkdiɛn ɛ mi̱ la̱tkɛ ni̱ jäkni̱ ti̱ ŋuan, kä /ci̱ jäkni̱ nämbäri̱, kä dɔ̱ŋ derɛ tekɛ ti̱ cäät kɛ jäkni̱ ti̱ kɔ̱kiɛn. Kä jäkni̱ li̱thä bi̱ kɛ rɔ̱ re̱p kɛ jäkni̱ jäkni̱ rieetni̱, kä bi̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱. Mi̱ ci̱ rieet da̱ŋ rɛw päär, bi̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ jäkni̱ j""""""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",,,
HumanEval/150,nus_Latn,python,"
def x_or_y(n, x, y):
    """"""Pöri̱gram mi̱ thi̱a̱k mi̱ bi̱ luɔ̱c ni̱ min la x mi̱ n ɛ praam nämbär kä bi̱ luɔ̱c ni̱ min la y mi̱ dɔ̱ŋ. Cäätni̱: kɛ x_or_y ((7, 34, 12) == 34 kɛ x_or_y ((15, 8, 5) == 5 """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",,,
HumanEval/151,nus_Latn,python,"
def double_the_difference(lst):
    '''Mi ca ji̱ moc kɛ li̱th nämbäri̱, loc pek nämbäri̱ tin te rɛy li̱thä min la i̱thpär. /Cu pek nämbäri̱ tin ca mat kä /ci̱kɛ intejeri̱ bi̱ lɛ naŋ. double_the_difference (([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference (([-1, -2, 0]) == 0 double_the_difference (([9, -2]) == 81 double_the_difference (([0]) == 0 Mi̱ ci̱ li̱th in caa kuëŋ thi̱n te baaŋ, loc ni̱ 0. '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",,,
HumanEval/152,nus_Latn,python,"
def compare(game,guess):
    """"""Mi̱ ci̱ ram kɛl kä ji̱ ŋieecä jɛ i̱ cɛ ŋäci̱ min ci̱ tuɔɔk kä min ci̱ tuɔɔk kɛ gua̱a̱th mi̱ bäär, jɛn bɛ te rɛy cärädu kɛnɛ min ca car kɛ jɛn gua̱a̱th ɛmɔ. Min bi̱ la̱tdu ɛ ɣöö bi̱ ji̱ ŋa̱c mi̱ ci̱ ram kɛl ŋäci̱ min ci̱ tuɔɔk kä min ci̱ tuɔɔk kä min ci̱ tuɔɔk. Ji̱n ca ji̱ moc matdä rɛw ti̱ päär bäär kä bi̱ kɛ ŋäci̱ min ci̱ tuɔɔk kä min ci̱ tuɔɔk, gua̱th in bi̱ index ɛ nyoth ɛ mat. Lɔ̱kni̱ matdä mi̱ päär bäär mi̱ nyooth pek in ci̱ wä kɛ ŋäci̱. Mi̱ ci̱ kɛn ŋäci̱ min ca lar ɛ thuɔ̱k, bi̱ pekdɛ a 0, kä mi̱ /ci̱ mɔ a jɛn, bi̱ pekdɛ a dääk mi̱ thi̱a̱k kam ŋäci̱ kɛnɛ min ci̱ tuɔɔk. cäät: ((([1,2,3,4,5,1],[1,2,3,4,2,]) -> [0,0,0,0,0,0,3,3]""""""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/153,nus_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Ba ji̱ ka̱m ciöt ki̱lɛthä (thɛrk) kɛnɛ li̱th duŋ kä tin ca rɔ̱ rep. Kä tin ca rɔ̱ rep ba kɛ la̱th kɛ ɣöö ba ki̱lɛthni̱ tin kɔ̱ŋ rep kɛ kɛ. Kä bumni̱ ki̱lɛthä ɛ mi̱ cie min ba lat: Mi̱ ca CAP bi̱ la nämbär kä ci̱öt in di̱t kä ci̱öt in di̱i̱t, kä mi̱ ca SM bi̱ la nämbär kä ci̱öt in tɔt kä ci̱öt in di̱i̱t, kä bumni̱ ki̱lɛthä ba ŋun ɛ CAP - SM. Ji̱n bi̱ yi̱k ji̱ek kä min di̱t kä di̱t kä bi̱ ben kä thɛrk rɛy puɔrmɛt ɛmɛ: ClassName.StrongestExtensionName. Mi̱ tëë kɛ rɛw kiɛ ti̱ ŋuan ti̱ di̱t ti̱ kɛ buɔ̱m mi̱ päär, bi̱ ji̱n dhil kuany min bi̱ ben nhiam rɛy li̱thä. Cäätdɛ, mi̱ ca ji̱ ka̱ ka̱ ka̱m ""Slic"" ɛ la ki̱lɛth kɛnɛ li̱th duŋ kä tin ca rɔ̱ rep: ['SEviviNGliCliCliCliCliCliS', 'Cheese', 'StufedF', 'FFF'] kä bi̱ ji̱ bi̱ dhil locni̱ 'Slices.SEliCliCliCliCliSliCliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliSliS""""""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",,,
HumanEval/154,nus_Latn,python,"
def cycpattern_check(a , b):
    """"""Ji̱n ba ji̱ ka̱m rie̱t da̱ŋ rɛw. Ji̱n bi̱ yi̱k loc ni̱ thuɔ̱k mi̱ ci̱ riet in rɛwdɛ kiɛ min ca loc ɛ la mi̱ te rɛy rie̱t in nhiam. cycpattern_check (((""abcd"",""abd"") => False cycpattern_check (((""hello"",""ell"") => True cycpattern_check (((""whassup"",""psus"") => False cycpattern_check (((""abab"",""baa"") => True cycpattern_check (((""efef"",""eeff"") => False cycpattern_check (((hims"",""simen"") => True """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",,,
HumanEval/155,nus_Latn,python,"
def even_odd_count(num):
    """"""Mi̱ ca ŋun ɛ la intejer, bɛ tuple mi̱ tekɛ nämbär mi̱ päär kɛnɛ ɣöö /ci̱kɛ bi̱ pa̱a̱r loc. Cäät: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2) """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/156,nus_Latn,python,"
def int_to_mini_roman(number):
    """"""Mi ca pek mi lot rɔ moc, bi pek in lot rɔ kä Roman numerals ɛ nyɔk kɛ loc kä min ca gɔ̱r kä min tɔt.""""""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/157,nus_Latn,python,"
def right_angle_triangle(a, b, c):
    '''Mi̱ ca pekni̱ gua̱th da̱ŋ diɔ̱k tin te kui̱c cuëëc kä diɔ̱k ti̱ gööl thöp. Mi̱ ci̱ pekni̱ da̱ŋ diɔ̱k ti̱ gööl rɔ̱ pa̱a̱r kɛrɔ̱, bi̱ loc ni̱ thuɔ̱k, mi̱ ci̱ pekni̱kɛ ɛ cuŋ, bi̱ loc ni̱ kac.'''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",,,
HumanEval/158,nus_Latn,python,"
def find_max(words):
    """"""Gɔ̱r ni̱ pa̱ŋciin mi̱ bi̱ rɔ lot kɛ li̱th ti̱ ŋuan ti̱ gööl. Kä li̱th bɛ tekɛ rie̱t ti̱ gööl. Lɔ̱k riet mi̱ tekɛ nämbär mi̱ di̱i̱t ɛlɔ̱ŋ kä bi̱ tekɛ karakterni̱ ti̱ gööl. Mi̱ ca karkɛtni̱ ti̱ ŋuan ti̱ gööl ti̱ gööl ti̱ gööl, lɔ̱kni̱ kɛl mi̱ bi̱ ben kɛ nhiam rɛy leksikɔgrapi̱kal ɣɔ̱ndiɛn.""""""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",,,
HumanEval/159,nus_Latn,python,"
def eat(number, need, remaining):
    """"""Ji̱n ɛ ji̱n la̱a̱t mi̱ ci̱ buɔth ɛ näk, kä ci̱ mi̱th ti̱ ŋuan cam, duŋdɛ ɣöö ɛn täämɛ go̱o̱ri̱ ɣöö bi̱ mi̱th ti̱ ŋuan cam kɛ ɣöö bi̱ mi̱th ca̱ŋ ɛmɔ kulɛ thuɔ̱k. Ji̱n bi̱ yi̱k loc ni̱ matdä mi̱ ce̱tkɛ [ pek in ci̱ cam kɛ kɔr mi̱eth, pek in ci̱ cam kɛ kɔr mi̱eth ] mi̱ /thiɛlɛ mi̱ ro̱ŋ kɛ karɔn ti̱ ci̱ duɔth, bi̱ ji̱n karɔn diaal tin ci̱ duɔth cam, duŋdɛ ɣöö bi̱ buɔth ŋot thi̱n. Cäät: * cam ((5, 6, 10) -> [11, 4] * cam ((4, 8, 9) -> [12, 1] * cam ((1, 10, 10) -> [11, 0] * cam ((2, 11, 5) -> [7, 0] Variables: @number: integer the number of carrots that you have eaten. @need: integer the number of carrots that you need to eat. @remaining: integer the number of carrots that exist in stock Constrain: * 0=0 = 0 * 0 = 0 * 0 = 0 * 0 = 0 * 0 = 0""""""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",,,
HumanEval/160,nus_Latn,python,"
def do_algebra(operator, operand):
    """"""Kä min nhiamdiɛn ɛ la̱t aljɛbra min di̱tni̱jɛn, kä min rɛwdɛ ɛ mi̱ la li̱t duŋ intejeri̱. La̱t aljɛbra min di̱tni̱jɛn: matkɛ (+) ŋuɔ̱k (- ) locni̱ (kuɔ̱mni̱) piny (*) dääk piny ( //) Exponentiation (**) cäätdɛ: operator['+', '*', '-'] matdä = [2, 3, 4, 5] min bi̱ ben = 2 + 3 * 4 - 5 => min bi̱ ben = 9 Note: Kä bär li̱thä duŋ operɛrä ɛ päär kɛ bär li̱thä duŋ operɛrä mi̱ naŋkɛ kɛl. Operɛrä ɛ mi̱ la li̱th mi̱ tekɛ nämbäri̱ ti̱ /ci̱kɛ negɛtib. Operɛrä tekɛ ɛni̱ operɛrä kɛl, kä operɛrä tekɛ ɛni̱ operɛräni̱ rɛw.""""""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
HumanEval/161,nus_Latn,python,"
def solve(s):
    """"""Mi̱ ca ji̱ ka̱m string s. mi̱ ɛ s[i] ɛ lɛt, locni̱ jɛ kä piny ɛ wä nhial kiɛ mi̱ ca locni̱ jɛ ɛ wä nhial, mi̱ /ci̱ mɔ ɛ jɛn, bi̱ kɛ ŋot kɛ mi̱ cie jɛn. Mi̱ thiɛlɛ lɛt ti̱ te rɛy string, locni̱ string. La̱t bi̱ yi̱k locni̱ min ci̱ ben raar kä string. Cäätni̱ locni̱ (((""1234"") = ""4321"" (((""ab"") = ""AB"" (solve ((""#a@C"") = ""#A@c"") """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",,,
HumanEval/162,nus_Latn,python,"
def string_to_md5(text):
    """"""Mi ca thärkä mi̱ caa ŋun 'text', luɔ̱c jɛ kɛ md5 mi̱ päär kɛ jɛ. Mi̱ 'text' ɛ mi̱ /thiɛl luɔt, luɔ̱c None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",,,
HumanEval/163,nus_Latn,python,"
def generate_integers(a, b):
    """"""Mi ca ŋun ɛ la mi̱ tekɛ nämbäri̱ ti̱ ŋuan a kɛnɛ b, locni̱ nämbäri̱ ti̱ te kam a kɛnɛ b, kɛ ɣöö bi̱ kɛ rɔ̱ rep. Cäät: generate_integers ((2, 8) => [2, 4, 6, 8] generate_integers ((8, 2) => [2, 4, 6, 8] generate_integers ((10, 14) => [] """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",,,
